
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08008000 <__gVectors>:
 8008000:	10010000 	andne	r0, r1, r0
 8008004:	08008bb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, fp, pc}
 8008008:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800800c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008010:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008014:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008018:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
	...
 800802c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008030:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008034:	00000000 	andeq	r0, r0, r0
 8008038:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800803c:	08018799 	stmdaeq	r1, {r0, r3, r4, r7, r8, r9, sl, pc}
 8008040:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008044:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008048:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800804c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008050:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008054:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008058:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800805c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008060:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008064:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008068:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800806c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008070:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008074:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008078:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800807c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008080:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008084:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008088:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800808c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008090:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008094:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008098:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800809c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080a0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080a4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080a8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080ac:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080b0:	08011635 	stmdaeq	r1, {r0, r2, r4, r5, r9, sl, ip}
 80080b4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080b8:	08013299 	stmdaeq	r1, {r0, r3, r4, r7, r9, ip, sp}
 80080bc:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080c0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080c4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080c8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080cc:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080d0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080d4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080d8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080dc:	0801161d 	stmdaeq	r1, {r0, r2, r3, r4, r9, sl, ip}
 80080e0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080e4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080e8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080ec:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080f0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080f4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080f8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080fc:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008100:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008104:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008108:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800810c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008110:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008114:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008118:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800811c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008120:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008124:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008128:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800812c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008130:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008134:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008138:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800813c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008140:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008144:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008148:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800814c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008150:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008154:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008158:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800815c:	08011629 	stmdaeq	r1, {r0, r3, r5, r9, sl, ip}
 8008160:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008164:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008168:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800816c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008170:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008174:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008178:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800817c:	00000000 	andeq	r0, r0, r0
 8008180:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008184:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008188:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800818c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008190:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008194:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008198:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800819c:	00000000 	andeq	r0, r0, r0
 80081a0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80081a4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80081a8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}

Disassembly of section .text:

080081ac <net_init>:
 80081ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ae:	9e08      	ldr	r6, [sp, #32]
 80081b0:	460c      	mov	r4, r1
 80081b2:	4921      	ldr	r1, [pc, #132]	; (8008238 <net_init+0x8c>)
 80081b4:	461d      	mov	r5, r3
 80081b6:	1e43      	subs	r3, r0, #1
 80081b8:	3005      	adds	r0, #5
 80081ba:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80081be:	f801 7b01 	strb.w	r7, [r1], #1
 80081c2:	4283      	cmp	r3, r0
 80081c4:	d1f9      	bne.n	80081ba <net_init+0xe>
 80081c6:	491d      	ldr	r1, [pc, #116]	; (800823c <net_init+0x90>)
 80081c8:	f104 000c 	add.w	r0, r4, #12
 80081cc:	4623      	mov	r3, r4
 80081ce:	f813 7b01 	ldrb.w	r7, [r3], #1
 80081d2:	f801 7b01 	strb.w	r7, [r1], #1
 80081d6:	4283      	cmp	r3, r0
 80081d8:	d1f9      	bne.n	80081ce <net_init+0x22>
 80081da:	4918      	ldr	r1, [pc, #96]	; (800823c <net_init+0x90>)
 80081dc:	4816      	ldr	r0, [pc, #88]	; (8008238 <net_init+0x8c>)
 80081de:	9201      	str	r2, [sp, #4]
 80081e0:	2700      	movs	r7, #0
 80081e2:	f000 f99d 	bl	8008520 <ip_init>
 80081e6:	4814      	ldr	r0, [pc, #80]	; (8008238 <net_init+0x8c>)
 80081e8:	f000 f83a 	bl	8008260 <rfc3927_init>
 80081ec:	7037      	strb	r7, [r6, #0]
 80081ee:	782b      	ldrb	r3, [r5, #0]
 80081f0:	9a01      	ldr	r2, [sp, #4]
 80081f2:	b153      	cbz	r3, 800820a <net_init+0x5e>
 80081f4:	4911      	ldr	r1, [pc, #68]	; (800823c <net_init+0x90>)
 80081f6:	4810      	ldr	r0, [pc, #64]	; (8008238 <net_init+0x8c>)
 80081f8:	f00e fac2 	bl	8016780 <dhcp_client>
 80081fc:	42b8      	cmp	r0, r7
 80081fe:	da04      	bge.n	800820a <net_init+0x5e>
 8008200:	480e      	ldr	r0, [pc, #56]	; (800823c <net_init+0x90>)
 8008202:	702f      	strb	r7, [r5, #0]
 8008204:	f00c fc7e 	bl	8014b04 <rfc3927>
 8008208:	7030      	strb	r0, [r6, #0]
 800820a:	490c      	ldr	r1, [pc, #48]	; (800823c <net_init+0x90>)
 800820c:	480a      	ldr	r0, [pc, #40]	; (8008238 <net_init+0x8c>)
 800820e:	f000 f883 	bl	8008318 <arp_init>
 8008212:	480a      	ldr	r0, [pc, #40]	; (800823c <net_init+0x90>)
 8008214:	f00e fcce 	bl	8016bb4 <ip_set_ip>
 8008218:	f000 f82e 	bl	8008278 <tcp_init>
 800821c:	4a07      	ldr	r2, [pc, #28]	; (800823c <net_init+0x90>)
 800821e:	1e63      	subs	r3, r4, #1
 8008220:	340b      	adds	r4, #11
 8008222:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008226:	f803 1f01 	strb.w	r1, [r3, #1]!
 800822a:	429c      	cmp	r4, r3
 800822c:	d1f9      	bne.n	8008222 <net_init+0x76>
 800822e:	782a      	ldrb	r2, [r5, #0]
 8008230:	4b03      	ldr	r3, [pc, #12]	; (8008240 <net_init+0x94>)
 8008232:	701a      	strb	r2, [r3, #0]
 8008234:	b003      	add	sp, #12
 8008236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008238:	200092f4 	strdcs	r9, [r0], -r4
 800823c:	200092e8 	andcs	r9, r0, r8, ror #5
 8008240:	200092fa 	strdcs	r9, [r0], -sl

08008244 <net_shutdown>:
 8008244:	b508      	push	{r3, lr}
 8008246:	f000 f976 	bl	8008536 <ip_shutdown>
 800824a:	4b04      	ldr	r3, [pc, #16]	; (800825c <net_shutdown+0x18>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	b11b      	cbz	r3, 8008258 <net_shutdown+0x14>
 8008250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008254:	f00e bb9c 	b.w	8016990 <dhcp_client_release>
 8008258:	bd08      	pop	{r3, pc}
 800825a:	bf00      	nop
 800825c:	200092fa 	strdcs	r9, [r0], -sl

08008260 <rfc3927_init>:
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <rfc3927_init+0x14>)
 8008262:	1d82      	adds	r2, r0, #6
 8008264:	4290      	cmp	r0, r2
 8008266:	d100      	bne.n	800826a <rfc3927_init+0xa>
 8008268:	4770      	bx	lr
 800826a:	f810 1b01 	ldrb.w	r1, [r0], #1
 800826e:	f803 1b01 	strb.w	r1, [r3], #1
 8008272:	e7f7      	b.n	8008264 <rfc3927_init+0x4>
 8008274:	20009304 	andcs	r9, r0, r4, lsl #6

08008278 <tcp_init>:
 8008278:	b513      	push	{r0, r1, r4, lr}
 800827a:	4c0c      	ldr	r4, [pc, #48]	; (80082ac <tcp_init+0x34>)
 800827c:	490c      	ldr	r1, [pc, #48]	; (80082b0 <tcp_init+0x38>)
 800827e:	2206      	movs	r2, #6
 8008280:	18a0      	adds	r0, r4, r2
 8008282:	f00c fc99 	bl	8014bb8 <memcpy.isra.0>
 8008286:	2308      	movs	r3, #8
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <tcp_init+0x3c>)
 800828c:	2204      	movs	r2, #4
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	eb0d 0102 	add.w	r1, sp, r2
 8008296:	f104 001a 	add.w	r0, r4, #26
 800829a:	f00c fc8d 	bl	8014bb8 <memcpy.isra.0>
 800829e:	2345      	movs	r3, #69	; 0x45
 80082a0:	81e3      	strh	r3, [r4, #14]
 80082a2:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <tcp_init+0x40>)
 80082a4:	6163      	str	r3, [r4, #20]
 80082a6:	b002      	add	sp, #8
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	bf00      	nop
 80082ac:	10000000 	andne	r0, r0, r0
 80082b0:	200092f4 	strdcs	r9, [r0], -r4
 80082b4:	200092e8 	andcs	r9, r0, r8, ror #5
 80082b8:	06400040 	strbeq	r0, [r0], -r0, asr #32

080082bc <udp_init>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <udp_init+0x40>)
 80082c0:	460e      	mov	r6, r1
 80082c2:	490f      	ldr	r1, [pc, #60]	; (8008300 <udp_init+0x44>)
 80082c4:	2408      	movs	r4, #8
 80082c6:	2200      	movs	r2, #0
 80082c8:	3c01      	subs	r4, #1
 80082ca:	801a      	strh	r2, [r3, #0]
 80082cc:	805a      	strh	r2, [r3, #2]
 80082ce:	f841 2b04 	str.w	r2, [r1], #4
 80082d2:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 80082d6:	d1f7      	bne.n	80082c8 <udp_init+0xc>
 80082d8:	4d0a      	ldr	r5, [pc, #40]	; (8008304 <udp_init+0x48>)
 80082da:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <udp_init+0x4c>)
 80082dc:	2206      	movs	r2, #6
 80082de:	4601      	mov	r1, r0
 80082e0:	18a8      	adds	r0, r5, r2
 80082e2:	801c      	strh	r4, [r3, #0]
 80082e4:	f00c fe02 	bl	8014eec <memcpy.isra.0>
 80082e8:	4b08      	ldr	r3, [pc, #32]	; (800830c <udp_init+0x50>)
 80082ea:	60eb      	str	r3, [r5, #12]
 80082ec:	4630      	mov	r0, r6
 80082ee:	4b08      	ldr	r3, [pc, #32]	; (8008310 <udp_init+0x54>)
 80082f0:	616b      	str	r3, [r5, #20]
 80082f2:	f00c fe23 	bl	8014f3c <udp_set_ip>
 80082f6:	852c      	strh	r4, [r5, #40]	; 0x28
 80082f8:	bd70      	pop	{r4, r5, r6, pc}
 80082fa:	bf00      	nop
 80082fc:	20009344 	andcs	r9, r0, r4, asr #6
 8008300:	20009324 	andcs	r9, r0, r4, lsr #6
 8008304:	2000efe4 	andcs	lr, r0, r4, ror #31
 8008308:	20009320 	andcs	r9, r0, r0, lsr #6
 800830c:	00450008 	subeq	r0, r5, r8
 8008310:	11400040 	cmpne	r0, r0, asr #32

08008314 <udp_shutdown>:
 8008314:	4770      	bx	lr
	...

08008318 <arp_init>:
 8008318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800831c:	460d      	mov	r5, r1
 800831e:	4604      	mov	r4, r0
 8008320:	f000 f876 	bl	8008410 <arp_cache_init>
 8008324:	2206      	movs	r2, #6
 8008326:	482f      	ldr	r0, [pc, #188]	; (80083e4 <arp_init+0xcc>)
 8008328:	682f      	ldr	r7, [r5, #0]
 800832a:	4621      	mov	r1, r4
 800832c:	f00e f8aa 	bl	8016484 <memcpy.isra.0>
 8008330:	4b2d      	ldr	r3, [pc, #180]	; (80083e8 <arp_init+0xd0>)
 8008332:	2507      	movs	r5, #7
 8008334:	461e      	mov	r6, r3
 8008336:	22ff      	movs	r2, #255	; 0xff
 8008338:	3d01      	subs	r5, #1
 800833a:	d146      	bne.n	80083ca <arp_init+0xb2>
 800833c:	4b2b      	ldr	r3, [pc, #172]	; (80083ec <arp_init+0xd4>)
 800833e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800840c <arp_init+0xf4>
 8008342:	482b      	ldr	r0, [pc, #172]	; (80083f0 <arp_init+0xd8>)
 8008344:	e9c6 3803 	strd	r3, r8, [r6, #12]
 8008348:	2206      	movs	r2, #6
 800834a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800834e:	4621      	mov	r1, r4
 8008350:	82b3      	strh	r3, [r6, #20]
 8008352:	f00e f897 	bl	8016484 <memcpy.isra.0>
 8008356:	4a27      	ldr	r2, [pc, #156]	; (80083f4 <arp_init+0xdc>)
 8008358:	61f7      	str	r7, [r6, #28]
 800835a:	2307      	movs	r3, #7
 800835c:	3b01      	subs	r3, #1
 800835e:	d137      	bne.n	80083d0 <arp_init+0xb8>
 8008360:	2206      	movs	r2, #6
 8008362:	4621      	mov	r1, r4
 8008364:	4824      	ldr	r0, [pc, #144]	; (80083f8 <arp_init+0xe0>)
 8008366:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 800836a:	f00e f88b 	bl	8016484 <memcpy.isra.0>
 800836e:	4a23      	ldr	r2, [pc, #140]	; (80083fc <arp_init+0xe4>)
 8008370:	2306      	movs	r3, #6
 8008372:	4615      	mov	r5, r2
 8008374:	21ff      	movs	r1, #255	; 0xff
 8008376:	3b01      	subs	r3, #1
 8008378:	d22d      	bcs.n	80083d6 <arp_init+0xbe>
 800837a:	4b1c      	ldr	r3, [pc, #112]	; (80083ec <arp_init+0xd4>)
 800837c:	4820      	ldr	r0, [pc, #128]	; (8008400 <arp_init+0xe8>)
 800837e:	e9c5 3803 	strd	r3, r8, [r5, #12]
 8008382:	2206      	movs	r2, #6
 8008384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008388:	4621      	mov	r1, r4
 800838a:	82ab      	strh	r3, [r5, #20]
 800838c:	f00e f87a 	bl	8016484 <memcpy.isra.0>
 8008390:	4a1c      	ldr	r2, [pc, #112]	; (8008404 <arp_init+0xec>)
 8008392:	61ef      	str	r7, [r5, #28]
 8008394:	2307      	movs	r3, #7
 8008396:	2100      	movs	r1, #0
 8008398:	3b01      	subs	r3, #1
 800839a:	d11f      	bne.n	80083dc <arp_init+0xc4>
 800839c:	4d1a      	ldr	r5, [pc, #104]	; (8008408 <arp_init+0xf0>)
 800839e:	2206      	movs	r2, #6
 80083a0:	18a8      	adds	r0, r5, r2
 80083a2:	4621      	mov	r1, r4
 80083a4:	f00e f86e 	bl	8016484 <memcpy.isra.0>
 80083a8:	4b10      	ldr	r3, [pc, #64]	; (80083ec <arp_init+0xd4>)
 80083aa:	4621      	mov	r1, r4
 80083ac:	e9c5 3803 	strd	r3, r8, [r5, #12]
 80083b0:	f105 0016 	add.w	r0, r5, #22
 80083b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083b8:	2206      	movs	r2, #6
 80083ba:	82ab      	strh	r3, [r5, #20]
 80083bc:	f00e f862 	bl	8016484 <memcpy.isra.0>
 80083c0:	61ef      	str	r7, [r5, #28]
 80083c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083c6:	f00e b867 	b.w	8016498 <arp_announce>
 80083ca:	f803 2b01 	strb.w	r2, [r3], #1
 80083ce:	e7b3      	b.n	8008338 <arp_init+0x20>
 80083d0:	f802 5b01 	strb.w	r5, [r2], #1
 80083d4:	e7c2      	b.n	800835c <arp_init+0x44>
 80083d6:	f802 1b01 	strb.w	r1, [r2], #1
 80083da:	e7cc      	b.n	8008376 <arp_init+0x5e>
 80083dc:	f802 1b01 	strb.w	r1, [r2], #1
 80083e0:	e7da      	b.n	8008398 <arp_init+0x80>
 80083e2:	bf00      	nop
 80083e4:	2000fa1a 	andcs	pc, r0, sl, lsl sl	; <UNPREDICTABLE>
 80083e8:	2000fa14 	andcs	pc, r0, r4, lsl sl	; <UNPREDICTABLE>
 80083ec:	01000608 	tsteq	r0, r8, lsl #12
 80083f0:	2000fa2a 	andcs	pc, r0, sl, lsr #20
 80083f4:	2000fa34 	andcs	pc, r0, r4, lsr sl	; <UNPREDICTABLE>
 80083f8:	2000fa72 	andcs	pc, r0, r2, ror sl	; <UNPREDICTABLE>
 80083fc:	2000fa6c 	andcs	pc, r0, ip, ror #20
 8008400:	2000fa82 	andcs	pc, r0, r2, lsl #21
 8008404:	2000fa8c 	andcs	pc, r0, ip, lsl #21
 8008408:	2000fa40 	andcs	pc, r0, r0, asr #20
 800840c:	04060008 	streq	r0, [r6], #-8

08008410 <arp_cache_init>:
 8008410:	4a0a      	ldr	r2, [pc, #40]	; (800843c <arp_cache_init+0x2c>)
 8008412:	2300      	movs	r3, #0
 8008414:	b510      	push	{r4, lr}
 8008416:	f822 3b08 	strh.w	r3, [r2], #8
 800841a:	4618      	mov	r0, r3
 800841c:	4611      	mov	r1, r2
 800841e:	f842 0c04 	str.w	r0, [r2, #-4]
 8008422:	1d94      	adds	r4, r2, #6
 8008424:	42a1      	cmp	r1, r4
 8008426:	d105      	bne.n	8008434 <arp_cache_init+0x24>
 8008428:	3303      	adds	r3, #3
 800842a:	2b60      	cmp	r3, #96	; 0x60
 800842c:	f102 020c 	add.w	r2, r2, #12
 8008430:	d1f4      	bne.n	800841c <arp_cache_init+0xc>
 8008432:	bd10      	pop	{r4, pc}
 8008434:	f801 0b01 	strb.w	r0, [r1], #1
 8008438:	e7f4      	b.n	8008424 <arp_cache_init+0x14>
 800843a:	bf00      	nop
 800843c:	100011a4 	andne	r1, r0, r4, lsr #3

08008440 <igmp_init>:
 8008440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008444:	2200      	movs	r2, #0
 8008446:	4b26      	ldr	r3, [pc, #152]	; (80084e0 <igmp_init+0xa0>)
 8008448:	4605      	mov	r5, r0
 800844a:	4608      	mov	r0, r1
 800844c:	4611      	mov	r1, r2
 800844e:	f103 0408 	add.w	r4, r3, #8
 8008452:	42a3      	cmp	r3, r4
 8008454:	d140      	bne.n	80084d8 <igmp_init+0x98>
 8008456:	3201      	adds	r2, #1
 8008458:	2a24      	cmp	r2, #36	; 0x24
 800845a:	d1f8      	bne.n	800844e <igmp_init+0xe>
 800845c:	4c21      	ldr	r4, [pc, #132]	; (80084e4 <igmp_init+0xa4>)
 800845e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80084f0 <igmp_init+0xb0>
 8008462:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80084f4 <igmp_init+0xb4>
 8008466:	2600      	movs	r6, #0
 8008468:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
 800846c:	8726      	strh	r6, [r4, #56]	; 0x38
 800846e:	f00e fb05 	bl	8016a7c <igmp_set_ip>
 8008472:	2301      	movs	r3, #1
 8008474:	8023      	strh	r3, [r4, #0]
 8008476:	235e      	movs	r3, #94	; 0x5e
 8008478:	70a3      	strb	r3, [r4, #2]
 800847a:	2206      	movs	r2, #6
 800847c:	4629      	mov	r1, r5
 800847e:	f104 000e 	add.w	r0, r4, #14
 8008482:	f00e fab3 	bl	80169ec <memcpy.isra.0>
 8008486:	f240 4394 	movw	r3, #1172	; 0x494
 800848a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800848c:	2316      	movs	r3, #22
 800848e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8008490:	4b15      	ldr	r3, [pc, #84]	; (80084e8 <igmp_init+0xa8>)
 8008492:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008498:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800849c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80084a0:	2206      	movs	r2, #6
 80084a2:	f8c4 901c 	str.w	r9, [r4, #28]
 80084a6:	f8c4 8014 	str.w	r8, [r4, #20]
 80084aa:	4629      	mov	r1, r5
 80084ac:	f104 0042 	add.w	r0, r4, #66	; 0x42
 80084b0:	8327      	strh	r7, [r4, #24]
 80084b2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80084b4:	f00e fa9a 	bl	80169ec <memcpy.isra.0>
 80084b8:	23e0      	movs	r3, #224	; 0xe0
 80084ba:	4a0c      	ldr	r2, [pc, #48]	; (80084ec <igmp_init+0xac>)
 80084bc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80084c0:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 80084c4:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
 80084c8:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
 80084cc:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
 80084d0:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
 80084d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084d8:	f803 1b01 	strb.w	r1, [r3], #1
 80084dc:	e7b9      	b.n	8008452 <igmp_init+0x12>
 80084de:	bf00      	nop
 80084e0:	10001394 	mulne	r0, r4, r3
 80084e4:	10001328 	andne	r1, r0, r8, lsr #6
 80084e8:	005e0001 	subseq	r0, lr, r1
 80084ec:	04940200 	ldreq	r0, [r4], #512	; 0x200
 80084f0:	02010040 	andeq	r0, r1, #64	; 0x40
 80084f4:	00460008 	subeq	r0, r6, r8

080084f8 <igmp_shutdown>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	2500      	movs	r5, #0
 80084fc:	4c07      	ldr	r4, [pc, #28]	; (800851c <igmp_shutdown+0x24>)
 80084fe:	462e      	mov	r6, r5
 8008500:	6820      	ldr	r0, [r4, #0]
 8008502:	b120      	cbz	r0, 800850e <igmp_shutdown+0x16>
 8008504:	f00e fb16 	bl	8016b34 <igmp_leave>
 8008508:	6026      	str	r6, [r4, #0]
 800850a:	7166      	strb	r6, [r4, #5]
 800850c:	7126      	strb	r6, [r4, #4]
 800850e:	3501      	adds	r5, #1
 8008510:	2d24      	cmp	r5, #36	; 0x24
 8008512:	f104 0408 	add.w	r4, r4, #8
 8008516:	d1f3      	bne.n	8008500 <igmp_shutdown+0x8>
 8008518:	bd70      	pop	{r4, r5, r6, pc}
 800851a:	bf00      	nop
 800851c:	10001394 	mulne	r0, r4, r3

08008520 <ip_init>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4604      	mov	r4, r0
 8008524:	460d      	mov	r5, r1
 8008526:	f7ff fec9 	bl	80082bc <udp_init>
 800852a:	4629      	mov	r1, r5
 800852c:	4620      	mov	r0, r4
 800852e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008532:	f7ff bf85 	b.w	8008440 <igmp_init>

08008536 <ip_shutdown>:
 8008536:	b508      	push	{r3, lr}
 8008538:	f7ff ffde 	bl	80084f8 <igmp_shutdown>
 800853c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008540:	f7ff bee8 	b.w	8008314 <udp_shutdown>

08008544 <console_init>:
 8008544:	b508      	push	{r3, lr}
 8008546:	f010 f8cf 	bl	80186e8 <uart0_init>
 800854a:	4804      	ldr	r0, [pc, #16]	; (800855c <console_init+0x18>)
 800854c:	f010 f8f6 	bl	801873c <uart0_puts>
 8008550:	4803      	ldr	r0, [pc, #12]	; (8008560 <console_init+0x1c>)
 8008552:	f010 f8f3 	bl	801873c <uart0_puts>
 8008556:	2000      	movs	r0, #0
 8008558:	bd08      	pop	{r3, pc}
 800855a:	bf00      	nop
 800855c:	0801aa46 	stmdaeq	r1, {r1, r2, r6, r9, fp, sp, pc}
 8008560:	0801df30 	stmdaeq	r1, {r4, r5, r8, r9, sl, fp, ip, lr, pc}

08008564 <net_handle>:
 8008564:	b510      	push	{r4, lr}
 8008566:	4c0c      	ldr	r4, [pc, #48]	; (8008598 <net_handle+0x34>)
 8008568:	4620      	mov	r0, r4
 800856a:	f010 ff47 	bl	80193fc <emac_eth_recv>
 800856e:	2800      	cmp	r0, #0
 8008570:	dd07      	ble.n	8008582 <net_handle+0x1e>
 8008572:	6820      	ldr	r0, [r4, #0]
 8008574:	8983      	ldrh	r3, [r0, #12]
 8008576:	2b08      	cmp	r3, #8
 8008578:	d107      	bne.n	800858a <net_handle+0x26>
 800857a:	f000 faab 	bl	8008ad4 <ip_handle>
 800857e:	f010 ff51 	bl	8019424 <emac_free_pkt>
 8008582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008586:	f00c baad 	b.w	8014ae4 <net_timers_run>
 800858a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800858e:	d1f6      	bne.n	800857e <net_handle+0x1a>
 8008590:	f000 fa44 	bl	8008a1c <arp_handle>
 8008594:	e7f3      	b.n	800857e <net_handle+0x1a>
 8008596:	bf00      	nop
 8008598:	200092fc 	strdcs	r9, [r0], -ip

0800859c <tcp_handle>:
 800859c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80085a2:	f8b0 8010 	ldrh.w	r8, [r0, #16]
 80085a6:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 80085aa:	4cbd      	ldr	r4, [pc, #756]	; (80088a0 <tcp_handle+0x304>)
 80085ac:	ba5b      	rev16	r3, r3
 80085ae:	8443      	strh	r3, [r0, #34]	; 0x22
 80085b0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80085b2:	4605      	mov	r5, r0
 80085b4:	ba5b      	rev16	r3, r3
 80085b6:	8483      	strh	r3, [r0, #36]	; 0x24
 80085b8:	f00c fb08 	bl	8014bcc <_bswap32>
 80085bc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80085be:	f8b4 25f0 	ldrh.w	r2, [r4, #1520]	; 0x5f0
 80085c2:	ba5b      	rev16	r3, r3
 80085c4:	862b      	strh	r3, [r5, #48]	; 0x30
 80085c6:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80085c8:	ba5b      	rev16	r3, r3
 80085ca:	86ab      	strh	r3, [r5, #52]	; 0x34
 80085cc:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d152      	bne.n	8008678 <tcp_handle+0xdc>
 80085d2:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d00f      	beq.n	80085fa <tcp_handle+0x5e>
 80085da:	2204      	movs	r2, #4
 80085dc:	f105 011a 	add.w	r1, r5, #26
 80085e0:	4668      	mov	r0, sp
 80085e2:	f00c fae9 	bl	8014bb8 <memcpy.isra.0>
 80085e6:	f8b4 25f2 	ldrh.w	r2, [r4, #1522]	; 0x5f2
 80085ea:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d143      	bne.n	8008678 <tcp_handle+0xdc>
 80085f0:	f8d4 25f4 	ldr.w	r2, [r4, #1524]	; 0x5f4
 80085f4:	9b00      	ldr	r3, [sp, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d13e      	bne.n	8008678 <tcp_handle+0xdc>
 80085fa:	2204      	movs	r2, #4
 80085fc:	eb0d 0002 	add.w	r0, sp, r2
 8008600:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8008604:	f00c fad8 	bl	8014bb8 <memcpy.isra.0>
 8008608:	2204      	movs	r2, #4
 800860a:	eb0d 0002 	add.w	r0, sp, r2
 800860e:	f105 0126 	add.w	r1, r5, #38	; 0x26
 8008612:	9e01      	ldr	r6, [sp, #4]
 8008614:	f00c fad0 	bl	8014bb8 <memcpy.isra.0>
 8008618:	f894 2630 	ldrb.w	r2, [r4, #1584]	; 0x630
 800861c:	9f01      	ldr	r7, [sp, #4]
 800861e:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 8008622:	2a01      	cmp	r2, #1
 8008624:	d01e      	beq.n	8008664 <tcp_handle+0xc8>
 8008626:	1ed3      	subs	r3, r2, #3
 8008628:	2b07      	cmp	r3, #7
 800862a:	d825      	bhi.n	8008678 <tcp_handle+0xdc>
 800862c:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8008630:	f64f 71ec 	movw	r1, #65516	; 0xffec
 8008634:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8008638:	fa98 f898 	rev16.w	r8, r8
 800863c:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
 8008640:	f8b4 1628 	ldrh.w	r1, [r4, #1576]	; 0x628
 8008644:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 8008648:	fa13 f888 	uxtah	r8, r3, r8
 800864c:	fa1f f888 	uxth.w	r8, r8
 8008650:	2900      	cmp	r1, #0
 8008652:	d14d      	bne.n	80086f0 <tcp_handle+0x154>
 8008654:	f1b8 0f00 	cmp.w	r8, #0
 8008658:	d178      	bne.n	800874c <tcp_handle+0x1b0>
 800865a:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 800865e:	42bb      	cmp	r3, r7
 8008660:	d174      	bne.n	800874c <tcp_handle+0x1b0>
 8008662:	e053      	b.n	800870c <tcp_handle+0x170>
 8008664:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8008668:	075a      	lsls	r2, r3, #29
 800866a:	d405      	bmi.n	8008678 <tcp_handle+0xdc>
 800866c:	06d8      	lsls	r0, r3, #27
 800866e:	d506      	bpl.n	800867e <tcp_handle+0xe2>
 8008670:	498c      	ldr	r1, [pc, #560]	; (80088a4 <tcp_handle+0x308>)
 8008672:	4628      	mov	r0, r5
 8008674:	f00c fb74 	bl	8014d60 <_send_reset>
 8008678:	b004      	add	sp, #16
 800867a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867e:	0799      	lsls	r1, r3, #30
 8008680:	d5fa      	bpl.n	8008678 <tcp_handle+0xdc>
 8008682:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8008686:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800868a:	f105 011a 	add.w	r1, r5, #26
 800868e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008692:	4668      	mov	r0, sp
 8008694:	2204      	movs	r2, #4
 8008696:	f8a4 35f2 	strh.w	r3, [r4, #1522]	; 0x5f2
 800869a:	f00c fa8d 	bl	8014bb8 <memcpy.isra.0>
 800869e:	2206      	movs	r2, #6
 80086a0:	9b00      	ldr	r3, [sp, #0]
 80086a2:	4881      	ldr	r0, [pc, #516]	; (80088a8 <tcp_handle+0x30c>)
 80086a4:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
 80086a8:	18a9      	adds	r1, r5, r2
 80086aa:	f00c fa85 	bl	8014bb8 <memcpy.isra.0>
 80086ae:	f8d4 2618 	ldr.w	r2, [r4, #1560]	; 0x618
 80086b2:	487c      	ldr	r0, [pc, #496]	; (80088a4 <tcp_handle+0x308>)
 80086b4:	f8c4 762c 	str.w	r7, [r4, #1580]	; 0x62c
 80086b8:	1c7b      	adds	r3, r7, #1
 80086ba:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80086be:	f8c4 3624 	str.w	r3, [r4, #1572]	; 0x624
 80086c2:	a901      	add	r1, sp, #4
 80086c4:	2312      	movs	r3, #18
 80086c6:	f88d 300c 	strb.w	r3, [sp, #12]
 80086ca:	f8c4 a608 	str.w	sl, [r4, #1544]	; 0x608
 80086ce:	f8c4 7610 	str.w	r7, [r4, #1552]	; 0x610
 80086d2:	f8c4 6614 	str.w	r6, [r4, #1556]	; 0x614
 80086d6:	f00c fa9f 	bl	8014c18 <_tcp_send_package>
 80086da:	f8d4 3618 	ldr.w	r3, [r4, #1560]	; 0x618
 80086de:	f8c4 3600 	str.w	r3, [r4, #1536]	; 0x600
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	f8c4 2604 	str.w	r2, [r4, #1540]	; 0x604
 80086e8:	2303      	movs	r3, #3
 80086ea:	f884 3630 	strb.w	r3, [r4, #1584]	; 0x630
 80086ee:	e7c3      	b.n	8008678 <tcp_handle+0xdc>
 80086f0:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 80086f4:	eba3 0c07 	sub.w	ip, r3, r7
 80086f8:	f1b8 0f00 	cmp.w	r8, #0
 80086fc:	d10e      	bne.n	800871c <tcp_handle+0x180>
 80086fe:	f1bc 0f00 	cmp.w	ip, #0
 8008702:	dc23      	bgt.n	800874c <tcp_handle+0x1b0>
 8008704:	1afb      	subs	r3, r7, r3
 8008706:	1a5b      	subs	r3, r3, r1
 8008708:	2b00      	cmp	r3, #0
 800870a:	da1f      	bge.n	800874c <tcp_handle+0x1b0>
 800870c:	0743      	lsls	r3, r0, #29
 800870e:	d534      	bpl.n	800877a <tcp_handle+0x1de>
 8008710:	f8b4 15f0 	ldrh.w	r1, [r4, #1520]	; 0x5f0
 8008714:	4863      	ldr	r0, [pc, #396]	; (80088a4 <tcp_handle+0x308>)
 8008716:	f00c fa35 	bl	8014b84 <_init_tcb>
 800871a:	e7ad      	b.n	8008678 <tcp_handle+0xdc>
 800871c:	f1bc 0f00 	cmp.w	ip, #0
 8008720:	dc06      	bgt.n	8008730 <tcp_handle+0x194>
 8008722:	eba7 0c03 	sub.w	ip, r7, r3
 8008726:	ebac 0c01 	sub.w	ip, ip, r1
 800872a:	f1bc 0f00 	cmp.w	ip, #0
 800872e:	dbed      	blt.n	800870c <tcp_handle+0x170>
 8008730:	eb08 0c07 	add.w	ip, r8, r7
 8008734:	f103 0e01 	add.w	lr, r3, #1
 8008738:	ebae 0e0c 	sub.w	lr, lr, ip
 800873c:	f1be 0f00 	cmp.w	lr, #0
 8008740:	dc04      	bgt.n	800874c <tcp_handle+0x1b0>
 8008742:	43db      	mvns	r3, r3
 8008744:	1a5b      	subs	r3, r3, r1
 8008746:	eb13 0f0c 	cmn.w	r3, ip
 800874a:	d4df      	bmi.n	800870c <tcp_handle+0x170>
 800874c:	0742      	lsls	r2, r0, #29
 800874e:	d506      	bpl.n	800875e <tcp_handle+0x1c2>
 8008750:	f8b4 15f0 	ldrh.w	r1, [r4, #1520]	; 0x5f0
 8008754:	4853      	ldr	r0, [pc, #332]	; (80088a4 <tcp_handle+0x308>)
 8008756:	f00c fa15 	bl	8014b84 <_init_tcb>
 800875a:	2301      	movs	r3, #1
 800875c:	e7c5      	b.n	80086ea <tcp_handle+0x14e>
 800875e:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8008762:	9301      	str	r3, [sp, #4]
 8008764:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 8008768:	9302      	str	r3, [sp, #8]
 800876a:	484e      	ldr	r0, [pc, #312]	; (80088a4 <tcp_handle+0x308>)
 800876c:	2310      	movs	r3, #16
 800876e:	a901      	add	r1, sp, #4
 8008770:	f88d 300c 	strb.w	r3, [sp, #12]
 8008774:	f00c fa50 	bl	8014c18 <_tcp_send_package>
 8008778:	e77e      	b.n	8008678 <tcp_handle+0xdc>
 800877a:	0781      	lsls	r1, r0, #30
 800877c:	d505      	bpl.n	800878a <tcp_handle+0x1ee>
 800877e:	2a03      	cmp	r2, #3
 8008780:	d0eb      	beq.n	800875a <tcp_handle+0x1be>
 8008782:	4948      	ldr	r1, [pc, #288]	; (80088a4 <tcp_handle+0x308>)
 8008784:	4628      	mov	r0, r5
 8008786:	f00c faeb 	bl	8014d60 <_send_reset>
 800878a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800878e:	06da      	lsls	r2, r3, #27
 8008790:	f57f af72 	bpl.w	8008678 <tcp_handle+0xdc>
 8008794:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 8008798:	3b03      	subs	r3, #3
 800879a:	2b07      	cmp	r3, #7
 800879c:	d81d      	bhi.n	80087da <tcp_handle+0x23e>
 800879e:	e8df f003 	tbb	[pc, r3]
 80087a2:	87878704 	strhi	r8, [r7, r4, lsl #14]
 80087a6:	c5ba8787 	ldrgt	r8, [sl, #1927]!	; 0x787
 80087aa:	f8d4 3600 	ldr.w	r3, [r4, #1536]	; 0x600
 80087ae:	1b9b      	subs	r3, r3, r6
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dc0e      	bgt.n	80087d2 <tcp_handle+0x236>
 80087b4:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 80087b8:	1af3      	subs	r3, r6, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	dc09      	bgt.n	80087d2 <tcp_handle+0x236>
 80087be:	f8c4 a608 	str.w	sl, [r4, #1544]	; 0x608
 80087c2:	f8c4 7610 	str.w	r7, [r4, #1552]	; 0x610
 80087c6:	f8c4 6614 	str.w	r6, [r4, #1556]	; 0x614
 80087ca:	f8c4 6600 	str.w	r6, [r4, #1536]	; 0x600
 80087ce:	2304      	movs	r3, #4
 80087d0:	e78b      	b.n	80086ea <tcp_handle+0x14e>
 80087d2:	4934      	ldr	r1, [pc, #208]	; (80088a4 <tcp_handle+0x308>)
 80087d4:	4628      	mov	r0, r5
 80087d6:	f00c fac3 	bl	8014d60 <_send_reset>
 80087da:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 80087de:	3b04      	subs	r3, #4
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d837      	bhi.n	8008854 <tcp_handle+0x2b8>
 80087e4:	f1b8 0f00 	cmp.w	r8, #0
 80087e8:	d034      	beq.n	8008854 <tcp_handle+0x2b8>
 80087ea:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 80087ee:	42bb      	cmp	r3, r7
 80087f0:	f040 80ad 	bne.w	800894e <tcp_handle+0x3b2>
 80087f4:	f8b4 7634 	ldrh.w	r7, [r4, #1588]	; 0x634
 80087f8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80088ac <tcp_handle+0x310>
 80087fc:	f240 53b6 	movw	r3, #1462	; 0x5b6
 8008800:	435f      	muls	r7, r3
 8008802:	1d38      	adds	r0, r7, #4
 8008804:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8008808:	4642      	mov	r2, r8
 800880a:	4449      	add	r1, r9
 800880c:	4450      	add	r0, sl
 800880e:	f00c f9d3 	bl	8014bb8 <memcpy.isra.0>
 8008812:	f8b4 2628 	ldrh.w	r2, [r4, #1576]	; 0x628
 8008816:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 800881a:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800881e:	f8a4 2628 	strh.w	r2, [r4, #1576]	; 0x628
 8008822:	4427      	add	r7, r4
 8008824:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 8008828:	f8a7 8bec 	strh.w	r8, [r7, #3052]	; 0xbec
 800882c:	4443      	add	r3, r8
 800882e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008832:	f8c4 3624 	str.w	r3, [r4, #1572]	; 0x624
 8008836:	a901      	add	r1, sp, #4
 8008838:	2310      	movs	r3, #16
 800883a:	f1aa 0044 	sub.w	r0, sl, #68	; 0x44
 800883e:	f88d 300c 	strb.w	r3, [sp, #12]
 8008842:	f00c f9e9 	bl	8014c18 <_tcp_send_package>
 8008846:	f8b4 3634 	ldrh.w	r3, [r4, #1588]	; 0x634
 800884a:	3301      	adds	r3, #1
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	f8a4 3634 	strh.w	r3, [r4, #1588]	; 0x634
 8008854:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 8008858:	2b02      	cmp	r3, #2
 800885a:	f67f af0d 	bls.w	8008678 <tcp_handle+0xdc>
 800885e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8008862:	07db      	lsls	r3, r3, #31
 8008864:	f57f af08 	bpl.w	8008678 <tcp_handle+0xdc>
 8008868:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 800886c:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 8008870:	480c      	ldr	r0, [pc, #48]	; (80088a4 <tcp_handle+0x308>)
 8008872:	3301      	adds	r3, #1
 8008874:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008878:	f8c4 3624 	str.w	r3, [r4, #1572]	; 0x624
 800887c:	a901      	add	r1, sp, #4
 800887e:	2310      	movs	r3, #16
 8008880:	f88d 300c 	strb.w	r3, [sp, #12]
 8008884:	f00c f9c8 	bl	8014c18 <_tcp_send_package>
 8008888:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 800888c:	2b05      	cmp	r3, #5
 800888e:	d067      	beq.n	8008960 <tcp_handle+0x3c4>
 8008890:	d861      	bhi.n	8008956 <tcp_handle+0x3ba>
 8008892:	3b03      	subs	r3, #3
 8008894:	2b01      	cmp	r3, #1
 8008896:	f63f aeef 	bhi.w	8008678 <tcp_handle+0xdc>
 800889a:	2307      	movs	r3, #7
 800889c:	e725      	b.n	80086ea <tcp_handle+0x14e>
 800889e:	bf00      	nop
 80088a0:	10000000 	andne	r0, r0, r0
 80088a4:	100005f0 	strdne	r0, [r0], -r0	; <UNPREDICTABLE>
 80088a8:	100005f8 	strdne	r0, [r0], -r8
 80088ac:	10000634 	andne	r0, r0, r4, lsr r6
 80088b0:	f8d4 3600 	ldr.w	r3, [r4, #1536]	; 0x600
 80088b4:	1b99      	subs	r1, r3, r6
 80088b6:	d51a      	bpl.n	80088ee <tcp_handle+0x352>
 80088b8:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 80088bc:	1ab2      	subs	r2, r6, r2
 80088be:	2a00      	cmp	r2, #0
 80088c0:	dc15      	bgt.n	80088ee <tcp_handle+0x352>
 80088c2:	f8c4 6600 	str.w	r6, [r4, #1536]	; 0x600
 80088c6:	f8d4 3610 	ldr.w	r3, [r4, #1552]	; 0x610
 80088ca:	1bda      	subs	r2, r3, r7
 80088cc:	2a00      	cmp	r2, #0
 80088ce:	db07      	blt.n	80088e0 <tcp_handle+0x344>
 80088d0:	42bb      	cmp	r3, r7
 80088d2:	d182      	bne.n	80087da <tcp_handle+0x23e>
 80088d4:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
 80088d8:	1b9b      	subs	r3, r3, r6
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f73f af7d 	bgt.w	80087da <tcp_handle+0x23e>
 80088e0:	f8c4 a608 	str.w	sl, [r4, #1544]	; 0x608
 80088e4:	f8c4 7610 	str.w	r7, [r4, #1552]	; 0x610
 80088e8:	f8c4 6614 	str.w	r6, [r4, #1556]	; 0x614
 80088ec:	e775      	b.n	80087da <tcp_handle+0x23e>
 80088ee:	1af3      	subs	r3, r6, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dc09      	bgt.n	8008908 <tcp_handle+0x36c>
 80088f4:	2900      	cmp	r1, #0
 80088f6:	f73f af70 	bgt.w	80087da <tcp_handle+0x23e>
 80088fa:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 80088fe:	1af3      	subs	r3, r6, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	f73f af6a 	bgt.w	80087da <tcp_handle+0x23e>
 8008906:	e7de      	b.n	80088c6 <tcp_handle+0x32a>
 8008908:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 800890c:	1b9a      	subs	r2, r3, r6
 800890e:	2a00      	cmp	r2, #0
 8008910:	f6bf af63 	bge.w	80087da <tcp_handle+0x23e>
 8008914:	e725      	b.n	8008762 <tcp_handle+0x1c6>
 8008916:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 800891a:	42b3      	cmp	r3, r6
 800891c:	f47f af5d 	bne.w	80087da <tcp_handle+0x23e>
 8008920:	f8b4 15f0 	ldrh.w	r1, [r4, #1520]	; 0x5f0
 8008924:	4811      	ldr	r0, [pc, #68]	; (800896c <tcp_handle+0x3d0>)
 8008926:	f00c f92d 	bl	8014b84 <_init_tcb>
 800892a:	e756      	b.n	80087da <tcp_handle+0x23e>
 800892c:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8008930:	42b3      	cmp	r3, r6
 8008932:	f47f af52 	bne.w	80087da <tcp_handle+0x23e>
 8008936:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 800893a:	9302      	str	r3, [sp, #8]
 800893c:	480b      	ldr	r0, [pc, #44]	; (800896c <tcp_handle+0x3d0>)
 800893e:	9601      	str	r6, [sp, #4]
 8008940:	2310      	movs	r3, #16
 8008942:	a901      	add	r1, sp, #4
 8008944:	f88d 300c 	strb.w	r3, [sp, #12]
 8008948:	f00c f966 	bl	8014c18 <_tcp_send_package>
 800894c:	e745      	b.n	80087da <tcp_handle+0x23e>
 800894e:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 8008952:	9201      	str	r2, [sp, #4]
 8008954:	e708      	b.n	8008768 <tcp_handle+0x1cc>
 8008956:	2b06      	cmp	r3, #6
 8008958:	f47f ae8e 	bne.w	8008678 <tcp_handle+0xdc>
 800895c:	230a      	movs	r3, #10
 800895e:	e6c4      	b.n	80086ea <tcp_handle+0x14e>
 8008960:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8008964:	42b3      	cmp	r3, r6
 8008966:	d0f9      	beq.n	800895c <tcp_handle+0x3c0>
 8008968:	2308      	movs	r3, #8
 800896a:	e6be      	b.n	80086ea <tcp_handle+0x14e>
 800896c:	100005f0 	strdne	r0, [r0], -r0	; <UNPREDICTABLE>

08008970 <udp_handle>:
 8008970:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008974:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8008976:	ba5b      	rev16	r3, r3
 8008978:	b29b      	uxth	r3, r3
 800897a:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 800897e:	2a01      	cmp	r2, #1
 8008980:	4607      	mov	r7, r0
 8008982:	d904      	bls.n	800898e <udp_handle+0x1e>
 8008984:	2b7b      	cmp	r3, #123	; 0x7b
 8008986:	d002      	beq.n	800898e <udp_handle+0x1e>
 8008988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800898c:	d308      	bcc.n	80089a0 <udp_handle+0x30>
 800898e:	4a21      	ldr	r2, [pc, #132]	; (8008a14 <udp_handle+0xa4>)
 8008990:	2400      	movs	r4, #0
 8008992:	f852 1b04 	ldr.w	r1, [r2], #4
 8008996:	4299      	cmp	r1, r3
 8008998:	d005      	beq.n	80089a6 <udp_handle+0x36>
 800899a:	3401      	adds	r4, #1
 800899c:	2c08      	cmp	r4, #8
 800899e:	d1f8      	bne.n	8008992 <udp_handle+0x22>
 80089a0:	b002      	add	sp, #8
 80089a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a6:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 80089a8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8008a18 <udp_handle+0xa8>
 80089ac:	f640 3394 	movw	r3, #2964	; 0xb94
 80089b0:	435c      	muls	r4, r3
 80089b2:	ba76      	rev16	r6, r6
 80089b4:	f838 5004 	ldrh.w	r5, [r8, r4]
 80089b8:	3e08      	subs	r6, #8
 80089ba:	b2b6      	uxth	r6, r6
 80089bc:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 80089c0:	435d      	muls	r5, r3
 80089c2:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 80089c6:	f104 0004 	add.w	r0, r4, #4
 80089ca:	bf28      	it	cs
 80089cc:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 80089d0:	4428      	add	r0, r5
 80089d2:	4632      	mov	r2, r6
 80089d4:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 80089d8:	4440      	add	r0, r8
 80089da:	f00c fa87 	bl	8014eec <memcpy.isra.0>
 80089de:	2204      	movs	r2, #4
 80089e0:	eb0d 0002 	add.w	r0, sp, r2
 80089e4:	f107 011a 	add.w	r1, r7, #26
 80089e8:	f00c fa80 	bl	8014eec <memcpy.isra.0>
 80089ec:	192b      	adds	r3, r5, r4
 80089ee:	4443      	add	r3, r8
 80089f0:	9a01      	ldr	r2, [sp, #4]
 80089f2:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 80089f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80089f8:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 80089fc:	ba52      	rev16	r2, r2
 80089fe:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 8008a02:	f838 3004 	ldrh.w	r3, [r8, r4]
 8008a06:	3301      	adds	r3, #1
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	f828 3004 	strh.w	r3, [r8, r4]
 8008a10:	e7c6      	b.n	80089a0 <udp_handle+0x30>
 8008a12:	bf00      	nop
 8008a14:	20009324 	andcs	r9, r0, r4, lsr #6
 8008a18:	20009344 	andcs	r9, r0, r4, asr #6

08008a1c <arp_handle>:
 8008a1c:	8a83      	ldrh	r3, [r0, #20]
 8008a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a22:	d003      	beq.n	8008a2c <arp_handle+0x10>
 8008a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a28:	d002      	beq.n	8008a30 <arp_handle+0x14>
 8008a2a:	4770      	bx	lr
 8008a2c:	f00d bd3e 	b.w	80164ac <arp_handle_request>
 8008a30:	f00d bd64 	b.w	80164fc <arp_handle_reply>

08008a34 <igmp_handle>:
 8008a34:	7b83      	ldrb	r3, [r0, #14]
 8008a36:	2b45      	cmp	r3, #69	; 0x45
 8008a38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	d117      	bne.n	8008a6e <igmp_handle+0x3a>
 8008a3e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8008a42:	2b11      	cmp	r3, #17
 8008a44:	d113      	bne.n	8008a6e <igmp_handle+0x3a>
 8008a46:	4b21      	ldr	r3, [pc, #132]	; (8008acc <igmp_handle+0x98>)
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	f100 051d 	add.w	r5, r0, #29
 8008a4e:	466a      	mov	r2, sp
 8008a50:	f100 0621 	add.w	r6, r0, #33	; 0x21
 8008a54:	462b      	mov	r3, r5
 8008a56:	42b3      	cmp	r3, r6
 8008a58:	d10c      	bne.n	8008a74 <igmp_handle+0x40>
 8008a5a:	2401      	movs	r4, #1
 8008a5c:	4b1c      	ldr	r3, [pc, #112]	; (8008ad0 <igmp_handle+0x9c>)
 8008a5e:	2100      	movs	r1, #0
 8008a60:	f8d3 718c 	ldr.w	r7, [r3, #396]	; 0x18c
 8008a64:	f04f 0c01 	mov.w	ip, #1
 8008a68:	336c      	adds	r3, #108	; 0x6c
 8008a6a:	428f      	cmp	r7, r1
 8008a6c:	d10a      	bne.n	8008a84 <igmp_handle+0x50>
 8008a6e:	b003      	add	sp, #12
 8008a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a74:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008a78:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8008a7c:	428c      	cmp	r4, r1
 8008a7e:	d0ea      	beq.n	8008a56 <igmp_handle+0x22>
 8008a80:	2400      	movs	r4, #0
 8008a82:	e7eb      	b.n	8008a5c <igmp_handle+0x28>
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	9201      	str	r2, [sp, #4]
 8008a88:	b924      	cbnz	r4, 8008a94 <igmp_handle+0x60>
 8008a8a:	f10d 0e04 	add.w	lr, sp, #4
 8008a8e:	462a      	mov	r2, r5
 8008a90:	42b2      	cmp	r2, r6
 8008a92:	d10e      	bne.n	8008ab2 <igmp_handle+0x7e>
 8008a94:	f893 e005 	ldrb.w	lr, [r3, #5]
 8008a98:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
 8008a9c:	f1be 0f01 	cmp.w	lr, #1
 8008aa0:	d110      	bne.n	8008ac4 <igmp_handle+0x90>
 8008aa2:	f893 e004 	ldrb.w	lr, [r3, #4]
 8008aa6:	4596      	cmp	lr, r2
 8008aa8:	d909      	bls.n	8008abe <igmp_handle+0x8a>
 8008aaa:	0852      	lsrs	r2, r2, #1
 8008aac:	3201      	adds	r2, #1
 8008aae:	711a      	strb	r2, [r3, #4]
 8008ab0:	e005      	b.n	8008abe <igmp_handle+0x8a>
 8008ab2:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8008ab6:	f812 9f01 	ldrb.w	r9, [r2, #1]!
 8008aba:	45c1      	cmp	r9, r8
 8008abc:	d0e8      	beq.n	8008a90 <igmp_handle+0x5c>
 8008abe:	3101      	adds	r1, #1
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	e7d2      	b.n	8008a6a <igmp_handle+0x36>
 8008ac4:	f883 c005 	strb.w	ip, [r3, #5]
 8008ac8:	e7ef      	b.n	8008aaa <igmp_handle+0x76>
 8008aca:	bf00      	nop
 8008acc:	010000e0 	smlatteq	r0, r0, r0, r0
 8008ad0:	10001328 	andne	r1, r0, r8, lsr #6

08008ad4 <ip_handle>:
 8008ad4:	7b82      	ldrb	r2, [r0, #14]
 8008ad6:	7dc3      	ldrb	r3, [r0, #23]
 8008ad8:	2a45      	cmp	r2, #69	; 0x45
 8008ada:	d003      	beq.n	8008ae4 <ip_handle+0x10>
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d111      	bne.n	8008b04 <ip_handle+0x30>
 8008ae0:	f7ff bfa8 	b.w	8008a34 <igmp_handle>
 8008ae4:	2b06      	cmp	r3, #6
 8008ae6:	d00b      	beq.n	8008b00 <ip_handle+0x2c>
 8008ae8:	d804      	bhi.n	8008af4 <ip_handle+0x20>
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d006      	beq.n	8008afc <ip_handle+0x28>
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d0f6      	beq.n	8008ae0 <ip_handle+0xc>
 8008af2:	4770      	bx	lr
 8008af4:	2b11      	cmp	r3, #17
 8008af6:	d105      	bne.n	8008b04 <ip_handle+0x30>
 8008af8:	f7ff bf3a 	b.w	8008970 <udp_handle>
 8008afc:	f000 b804 	b.w	8008b08 <icmp_handle>
 8008b00:	f7ff bd4c 	b.w	800859c <tcp_handle>
 8008b04:	4770      	bx	lr
	...

08008b08 <icmp_handle>:
 8008b08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b0a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8008b0e:	2b08      	cmp	r3, #8
 8008b10:	4604      	mov	r4, r0
 8008b12:	d13e      	bne.n	8008b92 <icmp_handle+0x8a>
 8008b14:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8008b18:	2d00      	cmp	r5, #0
 8008b1a:	d13a      	bne.n	8008b92 <icmp_handle+0x8a>
 8008b1c:	1d86      	adds	r6, r0, #6
 8008b1e:	4631      	mov	r1, r6
 8008b20:	2206      	movs	r2, #6
 8008b22:	f00e f86a 	bl	8016bfa <memcpy.isra.0>
 8008b26:	4630      	mov	r0, r6
 8008b28:	491b      	ldr	r1, [pc, #108]	; (8008b98 <icmp_handle+0x90>)
 8008b2a:	2206      	movs	r2, #6
 8008b2c:	f00e f865 	bl	8016bfa <memcpy.isra.0>
 8008b30:	8a63      	ldrh	r3, [r4, #18]
 8008b32:	f104 061a 	add.w	r6, r4, #26
 8008b36:	43db      	mvns	r3, r3
 8008b38:	4631      	mov	r1, r6
 8008b3a:	8263      	strh	r3, [r4, #18]
 8008b3c:	2204      	movs	r2, #4
 8008b3e:	f104 001e 	add.w	r0, r4, #30
 8008b42:	f00e f85a 	bl	8016bfa <memcpy.isra.0>
 8008b46:	4b15      	ldr	r3, [pc, #84]	; (8008b9c <icmp_handle+0x94>)
 8008b48:	2204      	movs	r2, #4
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	9301      	str	r3, [sp, #4]
 8008b4e:	eb0d 0102 	add.w	r1, sp, r2
 8008b52:	4630      	mov	r0, r6
 8008b54:	f104 060e 	add.w	r6, r4, #14
 8008b58:	f00e f84f 	bl	8016bfa <memcpy.isra.0>
 8008b5c:	2114      	movs	r1, #20
 8008b5e:	7625      	strb	r5, [r4, #24]
 8008b60:	7665      	strb	r5, [r4, #25]
 8008b62:	4630      	mov	r0, r6
 8008b64:	f00e f82f 	bl	8016bc6 <net_chksum>
 8008b68:	8a21      	ldrh	r1, [r4, #16]
 8008b6a:	8320      	strh	r0, [r4, #24]
 8008b6c:	ba49      	rev16	r1, r1
 8008b6e:	b289      	uxth	r1, r1
 8008b70:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8008b74:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8008b78:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f00e f822 	bl	8016bc6 <net_chksum>
 8008b82:	8a21      	ldrh	r1, [r4, #16]
 8008b84:	84a0      	strh	r0, [r4, #36]	; 0x24
 8008b86:	ba49      	rev16	r1, r1
 8008b88:	b289      	uxth	r1, r1
 8008b8a:	310e      	adds	r1, #14
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f010 fc4d 	bl	801942c <emac_eth_send>
 8008b92:	b002      	add	sp, #8
 8008b94:	bd70      	pop	{r4, r5, r6, pc}
 8008b96:	bf00      	nop
 8008b98:	200092f4 	strdcs	r9, [r0], -r4
 8008b9c:	200092e8 	andcs	r9, r0, r8, ror #5
 8008ba0:	0801e02c 	stmdaeq	r1, {r2, r3, r5, sp, lr, pc}
 8008ba4:	20000000 	andcs	r0, r0, r0
 8008ba8:	200000f8 	strdcs	r0, [r0], -r8
 8008bac:	200000f8 	strdcs	r0, [r0], -r8
 8008bb0:	2002d368 	andcs	sp, r2, r8, ror #6

08008bb4 <Reset_Handler>:
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	e003      	b.n	8008bc0 <DataInit>

08008bb8 <CopyData>:
 8008bb8:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <Zerobss+0x10>)
 8008bba:	585b      	ldr	r3, [r3, r1]
 8008bbc:	5043      	str	r3, [r0, r1]
 8008bbe:	3104      	adds	r1, #4

08008bc0 <DataInit>:
 8008bc0:	4809      	ldr	r0, [pc, #36]	; (8008be8 <Zerobss+0x14>)
 8008bc2:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <Zerobss+0x18>)
 8008bc4:	1842      	adds	r2, r0, r1
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d3f6      	bcc.n	8008bb8 <CopyData>
 8008bca:	4a09      	ldr	r2, [pc, #36]	; (8008bf0 <Zerobss+0x1c>)
 8008bcc:	e002      	b.n	8008bd4 <Zerobss>

08008bce <FillZerobss>:
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f842 3b04 	str.w	r3, [r2], #4

08008bd4 <Zerobss>:
 8008bd4:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <Zerobss+0x20>)
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d3f9      	bcc.n	8008bce <FillZerobss>
 8008bda:	f00f fde5 	bl	80187a8 <SystemInit>
 8008bde:	f000 fd67 	bl	80096b0 <main>
 8008be2:	4770      	bx	lr
 8008be4:	0801e02c 	stmdaeq	r1, {r2, r3, r5, sp, lr, pc}
 8008be8:	20000000 	andcs	r0, r0, r0
 8008bec:	200000f8 	strdcs	r0, [r0], -r8
 8008bf0:	200000f8 	strdcs	r0, [r0], -r8
 8008bf4:	2002d368 	andcs	sp, r2, r8, ror #6

08008bf8 <__aeabi_d2f>:
 8008bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008c00:	bf24      	itt	cs
 8008c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008c0a:	d90d      	bls.n	8008c28 <__aeabi_d2f+0x30>
 8008c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008c20:	bf08      	it	eq
 8008c22:	f020 0001 	biceq.w	r0, r0, #1
 8008c26:	4770      	bx	lr
 8008c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008c2c:	d121      	bne.n	8008c72 <__aeabi_d2f+0x7a>
 8008c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008c32:	bfbc      	itt	lt
 8008c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008c38:	4770      	bxlt	lr
 8008c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008c42:	f1c2 0218 	rsb	r2, r2, #24
 8008c46:	f1c2 0c20 	rsb	ip, r2, #32
 8008c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8008c52:	bf18      	it	ne
 8008c54:	f040 0001 	orrne.w	r0, r0, #1
 8008c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008c64:	ea40 000c 	orr.w	r0, r0, ip
 8008c68:	fa23 f302 	lsr.w	r3, r3, r2
 8008c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c70:	e7cc      	b.n	8008c0c <__aeabi_d2f+0x14>
 8008c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008c76:	d107      	bne.n	8008c88 <__aeabi_d2f+0x90>
 8008c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008c7c:	bf1e      	ittt	ne
 8008c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008c86:	4770      	bxne	lr
 8008c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop

08008c98 <__aeabi_uldivmod>:
 8008c98:	b953      	cbnz	r3, 8008cb0 <__aeabi_uldivmod+0x18>
 8008c9a:	b94a      	cbnz	r2, 8008cb0 <__aeabi_uldivmod+0x18>
 8008c9c:	2900      	cmp	r1, #0
 8008c9e:	bf08      	it	eq
 8008ca0:	2800      	cmpeq	r0, #0
 8008ca2:	bf1c      	itt	ne
 8008ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008cac:	f000 b80c 	b.w	8008cc8 <__aeabi_idiv0>
 8008cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008cb8:	f001 fca8 	bl	800a60c <__udivmoddi4>
 8008cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cc4:	b004      	add	sp, #16
 8008cc6:	4770      	bx	lr

08008cc8 <__aeabi_idiv0>:
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop

08008ccc <__aeabi_drsub>:
 8008ccc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008cd0:	e002      	b.n	8008cd8 <__adddf3>
 8008cd2:	bf00      	nop

08008cd4 <__aeabi_dsub>:
 8008cd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008cd8 <__adddf3>:
 8008cd8:	b530      	push	{r4, r5, lr}
 8008cda:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008cde:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008ce2:	ea94 0f05 	teq	r4, r5
 8008ce6:	bf08      	it	eq
 8008ce8:	ea90 0f02 	teqeq	r0, r2
 8008cec:	bf1f      	itttt	ne
 8008cee:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008cf2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008cf6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008cfa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008cfe:	f000 80e2 	beq.w	8008ec6 <__adddf3+0x1ee>
 8008d02:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008d06:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008d0a:	bfb8      	it	lt
 8008d0c:	426d      	neglt	r5, r5
 8008d0e:	dd0c      	ble.n	8008d2a <__adddf3+0x52>
 8008d10:	442c      	add	r4, r5
 8008d12:	ea80 0202 	eor.w	r2, r0, r2
 8008d16:	ea81 0303 	eor.w	r3, r1, r3
 8008d1a:	ea82 0000 	eor.w	r0, r2, r0
 8008d1e:	ea83 0101 	eor.w	r1, r3, r1
 8008d22:	ea80 0202 	eor.w	r2, r0, r2
 8008d26:	ea81 0303 	eor.w	r3, r1, r3
 8008d2a:	2d36      	cmp	r5, #54	; 0x36
 8008d2c:	bf88      	it	hi
 8008d2e:	bd30      	pophi	{r4, r5, pc}
 8008d30:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008d34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008d38:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008d3c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008d40:	d002      	beq.n	8008d48 <__adddf3+0x70>
 8008d42:	4240      	negs	r0, r0
 8008d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008d48:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008d4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008d50:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008d54:	d002      	beq.n	8008d5c <__adddf3+0x84>
 8008d56:	4252      	negs	r2, r2
 8008d58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008d5c:	ea94 0f05 	teq	r4, r5
 8008d60:	f000 80a7 	beq.w	8008eb2 <__adddf3+0x1da>
 8008d64:	f1a4 0401 	sub.w	r4, r4, #1
 8008d68:	f1d5 0e20 	rsbs	lr, r5, #32
 8008d6c:	db0d      	blt.n	8008d8a <__adddf3+0xb2>
 8008d6e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008d72:	fa22 f205 	lsr.w	r2, r2, r5
 8008d76:	1880      	adds	r0, r0, r2
 8008d78:	f141 0100 	adc.w	r1, r1, #0
 8008d7c:	fa03 f20e 	lsl.w	r2, r3, lr
 8008d80:	1880      	adds	r0, r0, r2
 8008d82:	fa43 f305 	asr.w	r3, r3, r5
 8008d86:	4159      	adcs	r1, r3
 8008d88:	e00e      	b.n	8008da8 <__adddf3+0xd0>
 8008d8a:	f1a5 0520 	sub.w	r5, r5, #32
 8008d8e:	f10e 0e20 	add.w	lr, lr, #32
 8008d92:	2a01      	cmp	r2, #1
 8008d94:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008d98:	bf28      	it	cs
 8008d9a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008d9e:	fa43 f305 	asr.w	r3, r3, r5
 8008da2:	18c0      	adds	r0, r0, r3
 8008da4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008da8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008dac:	d507      	bpl.n	8008dbe <__adddf3+0xe6>
 8008dae:	f04f 0e00 	mov.w	lr, #0
 8008db2:	f1dc 0c00 	rsbs	ip, ip, #0
 8008db6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008dba:	eb6e 0101 	sbc.w	r1, lr, r1
 8008dbe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008dc2:	d31b      	bcc.n	8008dfc <__adddf3+0x124>
 8008dc4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008dc8:	d30c      	bcc.n	8008de4 <__adddf3+0x10c>
 8008dca:	0849      	lsrs	r1, r1, #1
 8008dcc:	ea5f 0030 	movs.w	r0, r0, rrx
 8008dd0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008dd4:	f104 0401 	add.w	r4, r4, #1
 8008dd8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008ddc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008de0:	f080 809a 	bcs.w	8008f18 <__adddf3+0x240>
 8008de4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008de8:	bf08      	it	eq
 8008dea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008dee:	f150 0000 	adcs.w	r0, r0, #0
 8008df2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008df6:	ea41 0105 	orr.w	r1, r1, r5
 8008dfa:	bd30      	pop	{r4, r5, pc}
 8008dfc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008e00:	4140      	adcs	r0, r0
 8008e02:	eb41 0101 	adc.w	r1, r1, r1
 8008e06:	3c01      	subs	r4, #1
 8008e08:	bf28      	it	cs
 8008e0a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008e0e:	d2e9      	bcs.n	8008de4 <__adddf3+0x10c>
 8008e10:	f091 0f00 	teq	r1, #0
 8008e14:	bf04      	itt	eq
 8008e16:	4601      	moveq	r1, r0
 8008e18:	2000      	moveq	r0, #0
 8008e1a:	fab1 f381 	clz	r3, r1
 8008e1e:	bf08      	it	eq
 8008e20:	3320      	addeq	r3, #32
 8008e22:	f1a3 030b 	sub.w	r3, r3, #11
 8008e26:	f1b3 0220 	subs.w	r2, r3, #32
 8008e2a:	da0c      	bge.n	8008e46 <__adddf3+0x16e>
 8008e2c:	320c      	adds	r2, #12
 8008e2e:	dd08      	ble.n	8008e42 <__adddf3+0x16a>
 8008e30:	f102 0c14 	add.w	ip, r2, #20
 8008e34:	f1c2 020c 	rsb	r2, r2, #12
 8008e38:	fa01 f00c 	lsl.w	r0, r1, ip
 8008e3c:	fa21 f102 	lsr.w	r1, r1, r2
 8008e40:	e00c      	b.n	8008e5c <__adddf3+0x184>
 8008e42:	f102 0214 	add.w	r2, r2, #20
 8008e46:	bfd8      	it	le
 8008e48:	f1c2 0c20 	rsble	ip, r2, #32
 8008e4c:	fa01 f102 	lsl.w	r1, r1, r2
 8008e50:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008e54:	bfdc      	itt	le
 8008e56:	ea41 010c 	orrle.w	r1, r1, ip
 8008e5a:	4090      	lslle	r0, r2
 8008e5c:	1ae4      	subs	r4, r4, r3
 8008e5e:	bfa2      	ittt	ge
 8008e60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008e64:	4329      	orrge	r1, r5
 8008e66:	bd30      	popge	{r4, r5, pc}
 8008e68:	ea6f 0404 	mvn.w	r4, r4
 8008e6c:	3c1f      	subs	r4, #31
 8008e6e:	da1c      	bge.n	8008eaa <__adddf3+0x1d2>
 8008e70:	340c      	adds	r4, #12
 8008e72:	dc0e      	bgt.n	8008e92 <__adddf3+0x1ba>
 8008e74:	f104 0414 	add.w	r4, r4, #20
 8008e78:	f1c4 0220 	rsb	r2, r4, #32
 8008e7c:	fa20 f004 	lsr.w	r0, r0, r4
 8008e80:	fa01 f302 	lsl.w	r3, r1, r2
 8008e84:	ea40 0003 	orr.w	r0, r0, r3
 8008e88:	fa21 f304 	lsr.w	r3, r1, r4
 8008e8c:	ea45 0103 	orr.w	r1, r5, r3
 8008e90:	bd30      	pop	{r4, r5, pc}
 8008e92:	f1c4 040c 	rsb	r4, r4, #12
 8008e96:	f1c4 0220 	rsb	r2, r4, #32
 8008e9a:	fa20 f002 	lsr.w	r0, r0, r2
 8008e9e:	fa01 f304 	lsl.w	r3, r1, r4
 8008ea2:	ea40 0003 	orr.w	r0, r0, r3
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	bd30      	pop	{r4, r5, pc}
 8008eaa:	fa21 f004 	lsr.w	r0, r1, r4
 8008eae:	4629      	mov	r1, r5
 8008eb0:	bd30      	pop	{r4, r5, pc}
 8008eb2:	f094 0f00 	teq	r4, #0
 8008eb6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008eba:	bf06      	itte	eq
 8008ebc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008ec0:	3401      	addeq	r4, #1
 8008ec2:	3d01      	subne	r5, #1
 8008ec4:	e74e      	b.n	8008d64 <__adddf3+0x8c>
 8008ec6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008eca:	bf18      	it	ne
 8008ecc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008ed0:	d029      	beq.n	8008f26 <__adddf3+0x24e>
 8008ed2:	ea94 0f05 	teq	r4, r5
 8008ed6:	bf08      	it	eq
 8008ed8:	ea90 0f02 	teqeq	r0, r2
 8008edc:	d005      	beq.n	8008eea <__adddf3+0x212>
 8008ede:	ea54 0c00 	orrs.w	ip, r4, r0
 8008ee2:	bf04      	itt	eq
 8008ee4:	4619      	moveq	r1, r3
 8008ee6:	4610      	moveq	r0, r2
 8008ee8:	bd30      	pop	{r4, r5, pc}
 8008eea:	ea91 0f03 	teq	r1, r3
 8008eee:	bf1e      	ittt	ne
 8008ef0:	2100      	movne	r1, #0
 8008ef2:	2000      	movne	r0, #0
 8008ef4:	bd30      	popne	{r4, r5, pc}
 8008ef6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008efa:	d105      	bne.n	8008f08 <__adddf3+0x230>
 8008efc:	0040      	lsls	r0, r0, #1
 8008efe:	4149      	adcs	r1, r1
 8008f00:	bf28      	it	cs
 8008f02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008f06:	bd30      	pop	{r4, r5, pc}
 8008f08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008f0c:	bf3c      	itt	cc
 8008f0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008f12:	bd30      	popcc	{r4, r5, pc}
 8008f14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008f18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008f1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f20:	f04f 0000 	mov.w	r0, #0
 8008f24:	bd30      	pop	{r4, r5, pc}
 8008f26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008f2a:	bf1a      	itte	ne
 8008f2c:	4619      	movne	r1, r3
 8008f2e:	4610      	movne	r0, r2
 8008f30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008f34:	bf1c      	itt	ne
 8008f36:	460b      	movne	r3, r1
 8008f38:	4602      	movne	r2, r0
 8008f3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008f3e:	bf06      	itte	eq
 8008f40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008f44:	ea91 0f03 	teqeq	r1, r3
 8008f48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008f4c:	bd30      	pop	{r4, r5, pc}
 8008f4e:	bf00      	nop

08008f50 <__aeabi_ui2d>:
 8008f50:	f090 0f00 	teq	r0, #0
 8008f54:	bf04      	itt	eq
 8008f56:	2100      	moveq	r1, #0
 8008f58:	4770      	bxeq	lr
 8008f5a:	b530      	push	{r4, r5, lr}
 8008f5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008f60:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008f64:	f04f 0500 	mov.w	r5, #0
 8008f68:	f04f 0100 	mov.w	r1, #0
 8008f6c:	e750      	b.n	8008e10 <__adddf3+0x138>
 8008f6e:	bf00      	nop

08008f70 <__aeabi_i2d>:
 8008f70:	f090 0f00 	teq	r0, #0
 8008f74:	bf04      	itt	eq
 8008f76:	2100      	moveq	r1, #0
 8008f78:	4770      	bxeq	lr
 8008f7a:	b530      	push	{r4, r5, lr}
 8008f7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008f80:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008f84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008f88:	bf48      	it	mi
 8008f8a:	4240      	negmi	r0, r0
 8008f8c:	f04f 0100 	mov.w	r1, #0
 8008f90:	e73e      	b.n	8008e10 <__adddf3+0x138>
 8008f92:	bf00      	nop

08008f94 <__aeabi_f2d>:
 8008f94:	0042      	lsls	r2, r0, #1
 8008f96:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008f9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8008f9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008fa2:	bf1f      	itttt	ne
 8008fa4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008fa8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008fac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008fb0:	4770      	bxne	lr
 8008fb2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8008fb6:	bf08      	it	eq
 8008fb8:	4770      	bxeq	lr
 8008fba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008fbe:	bf04      	itt	eq
 8008fc0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008fc4:	4770      	bxeq	lr
 8008fc6:	b530      	push	{r4, r5, lr}
 8008fc8:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008fcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008fd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008fd4:	e71c      	b.n	8008e10 <__adddf3+0x138>
 8008fd6:	bf00      	nop

08008fd8 <__aeabi_ul2d>:
 8008fd8:	ea50 0201 	orrs.w	r2, r0, r1
 8008fdc:	bf08      	it	eq
 8008fde:	4770      	bxeq	lr
 8008fe0:	b530      	push	{r4, r5, lr}
 8008fe2:	f04f 0500 	mov.w	r5, #0
 8008fe6:	e00a      	b.n	8008ffe <__aeabi_l2d+0x16>

08008fe8 <__aeabi_l2d>:
 8008fe8:	ea50 0201 	orrs.w	r2, r0, r1
 8008fec:	bf08      	it	eq
 8008fee:	4770      	bxeq	lr
 8008ff0:	b530      	push	{r4, r5, lr}
 8008ff2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008ff6:	d502      	bpl.n	8008ffe <__aeabi_l2d+0x16>
 8008ff8:	4240      	negs	r0, r0
 8008ffa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ffe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009002:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009006:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800900a:	f43f aed8 	beq.w	8008dbe <__adddf3+0xe6>
 800900e:	f04f 0203 	mov.w	r2, #3
 8009012:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009016:	bf18      	it	ne
 8009018:	3203      	addne	r2, #3
 800901a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800901e:	bf18      	it	ne
 8009020:	3203      	addne	r2, #3
 8009022:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8009026:	f1c2 0320 	rsb	r3, r2, #32
 800902a:	fa00 fc03 	lsl.w	ip, r0, r3
 800902e:	fa20 f002 	lsr.w	r0, r0, r2
 8009032:	fa01 fe03 	lsl.w	lr, r1, r3
 8009036:	ea40 000e 	orr.w	r0, r0, lr
 800903a:	fa21 f102 	lsr.w	r1, r1, r2
 800903e:	4414      	add	r4, r2
 8009040:	e6bd      	b.n	8008dbe <__adddf3+0xe6>
 8009042:	bf00      	nop

08009044 <ADC_IRQHandler>:
 8009044:	e7fe      	b.n	8009044 <ADC_IRQHandler>

08009046 <memcmp>:
 8009046:	b510      	push	{r4, lr}
 8009048:	3901      	subs	r1, #1
 800904a:	4402      	add	r2, r0
 800904c:	4290      	cmp	r0, r2
 800904e:	d101      	bne.n	8009054 <memcmp+0xe>
 8009050:	2000      	movs	r0, #0
 8009052:	e005      	b.n	8009060 <memcmp+0x1a>
 8009054:	7803      	ldrb	r3, [r0, #0]
 8009056:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800905a:	42a3      	cmp	r3, r4
 800905c:	d001      	beq.n	8009062 <memcmp+0x1c>
 800905e:	1b18      	subs	r0, r3, r4
 8009060:	bd10      	pop	{r4, pc}
 8009062:	3001      	adds	r0, #1
 8009064:	e7f2      	b.n	800904c <memcmp+0x6>

08009066 <memcpy>:
 8009066:	b510      	push	{r4, lr}
 8009068:	1e43      	subs	r3, r0, #1
 800906a:	440a      	add	r2, r1
 800906c:	4291      	cmp	r1, r2
 800906e:	d100      	bne.n	8009072 <memcpy+0xc>
 8009070:	bd10      	pop	{r4, pc}
 8009072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800907a:	e7f7      	b.n	800906c <memcpy+0x6>

0800907c <LightSet::FullOn()>:
 800907c:	4770      	bx	lr

0800907e <DisplayHandler::~DisplayHandler()>:
 800907e:	4770      	bx	lr

08009080 <DisplayUdfHandler::~DisplayUdfHandler()>:
 8009080:	4770      	bx	lr

08009082 <DisplayUdfHandler::ShowLongName(char const*)>:
 8009082:	4770      	bx	lr

08009084 <DisplayUdfHandler::ShowRdmEnabled(unsigned int, bool)>:
 8009084:	4770      	bx	lr

08009086 <DisplayUdfHandler::ShowFailSafe(unsigned char)>:
 8009086:	4770      	bx	lr

08009088 <LightSet64with4::~LightSet64with4()>:
 8009088:	4770      	bx	lr

0800908a <LightSet64with4::Start(unsigned int)>:
 800908a:	291f      	cmp	r1, #31
 800908c:	460b      	mov	r3, r1
 800908e:	d805      	bhi.n	800909c <LightSet64with4::Start(unsigned int)+0x12>
 8009090:	6842      	ldr	r2, [r0, #4]
 8009092:	b11a      	cbz	r2, 800909c <LightSet64with4::Start(unsigned int)+0x12>
 8009094:	6813      	ldr	r3, [r2, #0]
 8009096:	4610      	mov	r0, r2
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	4718      	bx	r3
 800909c:	6880      	ldr	r0, [r0, #8]
 800909e:	b120      	cbz	r0, 80090aa <LightSet64with4::Start(unsigned int)+0x20>
 80090a0:	6802      	ldr	r2, [r0, #0]
 80090a2:	f003 0103 	and.w	r1, r3, #3
 80090a6:	6892      	ldr	r2, [r2, #8]
 80090a8:	4710      	bx	r2
 80090aa:	4770      	bx	lr

080090ac <LightSet64with4::Stop(unsigned int)>:
 80090ac:	293f      	cmp	r1, #63	; 0x3f
 80090ae:	460b      	mov	r3, r1
 80090b0:	d805      	bhi.n	80090be <LightSet64with4::Stop(unsigned int)+0x12>
 80090b2:	6842      	ldr	r2, [r0, #4]
 80090b4:	b11a      	cbz	r2, 80090be <LightSet64with4::Stop(unsigned int)+0x12>
 80090b6:	6813      	ldr	r3, [r2, #0]
 80090b8:	4610      	mov	r0, r2
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	4718      	bx	r3
 80090be:	6880      	ldr	r0, [r0, #8]
 80090c0:	b120      	cbz	r0, 80090cc <LightSet64with4::Stop(unsigned int)+0x20>
 80090c2:	6802      	ldr	r2, [r0, #0]
 80090c4:	f003 0103 	and.w	r1, r3, #3
 80090c8:	68d2      	ldr	r2, [r2, #12]
 80090ca:	4710      	bx	r2
 80090cc:	4770      	bx	lr

080090ce <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)>:
 80090ce:	293f      	cmp	r1, #63	; 0x3f
 80090d0:	b4f0      	push	{r4, r5, r6, r7}
 80090d2:	460c      	mov	r4, r1
 80090d4:	4615      	mov	r5, r2
 80090d6:	461e      	mov	r6, r3
 80090d8:	d807      	bhi.n	80090ea <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 80090da:	6847      	ldr	r7, [r0, #4]
 80090dc:	b12f      	cbz	r7, 80090ea <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 80090de:	6838      	ldr	r0, [r7, #0]
 80090e0:	6904      	ldr	r4, [r0, #16]
 80090e2:	4638      	mov	r0, r7
 80090e4:	46a4      	mov	ip, r4
 80090e6:	bcf0      	pop	{r4, r5, r6, r7}
 80090e8:	4760      	bx	ip
 80090ea:	6880      	ldr	r0, [r0, #8]
 80090ec:	b138      	cbz	r0, 80090fe <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)+0x30>
 80090ee:	6803      	ldr	r3, [r0, #0]
 80090f0:	691f      	ldr	r7, [r3, #16]
 80090f2:	462a      	mov	r2, r5
 80090f4:	4633      	mov	r3, r6
 80090f6:	f004 0103 	and.w	r1, r4, #3
 80090fa:	46bc      	mov	ip, r7
 80090fc:	e7f3      	b.n	80090e6 <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)+0x18>
 80090fe:	bcf0      	pop	{r4, r5, r6, r7}
 8009100:	4770      	bx	lr

08009102 <LightSet64with4::Blackout(bool)>:
 8009102:	b570      	push	{r4, r5, r6, lr}
 8009104:	4604      	mov	r4, r0
 8009106:	6840      	ldr	r0, [r0, #4]
 8009108:	460d      	mov	r5, r1
 800910a:	b110      	cbz	r0, 8009112 <LightSet64with4::Blackout(bool)+0x10>
 800910c:	6803      	ldr	r3, [r0, #0]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	4798      	blx	r3
 8009112:	68a0      	ldr	r0, [r4, #8]
 8009114:	b128      	cbz	r0, 8009122 <LightSet64with4::Blackout(bool)+0x20>
 8009116:	6803      	ldr	r3, [r0, #0]
 8009118:	4629      	mov	r1, r5
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009120:	4718      	bx	r3
 8009122:	bd70      	pop	{r4, r5, r6, pc}

08009124 <LightSet64with4::Print()>:
 8009124:	b510      	push	{r4, lr}
 8009126:	4604      	mov	r4, r0
 8009128:	6840      	ldr	r0, [r0, #4]
 800912a:	b110      	cbz	r0, 8009132 <LightSet64with4::Print()+0xe>
 800912c:	6803      	ldr	r3, [r0, #0]
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	4798      	blx	r3
 8009132:	68a0      	ldr	r0, [r4, #8]
 8009134:	b120      	cbz	r0, 8009140 <LightSet64with4::Print()+0x1c>
 8009136:	6803      	ldr	r3, [r0, #0]
 8009138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	4718      	bx	r3
 8009140:	bd10      	pop	{r4, pc}

08009142 <LightSet64with4::SetDmxStartAddress(unsigned short)>:
 8009142:	2000      	movs	r0, #0
 8009144:	4770      	bx	lr

08009146 <LightSet64with4::GetDmxStartAddress()>:
 8009146:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800914a:	4770      	bx	lr

0800914c <LightSet64with4::GetDmxFootprint()>:
 800914c:	2000      	movs	r0, #0
 800914e:	4770      	bx	lr

08009150 <LightSet64with4::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8009150:	2000      	movs	r0, #0
 8009152:	4770      	bx	lr

08009154 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8009154:	4770      	bx	lr

08009156 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8009156:	4770      	bx	lr

08009158 <PixelDmxStartStop::Start()>:
 8009158:	4b02      	ldr	r3, [pc, #8]	; (8009164 <PixelDmxStartStop::Start()+0xc>)
 800915a:	2204      	movs	r2, #4
 800915c:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	40020000 	andmi	r0, r2, r0

08009168 <PixelDmxStartStop::Stop()>:
 8009168:	4b02      	ldr	r3, [pc, #8]	; (8009174 <PixelDmxStartStop::Stop()+0xc>)
 800916a:	2204      	movs	r2, #4
 800916c:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	40020000 	andmi	r0, r2, r0

08009178 <dmxconfigudp::atoi(char const*, unsigned int)>:
 8009178:	b530      	push	{r4, r5, lr}
 800917a:	4401      	add	r1, r0
 800917c:	2300      	movs	r3, #0
 800917e:	250a      	movs	r5, #10
 8009180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009184:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8009188:	2c09      	cmp	r4, #9
 800918a:	d805      	bhi.n	8009198 <dmxconfigudp::atoi(char const*, unsigned int)+0x20>
 800918c:	fb05 2303 	mla	r3, r5, r3, r2
 8009190:	4281      	cmp	r1, r0
 8009192:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8009196:	d1f3      	bne.n	8009180 <dmxconfigudp::atoi(char const*, unsigned int)+0x8>
 8009198:	4618      	mov	r0, r3
 800919a:	bd30      	pop	{r4, r5, pc}

0800919c <RDMNetDevice::CopyUID(unsigned char*)>:
 800919c:	460b      	mov	r3, r1
 800919e:	2206      	movs	r2, #6
 80091a0:	1d01      	adds	r1, r0, #4
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7ff bf5f 	b.w	8009066 <memcpy>

080091a8 <non-virtual thunk to RDMNetDevice::CopyUID(unsigned char*)>:
 80091a8:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 80091ac:	e7f6      	b.n	800919c <RDMNetDevice::CopyUID(unsigned char*)>
	...

080091b0 <RDMNetDevice::CopyCID(unsigned char*)>:
 80091b0:	4608      	mov	r0, r1
 80091b2:	2210      	movs	r2, #16
 80091b4:	4901      	ldr	r1, [pc, #4]	; (80091bc <RDMNetDevice::CopyCID(unsigned char*)+0xc>)
 80091b6:	f7ff bf56 	b.w	8009066 <memcpy>
 80091ba:	bf00      	nop
 80091bc:	200007fb 	strdcs	r0, [r0], -fp

080091c0 <non-virtual thunk to RDMNetDevice::CopyCID(unsigned char*)>:
 80091c0:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 80091c4:	e7f4      	b.n	80091b0 <RDMNetDevice::CopyCID(unsigned char*)>
 80091c6:	bf00      	nop

080091c8 <FactoryDefaults::~FactoryDefaults()>:
 80091c8:	4770      	bx	lr

080091ca <DisplayHandler::~DisplayHandler()>:
 80091ca:	b510      	push	{r4, lr}
 80091cc:	4604      	mov	r4, r0
 80091ce:	f00f f89d 	bl	801830c <operator delete(void*)>
 80091d2:	4620      	mov	r0, r4
 80091d4:	bd10      	pop	{r4, pc}

080091d6 <LightSet64with4::~LightSet64with4()>:
 80091d6:	b510      	push	{r4, lr}
 80091d8:	4604      	mov	r4, r0
 80091da:	f00f f897 	bl	801830c <operator delete(void*)>
 80091de:	4620      	mov	r0, r4
 80091e0:	bd10      	pop	{r4, pc}

080091e2 <DisplayUdfHandler::~DisplayUdfHandler()>:
 80091e2:	b510      	push	{r4, lr}
 80091e4:	4604      	mov	r4, r0
 80091e6:	f00f f891 	bl	801830c <operator delete(void*)>
 80091ea:	4620      	mov	r0, r4
 80091ec:	bd10      	pop	{r4, pc}

080091ee <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 80091ee:	b510      	push	{r4, lr}
 80091f0:	4604      	mov	r4, r0
 80091f2:	f00f f88b 	bl	801830c <operator delete(void*)>
 80091f6:	4620      	mov	r0, r4
 80091f8:	bd10      	pop	{r4, pc}

080091fa <PixelDmxStartStop::~PixelDmxStartStop()>:
 80091fa:	b510      	push	{r4, lr}
 80091fc:	4604      	mov	r4, r0
 80091fe:	f00f f885 	bl	801830c <operator delete(void*)>
 8009202:	4620      	mov	r0, r4
 8009204:	bd10      	pop	{r4, pc}

08009206 <FactoryDefaults::~FactoryDefaults()>:
 8009206:	b510      	push	{r4, lr}
 8009208:	4604      	mov	r4, r0
 800920a:	f00f f87f 	bl	801830c <operator delete(void*)>
 800920e:	4620      	mov	r0, r4
 8009210:	bd10      	pop	{r4, pc}
	...

08009214 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 8009214:	4b02      	ldr	r3, [pc, #8]	; (8009220 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 8009216:	6819      	ldr	r1, [r3, #0]
 8009218:	4b02      	ldr	r3, [pc, #8]	; (8009224 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 800921a:	6818      	ldr	r0, [r3, #0]
 800921c:	f00e b856 	b.w	80172cc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8009220:	200006cc 	andcs	r0, r0, ip, asr #13
 8009224:	2000fccc 	andcs	pc, r0, ip, asr #25

08009228 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 8009228:	4b02      	ldr	r3, [pc, #8]	; (8009234 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 800922a:	6819      	ldr	r1, [r3, #0]
 800922c:	4b02      	ldr	r3, [pc, #8]	; (8009238 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 800922e:	6818      	ldr	r0, [r3, #0]
 8009230:	f00e b84c 	b.w	80172cc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8009234:	200006cc 	andcs	r0, r0, ip, asr #13
 8009238:	2000fccc 	andcs	pc, r0, ip, asr #25

0800923c <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 800923c:	4b02      	ldr	r3, [pc, #8]	; (8009248 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 800923e:	6819      	ldr	r1, [r3, #0]
 8009240:	4b02      	ldr	r3, [pc, #8]	; (800924c <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 8009242:	6818      	ldr	r0, [r3, #0]
 8009244:	f00e b842 	b.w	80172cc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8009248:	200006cc 	andcs	r0, r0, ip, asr #13
 800924c:	2000fccc 	andcs	pc, r0, ip, asr #25

08009250 <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 8009250:	4b02      	ldr	r3, [pc, #8]	; (800925c <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 8009252:	6819      	ldr	r1, [r3, #0]
 8009254:	4b02      	ldr	r3, [pc, #8]	; (8009260 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 8009256:	6818      	ldr	r0, [r3, #0]
 8009258:	f00e b838 	b.w	80172cc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 800925c:	200006cc 	andcs	r0, r0, ip, asr #13
 8009260:	2000fccc 	andcs	pc, r0, ip, asr #25

08009264 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 8009264:	4b02      	ldr	r3, [pc, #8]	; (8009270 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 8009266:	6819      	ldr	r1, [r3, #0]
 8009268:	4b02      	ldr	r3, [pc, #8]	; (8009274 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 800926a:	6818      	ldr	r0, [r3, #0]
 800926c:	f00e b82e 	b.w	80172cc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8009270:	200006cc 	andcs	r0, r0, ip, asr #13
 8009274:	2000fccc 	andcs	pc, r0, ip, asr #25

08009278 <DisplayUdfHandler::ShowShortName(char const*)>:
 8009278:	4b02      	ldr	r3, [pc, #8]	; (8009284 <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 800927a:	6819      	ldr	r1, [r3, #0]
 800927c:	4b02      	ldr	r3, [pc, #8]	; (8009288 <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 800927e:	6818      	ldr	r0, [r3, #0]
 8009280:	f00e b801 	b.w	8017286 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8009284:	200006cc 	andcs	r0, r0, ip, asr #13
 8009288:	2000fccc 	andcs	pc, r0, ip, asr #25

0800928c <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 800928c:	b510      	push	{r4, lr}
 800928e:	4c03      	ldr	r4, [pc, #12]	; (800929c <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)+0x10>)
 8009290:	30d0      	adds	r0, #208	; 0xd0
 8009292:	4622      	mov	r2, r4
 8009294:	f007 fa94 	bl	80107c0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 8009298:	4620      	mov	r0, r4
 800929a:	bd10      	pop	{r4, pc}
 800929c:	200006fc 	strdcs	r0, [r0], -ip

080092a0 <non-virtual thunk to RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 80092a0:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 80092a4:	e7f2      	b.n	800928c <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>
 80092a6:	bf00      	nop

080092a8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 80092a8:	b110      	cbz	r0, 80092b0 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 80092aa:	6803      	ldr	r3, [r0, #0]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	4718      	bx	r3
 80092b0:	4770      	bx	lr

080092b2 <Display::PutChar(int) [clone .isra.0]>:
 80092b2:	b110      	cbz	r0, 80092ba <Display::PutChar(int) [clone .isra.0]+0x8>
 80092b4:	6803      	ldr	r3, [r0, #0]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	4718      	bx	r3
 80092ba:	4770      	bx	lr

080092bc <DisplayHandler::Print(unsigned int)>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	7903      	ldrb	r3, [r0, #4]
 80092c0:	b1f3      	cbz	r3, 8009300 <DisplayHandler::Print(unsigned int)+0x44>
 80092c2:	2904      	cmp	r1, #4
 80092c4:	bf98      	it	ls
 80092c6:	4b0f      	ldrls	r3, [pc, #60]	; (8009304 <DisplayHandler::Print(unsigned int)+0x48>)
 80092c8:	4d0f      	ldr	r5, [pc, #60]	; (8009308 <DisplayHandler::Print(unsigned int)+0x4c>)
 80092ca:	bf98      	it	ls
 80092cc:	5c5c      	ldrbls	r4, [r3, r1]
 80092ce:	682b      	ldr	r3, [r5, #0]
 80092d0:	6998      	ldr	r0, [r3, #24]
 80092d2:	bf88      	it	hi
 80092d4:	2455      	movhi	r4, #85	; 0x55
 80092d6:	b178      	cbz	r0, 80092f8 <DisplayHandler::Print(unsigned int)+0x3c>
 80092d8:	7901      	ldrb	r1, [r0, #4]
 80092da:	3901      	subs	r1, #1
 80092dc:	b2c9      	uxtb	r1, r1
 80092de:	b168      	cbz	r0, 80092fc <DisplayHandler::Print(unsigned int)+0x40>
 80092e0:	7942      	ldrb	r2, [r0, #5]
 80092e2:	3a01      	subs	r2, #1
 80092e4:	b2d2      	uxtb	r2, r2
 80092e6:	f7ff ffdf 	bl	80092a8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80092ea:	682b      	ldr	r3, [r5, #0]
 80092ec:	4621      	mov	r1, r4
 80092ee:	6998      	ldr	r0, [r3, #24]
 80092f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092f4:	f7ff bfdd 	b.w	80092b2 <Display::PutChar(int) [clone .isra.0]>
 80092f8:	4601      	mov	r1, r0
 80092fa:	e7ee      	b.n	80092da <DisplayHandler::Print(unsigned int)+0x1e>
 80092fc:	4602      	mov	r2, r0
 80092fe:	e7f0      	b.n	80092e2 <DisplayHandler::Print(unsigned int)+0x26>
 8009300:	bd38      	pop	{r3, r4, r5, pc}
 8009302:	bf00      	nop
 8009304:	0801abec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, fp, sp, pc}
 8009308:	2000fcd4 	ldrdcs	pc, [r0], -r4

0800930c <RDMNetDevice::~RDMNetDevice()>:
 800930c:	b510      	push	{r4, lr}
 800930e:	4b06      	ldr	r3, [pc, #24]	; (8009328 <RDMNetDevice::~RDMNetDevice()+0x1c>)
 8009310:	4604      	mov	r4, r0
 8009312:	f840 3b88 	str.w	r3, [r0], #136
 8009316:	f006 fcf9 	bl	800fd0c <RDMSubDevices::~RDMSubDevices()>
 800931a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800931e:	f006 fcd5 	bl	800fccc <RDMSensors::~RDMSensors()>
 8009322:	4620      	mov	r0, r4
 8009324:	bd10      	pop	{r4, pc}
 8009326:	bf00      	nop
 8009328:	0801c3f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, lr, pc}

0800932c <non-virtual thunk to RDMNetDevice::~RDMNetDevice()>:
 800932c:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 8009330:	e7ec      	b.n	800930c <RDMNetDevice::~RDMNetDevice()>
 8009332:	bf00      	nop

08009334 <RDMNetDevice::~RDMNetDevice()>:
 8009334:	b510      	push	{r4, lr}
 8009336:	4604      	mov	r4, r0
 8009338:	f7ff ffe8 	bl	800930c <RDMNetDevice::~RDMNetDevice()>
 800933c:	4620      	mov	r0, r4
 800933e:	f00e ffe5 	bl	801830c <operator delete(void*)>
 8009342:	4620      	mov	r0, r4
 8009344:	bd10      	pop	{r4, pc}

08009346 <non-virtual thunk to RDMNetDevice::~RDMNetDevice()>:
 8009346:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 800934a:	e7f3      	b.n	8009334 <RDMNetDevice::~RDMNetDevice()>

0800934c <Display::ClearLine(unsigned char)>:
 800934c:	6980      	ldr	r0, [r0, #24]
 800934e:	b110      	cbz	r0, 8009356 <Display::ClearLine(unsigned char)+0xa>
 8009350:	6803      	ldr	r3, [r0, #0]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	4718      	bx	r3
 8009356:	4770      	bx	lr

08009358 <Display::Printf(unsigned char, char const*, ...)>:
 8009358:	b40c      	push	{r2, r3}
 800935a:	b570      	push	{r4, r5, r6, lr}
 800935c:	6984      	ldr	r4, [r0, #24]
 800935e:	b08a      	sub	sp, #40	; 0x28
 8009360:	4605      	mov	r5, r0
 8009362:	460e      	mov	r6, r1
 8009364:	b174      	cbz	r4, 8009384 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8009366:	ab0f      	add	r3, sp, #60	; 0x3c
 8009368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800936a:	9301      	str	r3, [sp, #4]
 800936c:	2120      	movs	r1, #32
 800936e:	a802      	add	r0, sp, #8
 8009370:	f001 f93c 	bl	800a5ec <vsnprintf>
 8009374:	4604      	mov	r4, r0
 8009376:	69a8      	ldr	r0, [r5, #24]
 8009378:	6803      	ldr	r3, [r0, #0]
 800937a:	aa02      	add	r2, sp, #8
 800937c:	69dd      	ldr	r5, [r3, #28]
 800937e:	4631      	mov	r1, r6
 8009380:	b2a3      	uxth	r3, r4
 8009382:	47a8      	blx	r5
 8009384:	4620      	mov	r0, r4
 8009386:	b00a      	add	sp, #40	; 0x28
 8009388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800938c:	b002      	add	sp, #8
 800938e:	4770      	bx	lr

08009390 <Display::TextStatus(char const*)>:
 8009390:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009394:	4604      	mov	r4, r0
 8009396:	6980      	ldr	r0, [r0, #24]
 8009398:	460d      	mov	r5, r1
 800939a:	b360      	cbz	r0, 80093f6 <Display::TextStatus(char const*)+0x66>
 800939c:	7946      	ldrb	r6, [r0, #5]
 800939e:	f890 8004 	ldrb.w	r8, [r0, #4]
 80093a2:	1e72      	subs	r2, r6, #1
 80093a4:	b2d2      	uxtb	r2, r2
 80093a6:	2100      	movs	r1, #0
 80093a8:	9201      	str	r2, [sp, #4]
 80093aa:	f7ff ff7d 	bl	80092a8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80093ae:	2700      	movs	r7, #0
 80093b0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80093b4:	45b8      	cmp	r8, r7
 80093b6:	9a01      	ldr	r2, [sp, #4]
 80093b8:	69a0      	ldr	r0, [r4, #24]
 80093ba:	d816      	bhi.n	80093ea <Display::TextStatus(char const*)+0x5a>
 80093bc:	2100      	movs	r1, #0
 80093be:	f7ff ff73 	bl	80092a8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80093c2:	69a0      	ldr	r0, [r4, #24]
 80093c4:	b1b8      	cbz	r0, 80093f6 <Display::TextStatus(char const*)+0x66>
 80093c6:	7901      	ldrb	r1, [r0, #4]
 80093c8:	2300      	movs	r3, #0
 80093ca:	5cea      	ldrb	r2, [r5, r3]
 80093cc:	b11a      	cbz	r2, 80093d6 <Display::TextStatus(char const*)+0x46>
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	4299      	cmp	r1, r3
 80093d2:	4613      	mov	r3, r2
 80093d4:	dcf9      	bgt.n	80093ca <Display::TextStatus(char const*)+0x3a>
 80093d6:	6802      	ldr	r2, [r0, #0]
 80093d8:	69d4      	ldr	r4, [r2, #28]
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	462a      	mov	r2, r5
 80093de:	4631      	mov	r1, r6
 80093e0:	46a4      	mov	ip, r4
 80093e2:	b002      	add	sp, #8
 80093e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093e8:	4760      	bx	ip
 80093ea:	2120      	movs	r1, #32
 80093ec:	9201      	str	r2, [sp, #4]
 80093ee:	3701      	adds	r7, #1
 80093f0:	f7ff ff5f 	bl	80092b2 <Display::PutChar(int) [clone .isra.0]>
 80093f4:	e7de      	b.n	80093b4 <Display::TextStatus(char const*)+0x24>
 80093f6:	b002      	add	sp, #8
 80093f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080093fc <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 80093fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093fe:	4605      	mov	r5, r0
 8009400:	461e      	mov	r6, r3
 8009402:	460f      	mov	r7, r1
 8009404:	4614      	mov	r4, r2
 8009406:	f7ff ffc3 	bl	8009390 <Display::TextStatus(char const*)>
 800940a:	7c6b      	ldrb	r3, [r5, #17]
 800940c:	b19b      	cbz	r3, 8009436 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 800940e:	43e2      	mvns	r2, r4
 8009410:	2312      	movs	r3, #18
 8009412:	7a28      	ldrb	r0, [r5, #8]
 8009414:	f88d 3004 	strb.w	r3, [sp, #4]
 8009418:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800941c:	f88d 3005 	strb.w	r3, [sp, #5]
 8009420:	f88d 2006 	strb.w	r2, [sp, #6]
 8009424:	f010 f8c8 	bl	80195b8 <gd32_i2c_set_address>
 8009428:	68e8      	ldr	r0, [r5, #12]
 800942a:	f010 f8bd 	bl	80195a8 <gd32_i2c_set_baudrate>
 800942e:	2103      	movs	r1, #3
 8009430:	a801      	add	r0, sp, #4
 8009432:	f010 f8c7 	bl	80195c4 <gd32_i2c_write>
 8009436:	1c73      	adds	r3, r6, #1
 8009438:	d006      	beq.n	8009448 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 800943a:	4639      	mov	r1, r7
 800943c:	4630      	mov	r0, r6
 800943e:	b003      	add	sp, #12
 8009440:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009444:	f00e bddc 	b.w	8018000 <console_status>
 8009448:	b003      	add	sp, #12
 800944a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800944c <Display::SetSleep(bool)>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4604      	mov	r4, r0
 8009450:	6980      	ldr	r0, [r0, #24]
 8009452:	460d      	mov	r5, r1
 8009454:	b138      	cbz	r0, 8009466 <Display::SetSleep(bool)+0x1a>
 8009456:	6803      	ldr	r3, [r0, #0]
 8009458:	7421      	strb	r1, [r4, #16]
 800945a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945c:	4798      	blx	r3
 800945e:	b915      	cbnz	r5, 8009466 <Display::SetSleep(bool)+0x1a>
 8009460:	4b01      	ldr	r3, [pc, #4]	; (8009468 <Display::SetSleep(bool)+0x1c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6063      	str	r3, [r4, #4]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	2000fddc 	ldrdcs	pc, [r0], -ip

0800946c <display::timeout::gpio_init()>:
 800946c:	b510      	push	{r4, lr}
 800946e:	f640 4002 	movw	r0, #3074	; 0xc02
 8009472:	f00f fbab 	bl	8018bcc <rcu_periph_clock_enable>
 8009476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800947a:	4803      	ldr	r0, [pc, #12]	; (8009488 <display::timeout::gpio_init()+0x1c>)
 800947c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009480:	2201      	movs	r2, #1
 8009482:	2100      	movs	r1, #0
 8009484:	f00f bb26 	b.w	8018ad4 <gpio_mode_set>
 8009488:	40020800 	andmi	r0, r2, r0, lsl #16

0800948c <display::timeout::gpio_renew()>:
 800948c:	4b03      	ldr	r3, [pc, #12]	; (800949c <display::timeout::gpio_renew()+0x10>)
 800948e:	f8d3 0810 	ldr.w	r0, [r3, #2064]	; 0x810
 8009492:	f480 5000 	eor.w	r0, r0, #8192	; 0x2000
 8009496:	f3c0 3040 	ubfx	r0, r0, #13, #1
 800949a:	4770      	bx	lr
 800949c:	40020000 	andmi	r0, r2, r0

080094a0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 80094a0:	2905      	cmp	r1, #5
 80094a2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094a6:	4606      	mov	r6, r0
 80094a8:	460f      	mov	r7, r1
 80094aa:	dc6e      	bgt.n	800958a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xea>
 80094ac:	4b38      	ldr	r3, [pc, #224]	; (8009590 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf0>)
 80094ae:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8009598 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf8>
 80094b2:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800959c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xfc>
 80094b6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80095a0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x100>
 80094ba:	6019      	str	r1, [r3, #0]
 80094bc:	2400      	movs	r4, #0
 80094be:	2f05      	cmp	r7, #5
 80094c0:	d80a      	bhi.n	80094d8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 80094c2:	e8df f007 	tbb	[pc, r7]
 80094c6:	1c120339 	ldcne	3, cr0, [r2], {57}	; 0x39
 80094ca:	23002d25 	movwcs	r2, #3365	; 0xd25
 80094ce:	2264      	movs	r2, #100	; 0x64
 80094d0:	4621      	mov	r1, r4
 80094d2:	4630      	mov	r0, r6
 80094d4:	f009 fc56 	bl	8012d84 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 80094d8:	3401      	adds	r4, #1
 80094da:	2c10      	cmp	r4, #16
 80094dc:	f108 0820 	add.w	r8, r8, #32
 80094e0:	d1ed      	bne.n	80094be <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x1e>
 80094e2:	2001      	movs	r0, #1
 80094e4:	b004      	add	sp, #16
 80094e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ea:	2364      	movs	r3, #100	; 0x64
 80094ec:	2200      	movs	r2, #0
 80094ee:	e9cd 3200 	strd	r3, r2, [sp]
 80094f2:	4621      	mov	r1, r4
 80094f4:	4b27      	ldr	r3, [pc, #156]	; (8009594 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf4>)
 80094f6:	4630      	mov	r0, r6
 80094f8:	f009 fc5a 	bl	8012db0 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80094fc:	e7ec      	b.n	80094d8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 80094fe:	2300      	movs	r3, #0
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	4a24      	ldr	r2, [pc, #144]	; (8009594 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf4>)
 8009504:	2364      	movs	r3, #100	; 0x64
 8009506:	4621      	mov	r1, r4
 8009508:	4630      	mov	r0, r6
 800950a:	f009 fc6d 	bl	8012de8 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 800950e:	e7e3      	b.n	80094d8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8009510:	2364      	movs	r3, #100	; 0x64
 8009512:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8009516:	4621      	mov	r1, r4
 8009518:	4630      	mov	r0, r6
 800951a:	f009 fc7f 	bl	8012e1c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 800951e:	e7db      	b.n	80094d8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8009520:	2364      	movs	r3, #100	; 0x64
 8009522:	2200      	movs	r2, #0
 8009524:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009528:	230a      	movs	r3, #10
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	4621      	mov	r1, r4
 800952e:	4b19      	ldr	r3, [pc, #100]	; (8009594 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf4>)
 8009530:	4630      	mov	r0, r6
 8009532:	f009 fca7 	bl	8012e84 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8009536:	e7cf      	b.n	80094d8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8009538:	2500      	movs	r5, #0
 800953a:	f8c8 501c 	str.w	r5, [r8, #28]
 800953e:	f8da 3000 	ldr.w	r3, [sl]
 8009542:	f8d9 0000 	ldr.w	r0, [r9]
 8009546:	429d      	cmp	r5, r3
 8009548:	d30a      	bcc.n	8009560 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc0>
 800954a:	f8d9 0000 	ldr.w	r0, [r9]
 800954e:	f00a fabd 	bl	8013acc <WS28xxMulti::IsUpdating()>
 8009552:	2800      	cmp	r0, #0
 8009554:	d1f9      	bne.n	800954a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xaa>
 8009556:	f8d9 0000 	ldr.w	r0, [r9]
 800955a:	f00a f951 	bl	8013800 <WS28xxMulti::Update()>
 800955e:	e7bb      	b.n	80094d8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8009560:	6803      	ldr	r3, [r0, #0]
 8009562:	2b07      	cmp	r3, #7
 8009564:	f04f 0300 	mov.w	r3, #0
 8009568:	d007      	beq.n	800957a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xda>
 800956a:	e9cd 3300 	strd	r3, r3, [sp]
 800956e:	462a      	mov	r2, r5
 8009570:	4621      	mov	r1, r4
 8009572:	f00a fb2b 	bl	8013bcc <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8009576:	3501      	adds	r5, #1
 8009578:	e7e1      	b.n	800953e <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x9e>
 800957a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	462a      	mov	r2, r5
 8009582:	4621      	mov	r1, r4
 8009584:	f00a fba4 	bl	8013cd0 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8009588:	e7f5      	b.n	8009576 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd6>
 800958a:	2000      	movs	r0, #0
 800958c:	e7aa      	b.n	80094e4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x44>
 800958e:	bf00      	nop
 8009590:	20001298 	mulcs	r0, r8, r2
 8009594:	00646464 	rsbeq	r6, r4, r4, ror #8
 8009598:	20001084 	andcs	r1, r0, r4, lsl #1
 800959c:	20001290 	mulcs	r0, r0, r2
 80095a0:	2000128c 	andcs	r1, r0, ip, lsl #5

080095a4 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)>:
 80095a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095a6:	780b      	ldrb	r3, [r1, #0]
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	4604      	mov	r4, r0
 80095ac:	d11e      	bne.n	80095ec <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x48>
 80095ae:	4b18      	ldr	r3, [pc, #96]	; (8009610 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x6c>)
 80095b0:	784d      	ldrb	r5, [r1, #1]
 80095b2:	6818      	ldr	r0, [r3, #0]
 80095b4:	4b17      	ldr	r3, [pc, #92]	; (8009614 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x70>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	429d      	cmp	r5, r3
 80095ba:	d017      	beq.n	80095ec <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x48>
 80095bc:	4629      	mov	r1, r5
 80095be:	f7ff ff6f 	bl	80094a0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 80095c2:	b198      	cbz	r0, 80095ec <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x48>
 80095c4:	b1a5      	cbz	r5, 80095f0 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4c>
 80095c6:	6863      	ldr	r3, [r4, #4]
 80095c8:	4c13      	ldr	r4, [pc, #76]	; (8009618 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x74>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	605a      	str	r2, [r3, #4]
 80095ce:	6820      	ldr	r0, [r4, #0]
 80095d0:	2106      	movs	r1, #6
 80095d2:	f7ff febb 	bl	800934c <Display::ClearLine(unsigned char)>
 80095d6:	4628      	mov	r0, r5
 80095d8:	6824      	ldr	r4, [r4, #0]
 80095da:	f009 fbc7 	bl	8012d6c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80095de:	4a0f      	ldr	r2, [pc, #60]	; (800961c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x78>)
 80095e0:	9500      	str	r5, [sp, #0]
 80095e2:	4603      	mov	r3, r0
 80095e4:	2106      	movs	r1, #6
 80095e6:	4620      	mov	r0, r4
 80095e8:	f7ff feb6 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 80095ec:	b003      	add	sp, #12
 80095ee:	bd30      	pop	{r4, r5, pc}
 80095f0:	68a0      	ldr	r0, [r4, #8]
 80095f2:	6803      	ldr	r3, [r0, #0]
 80095f4:	2101      	movs	r1, #1
 80095f6:	695b      	ldr	r3, [r3, #20]
 80095f8:	4798      	blx	r3
 80095fa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80095fe:	605a      	str	r2, [r3, #4]
 8009600:	4b07      	ldr	r3, [pc, #28]	; (8009620 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x7c>)
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	b003      	add	sp, #12
 8009606:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800960a:	f00d bbef 	b.w	8016dec <DisplayUdf::Show()>
 800960e:	bf00      	nop
 8009610:	20001294 	mulcs	r0, r4, r2
 8009614:	20001298 	mulcs	r0, r8, r2
 8009618:	2000fcd4 	ldrdcs	pc, [r0], -r4
 800961c:	0801a9f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, fp, sp, pc}
 8009620:	2000fccc 	andcs	pc, r0, ip, asr #25

08009624 <StoreNetwork::SaveDhcp(bool)>:
 8009624:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009626:	2301      	movs	r3, #1
 8009628:	f88d 1017 	strb.w	r1, [sp, #23]
 800962c:	2100      	movs	r1, #0
 800962e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009632:	4805      	ldr	r0, [pc, #20]	; (8009648 <StoreNetwork::SaveDhcp(bool)+0x24>)
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	6800      	ldr	r0, [r0, #0]
 8009638:	f10d 0317 	add.w	r3, sp, #23
 800963c:	2214      	movs	r2, #20
 800963e:	f00a fc6d 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8009642:	b007      	add	sp, #28
 8009644:	f85d fb04 	ldr.w	pc, [sp], #4
 8009648:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

0800964c <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 800964c:	f1a0 0004 	sub.w	r0, r0, #4
 8009650:	e7e8      	b.n	8009624 <StoreNetwork::SaveDhcp(bool)>
 8009652:	bf00      	nop

08009654 <FactoryDefaults::Set()>:
 8009654:	b508      	push	{r3, lr}
 8009656:	4b08      	ldr	r3, [pc, #32]	; (8009678 <FactoryDefaults::Set()+0x24>)
 8009658:	2100      	movs	r1, #0
 800965a:	6818      	ldr	r0, [r3, #0]
 800965c:	f001 faea 	bl	800ac34 <RemoteConfig::SetDisable(bool)>
 8009660:	4b06      	ldr	r3, [pc, #24]	; (800967c <FactoryDefaults::Set()+0x28>)
 8009662:	210b      	movs	r1, #11
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	f00a fc47 	bl	8013ef8 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800966a:	4b05      	ldr	r3, [pc, #20]	; (8009680 <FactoryDefaults::Set()+0x2c>)
 800966c:	2101      	movs	r1, #1
 800966e:	6818      	ldr	r0, [r3, #0]
 8009670:	f7ff ffd8 	bl	8009624 <StoreNetwork::SaveDhcp(bool)>
 8009674:	bd08      	pop	{r3, pc}
 8009676:	bf00      	nop
 8009678:	20000124 	andcs	r0, r0, r4, lsr #2
 800967c:	200092b8 			; <UNDEFINED> instruction: 0x200092b8
 8009680:	200092c8 	andcs	r9, r0, r8, asr #5

08009684 <Hardware::RebootHandler()>:
 8009684:	b508      	push	{r3, lr}
 8009686:	4b07      	ldr	r3, [pc, #28]	; (80096a4 <Hardware::RebootHandler()+0x20>)
 8009688:	6818      	ldr	r0, [r3, #0]
 800968a:	f00a f95d 	bl	8013948 <WS28xxMulti::Blackout()>
 800968e:	4b06      	ldr	r3, [pc, #24]	; (80096a8 <Hardware::RebootHandler()+0x24>)
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	f008 fad9 	bl	8011c48 <Dmx::Blackout()>
 8009696:	4b05      	ldr	r3, [pc, #20]	; (80096ac <Hardware::RebootHandler()+0x28>)
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800969e:	f002 bd69 	b.w	800c174 <ArtNetNode::Stop()>
 80096a2:	bf00      	nop
 80096a4:	200012a0 	andcs	r1, r0, r0, lsr #5
 80096a8:	20001078 	andcs	r1, r0, r8, ror r0
 80096ac:	200006cc 	andcs	r0, r0, ip, asr #13

080096b0 <main>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	f5ad 5d59 	sub.w	sp, sp, #13888	; 0x3640
 80096b8:	b08d      	sub	sp, #52	; 0x34
 80096ba:	ac0c      	add	r4, sp, #48	; 0x30
 80096bc:	f1a4 0018 	sub.w	r0, r4, #24
 80096c0:	f00e fd58 	bl	8018174 <Hardware::Hardware()>
 80096c4:	a8e4      	add	r0, sp, #912	; 0x390
 80096c6:	f00c f98d 	bl	80159e4 <Network::Network()>
 80096ca:	a827      	add	r0, sp, #156	; 0x9c
 80096cc:	f00e fcf6 	bl	80180bc <LedBlink::LedBlink()>
 80096d0:	a895      	add	r0, sp, #596	; 0x254
 80096d2:	f00d fab3 	bl	8016c3c <DisplayUdf::DisplayUdf()>
 80096d6:	4abe      	ldr	r2, [pc, #760]	; (80099d0 <main+0x320>)
 80096d8:	4bbe      	ldr	r3, [pc, #760]	; (80099d4 <main+0x324>)
 80096da:	49bf      	ldr	r1, [pc, #764]	; (80099d8 <main+0x328>)
 80096dc:	a807      	add	r0, sp, #28
 80096de:	f00e fca7 	bl	8018030 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 80096e2:	a81a      	add	r0, sp, #104	; 0x68
 80096e4:	f00b f91e 	bl	8014924 <FlashRom::FlashRom()>
 80096e8:	a808      	add	r0, sp, #32
 80096ea:	f00a fbdf 	bl	8013eac <SpiFlashStore::SpiFlashStore()>
 80096ee:	49bb      	ldr	r1, [pc, #748]	; (80099dc <main+0x32c>)
 80096f0:	a807      	add	r0, sp, #28
 80096f2:	f00e fcd5 	bl	80180a0 <FirmwareVersion::Print(char const*)>
 80096f6:	4bba      	ldr	r3, [pc, #744]	; (80099e0 <main+0x330>)
 80096f8:	2601      	movs	r6, #1
 80096fa:	f8c3 6818 	str.w	r6, [r3, #2072]	; 0x818
 80096fe:	2008      	movs	r0, #8
 8009700:	f00e fe08 	bl	8018314 <operator new(unsigned int)>
 8009704:	4bb7      	ldr	r3, [pc, #732]	; (80099e4 <main+0x334>)
 8009706:	6003      	str	r3, [r0, #0]
 8009708:	4bb7      	ldr	r3, [pc, #732]	; (80099e8 <main+0x338>)
 800970a:	49b8      	ldr	r1, [pc, #736]	; (80099ec <main+0x33c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3b00      	subs	r3, #0
 8009710:	bf18      	it	ne
 8009712:	2301      	movne	r3, #1
 8009714:	7103      	strb	r3, [r0, #4]
 8009716:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800971a:	9029      	str	r0, [sp, #164]	; 0xa4
 800971c:	ab27      	add	r3, sp, #156	; 0x9c
 800971e:	a895      	add	r0, sp, #596	; 0x254
 8009720:	2303      	movs	r3, #3
 8009722:	f7ff fe6b 	bl	80093fc <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009726:	a812      	add	r0, sp, #72	; 0x48
 8009728:	f00a fdbe 	bl	80142a8 <StoreNetwork::StoreNetwork()>
 800972c:	abe4      	add	r3, sp, #912	; 0x390
 800972e:	aa13      	add	r2, sp, #76	; 0x4c
 8009730:	4618      	mov	r0, r3
 8009732:	a912      	add	r1, sp, #72	; 0x48
 8009734:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8009738:	f00c f9ae 	bl	8015a98 <Network::Init(NetworkParamsStore*)>
 800973c:	a8e4      	add	r0, sp, #912	; 0x390
 800973e:	f00c fc37 	bl	8015fb0 <Network::Print()>
 8009742:	49ab      	ldr	r1, [pc, #684]	; (80099f0 <main+0x340>)
 8009744:	2303      	movs	r3, #3
 8009746:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800974a:	a895      	add	r0, sp, #596	; 0x254
 800974c:	f7ff fe56 	bl	80093fc <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009750:	a809      	add	r0, sp, #36	; 0x24
 8009752:	f00b fd83 	bl	801525c <MDNS::MDNS()>
 8009756:	2500      	movs	r5, #0
 8009758:	a809      	add	r0, sp, #36	; 0x24
 800975a:	f00b fe3f 	bl	80153dc <MDNS::Start()>
 800975e:	4aa5      	ldr	r2, [pc, #660]	; (80099f4 <main+0x344>)
 8009760:	f642 1305 	movw	r3, #10501	; 0x2905
 8009764:	4629      	mov	r1, r5
 8009766:	e9cd 5500 	strd	r5, r5, [sp]
 800976a:	a809      	add	r0, sp, #36	; 0x24
 800976c:	f00b ffa4 	bl	80156b8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8009770:	4ba1      	ldr	r3, [pc, #644]	; (80099f8 <main+0x348>)
 8009772:	4aa2      	ldr	r2, [pc, #648]	; (80099fc <main+0x34c>)
 8009774:	4629      	mov	r1, r5
 8009776:	e9cd 6300 	strd	r6, r3, [sp]
 800977a:	a809      	add	r0, sp, #36	; 0x24
 800977c:	2350      	movs	r3, #80	; 0x50
 800977e:	f00b ff9b 	bl	80156b8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8009782:	a809      	add	r0, sp, #36	; 0x24
 8009784:	f00c f8e0 	bl	8015948 <MDNS::Print()>
 8009788:	a85a      	add	r0, sp, #360	; 0x168
 800978a:	f001 ff4d 	bl	800b628 <HttpDaemon::HttpDaemon()>
 800978e:	a85a      	add	r0, sp, #360	; 0x168
 8009790:	f001 ff5e 	bl	800b650 <HttpDaemon::Start()>
 8009794:	2303      	movs	r3, #3
 8009796:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 800979a:	4999      	ldr	r1, [pc, #612]	; (8009a00 <main+0x350>)
 800979c:	a895      	add	r0, sp, #596	; 0x254
 800979e:	f7ff fe2d 	bl	80093fc <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80097a2:	2140      	movs	r1, #64	; 0x40
 80097a4:	a814      	add	r0, sp, #80	; 0x50
 80097a6:	f00a ff75 	bl	8014694 <StoreArtNet::StoreArtNet(unsigned int)>
 80097aa:	a914      	add	r1, sp, #80	; 0x50
 80097ac:	a8c1      	add	r0, sp, #772	; 0x304
 80097ae:	f004 fa4b 	bl	800dc48 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 80097b2:	f50d 60a7 	add.w	r0, sp, #1336	; 0x538
 80097b6:	f002 fc1d 	bl	800bff4 <ArtNet4Node::ArtNet4Node()>
 80097ba:	a8c1      	add	r0, sp, #772	; 0x304
 80097bc:	f004 fa64 	bl	800dc88 <ArtNetParams::Load()>
 80097c0:	b130      	cbz	r0, 80097d0 <main+0x120>
 80097c2:	a8c1      	add	r0, sp, #772	; 0x304
 80097c4:	f004 fe94 	bl	800e4f0 <ArtNetParams::Dump()>
 80097c8:	2140      	movs	r1, #64	; 0x40
 80097ca:	a8c1      	add	r0, sp, #772	; 0x304
 80097cc:	f004 fdfc 	bl	800e3c8 <ArtNetParams::Set(unsigned int)>
 80097d0:	ab6e      	add	r3, sp, #440	; 0x1b8
 80097d2:	21aa      	movs	r1, #170	; 0xaa
 80097d4:	2203      	movs	r2, #3
 80097d6:	e9c3 2100 	strd	r2, r1, [r3]
 80097da:	2006      	movs	r0, #6
 80097dc:	2200      	movs	r2, #0
 80097de:	e9c3 0202 	strd	r0, r2, [r3, #8]
 80097e2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80097e6:	611a      	str	r2, [r3, #16]
 80097e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097ec:	829a      	strh	r2, [r3, #20]
 80097ee:	4a85      	ldr	r2, [pc, #532]	; (8009a04 <main+0x354>)
 80097f0:	619a      	str	r2, [r3, #24]
 80097f2:	2201      	movs	r2, #1
 80097f4:	6259      	str	r1, [r3, #36]	; 0x24
 80097f6:	e9c3 2207 	strd	r2, r2, [r3, #28]
 80097fa:	859a      	strh	r2, [r3, #44]	; 0x2c
 80097fc:	a816      	add	r0, sp, #88	; 0x58
 80097fe:	f00b f82d 	bl	801485c <StorePixelDmx::StorePixelDmx()>
 8009802:	a916      	add	r1, sp, #88	; 0x58
 8009804:	a886      	add	r0, sp, #536	; 0x218
 8009806:	f008 fc81 	bl	801210c <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 800980a:	a886      	add	r0, sp, #536	; 0x218
 800980c:	f008 fc9e 	bl	801214c <PixelDmxParams::Load()>
 8009810:	b130      	cbz	r0, 8009820 <main+0x170>
 8009812:	a886      	add	r0, sp, #536	; 0x218
 8009814:	f008 ffee 	bl	80127f4 <PixelDmxParams::Dump()>
 8009818:	a96e      	add	r1, sp, #440	; 0x1b8
 800981a:	a886      	add	r0, sp, #536	; 0x218
 800981c:	f008 ffa5 	bl	801276a <PixelDmxParams::Set(PixelDmxConfiguration*)>
 8009820:	f50d 792b 	add.w	r9, sp, #684	; 0x2ac
 8009824:	a96e      	add	r1, sp, #440	; 0x1b8
 8009826:	4648      	mov	r0, r9
 8009828:	f008 fb88 	bl	8011f3c <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)>
 800982c:	2004      	movs	r0, #4
 800982e:	f00e fd71 	bl	8018314 <operator new(unsigned int)>
 8009832:	4b75      	ldr	r3, [pc, #468]	; (8009a08 <main+0x358>)
 8009834:	6003      	str	r3, [r0, #0]
 8009836:	4605      	mov	r5, r0
 8009838:	2304      	movs	r3, #4
 800983a:	4874      	ldr	r0, [pc, #464]	; (8009a0c <main+0x35c>)
 800983c:	2200      	movs	r2, #0
 800983e:	2101      	movs	r1, #1
 8009840:	f00f f948 	bl	8018ad4 <gpio_mode_set>
 8009844:	2304      	movs	r3, #4
 8009846:	2202      	movs	r2, #2
 8009848:	4870      	ldr	r0, [pc, #448]	; (8009a0c <main+0x35c>)
 800984a:	2100      	movs	r1, #0
 800984c:	f00f f962 	bl	8018b14 <gpio_output_options_set>
 8009850:	4b63      	ldr	r3, [pc, #396]	; (80099e0 <main+0x330>)
 8009852:	2204      	movs	r2, #4
 8009854:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 8009858:	f8d9 8020 	ldr.w	r8, [r9, #32]
 800985c:	f8c9 504c 	str.w	r5, [r9, #76]	; 0x4c
 8009860:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
 8009864:	2500      	movs	r5, #0
 8009866:	462e      	mov	r6, r5
 8009868:	f20d 5b3c 	addw	fp, sp, #1340	; 0x53c
 800986c:	4545      	cmp	r5, r8
 800986e:	f040 82de 	bne.w	8009e2e <main+0x77e>
 8009872:	f89d a22c 	ldrb.w	sl, [sp, #556]	; 0x22c
 8009876:	4f66      	ldr	r7, [pc, #408]	; (8009a10 <main+0x360>)
 8009878:	4641      	mov	r1, r8
 800987a:	a80a      	add	r0, sp, #40	; 0x28
 800987c:	ab86      	add	r3, sp, #536	; 0x218
 800987e:	f009 fa4f 	bl	8012d20 <PixelPatterns::PixelPatterns(unsigned int)>
 8009882:	4651      	mov	r1, sl
 8009884:	a80a      	add	r0, sp, #40	; 0x28
 8009886:	f8c7 a000 	str.w	sl, [r7]
 800988a:	f7ff fe09 	bl	80094a0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 800988e:	f89d 630c 	ldrb.w	r6, [sp, #780]	; 0x30c
 8009892:	f89d 330d 	ldrb.w	r3, [sp, #781]	; 0x30d
 8009896:	f8bd 537d 	ldrh.w	r5, [sp, #893]	; 0x37d
 800989a:	0236      	lsls	r6, r6, #8
 800989c:	011b      	lsls	r3, r3, #4
 800989e:	f005 0503 	and.w	r5, r5, #3
 80098a2:	f406 46fe 	and.w	r6, r6, #32512	; 0x7f00
 80098a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098aa:	2d01      	cmp	r5, #1
 80098ac:	aac1      	add	r2, sp, #772	; 0x304
 80098ae:	ea46 0603 	orr.w	r6, r6, r3
 80098b2:	f040 82e0 	bne.w	8009e76 <main+0x7c6>
 80098b6:	f892 306b 	ldrb.w	r3, [r2, #107]	; 0x6b
 80098ba:	2140      	movs	r1, #64	; 0x40
 80098bc:	4333      	orrs	r3, r6
 80098be:	462a      	mov	r2, r5
 80098c0:	f20d 503c 	addw	r0, sp, #1340	; 0x53c
 80098c4:	f002 ffc1 	bl	800c84a <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 80098c8:	f8bd 237d 	ldrh.w	r2, [sp, #893]	; 0x37d
 80098cc:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80098d0:	2a01      	cmp	r2, #1
 80098d2:	abc1      	add	r3, sp, #772	; 0x304
 80098d4:	d108      	bne.n	80098e8 <main+0x238>
 80098d6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80098da:	2141      	movs	r1, #65	; 0x41
 80098dc:	4333      	orrs	r3, r6
 80098de:	f20d 503c 	addw	r0, sp, #1340	; 0x53c
 80098e2:	f002 ffb2 	bl	800c84a <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 80098e6:	3501      	adds	r5, #1
 80098e8:	a80b      	add	r0, sp, #44	; 0x2c
 80098ea:	f00a fc45 	bl	8014178 <StoreDmxSend::StoreDmxSend()>
 80098ee:	a90b      	add	r1, sp, #44	; 0x2c
 80098f0:	a823      	add	r0, sp, #140	; 0x8c
 80098f2:	f007 fbc5 	bl	8011080 <DmxParams::DmxParams(DmxParamsStore*)>
 80098f6:	a83f      	add	r0, sp, #252	; 0xfc
 80098f8:	f008 f87a 	bl	80119f0 <Dmx::Dmx()>
 80098fc:	a823      	add	r0, sp, #140	; 0x8c
 80098fe:	f007 fbcb 	bl	8011098 <DmxParams::Load()>
 8009902:	b130      	cbz	r0, 8009912 <main+0x262>
 8009904:	a823      	add	r0, sp, #140	; 0x8c
 8009906:	f007 fd19 	bl	801133c <DmxParams::Dump()>
 800990a:	a93f      	add	r1, sp, #252	; 0xfc
 800990c:	a823      	add	r0, sp, #140	; 0x8c
 800990e:	f007 fce7 	bl	80112e0 <DmxParams::Set(Dmx*)>
 8009912:	4b40      	ldr	r3, [pc, #256]	; (8009a14 <main+0x364>)
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	4620      	mov	r0, r4
 8009918:	f007 fb58 	bl	8010fcc <DmxSend::Print()>
 800991c:	2d00      	cmp	r5, #0
 800991e:	f000 82ac 	beq.w	8009e7a <main+0x7ca>
 8009922:	2001      	movs	r0, #1
 8009924:	f00e fcf6 	bl	8018314 <operator new(unsigned int)>
 8009928:	4b3b      	ldr	r3, [pc, #236]	; (8009a18 <main+0x368>)
 800992a:	4606      	mov	r6, r0
 800992c:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8009930:	6818      	ldr	r0, [r3, #0]
 8009932:	f00c f889 	bl	8015a48 <Network::Begin(unsigned short)>
 8009936:	4b39      	ldr	r3, [pc, #228]	; (8009a1c <main+0x36c>)
 8009938:	6018      	str	r0, [r3, #0]
 800993a:	ab95      	add	r3, sp, #596	; 0x254
 800993c:	2201      	movs	r2, #1
 800993e:	e9c3 2514 	strd	r2, r5, [r3, #80]	; 0x50
 8009942:	ab0d      	add	r3, sp, #52	; 0x34
 8009944:	4a36      	ldr	r2, [pc, #216]	; (8009a20 <main+0x370>)
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	f50d 6ba7 	add.w	fp, sp, #1336	; 0x538
 800994c:	ab0d      	add	r3, sp, #52	; 0x34
 800994e:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8009952:	ab15      	add	r3, sp, #84	; 0x54
 8009954:	f8cb 3020 	str.w	r3, [fp, #32]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	4832      	ldr	r0, [pc, #200]	; (8009a24 <main+0x374>)
 800995c:	2b00      	cmp	r3, #0
 800995e:	bf0c      	ite	eq
 8009960:	4649      	moveq	r1, r9
 8009962:	2100      	movne	r1, #0
 8009964:	ab1d      	add	r3, sp, #116	; 0x74
 8009966:	2d00      	cmp	r5, #0
 8009968:	bf14      	ite	ne
 800996a:	4622      	movne	r2, r4
 800996c:	2200      	moveq	r2, #0
 800996e:	e9c3 0100 	strd	r0, r1, [r3]
 8009972:	609a      	str	r2, [r3, #8]
 8009974:	a81d      	add	r0, sp, #116	; 0x74
 8009976:	f7ff fbd5 	bl	8009124 <LightSet64with4::Print()>
 800997a:	ab20      	add	r3, sp, #128	; 0x80
 800997c:	a81d      	add	r0, sp, #116	; 0x74
 800997e:	4a2a      	ldr	r2, [pc, #168]	; (8009a28 <main+0x378>)
 8009980:	601a      	str	r2, [r3, #0]
 8009982:	e9c3 0901 	strd	r0, r9, [r3, #4]
 8009986:	4b29      	ldr	r3, [pc, #164]	; (8009a2c <main+0x37c>)
 8009988:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8009a38 <main+0x388>
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	f8cb 0008 	str.w	r0, [fp, #8]
 8009992:	ab20      	add	r3, sp, #128	; 0x80
 8009994:	6153      	str	r3, [r2, #20]
 8009996:	4658      	mov	r0, fp
 8009998:	f002 fb84 	bl	800c0a4 <ArtNet4Node::Print()>
 800999c:	4924      	ldr	r1, [pc, #144]	; (8009a30 <main+0x380>)
 800999e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80099a2:	2303      	movs	r3, #3
 80099a4:	a895      	add	r0, sp, #596	; 0x254
 80099a6:	f7ff fd29 	bl	80093fc <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80099aa:	f8d9 3000 	ldr.w	r3, [r9]
 80099ae:	6818      	ldr	r0, [r3, #0]
 80099b0:	f009 f888 	bl	8012ac4 <PixelType::GetType(pixel::Type)>
 80099b4:	9502      	str	r5, [sp, #8]
 80099b6:	f8d9 3000 	ldr.w	r3, [r9]
 80099ba:	4a1e      	ldr	r2, [pc, #120]	; (8009a34 <main+0x384>)
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	2120      	movs	r1, #32
 80099c0:	e9cd 0300 	strd	r0, r3, [sp]
 80099c4:	4643      	mov	r3, r8
 80099c6:	a82d      	add	r0, sp, #180	; 0xb4
 80099c8:	f000 fdf8 	bl	800a5bc <snprintf>
 80099cc:	e036      	b.n	8009a3c <main+0x38c>
 80099ce:	bf00      	nop
 80099d0:	0801aa00 	stmdaeq	r1, {r9, fp, sp, pc}
 80099d4:	0801a9f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, fp, sp, pc}
 80099d8:	0801abf1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, fp, sp, pc}
 80099dc:	0801aa0c 	stmdaeq	r1, {r2, r3, r9, fp, sp, pc}
 80099e0:	40020000 	andmi	r0, r2, r0
 80099e4:	0801aaf4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, fp, sp, pc}
 80099e8:	2000fcd4 	ldrdcs	pc, [r0], -r4
 80099ec:	0801d595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, ip, lr, pc}
 80099f0:	0801d584 	stmdaeq	r1, {r2, r7, r8, sl, ip, lr, pc}
 80099f4:	0801aa4c 	stmdaeq	r1, {r2, r3, r6, r9, fp, sp, pc}
 80099f8:	0801aa5c 	stmdaeq	r1, {r2, r3, r4, r6, r9, fp, sp, pc}
 80099fc:	0801aa55 	stmdaeq	r1, {r0, r2, r4, r6, r9, fp, sp, pc}
 8009a00:	0801be35 	stmdaeq	r1, {r0, r2, r4, r5, r9, sl, fp, ip, sp, pc}
 8009a04:	0801abf5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, fp, sp, pc}
 8009a08:	0801ab88 	stmdaeq	r1, {r3, r7, r8, r9, fp, sp, pc}
 8009a0c:	40020800 	andmi	r0, r2, r0, lsl #16
 8009a10:	20001298 	mulcs	r0, r8, r2
 8009a14:	0801c78c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sl, lr, pc}
 8009a18:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 8009a1c:	20000010 	andcs	r0, r0, r0, lsl r0
 8009a20:	0801ab08 	stmdaeq	r1, {r3, r8, r9, fp, sp, pc}
 8009a24:	0801ab3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, fp, sp, pc}
 8009a28:	0801ab74 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, fp, sp, pc}
 8009a2c:	200006cc 	andcs	r0, r0, ip, asr #13
 8009a30:	0801c2f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, lr, pc}
 8009a34:	0801aa73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r9, fp, sp, pc}
 8009a38:	200012a0 	andcs	r1, r0, r0, lsr #5
 8009a3c:	ab36      	add	r3, sp, #216	; 0xd8
 8009a3e:	4abb      	ldr	r2, [pc, #748]	; (8009d2c <main+0x67c>)
 8009a40:	9304      	str	r3, [sp, #16]
 8009a42:	4618      	mov	r0, r3
 8009a44:	2120      	movs	r1, #32
 8009a46:	f000 fdb9 	bl	800a5bc <snprintf>
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	202c      	movs	r0, #44	; 0x2c
 8009a4e:	f00e fc61 	bl	8018314 <operator new(unsigned int)>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2200      	movs	r2, #0
 8009a56:	6042      	str	r2, [r0, #4]
 8009a58:	6282      	str	r2, [r0, #40]	; 0x28
 8009a5a:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 8009a5e:	f823 2b08 	strh.w	r2, [r3], #8
 8009a62:	aa2d      	add	r2, sp, #180	; 0xb4
 8009a64:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009a68:	b111      	cbz	r1, 8009a70 <main+0x3c0>
 8009a6a:	4563      	cmp	r3, ip
 8009a6c:	f040 8207 	bne.w	8009e7e <main+0x7ce>
 8009a70:	2201      	movs	r2, #1
 8009a72:	900e      	str	r0, [sp, #56]	; 0x38
 8009a74:	a90e      	add	r1, sp, #56	; 0x38
 8009a76:	f20d 405c 	addw	r0, sp, #1116	; 0x45c
 8009a7a:	ab0e      	add	r3, sp, #56	; 0x38
 8009a7c:	f006 fa6a 	bl	800ff54 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
 8009a80:	f50d 60a5 	add.w	r0, sp, #1320	; 0x528
 8009a84:	f005 ffe2 	bl	800fa4c <LLRPDevice::LLRPDevice()>
 8009a88:	f20d 4b5c 	addw	fp, sp, #1116	; 0x45c
 8009a8c:	4ba8      	ldr	r3, [pc, #672]	; (8009d30 <main+0x680>)
 8009a8e:	f8cb 3000 	str.w	r3, [fp]
 8009a92:	3324      	adds	r3, #36	; 0x24
 8009a94:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
 8009a98:	2100      	movs	r1, #0
 8009a9a:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
 8009a9e:	f006 fc50 	bl	8010342 <RDMHandler::RDMHandler(bool)>
 8009aa2:	4ba4      	ldr	r3, [pc, #656]	; (8009d34 <main+0x684>)
 8009aa4:	49a4      	ldr	r1, [pc, #656]	; (8009d38 <main+0x688>)
 8009aa6:	6818      	ldr	r0, [r3, #0]
 8009aa8:	f00e fbd4 	bl	8018254 <Hardware::GetUuid(unsigned char*)>
 8009aac:	b2ed      	uxtb	r5, r5
 8009aae:	f89b 3054 	ldrb.w	r3, [fp, #84]	; 0x54
 8009ab2:	2d20      	cmp	r5, #32
 8009ab4:	bf28      	it	cs
 8009ab6:	2520      	movcs	r5, #32
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 81e6 	beq.w	8009e8a <main+0x7da>
 8009abe:	f20d 436a 	addw	r3, sp, #1130	; 0x46a
 8009ac2:	9904      	ldr	r1, [sp, #16]
 8009ac4:	9304      	str	r3, [sp, #16]
 8009ac6:	462a      	mov	r2, r5
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7ff facc 	bl	8009066 <memcpy>
 8009ace:	f8db 0078 	ldr.w	r0, [fp, #120]	; 0x78
 8009ad2:	f88b 502e 	strb.w	r5, [fp, #46]	; 0x2e
 8009ad6:	b130      	cbz	r0, 8009ae6 <main+0x436>
 8009ad8:	6802      	ldr	r2, [r0, #0]
 8009ada:	9b04      	ldr	r3, [sp, #16]
 8009adc:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	462a      	mov	r2, r5
 8009ae4:	47d8      	blx	fp
 8009ae6:	f20d 455c 	addw	r5, sp, #1116	; 0x45c
 8009aea:	4b94      	ldr	r3, [pc, #592]	; (8009d3c <main+0x68c>)
 8009aec:	652b      	str	r3, [r5, #80]	; 0x50
 8009aee:	2004      	movs	r0, #4
 8009af0:	f00e fc10 	bl	8018314 <operator new(unsigned int)>
 8009af4:	4b92      	ldr	r3, [pc, #584]	; (8009d40 <main+0x690>)
 8009af6:	f8c5 00c8 	str.w	r0, [r5, #200]	; 0xc8
 8009afa:	f50d 658c 	add.w	r5, sp, #1120	; 0x460
 8009afe:	6003      	str	r3, [r0, #0]
 8009b00:	2201      	movs	r2, #1
 8009b02:	4629      	mov	r1, r5
 8009b04:	f20d 503c 	addw	r0, sp, #1340	; 0x53c
 8009b08:	f003 fee3 	bl	800d8d2 <ArtNetNode::SetRdmUID(unsigned char const*, bool)>
 8009b0c:	f20d 405c 	addw	r0, sp, #1116	; 0x45c
 8009b10:	f006 fa70 	bl	800fff4 <RDMDeviceResponder::Init()>
 8009b14:	a818      	add	r0, sp, #96	; 0x60
 8009b16:	f00a fc27 	bl	8014368 <StoreRDMDevice::StoreRDMDevice()>
 8009b1a:	ab7a      	add	r3, sp, #488	; 0x1e8
 8009b1c:	a918      	add	r1, sp, #96	; 0x60
 8009b1e:	4618      	mov	r0, r3
 8009b20:	9304      	str	r3, [sp, #16]
 8009b22:	f006 f9a5 	bl	800fe70 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 8009b26:	9804      	ldr	r0, [sp, #16]
 8009b28:	f006 f9b4 	bl	800fe94 <RDMDeviceParams::Load()>
 8009b2c:	b130      	cbz	r0, 8009b3c <main+0x48c>
 8009b2e:	9804      	ldr	r0, [sp, #16]
 8009b30:	f006 f9f3 	bl	800ff1a <RDMDeviceParams::Dump()>
 8009b34:	9804      	ldr	r0, [sp, #16]
 8009b36:	4629      	mov	r1, r5
 8009b38:	f006 f9b7 	bl	800feaa <RDMDeviceParams::Set(RDMDevice*)>
 8009b3c:	f20d 435c 	addw	r3, sp, #1116	; 0x45c
 8009b40:	aa19      	add	r2, sp, #100	; 0x64
 8009b42:	679a      	str	r2, [r3, #120]	; 0x78
 8009b44:	4618      	mov	r0, r3
 8009b46:	f006 f899 	bl	800fc7c <RDMNetDevice::Print()>
 8009b4a:	f8d9 3000 	ldr.w	r3, [r9]
 8009b4e:	497d      	ldr	r1, [pc, #500]	; (8009d44 <main+0x694>)
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	4642      	mov	r2, r8
 8009b54:	a895      	add	r0, sp, #596	; 0x254
 8009b56:	f00d f887 	bl	8016c68 <DisplayUdf::SetTitle(char const*, ...)>
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	a895      	add	r0, sp, #596	; 0x254
 8009b60:	f00d f895 	bl	8016c8e <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009b64:	2206      	movs	r2, #6
 8009b66:	2103      	movs	r1, #3
 8009b68:	a895      	add	r0, sp, #596	; 0x254
 8009b6a:	f00d f890 	bl	8016c8e <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009b6e:	2203      	movs	r2, #3
 8009b70:	2104      	movs	r1, #4
 8009b72:	a895      	add	r0, sp, #596	; 0x254
 8009b74:	f00d f88b 	bl	8016c8e <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009b78:	ad6e      	add	r5, sp, #440	; 0x1b8
 8009b7a:	2208      	movs	r2, #8
 8009b7c:	2105      	movs	r1, #5
 8009b7e:	a895      	add	r0, sp, #596	; 0x254
 8009b80:	f00d f885 	bl	8016c8e <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009b84:	2213      	movs	r2, #19
 8009b86:	2106      	movs	r1, #6
 8009b88:	a895      	add	r0, sp, #596	; 0x254
 8009b8a:	f00d f880 	bl	8016c8e <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009b8e:	6828      	ldr	r0, [r5, #0]
 8009b90:	f008 ff98 	bl	8012ac4 <PixelType::GetType(pixel::Type)>
 8009b94:	9004      	str	r0, [sp, #16]
 8009b96:	68a8      	ldr	r0, [r5, #8]
 8009b98:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8009b9c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8009ba0:	f008 ffe8 	bl	8012b74 <PixelType::GetMap(pixel::Map)>
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	4a68      	ldr	r2, [pc, #416]	; (8009d48 <main+0x698>)
 8009ba8:	f8cd 8000 	str.w	r8, [sp]
 8009bac:	2107      	movs	r1, #7
 8009bae:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8009bb2:	a895      	add	r0, sp, #596	; 0x254
 8009bb4:	f7ff fbd0 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 8009bb8:	a80f      	add	r0, sp, #60	; 0x3c
 8009bba:	f00a faa7 	bl	801410c <StoreDisplayUdf::StoreDisplayUdf()>
 8009bbe:	a90f      	add	r1, sp, #60	; 0x3c
 8009bc0:	a864      	add	r0, sp, #400	; 0x190
 8009bc2:	f00d f9e5 	bl	8016f90 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8009bc6:	a864      	add	r0, sp, #400	; 0x190
 8009bc8:	f00d f9ef 	bl	8016faa <DisplayUdfParams::Load()>
 8009bcc:	b130      	cbz	r0, 8009bdc <main+0x52c>
 8009bce:	a864      	add	r0, sp, #400	; 0x190
 8009bd0:	a995      	add	r1, sp, #596	; 0x254
 8009bd2:	f00d fb24 	bl	801721e <DisplayUdfParams::Set(DisplayUdf*)>
 8009bd6:	a864      	add	r0, sp, #400	; 0x190
 8009bd8:	f00d fb54 	bl	8017284 <DisplayUdfParams::Dump()>
 8009bdc:	f20d 513c 	addw	r1, sp, #1340	; 0x53c
 8009be0:	a895      	add	r0, sp, #596	; 0x254
 8009be2:	f00d fc09 	bl	80173f8 <DisplayUdf::Show(ArtNetNode*)>
 8009be6:	f1ba 0f00 	cmp.w	sl, #0
 8009bea:	d00e      	beq.n	8009c0a <main+0x55a>
 8009bec:	2106      	movs	r1, #6
 8009bee:	a895      	add	r0, sp, #596	; 0x254
 8009bf0:	f7ff fbac 	bl	800934c <Display::ClearLine(unsigned char)>
 8009bf4:	4650      	mov	r0, sl
 8009bf6:	f009 f8b9 	bl	8012d6c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8009bfa:	4a54      	ldr	r2, [pc, #336]	; (8009d4c <main+0x69c>)
 8009bfc:	f8cd a000 	str.w	sl, [sp]
 8009c00:	4603      	mov	r3, r0
 8009c02:	2106      	movs	r1, #6
 8009c04:	a895      	add	r0, sp, #596	; 0x254
 8009c06:	f7ff fba7 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 8009c0a:	ab48      	add	r3, sp, #288	; 0x120
 8009c0c:	9305      	str	r3, [sp, #20]
 8009c0e:	2203      	movs	r2, #3
 8009c10:	f89d 3e46 	ldrb.w	r3, [sp, #3654]	; 0xe46
 8009c14:	9805      	ldr	r0, [sp, #20]
 8009c16:	2100      	movs	r1, #0
 8009c18:	f000 ffc0 	bl	800ab9c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8009c1c:	a810      	add	r0, sp, #64	; 0x40
 8009c1e:	f00a fbdb 	bl	80143d8 <StoreRemoteConfig::StoreRemoteConfig()>
 8009c22:	ab51      	add	r3, sp, #324	; 0x144
 8009c24:	a910      	add	r1, sp, #64	; 0x40
 8009c26:	4618      	mov	r0, r3
 8009c28:	9304      	str	r3, [sp, #16]
 8009c2a:	f001 fae7 	bl	800b1fc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8009c2e:	9804      	ldr	r0, [sp, #16]
 8009c30:	f001 faee 	bl	800b210 <RemoteConfigParams::Load()>
 8009c34:	b130      	cbz	r0, 8009c44 <main+0x594>
 8009c36:	9804      	ldr	r0, [sp, #16]
 8009c38:	f001 fc31 	bl	800b49e <RemoteConfigParams::Dump()>
 8009c3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c40:	f001 fc0d 	bl	800b45e <RemoteConfigParams::Set(RemoteConfig*)>
 8009c44:	a808      	add	r0, sp, #32
 8009c46:	f00a f9db 	bl	8014000 <SpiFlashStore::Flash()>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d1fa      	bne.n	8009c44 <main+0x594>
 8009c4e:	4d40      	ldr	r5, [pc, #256]	; (8009d50 <main+0x6a0>)
 8009c50:	4940      	ldr	r1, [pc, #256]	; (8009d54 <main+0x6a4>)
 8009c52:	2303      	movs	r3, #3
 8009c54:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8009c58:	a895      	add	r0, sp, #596	; 0x254
 8009c5a:	f7ff fbcf 	bl	80093fc <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009c5e:	f241 51c1 	movw	r1, #5569	; 0x15c1
 8009c62:	6828      	ldr	r0, [r5, #0]
 8009c64:	f00b fef0 	bl	8015a48 <Network::Begin(unsigned short)>
 8009c68:	4b3b      	ldr	r3, [pc, #236]	; (8009d58 <main+0x6a8>)
 8009c6a:	6018      	str	r0, [r3, #0]
 8009c6c:	4b3b      	ldr	r3, [pc, #236]	; (8009d5c <main+0x6ac>)
 8009c6e:	4601      	mov	r1, r0
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	6828      	ldr	r0, [r5, #0]
 8009c74:	f00b fef9 	bl	8015a6a <Network::JoinGroup(int, unsigned int)>
 8009c78:	4939      	ldr	r1, [pc, #228]	; (8009d60 <main+0x6b0>)
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	f248 0280 	movw	r2, #32896	; 0x8080
 8009c80:	a895      	add	r0, sp, #596	; 0x254
 8009c82:	f7ff fbbb 	bl	80093fc <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009c86:	4937      	ldr	r1, [pc, #220]	; (8009d64 <main+0x6b4>)
 8009c88:	2303      	movs	r3, #3
 8009c8a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8009c8e:	a895      	add	r0, sp, #596	; 0x254
 8009c90:	f7ff fbb4 	bl	80093fc <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009c94:	f50d 60a7 	add.w	r0, sp, #1336	; 0x538
 8009c98:	f002 f9be 	bl	800c018 <ArtNet4Node::Start()>
 8009c9c:	f248 0280 	movw	r2, #32896	; 0x8080
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	4931      	ldr	r1, [pc, #196]	; (8009d68 <main+0x6b8>)
 8009ca4:	a895      	add	r0, sp, #596	; 0x254
 8009ca6:	f7ff fba9 	bl	80093fc <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009caa:	2102      	movs	r1, #2
 8009cac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009cb0:	f00e fee6 	bl	8018a80 <fwdgt_config>
 8009cb4:	ab06      	add	r3, sp, #24
 8009cb6:	2801      	cmp	r0, #1
 8009cb8:	bf0c      	ite	eq
 8009cba:	2201      	moveq	r2, #1
 8009cbc:	2200      	movne	r2, #0
 8009cbe:	701a      	strb	r2, [r3, #0]
 8009cc0:	d101      	bne.n	8009cc6 <main+0x616>
 8009cc2:	f00e fecd 	bl	8018a60 <fwdgt_enable>
 8009cc6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8009d6c <main+0x6bc>
 8009cca:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8009d70 <main+0x6c0>
 8009cce:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8009d74 <main+0x6c4>
 8009cd2:	f00e fecd 	bl	8018a70 <fwdgt_counter_reload>
 8009cd6:	f7fe fc45 	bl	8008564 <net_handle>
 8009cda:	f50d 60a7 	add.w	r0, sp, #1336	; 0x538
 8009cde:	f002 f9cf 	bl	800c080 <ArtNet4Node::Run()>
 8009ce2:	9805      	ldr	r0, [sp, #20]
 8009ce4:	f001 f926 	bl	800af34 <RemoteConfig::Run()>
 8009ce8:	a808      	add	r0, sp, #32
 8009cea:	f00a f989 	bl	8014000 <SpiFlashStore::Flash()>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	b113      	cbz	r3, 8009cf8 <main+0x648>
 8009cf2:	a80a      	add	r0, sp, #40	; 0x28
 8009cf4:	f009 fa5e 	bl	80131b4 <PixelPatterns::Run()>
 8009cf8:	2e00      	cmp	r6, #0
 8009cfa:	d062      	beq.n	8009dc2 <main+0x712>
 8009cfc:	1fa3      	subs	r3, r4, #6
 8009cfe:	491b      	ldr	r1, [pc, #108]	; (8009d6c <main+0x6bc>)
 8009d00:	f89a 0000 	ldrb.w	r0, [sl]
 8009d04:	aa11      	add	r2, sp, #68	; 0x44
 8009d06:	f00b f9a9 	bl	801505c <udp_recv2>
 8009d0a:	f1a0 030b 	sub.w	r3, r0, #11
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	2b05      	cmp	r3, #5
 8009d12:	4605      	mov	r5, r0
 8009d14:	d855      	bhi.n	8009dc2 <main+0x712>
 8009d16:	f8d9 8000 	ldr.w	r8, [r9]
 8009d1a:	2204      	movs	r2, #4
 8009d1c:	4641      	mov	r1, r8
 8009d1e:	4658      	mov	r0, fp
 8009d20:	f7ff f991 	bl	8009046 <memcmp>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d14c      	bne.n	8009dc2 <main+0x712>
 8009d28:	e026      	b.n	8009d78 <main+0x6c8>
 8009d2a:	bf00      	nop
 8009d2c:	0801aa91 	stmdaeq	r1, {r0, r4, r7, r9, fp, sp, pc}
 8009d30:	0801aba0 	stmdaeq	r1, {r5, r7, r8, r9, fp, sp, pc}
 8009d34:	2000fdc4 	andcs	pc, r0, r4, asr #27
 8009d38:	200007fb 	strdcs	r0, [r0], -fp
 8009d3c:	06010100 	streq	r0, [r1], -r0, lsl #2
 8009d40:	0801abe0 	stmdaeq	r1, {r5, r6, r7, r8, r9, fp, sp, pc}
 8009d44:	0801aaa6 	stmdaeq	r1, {r1, r2, r5, r7, r9, fp, sp, pc}
 8009d48:	0801aabb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, fp, sp, pc}
 8009d4c:	0801a9f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, fp, sp, pc}
 8009d50:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 8009d54:	0801c316 	stmdaeq	r1, {r1, r2, r4, r8, r9, lr, pc}
 8009d58:	20000000 	andcs	r0, r0, r0
 8009d5c:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009d60:	0801c307 	stmdaeq	r1, {r0, r1, r2, r8, r9, lr, pc}
 8009d64:	0801be24 	stmdaeq	r1, {r2, r5, r9, sl, fp, ip, sp, pc}
 8009d68:	0801be49 	stmdaeq	r1, {r0, r3, r6, r9, sl, fp, ip, sp, pc}
 8009d6c:	20001080 	andcs	r1, r0, r0, lsl #1
 8009d70:	20000010 	andcs	r0, r0, r0, lsl r0
 8009d74:	0801aac8 	stmdaeq	r1, {r3, r6, r7, r9, fp, sp, pc}
 8009d78:	eb08 0305 	add.w	r3, r8, r5
 8009d7c:	f108 0104 	add.w	r1, r8, #4
 8009d80:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009d84:	2b0a      	cmp	r3, #10
 8009d86:	bf04      	itt	eq
 8009d88:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 8009d8c:	b2ad      	uxtheq	r5, r5
 8009d8e:	2d0a      	cmp	r5, #10
 8009d90:	f000 8084 	beq.w	8009e9c <main+0x7ec>
 8009d94:	2d0e      	cmp	r5, #14
 8009d96:	f200 8081 	bhi.w	8009e9c <main+0x7ec>
 8009d9a:	486b      	ldr	r0, [pc, #428]	; (8009f48 <main+0x898>)
 8009d9c:	9104      	str	r1, [sp, #16]
 8009d9e:	2206      	movs	r2, #6
 8009da0:	f7ff f951 	bl	8009046 <memcmp>
 8009da4:	9904      	ldr	r1, [sp, #16]
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d178      	bne.n	8009e9c <main+0x7ec>
 8009daa:	2104      	movs	r1, #4
 8009dac:	f108 000a 	add.w	r0, r8, #10
 8009db0:	f7ff f9e2 	bl	8009178 <dmxconfigudp::atoi(char const*, unsigned int)>
 8009db4:	285b      	cmp	r0, #91	; 0x5b
 8009db6:	4601      	mov	r1, r0
 8009db8:	d903      	bls.n	8009dc2 <main+0x712>
 8009dba:	4b64      	ldr	r3, [pc, #400]	; (8009f4c <main+0x89c>)
 8009dbc:	6818      	ldr	r0, [r3, #0]
 8009dbe:	f007 fef3 	bl	8011ba8 <Dmx::SetDmxBreakTime(unsigned int)>
 8009dc2:	a809      	add	r0, sp, #36	; 0x24
 8009dc4:	f00b fd9c 	bl	8015900 <MDNS::Run()>
 8009dc8:	f50d 60a5 	add.w	r0, sp, #1320	; 0x528
 8009dcc:	f005 ff00 	bl	800fbd0 <LLRPDevice::Run()>
 8009dd0:	a85a      	add	r0, sp, #360	; 0x168
 8009dd2:	f001 feab 	bl	800bb2c <HttpDaemon::Run()>
 8009dd6:	999a      	ldr	r1, [sp, #616]	; 0x268
 8009dd8:	aa95      	add	r2, sp, #596	; 0x254
 8009dda:	b169      	cbz	r1, 8009df8 <main+0x748>
 8009ddc:	7c13      	ldrb	r3, [r2, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f040 80ab 	bne.w	8009f3a <main+0x88a>
 8009de4:	4b5a      	ldr	r3, [pc, #360]	; (8009f50 <main+0x8a0>)
 8009de6:	6852      	ldr	r2, [r2, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	1a9b      	subs	r3, r3, r2
 8009dec:	4299      	cmp	r1, r3
 8009dee:	d203      	bcs.n	8009df8 <main+0x748>
 8009df0:	2101      	movs	r1, #1
 8009df2:	a895      	add	r0, sp, #596	; 0x254
 8009df4:	f7ff fb2a 	bl	800944c <Display::SetSleep(bool)>
 8009df8:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8009dfa:	ab27      	add	r3, sp, #156	; 0x9c
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	f43f af68 	beq.w	8009cd2 <main+0x622>
 8009e02:	4953      	ldr	r1, [pc, #332]	; (8009f50 <main+0x8a0>)
 8009e04:	6958      	ldr	r0, [r3, #20]
 8009e06:	680a      	ldr	r2, [r1, #0]
 8009e08:	1a12      	subs	r2, r2, r0
 8009e0a:	4295      	cmp	r5, r2
 8009e0c:	f63f af61 	bhi.w	8009cd2 <main+0x622>
 8009e10:	680a      	ldr	r2, [r1, #0]
 8009e12:	615a      	str	r2, [r3, #20]
 8009e14:	691a      	ldr	r2, [r3, #16]
 8009e16:	f082 0101 	eor.w	r1, r2, #1
 8009e1a:	2a01      	cmp	r2, #1
 8009e1c:	6119      	str	r1, [r3, #16]
 8009e1e:	4b4d      	ldr	r3, [pc, #308]	; (8009f54 <main+0x8a4>)
 8009e20:	bf1a      	itte	ne
 8009e22:	2201      	movne	r2, #1
 8009e24:	f8c3 2818 	strne.w	r2, [r3, #2072]	; 0x818
 8009e28:	f8c3 2828 	streq.w	r2, [r3, #2088]	; 0x828
 8009e2c:	e751      	b.n	8009cd2 <main+0x622>
 8009e2e:	2d0f      	cmp	r5, #15
 8009e30:	d81f      	bhi.n	8009e72 <main+0x7c2>
 8009e32:	aa86      	add	r2, sp, #536	; 0x218
 8009e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e38:	6852      	ldr	r2, [r2, #4]
 8009e3a:	40ab      	lsls	r3, r5
 8009e3c:	4393      	bics	r3, r2
 8009e3e:	d118      	bne.n	8009e72 <main+0x7c2>
 8009e40:	ab86      	add	r3, sp, #536	; 0x218
 8009e42:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8009e46:	2700      	movs	r7, #0
 8009e48:	8b5b      	ldrh	r3, [r3, #26]
 8009e4a:	9304      	str	r3, [sp, #16]
 8009e4c:	b2bb      	uxth	r3, r7
 8009e4e:	459a      	cmp	sl, r3
 8009e50:	eb06 0107 	add.w	r1, r6, r7
 8009e54:	d804      	bhi.n	8009e60 <main+0x7b0>
 8009e56:	f1ca 0604 	rsb	r6, sl, #4
 8009e5a:	440e      	add	r6, r1
 8009e5c:	3501      	adds	r5, #1
 8009e5e:	e505      	b.n	800986c <main+0x1bc>
 8009e60:	9a04      	ldr	r2, [sp, #16]
 8009e62:	4413      	add	r3, r2
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	2201      	movs	r2, #1
 8009e68:	4658      	mov	r0, fp
 8009e6a:	f002 fcee 	bl	800c84a <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8009e6e:	3701      	adds	r7, #1
 8009e70:	e7ec      	b.n	8009e4c <main+0x79c>
 8009e72:	3604      	adds	r6, #4
 8009e74:	e7f2      	b.n	8009e5c <main+0x7ac>
 8009e76:	2500      	movs	r5, #0
 8009e78:	e526      	b.n	80098c8 <main+0x218>
 8009e7a:	462e      	mov	r6, r5
 8009e7c:	e55d      	b.n	800993a <main+0x28a>
 8009e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e82:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009e84:	3101      	adds	r1, #1
 8009e86:	6281      	str	r1, [r0, #40]	; 0x28
 8009e88:	e5ec      	b.n	8009a64 <main+0x3b4>
 8009e8a:	9904      	ldr	r1, [sp, #16]
 8009e8c:	462a      	mov	r2, r5
 8009e8e:	f20d 40b1 	addw	r0, sp, #1201	; 0x4b1
 8009e92:	f7ff f8e8 	bl	8009066 <memcpy>
 8009e96:	f88b 5075 	strb.w	r5, [fp, #117]	; 0x75
 8009e9a:	e624      	b.n	8009ae6 <main+0x436>
 8009e9c:	482e      	ldr	r0, [pc, #184]	; (8009f58 <main+0x8a8>)
 8009e9e:	9104      	str	r1, [sp, #16]
 8009ea0:	2204      	movs	r2, #4
 8009ea2:	f7ff f8d0 	bl	8009046 <memcmp>
 8009ea6:	9904      	ldr	r1, [sp, #16]
 8009ea8:	b978      	cbnz	r0, 8009eca <main+0x81a>
 8009eaa:	2107      	movs	r1, #7
 8009eac:	f108 0008 	add.w	r0, r8, #8
 8009eb0:	f7ff f962 	bl	8009178 <dmxconfigudp::atoi(char const*, unsigned int)>
 8009eb4:	4b29      	ldr	r3, [pc, #164]	; (8009f5c <main+0x8ac>)
 8009eb6:	f1a0 020c 	sub.w	r2, r0, #12
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	4601      	mov	r1, r0
 8009ebe:	d880      	bhi.n	8009dc2 <main+0x712>
 8009ec0:	4b22      	ldr	r3, [pc, #136]	; (8009f4c <main+0x89c>)
 8009ec2:	6818      	ldr	r0, [r3, #0]
 8009ec4:	f007 fe7a 	bl	8011bbc <Dmx::SetDmxMabTime(unsigned int)>
 8009ec8:	e77b      	b.n	8009dc2 <main+0x712>
 8009eca:	2d0c      	cmp	r5, #12
 8009ecc:	d917      	bls.n	8009efe <main+0x84e>
 8009ece:	2d0e      	cmp	r5, #14
 8009ed0:	d82f      	bhi.n	8009f32 <main+0x882>
 8009ed2:	4823      	ldr	r0, [pc, #140]	; (8009f60 <main+0x8b0>)
 8009ed4:	9104      	str	r1, [sp, #16]
 8009ed6:	2208      	movs	r2, #8
 8009ed8:	f7ff f8b5 	bl	8009046 <memcmp>
 8009edc:	9904      	ldr	r1, [sp, #16]
 8009ede:	bb40      	cbnz	r0, 8009f32 <main+0x882>
 8009ee0:	2102      	movs	r1, #2
 8009ee2:	f108 000c 	add.w	r0, r8, #12
 8009ee6:	f7ff f947 	bl	8009178 <dmxconfigudp::atoi(char const*, unsigned int)>
 8009eea:	4601      	mov	r1, r0
 8009eec:	b110      	cbz	r0, 8009ef4 <main+0x844>
 8009eee:	4b1d      	ldr	r3, [pc, #116]	; (8009f64 <main+0x8b4>)
 8009ef0:	fbb3 f1f0 	udiv	r1, r3, r0
 8009ef4:	4b15      	ldr	r3, [pc, #84]	; (8009f4c <main+0x89c>)
 8009ef6:	6818      	ldr	r0, [r3, #0]
 8009ef8:	f007 fe2e 	bl	8011b58 <Dmx::SetDmxPeriodTime(unsigned int)>
 8009efc:	e761      	b.n	8009dc2 <main+0x712>
 8009efe:	2d0a      	cmp	r5, #10
 8009f00:	f43f af5f 	beq.w	8009dc2 <main+0x712>
 8009f04:	4818      	ldr	r0, [pc, #96]	; (8009f68 <main+0x8b8>)
 8009f06:	2206      	movs	r2, #6
 8009f08:	f7ff f89d 	bl	8009046 <memcmp>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f47f af58 	bne.w	8009dc2 <main+0x712>
 8009f12:	2103      	movs	r1, #3
 8009f14:	f108 000a 	add.w	r0, r8, #10
 8009f18:	f7ff f92e 	bl	8009178 <dmxconfigudp::atoi(char const*, unsigned int)>
 8009f1c:	1e83      	subs	r3, r0, #2
 8009f1e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009f22:	f63f af4e 	bhi.w	8009dc2 <main+0x712>
 8009f26:	4b09      	ldr	r3, [pc, #36]	; (8009f4c <main+0x89c>)
 8009f28:	b281      	uxth	r1, r0
 8009f2a:	6818      	ldr	r0, [r3, #0]
 8009f2c:	f007 fe50 	bl	8011bd0 <Dmx::SetDmxSlots(unsigned short)>
 8009f30:	e747      	b.n	8009dc2 <main+0x712>
 8009f32:	2d0d      	cmp	r5, #13
 8009f34:	f47f af45 	bne.w	8009dc2 <main+0x712>
 8009f38:	e7e4      	b.n	8009f04 <main+0x854>
 8009f3a:	f7ff faa7 	bl	800948c <display::timeout::gpio_renew()>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	f43f af5a 	beq.w	8009df8 <main+0x748>
 8009f44:	2100      	movs	r1, #0
 8009f46:	e754      	b.n	8009df2 <main+0x742>
 8009f48:	0801aacd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r9, fp, sp, pc}
 8009f4c:	20001078 	andcs	r1, r0, r8, ror r0
 8009f50:	2000fddc 	ldrdcs	pc, [r0], -ip
 8009f54:	40020000 	andmi	r0, r2, r0
 8009f58:	0801aad4 	stmdaeq	r1, {r2, r4, r6, r7, r9, fp, sp, pc}
 8009f5c:	000f4234 	andeq	r4, pc, r4, lsr r2	; <UNPREDICTABLE>
 8009f60:	0801aad9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, fp, sp, pc}
 8009f64:	000f4240 	andeq	r4, pc, r0, asr #4
 8009f68:	0801aae2 	stmdaeq	r1, {r1, r5, r6, r7, r9, fp, sp, pc}

08009f6c <RDMSoftwareVersion::GetVersion()>:
 8009f6c:	4800      	ldr	r0, [pc, #0]	; (8009f70 <RDMSoftwareVersion::GetVersion()+0x4>)
 8009f6e:	4770      	bx	lr
 8009f70:	0801acf5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, sl, fp, sp, pc}

08009f74 <RDMSoftwareVersion::GetVersionLength()>:
 8009f74:	2003      	movs	r0, #3
 8009f76:	4770      	bx	lr

08009f78 <RDMSoftwareVersion::GetVersionId()>:
 8009f78:	4800      	ldr	r0, [pc, #0]	; (8009f7c <RDMSoftwareVersion::GetVersionId()+0x4>)
 8009f7a:	4770      	bx	lr
 8009f7c:	6345418c 	movtvs	r4, #20876	; 0x518c

08009f80 <_itostr>:
 8009f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f82:	0fc7      	lsrs	r7, r0, #31
 8009f84:	b091      	sub	sp, #68	; 0x44
 8009f86:	bf18      	it	ne
 8009f88:	4240      	negne	r0, r0
 8009f8a:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8009f8e:	b9c8      	cbnz	r0, 8009fc4 <_itostr+0x44>
 8009f90:	2330      	movs	r3, #48	; 0x30
 8009f92:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8009f96:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8009f9a:	b132      	cbz	r2, 8009faa <_itostr+0x2a>
 8009f9c:	4668      	mov	r0, sp
 8009f9e:	2530      	movs	r5, #48	; 0x30
 8009fa0:	1ae6      	subs	r6, r4, r3
 8009fa2:	4296      	cmp	r6, r2
 8009fa4:	da01      	bge.n	8009faa <_itostr+0x2a>
 8009fa6:	4283      	cmp	r3, r0
 8009fa8:	d81c      	bhi.n	8009fe4 <_itostr+0x64>
 8009faa:	b117      	cbz	r7, 8009fb2 <_itostr+0x32>
 8009fac:	222d      	movs	r2, #45	; 0x2d
 8009fae:	f803 2901 	strb.w	r2, [r3], #-1
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	1ae0      	subs	r0, r4, r3
 8009fb6:	3901      	subs	r1, #1
 8009fb8:	aa10      	add	r2, sp, #64	; 0x40
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d315      	bcc.n	8009fea <_itostr+0x6a>
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	b011      	add	sp, #68	; 0x44
 8009fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fc4:	4623      	mov	r3, r4
 8009fc6:	250a      	movs	r5, #10
 8009fc8:	46ec      	mov	ip, sp
 8009fca:	fb90 f6f5 	sdiv	r6, r0, r5
 8009fce:	fb05 0016 	mls	r0, r5, r6, r0
 8009fd2:	3030      	adds	r0, #48	; 0x30
 8009fd4:	f803 0901 	strb.w	r0, [r3], #-1
 8009fd8:	4630      	mov	r0, r6
 8009fda:	2e00      	cmp	r6, #0
 8009fdc:	d0dd      	beq.n	8009f9a <_itostr+0x1a>
 8009fde:	4563      	cmp	r3, ip
 8009fe0:	d1f3      	bne.n	8009fca <_itostr+0x4a>
 8009fe2:	e7da      	b.n	8009f9a <_itostr+0x1a>
 8009fe4:	f803 5901 	strb.w	r5, [r3], #-1
 8009fe8:	e7da      	b.n	8009fa0 <_itostr+0x20>
 8009fea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fee:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009ff2:	e7e1      	b.n	8009fb8 <_itostr+0x38>

08009ff4 <_xputch>:
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	b410      	push	{r4}
 8009ff8:	4c09      	ldr	r4, [pc, #36]	; (800a020 <_xputch+0x2c>)
 8009ffa:	68da      	ldr	r2, [r3, #12]
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	6821      	ldr	r1, [r4, #0]
 800a000:	3201      	adds	r2, #1
 800a002:	60da      	str	r2, [r3, #12]
 800a004:	b141      	cbz	r1, 800a018 <_xputch+0x24>
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	429a      	cmp	r2, r3
 800a00a:	da02      	bge.n	800a012 <_xputch+0x1e>
 800a00c:	1c4b      	adds	r3, r1, #1
 800a00e:	6023      	str	r3, [r4, #0]
 800a010:	7008      	strb	r0, [r1, #0]
 800a012:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a01c:	f00d bfb8 	b.w	8017f90 <console_putc>
 800a020:	200000f8 	strdcs	r0, [r0], -r8

0800a024 <_format_int>:
 800a024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a028:	4698      	mov	r8, r3
 800a02a:	b091      	sub	sp, #68	; 0x44
 800a02c:	ea52 0308 	orrs.w	r3, r2, r8
 800a030:	4606      	mov	r6, r0
 800a032:	4617      	mov	r7, r2
 800a034:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 800a038:	d133      	bne.n	800a0a2 <_format_int+0x7e>
 800a03a:	2330      	movs	r3, #48	; 0x30
 800a03c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800a040:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 800a044:	6833      	ldr	r3, [r6, #0]
 800a046:	07d8      	lsls	r0, r3, #31
 800a048:	d507      	bpl.n	800a05a <_format_int+0x36>
 800a04a:	6871      	ldr	r1, [r6, #4]
 800a04c:	466a      	mov	r2, sp
 800a04e:	2030      	movs	r0, #48	; 0x30
 800a050:	1b2f      	subs	r7, r5, r4
 800a052:	428f      	cmp	r7, r1
 800a054:	da01      	bge.n	800a05a <_format_int+0x36>
 800a056:	4294      	cmp	r4, r2
 800a058:	d839      	bhi.n	800a0ce <_format_int+0xaa>
 800a05a:	0699      	lsls	r1, r3, #26
 800a05c:	d507      	bpl.n	800a06e <_format_int+0x4a>
 800a05e:	68b1      	ldr	r1, [r6, #8]
 800a060:	466a      	mov	r2, sp
 800a062:	2030      	movs	r0, #48	; 0x30
 800a064:	1b2f      	subs	r7, r5, r4
 800a066:	428f      	cmp	r7, r1
 800a068:	da01      	bge.n	800a06e <_format_int+0x4a>
 800a06a:	4294      	cmp	r4, r2
 800a06c:	d832      	bhi.n	800a0d4 <_format_int+0xb0>
 800a06e:	071a      	lsls	r2, r3, #28
 800a070:	bf44      	itt	mi
 800a072:	222d      	movmi	r2, #45	; 0x2d
 800a074:	f804 2901 	strbmi.w	r2, [r4], #-1
 800a078:	065b      	lsls	r3, r3, #25
 800a07a:	d407      	bmi.n	800a08c <_format_int+0x68>
 800a07c:	68b2      	ldr	r2, [r6, #8]
 800a07e:	466b      	mov	r3, sp
 800a080:	2120      	movs	r1, #32
 800a082:	1b28      	subs	r0, r5, r4
 800a084:	4290      	cmp	r0, r2
 800a086:	da01      	bge.n	800a08c <_format_int+0x68>
 800a088:	429c      	cmp	r4, r3
 800a08a:	d826      	bhi.n	800a0da <_format_int+0xb6>
 800a08c:	1b2d      	subs	r5, r5, r4
 800a08e:	3401      	adds	r4, #1
 800a090:	ab10      	add	r3, sp, #64	; 0x40
 800a092:	429c      	cmp	r4, r3
 800a094:	d324      	bcc.n	800a0e0 <_format_int+0xbc>
 800a096:	68b3      	ldr	r3, [r6, #8]
 800a098:	42ab      	cmp	r3, r5
 800a09a:	dc27      	bgt.n	800a0ec <_format_int+0xc8>
 800a09c:	b011      	add	sp, #68	; 0x44
 800a09e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0a2:	462c      	mov	r4, r5
 800a0a4:	46e9      	mov	r9, sp
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	4641      	mov	r1, r8
 800a0aa:	220a      	movs	r2, #10
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f7fe fdf3 	bl	8008c98 <__aeabi_uldivmod>
 800a0b2:	3230      	adds	r2, #48	; 0x30
 800a0b4:	f804 2901 	strb.w	r2, [r4], #-1
 800a0b8:	463a      	mov	r2, r7
 800a0ba:	4643      	mov	r3, r8
 800a0bc:	2a0a      	cmp	r2, #10
 800a0be:	f173 0300 	sbcs.w	r3, r3, #0
 800a0c2:	4607      	mov	r7, r0
 800a0c4:	4688      	mov	r8, r1
 800a0c6:	d3bd      	bcc.n	800a044 <_format_int+0x20>
 800a0c8:	454c      	cmp	r4, r9
 800a0ca:	d1ec      	bne.n	800a0a6 <_format_int+0x82>
 800a0cc:	e7ba      	b.n	800a044 <_format_int+0x20>
 800a0ce:	f804 0901 	strb.w	r0, [r4], #-1
 800a0d2:	e7bd      	b.n	800a050 <_format_int+0x2c>
 800a0d4:	f804 0901 	strb.w	r0, [r4], #-1
 800a0d8:	e7c4      	b.n	800a064 <_format_int+0x40>
 800a0da:	f804 1901 	strb.w	r1, [r4], #-1
 800a0de:	e7d0      	b.n	800a082 <_format_int+0x5e>
 800a0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f7ff ff85 	bl	8009ff4 <_xputch>
 800a0ea:	e7d1      	b.n	800a090 <_format_int+0x6c>
 800a0ec:	2120      	movs	r1, #32
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f7ff ff80 	bl	8009ff4 <_xputch>
 800a0f4:	3501      	adds	r5, #1
 800a0f6:	e7ce      	b.n	800a096 <_format_int+0x72>

0800a0f8 <_format_hex>:
 800a0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0fa:	b091      	sub	sp, #68	; 0x44
 800a0fc:	6804      	ldr	r4, [r0, #0]
 800a0fe:	4606      	mov	r6, r0
 800a100:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800a104:	bb61      	cbnz	r1, 800a160 <_format_hex+0x68>
 800a106:	2330      	movs	r3, #48	; 0x30
 800a108:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800a10c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800a110:	07e5      	lsls	r5, r4, #31
 800a112:	d507      	bpl.n	800a124 <_format_hex+0x2c>
 800a114:	6870      	ldr	r0, [r6, #4]
 800a116:	4669      	mov	r1, sp
 800a118:	2530      	movs	r5, #48	; 0x30
 800a11a:	1ad7      	subs	r7, r2, r3
 800a11c:	4287      	cmp	r7, r0
 800a11e:	da01      	bge.n	800a124 <_format_hex+0x2c>
 800a120:	428b      	cmp	r3, r1
 800a122:	d831      	bhi.n	800a188 <_format_hex+0x90>
 800a124:	06a0      	lsls	r0, r4, #26
 800a126:	d507      	bpl.n	800a138 <_format_hex+0x40>
 800a128:	68b0      	ldr	r0, [r6, #8]
 800a12a:	4669      	mov	r1, sp
 800a12c:	2530      	movs	r5, #48	; 0x30
 800a12e:	1ad7      	subs	r7, r2, r3
 800a130:	4287      	cmp	r7, r0
 800a132:	da01      	bge.n	800a138 <_format_hex+0x40>
 800a134:	428b      	cmp	r3, r1
 800a136:	d82a      	bhi.n	800a18e <_format_hex+0x96>
 800a138:	0661      	lsls	r1, r4, #25
 800a13a:	d407      	bmi.n	800a14c <_format_hex+0x54>
 800a13c:	68b0      	ldr	r0, [r6, #8]
 800a13e:	4669      	mov	r1, sp
 800a140:	2420      	movs	r4, #32
 800a142:	1ad5      	subs	r5, r2, r3
 800a144:	4285      	cmp	r5, r0
 800a146:	da01      	bge.n	800a14c <_format_hex+0x54>
 800a148:	428b      	cmp	r3, r1
 800a14a:	d823      	bhi.n	800a194 <_format_hex+0x9c>
 800a14c:	1ad5      	subs	r5, r2, r3
 800a14e:	1c5c      	adds	r4, r3, #1
 800a150:	ab10      	add	r3, sp, #64	; 0x40
 800a152:	429c      	cmp	r4, r3
 800a154:	d321      	bcc.n	800a19a <_format_hex+0xa2>
 800a156:	68b3      	ldr	r3, [r6, #8]
 800a158:	429d      	cmp	r5, r3
 800a15a:	db24      	blt.n	800a1a6 <_format_hex+0xae>
 800a15c:	b011      	add	sp, #68	; 0x44
 800a15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a160:	f014 0f02 	tst.w	r4, #2
 800a164:	bf0c      	ite	eq
 800a166:	2757      	moveq	r7, #87	; 0x57
 800a168:	2737      	movne	r7, #55	; 0x37
 800a16a:	4613      	mov	r3, r2
 800a16c:	466d      	mov	r5, sp
 800a16e:	f001 000f 	and.w	r0, r1, #15
 800a172:	2809      	cmp	r0, #9
 800a174:	bf94      	ite	ls
 800a176:	3030      	addls	r0, #48	; 0x30
 800a178:	19c0      	addhi	r0, r0, r7
 800a17a:	0909      	lsrs	r1, r1, #4
 800a17c:	f803 0901 	strb.w	r0, [r3], #-1
 800a180:	d0c6      	beq.n	800a110 <_format_hex+0x18>
 800a182:	42ab      	cmp	r3, r5
 800a184:	d1f3      	bne.n	800a16e <_format_hex+0x76>
 800a186:	e7c3      	b.n	800a110 <_format_hex+0x18>
 800a188:	f803 5901 	strb.w	r5, [r3], #-1
 800a18c:	e7c5      	b.n	800a11a <_format_hex+0x22>
 800a18e:	f803 5901 	strb.w	r5, [r3], #-1
 800a192:	e7cc      	b.n	800a12e <_format_hex+0x36>
 800a194:	f803 4901 	strb.w	r4, [r3], #-1
 800a198:	e7d3      	b.n	800a142 <_format_hex+0x4a>
 800a19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f7ff ff28 	bl	8009ff4 <_xputch>
 800a1a4:	e7d4      	b.n	800a150 <_format_hex+0x58>
 800a1a6:	2120      	movs	r1, #32
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f7ff ff23 	bl	8009ff4 <_xputch>
 800a1ae:	3501      	adds	r5, #1
 800a1b0:	e7d1      	b.n	800a156 <_format_hex+0x5e>
	...

0800a1b4 <_vprintf>:
 800a1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b8:	f04f 0800 	mov.w	r8, #0
 800a1bc:	b096      	sub	sp, #88	; 0x58
 800a1be:	e9cd 8004 	strd	r8, r0, [sp, #16]
 800a1c2:	4614      	mov	r4, r2
 800a1c4:	af06      	add	r7, sp, #24
 800a1c6:	780b      	ldrb	r3, [r1, #0]
 800a1c8:	b91b      	cbnz	r3, 800a1d2 <_vprintf+0x1e>
 800a1ca:	9804      	ldr	r0, [sp, #16]
 800a1cc:	b016      	add	sp, #88	; 0x58
 800a1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d2:	2b25      	cmp	r3, #37	; 0x25
 800a1d4:	f101 0601 	add.w	r6, r1, #1
 800a1d8:	d005      	beq.n	800a1e6 <_vprintf+0x32>
 800a1da:	4619      	mov	r1, r3
 800a1dc:	a801      	add	r0, sp, #4
 800a1de:	f7ff ff09 	bl	8009ff4 <_xputch>
 800a1e2:	4631      	mov	r1, r6
 800a1e4:	e7ef      	b.n	800a1c6 <_vprintf+0x12>
 800a1e6:	784b      	ldrb	r3, [r1, #1]
 800a1e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ec:	2b30      	cmp	r3, #48	; 0x30
 800a1ee:	e9cd 8801 	strd	r8, r8, [sp, #4]
 800a1f2:	d129      	bne.n	800a248 <_vprintf+0x94>
 800a1f4:	2320      	movs	r3, #32
 800a1f6:	9301      	str	r3, [sp, #4]
 800a1f8:	1c8e      	adds	r6, r1, #2
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	4635      	mov	r5, r6
 800a1fe:	4613      	mov	r3, r2
 800a200:	f04f 0c0a 	mov.w	ip, #10
 800a204:	7829      	ldrb	r1, [r5, #0]
 800a206:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 800a20a:	2809      	cmp	r0, #9
 800a20c:	462e      	mov	r6, r5
 800a20e:	f105 0501 	add.w	r5, r5, #1
 800a212:	d91d      	bls.n	800a250 <_vprintf+0x9c>
 800a214:	b12a      	cbz	r2, 800a222 <_vprintf+0x6e>
 800a216:	9303      	str	r3, [sp, #12]
 800a218:	b11b      	cbz	r3, 800a222 <_vprintf+0x6e>
 800a21a:	9b01      	ldr	r3, [sp, #4]
 800a21c:	f043 0310 	orr.w	r3, r3, #16
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	292e      	cmp	r1, #46	; 0x2e
 800a224:	d123      	bne.n	800a26e <_vprintf+0xba>
 800a226:	7873      	ldrb	r3, [r6, #1]
 800a228:	2b2a      	cmp	r3, #42	; 0x2a
 800a22a:	d015      	beq.n	800a258 <_vprintf+0xa4>
 800a22c:	2100      	movs	r1, #0
 800a22e:	1c70      	adds	r0, r6, #1
 800a230:	460a      	mov	r2, r1
 800a232:	250a      	movs	r5, #10
 800a234:	7803      	ldrb	r3, [r0, #0]
 800a236:	3b30      	subs	r3, #48	; 0x30
 800a238:	2b09      	cmp	r3, #9
 800a23a:	4606      	mov	r6, r0
 800a23c:	f100 0001 	add.w	r0, r0, #1
 800a240:	d958      	bls.n	800a2f4 <_vprintf+0x140>
 800a242:	b181      	cbz	r1, 800a266 <_vprintf+0xb2>
 800a244:	9202      	str	r2, [sp, #8]
 800a246:	e00e      	b.n	800a266 <_vprintf+0xb2>
 800a248:	2b2d      	cmp	r3, #45	; 0x2d
 800a24a:	d1d6      	bne.n	800a1fa <_vprintf+0x46>
 800a24c:	2340      	movs	r3, #64	; 0x40
 800a24e:	e7d2      	b.n	800a1f6 <_vprintf+0x42>
 800a250:	fb0c 0303 	mla	r3, ip, r3, r0
 800a254:	2201      	movs	r2, #1
 800a256:	e7d5      	b.n	800a204 <_vprintf+0x50>
 800a258:	f854 3b04 	ldr.w	r3, [r4], #4
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	bfb8      	it	lt
 800a260:	425b      	neglt	r3, r3
 800a262:	3602      	adds	r6, #2
 800a264:	9302      	str	r3, [sp, #8]
 800a266:	9b01      	ldr	r3, [sp, #4]
 800a268:	f043 0301 	orr.w	r3, r3, #1
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	7833      	ldrb	r3, [r6, #0]
 800a270:	2b6c      	cmp	r3, #108	; 0x6c
 800a272:	bf04      	itt	eq
 800a274:	3601      	addeq	r6, #1
 800a276:	9b01      	ldreq	r3, [sp, #4]
 800a278:	7831      	ldrb	r1, [r6, #0]
 800a27a:	bf04      	itt	eq
 800a27c:	f043 0304 	orreq.w	r3, r3, #4
 800a280:	9301      	streq	r3, [sp, #4]
 800a282:	2958      	cmp	r1, #88	; 0x58
 800a284:	f000 8169 	beq.w	800a55a <_vprintf+0x3a6>
 800a288:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	2a15      	cmp	r2, #21
 800a290:	d8a4      	bhi.n	800a1dc <_vprintf+0x28>
 800a292:	2b15      	cmp	r3, #21
 800a294:	d8a2      	bhi.n	800a1dc <_vprintf+0x28>
 800a296:	a201      	add	r2, pc, #4	; (adr r2, 800a29c <_vprintf+0xe8>)
 800a298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29c:	0800a2fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sp, pc}
 800a2a0:	0800a30f 	stmdaeq	r0, {r0, r1, r2, r3, r8, r9, sp, pc}
 800a2a4:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2a8:	0800a345 	stmdaeq	r0, {r0, r2, r6, r8, r9, sp, pc}
 800a2ac:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2b0:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2b4:	0800a30f 	stmdaeq	r0, {r0, r1, r2, r3, r8, r9, sp, pc}
 800a2b8:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2bc:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2c0:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2c4:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2c8:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2cc:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2d0:	0800a49d 	stmdaeq	r0, {r0, r2, r3, r4, r7, sl, sp, pc}
 800a2d4:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2d8:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2dc:	0800a4c5 	stmdaeq	r0, {r0, r2, r6, r7, sl, sp, pc}
 800a2e0:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2e4:	0800a53b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, sl, sp, pc}
 800a2e8:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2ec:	0800a1dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp, pc}
 800a2f0:	0800a563 	stmdaeq	r0, {r0, r1, r5, r6, r8, sl, sp, pc}
 800a2f4:	fb05 3202 	mla	r2, r5, r2, r3
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	e79b      	b.n	800a234 <_vprintf+0x80>
 800a2fc:	4625      	mov	r5, r4
 800a2fe:	a801      	add	r0, sp, #4
 800a300:	f855 1b04 	ldr.w	r1, [r5], #4
 800a304:	f7ff fe76 	bl	8009ff4 <_xputch>
 800a308:	3601      	adds	r6, #1
 800a30a:	462c      	mov	r4, r5
 800a30c:	e769      	b.n	800a1e2 <_vprintf+0x2e>
 800a30e:	9901      	ldr	r1, [sp, #4]
 800a310:	074d      	lsls	r5, r1, #29
 800a312:	bf4b      	itete	mi
 800a314:	3407      	addmi	r4, #7
 800a316:	4625      	movpl	r5, r4
 800a318:	f024 0407 	bicmi.w	r4, r4, #7
 800a31c:	f855 2b04 	ldrpl.w	r2, [r5], #4
 800a320:	bf45      	ittet	mi
 800a322:	6863      	ldrmi	r3, [r4, #4]
 800a324:	4625      	movmi	r5, r4
 800a326:	17d3      	asrpl	r3, r2, #31
 800a328:	f855 2b08 	ldrmi.w	r2, [r5], #8
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	da05      	bge.n	800a33c <_vprintf+0x188>
 800a330:	f041 0108 	orr.w	r1, r1, #8
 800a334:	4252      	negs	r2, r2
 800a336:	9101      	str	r1, [sp, #4]
 800a338:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800a33c:	a801      	add	r0, sp, #4
 800a33e:	f7ff fe71 	bl	800a024 <_format_int>
 800a342:	e7e1      	b.n	800a308 <_vprintf+0x154>
 800a344:	3407      	adds	r4, #7
 800a346:	f024 0507 	bic.w	r5, r4, #7
 800a34a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a34e:	f7fe fc53 	bl	8008bf8 <__aeabi_d2f>
 800a352:	9b01      	ldr	r3, [sp, #4]
 800a354:	ee07 0a90 	vmov	s15, r0
 800a358:	07dc      	lsls	r4, r3, #31
 800a35a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a35e:	bf4c      	ite	mi
 800a360:	9c02      	ldrmi	r4, [sp, #8]
 800a362:	2406      	movpl	r4, #6
 800a364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a368:	bf48      	it	mi
 800a36a:	eef1 7a67 	vnegmi.f32	s15, s15
 800a36e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a372:	bf4a      	itet	mi
 800a374:	f10d 0a19 	addmi.w	sl, sp, #25
 800a378:	46ba      	movpl	sl, r7
 800a37a:	232d      	movmi	r3, #45	; 0x2d
 800a37c:	ee17 0a10 	vmov	r0, s14
 800a380:	f04f 0200 	mov.w	r2, #0
 800a384:	4651      	mov	r1, sl
 800a386:	bf48      	it	mi
 800a388:	f88d 3018 	strbmi.w	r3, [sp, #24]
 800a38c:	f7ff fdf8 	bl	8009f80 <_itostr>
 800a390:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a394:	232e      	movs	r3, #46	; 0x2e
 800a396:	f80a 3000 	strb.w	r3, [sl, r0]
 800a39a:	eb0a 0900 	add.w	r9, sl, r0
 800a39e:	230a      	movs	r3, #10
 800a3a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3a4:	1c62      	adds	r2, r4, #1
 800a3a6:	f109 0901 	add.w	r9, r9, #1
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	2c00      	cmp	r4, #0
 800a3ae:	dc3d      	bgt.n	800a42c <_vprintf+0x278>
 800a3b0:	ee07 3a10 	vmov	s14, r3
 800a3b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a3c2:	ee17 0a90 	vmov	r0, s15
 800a3c6:	f7ff fddb 	bl	8009f80 <_itostr>
 800a3ca:	4448      	add	r0, r9
 800a3cc:	1bc0      	subs	r0, r0, r7
 800a3ce:	1e44      	subs	r4, r0, #1
 800a3d0:	193a      	adds	r2, r7, r4
 800a3d2:	5d3b      	ldrb	r3, [r7, r4]
 800a3d4:	2b34      	cmp	r3, #52	; 0x34
 800a3d6:	d911      	bls.n	800a3fc <_vprintf+0x248>
 800a3d8:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a3dc:	292e      	cmp	r1, #46	; 0x2e
 800a3de:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 800a3e2:	d029      	beq.n	800a438 <_vprintf+0x284>
 800a3e4:	469c      	mov	ip, r3
 800a3e6:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800a3ea:	4663      	mov	r3, ip
 800a3ec:	f81c 1901 	ldrb.w	r1, [ip], #-1
 800a3f0:	2939      	cmp	r1, #57	; 0x39
 800a3f2:	d01e      	beq.n	800a432 <_vprintf+0x27e>
 800a3f4:	292e      	cmp	r1, #46	; 0x2e
 800a3f6:	d01f      	beq.n	800a438 <_vprintf+0x284>
 800a3f8:	3101      	adds	r1, #1
 800a3fa:	7019      	strb	r1, [r3, #0]
 800a3fc:	f104 0358 	add.w	r3, r4, #88	; 0x58
 800a400:	446b      	add	r3, sp
 800a402:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 800a406:	2b2e      	cmp	r3, #46	; 0x2e
 800a408:	bf08      	it	eq
 800a40a:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 800a40e:	46a1      	mov	r9, r4
 800a410:	9b03      	ldr	r3, [sp, #12]
 800a412:	4599      	cmp	r9, r3
 800a414:	db3b      	blt.n	800a48e <_vprintf+0x2da>
 800a416:	46b9      	mov	r9, r7
 800a418:	2c00      	cmp	r4, #0
 800a41a:	f77f af75 	ble.w	800a308 <_vprintf+0x154>
 800a41e:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a422:	a801      	add	r0, sp, #4
 800a424:	f7ff fde6 	bl	8009ff4 <_xputch>
 800a428:	3c01      	subs	r4, #1
 800a42a:	e7f5      	b.n	800a418 <_vprintf+0x264>
 800a42c:	434b      	muls	r3, r1
 800a42e:	3c01      	subs	r4, #1
 800a430:	e7bc      	b.n	800a3ac <_vprintf+0x1f8>
 800a432:	f88c e001 	strb.w	lr, [ip, #1]
 800a436:	e7d8      	b.n	800a3ea <_vprintf+0x236>
 800a438:	3b01      	subs	r3, #1
 800a43a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800a43e:	7819      	ldrb	r1, [r3, #0]
 800a440:	2939      	cmp	r1, #57	; 0x39
 800a442:	d112      	bne.n	800a46a <_vprintf+0x2b6>
 800a444:	42bb      	cmp	r3, r7
 800a446:	d20d      	bcs.n	800a464 <_vprintf+0x2b0>
 800a448:	1c5c      	adds	r4, r3, #1
 800a44a:	1c99      	adds	r1, r3, #2
 800a44c:	428c      	cmp	r4, r1
 800a44e:	eba2 0203 	sub.w	r2, r2, r3
 800a452:	d913      	bls.n	800a47c <_vprintf+0x2c8>
 800a454:	4619      	mov	r1, r3
 800a456:	441a      	add	r2, r3
 800a458:	428a      	cmp	r2, r1
 800a45a:	d10b      	bne.n	800a474 <_vprintf+0x2c0>
 800a45c:	2231      	movs	r2, #49	; 0x31
 800a45e:	705a      	strb	r2, [r3, #1]
 800a460:	4604      	mov	r4, r0
 800a462:	e7cb      	b.n	800a3fc <_vprintf+0x248>
 800a464:	f803 c901 	strb.w	ip, [r3], #-1
 800a468:	e7e9      	b.n	800a43e <_vprintf+0x28a>
 800a46a:	42bb      	cmp	r3, r7
 800a46c:	d3ec      	bcc.n	800a448 <_vprintf+0x294>
 800a46e:	292d      	cmp	r1, #45	; 0x2d
 800a470:	d0ea      	beq.n	800a448 <_vprintf+0x294>
 800a472:	e7c1      	b.n	800a3f8 <_vprintf+0x244>
 800a474:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a478:	704c      	strb	r4, [r1, #1]
 800a47a:	e7ed      	b.n	800a458 <_vprintf+0x2a4>
 800a47c:	4414      	add	r4, r2
 800a47e:	440a      	add	r2, r1
 800a480:	428a      	cmp	r2, r1
 800a482:	d0eb      	beq.n	800a45c <_vprintf+0x2a8>
 800a484:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 800a488:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800a48c:	e7f8      	b.n	800a480 <_vprintf+0x2cc>
 800a48e:	2120      	movs	r1, #32
 800a490:	a801      	add	r0, sp, #4
 800a492:	f7ff fdaf 	bl	8009ff4 <_xputch>
 800a496:	f109 0901 	add.w	r9, r9, #1
 800a49a:	e7b9      	b.n	800a410 <_vprintf+0x25c>
 800a49c:	4625      	mov	r5, r4
 800a49e:	2308      	movs	r3, #8
 800a4a0:	f855 4b04 	ldr.w	r4, [r5], #4
 800a4a4:	9303      	str	r3, [sp, #12]
 800a4a6:	2130      	movs	r1, #48	; 0x30
 800a4a8:	2320      	movs	r3, #32
 800a4aa:	a801      	add	r0, sp, #4
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	f7ff fda1 	bl	8009ff4 <_xputch>
 800a4b2:	2178      	movs	r1, #120	; 0x78
 800a4b4:	a801      	add	r0, sp, #4
 800a4b6:	f7ff fd9d 	bl	8009ff4 <_xputch>
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	a801      	add	r0, sp, #4
 800a4be:	f7ff fe1b 	bl	800a0f8 <_format_hex>
 800a4c2:	e721      	b.n	800a308 <_vprintf+0x154>
 800a4c4:	4625      	mov	r5, r4
 800a4c6:	2400      	movs	r4, #0
 800a4c8:	f855 9b04 	ldr.w	r9, [r5], #4
 800a4cc:	f819 3004 	ldrb.w	r3, [r9, r4]
 800a4d0:	b993      	cbnz	r3, 800a4f8 <_vprintf+0x344>
 800a4d2:	9b01      	ldr	r3, [sp, #4]
 800a4d4:	07d9      	lsls	r1, r3, #31
 800a4d6:	d503      	bpl.n	800a4e0 <_vprintf+0x32c>
 800a4d8:	9b02      	ldr	r3, [sp, #8]
 800a4da:	429c      	cmp	r4, r3
 800a4dc:	bfa8      	it	ge
 800a4de:	461c      	movge	r4, r3
 800a4e0:	9b01      	ldr	r3, [sp, #4]
 800a4e2:	065a      	lsls	r2, r3, #25
 800a4e4:	f104 0a01 	add.w	sl, r4, #1
 800a4e8:	d403      	bmi.n	800a4f2 <_vprintf+0x33e>
 800a4ea:	9b03      	ldr	r3, [sp, #12]
 800a4ec:	429c      	cmp	r4, r3
 800a4ee:	db05      	blt.n	800a4fc <_vprintf+0x348>
 800a4f0:	4654      	mov	r4, sl
 800a4f2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a4f6:	e00d      	b.n	800a514 <_vprintf+0x360>
 800a4f8:	3401      	adds	r4, #1
 800a4fa:	e7e7      	b.n	800a4cc <_vprintf+0x318>
 800a4fc:	2120      	movs	r1, #32
 800a4fe:	a801      	add	r0, sp, #4
 800a500:	f7ff fd78 	bl	8009ff4 <_xputch>
 800a504:	4654      	mov	r4, sl
 800a506:	e7eb      	b.n	800a4e0 <_vprintf+0x32c>
 800a508:	a801      	add	r0, sp, #4
 800a50a:	f7ff fd73 	bl	8009ff4 <_xputch>
 800a50e:	9b02      	ldr	r3, [sp, #8]
 800a510:	3b01      	subs	r3, #1
 800a512:	9302      	str	r3, [sp, #8]
 800a514:	9b01      	ldr	r3, [sp, #4]
 800a516:	07db      	lsls	r3, r3, #31
 800a518:	d501      	bpl.n	800a51e <_vprintf+0x36a>
 800a51a:	9b02      	ldr	r3, [sp, #8]
 800a51c:	b11b      	cbz	r3, 800a526 <_vprintf+0x372>
 800a51e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 800a522:	2900      	cmp	r1, #0
 800a524:	d1f0      	bne.n	800a508 <_vprintf+0x354>
 800a526:	9b03      	ldr	r3, [sp, #12]
 800a528:	429c      	cmp	r4, r3
 800a52a:	f6bf aeed 	bge.w	800a308 <_vprintf+0x154>
 800a52e:	2120      	movs	r1, #32
 800a530:	a801      	add	r0, sp, #4
 800a532:	f7ff fd5f 	bl	8009ff4 <_xputch>
 800a536:	3401      	adds	r4, #1
 800a538:	e7f5      	b.n	800a526 <_vprintf+0x372>
 800a53a:	9b01      	ldr	r3, [sp, #4]
 800a53c:	f013 0304 	ands.w	r3, r3, #4
 800a540:	bf1d      	ittte	ne
 800a542:	3407      	addne	r4, #7
 800a544:	f024 0407 	bicne.w	r4, r4, #7
 800a548:	4625      	movne	r5, r4
 800a54a:	4625      	moveq	r5, r4
 800a54c:	bf1a      	itte	ne
 800a54e:	f855 2b08 	ldrne.w	r2, [r5], #8
 800a552:	6863      	ldrne	r3, [r4, #4]
 800a554:	f855 2b04 	ldreq.w	r2, [r5], #4
 800a558:	e6f0      	b.n	800a33c <_vprintf+0x188>
 800a55a:	9b01      	ldr	r3, [sp, #4]
 800a55c:	f043 0302 	orr.w	r3, r3, #2
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	4625      	mov	r5, r4
 800a564:	f855 1b04 	ldr.w	r1, [r5], #4
 800a568:	e7a8      	b.n	800a4bc <_vprintf+0x308>
 800a56a:	bf00      	nop

0800a56c <printf>:
 800a56c:	b40f      	push	{r0, r1, r2, r3}
 800a56e:	b507      	push	{r0, r1, r2, lr}
 800a570:	aa04      	add	r2, sp, #16
 800a572:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800a576:	f852 1b04 	ldr.w	r1, [r2], #4
 800a57a:	9201      	str	r2, [sp, #4]
 800a57c:	f7ff fe1a 	bl	800a1b4 <_vprintf>
 800a580:	b003      	add	sp, #12
 800a582:	f85d eb04 	ldr.w	lr, [sp], #4
 800a586:	b004      	add	sp, #16
 800a588:	4770      	bx	lr
	...

0800a58c <sprintf>:
 800a58c:	b40e      	push	{r1, r2, r3}
 800a58e:	b517      	push	{r0, r1, r2, r4, lr}
 800a590:	4c09      	ldr	r4, [pc, #36]	; (800a5b8 <sprintf+0x2c>)
 800a592:	aa05      	add	r2, sp, #20
 800a594:	6020      	str	r0, [r4, #0]
 800a596:	f852 1b04 	ldr.w	r1, [r2], #4
 800a59a:	9201      	str	r2, [sp, #4]
 800a59c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800a5a0:	f7ff fe08 	bl	800a1b4 <_vprintf>
 800a5a4:	6822      	ldr	r2, [r4, #0]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	7013      	strb	r3, [r2, #0]
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	b003      	add	sp, #12
 800a5ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5b2:	b003      	add	sp, #12
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	200000f8 	strdcs	r0, [r0], -r8

0800a5bc <snprintf>:
 800a5bc:	b40c      	push	{r2, r3}
 800a5be:	b513      	push	{r0, r1, r4, lr}
 800a5c0:	4c09      	ldr	r4, [pc, #36]	; (800a5e8 <snprintf+0x2c>)
 800a5c2:	aa04      	add	r2, sp, #16
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	6020      	str	r0, [r4, #0]
 800a5c8:	f852 1b04 	ldr.w	r1, [r2], #4
 800a5cc:	9201      	str	r2, [sp, #4]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7ff fdf0 	bl	800a1b4 <_vprintf>
 800a5d4:	6822      	ldr	r2, [r4, #0]
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	7013      	strb	r3, [r2, #0]
 800a5da:	6023      	str	r3, [r4, #0]
 800a5dc:	b002      	add	sp, #8
 800a5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e2:	b002      	add	sp, #8
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	200000f8 	strdcs	r0, [r0], -r8

0800a5ec <vsnprintf>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4c06      	ldr	r4, [pc, #24]	; (800a608 <vsnprintf+0x1c>)
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	4608      	mov	r0, r1
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	6025      	str	r5, [r4, #0]
 800a5fa:	f7ff fddb 	bl	800a1b4 <_vprintf>
 800a5fe:	6822      	ldr	r2, [r4, #0]
 800a600:	2300      	movs	r3, #0
 800a602:	7013      	strb	r3, [r2, #0]
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	bd38      	pop	{r3, r4, r5, pc}
 800a608:	200000f8 	strdcs	r0, [r0], -r8

0800a60c <__udivmoddi4>:
 800a60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a610:	9e08      	ldr	r6, [sp, #32]
 800a612:	460d      	mov	r5, r1
 800a614:	4604      	mov	r4, r0
 800a616:	460f      	mov	r7, r1
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d14a      	bne.n	800a6b2 <__udivmoddi4+0xa6>
 800a61c:	428a      	cmp	r2, r1
 800a61e:	4694      	mov	ip, r2
 800a620:	d965      	bls.n	800a6ee <__udivmoddi4+0xe2>
 800a622:	fab2 f382 	clz	r3, r2
 800a626:	b143      	cbz	r3, 800a63a <__udivmoddi4+0x2e>
 800a628:	fa02 fc03 	lsl.w	ip, r2, r3
 800a62c:	f1c3 0220 	rsb	r2, r3, #32
 800a630:	409f      	lsls	r7, r3
 800a632:	fa20 f202 	lsr.w	r2, r0, r2
 800a636:	4317      	orrs	r7, r2
 800a638:	409c      	lsls	r4, r3
 800a63a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800a63e:	fa1f f58c 	uxth.w	r5, ip
 800a642:	fbb7 f1fe 	udiv	r1, r7, lr
 800a646:	0c22      	lsrs	r2, r4, #16
 800a648:	fb0e 7711 	mls	r7, lr, r1, r7
 800a64c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800a650:	fb01 f005 	mul.w	r0, r1, r5
 800a654:	4290      	cmp	r0, r2
 800a656:	d90a      	bls.n	800a66e <__udivmoddi4+0x62>
 800a658:	eb1c 0202 	adds.w	r2, ip, r2
 800a65c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800a660:	f080 811c 	bcs.w	800a89c <__udivmoddi4+0x290>
 800a664:	4290      	cmp	r0, r2
 800a666:	f240 8119 	bls.w	800a89c <__udivmoddi4+0x290>
 800a66a:	3902      	subs	r1, #2
 800a66c:	4462      	add	r2, ip
 800a66e:	1a12      	subs	r2, r2, r0
 800a670:	b2a4      	uxth	r4, r4
 800a672:	fbb2 f0fe 	udiv	r0, r2, lr
 800a676:	fb0e 2210 	mls	r2, lr, r0, r2
 800a67a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a67e:	fb00 f505 	mul.w	r5, r0, r5
 800a682:	42a5      	cmp	r5, r4
 800a684:	d90a      	bls.n	800a69c <__udivmoddi4+0x90>
 800a686:	eb1c 0404 	adds.w	r4, ip, r4
 800a68a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a68e:	f080 8107 	bcs.w	800a8a0 <__udivmoddi4+0x294>
 800a692:	42a5      	cmp	r5, r4
 800a694:	f240 8104 	bls.w	800a8a0 <__udivmoddi4+0x294>
 800a698:	4464      	add	r4, ip
 800a69a:	3802      	subs	r0, #2
 800a69c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800a6a0:	1b64      	subs	r4, r4, r5
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	b11e      	cbz	r6, 800a6ae <__udivmoddi4+0xa2>
 800a6a6:	40dc      	lsrs	r4, r3
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	e9c6 4300 	strd	r4, r3, [r6]
 800a6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b2:	428b      	cmp	r3, r1
 800a6b4:	d908      	bls.n	800a6c8 <__udivmoddi4+0xbc>
 800a6b6:	2e00      	cmp	r6, #0
 800a6b8:	f000 80ed 	beq.w	800a896 <__udivmoddi4+0x28a>
 800a6bc:	2100      	movs	r1, #0
 800a6be:	e9c6 0500 	strd	r0, r5, [r6]
 800a6c2:	4608      	mov	r0, r1
 800a6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c8:	fab3 f183 	clz	r1, r3
 800a6cc:	2900      	cmp	r1, #0
 800a6ce:	d149      	bne.n	800a764 <__udivmoddi4+0x158>
 800a6d0:	42ab      	cmp	r3, r5
 800a6d2:	d302      	bcc.n	800a6da <__udivmoddi4+0xce>
 800a6d4:	4282      	cmp	r2, r0
 800a6d6:	f200 80f8 	bhi.w	800a8ca <__udivmoddi4+0x2be>
 800a6da:	1a84      	subs	r4, r0, r2
 800a6dc:	eb65 0203 	sbc.w	r2, r5, r3
 800a6e0:	2001      	movs	r0, #1
 800a6e2:	4617      	mov	r7, r2
 800a6e4:	2e00      	cmp	r6, #0
 800a6e6:	d0e2      	beq.n	800a6ae <__udivmoddi4+0xa2>
 800a6e8:	e9c6 4700 	strd	r4, r7, [r6]
 800a6ec:	e7df      	b.n	800a6ae <__udivmoddi4+0xa2>
 800a6ee:	b902      	cbnz	r2, 800a6f2 <__udivmoddi4+0xe6>
 800a6f0:	deff      	udf	#255	; 0xff
 800a6f2:	fab2 f382 	clz	r3, r2
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f040 8090 	bne.w	800a81c <__udivmoddi4+0x210>
 800a6fc:	1a8a      	subs	r2, r1, r2
 800a6fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800a702:	fa1f fe8c 	uxth.w	lr, ip
 800a706:	2101      	movs	r1, #1
 800a708:	fbb2 f5f7 	udiv	r5, r2, r7
 800a70c:	fb07 2015 	mls	r0, r7, r5, r2
 800a710:	0c22      	lsrs	r2, r4, #16
 800a712:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800a716:	fb0e f005 	mul.w	r0, lr, r5
 800a71a:	4290      	cmp	r0, r2
 800a71c:	d908      	bls.n	800a730 <__udivmoddi4+0x124>
 800a71e:	eb1c 0202 	adds.w	r2, ip, r2
 800a722:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800a726:	d202      	bcs.n	800a72e <__udivmoddi4+0x122>
 800a728:	4290      	cmp	r0, r2
 800a72a:	f200 80cb 	bhi.w	800a8c4 <__udivmoddi4+0x2b8>
 800a72e:	4645      	mov	r5, r8
 800a730:	1a12      	subs	r2, r2, r0
 800a732:	b2a4      	uxth	r4, r4
 800a734:	fbb2 f0f7 	udiv	r0, r2, r7
 800a738:	fb07 2210 	mls	r2, r7, r0, r2
 800a73c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a740:	fb0e fe00 	mul.w	lr, lr, r0
 800a744:	45a6      	cmp	lr, r4
 800a746:	d908      	bls.n	800a75a <__udivmoddi4+0x14e>
 800a748:	eb1c 0404 	adds.w	r4, ip, r4
 800a74c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a750:	d202      	bcs.n	800a758 <__udivmoddi4+0x14c>
 800a752:	45a6      	cmp	lr, r4
 800a754:	f200 80bb 	bhi.w	800a8ce <__udivmoddi4+0x2c2>
 800a758:	4610      	mov	r0, r2
 800a75a:	eba4 040e 	sub.w	r4, r4, lr
 800a75e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800a762:	e79f      	b.n	800a6a4 <__udivmoddi4+0x98>
 800a764:	f1c1 0720 	rsb	r7, r1, #32
 800a768:	408b      	lsls	r3, r1
 800a76a:	fa22 fc07 	lsr.w	ip, r2, r7
 800a76e:	ea4c 0c03 	orr.w	ip, ip, r3
 800a772:	fa05 f401 	lsl.w	r4, r5, r1
 800a776:	fa20 f307 	lsr.w	r3, r0, r7
 800a77a:	40fd      	lsrs	r5, r7
 800a77c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800a780:	4323      	orrs	r3, r4
 800a782:	fbb5 f8f9 	udiv	r8, r5, r9
 800a786:	fa1f fe8c 	uxth.w	lr, ip
 800a78a:	fb09 5518 	mls	r5, r9, r8, r5
 800a78e:	0c1c      	lsrs	r4, r3, #16
 800a790:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800a794:	fb08 f50e 	mul.w	r5, r8, lr
 800a798:	42a5      	cmp	r5, r4
 800a79a:	fa02 f201 	lsl.w	r2, r2, r1
 800a79e:	fa00 f001 	lsl.w	r0, r0, r1
 800a7a2:	d90b      	bls.n	800a7bc <__udivmoddi4+0x1b0>
 800a7a4:	eb1c 0404 	adds.w	r4, ip, r4
 800a7a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800a7ac:	f080 8088 	bcs.w	800a8c0 <__udivmoddi4+0x2b4>
 800a7b0:	42a5      	cmp	r5, r4
 800a7b2:	f240 8085 	bls.w	800a8c0 <__udivmoddi4+0x2b4>
 800a7b6:	f1a8 0802 	sub.w	r8, r8, #2
 800a7ba:	4464      	add	r4, ip
 800a7bc:	1b64      	subs	r4, r4, r5
 800a7be:	b29d      	uxth	r5, r3
 800a7c0:	fbb4 f3f9 	udiv	r3, r4, r9
 800a7c4:	fb09 4413 	mls	r4, r9, r3, r4
 800a7c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800a7cc:	fb03 fe0e 	mul.w	lr, r3, lr
 800a7d0:	45a6      	cmp	lr, r4
 800a7d2:	d908      	bls.n	800a7e6 <__udivmoddi4+0x1da>
 800a7d4:	eb1c 0404 	adds.w	r4, ip, r4
 800a7d8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800a7dc:	d26c      	bcs.n	800a8b8 <__udivmoddi4+0x2ac>
 800a7de:	45a6      	cmp	lr, r4
 800a7e0:	d96a      	bls.n	800a8b8 <__udivmoddi4+0x2ac>
 800a7e2:	3b02      	subs	r3, #2
 800a7e4:	4464      	add	r4, ip
 800a7e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800a7ea:	fba3 9502 	umull	r9, r5, r3, r2
 800a7ee:	eba4 040e 	sub.w	r4, r4, lr
 800a7f2:	42ac      	cmp	r4, r5
 800a7f4:	46c8      	mov	r8, r9
 800a7f6:	46ae      	mov	lr, r5
 800a7f8:	d356      	bcc.n	800a8a8 <__udivmoddi4+0x29c>
 800a7fa:	d053      	beq.n	800a8a4 <__udivmoddi4+0x298>
 800a7fc:	b156      	cbz	r6, 800a814 <__udivmoddi4+0x208>
 800a7fe:	ebb0 0208 	subs.w	r2, r0, r8
 800a802:	eb64 040e 	sbc.w	r4, r4, lr
 800a806:	fa04 f707 	lsl.w	r7, r4, r7
 800a80a:	40ca      	lsrs	r2, r1
 800a80c:	40cc      	lsrs	r4, r1
 800a80e:	4317      	orrs	r7, r2
 800a810:	e9c6 7400 	strd	r7, r4, [r6]
 800a814:	4618      	mov	r0, r3
 800a816:	2100      	movs	r1, #0
 800a818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81c:	f1c3 0120 	rsb	r1, r3, #32
 800a820:	fa02 fc03 	lsl.w	ip, r2, r3
 800a824:	fa20 f201 	lsr.w	r2, r0, r1
 800a828:	fa25 f101 	lsr.w	r1, r5, r1
 800a82c:	409d      	lsls	r5, r3
 800a82e:	432a      	orrs	r2, r5
 800a830:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800a834:	fa1f fe8c 	uxth.w	lr, ip
 800a838:	fbb1 f0f7 	udiv	r0, r1, r7
 800a83c:	fb07 1510 	mls	r5, r7, r0, r1
 800a840:	0c11      	lsrs	r1, r2, #16
 800a842:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800a846:	fb00 f50e 	mul.w	r5, r0, lr
 800a84a:	428d      	cmp	r5, r1
 800a84c:	fa04 f403 	lsl.w	r4, r4, r3
 800a850:	d908      	bls.n	800a864 <__udivmoddi4+0x258>
 800a852:	eb1c 0101 	adds.w	r1, ip, r1
 800a856:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800a85a:	d22f      	bcs.n	800a8bc <__udivmoddi4+0x2b0>
 800a85c:	428d      	cmp	r5, r1
 800a85e:	d92d      	bls.n	800a8bc <__udivmoddi4+0x2b0>
 800a860:	3802      	subs	r0, #2
 800a862:	4461      	add	r1, ip
 800a864:	1b49      	subs	r1, r1, r5
 800a866:	b292      	uxth	r2, r2
 800a868:	fbb1 f5f7 	udiv	r5, r1, r7
 800a86c:	fb07 1115 	mls	r1, r7, r5, r1
 800a870:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a874:	fb05 f10e 	mul.w	r1, r5, lr
 800a878:	4291      	cmp	r1, r2
 800a87a:	d908      	bls.n	800a88e <__udivmoddi4+0x282>
 800a87c:	eb1c 0202 	adds.w	r2, ip, r2
 800a880:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800a884:	d216      	bcs.n	800a8b4 <__udivmoddi4+0x2a8>
 800a886:	4291      	cmp	r1, r2
 800a888:	d914      	bls.n	800a8b4 <__udivmoddi4+0x2a8>
 800a88a:	3d02      	subs	r5, #2
 800a88c:	4462      	add	r2, ip
 800a88e:	1a52      	subs	r2, r2, r1
 800a890:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800a894:	e738      	b.n	800a708 <__udivmoddi4+0xfc>
 800a896:	4631      	mov	r1, r6
 800a898:	4630      	mov	r0, r6
 800a89a:	e708      	b.n	800a6ae <__udivmoddi4+0xa2>
 800a89c:	4639      	mov	r1, r7
 800a89e:	e6e6      	b.n	800a66e <__udivmoddi4+0x62>
 800a8a0:	4610      	mov	r0, r2
 800a8a2:	e6fb      	b.n	800a69c <__udivmoddi4+0x90>
 800a8a4:	4548      	cmp	r0, r9
 800a8a6:	d2a9      	bcs.n	800a7fc <__udivmoddi4+0x1f0>
 800a8a8:	ebb9 0802 	subs.w	r8, r9, r2
 800a8ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	e7a3      	b.n	800a7fc <__udivmoddi4+0x1f0>
 800a8b4:	4645      	mov	r5, r8
 800a8b6:	e7ea      	b.n	800a88e <__udivmoddi4+0x282>
 800a8b8:	462b      	mov	r3, r5
 800a8ba:	e794      	b.n	800a7e6 <__udivmoddi4+0x1da>
 800a8bc:	4640      	mov	r0, r8
 800a8be:	e7d1      	b.n	800a864 <__udivmoddi4+0x258>
 800a8c0:	46d0      	mov	r8, sl
 800a8c2:	e77b      	b.n	800a7bc <__udivmoddi4+0x1b0>
 800a8c4:	3d02      	subs	r5, #2
 800a8c6:	4462      	add	r2, ip
 800a8c8:	e732      	b.n	800a730 <__udivmoddi4+0x124>
 800a8ca:	4608      	mov	r0, r1
 800a8cc:	e70a      	b.n	800a6e4 <__udivmoddi4+0xd8>
 800a8ce:	4464      	add	r4, ip
 800a8d0:	3802      	subs	r0, #2
 800a8d2:	e742      	b.n	800a75a <__udivmoddi4+0x14e>

0800a8d4 <RemoteConfig::HandleList()>:
 800a8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8d8:	6801      	ldr	r1, [r0, #0]
 800a8da:	4a2b      	ldr	r2, [pc, #172]	; (800a988 <RemoteConfig::HandleList()+0xb4>)
 800a8dc:	4b2b      	ldr	r3, [pc, #172]	; (800a98c <RemoteConfig::HandleList()+0xb8>)
 800a8de:	4e2c      	ldr	r6, [pc, #176]	; (800a990 <RemoteConfig::HandleList()+0xbc>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6835      	ldr	r5, [r6, #0]
 800a8e4:	695f      	ldr	r7, [r3, #20]
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	2012      	movs	r0, #18
 800a8ea:	fb00 2201 	mla	r2, r0, r1, r2
 800a8ee:	6860      	ldr	r0, [r4, #4]
 800a8f0:	4928      	ldr	r1, [pc, #160]	; (800a994 <RemoteConfig::HandleList()+0xc0>)
 800a8f2:	f04f 080c 	mov.w	r8, #12
 800a8f6:	fb08 1100 	mla	r1, r8, r0, r1
 800a8fa:	4827      	ldr	r0, [pc, #156]	; (800a998 <RemoteConfig::HandleList()+0xc4>)
 800a8fc:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800a900:	f890 9009 	ldrb.w	r9, [r0, #9]
 800a904:	b2fb      	uxtb	r3, r7
 800a906:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 800a90a:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800a90e:	b089      	sub	sp, #36	; 0x24
 800a910:	3507      	adds	r5, #7
 800a912:	0e3f      	lsrs	r7, r7, #24
 800a914:	f1b9 0f00 	cmp.w	r9, #0
 800a918:	d01d      	beq.n	800a956 <RemoteConfig::HandleList()+0x82>
 800a91a:	3009      	adds	r0, #9
 800a91c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800a920:	e9cd 8005 	strd	r8, r0, [sp, #20]
 800a924:	e9cd e701 	strd	lr, r7, [sp, #4]
 800a928:	4a1c      	ldr	r2, [pc, #112]	; (800a99c <RemoteConfig::HandleList()+0xc8>)
 800a92a:	f8cd c000 	str.w	ip, [sp]
 800a92e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800a932:	4628      	mov	r0, r5
 800a934:	f7ff fe42 	bl	800a5bc <snprintf>
 800a938:	69e3      	ldr	r3, [r4, #28]
 800a93a:	2b05      	cmp	r3, #5
 800a93c:	d118      	bne.n	800a970 <RemoteConfig::HandleList()+0x9c>
 800a93e:	f642 1305 	movw	r3, #10501	; 0x2905
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	69a3      	ldr	r3, [r4, #24]
 800a946:	b282      	uxth	r2, r0
 800a948:	4629      	mov	r1, r5
 800a94a:	7d20      	ldrb	r0, [r4, #20]
 800a94c:	f00a fbac 	bl	80150a8 <udp_send>
 800a950:	b009      	add	sp, #36	; 0x24
 800a952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a956:	e9cd 1804 	strd	r1, r8, [sp, #16]
 800a95a:	e9cd 7202 	strd	r7, r2, [sp, #8]
 800a95e:	e9cd ce00 	strd	ip, lr, [sp]
 800a962:	4a0f      	ldr	r2, [pc, #60]	; (800a9a0 <RemoteConfig::HandleList()+0xcc>)
 800a964:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800a968:	4628      	mov	r0, r5
 800a96a:	f7ff fe27 	bl	800a5bc <snprintf>
 800a96e:	e7e3      	b.n	800a938 <RemoteConfig::HandleList()+0x64>
 800a970:	2b06      	cmp	r3, #6
 800a972:	d1ed      	bne.n	800a950 <RemoteConfig::HandleList()+0x7c>
 800a974:	6833      	ldr	r3, [r6, #0]
 800a976:	799b      	ldrb	r3, [r3, #6]
 800a978:	2b2a      	cmp	r3, #42	; 0x2a
 800a97a:	d1e9      	bne.n	800a950 <RemoteConfig::HandleList()+0x7c>
 800a97c:	f642 1305 	movw	r3, #10501	; 0x2905
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a986:	e7de      	b.n	800a946 <RemoteConfig::HandleList()+0x72>
 800a988:	0801ade4 	stmdaeq	r1, {r2, r5, r6, r7, r8, sl, fp, sp, pc}
 800a98c:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 800a990:	200000fc 	strdcs	r0, [r0], -ip
 800a994:	0801aeaa 	stmdaeq	r1, {r1, r3, r5, r7, r9, sl, fp, sp, pc}
 800a998:	20000100 	andcs	r0, r0, r0, lsl #2
 800a99c:	0801acf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, sl, fp, sp, pc}
 800a9a0:	0801ad12 	stmdaeq	r1, {r1, r4, r8, sl, fp, sp, pc}

0800a9a4 <RemoteConfig::HandleDisplayGet()>:
 800a9a4:	69c3      	ldr	r3, [r0, #28]
 800a9a6:	2b08      	cmp	r3, #8
 800a9a8:	d11b      	bne.n	800a9e2 <RemoteConfig::HandleDisplayGet()+0x3e>
 800a9aa:	4b0e      	ldr	r3, [pc, #56]	; (800a9e4 <RemoteConfig::HandleDisplayGet()+0x40>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9b0:	7c19      	ldrb	r1, [r3, #16]
 800a9b2:	4d0d      	ldr	r5, [pc, #52]	; (800a9e8 <RemoteConfig::HandleDisplayGet()+0x44>)
 800a9b4:	4a0d      	ldr	r2, [pc, #52]	; (800a9ec <RemoteConfig::HandleDisplayGet()+0x48>)
 800a9b6:	4b0e      	ldr	r3, [pc, #56]	; (800a9f0 <RemoteConfig::HandleDisplayGet()+0x4c>)
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	2900      	cmp	r1, #0
 800a9bc:	bf18      	it	ne
 800a9be:	4613      	movne	r3, r2
 800a9c0:	6828      	ldr	r0, [r5, #0]
 800a9c2:	4a0c      	ldr	r2, [pc, #48]	; (800a9f4 <RemoteConfig::HandleDisplayGet()+0x50>)
 800a9c4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a9c8:	f7ff fdf8 	bl	800a5bc <snprintf>
 800a9cc:	f642 1305 	movw	r3, #10501	; 0x2905
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	b282      	uxth	r2, r0
 800a9d4:	69a3      	ldr	r3, [r4, #24]
 800a9d6:	6829      	ldr	r1, [r5, #0]
 800a9d8:	7d20      	ldrb	r0, [r4, #20]
 800a9da:	f00a fb65 	bl	80150a8 <udp_send>
 800a9de:	b003      	add	sp, #12
 800a9e0:	bd30      	pop	{r4, r5, pc}
 800a9e2:	4770      	bx	lr
 800a9e4:	2000fcd4 	ldrdcs	pc, [r0], -r4
 800a9e8:	200000fc 	strdcs	r0, [r0], -ip
 800a9ec:	0801ad2b 	stmdaeq	r1, {r0, r1, r3, r5, r8, sl, fp, sp, pc}
 800a9f0:	0801ad28 	stmdaeq	r1, {r3, r5, r8, sl, fp, sp, pc}
 800a9f4:	0801ad2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, sl, fp, sp, pc}

0800a9f8 <RemoteConfig::HandleTftpGet()>:
 800a9f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	f000 fdd4 	bl	800b5a8 <RemoteConfig::PlatformHandleTftpGet()>
 800aa00:	69e3      	ldr	r3, [r4, #28]
 800aa02:	2b05      	cmp	r3, #5
 800aa04:	d116      	bne.n	800aa34 <RemoteConfig::HandleTftpGet()+0x3c>
 800aa06:	f894 1020 	ldrb.w	r1, [r4, #32]
 800aa0a:	4d0b      	ldr	r5, [pc, #44]	; (800aa38 <RemoteConfig::HandleTftpGet()+0x40>)
 800aa0c:	4a0b      	ldr	r2, [pc, #44]	; (800aa3c <RemoteConfig::HandleTftpGet()+0x44>)
 800aa0e:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <RemoteConfig::HandleTftpGet()+0x48>)
 800aa10:	6828      	ldr	r0, [r5, #0]
 800aa12:	2900      	cmp	r1, #0
 800aa14:	bf08      	it	eq
 800aa16:	4613      	moveq	r3, r2
 800aa18:	4a0a      	ldr	r2, [pc, #40]	; (800aa44 <RemoteConfig::HandleTftpGet()+0x4c>)
 800aa1a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800aa1e:	f7ff fdcd 	bl	800a5bc <snprintf>
 800aa22:	f642 1305 	movw	r3, #10501	; 0x2905
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	b282      	uxth	r2, r0
 800aa2a:	69a3      	ldr	r3, [r4, #24]
 800aa2c:	6829      	ldr	r1, [r5, #0]
 800aa2e:	7d20      	ldrb	r0, [r4, #20]
 800aa30:	f00a fb3a 	bl	80150a8 <udp_send>
 800aa34:	b003      	add	sp, #12
 800aa36:	bd30      	pop	{r4, r5, pc}
 800aa38:	200000fc 	strdcs	r0, [r0], -ip
 800aa3c:	0801ad2b 	stmdaeq	r1, {r0, r1, r3, r5, r8, sl, fp, sp, pc}
 800aa40:	0801ad28 	stmdaeq	r1, {r3, r5, r8, sl, fp, sp, pc}
 800aa44:	0801ad3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, fp, sp, pc}

0800aa48 <RemoteConfig::HandleVersion()>:
 800aa48:	69c3      	ldr	r3, [r0, #28]
 800aa4a:	2b08      	cmp	r3, #8
 800aa4c:	d114      	bne.n	800aa78 <RemoteConfig::HandleVersion()+0x30>
 800aa4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa50:	4d0a      	ldr	r5, [pc, #40]	; (800aa7c <RemoteConfig::HandleVersion()+0x34>)
 800aa52:	4b0b      	ldr	r3, [pc, #44]	; (800aa80 <RemoteConfig::HandleVersion()+0x38>)
 800aa54:	4a0b      	ldr	r2, [pc, #44]	; (800aa84 <RemoteConfig::HandleVersion()+0x3c>)
 800aa56:	4604      	mov	r4, r0
 800aa58:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800aa5c:	6828      	ldr	r0, [r5, #0]
 800aa5e:	f7ff fdad 	bl	800a5bc <snprintf>
 800aa62:	f642 1305 	movw	r3, #10501	; 0x2905
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	b282      	uxth	r2, r0
 800aa6a:	69a3      	ldr	r3, [r4, #24]
 800aa6c:	6829      	ldr	r1, [r5, #0]
 800aa6e:	7d20      	ldrb	r0, [r4, #20]
 800aa70:	f00a fb1a 	bl	80150a8 <udp_send>
 800aa74:	b003      	add	sp, #12
 800aa76:	bd30      	pop	{r4, r5, pc}
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	200000fc 	strdcs	r0, [r0], -ip
 800aa80:	2000fd7a 	andcs	pc, r0, sl, ror sp	; <UNPREDICTABLE>
 800aa84:	0801ad44 	stmdaeq	r1, {r2, r6, r8, sl, fp, sp, pc}

0800aa88 <RemoteConfig::HandleUptime()>:
 800aa88:	7bc3      	ldrb	r3, [r0, #15]
 800aa8a:	b1e3      	cbz	r3, 800aac6 <RemoteConfig::HandleUptime()+0x3e>
 800aa8c:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <RemoteConfig::HandleUptime()+0x40>)
 800aa8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	69c3      	ldr	r3, [r0, #28]
 800aa94:	2b07      	cmp	r3, #7
 800aa96:	4604      	mov	r4, r0
 800aa98:	d113      	bne.n	800aac2 <RemoteConfig::HandleUptime()+0x3a>
 800aa9a:	4d0c      	ldr	r5, [pc, #48]	; (800aacc <RemoteConfig::HandleUptime()+0x44>)
 800aa9c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800aaa0:	6828      	ldr	r0, [r5, #0]
 800aaa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aaa6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaaa:	4a09      	ldr	r2, [pc, #36]	; (800aad0 <RemoteConfig::HandleUptime()+0x48>)
 800aaac:	f7ff fd86 	bl	800a5bc <snprintf>
 800aab0:	f642 1305 	movw	r3, #10501	; 0x2905
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	b282      	uxth	r2, r0
 800aab8:	69a3      	ldr	r3, [r4, #24]
 800aaba:	6829      	ldr	r1, [r5, #0]
 800aabc:	7d20      	ldrb	r0, [r4, #20]
 800aabe:	f00a faf3 	bl	80150a8 <udp_send>
 800aac2:	b003      	add	sp, #12
 800aac4:	bd30      	pop	{r4, r5, pc}
 800aac6:	4770      	bx	lr
 800aac8:	2000fddc 	ldrdcs	pc, [r0], -ip
 800aacc:	200000fc 	strdcs	r0, [r0], -ip
 800aad0:	0801ad4f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, sl, fp, sp, pc}

0800aad4 <Display::Status(Display7SegmentMessage)>:
 800aad4:	7c43      	ldrb	r3, [r0, #17]
 800aad6:	b1bb      	cbz	r3, 800ab08 <Display::Status(Display7SegmentMessage)+0x34>
 800aad8:	b513      	push	{r0, r1, r4, lr}
 800aada:	2312      	movs	r3, #18
 800aadc:	43c9      	mvns	r1, r1
 800aade:	4604      	mov	r4, r0
 800aae0:	f88d 3004 	strb.w	r3, [sp, #4]
 800aae4:	7a00      	ldrb	r0, [r0, #8]
 800aae6:	f88d 1006 	strb.w	r1, [sp, #6]
 800aaea:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800aaee:	f88d 3005 	strb.w	r3, [sp, #5]
 800aaf2:	f00e fd61 	bl	80195b8 <gd32_i2c_set_address>
 800aaf6:	68e0      	ldr	r0, [r4, #12]
 800aaf8:	f00e fd56 	bl	80195a8 <gd32_i2c_set_baudrate>
 800aafc:	2103      	movs	r1, #3
 800aafe:	a801      	add	r0, sp, #4
 800ab00:	f00e fd60 	bl	80195c4 <gd32_i2c_write>
 800ab04:	b002      	add	sp, #8
 800ab06:	bd10      	pop	{r4, pc}
 800ab08:	4770      	bx	lr
	...

0800ab0c <RemoteConfig::HandleDisplaySet()>:
 800ab0c:	b508      	push	{r3, lr}
 800ab0e:	69c3      	ldr	r3, [r0, #28]
 800ab10:	2b09      	cmp	r3, #9
 800ab12:	d10a      	bne.n	800ab2a <RemoteConfig::HandleDisplaySet()+0x1e>
 800ab14:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <RemoteConfig::HandleDisplaySet()+0x20>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	7a59      	ldrb	r1, [r3, #9]
 800ab1a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ab1e:	4259      	negs	r1, r3
 800ab20:	4159      	adcs	r1, r3
 800ab22:	4b03      	ldr	r3, [pc, #12]	; (800ab30 <RemoteConfig::HandleDisplaySet()+0x24>)
 800ab24:	6818      	ldr	r0, [r3, #0]
 800ab26:	f7fe fc91 	bl	800944c <Display::SetSleep(bool)>
 800ab2a:	bd08      	pop	{r3, pc}
 800ab2c:	200000fc 	strdcs	r0, [r0], -ip
 800ab30:	2000fcd4 	ldrdcs	pc, [r0], -r4

0800ab34 <RemoteConfig::HandleTftpSet()>:
 800ab34:	69c3      	ldr	r3, [r0, #28]
 800ab36:	2b06      	cmp	r3, #6
 800ab38:	d127      	bne.n	800ab8a <RemoteConfig::HandleTftpSet()+0x56>
 800ab3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab3c:	4b13      	ldr	r3, [pc, #76]	; (800ab8c <RemoteConfig::HandleTftpSet()+0x58>)
 800ab3e:	4d14      	ldr	r5, [pc, #80]	; (800ab90 <RemoteConfig::HandleTftpSet()+0x5c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	799b      	ldrb	r3, [r3, #6]
 800ab44:	2b30      	cmp	r3, #48	; 0x30
 800ab46:	bf14      	ite	ne
 800ab48:	2301      	movne	r3, #1
 800ab4a:	2300      	moveq	r3, #0
 800ab4c:	4604      	mov	r4, r0
 800ab4e:	f880 3020 	strb.w	r3, [r0, #32]
 800ab52:	6828      	ldr	r0, [r5, #0]
 800ab54:	d012      	beq.n	800ab7c <RemoteConfig::HandleTftpSet()+0x48>
 800ab56:	2100      	movs	r1, #0
 800ab58:	f7fe fc78 	bl	800944c <Display::SetSleep(bool)>
 800ab5c:	6828      	ldr	r0, [r5, #0]
 800ab5e:	490d      	ldr	r1, [pc, #52]	; (800ab94 <RemoteConfig::HandleTftpSet()+0x60>)
 800ab60:	9001      	str	r0, [sp, #4]
 800ab62:	f7fe fc15 	bl	8009390 <Display::TextStatus(char const*)>
 800ab66:	f244 0171 	movw	r1, #16497	; 0x4071
 800ab6a:	9801      	ldr	r0, [sp, #4]
 800ab6c:	f7ff ffb2 	bl	800aad4 <Display::Status(Display7SegmentMessage)>
 800ab70:	4620      	mov	r0, r4
 800ab72:	b003      	add	sp, #12
 800ab74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab78:	f000 bd0e 	b.w	800b598 <RemoteConfig::PlatformHandleTftpSet()>
 800ab7c:	4906      	ldr	r1, [pc, #24]	; (800ab98 <RemoteConfig::HandleTftpSet()+0x64>)
 800ab7e:	9001      	str	r0, [sp, #4]
 800ab80:	f7fe fc06 	bl	8009390 <Display::TextStatus(char const*)>
 800ab84:	f248 0171 	movw	r1, #32881	; 0x8071
 800ab88:	e7ef      	b.n	800ab6a <RemoteConfig::HandleTftpSet()+0x36>
 800ab8a:	4770      	bx	lr
 800ab8c:	200000fc 	strdcs	r0, [r0], -ip
 800ab90:	2000fcd4 	ldrdcs	pc, [r0], -r4
 800ab94:	0801ad5c 	stmdaeq	r1, {r2, r3, r4, r6, r8, sl, fp, sp, pc}
 800ab98:	0801ad6e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, sl, fp, sp, pc}

0800ab9c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800ab9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba0:	2500      	movs	r5, #0
 800aba2:	461f      	mov	r7, r3
 800aba4:	6083      	str	r3, [r0, #8]
 800aba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abaa:	4e13      	ldr	r6, [pc, #76]	; (800abf8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x5c>)
 800abac:	f8df a050 	ldr.w	sl, [pc, #80]	; 800ac00 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x64>
 800abb0:	60c5      	str	r5, [r0, #12]
 800abb2:	e9c0 3505 	strd	r3, r5, [r0, #20]
 800abb6:	4b11      	ldr	r3, [pc, #68]	; (800abfc <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x60>)
 800abb8:	8205      	strh	r5, [r0, #16]
 800abba:	e9c0 1200 	strd	r1, r2, [r0]
 800abbe:	4604      	mov	r4, r0
 800abc0:	6018      	str	r0, [r3, #0]
 800abc2:	4689      	mov	r9, r1
 800abc4:	61c5      	str	r5, [r0, #28]
 800abc6:	f880 5020 	strb.w	r5, [r0, #32]
 800abca:	4631      	mov	r1, r6
 800abcc:	f8da 0000 	ldr.w	r0, [sl]
 800abd0:	4690      	mov	r8, r2
 800abd2:	f00a ff3f 	bl	8015a54 <Network::MacAddressCopyTo(unsigned char*)>
 800abd6:	f8da 0000 	ldr.w	r0, [sl]
 800abda:	f886 9006 	strb.w	r9, [r6, #6]
 800abde:	f642 1105 	movw	r1, #10501	; 0x2905
 800abe2:	f886 8007 	strb.w	r8, [r6, #7]
 800abe6:	7237      	strb	r7, [r6, #8]
 800abe8:	7275      	strb	r5, [r6, #9]
 800abea:	f00a ff2d 	bl	8015a48 <Network::Begin(unsigned short)>
 800abee:	6160      	str	r0, [r4, #20]
 800abf0:	4620      	mov	r0, r4
 800abf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf6:	bf00      	nop
 800abf8:	20000100 	andcs	r0, r0, r0, lsl #2
 800abfc:	20000124 	andcs	r0, r0, r4, lsr #2
 800ac00:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

0800ac04 <RemoteConfig::GetStringNode() const>:
 800ac04:	4b03      	ldr	r3, [pc, #12]	; (800ac14 <RemoteConfig::GetStringNode() const+0x10>)
 800ac06:	7998      	ldrb	r0, [r3, #6]
 800ac08:	4b03      	ldr	r3, [pc, #12]	; (800ac18 <RemoteConfig::GetStringNode() const+0x14>)
 800ac0a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800ac0e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ac12:	4770      	bx	lr
 800ac14:	20000100 	andcs	r0, r0, r0, lsl #2
 800ac18:	0801ade4 	stmdaeq	r1, {r2, r5, r6, r7, r8, sl, fp, sp, pc}

0800ac1c <RemoteConfig::GetStringOutput() const>:
 800ac1c:	4b03      	ldr	r3, [pc, #12]	; (800ac2c <RemoteConfig::GetStringOutput() const+0x10>)
 800ac1e:	79d8      	ldrb	r0, [r3, #7]
 800ac20:	4b03      	ldr	r3, [pc, #12]	; (800ac30 <RemoteConfig::GetStringOutput() const+0x14>)
 800ac22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ac26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac2a:	4770      	bx	lr
 800ac2c:	20000100 	andcs	r0, r0, r0, lsl #2
 800ac30:	0801aeaa 	stmdaeq	r1, {r1, r3, r5, r7, r9, sl, fp, sp, pc}

0800ac34 <RemoteConfig::SetDisable(bool)>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	7b03      	ldrb	r3, [r0, #12]
 800ac38:	4604      	mov	r4, r0
 800ac3a:	b161      	cbz	r1, 800ac56 <RemoteConfig::SetDisable(bool)+0x22>
 800ac3c:	b953      	cbnz	r3, 800ac54 <RemoteConfig::SetDisable(bool)+0x20>
 800ac3e:	4b0c      	ldr	r3, [pc, #48]	; (800ac70 <RemoteConfig::SetDisable(bool)+0x3c>)
 800ac40:	f642 1105 	movw	r1, #10501	; 0x2905
 800ac44:	6818      	ldr	r0, [r3, #0]
 800ac46:	f00a ff02 	bl	8015a4e <Network::End(unsigned short)>
 800ac4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac4e:	6163      	str	r3, [r4, #20]
 800ac50:	2301      	movs	r3, #1
 800ac52:	7323      	strb	r3, [r4, #12]
 800ac54:	bd38      	pop	{r3, r4, r5, pc}
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d0fc      	beq.n	800ac54 <RemoteConfig::SetDisable(bool)+0x20>
 800ac5a:	4b05      	ldr	r3, [pc, #20]	; (800ac70 <RemoteConfig::SetDisable(bool)+0x3c>)
 800ac5c:	460d      	mov	r5, r1
 800ac5e:	6818      	ldr	r0, [r3, #0]
 800ac60:	f642 1105 	movw	r1, #10501	; 0x2905
 800ac64:	f00a fef0 	bl	8015a48 <Network::Begin(unsigned short)>
 800ac68:	7325      	strb	r5, [r4, #12]
 800ac6a:	6160      	str	r0, [r4, #20]
 800ac6c:	e7f2      	b.n	800ac54 <RemoteConfig::SetDisable(bool)+0x20>
 800ac6e:	bf00      	nop
 800ac70:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

0800ac74 <RemoteConfig::SetDisplayName(char const*)>:
 800ac74:	4809      	ldr	r0, [pc, #36]	; (800ac9c <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800ac76:	b508      	push	{r3, lr}
 800ac78:	2217      	movs	r2, #23
 800ac7a:	1e4b      	subs	r3, r1, #1
 800ac7c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ac80:	b911      	cbnz	r1, 800ac88 <RemoteConfig::SetDisplayName(char const*)+0x14>
 800ac82:	f00d fc1d 	bl	80184c0 <memset>
 800ac86:	e003      	b.n	800ac90 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800ac88:	3a01      	subs	r2, #1
 800ac8a:	f800 1b01 	strb.w	r1, [r0], #1
 800ac8e:	d1f5      	bne.n	800ac7c <RemoteConfig::SetDisplayName(char const*)+0x8>
 800ac90:	4b03      	ldr	r3, [pc, #12]	; (800aca0 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 2020 	strb.w	r2, [r3, #32]
 800ac98:	bd08      	pop	{r3, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20000109 	andcs	r0, r0, r9, lsl #2
 800aca0:	20000100 	andcs	r0, r0, r0, lsl #2

0800aca4 <RemoteConfig::HandleGet(void*, unsigned int)>:
 800aca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aca6:	4f2a      	ldr	r7, [pc, #168]	; (800ad50 <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 800aca8:	b085      	sub	sp, #20
 800acaa:	4604      	mov	r4, r0
 800acac:	4616      	mov	r6, r2
 800acae:	460d      	mov	r5, r1
 800acb0:	b9a9      	cbnz	r1, 800acde <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800acb8:	aa03      	add	r2, sp, #12
 800acba:	3105      	adds	r1, #5
 800acbc:	9303      	str	r3, [sp, #12]
 800acbe:	f000 fc41 	bl	800b544 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800acc2:	1e03      	subs	r3, r0, #0
 800acc4:	da1b      	bge.n	800acfe <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800acc6:	f642 1305 	movw	r3, #10501	; 0x2905
 800acca:	9300      	str	r3, [sp, #0]
 800accc:	4921      	ldr	r1, [pc, #132]	; (800ad54 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800acce:	69a3      	ldr	r3, [r4, #24]
 800acd0:	7d20      	ldrb	r0, [r4, #20]
 800acd2:	220b      	movs	r2, #11
 800acd4:	f00a f9e8 	bl	80150a8 <udp_send>
 800acd8:	200c      	movs	r0, #12
 800acda:	b005      	add	sp, #20
 800acdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acde:	9203      	str	r2, [sp, #12]
 800ace0:	aa03      	add	r2, sp, #12
 800ace2:	6039      	str	r1, [r7, #0]
 800ace4:	f000 fc2e 	bl	800b544 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800ace8:	1e03      	subs	r3, r0, #0
 800acea:	da08      	bge.n	800acfe <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800acec:	2e0b      	cmp	r6, #11
 800acee:	4632      	mov	r2, r6
 800acf0:	4918      	ldr	r1, [pc, #96]	; (800ad54 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800acf2:	bf28      	it	cs
 800acf4:	220b      	movcs	r2, #11
 800acf6:	4628      	mov	r0, r5
 800acf8:	f00d fbc0 	bl	801847c <memcpy>
 800acfc:	e7ec      	b.n	800acd8 <RemoteConfig::HandleGet(void*, unsigned int)+0x34>
 800acfe:	4916      	ldr	r1, [pc, #88]	; (800ad58 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 800ad00:	221c      	movs	r2, #28
 800ad02:	4353      	muls	r3, r2
 800ad04:	18ca      	adds	r2, r1, r3
 800ad06:	58cb      	ldr	r3, [r1, r3]
 800ad08:	6852      	ldr	r2, [r2, #4]
 800ad0a:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800ad0e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800ad12:	07d2      	lsls	r2, r2, #31
 800ad14:	bf48      	it	mi
 800ad16:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800ad1a:	a903      	add	r1, sp, #12
 800ad1c:	bf48      	it	mi
 800ad1e:	58d3      	ldrmi	r3, [r2, r3]
 800ad20:	4798      	blx	r3
 800ad22:	b95d      	cbnz	r5, 800ad3c <RemoteConfig::HandleGet(void*, unsigned int)+0x98>
 800ad24:	f642 1305 	movw	r3, #10501	; 0x2905
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800ad2e:	69a3      	ldr	r3, [r4, #24]
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	7d20      	ldrb	r0, [r4, #20]
 800ad34:	f00a f9b8 	bl	80150a8 <udp_send>
 800ad38:	9803      	ldr	r0, [sp, #12]
 800ad3a:	e7ce      	b.n	800acda <RemoteConfig::HandleGet(void*, unsigned int)+0x36>
 800ad3c:	9a03      	ldr	r2, [sp, #12]
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	42b2      	cmp	r2, r6
 800ad42:	bf28      	it	cs
 800ad44:	4632      	movcs	r2, r6
 800ad46:	4628      	mov	r0, r5
 800ad48:	f00d fba3 	bl	8018492 <memmove>
 800ad4c:	e7f4      	b.n	800ad38 <RemoteConfig::HandleGet(void*, unsigned int)+0x94>
 800ad4e:	bf00      	nop
 800ad50:	200000fc 	strdcs	r0, [r0], -ip
 800ad54:	0801ad81 	stmdaeq	r1, {r0, r7, r8, sl, fp, sp, pc}
 800ad58:	0801b07c 	stmdaeq	r1, {r2, r3, r4, r5, r6, ip, sp, pc}

0800ad5c <RemoteConfig::HandleGetNoParams()>:
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	4611      	mov	r1, r2
 800ad60:	f7ff bfa0 	b.w	800aca4 <RemoteConfig::HandleGet(void*, unsigned int)>

0800ad64 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800ad64:	b500      	push	{lr}
 800ad66:	4a09      	ldr	r2, [pc, #36]	; (800ad8c <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800ad68:	b08d      	sub	sp, #52	; 0x34
 800ad6a:	a803      	add	r0, sp, #12
 800ad6c:	9101      	str	r1, [sp, #4]
 800ad6e:	6811      	ldr	r1, [r2, #0]
 800ad70:	f000 fa44 	bl	800b1fc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800ad74:	4906      	ldr	r1, [pc, #24]	; (800ad90 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x2c>)
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	6809      	ldr	r1, [r1, #0]
 800ad7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad7e:	a803      	add	r0, sp, #12
 800ad80:	f000 fb60 	bl	800b444 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800ad84:	b00d      	add	sp, #52	; 0x34
 800ad86:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad8a:	bf00      	nop
 800ad8c:	200092d0 	ldrdcs	r9, [r0], -r0
 800ad90:	200000fc 	strdcs	r0, [r0], -ip

0800ad94 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800ad94:	b500      	push	{lr}
 800ad96:	4a09      	ldr	r2, [pc, #36]	; (800adbc <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800ad98:	b09d      	sub	sp, #116	; 0x74
 800ad9a:	a803      	add	r0, sp, #12
 800ad9c:	9101      	str	r1, [sp, #4]
 800ad9e:	6811      	ldr	r1, [r2, #0]
 800ada0:	f00b f98e 	bl	80160c0 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800ada4:	4906      	ldr	r1, [pc, #24]	; (800adc0 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x2c>)
 800ada6:	9b01      	ldr	r3, [sp, #4]
 800ada8:	6809      	ldr	r1, [r1, #0]
 800adaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800adae:	a803      	add	r0, sp, #12
 800adb0:	f00b fb5a 	bl	8016468 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800adb4:	b01d      	add	sp, #116	; 0x74
 800adb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800adba:	bf00      	nop
 800adbc:	200092c8 	andcs	r9, r0, r8, asr #5
 800adc0:	200000fc 	strdcs	r0, [r0], -ip

0800adc4 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 800adc4:	b500      	push	{lr}
 800adc6:	4a09      	ldr	r2, [pc, #36]	; (800adec <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 800adc8:	b0a7      	sub	sp, #156	; 0x9c
 800adca:	a803      	add	r0, sp, #12
 800adcc:	9101      	str	r1, [sp, #4]
 800adce:	6811      	ldr	r1, [r2, #0]
 800add0:	f002 ff3a 	bl	800dc48 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800add4:	4906      	ldr	r1, [pc, #24]	; (800adf0 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x2c>)
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	6809      	ldr	r1, [r1, #0]
 800adda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800adde:	a803      	add	r0, sp, #12
 800ade0:	f003 fae4 	bl	800e3ac <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 800ade4:	b027      	add	sp, #156	; 0x9c
 800ade6:	f85d fb04 	ldr.w	pc, [sp], #4
 800adea:	bf00      	nop
 800adec:	200092d8 	ldrdcs	r9, [r0], -r8
 800adf0:	200000fc 	strdcs	r0, [r0], -ip

0800adf4 <RemoteConfig::HandleGetE131Txt(unsigned int&)>:
 800adf4:	b500      	push	{lr}
 800adf6:	4a09      	ldr	r2, [pc, #36]	; (800ae1c <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x28>)
 800adf8:	b08d      	sub	sp, #52	; 0x34
 800adfa:	a803      	add	r0, sp, #12
 800adfc:	9101      	str	r1, [sp, #4]
 800adfe:	6811      	ldr	r1, [r2, #0]
 800ae00:	f004 fb18 	bl	800f434 <E131Params::E131Params(E131ParamsStore*)>
 800ae04:	4906      	ldr	r1, [pc, #24]	; (800ae20 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x2c>)
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	6809      	ldr	r1, [r1, #0]
 800ae0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae0e:	a803      	add	r0, sp, #12
 800ae10:	f004 fdfa 	bl	800fa08 <E131Params::Save(char*, unsigned int, unsigned int&)>
 800ae14:	b00d      	add	sp, #52	; 0x34
 800ae16:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae1a:	bf00      	nop
 800ae1c:	200092dc 	ldrdcs	r9, [r0], -ip
 800ae20:	200000fc 	strdcs	r0, [r0], -ip

0800ae24 <RemoteConfig::HandleGetParamsTxt(unsigned int&)>:
 800ae24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ae26:	4a08      	ldr	r2, [pc, #32]	; (800ae48 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x24>)
 800ae28:	9101      	str	r1, [sp, #4]
 800ae2a:	a802      	add	r0, sp, #8
 800ae2c:	6811      	ldr	r1, [r2, #0]
 800ae2e:	f006 f927 	bl	8011080 <DmxParams::DmxParams(DmxParamsStore*)>
 800ae32:	4906      	ldr	r1, [pc, #24]	; (800ae4c <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x28>)
 800ae34:	9b01      	ldr	r3, [sp, #4]
 800ae36:	6809      	ldr	r1, [r1, #0]
 800ae38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae3c:	a802      	add	r0, sp, #8
 800ae3e:	f006 fa41 	bl	80112c4 <DmxParams::Save(char*, unsigned int, unsigned int&)>
 800ae42:	b007      	add	sp, #28
 800ae44:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae48:	200092c4 	andcs	r9, r0, r4, asr #5
 800ae4c:	200000fc 	strdcs	r0, [r0], -ip

0800ae50 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 800ae50:	b500      	push	{lr}
 800ae52:	4a09      	ldr	r2, [pc, #36]	; (800ae78 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 800ae54:	b093      	sub	sp, #76	; 0x4c
 800ae56:	a803      	add	r0, sp, #12
 800ae58:	9101      	str	r1, [sp, #4]
 800ae5a:	6811      	ldr	r1, [r2, #0]
 800ae5c:	f007 f956 	bl	801210c <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 800ae60:	4906      	ldr	r1, [pc, #24]	; (800ae7c <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x2c>)
 800ae62:	9b01      	ldr	r3, [sp, #4]
 800ae64:	6809      	ldr	r1, [r1, #0]
 800ae66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae6a:	a803      	add	r0, sp, #12
 800ae6c:	f007 fc70 	bl	8012750 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)>
 800ae70:	b013      	add	sp, #76	; 0x4c
 800ae72:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae76:	bf00      	nop
 800ae78:	200092e0 	andcs	r9, r0, r0, ror #5
 800ae7c:	200000fc 	strdcs	r0, [r0], -ip

0800ae80 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800ae80:	b500      	push	{lr}
 800ae82:	4a09      	ldr	r2, [pc, #36]	; (800aea8 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800ae84:	b08d      	sub	sp, #52	; 0x34
 800ae86:	a802      	add	r0, sp, #8
 800ae88:	9101      	str	r1, [sp, #4]
 800ae8a:	6811      	ldr	r1, [r2, #0]
 800ae8c:	f00c f880 	bl	8016f90 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800ae90:	4906      	ldr	r1, [pc, #24]	; (800aeac <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x2c>)
 800ae92:	9b01      	ldr	r3, [sp, #4]
 800ae94:	6809      	ldr	r1, [r1, #0]
 800ae96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae9a:	a802      	add	r0, sp, #8
 800ae9c:	f00c f9b2 	bl	8017204 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800aea0:	b00d      	add	sp, #52	; 0x34
 800aea2:	f85d fb04 	ldr.w	pc, [sp], #4
 800aea6:	bf00      	nop
 800aea8:	200092c0 	andcs	r9, r0, r0, asr #5
 800aeac:	200000fc 	strdcs	r0, [r0], -ip

0800aeb0 <RemoteConfig::HandleSet(void*, unsigned int)>:
 800aeb0:	b530      	push	{r4, r5, lr}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	9201      	str	r2, [sp, #4]
 800aeb8:	b9d1      	cbnz	r1, 800aef0 <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 800aeba:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800aebe:	9303      	str	r3, [sp, #12]
 800aec0:	4b19      	ldr	r3, [pc, #100]	; (800af28 <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 800aec2:	6819      	ldr	r1, [r3, #0]
 800aec4:	aa03      	add	r2, sp, #12
 800aec6:	3101      	adds	r1, #1
 800aec8:	f000 fb3c 	bl	800b544 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800aecc:	2800      	cmp	r0, #0
 800aece:	db0d      	blt.n	800aeec <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800aed0:	4b16      	ldr	r3, [pc, #88]	; (800af2c <RemoteConfig::HandleSet(void*, unsigned int)+0x7c>)
 800aed2:	221c      	movs	r2, #28
 800aed4:	fb02 3300 	mla	r3, r2, r0, r3
 800aed8:	68da      	ldr	r2, [r3, #12]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	1051      	asrs	r1, r2, #1
 800aede:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800aee2:	07d2      	lsls	r2, r2, #31
 800aee4:	bf44      	itt	mi
 800aee6:	5862      	ldrmi	r2, [r4, r1]
 800aee8:	58d3      	ldrmi	r3, [r2, r3]
 800aeea:	4798      	blx	r3
 800aeec:	b005      	add	sp, #20
 800aeee:	bd30      	pop	{r4, r5, pc}
 800aef0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800aef4:	d8fa      	bhi.n	800aeec <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800aef6:	4b0e      	ldr	r3, [pc, #56]	; (800af30 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	460d      	mov	r5, r1
 800aefc:	07d9      	lsls	r1, r3, #31
 800aefe:	d50b      	bpl.n	800af18 <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 800af00:	782b      	ldrb	r3, [r5, #0]
 800af02:	2b7b      	cmp	r3, #123	; 0x7b
 800af04:	d108      	bne.n	800af18 <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 800af06:	1e51      	subs	r1, r2, #1
 800af08:	b289      	uxth	r1, r1
 800af0a:	2200      	movs	r2, #0
 800af0c:	4628      	mov	r0, r5
 800af0e:	f00c fadb 	bl	80174c8 <properties::convert_json_file(char*, unsigned short, bool)>
 800af12:	1e02      	subs	r2, r0, #0
 800af14:	ddea      	ble.n	800aeec <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800af16:	b292      	uxth	r2, r2
 800af18:	4b03      	ldr	r3, [pc, #12]	; (800af28 <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 800af1a:	61e2      	str	r2, [r4, #28]
 800af1c:	601d      	str	r5, [r3, #0]
 800af1e:	aa01      	add	r2, sp, #4
 800af20:	1c69      	adds	r1, r5, #1
 800af22:	4620      	mov	r0, r4
 800af24:	e7d0      	b.n	800aec8 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800af26:	bf00      	nop
 800af28:	200000fc 	strdcs	r0, [r0], -ip
 800af2c:	0801b07c 	stmdaeq	r1, {r2, r3, r4, r5, r6, ip, sp, pc}
 800af30:	2000fcd0 	ldrdcs	pc, [r0], -r0

0800af34 <RemoteConfig::Run()>:
 800af34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800af38:	7b05      	ldrb	r5, [r0, #12]
 800af3a:	2d00      	cmp	r5, #0
 800af3c:	d156      	bne.n	800afec <RemoteConfig::Run()+0xb8>
 800af3e:	4e45      	ldr	r6, [pc, #276]	; (800b054 <RemoteConfig::Run()+0x120>)
 800af40:	4604      	mov	r4, r0
 800af42:	f100 0218 	add.w	r2, r0, #24
 800af46:	f10d 030e 	add.w	r3, sp, #14
 800af4a:	7d00      	ldrb	r0, [r0, #20]
 800af4c:	4631      	mov	r1, r6
 800af4e:	f00a f885 	bl	801505c <udp_recv2>
 800af52:	2803      	cmp	r0, #3
 800af54:	61e0      	str	r0, [r4, #28]
 800af56:	d949      	bls.n	800afec <RemoteConfig::Run()+0xb8>
 800af58:	1e43      	subs	r3, r0, #1
 800af5a:	6831      	ldr	r1, [r6, #0]
 800af5c:	5cca      	ldrb	r2, [r1, r3]
 800af5e:	2a0a      	cmp	r2, #10
 800af60:	bf18      	it	ne
 800af62:	4603      	movne	r3, r0
 800af64:	61e3      	str	r3, [r4, #28]
 800af66:	7808      	ldrb	r0, [r1, #0]
 800af68:	283f      	cmp	r0, #63	; 0x3f
 800af6a:	d137      	bne.n	800afdc <RemoteConfig::Run()+0xa8>
 800af6c:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 800b06c <RemoteConfig::Run()+0x138>
 800af70:	3b01      	subs	r3, #1
 800af72:	61e3      	str	r3, [r4, #28]
 800af74:	462a      	mov	r2, r5
 800af76:	4667      	mov	r7, ip
 800af78:	f89c 500e 	ldrb.w	r5, [ip, #14]
 800af7c:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 800af80:	b16d      	cbz	r5, 800af9e <RemoteConfig::Run()+0x6a>
 800af82:	4283      	cmp	r3, r0
 800af84:	d80d      	bhi.n	800afa2 <RemoteConfig::Run()+0x6e>
 800af86:	3201      	adds	r2, #1
 800af88:	2a09      	cmp	r2, #9
 800af8a:	f10c 0c10 	add.w	ip, ip, #16
 800af8e:	d1f3      	bne.n	800af78 <RemoteConfig::Run()+0x44>
 800af90:	f642 1305 	movw	r3, #10501	; 0x2905
 800af94:	9300      	str	r3, [sp, #0]
 800af96:	69a3      	ldr	r3, [r4, #24]
 800af98:	492f      	ldr	r1, [pc, #188]	; (800b058 <RemoteConfig::Run()+0x124>)
 800af9a:	2208      	movs	r2, #8
 800af9c:	e04e      	b.n	800b03c <RemoteConfig::Run()+0x108>
 800af9e:	4283      	cmp	r3, r0
 800afa0:	d1f1      	bne.n	800af86 <RemoteConfig::Run()+0x52>
 800afa2:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800afa6:	460e      	mov	r6, r1
 800afa8:	3d01      	subs	r5, #1
 800afaa:	4408      	add	r0, r1
 800afac:	4286      	cmp	r6, r0
 800afae:	d10b      	bne.n	800afc8 <RemoteConfig::Run()+0x94>
 800afb0:	0113      	lsls	r3, r2, #4
 800afb2:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800afb6:	58fb      	ldr	r3, [r7, r3]
 800afb8:	6852      	ldr	r2, [r2, #4]
 800afba:	1051      	asrs	r1, r2, #1
 800afbc:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800afc0:	07d2      	lsls	r2, r2, #31
 800afc2:	d408      	bmi.n	800afd6 <RemoteConfig::Run()+0xa2>
 800afc4:	4798      	blx	r3
 800afc6:	e011      	b.n	800afec <RemoteConfig::Run()+0xb8>
 800afc8:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800afcc:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 800afd0:	45f0      	cmp	r8, lr
 800afd2:	d0eb      	beq.n	800afac <RemoteConfig::Run()+0x78>
 800afd4:	e7d7      	b.n	800af86 <RemoteConfig::Run()+0x52>
 800afd6:	5862      	ldr	r2, [r4, r1]
 800afd8:	58d3      	ldr	r3, [r2, r3]
 800afda:	e7f3      	b.n	800afc4 <RemoteConfig::Run()+0x90>
 800afdc:	7b62      	ldrb	r2, [r4, #13]
 800afde:	b92a      	cbnz	r2, 800afec <RemoteConfig::Run()+0xb8>
 800afe0:	2823      	cmp	r0, #35	; 0x23
 800afe2:	d106      	bne.n	800aff2 <RemoteConfig::Run()+0xbe>
 800afe4:	4611      	mov	r1, r2
 800afe6:	4620      	mov	r0, r4
 800afe8:	f7ff ff62 	bl	800aeb0 <RemoteConfig::HandleSet(void*, unsigned int)>
 800afec:	b004      	add	sp, #16
 800afee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff2:	2821      	cmp	r0, #33	; 0x21
 800aff4:	d1fa      	bne.n	800afec <RemoteConfig::Run()+0xb8>
 800aff6:	3b01      	subs	r3, #1
 800aff8:	2b05      	cmp	r3, #5
 800affa:	61e3      	str	r3, [r4, #28]
 800affc:	d918      	bls.n	800b030 <RemoteConfig::Run()+0xfc>
 800affe:	4d17      	ldr	r5, [pc, #92]	; (800b05c <RemoteConfig::Run()+0x128>)
 800b000:	460a      	mov	r2, r1
 800b002:	f101 0c05 	add.w	ip, r1, #5
 800b006:	4608      	mov	r0, r1
 800b008:	4560      	cmp	r0, ip
 800b00a:	d01b      	beq.n	800b044 <RemoteConfig::Run()+0x110>
 800b00c:	f815 6b01 	ldrb.w	r6, [r5], #1
 800b010:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800b014:	42b7      	cmp	r7, r6
 800b016:	d0f7      	beq.n	800b008 <RemoteConfig::Run()+0xd4>
 800b018:	2b08      	cmp	r3, #8
 800b01a:	d909      	bls.n	800b030 <RemoteConfig::Run()+0xfc>
 800b01c:	4b10      	ldr	r3, [pc, #64]	; (800b060 <RemoteConfig::Run()+0x12c>)
 800b01e:	3108      	adds	r1, #8
 800b020:	428a      	cmp	r2, r1
 800b022:	d015      	beq.n	800b050 <RemoteConfig::Run()+0x11c>
 800b024:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b028:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b02c:	4285      	cmp	r5, r0
 800b02e:	d0f7      	beq.n	800b020 <RemoteConfig::Run()+0xec>
 800b030:	f642 1305 	movw	r3, #10501	; 0x2905
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	69a3      	ldr	r3, [r4, #24]
 800b038:	490a      	ldr	r1, [pc, #40]	; (800b064 <RemoteConfig::Run()+0x130>)
 800b03a:	2208      	movs	r2, #8
 800b03c:	7d20      	ldrb	r0, [r4, #20]
 800b03e:	f00a f833 	bl	80150a8 <udp_send>
 800b042:	e7d3      	b.n	800afec <RemoteConfig::Run()+0xb8>
 800b044:	2300      	movs	r3, #0
 800b046:	4a08      	ldr	r2, [pc, #32]	; (800b068 <RemoteConfig::Run()+0x134>)
 800b048:	011b      	lsls	r3, r3, #4
 800b04a:	4620      	mov	r0, r4
 800b04c:	58d3      	ldr	r3, [r2, r3]
 800b04e:	e7b9      	b.n	800afc4 <RemoteConfig::Run()+0x90>
 800b050:	2301      	movs	r3, #1
 800b052:	e7f8      	b.n	800b046 <RemoteConfig::Run()+0x112>
 800b054:	200000fc 	strdcs	r0, [r0], -ip
 800b058:	0801ada5 	stmdaeq	r1, {r0, r2, r5, r7, r8, sl, fp, sp, pc}
 800b05c:	0801ad8d 	stmdaeq	r1, {r0, r2, r3, r7, r8, sl, fp, sp, pc}
 800b060:	0801ad93 	stmdaeq	r1, {r0, r1, r4, r7, r8, sl, fp, sp, pc}
 800b064:	0801ad9c 	stmdaeq	r1, {r2, r3, r4, r7, r8, sl, fp, sp, pc}
 800b068:	0801afcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, sl, fp, sp, pc}
 800b06c:	0801af3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, sl, fp, sp, pc}

0800b070 <RemoteConfig::HandleSetRconfig()>:
 800b070:	b510      	push	{r4, lr}
 800b072:	4b09      	ldr	r3, [pc, #36]	; (800b098 <RemoteConfig::HandleSetRconfig()+0x28>)
 800b074:	b08a      	sub	sp, #40	; 0x28
 800b076:	4604      	mov	r4, r0
 800b078:	6819      	ldr	r1, [r3, #0]
 800b07a:	a801      	add	r0, sp, #4
 800b07c:	f000 f8be 	bl	800b1fc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800b080:	4b06      	ldr	r3, [pc, #24]	; (800b09c <RemoteConfig::HandleSetRconfig()+0x2c>)
 800b082:	69e2      	ldr	r2, [r4, #28]
 800b084:	6819      	ldr	r1, [r3, #0]
 800b086:	a801      	add	r0, sp, #4
 800b088:	f000 f8ce 	bl	800b228 <RemoteConfigParams::Load(char const*, unsigned int)>
 800b08c:	4621      	mov	r1, r4
 800b08e:	a801      	add	r0, sp, #4
 800b090:	f000 f9e5 	bl	800b45e <RemoteConfigParams::Set(RemoteConfig*)>
 800b094:	b00a      	add	sp, #40	; 0x28
 800b096:	bd10      	pop	{r4, pc}
 800b098:	200092d0 	ldrdcs	r9, [r0], -r0
 800b09c:	200000fc 	strdcs	r0, [r0], -ip

0800b0a0 <RemoteConfig::HandleSetNetworkTxt()>:
 800b0a0:	b510      	push	{r4, lr}
 800b0a2:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800b0a4:	b09a      	sub	sp, #104	; 0x68
 800b0a6:	6819      	ldr	r1, [r3, #0]
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	a801      	add	r0, sp, #4
 800b0ac:	f00b f808 	bl	80160c0 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800b0b0:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800b0b2:	69e2      	ldr	r2, [r4, #28]
 800b0b4:	6819      	ldr	r1, [r3, #0]
 800b0b6:	a801      	add	r0, sp, #4
 800b0b8:	f00b f81a 	bl	80160f0 <NetworkParams::Load(char const*, unsigned int)>
 800b0bc:	b01a      	add	sp, #104	; 0x68
 800b0be:	bd10      	pop	{r4, pc}
 800b0c0:	200092c8 	andcs	r9, r0, r8, asr #5
 800b0c4:	200000fc 	strdcs	r0, [r0], -ip

0800b0c8 <RemoteConfig::HandleSetArtnetTxt()>:
 800b0c8:	b510      	push	{r4, lr}
 800b0ca:	4b07      	ldr	r3, [pc, #28]	; (800b0e8 <RemoteConfig::HandleSetArtnetTxt()+0x20>)
 800b0cc:	b0a4      	sub	sp, #144	; 0x90
 800b0ce:	6819      	ldr	r1, [r3, #0]
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	a801      	add	r0, sp, #4
 800b0d4:	f002 fdb8 	bl	800dc48 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800b0d8:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 800b0da:	69e2      	ldr	r2, [r4, #28]
 800b0dc:	6819      	ldr	r1, [r3, #0]
 800b0de:	a801      	add	r0, sp, #4
 800b0e0:	f002 fde0 	bl	800dca4 <ArtNetParams::Load(char const*, unsigned int)>
 800b0e4:	b024      	add	sp, #144	; 0x90
 800b0e6:	bd10      	pop	{r4, pc}
 800b0e8:	200092d8 	ldrdcs	r9, [r0], -r8
 800b0ec:	200000fc 	strdcs	r0, [r0], -ip

0800b0f0 <RemoteConfig::HandleSetE131Txt()>:
 800b0f0:	b510      	push	{r4, lr}
 800b0f2:	4b07      	ldr	r3, [pc, #28]	; (800b110 <RemoteConfig::HandleSetE131Txt()+0x20>)
 800b0f4:	b08a      	sub	sp, #40	; 0x28
 800b0f6:	6819      	ldr	r1, [r3, #0]
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	a801      	add	r0, sp, #4
 800b0fc:	f004 f99a 	bl	800f434 <E131Params::E131Params(E131ParamsStore*)>
 800b100:	4b04      	ldr	r3, [pc, #16]	; (800b114 <RemoteConfig::HandleSetE131Txt()+0x24>)
 800b102:	69e2      	ldr	r2, [r4, #28]
 800b104:	6819      	ldr	r1, [r3, #0]
 800b106:	a801      	add	r0, sp, #4
 800b108:	f004 f9b8 	bl	800f47c <E131Params::Load(char const*, unsigned int)>
 800b10c:	b00a      	add	sp, #40	; 0x28
 800b10e:	bd10      	pop	{r4, pc}
 800b110:	200092dc 	ldrdcs	r9, [r0], -ip
 800b114:	200000fc 	strdcs	r0, [r0], -ip

0800b118 <RemoteConfig::HandleSetParamsTxt()>:
 800b118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b11a:	4b07      	ldr	r3, [pc, #28]	; (800b138 <RemoteConfig::HandleSetParamsTxt()+0x20>)
 800b11c:	4604      	mov	r4, r0
 800b11e:	6819      	ldr	r1, [r3, #0]
 800b120:	4668      	mov	r0, sp
 800b122:	f005 ffad 	bl	8011080 <DmxParams::DmxParams(DmxParamsStore*)>
 800b126:	4b05      	ldr	r3, [pc, #20]	; (800b13c <RemoteConfig::HandleSetParamsTxt()+0x24>)
 800b128:	69e2      	ldr	r2, [r4, #28]
 800b12a:	6819      	ldr	r1, [r3, #0]
 800b12c:	4668      	mov	r0, sp
 800b12e:	f005 ffbf 	bl	80110b0 <DmxParams::Load(char const*, unsigned int)>
 800b132:	b004      	add	sp, #16
 800b134:	bd10      	pop	{r4, pc}
 800b136:	bf00      	nop
 800b138:	200092c4 	andcs	r9, r0, r4, asr #5
 800b13c:	200000fc 	strdcs	r0, [r0], -ip

0800b140 <RemoteConfig::HandleSetDevicesTxt()>:
 800b140:	b510      	push	{r4, lr}
 800b142:	4b07      	ldr	r3, [pc, #28]	; (800b160 <RemoteConfig::HandleSetDevicesTxt()+0x20>)
 800b144:	b090      	sub	sp, #64	; 0x40
 800b146:	6819      	ldr	r1, [r3, #0]
 800b148:	4604      	mov	r4, r0
 800b14a:	a801      	add	r0, sp, #4
 800b14c:	f006 ffde 	bl	801210c <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 800b150:	4b04      	ldr	r3, [pc, #16]	; (800b164 <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 800b152:	69e2      	ldr	r2, [r4, #28]
 800b154:	6819      	ldr	r1, [r3, #0]
 800b156:	a801      	add	r0, sp, #4
 800b158:	f007 f804 	bl	8012164 <PixelDmxParams::Load(char const*, unsigned int)>
 800b15c:	b010      	add	sp, #64	; 0x40
 800b15e:	bd10      	pop	{r4, pc}
 800b160:	200092e0 	andcs	r9, r0, r0, ror #5
 800b164:	200000fc 	strdcs	r0, [r0], -ip

0800b168 <RemoteConfig::HandleSetDisplayTxt()>:
 800b168:	b510      	push	{r4, lr}
 800b16a:	4b07      	ldr	r3, [pc, #28]	; (800b188 <RemoteConfig::HandleSetDisplayTxt()+0x20>)
 800b16c:	b08a      	sub	sp, #40	; 0x28
 800b16e:	6819      	ldr	r1, [r3, #0]
 800b170:	4604      	mov	r4, r0
 800b172:	4668      	mov	r0, sp
 800b174:	f00b ff0c 	bl	8016f90 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800b178:	4b04      	ldr	r3, [pc, #16]	; (800b18c <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800b17a:	69e2      	ldr	r2, [r4, #28]
 800b17c:	6819      	ldr	r1, [r3, #0]
 800b17e:	4668      	mov	r0, sp
 800b180:	f00b ff20 	bl	8016fc4 <DisplayUdfParams::Load(char const*, unsigned int)>
 800b184:	b00a      	add	sp, #40	; 0x28
 800b186:	bd10      	pop	{r4, pc}
 800b188:	200092c0 	andcs	r9, r0, r0, asr #5
 800b18c:	200000fc 	strdcs	r0, [r0], -ip

0800b190 <RemoteConfig::HandleFactory()>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	4d05      	ldr	r5, [pc, #20]	; (800b1a8 <RemoteConfig::HandleFactory()+0x18>)
 800b194:	2400      	movs	r4, #0
 800b196:	4621      	mov	r1, r4
 800b198:	6828      	ldr	r0, [r5, #0]
 800b19a:	3401      	adds	r4, #1
 800b19c:	f008 feac 	bl	8013ef8 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800b1a0:	2c1c      	cmp	r4, #28
 800b1a2:	d1f8      	bne.n	800b196 <RemoteConfig::HandleFactory()+0x6>
 800b1a4:	bd38      	pop	{r3, r4, r5, pc}
 800b1a6:	bf00      	nop
 800b1a8:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

0800b1ac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800b1ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	8885      	ldrh	r5, [r0, #4]
 800b1b2:	88c1      	ldrh	r1, [r0, #6]
 800b1b4:	42a9      	cmp	r1, r5
 800b1b6:	d214      	bcs.n	800b1e2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	6800      	ldr	r0, [r0, #0]
 800b1bc:	1a6d      	subs	r5, r5, r1
 800b1be:	4408      	add	r0, r1
 800b1c0:	7a21      	ldrb	r1, [r4, #8]
 800b1c2:	b91a      	cbnz	r2, 800b1cc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800b1c4:	b919      	cbnz	r1, 800b1ce <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800b1c6:	4a0a      	ldr	r2, [pc, #40]	; (800b1f0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800b1c8:	9100      	str	r1, [sp, #0]
 800b1ca:	e002      	b.n	800b1d2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b1cc:	b159      	cbz	r1, 800b1e6 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800b1ce:	9200      	str	r2, [sp, #0]
 800b1d0:	4a08      	ldr	r2, [pc, #32]	; (800b1f4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	f7ff f9f2 	bl	800a5bc <snprintf>
 800b1d8:	4285      	cmp	r5, r0
 800b1da:	bfa2      	ittt	ge
 800b1dc:	88e3      	ldrhge	r3, [r4, #6]
 800b1de:	181b      	addge	r3, r3, r0
 800b1e0:	80e3      	strhge	r3, [r4, #6]
 800b1e2:	b003      	add	sp, #12
 800b1e4:	bd30      	pop	{r4, r5, pc}
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	9200      	str	r2, [sp, #0]
 800b1ea:	4a03      	ldr	r2, [pc, #12]	; (800b1f8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800b1ec:	e7f1      	b.n	800b1d2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b1ee:	bf00      	nop
 800b1f0:	0801aff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800b1f4:	0801afec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800b1f8:	0801aff6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}

0800b1fc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	2220      	movs	r2, #32
 800b200:	4604      	mov	r4, r0
 800b202:	f840 1b04 	str.w	r1, [r0], #4
 800b206:	2100      	movs	r1, #0
 800b208:	f00d f95a 	bl	80184c0 <memset>
 800b20c:	4620      	mov	r0, r4
 800b20e:	bd10      	pop	{r4, pc}

0800b210 <RemoteConfigParams::Load()>:
 800b210:	b508      	push	{r3, lr}
 800b212:	2300      	movs	r3, #0
 800b214:	4601      	mov	r1, r0
 800b216:	6043      	str	r3, [r0, #4]
 800b218:	6800      	ldr	r0, [r0, #0]
 800b21a:	b120      	cbz	r0, 800b226 <RemoteConfigParams::Load()+0x16>
 800b21c:	6803      	ldr	r3, [r0, #0]
 800b21e:	3104      	adds	r1, #4
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	4798      	blx	r3
 800b224:	2001      	movs	r0, #1
 800b226:	bd08      	pop	{r3, pc}

0800b228 <RemoteConfigParams::Load(char const*, unsigned int)>:
 800b228:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b22a:	2300      	movs	r3, #0
 800b22c:	6043      	str	r3, [r0, #4]
 800b22e:	4604      	mov	r4, r0
 800b230:	460d      	mov	r5, r1
 800b232:	4616      	mov	r6, r2
 800b234:	490a      	ldr	r1, [pc, #40]	; (800b260 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800b236:	4602      	mov	r2, r0
 800b238:	4668      	mov	r0, sp
 800b23a:	f00c fa97 	bl	801776c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800b23e:	4632      	mov	r2, r6
 800b240:	4629      	mov	r1, r5
 800b242:	4668      	mov	r0, sp
 800b244:	f00c fa96 	bl	8017774 <ReadConfigFile::Read(char const*, unsigned int)>
 800b248:	4621      	mov	r1, r4
 800b24a:	f851 0b04 	ldr.w	r0, [r1], #4
 800b24e:	6803      	ldr	r3, [r0, #0]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	4798      	blx	r3
 800b254:	4668      	mov	r0, sp
 800b256:	f00c fa8c 	bl	8017772 <ReadConfigFile::~ReadConfigFile()>
 800b25a:	b002      	add	sp, #8
 800b25c:	bd70      	pop	{r4, r5, r6, pc}
 800b25e:	bf00      	nop
 800b260:	0800b321 	stmdaeq	r0, {r0, r5, r8, r9, ip, sp, pc}

0800b264 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800b264:	6843      	ldr	r3, [r0, #4]
 800b266:	b111      	cbz	r1, 800b26e <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800b268:	431a      	orrs	r2, r3
 800b26a:	6042      	str	r2, [r0, #4]
 800b26c:	4770      	bx	lr
 800b26e:	ea23 0202 	bic.w	r2, r3, r2
 800b272:	e7fa      	b.n	800b26a <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800b274 <RemoteConfigParams::callbackFunction(char const*)>:
 800b274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b276:	460d      	mov	r5, r1
 800b278:	4604      	mov	r4, r0
 800b27a:	4923      	ldr	r1, [pc, #140]	; (800b308 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800b27c:	f10d 0203 	add.w	r2, sp, #3
 800b280:	4628      	mov	r0, r5
 800b282:	f00c fba8 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b286:	b940      	cbnz	r0, 800b29a <RemoteConfigParams::callbackFunction(char const*)+0x26>
 800b288:	2201      	movs	r2, #1
 800b28a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800b28e:	4620      	mov	r0, r4
 800b290:	b003      	add	sp, #12
 800b292:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b296:	f7ff bfe5 	b.w	800b264 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800b29a:	491c      	ldr	r1, [pc, #112]	; (800b30c <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800b29c:	f10d 0203 	add.w	r2, sp, #3
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	f00c fb98 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b2a6:	b908      	cbnz	r0, 800b2ac <RemoteConfigParams::callbackFunction(char const*)+0x38>
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	e7ee      	b.n	800b28a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800b2ac:	4918      	ldr	r1, [pc, #96]	; (800b310 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800b2ae:	f10d 0203 	add.w	r2, sp, #3
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f00c fb8f 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b2b8:	b908      	cbnz	r0, 800b2be <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 800b2ba:	2204      	movs	r2, #4
 800b2bc:	e7e5      	b.n	800b28a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800b2be:	4915      	ldr	r1, [pc, #84]	; (800b314 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800b2c0:	f10d 0203 	add.w	r2, sp, #3
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	f00c fb86 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b2ca:	b908      	cbnz	r0, 800b2d0 <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 800b2cc:	2208      	movs	r2, #8
 800b2ce:	e7dc      	b.n	800b28a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800b2d0:	4911      	ldr	r1, [pc, #68]	; (800b318 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800b2d2:	f10d 0203 	add.w	r2, sp, #3
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f00c fb7d 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b2dc:	b908      	cbnz	r0, 800b2e2 <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 800b2de:	2220      	movs	r2, #32
 800b2e0:	e7d3      	b.n	800b28a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800b2e2:	2317      	movs	r3, #23
 800b2e4:	9301      	str	r3, [sp, #4]
 800b2e6:	490d      	ldr	r1, [pc, #52]	; (800b31c <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800b2e8:	ab01      	add	r3, sp, #4
 800b2ea:	f104 020c 	add.w	r2, r4, #12
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f00c fa74 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b2f4:	b930      	cbnz	r0, 800b304 <RemoteConfigParams::callbackFunction(char const*)+0x90>
 800b2f6:	9b01      	ldr	r3, [sp, #4]
 800b2f8:	4423      	add	r3, r4
 800b2fa:	7318      	strb	r0, [r3, #12]
 800b2fc:	6863      	ldr	r3, [r4, #4]
 800b2fe:	f043 0310 	orr.w	r3, r3, #16
 800b302:	6063      	str	r3, [r4, #4]
 800b304:	b003      	add	sp, #12
 800b306:	bd30      	pop	{r4, r5, pc}
 800b308:	0801b425 	stmdaeq	r1, {r0, r2, r5, sl, ip, sp, pc}
 800b30c:	0801b446 	stmdaeq	r1, {r1, r2, r6, sl, ip, sp, pc}
 800b310:	0801b454 	stmdaeq	r1, {r2, r4, r6, sl, ip, sp, pc}
 800b314:	0801b462 	stmdaeq	r1, {r1, r5, r6, sl, ip, sp, pc}
 800b318:	0801b470 	stmdaeq	r1, {r4, r5, r6, sl, ip, sp, pc}
 800b31c:	0801b439 	stmdaeq	r1, {r0, r3, r4, r5, sl, ip, sp, pc}

0800b320 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800b320:	f7ff bfa8 	b.w	800b274 <RemoteConfigParams::callbackFunction(char const*)>

0800b324 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	4604      	mov	r4, r0
 800b328:	b086      	sub	sp, #24
 800b32a:	4615      	mov	r5, r2
 800b32c:	461e      	mov	r6, r3
 800b32e:	3004      	adds	r0, #4
 800b330:	2900      	cmp	r1, #0
 800b332:	d041      	beq.n	800b3b8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 800b334:	2220      	movs	r2, #32
 800b336:	f00d f8ac 	bl	8018492 <memmove>
 800b33a:	4633      	mov	r3, r6
 800b33c:	462a      	mov	r2, r5
 800b33e:	4937      	ldr	r1, [pc, #220]	; (800b41c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800b340:	a803      	add	r0, sp, #12
 800b342:	f00c f973 	bl	801762c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800b346:	6862      	ldr	r2, [r4, #4]
 800b348:	4935      	ldr	r1, [pc, #212]	; (800b420 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800b34a:	f002 0201 	and.w	r2, r2, #1
 800b34e:	a803      	add	r0, sp, #12
 800b350:	f7ff ff2c 	bl	800b1ac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b354:	6862      	ldr	r2, [r4, #4]
 800b356:	4933      	ldr	r1, [pc, #204]	; (800b424 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800b358:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800b35c:	a803      	add	r0, sp, #12
 800b35e:	f7ff ff25 	bl	800b1ac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b362:	6862      	ldr	r2, [r4, #4]
 800b364:	4930      	ldr	r1, [pc, #192]	; (800b428 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800b366:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800b36a:	a803      	add	r0, sp, #12
 800b36c:	f7ff ff1e 	bl	800b1ac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b370:	6862      	ldr	r2, [r4, #4]
 800b372:	492e      	ldr	r1, [pc, #184]	; (800b42c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800b374:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800b378:	a803      	add	r0, sp, #12
 800b37a:	f7ff ff17 	bl	800b1ac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b37e:	6862      	ldr	r2, [r4, #4]
 800b380:	492b      	ldr	r1, [pc, #172]	; (800b430 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800b382:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800b386:	a803      	add	r0, sp, #12
 800b388:	f7ff ff10 	bl	800b1ac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b38c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b390:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800b394:	6862      	ldr	r2, [r4, #4]
 800b396:	42ab      	cmp	r3, r5
 800b398:	d223      	bcs.n	800b3e2 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 800b39a:	9803      	ldr	r0, [sp, #12]
 800b39c:	06d2      	lsls	r2, r2, #27
 800b39e:	4418      	add	r0, r3
 800b3a0:	eba5 0503 	sub.w	r5, r5, r3
 800b3a4:	f104 040c 	add.w	r4, r4, #12
 800b3a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b3ac:	d40b      	bmi.n	800b3c6 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800b3ae:	b95b      	cbnz	r3, 800b3c8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 800b3b0:	4b20      	ldr	r3, [pc, #128]	; (800b434 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800b3b2:	4a21      	ldr	r2, [pc, #132]	; (800b438 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800b3b4:	9400      	str	r4, [sp, #0]
 800b3b6:	e00a      	b.n	800b3ce <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	4601      	mov	r1, r0
 800b3be:	68d2      	ldr	r2, [r2, #12]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	4790      	blx	r2
 800b3c4:	e7b9      	b.n	800b33a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800b3c6:	b32b      	cbz	r3, 800b414 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 800b3c8:	4b1a      	ldr	r3, [pc, #104]	; (800b434 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800b3ca:	4a1c      	ldr	r2, [pc, #112]	; (800b43c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800b3cc:	9400      	str	r4, [sp, #0]
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	f7ff f8f4 	bl	800a5bc <snprintf>
 800b3d4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b3d8:	4285      	cmp	r5, r0
 800b3da:	bfa4      	itt	ge
 800b3dc:	181b      	addge	r3, r3, r0
 800b3de:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800b3e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b3e6:	b17b      	cbz	r3, 800b408 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 800b3e8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b3ec:	9b03      	ldr	r3, [sp, #12]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	227d      	movs	r2, #125	; 0x7d
 800b3f2:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b3f6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b3fa:	9903      	ldr	r1, [sp, #12]
 800b3fc:	54ca      	strb	r2, [r1, r3]
 800b3fe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b402:	3301      	adds	r3, #1
 800b404:	f8ad 3012 	strh.w	r3, [sp, #18]
 800b408:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b40c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b40e:	601a      	str	r2, [r3, #0]
 800b410:	b006      	add	sp, #24
 800b412:	bd70      	pop	{r4, r5, r6, pc}
 800b414:	4b07      	ldr	r3, [pc, #28]	; (800b434 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800b416:	4a0a      	ldr	r2, [pc, #40]	; (800b440 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800b418:	9400      	str	r4, [sp, #0]
 800b41a:	e7d8      	b.n	800b3ce <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800b41c:	0801b42d 	stmdaeq	r1, {r0, r2, r3, r5, sl, ip, sp, pc}
 800b420:	0801b425 	stmdaeq	r1, {r0, r2, r5, sl, ip, sp, pc}
 800b424:	0801b446 	stmdaeq	r1, {r1, r2, r6, sl, ip, sp, pc}
 800b428:	0801b454 	stmdaeq	r1, {r2, r4, r6, sl, ip, sp, pc}
 800b42c:	0801b462 	stmdaeq	r1, {r1, r5, r6, sl, ip, sp, pc}
 800b430:	0801b470 	stmdaeq	r1, {r4, r5, r6, sl, ip, sp, pc}
 800b434:	0801b439 	stmdaeq	r1, {r0, r3, r4, r5, sl, ip, sp, pc}
 800b438:	0801b008 	stmdaeq	r1, {r3, ip, sp, pc}
 800b43c:	0801affd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800b440:	0801b009 	stmdaeq	r1, {r0, r3, ip, sp, pc}

0800b444 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800b444:	b513      	push	{r0, r1, r4, lr}
 800b446:	6804      	ldr	r4, [r0, #0]
 800b448:	b914      	cbnz	r4, 800b450 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800b44a:	601c      	str	r4, [r3, #0]
 800b44c:	b002      	add	sp, #8
 800b44e:	bd10      	pop	{r4, pc}
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	4613      	mov	r3, r2
 800b454:	460a      	mov	r2, r1
 800b456:	2100      	movs	r1, #0
 800b458:	f7ff ff64 	bl	800b324 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800b45c:	e7f6      	b.n	800b44c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800b45e <RemoteConfigParams::Set(RemoteConfig*)>:
 800b45e:	b538      	push	{r3, r4, r5, lr}
 800b460:	460c      	mov	r4, r1
 800b462:	6841      	ldr	r1, [r0, #4]
 800b464:	4605      	mov	r5, r0
 800b466:	f001 0101 	and.w	r1, r1, #1
 800b46a:	4620      	mov	r0, r4
 800b46c:	f7ff fbe2 	bl	800ac34 <RemoteConfig::SetDisable(bool)>
 800b470:	686b      	ldr	r3, [r5, #4]
 800b472:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800b476:	7362      	strb	r2, [r4, #13]
 800b478:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800b47c:	73a2      	strb	r2, [r4, #14]
 800b47e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800b482:	73e2      	strb	r2, [r4, #15]
 800b484:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800b488:	06db      	lsls	r3, r3, #27
 800b48a:	7422      	strb	r2, [r4, #16]
 800b48c:	d506      	bpl.n	800b49c <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 800b48e:	f105 010c 	add.w	r1, r5, #12
 800b492:	4620      	mov	r0, r4
 800b494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b498:	f7ff bbec 	b.w	800ac74 <RemoteConfig::SetDisplayName(char const*)>
 800b49c:	bd38      	pop	{r3, r4, r5, pc}

0800b49e <RemoteConfigParams::Dump()>:
 800b49e:	4770      	bx	lr

0800b4a0 <RemoteConfig::HandleReboot()>:
 800b4a0:	7b83      	ldrb	r3, [r0, #14]
 800b4a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d03c      	beq.n	800b522 <RemoteConfig::HandleReboot()+0x82>
 800b4a8:	4c1f      	ldr	r4, [pc, #124]	; (800b528 <RemoteConfig::HandleReboot()+0x88>)
 800b4aa:	6825      	ldr	r5, [r4, #0]
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	7443      	strb	r3, [r0, #17]
 800b4b0:	69a8      	ldr	r0, [r5, #24]
 800b4b2:	b138      	cbz	r0, 800b4c4 <RemoteConfig::HandleReboot()+0x24>
 800b4b4:	6803      	ldr	r3, [r0, #0]
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ba:	7429      	strb	r1, [r5, #16]
 800b4bc:	4798      	blx	r3
 800b4be:	4b1b      	ldr	r3, [pc, #108]	; (800b52c <RemoteConfig::HandleReboot()+0x8c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	606b      	str	r3, [r5, #4]
 800b4c4:	4d1a      	ldr	r5, [pc, #104]	; (800b530 <RemoteConfig::HandleReboot()+0x90>)
 800b4c6:	6828      	ldr	r0, [r5, #0]
 800b4c8:	f008 fd9a 	bl	8014000 <SpiFlashStore::Flash()>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d1fa      	bne.n	800b4c6 <RemoteConfig::HandleReboot()+0x26>
 800b4d0:	4b18      	ldr	r3, [pc, #96]	; (800b534 <RemoteConfig::HandleReboot()+0x94>)
 800b4d2:	6818      	ldr	r0, [r3, #0]
 800b4d4:	f00a fab0 	bl	8015a38 <Network::Shutdown()>
 800b4d8:	4817      	ldr	r0, [pc, #92]	; (800b538 <RemoteConfig::HandleReboot()+0x98>)
 800b4da:	f7ff f847 	bl	800a56c <printf>
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	6998      	ldr	r0, [r3, #24]
 800b4e2:	b110      	cbz	r0, 800b4ea <RemoteConfig::HandleReboot()+0x4a>
 800b4e4:	6803      	ldr	r3, [r0, #0]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	4798      	blx	r3
 800b4ea:	6824      	ldr	r4, [r4, #0]
 800b4ec:	4913      	ldr	r1, [pc, #76]	; (800b53c <RemoteConfig::HandleReboot()+0x9c>)
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f7fd ff4e 	bl	8009390 <Display::TextStatus(char const*)>
 800b4f4:	7c63      	ldrb	r3, [r4, #17]
 800b4f6:	b183      	cbz	r3, 800b51a <RemoteConfig::HandleReboot()+0x7a>
 800b4f8:	f64b 7312 	movw	r3, #48914	; 0xbf12
 800b4fc:	7a20      	ldrb	r0, [r4, #8]
 800b4fe:	f8ad 3004 	strh.w	r3, [sp, #4]
 800b502:	23bf      	movs	r3, #191	; 0xbf
 800b504:	f88d 3006 	strb.w	r3, [sp, #6]
 800b508:	f00e f856 	bl	80195b8 <gd32_i2c_set_address>
 800b50c:	68e0      	ldr	r0, [r4, #12]
 800b50e:	f00e f84b 	bl	80195a8 <gd32_i2c_set_baudrate>
 800b512:	2103      	movs	r1, #3
 800b514:	a801      	add	r0, sp, #4
 800b516:	f00e f855 	bl	80195c4 <gd32_i2c_write>
 800b51a:	4b09      	ldr	r3, [pc, #36]	; (800b540 <RemoteConfig::HandleReboot()+0xa0>)
 800b51c:	6818      	ldr	r0, [r3, #0]
 800b51e:	f00c feb7 	bl	8018290 <Hardware::Reboot()>
 800b522:	b003      	add	sp, #12
 800b524:	bd30      	pop	{r4, r5, pc}
 800b526:	bf00      	nop
 800b528:	2000fcd4 	ldrdcs	pc, [r0], -r4
 800b52c:	2000fddc 	ldrdcs	pc, [r0], -ip
 800b530:	200092b8 			; <UNDEFINED> instruction: 0x200092b8
 800b534:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 800b538:	0801b010 	stmdaeq	r1, {r4, ip, sp, pc}
 800b53c:	0801b01f 	stmdaeq	r1, {r0, r1, r2, r3, r4, ip, sp, pc}
 800b540:	2000fdc4 	andcs	pc, r0, r4, asr #27

0800b544 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800b544:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b548:	4d12      	ldr	r5, [pc, #72]	; (800b594 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800b54a:	2000      	movs	r0, #0
 800b54c:	f10d 0c04 	add.w	ip, sp, #4
 800b550:	6814      	ldr	r4, [r2, #0]
 800b552:	7d2b      	ldrb	r3, [r5, #20]
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	42a3      	cmp	r3, r4
 800b558:	bf34      	ite	cc
 800b55a:	4664      	movcc	r4, ip
 800b55c:	4614      	movcs	r4, r2
 800b55e:	692e      	ldr	r6, [r5, #16]
 800b560:	6827      	ldr	r7, [r4, #0]
 800b562:	3e01      	subs	r6, #1
 800b564:	440f      	add	r7, r1
 800b566:	460c      	mov	r4, r1
 800b568:	42bc      	cmp	r4, r7
 800b56a:	d101      	bne.n	800b570 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	e00c      	b.n	800b58a <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 800b570:	f894 8000 	ldrb.w	r8, [r4]
 800b574:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800b578:	45f0      	cmp	r8, lr
 800b57a:	d009      	beq.n	800b590 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800b57c:	3001      	adds	r0, #1
 800b57e:	2807      	cmp	r0, #7
 800b580:	f105 051c 	add.w	r5, r5, #28
 800b584:	d1e4      	bne.n	800b550 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800b586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b58a:	b002      	add	sp, #8
 800b58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b590:	3401      	adds	r4, #1
 800b592:	e7e9      	b.n	800b568 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800b594:	0801b07c 	stmdaeq	r1, {r2, r3, r4, r5, r6, ip, sp, pc}

0800b598 <RemoteConfig::PlatformHandleTftpSet()>:
 800b598:	f890 1020 	ldrb.w	r1, [r0, #32]
 800b59c:	b109      	cbz	r1, 800b5a2 <RemoteConfig::PlatformHandleTftpSet()+0xa>
 800b59e:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 800b5a2:	2001      	movs	r0, #1
 800b5a4:	f00d bf44 	b.w	8019430 <bkp_data_write(bkp_data_register_enum, unsigned short)>

0800b5a8 <RemoteConfig::PlatformHandleTftpGet()>:
 800b5a8:	b510      	push	{r4, lr}
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	2001      	movs	r0, #1
 800b5ae:	f00d ff47 	bl	8019440 <bkp_data_read(bkp_data_register_enum)>
 800b5b2:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 800b5b6:	1ac3      	subs	r3, r0, r3
 800b5b8:	4258      	negs	r0, r3
 800b5ba:	4158      	adcs	r0, r3
 800b5bc:	f884 0020 	strb.w	r0, [r4, #32]
 800b5c0:	bd10      	pop	{r4, pc}

0800b5c2 <strcmp>:
 800b5c2:	1e43      	subs	r3, r0, #1
 800b5c4:	3901      	subs	r1, #1
 800b5c6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800b5ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b5ce:	4290      	cmp	r0, r2
 800b5d0:	d001      	beq.n	800b5d6 <strcmp+0x14>
 800b5d2:	1a80      	subs	r0, r0, r2
 800b5d4:	e001      	b.n	800b5da <strcmp+0x18>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d1f5      	bne.n	800b5c6 <strcmp+0x4>
 800b5da:	4770      	bx	lr

0800b5dc <strcasecmp>:
 800b5dc:	b530      	push	{r4, r5, lr}
 800b5de:	1e42      	subs	r2, r0, #1
 800b5e0:	3901      	subs	r1, #1
 800b5e2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b5e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b5ea:	2b19      	cmp	r3, #25
 800b5ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b5f0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	bf98      	it	ls
 800b5f8:	f100 0420 	addls.w	r4, r0, #32
 800b5fc:	2d19      	cmp	r5, #25
 800b5fe:	bf98      	it	ls
 800b600:	3320      	addls	r3, #32
 800b602:	42a3      	cmp	r3, r4
 800b604:	d001      	beq.n	800b60a <strcasecmp+0x2e>
 800b606:	1ae0      	subs	r0, r4, r3
 800b608:	e001      	b.n	800b60e <strcasecmp+0x32>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	d1e9      	bne.n	800b5e2 <strcasecmp+0x6>
 800b60e:	bd30      	pop	{r4, r5, pc}

0800b610 <PropertiesConfig::EnableJSON(bool)>:
 800b610:	4a04      	ldr	r2, [pc, #16]	; (800b624 <PropertiesConfig::EnableJSON(bool)+0x14>)
 800b612:	7813      	ldrb	r3, [r2, #0]
 800b614:	b118      	cbz	r0, 800b61e <PropertiesConfig::EnableJSON(bool)+0xe>
 800b616:	f043 0301 	orr.w	r3, r3, #1
 800b61a:	7013      	strb	r3, [r2, #0]
 800b61c:	4770      	bx	lr
 800b61e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b622:	e7fa      	b.n	800b61a <PropertiesConfig::EnableJSON(bool)+0xa>
 800b624:	2000fcd0 	ldrdcs	pc, [r0], -r0

0800b628 <HttpDaemon::HttpDaemon()>:
 800b628:	4a08      	ldr	r2, [pc, #32]	; (800b64c <HttpDaemon::HttpDaemon()+0x24>)
 800b62a:	6002      	str	r2, [r0, #0]
 800b62c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b630:	2200      	movs	r2, #0
 800b632:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800b636:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800b63a:	2102      	movs	r1, #2
 800b63c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800b640:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800b644:	e9c0 2208 	strd	r2, r2, [r0, #32]
 800b648:	60c2      	str	r2, [r0, #12]
 800b64a:	4770      	bx	lr
 800b64c:	0801b3a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, ip, sp, pc}

0800b650 <HttpDaemon::Start()>:
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <HttpDaemon::Start()+0x14>)
 800b652:	b510      	push	{r4, lr}
 800b654:	2150      	movs	r1, #80	; 0x50
 800b656:	4604      	mov	r4, r0
 800b658:	6818      	ldr	r0, [r3, #0]
 800b65a:	f00a fd25 	bl	80160a8 <Network::TcpBegin(unsigned short)>
 800b65e:	6120      	str	r0, [r4, #16]
 800b660:	bd10      	pop	{r4, pc}
 800b662:	bf00      	nop
 800b664:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

0800b668 <HttpDaemon::ParseMethod(char*)>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4604      	mov	r4, r0
 800b66c:	4608      	mov	r0, r1
 800b66e:	491a      	ldr	r1, [pc, #104]	; (800b6d8 <HttpDaemon::ParseMethod(char*)+0x70>)
 800b670:	f00c ff50 	bl	8018514 <strtok>
 800b674:	4605      	mov	r5, r0
 800b676:	b360      	cbz	r0, 800b6d2 <HttpDaemon::ParseMethod(char*)+0x6a>
 800b678:	4918      	ldr	r1, [pc, #96]	; (800b6dc <HttpDaemon::ParseMethod(char*)+0x74>)
 800b67a:	f7ff ffa2 	bl	800b5c2 <strcmp>
 800b67e:	b128      	cbz	r0, 800b68c <HttpDaemon::ParseMethod(char*)+0x24>
 800b680:	4917      	ldr	r1, [pc, #92]	; (800b6e0 <HttpDaemon::ParseMethod(char*)+0x78>)
 800b682:	4628      	mov	r0, r5
 800b684:	f7ff ff9d 	bl	800b5c2 <strcmp>
 800b688:	bb18      	cbnz	r0, 800b6d2 <HttpDaemon::ParseMethod(char*)+0x6a>
 800b68a:	2001      	movs	r0, #1
 800b68c:	61e0      	str	r0, [r4, #28]
 800b68e:	4912      	ldr	r1, [pc, #72]	; (800b6d8 <HttpDaemon::ParseMethod(char*)+0x70>)
 800b690:	2000      	movs	r0, #0
 800b692:	f00c ff3f 	bl	8018514 <strtok>
 800b696:	b910      	cbnz	r0, 800b69e <HttpDaemon::ParseMethod(char*)+0x36>
 800b698:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b69c:	bd38      	pop	{r3, r4, r5, pc}
 800b69e:	6060      	str	r0, [r4, #4]
 800b6a0:	4910      	ldr	r1, [pc, #64]	; (800b6e4 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	f00c ff36 	bl	8018514 <strtok>
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	d0f5      	beq.n	800b698 <HttpDaemon::ParseMethod(char*)+0x30>
 800b6ac:	490e      	ldr	r1, [pc, #56]	; (800b6e8 <HttpDaemon::ParseMethod(char*)+0x80>)
 800b6ae:	f7ff ff88 	bl	800b5c2 <strcmp>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d1f0      	bne.n	800b698 <HttpDaemon::ParseMethod(char*)+0x30>
 800b6b6:	490d      	ldr	r1, [pc, #52]	; (800b6ec <HttpDaemon::ParseMethod(char*)+0x84>)
 800b6b8:	f00c ff2c 	bl	8018514 <strtok>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d0eb      	beq.n	800b698 <HttpDaemon::ParseMethod(char*)+0x30>
 800b6c0:	490b      	ldr	r1, [pc, #44]	; (800b6f0 <HttpDaemon::ParseMethod(char*)+0x88>)
 800b6c2:	f7ff ff7e 	bl	800b5c2 <strcmp>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	f240 10f9 	movw	r0, #505	; 0x1f9
 800b6cc:	bf08      	it	eq
 800b6ce:	20c8      	moveq	r0, #200	; 0xc8
 800b6d0:	e7e4      	b.n	800b69c <HttpDaemon::ParseMethod(char*)+0x34>
 800b6d2:	f240 10f5 	movw	r0, #501	; 0x1f5
 800b6d6:	e7e1      	b.n	800b69c <HttpDaemon::ParseMethod(char*)+0x34>
 800b6d8:	0801d87b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, fp, ip, lr, pc}
 800b6dc:	0801b140 	stmdaeq	r1, {r6, r8, ip, sp, pc}
 800b6e0:	0801b144 	stmdaeq	r1, {r2, r6, r8, ip, sp, pc}
 800b6e4:	0801b1ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, ip, sp, pc}
 800b6e8:	0801b149 	stmdaeq	r1, {r0, r3, r6, r8, ip, sp, pc}
 800b6ec:	0801b14e 	stmdaeq	r1, {r1, r2, r3, r6, r8, ip, sp, pc}
 800b6f0:	0801b151 	stmdaeq	r1, {r0, r4, r6, r8, ip, sp, pc}

0800b6f4 <HttpDaemon::ParseHeaderField(char*)>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	4605      	mov	r5, r0
 800b6f8:	4608      	mov	r0, r1
 800b6fa:	491d      	ldr	r1, [pc, #116]	; (800b770 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800b6fc:	f00c ff0a 	bl	8018514 <strtok>
 800b700:	4604      	mov	r4, r0
 800b702:	b910      	cbnz	r0, 800b70a <HttpDaemon::ParseHeaderField(char*)+0x16>
 800b704:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b708:	bd38      	pop	{r3, r4, r5, pc}
 800b70a:	491a      	ldr	r1, [pc, #104]	; (800b774 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800b70c:	f7ff ff66 	bl	800b5dc <strcasecmp>
 800b710:	b970      	cbnz	r0, 800b730 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800b712:	4919      	ldr	r1, [pc, #100]	; (800b778 <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800b714:	f00c fefe 	bl	8018514 <strtok>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d0f3      	beq.n	800b704 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800b71c:	4917      	ldr	r1, [pc, #92]	; (800b77c <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800b71e:	f7ff ff50 	bl	800b5c2 <strcmp>
 800b722:	b108      	cbz	r0, 800b728 <HttpDaemon::ParseHeaderField(char*)+0x34>
 800b724:	20c8      	movs	r0, #200	; 0xc8
 800b726:	e7ef      	b.n	800b708 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800b728:	2301      	movs	r3, #1
 800b72a:	f885 3020 	strb.w	r3, [r5, #32]
 800b72e:	e7f9      	b.n	800b724 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800b730:	4620      	mov	r0, r4
 800b732:	4913      	ldr	r1, [pc, #76]	; (800b780 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800b734:	f7ff ff52 	bl	800b5dc <strcasecmp>
 800b738:	4604      	mov	r4, r0
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d1f2      	bne.n	800b724 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800b73e:	4911      	ldr	r1, [pc, #68]	; (800b784 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800b740:	f00c fee8 	bl	8018514 <strtok>
 800b744:	2800      	cmp	r0, #0
 800b746:	d0dd      	beq.n	800b704 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800b748:	1e42      	subs	r2, r0, #1
 800b74a:	4623      	mov	r3, r4
 800b74c:	200a      	movs	r0, #10
 800b74e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b752:	b909      	cbnz	r1, 800b758 <HttpDaemon::ParseHeaderField(char*)+0x64>
 800b754:	84eb      	strh	r3, [r5, #38]	; 0x26
 800b756:	e7e5      	b.n	800b724 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800b758:	3930      	subs	r1, #48	; 0x30
 800b75a:	2909      	cmp	r1, #9
 800b75c:	d8d2      	bhi.n	800b704 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800b75e:	fb00 1303 	mla	r3, r0, r3, r1
 800b762:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800b766:	d9f2      	bls.n	800b74e <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800b768:	f240 109d 	movw	r0, #413	; 0x19d
 800b76c:	e7cc      	b.n	800b708 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800b76e:	bf00      	nop
 800b770:	0801b155 	stmdaeq	r1, {r0, r2, r4, r6, r8, ip, sp, pc}
 800b774:	0801b157 	stmdaeq	r1, {r0, r1, r2, r4, r6, r8, ip, sp, pc}
 800b778:	0801b164 	stmdaeq	r1, {r2, r5, r6, r8, ip, sp, pc}
 800b77c:	0801b167 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, ip, sp, pc}
 800b780:	0801b178 	stmdaeq	r1, {r3, r4, r5, r6, r8, ip, sp, pc}
 800b784:	0801d87b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, fp, ip, lr, pc}

0800b788 <HttpDaemon::ParseRequest()>:
 800b788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78a:	68c1      	ldr	r1, [r0, #12]
 800b78c:	2400      	movs	r4, #0
 800b78e:	4605      	mov	r5, r0
 800b790:	f880 4020 	strb.w	r4, [r0, #32]
 800b794:	6244      	str	r4, [r0, #36]	; 0x24
 800b796:	4622      	mov	r2, r4
 800b798:	4626      	mov	r6, r4
 800b79a:	8aab      	ldrh	r3, [r5, #20]
 800b79c:	42a3      	cmp	r3, r4
 800b79e:	d91e      	bls.n	800b7de <HttpDaemon::ParseRequest()+0x56>
 800b7a0:	68eb      	ldr	r3, [r5, #12]
 800b7a2:	5d18      	ldrb	r0, [r3, r4]
 800b7a4:	280a      	cmp	r0, #10
 800b7a6:	d10f      	bne.n	800b7c8 <HttpDaemon::ParseRequest()+0x40>
 800b7a8:	4423      	add	r3, r4
 800b7aa:	1c57      	adds	r7, r2, #1
 800b7ac:	f803 6c01 	strb.w	r6, [r3, #-1]
 800b7b0:	b96a      	cbnz	r2, 800b7ce <HttpDaemon::ParseRequest()+0x46>
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	f7ff ff58 	bl	800b668 <HttpDaemon::ParseMethod(char*)>
 800b7b8:	28c8      	cmp	r0, #200	; 0xc8
 800b7ba:	d111      	bne.n	800b7e0 <HttpDaemon::ParseRequest()+0x58>
 800b7bc:	68eb      	ldr	r3, [r5, #12]
 800b7be:	1c61      	adds	r1, r4, #1
 800b7c0:	b28c      	uxth	r4, r1
 800b7c2:	463a      	mov	r2, r7
 800b7c4:	fa13 f181 	uxtah	r1, r3, r1
 800b7c8:	3401      	adds	r4, #1
 800b7ca:	b2a4      	uxth	r4, r4
 800b7cc:	e7e5      	b.n	800b79a <HttpDaemon::ParseRequest()+0x12>
 800b7ce:	7808      	ldrb	r0, [r1, #0]
 800b7d0:	b968      	cbnz	r0, 800b7ee <HttpDaemon::ParseRequest()+0x66>
 800b7d2:	696b      	ldr	r3, [r5, #20]
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	1b1b      	subs	r3, r3, r4
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	84ab      	strh	r3, [r5, #36]	; 0x24
 800b7dc:	b90b      	cbnz	r3, 800b7e2 <HttpDaemon::ParseRequest()+0x5a>
 800b7de:	20c8      	movs	r0, #200	; 0xc8
 800b7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7e2:	68ea      	ldr	r2, [r5, #12]
 800b7e4:	3401      	adds	r4, #1
 800b7e6:	4414      	add	r4, r2
 800b7e8:	60ac      	str	r4, [r5, #8]
 800b7ea:	54e0      	strb	r0, [r4, r3]
 800b7ec:	e7f7      	b.n	800b7de <HttpDaemon::ParseRequest()+0x56>
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f7ff ff80 	bl	800b6f4 <HttpDaemon::ParseHeaderField(char*)>
 800b7f4:	e7e0      	b.n	800b7b8 <HttpDaemon::ParseRequest()+0x30>
	...

0800b7f8 <HttpDaemon::HandleGetTxt()>:
 800b7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7fc:	6846      	ldr	r6, [r0, #4]
 800b7fe:	1db4      	adds	r4, r6, #6
 800b800:	4607      	mov	r7, r0
 800b802:	4622      	mov	r2, r4
 800b804:	4613      	mov	r3, r2
 800b806:	3201      	adds	r2, #1
 800b808:	7819      	ldrb	r1, [r3, #0]
 800b80a:	2900      	cmp	r1, #0
 800b80c:	d1fa      	bne.n	800b804 <HttpDaemon::HandleGetTxt()+0xc>
 800b80e:	1b1b      	subs	r3, r3, r4
 800b810:	2b04      	cmp	r3, #4
 800b812:	d803      	bhi.n	800b81c <HttpDaemon::HandleGetTxt()+0x24>
 800b814:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b81c:	3b04      	subs	r3, #4
 800b81e:	4914      	ldr	r1, [pc, #80]	; (800b870 <HttpDaemon::HandleGetTxt()+0x78>)
 800b820:	18e0      	adds	r0, r4, r3
 800b822:	f7ff fece 	bl	800b5c2 <strcmp>
 800b826:	2800      	cmp	r0, #0
 800b828:	d1f4      	bne.n	800b814 <HttpDaemon::HandleGetTxt()+0x1c>
 800b82a:	4b12      	ldr	r3, [pc, #72]	; (800b874 <HttpDaemon::HandleGetTxt()+0x7c>)
 800b82c:	2001      	movs	r0, #1
 800b82e:	f893 8000 	ldrb.w	r8, [r3]
 800b832:	f7ff feed 	bl	800b610 <PropertiesConfig::EnableJSON(bool)>
 800b836:	4b10      	ldr	r3, [pc, #64]	; (800b878 <HttpDaemon::HandleGetTxt()+0x80>)
 800b838:	f240 529b 	movw	r2, #1435	; 0x59b
 800b83c:	6818      	ldr	r0, [r3, #0]
 800b83e:	4621      	mov	r1, r4
 800b840:	f7ff fa30 	bl	800aca4 <RemoteConfig::HandleGet(void*, unsigned int)>
 800b844:	f008 0801 	and.w	r8, r8, #1
 800b848:	4605      	mov	r5, r0
 800b84a:	4640      	mov	r0, r8
 800b84c:	f7ff fee0 	bl	800b610 <PropertiesConfig::EnableJSON(bool)>
 800b850:	2d00      	cmp	r5, #0
 800b852:	d0df      	beq.n	800b814 <HttpDaemon::HandleGetTxt()+0x1c>
 800b854:	847d      	strh	r5, [r7, #34]	; 0x22
 800b856:	4b09      	ldr	r3, [pc, #36]	; (800b87c <HttpDaemon::HandleGetTxt()+0x84>)
 800b858:	3506      	adds	r5, #6
 800b85a:	442e      	add	r6, r5
 800b85c:	42b4      	cmp	r4, r6
 800b85e:	d101      	bne.n	800b864 <HttpDaemon::HandleGetTxt()+0x6c>
 800b860:	20c8      	movs	r0, #200	; 0xc8
 800b862:	e7d9      	b.n	800b818 <HttpDaemon::HandleGetTxt()+0x20>
 800b864:	f814 2b01 	ldrb.w	r2, [r4], #1
 800b868:	f803 2b01 	strb.w	r2, [r3], #1
 800b86c:	e7f6      	b.n	800b85c <HttpDaemon::HandleGetTxt()+0x64>
 800b86e:	bf00      	nop
 800b870:	0801b060 	stmdaeq	r1, {r5, r6, ip, sp, pc}
 800b874:	2000fcd0 	ldrdcs	pc, [r0], -r0
 800b878:	20000124 	andcs	r0, r0, r4, lsr #2
 800b87c:	20000128 	andcs	r0, r0, r8, lsr #2

0800b880 <HttpDaemon::HandleGet()>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	6845      	ldr	r5, [r0, #4]
 800b884:	493e      	ldr	r1, [pc, #248]	; (800b980 <HttpDaemon::HandleGet()+0x100>)
 800b886:	4604      	mov	r4, r0
 800b888:	4628      	mov	r0, r5
 800b88a:	f7ff fe9a 	bl	800b5c2 <strcmp>
 800b88e:	b120      	cbz	r0, 800b89a <HttpDaemon::HandleGet()+0x1a>
 800b890:	493c      	ldr	r1, [pc, #240]	; (800b984 <HttpDaemon::HandleGet()+0x104>)
 800b892:	4628      	mov	r0, r5
 800b894:	f7ff fe95 	bl	800b5c2 <strcmp>
 800b898:	b950      	cbnz	r0, 800b8b0 <HttpDaemon::HandleGet()+0x30>
 800b89a:	4b3b      	ldr	r3, [pc, #236]	; (800b988 <HttpDaemon::HandleGet()+0x108>)
 800b89c:	493b      	ldr	r1, [pc, #236]	; (800b98c <HttpDaemon::HandleGet()+0x10c>)
 800b89e:	483c      	ldr	r0, [pc, #240]	; (800b990 <HttpDaemon::HandleGet()+0x110>)
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	f000 fa63 	bl	800bd6c <get_file_content(char const*, char*)>
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	dd2f      	ble.n	800b90a <HttpDaemon::HandleGet()+0x8a>
 800b8aa:	8460      	strh	r0, [r4, #34]	; 0x22
 800b8ac:	20c8      	movs	r0, #200	; 0xc8
 800b8ae:	bd70      	pop	{r4, r5, r6, pc}
 800b8b0:	4938      	ldr	r1, [pc, #224]	; (800b994 <HttpDaemon::HandleGet()+0x114>)
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	f7ff fe85 	bl	800b5c2 <strcmp>
 800b8b8:	b920      	cbnz	r0, 800b8c4 <HttpDaemon::HandleGet()+0x44>
 800b8ba:	4b37      	ldr	r3, [pc, #220]	; (800b998 <HttpDaemon::HandleGet()+0x118>)
 800b8bc:	4933      	ldr	r1, [pc, #204]	; (800b98c <HttpDaemon::HandleGet()+0x10c>)
 800b8be:	4837      	ldr	r0, [pc, #220]	; (800b99c <HttpDaemon::HandleGet()+0x11c>)
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	e7ee      	b.n	800b8a2 <HttpDaemon::HandleGet()+0x22>
 800b8c4:	4936      	ldr	r1, [pc, #216]	; (800b9a0 <HttpDaemon::HandleGet()+0x120>)
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	f7ff fe7b 	bl	800b5c2 <strcmp>
 800b8cc:	b190      	cbz	r0, 800b8f4 <HttpDaemon::HandleGet()+0x74>
 800b8ce:	4a35      	ldr	r2, [pc, #212]	; (800b9a4 <HttpDaemon::HandleGet()+0x124>)
 800b8d0:	1e6b      	subs	r3, r5, #1
 800b8d2:	1d69      	adds	r1, r5, #5
 800b8d4:	428b      	cmp	r3, r1
 800b8d6:	d112      	bne.n	800b8fe <HttpDaemon::HandleGet()+0x7e>
 800b8d8:	4b33      	ldr	r3, [pc, #204]	; (800b9a8 <HttpDaemon::HandleGet()+0x128>)
 800b8da:	4934      	ldr	r1, [pc, #208]	; (800b9ac <HttpDaemon::HandleGet()+0x12c>)
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	3506      	adds	r5, #6
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	f7ff fe6e 	bl	800b5c2 <strcmp>
 800b8e6:	b998      	cbnz	r0, 800b910 <HttpDaemon::HandleGet()+0x90>
 800b8e8:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b8ec:	4827      	ldr	r0, [pc, #156]	; (800b98c <HttpDaemon::HandleGet()+0x10c>)
 800b8ee:	f000 f9c9 	bl	800bc84 <remoteconfig::json_get_list(char*, unsigned short)>
 800b8f2:	e7d8      	b.n	800b8a6 <HttpDaemon::HandleGet()+0x26>
 800b8f4:	4b2e      	ldr	r3, [pc, #184]	; (800b9b0 <HttpDaemon::HandleGet()+0x130>)
 800b8f6:	4925      	ldr	r1, [pc, #148]	; (800b98c <HttpDaemon::HandleGet()+0x10c>)
 800b8f8:	482e      	ldr	r0, [pc, #184]	; (800b9b4 <HttpDaemon::HandleGet()+0x134>)
 800b8fa:	6023      	str	r3, [r4, #0]
 800b8fc:	e7d1      	b.n	800b8a2 <HttpDaemon::HandleGet()+0x22>
 800b8fe:	f812 0b01 	ldrb.w	r0, [r2], #1
 800b902:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800b906:	4286      	cmp	r6, r0
 800b908:	d0e4      	beq.n	800b8d4 <HttpDaemon::HandleGet()+0x54>
 800b90a:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800b90e:	e7ce      	b.n	800b8ae <HttpDaemon::HandleGet()+0x2e>
 800b910:	4929      	ldr	r1, [pc, #164]	; (800b9b8 <HttpDaemon::HandleGet()+0x138>)
 800b912:	4628      	mov	r0, r5
 800b914:	f7ff fe55 	bl	800b5c2 <strcmp>
 800b918:	b928      	cbnz	r0, 800b926 <HttpDaemon::HandleGet()+0xa6>
 800b91a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b91e:	481b      	ldr	r0, [pc, #108]	; (800b98c <HttpDaemon::HandleGet()+0x10c>)
 800b920:	f000 f9e0 	bl	800bce4 <remoteconfig::json_get_version(char*, unsigned short)>
 800b924:	e7bf      	b.n	800b8a6 <HttpDaemon::HandleGet()+0x26>
 800b926:	4925      	ldr	r1, [pc, #148]	; (800b9bc <HttpDaemon::HandleGet()+0x13c>)
 800b928:	4628      	mov	r0, r5
 800b92a:	f7ff fe4a 	bl	800b5c2 <strcmp>
 800b92e:	b948      	cbnz	r0, 800b944 <HttpDaemon::HandleGet()+0xc4>
 800b930:	4b23      	ldr	r3, [pc, #140]	; (800b9c0 <HttpDaemon::HandleGet()+0x140>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	7bdb      	ldrb	r3, [r3, #15]
 800b936:	b303      	cbz	r3, 800b97a <HttpDaemon::HandleGet()+0xfa>
 800b938:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b93c:	4813      	ldr	r0, [pc, #76]	; (800b98c <HttpDaemon::HandleGet()+0x10c>)
 800b93e:	f000 f9ed 	bl	800bd1c <remoteconfig::json_get_uptime(char*, unsigned short)>
 800b942:	e7b0      	b.n	800b8a6 <HttpDaemon::HandleGet()+0x26>
 800b944:	491f      	ldr	r1, [pc, #124]	; (800b9c4 <HttpDaemon::HandleGet()+0x144>)
 800b946:	4628      	mov	r0, r5
 800b948:	f7ff fe3b 	bl	800b5c2 <strcmp>
 800b94c:	b928      	cbnz	r0, 800b95a <HttpDaemon::HandleGet()+0xda>
 800b94e:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b952:	480e      	ldr	r0, [pc, #56]	; (800b98c <HttpDaemon::HandleGet()+0x10c>)
 800b954:	f000 f9f2 	bl	800bd3c <remoteconfig::json_get_display(char*, unsigned short)>
 800b958:	e7a5      	b.n	800b8a6 <HttpDaemon::HandleGet()+0x26>
 800b95a:	491b      	ldr	r1, [pc, #108]	; (800b9c8 <HttpDaemon::HandleGet()+0x148>)
 800b95c:	4628      	mov	r0, r5
 800b95e:	f7ff fe30 	bl	800b5c2 <strcmp>
 800b962:	b928      	cbnz	r0, 800b970 <HttpDaemon::HandleGet()+0xf0>
 800b964:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b968:	4808      	ldr	r0, [pc, #32]	; (800b98c <HttpDaemon::HandleGet()+0x10c>)
 800b96a:	f000 f9f7 	bl	800bd5c <remoteconfig::json_get_directory(char*, unsigned short)>
 800b96e:	e79a      	b.n	800b8a6 <HttpDaemon::HandleGet()+0x26>
 800b970:	4620      	mov	r0, r4
 800b972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b976:	f7ff bf3f 	b.w	800b7f8 <HttpDaemon::HandleGetTxt()>
 800b97a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b97e:	e796      	b.n	800b8ae <HttpDaemon::HandleGet()+0x2e>
 800b980:	0801b1ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, ip, sp, pc}
 800b984:	0801b187 	stmdaeq	r1, {r0, r1, r2, r7, r8, ip, sp, pc}
 800b988:	0801b3a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, ip, sp, pc}
 800b98c:	20000128 	andcs	r0, r0, r8, lsr #2
 800b990:	0801b188 	stmdaeq	r1, {r3, r7, r8, ip, sp, pc}
 800b994:	0801b193 	stmdaeq	r1, {r0, r1, r4, r7, r8, ip, sp, pc}
 800b998:	0801b3c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, ip, sp, pc}
 800b99c:	0801b194 	stmdaeq	r1, {r2, r4, r7, r8, ip, sp, pc}
 800b9a0:	0801b19f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, ip, sp, pc}
 800b9a4:	0801b1a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, ip, sp, pc}
 800b9a8:	0801b405 	stmdaeq	r1, {r0, r2, sl, ip, sp, pc}
 800b9ac:	0801b1b0 	stmdaeq	r1, {r4, r5, r7, r8, ip, sp, pc}
 800b9b0:	0801b3e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, r9, ip, sp, pc}
 800b9b4:	0801b1a0 	stmdaeq	r1, {r5, r7, r8, ip, sp, pc}
 800b9b8:	0801b1b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, ip, sp, pc}
 800b9bc:	0801b1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, ip, sp, pc}
 800b9c0:	20000124 	andcs	r0, r0, r4, lsr #2
 800b9c4:	0801b1c4 	stmdaeq	r1, {r2, r6, r7, r8, ip, sp, pc}
 800b9c8:	0801b1cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, ip, sp, pc}

0800b9cc <HttpDaemon::HandlePost(bool)>:
 800b9cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	2900      	cmp	r1, #0
 800b9d2:	f040 808a 	bne.w	800baea <HttpDaemon::HandlePost(bool)+0x11e>
 800b9d6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d05a      	beq.n	800ba94 <HttpDaemon::HandlePost(bool)+0xc8>
 800b9de:	6845      	ldr	r5, [r0, #4]
 800b9e0:	4944      	ldr	r1, [pc, #272]	; (800baf4 <HttpDaemon::HandlePost(bool)+0x128>)
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	f7ff fded 	bl	800b5c2 <strcmp>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	bf0c      	ite	eq
 800b9ec:	2301      	moveq	r3, #1
 800b9ee:	2300      	movne	r3, #0
 800b9f0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800b9f4:	d052      	beq.n	800ba9c <HttpDaemon::HandlePost(bool)+0xd0>
 800b9f6:	4940      	ldr	r1, [pc, #256]	; (800baf8 <HttpDaemon::HandlePost(bool)+0x12c>)
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	f7ff fde2 	bl	800b5c2 <strcmp>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	d04c      	beq.n	800ba9c <HttpDaemon::HandlePost(bool)+0xd0>
 800ba02:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800ba06:	e047      	b.n	800ba98 <HttpDaemon::HandlePost(bool)+0xcc>
 800ba08:	493c      	ldr	r1, [pc, #240]	; (800bafc <HttpDaemon::HandlePost(bool)+0x130>)
 800ba0a:	68a0      	ldr	r0, [r4, #8]
 800ba0c:	f10d 0207 	add.w	r2, sp, #7
 800ba10:	f00b ffe1 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ba14:	b9d8      	cbnz	r0, 800ba4e <HttpDaemon::HandlePost(bool)+0x82>
 800ba16:	4b3a      	ldr	r3, [pc, #232]	; (800bb00 <HttpDaemon::HandlePost(bool)+0x134>)
 800ba18:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800ba1c:	681d      	ldr	r5, [r3, #0]
 800ba1e:	69a8      	ldr	r0, [r5, #24]
 800ba20:	fab6 f186 	clz	r1, r6
 800ba24:	0949      	lsrs	r1, r1, #5
 800ba26:	b138      	cbz	r0, 800ba38 <HttpDaemon::HandlePost(bool)+0x6c>
 800ba28:	6803      	ldr	r3, [r0, #0]
 800ba2a:	7429      	strb	r1, [r5, #16]
 800ba2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2e:	4798      	blx	r3
 800ba30:	b116      	cbz	r6, 800ba38 <HttpDaemon::HandlePost(bool)+0x6c>
 800ba32:	4b34      	ldr	r3, [pc, #208]	; (800bb04 <HttpDaemon::HandlePost(bool)+0x138>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	606b      	str	r3, [r5, #4]
 800ba38:	4b33      	ldr	r3, [pc, #204]	; (800bb08 <HttpDaemon::HandlePost(bool)+0x13c>)
 800ba3a:	4a34      	ldr	r2, [pc, #208]	; (800bb0c <HttpDaemon::HandlePost(bool)+0x140>)
 800ba3c:	4834      	ldr	r0, [pc, #208]	; (800bb10 <HttpDaemon::HandlePost(bool)+0x144>)
 800ba3e:	6023      	str	r3, [r4, #0]
 800ba40:	f240 519f 	movw	r1, #1439	; 0x59f
 800ba44:	f7fe fdba 	bl	800a5bc <snprintf>
 800ba48:	8460      	strh	r0, [r4, #34]	; 0x22
 800ba4a:	20c8      	movs	r0, #200	; 0xc8
 800ba4c:	e024      	b.n	800ba98 <HttpDaemon::HandlePost(bool)+0xcc>
 800ba4e:	4931      	ldr	r1, [pc, #196]	; (800bb14 <HttpDaemon::HandlePost(bool)+0x148>)
 800ba50:	68a0      	ldr	r0, [r4, #8]
 800ba52:	f10d 0207 	add.w	r2, sp, #7
 800ba56:	f00b ffbe 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ba5a:	b9d8      	cbnz	r0, 800ba94 <HttpDaemon::HandlePost(bool)+0xc8>
 800ba5c:	4b2e      	ldr	r3, [pc, #184]	; (800bb18 <HttpDaemon::HandlePost(bool)+0x14c>)
 800ba5e:	6818      	ldr	r0, [r3, #0]
 800ba60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba64:	b11b      	cbz	r3, 800ba6e <HttpDaemon::HandlePost(bool)+0xa2>
 800ba66:	2104      	movs	r1, #4
 800ba68:	f00c fb52 	bl	8018110 <LedBlink::SetMode(ledblink::Mode)>
 800ba6c:	e7e4      	b.n	800ba38 <HttpDaemon::HandlePost(bool)+0x6c>
 800ba6e:	2102      	movs	r1, #2
 800ba70:	e7fa      	b.n	800ba68 <HttpDaemon::HandlePost(bool)+0x9c>
 800ba72:	4b2a      	ldr	r3, [pc, #168]	; (800bb1c <HttpDaemon::HandlePost(bool)+0x150>)
 800ba74:	2001      	movs	r0, #1
 800ba76:	781d      	ldrb	r5, [r3, #0]
 800ba78:	f7ff fdca 	bl	800b610 <PropertiesConfig::EnableJSON(bool)>
 800ba7c:	4b28      	ldr	r3, [pc, #160]	; (800bb20 <HttpDaemon::HandlePost(bool)+0x154>)
 800ba7e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800ba80:	6818      	ldr	r0, [r3, #0]
 800ba82:	68a1      	ldr	r1, [r4, #8]
 800ba84:	f005 0501 	and.w	r5, r5, #1
 800ba88:	f7ff fa12 	bl	800aeb0 <RemoteConfig::HandleSet(void*, unsigned int)>
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	f7ff fdbf 	bl	800b610 <PropertiesConfig::EnableJSON(bool)>
 800ba92:	e7d1      	b.n	800ba38 <HttpDaemon::HandlePost(bool)+0x6c>
 800ba94:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ba98:	b002      	add	sp, #8
 800ba9a:	bd70      	pop	{r4, r5, r6, pc}
 800ba9c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800ba9e:	6962      	ldr	r2, [r4, #20]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	dbd2      	blt.n	800ba4a <HttpDaemon::HandlePost(bool)+0x7e>
 800baa4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d0cf      	beq.n	800ba4a <HttpDaemon::HandlePost(bool)+0x7e>
 800baaa:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d0df      	beq.n	800ba72 <HttpDaemon::HandlePost(bool)+0xa6>
 800bab2:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800bab4:	68a0      	ldr	r0, [r4, #8]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f00b fd06 	bl	80174c8 <properties::convert_json_file(char*, unsigned short, bool)>
 800babc:	2800      	cmp	r0, #0
 800babe:	dde9      	ble.n	800ba94 <HttpDaemon::HandlePost(bool)+0xc8>
 800bac0:	4918      	ldr	r1, [pc, #96]	; (800bb24 <HttpDaemon::HandlePost(bool)+0x158>)
 800bac2:	68a0      	ldr	r0, [r4, #8]
 800bac4:	f10d 0207 	add.w	r2, sp, #7
 800bac8:	f00b ff85 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800bacc:	2800      	cmp	r0, #0
 800bace:	d19b      	bne.n	800ba08 <HttpDaemon::HandlePost(bool)+0x3c>
 800bad0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0af      	beq.n	800ba38 <HttpDaemon::HandlePost(bool)+0x6c>
 800bad8:	4b11      	ldr	r3, [pc, #68]	; (800bb20 <HttpDaemon::HandlePost(bool)+0x154>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	7b9b      	ldrb	r3, [r3, #14]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d0d8      	beq.n	800ba94 <HttpDaemon::HandlePost(bool)+0xc8>
 800bae2:	4b11      	ldr	r3, [pc, #68]	; (800bb28 <HttpDaemon::HandlePost(bool)+0x15c>)
 800bae4:	6818      	ldr	r0, [r3, #0]
 800bae6:	f00c fbd3 	bl	8018290 <Hardware::Reboot()>
 800baea:	68c3      	ldr	r3, [r0, #12]
 800baec:	6083      	str	r3, [r0, #8]
 800baee:	6943      	ldr	r3, [r0, #20]
 800baf0:	8483      	strh	r3, [r0, #36]	; 0x24
 800baf2:	e7da      	b.n	800baaa <HttpDaemon::HandlePost(bool)+0xde>
 800baf4:	0801b1d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, ip, sp, pc}
 800baf8:	0801b172 	stmdaeq	r1, {r1, r4, r5, r6, r8, ip, sp, pc}
 800bafc:	0801b1c4 	stmdaeq	r1, {r2, r6, r7, r8, ip, sp, pc}
 800bb00:	2000fcd4 	ldrdcs	pc, [r0], -r4
 800bb04:	2000fddc 	ldrdcs	pc, [r0], -ip
 800bb08:	0801b3a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, ip, sp, pc}
 800bb0c:	0801b1f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, ip, sp, pc}
 800bb10:	20000128 	andcs	r0, r0, r8, lsr #2
 800bb14:	0801b1ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r8, ip, sp, pc}
 800bb18:	2000fdc0 	andcs	pc, r0, r0, asr #27
 800bb1c:	2000fcd0 	ldrdcs	pc, [r0], -r0
 800bb20:	20000124 	andcs	r0, r0, r4, lsr #2
 800bb24:	0801b1e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, ip, sp, pc}
 800bb28:	2000fdc4 	andcs	pc, r0, r4, asr #27

0800bb2c <HttpDaemon::Run()>:
 800bb2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bb2e:	4e46      	ldr	r6, [pc, #280]	; (800bc48 <HttpDaemon::Run()+0x11c>)
 800bb30:	6901      	ldr	r1, [r0, #16]
 800bb32:	4604      	mov	r4, r0
 800bb34:	f100 020c 	add.w	r2, r0, #12
 800bb38:	6830      	ldr	r0, [r6, #0]
 800bb3a:	f00a fab8 	bl	80160ae <Network::TcpRead(int, unsigned char const**)>
 800bb3e:	6160      	str	r0, [r4, #20]
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d05b      	beq.n	800bbfc <HttpDaemon::Run()+0xd0>
 800bb44:	69a3      	ldr	r3, [r4, #24]
 800bb46:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800bb4a:	d159      	bne.n	800bc00 <HttpDaemon::Run()+0xd4>
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f7ff fe1b 	bl	800b788 <HttpDaemon::ParseRequest()>
 800bb52:	28c8      	cmp	r0, #200	; 0xc8
 800bb54:	61a0      	str	r0, [r4, #24]
 800bb56:	d106      	bne.n	800bb66 <HttpDaemon::Run()+0x3a>
 800bb58:	69e3      	ldr	r3, [r4, #28]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d142      	bne.n	800bbe4 <HttpDaemon::Run()+0xb8>
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f7ff fe8e 	bl	800b880 <HttpDaemon::HandleGet()>
 800bb64:	61a0      	str	r0, [r4, #24]
 800bb66:	69a3      	ldr	r3, [r4, #24]
 800bb68:	2bc8      	cmp	r3, #200	; 0xc8
 800bb6a:	d06b      	beq.n	800bc44 <HttpDaemon::Run()+0x118>
 800bb6c:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800bb70:	d05e      	beq.n	800bc30 <HttpDaemon::Run()+0x104>
 800bb72:	dc4e      	bgt.n	800bc12 <HttpDaemon::Run()+0xe6>
 800bb74:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800bb78:	d05c      	beq.n	800bc34 <HttpDaemon::Run()+0x108>
 800bb7a:	f240 129d 	movw	r2, #413	; 0x19d
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d05a      	beq.n	800bc38 <HttpDaemon::Run()+0x10c>
 800bb82:	4d32      	ldr	r5, [pc, #200]	; (800bc4c <HttpDaemon::Run()+0x120>)
 800bb84:	4a32      	ldr	r2, [pc, #200]	; (800bc50 <HttpDaemon::Run()+0x124>)
 800bb86:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bb8a:	bf18      	it	ne
 800bb8c:	4615      	movne	r5, r2
 800bb8e:	4a31      	ldr	r2, [pc, #196]	; (800bc54 <HttpDaemon::Run()+0x128>)
 800bb90:	6022      	str	r2, [r4, #0]
 800bb92:	e9cd 5500 	strd	r5, r5, [sp]
 800bb96:	4a30      	ldr	r2, [pc, #192]	; (800bc58 <HttpDaemon::Run()+0x12c>)
 800bb98:	4830      	ldr	r0, [pc, #192]	; (800bc5c <HttpDaemon::Run()+0x130>)
 800bb9a:	f240 519f 	movw	r1, #1439	; 0x59f
 800bb9e:	f7fe fd0d 	bl	800a5bc <snprintf>
 800bba2:	8460      	strh	r0, [r4, #34]	; 0x22
 800bba4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800bba6:	9303      	str	r3, [sp, #12]
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	9302      	str	r3, [sp, #8]
 800bbac:	4b2c      	ldr	r3, [pc, #176]	; (800bc60 <HttpDaemon::Run()+0x134>)
 800bbae:	4a2d      	ldr	r2, [pc, #180]	; (800bc64 <HttpDaemon::Run()+0x138>)
 800bbb0:	68e0      	ldr	r0, [r4, #12]
 800bbb2:	e9cd 5300 	strd	r5, r3, [sp]
 800bbb6:	f240 519f 	movw	r1, #1439	; 0x59f
 800bbba:	69a3      	ldr	r3, [r4, #24]
 800bbbc:	f7fe fcfe 	bl	800a5bc <snprintf>
 800bbc0:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800bbc4:	b283      	uxth	r3, r0
 800bbc6:	6830      	ldr	r0, [r6, #0]
 800bbc8:	f00a fa75 	bl	80160b6 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800bbcc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800bbce:	4a23      	ldr	r2, [pc, #140]	; (800bc5c <HttpDaemon::Run()+0x130>)
 800bbd0:	6921      	ldr	r1, [r4, #16]
 800bbd2:	6830      	ldr	r0, [r6, #0]
 800bbd4:	f00a fa6f 	bl	80160b6 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800bbd8:	f44f 7202 	mov.w	r2, #520	; 0x208
 800bbdc:	2302      	movs	r3, #2
 800bbde:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800bbe2:	e00b      	b.n	800bbfc <HttpDaemon::Run()+0xd0>
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d1be      	bne.n	800bb66 <HttpDaemon::Run()+0x3a>
 800bbe8:	2100      	movs	r1, #0
 800bbea:	4620      	mov	r0, r4
 800bbec:	f7ff feee 	bl	800b9cc <HttpDaemon::HandlePost(bool)>
 800bbf0:	28c8      	cmp	r0, #200	; 0xc8
 800bbf2:	61a0      	str	r0, [r4, #24]
 800bbf4:	d1b7      	bne.n	800bb66 <HttpDaemon::Run()+0x3a>
 800bbf6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1b4      	bne.n	800bb66 <HttpDaemon::Run()+0x3a>
 800bbfc:	b004      	add	sp, #16
 800bbfe:	bd70      	pop	{r4, r5, r6, pc}
 800bc00:	2bc8      	cmp	r3, #200	; 0xc8
 800bc02:	d1b0      	bne.n	800bb66 <HttpDaemon::Run()+0x3a>
 800bc04:	69e1      	ldr	r1, [r4, #28]
 800bc06:	2901      	cmp	r1, #1
 800bc08:	d1ad      	bne.n	800bb66 <HttpDaemon::Run()+0x3a>
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	f7ff fede 	bl	800b9cc <HttpDaemon::HandlePost(bool)>
 800bc10:	e7a8      	b.n	800bb64 <HttpDaemon::Run()+0x38>
 800bc12:	f240 12f5 	movw	r2, #501	; 0x1f5
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d010      	beq.n	800bc3c <HttpDaemon::Run()+0x110>
 800bc1a:	f240 12f9 	movw	r2, #505	; 0x1f9
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d00e      	beq.n	800bc40 <HttpDaemon::Run()+0x114>
 800bc22:	4d11      	ldr	r5, [pc, #68]	; (800bc68 <HttpDaemon::Run()+0x13c>)
 800bc24:	4a0a      	ldr	r2, [pc, #40]	; (800bc50 <HttpDaemon::Run()+0x124>)
 800bc26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800bc2a:	bf18      	it	ne
 800bc2c:	4615      	movne	r5, r2
 800bc2e:	e7ae      	b.n	800bb8e <HttpDaemon::Run()+0x62>
 800bc30:	4d0e      	ldr	r5, [pc, #56]	; (800bc6c <HttpDaemon::Run()+0x140>)
 800bc32:	e7ac      	b.n	800bb8e <HttpDaemon::Run()+0x62>
 800bc34:	4d0e      	ldr	r5, [pc, #56]	; (800bc70 <HttpDaemon::Run()+0x144>)
 800bc36:	e7aa      	b.n	800bb8e <HttpDaemon::Run()+0x62>
 800bc38:	4d0e      	ldr	r5, [pc, #56]	; (800bc74 <HttpDaemon::Run()+0x148>)
 800bc3a:	e7a8      	b.n	800bb8e <HttpDaemon::Run()+0x62>
 800bc3c:	4d0e      	ldr	r5, [pc, #56]	; (800bc78 <HttpDaemon::Run()+0x14c>)
 800bc3e:	e7a6      	b.n	800bb8e <HttpDaemon::Run()+0x62>
 800bc40:	4d0e      	ldr	r5, [pc, #56]	; (800bc7c <HttpDaemon::Run()+0x150>)
 800bc42:	e7a4      	b.n	800bb8e <HttpDaemon::Run()+0x62>
 800bc44:	4d0e      	ldr	r5, [pc, #56]	; (800bc80 <HttpDaemon::Run()+0x154>)
 800bc46:	e7ad      	b.n	800bba4 <HttpDaemon::Run()+0x78>
 800bc48:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 800bc4c:	0801b24f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r9, ip, sp, pc}
 800bc50:	0801b2d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r9, ip, sp, pc}
 800bc54:	0801b3a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, ip, sp, pc}
 800bc58:	0801b2e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, ip, sp, pc}
 800bc5c:	20000128 	andcs	r0, r0, r8, lsr #2
 800bc60:	0801b39a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, ip, sp, pc}
 800bc64:	0801b342 	stmdaeq	r1, {r1, r6, r8, r9, ip, sp, pc}
 800bc68:	0801b293 	stmdaeq	r1, {r0, r1, r4, r7, r9, ip, sp, pc}
 800bc6c:	0801b27e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r9, ip, sp, pc}
 800bc70:	0801b25b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, ip, sp, pc}
 800bc74:	0801b265 	stmdaeq	r1, {r0, r2, r5, r6, r9, ip, sp, pc}
 800bc78:	0801b2a9 	stmdaeq	r1, {r0, r3, r5, r7, r9, ip, sp, pc}
 800bc7c:	0801b2c0 	stmdaeq	r1, {r6, r7, r9, ip, sp, pc}
 800bc80:	0801b2e4 	stmdaeq	r1, {r2, r5, r6, r7, r9, ip, sp, pc}

0800bc84 <remoteconfig::json_get_list(char*, unsigned short)>:
 800bc84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc86:	4b13      	ldr	r3, [pc, #76]	; (800bcd4 <remoteconfig::json_get_list(char*, unsigned short)+0x50>)
 800bc88:	4f13      	ldr	r7, [pc, #76]	; (800bcd8 <remoteconfig::json_get_list(char*, unsigned short)+0x54>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	b08b      	sub	sp, #44	; 0x2c
 800bc8e:	4605      	mov	r5, r0
 800bc90:	6838      	ldr	r0, [r7, #0]
 800bc92:	695c      	ldr	r4, [r3, #20]
 800bc94:	9109      	str	r1, [sp, #36]	; 0x24
 800bc96:	f7fe ffb5 	bl	800ac04 <RemoteConfig::GetStringNode() const>
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	6838      	ldr	r0, [r7, #0]
 800bc9e:	f7fe ffbd 	bl	800ac1c <RemoteConfig::GetStringOutput() const>
 800bca2:	4b0e      	ldr	r3, [pc, #56]	; (800bcdc <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 800bca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bca6:	7a1a      	ldrb	r2, [r3, #8]
 800bca8:	9604      	str	r6, [sp, #16]
 800bcaa:	3309      	adds	r3, #9
 800bcac:	9303      	str	r3, [sp, #12]
 800bcae:	0e23      	lsrs	r3, r4, #24
 800bcb0:	9302      	str	r3, [sp, #8]
 800bcb2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800bcb6:	9301      	str	r3, [sp, #4]
 800bcb8:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800bcbc:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	4a07      	ldr	r2, [pc, #28]	; (800bce0 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>)
 800bcc4:	b2e3      	uxtb	r3, r4
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	f7fe fc78 	bl	800a5bc <snprintf>
 800bccc:	b280      	uxth	r0, r0
 800bcce:	b00b      	add	sp, #44	; 0x2c
 800bcd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 800bcd8:	20000124 	andcs	r0, r0, r4, lsr #2
 800bcdc:	20000100 	andcs	r0, r0, r0, lsl #2
 800bce0:	0801b47f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, sl, ip, sp, pc}

0800bce4 <remoteconfig::json_get_version(char*, unsigned short)>:
 800bce4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bce6:	4b0a      	ldr	r3, [pc, #40]	; (800bd10 <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 800bce8:	9305      	str	r3, [sp, #20]
 800bcea:	2208      	movs	r2, #8
 800bcec:	9204      	str	r2, [sp, #16]
 800bcee:	f1a3 020b 	sub.w	r2, r3, #11
 800bcf2:	9203      	str	r2, [sp, #12]
 800bcf4:	220b      	movs	r2, #11
 800bcf6:	9202      	str	r2, [sp, #8]
 800bcf8:	3b0e      	subs	r3, #14
 800bcfa:	4a06      	ldr	r2, [pc, #24]	; (800bd14 <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 800bcfc:	9201      	str	r2, [sp, #4]
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	4a05      	ldr	r2, [pc, #20]	; (800bd18 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800bd02:	2303      	movs	r3, #3
 800bd04:	f7fe fc5a 	bl	800a5bc <snprintf>
 800bd08:	b280      	uxth	r0, r0
 800bd0a:	b007      	add	sp, #28
 800bd0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd10:	2000fd72 	andcs	pc, r0, r2, ror sp	; <UNPREDICTABLE>
 800bd14:	0801b39a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, ip, sp, pc}
 800bd18:	0801b4de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, sl, ip, sp, pc}

0800bd1c <remoteconfig::json_get_uptime(char*, unsigned short)>:
 800bd1c:	b508      	push	{r3, lr}
 800bd1e:	4b05      	ldr	r3, [pc, #20]	; (800bd34 <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bd26:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd2a:	4a03      	ldr	r2, [pc, #12]	; (800bd38 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 800bd2c:	f7fe fc46 	bl	800a5bc <snprintf>
 800bd30:	b280      	uxth	r0, r0
 800bd32:	bd08      	pop	{r3, pc}
 800bd34:	2000fddc 	ldrdcs	pc, [r0], -ip
 800bd38:	0801b524 	stmdaeq	r1, {r2, r5, r8, sl, ip, sp, pc}

0800bd3c <remoteconfig::json_get_display(char*, unsigned short)>:
 800bd3c:	b508      	push	{r3, lr}
 800bd3e:	4b05      	ldr	r3, [pc, #20]	; (800bd54 <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 800bd40:	4a05      	ldr	r2, [pc, #20]	; (800bd58 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	7c1b      	ldrb	r3, [r3, #16]
 800bd46:	f083 0301 	eor.w	r3, r3, #1
 800bd4a:	f7fe fc37 	bl	800a5bc <snprintf>
 800bd4e:	b280      	uxth	r0, r0
 800bd50:	bd08      	pop	{r3, pc}
 800bd52:	bf00      	nop
 800bd54:	2000fcd4 	ldrdcs	pc, [r0], -r4
 800bd58:	0801b533 	stmdaeq	r1, {r0, r1, r4, r5, r8, sl, ip, sp, pc}

0800bd5c <remoteconfig::json_get_directory(char*, unsigned short)>:
 800bd5c:	b508      	push	{r3, lr}
 800bd5e:	4a02      	ldr	r2, [pc, #8]	; (800bd68 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 800bd60:	f7fe fc2c 	bl	800a5bc <snprintf>
 800bd64:	b280      	uxth	r0, r0
 800bd66:	bd08      	pop	{r3, pc}
 800bd68:	0801b542 	stmdaeq	r1, {r1, r6, r8, sl, ip, sp, pc}

0800bd6c <get_file_content(char const*, char*)>:
 800bd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd6e:	4a11      	ldr	r2, [pc, #68]	; (800bdb4 <get_file_content(char const*, char*)+0x48>)
 800bd70:	2300      	movs	r3, #0
 800bd72:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800bd76:	1e46      	subs	r6, r0, #1
 800bd78:	3c01      	subs	r4, #1
 800bd7a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800bd7e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800bd82:	42bd      	cmp	r5, r7
 800bd84:	d005      	beq.n	800bd92 <get_file_content(char const*, char*)+0x26>
 800bd86:	3301      	adds	r3, #1
 800bd88:	2b03      	cmp	r3, #3
 800bd8a:	d1f2      	bne.n	800bd72 <get_file_content(char const*, char*)+0x6>
 800bd8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd92:	2d00      	cmp	r5, #0
 800bd94:	d1f1      	bne.n	800bd7a <get_file_content(char const*, char*)+0xe>
 800bd96:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bd9a:	4608      	mov	r0, r1
 800bd9c:	6853      	ldr	r3, [r2, #4]
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800bda4:	f800 2b01 	strb.w	r2, [r0], #1
 800bda8:	2a00      	cmp	r2, #0
 800bdaa:	d1f9      	bne.n	800bda0 <get_file_content(char const*, char*)+0x34>
 800bdac:	1a41      	subs	r1, r0, r1
 800bdae:	1e48      	subs	r0, r1, #1
 800bdb0:	e7ee      	b.n	800bd90 <get_file_content(char const*, char*)+0x24>
 800bdb2:	bf00      	nop
 800bdb4:	0801b8a0 	stmdaeq	r1, {r5, r7, fp, ip, sp, pc}

0800bdb8 <ArtNet4Node::IsStatusChanged()>:
 800bdb8:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800bdbc:	f893 0c7c 	ldrb.w	r0, [r3, #3196]	; 0xc7c
 800bdc0:	b110      	cbz	r0, 800bdc8 <ArtNet4Node::IsStatusChanged()+0x10>
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f883 2c7c 	strb.w	r2, [r3, #3196]	; 0xc7c
 800bdc8:	4770      	bx	lr

0800bdca <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 800bdca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdcc:	1d07      	adds	r7, r0, #4
 800bdce:	4616      	mov	r6, r2
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	4638      	mov	r0, r7
 800bdd6:	f10d 0206 	add.w	r2, sp, #6
 800bdda:	460d      	mov	r5, r1
 800bddc:	f000 fc56 	bl	800c68c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800bde0:	b1be      	cbz	r6, 800be12 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800bde2:	b1b0      	cbz	r0, 800be12 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800bde4:	2328      	movs	r3, #40	; 0x28
 800bde6:	fb03 4305 	mla	r3, r3, r5, r4
 800bdea:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d10f      	bne.n	800be12 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800bdf2:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 800bdf6:	b123      	cbz	r3, 800be02 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x38>
 800bdf8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	f8ad 3006 	strh.w	r3, [sp, #6]
 800be02:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800be06:	b933      	cbnz	r3, 800be16 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4c>
 800be08:	2202      	movs	r2, #2
 800be0a:	4629      	mov	r1, r5
 800be0c:	4638      	mov	r0, r7
 800be0e:	f000 fc65 	bl	800c6dc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800be12:	b003      	add	sp, #12
 800be14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be16:	1e71      	subs	r1, r6, #1
 800be18:	424a      	negs	r2, r1
 800be1a:	f504 50bc 	add.w	r0, r4, #6016	; 0x1780
 800be1e:	414a      	adcs	r2, r1
 800be20:	3004      	adds	r0, #4
 800be22:	4629      	mov	r1, r5
 800be24:	f002 fc9a 	bl	800e75c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800be28:	e7f3      	b.n	800be12 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
	...

0800be2c <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)>:
 800be2c:	1e8a      	subs	r2, r1, #2
 800be2e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800be32:	4253      	negs	r3, r2
 800be34:	4153      	adcs	r3, r2
 800be36:	f880 378c 	strb.w	r3, [r0, #1932]	; 0x78c
 800be3a:	4b02      	ldr	r3, [pc, #8]	; (800be44 <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)+0x18>)
 800be3c:	6818      	ldr	r0, [r3, #0]
 800be3e:	f00c b967 	b.w	8018110 <LedBlink::SetMode(ledblink::Mode)>
 800be42:	bf00      	nop
 800be44:	2000fdc0 	andcs	pc, r0, r0, asr #27

0800be48 <ArtNet4Node::~ArtNet4Node()>:
 800be48:	b510      	push	{r4, lr}
 800be4a:	4b06      	ldr	r3, [pc, #24]	; (800be64 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 800be4c:	6003      	str	r3, [r0, #0]
 800be4e:	4604      	mov	r4, r0
 800be50:	f500 50bc 	add.w	r0, r0, #6016	; 0x1780
 800be54:	3004      	adds	r0, #4
 800be56:	f002 fbf5 	bl	800e644 <E131Bridge::~E131Bridge()>
 800be5a:	1d20      	adds	r0, r4, #4
 800be5c:	f000 f949 	bl	800c0f2 <ArtNetNode::~ArtNetNode()>
 800be60:	4620      	mov	r0, r4
 800be62:	bd10      	pop	{r4, pc}
 800be64:	0801be08 	stmdaeq	r1, {r3, r9, sl, fp, ip, sp, pc}

0800be68 <ArtNet4Node::~ArtNet4Node()>:
 800be68:	b510      	push	{r4, lr}
 800be6a:	4604      	mov	r4, r0
 800be6c:	f7ff ffec 	bl	800be48 <ArtNet4Node::~ArtNet4Node()>
 800be70:	4620      	mov	r0, r4
 800be72:	f00c fa4b 	bl	801830c <operator delete(void*)>
 800be76:	4620      	mov	r0, r4
 800be78:	bd10      	pop	{r4, pc}

0800be7a <ArtNet4Node::GetStatus(unsigned int)>:
 800be7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be7c:	4604      	mov	r4, r0
 800be7e:	f500 50bc 	add.w	r0, r0, #6016	; 0x1780
 800be82:	2301      	movs	r3, #1
 800be84:	f10d 0206 	add.w	r2, sp, #6
 800be88:	3004      	adds	r0, #4
 800be8a:	460d      	mov	r5, r1
 800be8c:	f002 fce0 	bl	800e850 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800be90:	b170      	cbz	r0, 800beb0 <ArtNet4Node::GetStatus(unsigned int)+0x36>
 800be92:	2344      	movs	r3, #68	; 0x44
 800be94:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800be98:	fb03 4105 	mla	r1, r3, r5, r4
 800be9c:	f891 0cda 	ldrb.w	r0, [r1, #3290]	; 0xcda
 800bea0:	f891 3cd9 	ldrb.w	r3, [r1, #3289]	; 0xcd9
 800bea4:	01c0      	lsls	r0, r0, #7
 800bea6:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 800beaa:	f040 0001 	orr.w	r0, r0, #1
 800beae:	b2c0      	uxtb	r0, r0
 800beb0:	b003      	add	sp, #12
 800beb2:	bd30      	pop	{r4, r5, pc}

0800beb4 <ArtNet4Node::HandleAddress(unsigned char)>:
 800beb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beb6:	f500 57bc 	add.w	r7, r0, #6016	; 0x1780
 800beba:	4604      	mov	r4, r0
 800bebc:	460d      	mov	r5, r1
 800bebe:	2600      	movs	r6, #0
 800bec0:	3704      	adds	r7, #4
 800bec2:	2301      	movs	r3, #1
 800bec4:	f10d 0206 	add.w	r2, sp, #6
 800bec8:	4631      	mov	r1, r6
 800beca:	1d20      	adds	r0, r4, #4
 800becc:	f000 fbde 	bl	800c68c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800bed0:	b150      	cbz	r0, 800bee8 <ArtNet4Node::HandleAddress(unsigned char)+0x34>
 800bed2:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 800bed6:	b123      	cbz	r3, 800bee2 <ArtNet4Node::HandleAddress(unsigned char)+0x2e>
 800bed8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bedc:	3301      	adds	r3, #1
 800bede:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bee2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bee6:	b99b      	cbnz	r3, 800bf10 <ArtNet4Node::HandleAddress(unsigned char)+0x5c>
 800bee8:	3601      	adds	r6, #1
 800beea:	2e42      	cmp	r6, #66	; 0x42
 800beec:	d1e9      	bne.n	800bec2 <ArtNet4Node::HandleAddress(unsigned char)+0xe>
 800beee:	2d13      	cmp	r5, #19
 800bef0:	f005 0603 	and.w	r6, r5, #3
 800bef4:	d819      	bhi.n	800bf2a <ArtNet4Node::HandleAddress(unsigned char)+0x76>
 800bef6:	2d0f      	cmp	r5, #15
 800bef8:	d82c      	bhi.n	800bf54 <ArtNet4Node::HandleAddress(unsigned char)+0xa0>
 800befa:	2d02      	cmp	r5, #2
 800befc:	d026      	beq.n	800bf4c <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 800befe:	3d03      	subs	r5, #3
 800bf00:	2d01      	cmp	r5, #1
 800bf02:	d821      	bhi.n	800bf48 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800bf04:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800bf08:	2300      	movs	r3, #0
 800bf0a:	f884 378c 	strb.w	r3, [r4, #1932]	; 0x78c
 800bf0e:	e01b      	b.n	800bf48 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800bf10:	2228      	movs	r2, #40	; 0x28
 800bf12:	f604 1134 	addw	r1, r4, #2356	; 0x934
 800bf16:	4372      	muls	r2, r6
 800bf18:	4638      	mov	r0, r7
 800bf1a:	588a      	ldr	r2, [r1, r2]
 800bf1c:	2a01      	cmp	r2, #1
 800bf1e:	bf18      	it	ne
 800bf20:	2202      	movne	r2, #2
 800bf22:	4631      	mov	r1, r6
 800bf24:	f002 fc1a 	bl	800e75c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800bf28:	e7de      	b.n	800bee8 <ArtNet4Node::HandleAddress(unsigned char)+0x34>
 800bf2a:	2d53      	cmp	r5, #83	; 0x53
 800bf2c:	d808      	bhi.n	800bf40 <ArtNet4Node::HandleAddress(unsigned char)+0x8c>
 800bf2e:	2d4f      	cmp	r5, #79	; 0x4f
 800bf30:	d90a      	bls.n	800bf48 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800bf32:	2344      	movs	r3, #68	; 0x44
 800bf34:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800bf38:	fb03 4406 	mla	r4, r3, r6, r4
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	e00f      	b.n	800bf60 <ArtNet4Node::HandleAddress(unsigned char)+0xac>
 800bf40:	3570      	adds	r5, #112	; 0x70
 800bf42:	b2ed      	uxtb	r5, r5
 800bf44:	2d03      	cmp	r5, #3
 800bf46:	d90e      	bls.n	800bf66 <ArtNet4Node::HandleAddress(unsigned char)+0xb2>
 800bf48:	b003      	add	sp, #12
 800bf4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf4c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800bf50:	2301      	movs	r3, #1
 800bf52:	e7da      	b.n	800bf0a <ArtNet4Node::HandleAddress(unsigned char)+0x56>
 800bf54:	2344      	movs	r3, #68	; 0x44
 800bf56:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800bf5a:	fb03 4406 	mla	r4, r3, r6, r4
 800bf5e:	2301      	movs	r3, #1
 800bf60:	f8c4 3cd4 	str.w	r3, [r4, #3284]	; 0xcd4
 800bf64:	e7f0      	b.n	800bf48 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800bf66:	2328      	movs	r3, #40	; 0x28
 800bf68:	fb03 4306 	mla	r3, r3, r6, r4
 800bf6c:	f8d3 2934 	ldr.w	r2, [r3, #2356]	; 0x934
 800bf70:	2a01      	cmp	r2, #1
 800bf72:	d1e9      	bne.n	800bf48 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800bf74:	4b1d      	ldr	r3, [pc, #116]	; (800bfec <ArtNet4Node::HandleAddress(unsigned char)+0x138>)
 800bf76:	6819      	ldr	r1, [r3, #0]
 800bf78:	07c9      	lsls	r1, r1, #31
 800bf7a:	bf58      	it	pl
 800bf7c:	601a      	strpl	r2, [r3, #0]
 800bf7e:	f240 6204 	movw	r2, #1540	; 0x604
 800bf82:	4b1b      	ldr	r3, [pc, #108]	; (800bff0 <ArtNet4Node::HandleAddress(unsigned char)+0x13c>)
 800bf84:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800bf88:	4372      	muls	r2, r6
 800bf8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf8e:	441a      	add	r2, r3
 800bf90:	f8d4 0788 	ldr.w	r0, [r4, #1928]	; 0x788
 800bf94:	f502 7500 	add.w	r5, r2, #512	; 0x200
 800bf98:	4611      	mov	r1, r2
 800bf9a:	2700      	movs	r7, #0
 800bf9c:	428d      	cmp	r5, r1
 800bf9e:	d121      	bne.n	800bfe4 <ArtNet4Node::HandleAddress(unsigned char)+0x130>
 800bfa0:	f240 6104 	movw	r1, #1540	; 0x604
 800bfa4:	fb01 3106 	mla	r1, r1, r6, r3
 800bfa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfac:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800bfb0:	6801      	ldr	r1, [r0, #0]
 800bfb2:	690d      	ldr	r5, [r1, #16]
 800bfb4:	4631      	mov	r1, r6
 800bfb6:	47a8      	blx	r5
 800bfb8:	2544      	movs	r5, #68	; 0x44
 800bfba:	fb05 4506 	mla	r5, r5, r6, r4
 800bfbe:	f895 3c9a 	ldrb.w	r3, [r5, #3226]	; 0xc9a
 800bfc2:	b15b      	cbz	r3, 800bfdc <ArtNet4Node::HandleAddress(unsigned char)+0x128>
 800bfc4:	f895 3cda 	ldrb.w	r3, [r5, #3290]	; 0xcda
 800bfc8:	b943      	cbnz	r3, 800bfdc <ArtNet4Node::HandleAddress(unsigned char)+0x128>
 800bfca:	f8d4 0788 	ldr.w	r0, [r4, #1928]	; 0x788
 800bfce:	6803      	ldr	r3, [r0, #0]
 800bfd0:	4631      	mov	r1, r6
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	4798      	blx	r3
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	f885 3cda 	strb.w	r3, [r5, #3290]	; 0xcda
 800bfdc:	2300      	movs	r3, #0
 800bfde:	f884 3c78 	strb.w	r3, [r4, #3192]	; 0xc78
 800bfe2:	e7b1      	b.n	800bf48 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800bfe4:	f801 7b01 	strb.w	r7, [r1], #1
 800bfe8:	e7d8      	b.n	800bf9c <ArtNet4Node::HandleAddress(unsigned char)+0xe8>
 800bfea:	bf00      	nop
 800bfec:	200006c8 	andcs	r0, r0, r8, asr #13
 800bff0:	20030000 	andcs	r0, r3, r0

0800bff4 <ArtNet4Node::ArtNet4Node()>:
 800bff4:	b510      	push	{r4, lr}
 800bff6:	4604      	mov	r4, r0
 800bff8:	3004      	adds	r0, #4
 800bffa:	f000 f959 	bl	800c2b0 <ArtNetNode::ArtNetNode()>
 800bffe:	4b05      	ldr	r3, [pc, #20]	; (800c014 <ArtNet4Node::ArtNet4Node()+0x20>)
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	f504 50bc 	add.w	r0, r4, #6016	; 0x1780
 800c006:	3004      	adds	r0, #4
 800c008:	f002 fab2 	bl	800e570 <E131Bridge::E131Bridge()>
 800c00c:	61e4      	str	r4, [r4, #28]
 800c00e:	4620      	mov	r0, r4
 800c010:	bd10      	pop	{r4, pc}
 800c012:	bf00      	nop
 800c014:	0801be08 	stmdaeq	r1, {r3, r9, sl, fp, ip, sp, pc}

0800c018 <ArtNet4Node::Start()>:
 800c018:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c01c:	f500 57e6 	add.w	r7, r0, #7360	; 0x1cc0
 800c020:	4604      	mov	r4, r0
 800c022:	4606      	mov	r6, r0
 800c024:	2500      	movs	r5, #0
 800c026:	3714      	adds	r7, #20
 800c028:	f104 0804 	add.w	r8, r4, #4
 800c02c:	2301      	movs	r3, #1
 800c02e:	f10d 0206 	add.w	r2, sp, #6
 800c032:	4629      	mov	r1, r5
 800c034:	4640      	mov	r0, r8
 800c036:	f000 fb29 	bl	800c68c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800c03a:	b140      	cbz	r0, 800c04e <ArtNet4Node::Start()+0x36>
 800c03c:	f8d6 3934 	ldr.w	r3, [r6, #2356]	; 0x934
 800c040:	2b01      	cmp	r3, #1
 800c042:	bf01      	itttt	eq
 800c044:	2344      	moveq	r3, #68	; 0x44
 800c046:	436b      	muleq	r3, r5
 800c048:	f8d6 292c 	ldreq.w	r2, [r6, #2348]	; 0x92c
 800c04c:	50fa      	streq	r2, [r7, r3]
 800c04e:	3501      	adds	r5, #1
 800c050:	2d42      	cmp	r5, #66	; 0x42
 800c052:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c056:	d1e7      	bne.n	800c028 <ArtNet4Node::Start()+0x10>
 800c058:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800c05c:	f894 290c 	ldrb.w	r2, [r4, #2316]	; 0x90c
 800c060:	f883 2c7d 	strb.w	r2, [r3, #3197]	; 0xc7d
 800c064:	68a2      	ldr	r2, [r4, #8]
 800c066:	f8c3 2788 	str.w	r2, [r3, #1928]	; 0x788
 800c06a:	4640      	mov	r0, r8
 800c06c:	f000 f842 	bl	800c0f4 <ArtNetNode::Start()>
 800c070:	f504 50bc 	add.w	r0, r4, #6016	; 0x1780
 800c074:	3004      	adds	r0, #4
 800c076:	b002      	add	sp, #8
 800c078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c07c:	f002 bae4 	b.w	800e648 <E131Bridge::Start()>

0800c080 <ArtNet4Node::Run()>:
 800c080:	b510      	push	{r4, lr}
 800c082:	4604      	mov	r4, r0
 800c084:	3004      	adds	r0, #4
 800c086:	f000 fa25 	bl	800c4d4 <ArtNetNode::Run()>
 800c08a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800c08e:	f893 3c8f 	ldrb.w	r3, [r3, #3215]	; 0xc8f
 800c092:	b133      	cbz	r3, 800c0a2 <ArtNet4Node::Run()+0x22>
 800c094:	f504 50bc 	add.w	r0, r4, #6016	; 0x1780
 800c098:	3004      	adds	r0, #4
 800c09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c09e:	f002 bec3 	b.w	800ee28 <E131Bridge::Run()>
 800c0a2:	bd10      	pop	{r4, pc}

0800c0a4 <ArtNet4Node::Print()>:
 800c0a4:	b510      	push	{r4, lr}
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	3004      	adds	r0, #4
 800c0aa:	f001 fc9b 	bl	800d9e4 <ArtNetNode::Print()>
 800c0ae:	f894 390e 	ldrb.w	r3, [r4, #2318]	; 0x90e
 800c0b2:	b163      	cbz	r3, 800c0ce <ArtNet4Node::Print()+0x2a>
 800c0b4:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 800c0b8:	b113      	cbz	r3, 800c0c0 <ArtNet4Node::Print()+0x1c>
 800c0ba:	4805      	ldr	r0, [pc, #20]	; (800c0d0 <ArtNet4Node::Print()+0x2c>)
 800c0bc:	f7fe fa56 	bl	800a56c <printf>
 800c0c0:	f504 50bc 	add.w	r0, r4, #6016	; 0x1780
 800c0c4:	3004      	adds	r0, #4
 800c0c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ca:	f003 b8fd 	b.w	800f2c8 <E131Bridge::Print()>
 800c0ce:	bd10      	pop	{r4, pc}
 800c0d0:	0801bde2 	stmdaeq	r1, {r1, r5, r6, r7, r8, sl, fp, ip, sp, pc}

0800c0d4 <strncpy.isra.0>:
 800c0d4:	3901      	subs	r1, #1
 800c0d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c0da:	b92b      	cbnz	r3, 800c0e8 <strncpy.isra.0+0x14>
 800c0dc:	4402      	add	r2, r0
 800c0de:	4290      	cmp	r0, r2
 800c0e0:	d006      	beq.n	800c0f0 <strncpy.isra.0+0x1c>
 800c0e2:	f800 3b01 	strb.w	r3, [r0], #1
 800c0e6:	e7fa      	b.n	800c0de <strncpy.isra.0+0xa>
 800c0e8:	3a01      	subs	r2, #1
 800c0ea:	f800 3b01 	strb.w	r3, [r0], #1
 800c0ee:	d1f2      	bne.n	800c0d6 <strncpy.isra.0+0x2>
 800c0f0:	4770      	bx	lr

0800c0f2 <ArtNetNode::~ArtNetNode()>:
 800c0f2:	4770      	bx	lr

0800c0f4 <ArtNetNode::Start()>:
 800c0f4:	b570      	push	{r4, r5, r6, lr}
 800c0f6:	4d1d      	ldr	r5, [pc, #116]	; (800c16c <ArtNetNode::Start()+0x78>)
 800c0f8:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 800c0fc:	682a      	ldr	r2, [r5, #0]
 800c0fe:	7951      	ldrb	r1, [r2, #5]
 800c100:	f023 0302 	bic.w	r3, r3, #2
 800c104:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800c108:	b25b      	sxtb	r3, r3
 800c10a:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 800c10e:	7912      	ldrb	r2, [r2, #4]
 800c110:	f023 0304 	bic.w	r3, r3, #4
 800c114:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800c118:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 800c11c:	4604      	mov	r4, r0
 800c11e:	f001 f913 	bl	800d348 <ArtNetNode::FillPollReply()>
 800c122:	6828      	ldr	r0, [r5, #0]
 800c124:	f641 1136 	movw	r1, #6454	; 0x1936
 800c128:	f009 fc8e 	bl	8015a48 <Network::Begin(unsigned short)>
 800c12c:	2302      	movs	r3, #2
 800c12e:	f884 3901 	strb.w	r3, [r4, #2305]	; 0x901
 800c132:	6923      	ldr	r3, [r4, #16]
 800c134:	6020      	str	r0, [r4, #0]
 800c136:	b173      	cbz	r3, 800c156 <ArtNetNode::Start()+0x62>
 800c138:	f504 569b 	add.w	r6, r4, #4960	; 0x1360
 800c13c:	2500      	movs	r5, #0
 800c13e:	3604      	adds	r6, #4
 800c140:	012b      	lsls	r3, r5, #4
 800c142:	5cf3      	ldrb	r3, [r6, r3]
 800c144:	b123      	cbz	r3, 800c150 <ArtNetNode::Start()+0x5c>
 800c146:	6920      	ldr	r0, [r4, #16]
 800c148:	6803      	ldr	r3, [r0, #0]
 800c14a:	4629      	mov	r1, r5
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	4798      	blx	r3
 800c150:	3501      	adds	r5, #1
 800c152:	2d42      	cmp	r5, #66	; 0x42
 800c154:	d1f4      	bne.n	800c140 <ArtNetNode::Start()+0x4c>
 800c156:	4b06      	ldr	r3, [pc, #24]	; (800c170 <ArtNetNode::Start()+0x7c>)
 800c158:	2102      	movs	r1, #2
 800c15a:	6818      	ldr	r0, [r3, #0]
 800c15c:	f00b ffd8 	bl	8018110 <LedBlink::SetMode(ledblink::Mode)>
 800c160:	4620      	mov	r0, r4
 800c162:	2100      	movs	r1, #0
 800c164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c168:	f001 b9c8 	b.w	800d4fc <ArtNetNode::SendPollRelply(bool)>
 800c16c:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 800c170:	2000fdc0 	andcs	pc, r0, r0, asr #27

0800c174 <ArtNetNode::Stop()>:
 800c174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c178:	2500      	movs	r5, #0
 800c17a:	4f22      	ldr	r7, [pc, #136]	; (800c204 <ArtNetNode::Stop()+0x90>)
 800c17c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800c20c <ArtNetNode::Stop()+0x98>
 800c180:	4604      	mov	r4, r0
 800c182:	4606      	mov	r6, r0
 800c184:	46a9      	mov	r9, r5
 800c186:	f04f 0a01 	mov.w	sl, #1
 800c18a:	f8d6 3930 	ldr.w	r3, [r6, #2352]	; 0x930
 800c18e:	b97b      	cbnz	r3, 800c1b0 <ArtNetNode::Stop()+0x3c>
 800c190:	6860      	ldr	r0, [r4, #4]
 800c192:	b118      	cbz	r0, 800c19c <ArtNetNode::Stop()+0x28>
 800c194:	6803      	ldr	r3, [r0, #0]
 800c196:	4629      	mov	r1, r5
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	4798      	blx	r3
 800c19c:	f8d8 3000 	ldr.w	r3, [r8]
 800c1a0:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800c1a4:	07db      	lsls	r3, r3, #31
 800c1a6:	bf58      	it	pl
 800c1a8:	f8c8 a000 	strpl.w	sl, [r8]
 800c1ac:	f886 9935 	strb.w	r9, [r6, #2357]	; 0x935
 800c1b0:	3501      	adds	r5, #1
 800c1b2:	2d42      	cmp	r5, #66	; 0x42
 800c1b4:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c1b8:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800c1bc:	d1e5      	bne.n	800c18a <ArtNetNode::Stop()+0x16>
 800c1be:	6923      	ldr	r3, [r4, #16]
 800c1c0:	b173      	cbz	r3, 800c1e0 <ArtNetNode::Stop()+0x6c>
 800c1c2:	f504 569b 	add.w	r6, r4, #4960	; 0x1360
 800c1c6:	2500      	movs	r5, #0
 800c1c8:	3604      	adds	r6, #4
 800c1ca:	012b      	lsls	r3, r5, #4
 800c1cc:	5cf3      	ldrb	r3, [r6, r3]
 800c1ce:	b123      	cbz	r3, 800c1da <ArtNetNode::Stop()+0x66>
 800c1d0:	6920      	ldr	r0, [r4, #16]
 800c1d2:	6803      	ldr	r3, [r0, #0]
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	4798      	blx	r3
 800c1da:	3501      	adds	r5, #1
 800c1dc:	2d04      	cmp	r5, #4
 800c1de:	d1f4      	bne.n	800c1ca <ArtNetNode::Stop()+0x56>
 800c1e0:	4b09      	ldr	r3, [pc, #36]	; (800c208 <ArtNetNode::Stop()+0x94>)
 800c1e2:	2100      	movs	r1, #0
 800c1e4:	6818      	ldr	r0, [r3, #0]
 800c1e6:	f00b ff93 	bl	8018110 <LedBlink::SetMode(ledblink::Mode)>
 800c1ea:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
 800c1ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c1f6:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	f884 3901 	strb.w	r3, [r4, #2305]	; 0x901
 800c200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c204:	20030000 	andcs	r0, r3, r0
 800c208:	2000fdc0 	andcs	pc, r0, r0, asr #27
 800c20c:	200006c8 	andcs	r0, r0, r8, asr #13

0800c210 <ArtNetNode::SetShortName(char const*)>:
 800c210:	b570      	push	{r4, r5, r6, lr}
 800c212:	f100 055c 	add.w	r5, r0, #92	; 0x5c
 800c216:	4604      	mov	r4, r0
 800c218:	2211      	movs	r2, #17
 800c21a:	4628      	mov	r0, r5
 800c21c:	f7ff ff5a 	bl	800c0d4 <strncpy.isra.0>
 800c220:	2300      	movs	r3, #0
 800c222:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 800c226:	f104 026e 	add.w	r2, r4, #110	; 0x6e
 800c22a:	462b      	mov	r3, r5
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d111      	bne.n	800c254 <ArtNetNode::SetShortName(char const*)+0x44>
 800c230:	f894 3901 	ldrb.w	r3, [r4, #2305]	; 0x901
 800c234:	2b02      	cmp	r3, #2
 800c236:	d112      	bne.n	800c25e <ArtNetNode::SetShortName(char const*)+0x4e>
 800c238:	69e0      	ldr	r0, [r4, #28]
 800c23a:	b118      	cbz	r0, 800c244 <ArtNetNode::SetShortName(char const*)+0x34>
 800c23c:	6803      	ldr	r3, [r0, #0]
 800c23e:	4629      	mov	r1, r5
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	4798      	blx	r3
 800c244:	6a20      	ldr	r0, [r4, #32]
 800c246:	b150      	cbz	r0, 800c25e <ArtNetNode::SetShortName(char const*)+0x4e>
 800c248:	6803      	ldr	r3, [r0, #0]
 800c24a:	4629      	mov	r1, r5
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c252:	4718      	bx	r3
 800c254:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c258:	f883 154d 	strb.w	r1, [r3, #1357]	; 0x54d
 800c25c:	e7e6      	b.n	800c22c <ArtNetNode::SetShortName(char const*)+0x1c>
 800c25e:	bd70      	pop	{r4, r5, r6, pc}

0800c260 <ArtNetNode::SetLongName(char const*)>:
 800c260:	b570      	push	{r4, r5, r6, lr}
 800c262:	f100 056e 	add.w	r5, r0, #110	; 0x6e
 800c266:	4604      	mov	r4, r0
 800c268:	223f      	movs	r2, #63	; 0x3f
 800c26a:	4628      	mov	r0, r5
 800c26c:	f7ff ff32 	bl	800c0d4 <strncpy.isra.0>
 800c270:	2300      	movs	r3, #0
 800c272:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 800c276:	f104 02ae 	add.w	r2, r4, #174	; 0xae
 800c27a:	462b      	mov	r3, r5
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d111      	bne.n	800c2a4 <ArtNetNode::SetLongName(char const*)+0x44>
 800c280:	f894 3901 	ldrb.w	r3, [r4, #2305]	; 0x901
 800c284:	2b02      	cmp	r3, #2
 800c286:	d112      	bne.n	800c2ae <ArtNetNode::SetLongName(char const*)+0x4e>
 800c288:	69e0      	ldr	r0, [r4, #28]
 800c28a:	b118      	cbz	r0, 800c294 <ArtNetNode::SetLongName(char const*)+0x34>
 800c28c:	6803      	ldr	r3, [r0, #0]
 800c28e:	4629      	mov	r1, r5
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	4798      	blx	r3
 800c294:	6a20      	ldr	r0, [r4, #32]
 800c296:	b150      	cbz	r0, 800c2ae <ArtNetNode::SetLongName(char const*)+0x4e>
 800c298:	6803      	ldr	r3, [r0, #0]
 800c29a:	4629      	mov	r1, r5
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c2a2:	4718      	bx	r3
 800c2a4:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c2a8:	f883 154d 	strb.w	r1, [r3, #1357]	; 0x54d
 800c2ac:	e7e6      	b.n	800c27c <ArtNetNode::SetLongName(char const*)+0x1c>
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}

0800c2b0 <ArtNetNode::ArtNetNode()>:
 800c2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2b8:	e9c0 2300 	strd	r2, r3, [r0]
 800c2bc:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800c2c0:	4a47      	ldr	r2, [pc, #284]	; (800c3e0 <ArtNetNode::ArtNetNode()+0x130>)
 800c2c2:	6203      	str	r3, [r0, #32]
 800c2c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2c8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800c2cc:	6010      	str	r0, [r2, #0]
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	f8c0 3894 	str.w	r3, [r0, #2196]	; 0x894
 800c2d6:	f8c0 3898 	str.w	r3, [r0, #2200]	; 0x898
 800c2da:	f880 389c 	strb.w	r3, [r0, #2204]	; 0x89c
 800c2de:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800c2e2:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
 800c2e6:	428a      	cmp	r2, r1
 800c2e8:	d165      	bne.n	800c3b6 <ArtNetNode::ArtNetNode()+0x106>
 800c2ea:	4b3e      	ldr	r3, [pc, #248]	; (800c3e4 <ArtNetNode::ArtNetNode()+0x134>)
 800c2ec:	6818      	ldr	r0, [r3, #0]
 800c2ee:	6943      	ldr	r3, [r0, #20]
 800c2f0:	6263      	str	r3, [r4, #36]	; 0x24
 800c2f2:	69c2      	ldr	r2, [r0, #28]
 800c2f4:	ea63 0302 	orn	r3, r3, r2
 800c2f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2fa:	6323      	str	r3, [r4, #48]	; 0x30
 800c2fc:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800c300:	f009 fba8 	bl	8015a54 <Network::MacAddressCopyTo(unsigned char*)>
 800c304:	23d0      	movs	r3, #208	; 0xd0
 800c306:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 800c30a:	f642 0398 	movw	r3, #10392	; 0x2898
 800c30e:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
 800c312:	f504 6211 	add.w	r2, r4, #2320	; 0x910
 800c316:	f504 630f 	add.w	r3, r4, #2288	; 0x8f0
 800c31a:	2100      	movs	r1, #0
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d14d      	bne.n	800c3bc <ArtNetNode::ArtNetNode()+0x10c>
 800c320:	f240 1201 	movw	r2, #257	; 0x101
 800c324:	f8a4 2900 	strh.w	r2, [r4, #2304]	; 0x900
 800c328:	f504 519b 	add.w	r1, r4, #4960	; 0x1360
 800c32c:	f504 56bc 	add.w	r6, r4, #6016	; 0x1780
 800c330:	2500      	movs	r5, #0
 800c332:	2708      	movs	r7, #8
 800c334:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800c338:	4283      	cmp	r3, r0
 800c33a:	d145      	bne.n	800c3c8 <ArtNetNode::ArtNetNode()+0x118>
 800c33c:	460a      	mov	r2, r1
 800c33e:	f101 0310 	add.w	r3, r1, #16
 800c342:	429a      	cmp	r2, r3
 800c344:	d143      	bne.n	800c3ce <ArtNetNode::ArtNetNode()+0x11e>
 800c346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c348:	608b      	str	r3, [r1, #8]
 800c34a:	4296      	cmp	r6, r2
 800c34c:	70cf      	strb	r7, [r1, #3]
 800c34e:	d138      	bne.n	800c3c2 <ArtNetNode::ArtNetNode()+0x112>
 800c350:	4925      	ldr	r1, [pc, #148]	; (800c3e8 <ArtNetNode::ArtNetNode()+0x138>)
 800c352:	4d26      	ldr	r5, [pc, #152]	; (800c3ec <ArtNetNode::ArtNetNode()+0x13c>)
 800c354:	4620      	mov	r0, r4
 800c356:	f7ff ff5b 	bl	800c210 <ArtNetNode::SetShortName(char const*)>
 800c35a:	4b25      	ldr	r3, [pc, #148]	; (800c3f0 <ArtNetNode::ArtNetNode()+0x140>)
 800c35c:	9302      	str	r3, [sp, #8]
 800c35e:	f604 06ad 	addw	r6, r4, #2221	; 0x8ad
 800c362:	2304      	movs	r3, #4
 800c364:	4a23      	ldr	r2, [pc, #140]	; (800c3f4 <ArtNetNode::ArtNetNode()+0x144>)
 800c366:	9301      	str	r3, [sp, #4]
 800c368:	2140      	movs	r1, #64	; 0x40
 800c36a:	4b23      	ldr	r3, [pc, #140]	; (800c3f8 <ArtNetNode::ArtNetNode()+0x148>)
 800c36c:	9500      	str	r5, [sp, #0]
 800c36e:	4630      	mov	r0, r6
 800c370:	f7fe f924 	bl	800a5bc <snprintf>
 800c374:	4631      	mov	r1, r6
 800c376:	4620      	mov	r0, r4
 800c378:	f7ff ff72 	bl	800c260 <ArtNetNode::SetLongName(char const*)>
 800c37c:	220f      	movs	r2, #15
 800c37e:	491f      	ldr	r1, [pc, #124]	; (800c3fc <ArtNetNode::ArtNetNode()+0x14c>)
 800c380:	f604 009d 	addw	r0, r4, #2205	; 0x89d
 800c384:	f7ff fea6 	bl	800c0d4 <strncpy.isra.0>
 800c388:	2300      	movs	r3, #0
 800c38a:	f884 38ac 	strb.w	r3, [r4, #2220]	; 0x8ac
 800c38e:	f204 6286 	addw	r2, r4, #1670	; 0x686
 800c392:	f204 637e 	addw	r3, r4, #1662	; 0x67e
 800c396:	4293      	cmp	r3, r2
 800c398:	d11c      	bne.n	800c3d4 <ArtNetNode::ArtNetNode()+0x124>
 800c39a:	2300      	movs	r3, #0
 800c39c:	f884 3687 	strb.w	r3, [r4, #1671]	; 0x687
 800c3a0:	2250      	movs	r2, #80	; 0x50
 800c3a2:	f884 3689 	strb.w	r3, [r4, #1673]	; 0x689
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	230e      	movs	r3, #14
 800c3aa:	f884 2688 	strb.w	r2, [r4, #1672]	; 0x688
 800c3ae:	f884 368a 	strb.w	r3, [r4, #1674]	; 0x68a
 800c3b2:	b005      	add	sp, #20
 800c3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3b6:	f802 3b01 	strb.w	r3, [r2], #1
 800c3ba:	e794      	b.n	800c2e6 <ArtNetNode::ArtNetNode()+0x36>
 800c3bc:	f803 1b01 	strb.w	r1, [r3], #1
 800c3c0:	e7ac      	b.n	800c31c <ArtNetNode::ArtNetNode()+0x6c>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	e7b5      	b.n	800c334 <ArtNetNode::ArtNetNode()+0x84>
 800c3c8:	f803 5b01 	strb.w	r5, [r3], #1
 800c3cc:	e7b4      	b.n	800c338 <ArtNetNode::ArtNetNode()+0x88>
 800c3ce:	f802 5b01 	strb.w	r5, [r2], #1
 800c3d2:	e7b6      	b.n	800c342 <ArtNetNode::ArtNetNode()+0x92>
 800c3d4:	f815 1b01 	ldrb.w	r1, [r5], #1
 800c3d8:	f803 1f01 	strb.w	r1, [r3, #1]!
 800c3dc:	e7db      	b.n	800c396 <ArtNetNode::ArtNetNode()+0xe6>
 800c3de:	bf00      	nop
 800c3e0:	200006cc 	andcs	r0, r0, ip, asr #13
 800c3e4:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 800c3e8:	0801be8b 	stmdaeq	r1, {r0, r1, r3, r7, r9, sl, fp, ip, sp, pc}
 800c3ec:	0801be83 	stmdaeq	r1, {r0, r1, r7, r9, sl, fp, ip, sp, pc}
 800c3f0:	0801be65 	stmdaeq	r1, {r0, r2, r5, r6, r9, sl, fp, ip, sp, pc}
 800c3f4:	0801be59 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, fp, ip, sp, pc}
 800c3f8:	0801b39a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, ip, sp, pc}
 800c3fc:	0801be7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r9, sl, fp, ip, sp, pc}

0800c400 <ArtNetNode::SetNetworkDataLossCondition()>:
 800c400:	2300      	movs	r3, #0
 800c402:	b4f0      	push	{r4, r5, r6, r7}
 800c404:	4602      	mov	r2, r0
 800c406:	f880 3906 	strb.w	r3, [r0, #2310]	; 0x906
 800c40a:	f880 3905 	strb.w	r3, [r0, #2309]	; 0x905
 800c40e:	f500 6425 	add.w	r4, r0, #2640	; 0xa50
 800c412:	4603      	mov	r3, r0
 800c414:	f8d2 191c 	ldr.w	r1, [r2, #2332]	; 0x91c
 800c418:	f8d2 5924 	ldr.w	r5, [r2, #2340]	; 0x924
 800c41c:	42e9      	cmn	r1, r5
 800c41e:	d104      	bne.n	800c42a <ArtNetNode::SetNetworkDataLossCondition()+0x2a>
 800c420:	3228      	adds	r2, #40	; 0x28
 800c422:	42a2      	cmp	r2, r4
 800c424:	d1f6      	bne.n	800c414 <ArtNetNode::SetNetworkDataLossCondition()+0x14>
 800c426:	bcf0      	pop	{r4, r5, r6, r7}
 800c428:	4770      	bx	lr
 800c42a:	4a14      	ldr	r2, [pc, #80]	; (800c47c <ArtNetNode::SetNetworkDataLossCondition()+0x7c>)
 800c42c:	4d14      	ldr	r5, [pc, #80]	; (800c480 <ArtNetNode::SetNetworkDataLossCondition()+0x80>)
 800c42e:	2100      	movs	r1, #0
 800c430:	2601      	movs	r6, #1
 800c432:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
 800c436:	f8c3 1924 	str.w	r1, [r3, #2340]	; 0x924
 800c43a:	682f      	ldr	r7, [r5, #0]
 800c43c:	f8c2 1600 	str.w	r1, [r2, #1536]	; 0x600
 800c440:	07ff      	lsls	r7, r7, #31
 800c442:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800c446:	bf58      	it	pl
 800c448:	602e      	strpl	r6, [r5, #0]
 800c44a:	42a3      	cmp	r3, r4
 800c44c:	f202 6204 	addw	r2, r2, #1540	; 0x604
 800c450:	d1ef      	bne.n	800c432 <ArtNetNode::SetNetworkDataLossCondition()+0x32>
 800c452:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800c456:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c45a:	2b40      	cmp	r3, #64	; 0x40
 800c45c:	d007      	beq.n	800c46e <ArtNetNode::SetNetworkDataLossCondition()+0x6e>
 800c45e:	d9e2      	bls.n	800c426 <ArtNetNode::SetNetworkDataLossCondition()+0x26>
 800c460:	2b80      	cmp	r3, #128	; 0x80
 800c462:	d1e0      	bne.n	800c426 <ArtNetNode::SetNetworkDataLossCondition()+0x26>
 800c464:	6840      	ldr	r0, [r0, #4]
 800c466:	6803      	ldr	r3, [r0, #0]
 800c468:	bcf0      	pop	{r4, r5, r6, r7}
 800c46a:	699b      	ldr	r3, [r3, #24]
 800c46c:	4718      	bx	r3
 800c46e:	6840      	ldr	r0, [r0, #4]
 800c470:	6803      	ldr	r3, [r0, #0]
 800c472:	bcf0      	pop	{r4, r5, r6, r7}
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	2101      	movs	r1, #1
 800c478:	4718      	bx	r3
 800c47a:	bf00      	nop
 800c47c:	20030000 	andcs	r0, r3, r0
 800c480:	200006c8 	andcs	r0, r0, r8, asr #13

0800c484 <ArtNetNode::GetType()>:
 800c484:	f8b0 358c 	ldrh.w	r3, [r0, #1420]	; 0x58c
 800c488:	2b0b      	cmp	r3, #11
 800c48a:	b530      	push	{r4, r5, lr}
 800c48c:	d91d      	bls.n	800c4ca <ArtNetNode::GetType()+0x46>
 800c48e:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
 800c492:	b9d3      	cbnz	r3, 800c4ca <ArtNetNode::GetType()+0x46>
 800c494:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
 800c498:	2a0e      	cmp	r2, #14
 800c49a:	d10d      	bne.n	800c4b8 <ArtNetNode::GetType()+0x34>
 800c49c:	4a0c      	ldr	r2, [pc, #48]	; (800c4d0 <ArtNetNode::GetType()+0x4c>)
 800c49e:	f100 03bb 	add.w	r3, r0, #187	; 0xbb
 800c4a2:	f100 01c3 	add.w	r1, r0, #195	; 0xc3
 800c4a6:	428b      	cmp	r3, r1
 800c4a8:	d109      	bne.n	800c4be <ArtNetNode::GetType()+0x3a>
 800c4aa:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
 800c4ae:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
 800c4b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	f8a0 358e 	strh.w	r3, [r0, #1422]	; 0x58e
 800c4bc:	bd30      	pop	{r4, r5, pc}
 800c4be:	f812 4b01 	ldrb.w	r4, [r2], #1
 800c4c2:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800c4c6:	42a5      	cmp	r5, r4
 800c4c8:	d0ed      	beq.n	800c4a6 <ArtNetNode::GetType()+0x22>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	e7f4      	b.n	800c4b8 <ArtNetNode::GetType()+0x34>
 800c4ce:	bf00      	nop
 800c4d0:	0801a9d0 	stmdaeq	r1, {r4, r6, r7, r8, fp, sp, pc}

0800c4d4 <ArtNetNode::Run()>:
 800c4d4:	b530      	push	{r4, r5, lr}
 800c4d6:	4601      	mov	r1, r0
 800c4d8:	b085      	sub	sp, #20
 800c4da:	4604      	mov	r4, r0
 800c4dc:	f10d 030e 	add.w	r3, sp, #14
 800c4e0:	f811 0bbc 	ldrb.w	r0, [r1], #188
 800c4e4:	9300      	str	r3, [sp, #0]
 800c4e6:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800c4ea:	f504 63b1 	add.w	r3, r4, #1416	; 0x588
 800c4ee:	f008 fd7f 	bl	8014ff0 <udp_recv>
 800c4f2:	4b64      	ldr	r3, [pc, #400]	; (800c684 <ArtNetNode::Run()+0x1b0>)
 800c4f4:	681d      	ldr	r5, [r3, #0]
 800c4f6:	f8c4 5894 	str.w	r5, [r4, #2196]	; 0x894
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d142      	bne.n	800c584 <ArtNetNode::Run()+0xb0>
 800c4fe:	f8d4 3898 	ldr.w	r3, [r4, #2200]	; 0x898
 800c502:	1aed      	subs	r5, r5, r3
 800c504:	f242 730f 	movw	r3, #9999	; 0x270f
 800c508:	429d      	cmp	r5, r3
 800c50a:	d902      	bls.n	800c512 <ArtNetNode::Run()+0x3e>
 800c50c:	4620      	mov	r0, r4
 800c50e:	f7ff ff77 	bl	800c400 <ArtNetNode::SetNetworkDataLossCondition()>
 800c512:	f894 3902 	ldrb.w	r3, [r4, #2306]	; 0x902
 800c516:	b15b      	cbz	r3, 800c530 <ArtNetNode::Run()+0x5c>
 800c518:	69a0      	ldr	r0, [r4, #24]
 800c51a:	f894 5907 	ldrb.w	r5, [r4, #2311]	; 0x907
 800c51e:	6803      	ldr	r3, [r0, #0]
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	4798      	blx	r3
 800c524:	b905      	cbnz	r5, 800c528 <ArtNetNode::Run()+0x54>
 800c526:	b118      	cbz	r0, 800c530 <ArtNetNode::Run()+0x5c>
 800c528:	2100      	movs	r1, #0
 800c52a:	4620      	mov	r0, r4
 800c52c:	f000 ffe6 	bl	800d4fc <ArtNetNode::SendPollRelply(bool)>
 800c530:	f8d4 3894 	ldr.w	r3, [r4, #2196]	; 0x894
 800c534:	f8d4 2898 	ldr.w	r2, [r4, #2200]	; 0x898
 800c538:	1a9b      	subs	r3, r3, r2
 800c53a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c53e:	d305      	bcc.n	800c54c <ArtNetNode::Run()+0x78>
 800c540:	f894 3909 	ldrb.w	r3, [r4, #2313]	; 0x909
 800c544:	f023 0302 	bic.w	r3, r3, #2
 800c548:	f884 3909 	strb.w	r3, [r4, #2313]	; 0x909
 800c54c:	6923      	ldr	r3, [r4, #16]
 800c54e:	b113      	cbz	r3, 800c556 <ArtNetNode::Run()+0x82>
 800c550:	4620      	mov	r0, r4
 800c552:	f000 fd9b 	bl	800d08c <ArtNetNode::HandleDmxIn()>
 800c556:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
 800c55a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c55e:	2bc0      	cmp	r3, #192	; 0xc0
 800c560:	d10e      	bne.n	800c580 <ArtNetNode::Run()+0xac>
 800c562:	4b49      	ldr	r3, [pc, #292]	; (800c688 <ArtNetNode::Run()+0x1b4>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	2b04      	cmp	r3, #4
 800c56a:	d009      	beq.n	800c580 <ArtNetNode::Run()+0xac>
 800c56c:	69a0      	ldr	r0, [r4, #24]
 800c56e:	f894 2909 	ldrb.w	r2, [r4, #2313]	; 0x909
 800c572:	6803      	ldr	r3, [r0, #0]
 800c574:	699b      	ldr	r3, [r3, #24]
 800c576:	2a00      	cmp	r2, #0
 800c578:	f000 8081 	beq.w	800c67e <ArtNetNode::Run()+0x1aa>
 800c57c:	2103      	movs	r1, #3
 800c57e:	4798      	blx	r3
 800c580:	b005      	add	sp, #20
 800c582:	bd30      	pop	{r4, r5, pc}
 800c584:	f8a4 058c 	strh.w	r0, [r4, #1420]	; 0x58c
 800c588:	f8c4 5898 	str.w	r5, [r4, #2200]	; 0x898
 800c58c:	4620      	mov	r0, r4
 800c58e:	f7ff ff79 	bl	800c484 <ArtNetNode::GetType()>
 800c592:	f894 3905 	ldrb.w	r3, [r4, #2309]	; 0x905
 800c596:	b143      	cbz	r3, 800c5aa <ArtNetNode::Run()+0xd6>
 800c598:	f8d4 38fc 	ldr.w	r3, [r4, #2300]	; 0x8fc
 800c59c:	1aed      	subs	r5, r5, r3
 800c59e:	f5b5 6f7a 	cmp.w	r5, #4000	; 0xfa0
 800c5a2:	bf24      	itt	cs
 800c5a4:	2300      	movcs	r3, #0
 800c5a6:	f884 3905 	strbcs.w	r3, [r4, #2309]	; 0x905
 800c5aa:	f8b4 358e 	ldrh.w	r3, [r4, #1422]	; 0x58e
 800c5ae:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 800c5b2:	d04c      	beq.n	800c64e <ArtNetNode::Run()+0x17a>
 800c5b4:	d81d      	bhi.n	800c5f2 <ArtNetNode::Run()+0x11e>
 800c5b6:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 800c5ba:	d039      	beq.n	800c630 <ArtNetNode::Run()+0x15c>
 800c5bc:	d80c      	bhi.n	800c5d8 <ArtNetNode::Run()+0x104>
 800c5be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5c2:	d031      	beq.n	800c628 <ArtNetNode::Run()+0x154>
 800c5c4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c5c8:	d1c0      	bne.n	800c54c <ArtNetNode::Run()+0x78>
 800c5ca:	6863      	ldr	r3, [r4, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d0bd      	beq.n	800c54c <ArtNetNode::Run()+0x78>
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f000 fc71 	bl	800ceb8 <ArtNetNode::HandleDmx()>
 800c5d6:	e7b9      	b.n	800c54c <ArtNetNode::Run()+0x78>
 800c5d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c5dc:	d02f      	beq.n	800c63e <ArtNetNode::Run()+0x16a>
 800c5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5e2:	d1b3      	bne.n	800c54c <ArtNetNode::Run()+0x78>
 800c5e4:	68e3      	ldr	r3, [r4, #12]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0b0      	beq.n	800c54c <ArtNetNode::Run()+0x78>
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f001 f8e5 	bl	800d7ba <ArtNetNode::HandleTodRequest()>
 800c5f0:	e7ac      	b.n	800c54c <ArtNetNode::Run()+0x78>
 800c5f2:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800c5f6:	d026      	beq.n	800c646 <ArtNetNode::Run()+0x172>
 800c5f8:	d80c      	bhi.n	800c614 <ArtNetNode::Run()+0x140>
 800c5fa:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 800c5fe:	d02e      	beq.n	800c65e <ArtNetNode::Run()+0x18a>
 800c600:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 800c604:	d1a2      	bne.n	800c54c <ArtNetNode::Run()+0x78>
 800c606:	68a3      	ldr	r3, [r4, #8]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d09f      	beq.n	800c54c <ArtNetNode::Run()+0x78>
 800c60c:	4620      	mov	r0, r4
 800c60e:	f001 f9c1 	bl	800d994 <ArtNetNode::HandleTimeCode()>
 800c612:	e79b      	b.n	800c54c <ArtNetNode::Run()+0x78>
 800c614:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 800c618:	d029      	beq.n	800c66e <ArtNetNode::Run()+0x19a>
 800c61a:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800c61e:	d195      	bne.n	800c54c <ArtNetNode::Run()+0x78>
 800c620:	4620      	mov	r0, r4
 800c622:	f000 fdc5 	bl	800d1b0 <ArtNetNode::HandleIpProg()>
 800c626:	e791      	b.n	800c54c <ArtNetNode::Run()+0x78>
 800c628:	4620      	mov	r0, r4
 800c62a:	f000 ffd3 	bl	800d5d4 <ArtNetNode::HandlePoll()>
 800c62e:	e78d      	b.n	800c54c <ArtNetNode::Run()+0x78>
 800c630:	6863      	ldr	r3, [r4, #4]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d08a      	beq.n	800c54c <ArtNetNode::Run()+0x78>
 800c636:	4620      	mov	r0, r4
 800c638:	f001 f962 	bl	800d900 <ArtNetNode::HandleSync()>
 800c63c:	e786      	b.n	800c54c <ArtNetNode::Run()+0x78>
 800c63e:	4620      	mov	r0, r4
 800c640:	f000 fa18 	bl	800ca74 <ArtNetNode::HandleAddress()>
 800c644:	e782      	b.n	800c54c <ArtNetNode::Run()+0x78>
 800c646:	4620      	mov	r0, r4
 800c648:	f001 f9aa 	bl	800d9a0 <ArtNetNode::HandleTimeSync()>
 800c64c:	e77e      	b.n	800c54c <ArtNetNode::Run()+0x78>
 800c64e:	68e3      	ldr	r3, [r4, #12]
 800c650:	2b00      	cmp	r3, #0
 800c652:	f43f af7b 	beq.w	800c54c <ArtNetNode::Run()+0x78>
 800c656:	4620      	mov	r0, r4
 800c658:	f001 f872 	bl	800d740 <ArtNetNode::HandleTodControl()>
 800c65c:	e776      	b.n	800c54c <ArtNetNode::Run()+0x78>
 800c65e:	68e3      	ldr	r3, [r4, #12]
 800c660:	2b00      	cmp	r3, #0
 800c662:	f43f af73 	beq.w	800c54c <ArtNetNode::Run()+0x78>
 800c666:	4620      	mov	r0, r4
 800c668:	f001 f8c5 	bl	800d7f6 <ArtNetNode::HandleRdm()>
 800c66c:	e76e      	b.n	800c54c <ArtNetNode::Run()+0x78>
 800c66e:	6963      	ldr	r3, [r4, #20]
 800c670:	2b00      	cmp	r3, #0
 800c672:	f43f af6b 	beq.w	800c54c <ArtNetNode::Run()+0x78>
 800c676:	4620      	mov	r0, r4
 800c678:	f001 ff3c 	bl	800e4f4 <ArtNetNode::HandleTrigger()>
 800c67c:	e766      	b.n	800c54c <ArtNetNode::Run()+0x78>
 800c67e:	2102      	movs	r1, #2
 800c680:	e77d      	b.n	800c57e <ArtNetNode::Run()+0xaa>
 800c682:	bf00      	nop
 800c684:	2000fddc 	ldrdcs	pc, [r0], -ip
 800c688:	2000fdc0 	andcs	pc, r0, r0, asr #27

0800c68c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 800c68c:	b94b      	cbnz	r3, 800c6a2 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x16>
 800c68e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c692:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800c696:	f8b1 3360 	ldrh.w	r3, [r1, #864]	; 0x360
 800c69a:	8013      	strh	r3, [r2, #0]
 800c69c:	f891 0364 	ldrb.w	r0, [r1, #868]	; 0x364
 800c6a0:	4770      	bx	lr
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	bf01      	itttt	eq
 800c6a6:	2328      	moveq	r3, #40	; 0x28
 800c6a8:	fb03 0101 	mlaeq	r1, r3, r1, r0
 800c6ac:	f8b1 3910 	ldrheq.w	r3, [r1, #2320]	; 0x910
 800c6b0:	f891 0914 	ldrbeq.w	r0, [r1, #2324]	; 0x914
 800c6b4:	bf0c      	ite	eq
 800c6b6:	8013      	strheq	r3, [r2, #0]
 800c6b8:	2000      	movne	r0, #0
 800c6ba:	4770      	bx	lr

0800c6bc <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 800c6bc:	4402      	add	r2, r0
 800c6be:	f001 010f 	and.w	r1, r1, #15
 800c6c2:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 800c6c6:	f892 204b 	ldrb.w	r2, [r2, #75]	; 0x4b
 800c6ca:	021b      	lsls	r3, r3, #8
 800c6cc:	0112      	lsls	r2, r2, #4
 800c6ce:	b2d2      	uxtb	r2, r2
 800c6d0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	ea43 0001 	orr.w	r0, r3, r1
 800c6da:	4770      	bx	lr

0800c6dc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 800c6dc:	2941      	cmp	r1, #65	; 0x41
 800c6de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	460d      	mov	r5, r1
 800c6e6:	4690      	mov	r8, r2
 800c6e8:	461e      	mov	r6, r3
 800c6ea:	f200 80ab 	bhi.w	800c844 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x168>
 800c6ee:	f1b8 0f02 	cmp.w	r8, #2
 800c6f2:	ea4f 0291 	mov.w	r2, r1, lsr #2
 800c6f6:	d123      	bne.n	800c740 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x64>
 800c6f8:	2328      	movs	r3, #40	; 0x28
 800c6fa:	fb03 0301 	mla	r3, r3, r1, r0
 800c6fe:	f893 2914 	ldrb.w	r2, [r3, #2324]	; 0x914
 800c702:	b13a      	cbz	r2, 800c714 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x38>
 800c704:	2200      	movs	r2, #0
 800c706:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
 800c70a:	f890 390a 	ldrb.w	r3, [r0, #2314]	; 0x90a
 800c70e:	3b01      	subs	r3, #1
 800c710:	f880 390a 	strb.w	r3, [r0, #2314]	; 0x90a
 800c714:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800c718:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 800c71c:	f895 3364 	ldrb.w	r3, [r5, #868]	; 0x364
 800c720:	b90b      	cbnz	r3, 800c726 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x4a>
 800c722:	2000      	movs	r0, #0
 800c724:	e00a      	b.n	800c73c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x60>
 800c726:	2308      	movs	r3, #8
 800c728:	2000      	movs	r0, #0
 800c72a:	f885 0364 	strb.w	r0, [r5, #868]	; 0x364
 800c72e:	f885 3363 	strb.w	r3, [r5, #867]	; 0x363
 800c732:	f894 390b 	ldrb.w	r3, [r4, #2315]	; 0x90b
 800c736:	3b01      	subs	r3, #1
 800c738:	f884 390b 	strb.w	r3, [r4, #2315]	; 0x90b
 800c73c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c740:	f1b8 0f00 	cmp.w	r8, #0
 800c744:	d13c      	bne.n	800c7c0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xe4>
 800c746:	eb00 1701 	add.w	r7, r0, r1, lsl #4
 800c74a:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800c74e:	f897 3364 	ldrb.w	r3, [r7, #868]	; 0x364
 800c752:	b923      	cbnz	r3, 800c75e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x82>
 800c754:	f890 390b 	ldrb.w	r3, [r0, #2315]	; 0x90b
 800c758:	3301      	adds	r3, #1
 800c75a:	f880 390b 	strb.w	r3, [r0, #2315]	; 0x90b
 800c75e:	2301      	movs	r3, #1
 800c760:	f887 3364 	strb.w	r3, [r7, #868]	; 0x364
 800c764:	f04f 0900 	mov.w	r9, #0
 800c768:	f006 030f 	and.w	r3, r6, #15
 800c76c:	f887 3362 	strb.w	r3, [r7, #866]	; 0x362
 800c770:	f887 9363 	strb.w	r9, [r7, #867]	; 0x363
 800c774:	4631      	mov	r1, r6
 800c776:	4620      	mov	r0, r4
 800c778:	f7ff ffa0 	bl	800c6bc <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800c77c:	2328      	movs	r3, #40	; 0x28
 800c77e:	fb03 4305 	mla	r3, r3, r5, r4
 800c782:	f8a7 0360 	strh.w	r0, [r7, #864]	; 0x360
 800c786:	f893 2914 	ldrb.w	r2, [r3, #2324]	; 0x914
 800c78a:	b132      	cbz	r2, 800c79a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800c78c:	f883 9914 	strb.w	r9, [r3, #2324]	; 0x914
 800c790:	f894 390a 	ldrb.w	r3, [r4, #2314]	; 0x90a
 800c794:	3b01      	subs	r3, #1
 800c796:	f884 390a 	strb.w	r3, [r4, #2314]	; 0x90a
 800c79a:	69a0      	ldr	r0, [r4, #24]
 800c79c:	f894 3901 	ldrb.w	r3, [r4, #2305]	; 0x901
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	d043      	beq.n	800c82c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x150>
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d13c      	bne.n	800c822 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x146>
 800c7a8:	69e0      	ldr	r0, [r4, #28]
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d144      	bne.n	800c838 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x15c>
 800c7ae:	6a20      	ldr	r0, [r4, #32]
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d0b6      	beq.n	800c722 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x46>
 800c7b4:	6803      	ldr	r3, [r0, #0]
 800c7b6:	4632      	mov	r2, r6
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	4629      	mov	r1, r5
 800c7bc:	4798      	blx	r3
 800c7be:	e7b0      	b.n	800c722 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x46>
 800c7c0:	f1b8 0f01 	cmp.w	r8, #1
 800c7c4:	d1e9      	bne.n	800c79a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800c7c6:	2728      	movs	r7, #40	; 0x28
 800c7c8:	fb07 0301 	mla	r3, r7, r1, r0
 800c7cc:	f893 3914 	ldrb.w	r3, [r3, #2324]	; 0x914
 800c7d0:	b923      	cbnz	r3, 800c7dc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x100>
 800c7d2:	f890 390a 	ldrb.w	r3, [r0, #2314]	; 0x90a
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	f880 390a 	strb.w	r3, [r0, #2314]	; 0x90a
 800c7dc:	fb07 4705 	mla	r7, r7, r5, r4
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	f887 3914 	strb.w	r3, [r7, #2324]	; 0x914
 800c7e6:	f006 030f 	and.w	r3, r6, #15
 800c7ea:	f887 3912 	strb.w	r3, [r7, #2322]	; 0x912
 800c7ee:	4631      	mov	r1, r6
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f7ff ff63 	bl	800c6bc <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800c7f6:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800c7fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7fe:	f8a7 0910 	strh.w	r0, [r7, #2320]	; 0x910
 800c802:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
 800c806:	2a00      	cmp	r2, #0
 800c808:	d0c7      	beq.n	800c79a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800c80a:	2200      	movs	r2, #0
 800c80c:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
 800c810:	2208      	movs	r2, #8
 800c812:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 800c816:	f894 390b 	ldrb.w	r3, [r4, #2315]	; 0x90b
 800c81a:	3b01      	subs	r3, #1
 800c81c:	f884 390b 	strb.w	r3, [r4, #2315]	; 0x90b
 800c820:	e7bb      	b.n	800c79a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800c822:	6803      	ldr	r3, [r0, #0]
 800c824:	4642      	mov	r2, r8
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	4629      	mov	r1, r5
 800c82a:	4798      	blx	r3
 800c82c:	f894 3901 	ldrb.w	r3, [r4, #2305]	; 0x901
 800c830:	2b02      	cmp	r3, #2
 800c832:	f47f af76 	bne.w	800c722 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x46>
 800c836:	e7b7      	b.n	800c7a8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xcc>
 800c838:	6803      	ldr	r3, [r0, #0]
 800c83a:	4632      	mov	r2, r6
 800c83c:	695b      	ldr	r3, [r3, #20]
 800c83e:	4629      	mov	r1, r5
 800c840:	4798      	blx	r3
 800c842:	e7b4      	b.n	800c7ae <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd2>
 800c844:	f06f 0004 	mvn.w	r0, #4
 800c848:	e778      	b.n	800c73c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x60>

0800c84a <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800c84a:	b430      	push	{r4, r5}
 800c84c:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 800c850:	f3c3 2506 	ubfx	r5, r3, #8, #7
 800c854:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 800c858:	f3c3 1503 	ubfx	r5, r3, #4, #4
 800c85c:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
 800c860:	bc30      	pop	{r4, r5}
 800c862:	f003 030f 	and.w	r3, r3, #15
 800c866:	f7ff bf39 	b.w	800c6dc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>

0800c86a <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 800c86a:	2941      	cmp	r1, #65	; 0x41
 800c86c:	d815      	bhi.n	800c89a <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x30>
 800c86e:	b94b      	cbnz	r3, 800c884 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x1a>
 800c870:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c874:	f501 5080 	add.w	r0, r1, #4096	; 0x1000
 800c878:	f890 3362 	ldrb.w	r3, [r0, #866]	; 0x362
 800c87c:	7013      	strb	r3, [r2, #0]
 800c87e:	f890 0364 	ldrb.w	r0, [r0, #868]	; 0x364
 800c882:	4770      	bx	lr
 800c884:	2b02      	cmp	r3, #2
 800c886:	d008      	beq.n	800c89a <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x30>
 800c888:	2328      	movs	r3, #40	; 0x28
 800c88a:	fb03 0101 	mla	r1, r3, r1, r0
 800c88e:	f891 3912 	ldrb.w	r3, [r1, #2322]	; 0x912
 800c892:	7013      	strb	r3, [r2, #0]
 800c894:	f891 0914 	ldrb.w	r0, [r1, #2324]	; 0x914
 800c898:	4770      	bx	lr
 800c89a:	2000      	movs	r0, #0
 800c89c:	4770      	bx	lr

0800c89e <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 800c89e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a2:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800c8a6:	f108 0904 	add.w	r9, r8, #4
 800c8aa:	1883      	adds	r3, r0, r2
 800c8ac:	f1b9 0f42 	cmp.w	r9, #66	; 0x42
 800c8b0:	f04f 06a0 	mov.w	r6, #160	; 0xa0
 800c8b4:	4605      	mov	r5, r0
 800c8b6:	460f      	mov	r7, r1
 800c8b8:	4614      	mov	r4, r2
 800c8ba:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
 800c8be:	bf28      	it	cs
 800c8c0:	f04f 0942 	movcs.w	r9, #66	; 0x42
 800c8c4:	fb06 0602 	mla	r6, r6, r2, r0
 800c8c8:	45c8      	cmp	r8, r9
 800c8ca:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c8ce:	d30c      	bcc.n	800c8ea <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x4c>
 800c8d0:	69e8      	ldr	r0, [r5, #28]
 800c8d2:	b1a8      	cbz	r0, 800c900 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x62>
 800c8d4:	f895 3901 	ldrb.w	r3, [r5, #2305]	; 0x901
 800c8d8:	2b02      	cmp	r3, #2
 800c8da:	d111      	bne.n	800c900 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x62>
 800c8dc:	6803      	ldr	r3, [r0, #0]
 800c8de:	463a      	mov	r2, r7
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	69db      	ldr	r3, [r3, #28]
 800c8e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8e8:	4718      	bx	r3
 800c8ea:	f8b6 18e8 	ldrh.w	r1, [r6, #2280]	; 0x8e8
 800c8ee:	4622      	mov	r2, r4
 800c8f0:	4628      	mov	r0, r5
 800c8f2:	f7ff fee3 	bl	800c6bc <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800c8f6:	f108 0801 	add.w	r8, r8, #1
 800c8fa:	f8a6 08e8 	strh.w	r0, [r6, #2280]	; 0x8e8
 800c8fe:	e7e3      	b.n	800c8c8 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x2a>
 800c900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c904 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 800c904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c908:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800c90c:	f108 0904 	add.w	r9, r8, #4
 800c910:	1883      	adds	r3, r0, r2
 800c912:	f1b9 0f42 	cmp.w	r9, #66	; 0x42
 800c916:	f04f 06a0 	mov.w	r6, #160	; 0xa0
 800c91a:	4605      	mov	r5, r0
 800c91c:	460f      	mov	r7, r1
 800c91e:	4614      	mov	r4, r2
 800c920:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
 800c924:	bf28      	it	cs
 800c926:	f04f 0942 	movcs.w	r9, #66	; 0x42
 800c92a:	fb06 0602 	mla	r6, r6, r2, r0
 800c92e:	45c8      	cmp	r8, r9
 800c930:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c934:	d30c      	bcc.n	800c950 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x4c>
 800c936:	69e8      	ldr	r0, [r5, #28]
 800c938:	b1a8      	cbz	r0, 800c966 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x62>
 800c93a:	f895 3901 	ldrb.w	r3, [r5, #2305]	; 0x901
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d111      	bne.n	800c966 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x62>
 800c942:	6803      	ldr	r3, [r0, #0]
 800c944:	463a      	mov	r2, r7
 800c946:	4621      	mov	r1, r4
 800c948:	699b      	ldr	r3, [r3, #24]
 800c94a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c94e:	4718      	bx	r3
 800c950:	f8b6 18e8 	ldrh.w	r1, [r6, #2280]	; 0x8e8
 800c954:	4622      	mov	r2, r4
 800c956:	4628      	mov	r0, r5
 800c958:	f7ff feb0 	bl	800c6bc <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800c95c:	f108 0801 	add.w	r8, r8, #1
 800c960:	f8a6 08e8 	strh.w	r0, [r6, #2280]	; 0x8e8
 800c964:	e7e3      	b.n	800c92e <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x2a>
 800c966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c96a <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800c96a:	2941      	cmp	r1, #65	; 0x41
 800c96c:	b570      	push	{r4, r5, r6, lr}
 800c96e:	4605      	mov	r5, r0
 800c970:	460c      	mov	r4, r1
 800c972:	4616      	mov	r6, r2
 800c974:	d823      	bhi.n	800c9be <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800c976:	2228      	movs	r2, #40	; 0x28
 800c978:	fb02 0301 	mla	r3, r2, r1, r0
 800c97c:	2e01      	cmp	r6, #1
 800c97e:	f8c3 6930 	str.w	r6, [r3, #2352]	; 0x930
 800c982:	f893 3913 	ldrb.w	r3, [r3, #2323]	; 0x913
 800c986:	fb02 0201 	mla	r2, r2, r1, r0
 800c98a:	bf0c      	ite	eq
 800c98c:	f043 0301 	orreq.w	r3, r3, #1
 800c990:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800c994:	f882 3913 	strb.w	r3, [r2, #2323]	; 0x913
 800c998:	f890 3901 	ldrb.w	r3, [r0, #2305]	; 0x901
 800c99c:	2b02      	cmp	r3, #2
 800c99e:	d10e      	bne.n	800c9be <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800c9a0:	69c0      	ldr	r0, [r0, #28]
 800c9a2:	b118      	cbz	r0, 800c9ac <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x42>
 800c9a4:	6803      	ldr	r3, [r0, #0]
 800c9a6:	4632      	mov	r2, r6
 800c9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9aa:	4798      	blx	r3
 800c9ac:	6a28      	ldr	r0, [r5, #32]
 800c9ae:	b130      	cbz	r0, 800c9be <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800c9b0:	6803      	ldr	r3, [r0, #0]
 800c9b2:	4632      	mov	r2, r6
 800c9b4:	4621      	mov	r1, r4
 800c9b6:	6a1b      	ldr	r3, [r3, #32]
 800c9b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9bc:	4718      	bx	r3
 800c9be:	bd70      	pop	{r4, r5, r6, pc}

0800c9c0 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 800c9c0:	2941      	cmp	r1, #65	; 0x41
 800c9c2:	b570      	push	{r4, r5, r6, lr}
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	460c      	mov	r4, r1
 800c9c8:	4616      	mov	r6, r2
 800c9ca:	d823      	bhi.n	800ca14 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800c9cc:	2228      	movs	r2, #40	; 0x28
 800c9ce:	fb02 0301 	mla	r3, r2, r1, r0
 800c9d2:	2e01      	cmp	r6, #1
 800c9d4:	f8c3 6928 	str.w	r6, [r3, #2344]	; 0x928
 800c9d8:	f893 3913 	ldrb.w	r3, [r3, #2323]	; 0x913
 800c9dc:	fb02 0201 	mla	r2, r2, r1, r0
 800c9e0:	bf0c      	ite	eq
 800c9e2:	f043 0302 	orreq.w	r3, r3, #2
 800c9e6:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 800c9ea:	f882 3913 	strb.w	r3, [r2, #2323]	; 0x913
 800c9ee:	f890 3901 	ldrb.w	r3, [r0, #2305]	; 0x901
 800c9f2:	2b02      	cmp	r3, #2
 800c9f4:	d10e      	bne.n	800ca14 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800c9f6:	69c0      	ldr	r0, [r0, #28]
 800c9f8:	b118      	cbz	r0, 800ca02 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x42>
 800c9fa:	6803      	ldr	r3, [r0, #0]
 800c9fc:	4632      	mov	r2, r6
 800c9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca00:	4798      	blx	r3
 800ca02:	6a28      	ldr	r0, [r5, #32]
 800ca04:	b130      	cbz	r0, 800ca14 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800ca06:	6803      	ldr	r3, [r0, #0]
 800ca08:	4632      	mov	r2, r6
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	69db      	ldr	r3, [r3, #28]
 800ca0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ca12:	4718      	bx	r3
 800ca14:	bd70      	pop	{r4, r5, r6, pc}

0800ca16 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>:
 800ca16:	b513      	push	{r0, r1, r4, lr}
 800ca18:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800ca1c:	f1a1 0208 	sub.w	r2, r1, #8
 800ca20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca24:	4604      	mov	r4, r0
 800ca26:	f880 30b1 	strb.w	r3, [r0, #177]	; 0xb1
 800ca2a:	2a04      	cmp	r2, #4
 800ca2c:	d820      	bhi.n	800ca70 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x5a>
 800ca2e:	e8df f002 	tbb	[pc, r2]
 800ca32:	1f1c0307 	svcne	0x001c0307
 800ca36:	f043001f 			; <UNDEFINED> instruction: 0xf043001f
 800ca3a:	0340      	lsls	r0, r0, #13
 800ca3c:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 800ca40:	f894 3901 	ldrb.w	r3, [r4, #2305]	; 0x901
 800ca44:	2b02      	cmp	r3, #2
 800ca46:	d113      	bne.n	800ca70 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x5a>
 800ca48:	69e0      	ldr	r0, [r4, #28]
 800ca4a:	f001 0107 	and.w	r1, r1, #7
 800ca4e:	b120      	cbz	r0, 800ca5a <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x44>
 800ca50:	6803      	ldr	r3, [r0, #0]
 800ca52:	9101      	str	r1, [sp, #4]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	4798      	blx	r3
 800ca58:	9901      	ldr	r1, [sp, #4]
 800ca5a:	6a20      	ldr	r0, [r4, #32]
 800ca5c:	b140      	cbz	r0, 800ca70 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x5a>
 800ca5e:	6803      	ldr	r3, [r0, #0]
 800ca60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca62:	b002      	add	sp, #8
 800ca64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca68:	4718      	bx	r3
 800ca6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca6e:	e7e5      	b.n	800ca3c <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x26>
 800ca70:	b002      	add	sp, #8
 800ca72:	bd10      	pop	{r4, pc}

0800ca74 <ArtNetNode::HandleAddress()>:
 800ca74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca78:	2301      	movs	r3, #1
 800ca7a:	f880 3900 	strb.w	r3, [r0, #2304]	; 0x900
 800ca7e:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
 800ca82:	4604      	mov	r4, r0
 800ca84:	b133      	cbz	r3, 800ca94 <ArtNetNode::HandleAddress()+0x20>
 800ca86:	f100 01ca 	add.w	r1, r0, #202	; 0xca
 800ca8a:	f7ff fbc1 	bl	800c210 <ArtNetNode::SetShortName(char const*)>
 800ca8e:	2306      	movs	r3, #6
 800ca90:	f884 3900 	strb.w	r3, [r4, #2304]	; 0x900
 800ca94:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
 800ca98:	b13b      	cbz	r3, 800caaa <ArtNetNode::HandleAddress()+0x36>
 800ca9a:	f104 01dc 	add.w	r1, r4, #220	; 0xdc
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f7ff fbde 	bl	800c260 <ArtNetNode::SetLongName(char const*)>
 800caa4:	2307      	movs	r3, #7
 800caa6:	f884 3900 	strb.w	r3, [r4, #2304]	; 0x900
 800caaa:	f894 50c9 	ldrb.w	r5, [r4, #201]	; 0xc9
 800caae:	b105      	cbz	r5, 800cab2 <ArtNetNode::HandleAddress()+0x3e>
 800cab0:	3d01      	subs	r5, #1
 800cab2:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
 800cab6:	2900      	cmp	r1, #0
 800cab8:	d148      	bne.n	800cb4c <ArtNetNode::HandleAddress()+0xd8>
 800caba:	462a      	mov	r2, r5
 800cabc:	4620      	mov	r0, r4
 800cabe:	f7ff feee 	bl	800c89e <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800cac2:	f894 10c8 	ldrb.w	r1, [r4, #200]	; 0xc8
 800cac6:	2900      	cmp	r1, #0
 800cac8:	d146      	bne.n	800cb58 <ArtNetNode::HandleAddress()+0xe4>
 800caca:	462a      	mov	r2, r5
 800cacc:	4620      	mov	r0, r4
 800cace:	f7ff ff19 	bl	800c904 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800cad2:	00ad      	lsls	r5, r5, #2
 800cad4:	f204 181b 	addw	r8, r4, #283	; 0x11b
 800cad8:	4627      	mov	r7, r4
 800cada:	f204 191f 	addw	r9, r4, #287	; 0x11f
 800cade:	462e      	mov	r6, r5
 800cae0:	f898 3005 	ldrb.w	r3, [r8, #5]
 800cae4:	2b7f      	cmp	r3, #127	; 0x7f
 800cae6:	d007      	beq.n	800caf8 <ArtNetNode::HandleAddress()+0x84>
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d13b      	bne.n	800cb64 <ArtNetNode::HandleAddress()+0xf0>
 800caec:	2301      	movs	r3, #1
 800caee:	2201      	movs	r2, #1
 800caf0:	4631      	mov	r1, r6
 800caf2:	4620      	mov	r0, r4
 800caf4:	f7ff fdf2 	bl	800c6dc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800caf8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800cafc:	2a7f      	cmp	r2, #127	; 0x7f
 800cafe:	d005      	beq.n	800cb0c <ArtNetNode::HandleAddress()+0x98>
 800cb00:	bbaa      	cbnz	r2, 800cb6e <ArtNetNode::HandleAddress()+0xfa>
 800cb02:	2301      	movs	r3, #1
 800cb04:	4631      	mov	r1, r6
 800cb06:	4620      	mov	r0, r4
 800cb08:	f7ff fde8 	bl	800c6dc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800cb0c:	45c8      	cmp	r8, r9
 800cb0e:	f106 0601 	add.w	r6, r6, #1
 800cb12:	d1e5      	bne.n	800cae0 <ArtNetNode::HandleAddress()+0x6c>
 800cb14:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 800cb18:	f003 0103 	and.w	r1, r3, #3
 800cb1c:	2b53      	cmp	r3, #83	; 0x53
 800cb1e:	4429      	add	r1, r5
 800cb20:	d82b      	bhi.n	800cb7a <ArtNetNode::HandleAddress()+0x106>
 800cb22:	2b4f      	cmp	r3, #79	; 0x4f
 800cb24:	f200 8092 	bhi.w	800cc4c <ArtNetNode::HandleAddress()+0x1d8>
 800cb28:	1e5a      	subs	r2, r3, #1
 800cb2a:	b2d0      	uxtb	r0, r2
 800cb2c:	2812      	cmp	r0, #18
 800cb2e:	d834      	bhi.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cb30:	2a12      	cmp	r2, #18
 800cb32:	d832      	bhi.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cb34:	e8df f002 	tbb	[pc, r2]
 800cb38:	74685c4d 	strbtvc	r5, [r8], #-3149	; 0xfffff3b3
 800cb3c:	80313131 	eorshi	r3, r1, r1, lsr r1
 800cb40:	80808080 	addhi	r8, r0, r0, lsl #1
 800cb44:	85313131 	ldrhi	r3, [r1, #-305]!	; 0xfffffecf
 800cb48:	00858585 	addeq	r8, r5, r5, lsl #11
 800cb4c:	060f      	lsls	r7, r1, #24
 800cb4e:	d5b8      	bpl.n	800cac2 <ArtNetNode::HandleAddress()+0x4e>
 800cb50:	462a      	mov	r2, r5
 800cb52:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800cb56:	e7b1      	b.n	800cabc <ArtNetNode::HandleAddress()+0x48>
 800cb58:	060e      	lsls	r6, r1, #24
 800cb5a:	d5ba      	bpl.n	800cad2 <ArtNetNode::HandleAddress()+0x5e>
 800cb5c:	462a      	mov	r2, r5
 800cb5e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800cb62:	e7b3      	b.n	800cacc <ArtNetNode::HandleAddress()+0x58>
 800cb64:	0618      	lsls	r0, r3, #24
 800cb66:	d5c7      	bpl.n	800caf8 <ArtNetNode::HandleAddress()+0x84>
 800cb68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb6c:	e7bf      	b.n	800caee <ArtNetNode::HandleAddress()+0x7a>
 800cb6e:	0611      	lsls	r1, r2, #24
 800cb70:	d5cc      	bpl.n	800cb0c <ArtNetNode::HandleAddress()+0x98>
 800cb72:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800cb76:	2200      	movs	r2, #0
 800cb78:	e7c4      	b.n	800cb04 <ArtNetNode::HandleAddress()+0x90>
 800cb7a:	2b93      	cmp	r3, #147	; 0x93
 800cb7c:	d81a      	bhi.n	800cbb4 <ArtNetNode::HandleAddress()+0x140>
 800cb7e:	2b8f      	cmp	r3, #143	; 0x8f
 800cb80:	d868      	bhi.n	800cc54 <ArtNetNode::HandleAddress()+0x1e0>
 800cb82:	2b63      	cmp	r3, #99	; 0x63
 800cb84:	d806      	bhi.n	800cb94 <ArtNetNode::HandleAddress()+0x120>
 800cb86:	2b5f      	cmp	r3, #95	; 0x5f
 800cb88:	d907      	bls.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f7ff feec 	bl	800c96a <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800cb92:	e002      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cb94:	3b70      	subs	r3, #112	; 0x70
 800cb96:	2b03      	cmp	r3, #3
 800cb98:	d95a      	bls.n	800cc50 <ArtNetNode::HandleAddress()+0x1dc>
 800cb9a:	69a0      	ldr	r0, [r4, #24]
 800cb9c:	b120      	cbz	r0, 800cba8 <ArtNetNode::HandleAddress()+0x134>
 800cb9e:	6803      	ldr	r3, [r0, #0]
 800cba0:	f894 1126 	ldrb.w	r1, [r4, #294]	; 0x126
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	4798      	blx	r3
 800cba8:	4620      	mov	r0, r4
 800cbaa:	2101      	movs	r1, #1
 800cbac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbb0:	f000 bca4 	b.w	800d4fc <ArtNetNode::SendPollRelply(bool)>
 800cbb4:	2bc3      	cmp	r3, #195	; 0xc3
 800cbb6:	d806      	bhi.n	800cbc6 <ArtNetNode::HandleAddress()+0x152>
 800cbb8:	2bbf      	cmp	r3, #191	; 0xbf
 800cbba:	d9ee      	bls.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f000 fd45 	bl	800d64e <ArtNetNode::SetRmd(unsigned int, bool)>
 800cbc4:	e7e9      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cbc6:	3330      	adds	r3, #48	; 0x30
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	d8e5      	bhi.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cbce:	2200      	movs	r2, #0
 800cbd0:	e7f5      	b.n	800cbbe <ArtNetNode::HandleAddress()+0x14a>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f884 3906 	strb.w	r3, [r4, #2310]	; 0x906
 800cbd8:	f504 6225 	add.w	r2, r4, #2640	; 0xa50
 800cbdc:	f897 3913 	ldrb.w	r3, [r7, #2323]	; 0x913
 800cbe0:	f023 0308 	bic.w	r3, r3, #8
 800cbe4:	f887 3913 	strb.w	r3, [r7, #2323]	; 0x913
 800cbe8:	3728      	adds	r7, #40	; 0x28
 800cbea:	42ba      	cmp	r2, r7
 800cbec:	d1f6      	bne.n	800cbdc <ArtNetNode::HandleAddress()+0x168>
 800cbee:	e7d4      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cbf0:	4b3a      	ldr	r3, [pc, #232]	; (800ccdc <ArtNetNode::HandleAddress()+0x268>)
 800cbf2:	2102      	movs	r1, #2
 800cbf4:	6818      	ldr	r0, [r3, #0]
 800cbf6:	f00b fa8b 	bl	8018110 <LedBlink::SetMode(ledblink::Mode)>
 800cbfa:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
 800cbfe:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800cc02:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 800cc06:	e7c8      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cc08:	4b34      	ldr	r3, [pc, #208]	; (800ccdc <ArtNetNode::HandleAddress()+0x268>)
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	6818      	ldr	r0, [r3, #0]
 800cc0e:	f00b fa7f 	bl	8018110 <LedBlink::SetMode(ledblink::Mode)>
 800cc12:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
 800cc16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc1e:	e7f0      	b.n	800cc02 <ArtNetNode::HandleAddress()+0x18e>
 800cc20:	4b2e      	ldr	r3, [pc, #184]	; (800ccdc <ArtNetNode::HandleAddress()+0x268>)
 800cc22:	2104      	movs	r1, #4
 800cc24:	6818      	ldr	r0, [r3, #0]
 800cc26:	f00b fa73 	bl	8018110 <LedBlink::SetMode(ledblink::Mode)>
 800cc2a:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
 800cc2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc36:	e7e4      	b.n	800cc02 <ArtNetNode::HandleAddress()+0x18e>
 800cc38:	4619      	mov	r1, r3
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f7ff feeb 	bl	800ca16 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800cc40:	e7ab      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cc42:	2201      	movs	r2, #1
 800cc44:	4620      	mov	r0, r4
 800cc46:	f7ff febb 	bl	800c9c0 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800cc4a:	e7a6      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	e7f9      	b.n	800cc44 <ArtNetNode::HandleAddress()+0x1d0>
 800cc50:	2201      	movs	r2, #1
 800cc52:	e79b      	b.n	800cb8c <ArtNetNode::HandleAddress()+0x118>
 800cc54:	4b22      	ldr	r3, [pc, #136]	; (800cce0 <ArtNetNode::HandleAddress()+0x26c>)
 800cc56:	6860      	ldr	r0, [r4, #4]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	07d2      	lsls	r2, r2, #31
 800cc5c:	bf58      	it	pl
 800cc5e:	2201      	movpl	r2, #1
 800cc60:	b2cd      	uxtb	r5, r1
 800cc62:	bf58      	it	pl
 800cc64:	601a      	strpl	r2, [r3, #0]
 800cc66:	f240 6204 	movw	r2, #1540	; 0x604
 800cc6a:	4b1e      	ldr	r3, [pc, #120]	; (800cce4 <ArtNetNode::HandleAddress()+0x270>)
 800cc6c:	436a      	muls	r2, r5
 800cc6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc72:	441a      	add	r2, r3
 800cc74:	f502 7600 	add.w	r6, r2, #512	; 0x200
 800cc78:	4611      	mov	r1, r2
 800cc7a:	2700      	movs	r7, #0
 800cc7c:	428e      	cmp	r6, r1
 800cc7e:	d12a      	bne.n	800ccd6 <ArtNetNode::HandleAddress()+0x262>
 800cc80:	f240 6104 	movw	r1, #1540	; 0x604
 800cc84:	fb01 3105 	mla	r1, r1, r5, r3
 800cc88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc8c:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800cc90:	6801      	ldr	r1, [r0, #0]
 800cc92:	690e      	ldr	r6, [r1, #16]
 800cc94:	4629      	mov	r1, r5
 800cc96:	47b0      	blx	r6
 800cc98:	2d41      	cmp	r5, #65	; 0x41
 800cc9a:	f63f af7e 	bhi.w	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cc9e:	2628      	movs	r6, #40	; 0x28
 800cca0:	fb06 4605 	mla	r6, r6, r5, r4
 800cca4:	f8d6 3930 	ldr.w	r3, [r6, #2352]	; 0x930
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f47f af76 	bne.w	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800ccae:	f896 3935 	ldrb.w	r3, [r6, #2357]	; 0x935
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f47f af71 	bne.w	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800ccb8:	6860      	ldr	r0, [r4, #4]
 800ccba:	6803      	ldr	r3, [r0, #0]
 800ccbc:	4629      	mov	r1, r5
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	4798      	blx	r3
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	f886 3935 	strb.w	r3, [r6, #2357]	; 0x935
 800ccc8:	f896 3913 	ldrb.w	r3, [r6, #2323]	; 0x913
 800cccc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ccd0:	f886 3913 	strb.w	r3, [r6, #2323]	; 0x913
 800ccd4:	e761      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800ccd6:	f801 7b01 	strb.w	r7, [r1], #1
 800ccda:	e7cf      	b.n	800cc7c <ArtNetNode::HandleAddress()+0x208>
 800ccdc:	2000fdc0 	andcs	pc, r0, r0, asr #27
 800cce0:	200006c8 	andcs	r0, r0, r8, asr #13
 800cce4:	20030000 	andcs	r0, r3, r0

0800cce8 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 800cce8:	b510      	push	{r4, lr}
 800ccea:	f240 6304 	movw	r3, #1540	; 0x604
 800ccee:	fb03 0001 	mla	r0, r3, r1, r0
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d100      	bne.n	800ccfa <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 800ccf8:	bd10      	pop	{r4, pc}
 800ccfa:	f810 4b01 	ldrb.w	r4, [r0], #1
 800ccfe:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 800cd02:	42a1      	cmp	r1, r4
 800cd04:	bf38      	it	cc
 800cd06:	4621      	movcc	r1, r4
 800cd08:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	e7f1      	b.n	800ccf4 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

0800cd10 <memcpy.isra.0>:
 800cd10:	3801      	subs	r0, #1
 800cd12:	440a      	add	r2, r1
 800cd14:	4291      	cmp	r1, r2
 800cd16:	d100      	bne.n	800cd1a <memcpy.isra.0+0xa>
 800cd18:	4770      	bx	lr
 800cd1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd1e:	f800 3f01 	strb.w	r3, [r0, #1]!
 800cd22:	e7f7      	b.n	800cd14 <memcpy.isra.0+0x4>

0800cd24 <lightset::Data::Get()>:
 800cd24:	4b03      	ldr	r3, [pc, #12]	; (800cd34 <lightset::Data::Get()+0x10>)
 800cd26:	4804      	ldr	r0, [pc, #16]	; (800cd38 <lightset::Data::Get()+0x14>)
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	07d2      	lsls	r2, r2, #31
 800cd2c:	bf5c      	itt	pl
 800cd2e:	2201      	movpl	r2, #1
 800cd30:	601a      	strpl	r2, [r3, #0]
 800cd32:	4770      	bx	lr
 800cd34:	200006c8 	andcs	r0, r0, r8, asr #13
 800cd38:	20030000 	andcs	r0, r3, r0

0800cd3c <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 800cd3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cd3e:	4604      	mov	r4, r0
 800cd40:	9103      	str	r1, [sp, #12]
 800cd42:	9201      	str	r2, [sp, #4]
 800cd44:	f7ff ffee 	bl	800cd24 <lightset::Data::Get()>
 800cd48:	f240 6304 	movw	r3, #1540	; 0x604
 800cd4c:	435c      	muls	r4, r3
 800cd4e:	1906      	adds	r6, r0, r4
 800cd50:	9a01      	ldr	r2, [sp, #4]
 800cd52:	9903      	ldr	r1, [sp, #12]
 800cd54:	9202      	str	r2, [sp, #8]
 800cd56:	4605      	mov	r5, r0
 800cd58:	4630      	mov	r0, r6
 800cd5a:	9101      	str	r1, [sp, #4]
 800cd5c:	f7ff ffd8 	bl	800cd10 <memcpy.isra.0>
 800cd60:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800cd64:	9a02      	ldr	r2, [sp, #8]
 800cd66:	9901      	ldr	r1, [sp, #4]
 800cd68:	f8c6 2600 	str.w	r2, [r6, #1536]	; 0x600
 800cd6c:	1928      	adds	r0, r5, r4
 800cd6e:	b004      	add	sp, #16
 800cd70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd74:	f7ff bfcc 	b.w	800cd10 <memcpy.isra.0>

0800cd78 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800cd78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cd7c:	4606      	mov	r6, r0
 800cd7e:	9103      	str	r1, [sp, #12]
 800cd80:	9201      	str	r2, [sp, #4]
 800cd82:	461f      	mov	r7, r3
 800cd84:	f7ff ffce 	bl	800cd24 <lightset::Data::Get()>
 800cd88:	f240 6404 	movw	r4, #1540	; 0x604
 800cd8c:	4374      	muls	r4, r6
 800cd8e:	eb00 0804 	add.w	r8, r0, r4
 800cd92:	9a01      	ldr	r2, [sp, #4]
 800cd94:	9903      	ldr	r1, [sp, #12]
 800cd96:	9202      	str	r2, [sp, #8]
 800cd98:	4605      	mov	r5, r0
 800cd9a:	4640      	mov	r0, r8
 800cd9c:	9101      	str	r1, [sp, #4]
 800cd9e:	f7ff ffb7 	bl	800cd10 <memcpy.isra.0>
 800cda2:	9a02      	ldr	r2, [sp, #8]
 800cda4:	9901      	ldr	r1, [sp, #4]
 800cda6:	f8c8 2600 	str.w	r2, [r8, #1536]	; 0x600
 800cdaa:	b937      	cbnz	r7, 800cdba <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 800cdac:	4631      	mov	r1, r6
 800cdae:	4628      	mov	r0, r5
 800cdb0:	b004      	add	sp, #16
 800cdb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb6:	f7ff bf97 	b.w	800cce8 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800cdba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800cdbe:	1928      	adds	r0, r5, r4
 800cdc0:	b004      	add	sp, #16
 800cdc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc6:	f7ff bfa3 	b.w	800cd10 <memcpy.isra.0>

0800cdca <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800cdca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdcc:	b085      	sub	sp, #20
 800cdce:	461f      	mov	r7, r3
 800cdd0:	4606      	mov	r6, r0
 800cdd2:	9103      	str	r1, [sp, #12]
 800cdd4:	9201      	str	r2, [sp, #4]
 800cdd6:	f7ff ffa5 	bl	800cd24 <lightset::Data::Get()>
 800cdda:	f240 6404 	movw	r4, #1540	; 0x604
 800cdde:	4374      	muls	r4, r6
 800cde0:	4605      	mov	r5, r0
 800cde2:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800cde6:	9a01      	ldr	r2, [sp, #4]
 800cde8:	9903      	ldr	r1, [sp, #12]
 800cdea:	9202      	str	r2, [sp, #8]
 800cdec:	4428      	add	r0, r5
 800cdee:	9101      	str	r1, [sp, #4]
 800cdf0:	f7ff ff8e 	bl	800cd10 <memcpy.isra.0>
 800cdf4:	192b      	adds	r3, r5, r4
 800cdf6:	9a02      	ldr	r2, [sp, #8]
 800cdf8:	9901      	ldr	r1, [sp, #4]
 800cdfa:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
 800cdfe:	b937      	cbnz	r7, 800ce0e <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x44>
 800ce00:	4631      	mov	r1, r6
 800ce02:	4628      	mov	r0, r5
 800ce04:	b005      	add	sp, #20
 800ce06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ce0a:	f7ff bf6d 	b.w	800cce8 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800ce0e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ce12:	1928      	adds	r0, r5, r4
 800ce14:	b005      	add	sp, #20
 800ce16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ce1a:	f7ff bf79 	b.w	800cd10 <memcpy.isra.0>

0800ce1e <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 800ce1e:	f890 3906 	ldrb.w	r3, [r0, #2310]	; 0x906
 800ce22:	b91b      	cbnz	r3, 800ce2c <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 800ce24:	f240 1301 	movw	r3, #257	; 0x101
 800ce28:	f8a0 3906 	strh.w	r3, [r0, #2310]	; 0x906
 800ce2c:	2328      	movs	r3, #40	; 0x28
 800ce2e:	fb03 0101 	mla	r1, r3, r1, r0
 800ce32:	f891 3913 	ldrb.w	r3, [r1, #2323]	; 0x913
 800ce36:	f043 0308 	orr.w	r3, r3, #8
 800ce3a:	f881 3913 	strb.w	r3, [r1, #2323]	; 0x913
 800ce3e:	4770      	bx	lr

0800ce40 <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 800ce40:	2328      	movs	r3, #40	; 0x28
 800ce42:	fb03 0301 	mla	r3, r3, r1, r0
 800ce46:	b530      	push	{r4, r5, lr}
 800ce48:	f8d0 2894 	ldr.w	r2, [r0, #2196]	; 0x894
 800ce4c:	f8d3 4918 	ldr.w	r4, [r3, #2328]	; 0x918
 800ce50:	f242 7510 	movw	r5, #10000	; 0x2710
 800ce54:	1b14      	subs	r4, r2, r4
 800ce56:	42ac      	cmp	r4, r5
 800ce58:	d908      	bls.n	800ce6c <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 800ce5a:	2400      	movs	r4, #0
 800ce5c:	f8c3 491c 	str.w	r4, [r3, #2332]	; 0x91c
 800ce60:	f893 4913 	ldrb.w	r4, [r3, #2323]	; 0x913
 800ce64:	f024 0408 	bic.w	r4, r4, #8
 800ce68:	f883 4913 	strb.w	r4, [r3, #2323]	; 0x913
 800ce6c:	2328      	movs	r3, #40	; 0x28
 800ce6e:	fb03 0101 	mla	r1, r3, r1, r0
 800ce72:	f8d1 3920 	ldr.w	r3, [r1, #2336]	; 0x920
 800ce76:	1ad2      	subs	r2, r2, r3
 800ce78:	f242 7310 	movw	r3, #10000	; 0x2710
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d908      	bls.n	800ce92 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 800ce80:	2300      	movs	r3, #0
 800ce82:	f8c1 3924 	str.w	r3, [r1, #2340]	; 0x924
 800ce86:	f891 3913 	ldrb.w	r3, [r1, #2323]	; 0x913
 800ce8a:	f023 0308 	bic.w	r3, r3, #8
 800ce8e:	f881 3913 	strb.w	r3, [r1, #2323]	; 0x913
 800ce92:	4603      	mov	r3, r0
 800ce94:	f500 6425 	add.w	r4, r0, #2640	; 0xa50
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f893 1913 	ldrb.w	r1, [r3, #2323]	; 0x913
 800ce9e:	3328      	adds	r3, #40	; 0x28
 800cea0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800cea4:	429c      	cmp	r4, r3
 800cea6:	ea42 0201 	orr.w	r2, r2, r1
 800ceaa:	d1f6      	bne.n	800ce9a <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x5a>
 800ceac:	b91a      	cbnz	r2, 800ceb6 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x76>
 800ceae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ceb2:	f8a0 3906 	strh.w	r3, [r0, #2310]	; 0x906
 800ceb6:	bd30      	pop	{r4, r5, pc}

0800ceb8 <ArtNetNode::HandleDmx()>:
 800ceb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cebc:	f8b0 70cc 	ldrh.w	r7, [r0, #204]	; 0xcc
 800cec0:	ba7f      	rev16	r7, r7
 800cec2:	b2bf      	uxth	r7, r7
 800cec4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800cec8:	4604      	mov	r4, r0
 800ceca:	bf28      	it	cs
 800cecc:	f44f 7700 	movcs.w	r7, #512	; 0x200
 800ced0:	4605      	mov	r5, r0
 800ced2:	2600      	movs	r6, #0
 800ced4:	f04f 0901 	mov.w	r9, #1
 800ced8:	f100 08ce 	add.w	r8, r0, #206	; 0xce
 800cedc:	f895 3914 	ldrb.w	r3, [r5, #2324]	; 0x914
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d056      	beq.n	800cf92 <ArtNetNode::HandleDmx()+0xda>
 800cee4:	f8d5 3930 	ldr.w	r3, [r5, #2352]	; 0x930
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d152      	bne.n	800cf92 <ArtNetNode::HandleDmx()+0xda>
 800ceec:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
 800cef0:	f8b5 3910 	ldrh.w	r3, [r5, #2320]	; 0x910
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d14c      	bne.n	800cf92 <ArtNetNode::HandleDmx()+0xda>
 800cef8:	f895 3913 	ldrb.w	r3, [r5, #2323]	; 0x913
 800cefc:	f8d5 b91c 	ldr.w	fp, [r5, #2332]	; 0x91c
 800cf00:	f8d5 a924 	ldr.w	sl, [r5, #2340]	; 0x924
 800cf04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf08:	f885 3913 	strb.w	r3, [r5, #2323]	; 0x913
 800cf0c:	f894 3906 	ldrb.w	r3, [r4, #2310]	; 0x906
 800cf10:	b133      	cbz	r3, 800cf20 <ArtNetNode::HandleDmx()+0x68>
 800cf12:	f894 3908 	ldrb.w	r3, [r4, #2312]	; 0x908
 800cf16:	b91b      	cbnz	r3, 800cf20 <ArtNetNode::HandleDmx()+0x68>
 800cf18:	4631      	mov	r1, r6
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	f7ff ff90 	bl	800ce40 <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 800cf20:	ea5b 020a 	orrs.w	r2, fp, sl
 800cf24:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800cf28:	d139      	bne.n	800cf9e <ArtNetNode::HandleDmx()+0xe6>
 800cf2a:	f8c5 391c 	str.w	r3, [r5, #2332]	; 0x91c
 800cf2e:	f8d4 3894 	ldr.w	r3, [r4, #2196]	; 0x894
 800cf32:	f8c5 3918 	str.w	r3, [r5, #2328]	; 0x918
 800cf36:	463a      	mov	r2, r7
 800cf38:	4641      	mov	r1, r8
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	f7ff fefe 	bl	800cd3c <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800cf40:	f894 3905 	ldrb.w	r3, [r4, #2309]	; 0x905
 800cf44:	b9fb      	cbnz	r3, 800cf86 <ArtNetNode::HandleDmx()+0xce>
 800cf46:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800cf4a:	f7ff feeb 	bl	800cd24 <lightset::Data::Get()>
 800cf4e:	f240 6304 	movw	r3, #1540	; 0x604
 800cf52:	4373      	muls	r3, r6
 800cf54:	18c2      	adds	r2, r0, r3
 800cf56:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 800cf5a:	f8da 3000 	ldr.w	r3, [sl]
 800cf5e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800cf62:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800cf66:	1842      	adds	r2, r0, r1
 800cf68:	4631      	mov	r1, r6
 800cf6a:	4650      	mov	r0, sl
 800cf6c:	47d8      	blx	fp
 800cf6e:	f895 3935 	ldrb.w	r3, [r5, #2357]	; 0x935
 800cf72:	b943      	cbnz	r3, 800cf86 <ArtNetNode::HandleDmx()+0xce>
 800cf74:	6860      	ldr	r0, [r4, #4]
 800cf76:	6803      	ldr	r3, [r0, #0]
 800cf78:	4631      	mov	r1, r6
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	4798      	blx	r3
 800cf7e:	f884 9907 	strb.w	r9, [r4, #2311]	; 0x907
 800cf82:	f885 9935 	strb.w	r9, [r5, #2357]	; 0x935
 800cf86:	f894 3909 	ldrb.w	r3, [r4, #2313]	; 0x909
 800cf8a:	f043 0302 	orr.w	r3, r3, #2
 800cf8e:	f884 3909 	strb.w	r3, [r4, #2313]	; 0x909
 800cf92:	3601      	adds	r6, #1
 800cf94:	2e42      	cmp	r6, #66	; 0x42
 800cf96:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800cf9a:	d19f      	bne.n	800cedc <ArtNetNode::HandleDmx()+0x24>
 800cf9c:	e040      	b.n	800d020 <ArtNetNode::HandleDmx()+0x168>
 800cf9e:	459b      	cmp	fp, r3
 800cfa0:	d104      	bne.n	800cfac <ArtNetNode::HandleDmx()+0xf4>
 800cfa2:	f1ba 0f00 	cmp.w	sl, #0
 800cfa6:	d0c2      	beq.n	800cf2e <ArtNetNode::HandleDmx()+0x76>
 800cfa8:	b11b      	cbz	r3, 800cfb2 <ArtNetNode::HandleDmx()+0xfa>
 800cfaa:	e037      	b.n	800d01c <ArtNetNode::HandleDmx()+0x164>
 800cfac:	f1bb 0f00 	cmp.w	fp, #0
 800cfb0:	d132      	bne.n	800d018 <ArtNetNode::HandleDmx()+0x160>
 800cfb2:	459a      	cmp	sl, r3
 800cfb4:	d11d      	bne.n	800cff2 <ArtNetNode::HandleDmx()+0x13a>
 800cfb6:	f8d4 3894 	ldr.w	r3, [r4, #2196]	; 0x894
 800cfba:	f8c5 3920 	str.w	r3, [r5, #2336]	; 0x920
 800cfbe:	f7ff feb1 	bl	800cd24 <lightset::Data::Get()>
 800cfc2:	f240 6304 	movw	r3, #1540	; 0x604
 800cfc6:	fb03 fa06 	mul.w	sl, r3, r6
 800cfca:	4683      	mov	fp, r0
 800cfcc:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 800cfd0:	463a      	mov	r2, r7
 800cfd2:	4641      	mov	r1, r8
 800cfd4:	4458      	add	r0, fp
 800cfd6:	f7ff fe9b 	bl	800cd10 <memcpy.isra.0>
 800cfda:	eb0b 030a 	add.w	r3, fp, sl
 800cfde:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 800cfe2:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800cfe6:	463a      	mov	r2, r7
 800cfe8:	4641      	mov	r1, r8
 800cfea:	4458      	add	r0, fp
 800cfec:	f7ff fe90 	bl	800cd10 <memcpy.isra.0>
 800cff0:	e7a6      	b.n	800cf40 <ArtNetNode::HandleDmx()+0x88>
 800cff2:	b9bb      	cbnz	r3, 800d024 <ArtNetNode::HandleDmx()+0x16c>
 800cff4:	f8c5 391c 	str.w	r3, [r5, #2332]	; 0x91c
 800cff8:	f8d4 3894 	ldr.w	r3, [r4, #2196]	; 0x894
 800cffc:	f8c5 3918 	str.w	r3, [r5, #2328]	; 0x918
 800d000:	4631      	mov	r1, r6
 800d002:	4620      	mov	r0, r4
 800d004:	f7ff ff0b 	bl	800ce1e <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800d008:	463a      	mov	r2, r7
 800d00a:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
 800d00e:	4641      	mov	r1, r8
 800d010:	4630      	mov	r0, r6
 800d012:	f7ff feb1 	bl	800cd78 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800d016:	e793      	b.n	800cf40 <ArtNetNode::HandleDmx()+0x88>
 800d018:	459b      	cmp	fp, r3
 800d01a:	d118      	bne.n	800d04e <ArtNetNode::HandleDmx()+0x196>
 800d01c:	459a      	cmp	sl, r3
 800d01e:	d1eb      	bne.n	800cff8 <ArtNetNode::HandleDmx()+0x140>
 800d020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d024:	f1ba 0f00 	cmp.w	sl, #0
 800d028:	d1e4      	bne.n	800cff4 <ArtNetNode::HandleDmx()+0x13c>
 800d02a:	f8c5 3924 	str.w	r3, [r5, #2340]	; 0x924
 800d02e:	f8d4 3894 	ldr.w	r3, [r4, #2196]	; 0x894
 800d032:	f8c5 3920 	str.w	r3, [r5, #2336]	; 0x920
 800d036:	4631      	mov	r1, r6
 800d038:	4620      	mov	r0, r4
 800d03a:	f7ff fef0 	bl	800ce1e <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800d03e:	463a      	mov	r2, r7
 800d040:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
 800d044:	4641      	mov	r1, r8
 800d046:	4630      	mov	r0, r6
 800d048:	f7ff febf 	bl	800cdca <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800d04c:	e778      	b.n	800cf40 <ArtNetNode::HandleDmx()+0x88>
 800d04e:	f1ba 0f00 	cmp.w	sl, #0
 800d052:	d0ea      	beq.n	800d02a <ArtNetNode::HandleDmx()+0x172>
 800d054:	459a      	cmp	sl, r3
 800d056:	d0ea      	beq.n	800d02e <ArtNetNode::HandleDmx()+0x176>
 800d058:	e7e2      	b.n	800d020 <ArtNetNode::HandleDmx()+0x168>
	...

0800d05c <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 800d05c:	2941      	cmp	r1, #65	; 0x41
 800d05e:	b510      	push	{r4, lr}
 800d060:	d810      	bhi.n	800d084 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x28>
 800d062:	4b09      	ldr	r3, [pc, #36]	; (800d088 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x2c>)
 800d064:	681c      	ldr	r4, [r3, #0]
 800d066:	6963      	ldr	r3, [r4, #20]
 800d068:	69e4      	ldr	r4, [r4, #28]
 800d06a:	4053      	eors	r3, r2
 800d06c:	4223      	tst	r3, r4
 800d06e:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800d072:	f241 3368 	movw	r3, #4968	; 0x1368
 800d076:	bf0d      	iteet	eq
 800d078:	1840      	addeq	r0, r0, r1
 800d07a:	1809      	addne	r1, r1, r0
 800d07c:	6a82      	ldrne	r2, [r0, #40]	; 0x28
 800d07e:	50c2      	streq	r2, [r0, r3]
 800d080:	bf18      	it	ne
 800d082:	50ca      	strne	r2, [r1, r3]
 800d084:	bd10      	pop	{r4, pc}
 800d086:	bf00      	nop
 800d088:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

0800d08c <ArtNetNode::HandleDmxIn()>:
 800d08c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d090:	4f38      	ldr	r7, [pc, #224]	; (800d174 <ArtNetNode::HandleDmxIn()+0xe8>)
 800d092:	4604      	mov	r4, r0
 800d094:	f500 559b 	add.w	r5, r0, #4960	; 0x1360
 800d098:	2600      	movs	r6, #0
 800d09a:	792b      	ldrb	r3, [r5, #4]
 800d09c:	b93b      	cbnz	r3, 800d0ae <ArtNetNode::HandleDmxIn()+0x22>
 800d09e:	3601      	adds	r6, #1
 800d0a0:	2e42      	cmp	r6, #66	; 0x42
 800d0a2:	f105 0510 	add.w	r5, r5, #16
 800d0a6:	d1f8      	bne.n	800d09a <ArtNetNode::HandleDmxIn()+0xe>
 800d0a8:	b004      	add	sp, #16
 800d0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ae:	6920      	ldr	r0, [r4, #16]
 800d0b0:	6803      	ldr	r3, [r0, #0]
 800d0b2:	aa02      	add	r2, sp, #8
 800d0b4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800d0b8:	4631      	mov	r1, r6
 800d0ba:	ab03      	add	r3, sp, #12
 800d0bc:	47c0      	blx	r8
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d03f      	beq.n	800d142 <ArtNetNode::HandleDmxIn()+0xb6>
 800d0c2:	7b2b      	ldrb	r3, [r5, #12]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	732b      	strb	r3, [r5, #12]
 800d0ca:	f884 368b 	strb.w	r3, [r4, #1675]	; 0x68b
 800d0ce:	f884 668c 	strb.w	r6, [r4, #1676]	; 0x68c
 800d0d2:	882b      	ldrh	r3, [r5, #0]
 800d0d4:	f8a4 368d 	strh.w	r3, [r4, #1677]	; 0x68d
 800d0d8:	9b02      	ldr	r3, [sp, #8]
 800d0da:	f504 62d2 	add.w	r2, r4, #1680	; 0x690
 800d0de:	18c1      	adds	r1, r0, r3
 800d0e0:	4281      	cmp	r1, r0
 800d0e2:	d129      	bne.n	800d138 <ArtNetNode::HandleDmxIn()+0xac>
 800d0e4:	07da      	lsls	r2, r3, #31
 800d0e6:	d505      	bpl.n	800d0f4 <ArtNetNode::HandleDmxIn()+0x68>
 800d0e8:	18e2      	adds	r2, r4, r3
 800d0ea:	2100      	movs	r1, #0
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	f882 1691 	strb.w	r1, [r2, #1681]	; 0x691
 800d0f2:	9302      	str	r3, [sp, #8]
 800d0f4:	9b02      	ldr	r3, [sp, #8]
 800d0f6:	f884 3690 	strb.w	r3, [r4, #1680]	; 0x690
 800d0fa:	0a1a      	lsrs	r2, r3, #8
 800d0fc:	2380      	movs	r3, #128	; 0x80
 800d0fe:	f884 268f 	strb.w	r2, [r4, #1679]	; 0x68f
 800d102:	70eb      	strb	r3, [r5, #3]
 800d104:	f641 1336 	movw	r3, #6454	; 0x1936
 800d108:	9300      	str	r3, [sp, #0]
 800d10a:	68ab      	ldr	r3, [r5, #8]
 800d10c:	7820      	ldrb	r0, [r4, #0]
 800d10e:	f240 2212 	movw	r2, #530	; 0x212
 800d112:	f204 617f 	addw	r1, r4, #1663	; 0x67f
 800d116:	f007 ffc7 	bl	80150a8 <udp_send>
 800d11a:	683a      	ldr	r2, [r7, #0]
 800d11c:	2301      	movs	r3, #1
 800d11e:	40b3      	lsls	r3, r6
 800d120:	ea33 0102 	bics.w	r1, r3, r2
 800d124:	d0bb      	beq.n	800d09e <ArtNetNode::HandleDmxIn()+0x12>
 800d126:	4313      	orrs	r3, r2
 800d128:	603b      	str	r3, [r7, #0]
 800d12a:	f894 3909 	ldrb.w	r3, [r4, #2313]	; 0x909
 800d12e:	f043 0301 	orr.w	r3, r3, #1
 800d132:	f884 3909 	strb.w	r3, [r4, #2313]	; 0x909
 800d136:	e7b2      	b.n	800d09e <ArtNetNode::HandleDmxIn()+0x12>
 800d138:	f810 cb01 	ldrb.w	ip, [r0], #1
 800d13c:	f802 cf01 	strb.w	ip, [r2, #1]!
 800d140:	e7ce      	b.n	800d0e0 <ArtNetNode::HandleDmxIn()+0x54>
 800d142:	f995 2003 	ldrsb.w	r2, [r5, #3]
 800d146:	78eb      	ldrb	r3, [r5, #3]
 800d148:	2a00      	cmp	r2, #0
 800d14a:	daa8      	bge.n	800d09e <ArtNetNode::HandleDmxIn()+0x12>
 800d14c:	9a03      	ldr	r2, [sp, #12]
 800d14e:	2a00      	cmp	r2, #0
 800d150:	d1a5      	bne.n	800d09e <ArtNetNode::HandleDmxIn()+0x12>
 800d152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d156:	70eb      	strb	r3, [r5, #3]
 800d158:	2201      	movs	r2, #1
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	40b2      	lsls	r2, r6
 800d15e:	ea23 0302 	bic.w	r3, r3, r2
 800d162:	603b      	str	r3, [r7, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d19a      	bne.n	800d09e <ArtNetNode::HandleDmxIn()+0x12>
 800d168:	f894 3909 	ldrb.w	r3, [r4, #2313]	; 0x909
 800d16c:	f023 0301 	bic.w	r3, r3, #1
 800d170:	e7df      	b.n	800d132 <ArtNetNode::HandleDmxIn()+0xa6>
 800d172:	bf00      	nop
 800d174:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800d178 <memcmp.constprop.0>:
 800d178:	b510      	push	{r4, lr}
 800d17a:	4907      	ldr	r1, [pc, #28]	; (800d198 <memcmp.constprop.0+0x20>)
 800d17c:	1e42      	subs	r2, r0, #1
 800d17e:	3003      	adds	r0, #3
 800d180:	4282      	cmp	r2, r0
 800d182:	d101      	bne.n	800d188 <memcmp.constprop.0+0x10>
 800d184:	2000      	movs	r0, #0
 800d186:	e006      	b.n	800d196 <memcmp.constprop.0+0x1e>
 800d188:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800d18c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d190:	42a3      	cmp	r3, r4
 800d192:	d0f5      	beq.n	800d180 <memcmp.constprop.0+0x8>
 800d194:	1b18      	subs	r0, r3, r4
 800d196:	bd10      	pop	{r4, pc}
 800d198:	200006d4 	ldrdcs	r0, [r0], -r4

0800d19c <memcpy.constprop.0.isra.0>:
 800d19c:	3801      	subs	r0, #1
 800d19e:	1d0b      	adds	r3, r1, #4
 800d1a0:	4299      	cmp	r1, r3
 800d1a2:	d100      	bne.n	800d1a6 <memcpy.constprop.0.isra.0+0xa>
 800d1a4:	4770      	bx	lr
 800d1a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1aa:	f800 2f01 	strb.w	r2, [r0, #1]!
 800d1ae:	e7f7      	b.n	800d1a0 <memcpy.constprop.0.isra.0+0x4>

0800d1b0 <ArtNetNode::HandleIpProg()>:
 800d1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b4:	ed2d 8b02 	vpush	{d8}
 800d1b8:	4d5c      	ldr	r5, [pc, #368]	; (800d32c <ArtNetNode::HandleIpProg()+0x17c>)
 800d1ba:	f890 70ca 	ldrb.w	r7, [r0, #202]	; 0xca
 800d1be:	4604      	mov	r4, r0
 800d1c0:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
 800d1c4:	6828      	ldr	r0, [r5, #0]
 800d1c6:	ee08 3a10 	vmov	s16, r3
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	f890 b005 	ldrb.w	fp, [r0, #5]
 800d1d0:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
 800d1d4:	f06f 0306 	mvn.w	r3, #6
 800d1d8:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 800d1dc:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800d1e0:	2bc0      	cmp	r3, #192	; 0xc0
 800d1e2:	b085      	sub	sp, #20
 800d1e4:	d101      	bne.n	800d1ea <ArtNetNode::HandleIpProg()+0x3a>
 800d1e6:	f008 fe47 	bl	8015e78 <Network::EnableDhcp()>
 800d1ea:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800d1ee:	2b88      	cmp	r3, #136	; 0x88
 800d1f0:	d103      	bne.n	800d1fa <ArtNetNode::HandleIpProg()+0x4a>
 800d1f2:	6828      	ldr	r0, [r5, #0]
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	f008 fd9b 	bl	8015d30 <Network::SetIp(unsigned int)>
 800d1fa:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800d1fe:	2b84      	cmp	r3, #132	; 0x84
 800d200:	4e4b      	ldr	r6, [pc, #300]	; (800d330 <ArtNetNode::HandleIpProg()+0x180>)
 800d202:	f104 08cc 	add.w	r8, r4, #204	; 0xcc
 800d206:	d107      	bne.n	800d218 <ArtNetNode::HandleIpProg()+0x68>
 800d208:	4641      	mov	r1, r8
 800d20a:	4630      	mov	r0, r6
 800d20c:	f7ff ffc6 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d210:	6831      	ldr	r1, [r6, #0]
 800d212:	6828      	ldr	r0, [r5, #0]
 800d214:	f008 fd8c 	bl	8015d30 <Network::SetIp(unsigned int)>
 800d218:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800d21c:	2b82      	cmp	r3, #130	; 0x82
 800d21e:	f104 09d0 	add.w	r9, r4, #208	; 0xd0
 800d222:	d107      	bne.n	800d234 <ArtNetNode::HandleIpProg()+0x84>
 800d224:	4842      	ldr	r0, [pc, #264]	; (800d330 <ArtNetNode::HandleIpProg()+0x180>)
 800d226:	4649      	mov	r1, r9
 800d228:	f7ff ffb8 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d22c:	6831      	ldr	r1, [r6, #0]
 800d22e:	6828      	ldr	r0, [r5, #0]
 800d230:	f008 fdae 	bl	8015d90 <Network::SetNetmask(unsigned int)>
 800d234:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800d238:	2f90      	cmp	r7, #144	; 0x90
 800d23a:	f104 0ad6 	add.w	sl, r4, #214	; 0xd6
 800d23e:	d107      	bne.n	800d250 <ArtNetNode::HandleIpProg()+0xa0>
 800d240:	483b      	ldr	r0, [pc, #236]	; (800d330 <ArtNetNode::HandleIpProg()+0x180>)
 800d242:	4651      	mov	r1, sl
 800d244:	f7ff ffaa 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d248:	6831      	ldr	r1, [r6, #0]
 800d24a:	6828      	ldr	r0, [r5, #0]
 800d24c:	f008 fdb9 	bl	8015dc2 <Network::SetGatewayIp(unsigned int)>
 800d250:	6829      	ldr	r1, [r5, #0]
 800d252:	794a      	ldrb	r2, [r1, #5]
 800d254:	0192      	lsls	r2, r2, #6
 800d256:	f884 20d6 	strb.w	r2, [r4, #214]	; 0xd6
 800d25a:	2200      	movs	r2, #0
 800d25c:	f884 20d7 	strb.w	r2, [r4, #215]	; 0xd7
 800d260:	7948      	ldrb	r0, [r1, #5]
 800d262:	6949      	ldr	r1, [r1, #20]
 800d264:	6031      	str	r1, [r6, #0]
 800d266:	ea8b 0b00 	eor.w	fp, fp, r0
 800d26a:	4640      	mov	r0, r8
 800d26c:	f7ff ff84 	bl	800d178 <memcmp.constprop.0>
 800d270:	492f      	ldr	r1, [pc, #188]	; (800d330 <ArtNetNode::HandleIpProg()+0x180>)
 800d272:	4607      	mov	r7, r0
 800d274:	4640      	mov	r0, r8
 800d276:	f7ff ff91 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d27a:	6829      	ldr	r1, [r5, #0]
 800d27c:	4648      	mov	r0, r9
 800d27e:	69c9      	ldr	r1, [r1, #28]
 800d280:	6031      	str	r1, [r6, #0]
 800d282:	f7ff ff79 	bl	800d178 <memcmp.constprop.0>
 800d286:	492a      	ldr	r1, [pc, #168]	; (800d330 <ArtNetNode::HandleIpProg()+0x180>)
 800d288:	9003      	str	r0, [sp, #12]
 800d28a:	4648      	mov	r0, r9
 800d28c:	f7ff ff86 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d290:	6829      	ldr	r1, [r5, #0]
 800d292:	4650      	mov	r0, sl
 800d294:	6989      	ldr	r1, [r1, #24]
 800d296:	6031      	str	r1, [r6, #0]
 800d298:	f7ff ff6e 	bl	800d178 <memcmp.constprop.0>
 800d29c:	9b03      	ldr	r3, [sp, #12]
 800d29e:	4924      	ldr	r1, [pc, #144]	; (800d330 <ArtNetNode::HandleIpProg()+0x180>)
 800d2a0:	431f      	orrs	r7, r3
 800d2a2:	4307      	orrs	r7, r0
 800d2a4:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800d2a8:	bf0c      	ite	eq
 800d2aa:	465e      	moveq	r6, fp
 800d2ac:	f04b 0601 	orrne.w	r6, fp, #1
 800d2b0:	f7ff ff74 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f641 1336 	movw	r3, #6454	; 0x1936
 800d2ba:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
 800d2be:	f884 20dd 	strb.w	r2, [r4, #221]	; 0xdd
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	ee18 1a10 	vmov	r1, s16
 800d2c8:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800d2cc:	7820      	ldrb	r0, [r4, #0]
 800d2ce:	2222      	movs	r2, #34	; 0x22
 800d2d0:	f007 feea 	bl	80150a8 <udp_send>
 800d2d4:	b32e      	cbz	r6, 800d322 <ArtNetNode::HandleIpProg()+0x172>
 800d2d6:	682a      	ldr	r2, [r5, #0]
 800d2d8:	6953      	ldr	r3, [r2, #20]
 800d2da:	6263      	str	r3, [r4, #36]	; 0x24
 800d2dc:	69d1      	ldr	r1, [r2, #28]
 800d2de:	7952      	ldrb	r2, [r2, #5]
 800d2e0:	ea63 0301 	orn	r3, r3, r1
 800d2e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d2e6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 800d2ea:	f023 0302 	bic.w	r3, r3, #2
 800d2ee:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800d2f2:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 800d2f6:	4641      	mov	r1, r8
 800d2f8:	f204 509a 	addw	r0, r4, #1434	; 0x59a
 800d2fc:	f7ff ff4e 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d300:	4641      	mov	r1, r8
 800d302:	f204 605f 	addw	r0, r4, #1631	; 0x65f
 800d306:	f7ff ff49 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d30a:	f894 3902 	ldrb.w	r3, [r4, #2306]	; 0x902
 800d30e:	b143      	cbz	r3, 800d322 <ArtNetNode::HandleIpProg()+0x172>
 800d310:	2101      	movs	r1, #1
 800d312:	4620      	mov	r0, r4
 800d314:	b005      	add	sp, #20
 800d316:	ecbd 8b02 	vpop	{d8}
 800d31a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31e:	f000 b8ed 	b.w	800d4fc <ArtNetNode::SendPollRelply(bool)>
 800d322:	b005      	add	sp, #20
 800d324:	ecbd 8b02 	vpop	{d8}
 800d328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32c:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 800d330:	200006d4 	ldrdcs	r0, [r0], -r4

0800d334 <memcpy.isra.0>:
 800d334:	3801      	subs	r0, #1
 800d336:	440a      	add	r2, r1
 800d338:	4291      	cmp	r1, r2
 800d33a:	d100      	bne.n	800d33e <memcpy.isra.0+0xa>
 800d33c:	4770      	bx	lr
 800d33e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d342:	f800 3f01 	strb.w	r3, [r0, #1]!
 800d346:	e7f7      	b.n	800d338 <memcpy.isra.0+0x4>

0800d348 <ArtNetNode::FillPollReply()>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	4604      	mov	r4, r0
 800d34c:	f500 60b2 	add.w	r0, r0, #1424	; 0x590
 800d350:	f204 627f 	addw	r2, r4, #1663	; 0x67f
 800d354:	4603      	mov	r3, r0
 800d356:	2100      	movs	r1, #0
 800d358:	429a      	cmp	r2, r3
 800d35a:	d153      	bne.n	800d404 <ArtNetNode::FillPollReply()+0xbc>
 800d35c:	4d2b      	ldr	r5, [pc, #172]	; (800d40c <ArtNetNode::FillPollReply()+0xc4>)
 800d35e:	492c      	ldr	r1, [pc, #176]	; (800d410 <ArtNetNode::FillPollReply()+0xc8>)
 800d360:	2208      	movs	r2, #8
 800d362:	f7ff ffe7 	bl	800d334 <memcpy.isra.0>
 800d366:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800d36a:	f8a4 3598 	strh.w	r3, [r4, #1432]	; 0x598
 800d36e:	4629      	mov	r1, r5
 800d370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d372:	602b      	str	r3, [r5, #0]
 800d374:	f204 509a 	addw	r0, r4, #1434	; 0x59a
 800d378:	2204      	movs	r2, #4
 800d37a:	f7ff ffdb 	bl	800d334 <memcpy.isra.0>
 800d37e:	f641 1336 	movw	r3, #6454	; 0x1936
 800d382:	f8a4 359e 	strh.w	r3, [r4, #1438]	; 0x59e
 800d386:	4b23      	ldr	r3, [pc, #140]	; (800d414 <ArtNetNode::FillPollReply()+0xcc>)
 800d388:	781a      	ldrb	r2, [r3, #0]
 800d38a:	f884 25a0 	strb.w	r2, [r4, #1440]	; 0x5a0
 800d38e:	785b      	ldrb	r3, [r3, #1]
 800d390:	f884 35a1 	strb.w	r3, [r4, #1441]	; 0x5a1
 800d394:	4b20      	ldr	r3, [pc, #128]	; (800d418 <ArtNetNode::FillPollReply()+0xd0>)
 800d396:	781a      	ldrb	r2, [r3, #0]
 800d398:	f884 25a4 	strb.w	r2, [r4, #1444]	; 0x5a4
 800d39c:	785b      	ldrb	r3, [r3, #1]
 800d39e:	f884 35a5 	strb.w	r3, [r4, #1445]	; 0x5a5
 800d3a2:	4b1e      	ldr	r3, [pc, #120]	; (800d41c <ArtNetNode::FillPollReply()+0xd4>)
 800d3a4:	785a      	ldrb	r2, [r3, #1]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	f884 35a9 	strb.w	r3, [r4, #1449]	; 0x5a9
 800d3ac:	f884 25a8 	strb.w	r2, [r4, #1448]	; 0x5a8
 800d3b0:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 800d3b4:	f204 50aa 	addw	r0, r4, #1450	; 0x5aa
 800d3b8:	2212      	movs	r2, #18
 800d3ba:	f7ff ffbb 	bl	800d334 <memcpy.isra.0>
 800d3be:	f104 016e 	add.w	r1, r4, #110	; 0x6e
 800d3c2:	f204 50bc 	addw	r0, r4, #1468	; 0x5bc
 800d3c6:	2240      	movs	r2, #64	; 0x40
 800d3c8:	f7ff ffb4 	bl	800d334 <memcpy.isra.0>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	f884 3658 	strb.w	r3, [r4, #1624]	; 0x658
 800d3d2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800d3d6:	f204 6059 	addw	r0, r4, #1625	; 0x659
 800d3da:	2206      	movs	r2, #6
 800d3dc:	f7ff ffaa 	bl	800d334 <memcpy.isra.0>
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	f204 605f 	addw	r0, r4, #1631	; 0x65f
 800d3e6:	2204      	movs	r2, #4
 800d3e8:	f7ff ffa4 	bl	800d334 <memcpy.isra.0>
 800d3ec:	2304      	movs	r3, #4
 800d3ee:	f884 363d 	strb.w	r3, [r4, #1597]	; 0x63d
 800d3f2:	f104 01b2 	add.w	r1, r4, #178	; 0xb2
 800d3f6:	f204 606a 	addw	r0, r4, #1642	; 0x66a
 800d3fa:	2206      	movs	r2, #6
 800d3fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d400:	f7ff bf98 	b.w	800d334 <memcpy.isra.0>
 800d404:	f803 1b01 	strb.w	r1, [r3], #1
 800d408:	e7a6      	b.n	800d358 <ArtNetNode::FillPollReply()+0x10>
 800d40a:	bf00      	nop
 800d40c:	200006d8 	ldrdcs	r0, [r0], -r8
 800d410:	0801beaf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r9, sl, fp, ip, sp, pc}
 800d414:	0801c0e4 	stmdaeq	r1, {r2, r5, r6, r7, lr, pc}
 800d418:	0801c0e0 	stmdaeq	r1, {r5, r6, r7, lr, pc}
 800d41c:	0801c0e2 	stmdaeq	r1, {r1, r5, r6, r7, lr, pc}

0800d420 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>:
 800d420:	1a8a      	subs	r2, r1, r2
 800d422:	2941      	cmp	r1, #65	; 0x41
 800d424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d428:	4605      	mov	r5, r0
 800d42a:	460e      	mov	r6, r1
 800d42c:	461f      	mov	r7, r3
 800d42e:	eb00 0402 	add.w	r4, r0, r2
 800d432:	d90e      	bls.n	800d452 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x32>
 800d434:	2300      	movs	r3, #0
 800d436:	f884 363e 	strb.w	r3, [r4, #1598]	; 0x63e
 800d43a:	f884 3646 	strb.w	r3, [r4, #1606]	; 0x646
 800d43e:	f884 3665 	strb.w	r3, [r4, #1637]	; 0x665
 800d442:	f884 364e 	strb.w	r3, [r4, #1614]	; 0x64e
 800d446:	f884 3642 	strb.w	r3, [r4, #1602]	; 0x642
 800d44a:	f884 364a 	strb.w	r3, [r4, #1610]	; 0x64a
 800d44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d452:	f04f 0928 	mov.w	r9, #40	; 0x28
 800d456:	fb09 0901 	mla	r9, r9, r1, r0
 800d45a:	f8d9 3930 	ldr.w	r3, [r9, #2352]	; 0x930
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d115      	bne.n	800d48e <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x6e>
 800d462:	6980      	ldr	r0, [r0, #24]
 800d464:	f899 8913 	ldrb.w	r8, [r9, #2323]	; 0x913
 800d468:	6803      	ldr	r3, [r0, #0]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	4798      	blx	r3
 800d46e:	2328      	movs	r3, #40	; 0x28
 800d470:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800d474:	f008 0876 	and.w	r8, r8, #118	; 0x76
 800d478:	fb03 5306 	mla	r3, r3, r6, r5
 800d47c:	ea40 0808 	orr.w	r8, r0, r8
 800d480:	f010 0001 	ands.w	r0, r0, #1
 800d484:	bf08      	it	eq
 800d486:	f8c9 0930 	streq.w	r0, [r9, #2352]	; 0x930
 800d48a:	f883 8913 	strb.w	r8, [r3, #2323]	; 0x913
 800d48e:	2300      	movs	r3, #0
 800d490:	f884 363e 	strb.w	r3, [r4, #1598]	; 0x63e
 800d494:	2328      	movs	r3, #40	; 0x28
 800d496:	fb03 5306 	mla	r3, r3, r6, r5
 800d49a:	f893 3914 	ldrb.w	r3, [r3, #2324]	; 0x914
 800d49e:	b12b      	cbz	r3, 800d4ac <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x8c>
 800d4a0:	2380      	movs	r3, #128	; 0x80
 800d4a2:	f884 363e 	strb.w	r3, [r4, #1598]	; 0x63e
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	603b      	str	r3, [r7, #0]
 800d4ac:	2328      	movs	r3, #40	; 0x28
 800d4ae:	fb03 5306 	mla	r3, r3, r6, r5
 800d4b2:	eb05 1106 	add.w	r1, r5, r6, lsl #4
 800d4b6:	f893 2913 	ldrb.w	r2, [r3, #2323]	; 0x913
 800d4ba:	f884 2646 	strb.w	r2, [r4, #1606]	; 0x646
 800d4be:	f893 292c 	ldrb.w	r2, [r3, #2348]	; 0x92c
 800d4c2:	2a00      	cmp	r2, #0
 800d4c4:	bf14      	ite	ne
 800d4c6:	2240      	movne	r2, #64	; 0x40
 800d4c8:	22c0      	moveq	r2, #192	; 0xc0
 800d4ca:	f884 2665 	strb.w	r2, [r4, #1637]	; 0x665
 800d4ce:	f893 3912 	ldrb.w	r3, [r3, #2322]	; 0x912
 800d4d2:	f884 364e 	strb.w	r3, [r4, #1614]	; 0x64e
 800d4d6:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800d4da:	f891 3364 	ldrb.w	r3, [r1, #868]	; 0x364
 800d4de:	b12b      	cbz	r3, 800d4ec <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0xcc>
 800d4e0:	2340      	movs	r3, #64	; 0x40
 800d4e2:	f884 363e 	strb.w	r3, [r4, #1598]	; 0x63e
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	603b      	str	r3, [r7, #0]
 800d4ec:	f891 3363 	ldrb.w	r3, [r1, #867]	; 0x363
 800d4f0:	f884 3642 	strb.w	r3, [r4, #1602]	; 0x642
 800d4f4:	f891 3362 	ldrb.w	r3, [r1, #866]	; 0x362
 800d4f8:	e7a7      	b.n	800d44a <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x2a>
	...

0800d4fc <ArtNetNode::SendPollRelply(bool)>:
 800d4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d500:	4604      	mov	r4, r0
 800d502:	b087      	sub	sp, #28
 800d504:	b941      	cbnz	r1, 800d518 <ArtNetNode::SendPollRelply(bool)+0x1c>
 800d506:	f890 3901 	ldrb.w	r3, [r0, #2305]	; 0x901
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	bf02      	ittt	eq
 800d50e:	f8d0 38f0 	ldreq.w	r3, [r0, #2288]	; 0x8f0
 800d512:	3301      	addeq	r3, #1
 800d514:	f8c0 38f0 	streq.w	r3, [r0, #2288]	; 0x8f0
 800d518:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
 800d51c:	f884 35a7 	strb.w	r3, [r4, #1447]	; 0x5a7
 800d520:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 800d524:	f884 3664 	strb.w	r3, [r4, #1636]	; 0x664
 800d528:	2601      	movs	r6, #1
 800d52a:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800d52e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 800d5d0 <ArtNetNode::SendPollRelply(bool)+0xd4>
 800d532:	f884 3669 	strb.w	r3, [r4, #1641]	; 0x669
 800d536:	f104 0839 	add.w	r8, r4, #57	; 0x39
 800d53a:	4635      	mov	r5, r6
 800d53c:	f04f 0b00 	mov.w	fp, #0
 800d540:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800d544:	f884 35a2 	strb.w	r3, [r4, #1442]	; 0x5a2
 800d548:	ebb6 0f85 	cmp.w	r6, r5, lsl #2
 800d54c:	f898 3011 	ldrb.w	r3, [r8, #17]
 800d550:	f884 35a3 	strb.w	r3, [r4, #1443]	; 0x5a3
 800d554:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800d558:	bf8c      	ite	hi
 800d55a:	f04f 0901 	movhi.w	r9, #1
 800d55e:	f04f 0904 	movls.w	r9, #4
 800d562:	f884 5663 	strb.w	r5, [r4, #1635]	; 0x663
 800d566:	f8cd b014 	str.w	fp, [sp, #20]
 800d56a:	4617      	mov	r7, r2
 800d56c:	4491      	add	r9, r2
 800d56e:	4639      	mov	r1, r7
 800d570:	ab05      	add	r3, sp, #20
 800d572:	4620      	mov	r0, r4
 800d574:	3701      	adds	r7, #1
 800d576:	9203      	str	r2, [sp, #12]
 800d578:	f7ff ff52 	bl	800d420 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>
 800d57c:	454f      	cmp	r7, r9
 800d57e:	9a03      	ldr	r2, [sp, #12]
 800d580:	d1f5      	bne.n	800d56e <ArtNetNode::SendPollRelply(bool)+0x72>
 800d582:	9b05      	ldr	r3, [sp, #20]
 800d584:	f884 363d 	strb.w	r3, [r4, #1597]	; 0x63d
 800d588:	f604 039d 	addw	r3, r4, #2205	; 0x89d
 800d58c:	9301      	str	r3, [sp, #4]
 800d58e:	f8d4 38f0 	ldr.w	r3, [r4, #2288]	; 0x8f0
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	4652      	mov	r2, sl
 800d596:	f894 3900 	ldrb.w	r3, [r4, #2304]	; 0x900
 800d59a:	2140      	movs	r1, #64	; 0x40
 800d59c:	f204 50fc 	addw	r0, r4, #1532	; 0x5fc
 800d5a0:	f7fd f80c 	bl	800a5bc <snprintf>
 800d5a4:	f641 1336 	movw	r3, #6454	; 0x1936
 800d5a8:	9300      	str	r3, [sp, #0]
 800d5aa:	7820      	ldrb	r0, [r4, #0]
 800d5ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d5ae:	22ef      	movs	r2, #239	; 0xef
 800d5b0:	f504 61b2 	add.w	r1, r4, #1424	; 0x590
 800d5b4:	3501      	adds	r5, #1
 800d5b6:	f007 fd77 	bl	80150a8 <udp_send>
 800d5ba:	2d12      	cmp	r5, #18
 800d5bc:	f106 0604 	add.w	r6, r6, #4
 800d5c0:	d1be      	bne.n	800d540 <ArtNetNode::SendPollRelply(bool)+0x44>
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	f884 3907 	strb.w	r3, [r4, #2311]	; 0x907
 800d5c8:	b007      	add	sp, #28
 800d5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ce:	bf00      	nop
 800d5d0:	0801be9c 	stmdaeq	r1, {r2, r3, r4, r7, r9, sl, fp, ip, sp, pc}

0800d5d4 <ArtNetNode::HandlePoll()>:
 800d5d4:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
 800d5d8:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800d5dc:	f880 3902 	strb.w	r3, [r0, #2306]	; 0x902
 800d5e0:	f012 0304 	ands.w	r3, r2, #4
 800d5e4:	b410      	push	{r4}
 800d5e6:	d02f      	beq.n	800d648 <ArtNetNode::HandlePoll()+0x74>
 800d5e8:	f8d0 18f8 	ldr.w	r1, [r0, #2296]	; 0x8f8
 800d5ec:	f890 4904 	ldrb.w	r4, [r0, #2308]	; 0x904
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	f880 3903 	strb.w	r3, [r0, #2307]	; 0x903
 800d5f6:	b979      	cbnz	r1, 800d618 <ArtNetNode::HandlePoll()+0x44>
 800d5f8:	f8d0 3588 	ldr.w	r3, [r0, #1416]	; 0x588
 800d5fc:	f8c0 38f8 	str.w	r3, [r0, #2296]	; 0x8f8
 800d600:	b19c      	cbz	r4, 800d62a <ArtNetNode::HandlePoll()+0x56>
 800d602:	f890 390c 	ldrb.w	r3, [r0, #2316]	; 0x90c
 800d606:	f890 20c9 	ldrb.w	r2, [r0, #201]	; 0xc9
 800d60a:	4293      	cmp	r3, r2
 800d60c:	bf28      	it	cs
 800d60e:	4613      	movcs	r3, r2
 800d610:	f880 390c 	strb.w	r3, [r0, #2316]	; 0x90c
 800d614:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d616:	e010      	b.n	800d63a <ArtNetNode::HandlePoll()+0x66>
 800d618:	2c00      	cmp	r4, #0
 800d61a:	d1f2      	bne.n	800d602 <ArtNetNode::HandlePoll()+0x2e>
 800d61c:	f8d0 4588 	ldr.w	r4, [r0, #1416]	; 0x588
 800d620:	42a1      	cmp	r1, r4
 800d622:	d002      	beq.n	800d62a <ArtNetNode::HandlePoll()+0x56>
 800d624:	f880 3904 	strb.w	r3, [r0, #2308]	; 0x904
 800d628:	e7eb      	b.n	800d602 <ArtNetNode::HandlePoll()+0x2e>
 800d62a:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
 800d62e:	f880 390c 	strb.w	r3, [r0, #2316]	; 0x90c
 800d632:	0713      	lsls	r3, r2, #28
 800d634:	d5ee      	bpl.n	800d614 <ArtNetNode::HandlePoll()+0x40>
 800d636:	f8d0 3588 	ldr.w	r3, [r0, #1416]	; 0x588
 800d63a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d63e:	f8c0 38f4 	str.w	r3, [r0, #2292]	; 0x8f4
 800d642:	2101      	movs	r1, #1
 800d644:	f7ff bf5a 	b.w	800d4fc <ArtNetNode::SendPollRelply(bool)>
 800d648:	f880 3903 	strb.w	r3, [r0, #2307]	; 0x903
 800d64c:	e7f5      	b.n	800d63a <ArtNetNode::HandlePoll()+0x66>

0800d64e <ArtNetNode::SetRmd(unsigned int, bool)>:
 800d64e:	2328      	movs	r3, #40	; 0x28
 800d650:	fb03 0301 	mla	r3, r3, r1, r0
 800d654:	b570      	push	{r4, r5, r6, lr}
 800d656:	4604      	mov	r4, r0
 800d658:	f893 092c 	ldrb.w	r0, [r3, #2348]	; 0x92c
 800d65c:	f883 292c 	strb.w	r2, [r3, #2348]	; 0x92c
 800d660:	4290      	cmp	r0, r2
 800d662:	460e      	mov	r6, r1
 800d664:	4615      	mov	r5, r2
 800d666:	d011      	beq.n	800d68c <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800d668:	f894 3901 	ldrb.w	r3, [r4, #2305]	; 0x901
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d10d      	bne.n	800d68c <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800d670:	69e0      	ldr	r0, [r4, #28]
 800d672:	b110      	cbz	r0, 800d67a <ArtNetNode::SetRmd(unsigned int, bool)+0x2c>
 800d674:	6803      	ldr	r3, [r0, #0]
 800d676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d678:	4798      	blx	r3
 800d67a:	6a20      	ldr	r0, [r4, #32]
 800d67c:	b130      	cbz	r0, 800d68c <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800d67e:	6803      	ldr	r3, [r0, #0]
 800d680:	462a      	mov	r2, r5
 800d682:	4631      	mov	r1, r6
 800d684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d68a:	4718      	bx	r3
 800d68c:	bd70      	pop	{r4, r5, r6, pc}

0800d68e <ArtNetNode::SendTod(unsigned int)>:
 800d68e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800d692:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d696:	2500      	movs	r5, #0
 800d698:	f880 30c5 	strb.w	r3, [r0, #197]	; 0xc5
 800d69c:	2301      	movs	r3, #1
 800d69e:	4604      	mov	r4, r0
 800d6a0:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
 800d6a4:	f880 50c4 	strb.w	r5, [r0, #196]	; 0xc4
 800d6a8:	68c0      	ldr	r0, [r0, #12]
 800d6aa:	6803      	ldr	r3, [r0, #0]
 800d6ac:	460f      	mov	r7, r1
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	ea4f 0891 	mov.w	r8, r1, lsr #2
 800d6b4:	4798      	blx	r3
 800d6b6:	f007 0303 	and.w	r3, r7, #3
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
 800d6c0:	f108 0301 	add.w	r3, r8, #1
 800d6c4:	fa54 f888 	uxtab	r8, r4, r8
 800d6c8:	f884 50ca 	strb.w	r5, [r4, #202]	; 0xca
 800d6cc:	f884 50cb 	strb.w	r5, [r4, #203]	; 0xcb
 800d6d0:	f884 50cc 	strb.w	r5, [r4, #204]	; 0xcc
 800d6d4:	f884 50cd 	strb.w	r5, [r4, #205]	; 0xcd
 800d6d8:	f884 50ce 	strb.w	r5, [r4, #206]	; 0xce
 800d6dc:	f884 50cf 	strb.w	r5, [r4, #207]	; 0xcf
 800d6e0:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
 800d6e4:	f898 303a 	ldrb.w	r3, [r8, #58]	; 0x3a
 800d6e8:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
 800d6ec:	2328      	movs	r3, #40	; 0x28
 800d6ee:	fb03 4307 	mla	r3, r3, r7, r4
 800d6f2:	f884 50d2 	strb.w	r5, [r4, #210]	; 0xd2
 800d6f6:	f893 3912 	ldrb.w	r3, [r3, #2322]	; 0x912
 800d6fa:	f884 30d3 	strb.w	r3, [r4, #211]	; 0xd3
 800d6fe:	b2c6      	uxtb	r6, r0
 800d700:	68e0      	ldr	r0, [r4, #12]
 800d702:	f884 50d4 	strb.w	r5, [r4, #212]	; 0xd4
 800d706:	f884 50d6 	strb.w	r5, [r4, #214]	; 0xd6
 800d70a:	f884 60d5 	strb.w	r6, [r4, #213]	; 0xd5
 800d70e:	f884 60d7 	strb.w	r6, [r4, #215]	; 0xd7
 800d712:	6803      	ldr	r3, [r0, #0]
 800d714:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
 800d718:	4639      	mov	r1, r7
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	4798      	blx	r3
 800d71e:	2306      	movs	r3, #6
 800d720:	fb03 f206 	mul.w	r2, r3, r6
 800d724:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 800d728:	f641 1336 	movw	r3, #6454	; 0x1936
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	7820      	ldrb	r0, [r4, #0]
 800d730:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d732:	321c      	adds	r2, #28
 800d734:	4629      	mov	r1, r5
 800d736:	f007 fcb7 	bl	80150a8 <udp_send>
 800d73a:	b002      	add	sp, #8
 800d73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d740 <ArtNetNode::HandleTodControl()>:
 800d740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d742:	f890 30d1 	ldrb.w	r3, [r0, #209]	; 0xd1
 800d746:	f890 70d3 	ldrb.w	r7, [r0, #211]	; 0xd3
 800d74a:	4604      	mov	r4, r0
 800d74c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800d750:	4606      	mov	r6, r0
 800d752:	2500      	movs	r5, #0
 800d754:	f896 392c 	ldrb.w	r3, [r6, #2348]	; 0x92c
 800d758:	b34b      	cbz	r3, 800d7ae <ArtNetNode::HandleTodControl()+0x6e>
 800d75a:	f8b6 3910 	ldrh.w	r3, [r6, #2320]	; 0x910
 800d75e:	42bb      	cmp	r3, r7
 800d760:	d125      	bne.n	800d7ae <ArtNetNode::HandleTodControl()+0x6e>
 800d762:	f896 3914 	ldrb.w	r3, [r6, #2324]	; 0x914
 800d766:	b313      	cbz	r3, 800d7ae <ArtNetNode::HandleTodControl()+0x6e>
 800d768:	f896 3935 	ldrb.w	r3, [r6, #2357]	; 0x935
 800d76c:	b13b      	cbz	r3, 800d77e <ArtNetNode::HandleTodControl()+0x3e>
 800d76e:	f894 389c 	ldrb.w	r3, [r4, #2204]	; 0x89c
 800d772:	b923      	cbnz	r3, 800d77e <ArtNetNode::HandleTodControl()+0x3e>
 800d774:	6860      	ldr	r0, [r4, #4]
 800d776:	6803      	ldr	r3, [r0, #0]
 800d778:	4629      	mov	r1, r5
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	4798      	blx	r3
 800d77e:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
 800d782:	2b01      	cmp	r3, #1
 800d784:	d104      	bne.n	800d790 <ArtNetNode::HandleTodControl()+0x50>
 800d786:	68e0      	ldr	r0, [r4, #12]
 800d788:	6803      	ldr	r3, [r0, #0]
 800d78a:	4629      	mov	r1, r5
 800d78c:	689b      	ldr	r3, [r3, #8]
 800d78e:	4798      	blx	r3
 800d790:	4629      	mov	r1, r5
 800d792:	4620      	mov	r0, r4
 800d794:	f7ff ff7b 	bl	800d68e <ArtNetNode::SendTod(unsigned int)>
 800d798:	f896 3935 	ldrb.w	r3, [r6, #2357]	; 0x935
 800d79c:	b13b      	cbz	r3, 800d7ae <ArtNetNode::HandleTodControl()+0x6e>
 800d79e:	f894 389c 	ldrb.w	r3, [r4, #2204]	; 0x89c
 800d7a2:	b923      	cbnz	r3, 800d7ae <ArtNetNode::HandleTodControl()+0x6e>
 800d7a4:	6860      	ldr	r0, [r4, #4]
 800d7a6:	6803      	ldr	r3, [r0, #0]
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	4798      	blx	r3
 800d7ae:	3501      	adds	r5, #1
 800d7b0:	2d42      	cmp	r5, #66	; 0x42
 800d7b2:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800d7b6:	d1cd      	bne.n	800d754 <ArtNetNode::HandleTodControl()+0x14>
 800d7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d7ba <ArtNetNode::HandleTodRequest()>:
 800d7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7bc:	f890 30d1 	ldrb.w	r3, [r0, #209]	; 0xd1
 800d7c0:	f890 70d4 	ldrb.w	r7, [r0, #212]	; 0xd4
 800d7c4:	4604      	mov	r4, r0
 800d7c6:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800d7ca:	4605      	mov	r5, r0
 800d7cc:	2600      	movs	r6, #0
 800d7ce:	f895 392c 	ldrb.w	r3, [r5, #2348]	; 0x92c
 800d7d2:	b153      	cbz	r3, 800d7ea <ArtNetNode::HandleTodRequest()+0x30>
 800d7d4:	f8b5 3910 	ldrh.w	r3, [r5, #2320]	; 0x910
 800d7d8:	42bb      	cmp	r3, r7
 800d7da:	d106      	bne.n	800d7ea <ArtNetNode::HandleTodRequest()+0x30>
 800d7dc:	f895 3914 	ldrb.w	r3, [r5, #2324]	; 0x914
 800d7e0:	b11b      	cbz	r3, 800d7ea <ArtNetNode::HandleTodRequest()+0x30>
 800d7e2:	4631      	mov	r1, r6
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	f7ff ff52 	bl	800d68e <ArtNetNode::SendTod(unsigned int)>
 800d7ea:	3601      	adds	r6, #1
 800d7ec:	2e42      	cmp	r6, #66	; 0x42
 800d7ee:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800d7f2:	d1ec      	bne.n	800d7ce <ArtNetNode::HandleTodRequest()+0x14>
 800d7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d7f6 <ArtNetNode::HandleRdm()>:
 800d7f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7fa:	f890 30d1 	ldrb.w	r3, [r0, #209]	; 0xd1
 800d7fe:	f890 70d3 	ldrb.w	r7, [r0, #211]	; 0xd3
 800d802:	4604      	mov	r4, r0
 800d804:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
 800d808:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800d80c:	4605      	mov	r5, r0
 800d80e:	2600      	movs	r6, #0
 800d810:	f100 09d4 	add.w	r9, r0, #212	; 0xd4
 800d814:	f04f 0a01 	mov.w	sl, #1
 800d818:	f641 1b36 	movw	fp, #6454	; 0x1936
 800d81c:	f895 392c 	ldrb.w	r3, [r5, #2348]	; 0x92c
 800d820:	2b00      	cmp	r3, #0
 800d822:	d049      	beq.n	800d8b8 <ArtNetNode::HandleRdm()+0xc2>
 800d824:	f8b5 3910 	ldrh.w	r3, [r5, #2320]	; 0x910
 800d828:	42bb      	cmp	r3, r7
 800d82a:	d145      	bne.n	800d8b8 <ArtNetNode::HandleRdm()+0xc2>
 800d82c:	f895 3914 	ldrb.w	r3, [r5, #2324]	; 0x914
 800d830:	2b00      	cmp	r3, #0
 800d832:	d041      	beq.n	800d8b8 <ArtNetNode::HandleRdm()+0xc2>
 800d834:	f894 389c 	ldrb.w	r3, [r4, #2204]	; 0x89c
 800d838:	b9c3      	cbnz	r3, 800d86c <ArtNetNode::HandleRdm()+0x76>
 800d83a:	f8d5 3930 	ldr.w	r3, [r5, #2352]	; 0x930
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d10c      	bne.n	800d85c <ArtNetNode::HandleRdm()+0x66>
 800d842:	69a0      	ldr	r0, [r4, #24]
 800d844:	b150      	cbz	r0, 800d85c <ArtNetNode::HandleRdm()+0x66>
 800d846:	6803      	ldr	r3, [r0, #0]
 800d848:	4631      	mov	r1, r6
 800d84a:	691b      	ldr	r3, [r3, #16]
 800d84c:	4798      	blx	r3
 800d84e:	f010 0f89 	tst.w	r0, #137	; 0x89
 800d852:	bf14      	ite	ne
 800d854:	2301      	movne	r3, #1
 800d856:	2300      	moveq	r3, #0
 800d858:	f885 3935 	strb.w	r3, [r5, #2357]	; 0x935
 800d85c:	f895 3935 	ldrb.w	r3, [r5, #2357]	; 0x935
 800d860:	b123      	cbz	r3, 800d86c <ArtNetNode::HandleRdm()+0x76>
 800d862:	6860      	ldr	r0, [r4, #4]
 800d864:	6803      	ldr	r3, [r0, #0]
 800d866:	4631      	mov	r1, r6
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	4798      	blx	r3
 800d86c:	68e0      	ldr	r0, [r4, #12]
 800d86e:	6803      	ldr	r3, [r0, #0]
 800d870:	464a      	mov	r2, r9
 800d872:	695b      	ldr	r3, [r3, #20]
 800d874:	4631      	mov	r1, r6
 800d876:	4798      	blx	r3
 800d878:	b198      	cbz	r0, 800d8a2 <ArtNetNode::HandleRdm()+0xac>
 800d87a:	f884 a0c8 	strb.w	sl, [r4, #200]	; 0xc8
 800d87e:	7881      	ldrb	r1, [r0, #2]
 800d880:	460a      	mov	r2, r1
 800d882:	3102      	adds	r1, #2
 800d884:	1c43      	adds	r3, r0, #1
 800d886:	f104 0cd3 	add.w	ip, r4, #211	; 0xd3
 800d88a:	4408      	add	r0, r1
 800d88c:	4298      	cmp	r0, r3
 800d88e:	d11b      	bne.n	800d8c8 <ArtNetNode::HandleRdm()+0xd2>
 800d890:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800d894:	7820      	ldrb	r0, [r4, #0]
 800d896:	f8cd b000 	str.w	fp, [sp]
 800d89a:	3219      	adds	r2, #25
 800d89c:	4641      	mov	r1, r8
 800d89e:	f007 fc03 	bl	80150a8 <udp_send>
 800d8a2:	f895 3935 	ldrb.w	r3, [r5, #2357]	; 0x935
 800d8a6:	b13b      	cbz	r3, 800d8b8 <ArtNetNode::HandleRdm()+0xc2>
 800d8a8:	f894 389c 	ldrb.w	r3, [r4, #2204]	; 0x89c
 800d8ac:	b923      	cbnz	r3, 800d8b8 <ArtNetNode::HandleRdm()+0xc2>
 800d8ae:	6860      	ldr	r0, [r4, #4]
 800d8b0:	6803      	ldr	r3, [r0, #0]
 800d8b2:	4631      	mov	r1, r6
 800d8b4:	689b      	ldr	r3, [r3, #8]
 800d8b6:	4798      	blx	r3
 800d8b8:	3601      	adds	r6, #1
 800d8ba:	2e42      	cmp	r6, #66	; 0x42
 800d8bc:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800d8c0:	d1ac      	bne.n	800d81c <ArtNetNode::HandleRdm()+0x26>
 800d8c2:	b003      	add	sp, #12
 800d8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c8:	f813 1b01 	ldrb.w	r1, [r3], #1
 800d8cc:	f80c 1f01 	strb.w	r1, [ip, #1]!
 800d8d0:	e7dc      	b.n	800d88c <ArtNetNode::HandleRdm()+0x96>

0800d8d2 <ArtNetNode::SetRdmUID(unsigned char const*, bool)>:
 800d8d2:	b530      	push	{r4, r5, lr}
 800d8d4:	f100 03b1 	add.w	r3, r0, #177	; 0xb1
 800d8d8:	1d8c      	adds	r4, r1, #6
 800d8da:	42a1      	cmp	r1, r4
 800d8dc:	d107      	bne.n	800d8ee <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x1c>
 800d8de:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800d8e2:	b14a      	cbz	r2, 800d8f8 <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x26>
 800d8e4:	f043 0310 	orr.w	r3, r3, #16
 800d8e8:	f880 30b1 	strb.w	r3, [r0, #177]	; 0xb1
 800d8ec:	bd30      	pop	{r4, r5, pc}
 800d8ee:	f811 5b01 	ldrb.w	r5, [r1], #1
 800d8f2:	f803 5f01 	strb.w	r5, [r3, #1]!
 800d8f6:	e7f0      	b.n	800d8da <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x8>
 800d8f8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800d8fc:	e7f4      	b.n	800d8e8 <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x16>
	...

0800d900 <ArtNetNode::HandleSync()>:
 800d900:	2301      	movs	r3, #1
 800d902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d906:	f880 3905 	strb.w	r3, [r0, #2309]	; 0x905
 800d90a:	4b1f      	ldr	r3, [pc, #124]	; (800d988 <ArtNetNode::HandleSync()+0x88>)
 800d90c:	4f1f      	ldr	r7, [pc, #124]	; (800d98c <ArtNetNode::HandleSync()+0x8c>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800d990 <ArtNetNode::HandleSync()+0x90>
 800d914:	f8c0 38fc 	str.w	r3, [r0, #2300]	; 0x8fc
 800d918:	2500      	movs	r5, #0
 800d91a:	4604      	mov	r4, r0
 800d91c:	4606      	mov	r6, r0
 800d91e:	46a9      	mov	r9, r5
 800d920:	f8d6 3930 	ldr.w	r3, [r6, #2352]	; 0x930
 800d924:	bb3b      	cbnz	r3, 800d976 <ArtNetNode::HandleSync()+0x76>
 800d926:	f896 3914 	ldrb.w	r3, [r6, #2324]	; 0x914
 800d92a:	b323      	cbz	r3, 800d976 <ArtNetNode::HandleSync()+0x76>
 800d92c:	f8d8 3000 	ldr.w	r3, [r8]
 800d930:	6860      	ldr	r0, [r4, #4]
 800d932:	07da      	lsls	r2, r3, #31
 800d934:	bf5c      	itt	pl
 800d936:	2301      	movpl	r3, #1
 800d938:	f8c8 3000 	strpl.w	r3, [r8]
 800d93c:	6803      	ldr	r3, [r0, #0]
 800d93e:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800d942:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800d946:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800d94a:	4629      	mov	r1, r5
 800d94c:	47d0      	blx	sl
 800d94e:	f896 3935 	ldrb.w	r3, [r6, #2357]	; 0x935
 800d952:	b93b      	cbnz	r3, 800d964 <ArtNetNode::HandleSync()+0x64>
 800d954:	6860      	ldr	r0, [r4, #4]
 800d956:	6803      	ldr	r3, [r0, #0]
 800d958:	4629      	mov	r1, r5
 800d95a:	689b      	ldr	r3, [r3, #8]
 800d95c:	4798      	blx	r3
 800d95e:	2301      	movs	r3, #1
 800d960:	f886 3935 	strb.w	r3, [r6, #2357]	; 0x935
 800d964:	f8d8 3000 	ldr.w	r3, [r8]
 800d968:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800d96c:	07db      	lsls	r3, r3, #31
 800d96e:	bf5c      	itt	pl
 800d970:	2301      	movpl	r3, #1
 800d972:	f8c8 3000 	strpl.w	r3, [r8]
 800d976:	3501      	adds	r5, #1
 800d978:	2d42      	cmp	r5, #66	; 0x42
 800d97a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800d97e:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800d982:	d1cd      	bne.n	800d920 <ArtNetNode::HandleSync()+0x20>
 800d984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d988:	2000fddc 	ldrdcs	pc, [r0], -ip
 800d98c:	20030000 	andcs	r0, r3, r0
 800d990:	200006c8 	andcs	r0, r0, r8, asr #13

0800d994 <ArtNetNode::HandleTimeCode()>:
 800d994:	4601      	mov	r1, r0
 800d996:	6880      	ldr	r0, [r0, #8]
 800d998:	6803      	ldr	r3, [r0, #0]
 800d99a:	31ca      	adds	r1, #202	; 0xca
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	4718      	bx	r3

0800d9a0 <ArtNetNode::HandleTimeSync()>:
 800d9a0:	b500      	push	{lr}
 800d9a2:	b08b      	sub	sp, #44	; 0x2c
 800d9a4:	f890 30cb 	ldrb.w	r3, [r0, #203]	; 0xcb
 800d9a8:	9301      	str	r3, [sp, #4]
 800d9aa:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
 800d9ae:	9302      	str	r3, [sp, #8]
 800d9b0:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
 800d9b4:	9303      	str	r3, [sp, #12]
 800d9b6:	f890 30ce 	ldrb.w	r3, [r0, #206]	; 0xce
 800d9ba:	9304      	str	r3, [sp, #16]
 800d9bc:	f890 30cf 	ldrb.w	r3, [r0, #207]	; 0xcf
 800d9c0:	f890 20d0 	ldrb.w	r2, [r0, #208]	; 0xd0
 800d9c4:	9305      	str	r3, [sp, #20]
 800d9c6:	f890 30d1 	ldrb.w	r3, [r0, #209]	; 0xd1
 800d9ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d9ce:	9306      	str	r3, [sp, #24]
 800d9d0:	4b03      	ldr	r3, [pc, #12]	; (800d9e0 <ArtNetNode::HandleTimeSync()+0x40>)
 800d9d2:	a901      	add	r1, sp, #4
 800d9d4:	6818      	ldr	r0, [r3, #0]
 800d9d6:	f00a fc59 	bl	801828c <Hardware::SetTime(tm const*)>
 800d9da:	b00b      	add	sp, #44	; 0x2c
 800d9dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9e0:	2000fdc4 	andcs	pc, r0, r4, asr #27

0800d9e4 <ArtNetNode::Print()>:
 800d9e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9e8:	2211      	movs	r2, #17
 800d9ea:	b087      	sub	sp, #28
 800d9ec:	4604      	mov	r4, r0
 800d9ee:	2104      	movs	r1, #4
 800d9f0:	483a      	ldr	r0, [pc, #232]	; (800dadc <ArtNetNode::Print()+0xf8>)
 800d9f2:	f7fc fdbb 	bl	800a56c <printf>
 800d9f6:	4b3a      	ldr	r3, [pc, #232]	; (800dae0 <ArtNetNode::Print()+0xfc>)
 800d9f8:	483a      	ldr	r0, [pc, #232]	; (800dae4 <ArtNetNode::Print()+0x100>)
 800d9fa:	7819      	ldrb	r1, [r3, #0]
 800d9fc:	785a      	ldrb	r2, [r3, #1]
 800d9fe:	f7fc fdb5 	bl	800a56c <printf>
 800da02:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 800da06:	4838      	ldr	r0, [pc, #224]	; (800dae8 <ArtNetNode::Print()+0x104>)
 800da08:	f7fc fdb0 	bl	800a56c <printf>
 800da0c:	4837      	ldr	r0, [pc, #220]	; (800daec <ArtNetNode::Print()+0x108>)
 800da0e:	f104 016e 	add.w	r1, r4, #110	; 0x6e
 800da12:	f7fc fdab 	bl	800a56c <printf>
 800da16:	f894 390a 	ldrb.w	r3, [r4, #2314]	; 0x90a
 800da1a:	b36b      	cbz	r3, 800da78 <ArtNetNode::Print()+0x94>
 800da1c:	4834      	ldr	r0, [pc, #208]	; (800daf0 <ArtNetNode::Print()+0x10c>)
 800da1e:	4f35      	ldr	r7, [pc, #212]	; (800daf4 <ArtNetNode::Print()+0x110>)
 800da20:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800db10 <ArtNetNode::Print()+0x12c>
 800da24:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800db14 <ArtNetNode::Print()+0x130>
 800da28:	f7fc fda0 	bl	800a56c <printf>
 800da2c:	4626      	mov	r6, r4
 800da2e:	2500      	movs	r5, #0
 800da30:	2301      	movs	r3, #1
 800da32:	f10d 0216 	add.w	r2, sp, #22
 800da36:	4629      	mov	r1, r5
 800da38:	4620      	mov	r0, r4
 800da3a:	f7fe fe27 	bl	800c68c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800da3e:	b1b0      	cbz	r0, 800da6e <ArtNetNode::Print()+0x8a>
 800da40:	f8d6 3928 	ldr.w	r3, [r6, #2344]	; 0x928
 800da44:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	bf0c      	ite	eq
 800da4c:	463b      	moveq	r3, r7
 800da4e:	4643      	movne	r3, r8
 800da50:	4629      	mov	r1, r5
 800da52:	4648      	mov	r0, r9
 800da54:	f7fc fd8a 	bl	800a56c <printf>
 800da58:	f8d6 1930 	ldr.w	r1, [r6, #2352]	; 0x930
 800da5c:	4a26      	ldr	r2, [pc, #152]	; (800daf8 <ArtNetNode::Print()+0x114>)
 800da5e:	4b27      	ldr	r3, [pc, #156]	; (800dafc <ArtNetNode::Print()+0x118>)
 800da60:	4827      	ldr	r0, [pc, #156]	; (800db00 <ArtNetNode::Print()+0x11c>)
 800da62:	2900      	cmp	r1, #0
 800da64:	bf0c      	ite	eq
 800da66:	4611      	moveq	r1, r2
 800da68:	4619      	movne	r1, r3
 800da6a:	f7fc fd7f 	bl	800a56c <printf>
 800da6e:	3501      	adds	r5, #1
 800da70:	2d42      	cmp	r5, #66	; 0x42
 800da72:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800da76:	d1db      	bne.n	800da30 <ArtNetNode::Print()+0x4c>
 800da78:	f894 390b 	ldrb.w	r3, [r4, #2315]	; 0x90b
 800da7c:	b353      	cbz	r3, 800dad4 <ArtNetNode::Print()+0xf0>
 800da7e:	4821      	ldr	r0, [pc, #132]	; (800db04 <ArtNetNode::Print()+0x120>)
 800da80:	4f21      	ldr	r7, [pc, #132]	; (800db08 <ArtNetNode::Print()+0x124>)
 800da82:	f7fc fd73 	bl	800a56c <printf>
 800da86:	f504 569b 	add.w	r6, r4, #4960	; 0x1360
 800da8a:	2500      	movs	r5, #0
 800da8c:	3608      	adds	r6, #8
 800da8e:	2300      	movs	r3, #0
 800da90:	f10d 0216 	add.w	r2, sp, #22
 800da94:	4629      	mov	r1, r5
 800da96:	4620      	mov	r0, r4
 800da98:	f7fe fdf8 	bl	800c68c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800da9c:	b1b8      	cbz	r0, 800dace <ArtNetNode::Print()+0xea>
 800da9e:	012b      	lsls	r3, r5, #4
 800daa0:	58f3      	ldr	r3, [r6, r3]
 800daa2:	b92b      	cbnz	r3, 800dab0 <ArtNetNode::Print()+0xcc>
 800daa4:	4b19      	ldr	r3, [pc, #100]	; (800db0c <ArtNetNode::Print()+0x128>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	69da      	ldr	r2, [r3, #28]
 800daaa:	695b      	ldr	r3, [r3, #20]
 800daac:	ea63 0302 	orn	r3, r3, r2
 800dab0:	0e1a      	lsrs	r2, r3, #24
 800dab2:	9202      	str	r2, [sp, #8]
 800dab4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dab8:	9201      	str	r2, [sp, #4]
 800daba:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dabe:	9200      	str	r2, [sp, #0]
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800dac6:	4629      	mov	r1, r5
 800dac8:	4638      	mov	r0, r7
 800daca:	f7fc fd4f 	bl	800a56c <printf>
 800dace:	3501      	adds	r5, #1
 800dad0:	2d42      	cmp	r5, #66	; 0x42
 800dad2:	d1dc      	bne.n	800da8e <ArtNetNode::Print()+0xaa>
 800dad4:	b007      	add	sp, #28
 800dad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dada:	bf00      	nop
 800dadc:	0801becc 	stmdaeq	r1, {r2, r3, r6, r7, r9, sl, fp, ip, sp, pc}
 800dae0:	0801c0e4 	stmdaeq	r1, {r2, r5, r6, r7, lr, pc}
 800dae4:	0801beda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r9, sl, fp, ip, sp, pc}
 800dae8:	0801beef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r9, sl, fp, ip, sp, pc}
 800daec:	0801bf01 	stmdaeq	r1, {r0, r8, r9, sl, fp, ip, sp, pc}
 800daf0:	0801bf13 	stmdaeq	r1, {r0, r1, r4, r8, r9, sl, fp, ip, sp, pc}
 800daf4:	0801beb7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r9, sl, fp, ip, sp, pc}
 800daf8:	0801bebf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r9, sl, fp, ip, sp, pc}
 800dafc:	0801bec7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r9, sl, fp, ip, sp, pc}
 800db00:	0801bf30 	stmdaeq	r1, {r4, r5, r8, r9, sl, fp, ip, sp, pc}
 800db04:	0801bf37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, r9, sl, fp, ip, sp, pc}
 800db08:	0801bf3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp, pc}
 800db0c:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 800db10:	0801bebb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, fp, ip, sp, pc}
 800db14:	0801bf1c 	stmdaeq	r1, {r2, r3, r4, r8, r9, sl, fp, ip, sp, pc}

0800db18 <memcmp>:
 800db18:	4402      	add	r2, r0
 800db1a:	4290      	cmp	r0, r2
 800db1c:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800db20:	d106      	bne.n	800db30 <memcmp+0x18>
 800db22:	2000      	movs	r0, #0
 800db24:	4770      	bx	lr
 800db26:	3001      	adds	r0, #1
 800db28:	4290      	cmp	r0, r2
 800db2a:	d102      	bne.n	800db32 <memcmp+0x1a>
 800db2c:	2000      	movs	r0, #0
 800db2e:	e006      	b.n	800db3e <memcmp+0x26>
 800db30:	b510      	push	{r4, lr}
 800db32:	7803      	ldrb	r3, [r0, #0]
 800db34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800db38:	42a3      	cmp	r3, r4
 800db3a:	d0f4      	beq.n	800db26 <memcmp+0xe>
 800db3c:	1b18      	subs	r0, r3, r4
 800db3e:	bd10      	pop	{r4, pc}

0800db40 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800db40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db42:	88c6      	ldrh	r6, [r0, #6]
 800db44:	8885      	ldrh	r5, [r0, #4]
 800db46:	42ae      	cmp	r6, r5
 800db48:	d216      	bcs.n	800db78 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800db4a:	4604      	mov	r4, r0
 800db4c:	6800      	ldr	r0, [r0, #0]
 800db4e:	1bad      	subs	r5, r5, r6
 800db50:	4430      	add	r0, r6
 800db52:	7a26      	ldrb	r6, [r4, #8]
 800db54:	b923      	cbnz	r3, 800db60 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800db56:	b926      	cbnz	r6, 800db62 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800db58:	9200      	str	r2, [sp, #0]
 800db5a:	460b      	mov	r3, r1
 800db5c:	4a09      	ldr	r2, [pc, #36]	; (800db84 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800db5e:	e003      	b.n	800db68 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800db60:	b166      	cbz	r6, 800db7c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800db62:	9200      	str	r2, [sp, #0]
 800db64:	4a08      	ldr	r2, [pc, #32]	; (800db88 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800db66:	460b      	mov	r3, r1
 800db68:	4629      	mov	r1, r5
 800db6a:	f7fc fd27 	bl	800a5bc <snprintf>
 800db6e:	4285      	cmp	r5, r0
 800db70:	bfa2      	ittt	ge
 800db72:	88e3      	ldrhge	r3, [r4, #6]
 800db74:	181b      	addge	r3, r3, r0
 800db76:	80e3      	strhge	r3, [r4, #6]
 800db78:	b002      	add	sp, #8
 800db7a:	bd70      	pop	{r4, r5, r6, pc}
 800db7c:	9200      	str	r2, [sp, #0]
 800db7e:	460b      	mov	r3, r1
 800db80:	4a02      	ldr	r2, [pc, #8]	; (800db8c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800db82:	e7f1      	b.n	800db68 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800db84:	0801aff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800db88:	0801afec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800db8c:	0801aff6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}

0800db90 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800db90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db92:	88c6      	ldrh	r6, [r0, #6]
 800db94:	8885      	ldrh	r5, [r0, #4]
 800db96:	42ae      	cmp	r6, r5
 800db98:	d216      	bcs.n	800dbc8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800db9a:	4604      	mov	r4, r0
 800db9c:	6800      	ldr	r0, [r0, #0]
 800db9e:	1bad      	subs	r5, r5, r6
 800dba0:	4430      	add	r0, r6
 800dba2:	7a26      	ldrb	r6, [r4, #8]
 800dba4:	b923      	cbnz	r3, 800dbb0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800dba6:	b926      	cbnz	r6, 800dbb2 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800dba8:	9200      	str	r2, [sp, #0]
 800dbaa:	460b      	mov	r3, r1
 800dbac:	4a09      	ldr	r2, [pc, #36]	; (800dbd4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800dbae:	e003      	b.n	800dbb8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800dbb0:	b166      	cbz	r6, 800dbcc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800dbb2:	9200      	str	r2, [sp, #0]
 800dbb4:	4a08      	ldr	r2, [pc, #32]	; (800dbd8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	4629      	mov	r1, r5
 800dbba:	f7fc fcff 	bl	800a5bc <snprintf>
 800dbbe:	4285      	cmp	r5, r0
 800dbc0:	bfa2      	ittt	ge
 800dbc2:	88e3      	ldrhge	r3, [r4, #6]
 800dbc4:	181b      	addge	r3, r3, r0
 800dbc6:	80e3      	strhge	r3, [r4, #6]
 800dbc8:	b002      	add	sp, #8
 800dbca:	bd70      	pop	{r4, r5, r6, pc}
 800dbcc:	9200      	str	r2, [sp, #0]
 800dbce:	460b      	mov	r3, r1
 800dbd0:	4a02      	ldr	r2, [pc, #8]	; (800dbdc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800dbd2:	e7f1      	b.n	800dbb8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800dbd4:	0801b008 	stmdaeq	r1, {r3, ip, sp, pc}
 800dbd8:	0801affd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800dbdc:	0801b009 	stmdaeq	r1, {r0, r3, ip, sp, pc}

0800dbe0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800dbe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	8885      	ldrh	r5, [r0, #4]
 800dbe6:	88c1      	ldrh	r1, [r0, #6]
 800dbe8:	42a9      	cmp	r1, r5
 800dbea:	d214      	bcs.n	800dc16 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800dbec:	4604      	mov	r4, r0
 800dbee:	6800      	ldr	r0, [r0, #0]
 800dbf0:	1a6d      	subs	r5, r5, r1
 800dbf2:	4408      	add	r0, r1
 800dbf4:	7a21      	ldrb	r1, [r4, #8]
 800dbf6:	b91a      	cbnz	r2, 800dc00 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800dbf8:	b919      	cbnz	r1, 800dc02 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800dbfa:	4a0a      	ldr	r2, [pc, #40]	; (800dc24 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800dbfc:	9100      	str	r1, [sp, #0]
 800dbfe:	e002      	b.n	800dc06 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800dc00:	b159      	cbz	r1, 800dc1a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800dc02:	9200      	str	r2, [sp, #0]
 800dc04:	4a08      	ldr	r2, [pc, #32]	; (800dc28 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800dc06:	4629      	mov	r1, r5
 800dc08:	f7fc fcd8 	bl	800a5bc <snprintf>
 800dc0c:	4285      	cmp	r5, r0
 800dc0e:	bfa2      	ittt	ge
 800dc10:	88e3      	ldrhge	r3, [r4, #6]
 800dc12:	181b      	addge	r3, r3, r0
 800dc14:	80e3      	strhge	r3, [r4, #6]
 800dc16:	b003      	add	sp, #12
 800dc18:	bd30      	pop	{r4, r5, pc}
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	9200      	str	r2, [sp, #0]
 800dc1e:	4a03      	ldr	r2, [pc, #12]	; (800dc2c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800dc20:	e7f1      	b.n	800dc06 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800dc22:	bf00      	nop
 800dc24:	0801aff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800dc28:	0801afec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800dc2c:	0801aff6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}

0800dc30 <strncpy.isra.0>:
 800dc30:	1e4b      	subs	r3, r1, #1
 800dc32:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800dc36:	b909      	cbnz	r1, 800dc3c <strncpy.isra.0+0xc>
 800dc38:	f00a bc42 	b.w	80184c0 <memset>
 800dc3c:	3a01      	subs	r2, #1
 800dc3e:	f800 1b01 	strb.w	r1, [r0], #1
 800dc42:	d1f6      	bne.n	800dc32 <strncpy.isra.0+0x2>
 800dc44:	4770      	bx	lr
	...

0800dc48 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800dc48:	b510      	push	{r4, lr}
 800dc4a:	2287      	movs	r2, #135	; 0x87
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	f840 1b04 	str.w	r1, [r0], #4
 800dc52:	2100      	movs	r1, #0
 800dc54:	f00a fc34 	bl	80184c0 <memset>
 800dc58:	2301      	movs	r3, #1
 800dc5a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800dc5e:	f240 3302 	movw	r3, #770	; 0x302
 800dc62:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800dc66:	2355      	movs	r3, #85	; 0x55
 800dc68:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800dc72:	4b04      	ldr	r3, [pc, #16]	; (800dc84 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x3c>)
 800dc74:	6819      	ldr	r1, [r3, #0]
 800dc76:	2204      	movs	r2, #4
 800dc78:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
 800dc7c:	b901      	cbnz	r1, 800dc80 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x38>
 800dc7e:	601a      	str	r2, [r3, #0]
 800dc80:	4620      	mov	r0, r4
 800dc82:	bd10      	pop	{r4, pc}
 800dc84:	200006dc 	ldrdcs	r0, [r0], -ip

0800dc88 <ArtNetParams::Load()>:
 800dc88:	b508      	push	{r3, lr}
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	4601      	mov	r1, r0
 800dc8e:	6043      	str	r3, [r0, #4]
 800dc90:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800dc94:	6800      	ldr	r0, [r0, #0]
 800dc96:	b120      	cbz	r0, 800dca2 <ArtNetParams::Load()+0x1a>
 800dc98:	6803      	ldr	r3, [r0, #0]
 800dc9a:	3104      	adds	r1, #4
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	4798      	blx	r3
 800dca0:	2001      	movs	r0, #1
 800dca2:	bd08      	pop	{r3, pc}

0800dca4 <ArtNetParams::Load(char const*, unsigned int)>:
 800dca4:	6803      	ldr	r3, [r0, #0]
 800dca6:	b1e3      	cbz	r3, 800dce2 <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800dca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcaa:	2300      	movs	r3, #0
 800dcac:	6043      	str	r3, [r0, #4]
 800dcae:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	460d      	mov	r5, r1
 800dcb6:	4616      	mov	r6, r2
 800dcb8:	490a      	ldr	r1, [pc, #40]	; (800dce4 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800dcba:	4602      	mov	r2, r0
 800dcbc:	4668      	mov	r0, sp
 800dcbe:	f009 fd55 	bl	801776c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800dcc2:	4632      	mov	r2, r6
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	4668      	mov	r0, sp
 800dcc8:	f009 fd54 	bl	8017774 <ReadConfigFile::Read(char const*, unsigned int)>
 800dccc:	4621      	mov	r1, r4
 800dcce:	f851 0b04 	ldr.w	r0, [r1], #4
 800dcd2:	6803      	ldr	r3, [r0, #0]
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	4798      	blx	r3
 800dcd8:	4668      	mov	r0, sp
 800dcda:	f009 fd4a 	bl	8017772 <ReadConfigFile::~ReadConfigFile()>
 800dcde:	b002      	add	sp, #8
 800dce0:	bd70      	pop	{r4, r5, r6, pc}
 800dce2:	4770      	bx	lr
 800dce4:	0800e0cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sp, lr, pc}

0800dce8 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800dce8:	6843      	ldr	r3, [r0, #4]
 800dcea:	b111      	cbz	r1, 800dcf2 <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800dcec:	431a      	orrs	r2, r3
 800dcee:	6042      	str	r2, [r0, #4]
 800dcf0:	4770      	bx	lr
 800dcf2:	ea23 0202 	bic.w	r2, r3, r2
 800dcf6:	e7fa      	b.n	800dcee <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800dcf8 <ArtNetParams::callbackFunction(char const*)>:
 800dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfc:	460e      	mov	r6, r1
 800dcfe:	b0a7      	sub	sp, #156	; 0x9c
 800dd00:	4604      	mov	r4, r0
 800dd02:	499e      	ldr	r1, [pc, #632]	; (800df7c <ArtNetParams::callbackFunction(char const*)+0x284>)
 800dd04:	f10d 020f 	add.w	r2, sp, #15
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f009 fe64 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800dd0e:	b940      	cbnz	r0, 800dd22 <ArtNetParams::callbackFunction(char const*)+0x2a>
 800dd10:	2220      	movs	r2, #32
 800dd12:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800dd16:	4620      	mov	r0, r4
 800dd18:	b027      	add	sp, #156	; 0x9c
 800dd1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1e:	f7ff bfe3 	b.w	800dce8 <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800dd22:	2708      	movs	r7, #8
 800dd24:	4996      	ldr	r1, [pc, #600]	; (800df80 <ArtNetParams::callbackFunction(char const*)+0x288>)
 800dd26:	9705      	str	r7, [sp, #20]
 800dd28:	ab05      	add	r3, sp, #20
 800dd2a:	aa06      	add	r2, sp, #24
 800dd2c:	4630      	mov	r0, r6
 800dd2e:	f009 fd55 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800dd32:	bb40      	cbnz	r0, 800dd86 <ArtNetParams::callbackFunction(char const*)+0x8e>
 800dd34:	4993      	ldr	r1, [pc, #588]	; (800df84 <ArtNetParams::callbackFunction(char const*)+0x28c>)
 800dd36:	2204      	movs	r2, #4
 800dd38:	a806      	add	r0, sp, #24
 800dd3a:	f7ff feed 	bl	800db18 <memcmp>
 800dd3e:	6865      	ldr	r5, [r4, #4]
 800dd40:	b188      	cbz	r0, 800dd66 <ArtNetParams::callbackFunction(char const*)+0x6e>
 800dd42:	4991      	ldr	r1, [pc, #580]	; (800df88 <ArtNetParams::callbackFunction(char const*)+0x290>)
 800dd44:	2203      	movs	r2, #3
 800dd46:	a806      	add	r0, sp, #24
 800dd48:	f7ff fee6 	bl	800db18 <memcmp>
 800dd4c:	b198      	cbz	r0, 800dd76 <ArtNetParams::callbackFunction(char const*)+0x7e>
 800dd4e:	498f      	ldr	r1, [pc, #572]	; (800df8c <ArtNetParams::callbackFunction(char const*)+0x294>)
 800dd50:	2202      	movs	r2, #2
 800dd52:	a806      	add	r0, sp, #24
 800dd54:	f7ff fee0 	bl	800db18 <memcmp>
 800dd58:	b188      	cbz	r0, 800dd7e <ArtNetParams::callbackFunction(char const*)+0x86>
 800dd5a:	498d      	ldr	r1, [pc, #564]	; (800df90 <ArtNetParams::callbackFunction(char const*)+0x298>)
 800dd5c:	463a      	mov	r2, r7
 800dd5e:	a806      	add	r0, sp, #24
 800dd60:	f7ff feda 	bl	800db18 <memcmp>
 800dd64:	b168      	cbz	r0, 800dd82 <ArtNetParams::callbackFunction(char const*)+0x8a>
 800dd66:	f025 0510 	bic.w	r5, r5, #16
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	6065      	str	r5, [r4, #4]
 800dd6e:	72a3      	strb	r3, [r4, #10]
 800dd70:	b027      	add	sp, #156	; 0x9c
 800dd72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd76:	2301      	movs	r3, #1
 800dd78:	f045 0510 	orr.w	r5, r5, #16
 800dd7c:	e7f6      	b.n	800dd6c <ArtNetParams::callbackFunction(char const*)+0x74>
 800dd7e:	2302      	movs	r3, #2
 800dd80:	e7fa      	b.n	800dd78 <ArtNetParams::callbackFunction(char const*)+0x80>
 800dd82:	2303      	movs	r3, #3
 800dd84:	e7f8      	b.n	800dd78 <ArtNetParams::callbackFunction(char const*)+0x80>
 800dd86:	2311      	movs	r3, #17
 800dd88:	9305      	str	r3, [sp, #20]
 800dd8a:	4982      	ldr	r1, [pc, #520]	; (800df94 <ArtNetParams::callbackFunction(char const*)+0x29c>)
 800dd8c:	ab05      	add	r3, sp, #20
 800dd8e:	f104 0210 	add.w	r2, r4, #16
 800dd92:	4630      	mov	r0, r6
 800dd94:	f009 fd22 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800dd98:	b938      	cbnz	r0, 800ddaa <ArtNetParams::callbackFunction(char const*)+0xb2>
 800dd9a:	9b05      	ldr	r3, [sp, #20]
 800dd9c:	4423      	add	r3, r4
 800dd9e:	7418      	strb	r0, [r3, #16]
 800dda0:	6863      	ldr	r3, [r4, #4]
 800dda2:	f043 0302 	orr.w	r3, r3, #2
 800dda6:	6063      	str	r3, [r4, #4]
 800dda8:	e7e2      	b.n	800dd70 <ArtNetParams::callbackFunction(char const*)+0x78>
 800ddaa:	233f      	movs	r3, #63	; 0x3f
 800ddac:	9305      	str	r3, [sp, #20]
 800ddae:	497a      	ldr	r1, [pc, #488]	; (800df98 <ArtNetParams::callbackFunction(char const*)+0x2a0>)
 800ddb0:	ab05      	add	r3, sp, #20
 800ddb2:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f009 fd10 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800ddbc:	b938      	cbnz	r0, 800ddce <ArtNetParams::callbackFunction(char const*)+0xd6>
 800ddbe:	9b05      	ldr	r3, [sp, #20]
 800ddc0:	4423      	add	r3, r4
 800ddc2:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800ddc6:	6863      	ldr	r3, [r4, #4]
 800ddc8:	f043 0301 	orr.w	r3, r3, #1
 800ddcc:	e7eb      	b.n	800dda6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800ddce:	4973      	ldr	r1, [pc, #460]	; (800df9c <ArtNetParams::callbackFunction(char const*)+0x2a4>)
 800ddd0:	f10d 020f 	add.w	r2, sp, #15
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	f009 fdfe 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ddda:	b950      	cbnz	r0, 800ddf2 <ArtNetParams::callbackFunction(char const*)+0xfa>
 800dddc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800dde0:	6863      	ldr	r3, [r4, #4]
 800dde2:	7222      	strb	r2, [r4, #8]
 800dde4:	b112      	cbz	r2, 800ddec <ArtNetParams::callbackFunction(char const*)+0xf4>
 800dde6:	f043 0304 	orr.w	r3, r3, #4
 800ddea:	e7dc      	b.n	800dda6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800ddec:	f023 0304 	bic.w	r3, r3, #4
 800ddf0:	e7d9      	b.n	800dda6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800ddf2:	496b      	ldr	r1, [pc, #428]	; (800dfa0 <ArtNetParams::callbackFunction(char const*)+0x2a8>)
 800ddf4:	f10d 020f 	add.w	r2, sp, #15
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	f009 fdec 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ddfe:	b950      	cbnz	r0, 800de16 <ArtNetParams::callbackFunction(char const*)+0x11e>
 800de00:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800de04:	6863      	ldr	r3, [r4, #4]
 800de06:	7262      	strb	r2, [r4, #9]
 800de08:	b112      	cbz	r2, 800de10 <ArtNetParams::callbackFunction(char const*)+0x118>
 800de0a:	f043 0308 	orr.w	r3, r3, #8
 800de0e:	e7ca      	b.n	800dda6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800de10:	f023 0308 	bic.w	r3, r3, #8
 800de14:	e7c7      	b.n	800dda6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800de16:	f8df 9198 	ldr.w	r9, [pc, #408]	; 800dfb0 <ArtNetParams::callbackFunction(char const*)+0x2b8>
 800de1a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 800dfb4 <ArtNetParams::callbackFunction(char const*)+0x2bc>
 800de1e:	f8df b198 	ldr.w	fp, [pc, #408]	; 800dfb8 <ArtNetParams::callbackFunction(char const*)+0x2c0>
 800de22:	2500      	movs	r5, #0
 800de24:	f10d 020f 	add.w	r2, sp, #15
 800de28:	4649      	mov	r1, r9
 800de2a:	4630      	mov	r0, r6
 800de2c:	f009 fdd3 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800de30:	b9a8      	cbnz	r0, 800de5e <ArtNetParams::callbackFunction(char const*)+0x166>
 800de32:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800de36:	6862      	ldr	r2, [r4, #4]
 800de38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800de3c:	280f      	cmp	r0, #15
 800de3e:	fa03 f305 	lsl.w	r3, r3, r5
 800de42:	eb04 0105 	add.w	r1, r4, r5
 800de46:	d803      	bhi.n	800de50 <ArtNetParams::callbackFunction(char const*)+0x158>
 800de48:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800de4c:	4313      	orrs	r3, r2
 800de4e:	e7aa      	b.n	800dda6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800de50:	3501      	adds	r5, #1
 800de52:	ea22 0203 	bic.w	r2, r2, r3
 800de56:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800de5a:	6062      	str	r2, [r4, #4]
 800de5c:	e788      	b.n	800dd70 <ArtNetParams::callbackFunction(char const*)+0x78>
 800de5e:	4951      	ldr	r1, [pc, #324]	; (800dfa4 <ArtNetParams::callbackFunction(char const*)+0x2ac>)
 800de60:	2712      	movs	r7, #18
 800de62:	2303      	movs	r3, #3
 800de64:	436f      	muls	r7, r5
 800de66:	9305      	str	r3, [sp, #20]
 800de68:	aa06      	add	r2, sp, #24
 800de6a:	ab05      	add	r3, sp, #20
 800de6c:	4439      	add	r1, r7
 800de6e:	4630      	mov	r0, r6
 800de70:	f009 fcb4 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800de74:	bb08      	cbnz	r0, 800deba <ArtNetParams::callbackFunction(char const*)+0x1c2>
 800de76:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800de7a:	6863      	ldr	r3, [r4, #4]
 800de7c:	f041 0120 	orr.w	r1, r1, #32
 800de80:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800de84:	296c      	cmp	r1, #108	; 0x6c
 800de86:	fa02 f205 	lsl.w	r2, r2, r5
 800de8a:	4425      	add	r5, r4
 800de8c:	d10f      	bne.n	800deae <ArtNetParams::callbackFunction(char const*)+0x1b6>
 800de8e:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800de92:	f041 0120 	orr.w	r1, r1, #32
 800de96:	2974      	cmp	r1, #116	; 0x74
 800de98:	d109      	bne.n	800deae <ArtNetParams::callbackFunction(char const*)+0x1b6>
 800de9a:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800de9e:	f041 0120 	orr.w	r1, r1, #32
 800dea2:	2970      	cmp	r1, #112	; 0x70
 800dea4:	d103      	bne.n	800deae <ArtNetParams::callbackFunction(char const*)+0x1b6>
 800dea6:	2101      	movs	r1, #1
 800dea8:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800deac:	e7ce      	b.n	800de4c <ArtNetParams::callbackFunction(char const*)+0x154>
 800deae:	2100      	movs	r1, #0
 800deb0:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800deb4:	ea23 0302 	bic.w	r3, r3, r2
 800deb8:	e775      	b.n	800dda6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800deba:	493b      	ldr	r1, [pc, #236]	; (800dfa8 <ArtNetParams::callbackFunction(char const*)+0x2b0>)
 800debc:	f04f 0a04 	mov.w	sl, #4
 800dec0:	ab05      	add	r3, sp, #20
 800dec2:	aa06      	add	r2, sp, #24
 800dec4:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800dec8:	4630      	mov	r0, r6
 800deca:	f8cd a014 	str.w	sl, [sp, #20]
 800dece:	f009 fc85 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800ded2:	b9a0      	cbnz	r0, 800defe <ArtNetParams::callbackFunction(char const*)+0x206>
 800ded4:	9001      	str	r0, [sp, #4]
 800ded6:	4652      	mov	r2, sl
 800ded8:	4934      	ldr	r1, [pc, #208]	; (800dfac <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800deda:	a806      	add	r0, sp, #24
 800dedc:	f7ff fe1c 	bl	800db18 <memcmp>
 800dee0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800dee4:	40aa      	lsls	r2, r5
 800dee6:	9b01      	ldr	r3, [sp, #4]
 800dee8:	4425      	add	r5, r4
 800deea:	b920      	cbnz	r0, 800def6 <ArtNetParams::callbackFunction(char const*)+0x1fe>
 800deec:	2301      	movs	r3, #1
 800deee:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800def2:	6863      	ldr	r3, [r4, #4]
 800def4:	e7aa      	b.n	800de4c <ArtNetParams::callbackFunction(char const*)+0x154>
 800def6:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800defa:	6863      	ldr	r3, [r4, #4]
 800defc:	e7da      	b.n	800deb4 <ArtNetParams::callbackFunction(char const*)+0x1bc>
 800defe:	2307      	movs	r3, #7
 800df00:	9305      	str	r3, [sp, #20]
 800df02:	aa06      	add	r2, sp, #24
 800df04:	ab05      	add	r3, sp, #20
 800df06:	eb0b 0107 	add.w	r1, fp, r7
 800df0a:	4630      	mov	r0, r6
 800df0c:	f009 fc66 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800df10:	2800      	cmp	r0, #0
 800df12:	d17e      	bne.n	800e012 <ArtNetParams::callbackFunction(char const*)+0x31a>
 800df14:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800df18:	f043 0320 	orr.w	r3, r3, #32
 800df1c:	2b69      	cmp	r3, #105	; 0x69
 800df1e:	d14d      	bne.n	800dfbc <ArtNetParams::callbackFunction(char const*)+0x2c4>
 800df20:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800df24:	f043 0320 	orr.w	r3, r3, #32
 800df28:	2b6e      	cmp	r3, #110	; 0x6e
 800df2a:	d170      	bne.n	800e00e <ArtNetParams::callbackFunction(char const*)+0x316>
 800df2c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800df30:	f043 0320 	orr.w	r3, r3, #32
 800df34:	2b70      	cmp	r3, #112	; 0x70
 800df36:	d16a      	bne.n	800e00e <ArtNetParams::callbackFunction(char const*)+0x316>
 800df38:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800df3c:	f043 0320 	orr.w	r3, r3, #32
 800df40:	2b75      	cmp	r3, #117	; 0x75
 800df42:	d164      	bne.n	800e00e <ArtNetParams::callbackFunction(char const*)+0x316>
 800df44:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800df48:	f043 0320 	orr.w	r3, r3, #32
 800df4c:	3b74      	subs	r3, #116	; 0x74
 800df4e:	bf18      	it	ne
 800df50:	2301      	movne	r3, #1
 800df52:	f8b4 2079 	ldrh.w	r2, [r4, #121]	; 0x79
 800df56:	006d      	lsls	r5, r5, #1
 800df58:	2103      	movs	r1, #3
 800df5a:	40a9      	lsls	r1, r5
 800df5c:	ea22 0201 	bic.w	r2, r2, r1
 800df60:	b143      	cbz	r3, 800df74 <ArtNetParams::callbackFunction(char const*)+0x27c>
 800df62:	2b02      	cmp	r3, #2
 800df64:	bf15      	itete	ne
 800df66:	2301      	movne	r3, #1
 800df68:	40ab      	lsleq	r3, r5
 800df6a:	fa03 f505 	lslne.w	r5, r3, r5
 800df6e:	431a      	orreq	r2, r3
 800df70:	bf18      	it	ne
 800df72:	432a      	orrne	r2, r5
 800df74:	f8a4 2079 	strh.w	r2, [r4, #121]	; 0x79
 800df78:	e6fa      	b.n	800dd70 <ArtNetParams::callbackFunction(char const*)+0x78>
 800df7a:	bf00      	nop
 800df7c:	0801bfb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, pc}
 800df80:	0801db91 	stmdaeq	r1, {r0, r4, r7, r8, r9, fp, ip, lr, pc}
 800df84:	0801bf5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, sp, pc}
 800df88:	0801bf63 	stmdaeq	r1, {r0, r1, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 800df8c:	0801b1ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, ip, sp, pc}
 800df90:	0801bf67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 800df94:	0801c017 	stmdaeq	r1, {r0, r1, r2, r4, lr, pc}
 800df98:	0801c00d 	stmdaeq	r1, {r0, r2, r3, lr, pc}
 800df9c:	0801c0ca 	stmdaeq	r1, {r1, r3, r6, r7, lr, pc}
 800dfa0:	0801c0ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, lr, pc}
 800dfa4:	0801db21 	stmdaeq	r1, {r0, r5, r8, r9, fp, ip, lr, pc}
 800dfa8:	0801bfcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 800dfac:	0801bf70 	stmdaeq	r1, {r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 800dfb0:	0801d9a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, ip, lr, pc}
 800dfb4:	0801c022 	stmdaeq	r1, {r1, r5, lr, pc}
 800dfb8:	0801dba3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, fp, ip, lr, pc}
 800dfbc:	2b64      	cmp	r3, #100	; 0x64
 800dfbe:	d126      	bne.n	800e00e <ArtNetParams::callbackFunction(char const*)+0x316>
 800dfc0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800dfc4:	f043 0320 	orr.w	r3, r3, #32
 800dfc8:	2b69      	cmp	r3, #105	; 0x69
 800dfca:	d120      	bne.n	800e00e <ArtNetParams::callbackFunction(char const*)+0x316>
 800dfcc:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800dfd0:	f043 0320 	orr.w	r3, r3, #32
 800dfd4:	2b73      	cmp	r3, #115	; 0x73
 800dfd6:	d11a      	bne.n	800e00e <ArtNetParams::callbackFunction(char const*)+0x316>
 800dfd8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800dfdc:	f043 0320 	orr.w	r3, r3, #32
 800dfe0:	2b61      	cmp	r3, #97	; 0x61
 800dfe2:	d114      	bne.n	800e00e <ArtNetParams::callbackFunction(char const*)+0x316>
 800dfe4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800dfe8:	f043 0320 	orr.w	r3, r3, #32
 800dfec:	2b62      	cmp	r3, #98	; 0x62
 800dfee:	d10e      	bne.n	800e00e <ArtNetParams::callbackFunction(char const*)+0x316>
 800dff0:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800dff4:	f043 0320 	orr.w	r3, r3, #32
 800dff8:	2b6c      	cmp	r3, #108	; 0x6c
 800dffa:	d108      	bne.n	800e00e <ArtNetParams::callbackFunction(char const*)+0x316>
 800dffc:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e000:	f043 0320 	orr.w	r3, r3, #32
 800e004:	2b65      	cmp	r3, #101	; 0x65
 800e006:	bf14      	ite	ne
 800e008:	2301      	movne	r3, #1
 800e00a:	2302      	moveq	r3, #2
 800e00c:	e7a1      	b.n	800df52 <ArtNetParams::callbackFunction(char const*)+0x25a>
 800e00e:	2301      	movs	r3, #1
 800e010:	e79f      	b.n	800df52 <ArtNetParams::callbackFunction(char const*)+0x25a>
 800e012:	4b2b      	ldr	r3, [pc, #172]	; (800e0c0 <ArtNetParams::callbackFunction(char const*)+0x3c8>)
 800e014:	2118      	movs	r1, #24
 800e016:	aa04      	add	r2, sp, #16
 800e018:	fb01 3105 	mla	r1, r1, r5, r3
 800e01c:	4630      	mov	r0, r6
 800e01e:	f009 fc51 	bl	80178c4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800e022:	b998      	cbnz	r0, 800e04c <ArtNetParams::callbackFunction(char const*)+0x354>
 800e024:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e028:	9904      	ldr	r1, [sp, #16]
 800e02a:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800e02e:	2301      	movs	r3, #1
 800e030:	40ab      	lsls	r3, r5
 800e032:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800e036:	b29b      	uxth	r3, r3
 800e038:	b119      	cbz	r1, 800e042 <ArtNetParams::callbackFunction(char const*)+0x34a>
 800e03a:	4313      	orrs	r3, r2
 800e03c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800e040:	e696      	b.n	800dd70 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e042:	ea22 0203 	bic.w	r2, r2, r3
 800e046:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 800e04a:	e691      	b.n	800dd70 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e04c:	f10d 020f 	add.w	r2, sp, #15
 800e050:	4641      	mov	r1, r8
 800e052:	4630      	mov	r0, r6
 800e054:	f009 fcbf 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e058:	b998      	cbnz	r0, 800e082 <ArtNetParams::callbackFunction(char const*)+0x38a>
 800e05a:	2201      	movs	r2, #1
 800e05c:	f105 0308 	add.w	r3, r5, #8
 800e060:	fa02 f303 	lsl.w	r3, r2, r3
 800e064:	40aa      	lsls	r2, r5
 800e066:	4313      	orrs	r3, r2
 800e068:	89a2      	ldrh	r2, [r4, #12]
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	ea22 0103 	bic.w	r1, r2, r3
 800e070:	81a1      	strh	r1, [r4, #12]
 800e072:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800e076:	2900      	cmp	r1, #0
 800e078:	f43f ae7a 	beq.w	800dd70 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e07c:	431a      	orrs	r2, r3
 800e07e:	81a2      	strh	r2, [r4, #12]
 800e080:	e676      	b.n	800dd70 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e082:	3501      	adds	r5, #1
 800e084:	2d04      	cmp	r5, #4
 800e086:	f109 0910 	add.w	r9, r9, #16
 800e08a:	f108 0812 	add.w	r8, r8, #18
 800e08e:	f47f aec9 	bne.w	800de24 <ArtNetParams::callbackFunction(char const*)+0x12c>
 800e092:	490c      	ldr	r1, [pc, #48]	; (800e0c4 <ArtNetParams::callbackFunction(char const*)+0x3cc>)
 800e094:	f10d 020f 	add.w	r2, sp, #15
 800e098:	4630      	mov	r0, r6
 800e09a:	f009 fc9c 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e09e:	b910      	cbnz	r0, 800e0a6 <ArtNetParams::callbackFunction(char const*)+0x3ae>
 800e0a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e0a4:	e635      	b.n	800dd12 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800e0a6:	4908      	ldr	r1, [pc, #32]	; (800e0c8 <ArtNetParams::callbackFunction(char const*)+0x3d0>)
 800e0a8:	f10d 020f 	add.w	r2, sp, #15
 800e0ac:	4630      	mov	r0, r6
 800e0ae:	f009 fc92 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	f47f ae5c 	bne.w	800dd70 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e0b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e0bc:	e629      	b.n	800dd12 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800e0be:	bf00      	nop
 800e0c0:	0801c06a 	stmdaeq	r1, {r1, r3, r5, r6, lr, pc}
 800e0c4:	0801bfbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, pc}
 800e0c8:	0801db7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, r9, fp, ip, lr, pc}

0800e0cc <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800e0cc:	f7ff be14 	b.w	800dcf8 <ArtNetParams::callbackFunction(char const*)>

0800e0d0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800e0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	b085      	sub	sp, #20
 800e0d8:	4615      	mov	r5, r2
 800e0da:	461e      	mov	r6, r3
 800e0dc:	3004      	adds	r0, #4
 800e0de:	2900      	cmp	r1, #0
 800e0e0:	f000 80a2 	beq.w	800e228 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x158>
 800e0e4:	2287      	movs	r2, #135	; 0x87
 800e0e6:	f00a f9d4 	bl	8018492 <memmove>
 800e0ea:	4633      	mov	r3, r6
 800e0ec:	462a      	mov	r2, r5
 800e0ee:	4994      	ldr	r1, [pc, #592]	; (800e340 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800e0f0:	a801      	add	r0, sp, #4
 800e0f2:	f009 fa9b 	bl	801762c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800e0f6:	6863      	ldr	r3, [r4, #4]
 800e0f8:	f013 0501 	ands.w	r5, r3, #1
 800e0fc:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800e100:	d108      	bne.n	800e114 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x44>
 800e102:	4b90      	ldr	r3, [pc, #576]	; (800e344 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800e104:	6819      	ldr	r1, [r3, #0]
 800e106:	223f      	movs	r2, #63	; 0x3f
 800e108:	316e      	adds	r1, #110	; 0x6e
 800e10a:	4630      	mov	r0, r6
 800e10c:	f7ff fd90 	bl	800dc30 <strncpy.isra.0>
 800e110:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800e114:	6863      	ldr	r3, [r4, #4]
 800e116:	498c      	ldr	r1, [pc, #560]	; (800e348 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800e118:	f003 0301 	and.w	r3, r3, #1
 800e11c:	4632      	mov	r2, r6
 800e11e:	a801      	add	r0, sp, #4
 800e120:	f7ff fd36 	bl	800db90 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e124:	6863      	ldr	r3, [r4, #4]
 800e126:	f013 0502 	ands.w	r5, r3, #2
 800e12a:	f104 0610 	add.w	r6, r4, #16
 800e12e:	d108      	bne.n	800e142 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x72>
 800e130:	4b84      	ldr	r3, [pc, #528]	; (800e344 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800e132:	6819      	ldr	r1, [r3, #0]
 800e134:	2211      	movs	r2, #17
 800e136:	315c      	adds	r1, #92	; 0x5c
 800e138:	4630      	mov	r0, r6
 800e13a:	f7ff fd79 	bl	800dc30 <strncpy.isra.0>
 800e13e:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800e142:	6863      	ldr	r3, [r4, #4]
 800e144:	4981      	ldr	r1, [pc, #516]	; (800e34c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800e146:	4f82      	ldr	r7, [pc, #520]	; (800e350 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800e148:	f8df 9254 	ldr.w	r9, [pc, #596]	; 800e3a0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>
 800e14c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e150:	4632      	mov	r2, r6
 800e152:	a801      	add	r0, sp, #4
 800e154:	f7ff fd1c 	bl	800db90 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e158:	6863      	ldr	r3, [r4, #4]
 800e15a:	7a22      	ldrb	r2, [r4, #8]
 800e15c:	497d      	ldr	r1, [pc, #500]	; (800e354 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800e15e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e162:	a801      	add	r0, sp, #4
 800e164:	f7ff fcec 	bl	800db40 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800e168:	6863      	ldr	r3, [r4, #4]
 800e16a:	7a62      	ldrb	r2, [r4, #9]
 800e16c:	497a      	ldr	r1, [pc, #488]	; (800e358 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800e16e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e172:	a801      	add	r0, sp, #4
 800e174:	f7ff fce4 	bl	800db40 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800e178:	6862      	ldr	r2, [r4, #4]
 800e17a:	4978      	ldr	r1, [pc, #480]	; (800e35c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800e17c:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800e180:	a801      	add	r0, sp, #4
 800e182:	f7ff fd2d 	bl	800dbe0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e186:	f104 086a 	add.w	r8, r4, #106	; 0x6a
 800e18a:	2500      	movs	r5, #0
 800e18c:	f8d9 2000 	ldr.w	r2, [r9]
 800e190:	6863      	ldr	r3, [r4, #4]
 800e192:	42aa      	cmp	r2, r5
 800e194:	d84f      	bhi.n	800e236 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x166>
 800e196:	7aa1      	ldrb	r1, [r4, #10]
 800e198:	4a71      	ldr	r2, [pc, #452]	; (800e360 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800e19a:	4e72      	ldr	r6, [pc, #456]	; (800e364 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800e19c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e1a0:	4971      	ldr	r1, [pc, #452]	; (800e368 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800e1a2:	f8df 8200 	ldr.w	r8, [pc, #512]	; 800e3a4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>
 800e1a6:	f8df a200 	ldr.w	sl, [pc, #512]	; 800e3a8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>
 800e1aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e1ae:	a801      	add	r0, sp, #4
 800e1b0:	f7ff fcee 	bl	800db90 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e1b4:	496d      	ldr	r1, [pc, #436]	; (800e36c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800e1b6:	a801      	add	r0, sp, #4
 800e1b8:	f009 fabe 	bl	8017738 <PropertiesBuilder::AddComment(char const*)>
 800e1bc:	f104 0774 	add.w	r7, r4, #116	; 0x74
 800e1c0:	2500      	movs	r5, #0
 800e1c2:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 800e1c6:	f8d9 3000 	ldr.w	r3, [r9]
 800e1ca:	42ab      	cmp	r3, r5
 800e1cc:	6863      	ldr	r3, [r4, #4]
 800e1ce:	f200 80a3 	bhi.w	800e318 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x248>
 800e1d2:	f3c3 62c0 	ubfx	r2, r3, #27, #1
 800e1d6:	4966      	ldr	r1, [pc, #408]	; (800e370 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800e1d8:	a801      	add	r0, sp, #4
 800e1da:	f7ff fd01 	bl	800dbe0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e1de:	4965      	ldr	r1, [pc, #404]	; (800e374 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800e1e0:	a801      	add	r0, sp, #4
 800e1e2:	f009 faa9 	bl	8017738 <PropertiesBuilder::AddComment(char const*)>
 800e1e6:	6862      	ldr	r2, [r4, #4]
 800e1e8:	4963      	ldr	r1, [pc, #396]	; (800e378 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 800e1ea:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800e1ee:	a801      	add	r0, sp, #4
 800e1f0:	f7ff fcf6 	bl	800dbe0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e1f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e1f8:	b17b      	cbz	r3, 800e21a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x14a>
 800e1fa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e1fe:	9b01      	ldr	r3, [sp, #4]
 800e200:	4413      	add	r3, r2
 800e202:	227d      	movs	r2, #125	; 0x7d
 800e204:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e208:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e20c:	9901      	ldr	r1, [sp, #4]
 800e20e:	54ca      	strb	r2, [r1, r3]
 800e210:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e214:	3301      	adds	r3, #1
 800e216:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e21a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e21e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e220:	601a      	str	r2, [r3, #0]
 800e222:	b005      	add	sp, #20
 800e224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e228:	6823      	ldr	r3, [r4, #0]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	4601      	mov	r1, r0
 800e22e:	68d2      	ldr	r2, [r2, #12]
 800e230:	4618      	mov	r0, r3
 800e232:	4790      	blx	r2
 800e234:	e759      	b.n	800e0ea <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800e236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e23a:	40aa      	lsls	r2, r5
 800e23c:	494f      	ldr	r1, [pc, #316]	; (800e37c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 800e23e:	439a      	bics	r2, r3
 800e240:	bf0c      	ite	eq
 800e242:	2301      	moveq	r3, #1
 800e244:	2300      	movne	r3, #0
 800e246:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800e24a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800e24e:	a801      	add	r0, sp, #4
 800e250:	f7ff fc76 	bl	800db40 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800e254:	f8b4 3079 	ldrh.w	r3, [r4, #121]	; 0x79
 800e258:	4949      	ldr	r1, [pc, #292]	; (800e380 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 800e25a:	006a      	lsls	r2, r5, #1
 800e25c:	40d3      	lsrs	r3, r2
 800e25e:	2612      	movs	r6, #18
 800e260:	436e      	muls	r6, r5
 800e262:	f013 0303 	ands.w	r3, r3, #3
 800e266:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 800e26a:	4431      	add	r1, r6
 800e26c:	d052      	beq.n	800e314 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x244>
 800e26e:	4a45      	ldr	r2, [pc, #276]	; (800e384 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800e270:	4845      	ldr	r0, [pc, #276]	; (800e388 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800e272:	2b02      	cmp	r3, #2
 800e274:	bf08      	it	eq
 800e276:	4602      	moveq	r2, r0
 800e278:	3b01      	subs	r3, #1
 800e27a:	bf18      	it	ne
 800e27c:	2301      	movne	r3, #1
 800e27e:	a801      	add	r0, sp, #4
 800e280:	f7ff fc86 	bl	800db90 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e284:	6861      	ldr	r1, [r4, #4]
 800e286:	f898 2005 	ldrb.w	r2, [r8, #5]
 800e28a:	4840      	ldr	r0, [pc, #256]	; (800e38c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800e28c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e290:	40ab      	lsls	r3, r5
 800e292:	438b      	bics	r3, r1
 800e294:	493e      	ldr	r1, [pc, #248]	; (800e390 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 800e296:	bf0c      	ite	eq
 800e298:	2301      	moveq	r3, #1
 800e29a:	2300      	movne	r3, #0
 800e29c:	2a00      	cmp	r2, #0
 800e29e:	bf0c      	ite	eq
 800e2a0:	4602      	moveq	r2, r0
 800e2a2:	460a      	movne	r2, r1
 800e2a4:	493b      	ldr	r1, [pc, #236]	; (800e394 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800e2a6:	a801      	add	r0, sp, #4
 800e2a8:	4431      	add	r1, r6
 800e2aa:	f7ff fc71 	bl	800db90 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e2ae:	f04f 0a01 	mov.w	sl, #1
 800e2b2:	f105 0208 	add.w	r2, r5, #8
 800e2b6:	89a1      	ldrh	r1, [r4, #12]
 800e2b8:	fa0a f202 	lsl.w	r2, sl, r2
 800e2bc:	b292      	uxth	r2, r2
 800e2be:	438a      	bics	r2, r1
 800e2c0:	4935      	ldr	r1, [pc, #212]	; (800e398 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800e2c2:	bf0c      	ite	eq
 800e2c4:	4652      	moveq	r2, sl
 800e2c6:	2200      	movne	r2, #0
 800e2c8:	4431      	add	r1, r6
 800e2ca:	a801      	add	r0, sp, #4
 800e2cc:	f7ff fc88 	bl	800dbe0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e2d0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800e2d4:	fa0a f305 	lsl.w	r3, sl, r5
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	401a      	ands	r2, r3
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	bf0c      	ite	eq
 800e2e0:	4653      	moveq	r3, sl
 800e2e2:	2300      	movne	r3, #0
 800e2e4:	f105 021c 	add.w	r2, r5, #28
 800e2e8:	d009      	beq.n	800e2fe <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x22e>
 800e2ea:	4916      	ldr	r1, [pc, #88]	; (800e344 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800e2ec:	6809      	ldr	r1, [r1, #0]
 800e2ee:	f241 3068 	movw	r0, #4968	; 0x1368
 800e2f2:	4459      	add	r1, fp
 800e2f4:	5808      	ldr	r0, [r1, r0]
 800e2f6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800e2fa:	f8c1 000b 	str.w	r0, [r1, #11]
 800e2fe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e302:	4639      	mov	r1, r7
 800e304:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800e308:	a801      	add	r0, sp, #4
 800e30a:	f009 f9d1 	bl	80176b0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800e30e:	3501      	adds	r5, #1
 800e310:	3718      	adds	r7, #24
 800e312:	e73b      	b.n	800e18c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xbc>
 800e314:	4a21      	ldr	r2, [pc, #132]	; (800e39c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800e316:	e7af      	b.n	800e278 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a8>
 800e318:	fa0b f105 	lsl.w	r1, fp, r5
 800e31c:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800e320:	4399      	bics	r1, r3
 800e322:	bf0c      	ite	eq
 800e324:	2301      	moveq	r3, #1
 800e326:	2300      	movne	r3, #0
 800e328:	4631      	mov	r1, r6
 800e32a:	2a00      	cmp	r2, #0
 800e32c:	bf0c      	ite	eq
 800e32e:	4642      	moveq	r2, r8
 800e330:	4652      	movne	r2, sl
 800e332:	a801      	add	r0, sp, #4
 800e334:	f7ff fc2c 	bl	800db90 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e338:	3501      	adds	r5, #1
 800e33a:	3610      	adds	r6, #16
 800e33c:	e743      	b.n	800e1c6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xf6>
 800e33e:	bf00      	nop
 800e340:	0801c0d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, lr, pc}
 800e344:	200006cc 	andcs	r0, r0, ip, asr #13
 800e348:	0801c00d 	stmdaeq	r1, {r0, r2, r3, lr, pc}
 800e34c:	0801c017 	stmdaeq	r1, {r0, r1, r2, r4, lr, pc}
 800e350:	0801c06a 	stmdaeq	r1, {r1, r3, r5, r6, lr, pc}
 800e354:	0801c0ca 	stmdaeq	r1, {r1, r3, r6, r7, lr, pc}
 800e358:	0801c0ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, lr, pc}
 800e35c:	0801bfb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, pc}
 800e360:	0801bfa4 	stmdaeq	r1, {r2, r5, r7, r8, r9, sl, fp, ip, sp, pc}
 800e364:	0801bfcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 800e368:	0801db91 	stmdaeq	r1, {r0, r4, r7, r8, r9, fp, ip, lr, pc}
 800e36c:	0801bf99 	stmdaeq	r1, {r0, r3, r4, r7, r8, r9, sl, fp, ip, sp, pc}
 800e370:	0801bfbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, pc}
 800e374:	0801adb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, sl, fp, sp, pc}
 800e378:	0801db7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, r9, fp, ip, lr, pc}
 800e37c:	0801d9a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, ip, lr, pc}
 800e380:	0801dba3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, fp, ip, lr, pc}
 800e384:	0801bf7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 800e388:	0801bf82 	stmdaeq	r1, {r1, r7, r8, r9, sl, fp, ip, sp, pc}
 800e38c:	0801bf8e 	stmdaeq	r1, {r1, r2, r3, r7, r8, r9, sl, fp, ip, sp, pc}
 800e390:	0801bf8a 	stmdaeq	r1, {r1, r3, r7, r8, r9, sl, fp, ip, sp, pc}
 800e394:	0801db21 	stmdaeq	r1, {r0, r5, r8, r9, fp, ip, lr, pc}
 800e398:	0801c022 	stmdaeq	r1, {r1, r5, lr, pc}
 800e39c:	0801bf75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 800e3a0:	200006dc 	ldrdcs	r0, [r0], -ip
 800e3a4:	0801bf92 	stmdaeq	r1, {r1, r4, r7, r8, r9, sl, fp, ip, sp, pc}
 800e3a8:	0801bf70 	stmdaeq	r1, {r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}

0800e3ac <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800e3ac:	b513      	push	{r0, r1, r4, lr}
 800e3ae:	6804      	ldr	r4, [r0, #0]
 800e3b0:	b914      	cbnz	r4, 800e3b8 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800e3b2:	601c      	str	r4, [r3, #0]
 800e3b4:	b002      	add	sp, #8
 800e3b6:	bd10      	pop	{r4, pc}
 800e3b8:	9300      	str	r3, [sp, #0]
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	460a      	mov	r2, r1
 800e3be:	2100      	movs	r1, #0
 800e3c0:	f7ff fe86 	bl	800e0d0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800e3c4:	e7f6      	b.n	800e3b4 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800e3c8 <ArtNetParams::Set(unsigned int)>:
 800e3c8:	1e4b      	subs	r3, r1, #1
 800e3ca:	2b40      	cmp	r3, #64	; 0x40
 800e3cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	460f      	mov	r7, r1
 800e3d4:	d807      	bhi.n	800e3e6 <ArtNetParams::Set(unsigned int)+0x1e>
 800e3d6:	4a44      	ldr	r2, [pc, #272]	; (800e4e8 <ArtNetParams::Set(unsigned int)+0x120>)
 800e3d8:	f1c1 0342 	rsb	r3, r1, #66	; 0x42
 800e3dc:	6811      	ldr	r1, [r2, #0]
 800e3de:	428b      	cmp	r3, r1
 800e3e0:	bf94      	ite	ls
 800e3e2:	6013      	strls	r3, [r2, #0]
 800e3e4:	6011      	strhi	r1, [r2, #0]
 800e3e6:	6863      	ldr	r3, [r4, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d079      	beq.n	800e4e0 <ArtNetParams::Set(unsigned int)+0x118>
 800e3ec:	4a3f      	ldr	r2, [pc, #252]	; (800e4ec <ArtNetParams::Set(unsigned int)+0x124>)
 800e3ee:	079b      	lsls	r3, r3, #30
 800e3f0:	6815      	ldr	r5, [r2, #0]
 800e3f2:	d504      	bpl.n	800e3fe <ArtNetParams::Set(unsigned int)+0x36>
 800e3f4:	f104 0110 	add.w	r1, r4, #16
 800e3f8:	4628      	mov	r0, r5
 800e3fa:	f7fd ff09 	bl	800c210 <ArtNetNode::SetShortName(char const*)>
 800e3fe:	6863      	ldr	r3, [r4, #4]
 800e400:	07de      	lsls	r6, r3, #31
 800e402:	d504      	bpl.n	800e40e <ArtNetParams::Set(unsigned int)+0x46>
 800e404:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800e408:	4628      	mov	r0, r5
 800e40a:	f7fd ff29 	bl	800c260 <ArtNetNode::SetLongName(char const*)>
 800e40e:	6863      	ldr	r3, [r4, #4]
 800e410:	0758      	lsls	r0, r3, #29
 800e412:	d504      	bpl.n	800e41e <ArtNetParams::Set(unsigned int)+0x56>
 800e414:	7a21      	ldrb	r1, [r4, #8]
 800e416:	2200      	movs	r2, #0
 800e418:	4628      	mov	r0, r5
 800e41a:	f7fe fa73 	bl	800c904 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800e41e:	6863      	ldr	r3, [r4, #4]
 800e420:	0719      	lsls	r1, r3, #28
 800e422:	d504      	bpl.n	800e42e <ArtNetParams::Set(unsigned int)+0x66>
 800e424:	7a61      	ldrb	r1, [r4, #9]
 800e426:	2200      	movs	r2, #0
 800e428:	4628      	mov	r0, r5
 800e42a:	f7fe fa38 	bl	800c89e <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800e42e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800e4e8 <ArtNetParams::Set(unsigned int)+0x120>
 800e432:	f104 0870 	add.w	r8, r4, #112	; 0x70
 800e436:	2600      	movs	r6, #0
 800e438:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 800e43c:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 800e440:	e03b      	b.n	800e4ba <ArtNetParams::Set(unsigned int)+0xf2>
 800e442:	19f1      	adds	r1, r6, r7
 800e444:	2941      	cmp	r1, #65	; 0x41
 800e446:	d83c      	bhi.n	800e4c2 <ArtNetParams::Set(unsigned int)+0xfa>
 800e448:	6863      	ldr	r3, [r4, #4]
 800e44a:	fa0a f206 	lsl.w	r2, sl, r6
 800e44e:	439a      	bics	r2, r3
 800e450:	d106      	bne.n	800e460 <ArtNetParams::Set(unsigned int)+0x98>
 800e452:	f898 2005 	ldrb.w	r2, [r8, #5]
 800e456:	9101      	str	r1, [sp, #4]
 800e458:	4628      	mov	r0, r5
 800e45a:	f7fe fa86 	bl	800c96a <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800e45e:	9901      	ldr	r1, [sp, #4]
 800e460:	6863      	ldr	r3, [r4, #4]
 800e462:	fa0b f206 	lsl.w	r2, fp, r6
 800e466:	439a      	bics	r2, r3
 800e468:	d106      	bne.n	800e478 <ArtNetParams::Set(unsigned int)+0xb0>
 800e46a:	f898 2000 	ldrb.w	r2, [r8]
 800e46e:	9101      	str	r1, [sp, #4]
 800e470:	4628      	mov	r0, r5
 800e472:	f7fe faa5 	bl	800c9c0 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800e476:	9901      	ldr	r1, [sp, #4]
 800e478:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800e47c:	2301      	movs	r3, #1
 800e47e:	40b3      	lsls	r3, r6
 800e480:	b29b      	uxth	r3, r3
 800e482:	4393      	bics	r3, r2
 800e484:	d10a      	bne.n	800e49c <ArtNetParams::Set(unsigned int)+0xd4>
 800e486:	f106 031c 	add.w	r3, r6, #28
 800e48a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e48e:	4628      	mov	r0, r5
 800e490:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800e494:	9101      	str	r1, [sp, #4]
 800e496:	f7fe fde1 	bl	800d05c <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800e49a:	9901      	ldr	r1, [sp, #4]
 800e49c:	89a0      	ldrh	r0, [r4, #12]
 800e49e:	f106 0308 	add.w	r3, r6, #8
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	4383      	bics	r3, r0
 800e4ac:	d102      	bne.n	800e4b4 <ArtNetParams::Set(unsigned int)+0xec>
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f7ff f8cd 	bl	800d64e <ArtNetNode::SetRmd(unsigned int, bool)>
 800e4b4:	3601      	adds	r6, #1
 800e4b6:	f108 0801 	add.w	r8, r8, #1
 800e4ba:	f8d9 3000 	ldr.w	r3, [r9]
 800e4be:	42b3      	cmp	r3, r6
 800e4c0:	d8bf      	bhi.n	800e442 <ArtNetParams::Set(unsigned int)+0x7a>
 800e4c2:	7aa1      	ldrb	r1, [r4, #10]
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	f7fe faa6 	bl	800ca16 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800e4ca:	6863      	ldr	r3, [r4, #4]
 800e4cc:	011a      	lsls	r2, r3, #4
 800e4ce:	bf44      	itt	mi
 800e4d0:	2201      	movmi	r2, #1
 800e4d2:	f885 20b8 	strbmi.w	r2, [r5, #184]	; 0xb8
 800e4d6:	04db      	lsls	r3, r3, #19
 800e4d8:	bf44      	itt	mi
 800e4da:	2301      	movmi	r3, #1
 800e4dc:	f885 3908 	strbmi.w	r3, [r5, #2312]	; 0x908
 800e4e0:	b003      	add	sp, #12
 800e4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e6:	bf00      	nop
 800e4e8:	200006dc 	ldrdcs	r0, [r0], -ip
 800e4ec:	200006cc 	andcs	r0, r0, ip, asr #13

0800e4f0 <ArtNetParams::Dump()>:
 800e4f0:	4770      	bx	lr
	...

0800e4f4 <ArtNetNode::HandleTrigger()>:
 800e4f4:	f890 20ca 	ldrb.w	r2, [r0, #202]	; 0xca
 800e4f8:	2aff      	cmp	r2, #255	; 0xff
 800e4fa:	4601      	mov	r1, r0
 800e4fc:	d103      	bne.n	800e506 <ArtNetNode::HandleTrigger()+0x12>
 800e4fe:	f890 30cb 	ldrb.w	r3, [r0, #203]	; 0xcb
 800e502:	2bff      	cmp	r3, #255	; 0xff
 800e504:	d008      	beq.n	800e518 <ArtNetNode::HandleTrigger()+0x24>
 800e506:	4b07      	ldr	r3, [pc, #28]	; (800e524 <ArtNetNode::HandleTrigger()+0x30>)
 800e508:	7818      	ldrb	r0, [r3, #0]
 800e50a:	4290      	cmp	r0, r2
 800e50c:	d109      	bne.n	800e522 <ArtNetNode::HandleTrigger()+0x2e>
 800e50e:	f891 20cb 	ldrb.w	r2, [r1, #203]	; 0xcb
 800e512:	785b      	ldrb	r3, [r3, #1]
 800e514:	429a      	cmp	r2, r3
 800e516:	d104      	bne.n	800e522 <ArtNetNode::HandleTrigger()+0x2e>
 800e518:	6948      	ldr	r0, [r1, #20]
 800e51a:	6803      	ldr	r3, [r0, #0]
 800e51c:	31cc      	adds	r1, #204	; 0xcc
 800e51e:	689b      	ldr	r3, [r3, #8]
 800e520:	4718      	bx	r3
 800e522:	4770      	bx	lr
 800e524:	0801c0e0 	stmdaeq	r1, {r5, r6, r7, lr, pc}

0800e528 <e131::universe_to_multicast_ip(unsigned short)>:
 800e528:	b513      	push	{r0, r1, r4, lr}
 800e52a:	4604      	mov	r4, r0
 800e52c:	a901      	add	r1, sp, #4
 800e52e:	4806      	ldr	r0, [pc, #24]	; (800e548 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800e530:	f009 fef4 	bl	801831c <inet_aton>
 800e534:	9801      	ldr	r0, [sp, #4]
 800e536:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800e53a:	0224      	lsls	r4, r4, #8
 800e53c:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800e540:	4320      	orrs	r0, r4
 800e542:	b002      	add	sp, #8
 800e544:	bd10      	pop	{r4, pc}
 800e546:	bf00      	nop
 800e548:	0801c0e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, lr, pc}

0800e54c <memset.constprop.0.isra.0>:
 800e54c:	4401      	add	r1, r0
 800e54e:	2300      	movs	r3, #0
 800e550:	4288      	cmp	r0, r1
 800e552:	d100      	bne.n	800e556 <memset.constprop.0.isra.0+0xa>
 800e554:	4770      	bx	lr
 800e556:	f800 3b01 	strb.w	r3, [r0], #1
 800e55a:	e7f9      	b.n	800e550 <memset.constprop.0.isra.0+0x4>

0800e55c <memcpy.isra.0>:
 800e55c:	3801      	subs	r0, #1
 800e55e:	440a      	add	r2, r1
 800e560:	4291      	cmp	r1, r2
 800e562:	d100      	bne.n	800e566 <memcpy.isra.0+0xa>
 800e564:	4770      	bx	lr
 800e566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e56a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800e56e:	e7f7      	b.n	800e560 <memcpy.isra.0+0x4>

0800e570 <E131Bridge::E131Bridge()>:
 800e570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e572:	2300      	movs	r3, #0
 800e574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e578:	e9c0 2300 	strd	r2, r3, [r0]
 800e57c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e580:	2201      	movs	r2, #1
 800e582:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800e586:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800e58a:	6743      	str	r3, [r0, #116]	; 0x74
 800e58c:	4b28      	ldr	r3, [pc, #160]	; (800e630 <E131Bridge::E131Bridge()+0xc0>)
 800e58e:	7202      	strb	r2, [r0, #8]
 800e590:	f500 55cd 	add.w	r5, r0, #6560	; 0x19a0
 800e594:	f500 52b4 	add.w	r2, r0, #5760	; 0x1680
 800e598:	b093      	sub	sp, #76	; 0x4c
 800e59a:	4604      	mov	r4, r0
 800e59c:	6018      	str	r0, [r3, #0]
 800e59e:	f200 5614 	addw	r6, r0, #1300	; 0x514
 800e5a2:	321c      	adds	r2, #28
 800e5a4:	3514      	adds	r5, #20
 800e5a6:	2764      	movs	r7, #100	; 0x64
 800e5a8:	4630      	mov	r0, r6
 800e5aa:	2144      	movs	r1, #68	; 0x44
 800e5ac:	f7ff ffce 	bl	800e54c <memset.constprop.0.isra.0>
 800e5b0:	4610      	mov	r0, r2
 800e5b2:	210c      	movs	r1, #12
 800e5b4:	f7ff ffca 	bl	800e54c <memset.constprop.0.isra.0>
 800e5b8:	320c      	adds	r2, #12
 800e5ba:	f802 7c03 	strb.w	r7, [r2, #-3]
 800e5be:	4295      	cmp	r5, r2
 800e5c0:	f106 0644 	add.w	r6, r6, #68	; 0x44
 800e5c4:	d1f0      	bne.n	800e5a8 <E131Bridge::E131Bridge()+0x38>
 800e5c6:	2120      	movs	r1, #32
 800e5c8:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800e5cc:	4d19      	ldr	r5, [pc, #100]	; (800e634 <E131Bridge::E131Bridge()+0xc4>)
 800e5ce:	4a1a      	ldr	r2, [pc, #104]	; (800e638 <E131Bridge::E131Bridge()+0xc8>)
 800e5d0:	f7ff ffbc 	bl	800e54c <memset.constprop.0.isra.0>
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800e5da:	682b      	ldr	r3, [r5, #0]
 800e5dc:	9200      	str	r2, [sp, #0]
 800e5de:	3320      	adds	r3, #32
 800e5e0:	4a16      	ldr	r2, [pc, #88]	; (800e63c <E131Bridge::E131Bridge()+0xcc>)
 800e5e2:	2140      	movs	r1, #64	; 0x40
 800e5e4:	a802      	add	r0, sp, #8
 800e5e6:	f7fb ffe9 	bl	800a5bc <snprintf>
 800e5ea:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800e5ee:	a902      	add	r1, sp, #8
 800e5f0:	233f      	movs	r3, #63	; 0x3f
 800e5f2:	f811 0b01 	ldrb.w	r0, [r1], #1
 800e5f6:	b928      	cbnz	r0, 800e604 <E131Bridge::E131Bridge()+0x94>
 800e5f8:	4413      	add	r3, r2
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d006      	beq.n	800e60c <E131Bridge::E131Bridge()+0x9c>
 800e5fe:	f802 0b01 	strb.w	r0, [r2], #1
 800e602:	e7fa      	b.n	800e5fa <E131Bridge::E131Bridge()+0x8a>
 800e604:	3b01      	subs	r3, #1
 800e606:	f802 0b01 	strb.w	r0, [r2], #1
 800e60a:	d1f2      	bne.n	800e5f2 <E131Bridge::E131Bridge()+0x82>
 800e60c:	2300      	movs	r3, #0
 800e60e:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800e612:	6828      	ldr	r0, [r5, #0]
 800e614:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800e618:	f007 fa16 	bl	8015a48 <Network::Begin(unsigned short)>
 800e61c:	4b08      	ldr	r3, [pc, #32]	; (800e640 <E131Bridge::E131Bridge()+0xd0>)
 800e61e:	4621      	mov	r1, r4
 800e620:	f841 0b24 	str.w	r0, [r1], #36
 800e624:	6818      	ldr	r0, [r3, #0]
 800e626:	f009 fe15 	bl	8018254 <Hardware::GetUuid(unsigned char*)>
 800e62a:	4620      	mov	r0, r4
 800e62c:	b013      	add	sp, #76	; 0x4c
 800e62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e630:	200006e0 	andcs	r0, r0, r0, ror #13
 800e634:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 800e638:	0801b39a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, ip, sp, pc}
 800e63c:	0801c0f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, lr, pc}
 800e640:	2000fdc4 	andcs	pc, r0, r4, asr #27

0800e644 <E131Bridge::~E131Bridge()>:
 800e644:	4770      	bx	lr
	...

0800e648 <E131Bridge::Start()>:
 800e648:	6943      	ldr	r3, [r0, #20]
 800e64a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e64c:	4604      	mov	r4, r0
 800e64e:	b363      	cbz	r3, 800e6aa <E131Bridge::Start()+0x62>
 800e650:	6983      	ldr	r3, [r0, #24]
 800e652:	b9cb      	cbnz	r3, 800e688 <E131Bridge::Start()+0x40>
 800e654:	a901      	add	r1, sp, #4
 800e656:	4819      	ldr	r0, [pc, #100]	; (800e6bc <E131Bridge::Start()+0x74>)
 800e658:	f009 fe60 	bl	801831c <inet_aton>
 800e65c:	9b01      	ldr	r3, [sp, #4]
 800e65e:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800e662:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800e666:	6223      	str	r3, [r4, #32]
 800e668:	f240 207e 	movw	r0, #638	; 0x27e
 800e66c:	f009 fe52 	bl	8018314 <operator new(unsigned int)>
 800e670:	61a0      	str	r0, [r4, #24]
 800e672:	4620      	mov	r0, r4
 800e674:	f000 fd08 	bl	800f088 <E131Bridge::FillDataPacket()>
 800e678:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800e67c:	f009 fe4a 	bl	8018314 <operator new(unsigned int)>
 800e680:	61e0      	str	r0, [r4, #28]
 800e682:	4620      	mov	r0, r4
 800e684:	f000 fc58 	bl	800ef38 <E131Bridge::FillDiscoveryPacket()>
 800e688:	f504 56b4 	add.w	r6, r4, #5760	; 0x1680
 800e68c:	2500      	movs	r5, #0
 800e68e:	361e      	adds	r6, #30
 800e690:	270c      	movs	r7, #12
 800e692:	fb07 f305 	mul.w	r3, r7, r5
 800e696:	5cf3      	ldrb	r3, [r6, r3]
 800e698:	b123      	cbz	r3, 800e6a4 <E131Bridge::Start()+0x5c>
 800e69a:	6960      	ldr	r0, [r4, #20]
 800e69c:	6803      	ldr	r3, [r0, #0]
 800e69e:	4629      	mov	r1, r5
 800e6a0:	689b      	ldr	r3, [r3, #8]
 800e6a2:	4798      	blx	r3
 800e6a4:	3501      	adds	r5, #1
 800e6a6:	2d42      	cmp	r5, #66	; 0x42
 800e6a8:	d1f3      	bne.n	800e692 <E131Bridge::Start()+0x4a>
 800e6aa:	4b05      	ldr	r3, [pc, #20]	; (800e6c0 <E131Bridge::Start()+0x78>)
 800e6ac:	6818      	ldr	r0, [r3, #0]
 800e6ae:	2102      	movs	r1, #2
 800e6b0:	b003      	add	sp, #12
 800e6b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e6b6:	f009 bd2b 	b.w	8018110 <LedBlink::SetMode(ledblink::Mode)>
 800e6ba:	bf00      	nop
 800e6bc:	0801c0e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, lr, pc}
 800e6c0:	2000fdc0 	andcs	pc, r0, r0, asr #27

0800e6c4 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800e6c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	f200 5414 	addw	r4, r0, #1300	; 0x514
 800e6cc:	2544      	movs	r5, #68	; 0x44
 800e6ce:	4299      	cmp	r1, r3
 800e6d0:	d004      	beq.n	800e6dc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x18>
 800e6d2:	fb05 f603 	mul.w	r6, r5, r3
 800e6d6:	5ba6      	ldrh	r6, [r4, r6]
 800e6d8:	4296      	cmp	r6, r2
 800e6da:	d011      	beq.n	800e700 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>
 800e6dc:	3301      	adds	r3, #1
 800e6de:	2b42      	cmp	r3, #66	; 0x42
 800e6e0:	d1f5      	bne.n	800e6ce <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xa>
 800e6e2:	4b08      	ldr	r3, [pc, #32]	; (800e704 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x40>)
 800e6e4:	6801      	ldr	r1, [r0, #0]
 800e6e6:	681c      	ldr	r4, [r3, #0]
 800e6e8:	9101      	str	r1, [sp, #4]
 800e6ea:	4610      	mov	r0, r2
 800e6ec:	f7ff ff1c 	bl	800e528 <e131::universe_to_multicast_ip(unsigned short)>
 800e6f0:	9901      	ldr	r1, [sp, #4]
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	b002      	add	sp, #8
 800e6f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6fc:	f007 b9b8 	b.w	8015a70 <Network::LeaveGroup(int, unsigned int)>
 800e700:	b002      	add	sp, #8
 800e702:	bd70      	pop	{r4, r5, r6, pc}
 800e704:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

0800e708 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800e708:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e70a:	4604      	mov	r4, r0
 800e70c:	461d      	mov	r5, r3
 800e70e:	b1d1      	cbz	r1, 800e746 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3e>
 800e710:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800e714:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800e718:	b12a      	cbz	r2, 800e726 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800e71a:	42aa      	cmp	r2, r5
 800e71c:	d019      	beq.n	800e752 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4a>
 800e71e:	2142      	movs	r1, #66	; 0x42
 800e720:	4620      	mov	r0, r4
 800e722:	f7ff ffcf 	bl	800e6c4 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800e726:	4b0c      	ldr	r3, [pc, #48]	; (800e758 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x50>)
 800e728:	6821      	ldr	r1, [r4, #0]
 800e72a:	8035      	strh	r5, [r6, #0]
 800e72c:	4628      	mov	r0, r5
 800e72e:	681c      	ldr	r4, [r3, #0]
 800e730:	9101      	str	r1, [sp, #4]
 800e732:	f7ff fef9 	bl	800e528 <e131::universe_to_multicast_ip(unsigned short)>
 800e736:	9901      	ldr	r1, [sp, #4]
 800e738:	4602      	mov	r2, r0
 800e73a:	4620      	mov	r0, r4
 800e73c:	b002      	add	sp, #8
 800e73e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e742:	f007 b992 	b.w	8015a6a <Network::JoinGroup(int, unsigned int)>
 800e746:	b122      	cbz	r2, 800e752 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4a>
 800e748:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800e74c:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800e750:	e7e2      	b.n	800e718 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800e752:	b002      	add	sp, #8
 800e754:	bd70      	pop	{r4, r5, r6, pc}
 800e756:	bf00      	nop
 800e758:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

0800e75c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800e75c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e75e:	4604      	mov	r4, r0
 800e760:	460d      	mov	r5, r1
 800e762:	461e      	mov	r6, r3
 800e764:	bb1a      	cbnz	r2, 800e7ae <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x52>
 800e766:	2941      	cmp	r1, #65	; 0x41
 800e768:	d846      	bhi.n	800e7f8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x9c>
 800e76a:	230c      	movs	r3, #12
 800e76c:	fb03 0301 	mla	r3, r3, r1, r0
 800e770:	f241 619e 	movw	r1, #5790	; 0x169e
 800e774:	5c5a      	ldrb	r2, [r3, r1]
 800e776:	b132      	cbz	r2, 800e786 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2a>
 800e778:	f241 629c 	movw	r2, #5788	; 0x169c
 800e77c:	5a9b      	ldrh	r3, [r3, r2]
 800e77e:	42b3      	cmp	r3, r6
 800e780:	d108      	bne.n	800e794 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800e782:	b003      	add	sp, #12
 800e784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e786:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800e78a:	3201      	adds	r2, #1
 800e78c:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800e790:	2201      	movs	r2, #1
 800e792:	545a      	strb	r2, [r3, r1]
 800e794:	230c      	movs	r3, #12
 800e796:	fb03 4405 	mla	r4, r3, r5, r4
 800e79a:	f241 639c 	movw	r3, #5788	; 0x169c
 800e79e:	4630      	mov	r0, r6
 800e7a0:	52e6      	strh	r6, [r4, r3]
 800e7a2:	f7ff fec1 	bl	800e528 <e131::universe_to_multicast_ip(unsigned short)>
 800e7a6:	f504 54b5 	add.w	r4, r4, #5792	; 0x16a0
 800e7aa:	6020      	str	r0, [r4, #0]
 800e7ac:	e7e9      	b.n	800e782 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e7ae:	2a02      	cmp	r2, #2
 800e7b0:	d122      	bne.n	800e7f8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x9c>
 800e7b2:	2941      	cmp	r1, #65	; 0x41
 800e7b4:	d8e5      	bhi.n	800e782 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e7b6:	2344      	movs	r3, #68	; 0x44
 800e7b8:	fb03 0301 	mla	r3, r3, r1, r0
 800e7bc:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800e7c0:	b152      	cbz	r2, 800e7d8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x7c>
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800e7c8:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800e7d2:	4632      	mov	r2, r6
 800e7d4:	f7ff ff76 	bl	800e6c4 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800e7d8:	230c      	movs	r3, #12
 800e7da:	fb03 4505 	mla	r5, r3, r5, r4
 800e7de:	f241 639e 	movw	r3, #5790	; 0x169e
 800e7e2:	5cea      	ldrb	r2, [r5, r3]
 800e7e4:	2a00      	cmp	r2, #0
 800e7e6:	d0cc      	beq.n	800e782 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	54ea      	strb	r2, [r5, r3]
 800e7ec:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800e7f0:	3b01      	subs	r3, #1
 800e7f2:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800e7f6:	e7c4      	b.n	800e782 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e7f8:	2344      	movs	r3, #68	; 0x44
 800e7fa:	fb03 4305 	mla	r3, r3, r5, r4
 800e7fe:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800e802:	b1d2      	cbz	r2, 800e83a <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xde>
 800e804:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 800e808:	42b3      	cmp	r3, r6
 800e80a:	d0ba      	beq.n	800e782 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e80c:	4632      	mov	r2, r6
 800e80e:	4629      	mov	r1, r5
 800e810:	4620      	mov	r0, r4
 800e812:	f7ff ff57 	bl	800e6c4 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800e816:	4b0d      	ldr	r3, [pc, #52]	; (800e84c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xf0>)
 800e818:	6821      	ldr	r1, [r4, #0]
 800e81a:	681f      	ldr	r7, [r3, #0]
 800e81c:	9101      	str	r1, [sp, #4]
 800e81e:	4630      	mov	r0, r6
 800e820:	f7ff fe82 	bl	800e528 <e131::universe_to_multicast_ip(unsigned short)>
 800e824:	9901      	ldr	r1, [sp, #4]
 800e826:	4602      	mov	r2, r0
 800e828:	4638      	mov	r0, r7
 800e82a:	f007 f91e 	bl	8015a6a <Network::JoinGroup(int, unsigned int)>
 800e82e:	2344      	movs	r3, #68	; 0x44
 800e830:	fb03 4305 	mla	r3, r3, r5, r4
 800e834:	f8a3 6514 	strh.w	r6, [r3, #1300]	; 0x514
 800e838:	e7a3      	b.n	800e782 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e83a:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800e83e:	3201      	adds	r2, #1
 800e840:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800e844:	2201      	movs	r2, #1
 800e846:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800e84a:	e7e4      	b.n	800e816 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xba>
 800e84c:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

0800e850 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800e850:	b963      	cbnz	r3, 800e86c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x1c>
 800e852:	2941      	cmp	r1, #65	; 0x41
 800e854:	d813      	bhi.n	800e87e <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2e>
 800e856:	230c      	movs	r3, #12
 800e858:	fb03 0101 	mla	r1, r3, r1, r0
 800e85c:	f241 639c 	movw	r3, #5788	; 0x169c
 800e860:	5acb      	ldrh	r3, [r1, r3]
 800e862:	8013      	strh	r3, [r2, #0]
 800e864:	f241 639e 	movw	r3, #5790	; 0x169e
 800e868:	5cc8      	ldrb	r0, [r1, r3]
 800e86a:	4770      	bx	lr
 800e86c:	2344      	movs	r3, #68	; 0x44
 800e86e:	fb03 0101 	mla	r1, r3, r1, r0
 800e872:	f8b1 3514 	ldrh.w	r3, [r1, #1300]	; 0x514
 800e876:	f891 0516 	ldrb.w	r0, [r1, #1302]	; 0x516
 800e87a:	8013      	strh	r3, [r2, #0]
 800e87c:	4770      	bx	lr
 800e87e:	4618      	mov	r0, r3
 800e880:	4770      	bx	lr

0800e882 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800e882:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800e886:	b923      	cbnz	r3, 800e892 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800e888:	2301      	movs	r3, #1
 800e88a:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800e88e:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800e892:	2344      	movs	r3, #68	; 0x44
 800e894:	fb03 0101 	mla	r1, r3, r1, r0
 800e898:	2301      	movs	r3, #1
 800e89a:	f881 3555 	strb.w	r3, [r1, #1365]	; 0x555
 800e89e:	4770      	bx	lr

0800e8a0 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	2044      	movs	r0, #68	; 0x44
 800e8a4:	4348      	muls	r0, r1
 800e8a6:	b570      	push	{r4, r5, r6, lr}
 800e8a8:	1815      	adds	r5, r2, r0
 800e8aa:	68d3      	ldr	r3, [r2, #12]
 800e8ac:	460c      	mov	r4, r1
 800e8ae:	f8d5 1518 	ldr.w	r1, [r5, #1304]	; 0x518
 800e8b2:	1a5b      	subs	r3, r3, r1
 800e8b4:	f242 7110 	movw	r1, #10000	; 0x2710
 800e8b8:	428b      	cmp	r3, r1
 800e8ba:	d90a      	bls.n	800e8d2 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800e8bc:	2600      	movs	r6, #0
 800e8be:	f500 60a4 	add.w	r0, r0, #1312	; 0x520
 800e8c2:	f8c5 651c 	str.w	r6, [r5, #1308]	; 0x51c
 800e8c6:	2110      	movs	r1, #16
 800e8c8:	4410      	add	r0, r2
 800e8ca:	f7ff fe3f 	bl	800e54c <memset.constprop.0.isra.0>
 800e8ce:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800e8d2:	2344      	movs	r3, #68	; 0x44
 800e8d4:	435c      	muls	r4, r3
 800e8d6:	1915      	adds	r5, r2, r4
 800e8d8:	68d3      	ldr	r3, [r2, #12]
 800e8da:	f8d5 1534 	ldr.w	r1, [r5, #1332]	; 0x534
 800e8de:	1a5b      	subs	r3, r3, r1
 800e8e0:	f242 7110 	movw	r1, #10000	; 0x2710
 800e8e4:	428b      	cmp	r3, r1
 800e8e6:	d90a      	bls.n	800e8fe <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800e8e8:	2600      	movs	r6, #0
 800e8ea:	f204 543c 	addw	r4, r4, #1340	; 0x53c
 800e8ee:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
 800e8f2:	2110      	movs	r1, #16
 800e8f4:	1910      	adds	r0, r2, r4
 800e8f6:	f7ff fe29 	bl	800e54c <memset.constprop.0.isra.0>
 800e8fa:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800e8fe:	f502 508c 	add.w	r0, r2, #4480	; 0x1180
 800e902:	4611      	mov	r1, r2
 800e904:	3008      	adds	r0, #8
 800e906:	2300      	movs	r3, #0
 800e908:	f891 4555 	ldrb.w	r4, [r1, #1365]	; 0x555
 800e90c:	3144      	adds	r1, #68	; 0x44
 800e90e:	4281      	cmp	r1, r0
 800e910:	ea43 0304 	orr.w	r3, r3, r4
 800e914:	d1f8      	bne.n	800e908 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x68>
 800e916:	b923      	cbnz	r3, 800e922 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x82>
 800e918:	2101      	movs	r1, #1
 800e91a:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800e91e:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800e922:	bd70      	pop	{r4, r5, r6, pc}

0800e924 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800e924:	2244      	movs	r2, #68	; 0x44
 800e926:	fb02 0101 	mla	r1, r2, r1, r0
 800e92a:	68c3      	ldr	r3, [r0, #12]
 800e92c:	f8d1 2534 	ldr.w	r2, [r1, #1332]	; 0x534
 800e930:	f8d1 0538 	ldr.w	r0, [r1, #1336]	; 0x538
 800e934:	b510      	push	{r4, lr}
 800e936:	f8d1 451c 	ldr.w	r4, [r1, #1308]	; 0x51c
 800e93a:	1a9a      	subs	r2, r3, r2
 800e93c:	b184      	cbz	r4, 800e960 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800e93e:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800e942:	1a5b      	subs	r3, r3, r1
 800e944:	b128      	cbz	r0, 800e952 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800e946:	f242 700f 	movw	r0, #9999	; 0x270f
 800e94a:	4283      	cmp	r3, r0
 800e94c:	d90d      	bls.n	800e96a <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800e94e:	4282      	cmp	r2, r0
 800e950:	e002      	b.n	800e958 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800e952:	f242 7010 	movw	r0, #10000	; 0x2710
 800e956:	4283      	cmp	r3, r0
 800e958:	bf94      	ite	ls
 800e95a:	2000      	movls	r0, #0
 800e95c:	2001      	movhi	r0, #1
 800e95e:	bd10      	pop	{r4, pc}
 800e960:	2800      	cmp	r0, #0
 800e962:	d0fc      	beq.n	800e95e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800e964:	f242 7010 	movw	r0, #10000	; 0x2710
 800e968:	e7f1      	b.n	800e94e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800e96a:	2000      	movs	r0, #0
 800e96c:	e7f7      	b.n	800e95e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800e96e <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800e96e:	684a      	ldr	r2, [r1, #4]
 800e970:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800e972:	429a      	cmp	r2, r3
 800e974:	b510      	push	{r4, lr}
 800e976:	d10d      	bne.n	800e994 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800e978:	f100 0391 	add.w	r3, r0, #145	; 0x91
 800e97c:	3107      	adds	r1, #7
 800e97e:	30a1      	adds	r0, #161	; 0xa1
 800e980:	4283      	cmp	r3, r0
 800e982:	d101      	bne.n	800e988 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 800e984:	2001      	movs	r0, #1
 800e986:	bd10      	pop	{r4, pc}
 800e988:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e98c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800e990:	4294      	cmp	r4, r2
 800e992:	d0f5      	beq.n	800e980 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800e994:	2000      	movs	r0, #0
 800e996:	e7f6      	b.n	800e986 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>

0800e998 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800e998:	2301      	movs	r3, #1
 800e99a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99e:	4604      	mov	r4, r0
 800e9a0:	4690      	mov	r8, r2
 800e9a2:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800e9a6:	460f      	mov	r7, r1
 800e9a8:	2900      	cmp	r1, #0
 800e9aa:	d044      	beq.n	800ea36 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9e>
 800e9ac:	2a00      	cmp	r2, #0
 800e9ae:	d042      	beq.n	800ea36 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9e>
 800e9b0:	2600      	movs	r6, #0
 800e9b2:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800e9b6:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800e9ba:	f500 65a4 	add.w	r5, r0, #1312	; 0x520
 800e9be:	4632      	mov	r2, r6
 800e9c0:	4637      	mov	r7, r6
 800e9c2:	f240 6904 	movw	r9, #1540	; 0x604
 800e9c6:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
 800e9ca:	f1b8 0f00 	cmp.w	r8, #0
 800e9ce:	d018      	beq.n	800ea02 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800e9d0:	2110      	movs	r1, #16
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	f845 7c04 	str.w	r7, [r5, #-4]
 800e9d8:	f7ff fdb8 	bl	800e54c <memset.constprop.0.isra.0>
 800e9dc:	2110      	movs	r1, #16
 800e9de:	f105 001c 	add.w	r0, r5, #28
 800e9e2:	61af      	str	r7, [r5, #24]
 800e9e4:	f7ff fdb2 	bl	800e54c <memset.constprop.0.isra.0>
 800e9e8:	f7fe f99c 	bl	800cd24 <lightset::Data::Get()>
 800e9ec:	fb09 0006 	mla	r0, r9, r6, r0
 800e9f0:	4642      	mov	r2, r8
 800e9f2:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800e9f6:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
 800e9fa:	f885 7036 	strb.w	r7, [r5, #54]	; 0x36
 800e9fe:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
 800ea02:	3601      	adds	r6, #1
 800ea04:	2e42      	cmp	r6, #66	; 0x42
 800ea06:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800ea0a:	d1dc      	bne.n	800e9c6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2e>
 800ea0c:	b12a      	cbz	r2, 800ea1a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800ea0e:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
 800ea12:	2901      	cmp	r1, #1
 800ea14:	d04a      	beq.n	800eaac <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x114>
 800ea16:	2902      	cmp	r1, #2
 800ea18:	d04d      	beq.n	800eab6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x11e>
 800ea1a:	4b29      	ldr	r3, [pc, #164]	; (800eac0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x128>)
 800ea1c:	2102      	movs	r1, #2
 800ea1e:	6818      	ldr	r0, [r3, #0]
 800ea20:	f009 fb76 	bl	8018110 <LedBlink::SetMode(ledblink::Mode)>
 800ea24:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ea28:	f023 0302 	bic.w	r3, r3, #2
 800ea2c:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800ea30:	b003      	add	sp, #12
 800ea32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea36:	2600      	movs	r6, #0
 800ea38:	f204 553c 	addw	r5, r4, #1340	; 0x53c
 800ea3c:	4632      	mov	r2, r6
 800ea3e:	f240 6b04 	movw	fp, #1540	; 0x604
 800ea42:	46b1      	mov	r9, r6
 800ea44:	f895 a01a 	ldrb.w	sl, [r5, #26]
 800ea48:	f1ba 0f00 	cmp.w	sl, #0
 800ea4c:	d028      	beq.n	800eaa0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 800ea4e:	b15f      	cbz	r7, 800ea68 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800ea50:	f855 3c20 	ldr.w	r3, [r5, #-32]
 800ea54:	b143      	cbz	r3, 800ea68 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800ea56:	f845 9c20 	str.w	r9, [r5, #-32]
 800ea5a:	2110      	movs	r1, #16
 800ea5c:	f1a5 001c 	sub.w	r0, r5, #28
 800ea60:	f7ff fd74 	bl	800e54c <memset.constprop.0.isra.0>
 800ea64:	f885 9019 	strb.w	r9, [r5, #25]
 800ea68:	f1b8 0f00 	cmp.w	r8, #0
 800ea6c:	d00a      	beq.n	800ea84 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800ea6e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800ea72:	b13b      	cbz	r3, 800ea84 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800ea74:	f845 9c04 	str.w	r9, [r5, #-4]
 800ea78:	2110      	movs	r1, #16
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	f7ff fd66 	bl	800e54c <memset.constprop.0.isra.0>
 800ea80:	f885 9019 	strb.w	r9, [r5, #25]
 800ea84:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800ea88:	b953      	cbnz	r3, 800eaa0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 800ea8a:	9301      	str	r3, [sp, #4]
 800ea8c:	f7fe f94a 	bl	800cd24 <lightset::Data::Get()>
 800ea90:	fb0b 0006 	mla	r0, fp, r6, r0
 800ea94:	9b01      	ldr	r3, [sp, #4]
 800ea96:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
 800ea9a:	4652      	mov	r2, sl
 800ea9c:	762b      	strb	r3, [r5, #24]
 800ea9e:	76ab      	strb	r3, [r5, #26]
 800eaa0:	3601      	adds	r6, #1
 800eaa2:	2e42      	cmp	r6, #66	; 0x42
 800eaa4:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800eaa8:	d1cc      	bne.n	800ea44 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xac>
 800eaaa:	e7af      	b.n	800ea0c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x74>
 800eaac:	6860      	ldr	r0, [r4, #4]
 800eaae:	6803      	ldr	r3, [r0, #0]
 800eab0:	695b      	ldr	r3, [r3, #20]
 800eab2:	4798      	blx	r3
 800eab4:	e7b1      	b.n	800ea1a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800eab6:	6860      	ldr	r0, [r4, #4]
 800eab8:	6803      	ldr	r3, [r0, #0]
 800eaba:	699b      	ldr	r3, [r3, #24]
 800eabc:	4798      	blx	r3
 800eabe:	e7ac      	b.n	800ea1a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800eac0:	2000fdc0 	andcs	pc, r0, r0, asr #27

0800eac4 <E131Bridge::HandleDmx()>:
 800eac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac8:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800eacc:	b085      	sub	sp, #20
 800eace:	ba7f      	rev16	r7, r7
 800ead0:	b2bf      	uxth	r7, r7
 800ead2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ead6:	4604      	mov	r4, r0
 800ead8:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800eadc:	3f01      	subs	r7, #1
 800eade:	f500 65a4 	add.w	r5, r0, #1312	; 0x520
 800eae2:	9301      	str	r3, [sp, #4]
 800eae4:	2600      	movs	r6, #0
 800eae6:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800eaea:	b353      	cbz	r3, 800eb42 <E131Bridge::HandleDmx()+0x7e>
 800eaec:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800eaf0:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800eaf4:	ba5b      	rev16	r3, r3
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d122      	bne.n	800eb42 <E131Bridge::HandleDmx()+0x7e>
 800eafc:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800eb00:	9302      	str	r3, [sp, #8]
 800eb02:	f1a5 0108 	sub.w	r1, r5, #8
 800eb06:	4620      	mov	r0, r4
 800eb08:	f7ff ff31 	bl	800e96e <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800eb0c:	f105 0114 	add.w	r1, r5, #20
 800eb10:	4682      	mov	sl, r0
 800eb12:	4620      	mov	r0, r4
 800eb14:	f7ff ff2b 	bl	800e96e <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800eb18:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800eb1c:	4680      	mov	r8, r0
 800eb1e:	f1ba 0f00 	cmp.w	sl, #0
 800eb22:	d01a      	beq.n	800eb5a <E131Bridge::HandleDmx()+0x96>
 800eb24:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800eb28:	7c2a      	ldrb	r2, [r5, #16]
 800eb2a:	742b      	strb	r3, [r5, #16]
 800eb2c:	3313      	adds	r3, #19
 800eb2e:	1a9b      	subs	r3, r3, r2
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	2b13      	cmp	r3, #19
 800eb34:	d905      	bls.n	800eb42 <E131Bridge::HandleDmx()+0x7e>
 800eb36:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800eb3a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800eb3e:	2a00      	cmp	r2, #0
 800eb40:	da14      	bge.n	800eb6c <E131Bridge::HandleDmx()+0xa8>
 800eb42:	9b01      	ldr	r3, [sp, #4]
 800eb44:	3601      	adds	r6, #1
 800eb46:	f203 6304 	addw	r3, r3, #1540	; 0x604
 800eb4a:	2e42      	cmp	r6, #66	; 0x42
 800eb4c:	9301      	str	r3, [sp, #4]
 800eb4e:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800eb52:	d1c8      	bne.n	800eae6 <E131Bridge::HandleDmx()+0x22>
 800eb54:	b005      	add	sp, #20
 800eb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb5a:	2800      	cmp	r0, #0
 800eb5c:	d0eb      	beq.n	800eb36 <E131Bridge::HandleDmx()+0x72>
 800eb5e:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800eb62:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800eb66:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800eb6a:	e7df      	b.n	800eb2c <E131Bridge::HandleDmx()+0x68>
 800eb6c:	065a      	lsls	r2, r3, #25
 800eb6e:	d50b      	bpl.n	800eb88 <E131Bridge::HandleDmx()+0xc4>
 800eb70:	f1ba 0f00 	cmp.w	sl, #0
 800eb74:	d102      	bne.n	800eb7c <E131Bridge::HandleDmx()+0xb8>
 800eb76:	f1b8 0f00 	cmp.w	r8, #0
 800eb7a:	d0e2      	beq.n	800eb42 <E131Bridge::HandleDmx()+0x7e>
 800eb7c:	4642      	mov	r2, r8
 800eb7e:	4651      	mov	r1, sl
 800eb80:	4620      	mov	r0, r4
 800eb82:	f7ff ff09 	bl	800e998 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800eb86:	e7dc      	b.n	800eb42 <E131Bridge::HandleDmx()+0x7e>
 800eb88:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800eb8c:	b133      	cbz	r3, 800eb9c <E131Bridge::HandleDmx()+0xd8>
 800eb8e:	f894 34f9 	ldrb.w	r3, [r4, #1273]	; 0x4f9
 800eb92:	b91b      	cbnz	r3, 800eb9c <E131Bridge::HandleDmx()+0xd8>
 800eb94:	4631      	mov	r1, r6
 800eb96:	4620      	mov	r0, r4
 800eb98:	f7ff fe82 	bl	800e8a0 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800eb9c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800eba0:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d259      	bcs.n	800ec5c <E131Bridge::HandleDmx()+0x198>
 800eba8:	4631      	mov	r1, r6
 800ebaa:	4620      	mov	r0, r4
 800ebac:	9303      	str	r3, [sp, #12]
 800ebae:	f7ff feb9 	bl	800e924 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800ebb2:	2800      	cmp	r0, #0
 800ebb4:	d0c5      	beq.n	800eb42 <E131Bridge::HandleDmx()+0x7e>
 800ebb6:	9b03      	ldr	r3, [sp, #12]
 800ebb8:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800ebbc:	9b02      	ldr	r3, [sp, #8]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d154      	bne.n	800ec6c <E131Bridge::HandleDmx()+0x1a8>
 800ebc2:	f1bb 0f00 	cmp.w	fp, #0
 800ebc6:	d15c      	bne.n	800ec82 <E131Bridge::HandleDmx()+0x1be>
 800ebc8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ebca:	f845 3c04 	str.w	r3, [r5, #-4]
 800ebce:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ebd2:	742b      	strb	r3, [r5, #16]
 800ebd4:	2210      	movs	r2, #16
 800ebd6:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f7ff fcbe 	bl	800e55c <memcpy.isra.0>
 800ebe0:	68e3      	ldr	r3, [r4, #12]
 800ebe2:	f845 3c08 	str.w	r3, [r5, #-8]
 800ebe6:	463a      	mov	r2, r7
 800ebe8:	4649      	mov	r1, r9
 800ebea:	4630      	mov	r0, r6
 800ebec:	f7fe f8a6 	bl	800cd3c <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800ebf0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800ebf4:	069b      	lsls	r3, r3, #26
 800ebf6:	f100 80aa 	bmi.w	800ed4e <E131Bridge::HandleDmx()+0x28a>
 800ebfa:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	2a00      	cmp	r2, #0
 800ec02:	f000 80a8 	beq.w	800ed56 <E131Bridge::HandleDmx()+0x292>
 800ec06:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800ec0a:	2a00      	cmp	r2, #0
 800ec0c:	f040 80a3 	bne.w	800ed56 <E131Bridge::HandleDmx()+0x292>
 800ec10:	ba5b      	rev16	r3, r3
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	f1ba 0f00 	cmp.w	sl, #0
 800ec18:	f040 8096 	bne.w	800ed48 <E131Bridge::HandleDmx()+0x284>
 800ec1c:	f1b8 0f00 	cmp.w	r8, #0
 800ec20:	f040 8092 	bne.w	800ed48 <E131Bridge::HandleDmx()+0x284>
 800ec24:	69aa      	ldr	r2, [r5, #24]
 800ec26:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800ec2a:	3a00      	subs	r2, #0
 800ec2c:	bf18      	it	ne
 800ec2e:	2201      	movne	r2, #1
 800ec30:	3900      	subs	r1, #0
 800ec32:	bf18      	it	ne
 800ec34:	2101      	movne	r1, #1
 800ec36:	4620      	mov	r0, r4
 800ec38:	f7ff fd66 	bl	800e708 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800ec3c:	f240 1301 	movw	r3, #257	; 0x101
 800ec40:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800ec44:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	f040 8089 	bne.w	800ed60 <E131Bridge::HandleDmx()+0x29c>
 800ec4e:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ec52:	f043 0302 	orr.w	r3, r3, #2
 800ec56:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800ec5a:	e772      	b.n	800eb42 <E131Bridge::HandleDmx()+0x7e>
 800ec5c:	d9ae      	bls.n	800ebbc <E131Bridge::HandleDmx()+0xf8>
 800ec5e:	2200      	movs	r2, #0
 800ec60:	f845 2c04 	str.w	r2, [r5, #-4]
 800ec64:	61aa      	str	r2, [r5, #24]
 800ec66:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800ec6a:	e7a5      	b.n	800ebb8 <E131Bridge::HandleDmx()+0xf4>
 800ec6c:	f1ba 0f00 	cmp.w	sl, #0
 800ec70:	f000 809a 	beq.w	800eda8 <E131Bridge::HandleDmx()+0x2e4>
 800ec74:	f1bb 0f00 	cmp.w	fp, #0
 800ec78:	d159      	bne.n	800ed2e <E131Bridge::HandleDmx()+0x26a>
 800ec7a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ec7e:	742b      	strb	r3, [r5, #16]
 800ec80:	e7ae      	b.n	800ebe0 <E131Bridge::HandleDmx()+0x11c>
 800ec82:	f1b8 0f00 	cmp.w	r8, #0
 800ec86:	d038      	beq.n	800ecfa <E131Bridge::HandleDmx()+0x236>
 800ec88:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ec8c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ec90:	68e3      	ldr	r3, [r4, #12]
 800ec92:	616b      	str	r3, [r5, #20]
 800ec94:	f7fe f846 	bl	800cd24 <lightset::Data::Get()>
 800ec98:	9b01      	ldr	r3, [sp, #4]
 800ec9a:	4683      	mov	fp, r0
 800ec9c:	f5a3 7000 	sub.w	r0, r3, #512	; 0x200
 800eca0:	463a      	mov	r2, r7
 800eca2:	4649      	mov	r1, r9
 800eca4:	4458      	add	r0, fp
 800eca6:	f7ff fc59 	bl	800e55c <memcpy.isra.0>
 800ecaa:	f240 6304 	movw	r3, #1540	; 0x604
 800ecae:	fb03 b306 	mla	r3, r3, r6, fp
 800ecb2:	463a      	mov	r2, r7
 800ecb4:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800ecb8:	9b01      	ldr	r3, [sp, #4]
 800ecba:	4649      	mov	r1, r9
 800ecbc:	eb0b 0003 	add.w	r0, fp, r3
 800ecc0:	f7ff fc4c 	bl	800e55c <memcpy.isra.0>
 800ecc4:	e794      	b.n	800ebf0 <E131Bridge::HandleDmx()+0x12c>
 800ecc6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ecc8:	61ab      	str	r3, [r5, #24]
 800ecca:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ecce:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ecd2:	2210      	movs	r2, #16
 800ecd4:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800ecd8:	f105 001c 	add.w	r0, r5, #28
 800ecdc:	f7ff fc3e 	bl	800e55c <memcpy.isra.0>
 800ece0:	68e3      	ldr	r3, [r4, #12]
 800ece2:	616b      	str	r3, [r5, #20]
 800ece4:	4631      	mov	r1, r6
 800ece6:	4620      	mov	r0, r4
 800ece8:	f7ff fdcb 	bl	800e882 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800ecec:	463a      	mov	r2, r7
 800ecee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ecf0:	4649      	mov	r1, r9
 800ecf2:	4630      	mov	r0, r6
 800ecf4:	f7fe f869 	bl	800cdca <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800ecf8:	e77a      	b.n	800ebf0 <E131Bridge::HandleDmx()+0x12c>
 800ecfa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ecfc:	f845 3c04 	str.w	r3, [r5, #-4]
 800ed00:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ed04:	742b      	strb	r3, [r5, #16]
 800ed06:	2210      	movs	r2, #16
 800ed08:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	f7ff fc25 	bl	800e55c <memcpy.isra.0>
 800ed12:	68e3      	ldr	r3, [r4, #12]
 800ed14:	f845 3c08 	str.w	r3, [r5, #-8]
 800ed18:	4631      	mov	r1, r6
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	f7ff fdb1 	bl	800e882 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800ed20:	463a      	mov	r2, r7
 800ed22:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ed24:	4649      	mov	r1, r9
 800ed26:	4630      	mov	r0, r6
 800ed28:	f7fe f826 	bl	800cd78 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800ed2c:	e760      	b.n	800ebf0 <E131Bridge::HandleDmx()+0x12c>
 800ed2e:	f1b8 0f00 	cmp.w	r8, #0
 800ed32:	d103      	bne.n	800ed3c <E131Bridge::HandleDmx()+0x278>
 800ed34:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ed38:	742b      	strb	r3, [r5, #16]
 800ed3a:	e7ea      	b.n	800ed12 <E131Bridge::HandleDmx()+0x24e>
 800ed3c:	4820      	ldr	r0, [pc, #128]	; (800edc0 <E131Bridge::HandleDmx()+0x2fc>)
 800ed3e:	b005      	add	sp, #20
 800ed40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed44:	f7fb bc12 	b.w	800a56c <printf>
 800ed48:	4642      	mov	r2, r8
 800ed4a:	4651      	mov	r1, sl
 800ed4c:	e773      	b.n	800ec36 <E131Bridge::HandleDmx()+0x172>
 800ed4e:	f04f 0300 	mov.w	r3, #0
 800ed52:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800ed56:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	f47f af72 	bne.w	800ec44 <E131Bridge::HandleDmx()+0x180>
 800ed60:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800ed64:	f7fd ffde 	bl	800cd24 <lightset::Data::Get()>
 800ed68:	f8d8 2000 	ldr.w	r2, [r8]
 800ed6c:	f240 6304 	movw	r3, #1540	; 0x604
 800ed70:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800ed74:	9a01      	ldr	r2, [sp, #4]
 800ed76:	fb03 0306 	mla	r3, r3, r6, r0
 800ed7a:	1882      	adds	r2, r0, r2
 800ed7c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
 800ed80:	4631      	mov	r1, r6
 800ed82:	4640      	mov	r0, r8
 800ed84:	47d0      	blx	sl
 800ed86:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	f47f af5f 	bne.w	800ec4e <E131Bridge::HandleDmx()+0x18a>
 800ed90:	6860      	ldr	r0, [r4, #4]
 800ed92:	6803      	ldr	r3, [r0, #0]
 800ed94:	4631      	mov	r1, r6
 800ed96:	689b      	ldr	r3, [r3, #8]
 800ed98:	4798      	blx	r3
 800ed9a:	f04f 0301 	mov.w	r3, #1
 800ed9e:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800eda2:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800eda6:	e752      	b.n	800ec4e <E131Bridge::HandleDmx()+0x18a>
 800eda8:	f1bb 0f00 	cmp.w	fp, #0
 800edac:	d08b      	beq.n	800ecc6 <E131Bridge::HandleDmx()+0x202>
 800edae:	f1b8 0f00 	cmp.w	r8, #0
 800edb2:	d0c3      	beq.n	800ed3c <E131Bridge::HandleDmx()+0x278>
 800edb4:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800edb8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800edbc:	e790      	b.n	800ece0 <E131Bridge::HandleDmx()+0x21c>
 800edbe:	bf00      	nop
 800edc0:	0801c0fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, lr, pc}

0800edc4 <E131Bridge::IsValidRoot()>:
 800edc4:	b530      	push	{r4, r5, lr}
 800edc6:	4a0d      	ldr	r2, [pc, #52]	; (800edfc <E131Bridge::IsValidRoot()+0x38>)
 800edc8:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 800edcc:	f100 018b 	add.w	r1, r0, #139	; 0x8b
 800edd0:	4299      	cmp	r1, r3
 800edd2:	d109      	bne.n	800ede8 <E131Bridge::IsValidRoot()+0x24>
 800edd4:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800edd8:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800eddc:	d00c      	beq.n	800edf8 <E131Bridge::IsValidRoot()+0x34>
 800edde:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800ede2:	4258      	negs	r0, r3
 800ede4:	4158      	adcs	r0, r3
 800ede6:	bd30      	pop	{r4, r5, pc}
 800ede8:	f812 4b01 	ldrb.w	r4, [r2], #1
 800edec:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800edf0:	42a5      	cmp	r5, r4
 800edf2:	d0ed      	beq.n	800edd0 <E131Bridge::IsValidRoot()+0xc>
 800edf4:	2000      	movs	r0, #0
 800edf6:	e7f6      	b.n	800ede6 <E131Bridge::IsValidRoot()+0x22>
 800edf8:	2001      	movs	r0, #1
 800edfa:	e7f4      	b.n	800ede6 <E131Bridge::IsValidRoot()+0x22>
 800edfc:	0801c221 	stmdaeq	r1, {r0, r5, r9, lr, pc}

0800ee00 <E131Bridge::IsValidDataPacket()>:
 800ee00:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800ee04:	2b02      	cmp	r3, #2
 800ee06:	d10d      	bne.n	800ee24 <E131Bridge::IsValidDataPacket()+0x24>
 800ee08:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800ee0c:	2ba1      	cmp	r3, #161	; 0xa1
 800ee0e:	d109      	bne.n	800ee24 <E131Bridge::IsValidDataPacket()+0x24>
 800ee10:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800ee14:	b933      	cbnz	r3, 800ee24 <E131Bridge::IsValidDataPacket()+0x24>
 800ee16:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800ee1a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800ee1e:	4258      	negs	r0, r3
 800ee20:	4158      	adcs	r0, r3
 800ee22:	4770      	bx	lr
 800ee24:	2000      	movs	r0, #0
 800ee26:	4770      	bx	lr

0800ee28 <E131Bridge::Run()>:
 800ee28:	b530      	push	{r4, r5, lr}
 800ee2a:	4601      	mov	r1, r0
 800ee2c:	b085      	sub	sp, #20
 800ee2e:	4604      	mov	r4, r0
 800ee30:	f10d 030e 	add.w	r3, sp, #14
 800ee34:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800ee38:	9300      	str	r3, [sp, #0]
 800ee3a:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800ee3e:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800ee42:	f006 f8d5 	bl	8014ff0 <udp_recv>
 800ee46:	4b3a      	ldr	r3, [pc, #232]	; (800ef30 <E131Bridge::Run()+0x108>)
 800ee48:	681d      	ldr	r5, [r3, #0]
 800ee4a:	60e5      	str	r5, [r4, #12]
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	d138      	bne.n	800eec2 <E131Bridge::Run()+0x9a>
 800ee50:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800ee54:	b16b      	cbz	r3, 800ee72 <E131Bridge::Run()+0x4a>
 800ee56:	6923      	ldr	r3, [r4, #16]
 800ee58:	1aed      	subs	r5, r5, r3
 800ee5a:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800ee5e:	429d      	cmp	r5, r3
 800ee60:	d928      	bls.n	800eeb4 <E131Bridge::Run()+0x8c>
 800ee62:	6863      	ldr	r3, [r4, #4]
 800ee64:	b9eb      	cbnz	r3, 800eea2 <E131Bridge::Run()+0x7a>
 800ee66:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ee6a:	f023 0302 	bic.w	r3, r3, #2
 800ee6e:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800ee72:	6963      	ldr	r3, [r4, #20]
 800ee74:	b12b      	cbz	r3, 800ee82 <E131Bridge::Run()+0x5a>
 800ee76:	4620      	mov	r0, r4
 800ee78:	f000 f94c 	bl	800f114 <E131Bridge::HandleDmxIn()>
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	f000 f8c7 	bl	800f010 <E131Bridge::SendDiscoveryPacket()>
 800ee82:	7a23      	ldrb	r3, [r4, #8]
 800ee84:	b15b      	cbz	r3, 800ee9e <E131Bridge::Run()+0x76>
 800ee86:	4b2b      	ldr	r3, [pc, #172]	; (800ef34 <E131Bridge::Run()+0x10c>)
 800ee88:	6818      	ldr	r0, [r3, #0]
 800ee8a:	6843      	ldr	r3, [r0, #4]
 800ee8c:	2b04      	cmp	r3, #4
 800ee8e:	d006      	beq.n	800ee9e <E131Bridge::Run()+0x76>
 800ee90:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d049      	beq.n	800ef2c <E131Bridge::Run()+0x104>
 800ee98:	2103      	movs	r1, #3
 800ee9a:	f009 f939 	bl	8018110 <LedBlink::SetMode(ledblink::Mode)>
 800ee9e:	b005      	add	sp, #20
 800eea0:	bd30      	pop	{r4, r5, pc}
 800eea2:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d1dd      	bne.n	800ee66 <E131Bridge::Run()+0x3e>
 800eeaa:	2201      	movs	r2, #1
 800eeac:	4611      	mov	r1, r2
 800eeae:	4620      	mov	r0, r4
 800eeb0:	f7ff fd72 	bl	800e998 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800eeb4:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800eeb8:	1a9b      	subs	r3, r3, r2
 800eeba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eebe:	d3d8      	bcc.n	800ee72 <E131Bridge::Run()+0x4a>
 800eec0:	e7d1      	b.n	800ee66 <E131Bridge::Run()+0x3e>
 800eec2:	4620      	mov	r0, r4
 800eec4:	f7ff ff7e 	bl	800edc4 <E131Bridge::IsValidRoot()>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d0e8      	beq.n	800ee9e <E131Bridge::Run()+0x76>
 800eecc:	2300      	movs	r3, #0
 800eece:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800eed2:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800eed6:	6125      	str	r5, [r4, #16]
 800eed8:	b15b      	cbz	r3, 800eef2 <E131Bridge::Run()+0xca>
 800eeda:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800eede:	b943      	cbnz	r3, 800eef2 <E131Bridge::Run()+0xca>
 800eee0:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800eee4:	1aad      	subs	r5, r5, r2
 800eee6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800eeea:	4295      	cmp	r5, r2
 800eeec:	bf88      	it	hi
 800eeee:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800eef2:	6863      	ldr	r3, [r4, #4]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d0bc      	beq.n	800ee72 <E131Bridge::Run()+0x4a>
 800eef8:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800eefc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ef00:	ba1a      	rev	r2, r3
 800ef02:	d108      	bne.n	800ef16 <E131Bridge::Run()+0xee>
 800ef04:	4620      	mov	r0, r4
 800ef06:	f7ff ff7b 	bl	800ee00 <E131Bridge::IsValidDataPacket()>
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	d0b1      	beq.n	800ee72 <E131Bridge::Run()+0x4a>
 800ef0e:	4620      	mov	r0, r4
 800ef10:	f7ff fdd8 	bl	800eac4 <E131Bridge::HandleDmx()>
 800ef14:	e7ad      	b.n	800ee72 <E131Bridge::Run()+0x4a>
 800ef16:	2a08      	cmp	r2, #8
 800ef18:	d1ab      	bne.n	800ee72 <E131Bridge::Run()+0x4a>
 800ef1a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800ef1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ef22:	d1a6      	bne.n	800ee72 <E131Bridge::Run()+0x4a>
 800ef24:	4620      	mov	r0, r4
 800ef26:	f000 f971 	bl	800f20c <E131Bridge::HandleSynchronization()>
 800ef2a:	e7a2      	b.n	800ee72 <E131Bridge::Run()+0x4a>
 800ef2c:	2102      	movs	r1, #2
 800ef2e:	e7b4      	b.n	800ee9a <E131Bridge::Run()+0x72>
 800ef30:	2000fddc 	ldrdcs	pc, [r0], -ip
 800ef34:	2000fdc0 	andcs	pc, r0, r0, asr #27

0800ef38 <E131Bridge::FillDiscoveryPacket()>:
 800ef38:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800ef3c:	b510      	push	{r4, lr}
 800ef3e:	333c      	adds	r3, #60	; 0x3c
 800ef40:	005b      	lsls	r3, r3, #1
 800ef42:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800ef46:	69c3      	ldr	r3, [r0, #28]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800ef4e:	428b      	cmp	r3, r1
 800ef50:	d14a      	bne.n	800efe8 <E131Bridge::FillDiscoveryPacket()+0xb0>
 800ef52:	69c3      	ldr	r3, [r0, #28]
 800ef54:	492d      	ldr	r1, [pc, #180]	; (800f00c <E131Bridge::FillDiscoveryPacket()+0xd4>)
 800ef56:	701a      	strb	r2, [r3, #0]
 800ef58:	2210      	movs	r2, #16
 800ef5a:	705a      	strb	r2, [r3, #1]
 800ef5c:	1cda      	adds	r2, r3, #3
 800ef5e:	330f      	adds	r3, #15
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d144      	bne.n	800efee <E131Bridge::FillDiscoveryPacket()+0xb6>
 800ef64:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800ef68:	69c3      	ldr	r3, [r0, #28]
 800ef6a:	3234      	adds	r2, #52	; 0x34
 800ef6c:	0052      	lsls	r2, r2, #1
 800ef6e:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800ef72:	ba52      	rev16	r2, r2
 800ef74:	821a      	strh	r2, [r3, #16]
 800ef76:	2200      	movs	r2, #0
 800ef78:	749a      	strb	r2, [r3, #18]
 800ef7a:	74da      	strb	r2, [r3, #19]
 800ef7c:	751a      	strb	r2, [r3, #20]
 800ef7e:	2208      	movs	r2, #8
 800ef80:	f803 2f15 	strb.w	r2, [r3, #21]!
 800ef84:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800ef88:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800ef8c:	4291      	cmp	r1, r2
 800ef8e:	d133      	bne.n	800eff8 <E131Bridge::FillDiscoveryPacket()+0xc0>
 800ef90:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800ef94:	69c3      	ldr	r3, [r0, #28]
 800ef96:	3229      	adds	r2, #41	; 0x29
 800ef98:	0052      	lsls	r2, r2, #1
 800ef9a:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800ef9e:	ba52      	rev16	r2, r2
 800efa0:	84da      	strh	r2, [r3, #38]	; 0x26
 800efa2:	2200      	movs	r2, #0
 800efa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800efa8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800efac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800efb0:	2202      	movs	r2, #2
 800efb2:	f803 2f2b 	strb.w	r2, [r3, #43]!
 800efb6:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800efba:	4291      	cmp	r1, r2
 800efbc:	d121      	bne.n	800f002 <E131Bridge::FillDiscoveryPacket()+0xca>
 800efbe:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800efc2:	69c2      	ldr	r2, [r0, #28]
 800efc4:	3304      	adds	r3, #4
 800efc6:	005b      	lsls	r3, r3, #1
 800efc8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800efcc:	ba5b      	rev16	r3, r3
 800efce:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800efd2:	2300      	movs	r3, #0
 800efd4:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800efd8:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800efdc:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800efe0:	2301      	movs	r3, #1
 800efe2:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800efe6:	bd10      	pop	{r4, pc}
 800efe8:	f803 2b01 	strb.w	r2, [r3], #1
 800efec:	e7af      	b.n	800ef4e <E131Bridge::FillDiscoveryPacket()+0x16>
 800efee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eff2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800eff6:	e7b3      	b.n	800ef60 <E131Bridge::FillDiscoveryPacket()+0x28>
 800eff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800effc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f000:	e7c4      	b.n	800ef8c <E131Bridge::FillDiscoveryPacket()+0x54>
 800f002:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f00a:	e7d6      	b.n	800efba <E131Bridge::FillDiscoveryPacket()+0x82>
 800f00c:	0801c221 	stmdaeq	r1, {r0, r5, r9, lr, pc}

0800f010 <E131Bridge::SendDiscoveryPacket()>:
 800f010:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f012:	68c2      	ldr	r2, [r0, #12]
 800f014:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800f018:	f242 710f 	movw	r1, #9999	; 0x270f
 800f01c:	1ad3      	subs	r3, r2, r3
 800f01e:	428b      	cmp	r3, r1
 800f020:	4604      	mov	r4, r0
 800f022:	d924      	bls.n	800f06e <E131Bridge::SendDiscoveryPacket()+0x5e>
 800f024:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800f028:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800f02c:	b1ab      	cbz	r3, 800f05a <E131Bridge::SendDiscoveryPacket()+0x4a>
 800f02e:	2500      	movs	r5, #0
 800f030:	462e      	mov	r6, r5
 800f032:	2300      	movs	r3, #0
 800f034:	f10d 020e 	add.w	r2, sp, #14
 800f038:	4629      	mov	r1, r5
 800f03a:	4620      	mov	r0, r4
 800f03c:	f7ff fc08 	bl	800e850 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800f040:	b140      	cbz	r0, 800f054 <E131Bridge::SendDiscoveryPacket()+0x44>
 800f042:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f046:	69e2      	ldr	r2, [r4, #28]
 800f048:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800f04c:	ba5b      	rev16	r3, r3
 800f04e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800f052:	3601      	adds	r6, #1
 800f054:	3501      	adds	r5, #1
 800f056:	2d42      	cmp	r5, #66	; 0x42
 800f058:	d1eb      	bne.n	800f032 <E131Bridge::SendDiscoveryPacket()+0x22>
 800f05a:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800f064:	6a23      	ldr	r3, [r4, #32]
 800f066:	69e1      	ldr	r1, [r4, #28]
 800f068:	7820      	ldrb	r0, [r4, #0]
 800f06a:	f006 f81d 	bl	80150a8 <udp_send>
 800f06e:	b004      	add	sp, #16
 800f070:	bd70      	pop	{r4, r5, r6, pc}

0800f072 <memcpy.isra.0>:
 800f072:	3801      	subs	r0, #1
 800f074:	440a      	add	r2, r1
 800f076:	4291      	cmp	r1, r2
 800f078:	d100      	bne.n	800f07c <memcpy.isra.0+0xa>
 800f07a:	4770      	bx	lr
 800f07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f080:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f084:	e7f7      	b.n	800f076 <memcpy.isra.0+0x4>
	...

0800f088 <E131Bridge::FillDataPacket()>:
 800f088:	b570      	push	{r4, r5, r6, lr}
 800f08a:	4605      	mov	r5, r0
 800f08c:	6980      	ldr	r0, [r0, #24]
 800f08e:	4920      	ldr	r1, [pc, #128]	; (800f110 <E131Bridge::FillDataPacket()+0x88>)
 800f090:	2400      	movs	r4, #0
 800f092:	2610      	movs	r6, #16
 800f094:	7046      	strb	r6, [r0, #1]
 800f096:	7004      	strb	r4, [r0, #0]
 800f098:	7084      	strb	r4, [r0, #2]
 800f09a:	70c4      	strb	r4, [r0, #3]
 800f09c:	220c      	movs	r2, #12
 800f09e:	3004      	adds	r0, #4
 800f0a0:	f7ff ffe7 	bl	800f072 <memcpy.isra.0>
 800f0a4:	69a8      	ldr	r0, [r5, #24]
 800f0a6:	2304      	movs	r3, #4
 800f0a8:	7543      	strb	r3, [r0, #21]
 800f0aa:	7484      	strb	r4, [r0, #18]
 800f0ac:	74c4      	strb	r4, [r0, #19]
 800f0ae:	7504      	strb	r4, [r0, #20]
 800f0b0:	4632      	mov	r2, r6
 800f0b2:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800f0b6:	3016      	adds	r0, #22
 800f0b8:	f7ff ffdb 	bl	800f072 <memcpy.isra.0>
 800f0bc:	69a8      	ldr	r0, [r5, #24]
 800f0be:	2602      	movs	r6, #2
 800f0c0:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800f0c4:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800f0c8:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800f0cc:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800f0d0:	2240      	movs	r2, #64	; 0x40
 800f0d2:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800f0d6:	302c      	adds	r0, #44	; 0x2c
 800f0d8:	f7ff ffcb 	bl	800f072 <memcpy.isra.0>
 800f0dc:	69ab      	ldr	r3, [r5, #24]
 800f0de:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800f0e2:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800f0e6:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800f0ea:	69ab      	ldr	r3, [r5, #24]
 800f0ec:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800f0f0:	69ab      	ldr	r3, [r5, #24]
 800f0f2:	22a1      	movs	r2, #161	; 0xa1
 800f0f4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800f0f8:	69ab      	ldr	r3, [r5, #24]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800f100:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800f104:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800f108:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800f10c:	bd70      	pop	{r4, r5, r6, pc}
 800f10e:	bf00      	nop
 800f110:	0801c221 	stmdaeq	r1, {r0, r5, r9, lr, pc}

0800f114 <E131Bridge::HandleDmxIn()>:
 800f114:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f118:	f500 55b4 	add.w	r5, r0, #5760	; 0x1680
 800f11c:	4f3a      	ldr	r7, [pc, #232]	; (800f208 <E131Bridge::HandleDmxIn()+0xf4>)
 800f11e:	4604      	mov	r4, r0
 800f120:	351c      	adds	r5, #28
 800f122:	2600      	movs	r6, #0
 800f124:	78ab      	ldrb	r3, [r5, #2]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d056      	beq.n	800f1d8 <E131Bridge::HandleDmxIn()+0xc4>
 800f12a:	6960      	ldr	r0, [r4, #20]
 800f12c:	6803      	ldr	r3, [r0, #0]
 800f12e:	4631      	mov	r1, r6
 800f130:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800f134:	aa02      	add	r2, sp, #8
 800f136:	ab03      	add	r3, sp, #12
 800f138:	47c0      	blx	r8
 800f13a:	4601      	mov	r1, r0
 800f13c:	2800      	cmp	r0, #0
 800f13e:	d053      	beq.n	800f1e8 <E131Bridge::HandleDmxIn()+0xd4>
 800f140:	9a02      	ldr	r2, [sp, #8]
 800f142:	69a0      	ldr	r0, [r4, #24]
 800f144:	b293      	uxth	r3, r2
 800f146:	f103 0c6d 	add.w	ip, r3, #109	; 0x6d
 800f14a:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800f14e:	fa9c fc9c 	rev16.w	ip, ip
 800f152:	f8a0 c010 	strh.w	ip, [r0, #16]
 800f156:	f103 0c57 	add.w	ip, r3, #87	; 0x57
 800f15a:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800f15e:	fa9c fc9c 	rev16.w	ip, ip
 800f162:	f8a0 c026 	strh.w	ip, [r0, #38]	; 0x26
 800f166:	f895 c009 	ldrb.w	ip, [r5, #9]
 800f16a:	f880 c06c 	strb.w	ip, [r0, #108]	; 0x6c
 800f16e:	f895 c008 	ldrb.w	ip, [r5, #8]
 800f172:	f10c 0001 	add.w	r0, ip, #1
 800f176:	7228      	strb	r0, [r5, #8]
 800f178:	69a0      	ldr	r0, [r4, #24]
 800f17a:	f880 c06f 	strb.w	ip, [r0, #111]	; 0x6f
 800f17e:	f8b5 c000 	ldrh.w	ip, [r5]
 800f182:	69a0      	ldr	r0, [r4, #24]
 800f184:	330a      	adds	r3, #10
 800f186:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800f18a:	fa9c fc9c 	rev16.w	ip, ip
 800f18e:	ba5b      	rev16	r3, r3
 800f190:	f8a0 c071 	strh.w	ip, [r0, #113]	; 0x71
 800f194:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800f198:	307d      	adds	r0, #125	; 0x7d
 800f19a:	f7ff ff6a 	bl	800f072 <memcpy.isra.0>
 800f19e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800f1a2:	69a1      	ldr	r1, [r4, #24]
 800f1a4:	7820      	ldrb	r0, [r4, #0]
 800f1a6:	ba53      	rev16	r3, r2
 800f1a8:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800f1ac:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800f1b0:	9300      	str	r3, [sp, #0]
 800f1b2:	327d      	adds	r2, #125	; 0x7d
 800f1b4:	686b      	ldr	r3, [r5, #4]
 800f1b6:	b292      	uxth	r2, r2
 800f1b8:	f005 ff76 	bl	80150a8 <udp_send>
 800f1bc:	683a      	ldr	r2, [r7, #0]
 800f1be:	2301      	movs	r3, #1
 800f1c0:	40b3      	lsls	r3, r6
 800f1c2:	ea33 0102 	bics.w	r1, r3, r2
 800f1c6:	d007      	beq.n	800f1d8 <E131Bridge::HandleDmxIn()+0xc4>
 800f1c8:	4313      	orrs	r3, r2
 800f1ca:	603b      	str	r3, [r7, #0]
 800f1cc:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800f1d0:	f043 0301 	orr.w	r3, r3, #1
 800f1d4:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800f1d8:	3601      	adds	r6, #1
 800f1da:	2e42      	cmp	r6, #66	; 0x42
 800f1dc:	f105 050c 	add.w	r5, r5, #12
 800f1e0:	d1a0      	bne.n	800f124 <E131Bridge::HandleDmxIn()+0x10>
 800f1e2:	b004      	add	sp, #16
 800f1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1e8:	9b03      	ldr	r3, [sp, #12]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d1f4      	bne.n	800f1d8 <E131Bridge::HandleDmxIn()+0xc4>
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	40b2      	lsls	r2, r6
 800f1f4:	ea23 0302 	bic.w	r3, r3, r2
 800f1f8:	603b      	str	r3, [r7, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d1ec      	bne.n	800f1d8 <E131Bridge::HandleDmxIn()+0xc4>
 800f1fe:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800f202:	f023 0301 	bic.w	r3, r3, #1
 800f206:	e7e5      	b.n	800f1d4 <E131Bridge::HandleDmxIn()+0xc0>
 800f208:	200006e4 	andcs	r0, r0, r4, ror #13

0800f20c <E131Bridge::HandleSynchronization()>:
 800f20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f210:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800f214:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800f218:	ba5b      	rev16	r3, r3
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	429a      	cmp	r2, r3
 800f21e:	4604      	mov	r4, r0
 800f220:	d00a      	beq.n	800f238 <E131Bridge::HandleSynchronization()+0x2c>
 800f222:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800f226:	429a      	cmp	r2, r3
 800f228:	d006      	beq.n	800f238 <E131Bridge::HandleSynchronization()+0x2c>
 800f22a:	4b24      	ldr	r3, [pc, #144]	; (800f2bc <E131Bridge::HandleSynchronization()+0xb0>)
 800f22c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f230:	6818      	ldr	r0, [r3, #0]
 800f232:	2102      	movs	r1, #2
 800f234:	f008 bf6c 	b.w	8018110 <LedBlink::SetMode(ledblink::Mode)>
 800f238:	68e3      	ldr	r3, [r4, #12]
 800f23a:	4e21      	ldr	r6, [pc, #132]	; (800f2c0 <E131Bridge::HandleSynchronization()+0xb4>)
 800f23c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800f2c4 <E131Bridge::HandleSynchronization()+0xb8>
 800f240:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800f244:	2500      	movs	r5, #0
 800f246:	4627      	mov	r7, r4
 800f248:	46a9      	mov	r9, r5
 800f24a:	f897 3516 	ldrb.w	r3, [r7, #1302]	; 0x516
 800f24e:	b323      	cbz	r3, 800f29a <E131Bridge::HandleSynchronization()+0x8e>
 800f250:	f8d8 3000 	ldr.w	r3, [r8]
 800f254:	6860      	ldr	r0, [r4, #4]
 800f256:	07da      	lsls	r2, r3, #31
 800f258:	bf5c      	itt	pl
 800f25a:	2301      	movpl	r3, #1
 800f25c:	f8c8 3000 	strpl.w	r3, [r8]
 800f260:	6803      	ldr	r3, [r0, #0]
 800f262:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800f266:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800f26a:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800f26e:	4629      	mov	r1, r5
 800f270:	47d0      	blx	sl
 800f272:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800f276:	b93b      	cbnz	r3, 800f288 <E131Bridge::HandleSynchronization()+0x7c>
 800f278:	6860      	ldr	r0, [r4, #4]
 800f27a:	6803      	ldr	r3, [r0, #0]
 800f27c:	4629      	mov	r1, r5
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	4798      	blx	r3
 800f282:	2301      	movs	r3, #1
 800f284:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
 800f288:	f8d8 3000 	ldr.w	r3, [r8]
 800f28c:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800f290:	07db      	lsls	r3, r3, #31
 800f292:	bf5c      	itt	pl
 800f294:	2301      	movpl	r3, #1
 800f296:	f8c8 3000 	strpl.w	r3, [r8]
 800f29a:	3501      	adds	r5, #1
 800f29c:	2d42      	cmp	r5, #66	; 0x42
 800f29e:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800f2a2:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800f2a6:	d1d0      	bne.n	800f24a <E131Bridge::HandleSynchronization()+0x3e>
 800f2a8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f2aa:	b120      	cbz	r0, 800f2b6 <E131Bridge::HandleSynchronization()+0xaa>
 800f2ac:	6803      	ldr	r3, [r0, #0]
 800f2ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2b2:	689b      	ldr	r3, [r3, #8]
 800f2b4:	4718      	bx	r3
 800f2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ba:	bf00      	nop
 800f2bc:	2000fdc0 	andcs	pc, r0, r0, asr #27
 800f2c0:	20030000 	andcs	r0, r3, r0
 800f2c4:	200006c8 	andcs	r0, r0, r8, asr #13

0800f2c8 <E131Bridge::Print()>:
 800f2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2cc:	b08c      	sub	sp, #48	; 0x30
 800f2ce:	a902      	add	r1, sp, #8
 800f2d0:	4604      	mov	r4, r0
 800f2d2:	2500      	movs	r5, #0
 800f2d4:	3024      	adds	r0, #36	; 0x24
 800f2d6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800f2da:	f001 fe27 	bl	8010f2c <uuid_unparse>
 800f2de:	482c      	ldr	r0, [pc, #176]	; (800f390 <E131Bridge::Print()+0xc8>)
 800f2e0:	f7fb f944 	bl	800a56c <printf>
 800f2e4:	4b2b      	ldr	r3, [pc, #172]	; (800f394 <E131Bridge::Print()+0xcc>)
 800f2e6:	482c      	ldr	r0, [pc, #176]	; (800f398 <E131Bridge::Print()+0xd0>)
 800f2e8:	7819      	ldrb	r1, [r3, #0]
 800f2ea:	785a      	ldrb	r2, [r3, #1]
 800f2ec:	f7fb f93e 	bl	800a56c <printf>
 800f2f0:	482a      	ldr	r0, [pc, #168]	; (800f39c <E131Bridge::Print()+0xd4>)
 800f2f2:	a902      	add	r1, sp, #8
 800f2f4:	f7fb f93a 	bl	800a56c <printf>
 800f2f8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800f2fc:	b303      	cbz	r3, 800f340 <E131Bridge::Print()+0x78>
 800f2fe:	4828      	ldr	r0, [pc, #160]	; (800f3a0 <E131Bridge::Print()+0xd8>)
 800f300:	4e28      	ldr	r6, [pc, #160]	; (800f3a4 <E131Bridge::Print()+0xdc>)
 800f302:	4f29      	ldr	r7, [pc, #164]	; (800f3a8 <E131Bridge::Print()+0xe0>)
 800f304:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800f3b8 <E131Bridge::Print()+0xf0>
 800f308:	f7fb f930 	bl	800a56c <printf>
 800f30c:	2301      	movs	r3, #1
 800f30e:	f10d 0206 	add.w	r2, sp, #6
 800f312:	4629      	mov	r1, r5
 800f314:	4620      	mov	r0, r4
 800f316:	f7ff fa9b 	bl	800e850 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800f31a:	b170      	cbz	r0, 800f33a <E131Bridge::Print()+0x72>
 800f31c:	2344      	movs	r3, #68	; 0x44
 800f31e:	f504 62aa 	add.w	r2, r4, #1360	; 0x550
 800f322:	436b      	muls	r3, r5
 800f324:	4629      	mov	r1, r5
 800f326:	58d3      	ldr	r3, [r2, r3]
 800f328:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	bf0c      	ite	eq
 800f330:	4633      	moveq	r3, r6
 800f332:	463b      	movne	r3, r7
 800f334:	4640      	mov	r0, r8
 800f336:	f7fb f919 	bl	800a56c <printf>
 800f33a:	3501      	adds	r5, #1
 800f33c:	2d42      	cmp	r5, #66	; 0x42
 800f33e:	d1e5      	bne.n	800f30c <E131Bridge::Print()+0x44>
 800f340:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800f344:	b1db      	cbz	r3, 800f37e <E131Bridge::Print()+0xb6>
 800f346:	4819      	ldr	r0, [pc, #100]	; (800f3ac <E131Bridge::Print()+0xe4>)
 800f348:	4f19      	ldr	r7, [pc, #100]	; (800f3b0 <E131Bridge::Print()+0xe8>)
 800f34a:	f7fb f90f 	bl	800a56c <printf>
 800f34e:	f504 56b5 	add.w	r6, r4, #5792	; 0x16a0
 800f352:	2500      	movs	r5, #0
 800f354:	3605      	adds	r6, #5
 800f356:	2300      	movs	r3, #0
 800f358:	f10d 0206 	add.w	r2, sp, #6
 800f35c:	4629      	mov	r1, r5
 800f35e:	4620      	mov	r0, r4
 800f360:	f7ff fa76 	bl	800e850 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800f364:	b140      	cbz	r0, 800f378 <E131Bridge::Print()+0xb0>
 800f366:	230c      	movs	r3, #12
 800f368:	436b      	muls	r3, r5
 800f36a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f36e:	5cf3      	ldrb	r3, [r6, r3]
 800f370:	4629      	mov	r1, r5
 800f372:	4638      	mov	r0, r7
 800f374:	f7fb f8fa 	bl	800a56c <printf>
 800f378:	3501      	adds	r5, #1
 800f37a:	2d42      	cmp	r5, #66	; 0x42
 800f37c:	d1eb      	bne.n	800f356 <E131Bridge::Print()+0x8e>
 800f37e:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800f382:	b113      	cbz	r3, 800f38a <E131Bridge::Print()+0xc2>
 800f384:	480b      	ldr	r0, [pc, #44]	; (800f3b4 <E131Bridge::Print()+0xec>)
 800f386:	f7fb f8f1 	bl	800a56c <printf>
 800f38a:	b00c      	add	sp, #48	; 0x30
 800f38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f390:	0801c128 	stmdaeq	r1, {r3, r5, r8, lr, pc}
 800f394:	0801c22d 	stmdaeq	r1, {r0, r2, r3, r5, r9, lr, pc}
 800f398:	0801c130 	stmdaeq	r1, {r4, r5, r8, lr, pc}
 800f39c:	0801c143 	stmdaeq	r1, {r0, r1, r6, r8, lr, pc}
 800f3a0:	0801bf13 	stmdaeq	r1, {r0, r1, r4, r8, r9, sl, fp, ip, sp, pc}
 800f3a4:	0801beb7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r9, sl, fp, ip, sp, pc}
 800f3a8:	0801bebb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, fp, ip, sp, pc}
 800f3ac:	0801bf37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, r9, sl, fp, ip, sp, pc}
 800f3b0:	0801c172 	stmdaeq	r1, {r1, r4, r5, r6, r8, lr, pc}
 800f3b4:	0801c191 	stmdaeq	r1, {r0, r4, r7, r8, lr, pc}
 800f3b8:	0801c153 	stmdaeq	r1, {r0, r1, r4, r6, r8, lr, pc}

0800f3bc <memcmp>:
 800f3bc:	4402      	add	r2, r0
 800f3be:	4290      	cmp	r0, r2
 800f3c0:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800f3c4:	d106      	bne.n	800f3d4 <memcmp+0x18>
 800f3c6:	2000      	movs	r0, #0
 800f3c8:	4770      	bx	lr
 800f3ca:	3001      	adds	r0, #1
 800f3cc:	4290      	cmp	r0, r2
 800f3ce:	d102      	bne.n	800f3d6 <memcmp+0x1a>
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	e006      	b.n	800f3e2 <memcmp+0x26>
 800f3d4:	b510      	push	{r4, lr}
 800f3d6:	7803      	ldrb	r3, [r0, #0]
 800f3d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f3dc:	42a3      	cmp	r3, r4
 800f3de:	d0f4      	beq.n	800f3ca <memcmp+0xe>
 800f3e0:	1b18      	subs	r0, r3, r4
 800f3e2:	bd10      	pop	{r4, pc}

0800f3e4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800f3e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f3e6:	88c6      	ldrh	r6, [r0, #6]
 800f3e8:	8885      	ldrh	r5, [r0, #4]
 800f3ea:	42ae      	cmp	r6, r5
 800f3ec:	d216      	bcs.n	800f41c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	6800      	ldr	r0, [r0, #0]
 800f3f2:	1bad      	subs	r5, r5, r6
 800f3f4:	4430      	add	r0, r6
 800f3f6:	7a26      	ldrb	r6, [r4, #8]
 800f3f8:	b923      	cbnz	r3, 800f404 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800f3fa:	b926      	cbnz	r6, 800f406 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800f3fc:	9200      	str	r2, [sp, #0]
 800f3fe:	460b      	mov	r3, r1
 800f400:	4a09      	ldr	r2, [pc, #36]	; (800f428 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800f402:	e003      	b.n	800f40c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800f404:	b166      	cbz	r6, 800f420 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800f406:	9200      	str	r2, [sp, #0]
 800f408:	4a08      	ldr	r2, [pc, #32]	; (800f42c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800f40a:	460b      	mov	r3, r1
 800f40c:	4629      	mov	r1, r5
 800f40e:	f7fb f8d5 	bl	800a5bc <snprintf>
 800f412:	4285      	cmp	r5, r0
 800f414:	bfa2      	ittt	ge
 800f416:	88e3      	ldrhge	r3, [r4, #6]
 800f418:	181b      	addge	r3, r3, r0
 800f41a:	80e3      	strhge	r3, [r4, #6]
 800f41c:	b002      	add	sp, #8
 800f41e:	bd70      	pop	{r4, r5, r6, pc}
 800f420:	9200      	str	r2, [sp, #0]
 800f422:	460b      	mov	r3, r1
 800f424:	4a02      	ldr	r2, [pc, #8]	; (800f430 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800f426:	e7f1      	b.n	800f40c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800f428:	0801b008 	stmdaeq	r1, {r3, ip, sp, pc}
 800f42c:	0801affd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800f430:	0801b009 	stmdaeq	r1, {r0, r3, ip, sp, pc}

0800f434 <E131Params::E131Params(E131ParamsStore*)>:
 800f434:	b510      	push	{r4, lr}
 800f436:	2219      	movs	r2, #25
 800f438:	4604      	mov	r4, r0
 800f43a:	f840 1b04 	str.w	r1, [r0], #4
 800f43e:	2100      	movs	r1, #0
 800f440:	f009 f83e 	bl	80184c0 <memset>
 800f444:	f04f 3364 	mov.w	r3, #1684300900	; 0x64646464
 800f448:	f8c4 301f 	str.w	r3, [r4, #31]
 800f44c:	2300      	movs	r3, #0
 800f44e:	2201      	movs	r2, #1
 800f450:	7323      	strb	r3, [r4, #12]
 800f452:	77a3      	strb	r3, [r4, #30]
 800f454:	4b08      	ldr	r3, [pc, #32]	; (800f478 <E131Params::E131Params(E131ParamsStore*)+0x44>)
 800f456:	72e2      	strb	r2, [r4, #11]
 800f458:	2155      	movs	r1, #85	; 0x55
 800f45a:	2202      	movs	r2, #2
 800f45c:	f8a4 200d 	strh.w	r2, [r4, #13]
 800f460:	7761      	strb	r1, [r4, #29]
 800f462:	2203      	movs	r2, #3
 800f464:	6819      	ldr	r1, [r3, #0]
 800f466:	f8a4 200f 	strh.w	r2, [r4, #15]
 800f46a:	2204      	movs	r2, #4
 800f46c:	f8a4 2011 	strh.w	r2, [r4, #17]
 800f470:	b901      	cbnz	r1, 800f474 <E131Params::E131Params(E131ParamsStore*)+0x40>
 800f472:	601a      	str	r2, [r3, #0]
 800f474:	4620      	mov	r0, r4
 800f476:	bd10      	pop	{r4, pc}
 800f478:	200006e8 	andcs	r0, r0, r8, ror #13

0800f47c <E131Params::Load(char const*, unsigned int)>:
 800f47c:	6803      	ldr	r3, [r0, #0]
 800f47e:	b1d3      	cbz	r3, 800f4b6 <E131Params::Load(char const*, unsigned int)+0x3a>
 800f480:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f482:	2300      	movs	r3, #0
 800f484:	6043      	str	r3, [r0, #4]
 800f486:	4604      	mov	r4, r0
 800f488:	460d      	mov	r5, r1
 800f48a:	4616      	mov	r6, r2
 800f48c:	490a      	ldr	r1, [pc, #40]	; (800f4b8 <E131Params::Load(char const*, unsigned int)+0x3c>)
 800f48e:	4602      	mov	r2, r0
 800f490:	4668      	mov	r0, sp
 800f492:	f008 f96b 	bl	801776c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800f496:	4632      	mov	r2, r6
 800f498:	4629      	mov	r1, r5
 800f49a:	4668      	mov	r0, sp
 800f49c:	f008 f96a 	bl	8017774 <ReadConfigFile::Read(char const*, unsigned int)>
 800f4a0:	4621      	mov	r1, r4
 800f4a2:	f851 0b04 	ldr.w	r0, [r1], #4
 800f4a6:	6803      	ldr	r3, [r0, #0]
 800f4a8:	689b      	ldr	r3, [r3, #8]
 800f4aa:	4798      	blx	r3
 800f4ac:	4668      	mov	r0, sp
 800f4ae:	f008 f960 	bl	8017772 <ReadConfigFile::~ReadConfigFile()>
 800f4b2:	b002      	add	sp, #8
 800f4b4:	bd70      	pop	{r4, r5, r6, pc}
 800f4b6:	4770      	bx	lr
 800f4b8:	0800f755 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, ip, sp, lr, pc}

0800f4bc <E131Params::callbackFunction(char const*)>:
 800f4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4c0:	460e      	mov	r6, r1
 800f4c2:	b087      	sub	sp, #28
 800f4c4:	2708      	movs	r7, #8
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	4998      	ldr	r1, [pc, #608]	; (800f72c <E131Params::callbackFunction(char const*)+0x270>)
 800f4ca:	9701      	str	r7, [sp, #4]
 800f4cc:	ab01      	add	r3, sp, #4
 800f4ce:	eb0d 0207 	add.w	r2, sp, r7
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	f008 f982 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800f4d8:	bb68      	cbnz	r0, 800f536 <E131Params::callbackFunction(char const*)+0x7a>
 800f4da:	4995      	ldr	r1, [pc, #596]	; (800f730 <E131Params::callbackFunction(char const*)+0x274>)
 800f4dc:	2204      	movs	r2, #4
 800f4de:	eb0d 0007 	add.w	r0, sp, r7
 800f4e2:	f7ff ff6b 	bl	800f3bc <memcmp>
 800f4e6:	6865      	ldr	r5, [r4, #4]
 800f4e8:	b1a0      	cbz	r0, 800f514 <E131Params::callbackFunction(char const*)+0x58>
 800f4ea:	4992      	ldr	r1, [pc, #584]	; (800f734 <E131Params::callbackFunction(char const*)+0x278>)
 800f4ec:	2203      	movs	r2, #3
 800f4ee:	eb0d 0007 	add.w	r0, sp, r7
 800f4f2:	f7ff ff63 	bl	800f3bc <memcmp>
 800f4f6:	b1b0      	cbz	r0, 800f526 <E131Params::callbackFunction(char const*)+0x6a>
 800f4f8:	498f      	ldr	r1, [pc, #572]	; (800f738 <E131Params::callbackFunction(char const*)+0x27c>)
 800f4fa:	2202      	movs	r2, #2
 800f4fc:	eb0d 0007 	add.w	r0, sp, r7
 800f500:	f7ff ff5c 	bl	800f3bc <memcmp>
 800f504:	b198      	cbz	r0, 800f52e <E131Params::callbackFunction(char const*)+0x72>
 800f506:	498d      	ldr	r1, [pc, #564]	; (800f73c <E131Params::callbackFunction(char const*)+0x280>)
 800f508:	463a      	mov	r2, r7
 800f50a:	eb0d 0007 	add.w	r0, sp, r7
 800f50e:	f7ff ff55 	bl	800f3bc <memcmp>
 800f512:	b170      	cbz	r0, 800f532 <E131Params::callbackFunction(char const*)+0x76>
 800f514:	f025 0501 	bic.w	r5, r5, #1
 800f518:	2300      	movs	r3, #0
 800f51a:	6065      	str	r5, [r4, #4]
 800f51c:	f8a4 3009 	strh.w	r3, [r4, #9]
 800f520:	b007      	add	sp, #28
 800f522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f526:	2301      	movs	r3, #1
 800f528:	f045 0501 	orr.w	r5, r5, #1
 800f52c:	e7f5      	b.n	800f51a <E131Params::callbackFunction(char const*)+0x5e>
 800f52e:	2302      	movs	r3, #2
 800f530:	e7fa      	b.n	800f528 <E131Params::callbackFunction(char const*)+0x6c>
 800f532:	2303      	movs	r3, #3
 800f534:	e7f8      	b.n	800f528 <E131Params::callbackFunction(char const*)+0x6c>
 800f536:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800f744 <E131Params::callbackFunction(char const*)+0x288>
 800f53a:	f8df 820c 	ldr.w	r8, [pc, #524]	; 800f748 <E131Params::callbackFunction(char const*)+0x28c>
 800f53e:	f8df a20c 	ldr.w	sl, [pc, #524]	; 800f74c <E131Params::callbackFunction(char const*)+0x290>
 800f542:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800f750 <E131Params::callbackFunction(char const*)+0x294>
 800f546:	2500      	movs	r5, #0
 800f548:	f10d 0202 	add.w	r2, sp, #2
 800f54c:	4649      	mov	r1, r9
 800f54e:	4630      	mov	r0, r6
 800f550:	f008 f9f9 	bl	8017946 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800f554:	b9d8      	cbnz	r0, 800f58e <E131Params::callbackFunction(char const*)+0xd2>
 800f556:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800f55a:	6861      	ldr	r1, [r4, #4]
 800f55c:	1e42      	subs	r2, r0, #1
 800f55e:	b292      	uxth	r2, r2
 800f560:	f64f 16fe 	movw	r6, #63998	; 0xf9fe
 800f564:	2310      	movs	r3, #16
 800f566:	42b2      	cmp	r2, r6
 800f568:	fa03 f305 	lsl.w	r3, r3, r5
 800f56c:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800f570:	d907      	bls.n	800f582 <E131Params::callbackFunction(char const*)+0xc6>
 800f572:	4422      	add	r2, r4
 800f574:	3501      	adds	r5, #1
 800f576:	ea21 0103 	bic.w	r1, r1, r3
 800f57a:	f8a2 500b 	strh.w	r5, [r2, #11]
 800f57e:	6061      	str	r1, [r4, #4]
 800f580:	e7ce      	b.n	800f520 <E131Params::callbackFunction(char const*)+0x64>
 800f582:	4422      	add	r2, r4
 800f584:	430b      	orrs	r3, r1
 800f586:	f8a2 000b 	strh.w	r0, [r2, #11]
 800f58a:	6063      	str	r3, [r4, #4]
 800f58c:	e7c8      	b.n	800f520 <E131Params::callbackFunction(char const*)+0x64>
 800f58e:	2712      	movs	r7, #18
 800f590:	2303      	movs	r3, #3
 800f592:	436f      	muls	r7, r5
 800f594:	9301      	str	r3, [sp, #4]
 800f596:	aa02      	add	r2, sp, #8
 800f598:	ab01      	add	r3, sp, #4
 800f59a:	eb0a 0107 	add.w	r1, sl, r7
 800f59e:	4630      	mov	r0, r6
 800f5a0:	f008 f91c 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800f5a4:	bb08      	cbnz	r0, 800f5ea <E131Params::callbackFunction(char const*)+0x12e>
 800f5a6:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800f5aa:	6862      	ldr	r2, [r4, #4]
 800f5ac:	f041 0120 	orr.w	r1, r1, #32
 800f5b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f5b4:	296c      	cmp	r1, #108	; 0x6c
 800f5b6:	fa03 f305 	lsl.w	r3, r3, r5
 800f5ba:	4425      	add	r5, r4
 800f5bc:	d10f      	bne.n	800f5de <E131Params::callbackFunction(char const*)+0x122>
 800f5be:	f89d 1009 	ldrb.w	r1, [sp, #9]
 800f5c2:	f041 0120 	orr.w	r1, r1, #32
 800f5c6:	2974      	cmp	r1, #116	; 0x74
 800f5c8:	d109      	bne.n	800f5de <E131Params::callbackFunction(char const*)+0x122>
 800f5ca:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800f5ce:	f041 0120 	orr.w	r1, r1, #32
 800f5d2:	2970      	cmp	r1, #112	; 0x70
 800f5d4:	d103      	bne.n	800f5de <E131Params::callbackFunction(char const*)+0x122>
 800f5d6:	2101      	movs	r1, #1
 800f5d8:	7529      	strb	r1, [r5, #20]
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	e7d5      	b.n	800f58a <E131Params::callbackFunction(char const*)+0xce>
 800f5de:	2100      	movs	r1, #0
 800f5e0:	ea22 0203 	bic.w	r2, r2, r3
 800f5e4:	7529      	strb	r1, [r5, #20]
 800f5e6:	6062      	str	r2, [r4, #4]
 800f5e8:	e79a      	b.n	800f520 <E131Params::callbackFunction(char const*)+0x64>
 800f5ea:	2307      	movs	r3, #7
 800f5ec:	9301      	str	r3, [sp, #4]
 800f5ee:	aa02      	add	r2, sp, #8
 800f5f0:	ab01      	add	r3, sp, #4
 800f5f2:	eb0b 0107 	add.w	r1, fp, r7
 800f5f6:	4630      	mov	r0, r6
 800f5f8:	f008 f8f0 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	d15e      	bne.n	800f6be <E131Params::callbackFunction(char const*)+0x202>
 800f600:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f604:	f043 0320 	orr.w	r3, r3, #32
 800f608:	2b69      	cmp	r3, #105	; 0x69
 800f60a:	d123      	bne.n	800f654 <E131Params::callbackFunction(char const*)+0x198>
 800f60c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f610:	f043 0320 	orr.w	r3, r3, #32
 800f614:	2b6e      	cmp	r3, #110	; 0x6e
 800f616:	d146      	bne.n	800f6a6 <E131Params::callbackFunction(char const*)+0x1ea>
 800f618:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800f61c:	f043 0320 	orr.w	r3, r3, #32
 800f620:	2b70      	cmp	r3, #112	; 0x70
 800f622:	d140      	bne.n	800f6a6 <E131Params::callbackFunction(char const*)+0x1ea>
 800f624:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f628:	f043 0320 	orr.w	r3, r3, #32
 800f62c:	2b75      	cmp	r3, #117	; 0x75
 800f62e:	d13a      	bne.n	800f6a6 <E131Params::callbackFunction(char const*)+0x1ea>
 800f630:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f634:	f043 0320 	orr.w	r3, r3, #32
 800f638:	3b74      	subs	r3, #116	; 0x74
 800f63a:	bf18      	it	ne
 800f63c:	2301      	movne	r3, #1
 800f63e:	f8b4 201d 	ldrh.w	r2, [r4, #29]
 800f642:	006d      	lsls	r5, r5, #1
 800f644:	2103      	movs	r1, #3
 800f646:	40a9      	lsls	r1, r5
 800f648:	ea22 0201 	bic.w	r2, r2, r1
 800f64c:	bb6b      	cbnz	r3, 800f6aa <E131Params::callbackFunction(char const*)+0x1ee>
 800f64e:	f8a4 201d 	strh.w	r2, [r4, #29]
 800f652:	e765      	b.n	800f520 <E131Params::callbackFunction(char const*)+0x64>
 800f654:	2b64      	cmp	r3, #100	; 0x64
 800f656:	d126      	bne.n	800f6a6 <E131Params::callbackFunction(char const*)+0x1ea>
 800f658:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f65c:	f043 0320 	orr.w	r3, r3, #32
 800f660:	2b69      	cmp	r3, #105	; 0x69
 800f662:	d120      	bne.n	800f6a6 <E131Params::callbackFunction(char const*)+0x1ea>
 800f664:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800f668:	f043 0320 	orr.w	r3, r3, #32
 800f66c:	2b73      	cmp	r3, #115	; 0x73
 800f66e:	d11a      	bne.n	800f6a6 <E131Params::callbackFunction(char const*)+0x1ea>
 800f670:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f674:	f043 0320 	orr.w	r3, r3, #32
 800f678:	2b61      	cmp	r3, #97	; 0x61
 800f67a:	d114      	bne.n	800f6a6 <E131Params::callbackFunction(char const*)+0x1ea>
 800f67c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f680:	f043 0320 	orr.w	r3, r3, #32
 800f684:	2b62      	cmp	r3, #98	; 0x62
 800f686:	d10e      	bne.n	800f6a6 <E131Params::callbackFunction(char const*)+0x1ea>
 800f688:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800f68c:	f043 0320 	orr.w	r3, r3, #32
 800f690:	2b6c      	cmp	r3, #108	; 0x6c
 800f692:	d108      	bne.n	800f6a6 <E131Params::callbackFunction(char const*)+0x1ea>
 800f694:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800f698:	f043 0320 	orr.w	r3, r3, #32
 800f69c:	2b65      	cmp	r3, #101	; 0x65
 800f69e:	bf14      	ite	ne
 800f6a0:	2301      	movne	r3, #1
 800f6a2:	2302      	moveq	r3, #2
 800f6a4:	e7cb      	b.n	800f63e <E131Params::callbackFunction(char const*)+0x182>
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e7c9      	b.n	800f63e <E131Params::callbackFunction(char const*)+0x182>
 800f6aa:	2b02      	cmp	r3, #2
 800f6ac:	bf15      	itete	ne
 800f6ae:	2301      	movne	r3, #1
 800f6b0:	40ab      	lsleq	r3, r5
 800f6b2:	fa03 f505 	lslne.w	r5, r3, r5
 800f6b6:	431a      	orreq	r2, r3
 800f6b8:	bf18      	it	ne
 800f6ba:	432a      	orrne	r2, r5
 800f6bc:	e7c7      	b.n	800f64e <E131Params::callbackFunction(char const*)+0x192>
 800f6be:	f10d 0201 	add.w	r2, sp, #1
 800f6c2:	4641      	mov	r1, r8
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	f008 f986 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f6ca:	b9a0      	cbnz	r0, 800f6f6 <E131Params::callbackFunction(char const*)+0x23a>
 800f6cc:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f6d0:	6863      	ldr	r3, [r4, #4]
 800f6d2:	1e48      	subs	r0, r1, #1
 800f6d4:	b2c0      	uxtb	r0, r0
 800f6d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f6da:	28c7      	cmp	r0, #199	; 0xc7
 800f6dc:	fa02 f205 	lsl.w	r2, r2, r5
 800f6e0:	4425      	add	r5, r4
 800f6e2:	d803      	bhi.n	800f6ec <E131Params::callbackFunction(char const*)+0x230>
 800f6e4:	2964      	cmp	r1, #100	; 0x64
 800f6e6:	d001      	beq.n	800f6ec <E131Params::callbackFunction(char const*)+0x230>
 800f6e8:	77e9      	strb	r1, [r5, #31]
 800f6ea:	e776      	b.n	800f5da <E131Params::callbackFunction(char const*)+0x11e>
 800f6ec:	2164      	movs	r1, #100	; 0x64
 800f6ee:	77e9      	strb	r1, [r5, #31]
 800f6f0:	ea23 0302 	bic.w	r3, r3, r2
 800f6f4:	e749      	b.n	800f58a <E131Params::callbackFunction(char const*)+0xce>
 800f6f6:	3501      	adds	r5, #1
 800f6f8:	2d04      	cmp	r5, #4
 800f6fa:	f109 0910 	add.w	r9, r9, #16
 800f6fe:	f108 0812 	add.w	r8, r8, #18
 800f702:	f47f af21 	bne.w	800f548 <E131Params::callbackFunction(char const*)+0x8c>
 800f706:	490e      	ldr	r1, [pc, #56]	; (800f740 <E131Params::callbackFunction(char const*)+0x284>)
 800f708:	f10d 0201 	add.w	r2, sp, #1
 800f70c:	4630      	mov	r0, r6
 800f70e:	f008 f962 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f712:	2800      	cmp	r0, #0
 800f714:	f47f af04 	bne.w	800f520 <E131Params::callbackFunction(char const*)+0x64>
 800f718:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f71c:	6863      	ldr	r3, [r4, #4]
 800f71e:	b112      	cbz	r2, 800f726 <E131Params::callbackFunction(char const*)+0x26a>
 800f720:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f724:	e731      	b.n	800f58a <E131Params::callbackFunction(char const*)+0xce>
 800f726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f72a:	e72e      	b.n	800f58a <E131Params::callbackFunction(char const*)+0xce>
 800f72c:	0801db91 	stmdaeq	r1, {r0, r4, r7, r8, r9, fp, ip, lr, pc}
 800f730:	0801bf5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, sp, pc}
 800f734:	0801bf63 	stmdaeq	r1, {r0, r1, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 800f738:	0801b1ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, ip, sp, pc}
 800f73c:	0801bf67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 800f740:	0801db7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, r9, fp, ip, lr, pc}
 800f744:	0801d9a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, ip, lr, pc}
 800f748:	0801c1d0 	stmdaeq	r1, {r4, r6, r7, r8, lr, pc}
 800f74c:	0801db21 	stmdaeq	r1, {r0, r5, r8, r9, fp, ip, lr, pc}
 800f750:	0801dba3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, fp, ip, lr, pc}

0800f754 <E131Params::staticCallbackFunction(void*, char const*)>:
 800f754:	f7ff beb2 	b.w	800f4bc <E131Params::callbackFunction(char const*)>

0800f758 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
 800f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f75c:	4604      	mov	r4, r0
 800f75e:	b087      	sub	sp, #28
 800f760:	4615      	mov	r5, r2
 800f762:	461e      	mov	r6, r3
 800f764:	3004      	adds	r0, #4
 800f766:	2900      	cmp	r1, #0
 800f768:	d05f      	beq.n	800f82a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xd2>
 800f76a:	221f      	movs	r2, #31
 800f76c:	f008 fe91 	bl	8018492 <memmove>
 800f770:	4633      	mov	r3, r6
 800f772:	462a      	mov	r2, r5
 800f774:	4990      	ldr	r1, [pc, #576]	; (800f9b8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x260>)
 800f776:	4f91      	ldr	r7, [pc, #580]	; (800f9bc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x264>)
 800f778:	4e91      	ldr	r6, [pc, #580]	; (800f9c0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x268>)
 800f77a:	f8df 8280 	ldr.w	r8, [pc, #640]	; 800f9fc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a4>
 800f77e:	f8df 9278 	ldr.w	r9, [pc, #632]	; 800f9f8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>
 800f782:	a803      	add	r0, sp, #12
 800f784:	f007 ff52 	bl	801762c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800f788:	2500      	movs	r5, #0
 800f78a:	f8d8 2000 	ldr.w	r2, [r8]
 800f78e:	6863      	ldr	r3, [r4, #4]
 800f790:	42aa      	cmp	r2, r5
 800f792:	d851      	bhi.n	800f838 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xe0>
 800f794:	f8b4 1009 	ldrh.w	r1, [r4, #9]
 800f798:	4a8a      	ldr	r2, [pc, #552]	; (800f9c4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x26c>)
 800f79a:	4e8b      	ldr	r6, [pc, #556]	; (800f9c8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800f79c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f7a0:	498a      	ldr	r1, [pc, #552]	; (800f9cc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800f7a2:	f8df 925c 	ldr.w	r9, [pc, #604]	; 800fa00 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a8>
 800f7a6:	f8df a25c 	ldr.w	sl, [pc, #604]	; 800fa04 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2ac>
 800f7aa:	f003 0301 	and.w	r3, r3, #1
 800f7ae:	a803      	add	r0, sp, #12
 800f7b0:	f7ff fe18 	bl	800f3e4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800f7b4:	4986      	ldr	r1, [pc, #536]	; (800f9d0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800f7b6:	a803      	add	r0, sp, #12
 800f7b8:	f007 ffbe 	bl	8017738 <PropertiesBuilder::AddComment(char const*)>
 800f7bc:	f104 0713 	add.w	r7, r4, #19
 800f7c0:	2500      	movs	r5, #0
 800f7c2:	f44f 7b80 	mov.w	fp, #256	; 0x100
 800f7c6:	f8d8 3000 	ldr.w	r3, [r8]
 800f7ca:	42ab      	cmp	r3, r5
 800f7cc:	d87f      	bhi.n	800f8ce <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x176>
 800f7ce:	4981      	ldr	r1, [pc, #516]	; (800f9d4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800f7d0:	4e81      	ldr	r6, [pc, #516]	; (800f9d8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800f7d2:	f8df a21c 	ldr.w	sl, [pc, #540]	; 800f9f0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>
 800f7d6:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800f9e4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>
 800f7da:	a803      	add	r0, sp, #12
 800f7dc:	f007 ffac 	bl	8017738 <PropertiesBuilder::AddComment(char const*)>
 800f7e0:	f104 091e 	add.w	r9, r4, #30
 800f7e4:	2700      	movs	r7, #0
 800f7e6:	f8d8 3000 	ldr.w	r3, [r8]
 800f7ea:	42bb      	cmp	r3, r7
 800f7ec:	f200 8083 	bhi.w	800f8f6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x19e>
 800f7f0:	497a      	ldr	r1, [pc, #488]	; (800f9dc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800f7f2:	a803      	add	r0, sp, #12
 800f7f4:	f007 ffa0 	bl	8017738 <PropertiesBuilder::AddComment(char const*)>
 800f7f8:	6863      	ldr	r3, [r4, #4]
 800f7fa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f7fe:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800f802:	42a2      	cmp	r2, r4
 800f804:	f080 80b8 	bcs.w	800f978 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x220>
 800f808:	9803      	ldr	r0, [sp, #12]
 800f80a:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800f80e:	4410      	add	r0, r2
 800f810:	eba4 0402 	sub.w	r4, r4, r2
 800f814:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800f818:	f040 809d 	bne.w	800f956 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1fe>
 800f81c:	2a00      	cmp	r2, #0
 800f81e:	f040 809b 	bne.w	800f958 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x200>
 800f822:	9200      	str	r2, [sp, #0]
 800f824:	4b6e      	ldr	r3, [pc, #440]	; (800f9e0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800f826:	4a6f      	ldr	r2, [pc, #444]	; (800f9e4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800f828:	e09c      	b.n	800f964 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800f82a:	6823      	ldr	r3, [r4, #0]
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	4601      	mov	r1, r0
 800f830:	68d2      	ldr	r2, [r2, #12]
 800f832:	4618      	mov	r0, r3
 800f834:	4790      	blx	r2
 800f836:	e79b      	b.n	800f770 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x18>
 800f838:	f8bd c012 	ldrh.w	ip, [sp, #18]
 800f83c:	f8bd b010 	ldrh.w	fp, [sp, #16]
 800f840:	eb04 0245 	add.w	r2, r4, r5, lsl #1
 800f844:	45dc      	cmp	ip, fp
 800f846:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800f84a:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800f84e:	d221      	bcs.n	800f894 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x13c>
 800f850:	2110      	movs	r1, #16
 800f852:	9803      	ldr	r0, [sp, #12]
 800f854:	40a9      	lsls	r1, r5
 800f856:	ea31 0303 	bics.w	r3, r1, r3
 800f85a:	4460      	add	r0, ip
 800f85c:	ebab 0b0c 	sub.w	fp, fp, ip
 800f860:	f89d c014 	ldrb.w	ip, [sp, #20]
 800f864:	d006      	beq.n	800f874 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 800f866:	f1bc 0f00 	cmp.w	ip, #0
 800f86a:	d106      	bne.n	800f87a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x122>
 800f86c:	9200      	str	r2, [sp, #0]
 800f86e:	4633      	mov	r3, r6
 800f870:	4a5c      	ldr	r2, [pc, #368]	; (800f9e4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800f872:	e005      	b.n	800f880 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800f874:	f1bc 0f00 	cmp.w	ip, #0
 800f878:	d023      	beq.n	800f8c2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x16a>
 800f87a:	9200      	str	r2, [sp, #0]
 800f87c:	4633      	mov	r3, r6
 800f87e:	464a      	mov	r2, r9
 800f880:	4659      	mov	r1, fp
 800f882:	f7fa fe9b 	bl	800a5bc <snprintf>
 800f886:	4583      	cmp	fp, r0
 800f888:	bfa2      	ittt	ge
 800f88a:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800f88e:	18c0      	addge	r0, r0, r3
 800f890:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800f894:	f8b4 301d 	ldrh.w	r3, [r4, #29]
 800f898:	fa23 f30a 	lsr.w	r3, r3, sl
 800f89c:	f013 0303 	ands.w	r3, r3, #3
 800f8a0:	d013      	beq.n	800f8ca <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x172>
 800f8a2:	4a51      	ldr	r2, [pc, #324]	; (800f9e8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800f8a4:	4951      	ldr	r1, [pc, #324]	; (800f9ec <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800f8a6:	2b02      	cmp	r3, #2
 800f8a8:	bf08      	it	eq
 800f8aa:	460a      	moveq	r2, r1
 800f8ac:	3b01      	subs	r3, #1
 800f8ae:	4639      	mov	r1, r7
 800f8b0:	bf18      	it	ne
 800f8b2:	2301      	movne	r3, #1
 800f8b4:	a803      	add	r0, sp, #12
 800f8b6:	f7ff fd95 	bl	800f3e4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800f8ba:	3501      	adds	r5, #1
 800f8bc:	3712      	adds	r7, #18
 800f8be:	3610      	adds	r6, #16
 800f8c0:	e763      	b.n	800f78a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x32>
 800f8c2:	9200      	str	r2, [sp, #0]
 800f8c4:	4633      	mov	r3, r6
 800f8c6:	4a4a      	ldr	r2, [pc, #296]	; (800f9f0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800f8c8:	e7da      	b.n	800f880 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800f8ca:	4a4a      	ldr	r2, [pc, #296]	; (800f9f4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800f8cc:	e7ee      	b.n	800f8ac <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x154>
 800f8ce:	6861      	ldr	r1, [r4, #4]
 800f8d0:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800f8d4:	fa0b f305 	lsl.w	r3, fp, r5
 800f8d8:	438b      	bics	r3, r1
 800f8da:	bf0c      	ite	eq
 800f8dc:	2301      	moveq	r3, #1
 800f8de:	2300      	movne	r3, #0
 800f8e0:	4631      	mov	r1, r6
 800f8e2:	2a00      	cmp	r2, #0
 800f8e4:	bf0c      	ite	eq
 800f8e6:	464a      	moveq	r2, r9
 800f8e8:	4652      	movne	r2, sl
 800f8ea:	a803      	add	r0, sp, #12
 800f8ec:	f7ff fd7a 	bl	800f3e4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800f8f0:	3501      	adds	r5, #1
 800f8f2:	3612      	adds	r6, #18
 800f8f4:	e767      	b.n	800f7c6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x6e>
 800f8f6:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800f8fa:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800f8fe:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800f902:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800f906:	42a9      	cmp	r1, r5
 800f908:	d21e      	bcs.n	800f948 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f0>
 800f90a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f90e:	9803      	ldr	r0, [sp, #12]
 800f910:	40ba      	lsls	r2, r7
 800f912:	ea32 0c0c 	bics.w	ip, r2, ip
 800f916:	4408      	add	r0, r1
 800f918:	eba5 0501 	sub.w	r5, r5, r1
 800f91c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800f920:	d004      	beq.n	800f92c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d4>
 800f922:	b921      	cbnz	r1, 800f92e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d6>
 800f924:	9300      	str	r3, [sp, #0]
 800f926:	465a      	mov	r2, fp
 800f928:	4633      	mov	r3, r6
 800f92a:	e003      	b.n	800f934 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800f92c:	b179      	cbz	r1, 800f94e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f6>
 800f92e:	4a32      	ldr	r2, [pc, #200]	; (800f9f8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800f930:	9300      	str	r3, [sp, #0]
 800f932:	4633      	mov	r3, r6
 800f934:	4629      	mov	r1, r5
 800f936:	f7fa fe41 	bl	800a5bc <snprintf>
 800f93a:	4285      	cmp	r5, r0
 800f93c:	bfa2      	ittt	ge
 800f93e:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800f942:	18c0      	addge	r0, r0, r3
 800f944:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800f948:	3701      	adds	r7, #1
 800f94a:	3612      	adds	r6, #18
 800f94c:	e74b      	b.n	800f7e6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800f94e:	9300      	str	r3, [sp, #0]
 800f950:	4652      	mov	r2, sl
 800f952:	4633      	mov	r3, r6
 800f954:	e7ee      	b.n	800f934 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800f956:	b34a      	cbz	r2, 800f9ac <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x254>
 800f958:	3b00      	subs	r3, #0
 800f95a:	bf18      	it	ne
 800f95c:	2301      	movne	r3, #1
 800f95e:	9300      	str	r3, [sp, #0]
 800f960:	4a25      	ldr	r2, [pc, #148]	; (800f9f8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800f962:	4b1f      	ldr	r3, [pc, #124]	; (800f9e0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800f964:	4621      	mov	r1, r4
 800f966:	f7fa fe29 	bl	800a5bc <snprintf>
 800f96a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f96e:	4284      	cmp	r4, r0
 800f970:	bfa4      	itt	ge
 800f972:	181b      	addge	r3, r3, r0
 800f974:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800f978:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800f97c:	b17b      	cbz	r3, 800f99e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800f97e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f982:	9b03      	ldr	r3, [sp, #12]
 800f984:	4413      	add	r3, r2
 800f986:	227d      	movs	r2, #125	; 0x7d
 800f988:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f98c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f990:	9903      	ldr	r1, [sp, #12]
 800f992:	54ca      	strb	r2, [r1, r3]
 800f994:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f998:	3301      	adds	r3, #1
 800f99a:	f8ad 3012 	strh.w	r3, [sp, #18]
 800f99e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f9a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9a4:	601a      	str	r2, [r3, #0]
 800f9a6:	b007      	add	sp, #28
 800f9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	9300      	str	r3, [sp, #0]
 800f9b0:	4a0f      	ldr	r2, [pc, #60]	; (800f9f0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800f9b2:	4b0b      	ldr	r3, [pc, #44]	; (800f9e0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800f9b4:	e7d6      	b.n	800f964 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800f9b6:	bf00      	nop
 800f9b8:	0801c218 	stmdaeq	r1, {r3, r4, r9, lr, pc}
 800f9bc:	0801dba3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, fp, ip, lr, pc}
 800f9c0:	0801d9a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, ip, lr, pc}
 800f9c4:	0801c1c0 	stmdaeq	r1, {r6, r7, r8, lr, pc}
 800f9c8:	0801db21 	stmdaeq	r1, {r0, r5, r8, r9, fp, ip, lr, pc}
 800f9cc:	0801db91 	stmdaeq	r1, {r0, r4, r7, r8, r9, fp, ip, lr, pc}
 800f9d0:	0801c1ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, lr, pc}
 800f9d4:	0801c1b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r8, lr, pc}
 800f9d8:	0801c1d0 	stmdaeq	r1, {r4, r6, r7, r8, lr, pc}
 800f9dc:	0801adb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, sl, fp, sp, pc}
 800f9e0:	0801db7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, r9, fp, ip, lr, pc}
 800f9e4:	0801aff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800f9e8:	0801bf7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 800f9ec:	0801bf82 	stmdaeq	r1, {r1, r7, r8, r9, sl, fp, ip, sp, pc}
 800f9f0:	0801aff6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800f9f4:	0801bf75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 800f9f8:	0801afec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800f9fc:	200006e8 	andcs	r0, r0, r8, ror #13
 800fa00:	0801bf8e 	stmdaeq	r1, {r1, r2, r3, r7, r8, r9, sl, fp, ip, sp, pc}
 800fa04:	0801bf8a 	stmdaeq	r1, {r1, r3, r7, r8, r9, sl, fp, ip, sp, pc}

0800fa08 <E131Params::Save(char*, unsigned int, unsigned int&)>:
 800fa08:	b513      	push	{r0, r1, r4, lr}
 800fa0a:	6804      	ldr	r4, [r0, #0]
 800fa0c:	b914      	cbnz	r4, 800fa14 <E131Params::Save(char*, unsigned int, unsigned int&)+0xc>
 800fa0e:	601c      	str	r4, [r3, #0]
 800fa10:	b002      	add	sp, #8
 800fa12:	bd10      	pop	{r4, pc}
 800fa14:	9300      	str	r3, [sp, #0]
 800fa16:	4613      	mov	r3, r2
 800fa18:	460a      	mov	r2, r1
 800fa1a:	2100      	movs	r1, #0
 800fa1c:	f7ff fe9c 	bl	800f758 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>
 800fa20:	e7f6      	b.n	800fa10 <E131Params::Save(char*, unsigned int, unsigned int&)+0x8>

0800fa22 <LLRPDevice::~LLRPDevice()>:
 800fa22:	4770      	bx	lr

0800fa24 <LLRPDevice::CopyUID(unsigned char*)>:
 800fa24:	4770      	bx	lr

0800fa26 <LLRPDevice::CopyCID(unsigned char*)>:
 800fa26:	4770      	bx	lr

0800fa28 <LLRPDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 800fa28:	2000      	movs	r0, #0
 800fa2a:	4770      	bx	lr

0800fa2c <LLRPDevice::~LLRPDevice()>:
 800fa2c:	b510      	push	{r4, lr}
 800fa2e:	4604      	mov	r4, r0
 800fa30:	f008 fc6c 	bl	801830c <operator delete(void*)>
 800fa34:	4620      	mov	r0, r4
 800fa36:	bd10      	pop	{r4, pc}

0800fa38 <memcpy.isra.0>:
 800fa38:	3801      	subs	r0, #1
 800fa3a:	440a      	add	r2, r1
 800fa3c:	4291      	cmp	r1, r2
 800fa3e:	d100      	bne.n	800fa42 <memcpy.isra.0+0xa>
 800fa40:	4770      	bx	lr
 800fa42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa46:	f800 3f01 	strb.w	r3, [r0, #1]!
 800fa4a:	e7f7      	b.n	800fa3c <memcpy.isra.0+0x4>

0800fa4c <LLRPDevice::LLRPDevice()>:
 800fa4c:	b513      	push	{r0, r1, r4, lr}
 800fa4e:	4b0a      	ldr	r3, [pc, #40]	; (800fa78 <LLRPDevice::LLRPDevice()+0x2c>)
 800fa50:	6003      	str	r3, [r0, #0]
 800fa52:	4604      	mov	r4, r0
 800fa54:	a901      	add	r1, sp, #4
 800fa56:	4809      	ldr	r0, [pc, #36]	; (800fa7c <LLRPDevice::LLRPDevice()+0x30>)
 800fa58:	f008 fc60 	bl	801831c <inet_aton>
 800fa5c:	4b08      	ldr	r3, [pc, #32]	; (800fa80 <LLRPDevice::LLRPDevice()+0x34>)
 800fa5e:	9a01      	ldr	r2, [sp, #4]
 800fa60:	4808      	ldr	r0, [pc, #32]	; (800fa84 <LLRPDevice::LLRPDevice()+0x38>)
 800fa62:	601a      	str	r2, [r3, #0]
 800fa64:	a901      	add	r1, sp, #4
 800fa66:	f008 fc59 	bl	801831c <inet_aton>
 800fa6a:	4b07      	ldr	r3, [pc, #28]	; (800fa88 <LLRPDevice::LLRPDevice()+0x3c>)
 800fa6c:	9a01      	ldr	r2, [sp, #4]
 800fa6e:	601a      	str	r2, [r3, #0]
 800fa70:	4620      	mov	r0, r4
 800fa72:	b002      	add	sp, #8
 800fa74:	bd10      	pop	{r4, pc}
 800fa76:	bf00      	nop
 800fa78:	0801c2e0 	stmdaeq	r1, {r5, r6, r7, r9, lr, pc}
 800fa7c:	0801c22f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, lr, pc}
 800fa80:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800fa84:	0801c23f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r9, lr, pc}
 800fa88:	200006f4 	strdcs	r0, [r0], -r4

0800fa8c <LLRPDevice::HandleRequestMessage()>:
 800fa8c:	b530      	push	{r4, r5, lr}
 800fa8e:	4b24      	ldr	r3, [pc, #144]	; (800fb20 <LLRPDevice::HandleRequestMessage()+0x94>)
 800fa90:	681c      	ldr	r4, [r3, #0]
 800fa92:	b089      	sub	sp, #36	; 0x24
 800fa94:	2210      	movs	r2, #16
 800fa96:	4605      	mov	r5, r0
 800fa98:	f104 0117 	add.w	r1, r4, #23
 800fa9c:	eb0d 0002 	add.w	r0, sp, r2
 800faa0:	9103      	str	r1, [sp, #12]
 800faa2:	f7ff ffc9 	bl	800fa38 <memcpy.isra.0>
 800faa6:	2343      	movs	r3, #67	; 0x43
 800faa8:	74a3      	strb	r3, [r4, #18]
 800faaa:	682b      	ldr	r3, [r5, #0]
 800faac:	9903      	ldr	r1, [sp, #12]
 800faae:	68db      	ldr	r3, [r3, #12]
 800fab0:	4628      	mov	r0, r5
 800fab2:	4798      	blx	r3
 800fab4:	232c      	movs	r3, #44	; 0x2c
 800fab6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800faba:	2300      	movs	r3, #0
 800fabc:	2210      	movs	r2, #16
 800fabe:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 800fac2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
 800fac6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800faca:	2302      	movs	r3, #2
 800facc:	eb0d 0102 	add.w	r1, sp, r2
 800fad0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fad4:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 800fad8:	f7ff ffae 	bl	800fa38 <memcpy.isra.0>
 800fadc:	2311      	movs	r3, #17
 800fade:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800fae2:	2301      	movs	r3, #1
 800fae4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fae8:	682b      	ldr	r3, [r5, #0]
 800faea:	f104 0146 	add.w	r1, r4, #70	; 0x46
 800faee:	4628      	mov	r0, r5
 800faf0:	689b      	ldr	r3, [r3, #8]
 800faf2:	4798      	blx	r3
 800faf4:	4b0b      	ldr	r3, [pc, #44]	; (800fb24 <LLRPDevice::HandleRequestMessage()+0x98>)
 800faf6:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800fafa:	6818      	ldr	r0, [r3, #0]
 800fafc:	f005 ffaa 	bl	8015a54 <Network::MacAddressCopyTo(unsigned char*)>
 800fb00:	23ff      	movs	r3, #255	; 0xff
 800fb02:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 800fb06:	f241 53c1 	movw	r3, #5569	; 0x15c1
 800fb0a:	9300      	str	r3, [sp, #0]
 800fb0c:	4806      	ldr	r0, [pc, #24]	; (800fb28 <LLRPDevice::HandleRequestMessage()+0x9c>)
 800fb0e:	4b07      	ldr	r3, [pc, #28]	; (800fb2c <LLRPDevice::HandleRequestMessage()+0xa0>)
 800fb10:	7800      	ldrb	r0, [r0, #0]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	2253      	movs	r2, #83	; 0x53
 800fb16:	4621      	mov	r1, r4
 800fb18:	f005 fac6 	bl	80150a8 <udp_send>
 800fb1c:	b009      	add	sp, #36	; 0x24
 800fb1e:	bd30      	pop	{r4, r5, pc}
 800fb20:	200006f8 	strdcs	r0, [r0], -r8
 800fb24:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 800fb28:	20000000 	andcs	r0, r0, r0
 800fb2c:	200006f4 	strdcs	r0, [r0], -r4

0800fb30 <LLRPDevice::HandleRdmCommand()>:
 800fb30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb34:	4b23      	ldr	r3, [pc, #140]	; (800fbc4 <LLRPDevice::HandleRdmCommand()+0x94>)
 800fb36:	681c      	ldr	r4, [r3, #0]
 800fb38:	6803      	ldr	r3, [r0, #0]
 800fb3a:	f104 0946 	add.w	r9, r4, #70	; 0x46
 800fb3e:	691b      	ldr	r3, [r3, #16]
 800fb40:	b089      	sub	sp, #36	; 0x24
 800fb42:	4649      	mov	r1, r9
 800fb44:	4607      	mov	r7, r0
 800fb46:	4798      	blx	r3
 800fb48:	4605      	mov	r5, r0
 800fb4a:	2800      	cmp	r0, #0
 800fb4c:	d036      	beq.n	800fbbc <LLRPDevice::HandleRdmCommand()+0x8c>
 800fb4e:	7803      	ldrb	r3, [r0, #0]
 800fb50:	2bcc      	cmp	r3, #204	; 0xcc
 800fb52:	d133      	bne.n	800fbbc <LLRPDevice::HandleRdmCommand()+0x8c>
 800fb54:	2210      	movs	r2, #16
 800fb56:	eb0d 0002 	add.w	r0, sp, r2
 800fb5a:	f104 0117 	add.w	r1, r4, #23
 800fb5e:	9103      	str	r1, [sp, #12]
 800fb60:	f7ff ff6a 	bl	800fa38 <memcpy.isra.0>
 800fb64:	78ae      	ldrb	r6, [r5, #2]
 800fb66:	9903      	ldr	r1, [sp, #12]
 800fb68:	f106 0837 	add.w	r8, r6, #55	; 0x37
 800fb6c:	fa5f f888 	uxtb.w	r8, r8
 800fb70:	f884 8012 	strb.w	r8, [r4, #18]
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	4638      	mov	r0, r7
 800fb78:	68db      	ldr	r3, [r3, #12]
 800fb7a:	4798      	blx	r3
 800fb7c:	f106 0320 	add.w	r3, r6, #32
 800fb80:	2210      	movs	r2, #16
 800fb82:	eb0d 0102 	add.w	r1, sp, r2
 800fb86:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800fb8a:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 800fb8e:	f7ff ff53 	bl	800fa38 <memcpy.isra.0>
 800fb92:	1d73      	adds	r3, r6, #5
 800fb94:	1c72      	adds	r2, r6, #1
 800fb96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800fb9a:	b2d2      	uxtb	r2, r2
 800fb9c:	1c69      	adds	r1, r5, #1
 800fb9e:	4648      	mov	r0, r9
 800fba0:	f7ff ff4a 	bl	800fa38 <memcpy.isra.0>
 800fba4:	f241 53c1 	movw	r3, #5569	; 0x15c1
 800fba8:	9300      	str	r3, [sp, #0]
 800fbaa:	4807      	ldr	r0, [pc, #28]	; (800fbc8 <LLRPDevice::HandleRdmCommand()+0x98>)
 800fbac:	4b07      	ldr	r3, [pc, #28]	; (800fbcc <LLRPDevice::HandleRdmCommand()+0x9c>)
 800fbae:	7800      	ldrb	r0, [r0, #0]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f108 0210 	add.w	r2, r8, #16
 800fbb6:	4621      	mov	r1, r4
 800fbb8:	f005 fa76 	bl	80150a8 <udp_send>
 800fbbc:	b009      	add	sp, #36	; 0x24
 800fbbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbc2:	bf00      	nop
 800fbc4:	200006f8 	strdcs	r0, [r0], -r8
 800fbc8:	20000000 	andcs	r0, r0, r0
 800fbcc:	200006f4 	strdcs	r0, [r0], -r4

0800fbd0 <LLRPDevice::Run()>:
 800fbd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbd2:	4d0f      	ldr	r5, [pc, #60]	; (800fc10 <LLRPDevice::Run()+0x40>)
 800fbd4:	4a0f      	ldr	r2, [pc, #60]	; (800fc14 <LLRPDevice::Run()+0x44>)
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	480f      	ldr	r0, [pc, #60]	; (800fc18 <LLRPDevice::Run()+0x48>)
 800fbda:	f10d 0306 	add.w	r3, sp, #6
 800fbde:	7800      	ldrb	r0, [r0, #0]
 800fbe0:	4629      	mov	r1, r5
 800fbe2:	f005 fa3b 	bl	801505c <udp_recv2>
 800fbe6:	2841      	cmp	r0, #65	; 0x41
 800fbe8:	d908      	bls.n	800fbfc <LLRPDevice::Run()+0x2c>
 800fbea:	682b      	ldr	r3, [r5, #0]
 800fbec:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800fbf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fbf4:	ba1a      	rev	r2, r3
 800fbf6:	d003      	beq.n	800fc00 <LLRPDevice::Run()+0x30>
 800fbf8:	2a03      	cmp	r2, #3
 800fbfa:	d005      	beq.n	800fc08 <LLRPDevice::Run()+0x38>
 800fbfc:	b003      	add	sp, #12
 800fbfe:	bd30      	pop	{r4, r5, pc}
 800fc00:	4620      	mov	r0, r4
 800fc02:	f7ff ff43 	bl	800fa8c <LLRPDevice::HandleRequestMessage()>
 800fc06:	e7f9      	b.n	800fbfc <LLRPDevice::Run()+0x2c>
 800fc08:	4620      	mov	r0, r4
 800fc0a:	f7ff ff91 	bl	800fb30 <LLRPDevice::HandleRdmCommand()>
 800fc0e:	e7f5      	b.n	800fbfc <LLRPDevice::Run()+0x2c>
 800fc10:	200006f8 	strdcs	r0, [r0], -r8
 800fc14:	200006ec 	andcs	r0, r0, ip, ror #13
 800fc18:	20000000 	andcs	r0, r0, r0

0800fc1c <LLRPDevice::Print()>:
 800fc1c:	b507      	push	{r0, r1, r2, lr}
 800fc1e:	4811      	ldr	r0, [pc, #68]	; (800fc64 <LLRPDevice::Print()+0x48>)
 800fc20:	f7fa fca4 	bl	800a56c <printf>
 800fc24:	f241 51c1 	movw	r1, #5569	; 0x15c1
 800fc28:	480f      	ldr	r0, [pc, #60]	; (800fc68 <LLRPDevice::Print()+0x4c>)
 800fc2a:	f7fa fc9f 	bl	800a56c <printf>
 800fc2e:	4b0f      	ldr	r3, [pc, #60]	; (800fc6c <LLRPDevice::Print()+0x50>)
 800fc30:	480f      	ldr	r0, [pc, #60]	; (800fc70 <LLRPDevice::Print()+0x54>)
 800fc32:	6819      	ldr	r1, [r3, #0]
 800fc34:	0e0b      	lsrs	r3, r1, #24
 800fc36:	9300      	str	r3, [sp, #0]
 800fc38:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800fc3c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fc40:	b2c9      	uxtb	r1, r1
 800fc42:	f7fa fc93 	bl	800a56c <printf>
 800fc46:	4b0b      	ldr	r3, [pc, #44]	; (800fc74 <LLRPDevice::Print()+0x58>)
 800fc48:	480b      	ldr	r0, [pc, #44]	; (800fc78 <LLRPDevice::Print()+0x5c>)
 800fc4a:	6819      	ldr	r1, [r3, #0]
 800fc4c:	0e0b      	lsrs	r3, r1, #24
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800fc54:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fc58:	b2c9      	uxtb	r1, r1
 800fc5a:	f7fa fc87 	bl	800a56c <printf>
 800fc5e:	b003      	add	sp, #12
 800fc60:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc64:	0801c24f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r9, lr, pc}
 800fc68:	0801c26a 	stmdaeq	r1, {r1, r3, r5, r6, r9, lr, pc}
 800fc6c:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800fc70:	0801c288 	stmdaeq	r1, {r3, r7, r9, lr, pc}
 800fc74:	200006f4 	strdcs	r0, [r0], -r4
 800fc78:	0801c2af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r9, lr, pc}

0800fc7c <RDMNetDevice::Print()>:
 800fc7c:	b510      	push	{r4, lr}
 800fc7e:	b08a      	sub	sp, #40	; 0x28
 800fc80:	2300      	movs	r3, #0
 800fc82:	4604      	mov	r4, r0
 800fc84:	4669      	mov	r1, sp
 800fc86:	480a      	ldr	r0, [pc, #40]	; (800fcb0 <RDMNetDevice::Print()+0x34>)
 800fc88:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800fc8c:	f001 f94e 	bl	8010f2c <uuid_unparse>
 800fc90:	4808      	ldr	r0, [pc, #32]	; (800fcb4 <RDMNetDevice::Print()+0x38>)
 800fc92:	f7fa fc6b 	bl	800a56c <printf>
 800fc96:	4669      	mov	r1, sp
 800fc98:	4807      	ldr	r0, [pc, #28]	; (800fcb8 <RDMNetDevice::Print()+0x3c>)
 800fc9a:	f7fa fc67 	bl	800a56c <printf>
 800fc9e:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 800fca2:	f7ff ffbb 	bl	800fc1c <LLRPDevice::Print()>
 800fca6:	4620      	mov	r0, r4
 800fca8:	f000 fa3a 	bl	8010120 <RDMDeviceResponder::Print()>
 800fcac:	b00a      	add	sp, #40	; 0x28
 800fcae:	bd10      	pop	{r4, pc}
 800fcb0:	200007fb 	strdcs	r0, [r0], -fp
 800fcb4:	0801c326 	stmdaeq	r1, {r1, r2, r5, r8, r9, lr, pc}
 800fcb8:	0801c32e 	stmdaeq	r1, {r1, r2, r3, r5, r8, r9, lr, pc}

0800fcbc <RDMSensors::RDMSensors()>:
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	6002      	str	r2, [r0, #0]
 800fcc0:	7102      	strb	r2, [r0, #4]
 800fcc2:	4a01      	ldr	r2, [pc, #4]	; (800fcc8 <RDMSensors::RDMSensors()+0xc>)
 800fcc4:	6010      	str	r0, [r2, #0]
 800fcc6:	4770      	bx	lr
 800fcc8:	2000080c 	andcs	r0, r0, ip, lsl #16

0800fccc <RDMSensors::~RDMSensors()>:
 800fccc:	b570      	push	{r4, r5, r6, lr}
 800fcce:	2500      	movs	r5, #0
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	462e      	mov	r6, r5
 800fcd4:	7923      	ldrb	r3, [r4, #4]
 800fcd6:	6820      	ldr	r0, [r4, #0]
 800fcd8:	42ab      	cmp	r3, r5
 800fcda:	d804      	bhi.n	800fce6 <RDMSensors::~RDMSensors()+0x1a>
 800fcdc:	b108      	cbz	r0, 800fce2 <RDMSensors::~RDMSensors()+0x16>
 800fcde:	f008 fb17 	bl	8018310 <operator delete[](void*)>
 800fce2:	4620      	mov	r0, r4
 800fce4:	bd70      	pop	{r4, r5, r6, pc}
 800fce6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800fcea:	b128      	cbz	r0, 800fcf8 <RDMSensors::~RDMSensors()+0x2c>
 800fcec:	6803      	ldr	r3, [r0, #0]
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	4798      	blx	r3
 800fcf2:	6823      	ldr	r3, [r4, #0]
 800fcf4:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 800fcf8:	3501      	adds	r5, #1
 800fcfa:	e7eb      	b.n	800fcd4 <RDMSensors::~RDMSensors()+0x8>

0800fcfc <RDMSubDevices::RDMSubDevices()>:
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	6002      	str	r2, [r0, #0]
 800fd00:	8082      	strh	r2, [r0, #4]
 800fd02:	4a01      	ldr	r2, [pc, #4]	; (800fd08 <RDMSubDevices::RDMSubDevices()+0xc>)
 800fd04:	6010      	str	r0, [r2, #0]
 800fd06:	4770      	bx	lr
 800fd08:	20000810 	andcs	r0, r0, r0, lsl r8

0800fd0c <RDMSubDevices::~RDMSubDevices()>:
 800fd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd0e:	2500      	movs	r5, #0
 800fd10:	4604      	mov	r4, r0
 800fd12:	462e      	mov	r6, r5
 800fd14:	88a3      	ldrh	r3, [r4, #4]
 800fd16:	6820      	ldr	r0, [r4, #0]
 800fd18:	42ab      	cmp	r3, r5
 800fd1a:	d804      	bhi.n	800fd26 <RDMSubDevices::~RDMSubDevices()+0x1a>
 800fd1c:	b108      	cbz	r0, 800fd22 <RDMSubDevices::~RDMSubDevices()+0x16>
 800fd1e:	f008 faf7 	bl	8018310 <operator delete[](void*)>
 800fd22:	4620      	mov	r0, r4
 800fd24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd26:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800fd2a:	00af      	lsls	r7, r5, #2
 800fd2c:	b110      	cbz	r0, 800fd34 <RDMSubDevices::~RDMSubDevices()+0x28>
 800fd2e:	6803      	ldr	r3, [r0, #0]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	4798      	blx	r3
 800fd34:	6823      	ldr	r3, [r4, #0]
 800fd36:	3501      	adds	r5, #1
 800fd38:	51de      	str	r6, [r3, r7]
 800fd3a:	e7eb      	b.n	800fd14 <RDMSubDevices::~RDMSubDevices()+0x8>

0800fd3c <RDMSubDevices::GetInfo(unsigned short)>:
 800fd3c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800fd40:	6803      	ldr	r3, [r0, #0]
 800fd42:	3901      	subs	r1, #1
 800fd44:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800fd48:	3010      	adds	r0, #16
 800fd4a:	4770      	bx	lr

0800fd4c <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 800fd4c:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800fd50:	6800      	ldr	r0, [r0, #0]
 800fd52:	3b01      	subs	r3, #1
 800fd54:	4611      	mov	r1, r2
 800fd56:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fd5a:	f000 b830 	b.w	800fdbe <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

0800fd5e <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 800fd5e:	b410      	push	{r4}
 800fd60:	460c      	mov	r4, r1
 800fd62:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800fd66:	3c01      	subs	r4, #1
 800fd68:	6800      	ldr	r0, [r0, #0]
 800fd6a:	4611      	mov	r1, r2
 800fd6c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800fd70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd74:	461a      	mov	r2, r3
 800fd76:	f000 b837 	b.w	800fde8 <RDMSubDevice::SetLabel(char const*, unsigned char)>

0800fd7a <RDMSubDevices::GetFactoryDefaults()>:
 800fd7a:	b538      	push	{r3, r4, r5, lr}
 800fd7c:	4605      	mov	r5, r0
 800fd7e:	2400      	movs	r4, #0
 800fd80:	88ab      	ldrh	r3, [r5, #4]
 800fd82:	42a3      	cmp	r3, r4
 800fd84:	d801      	bhi.n	800fd8a <RDMSubDevices::GetFactoryDefaults()+0x10>
 800fd86:	2001      	movs	r0, #1
 800fd88:	e009      	b.n	800fd9e <RDMSubDevices::GetFactoryDefaults()+0x24>
 800fd8a:	682b      	ldr	r3, [r5, #0]
 800fd8c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fd90:	b908      	cbnz	r0, 800fd96 <RDMSubDevices::GetFactoryDefaults()+0x1c>
 800fd92:	3401      	adds	r4, #1
 800fd94:	e7f4      	b.n	800fd80 <RDMSubDevices::GetFactoryDefaults()+0x6>
 800fd96:	f000 f85c 	bl	800fe52 <RDMSubDevice::GetFactoryDefaults()>
 800fd9a:	2800      	cmp	r0, #0
 800fd9c:	d1f9      	bne.n	800fd92 <RDMSubDevices::GetFactoryDefaults()+0x18>
 800fd9e:	bd38      	pop	{r3, r4, r5, pc}

0800fda0 <RDMSubDevices::SetFactoryDefaults()>:
 800fda0:	b538      	push	{r3, r4, r5, lr}
 800fda2:	4605      	mov	r5, r0
 800fda4:	2400      	movs	r4, #0
 800fda6:	88ab      	ldrh	r3, [r5, #4]
 800fda8:	42a3      	cmp	r3, r4
 800fdaa:	d800      	bhi.n	800fdae <RDMSubDevices::SetFactoryDefaults()+0xe>
 800fdac:	bd38      	pop	{r3, r4, r5, pc}
 800fdae:	682b      	ldr	r3, [r5, #0]
 800fdb0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fdb4:	b108      	cbz	r0, 800fdba <RDMSubDevices::SetFactoryDefaults()+0x1a>
 800fdb6:	f000 f826 	bl	800fe06 <RDMSubDevice::SetFactoryDefaults()>
 800fdba:	3401      	adds	r4, #1
 800fdbc:	e7f3      	b.n	800fda6 <RDMSubDevices::SetFactoryDefaults()+0x6>

0800fdbe <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 800fdbe:	f100 0316 	add.w	r3, r0, #22
 800fdc2:	600b      	str	r3, [r1, #0]
 800fdc4:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800fdc8:	710b      	strb	r3, [r1, #4]
 800fdca:	4770      	bx	lr

0800fdcc <RDMSubDevice::SetLabel(char const*)>:
 800fdcc:	b510      	push	{r4, lr}
 800fdce:	2300      	movs	r3, #0
 800fdd0:	f100 0415 	add.w	r4, r0, #21
 800fdd4:	5cca      	ldrb	r2, [r1, r3]
 800fdd6:	b122      	cbz	r2, 800fde2 <RDMSubDevice::SetLabel(char const*)+0x16>
 800fdd8:	3301      	adds	r3, #1
 800fdda:	2b20      	cmp	r3, #32
 800fddc:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fde0:	d1f8      	bne.n	800fdd4 <RDMSubDevice::SetLabel(char const*)+0x8>
 800fde2:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 800fde6:	bd10      	pop	{r4, pc}

0800fde8 <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 800fde8:	b530      	push	{r4, r5, lr}
 800fdea:	2300      	movs	r3, #0
 800fdec:	f100 0415 	add.w	r4, r0, #21
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d905      	bls.n	800fe00 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 800fdf4:	5ccd      	ldrb	r5, [r1, r3]
 800fdf6:	f804 5f01 	strb.w	r5, [r4, #1]!
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	2b20      	cmp	r3, #32
 800fdfe:	d1f7      	bne.n	800fdf0 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 800fe00:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 800fe04:	bd30      	pop	{r4, r5, pc}

0800fe06 <RDMSubDevice::SetFactoryDefaults()>:
 800fe06:	7a03      	ldrb	r3, [r0, #8]
 800fe08:	b510      	push	{r4, lr}
 800fe0a:	b94b      	cbnz	r3, 800fe20 <RDMSubDevice::SetFactoryDefaults()+0x1a>
 800fe0c:	f100 0138 	add.w	r1, r0, #56	; 0x38
 800fe10:	f7ff ffdc 	bl	800fdcc <RDMSubDevice::SetLabel(char const*)>
 800fe14:	8983      	ldrh	r3, [r0, #12]
 800fe16:	8243      	strh	r3, [r0, #18]
 800fe18:	7b83      	ldrb	r3, [r0, #14]
 800fe1a:	7503      	strb	r3, [r0, #20]
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	7203      	strb	r3, [r0, #8]
 800fe20:	bd10      	pop	{r4, pc}

0800fe22 <RDMSubDevice::CalculateChecksum()>:
 800fe22:	b510      	push	{r4, lr}
 800fe24:	8a43      	ldrh	r3, [r0, #18]
 800fe26:	7d02      	ldrb	r2, [r0, #20]
 800fe28:	f890 4036 	ldrb.w	r4, [r0, #54]	; 0x36
 800fe2c:	4413      	add	r3, r2
 800fe2e:	f100 0215 	add.w	r2, r0, #21
 800fe32:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
 800fe36:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	30eb      	adds	r0, #235	; 0xeb
 800fe3e:	1881      	adds	r1, r0, r2
 800fe40:	428c      	cmp	r4, r1
 800fe42:	d801      	bhi.n	800fe48 <RDMSubDevice::CalculateChecksum()+0x26>
 800fe44:	4618      	mov	r0, r3
 800fe46:	bd10      	pop	{r4, pc}
 800fe48:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800fe4c:	440b      	add	r3, r1
 800fe4e:	b29b      	uxth	r3, r3
 800fe50:	e7f5      	b.n	800fe3e <RDMSubDevice::CalculateChecksum()+0x1c>

0800fe52 <RDMSubDevice::GetFactoryDefaults()>:
 800fe52:	7a03      	ldrb	r3, [r0, #8]
 800fe54:	b510      	push	{r4, lr}
 800fe56:	4604      	mov	r4, r0
 800fe58:	b133      	cbz	r3, 800fe68 <RDMSubDevice::GetFactoryDefaults()+0x16>
 800fe5a:	f7ff ffe2 	bl	800fe22 <RDMSubDevice::CalculateChecksum()>
 800fe5e:	8963      	ldrh	r3, [r4, #10]
 800fe60:	4283      	cmp	r3, r0
 800fe62:	bf1c      	itt	ne
 800fe64:	2300      	movne	r3, #0
 800fe66:	7223      	strbne	r3, [r4, #8]
 800fe68:	7a20      	ldrb	r0, [r4, #8]
 800fe6a:	bd10      	pop	{r4, pc}

0800fe6c <memcpy.isra.0>:
 800fe6c:	f008 bb06 	b.w	801847c <memcpy>

0800fe70 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 800fe70:	b510      	push	{r4, lr}
 800fe72:	6001      	str	r1, [r0, #0]
 800fe74:	2100      	movs	r1, #0
 800fe76:	4604      	mov	r4, r0
 800fe78:	6041      	str	r1, [r0, #4]
 800fe7a:	2220      	movs	r2, #32
 800fe7c:	3008      	adds	r0, #8
 800fe7e:	f008 fb1f 	bl	80184c0 <memset>
 800fe82:	4b03      	ldr	r3, [pc, #12]	; (800fe90 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 800fe84:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe86:	237f      	movs	r3, #127	; 0x7f
 800fe88:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	bd10      	pop	{r4, pc}
 800fe90:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

0800fe94 <RDMDeviceParams::Load()>:
 800fe94:	4601      	mov	r1, r0
 800fe96:	6800      	ldr	r0, [r0, #0]
 800fe98:	b130      	cbz	r0, 800fea8 <RDMDeviceParams::Load()+0x14>
 800fe9a:	b508      	push	{r3, lr}
 800fe9c:	6803      	ldr	r3, [r0, #0]
 800fe9e:	3104      	adds	r1, #4
 800fea0:	68db      	ldr	r3, [r3, #12]
 800fea2:	4798      	blx	r3
 800fea4:	2001      	movs	r0, #1
 800fea6:	bd08      	pop	{r3, pc}
 800fea8:	4770      	bx	lr

0800feaa <RDMDeviceParams::Set(RDMDevice*)>:
 800feaa:	6843      	ldr	r3, [r0, #4]
 800feac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feb0:	460c      	mov	r4, r1
 800feb2:	07d9      	lsls	r1, r3, #31
 800feb4:	4605      	mov	r5, r0
 800feb6:	d519      	bpl.n	800feec <RDMDeviceParams::Set(RDMDevice*)+0x42>
 800feb8:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 800febc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800fec0:	2e20      	cmp	r6, #32
 800fec2:	f100 0108 	add.w	r1, r0, #8
 800fec6:	bf28      	it	cs
 800fec8:	2620      	movcs	r6, #32
 800feca:	b1f3      	cbz	r3, 800ff0a <RDMDeviceParams::Set(RDMDevice*)+0x60>
 800fecc:	f104 070a 	add.w	r7, r4, #10
 800fed0:	4638      	mov	r0, r7
 800fed2:	4632      	mov	r2, r6
 800fed4:	f7ff ffca 	bl	800fe6c <memcpy.isra.0>
 800fed8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800feda:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 800fede:	b128      	cbz	r0, 800feec <RDMDeviceParams::Set(RDMDevice*)+0x42>
 800fee0:	6802      	ldr	r2, [r0, #0]
 800fee2:	4639      	mov	r1, r7
 800fee4:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800fee8:	4632      	mov	r2, r6
 800feea:	47c0      	blx	r8
 800feec:	686b      	ldr	r3, [r5, #4]
 800feee:	079a      	lsls	r2, r3, #30
 800fef0:	bf44      	itt	mi
 800fef2:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 800fef6:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c
 800fefa:	075b      	lsls	r3, r3, #29
 800fefc:	bf44      	itt	mi
 800fefe:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 800ff02:	f8a4 304e 	strhmi.w	r3, [r4, #78]	; 0x4e
 800ff06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff0a:	4632      	mov	r2, r6
 800ff0c:	f104 0051 	add.w	r0, r4, #81	; 0x51
 800ff10:	f7ff ffac 	bl	800fe6c <memcpy.isra.0>
 800ff14:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
 800ff18:	e7e8      	b.n	800feec <RDMDeviceParams::Set(RDMDevice*)+0x42>

0800ff1a <RDMDeviceParams::Dump()>:
 800ff1a:	4770      	bx	lr

0800ff1c <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 800ff1c:	4770      	bx	lr

0800ff1e <RDMDeviceResponder::DmxStartAddressUpdate()>:
 800ff1e:	4770      	bx	lr

0800ff20 <RDMDeviceResponder::~RDMDeviceResponder()>:
 800ff20:	b510      	push	{r4, lr}
 800ff22:	4b06      	ldr	r3, [pc, #24]	; (800ff3c <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 800ff24:	4604      	mov	r4, r0
 800ff26:	f840 3b88 	str.w	r3, [r0], #136
 800ff2a:	f7ff feef 	bl	800fd0c <RDMSubDevices::~RDMSubDevices()>
 800ff2e:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800ff32:	f7ff fecb 	bl	800fccc <RDMSensors::~RDMSensors()>
 800ff36:	4620      	mov	r0, r4
 800ff38:	bd10      	pop	{r4, pc}
 800ff3a:	bf00      	nop
 800ff3c:	0801c3f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, lr, pc}

0800ff40 <RDMDeviceResponder::~RDMDeviceResponder()>:
 800ff40:	b510      	push	{r4, lr}
 800ff42:	4604      	mov	r4, r0
 800ff44:	f7ff ffec 	bl	800ff20 <RDMDeviceResponder::~RDMDeviceResponder()>
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f008 f9df 	bl	801830c <operator delete(void*)>
 800ff4e:	4620      	mov	r0, r4
 800ff50:	bd10      	pop	{r4, pc}
	...

0800ff54 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
 800ff54:	b570      	push	{r4, r5, r6, lr}
 800ff56:	4604      	mov	r4, r0
 800ff58:	3004      	adds	r0, #4
 800ff5a:	460e      	mov	r6, r1
 800ff5c:	4615      	mov	r5, r2
 800ff5e:	f000 feed 	bl	8010d3c <RDMDevice::RDMDevice()>
 800ff62:	4620      	mov	r0, r4
 800ff64:	4b21      	ldr	r3, [pc, #132]	; (800ffec <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x98>)
 800ff66:	f840 3b7c 	str.w	r3, [r0], #124
 800ff6a:	f000 fcf7 	bl	801095c <RDMIdentify::RDMIdentify()>
 800ff6e:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800ff72:	f7ff fea3 	bl	800fcbc <RDMSensors::RDMSensors()>
 800ff76:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800ff7a:	f7ff febf 	bl	800fcfc <RDMSubDevices::RDMSubDevices()>
 800ff7e:	4b1c      	ldr	r3, [pc, #112]	; (800fff0 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x9c>)
 800ff80:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 800ff84:	601c      	str	r4, [r3, #0]
 800ff86:	2365      	movs	r3, #101	; 0x65
 800ff88:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 800ff8c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800ff90:	2200      	movs	r2, #0
 800ff92:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 800ff96:	2301      	movs	r3, #1
 800ff98:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 800ff9c:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
 800ffa0:	f104 0399 	add.w	r3, r4, #153	; 0x99
 800ffa4:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 800ffa8:	428b      	cmp	r3, r1
 800ffaa:	d119      	bne.n	800ffe0 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x8c>
 800ffac:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d117      	bne.n	800ffe6 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x92>
 800ffb6:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 800ffba:	f7f9 ffd7 	bl	8009f6c <RDMSoftwareVersion::GetVersion()>
 800ffbe:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 800ffc2:	f7f9 ffd7 	bl	8009f74 <RDMSoftwareVersion::GetVersionLength()>
 800ffc6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ffca:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	b91b      	cbnz	r3, 800ffdc <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x88>
 800ffd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ffd8:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 800ffdc:	4620      	mov	r0, r4
 800ffde:	bd70      	pop	{r4, r5, r6, pc}
 800ffe0:	f803 2b01 	strb.w	r2, [r3], #1
 800ffe4:	e7e0      	b.n	800ffa8 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x54>
 800ffe6:	f803 1b01 	strb.w	r1, [r3], #1
 800ffea:	e7e2      	b.n	800ffb2 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x5e>
 800ffec:	0801c3f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, lr, pc}
 800fff0:	20000814 	andcs	r0, r0, r4, lsl r8

0800fff4 <RDMDeviceResponder::Init()>:
 800fff4:	b570      	push	{r4, r5, r6, lr}
 800fff6:	2301      	movs	r3, #1
 800fff8:	4604      	mov	r4, r0
 800fffa:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
 800fffe:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 8010002:	2a20      	cmp	r2, #32
 8010004:	bf28      	it	cs
 8010006:	2220      	movcs	r2, #32
 8010008:	3055      	adds	r0, #85	; 0x55
 801000a:	f104 010e 	add.w	r1, r4, #14
 801000e:	4613      	mov	r3, r2
 8010010:	3b01      	subs	r3, #1
 8010012:	d25d      	bcs.n	80100d0 <RDMDeviceResponder::Init()+0xdc>
 8010014:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8010016:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801001a:	b110      	cbz	r0, 8010022 <RDMDeviceResponder::Init()+0x2e>
 801001c:	6803      	ldr	r3, [r0, #0]
 801001e:	689b      	ldr	r3, [r3, #8]
 8010020:	4798      	blx	r3
 8010022:	f06f 050c 	mvn.w	r5, #12
 8010026:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801002a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 801002e:	f104 020d 	add.w	r2, r4, #13
 8010032:	1b2d      	subs	r5, r5, r4
 8010034:	18a9      	adds	r1, r5, r2
 8010036:	4288      	cmp	r0, r1
 8010038:	d84f      	bhi.n	80100da <RDMDeviceResponder::Init()+0xe6>
 801003a:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 801003e:	f7f9 ff9b 	bl	8009f78 <RDMSoftwareVersion::GetVersionId()>
 8010042:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8010046:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
 801004a:	2201      	movs	r2, #1
 801004c:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 8010050:	2200      	movs	r2, #0
 8010052:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
 8010056:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
 801005a:	0a1a      	lsrs	r2, r3, #8
 801005c:	0e03      	lsrs	r3, r0, #24
 801005e:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
 8010062:	0c03      	lsrs	r3, r0, #16
 8010064:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8010068:	0a03      	lsrs	r3, r0, #8
 801006a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 801006e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8010072:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 8010076:	f884 00a2 	strb.w	r0, [r4, #162]	; 0xa2
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 8010080:	685d      	ldr	r5, [r3, #4]
 8010082:	bb7d      	cbnz	r5, 80100e4 <RDMDeviceResponder::Init()+0xf0>
 8010084:	f8b4 00c4 	ldrh.w	r0, [r4, #196]	; 0xc4
 8010088:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 801008c:	0a03      	lsrs	r3, r0, #8
 801008e:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 8010092:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 8010096:	2301      	movs	r3, #1
 8010098:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801009c:	0a33      	lsrs	r3, r6, #8
 801009e:	b2c0      	uxtb	r0, r0
 80100a0:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 80100a4:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 80100a8:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 80100ac:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 80100b0:	f884 60aa 	strb.w	r6, [r4, #170]	; 0xaa
 80100b4:	f104 0399 	add.w	r3, r4, #153	; 0x99
 80100b8:	f104 02ac 	add.w	r2, r4, #172	; 0xac
 80100bc:	4293      	cmp	r3, r2
 80100be:	d12a      	bne.n	8010116 <RDMDeviceResponder::Init()+0x122>
 80100c0:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80100c4:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 80100c8:	4413      	add	r3, r2
 80100ca:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 80100ce:	bd70      	pop	{r4, r5, r6, pc}
 80100d0:	f810 5b01 	ldrb.w	r5, [r0], #1
 80100d4:	f800 5c48 	strb.w	r5, [r0, #-72]
 80100d8:	e79a      	b.n	8010010 <RDMDeviceResponder::Init()+0x1c>
 80100da:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80100de:	440b      	add	r3, r1
 80100e0:	b29b      	uxth	r3, r3
 80100e2:	e7a7      	b.n	8010034 <RDMDeviceResponder::Init()+0x40>
 80100e4:	682b      	ldr	r3, [r5, #0]
 80100e6:	4628      	mov	r0, r5
 80100e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ea:	4798      	blx	r3
 80100ec:	0a00      	lsrs	r0, r0, #8
 80100ee:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 80100f2:	682b      	ldr	r3, [r5, #0]
 80100f4:	4628      	mov	r0, r5
 80100f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100f8:	4798      	blx	r3
 80100fa:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 80100fe:	682b      	ldr	r3, [r5, #0]
 8010100:	4628      	mov	r0, r5
 8010102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010104:	4798      	blx	r3
 8010106:	0a00      	lsrs	r0, r0, #8
 8010108:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 801010c:	682b      	ldr	r3, [r5, #0]
 801010e:	4628      	mov	r0, r5
 8010110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010112:	4798      	blx	r3
 8010114:	e7bf      	b.n	8010096 <RDMDeviceResponder::Init()+0xa2>
 8010116:	f813 1b01 	ldrb.w	r1, [r3], #1
 801011a:	7499      	strb	r1, [r3, #18]
 801011c:	e7ce      	b.n	80100bc <RDMDeviceResponder::Init()+0xc8>
	...

08010120 <RDMDeviceResponder::Print()>:
 8010120:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010122:	4604      	mov	r4, r0
 8010124:	3004      	adds	r0, #4
 8010126:	f000 fe7b 	bl	8010e20 <RDMDevice::Print()>
 801012a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801012e:	481c      	ldr	r0, [pc, #112]	; (80101a0 <RDMDeviceResponder::Print()+0x80>)
 8010130:	681d      	ldr	r5, [r3, #0]
 8010132:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8010134:	f7fa fa1a 	bl	800a56c <printf>
 8010138:	f894 209a 	ldrb.w	r2, [r4, #154]	; 0x9a
 801013c:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8010140:	4818      	ldr	r0, [pc, #96]	; (80101a4 <RDMDeviceResponder::Print()+0x84>)
 8010142:	f7fa fa13 	bl	800a56c <printf>
 8010146:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 801014a:	f894 10a7 	ldrb.w	r1, [r4, #167]	; 0xa7
 801014e:	4816      	ldr	r0, [pc, #88]	; (80101a8 <RDMDeviceResponder::Print()+0x88>)
 8010150:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8010154:	f7fa fa0a 	bl	800a56c <printf>
 8010158:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 801015c:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
 8010160:	4812      	ldr	r0, [pc, #72]	; (80101ac <RDMDeviceResponder::Print()+0x8c>)
 8010162:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8010166:	3508      	adds	r5, #8
 8010168:	f7fa fa00 	bl	800a56c <printf>
 801016c:	f894 20a6 	ldrb.w	r2, [r4, #166]	; 0xa6
 8010170:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 8010174:	9500      	str	r5, [sp, #0]
 8010176:	b2f3      	uxtb	r3, r6
 8010178:	480d      	ldr	r0, [pc, #52]	; (80101b0 <RDMDeviceResponder::Print()+0x90>)
 801017a:	f7fa f9f7 	bl	800a56c <printf>
 801017e:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 8010182:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 8010186:	480b      	ldr	r0, [pc, #44]	; (80101b4 <RDMDeviceResponder::Print()+0x94>)
 8010188:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 801018c:	f7fa f9ee 	bl	800a56c <printf>
 8010190:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 8010194:	4808      	ldr	r0, [pc, #32]	; (80101b8 <RDMDeviceResponder::Print()+0x98>)
 8010196:	b002      	add	sp, #8
 8010198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801019c:	f7fa b9e6 	b.w	800a56c <printf>
 80101a0:	0801c339 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, lr, pc}
 80101a4:	0801c356 	stmdaeq	r1, {r1, r2, r4, r6, r8, r9, lr, pc}
 80101a8:	0801c36f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, r9, lr, pc}
 80101ac:	0801c387 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, lr, pc}
 80101b0:	0801c39f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, lr, pc}
 80101b4:	0801c3bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, lr, pc}
 80101b8:	0801c3d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, lr, pc}

080101bc <memcmp>:
 80101bc:	b510      	push	{r4, lr}
 80101be:	3901      	subs	r1, #1
 80101c0:	4402      	add	r2, r0
 80101c2:	4290      	cmp	r0, r2
 80101c4:	d101      	bne.n	80101ca <memcmp+0xe>
 80101c6:	2000      	movs	r0, #0
 80101c8:	e005      	b.n	80101d6 <memcmp+0x1a>
 80101ca:	7803      	ldrb	r3, [r0, #0]
 80101cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80101d0:	42a3      	cmp	r3, r4
 80101d2:	d001      	beq.n	80101d8 <memcmp+0x1c>
 80101d4:	1b18      	subs	r0, r3, r4
 80101d6:	bd10      	pop	{r4, pc}
 80101d8:	3001      	adds	r0, #1
 80101da:	e7f2      	b.n	80101c2 <memcmp+0x6>

080101dc <memcpy.isra.0>:
 80101dc:	3801      	subs	r0, #1
 80101de:	440a      	add	r2, r1
 80101e0:	4291      	cmp	r1, r2
 80101e2:	d100      	bne.n	80101e6 <memcpy.isra.0+0xa>
 80101e4:	4770      	bx	lr
 80101e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101ea:	f800 3f01 	strb.w	r3, [r0, #1]!
 80101ee:	e7f7      	b.n	80101e0 <memcpy.isra.0+0x4>

080101f0 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 80101f0:	b570      	push	{r4, r5, r6, lr}
 80101f2:	790d      	ldrb	r5, [r1, #4]
 80101f4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80101f8:	6809      	ldr	r1, [r1, #0]
 80101fa:	2d20      	cmp	r5, #32
 80101fc:	4604      	mov	r4, r0
 80101fe:	bf28      	it	cs
 8010200:	2520      	movcs	r5, #32
 8010202:	b18b      	cbz	r3, 8010228 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x38>
 8010204:	f100 060a 	add.w	r6, r0, #10
 8010208:	4630      	mov	r0, r6
 801020a:	462a      	mov	r2, r5
 801020c:	f7ff ffe6 	bl	80101dc <memcpy.isra.0>
 8010210:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8010212:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
 8010216:	b168      	cbz	r0, 8010234 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x44>
 8010218:	6802      	ldr	r2, [r0, #0]
 801021a:	6894      	ldr	r4, [r2, #8]
 801021c:	4631      	mov	r1, r6
 801021e:	462a      	mov	r2, r5
 8010220:	4623      	mov	r3, r4
 8010222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010226:	4718      	bx	r3
 8010228:	462a      	mov	r2, r5
 801022a:	3051      	adds	r0, #81	; 0x51
 801022c:	f7ff ffd6 	bl	80101dc <memcpy.isra.0>
 8010230:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
 8010234:	bd70      	pop	{r4, r5, r6, pc}

08010236 <RDMDeviceResponder::SetFactoryDefaults()>:
 8010236:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010238:	f100 0355 	add.w	r3, r0, #85	; 0x55
 801023c:	4604      	mov	r4, r0
 801023e:	9300      	str	r3, [sp, #0]
 8010240:	3004      	adds	r0, #4
 8010242:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8010246:	f88d 3004 	strb.w	r3, [sp, #4]
 801024a:	4669      	mov	r1, sp
 801024c:	f7ff ffd0 	bl	80101f0 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8010250:	f06f 050c 	mvn.w	r5, #12
 8010254:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8010258:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 801025c:	f104 020d 	add.w	r2, r4, #13
 8010260:	1b2d      	subs	r5, r5, r4
 8010262:	18a9      	adds	r1, r5, r2
 8010264:	4288      	cmp	r0, r1
 8010266:	d865      	bhi.n	8010334 <RDMDeviceResponder::SetFactoryDefaults()+0xfe>
 8010268:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 801026c:	2301      	movs	r3, #1
 801026e:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8010272:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	685d      	ldr	r5, [r3, #4]
 801027a:	b1f5      	cbz	r5, 80102ba <RDMDeviceResponder::SetFactoryDefaults()+0x84>
 801027c:	682b      	ldr	r3, [r5, #0]
 801027e:	4628      	mov	r0, r5
 8010280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010282:	4798      	blx	r3
 8010284:	0a00      	lsrs	r0, r0, #8
 8010286:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 801028a:	682b      	ldr	r3, [r5, #0]
 801028c:	4628      	mov	r0, r5
 801028e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010290:	4798      	blx	r3
 8010292:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 8010296:	682b      	ldr	r3, [r5, #0]
 8010298:	4628      	mov	r0, r5
 801029a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801029c:	4798      	blx	r3
 801029e:	0a00      	lsrs	r0, r0, #8
 80102a0:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 80102a4:	682b      	ldr	r3, [r5, #0]
 80102a6:	4628      	mov	r0, r5
 80102a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102aa:	4798      	blx	r3
 80102ac:	6823      	ldr	r3, [r4, #0]
 80102ae:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 80102b2:	689b      	ldr	r3, [r3, #8]
 80102b4:	4629      	mov	r1, r5
 80102b6:	4620      	mov	r0, r4
 80102b8:	4798      	blx	r3
 80102ba:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
 80102be:	1e6b      	subs	r3, r5, #1
 80102c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102c4:	d218      	bcs.n	80102f8 <RDMDeviceResponder::SetFactoryDefaults()+0xc2>
 80102c6:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80102ca:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80102ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80102d2:	3b01      	subs	r3, #1
 80102d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102d8:	6858      	ldr	r0, [r3, #4]
 80102da:	b168      	cbz	r0, 80102f8 <RDMDeviceResponder::SetFactoryDefaults()+0xc2>
 80102dc:	6803      	ldr	r3, [r0, #0]
 80102de:	4629      	mov	r1, r5
 80102e0:	6a1b      	ldr	r3, [r3, #32]
 80102e2:	4798      	blx	r3
 80102e4:	b120      	cbz	r0, 80102f0 <RDMDeviceResponder::SetFactoryDefaults()+0xba>
 80102e6:	0a2b      	lsrs	r3, r5, #8
 80102e8:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 80102ec:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 80102f0:	6823      	ldr	r3, [r4, #0]
 80102f2:	4620      	mov	r0, r4
 80102f4:	68db      	ldr	r3, [r3, #12]
 80102f6:	4798      	blx	r3
 80102f8:	2213      	movs	r2, #19
 80102fa:	f104 0199 	add.w	r1, r4, #153	; 0x99
 80102fe:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8010302:	f7ff ff6b 	bl	80101dc <memcpy.isra.0>
 8010306:	f104 0088 	add.w	r0, r4, #136	; 0x88
 801030a:	f7ff fd49 	bl	800fda0 <RDMSubDevices::SetFactoryDefaults()>
 801030e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8010312:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8010316:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 801031a:	4413      	add	r3, r2
 801031c:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 8010320:	2301      	movs	r3, #1
 8010322:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 8010326:	b150      	cbz	r0, 801033e <RDMDeviceResponder::SetFactoryDefaults()+0x108>
 8010328:	6803      	ldr	r3, [r0, #0]
 801032a:	689b      	ldr	r3, [r3, #8]
 801032c:	b003      	add	sp, #12
 801032e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010332:	4718      	bx	r3
 8010334:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8010338:	440b      	add	r3, r1
 801033a:	b29b      	uxth	r3, r3
 801033c:	e791      	b.n	8010262 <RDMDeviceResponder::SetFactoryDefaults()+0x2c>
 801033e:	b003      	add	sp, #12
 8010340:	bd30      	pop	{r4, r5, pc}

08010342 <RDMHandler::RDMHandler(bool)>:
 8010342:	2200      	movs	r2, #0
 8010344:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8010348:	7001      	strb	r1, [r0, #0]
 801034a:	7042      	strb	r2, [r0, #1]
 801034c:	4770      	bx	lr

0801034e <RDMHandler::HandleString(char const*, unsigned int)>:
 801034e:	6883      	ldr	r3, [r0, #8]
 8010350:	f803 2f17 	strb.w	r2, [r3, #23]!
 8010354:	440a      	add	r2, r1
 8010356:	4291      	cmp	r1, r2
 8010358:	d100      	bne.n	801035c <RDMHandler::HandleString(char const*, unsigned int)+0xe>
 801035a:	4770      	bx	lr
 801035c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8010360:	f803 0f01 	strb.w	r0, [r3, #1]!
 8010364:	e7f7      	b.n	8010356 <RDMHandler::HandleString(char const*, unsigned int)+0x8>
	...

08010368 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 8010368:	b570      	push	{r4, r5, r6, lr}
 801036a:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 801036e:	25cc      	movs	r5, #204	; 0xcc
 8010370:	701d      	strb	r5, [r3, #0]
 8010372:	7825      	ldrb	r5, [r4, #0]
 8010374:	705d      	strb	r5, [r3, #1]
 8010376:	7ba5      	ldrb	r5, [r4, #14]
 8010378:	73dd      	strb	r5, [r3, #15]
 801037a:	2500      	movs	r5, #0
 801037c:	745d      	strb	r5, [r3, #17]
 801037e:	7c65      	ldrb	r5, [r4, #17]
 8010380:	749d      	strb	r5, [r3, #18]
 8010382:	7ca5      	ldrb	r5, [r4, #18]
 8010384:	74dd      	strb	r5, [r3, #19]
 8010386:	7ce5      	ldrb	r5, [r4, #19]
 8010388:	3501      	adds	r5, #1
 801038a:	751d      	strb	r5, [r3, #20]
 801038c:	7d25      	ldrb	r5, [r4, #20]
 801038e:	755d      	strb	r5, [r3, #21]
 8010390:	7d65      	ldrb	r5, [r4, #21]
 8010392:	759d      	strb	r5, [r3, #22]
 8010394:	b119      	cbz	r1, 801039e <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 8010396:	1e4d      	subs	r5, r1, #1
 8010398:	2d01      	cmp	r5, #1
 801039a:	d921      	bls.n	80103e0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x78>
 801039c:	bd70      	pop	{r4, r5, r6, pc}
 801039e:	7dda      	ldrb	r2, [r3, #23]
 80103a0:	7419      	strb	r1, [r3, #16]
 80103a2:	3218      	adds	r2, #24
 80103a4:	709a      	strb	r2, [r3, #2]
 80103a6:	4a15      	ldr	r2, [pc, #84]	; (80103fc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x94>)
 80103a8:	6812      	ldr	r2, [r2, #0]
 80103aa:	1de1      	adds	r1, r4, #7
 80103ac:	1c9d      	adds	r5, r3, #2
 80103ae:	3203      	adds	r2, #3
 80103b0:	340d      	adds	r4, #13
 80103b2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 80103b6:	f805 6f01 	strb.w	r6, [r5, #1]!
 80103ba:	42a1      	cmp	r1, r4
 80103bc:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 80103c0:	71ae      	strb	r6, [r5, #6]
 80103c2:	d1f6      	bne.n	80103b2 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4a>
 80103c4:	2200      	movs	r2, #0
 80103c6:	6884      	ldr	r4, [r0, #8]
 80103c8:	7899      	ldrb	r1, [r3, #2]
 80103ca:	4613      	mov	r3, r2
 80103cc:	428a      	cmp	r2, r1
 80103ce:	eb04 0502 	add.w	r5, r4, r2
 80103d2:	d30e      	bcc.n	80103f2 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8a>
 80103d4:	0a1a      	lsrs	r2, r3, #8
 80103d6:	702a      	strb	r2, [r5, #0]
 80103d8:	6882      	ldr	r2, [r0, #8]
 80103da:	440a      	add	r2, r1
 80103dc:	7053      	strb	r3, [r2, #1]
 80103de:	e7dd      	b.n	801039c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 80103e0:	7419      	strb	r1, [r3, #16]
 80103e2:	2102      	movs	r1, #2
 80103e4:	251a      	movs	r5, #26
 80103e6:	75d9      	strb	r1, [r3, #23]
 80103e8:	0a11      	lsrs	r1, r2, #8
 80103ea:	709d      	strb	r5, [r3, #2]
 80103ec:	7619      	strb	r1, [r3, #24]
 80103ee:	765a      	strb	r2, [r3, #25]
 80103f0:	e7d9      	b.n	80103a6 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 80103f2:	5ca5      	ldrb	r5, [r4, r2]
 80103f4:	442b      	add	r3, r5
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	3201      	adds	r2, #1
 80103fa:	e7e7      	b.n	80103cc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x64>
 80103fc:	20000814 	andcs	r0, r0, r4, lsl r8

08010400 <RDMHandler::RespondMessageAck()>:
 8010400:	6843      	ldr	r3, [r0, #4]
 8010402:	7d9a      	ldrb	r2, [r3, #22]
 8010404:	b90a      	cbnz	r2, 801040a <RDMHandler::RespondMessageAck()+0xa>
 8010406:	2218      	movs	r2, #24
 8010408:	705a      	strb	r2, [r3, #1]
 801040a:	2200      	movs	r2, #0
 801040c:	4611      	mov	r1, r2
 801040e:	f7ff bfab 	b.w	8010368 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

08010414 <RDMHandler::GetDeviceInfo(unsigned short)>:
 8010414:	b538      	push	{r3, r4, r5, lr}
 8010416:	4b18      	ldr	r3, [pc, #96]	; (8010478 <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 8010418:	4605      	mov	r5, r0
 801041a:	681c      	ldr	r4, [r3, #0]
 801041c:	b349      	cbz	r1, 8010472 <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 801041e:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8010422:	f7ff fc8b 	bl	800fd3c <RDMSubDevices::GetInfo(unsigned short)>
 8010426:	b1b8      	cbz	r0, 8010458 <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 8010428:	8803      	ldrh	r3, [r0, #0]
 801042a:	0a1b      	lsrs	r3, r3, #8
 801042c:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 8010430:	8803      	ldrh	r3, [r0, #0]
 8010432:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 8010436:	7903      	ldrb	r3, [r0, #4]
 8010438:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 801043c:	7943      	ldrb	r3, [r0, #5]
 801043e:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
 8010442:	8843      	ldrh	r3, [r0, #2]
 8010444:	0a1b      	lsrs	r3, r3, #8
 8010446:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 801044a:	8843      	ldrh	r3, [r0, #2]
 801044c:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 8010450:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8010454:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 8010458:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 801045c:	68a8      	ldr	r0, [r5, #8]
 801045e:	2213      	movs	r2, #19
 8010460:	75c2      	strb	r2, [r0, #23]
 8010462:	3018      	adds	r0, #24
 8010464:	f7ff feba 	bl	80101dc <memcpy.isra.0>
 8010468:	4628      	mov	r0, r5
 801046a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801046e:	f7ff bfc7 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010472:	f104 0199 	add.w	r1, r4, #153	; 0x99
 8010476:	e7f1      	b.n	801045c <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 8010478:	20000814 	andcs	r0, r0, r4, lsl r8

0801047c <RDMHandler::GetFactoryDefaults(unsigned short)>:
 801047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801047e:	6886      	ldr	r6, [r0, #8]
 8010480:	2301      	movs	r3, #1
 8010482:	75f3      	strb	r3, [r6, #23]
 8010484:	4b1c      	ldr	r3, [pc, #112]	; (80104f8 <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 8010486:	681c      	ldr	r4, [r3, #0]
 8010488:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 801048c:	4605      	mov	r5, r0
 801048e:	b37b      	cbz	r3, 80104f0 <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 8010490:	f06f 0c0c 	mvn.w	ip, #12
 8010494:	f8b4 1076 	ldrh.w	r1, [r4, #118]	; 0x76
 8010498:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801049c:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80104a0:	f104 020d 	add.w	r2, r4, #13
 80104a4:	ebac 0c04 	sub.w	ip, ip, r4
 80104a8:	eb0c 0702 	add.w	r7, ip, r2
 80104ac:	4287      	cmp	r7, r0
 80104ae:	d30a      	bcc.n	80104c6 <RDMHandler::GetFactoryDefaults(unsigned short)+0x4a>
 80104b0:	4299      	cmp	r1, r3
 80104b2:	d00d      	beq.n	80104d0 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 80104b4:	2300      	movs	r3, #0
 80104b6:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 80104ba:	7633      	strb	r3, [r6, #24]
 80104bc:	4628      	mov	r0, r5
 80104be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80104c2:	f7ff bf9d 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 80104c6:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 80104ca:	443b      	add	r3, r7
 80104cc:	b29b      	uxth	r3, r3
 80104ce:	e7eb      	b.n	80104a8 <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 80104d0:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80104d4:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 80104d8:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
 80104dc:	440b      	add	r3, r1
 80104de:	429a      	cmp	r2, r3
 80104e0:	d1e8      	bne.n	80104b4 <RDMHandler::GetFactoryDefaults(unsigned short)+0x38>
 80104e2:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80104e6:	f7ff fc48 	bl	800fd7a <RDMSubDevices::GetFactoryDefaults()>
 80104ea:	4603      	mov	r3, r0
 80104ec:	2800      	cmp	r0, #0
 80104ee:	d0e2      	beq.n	80104b6 <RDMHandler::GetFactoryDefaults(unsigned short)+0x3a>
 80104f0:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 80104f4:	e7e1      	b.n	80104ba <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 80104f6:	bf00      	nop
 80104f8:	20000814 	andcs	r0, r0, r4, lsl r8

080104fc <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 80104fc:	b510      	push	{r4, lr}
 80104fe:	4905      	ldr	r1, [pc, #20]	; (8010514 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 8010500:	4604      	mov	r4, r0
 8010502:	220a      	movs	r2, #10
 8010504:	f7ff ff23 	bl	801034e <RDMHandler::HandleString(char const*, unsigned int)>
 8010508:	4620      	mov	r0, r4
 801050a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801050e:	f7ff bf77 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010512:	bf00      	nop
 8010514:	0801b39a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, ip, sp, pc}

08010518 <RDMHandler::GetManufacturerLabel(unsigned short)>:
 8010518:	b510      	push	{r4, lr}
 801051a:	4b06      	ldr	r3, [pc, #24]	; (8010534 <RDMHandler::GetManufacturerLabel(unsigned short)+0x1c>)
 801051c:	6819      	ldr	r1, [r3, #0]
 801051e:	4604      	mov	r4, r0
 8010520:	f891 204f 	ldrb.w	r2, [r1, #79]	; 0x4f
 8010524:	312f      	adds	r1, #47	; 0x2f
 8010526:	f7ff ff12 	bl	801034e <RDMHandler::HandleString(char const*, unsigned int)>
 801052a:	4620      	mov	r0, r4
 801052c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010530:	f7ff bf66 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010534:	20000814 	andcs	r0, r0, r4, lsl r8

08010538 <RDMHandler::GetDeviceLabel(unsigned short)>:
 8010538:	4b0d      	ldr	r3, [pc, #52]	; (8010570 <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 801053a:	b513      	push	{r0, r1, r4, lr}
 801053c:	4604      	mov	r4, r0
 801053e:	6818      	ldr	r0, [r3, #0]
 8010540:	b171      	cbz	r1, 8010560 <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 8010542:	466a      	mov	r2, sp
 8010544:	3088      	adds	r0, #136	; 0x88
 8010546:	f7ff fc01 	bl	800fd4c <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 801054a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801054e:	9900      	ldr	r1, [sp, #0]
 8010550:	4620      	mov	r0, r4
 8010552:	f7ff fefc 	bl	801034e <RDMHandler::HandleString(char const*, unsigned int)>
 8010556:	4620      	mov	r0, r4
 8010558:	f7ff ff52 	bl	8010400 <RDMHandler::RespondMessageAck()>
 801055c:	b002      	add	sp, #8
 801055e:	bd10      	pop	{r4, pc}
 8010560:	f100 030e 	add.w	r3, r0, #14
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 801056a:	f88d 3004 	strb.w	r3, [sp, #4]
 801056e:	e7ec      	b.n	801054a <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 8010570:	20000814 	andcs	r0, r0, r4, lsl r8

08010574 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 8010574:	6883      	ldr	r3, [r0, #8]
 8010576:	2201      	movs	r2, #1
 8010578:	75da      	strb	r2, [r3, #23]
 801057a:	4a02      	ldr	r2, [pc, #8]	; (8010584 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 801057c:	7812      	ldrb	r2, [r2, #0]
 801057e:	761a      	strb	r2, [r3, #24]
 8010580:	f7ff bf3e 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010584:	20000818 	andcs	r0, r0, r8, lsl r8

08010588 <RDMHandler::RespondMessageNack(unsigned short)>:
 8010588:	460a      	mov	r2, r1
 801058a:	2102      	movs	r1, #2
 801058c:	f7ff beec 	b.w	8010368 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

08010590 <RDMHandler::SetResetDevice(bool, unsigned short)>:
 8010590:	b510      	push	{r4, lr}
 8010592:	6843      	ldr	r3, [r0, #4]
 8010594:	7d9a      	ldrb	r2, [r3, #22]
 8010596:	2a01      	cmp	r2, #1
 8010598:	4604      	mov	r4, r0
 801059a:	d004      	beq.n	80105a6 <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 801059c:	2101      	movs	r1, #1
 801059e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105a2:	f7ff bff1 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
 80105a6:	7ddb      	ldrb	r3, [r3, #23]
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	d003      	beq.n	80105b4 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 80105ac:	2bff      	cmp	r3, #255	; 0xff
 80105ae:	d001      	beq.n	80105b4 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 80105b0:	2106      	movs	r1, #6
 80105b2:	e7f4      	b.n	801059e <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 80105b4:	68a2      	ldr	r2, [r4, #8]
 80105b6:	2100      	movs	r1, #0
 80105b8:	2bff      	cmp	r3, #255	; 0xff
 80105ba:	75d1      	strb	r1, [r2, #23]
 80105bc:	d102      	bne.n	80105c4 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 80105be:	2104      	movs	r1, #4
 80105c0:	4620      	mov	r0, r4
 80105c2:	e7ec      	b.n	801059e <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 80105c4:	4b03      	ldr	r3, [pc, #12]	; (80105d4 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 80105c6:	6818      	ldr	r0, [r3, #0]
 80105c8:	f007 fe62 	bl	8018290 <Hardware::Reboot()>
 80105cc:	2800      	cmp	r0, #0
 80105ce:	d0f6      	beq.n	80105be <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 80105d0:	bd10      	pop	{r4, pc}
 80105d2:	bf00      	nop
 80105d4:	2000fdc4 	andcs	pc, r0, r4, asr #27

080105d8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 80105d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105da:	6843      	ldr	r3, [r0, #4]
 80105dc:	460d      	mov	r5, r1
 80105de:	7d99      	ldrb	r1, [r3, #22]
 80105e0:	2901      	cmp	r1, #1
 80105e2:	4604      	mov	r4, r0
 80105e4:	d004      	beq.n	80105f0 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 80105e6:	2101      	movs	r1, #1
 80105e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80105ec:	f7ff bfcc 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
 80105f0:	7ddb      	ldrb	r3, [r3, #23]
 80105f2:	2b01      	cmp	r3, #1
 80105f4:	d901      	bls.n	80105fa <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 80105f6:	2106      	movs	r1, #6
 80105f8:	e7f6      	b.n	80105e8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 80105fa:	4a12      	ldr	r2, [pc, #72]	; (8010644 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 80105fc:	4f12      	ldr	r7, [pc, #72]	; (8010648 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 80105fe:	6816      	ldr	r6, [r2, #0]
 8010600:	4a12      	ldr	r2, [pc, #72]	; (801064c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 8010602:	6810      	ldr	r0, [r2, #0]
 8010604:	4a12      	ldr	r2, [pc, #72]	; (8010650 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 8010606:	b983      	cbnz	r3, 801062a <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x52>
 8010608:	2102      	movs	r1, #2
 801060a:	7013      	strb	r3, [r2, #0]
 801060c:	f007 fd80 	bl	8018110 <LedBlink::SetMode(ledblink::Mode)>
 8010610:	7839      	ldrb	r1, [r7, #0]
 8010612:	b111      	cbz	r1, 801061a <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8010614:	4630      	mov	r0, r6
 8010616:	f000 f9a8 	bl	801096a <RDMIdentify::Off(rdm::identify::Mode)>
 801061a:	b98d      	cbnz	r5, 8010640 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x68>
 801061c:	68a3      	ldr	r3, [r4, #8]
 801061e:	75dd      	strb	r5, [r3, #23]
 8010620:	4620      	mov	r0, r4
 8010622:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010626:	f7ff beeb 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 801062a:	7011      	strb	r1, [r2, #0]
 801062c:	2104      	movs	r1, #4
 801062e:	f007 fd6f 	bl	8018110 <LedBlink::SetMode(ledblink::Mode)>
 8010632:	7839      	ldrb	r1, [r7, #0]
 8010634:	2900      	cmp	r1, #0
 8010636:	d0f0      	beq.n	801061a <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8010638:	4630      	mov	r0, r6
 801063a:	f000 f995 	bl	8010968 <RDMIdentify::On(rdm::identify::Mode)>
 801063e:	e7ec      	b.n	801061a <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8010640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010642:	bf00      	nop
 8010644:	2000081c 	andcs	r0, r0, ip, lsl r8
 8010648:	20000819 	andcs	r0, r0, r9, lsl r8
 801064c:	2000fdc0 	andcs	pc, r0, r0, asr #27
 8010650:	20000818 	andcs	r0, r0, r8, lsl r8

08010654 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 8010654:	b538      	push	{r3, r4, r5, lr}
 8010656:	6843      	ldr	r3, [r0, #4]
 8010658:	7d9b      	ldrb	r3, [r3, #22]
 801065a:	4604      	mov	r4, r0
 801065c:	460d      	mov	r5, r1
 801065e:	b123      	cbz	r3, 801066a <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x16>
 8010660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010664:	2101      	movs	r1, #1
 8010666:	f7ff bf8f 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
 801066a:	4b06      	ldr	r3, [pc, #24]	; (8010684 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x30>)
 801066c:	6818      	ldr	r0, [r3, #0]
 801066e:	f7ff fde2 	bl	8010236 <RDMDeviceResponder::SetFactoryDefaults()>
 8010672:	b935      	cbnz	r5, 8010682 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x2e>
 8010674:	68a3      	ldr	r3, [r4, #8]
 8010676:	75dd      	strb	r5, [r3, #23]
 8010678:	4620      	mov	r0, r4
 801067a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801067e:	f7ff bebf 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010682:	bd38      	pop	{r3, r4, r5, pc}
 8010684:	20000814 	andcs	r0, r0, r4, lsl r8

08010688 <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 8010688:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801068a:	6845      	ldr	r5, [r0, #4]
 801068c:	7dab      	ldrb	r3, [r5, #22]
 801068e:	2b20      	cmp	r3, #32
 8010690:	460e      	mov	r6, r1
 8010692:	4604      	mov	r4, r0
 8010694:	4611      	mov	r1, r2
 8010696:	d905      	bls.n	80106a4 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 8010698:	2101      	movs	r1, #1
 801069a:	b002      	add	sp, #8
 801069c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80106a0:	f7ff bf72 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
 80106a4:	4a0d      	ldr	r2, [pc, #52]	; (80106dc <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 80106a6:	6810      	ldr	r0, [r2, #0]
 80106a8:	f105 0217 	add.w	r2, r5, #23
 80106ac:	b159      	cbz	r1, 80106c6 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 80106ae:	3088      	adds	r0, #136	; 0x88
 80106b0:	f7ff fb55 	bl	800fd5e <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 80106b4:	b97e      	cbnz	r6, 80106d6 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 80106b6:	68a3      	ldr	r3, [r4, #8]
 80106b8:	4620      	mov	r0, r4
 80106ba:	75de      	strb	r6, [r3, #23]
 80106bc:	b002      	add	sp, #8
 80106be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80106c2:	f7ff be9d 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 80106c6:	4669      	mov	r1, sp
 80106c8:	3004      	adds	r0, #4
 80106ca:	9200      	str	r2, [sp, #0]
 80106cc:	f88d 3004 	strb.w	r3, [sp, #4]
 80106d0:	f7ff fd8e 	bl	80101f0 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 80106d4:	e7ee      	b.n	80106b4 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 80106d6:	b002      	add	sp, #8
 80106d8:	bd70      	pop	{r4, r5, r6, pc}
 80106da:	bf00      	nop
 80106dc:	20000814 	andcs	r0, r0, r4, lsl r8

080106e0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 80106e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80106e4:	4616      	mov	r6, r2
 80106e6:	4604      	mov	r4, r0
 80106e8:	f006 00ef 	and.w	r0, r6, #239	; 0xef
 80106ec:	2700      	movs	r7, #0
 80106ee:	2820      	cmp	r0, #32
 80106f0:	f89d 801c 	ldrb.w	r8, [sp, #28]
 80106f4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80106f8:	46be      	mov	lr, r7
 80106fa:	d005      	beq.n	8010708 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x28>
 80106fc:	2105      	movs	r1, #5
 80106fe:	4620      	mov	r0, r4
 8010700:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010704:	f7ff bf40 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
 8010708:	482b      	ldr	r0, [pc, #172]	; (80107b8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd8>)
 801070a:	6800      	ldr	r0, [r0, #0]
 801070c:	8880      	ldrh	r0, [r0, #4]
 801070e:	4290      	cmp	r0, r2
 8010710:	d205      	bcs.n	801071e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3e>
 8010712:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010716:	4282      	cmp	r2, r0
 8010718:	d001      	beq.n	801071e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3e>
 801071a:	2109      	movs	r1, #9
 801071c:	e7ef      	b.n	80106fe <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 801071e:	4d27      	ldr	r5, [pc, #156]	; (80107bc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xdc>)
 8010720:	f04f 0c14 	mov.w	ip, #20
 8010724:	2000      	movs	r0, #0
 8010726:	f8b5 9000 	ldrh.w	r9, [r5]
 801072a:	4599      	cmp	r9, r3
 801072c:	bf02      	ittt	eq
 801072e:	7daf      	ldrbeq	r7, [r5, #22]
 8010730:	f895 e017 	ldrbeq.w	lr, [r5, #23]
 8010734:	4628      	moveq	r0, r5
 8010736:	f1bc 0c01 	subs.w	ip, ip, #1
 801073a:	f105 0518 	add.w	r5, r5, #24
 801073e:	d1f2      	bne.n	8010726 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x46>
 8010740:	b908      	cbnz	r0, 8010746 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x66>
 8010742:	2100      	movs	r1, #0
 8010744:	e7db      	b.n	80106fe <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 8010746:	7823      	ldrb	r3, [r4, #0]
 8010748:	b193      	cbz	r3, 8010770 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x90>
 801074a:	2f00      	cmp	r7, #0
 801074c:	d0f9      	beq.n	8010742 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 801074e:	2e20      	cmp	r6, #32
 8010750:	d11f      	bne.n	8010792 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb2>
 8010752:	bb71      	cbnz	r1, 80107b2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd2>
 8010754:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010758:	429a      	cmp	r2, r3
 801075a:	d0de      	beq.n	801071a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 801075c:	6843      	ldr	r3, [r0, #4]
 801075e:	b913      	cbnz	r3, 8010766 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x86>
 8010760:	6881      	ldr	r1, [r0, #8]
 8010762:	07cd      	lsls	r5, r1, #31
 8010764:	d5ca      	bpl.n	80106fc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 8010766:	7d01      	ldrb	r1, [r0, #20]
 8010768:	4541      	cmp	r1, r8
 801076a:	d005      	beq.n	8010778 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x98>
 801076c:	2101      	movs	r1, #1
 801076e:	e7c6      	b.n	80106fe <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 8010770:	f1be 0f00 	cmp.w	lr, #0
 8010774:	d1eb      	bne.n	801074e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x6e>
 8010776:	e7e4      	b.n	8010742 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 8010778:	6881      	ldr	r1, [r0, #8]
 801077a:	104d      	asrs	r5, r1, #1
 801077c:	eb04 0061 	add.w	r0, r4, r1, asr #1
 8010780:	07c9      	lsls	r1, r1, #31
 8010782:	bf48      	it	mi
 8010784:	5961      	ldrmi	r1, [r4, r5]
 8010786:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801078a:	bf48      	it	mi
 801078c:	58cb      	ldrmi	r3, [r1, r3]
 801078e:	4611      	mov	r1, r2
 8010790:	4718      	bx	r3
 8010792:	e9d0 3003 	ldrd	r3, r0, [r0, #12]
 8010796:	f000 0501 	and.w	r5, r0, #1
 801079a:	b90b      	cbnz	r3, 80107a0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>
 801079c:	2d00      	cmp	r5, #0
 801079e:	d0ad      	beq.n	80106fc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 80107a0:	1046      	asrs	r6, r0, #1
 80107a2:	eb04 0060 	add.w	r0, r4, r0, asr #1
 80107a6:	b10d      	cbz	r5, 80107ac <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcc>
 80107a8:	59a4      	ldr	r4, [r4, r6]
 80107aa:	58e3      	ldr	r3, [r4, r3]
 80107ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107b0:	4718      	bx	r3
 80107b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107b6:	bf00      	nop
 80107b8:	20000810 	andcs	r0, r0, r0, lsl r8
 80107bc:	0801c410 	stmdaeq	r1, {r4, sl, lr, pc}

080107c0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 80107c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c4:	23ff      	movs	r3, #255	; 0xff
 80107c6:	7013      	strb	r3, [r2, #0]
 80107c8:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80107cc:	b085      	sub	sp, #20
 80107ce:	7ccb      	ldrb	r3, [r1, #19]
 80107d0:	7d4f      	ldrb	r7, [r1, #21]
 80107d2:	9303      	str	r3, [sp, #12]
 80107d4:	7d0b      	ldrb	r3, [r1, #20]
 80107d6:	f101 0a02 	add.w	sl, r1, #2
 80107da:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 80107de:	4b5c      	ldr	r3, [pc, #368]	; (8010950 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x190>)
 80107e0:	4606      	mov	r6, r0
 80107e2:	460d      	mov	r5, r1
 80107e4:	4614      	mov	r4, r2
 80107e6:	495b      	ldr	r1, [pc, #364]	; (8010954 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 80107e8:	f8d3 8000 	ldr.w	r8, [r3]
 80107ec:	2206      	movs	r2, #6
 80107ee:	4650      	mov	r0, sl
 80107f0:	f7ff fce4 	bl	80101bc <memcmp>
 80107f4:	f108 0904 	add.w	r9, r8, #4
 80107f8:	4683      	mov	fp, r0
 80107fa:	2202      	movs	r2, #2
 80107fc:	4649      	mov	r1, r9
 80107fe:	4650      	mov	r0, sl
 8010800:	b2bf      	uxth	r7, r7
 8010802:	f7ff fcdb 	bl	80101bc <memcmp>
 8010806:	b928      	cbnz	r0, 8010814 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x54>
 8010808:	2204      	movs	r2, #4
 801080a:	4952      	ldr	r1, [pc, #328]	; (8010954 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 801080c:	18a8      	adds	r0, r5, r2
 801080e:	f7ff fcd5 	bl	80101bc <memcmp>
 8010812:	b158      	cbz	r0, 801082c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6c>
 8010814:	2206      	movs	r2, #6
 8010816:	4649      	mov	r1, r9
 8010818:	4650      	mov	r0, sl
 801081a:	f7ff fccf 	bl	80101bc <memcmp>
 801081e:	b130      	cbz	r0, 801082e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6e>
 8010820:	f1bb 0f00 	cmp.w	fp, #0
 8010824:	d04b      	beq.n	80108be <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xfe>
 8010826:	b005      	add	sp, #20
 8010828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801082c:	2001      	movs	r0, #1
 801082e:	2301      	movs	r3, #1
 8010830:	9a03      	ldr	r2, [sp, #12]
 8010832:	2a10      	cmp	r2, #16
 8010834:	d177      	bne.n	8010926 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x166>
 8010836:	2f01      	cmp	r7, #1
 8010838:	d144      	bne.n	80108c4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x104>
 801083a:	7873      	ldrb	r3, [r6, #1]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d1f2      	bne.n	8010826 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010840:	2206      	movs	r2, #6
 8010842:	4649      	mov	r1, r9
 8010844:	f105 0017 	add.w	r0, r5, #23
 8010848:	f7ff fcb8 	bl	80101bc <memcmp>
 801084c:	2800      	cmp	r0, #0
 801084e:	dcea      	bgt.n	8010826 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010850:	2206      	movs	r2, #6
 8010852:	f105 011d 	add.w	r1, r5, #29
 8010856:	4648      	mov	r0, r9
 8010858:	f7ff fcb0 	bl	80101bc <memcmp>
 801085c:	2800      	cmp	r0, #0
 801085e:	dce2      	bgt.n	8010826 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010860:	23fe      	movs	r3, #254	; 0xfe
 8010862:	7023      	strb	r3, [r4, #0]
 8010864:	7063      	strb	r3, [r4, #1]
 8010866:	70a3      	strb	r3, [r4, #2]
 8010868:	70e3      	strb	r3, [r4, #3]
 801086a:	7123      	strb	r3, [r4, #4]
 801086c:	7163      	strb	r3, [r4, #5]
 801086e:	71a3      	strb	r3, [r4, #6]
 8010870:	23aa      	movs	r3, #170	; 0xaa
 8010872:	71e3      	strb	r3, [r4, #7]
 8010874:	f108 0203 	add.w	r2, r8, #3
 8010878:	4621      	mov	r1, r4
 801087a:	f108 0809 	add.w	r8, r8, #9
 801087e:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8010882:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010886:	f060 0055 	orn	r0, r0, #85	; 0x55
 801088a:	7208      	strb	r0, [r1, #8]
 801088c:	7810      	ldrb	r0, [r2, #0]
 801088e:	f040 0055 	orr.w	r0, r0, #85	; 0x55
 8010892:	7248      	strb	r0, [r1, #9]
 8010894:	7810      	ldrb	r0, [r2, #0]
 8010896:	4542      	cmp	r2, r8
 8010898:	4403      	add	r3, r0
 801089a:	b29b      	uxth	r3, r3
 801089c:	f101 0102 	add.w	r1, r1, #2
 80108a0:	d1ef      	bne.n	8010882 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xc2>
 80108a2:	0a1a      	lsrs	r2, r3, #8
 80108a4:	f062 0155 	orn	r1, r2, #85	; 0x55
 80108a8:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 80108ac:	7562      	strb	r2, [r4, #21]
 80108ae:	f063 0255 	orn	r2, r3, #85	; 0x55
 80108b2:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80108b6:	7521      	strb	r1, [r4, #20]
 80108b8:	75a2      	strb	r2, [r4, #22]
 80108ba:	75e3      	strb	r3, [r4, #23]
 80108bc:	e7b3      	b.n	8010826 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80108be:	4658      	mov	r0, fp
 80108c0:	465b      	mov	r3, fp
 80108c2:	e7b5      	b.n	8010830 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x70>
 80108c4:	2f03      	cmp	r7, #3
 80108c6:	d11a      	bne.n	80108fe <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x13e>
 80108c8:	7daa      	ldrb	r2, [r5, #22]
 80108ca:	2a00      	cmp	r2, #0
 80108cc:	d1ab      	bne.n	8010826 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80108ce:	7072      	strb	r2, [r6, #1]
 80108d0:	f1bb 0f00 	cmp.w	fp, #0
 80108d4:	d0a7      	beq.n	8010826 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d0a5      	beq.n	8010826 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80108da:	2302      	movs	r3, #2
 80108dc:	75e3      	strb	r3, [r4, #23]
 80108de:	4b1e      	ldr	r3, [pc, #120]	; (8010958 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 80108e0:	7622      	strb	r2, [r4, #24]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	7662      	strb	r2, [r4, #25]
 80108e6:	889b      	ldrh	r3, [r3, #4]
 80108e8:	3b00      	subs	r3, #0
 80108ea:	bf18      	it	ne
 80108ec:	2301      	movne	r3, #1
 80108ee:	005b      	lsls	r3, r3, #1
 80108f0:	4630      	mov	r0, r6
 80108f2:	7663      	strb	r3, [r4, #25]
 80108f4:	b005      	add	sp, #20
 80108f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108fa:	f7ff bd81 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 80108fe:	2f02      	cmp	r7, #2
 8010900:	d191      	bne.n	8010826 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010902:	7daa      	ldrb	r2, [r5, #22]
 8010904:	2a00      	cmp	r2, #0
 8010906:	d18e      	bne.n	8010826 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010908:	2101      	movs	r1, #1
 801090a:	7071      	strb	r1, [r6, #1]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d08a      	beq.n	8010826 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010910:	4b11      	ldr	r3, [pc, #68]	; (8010958 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 8010912:	75e7      	strb	r7, [r4, #23]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	7622      	strb	r2, [r4, #24]
 8010918:	7662      	strb	r2, [r4, #25]
 801091a:	889b      	ldrh	r3, [r3, #4]
 801091c:	3b00      	subs	r3, #0
 801091e:	bf18      	it	ne
 8010920:	2301      	movne	r3, #1
 8010922:	408b      	lsls	r3, r1
 8010924:	e7e4      	b.n	80108f0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x130>
 8010926:	7c6a      	ldrb	r2, [r5, #17]
 8010928:	7cab      	ldrb	r3, [r5, #18]
 801092a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801092e:	b29b      	uxth	r3, r3
 8010930:	f1bb 0f00 	cmp.w	fp, #0
 8010934:	9301      	str	r3, [sp, #4]
 8010936:	7dab      	ldrb	r3, [r5, #22]
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	bf18      	it	ne
 801093c:	4601      	movne	r1, r0
 801093e:	9a03      	ldr	r2, [sp, #12]
 8010940:	463b      	mov	r3, r7
 8010942:	bf08      	it	eq
 8010944:	2101      	moveq	r1, #1
 8010946:	4630      	mov	r0, r6
 8010948:	f7ff feca 	bl	80106e0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 801094c:	e76b      	b.n	8010826 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 801094e:	bf00      	nop
 8010950:	20000814 	andcs	r0, r0, r4, lsl r8
 8010954:	0801c408 	stmdaeq	r1, {r3, sl, lr, pc}
 8010958:	20000810 	andcs	r0, r0, r0, lsl r8

0801095c <RDMIdentify::RDMIdentify()>:
 801095c:	4b01      	ldr	r3, [pc, #4]	; (8010964 <RDMIdentify::RDMIdentify()+0x8>)
 801095e:	6018      	str	r0, [r3, #0]
 8010960:	4770      	bx	lr
 8010962:	bf00      	nop
 8010964:	2000081c 	andcs	r0, r0, ip, lsl r8

08010968 <RDMIdentify::On(rdm::identify::Mode)>:
 8010968:	4770      	bx	lr

0801096a <RDMIdentify::Off(rdm::identify::Mode)>:
 801096a:	4770      	bx	lr

0801096c <memcpy.constprop.0.isra.0>:
 801096c:	3801      	subs	r0, #1
 801096e:	1d0b      	adds	r3, r1, #4
 8010970:	4299      	cmp	r1, r3
 8010972:	d100      	bne.n	8010976 <memcpy.constprop.0.isra.0+0xa>
 8010974:	4770      	bx	lr
 8010976:	f811 2b01 	ldrb.w	r2, [r1], #1
 801097a:	f800 2f01 	strb.w	r2, [r0, #1]!
 801097e:	e7f7      	b.n	8010970 <memcpy.constprop.0.isra.0+0x4>

08010980 <RDMHandler::GetInterfaceList(unsigned short)>:
 8010980:	4a08      	ldr	r2, [pc, #32]	; (80109a4 <RDMHandler::GetInterfaceList(unsigned short)+0x24>)
 8010982:	6883      	ldr	r3, [r0, #8]
 8010984:	6812      	ldr	r2, [r2, #0]
 8010986:	6892      	ldr	r2, [r2, #8]
 8010988:	76da      	strb	r2, [r3, #27]
 801098a:	0e11      	lsrs	r1, r2, #24
 801098c:	7619      	strb	r1, [r3, #24]
 801098e:	0c11      	lsrs	r1, r2, #16
 8010990:	7659      	strb	r1, [r3, #25]
 8010992:	0a11      	lsrs	r1, r2, #8
 8010994:	2200      	movs	r2, #0
 8010996:	771a      	strb	r2, [r3, #28]
 8010998:	2206      	movs	r2, #6
 801099a:	7699      	strb	r1, [r3, #26]
 801099c:	775a      	strb	r2, [r3, #29]
 801099e:	75da      	strb	r2, [r3, #23]
 80109a0:	f7ff bd2e 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 80109a4:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

080109a8 <RDMHandler::GetInterfaceName(unsigned short)>:
 80109a8:	b538      	push	{r3, r4, r5, lr}
 80109aa:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 80109ae:	4604      	mov	r4, r0
 80109b0:	3117      	adds	r1, #23
 80109b2:	f105 0018 	add.w	r0, r5, #24
 80109b6:	f7ff ffd9 	bl	801096c <memcpy.constprop.0.isra.0>
 80109ba:	4a0d      	ldr	r2, [pc, #52]	; (80109f0 <RDMHandler::GetInterfaceName(unsigned short)+0x48>)
 80109bc:	6813      	ldr	r3, [r2, #0]
 80109be:	f105 001b 	add.w	r0, r5, #27
 80109c2:	33a6      	adds	r3, #166	; 0xa6
 80109c4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80109c8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80109cc:	2900      	cmp	r1, #0
 80109ce:	d1f9      	bne.n	80109c4 <RDMHandler::GetInterfaceName(unsigned short)+0x1c>
 80109d0:	6812      	ldr	r2, [r2, #0]
 80109d2:	32a6      	adds	r2, #166	; 0xa6
 80109d4:	4611      	mov	r1, r2
 80109d6:	460b      	mov	r3, r1
 80109d8:	3101      	adds	r1, #1
 80109da:	7818      	ldrb	r0, [r3, #0]
 80109dc:	2800      	cmp	r0, #0
 80109de:	d1fa      	bne.n	80109d6 <RDMHandler::GetInterfaceName(unsigned short)+0x2e>
 80109e0:	1a9b      	subs	r3, r3, r2
 80109e2:	3304      	adds	r3, #4
 80109e4:	75eb      	strb	r3, [r5, #23]
 80109e6:	4620      	mov	r0, r4
 80109e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109ec:	f7ff bd08 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 80109f0:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

080109f4 <RDMHandler::GetHardwareAddress(unsigned short)>:
 80109f4:	b538      	push	{r3, r4, r5, lr}
 80109f6:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 80109fa:	4604      	mov	r4, r0
 80109fc:	3117      	adds	r1, #23
 80109fe:	f105 0018 	add.w	r0, r5, #24
 8010a02:	f7ff ffb3 	bl	801096c <memcpy.constprop.0.isra.0>
 8010a06:	4b06      	ldr	r3, [pc, #24]	; (8010a20 <RDMHandler::GetHardwareAddress(unsigned short)+0x2c>)
 8010a08:	f105 011c 	add.w	r1, r5, #28
 8010a0c:	6818      	ldr	r0, [r3, #0]
 8010a0e:	f005 f821 	bl	8015a54 <Network::MacAddressCopyTo(unsigned char*)>
 8010a12:	230a      	movs	r3, #10
 8010a14:	75eb      	strb	r3, [r5, #23]
 8010a16:	4620      	mov	r0, r4
 8010a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a1c:	f7ff bcf0 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010a20:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010a24 <RDMHandler::GetDHCPMode(unsigned short)>:
 8010a24:	b538      	push	{r3, r4, r5, lr}
 8010a26:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010a2a:	4604      	mov	r4, r0
 8010a2c:	3117      	adds	r1, #23
 8010a2e:	f105 0018 	add.w	r0, r5, #24
 8010a32:	f7ff ff9b 	bl	801096c <memcpy.constprop.0.isra.0>
 8010a36:	4b05      	ldr	r3, [pc, #20]	; (8010a4c <RDMHandler::GetDHCPMode(unsigned short)+0x28>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	795b      	ldrb	r3, [r3, #5]
 8010a3c:	772b      	strb	r3, [r5, #28]
 8010a3e:	2305      	movs	r3, #5
 8010a40:	75eb      	strb	r3, [r5, #23]
 8010a42:	4620      	mov	r0, r4
 8010a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a48:	f7ff bcda 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010a4c:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010a50 <RDMHandler::SetDHCPMode(bool, unsigned short)>:
 8010a50:	4b10      	ldr	r3, [pc, #64]	; (8010a94 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x44>)
 8010a52:	6842      	ldr	r2, [r0, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	7919      	ldrb	r1, [r3, #4]
 8010a58:	b510      	push	{r4, lr}
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	b921      	cbnz	r1, 8010a68 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x18>
 8010a5e:	210b      	movs	r1, #11
 8010a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a64:	f7ff bd90 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
 8010a68:	7ed2      	ldrb	r2, [r2, #27]
 8010a6a:	2a01      	cmp	r2, #1
 8010a6c:	d109      	bne.n	8010a82 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x32>
 8010a6e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8010a72:	f042 0204 	orr.w	r2, r2, #4
 8010a76:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8010a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a7e:	f7ff bcbf 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010a82:	b92a      	cbnz	r2, 8010a90 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x40>
 8010a84:	4618      	mov	r0, r3
 8010a86:	4611      	mov	r1, r2
 8010a88:	f005 fa44 	bl	8015f14 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 8010a8c:	4620      	mov	r0, r4
 8010a8e:	e7f4      	b.n	8010a7a <RDMHandler::SetDHCPMode(bool, unsigned short)+0x2a>
 8010a90:	2106      	movs	r1, #6
 8010a92:	e7e5      	b.n	8010a60 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x10>
 8010a94:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010a98 <RDMHandler::GetNameServers(unsigned short)>:
 8010a98:	6842      	ldr	r2, [r0, #4]
 8010a9a:	7dd2      	ldrb	r2, [r2, #23]
 8010a9c:	2a02      	cmp	r2, #2
 8010a9e:	d902      	bls.n	8010aa6 <RDMHandler::GetNameServers(unsigned short)+0xe>
 8010aa0:	2106      	movs	r1, #6
 8010aa2:	f7ff bd71 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
 8010aa6:	6883      	ldr	r3, [r0, #8]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	765a      	strb	r2, [r3, #25]
 8010aac:	769a      	strb	r2, [r3, #26]
 8010aae:	76da      	strb	r2, [r3, #27]
 8010ab0:	771a      	strb	r2, [r3, #28]
 8010ab2:	2205      	movs	r2, #5
 8010ab4:	75da      	strb	r2, [r3, #23]
 8010ab6:	f7ff bca3 	b.w	8010400 <RDMHandler::RespondMessageAck()>
	...

08010abc <RDMHandler::GetZeroconf(unsigned short)>:
 8010abc:	b538      	push	{r3, r4, r5, lr}
 8010abe:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	3117      	adds	r1, #23
 8010ac6:	f105 0018 	add.w	r0, r5, #24
 8010aca:	f7ff ff4f 	bl	801096c <memcpy.constprop.0.isra.0>
 8010ace:	4b06      	ldr	r3, [pc, #24]	; (8010ae8 <RDMHandler::GetZeroconf(unsigned short)+0x2c>)
 8010ad0:	681a      	ldr	r2, [r3, #0]
 8010ad2:	7993      	ldrb	r3, [r2, #6]
 8010ad4:	b103      	cbz	r3, 8010ad8 <RDMHandler::GetZeroconf(unsigned short)+0x1c>
 8010ad6:	79d3      	ldrb	r3, [r2, #7]
 8010ad8:	772b      	strb	r3, [r5, #28]
 8010ada:	2305      	movs	r3, #5
 8010adc:	75eb      	strb	r3, [r5, #23]
 8010ade:	4620      	mov	r0, r4
 8010ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ae4:	f7ff bc8c 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010ae8:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010aec <RDMHandler::SetZeroconf(bool, unsigned short)>:
 8010aec:	4b10      	ldr	r3, [pc, #64]	; (8010b30 <RDMHandler::SetZeroconf(bool, unsigned short)+0x44>)
 8010aee:	6842      	ldr	r2, [r0, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	7999      	ldrb	r1, [r3, #6]
 8010af4:	b510      	push	{r4, lr}
 8010af6:	4604      	mov	r4, r0
 8010af8:	b921      	cbnz	r1, 8010b04 <RDMHandler::SetZeroconf(bool, unsigned short)+0x18>
 8010afa:	210b      	movs	r1, #11
 8010afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b00:	f7ff bd42 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
 8010b04:	7ed2      	ldrb	r2, [r2, #27]
 8010b06:	2a01      	cmp	r2, #1
 8010b08:	d109      	bne.n	8010b1e <RDMHandler::SetZeroconf(bool, unsigned short)+0x32>
 8010b0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8010b0e:	f042 0208 	orr.w	r2, r2, #8
 8010b12:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8010b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b1a:	f7ff bc71 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010b1e:	b92a      	cbnz	r2, 8010b2c <RDMHandler::SetZeroconf(bool, unsigned short)+0x40>
 8010b20:	4618      	mov	r0, r3
 8010b22:	4611      	mov	r1, r2
 8010b24:	f005 f9f6 	bl	8015f14 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 8010b28:	4620      	mov	r0, r4
 8010b2a:	e7f4      	b.n	8010b16 <RDMHandler::SetZeroconf(bool, unsigned short)+0x2a>
 8010b2c:	2106      	movs	r1, #6
 8010b2e:	e7e5      	b.n	8010afc <RDMHandler::SetZeroconf(bool, unsigned short)+0x10>
 8010b30:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010b34 <RDMHandler::RenewDhcp(bool, unsigned short)>:
 8010b34:	4b09      	ldr	r3, [pc, #36]	; (8010b5c <RDMHandler::RenewDhcp(bool, unsigned short)+0x28>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	795a      	ldrb	r2, [r3, #5]
 8010b3a:	b510      	push	{r4, lr}
 8010b3c:	4604      	mov	r4, r0
 8010b3e:	b922      	cbnz	r2, 8010b4a <RDMHandler::RenewDhcp(bool, unsigned short)+0x16>
 8010b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b44:	210b      	movs	r1, #11
 8010b46:	f7ff bd1f 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f005 f994 	bl	8015e78 <Network::EnableDhcp()>
 8010b50:	4620      	mov	r0, r4
 8010b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b56:	f7ff bc53 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010b5a:	bf00      	nop
 8010b5c:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010b60 <RDMHandler::GetAddressNetmask(unsigned short)>:
 8010b60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b62:	4e10      	ldr	r6, [pc, #64]	; (8010ba4 <RDMHandler::GetAddressNetmask(unsigned short)+0x44>)
 8010b64:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010b68:	6833      	ldr	r3, [r6, #0]
 8010b6a:	4604      	mov	r4, r0
 8010b6c:	695b      	ldr	r3, [r3, #20]
 8010b6e:	9301      	str	r3, [sp, #4]
 8010b70:	f105 0018 	add.w	r0, r5, #24
 8010b74:	3117      	adds	r1, #23
 8010b76:	f7ff fef9 	bl	801096c <memcpy.constprop.0.isra.0>
 8010b7a:	a901      	add	r1, sp, #4
 8010b7c:	f105 001c 	add.w	r0, r5, #28
 8010b80:	f7ff fef4 	bl	801096c <memcpy.constprop.0.isra.0>
 8010b84:	6836      	ldr	r6, [r6, #0]
 8010b86:	69f0      	ldr	r0, [r6, #28]
 8010b88:	f009 ff0e 	bl	801a9a8 <__popcountsi2>
 8010b8c:	f885 0020 	strb.w	r0, [r5, #32]
 8010b90:	7973      	ldrb	r3, [r6, #5]
 8010b92:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 8010b96:	230a      	movs	r3, #10
 8010b98:	75eb      	strb	r3, [r5, #23]
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f7ff fc30 	bl	8010400 <RDMHandler::RespondMessageAck()>
 8010ba0:	b002      	add	sp, #8
 8010ba2:	bd70      	pop	{r4, r5, r6, pc}
 8010ba4:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010ba8 <RDMHandler::GetStaticAddress(unsigned short)>:
 8010ba8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010baa:	4e0f      	ldr	r6, [pc, #60]	; (8010be8 <RDMHandler::GetStaticAddress(unsigned short)+0x40>)
 8010bac:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010bb0:	6833      	ldr	r3, [r6, #0]
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	695b      	ldr	r3, [r3, #20]
 8010bb6:	9301      	str	r3, [sp, #4]
 8010bb8:	f105 0018 	add.w	r0, r5, #24
 8010bbc:	3117      	adds	r1, #23
 8010bbe:	f7ff fed5 	bl	801096c <memcpy.constprop.0.isra.0>
 8010bc2:	a901      	add	r1, sp, #4
 8010bc4:	f105 001c 	add.w	r0, r5, #28
 8010bc8:	f7ff fed0 	bl	801096c <memcpy.constprop.0.isra.0>
 8010bcc:	6833      	ldr	r3, [r6, #0]
 8010bce:	69d8      	ldr	r0, [r3, #28]
 8010bd0:	f009 feea 	bl	801a9a8 <__popcountsi2>
 8010bd4:	2309      	movs	r3, #9
 8010bd6:	f885 0020 	strb.w	r0, [r5, #32]
 8010bda:	75eb      	strb	r3, [r5, #23]
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f7ff fc0f 	bl	8010400 <RDMHandler::RespondMessageAck()>
 8010be2:	b002      	add	sp, #8
 8010be4:	bd70      	pop	{r4, r5, r6, pc}
 8010be6:	bf00      	nop
 8010be8:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010bec <RDMHandler::SetStaticAddress(bool, unsigned short)>:
 8010bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010bee:	6845      	ldr	r5, [r0, #4]
 8010bf0:	7dab      	ldrb	r3, [r5, #22]
 8010bf2:	2b09      	cmp	r3, #9
 8010bf4:	4604      	mov	r4, r0
 8010bf6:	d005      	beq.n	8010c04 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x18>
 8010bf8:	2101      	movs	r1, #1
 8010bfa:	b003      	add	sp, #12
 8010bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c00:	f7ff bcc2 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
 8010c04:	f105 011b 	add.w	r1, r5, #27
 8010c08:	a801      	add	r0, sp, #4
 8010c0a:	f7ff feaf 	bl	801096c <memcpy.constprop.0.isra.0>
 8010c0e:	4b09      	ldr	r3, [pc, #36]	; (8010c34 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x48>)
 8010c10:	7fea      	ldrb	r2, [r5, #31]
 8010c12:	6818      	ldr	r0, [r3, #0]
 8010c14:	9901      	ldr	r1, [sp, #4]
 8010c16:	b12a      	cbz	r2, 8010c24 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x38>
 8010c18:	f1c2 0220 	rsb	r2, r2, #32
 8010c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c20:	4093      	lsls	r3, r2
 8010c22:	ba1a      	rev	r2, r3
 8010c24:	f005 f976 	bl	8015f14 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f7ff fbe9 	bl	8010400 <RDMHandler::RespondMessageAck()>
 8010c2e:	b003      	add	sp, #12
 8010c30:	bd30      	pop	{r4, r5, pc}
 8010c32:	bf00      	nop
 8010c34:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010c38 <RDMHandler::ApplyConfiguration(bool, unsigned short)>:
 8010c38:	4b08      	ldr	r3, [pc, #32]	; (8010c5c <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x24>)
 8010c3a:	b510      	push	{r4, lr}
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	6818      	ldr	r0, [r3, #0]
 8010c40:	f005 f975 	bl	8015f2e <Network::ApplyQueuedConfig()>
 8010c44:	b120      	cbz	r0, 8010c50 <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x18>
 8010c46:	4620      	mov	r0, r4
 8010c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c4c:	f7ff bbd8 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010c50:	4620      	mov	r0, r4
 8010c52:	2101      	movs	r1, #1
 8010c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c58:	f7ff bc96 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
 8010c5c:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010c60 <RDMHandler::GetDefaultRoute(unsigned short)>:
 8010c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c62:	4b0c      	ldr	r3, [pc, #48]	; (8010c94 <RDMHandler::GetDefaultRoute(unsigned short)+0x34>)
 8010c64:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	4604      	mov	r4, r0
 8010c6c:	699b      	ldr	r3, [r3, #24]
 8010c6e:	9301      	str	r3, [sp, #4]
 8010c70:	f105 0018 	add.w	r0, r5, #24
 8010c74:	3117      	adds	r1, #23
 8010c76:	f7ff fe79 	bl	801096c <memcpy.constprop.0.isra.0>
 8010c7a:	a901      	add	r1, sp, #4
 8010c7c:	f105 001c 	add.w	r0, r5, #28
 8010c80:	f7ff fe74 	bl	801096c <memcpy.constprop.0.isra.0>
 8010c84:	2308      	movs	r3, #8
 8010c86:	75eb      	strb	r3, [r5, #23]
 8010c88:	4620      	mov	r0, r4
 8010c8a:	f7ff fbb9 	bl	8010400 <RDMHandler::RespondMessageAck()>
 8010c8e:	b003      	add	sp, #12
 8010c90:	bd30      	pop	{r4, r5, pc}
 8010c92:	bf00      	nop
 8010c94:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010c98 <RDMHandler::SetDefaultRoute(bool, unsigned short)>:
 8010c98:	210b      	movs	r1, #11
 8010c9a:	f7ff bc75 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
	...

08010ca0 <RDMHandler::GetHostName(unsigned short)>:
 8010ca0:	4b0a      	ldr	r3, [pc, #40]	; (8010ccc <RDMHandler::GetHostName(unsigned short)+0x2c>)
 8010ca2:	b513      	push	{r0, r1, r4, lr}
 8010ca4:	6819      	ldr	r1, [r3, #0]
 8010ca6:	3120      	adds	r1, #32
 8010ca8:	460b      	mov	r3, r1
 8010caa:	461a      	mov	r2, r3
 8010cac:	3301      	adds	r3, #1
 8010cae:	7814      	ldrb	r4, [r2, #0]
 8010cb0:	2c00      	cmp	r4, #0
 8010cb2:	d1fa      	bne.n	8010caa <RDMHandler::GetHostName(unsigned short)+0xa>
 8010cb4:	1a52      	subs	r2, r2, r1
 8010cb6:	b292      	uxth	r2, r2
 8010cb8:	9001      	str	r0, [sp, #4]
 8010cba:	f7ff fb48 	bl	801034e <RDMHandler::HandleString(char const*, unsigned int)>
 8010cbe:	9801      	ldr	r0, [sp, #4]
 8010cc0:	b002      	add	sp, #8
 8010cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cc6:	f7ff bb9b 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010cca:	bf00      	nop
 8010ccc:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010cd0 <RDMHandler::SetHostName(bool, unsigned short)>:
 8010cd0:	b510      	push	{r4, lr}
 8010cd2:	6841      	ldr	r1, [r0, #4]
 8010cd4:	7d8b      	ldrb	r3, [r1, #22]
 8010cd6:	2b3f      	cmp	r3, #63	; 0x3f
 8010cd8:	4604      	mov	r4, r0
 8010cda:	d904      	bls.n	8010ce6 <RDMHandler::SetHostName(bool, unsigned short)+0x16>
 8010cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ce0:	2102      	movs	r1, #2
 8010ce2:	f7ff bc51 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
 8010ce6:	440b      	add	r3, r1
 8010ce8:	2200      	movs	r2, #0
 8010cea:	75da      	strb	r2, [r3, #23]
 8010cec:	4b04      	ldr	r3, [pc, #16]	; (8010d00 <RDMHandler::SetHostName(bool, unsigned short)+0x30>)
 8010cee:	3117      	adds	r1, #23
 8010cf0:	6818      	ldr	r0, [r3, #0]
 8010cf2:	f005 f87f 	bl	8015df4 <Network::SetHostName(char const*)>
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cfc:	f7ff bb80 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010d00:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010d04 <RDMHandler::GetDomainName(unsigned short)>:
 8010d04:	4b0a      	ldr	r3, [pc, #40]	; (8010d30 <RDMHandler::GetDomainName(unsigned short)+0x2c>)
 8010d06:	b513      	push	{r0, r1, r4, lr}
 8010d08:	6819      	ldr	r1, [r3, #0]
 8010d0a:	3160      	adds	r1, #96	; 0x60
 8010d0c:	460b      	mov	r3, r1
 8010d0e:	461a      	mov	r2, r3
 8010d10:	3301      	adds	r3, #1
 8010d12:	7814      	ldrb	r4, [r2, #0]
 8010d14:	2c00      	cmp	r4, #0
 8010d16:	d1fa      	bne.n	8010d0e <RDMHandler::GetDomainName(unsigned short)+0xa>
 8010d18:	1a52      	subs	r2, r2, r1
 8010d1a:	b292      	uxth	r2, r2
 8010d1c:	9001      	str	r0, [sp, #4]
 8010d1e:	f7ff fb16 	bl	801034e <RDMHandler::HandleString(char const*, unsigned int)>
 8010d22:	9801      	ldr	r0, [sp, #4]
 8010d24:	b002      	add	sp, #8
 8010d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d2a:	f7ff bb69 	b.w	8010400 <RDMHandler::RespondMessageAck()>
 8010d2e:	bf00      	nop
 8010d30:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08010d34 <RDMHandler::SetDomainName(bool, unsigned short)>:
 8010d34:	210b      	movs	r1, #11
 8010d36:	f7ff bc27 	b.w	8010588 <RDMHandler::RespondMessageNack(unsigned short)>
	...

08010d3c <RDMDevice::RDMDevice()>:
 8010d3c:	4a33      	ldr	r2, [pc, #204]	; (8010e0c <RDMDevice::RDMDevice()+0xd0>)
 8010d3e:	2300      	movs	r3, #0
 8010d40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d42:	4604      	mov	r4, r0
 8010d44:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8010d48:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 8010d4c:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
 8010d50:	6743      	str	r3, [r0, #116]	; 0x74
 8010d52:	4611      	mov	r1, r2
 8010d54:	4613      	mov	r3, r2
 8010d56:	3201      	adds	r2, #1
 8010d58:	7818      	ldrb	r0, [r3, #0]
 8010d5a:	2800      	cmp	r0, #0
 8010d5c:	d1fa      	bne.n	8010d54 <RDMDevice::RDMDevice()+0x18>
 8010d5e:	1a5b      	subs	r3, r3, r1
 8010d60:	2b20      	cmp	r3, #32
 8010d62:	bf28      	it	cs
 8010d64:	2320      	movcs	r3, #32
 8010d66:	f104 052a 	add.w	r5, r4, #42	; 0x2a
 8010d6a:	4828      	ldr	r0, [pc, #160]	; (8010e0c <RDMDevice::RDMDevice()+0xd0>)
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	461a      	mov	r2, r3
 8010d70:	3a01      	subs	r2, #1
 8010d72:	d23b      	bcs.n	8010dec <RDMDevice::RDMDevice()+0xb0>
 8010d74:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 8010d78:	4b25      	ldr	r3, [pc, #148]	; (8010e10 <RDMDevice::RDMDevice()+0xd4>)
 8010d7a:	781a      	ldrb	r2, [r3, #0]
 8010d7c:	7022      	strb	r2, [r4, #0]
 8010d7e:	785b      	ldrb	r3, [r3, #1]
 8010d80:	7063      	strb	r3, [r4, #1]
 8010d82:	4b24      	ldr	r3, [pc, #144]	; (8010e14 <RDMDevice::RDMDevice()+0xd8>)
 8010d84:	4669      	mov	r1, sp
 8010d86:	6818      	ldr	r0, [r3, #0]
 8010d88:	f004 fe64 	bl	8015a54 <Network::MacAddressCopyTo(unsigned char*)>
 8010d8c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010d90:	70a3      	strb	r3, [r4, #2]
 8010d92:	7263      	strb	r3, [r4, #9]
 8010d94:	4b20      	ldr	r3, [pc, #128]	; (8010e18 <RDMDevice::RDMDevice()+0xdc>)
 8010d96:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010d9a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010d9e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8010da2:	70e2      	strb	r2, [r4, #3]
 8010da4:	7222      	strb	r2, [r4, #8]
 8010da6:	7121      	strb	r1, [r4, #4]
 8010da8:	7160      	strb	r0, [r4, #5]
 8010daa:	71a0      	strb	r0, [r4, #6]
 8010dac:	71e1      	strb	r1, [r4, #7]
 8010dae:	461a      	mov	r2, r3
 8010db0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010db4:	2900      	cmp	r1, #0
 8010db6:	d1fb      	bne.n	8010db0 <RDMDevice::RDMDevice()+0x74>
 8010db8:	1a9b      	subs	r3, r3, r2
 8010dba:	2b20      	cmp	r3, #32
 8010dbc:	bf28      	it	cs
 8010dbe:	2320      	movcs	r3, #32
 8010dc0:	4915      	ldr	r1, [pc, #84]	; (8010e18 <RDMDevice::RDMDevice()+0xdc>)
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	3a01      	subs	r2, #1
 8010dc6:	d216      	bcs.n	8010df6 <RDMDevice::RDMDevice()+0xba>
 8010dc8:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 8010dcc:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 8010dd0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8010dd2:	4a12      	ldr	r2, [pc, #72]	; (8010e1c <RDMDevice::RDMDevice()+0xe0>)
 8010dd4:	2315      	movs	r3, #21
 8010dd6:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 8010dda:	f104 0165 	add.w	r1, r4, #101	; 0x65
 8010dde:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8010de2:	4299      	cmp	r1, r3
 8010de4:	d10c      	bne.n	8010e00 <RDMDevice::RDMDevice()+0xc4>
 8010de6:	4620      	mov	r0, r4
 8010de8:	b002      	add	sp, #8
 8010dea:	bd70      	pop	{r4, r5, r6, pc}
 8010dec:	f810 6b01 	ldrb.w	r6, [r0], #1
 8010df0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010df4:	e7bc      	b.n	8010d70 <RDMDevice::RDMDevice()+0x34>
 8010df6:	f811 0b01 	ldrb.w	r0, [r1], #1
 8010dfa:	f805 0f01 	strb.w	r0, [r5, #1]!
 8010dfe:	e7e1      	b.n	8010dc4 <RDMDevice::RDMDevice()+0x88>
 8010e00:	f812 0b01 	ldrb.w	r0, [r2], #1
 8010e04:	f803 0f01 	strb.w	r0, [r3, #1]!
 8010e08:	e7eb      	b.n	8010de2 <RDMDevice::RDMDevice()+0xa6>
 8010e0a:	bf00      	nop
 8010e0c:	0801c6dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, sl, lr, pc}
 8010e10:	0801c6da 	stmdaeq	r1, {r1, r3, r4, r6, r7, r9, sl, lr, pc}
 8010e14:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 8010e18:	0801be65 	stmdaeq	r1, {r0, r2, r5, r6, r9, sl, fp, ip, sp, pc}
 8010e1c:	0801c6c4 	stmdaeq	r1, {r2, r6, r7, r9, sl, lr, pc}

08010e20 <RDMDevice::Print()>:
 8010e20:	b513      	push	{r0, r1, r4, lr}
 8010e22:	4604      	mov	r4, r0
 8010e24:	4818      	ldr	r0, [pc, #96]	; (8010e88 <RDMDevice::Print()+0x68>)
 8010e26:	f7f9 fba1 	bl	800a56c <printf>
 8010e2a:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 8010e2e:	4817      	ldr	r0, [pc, #92]	; (8010e8c <RDMDevice::Print()+0x6c>)
 8010e30:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 8010e34:	f7f9 fb9a 	bl	800a56c <printf>
 8010e38:	7862      	ldrb	r2, [r4, #1]
 8010e3a:	7821      	ldrb	r1, [r4, #0]
 8010e3c:	4814      	ldr	r0, [pc, #80]	; (8010e90 <RDMDevice::Print()+0x70>)
 8010e3e:	f7f9 fb95 	bl	800a56c <printf>
 8010e42:	79a3      	ldrb	r3, [r4, #6]
 8010e44:	7a22      	ldrb	r2, [r4, #8]
 8010e46:	7a61      	ldrb	r1, [r4, #9]
 8010e48:	9300      	str	r3, [sp, #0]
 8010e4a:	4812      	ldr	r0, [pc, #72]	; (8010e94 <RDMDevice::Print()+0x74>)
 8010e4c:	79e3      	ldrb	r3, [r4, #7]
 8010e4e:	f7f9 fb8d 	bl	800a56c <printf>
 8010e52:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8010e56:	4810      	ldr	r0, [pc, #64]	; (8010e98 <RDMDevice::Print()+0x78>)
 8010e58:	f104 020a 	add.w	r2, r4, #10
 8010e5c:	f7f9 fb86 	bl	800a56c <printf>
 8010e60:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 8010e64:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8010e68:	480c      	ldr	r0, [pc, #48]	; (8010e9c <RDMDevice::Print()+0x7c>)
 8010e6a:	0a09      	lsrs	r1, r1, #8
 8010e6c:	f7f9 fb7e 	bl	800a56c <printf>
 8010e70:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8010e74:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 8010e78:	4809      	ldr	r0, [pc, #36]	; (8010ea0 <RDMDevice::Print()+0x80>)
 8010e7a:	0a09      	lsrs	r1, r1, #8
 8010e7c:	b002      	add	sp, #8
 8010e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e82:	f7f9 bb73 	b.w	800a56c <printf>
 8010e86:	bf00      	nop
 8010e88:	0801c5f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, sl, lr, pc}
 8010e8c:	0801c60a 	stmdaeq	r1, {r1, r3, r9, sl, lr, pc}
 8010e90:	0801c625 	stmdaeq	r1, {r0, r2, r5, r9, sl, lr, pc}
 8010e94:	0801c644 	stmdaeq	r1, {r2, r6, r9, sl, lr, pc}
 8010e98:	0801c66b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, sl, lr, pc}
 8010e9c:	0801c686 	stmdaeq	r1, {r1, r2, r7, r9, sl, lr, pc}
 8010ea0:	0801c6a5 	stmdaeq	r1, {r0, r2, r5, r7, r9, sl, lr, pc}

08010ea4 <uuid_unparse_x>:
 8010ea4:	b530      	push	{r4, r5, lr}
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	4608      	mov	r0, r1
 8010eaa:	4611      	mov	r1, r2
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	891c      	ldrh	r4, [r3, #8]
 8010eb0:	b08f      	sub	sp, #60	; 0x3c
 8010eb2:	ba12      	rev	r2, r2
 8010eb4:	920a      	str	r2, [sp, #40]	; 0x28
 8010eb6:	889a      	ldrh	r2, [r3, #4]
 8010eb8:	ba52      	rev16	r2, r2
 8010eba:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8010ebe:	88da      	ldrh	r2, [r3, #6]
 8010ec0:	ba64      	rev16	r4, r4
 8010ec2:	ba52      	rev16	r2, r2
 8010ec4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8010ec8:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 8010ecc:	f103 020a 	add.w	r2, r3, #10
 8010ed0:	f10d 0431 	add.w	r4, sp, #49	; 0x31
 8010ed4:	3310      	adds	r3, #16
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d122      	bne.n	8010f20 <uuid_unparse_x+0x7c>
 8010eda:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8010ede:	9208      	str	r2, [sp, #32]
 8010ee0:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 8010ee4:	9207      	str	r2, [sp, #28]
 8010ee6:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8010eea:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8010eee:	9206      	str	r2, [sp, #24]
 8010ef0:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8010ef4:	9205      	str	r2, [sp, #20]
 8010ef6:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8010efa:	9204      	str	r2, [sp, #16]
 8010efc:	0a1b      	lsrs	r3, r3, #8
 8010efe:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8010f02:	9203      	str	r2, [sp, #12]
 8010f04:	9301      	str	r3, [sp, #4]
 8010f06:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8010f0a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8010f0e:	9202      	str	r2, [sp, #8]
 8010f10:	9300      	str	r3, [sp, #0]
 8010f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f14:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8010f18:	f7f9 fb38 	bl	800a58c <sprintf>
 8010f1c:	b00f      	add	sp, #60	; 0x3c
 8010f1e:	bd30      	pop	{r4, r5, pc}
 8010f20:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010f24:	f804 5f01 	strb.w	r5, [r4, #1]!
 8010f28:	e7d5      	b.n	8010ed6 <uuid_unparse_x+0x32>
	...

08010f2c <uuid_unparse>:
 8010f2c:	4a01      	ldr	r2, [pc, #4]	; (8010f34 <uuid_unparse+0x8>)
 8010f2e:	f7ff bfb9 	b.w	8010ea4 <uuid_unparse_x>
 8010f32:	bf00      	nop
 8010f34:	0801c6f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r9, sl, lr, pc}

08010f38 <DmxSend::~DmxSend()>:
 8010f38:	4770      	bx	lr
	...

08010f3c <DmxSend::Start(unsigned int)>:
 8010f3c:	b430      	push	{r4, r5}
 8010f3e:	4c09      	ldr	r4, [pc, #36]	; (8010f64 <DmxSend::Start(unsigned int)+0x28>)
 8010f40:	2301      	movs	r3, #1
 8010f42:	7822      	ldrb	r2, [r4, #0]
 8010f44:	fa03 f001 	lsl.w	r0, r3, r1
 8010f48:	ea30 0502 	bics.w	r5, r0, r2
 8010f4c:	d007      	beq.n	8010f5e <DmxSend::Start(unsigned int)+0x22>
 8010f4e:	4302      	orrs	r2, r0
 8010f50:	4805      	ldr	r0, [pc, #20]	; (8010f68 <DmxSend::Start(unsigned int)+0x2c>)
 8010f52:	7022      	strb	r2, [r4, #0]
 8010f54:	6800      	ldr	r0, [r0, #0]
 8010f56:	bc30      	pop	{r4, r5}
 8010f58:	2200      	movs	r2, #0
 8010f5a:	f000 bd0d 	b.w	8011978 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8010f5e:	bc30      	pop	{r4, r5}
 8010f60:	4770      	bx	lr
 8010f62:	bf00      	nop
 8010f64:	20000820 	andcs	r0, r0, r0, lsr #16
 8010f68:	20001078 	andcs	r1, r0, r8, ror r0

08010f6c <DmxSend::Stop(unsigned int)>:
 8010f6c:	b410      	push	{r4}
 8010f6e:	480b      	ldr	r0, [pc, #44]	; (8010f9c <DmxSend::Stop(unsigned int)+0x30>)
 8010f70:	2201      	movs	r2, #1
 8010f72:	7803      	ldrb	r3, [r0, #0]
 8010f74:	408a      	lsls	r2, r1
 8010f76:	ea03 0402 	and.w	r4, r3, r2
 8010f7a:	439a      	bics	r2, r3
 8010f7c:	d10a      	bne.n	8010f94 <DmxSend::Stop(unsigned int)+0x28>
 8010f7e:	ea23 0304 	bic.w	r3, r3, r4
 8010f82:	7003      	strb	r3, [r0, #0]
 8010f84:	4806      	ldr	r0, [pc, #24]	; (8010fa0 <DmxSend::Stop(unsigned int)+0x34>)
 8010f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f8a:	6800      	ldr	r0, [r0, #0]
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	461a      	mov	r2, r3
 8010f90:	f000 bcf2 	b.w	8011978 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8010f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f98:	4770      	bx	lr
 8010f9a:	bf00      	nop
 8010f9c:	20000820 	andcs	r0, r0, r0, lsr #16
 8010fa0:	20001078 	andcs	r1, r0, r8, ror r0

08010fa4 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8010fa4:	b11b      	cbz	r3, 8010fae <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xa>
 8010fa6:	4802      	ldr	r0, [pc, #8]	; (8010fb0 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xc>)
 8010fa8:	6800      	ldr	r0, [r0, #0]
 8010faa:	f000 be27 	b.w	8011bfc <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>
 8010fae:	4770      	bx	lr
 8010fb0:	20001078 	andcs	r1, r0, r8, ror r0

08010fb4 <DmxSend::Blackout(bool)>:
 8010fb4:	4b01      	ldr	r3, [pc, #4]	; (8010fbc <DmxSend::Blackout(bool)+0x8>)
 8010fb6:	6818      	ldr	r0, [r3, #0]
 8010fb8:	f000 be46 	b.w	8011c48 <Dmx::Blackout()>
 8010fbc:	20001078 	andcs	r1, r0, r8, ror r0

08010fc0 <DmxSend::FullOn()>:
 8010fc0:	4b01      	ldr	r3, [pc, #4]	; (8010fc8 <DmxSend::FullOn()+0x8>)
 8010fc2:	6818      	ldr	r0, [r3, #0]
 8010fc4:	f000 be84 	b.w	8011cd0 <Dmx::FullOn()>
 8010fc8:	20001078 	andcs	r1, r0, r8, ror r0

08010fcc <DmxSend::Print()>:
 8010fcc:	b510      	push	{r4, lr}
 8010fce:	4c0e      	ldr	r4, [pc, #56]	; (8011008 <DmxSend::Print()+0x3c>)
 8010fd0:	480e      	ldr	r0, [pc, #56]	; (801100c <DmxSend::Print()+0x40>)
 8010fd2:	f7f9 facb 	bl	800a56c <printf>
 8010fd6:	6823      	ldr	r3, [r4, #0]
 8010fd8:	480d      	ldr	r0, [pc, #52]	; (8011010 <DmxSend::Print()+0x44>)
 8010fda:	6819      	ldr	r1, [r3, #0]
 8010fdc:	f7f9 fac6 	bl	800a56c <printf>
 8010fe0:	6823      	ldr	r3, [r4, #0]
 8010fe2:	480c      	ldr	r0, [pc, #48]	; (8011014 <DmxSend::Print()+0x48>)
 8010fe4:	6859      	ldr	r1, [r3, #4]
 8010fe6:	f7f9 fac1 	bl	800a56c <printf>
 8010fea:	6823      	ldr	r3, [r4, #0]
 8010fec:	490a      	ldr	r1, [pc, #40]	; (8011018 <DmxSend::Print()+0x4c>)
 8010fee:	689b      	ldr	r3, [r3, #8]
 8010ff0:	480a      	ldr	r0, [pc, #40]	; (801101c <DmxSend::Print()+0x50>)
 8010ff2:	fbb1 f1f3 	udiv	r1, r1, r3
 8010ff6:	f7f9 fab9 	bl	800a56c <printf>
 8010ffa:	6823      	ldr	r3, [r4, #0]
 8010ffc:	4808      	ldr	r0, [pc, #32]	; (8011020 <DmxSend::Print()+0x54>)
 8010ffe:	8a19      	ldrh	r1, [r3, #16]
 8011000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011004:	f7f9 bab2 	b.w	800a56c <printf>
 8011008:	20001078 	andcs	r1, r0, r8, ror r0
 801100c:	0801c729 	stmdaeq	r1, {r0, r3, r5, r8, r9, sl, lr, pc}
 8011010:	0801c733 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, sl, lr, pc}
 8011014:	0801c747 	stmdaeq	r1, {r0, r1, r2, r6, r8, r9, sl, lr, pc}
 8011018:	000f4240 	andeq	r4, pc, r0, asr #4
 801101c:	0801c75b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, sl, lr, pc}
 8011020:	0801c76f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, r9, sl, lr, pc}

08011024 <DmxSend::~DmxSend()>:
 8011024:	b510      	push	{r4, lr}
 8011026:	4604      	mov	r4, r0
 8011028:	f007 f970 	bl	801830c <operator delete(void*)>
 801102c:	4620      	mov	r0, r4
 801102e:	bd10      	pop	{r4, pc}

08011030 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 8011030:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011032:	88c6      	ldrh	r6, [r0, #6]
 8011034:	8885      	ldrh	r5, [r0, #4]
 8011036:	42ae      	cmp	r6, r5
 8011038:	d216      	bcs.n	8011068 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 801103a:	4604      	mov	r4, r0
 801103c:	6800      	ldr	r0, [r0, #0]
 801103e:	1bad      	subs	r5, r5, r6
 8011040:	4430      	add	r0, r6
 8011042:	7a26      	ldrb	r6, [r4, #8]
 8011044:	b923      	cbnz	r3, 8011050 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 8011046:	b926      	cbnz	r6, 8011052 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 8011048:	9200      	str	r2, [sp, #0]
 801104a:	460b      	mov	r3, r1
 801104c:	4a09      	ldr	r2, [pc, #36]	; (8011074 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 801104e:	e003      	b.n	8011058 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 8011050:	b166      	cbz	r6, 801106c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 8011052:	9200      	str	r2, [sp, #0]
 8011054:	4a08      	ldr	r2, [pc, #32]	; (8011078 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 8011056:	460b      	mov	r3, r1
 8011058:	4629      	mov	r1, r5
 801105a:	f7f9 faaf 	bl	800a5bc <snprintf>
 801105e:	4285      	cmp	r5, r0
 8011060:	bfa2      	ittt	ge
 8011062:	88e3      	ldrhge	r3, [r4, #6]
 8011064:	181b      	addge	r3, r3, r0
 8011066:	80e3      	strhge	r3, [r4, #6]
 8011068:	b002      	add	sp, #8
 801106a:	bd70      	pop	{r4, r5, r6, pc}
 801106c:	9200      	str	r2, [sp, #0]
 801106e:	460b      	mov	r3, r1
 8011070:	4a02      	ldr	r2, [pc, #8]	; (801107c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011072:	e7f1      	b.n	8011058 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 8011074:	0801aff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8011078:	0801afec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 801107c:	0801aff6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}

08011080 <DmxParams::DmxParams(DmxParamsStore*)>:
 8011080:	4a04      	ldr	r2, [pc, #16]	; (8011094 <DmxParams::DmxParams(DmxParamsStore*)+0x14>)
 8011082:	6001      	str	r1, [r0, #0]
 8011084:	2100      	movs	r1, #0
 8011086:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801108a:	f64f 7228 	movw	r2, #65320	; 0xff28
 801108e:	8182      	strh	r2, [r0, #12]
 8011090:	4770      	bx	lr
 8011092:	bf00      	nop
 8011094:	000c00b0 	strheq	r0, [ip], -r0	; <UNPREDICTABLE>

08011098 <DmxParams::Load()>:
 8011098:	b508      	push	{r3, lr}
 801109a:	2300      	movs	r3, #0
 801109c:	4601      	mov	r1, r0
 801109e:	6043      	str	r3, [r0, #4]
 80110a0:	6800      	ldr	r0, [r0, #0]
 80110a2:	b120      	cbz	r0, 80110ae <DmxParams::Load()+0x16>
 80110a4:	6803      	ldr	r3, [r0, #0]
 80110a6:	3104      	adds	r1, #4
 80110a8:	68db      	ldr	r3, [r3, #12]
 80110aa:	4798      	blx	r3
 80110ac:	2001      	movs	r0, #1
 80110ae:	bd08      	pop	{r3, pc}

080110b0 <DmxParams::Load(char const*, unsigned int)>:
 80110b0:	6803      	ldr	r3, [r0, #0]
 80110b2:	b1d3      	cbz	r3, 80110ea <DmxParams::Load(char const*, unsigned int)+0x3a>
 80110b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80110b6:	2300      	movs	r3, #0
 80110b8:	6043      	str	r3, [r0, #4]
 80110ba:	4604      	mov	r4, r0
 80110bc:	460d      	mov	r5, r1
 80110be:	4616      	mov	r6, r2
 80110c0:	490a      	ldr	r1, [pc, #40]	; (80110ec <DmxParams::Load(char const*, unsigned int)+0x3c>)
 80110c2:	4602      	mov	r2, r0
 80110c4:	4668      	mov	r0, sp
 80110c6:	f006 fb51 	bl	801776c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 80110ca:	4632      	mov	r2, r6
 80110cc:	4629      	mov	r1, r5
 80110ce:	4668      	mov	r0, sp
 80110d0:	f006 fb50 	bl	8017774 <ReadConfigFile::Read(char const*, unsigned int)>
 80110d4:	4621      	mov	r1, r4
 80110d6:	f851 0b04 	ldr.w	r0, [r1], #4
 80110da:	6803      	ldr	r3, [r0, #0]
 80110dc:	689b      	ldr	r3, [r3, #8]
 80110de:	4798      	blx	r3
 80110e0:	4668      	mov	r0, sp
 80110e2:	f006 fb46 	bl	8017772 <ReadConfigFile::~ReadConfigFile()>
 80110e6:	b002      	add	sp, #8
 80110e8:	bd70      	pop	{r4, r5, r6, pc}
 80110ea:	4770      	bx	lr
 80110ec:	080111bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, ip}

080110f0 <DmxParams::callbackFunction(char const*)>:
 80110f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80110f2:	460d      	mov	r5, r1
 80110f4:	4604      	mov	r4, r0
 80110f6:	492d      	ldr	r1, [pc, #180]	; (80111ac <DmxParams::callbackFunction(char const*)+0xbc>)
 80110f8:	f10d 0206 	add.w	r2, sp, #6
 80110fc:	4628      	mov	r0, r5
 80110fe:	f006 fc22 	bl	8017946 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 8011102:	b988      	cbnz	r0, 8011128 <DmxParams::callbackFunction(char const*)+0x38>
 8011104:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011108:	6863      	ldr	r3, [r4, #4]
 801110a:	2a5b      	cmp	r2, #91	; 0x5b
 801110c:	d907      	bls.n	801111e <DmxParams::callbackFunction(char const*)+0x2e>
 801110e:	2ab0      	cmp	r2, #176	; 0xb0
 8011110:	d005      	beq.n	801111e <DmxParams::callbackFunction(char const*)+0x2e>
 8011112:	8122      	strh	r2, [r4, #8]
 8011114:	f043 0301 	orr.w	r3, r3, #1
 8011118:	6063      	str	r3, [r4, #4]
 801111a:	b003      	add	sp, #12
 801111c:	bd30      	pop	{r4, r5, pc}
 801111e:	22b0      	movs	r2, #176	; 0xb0
 8011120:	8122      	strh	r2, [r4, #8]
 8011122:	f023 0301 	bic.w	r3, r3, #1
 8011126:	e7f7      	b.n	8011118 <DmxParams::callbackFunction(char const*)+0x28>
 8011128:	4921      	ldr	r1, [pc, #132]	; (80111b0 <DmxParams::callbackFunction(char const*)+0xc0>)
 801112a:	f10d 0206 	add.w	r2, sp, #6
 801112e:	4628      	mov	r0, r5
 8011130:	f006 fc09 	bl	8017946 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 8011134:	b968      	cbnz	r0, 8011152 <DmxParams::callbackFunction(char const*)+0x62>
 8011136:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801113a:	6863      	ldr	r3, [r4, #4]
 801113c:	2a0c      	cmp	r2, #12
 801113e:	bf93      	iteet	ls
 8011140:	220c      	movls	r2, #12
 8011142:	8162      	strhhi	r2, [r4, #10]
 8011144:	f043 0302 	orrhi.w	r3, r3, #2
 8011148:	8162      	strhls	r2, [r4, #10]
 801114a:	bf98      	it	ls
 801114c:	f023 0302 	bicls.w	r3, r3, #2
 8011150:	e7e2      	b.n	8011118 <DmxParams::callbackFunction(char const*)+0x28>
 8011152:	4918      	ldr	r1, [pc, #96]	; (80111b4 <DmxParams::callbackFunction(char const*)+0xc4>)
 8011154:	f10d 0205 	add.w	r2, sp, #5
 8011158:	4628      	mov	r0, r5
 801115a:	f006 fc3c 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801115e:	b950      	cbnz	r0, 8011176 <DmxParams::callbackFunction(char const*)+0x86>
 8011160:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011164:	6863      	ldr	r3, [r4, #4]
 8011166:	7322      	strb	r2, [r4, #12]
 8011168:	2a28      	cmp	r2, #40	; 0x28
 801116a:	bf14      	ite	ne
 801116c:	f043 0304 	orrne.w	r3, r3, #4
 8011170:	f023 0304 	biceq.w	r3, r3, #4
 8011174:	e7d0      	b.n	8011118 <DmxParams::callbackFunction(char const*)+0x28>
 8011176:	4910      	ldr	r1, [pc, #64]	; (80111b8 <DmxParams::callbackFunction(char const*)+0xc8>)
 8011178:	f10d 0206 	add.w	r2, sp, #6
 801117c:	4628      	mov	r0, r5
 801117e:	f006 fbe2 	bl	8017946 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 8011182:	2800      	cmp	r0, #0
 8011184:	d1c9      	bne.n	801111a <DmxParams::callbackFunction(char const*)+0x2a>
 8011186:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801118a:	6863      	ldr	r3, [r4, #4]
 801118c:	1e91      	subs	r1, r2, #2
 801118e:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 8011192:	bf3b      	ittet	cc
 8011194:	0852      	lsrcc	r2, r2, #1
 8011196:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 801119a:	22ff      	movcs	r2, #255	; 0xff
 801119c:	7362      	strbcc	r2, [r4, #13]
 801119e:	bf32      	itee	cc
 80111a0:	f043 0308 	orrcc.w	r3, r3, #8
 80111a4:	7362      	strbcs	r2, [r4, #13]
 80111a6:	f023 0308 	biccs.w	r3, r3, #8
 80111aa:	e7b5      	b.n	8011118 <DmxParams::callbackFunction(char const*)+0x28>
 80111ac:	0801c7bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, r9, sl, lr, pc}
 80111b0:	0801c7e0 	stmdaeq	r1, {r5, r6, r7, r8, r9, sl, lr, pc}
 80111b4:	0801c7d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, r9, sl, lr, pc}
 80111b8:	0801c7c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, r9, sl, lr, pc}

080111bc <DmxParams::staticCallbackFunction(void*, char const*)>:
 80111bc:	f7ff bf98 	b.w	80110f0 <DmxParams::callbackFunction(char const*)>

080111c0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>:
 80111c0:	b570      	push	{r4, r5, r6, lr}
 80111c2:	4604      	mov	r4, r0
 80111c4:	b086      	sub	sp, #24
 80111c6:	4615      	mov	r5, r2
 80111c8:	461e      	mov	r6, r3
 80111ca:	3004      	adds	r0, #4
 80111cc:	b369      	cbz	r1, 801122a <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x6a>
 80111ce:	220a      	movs	r2, #10
 80111d0:	f007 f95f 	bl	8018492 <memmove>
 80111d4:	462a      	mov	r2, r5
 80111d6:	4933      	ldr	r1, [pc, #204]	; (80112a4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe4>)
 80111d8:	4633      	mov	r3, r6
 80111da:	a803      	add	r0, sp, #12
 80111dc:	f006 fa26 	bl	801762c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80111e0:	6863      	ldr	r3, [r4, #4]
 80111e2:	8922      	ldrh	r2, [r4, #8]
 80111e4:	4930      	ldr	r1, [pc, #192]	; (80112a8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe8>)
 80111e6:	f003 0301 	and.w	r3, r3, #1
 80111ea:	a803      	add	r0, sp, #12
 80111ec:	f7ff ff20 	bl	8011030 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 80111f0:	6863      	ldr	r3, [r4, #4]
 80111f2:	8962      	ldrh	r2, [r4, #10]
 80111f4:	492d      	ldr	r1, [pc, #180]	; (80112ac <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xec>)
 80111f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80111fa:	a803      	add	r0, sp, #12
 80111fc:	f7ff ff18 	bl	8011030 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 8011200:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011204:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8011208:	7b23      	ldrb	r3, [r4, #12]
 801120a:	6861      	ldr	r1, [r4, #4]
 801120c:	42aa      	cmp	r2, r5
 801120e:	d221      	bcs.n	8011254 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x94>
 8011210:	9803      	ldr	r0, [sp, #12]
 8011212:	0749      	lsls	r1, r1, #29
 8011214:	4410      	add	r0, r2
 8011216:	eba5 0502 	sub.w	r5, r5, r2
 801121a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801121e:	d40b      	bmi.n	8011238 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x78>
 8011220:	b95a      	cbnz	r2, 801123a <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x7a>
 8011222:	9300      	str	r3, [sp, #0]
 8011224:	4a22      	ldr	r2, [pc, #136]	; (80112b0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 8011226:	4b23      	ldr	r3, [pc, #140]	; (80112b4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 8011228:	e00a      	b.n	8011240 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 801122a:	6823      	ldr	r3, [r4, #0]
 801122c:	681a      	ldr	r2, [r3, #0]
 801122e:	4601      	mov	r1, r0
 8011230:	68d2      	ldr	r2, [r2, #12]
 8011232:	4618      	mov	r0, r3
 8011234:	4790      	blx	r2
 8011236:	e7cd      	b.n	80111d4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x14>
 8011238:	b37a      	cbz	r2, 801129a <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xda>
 801123a:	9300      	str	r3, [sp, #0]
 801123c:	4a1e      	ldr	r2, [pc, #120]	; (80112b8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 801123e:	4b1d      	ldr	r3, [pc, #116]	; (80112b4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 8011240:	4629      	mov	r1, r5
 8011242:	f7f9 f9bb 	bl	800a5bc <snprintf>
 8011246:	4285      	cmp	r5, r0
 8011248:	bfa2      	ittt	ge
 801124a:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 801124e:	18c0      	addge	r0, r0, r3
 8011250:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8011254:	7b62      	ldrb	r2, [r4, #13]
 8011256:	6863      	ldr	r3, [r4, #4]
 8011258:	4918      	ldr	r1, [pc, #96]	; (80112bc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 801125a:	3201      	adds	r2, #1
 801125c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011260:	0052      	lsls	r2, r2, #1
 8011262:	a803      	add	r0, sp, #12
 8011264:	f7ff fee4 	bl	8011030 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 8011268:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801126c:	b17b      	cbz	r3, 801128e <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xce>
 801126e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011272:	9b03      	ldr	r3, [sp, #12]
 8011274:	4413      	add	r3, r2
 8011276:	227d      	movs	r2, #125	; 0x7d
 8011278:	f803 2c01 	strb.w	r2, [r3, #-1]
 801127c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011280:	9903      	ldr	r1, [sp, #12]
 8011282:	54ca      	strb	r2, [r1, r3]
 8011284:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011288:	3301      	adds	r3, #1
 801128a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801128e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011294:	601a      	str	r2, [r3, #0]
 8011296:	b006      	add	sp, #24
 8011298:	bd70      	pop	{r4, r5, r6, pc}
 801129a:	9300      	str	r3, [sp, #0]
 801129c:	4a08      	ldr	r2, [pc, #32]	; (80112c0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x100>)
 801129e:	4b05      	ldr	r3, [pc, #20]	; (80112b4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 80112a0:	e7ce      	b.n	8011240 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 80112a2:	bf00      	nop
 80112a4:	0801c7e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, lr, pc}
 80112a8:	0801c7bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, r9, sl, lr, pc}
 80112ac:	0801c7e0 	stmdaeq	r1, {r5, r6, r7, r8, r9, sl, lr, pc}
 80112b0:	0801aff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 80112b4:	0801c7d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, r9, sl, lr, pc}
 80112b8:	0801afec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 80112bc:	0801c7c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, r9, sl, lr, pc}
 80112c0:	0801aff6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}

080112c4 <DmxParams::Save(char*, unsigned int, unsigned int&)>:
 80112c4:	b513      	push	{r0, r1, r4, lr}
 80112c6:	6804      	ldr	r4, [r0, #0]
 80112c8:	b914      	cbnz	r4, 80112d0 <DmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80112ca:	601c      	str	r4, [r3, #0]
 80112cc:	b002      	add	sp, #8
 80112ce:	bd10      	pop	{r4, pc}
 80112d0:	9300      	str	r3, [sp, #0]
 80112d2:	4613      	mov	r3, r2
 80112d4:	460a      	mov	r2, r1
 80112d6:	2100      	movs	r1, #0
 80112d8:	f7ff ff72 	bl	80111c0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>
 80112dc:	e7f6      	b.n	80112cc <DmxParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

080112e0 <DmxParams::Set(Dmx*)>:
 80112e0:	b513      	push	{r0, r1, r4, lr}
 80112e2:	4604      	mov	r4, r0
 80112e4:	4608      	mov	r0, r1
 80112e6:	6863      	ldr	r3, [r4, #4]
 80112e8:	07db      	lsls	r3, r3, #31
 80112ea:	d504      	bpl.n	80112f6 <DmxParams::Set(Dmx*)+0x16>
 80112ec:	8921      	ldrh	r1, [r4, #8]
 80112ee:	9001      	str	r0, [sp, #4]
 80112f0:	f000 fc5a 	bl	8011ba8 <Dmx::SetDmxBreakTime(unsigned int)>
 80112f4:	9801      	ldr	r0, [sp, #4]
 80112f6:	6863      	ldr	r3, [r4, #4]
 80112f8:	0799      	lsls	r1, r3, #30
 80112fa:	d504      	bpl.n	8011306 <DmxParams::Set(Dmx*)+0x26>
 80112fc:	8961      	ldrh	r1, [r4, #10]
 80112fe:	9001      	str	r0, [sp, #4]
 8011300:	f000 fc5c 	bl	8011bbc <Dmx::SetDmxMabTime(unsigned int)>
 8011304:	9801      	ldr	r0, [sp, #4]
 8011306:	6863      	ldr	r3, [r4, #4]
 8011308:	075a      	lsls	r2, r3, #29
 801130a:	d508      	bpl.n	801131e <DmxParams::Set(Dmx*)+0x3e>
 801130c:	7b21      	ldrb	r1, [r4, #12]
 801130e:	b111      	cbz	r1, 8011316 <DmxParams::Set(Dmx*)+0x36>
 8011310:	4b09      	ldr	r3, [pc, #36]	; (8011338 <DmxParams::Set(Dmx*)+0x58>)
 8011312:	fbb3 f1f1 	udiv	r1, r3, r1
 8011316:	9001      	str	r0, [sp, #4]
 8011318:	f000 fc1e 	bl	8011b58 <Dmx::SetDmxPeriodTime(unsigned int)>
 801131c:	9801      	ldr	r0, [sp, #4]
 801131e:	6863      	ldr	r3, [r4, #4]
 8011320:	071b      	lsls	r3, r3, #28
 8011322:	d507      	bpl.n	8011334 <DmxParams::Set(Dmx*)+0x54>
 8011324:	7b61      	ldrb	r1, [r4, #13]
 8011326:	3101      	adds	r1, #1
 8011328:	0049      	lsls	r1, r1, #1
 801132a:	b002      	add	sp, #8
 801132c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011330:	f000 bc4e 	b.w	8011bd0 <Dmx::SetDmxSlots(unsigned short)>
 8011334:	b002      	add	sp, #8
 8011336:	bd10      	pop	{r4, pc}
 8011338:	000f4240 	andeq	r4, pc, r0, asr #4

0801133c <DmxParams::Dump()>:
 801133c:	4770      	bx	lr

0801133e <_gpio_mode_output(unsigned int, unsigned int)>:
 801133e:	b513      	push	{r0, r1, r4, lr}
 8011340:	460a      	mov	r2, r1
 8011342:	9101      	str	r1, [sp, #4]
 8011344:	2100      	movs	r1, #0
 8011346:	4604      	mov	r4, r0
 8011348:	f007 fbff 	bl	8018b4a <gpio_af_set>
 801134c:	9b01      	ldr	r3, [sp, #4]
 801134e:	2200      	movs	r2, #0
 8011350:	2101      	movs	r1, #1
 8011352:	4620      	mov	r0, r4
 8011354:	b002      	add	sp, #8
 8011356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801135a:	f007 bbbb 	b.w	8018ad4 <gpio_mode_set>
	...

08011360 <_port_to_uart(unsigned int)>:
 8011360:	4a03      	ldr	r2, [pc, #12]	; (8011370 <_port_to_uart(unsigned int)+0x10>)
 8011362:	4b04      	ldr	r3, [pc, #16]	; (8011374 <_port_to_uart(unsigned int)+0x14>)
 8011364:	2800      	cmp	r0, #0
 8011366:	bf14      	ite	ne
 8011368:	4610      	movne	r0, r2
 801136a:	4618      	moveq	r0, r3
 801136c:	4770      	bx	lr
 801136e:	bf00      	nop
 8011370:	40011400 	andmi	r1, r1, r0, lsl #8
 8011374:	40004800 	andmi	r4, r0, r0, lsl #16

08011378 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)>:
 8011378:	b570      	push	{r4, r5, r6, lr}
 801137a:	f3bf 8f5f 	dmb	sy
 801137e:	4ba1      	ldr	r3, [pc, #644]	; (8011604 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x28c>)
 8011380:	2508      	movs	r5, #8
 8011382:	f8c3 5418 	str.w	r5, [r3, #1048]	; 0x418
 8011386:	6802      	ldr	r2, [r0, #0]
 8011388:	f012 0f02 	tst.w	r2, #2
 801138c:	4a9e      	ldr	r2, [pc, #632]	; (8011608 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x290>)
 801138e:	d017      	beq.n	80113c0 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x48>
 8011390:	6804      	ldr	r4, [r0, #0]
 8011392:	f024 0402 	bic.w	r4, r4, #2
 8011396:	6004      	str	r4, [r0, #0]
 8011398:	6840      	ldr	r0, [r0, #4]
 801139a:	f44f 7004 	mov.w	r0, #528	; 0x210
 801139e:	fb00 2201 	mla	r2, r0, r1, r2
 80113a2:	2100      	movs	r1, #0
 80113a4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80113a8:	2102      	movs	r1, #2
 80113aa:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
 80113ae:	2210      	movs	r2, #16
 80113b0:	f8c3 5428 	str.w	r5, [r3, #1064]	; 0x428
 80113b4:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80113b8:	2220      	movs	r2, #32
 80113ba:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80113be:	bd70      	pop	{r4, r5, r6, pc}
 80113c0:	f44f 7304 	mov.w	r3, #528	; 0x210
 80113c4:	fb03 2401 	mla	r4, r3, r1, r2
 80113c8:	6840      	ldr	r0, [r0, #4]
 80113ca:	f8d4 420c 	ldr.w	r4, [r4, #524]	; 0x20c
 80113ce:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80113d2:	2c0a      	cmp	r4, #10
 80113d4:	f200 810f 	bhi.w	80115f6 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x27e>
 80113d8:	e8df f014 	tbh	[pc, r4, lsl #1]
 80113dc:	010d000b 	tsteq	sp, fp
 80113e0:	010d001b 	tsteq	sp, fp, lsl r0
 80113e4:	00630049 	rsbeq	r0, r3, r9, asr #32
 80113e8:	00940082 	addseq	r0, r4, r2, lsl #1
 80113ec:	00d900c1 	sbcseq	r0, r9, r1, asr #1
 80113f0:	435900ef 	cmpmi	r9, #239	; 0xef
 80113f4:	1853      	adds	r3, r2, r1
 80113f6:	5450      	strb	r0, [r2, r1]
 80113f8:	2408      	movs	r4, #8
 80113fa:	2201      	movs	r2, #1
 80113fc:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 8011400:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 8011404:	4b7f      	ldr	r3, [pc, #508]	; (8011604 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x28c>)
 8011406:	2208      	movs	r2, #8
 8011408:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 801140c:	f3bf 8f5f 	dmb	sy
 8011410:	e7d5      	b.n	80113be <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x46>
 8011412:	b148      	cbz	r0, 8011428 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xb0>
 8011414:	28cc      	cmp	r0, #204	; 0xcc
 8011416:	f44f 7304 	mov.w	r3, #528	; 0x210
 801141a:	d01e      	beq.n	801145a <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xe2>
 801141c:	fb03 2301 	mla	r3, r3, r1, r2
 8011420:	2200      	movs	r2, #0
 8011422:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8011426:	e7ed      	b.n	8011404 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 8011428:	434b      	muls	r3, r1
 801142a:	18d4      	adds	r4, r2, r3
 801142c:	54d0      	strb	r0, [r2, r3]
 801142e:	2301      	movs	r3, #1
 8011430:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
 8011434:	4b75      	ldr	r3, [pc, #468]	; (801160c <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x294>)
 8011436:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801143a:	685a      	ldr	r2, [r3, #4]
 801143c:	3201      	adds	r2, #1
 801143e:	605a      	str	r2, [r3, #4]
 8011440:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011444:	f8d2 2424 	ldr.w	r2, [r2, #1060]	; 0x424
 8011448:	60da      	str	r2, [r3, #12]
 801144a:	2304      	movs	r3, #4
 801144c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 8011450:	4b6c      	ldr	r3, [pc, #432]	; (8011604 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x28c>)
 8011452:	2210      	movs	r2, #16
 8011454:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8011458:	e7d4      	b.n	8011404 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 801145a:	434b      	muls	r3, r1
 801145c:	18d1      	adds	r1, r2, r3
 801145e:	54d0      	strb	r0, [r2, r3]
 8011460:	4b6b      	ldr	r3, [pc, #428]	; (8011610 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x298>)
 8011462:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 8011466:	2305      	movs	r3, #5
 8011468:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
 801146c:	e7f0      	b.n	8011450 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xd8>
 801146e:	fb03 2101 	mla	r1, r3, r1, r2
 8011472:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 8011476:	b29a      	uxth	r2, r3
 8011478:	3301      	adds	r3, #1
 801147a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801147e:	bf81      	itttt	hi
 8011480:	f443 4300 	orrhi.w	r3, r3, #32768	; 0x8000
 8011484:	f8c1 3204 	strhi.w	r3, [r1, #516]	; 0x204
 8011488:	2300      	movhi	r3, #0
 801148a:	f8c1 320c 	strhi.w	r3, [r1, #524]	; 0x20c
 801148e:	bf88      	it	hi
 8011490:	4b5c      	ldrhi	r3, [pc, #368]	; (8011604 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x28c>)
 8011492:	5488      	strb	r0, [r1, r2]
 8011494:	bf8a      	itet	hi
 8011496:	2210      	movhi	r2, #16
 8011498:	f8c1 3204 	strls.w	r3, [r1, #516]	; 0x204
 801149c:	f8c3 2428 	strhi.w	r2, [r3, #1064]	; 0x428
 80114a0:	e7b0      	b.n	8011404 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 80114a2:	fb03 2301 	mla	r3, r3, r1, r2
 80114a6:	f8b3 5204 	ldrh.w	r5, [r3, #516]	; 0x204
 80114aa:	f8b3 6206 	ldrh.w	r6, [r3, #518]	; 0x206
 80114ae:	5558      	strb	r0, [r3, r5]
 80114b0:	1c6c      	adds	r4, r5, #1
 80114b2:	3d17      	subs	r5, #23
 80114b4:	b2a4      	uxth	r4, r4
 80114b6:	4430      	add	r0, r6
 80114b8:	2de7      	cmp	r5, #231	; 0xe7
 80114ba:	f8a3 4204 	strh.w	r4, [r3, #516]	; 0x204
 80114be:	f8a3 0206 	strh.w	r0, [r3, #518]	; 0x206
 80114c2:	d808      	bhi.n	80114d6 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x15e>
 80114c4:	7898      	ldrb	r0, [r3, #2]
 80114c6:	42a0      	cmp	r0, r4
 80114c8:	d105      	bne.n	80114d6 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x15e>
 80114ca:	2206      	movs	r2, #6
 80114cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80114d0:	4b4c      	ldr	r3, [pc, #304]	; (8011604 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x28c>)
 80114d2:	2220      	movs	r2, #32
 80114d4:	e7be      	b.n	8011454 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xdc>
 80114d6:	2cff      	cmp	r4, #255	; 0xff
 80114d8:	d994      	bls.n	8011404 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 80114da:	f44f 7304 	mov.w	r3, #528	; 0x210
 80114de:	e79d      	b.n	801141c <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xa4>
 80114e0:	fb03 2101 	mla	r1, r3, r1, r2
 80114e4:	f8b1 3204 	ldrh.w	r3, [r1, #516]	; 0x204
 80114e8:	54c8      	strb	r0, [r1, r3]
 80114ea:	3301      	adds	r3, #1
 80114ec:	f8a1 3204 	strh.w	r3, [r1, #516]	; 0x204
 80114f0:	f8b1 3206 	ldrh.w	r3, [r1, #518]	; 0x206
 80114f4:	eba3 2300 	sub.w	r3, r3, r0, lsl #8
 80114f8:	f8a1 3206 	strh.w	r3, [r1, #518]	; 0x206
 80114fc:	2307      	movs	r3, #7
 80114fe:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
 8011502:	e77f      	b.n	8011404 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 8011504:	4e3f      	ldr	r6, [pc, #252]	; (8011604 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x28c>)
 8011506:	2320      	movs	r3, #32
 8011508:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
 801150c:	f44f 7304 	mov.w	r3, #528	; 0x210
 8011510:	fb03 2301 	mla	r3, r3, r1, r2
 8011514:	f8b3 4204 	ldrh.w	r4, [r3, #516]	; 0x204
 8011518:	f8b3 5206 	ldrh.w	r5, [r3, #518]	; 0x206
 801151c:	5518      	strb	r0, [r3, r4]
 801151e:	3401      	adds	r4, #1
 8011520:	1a28      	subs	r0, r5, r0
 8011522:	b2a4      	uxth	r4, r4
 8011524:	b280      	uxth	r0, r0
 8011526:	f8a3 4204 	strh.w	r4, [r3, #516]	; 0x204
 801152a:	f8a3 0206 	strh.w	r0, [r3, #518]	; 0x206
 801152e:	b910      	cbnz	r0, 8011536 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x1be>
 8011530:	7858      	ldrb	r0, [r3, #1]
 8011532:	2801      	cmp	r0, #1
 8011534:	d007      	beq.n	8011546 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x1ce>
 8011536:	f44f 7304 	mov.w	r3, #528	; 0x210
 801153a:	fb03 2301 	mla	r3, r3, r1, r2
 801153e:	2000      	movs	r0, #0
 8011540:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8011544:	e7c9      	b.n	80114da <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x162>
 8011546:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 801154a:	f8a3 4204 	strh.w	r4, [r3, #516]	; 0x204
 801154e:	4b31      	ldr	r3, [pc, #196]	; (8011614 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x29c>)
 8011550:	6858      	ldr	r0, [r3, #4]
 8011552:	4b31      	ldr	r3, [pc, #196]	; (8011618 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2a0>)
 8011554:	6018      	str	r0, [r3, #0]
 8011556:	2310      	movs	r3, #16
 8011558:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
 801155c:	e7bd      	b.n	80114da <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x162>
 801155e:	fb03 2301 	mla	r3, r3, r1, r2
 8011562:	28aa      	cmp	r0, #170	; 0xaa
 8011564:	f8b3 4204 	ldrh.w	r4, [r3, #516]	; 0x204
 8011568:	5518      	strb	r0, [r3, r4]
 801156a:	f104 0401 	add.w	r4, r4, #1
 801156e:	b2a4      	uxth	r4, r4
 8011570:	f8a3 4204 	strh.w	r4, [r3, #516]	; 0x204
 8011574:	d002      	beq.n	801157c <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x204>
 8011576:	2c09      	cmp	r4, #9
 8011578:	f47f af44 	bne.w	8011404 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 801157c:	f44f 7304 	mov.w	r3, #528	; 0x210
 8011580:	fb03 2301 	mla	r3, r3, r1, r2
 8011584:	2200      	movs	r2, #0
 8011586:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 801158a:	2209      	movs	r2, #9
 801158c:	e749      	b.n	8011422 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xaa>
 801158e:	fb03 2101 	mla	r1, r3, r1, r2
 8011592:	f8b1 3204 	ldrh.w	r3, [r1, #516]	; 0x204
 8011596:	54c8      	strb	r0, [r1, r3]
 8011598:	3301      	adds	r3, #1
 801159a:	f8a1 3204 	strh.w	r3, [r1, #516]	; 0x204
 801159e:	f8b1 3208 	ldrh.w	r3, [r1, #520]	; 0x208
 80115a2:	3301      	adds	r3, #1
 80115a4:	b29b      	uxth	r3, r3
 80115a6:	2b0c      	cmp	r3, #12
 80115a8:	d002      	beq.n	80115b0 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x238>
 80115aa:	f8a1 3208 	strh.w	r3, [r1, #520]	; 0x208
 80115ae:	e729      	b.n	8011404 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 80115b0:	2300      	movs	r3, #0
 80115b2:	f8a1 3208 	strh.w	r3, [r1, #520]	; 0x208
 80115b6:	230a      	movs	r3, #10
 80115b8:	e7a1      	b.n	80114fe <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x186>
 80115ba:	fb03 2101 	mla	r1, r3, r1, r2
 80115be:	f8b1 2208 	ldrh.w	r2, [r1, #520]	; 0x208
 80115c2:	f8b1 3204 	ldrh.w	r3, [r1, #516]	; 0x204
 80115c6:	3201      	adds	r2, #1
 80115c8:	b292      	uxth	r2, r2
 80115ca:	54c8      	strb	r0, [r1, r3]
 80115cc:	3301      	adds	r3, #1
 80115ce:	b29b      	uxth	r3, r3
 80115d0:	2a04      	cmp	r2, #4
 80115d2:	f8a1 3204 	strh.w	r3, [r1, #516]	; 0x204
 80115d6:	f8a1 2208 	strh.w	r2, [r1, #520]	; 0x208
 80115da:	f47f af13 	bne.w	8011404 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 80115de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80115e2:	2200      	movs	r2, #0
 80115e4:	f8a1 3204 	strh.w	r3, [r1, #516]	; 0x204
 80115e8:	4b0a      	ldr	r3, [pc, #40]	; (8011614 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x29c>)
 80115ea:	f8c1 220c 	str.w	r2, [r1, #524]	; 0x20c
 80115ee:	685a      	ldr	r2, [r3, #4]
 80115f0:	4b09      	ldr	r3, [pc, #36]	; (8011618 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2a0>)
 80115f2:	601a      	str	r2, [r3, #0]
 80115f4:	e706      	b.n	8011404 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 80115f6:	fb03 2101 	mla	r1, r3, r1, r2
 80115fa:	2300      	movs	r3, #0
 80115fc:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 8011600:	e77d      	b.n	80114fe <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x186>
 8011602:	bf00      	nop
 8011604:	40020000 	andmi	r0, r2, r0
 8011608:	20000824 	andcs	r0, r0, r4, lsr #16
 801160c:	20001054 	andcs	r1, r0, r4, asr r0
 8011610:	00cc0001 	sbceq	r0, ip, r1
 8011614:	e0001000 	and	r1, r0, r0
 8011618:	2000107c 	andcs	r1, r0, ip, ror r0

0801161c <USART2_IRQHandler>:
 801161c:	4801      	ldr	r0, [pc, #4]	; (8011624 <USART2_IRQHandler+0x8>)
 801161e:	2100      	movs	r1, #0
 8011620:	f7ff beaa 	b.w	8011378 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)>
 8011624:	40004800 	andmi	r4, r0, r0, lsl #16

08011628 <USART5_IRQHandler>:
 8011628:	4801      	ldr	r0, [pc, #4]	; (8011630 <USART5_IRQHandler+0x8>)
 801162a:	2101      	movs	r1, #1
 801162c:	f7ff bea4 	b.w	8011378 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)>
 8011630:	40011400 	andmi	r1, r1, r0, lsl #8

08011634 <TIMER1_IRQHandler>:
 8011634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011636:	f3bf 8f5f 	dmb	sy
 801163a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801163e:	4d48      	ldr	r5, [pc, #288]	; (8011760 <TIMER1_IRQHandler+0x12c>)
 8011640:	691e      	ldr	r6, [r3, #16]
 8011642:	4f48      	ldr	r7, [pc, #288]	; (8011764 <TIMER1_IRQHandler+0x130>)
 8011644:	882c      	ldrh	r4, [r5, #0]
 8011646:	2308      	movs	r3, #8
 8011648:	07b1      	lsls	r1, r6, #30
 801164a:	b2a4      	uxth	r4, r4
 801164c:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8011650:	d52a      	bpl.n	80116a8 <TIMER1_IRQHandler+0x74>
 8011652:	07e2      	lsls	r2, r4, #31
 8011654:	d50d      	bpl.n	8011672 <TIMER1_IRQHandler+0x3e>
 8011656:	882b      	ldrh	r3, [r5, #0]
 8011658:	4843      	ldr	r0, [pc, #268]	; (8011768 <TIMER1_IRQHandler+0x134>)
 801165a:	b29b      	uxth	r3, r3
 801165c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011664:	802b      	strh	r3, [r5, #0]
 8011666:	f7ff fe6a 	bl	801133e <_gpio_mode_output(unsigned int, unsigned int)>
 801166a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801166e:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8011672:	07a3      	lsls	r3, r4, #30
 8011674:	d50c      	bpl.n	8011690 <TIMER1_IRQHandler+0x5c>
 8011676:	882b      	ldrh	r3, [r5, #0]
 8011678:	483c      	ldr	r0, [pc, #240]	; (801176c <TIMER1_IRQHandler+0x138>)
 801167a:	b29b      	uxth	r3, r3
 801167c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011680:	2140      	movs	r1, #64	; 0x40
 8011682:	802b      	strh	r3, [r5, #0]
 8011684:	f7ff fe5b 	bl	801133e <_gpio_mode_output(unsigned int, unsigned int)>
 8011688:	4b36      	ldr	r3, [pc, #216]	; (8011764 <TIMER1_IRQHandler+0x130>)
 801168a:	2240      	movs	r2, #64	; 0x40
 801168c:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 8011690:	4631      	mov	r1, r6
 8011692:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011696:	f007 fc36 	bl	8018f06 <timer_interrupt_flag_clear>
 801169a:	4b32      	ldr	r3, [pc, #200]	; (8011764 <TIMER1_IRQHandler+0x130>)
 801169c:	2208      	movs	r2, #8
 801169e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80116a2:	f3bf 8f5f 	dmb	sy
 80116a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116a8:	0777      	lsls	r7, r6, #29
 80116aa:	d51c      	bpl.n	80116e6 <TIMER1_IRQHandler+0xb2>
 80116ac:	05e5      	lsls	r5, r4, #23
 80116ae:	d50c      	bpl.n	80116ca <TIMER1_IRQHandler+0x96>
 80116b0:	482d      	ldr	r0, [pc, #180]	; (8011768 <TIMER1_IRQHandler+0x134>)
 80116b2:	2201      	movs	r2, #1
 80116b4:	2102      	movs	r1, #2
 80116b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116ba:	f007 fa0b 	bl	8018ad4 <gpio_mode_set>
 80116be:	482a      	ldr	r0, [pc, #168]	; (8011768 <TIMER1_IRQHandler+0x134>)
 80116c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80116c4:	2107      	movs	r1, #7
 80116c6:	f007 fa40 	bl	8018b4a <gpio_af_set>
 80116ca:	05a0      	lsls	r0, r4, #22
 80116cc:	d5e0      	bpl.n	8011690 <TIMER1_IRQHandler+0x5c>
 80116ce:	4827      	ldr	r0, [pc, #156]	; (801176c <TIMER1_IRQHandler+0x138>)
 80116d0:	2340      	movs	r3, #64	; 0x40
 80116d2:	2201      	movs	r2, #1
 80116d4:	2102      	movs	r1, #2
 80116d6:	f007 f9fd 	bl	8018ad4 <gpio_mode_set>
 80116da:	4824      	ldr	r0, [pc, #144]	; (801176c <TIMER1_IRQHandler+0x138>)
 80116dc:	2240      	movs	r2, #64	; 0x40
 80116de:	2108      	movs	r1, #8
 80116e0:	f007 fa33 	bl	8018b4a <gpio_af_set>
 80116e4:	e7d4      	b.n	8011690 <TIMER1_IRQHandler+0x5c>
 80116e6:	0731      	lsls	r1, r6, #28
 80116e8:	d5d2      	bpl.n	8011690 <TIMER1_IRQHandler+0x5c>
 80116ea:	05e2      	lsls	r2, r4, #23
 80116ec:	d516      	bpl.n	801171c <TIMER1_IRQHandler+0xe8>
 80116ee:	4d20      	ldr	r5, [pc, #128]	; (8011770 <TIMER1_IRQHandler+0x13c>)
 80116f0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80116f2:	f023 0301 	bic.w	r3, r3, #1
 80116f6:	65ab      	str	r3, [r5, #88]	; 0x58
 80116f8:	2103      	movs	r1, #3
 80116fa:	4628      	mov	r0, r5
 80116fc:	2220      	movs	r2, #32
 80116fe:	f007 f9ad 	bl	8018a5c <dma_interrupt_flag_clear>
 8011702:	4b1c      	ldr	r3, [pc, #112]	; (8011774 <TIMER1_IRQHandler+0x140>)
 8011704:	666b      	str	r3, [r5, #100]	; 0x64
 8011706:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 801170a:	65eb      	str	r3, [r5, #92]	; 0x5c
 801170c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 801170e:	481a      	ldr	r0, [pc, #104]	; (8011778 <TIMER1_IRQHandler+0x144>)
 8011710:	f043 0301 	orr.w	r3, r3, #1
 8011714:	65ab      	str	r3, [r5, #88]	; 0x58
 8011716:	2180      	movs	r1, #128	; 0x80
 8011718:	f007 fe3c 	bl	8019394 <usart_dma_transmit_config>
 801171c:	05a3      	lsls	r3, r4, #22
 801171e:	d5b7      	bpl.n	8011690 <TIMER1_IRQHandler+0x5c>
 8011720:	4c13      	ldr	r4, [pc, #76]	; (8011770 <TIMER1_IRQHandler+0x13c>)
 8011722:	4816      	ldr	r0, [pc, #88]	; (801177c <TIMER1_IRQHandler+0x148>)
 8011724:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 8011728:	f023 0301 	bic.w	r3, r3, #1
 801172c:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
 8011730:	2220      	movs	r2, #32
 8011732:	2106      	movs	r1, #6
 8011734:	f007 f992 	bl	8018a5c <dma_interrupt_flag_clear>
 8011738:	4b0e      	ldr	r3, [pc, #56]	; (8011774 <TIMER1_IRQHandler+0x140>)
 801173a:	4811      	ldr	r0, [pc, #68]	; (8011780 <TIMER1_IRQHandler+0x14c>)
 801173c:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8011740:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8011744:	f8c4 24ac 	str.w	r2, [r4, #1196]	; 0x4ac
 8011748:	f8c4 34a4 	str.w	r3, [r4, #1188]	; 0x4a4
 801174c:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 8011750:	f043 0301 	orr.w	r3, r3, #1
 8011754:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
 8011758:	2180      	movs	r1, #128	; 0x80
 801175a:	f007 fe1b 	bl	8019394 <usart_dma_transmit_config>
 801175e:	e797      	b.n	8011690 <TIMER1_IRQHandler+0x5c>
 8011760:	20001074 	andcs	r1, r0, r4, ror r0
 8011764:	40020000 	andmi	r0, r2, r0
 8011768:	40020c00 	andmi	r0, r2, r0, lsl #24
 801176c:	40020800 	andmi	r0, r2, r0, lsl #16
 8011770:	40026000 	andmi	r6, r2, r0
 8011774:	20000c44 	andcs	r0, r0, r4, asr #24
 8011778:	40004800 	andmi	r4, r0, r0, lsl #16
 801177c:	40026400 	andmi	r6, r2, r0, lsl #8
 8011780:	40011400 	andmi	r1, r1, r0, lsl #8

08011784 <Dmx::ClearData(unsigned int)>:
 8011784:	4a0a      	ldr	r2, [pc, #40]	; (80117b0 <Dmx::ClearData(unsigned int)+0x2c>)
 8011786:	f44f 7301 	mov.w	r3, #516	; 0x204
 801178a:	fb03 2301 	mla	r3, r3, r1, r2
 801178e:	b510      	push	{r4, lr}
 8011790:	f203 2002 	addw	r0, r3, #514	; 0x202
 8011794:	2400      	movs	r4, #0
 8011796:	f823 4b02 	strh.w	r4, [r3], #2
 801179a:	4283      	cmp	r3, r0
 801179c:	d1fb      	bne.n	8011796 <Dmx::ClearData(unsigned int)+0x12>
 801179e:	f44f 7301 	mov.w	r3, #516	; 0x204
 80117a2:	fb03 2101 	mla	r1, r3, r1, r2
 80117a6:	f240 2301 	movw	r3, #513	; 0x201
 80117aa:	f8a1 3202 	strh.w	r3, [r1, #514]	; 0x202
 80117ae:	bd10      	pop	{r4, pc}
 80117b0:	20000c44 	andcs	r0, r0, r4, asr #24

080117b4 <Dmx::StartData(unsigned int, unsigned int)>:
 80117b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117b6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80117ba:	b085      	sub	sp, #20
 80117bc:	6943      	ldr	r3, [r0, #20]
 80117be:	460c      	mov	r4, r1
 80117c0:	4615      	mov	r5, r2
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d168      	bne.n	8011898 <Dmx::StartData(unsigned int, unsigned int)+0xe4>
 80117c6:	4e41      	ldr	r6, [pc, #260]	; (80118cc <Dmx::StartData(unsigned int, unsigned int)+0x118>)
 80117c8:	8834      	ldrh	r4, [r6, #0]
 80117ca:	b2a4      	uxth	r4, r4
 80117cc:	2c00      	cmp	r4, #0
 80117ce:	d157      	bne.n	8011880 <Dmx::StartData(unsigned int, unsigned int)+0xcc>
 80117d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80117d4:	f007 f9fa 	bl	8018bcc <rcu_periph_clock_enable>
 80117d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80117dc:	f007 faa6 	bl	8018d2c <timer_deinit>
 80117e0:	4b3b      	ldr	r3, [pc, #236]	; (80118d0 <Dmx::StartData(unsigned int, unsigned int)+0x11c>)
 80117e2:	f88d 400c 	strb.w	r4, [sp, #12]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	9302      	str	r3, [sp, #8]
 80117ea:	4669      	mov	r1, sp
 80117ec:	23c7      	movs	r3, #199	; 0xc7
 80117ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80117f2:	e9cd 3400 	strd	r3, r4, [sp]
 80117f6:	f007 fb3f 	bl	8018e78 <timer_init>
 80117fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80117fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011802:	f007 fb83 	bl	8018f0c <timer_flag_clear>
 8011806:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801180a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801180e:	f007 fb7a 	bl	8018f06 <timer_interrupt_flag_clear>
 8011812:	2210      	movs	r2, #16
 8011814:	4621      	mov	r1, r4
 8011816:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801181a:	f007 fc67 	bl	80190ec <timer_channel_output_mode_config>
 801181e:	2210      	movs	r2, #16
 8011820:	2101      	movs	r1, #1
 8011822:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011826:	f007 fc61 	bl	80190ec <timer_channel_output_mode_config>
 801182a:	4f2a      	ldr	r7, [pc, #168]	; (80118d4 <Dmx::StartData(unsigned int, unsigned int)+0x120>)
 801182c:	2210      	movs	r2, #16
 801182e:	2102      	movs	r1, #2
 8011830:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011834:	f007 fc5a 	bl	80190ec <timer_channel_output_mode_config>
 8011838:	4622      	mov	r2, r4
 801183a:	4621      	mov	r1, r4
 801183c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011840:	f007 fc7a 	bl	8019138 <timer_channel_output_pulse_value_config>
 8011844:	683a      	ldr	r2, [r7, #0]
 8011846:	2101      	movs	r1, #1
 8011848:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801184c:	f007 fc74 	bl	8019138 <timer_channel_output_pulse_value_config>
 8011850:	4b21      	ldr	r3, [pc, #132]	; (80118d8 <Dmx::StartData(unsigned int, unsigned int)+0x124>)
 8011852:	683a      	ldr	r2, [r7, #0]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	2102      	movs	r1, #2
 8011858:	441a      	add	r2, r3
 801185a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801185e:	f007 fc6b 	bl	8019138 <timer_channel_output_pulse_value_config>
 8011862:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011866:	210e      	movs	r1, #14
 8011868:	f007 fb49 	bl	8018efe <timer_interrupt_enable>
 801186c:	4b1b      	ldr	r3, [pc, #108]	; (80118dc <Dmx::StartData(unsigned int, unsigned int)+0x128>)
 801186e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011872:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 8011876:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801187a:	601a      	str	r2, [r3, #0]
 801187c:	f007 fb3a 	bl	8018ef4 <timer_enable>
 8011880:	8831      	ldrh	r1, [r6, #0]
 8011882:	2201      	movs	r2, #1
 8011884:	fa02 f305 	lsl.w	r3, r2, r5
 8011888:	430b      	orrs	r3, r1
 801188a:	b29b      	uxth	r3, r3
 801188c:	8033      	strh	r3, [r6, #0]
 801188e:	4b14      	ldr	r3, [pc, #80]	; (80118e0 <Dmx::StartData(unsigned int, unsigned int)+0x12c>)
 8011890:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011894:	b005      	add	sp, #20
 8011896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011898:	4b12      	ldr	r3, [pc, #72]	; (80118e4 <Dmx::StartData(unsigned int, unsigned int)+0x130>)
 801189a:	f44f 7204 	mov.w	r2, #528	; 0x210
 801189e:	fb02 3305 	mla	r3, r2, r5, r3
 80118a2:	2200      	movs	r2, #0
 80118a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80118a8:	2107      	movs	r1, #7
 80118aa:	4620      	mov	r0, r4
 80118ac:	f007 fd78 	bl	80193a0 <usart_flag_get>
 80118b0:	2800      	cmp	r0, #0
 80118b2:	d0f9      	beq.n	80118a8 <Dmx::StartData(unsigned int, unsigned int)+0xf4>
 80118b4:	490c      	ldr	r1, [pc, #48]	; (80118e8 <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 80118b6:	4620      	mov	r0, r4
 80118b8:	f007 fd94 	bl	80193e4 <usart_interrupt_flag_clear>
 80118bc:	f240 3105 	movw	r1, #773	; 0x305
 80118c0:	4620      	mov	r0, r4
 80118c2:	f007 fd83 	bl	80193cc <usart_interrupt_enable>
 80118c6:	4b06      	ldr	r3, [pc, #24]	; (80118e0 <Dmx::StartData(unsigned int, unsigned int)+0x12c>)
 80118c8:	2202      	movs	r2, #2
 80118ca:	e7e1      	b.n	8011890 <Dmx::StartData(unsigned int, unsigned int)+0xdc>
 80118cc:	20001074 	andcs	r1, r0, r4, ror r0
 80118d0:	20000004 	andcs	r0, r0, r4
 80118d4:	2000000c 	andcs	r0, r0, ip
 80118d8:	20000008 	andcs	r0, r0, r8
 80118dc:	e000e100 	and	lr, r0, r0, lsl #2
 80118e0:	2000104c 	andcs	r1, r0, ip, asr #32
 80118e4:	20000824 	andcs	r0, r0, r4, lsr #16
 80118e8:	00050305 	andeq	r0, r5, r5, lsl #6

080118ec <Dmx::StopData(unsigned int, unsigned int)>:
 80118ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118f0:	4f1e      	ldr	r7, [pc, #120]	; (801196c <Dmx::StopData(unsigned int, unsigned int)+0x80>)
 80118f2:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 80118f6:	4688      	mov	r8, r1
 80118f8:	4614      	mov	r4, r2
 80118fa:	b333      	cbz	r3, 801194a <Dmx::StopData(unsigned int, unsigned int)+0x5e>
 80118fc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8011900:	6943      	ldr	r3, [r0, #20]
 8011902:	bb23      	cbnz	r3, 801194e <Dmx::StopData(unsigned int, unsigned int)+0x62>
 8011904:	4d1a      	ldr	r5, [pc, #104]	; (8011970 <Dmx::StopData(unsigned int, unsigned int)+0x84>)
 8011906:	882b      	ldrh	r3, [r5, #0]
 8011908:	2601      	movs	r6, #1
 801190a:	fa06 f202 	lsl.w	r2, r6, r2
 801190e:	b29b      	uxth	r3, r3
 8011910:	ea23 0302 	bic.w	r3, r3, r2
 8011914:	802b      	strh	r3, [r5, #0]
 8011916:	f3bf 8f5f 	dmb	sy
 801191a:	882b      	ldrh	r3, [r5, #0]
 801191c:	f104 0208 	add.w	r2, r4, #8
 8011920:	b29b      	uxth	r3, r3
 8011922:	4096      	lsls	r6, r2
 8011924:	ea36 0303 	bics.w	r3, r6, r3
 8011928:	d105      	bne.n	8011936 <Dmx::StopData(unsigned int, unsigned int)+0x4a>
 801192a:	2107      	movs	r1, #7
 801192c:	4640      	mov	r0, r8
 801192e:	f007 fd37 	bl	80193a0 <usart_flag_get>
 8011932:	2801      	cmp	r0, #1
 8011934:	d1f9      	bne.n	801192a <Dmx::StopData(unsigned int, unsigned int)+0x3e>
 8011936:	882b      	ldrh	r3, [r5, #0]
 8011938:	b29b      	uxth	r3, r3
 801193a:	ea23 0306 	bic.w	r3, r3, r6
 801193e:	802b      	strh	r3, [r5, #0]
 8011940:	f3bf 8f4f 	dsb	sy
 8011944:	2300      	movs	r3, #0
 8011946:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
 801194a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801194e:	f240 3105 	movw	r1, #773	; 0x305
 8011952:	4640      	mov	r0, r8
 8011954:	f007 fd44 	bl	80193e0 <usart_interrupt_disable>
 8011958:	4b06      	ldr	r3, [pc, #24]	; (8011974 <Dmx::StopData(unsigned int, unsigned int)+0x88>)
 801195a:	f44f 7204 	mov.w	r2, #528	; 0x210
 801195e:	fb02 3304 	mla	r3, r2, r4, r3
 8011962:	2200      	movs	r2, #0
 8011964:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8011968:	e7ec      	b.n	8011944 <Dmx::StopData(unsigned int, unsigned int)+0x58>
 801196a:	bf00      	nop
 801196c:	2000104c 	andcs	r1, r0, ip, asr #32
 8011970:	20001074 	andcs	r1, r0, r4, ror r0
 8011974:	20000824 	andcs	r0, r0, r4, lsr #16

08011978 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 8011978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801197a:	4605      	mov	r5, r0
 801197c:	460c      	mov	r4, r1
 801197e:	4608      	mov	r0, r1
 8011980:	4616      	mov	r6, r2
 8011982:	461f      	mov	r7, r3
 8011984:	f7ff fcec 	bl	8011360 <_port_to_uart(unsigned int)>
 8011988:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801198c:	4601      	mov	r1, r0
 801198e:	695a      	ldr	r2, [r3, #20]
 8011990:	42b2      	cmp	r2, r6
 8011992:	d01b      	beq.n	80119cc <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>
 8011994:	9001      	str	r0, [sp, #4]
 8011996:	615e      	str	r6, [r3, #20]
 8011998:	4622      	mov	r2, r4
 801199a:	4628      	mov	r0, r5
 801199c:	f7ff ffa6 	bl	80118ec <Dmx::StopData(unsigned int, unsigned int)>
 80119a0:	9901      	ldr	r1, [sp, #4]
 80119a2:	b94e      	cbnz	r6, 80119b8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x40>
 80119a4:	4b11      	ldr	r3, [pc, #68]	; (80119ec <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x74>)
 80119a6:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 80119aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	6193      	str	r3, [r2, #24]
 80119b2:	b967      	cbnz	r7, 80119ce <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x56>
 80119b4:	b003      	add	sp, #12
 80119b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119b8:	2e01      	cmp	r6, #1
 80119ba:	d1fa      	bne.n	80119b2 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 80119bc:	4b0b      	ldr	r3, [pc, #44]	; (80119ec <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x74>)
 80119be:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 80119c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80119c6:	685b      	ldr	r3, [r3, #4]
 80119c8:	6293      	str	r3, [r2, #40]	; 0x28
 80119ca:	e7f2      	b.n	80119b2 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 80119cc:	b137      	cbz	r7, 80119dc <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x64>
 80119ce:	4622      	mov	r2, r4
 80119d0:	4628      	mov	r0, r5
 80119d2:	b003      	add	sp, #12
 80119d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80119d8:	f7ff beec 	b.w	80117b4 <Dmx::StartData(unsigned int, unsigned int)>
 80119dc:	4622      	mov	r2, r4
 80119de:	4628      	mov	r0, r5
 80119e0:	b003      	add	sp, #12
 80119e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80119e6:	f7ff bf81 	b.w	80118ec <Dmx::StopData(unsigned int, unsigned int)>
 80119ea:	bf00      	nop
 80119ec:	0801c7f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, r9, sl, lr, pc}

080119f0 <Dmx::Dmx()>:
 80119f0:	230c      	movs	r3, #12
 80119f2:	225c      	movs	r2, #92	; 0x5c
 80119f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119f8:	e9c0 2300 	strd	r2, r3, [r0]
 80119fc:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8011a00:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8011a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a08:	8203      	strh	r3, [r0, #16]
 8011a0a:	4b46      	ldr	r3, [pc, #280]	; (8011b24 <Dmx::Dmx()+0x134>)
 8011a0c:	4f46      	ldr	r7, [pc, #280]	; (8011b28 <Dmx::Dmx()+0x138>)
 8011a0e:	6018      	str	r0, [r3, #0]
 8011a10:	4b46      	ldr	r3, [pc, #280]	; (8011b2c <Dmx::Dmx()+0x13c>)
 8011a12:	2400      	movs	r4, #0
 8011a14:	b08e      	sub	sp, #56	; 0x38
 8011a16:	4605      	mov	r5, r0
 8011a18:	801c      	strh	r4, [r3, #0]
 8011a1a:	4626      	mov	r6, r4
 8011a1c:	e9d7 0800 	ldrd	r0, r8, [r7]
 8011a20:	2202      	movs	r2, #2
 8011a22:	4643      	mov	r3, r8
 8011a24:	2101      	movs	r1, #1
 8011a26:	9003      	str	r0, [sp, #12]
 8011a28:	f007 f854 	bl	8018ad4 <gpio_mode_set>
 8011a2c:	4643      	mov	r3, r8
 8011a2e:	9803      	ldr	r0, [sp, #12]
 8011a30:	2202      	movs	r2, #2
 8011a32:	2100      	movs	r1, #0
 8011a34:	f007 f86e 	bl	8018b14 <gpio_output_options_set>
 8011a38:	4642      	mov	r2, r8
 8011a3a:	9803      	ldr	r0, [sp, #12]
 8011a3c:	2100      	movs	r1, #0
 8011a3e:	f007 f884 	bl	8018b4a <gpio_af_set>
 8011a42:	4621      	mov	r1, r4
 8011a44:	4628      	mov	r0, r5
 8011a46:	f7ff fe9d 	bl	8011784 <Dmx::ClearData(unsigned int)>
 8011a4a:	4b39      	ldr	r3, [pc, #228]	; (8011b30 <Dmx::Dmx()+0x140>)
 8011a4c:	2201      	movs	r2, #1
 8011a4e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8011a52:	4621      	mov	r1, r4
 8011a54:	2300      	movs	r3, #0
 8011a56:	4628      	mov	r0, r5
 8011a58:	f7ff ff8e 	bl	8011978 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8011a5c:	4b35      	ldr	r3, [pc, #212]	; (8011b34 <Dmx::Dmx()+0x144>)
 8011a5e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8011a62:	fb02 3304 	mla	r3, r2, r4, r3
 8011a66:	3708      	adds	r7, #8
 8011a68:	f8c3 620c 	str.w	r6, [r3, #524]	; 0x20c
 8011a6c:	2c00      	cmp	r4, #0
 8011a6e:	d056      	beq.n	8011b1e <Dmx::Dmx()+0x12e>
 8011a70:	f640 4015 	movw	r0, #3093	; 0xc15
 8011a74:	f007 f8aa 	bl	8018bcc <rcu_periph_clock_enable>
 8011a78:	f640 4016 	movw	r0, #3094	; 0xc16
 8011a7c:	f007 f8a6 	bl	8018bcc <rcu_periph_clock_enable>
 8011a80:	482d      	ldr	r0, [pc, #180]	; (8011b38 <Dmx::Dmx()+0x148>)
 8011a82:	2103      	movs	r1, #3
 8011a84:	f006 ff48 	bl	8018918 <dma_deinit>
 8011a88:	4b2c      	ldr	r3, [pc, #176]	; (8011b3c <Dmx::Dmx()+0x14c>)
 8011a8a:	482b      	ldr	r0, [pc, #172]	; (8011b38 <Dmx::Dmx()+0x148>)
 8011a8c:	9608      	str	r6, [sp, #32]
 8011a8e:	aa05      	add	r2, sp, #20
 8011a90:	f04f 0840 	mov.w	r8, #64	; 0x40
 8011a94:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8011a98:	2103      	movs	r1, #3
 8011a9a:	e9cd 3405 	strd	r3, r4, [sp, #20]
 8011a9e:	9609      	str	r6, [sp, #36]	; 0x24
 8011aa0:	970d      	str	r7, [sp, #52]	; 0x34
 8011aa2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8011aa6:	f006 ff6e 	bl	8018986 <dma_single_data_mode_init>
 8011aaa:	4823      	ldr	r0, [pc, #140]	; (8011b38 <Dmx::Dmx()+0x148>)
 8011aac:	2103      	movs	r1, #3
 8011aae:	f006 ffa9 	bl	8018a04 <dma_circulation_disable>
 8011ab2:	2204      	movs	r2, #4
 8011ab4:	4820      	ldr	r0, [pc, #128]	; (8011b38 <Dmx::Dmx()+0x148>)
 8011ab6:	2103      	movs	r1, #3
 8011ab8:	f006 ffac 	bl	8018a14 <dma_channel_subperipheral_select>
 8011abc:	4820      	ldr	r0, [pc, #128]	; (8011b40 <Dmx::Dmx()+0x150>)
 8011abe:	2106      	movs	r1, #6
 8011ac0:	f006 ff2a 	bl	8018918 <dma_deinit>
 8011ac4:	4b1f      	ldr	r3, [pc, #124]	; (8011b44 <Dmx::Dmx()+0x154>)
 8011ac6:	481e      	ldr	r0, [pc, #120]	; (8011b40 <Dmx::Dmx()+0x150>)
 8011ac8:	9608      	str	r6, [sp, #32]
 8011aca:	aa05      	add	r2, sp, #20
 8011acc:	2106      	movs	r1, #6
 8011ace:	e9cd 3405 	strd	r3, r4, [sp, #20]
 8011ad2:	9609      	str	r6, [sp, #36]	; 0x24
 8011ad4:	970d      	str	r7, [sp, #52]	; 0x34
 8011ad6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8011ada:	f006 ff54 	bl	8018986 <dma_single_data_mode_init>
 8011ade:	4818      	ldr	r0, [pc, #96]	; (8011b40 <Dmx::Dmx()+0x150>)
 8011ae0:	4c19      	ldr	r4, [pc, #100]	; (8011b48 <Dmx::Dmx()+0x158>)
 8011ae2:	2106      	movs	r1, #6
 8011ae4:	f006 ff8e 	bl	8018a04 <dma_circulation_disable>
 8011ae8:	2702      	movs	r7, #2
 8011aea:	4815      	ldr	r0, [pc, #84]	; (8011b40 <Dmx::Dmx()+0x150>)
 8011aec:	2205      	movs	r2, #5
 8011aee:	2106      	movs	r1, #6
 8011af0:	f006 ff90 	bl	8018a14 <dma_channel_subperipheral_select>
 8011af4:	2680      	movs	r6, #128	; 0x80
 8011af6:	4915      	ldr	r1, [pc, #84]	; (8011b4c <Dmx::Dmx()+0x15c>)
 8011af8:	4815      	ldr	r0, [pc, #84]	; (8011b50 <Dmx::Dmx()+0x160>)
 8011afa:	9700      	str	r7, [sp, #0]
 8011afc:	2300      	movs	r3, #0
 8011afe:	2208      	movs	r2, #8
 8011b00:	f007 ffa6 	bl	8019a50 <gd32_uart_begin>
 8011b04:	6066      	str	r6, [r4, #4]
 8011b06:	4911      	ldr	r1, [pc, #68]	; (8011b4c <Dmx::Dmx()+0x15c>)
 8011b08:	4812      	ldr	r0, [pc, #72]	; (8011b54 <Dmx::Dmx()+0x164>)
 8011b0a:	9700      	str	r7, [sp, #0]
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	2208      	movs	r2, #8
 8011b10:	f007 ff9e 	bl	8019a50 <gd32_uart_begin>
 8011b14:	4628      	mov	r0, r5
 8011b16:	60a6      	str	r6, [r4, #8]
 8011b18:	b00e      	add	sp, #56	; 0x38
 8011b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b1e:	2401      	movs	r4, #1
 8011b20:	e77c      	b.n	8011a1c <Dmx::Dmx()+0x2c>
 8011b22:	bf00      	nop
 8011b24:	20001078 	andcs	r1, r0, r8, ror r0
 8011b28:	0801c7f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, r9, sl, lr, pc}
 8011b2c:	20001074 	andcs	r1, r0, r4, ror r0
 8011b30:	2000104c 	andcs	r1, r0, ip, asr #32
 8011b34:	20000824 	andcs	r0, r0, r4, lsr #16
 8011b38:	40026000 	andmi	r6, r2, r0
 8011b3c:	40004804 	andmi	r4, r0, r4, lsl #16
 8011b40:	40026400 	andmi	r6, r2, r0, lsl #8
 8011b44:	40011404 	andmi	r1, r1, r4, lsl #8
 8011b48:	e000e100 	and	lr, r0, r0, lsl #2
 8011b4c:	0003d090 	muleq	r3, r0, r0
 8011b50:	40004800 	andmi	r4, r0, r0, lsl #16
 8011b54:	40011400 	andmi	r1, r1, r0, lsl #8

08011b58 <Dmx::SetDmxPeriodTime(unsigned int)>:
 8011b58:	4b0f      	ldr	r3, [pc, #60]	; (8011b98 <Dmx::SetDmxPeriodTime(unsigned int)+0x40>)
 8011b5a:	60c1      	str	r1, [r0, #12]
 8011b5c:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8011b60:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8011b64:	480d      	ldr	r0, [pc, #52]	; (8011b9c <Dmx::SetDmxPeriodTime(unsigned int)+0x44>)
 8011b66:	429a      	cmp	r2, r3
 8011b68:	bf38      	it	cc
 8011b6a:	461a      	movcc	r2, r3
 8011b6c:	4b0c      	ldr	r3, [pc, #48]	; (8011ba0 <Dmx::SetDmxPeriodTime(unsigned int)+0x48>)
 8011b6e:	6800      	ldr	r0, [r0, #0]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	4403      	add	r3, r0
 8011b74:	202c      	movs	r0, #44	; 0x2c
 8011b76:	fb00 3302 	mla	r3, r0, r2, r3
 8011b7a:	b151      	cbz	r1, 8011b92 <Dmx::SetDmxPeriodTime(unsigned int)+0x3a>
 8011b7c:	4299      	cmp	r1, r3
 8011b7e:	d205      	bcs.n	8011b8c <Dmx::SetDmxPeriodTime(unsigned int)+0x34>
 8011b80:	1819      	adds	r1, r3, r0
 8011b82:	f240 43b4 	movw	r3, #1204	; 0x4b4
 8011b86:	4299      	cmp	r1, r3
 8011b88:	bf38      	it	cc
 8011b8a:	4619      	movcc	r1, r3
 8011b8c:	4b05      	ldr	r3, [pc, #20]	; (8011ba4 <Dmx::SetDmxPeriodTime(unsigned int)+0x4c>)
 8011b8e:	6019      	str	r1, [r3, #0]
 8011b90:	4770      	bx	lr
 8011b92:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8011b96:	e7f4      	b.n	8011b82 <Dmx::SetDmxPeriodTime(unsigned int)+0x2a>
 8011b98:	20000c44 	andcs	r0, r0, r4, asr #24
 8011b9c:	20000008 	andcs	r0, r0, r8
 8011ba0:	2000000c 	andcs	r0, r0, ip
 8011ba4:	20000004 	andcs	r0, r0, r4

08011ba8 <Dmx::SetDmxBreakTime(unsigned int)>:
 8011ba8:	295c      	cmp	r1, #92	; 0x5c
 8011baa:	4b03      	ldr	r3, [pc, #12]	; (8011bb8 <Dmx::SetDmxBreakTime(unsigned int)+0x10>)
 8011bac:	bf38      	it	cc
 8011bae:	215c      	movcc	r1, #92	; 0x5c
 8011bb0:	6019      	str	r1, [r3, #0]
 8011bb2:	68c1      	ldr	r1, [r0, #12]
 8011bb4:	f7ff bfd0 	b.w	8011b58 <Dmx::SetDmxPeriodTime(unsigned int)>
 8011bb8:	2000000c 	andcs	r0, r0, ip

08011bbc <Dmx::SetDmxMabTime(unsigned int)>:
 8011bbc:	290c      	cmp	r1, #12
 8011bbe:	4b03      	ldr	r3, [pc, #12]	; (8011bcc <Dmx::SetDmxMabTime(unsigned int)+0x10>)
 8011bc0:	bf38      	it	cc
 8011bc2:	210c      	movcc	r1, #12
 8011bc4:	6019      	str	r1, [r3, #0]
 8011bc6:	68c1      	ldr	r1, [r0, #12]
 8011bc8:	f7ff bfc6 	b.w	8011b58 <Dmx::SetDmxPeriodTime(unsigned int)>
 8011bcc:	20000008 	andcs	r0, r0, r8

08011bd0 <Dmx::SetDmxSlots(unsigned short)>:
 8011bd0:	1e8b      	subs	r3, r1, #2
 8011bd2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8011bd6:	d80f      	bhi.n	8011bf8 <Dmx::SetDmxSlots(unsigned short)+0x28>
 8011bd8:	69c3      	ldr	r3, [r0, #28]
 8011bda:	8201      	strh	r1, [r0, #16]
 8011bdc:	b11b      	cbz	r3, 8011be6 <Dmx::SetDmxSlots(unsigned short)+0x16>
 8011bde:	4299      	cmp	r1, r3
 8011be0:	bf94      	ite	ls
 8011be2:	61c1      	strls	r1, [r0, #28]
 8011be4:	61c3      	strhi	r3, [r0, #28]
 8011be6:	6a03      	ldr	r3, [r0, #32]
 8011be8:	b11b      	cbz	r3, 8011bf2 <Dmx::SetDmxSlots(unsigned short)+0x22>
 8011bea:	4299      	cmp	r1, r3
 8011bec:	bf94      	ite	ls
 8011bee:	6201      	strls	r1, [r0, #32]
 8011bf0:	6203      	strhi	r3, [r0, #32]
 8011bf2:	68c1      	ldr	r1, [r0, #12]
 8011bf4:	f7ff bfb0 	b.w	8011b58 <Dmx::SetDmxPeriodTime(unsigned int)>
 8011bf8:	4770      	bx	lr
	...

08011bfc <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>:
 8011bfc:	b470      	push	{r4, r5, r6}
 8011bfe:	8a04      	ldrh	r4, [r0, #16]
 8011c00:	f892 f000 	pld	[r2]
 8011c04:	42a3      	cmp	r3, r4
 8011c06:	bf28      	it	cs
 8011c08:	4623      	movcs	r3, r4
 8011c0a:	4c0e      	ldr	r4, [pc, #56]	; (8011c44 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x48>)
 8011c0c:	f44f 7501 	mov.w	r5, #516	; 0x204
 8011c10:	fb05 4401 	mla	r4, r5, r1, r4
 8011c14:	1c5d      	adds	r5, r3, #1
 8011c16:	f8a4 5202 	strh.w	r5, [r4, #514]	; 0x202
 8011c1a:	18d5      	adds	r5, r2, r3
 8011c1c:	4295      	cmp	r5, r2
 8011c1e:	d109      	bne.n	8011c34 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x38>
 8011c20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011c24:	69ca      	ldr	r2, [r1, #28]
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d009      	beq.n	8011c3e <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x42>
 8011c2a:	61cb      	str	r3, [r1, #28]
 8011c2c:	bc70      	pop	{r4, r5, r6}
 8011c2e:	68c1      	ldr	r1, [r0, #12]
 8011c30:	f7ff bf92 	b.w	8011b58 <Dmx::SetDmxPeriodTime(unsigned int)>
 8011c34:	f812 6b01 	ldrb.w	r6, [r2], #1
 8011c38:	f804 6f01 	strb.w	r6, [r4, #1]!
 8011c3c:	e7ee      	b.n	8011c1c <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x20>
 8011c3e:	bc70      	pop	{r4, r5, r6}
 8011c40:	4770      	bx	lr
 8011c42:	bf00      	nop
 8011c44:	20000c44 	andcs	r0, r0, r4, asr #24

08011c48 <Dmx::Blackout()>:
 8011c48:	b538      	push	{r3, r4, r5, lr}
 8011c4a:	4c1e      	ldr	r4, [pc, #120]	; (8011cc4 <Dmx::Blackout()+0x7c>)
 8011c4c:	8823      	ldrh	r3, [r4, #0]
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	b3bb      	cbz	r3, 8011cc2 <Dmx::Blackout()+0x7a>
 8011c52:	f3bf 8f5f 	dmb	sy
 8011c56:	8823      	ldrh	r3, [r4, #0]
 8011c58:	05da      	lsls	r2, r3, #23
 8011c5a:	d515      	bpl.n	8011c88 <Dmx::Blackout()+0x40>
 8011c5c:	2000      	movs	r0, #0
 8011c5e:	f7ff fb7f 	bl	8011360 <_port_to_uart(unsigned int)>
 8011c62:	4605      	mov	r5, r0
 8011c64:	2107      	movs	r1, #7
 8011c66:	4628      	mov	r0, r5
 8011c68:	f007 fb9a 	bl	80193a0 <usart_flag_get>
 8011c6c:	2801      	cmp	r0, #1
 8011c6e:	d1f9      	bne.n	8011c64 <Dmx::Blackout()+0x1c>
 8011c70:	4b15      	ldr	r3, [pc, #84]	; (8011cc8 <Dmx::Blackout()+0x80>)
 8011c72:	2000      	movs	r0, #0
 8011c74:	461a      	mov	r2, r3
 8011c76:	f203 2102 	addw	r1, r3, #514	; 0x202
 8011c7a:	f823 0b02 	strh.w	r0, [r3], #2
 8011c7e:	428b      	cmp	r3, r1
 8011c80:	d1fb      	bne.n	8011c7a <Dmx::Blackout()+0x32>
 8011c82:	f04f 0300 	mov.w	r3, #0
 8011c86:	7013      	strb	r3, [r2, #0]
 8011c88:	f3bf 8f5f 	dmb	sy
 8011c8c:	8823      	ldrh	r3, [r4, #0]
 8011c8e:	059b      	lsls	r3, r3, #22
 8011c90:	d517      	bpl.n	8011cc2 <Dmx::Blackout()+0x7a>
 8011c92:	2001      	movs	r0, #1
 8011c94:	f7ff fb64 	bl	8011360 <_port_to_uart(unsigned int)>
 8011c98:	4604      	mov	r4, r0
 8011c9a:	2107      	movs	r1, #7
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	f007 fb7f 	bl	80193a0 <usart_flag_get>
 8011ca2:	2801      	cmp	r0, #1
 8011ca4:	d1f9      	bne.n	8011c9a <Dmx::Blackout()+0x52>
 8011ca6:	4b09      	ldr	r3, [pc, #36]	; (8011ccc <Dmx::Blackout()+0x84>)
 8011ca8:	2000      	movs	r0, #0
 8011caa:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8011cae:	f203 2102 	addw	r1, r3, #514	; 0x202
 8011cb2:	f823 0b02 	strh.w	r0, [r3], #2
 8011cb6:	428b      	cmp	r3, r1
 8011cb8:	d1fb      	bne.n	8011cb2 <Dmx::Blackout()+0x6a>
 8011cba:	f04f 0300 	mov.w	r3, #0
 8011cbe:	f882 3204 	strb.w	r3, [r2, #516]	; 0x204
 8011cc2:	bd38      	pop	{r3, r4, r5, pc}
 8011cc4:	20001074 	andcs	r1, r0, r4, ror r0
 8011cc8:	20000c44 	andcs	r0, r0, r4, asr #24
 8011ccc:	20000e48 	andcs	r0, r0, r8, asr #28

08011cd0 <Dmx::FullOn()>:
 8011cd0:	b538      	push	{r3, r4, r5, lr}
 8011cd2:	4c1e      	ldr	r4, [pc, #120]	; (8011d4c <Dmx::FullOn()+0x7c>)
 8011cd4:	8823      	ldrh	r3, [r4, #0]
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	b3bb      	cbz	r3, 8011d4a <Dmx::FullOn()+0x7a>
 8011cda:	f3bf 8f5f 	dmb	sy
 8011cde:	8823      	ldrh	r3, [r4, #0]
 8011ce0:	05da      	lsls	r2, r3, #23
 8011ce2:	d515      	bpl.n	8011d10 <Dmx::FullOn()+0x40>
 8011ce4:	2000      	movs	r0, #0
 8011ce6:	f7ff fb3b 	bl	8011360 <_port_to_uart(unsigned int)>
 8011cea:	4605      	mov	r5, r0
 8011cec:	2107      	movs	r1, #7
 8011cee:	4628      	mov	r0, r5
 8011cf0:	f007 fb56 	bl	80193a0 <usart_flag_get>
 8011cf4:	2801      	cmp	r0, #1
 8011cf6:	d1f9      	bne.n	8011cec <Dmx::FullOn()+0x1c>
 8011cf8:	4b15      	ldr	r3, [pc, #84]	; (8011d50 <Dmx::FullOn()+0x80>)
 8011cfa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011cfe:	461a      	mov	r2, r3
 8011d00:	f203 2102 	addw	r1, r3, #514	; 0x202
 8011d04:	f823 0b02 	strh.w	r0, [r3], #2
 8011d08:	428b      	cmp	r3, r1
 8011d0a:	d1fb      	bne.n	8011d04 <Dmx::FullOn()+0x34>
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	7013      	strb	r3, [r2, #0]
 8011d10:	f3bf 8f5f 	dmb	sy
 8011d14:	8823      	ldrh	r3, [r4, #0]
 8011d16:	059b      	lsls	r3, r3, #22
 8011d18:	d517      	bpl.n	8011d4a <Dmx::FullOn()+0x7a>
 8011d1a:	2001      	movs	r0, #1
 8011d1c:	f7ff fb20 	bl	8011360 <_port_to_uart(unsigned int)>
 8011d20:	4604      	mov	r4, r0
 8011d22:	2107      	movs	r1, #7
 8011d24:	4620      	mov	r0, r4
 8011d26:	f007 fb3b 	bl	80193a0 <usart_flag_get>
 8011d2a:	2801      	cmp	r0, #1
 8011d2c:	d1f9      	bne.n	8011d22 <Dmx::FullOn()+0x52>
 8011d2e:	4b09      	ldr	r3, [pc, #36]	; (8011d54 <Dmx::FullOn()+0x84>)
 8011d30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011d34:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8011d38:	f203 2102 	addw	r1, r3, #514	; 0x202
 8011d3c:	f823 0b02 	strh.w	r0, [r3], #2
 8011d40:	428b      	cmp	r3, r1
 8011d42:	d1fb      	bne.n	8011d3c <Dmx::FullOn()+0x6c>
 8011d44:	2300      	movs	r3, #0
 8011d46:	f882 3204 	strb.w	r3, [r2, #516]	; 0x204
 8011d4a:	bd38      	pop	{r3, r4, r5, pc}
 8011d4c:	20001074 	andcs	r1, r0, r4, ror r0
 8011d50:	20000c44 	andcs	r0, r0, r4, asr #24
 8011d54:	20000e48 	andcs	r0, r0, r8, asr #28

08011d58 <WS28xxDmxMulti::SetDmxStartAddress(unsigned short)>:
 8011d58:	2000      	movs	r0, #0
 8011d5a:	4770      	bx	lr

08011d5c <WS28xxDmxMulti::GetDmxStartAddress()>:
 8011d5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011d60:	4770      	bx	lr

08011d62 <WS28xxDmxMulti::GetDmxFootprint()>:
 8011d62:	2000      	movs	r0, #0
 8011d64:	4770      	bx	lr

08011d66 <WS28xxDmxMulti::Start(unsigned int)>:
 8011d66:	b538      	push	{r3, r4, r5, lr}
 8011d68:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011d6a:	4604      	mov	r4, r0
 8011d6c:	460d      	mov	r5, r1
 8011d6e:	b923      	cbnz	r3, 8011d7a <WS28xxDmxMulti::Start(unsigned int)+0x14>
 8011d70:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8011d72:	b110      	cbz	r0, 8011d7a <WS28xxDmxMulti::Start(unsigned int)+0x14>
 8011d74:	6803      	ldr	r3, [r0, #0]
 8011d76:	689b      	ldr	r3, [r3, #8]
 8011d78:	4798      	blx	r3
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	fa03 f105 	lsl.w	r1, r3, r5
 8011d80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011d82:	430b      	orrs	r3, r1
 8011d84:	6523      	str	r3, [r4, #80]	; 0x50
 8011d86:	bd38      	pop	{r3, r4, r5, pc}

08011d88 <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 8011d88:	b538      	push	{r3, r4, r5, lr}
 8011d8a:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8011d8c:	4b05      	ldr	r3, [pc, #20]	; (8011da4 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x1c>)
 8011d8e:	6003      	str	r3, [r0, #0]
 8011d90:	4604      	mov	r4, r0
 8011d92:	b12d      	cbz	r5, 8011da0 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x18>
 8011d94:	4628      	mov	r0, r5
 8011d96:	f001 fab3 	bl	8013300 <WS28xxMulti::~WS28xxMulti()>
 8011d9a:	4628      	mov	r0, r5
 8011d9c:	f006 fab6 	bl	801830c <operator delete(void*)>
 8011da0:	4620      	mov	r0, r4
 8011da2:	bd38      	pop	{r3, r4, r5, pc}
 8011da4:	0801c80c 	stmdaeq	r1, {r2, r3, fp, lr, pc}

08011da8 <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 8011da8:	b510      	push	{r4, lr}
 8011daa:	4604      	mov	r4, r0
 8011dac:	f7ff ffec 	bl	8011d88 <WS28xxDmxMulti::~WS28xxDmxMulti()>
 8011db0:	4620      	mov	r0, r4
 8011db2:	f006 faab 	bl	801830c <operator delete(void*)>
 8011db6:	4620      	mov	r0, r4
 8011db8:	bd10      	pop	{r4, pc}

08011dba <WS28xxDmxMulti::Blackout(bool)>:
 8011dba:	b538      	push	{r3, r4, r5, lr}
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	460d      	mov	r5, r1
 8011dc0:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8011dc4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011dc6:	f001 fe81 	bl	8013acc <WS28xxMulti::IsUpdating()>
 8011dca:	2800      	cmp	r0, #0
 8011dcc:	d1fa      	bne.n	8011dc4 <WS28xxDmxMulti::Blackout(bool)+0xa>
 8011dce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011dd0:	b11d      	cbz	r5, 8011dda <WS28xxDmxMulti::Blackout(bool)+0x20>
 8011dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dd6:	f001 bdb7 	b.w	8013948 <WS28xxMulti::Blackout()>
 8011dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dde:	f001 bd0f 	b.w	8013800 <WS28xxMulti::Update()>

08011de2 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8011de2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011de6:	b089      	sub	sp, #36	; 0x24
 8011de8:	4691      	mov	r9, r2
 8011dea:	9306      	str	r3, [sp, #24]
 8011dec:	460b      	mov	r3, r1
 8011dee:	f003 0203 	and.w	r2, r3, #3
 8011df2:	2a02      	cmp	r2, #2
 8011df4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011df6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8011df8:	9105      	str	r1, [sp, #20]
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8011e00:	9806      	ldr	r0, [sp, #24]
 8011e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8011e06:	d032      	beq.n	8011e6e <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x8c>
 8011e08:	2a03      	cmp	r2, #3
 8011e0a:	d032      	beq.n	8011e72 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x90>
 8011e0c:	2a01      	cmp	r2, #1
 8011e0e:	d028      	beq.n	8011e62 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x80>
 8011e10:	429e      	cmp	r6, r3
 8011e12:	bf28      	it	cs
 8011e14:	461e      	movcs	r6, r3
 8011e16:	2500      	movs	r5, #0
 8011e18:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011e1a:	9107      	str	r1, [sp, #28]
 8011e1c:	f001 fe56 	bl	8013acc <WS28xxMulti::IsUpdating()>
 8011e20:	9907      	ldr	r1, [sp, #28]
 8011e22:	2800      	cmp	r0, #0
 8011e24:	d1f8      	bne.n	8011e18 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x36>
 8011e26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011e28:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
 8011e2c:	2b03      	cmp	r3, #3
 8011e2e:	46c8      	mov	r8, r9
 8011e30:	fb0a f705 	mul.w	r7, sl, r5
 8011e34:	d041      	beq.n	8011eba <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xd8>
 8011e36:	42b5      	cmp	r5, r6
 8011e38:	d241      	bcs.n	8011ebe <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xdc>
 8011e3a:	9a06      	ldr	r2, [sp, #24]
 8011e3c:	eba8 0309 	sub.w	r3, r8, r9
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d93c      	bls.n	8011ebe <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xdc>
 8011e44:	f898 f000 	pld	[r8]
 8011e48:	f04f 0b00 	mov.w	fp, #0
 8011e4c:	fa1f f28b 	uxth.w	r2, fp
 8011e50:	4552      	cmp	r2, sl
 8011e52:	f10b 0b01 	add.w	fp, fp, #1
 8011e56:	d33c      	bcc.n	8011ed2 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xf0>
 8011e58:	3501      	adds	r5, #1
 8011e5a:	f108 0804 	add.w	r8, r8, #4
 8011e5e:	4457      	add	r7, sl
 8011e60:	e7e9      	b.n	8011e36 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x54>
 8011e62:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8011e64:	442b      	add	r3, r5
 8011e66:	429e      	cmp	r6, r3
 8011e68:	bf28      	it	cs
 8011e6a:	461e      	movcs	r6, r3
 8011e6c:	e7d4      	b.n	8011e18 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x36>
 8011e6e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8011e70:	e7f8      	b.n	8011e64 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 8011e72:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8011e74:	e7f6      	b.n	8011e64 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 8011e76:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011e7a:	9301      	str	r3, [sp, #4]
 8011e7c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011e80:	9300      	str	r3, [sp, #0]
 8011e82:	f898 3000 	ldrb.w	r3, [r8]
 8011e86:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011e88:	9107      	str	r1, [sp, #28]
 8011e8a:	443a      	add	r2, r7
 8011e8c:	f001 fe9e 	bl	8013bcc <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8011e90:	9907      	ldr	r1, [sp, #28]
 8011e92:	e008      	b.n	8011ea6 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xc4>
 8011e94:	9a06      	ldr	r2, [sp, #24]
 8011e96:	eba8 0309 	sub.w	r3, r8, r9
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d90f      	bls.n	8011ebe <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xdc>
 8011e9e:	f898 f000 	pld	[r8]
 8011ea2:	f04f 0b00 	mov.w	fp, #0
 8011ea6:	fa1f f28b 	uxth.w	r2, fp
 8011eaa:	4552      	cmp	r2, sl
 8011eac:	f10b 0b01 	add.w	fp, fp, #1
 8011eb0:	d3e1      	bcc.n	8011e76 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x94>
 8011eb2:	3501      	adds	r5, #1
 8011eb4:	f108 0803 	add.w	r8, r8, #3
 8011eb8:	4457      	add	r7, sl
 8011eba:	42b5      	cmp	r5, r6
 8011ebc:	d3ea      	bcc.n	8011e94 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xb2>
 8011ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ec0:	9a05      	ldr	r2, [sp, #20]
 8011ec2:	4293      	cmp	r3, r2
 8011ec4:	d117      	bne.n	8011ef6 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x114>
 8011ec6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011ec8:	b009      	add	sp, #36	; 0x24
 8011eca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ece:	f001 bc97 	b.w	8013800 <WS28xxMulti::Update()>
 8011ed2:	f898 3003 	ldrb.w	r3, [r8, #3]
 8011ed6:	9302      	str	r3, [sp, #8]
 8011ed8:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011edc:	9301      	str	r3, [sp, #4]
 8011ede:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011ee2:	9300      	str	r3, [sp, #0]
 8011ee4:	f898 3000 	ldrb.w	r3, [r8]
 8011ee8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011eea:	9107      	str	r1, [sp, #28]
 8011eec:	443a      	add	r2, r7
 8011eee:	f001 feef 	bl	8013cd0 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8011ef2:	9907      	ldr	r1, [sp, #28]
 8011ef4:	e7aa      	b.n	8011e4c <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8011ef6:	b009      	add	sp, #36	; 0x24
 8011ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011efc <WS28xxDmxMulti::FullOn()>:
 8011efc:	b510      	push	{r4, lr}
 8011efe:	4604      	mov	r4, r0
 8011f00:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011f02:	f001 fde3 	bl	8013acc <WS28xxMulti::IsUpdating()>
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d1fa      	bne.n	8011f00 <WS28xxDmxMulti::FullOn()+0x4>
 8011f0a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f10:	f001 bd7c 	b.w	8013a0c <WS28xxMulti::FullOn()>

08011f14 <WS28xxDmxMulti::Print()>:
 8011f14:	3004      	adds	r0, #4
 8011f16:	f000 bcb1 	b.w	801287c <PixelDmxConfiguration::Print()>

08011f1a <WS28xxDmxMulti::Stop(unsigned int)>:
 8011f1a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011f1c:	fa23 f201 	lsr.w	r2, r3, r1
 8011f20:	07d2      	lsls	r2, r2, #31
 8011f22:	bf41      	itttt	mi
 8011f24:	2201      	movmi	r2, #1
 8011f26:	408a      	lslmi	r2, r1
 8011f28:	4393      	bicmi	r3, r2
 8011f2a:	6503      	strmi	r3, [r0, #80]	; 0x50
 8011f2c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011f2e:	b923      	cbnz	r3, 8011f3a <WS28xxDmxMulti::Stop(unsigned int)+0x20>
 8011f30:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8011f32:	b110      	cbz	r0, 8011f3a <WS28xxDmxMulti::Stop(unsigned int)+0x20>
 8011f34:	6803      	ldr	r3, [r0, #0]
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	4718      	bx	r3
 8011f3a:	4770      	bx	lr

08011f3c <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)>:
 8011f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f3e:	4604      	mov	r4, r0
 8011f40:	4b14      	ldr	r3, [pc, #80]	; (8011f94 <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)+0x58>)
 8011f42:	f844 3b04 	str.w	r3, [r4], #4
 8011f46:	460d      	mov	r5, r1
 8011f48:	4606      	mov	r6, r0
 8011f4a:	460f      	mov	r7, r1
 8011f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	f106 0244 	add.w	r2, r6, #68	; 0x44
 8011f62:	e9c6 3312 	strd	r3, r3, [r6, #72]	; 0x48
 8011f66:	6533      	str	r3, [r6, #80]	; 0x50
 8011f68:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
 8011f6c:	2110      	movs	r1, #16
 8011f6e:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8011f72:	1d30      	adds	r0, r6, #4
 8011f74:	f000 fc3f 	bl	80127f6 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 8011f78:	2020      	movs	r0, #32
 8011f7a:	f006 f9cb 	bl	8018314 <operator new(unsigned int)>
 8011f7e:	4639      	mov	r1, r7
 8011f80:	4604      	mov	r4, r0
 8011f82:	f001 fbdf 	bl	8013744 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)>
 8011f86:	4620      	mov	r0, r4
 8011f88:	64b4      	str	r4, [r6, #72]	; 0x48
 8011f8a:	f001 fcdd 	bl	8013948 <WS28xxMulti::Blackout()>
 8011f8e:	4630      	mov	r0, r6
 8011f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f92:	bf00      	nop
 8011f94:	0801c80c 	stmdaeq	r1, {r2, r3, fp, lr, pc}

08011f98 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8011f98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f9a:	88c6      	ldrh	r6, [r0, #6]
 8011f9c:	8885      	ldrh	r5, [r0, #4]
 8011f9e:	42ae      	cmp	r6, r5
 8011fa0:	d216      	bcs.n	8011fd0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	6800      	ldr	r0, [r0, #0]
 8011fa6:	1bad      	subs	r5, r5, r6
 8011fa8:	4430      	add	r0, r6
 8011faa:	7a26      	ldrb	r6, [r4, #8]
 8011fac:	b923      	cbnz	r3, 8011fb8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8011fae:	b926      	cbnz	r6, 8011fba <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8011fb0:	9200      	str	r2, [sp, #0]
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	4a09      	ldr	r2, [pc, #36]	; (8011fdc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 8011fb6:	e003      	b.n	8011fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011fb8:	b166      	cbz	r6, 8011fd4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8011fba:	9200      	str	r2, [sp, #0]
 8011fbc:	4a08      	ldr	r2, [pc, #32]	; (8011fe0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8011fbe:	460b      	mov	r3, r1
 8011fc0:	4629      	mov	r1, r5
 8011fc2:	f7f8 fafb 	bl	800a5bc <snprintf>
 8011fc6:	4285      	cmp	r5, r0
 8011fc8:	bfa2      	ittt	ge
 8011fca:	88e3      	ldrhge	r3, [r4, #6]
 8011fcc:	181b      	addge	r3, r3, r0
 8011fce:	80e3      	strhge	r3, [r4, #6]
 8011fd0:	b002      	add	sp, #8
 8011fd2:	bd70      	pop	{r4, r5, r6, pc}
 8011fd4:	9200      	str	r2, [sp, #0]
 8011fd6:	460b      	mov	r3, r1
 8011fd8:	4a02      	ldr	r2, [pc, #8]	; (8011fe4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011fda:	e7f1      	b.n	8011fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011fdc:	0801aff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8011fe0:	0801afec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8011fe4:	0801aff6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}

08011fe8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 8011fe8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011fea:	88c6      	ldrh	r6, [r0, #6]
 8011fec:	8885      	ldrh	r5, [r0, #4]
 8011fee:	42ae      	cmp	r6, r5
 8011ff0:	d216      	bcs.n	8012020 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 8011ff2:	4604      	mov	r4, r0
 8011ff4:	6800      	ldr	r0, [r0, #0]
 8011ff6:	1bad      	subs	r5, r5, r6
 8011ff8:	4430      	add	r0, r6
 8011ffa:	7a26      	ldrb	r6, [r4, #8]
 8011ffc:	b923      	cbnz	r3, 8012008 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 8011ffe:	b926      	cbnz	r6, 801200a <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 8012000:	9200      	str	r2, [sp, #0]
 8012002:	460b      	mov	r3, r1
 8012004:	4a09      	ldr	r2, [pc, #36]	; (801202c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 8012006:	e003      	b.n	8012010 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 8012008:	b166      	cbz	r6, 8012024 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 801200a:	9200      	str	r2, [sp, #0]
 801200c:	4a08      	ldr	r2, [pc, #32]	; (8012030 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 801200e:	460b      	mov	r3, r1
 8012010:	4629      	mov	r1, r5
 8012012:	f7f8 fad3 	bl	800a5bc <snprintf>
 8012016:	4285      	cmp	r5, r0
 8012018:	bfa2      	ittt	ge
 801201a:	88e3      	ldrhge	r3, [r4, #6]
 801201c:	181b      	addge	r3, r3, r0
 801201e:	80e3      	strhge	r3, [r4, #6]
 8012020:	b002      	add	sp, #8
 8012022:	bd70      	pop	{r4, r5, r6, pc}
 8012024:	9200      	str	r2, [sp, #0]
 8012026:	460b      	mov	r3, r1
 8012028:	4a02      	ldr	r2, [pc, #8]	; (8012034 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 801202a:	e7f1      	b.n	8012010 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 801202c:	0801aff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8012030:	0801afec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8012034:	0801aff6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}

08012038 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 8012038:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801203a:	88c6      	ldrh	r6, [r0, #6]
 801203c:	8885      	ldrh	r5, [r0, #4]
 801203e:	42ae      	cmp	r6, r5
 8012040:	d216      	bcs.n	8012070 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 8012042:	4604      	mov	r4, r0
 8012044:	6800      	ldr	r0, [r0, #0]
 8012046:	1bad      	subs	r5, r5, r6
 8012048:	4430      	add	r0, r6
 801204a:	7a26      	ldrb	r6, [r4, #8]
 801204c:	b923      	cbnz	r3, 8012058 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 801204e:	b926      	cbnz	r6, 801205a <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 8012050:	9200      	str	r2, [sp, #0]
 8012052:	460b      	mov	r3, r1
 8012054:	4a09      	ldr	r2, [pc, #36]	; (801207c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 8012056:	e003      	b.n	8012060 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 8012058:	b166      	cbz	r6, 8012074 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 801205a:	9200      	str	r2, [sp, #0]
 801205c:	4a08      	ldr	r2, [pc, #32]	; (8012080 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 801205e:	460b      	mov	r3, r1
 8012060:	4629      	mov	r1, r5
 8012062:	f7f8 faab 	bl	800a5bc <snprintf>
 8012066:	4285      	cmp	r5, r0
 8012068:	bfa2      	ittt	ge
 801206a:	88e3      	ldrhge	r3, [r4, #6]
 801206c:	181b      	addge	r3, r3, r0
 801206e:	80e3      	strhge	r3, [r4, #6]
 8012070:	b002      	add	sp, #8
 8012072:	bd70      	pop	{r4, r5, r6, pc}
 8012074:	9200      	str	r2, [sp, #0]
 8012076:	460b      	mov	r3, r1
 8012078:	4a02      	ldr	r2, [pc, #8]	; (8012084 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 801207a:	e7f1      	b.n	8012060 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 801207c:	0801b008 	stmdaeq	r1, {r3, ip, sp, pc}
 8012080:	0801affd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8012084:	0801b009 	stmdaeq	r1, {r0, r3, ip, sp, pc}

08012088 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 8012088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801208c:	8885      	ldrh	r5, [r0, #4]
 801208e:	4698      	mov	r8, r3
 8012090:	88c3      	ldrh	r3, [r0, #6]
 8012092:	42ab      	cmp	r3, r5
 8012094:	4604      	mov	r4, r0
 8012096:	d229      	bcs.n	80120ec <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 8012098:	6826      	ldr	r6, [r4, #0]
 801209a:	f894 9008 	ldrb.w	r9, [r4, #8]
 801209e:	4692      	mov	sl, r2
 80120a0:	ee10 0a10 	vmov	r0, s0
 80120a4:	460f      	mov	r7, r1
 80120a6:	441e      	add	r6, r3
 80120a8:	1aed      	subs	r5, r5, r3
 80120aa:	f7f6 ff73 	bl	8008f94 <__aeabi_f2d>
 80120ae:	f1ba 0f00 	cmp.w	sl, #0
 80120b2:	d109      	bne.n	80120c8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 80120b4:	f1b9 0f00 	cmp.w	r9, #0
 80120b8:	d109      	bne.n	80120ce <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 80120ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120be:	4a10      	ldr	r2, [pc, #64]	; (8012100 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 80120c0:	f8cd 8000 	str.w	r8, [sp]
 80120c4:	463b      	mov	r3, r7
 80120c6:	e008      	b.n	80120da <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 80120c8:	f1b9 0f00 	cmp.w	r9, #0
 80120cc:	d011      	beq.n	80120f2 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 80120ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120d2:	4a0c      	ldr	r2, [pc, #48]	; (8012104 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 80120d4:	f8cd 8000 	str.w	r8, [sp]
 80120d8:	463b      	mov	r3, r7
 80120da:	4629      	mov	r1, r5
 80120dc:	4630      	mov	r0, r6
 80120de:	f7f8 fa6d 	bl	800a5bc <snprintf>
 80120e2:	4285      	cmp	r5, r0
 80120e4:	bfa2      	ittt	ge
 80120e6:	88e3      	ldrhge	r3, [r4, #6]
 80120e8:	18c0      	addge	r0, r0, r3
 80120ea:	80e0      	strhge	r0, [r4, #6]
 80120ec:	b004      	add	sp, #16
 80120ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120f6:	4a04      	ldr	r2, [pc, #16]	; (8012108 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 80120f8:	f8cd 8000 	str.w	r8, [sp]
 80120fc:	463b      	mov	r3, r7
 80120fe:	e7ec      	b.n	80120da <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 8012100:	0801c847 	stmdaeq	r1, {r0, r1, r2, r6, fp, lr, pc}
 8012104:	0801c83c 	stmdaeq	r1, {r2, r3, r4, r5, fp, lr, pc}
 8012108:	0801c848 	stmdaeq	r1, {r3, r6, fp, lr, pc}

0801210c <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>:
 801210c:	6001      	str	r1, [r0, #0]
 801210e:	2106      	movs	r1, #6
 8012110:	2200      	movs	r2, #0
 8012112:	75c1      	strb	r1, [r0, #23]
 8012114:	490b      	ldr	r1, [pc, #44]	; (8012144 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x38>)
 8012116:	7582      	strb	r2, [r0, #22]
 8012118:	8302      	strh	r2, [r0, #24]
 801211a:	6042      	str	r2, [r0, #4]
 801211c:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8012120:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8012124:	2301      	movs	r3, #1
 8012126:	4a08      	ldr	r2, [pc, #32]	; (8012148 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x3c>)
 8012128:	6102      	str	r2, [r0, #16]
 801212a:	7543      	strb	r3, [r0, #21]
 801212c:	f100 0218 	add.w	r2, r0, #24
 8012130:	f822 3f02 	strh.w	r3, [r2, #2]!
 8012134:	3304      	adds	r3, #4
 8012136:	b29b      	uxth	r3, r3
 8012138:	2b41      	cmp	r3, #65	; 0x41
 801213a:	d1f9      	bne.n	8012130 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x24>
 801213c:	2300      	movs	r3, #0
 801213e:	7503      	strb	r3, [r0, #20]
 8012140:	4770      	bx	lr
 8012142:	bf00      	nop
 8012144:	0100aa03 	tsteq	r0, r3, lsl #20
 8012148:	01ff003d 	mvnseq	r0, sp, lsr r0

0801214c <PixelDmxParams::Load()>:
 801214c:	b508      	push	{r3, lr}
 801214e:	2300      	movs	r3, #0
 8012150:	4601      	mov	r1, r0
 8012152:	6043      	str	r3, [r0, #4]
 8012154:	6800      	ldr	r0, [r0, #0]
 8012156:	b120      	cbz	r0, 8012162 <PixelDmxParams::Load()+0x16>
 8012158:	6803      	ldr	r3, [r0, #0]
 801215a:	3104      	adds	r1, #4
 801215c:	68db      	ldr	r3, [r3, #12]
 801215e:	4798      	blx	r3
 8012160:	2001      	movs	r0, #1
 8012162:	bd08      	pop	{r3, pc}

08012164 <PixelDmxParams::Load(char const*, unsigned int)>:
 8012164:	6803      	ldr	r3, [r0, #0]
 8012166:	b1d3      	cbz	r3, 801219e <PixelDmxParams::Load(char const*, unsigned int)+0x3a>
 8012168:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801216a:	2300      	movs	r3, #0
 801216c:	6043      	str	r3, [r0, #4]
 801216e:	4604      	mov	r4, r0
 8012170:	460d      	mov	r5, r1
 8012172:	4616      	mov	r6, r2
 8012174:	490a      	ldr	r1, [pc, #40]	; (80121a0 <PixelDmxParams::Load(char const*, unsigned int)+0x3c>)
 8012176:	4602      	mov	r2, r0
 8012178:	4668      	mov	r0, sp
 801217a:	f005 faf7 	bl	801776c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801217e:	4632      	mov	r2, r6
 8012180:	4629      	mov	r1, r5
 8012182:	4668      	mov	r0, sp
 8012184:	f005 faf6 	bl	8017774 <ReadConfigFile::Read(char const*, unsigned int)>
 8012188:	4621      	mov	r1, r4
 801218a:	f851 0b04 	ldr.w	r0, [r1], #4
 801218e:	6803      	ldr	r3, [r0, #0]
 8012190:	689b      	ldr	r3, [r3, #8]
 8012192:	4798      	blx	r3
 8012194:	4668      	mov	r0, sp
 8012196:	f005 faec 	bl	8017772 <ReadConfigFile::~ReadConfigFile()>
 801219a:	b002      	add	sp, #8
 801219c:	bd70      	pop	{r4, r5, r6, pc}
 801219e:	4770      	bx	lr
 80121a0:	08012465 	stmdaeq	r1, {r0, r2, r5, r6, sl, sp}

080121a4 <PixelDmxParams::callbackFunction(char const*)>:
 80121a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121a8:	b08a      	sub	sp, #40	; 0x28
 80121aa:	460d      	mov	r5, r1
 80121ac:	2308      	movs	r3, #8
 80121ae:	4604      	mov	r4, r0
 80121b0:	9304      	str	r3, [sp, #16]
 80121b2:	499e      	ldr	r1, [pc, #632]	; (801242c <PixelDmxParams::callbackFunction(char const*)+0x288>)
 80121b4:	ab04      	add	r3, sp, #16
 80121b6:	aa06      	add	r2, sp, #24
 80121b8:	4628      	mov	r0, r5
 80121ba:	f005 fb0f 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 80121be:	b9a0      	cbnz	r0, 80121ea <PixelDmxParams::callbackFunction(char const*)+0x46>
 80121c0:	9b04      	ldr	r3, [sp, #16]
 80121c2:	3328      	adds	r3, #40	; 0x28
 80121c4:	446b      	add	r3, sp
 80121c6:	f803 0c10 	strb.w	r0, [r3, #-16]
 80121ca:	a806      	add	r0, sp, #24
 80121cc:	f000 fc86 	bl	8012adc <PixelType::GetType(char const*)>
 80121d0:	6863      	ldr	r3, [r4, #4]
 80121d2:	280e      	cmp	r0, #14
 80121d4:	bf0d      	iteet	eq
 80121d6:	2203      	moveq	r2, #3
 80121d8:	7220      	strbne	r0, [r4, #8]
 80121da:	f043 0301 	orrne.w	r3, r3, #1
 80121de:	7222      	strbeq	r2, [r4, #8]
 80121e0:	bf08      	it	eq
 80121e2:	f023 0301 	biceq.w	r3, r3, #1
 80121e6:	6063      	str	r3, [r4, #4]
 80121e8:	e033      	b.n	8012252 <PixelDmxParams::callbackFunction(char const*)+0xae>
 80121ea:	4991      	ldr	r1, [pc, #580]	; (8012430 <PixelDmxParams::callbackFunction(char const*)+0x28c>)
 80121ec:	f10d 020a 	add.w	r2, sp, #10
 80121f0:	4628      	mov	r0, r5
 80121f2:	f005 fba8 	bl	8017946 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 80121f6:	b990      	cbnz	r0, 801221e <PixelDmxParams::callbackFunction(char const*)+0x7a>
 80121f8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80121fc:	6863      	ldr	r3, [r4, #4]
 80121fe:	1e51      	subs	r1, r2, #1
 8012200:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 8012204:	bf2d      	iteet	cs
 8012206:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 801220a:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 801220e:	f043 0302 	orrcc.w	r3, r3, #2
 8012212:	7262      	strbcs	r2, [r4, #9]
 8012214:	bf24      	itt	cs
 8012216:	72a0      	strbcs	r0, [r4, #10]
 8012218:	f023 0302 	biccs.w	r3, r3, #2
 801221c:	e7e3      	b.n	80121e6 <PixelDmxParams::callbackFunction(char const*)+0x42>
 801221e:	2303      	movs	r3, #3
 8012220:	9304      	str	r3, [sp, #16]
 8012222:	4984      	ldr	r1, [pc, #528]	; (8012434 <PixelDmxParams::callbackFunction(char const*)+0x290>)
 8012224:	ab04      	add	r3, sp, #16
 8012226:	aa06      	add	r2, sp, #24
 8012228:	4628      	mov	r0, r5
 801222a:	f005 fad7 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 801222e:	b998      	cbnz	r0, 8012258 <PixelDmxParams::callbackFunction(char const*)+0xb4>
 8012230:	9b04      	ldr	r3, [sp, #16]
 8012232:	3328      	adds	r3, #40	; 0x28
 8012234:	446b      	add	r3, sp
 8012236:	f803 0c10 	strb.w	r0, [r3, #-16]
 801223a:	a806      	add	r0, sp, #24
 801223c:	f000 fc72 	bl	8012b24 <PixelType::GetMap(char const*)>
 8012240:	6863      	ldr	r3, [r4, #4]
 8012242:	75e0      	strb	r0, [r4, #23]
 8012244:	2806      	cmp	r0, #6
 8012246:	bf14      	ite	ne
 8012248:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 801224c:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 8012250:	6063      	str	r3, [r4, #4]
 8012252:	b00a      	add	sp, #40	; 0x28
 8012254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012258:	4977      	ldr	r1, [pc, #476]	; (8012438 <PixelDmxParams::callbackFunction(char const*)+0x294>)
 801225a:	aa03      	add	r2, sp, #12
 801225c:	4628      	mov	r0, r5
 801225e:	f005 fad6 	bl	801780e <Sscan::Float(char const*, char const*, float&)>
 8012262:	b968      	cbnz	r0, 8012280 <PixelDmxParams::callbackFunction(char const*)+0xdc>
 8012264:	ed9d 0a03 	vldr	s0, [sp, #12]
 8012268:	f000 fcc8 	bl	8012bfc <PixelType::ConvertTxH(float)>
 801226c:	6863      	ldr	r3, [r4, #4]
 801226e:	b120      	cbz	r0, 801227a <PixelDmxParams::callbackFunction(char const*)+0xd6>
 8012270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012274:	6063      	str	r3, [r4, #4]
 8012276:	7620      	strb	r0, [r4, #24]
 8012278:	e7eb      	b.n	8012252 <PixelDmxParams::callbackFunction(char const*)+0xae>
 801227a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801227e:	e7f9      	b.n	8012274 <PixelDmxParams::callbackFunction(char const*)+0xd0>
 8012280:	496e      	ldr	r1, [pc, #440]	; (801243c <PixelDmxParams::callbackFunction(char const*)+0x298>)
 8012282:	aa03      	add	r2, sp, #12
 8012284:	4628      	mov	r0, r5
 8012286:	f005 fac2 	bl	801780e <Sscan::Float(char const*, char const*, float&)>
 801228a:	b968      	cbnz	r0, 80122a8 <PixelDmxParams::callbackFunction(char const*)+0x104>
 801228c:	ed9d 0a03 	vldr	s0, [sp, #12]
 8012290:	f000 fcb4 	bl	8012bfc <PixelType::ConvertTxH(float)>
 8012294:	6863      	ldr	r3, [r4, #4]
 8012296:	b120      	cbz	r0, 80122a2 <PixelDmxParams::callbackFunction(char const*)+0xfe>
 8012298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801229c:	6063      	str	r3, [r4, #4]
 801229e:	7660      	strb	r0, [r4, #25]
 80122a0:	e7d7      	b.n	8012252 <PixelDmxParams::callbackFunction(char const*)+0xae>
 80122a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80122a6:	e7f9      	b.n	801229c <PixelDmxParams::callbackFunction(char const*)+0xf8>
 80122a8:	4965      	ldr	r1, [pc, #404]	; (8012440 <PixelDmxParams::callbackFunction(char const*)+0x29c>)
 80122aa:	f10d 020a 	add.w	r2, sp, #10
 80122ae:	4628      	mov	r0, r5
 80122b0:	f005 fb49 	bl	8017946 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 80122b4:	b998      	cbnz	r0, 80122de <PixelDmxParams::callbackFunction(char const*)+0x13a>
 80122b6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80122ba:	6863      	ldr	r3, [r4, #4]
 80122bc:	1e8a      	subs	r2, r1, #2
 80122be:	b292      	uxth	r2, r2
 80122c0:	f240 25a6 	movw	r5, #678	; 0x2a6
 80122c4:	42aa      	cmp	r2, r5
 80122c6:	bf81      	itttt	hi
 80122c8:	2201      	movhi	r2, #1
 80122ca:	7562      	strbhi	r2, [r4, #21]
 80122cc:	75a0      	strbhi	r0, [r4, #22]
 80122ce:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 80122d2:	bf9c      	itt	ls
 80122d4:	f8a4 1015 	strhls.w	r1, [r4, #21]
 80122d8:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 80122dc:	e783      	b.n	80121e6 <PixelDmxParams::callbackFunction(char const*)+0x42>
 80122de:	4959      	ldr	r1, [pc, #356]	; (8012444 <PixelDmxParams::callbackFunction(char const*)+0x2a0>)
 80122e0:	aa05      	add	r2, sp, #20
 80122e2:	4628      	mov	r0, r5
 80122e4:	f005 fb4e 	bl	8017984 <Sscan::Uint32(char const*, char const*, unsigned int&)>
 80122e8:	b960      	cbnz	r0, 8012304 <PixelDmxParams::callbackFunction(char const*)+0x160>
 80122ea:	9a05      	ldr	r2, [sp, #20]
 80122ec:	4956      	ldr	r1, [pc, #344]	; (8012448 <PixelDmxParams::callbackFunction(char const*)+0x2a4>)
 80122ee:	6863      	ldr	r3, [r4, #4]
 80122f0:	f8c4 200e 	str.w	r2, [r4, #14]
 80122f4:	428a      	cmp	r2, r1
 80122f6:	bf14      	ite	ne
 80122f8:	f043 0310 	orrne.w	r3, r3, #16
 80122fc:	f023 0310 	biceq.w	r3, r3, #16
 8012300:	6063      	str	r3, [r4, #4]
 8012302:	e7a6      	b.n	8012252 <PixelDmxParams::callbackFunction(char const*)+0xae>
 8012304:	4951      	ldr	r1, [pc, #324]	; (801244c <PixelDmxParams::callbackFunction(char const*)+0x2a8>)
 8012306:	f10d 0209 	add.w	r2, sp, #9
 801230a:	4628      	mov	r0, r5
 801230c:	f005 fb63 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012310:	b988      	cbnz	r0, 8012336 <PixelDmxParams::callbackFunction(char const*)+0x192>
 8012312:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8012316:	6863      	ldr	r3, [r4, #4]
 8012318:	1e4a      	subs	r2, r1, #1
 801231a:	b2d2      	uxtb	r2, r2
 801231c:	2afd      	cmp	r2, #253	; 0xfd
 801231e:	bf89      	itett	hi
 8012320:	f023 0320 	bichi.w	r3, r3, #32
 8012324:	f043 0320 	orrls.w	r3, r3, #32
 8012328:	6063      	strhi	r3, [r4, #4]
 801232a:	23ff      	movhi	r3, #255	; 0xff
 801232c:	bf9a      	itte	ls
 801232e:	6063      	strls	r3, [r4, #4]
 8012330:	74a1      	strbls	r1, [r4, #18]
 8012332:	74a3      	strbhi	r3, [r4, #18]
 8012334:	e78d      	b.n	8012252 <PixelDmxParams::callbackFunction(char const*)+0xae>
 8012336:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8012460 <PixelDmxParams::callbackFunction(char const*)+0x2bc>
 801233a:	f104 071a 	add.w	r7, r4, #26
 801233e:	2600      	movs	r6, #0
 8012340:	f04f 0814 	mov.w	r8, #20
 8012344:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 8012348:	f10d 020a 	add.w	r2, sp, #10
 801234c:	fb08 9106 	mla	r1, r8, r6, r9
 8012350:	4628      	mov	r0, r5
 8012352:	f005 faf8 	bl	8017946 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 8012356:	b940      	cbnz	r0, 801236a <PixelDmxParams::callbackFunction(char const*)+0x1c6>
 8012358:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801235c:	6863      	ldr	r3, [r4, #4]
 801235e:	fa0a f106 	lsl.w	r1, sl, r6
 8012362:	b1ea      	cbz	r2, 80123a0 <PixelDmxParams::callbackFunction(char const*)+0x1fc>
 8012364:	803a      	strh	r2, [r7, #0]
 8012366:	430b      	orrs	r3, r1
 8012368:	6063      	str	r3, [r4, #4]
 801236a:	3601      	adds	r6, #1
 801236c:	2e10      	cmp	r6, #16
 801236e:	f107 0702 	add.w	r7, r7, #2
 8012372:	d1e9      	bne.n	8012348 <PixelDmxParams::callbackFunction(char const*)+0x1a4>
 8012374:	4936      	ldr	r1, [pc, #216]	; (8012450 <PixelDmxParams::callbackFunction(char const*)+0x2ac>)
 8012376:	f10d 0209 	add.w	r2, sp, #9
 801237a:	4628      	mov	r0, r5
 801237c:	f005 fb2b 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012380:	b9a0      	cbnz	r0, 80123ac <PixelDmxParams::callbackFunction(char const*)+0x208>
 8012382:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8012386:	6863      	ldr	r3, [r4, #4]
 8012388:	1e91      	subs	r1, r2, #2
 801238a:	290e      	cmp	r1, #14
 801238c:	bf8d      	iteet	hi
 801238e:	2201      	movhi	r2, #1
 8012390:	74e2      	strbls	r2, [r4, #19]
 8012392:	f043 0340 	orrls.w	r3, r3, #64	; 0x40
 8012396:	74e2      	strbhi	r2, [r4, #19]
 8012398:	bf88      	it	hi
 801239a:	f023 0340 	bichi.w	r3, r3, #64	; 0x40
 801239e:	e722      	b.n	80121e6 <PixelDmxParams::callbackFunction(char const*)+0x42>
 80123a0:	00b2      	lsls	r2, r6, #2
 80123a2:	3201      	adds	r2, #1
 80123a4:	803a      	strh	r2, [r7, #0]
 80123a6:	ea23 0301 	bic.w	r3, r3, r1
 80123aa:	e7dd      	b.n	8012368 <PixelDmxParams::callbackFunction(char const*)+0x1c4>
 80123ac:	4929      	ldr	r1, [pc, #164]	; (8012454 <PixelDmxParams::callbackFunction(char const*)+0x2b0>)
 80123ae:	f10d 0209 	add.w	r2, sp, #9
 80123b2:	4628      	mov	r0, r5
 80123b4:	f005 fb0f 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80123b8:	b960      	cbnz	r0, 80123d4 <PixelDmxParams::callbackFunction(char const*)+0x230>
 80123ba:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80123be:	6863      	ldr	r3, [r4, #4]
 80123c0:	1e51      	subs	r1, r2, #1
 80123c2:	2904      	cmp	r1, #4
 80123c4:	bf99      	ittee	ls
 80123c6:	7522      	strbls	r2, [r4, #20]
 80123c8:	f043 0308 	orrls.w	r3, r3, #8
 80123cc:	7520      	strbhi	r0, [r4, #20]
 80123ce:	f023 0308 	bichi.w	r3, r3, #8
 80123d2:	e708      	b.n	80121e6 <PixelDmxParams::callbackFunction(char const*)+0x42>
 80123d4:	4920      	ldr	r1, [pc, #128]	; (8012458 <PixelDmxParams::callbackFunction(char const*)+0x2b4>)
 80123d6:	f10d 0209 	add.w	r2, sp, #9
 80123da:	4628      	mov	r0, r5
 80123dc:	f005 fafb 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80123e0:	b948      	cbnz	r0, 80123f6 <PixelDmxParams::callbackFunction(char const*)+0x252>
 80123e2:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80123e6:	6863      	ldr	r3, [r4, #4]
 80123e8:	b112      	cbz	r2, 80123f0 <PixelDmxParams::callbackFunction(char const*)+0x24c>
 80123ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123ee:	e6fa      	b.n	80121e6 <PixelDmxParams::callbackFunction(char const*)+0x42>
 80123f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80123f4:	e6f7      	b.n	80121e6 <PixelDmxParams::callbackFunction(char const*)+0x42>
 80123f6:	4919      	ldr	r1, [pc, #100]	; (801245c <PixelDmxParams::callbackFunction(char const*)+0x2b8>)
 80123f8:	aa03      	add	r2, sp, #12
 80123fa:	4628      	mov	r0, r5
 80123fc:	f005 fa07 	bl	801780e <Sscan::Float(char const*, char const*, float&)>
 8012400:	2800      	cmp	r0, #0
 8012402:	f47f af26 	bne.w	8012252 <PixelDmxParams::callbackFunction(char const*)+0xae>
 8012406:	eddd 7a03 	vldr	s15, [sp, #12]
 801240a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801240e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012416:	edcd 7a01 	vstr	s15, [sp, #4]
 801241a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801241e:	f1a3 0214 	sub.w	r2, r3, #20
 8012422:	2a05      	cmp	r2, #5
 8012424:	bf8c      	ite	hi
 8012426:	7360      	strbhi	r0, [r4, #13]
 8012428:	7363      	strbls	r3, [r4, #13]
 801242a:	e712      	b.n	8012252 <PixelDmxParams::callbackFunction(char const*)+0xae>
 801242c:	0801d945 	stmdaeq	r1, {r0, r2, r6, r8, fp, ip, lr, pc}
 8012430:	0801d94e 	stmdaeq	r1, {r1, r2, r3, r6, r8, fp, ip, lr, pc}
 8012434:	0801d935 	stmdaeq	r1, {r0, r2, r4, r5, r8, fp, ip, lr, pc}
 8012438:	0801d958 	stmdaeq	r1, {r3, r4, r6, r8, fp, ip, lr, pc}
 801243c:	0801d960 	stmdaeq	r1, {r5, r6, r8, fp, ip, lr, pc}
 8012440:	0801d902 	stmdaeq	r1, {r1, r8, fp, ip, lr, pc}
 8012444:	0801d8e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, fp, ip, lr, pc}
 8012448:	003d0900 	eorseq	r0, sp, r0, lsl #18
 801244c:	0801d923 	stmdaeq	r1, {r0, r1, r5, r8, fp, ip, lr, pc}
 8012450:	0801d8cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, fp, ip, lr, pc}
 8012454:	0801d8f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, fp, ip, lr, pc}
 8012458:	0801d912 	stmdaeq	r1, {r1, r4, r8, fp, ip, lr, pc}
 801245c:	0801d8da 	stmdaeq	r1, {r1, r3, r4, r6, r7, fp, ip, lr, pc}
 8012460:	0801d9e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, fp, ip, lr, pc}

08012464 <PixelDmxParams::staticCallbackFunction(void*, char const*)>:
 8012464:	f7ff be9e 	b.w	80121a4 <PixelDmxParams::callbackFunction(char const*)>

08012468 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)>:
 8012468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801246c:	4604      	mov	r4, r0
 801246e:	b086      	sub	sp, #24
 8012470:	4615      	mov	r5, r2
 8012472:	461e      	mov	r6, r3
 8012474:	3004      	adds	r0, #4
 8012476:	b389      	cbz	r1, 80124dc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x74>
 8012478:	2236      	movs	r2, #54	; 0x36
 801247a:	f006 f80a 	bl	8018492 <memmove>
 801247e:	462a      	mov	r2, r5
 8012480:	499b      	ldr	r1, [pc, #620]	; (80126f0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 8012482:	4633      	mov	r3, r6
 8012484:	a803      	add	r0, sp, #12
 8012486:	f005 f8d1 	bl	801762c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 801248a:	7a20      	ldrb	r0, [r4, #8]
 801248c:	f000 fb1a 	bl	8012ac4 <PixelType::GetType(pixel::Type)>
 8012490:	6863      	ldr	r3, [r4, #4]
 8012492:	4998      	ldr	r1, [pc, #608]	; (80126f4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 8012494:	4602      	mov	r2, r0
 8012496:	f003 0301 	and.w	r3, r3, #1
 801249a:	a803      	add	r0, sp, #12
 801249c:	f7ff fdcc 	bl	8012038 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 80124a0:	6863      	ldr	r3, [r4, #4]
 80124a2:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 80124a6:	4994      	ldr	r1, [pc, #592]	; (80126f8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 80124a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80124ac:	a803      	add	r0, sp, #12
 80124ae:	f7ff fd9b 	bl	8011fe8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 80124b2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80124b6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80124ba:	6863      	ldr	r3, [r4, #4]
 80124bc:	42aa      	cmp	r2, r5
 80124be:	d227      	bcs.n	8012510 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xa8>
 80124c0:	9803      	ldr	r0, [sp, #12]
 80124c2:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80124c6:	4410      	add	r0, r2
 80124c8:	eba5 0502 	sub.w	r5, r5, r2
 80124cc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80124d0:	d10b      	bne.n	80124ea <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 80124d2:	b96a      	cbnz	r2, 80124f0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x88>
 80124d4:	9200      	str	r2, [sp, #0]
 80124d6:	4b89      	ldr	r3, [pc, #548]	; (80126fc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 80124d8:	4a89      	ldr	r2, [pc, #548]	; (8012700 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 80124da:	e00f      	b.n	80124fc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x94>
 80124dc:	6823      	ldr	r3, [r4, #0]
 80124de:	681a      	ldr	r2, [r3, #0]
 80124e0:	4601      	mov	r1, r0
 80124e2:	68d2      	ldr	r2, [r2, #12]
 80124e4:	4618      	mov	r0, r3
 80124e6:	4790      	blx	r2
 80124e8:	e7c9      	b.n	801247e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 80124ea:	2a00      	cmp	r2, #0
 80124ec:	f000 8087 	beq.w	80125fe <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x196>
 80124f0:	3b00      	subs	r3, #0
 80124f2:	bf18      	it	ne
 80124f4:	2301      	movne	r3, #1
 80124f6:	9300      	str	r3, [sp, #0]
 80124f8:	4a82      	ldr	r2, [pc, #520]	; (8012704 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 80124fa:	4b80      	ldr	r3, [pc, #512]	; (80126fc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 80124fc:	4629      	mov	r1, r5
 80124fe:	f7f8 f85d 	bl	800a5bc <snprintf>
 8012502:	4285      	cmp	r5, r0
 8012504:	bfa2      	ittt	ge
 8012506:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 801250a:	18c0      	addge	r0, r0, r3
 801250c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8012510:	7b63      	ldrb	r3, [r4, #13]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d178      	bne.n	8012608 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1a0>
 8012516:	4a7c      	ldr	r2, [pc, #496]	; (8012708 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 8012518:	497c      	ldr	r1, [pc, #496]	; (801270c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 801251a:	a803      	add	r0, sp, #12
 801251c:	f7ff fd8c 	bl	8012038 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 8012520:	497b      	ldr	r1, [pc, #492]	; (8012710 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 8012522:	a803      	add	r0, sp, #12
 8012524:	f005 f908 	bl	8017738 <PropertiesBuilder::AddComment(char const*)>
 8012528:	6863      	ldr	r3, [r4, #4]
 801252a:	059e      	lsls	r6, r3, #22
 801252c:	d403      	bmi.n	8012536 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xce>
 801252e:	7a20      	ldrb	r0, [r4, #8]
 8012530:	f000 fb2c 	bl	8012b8c <PixelType::GetMap(pixel::Type)>
 8012534:	75e0      	strb	r0, [r4, #23]
 8012536:	7de0      	ldrb	r0, [r4, #23]
 8012538:	f000 fb1c 	bl	8012b74 <PixelType::GetMap(pixel::Map)>
 801253c:	6863      	ldr	r3, [r4, #4]
 801253e:	4975      	ldr	r1, [pc, #468]	; (8012714 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 8012540:	4602      	mov	r2, r0
 8012542:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8012546:	a803      	add	r0, sp, #12
 8012548:	f7ff fd76 	bl	8012038 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 801254c:	6863      	ldr	r3, [r4, #4]
 801254e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012552:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012556:	d011      	beq.n	801257c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x114>
 8012558:	f10d 020b 	add.w	r2, sp, #11
 801255c:	7a20      	ldrb	r0, [r4, #8]
 801255e:	f10d 010a 	add.w	r1, sp, #10
 8012562:	f000 f9a3 	bl	80128ac <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 8012566:	6863      	ldr	r3, [r4, #4]
 8012568:	055d      	lsls	r5, r3, #21
 801256a:	bf5c      	itt	pl
 801256c:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 8012570:	7622      	strbpl	r2, [r4, #24]
 8012572:	0518      	lsls	r0, r3, #20
 8012574:	bf5c      	itt	pl
 8012576:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 801257a:	7663      	strbpl	r3, [r4, #25]
 801257c:	4966      	ldr	r1, [pc, #408]	; (8012718 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 801257e:	a803      	add	r0, sp, #12
 8012580:	f005 f8da 	bl	8017738 <PropertiesBuilder::AddComment(char const*)>
 8012584:	7e20      	ldrb	r0, [r4, #24]
 8012586:	f000 fb0b 	bl	8012ba0 <PixelType::ConvertTxH(unsigned char)>
 801258a:	6862      	ldr	r2, [r4, #4]
 801258c:	4963      	ldr	r1, [pc, #396]	; (801271c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 801258e:	2302      	movs	r3, #2
 8012590:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8012594:	a803      	add	r0, sp, #12
 8012596:	f7ff fd77 	bl	8012088 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 801259a:	7e60      	ldrb	r0, [r4, #25]
 801259c:	f000 fb00 	bl	8012ba0 <PixelType::ConvertTxH(unsigned char)>
 80125a0:	6862      	ldr	r2, [r4, #4]
 80125a2:	495f      	ldr	r1, [pc, #380]	; (8012720 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 80125a4:	2302      	movs	r3, #2
 80125a6:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 80125aa:	a803      	add	r0, sp, #12
 80125ac:	f7ff fd6c 	bl	8012088 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 80125b0:	495c      	ldr	r1, [pc, #368]	; (8012724 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 80125b2:	a803      	add	r0, sp, #12
 80125b4:	f005 f8c0 	bl	8017738 <PropertiesBuilder::AddComment(char const*)>
 80125b8:	6863      	ldr	r3, [r4, #4]
 80125ba:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 80125be:	495a      	ldr	r1, [pc, #360]	; (8012728 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 80125c0:	f3c3 2300 	ubfx	r3, r3, #8, #1
 80125c4:	a803      	add	r0, sp, #12
 80125c6:	f7ff fd0f 	bl	8011fe8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 80125ca:	4958      	ldr	r1, [pc, #352]	; (801272c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 80125cc:	a803      	add	r0, sp, #12
 80125ce:	f005 f8b3 	bl	8017738 <PropertiesBuilder::AddComment(char const*)>
 80125d2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80125d6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80125da:	f8d4 300e 	ldr.w	r3, [r4, #14]
 80125de:	6861      	ldr	r1, [r4, #4]
 80125e0:	42aa      	cmp	r2, r5
 80125e2:	d22f      	bcs.n	8012644 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 80125e4:	9803      	ldr	r0, [sp, #12]
 80125e6:	06c9      	lsls	r1, r1, #27
 80125e8:	4410      	add	r0, r2
 80125ea:	eba5 0502 	sub.w	r5, r5, r2
 80125ee:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80125f2:	d418      	bmi.n	8012626 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1be>
 80125f4:	b9ca      	cbnz	r2, 801262a <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c2>
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	4a41      	ldr	r2, [pc, #260]	; (8012700 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 80125fa:	4b4d      	ldr	r3, [pc, #308]	; (8012730 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 80125fc:	e018      	b.n	8012630 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c8>
 80125fe:	2301      	movs	r3, #1
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	4a4c      	ldr	r2, [pc, #304]	; (8012734 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 8012604:	4b3d      	ldr	r3, [pc, #244]	; (80126fc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 8012606:	e779      	b.n	80124fc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x94>
 8012608:	ee07 3a90 	vmov	s15, r3
 801260c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012610:	2301      	movs	r3, #1
 8012612:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012616:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801261a:	493c      	ldr	r1, [pc, #240]	; (801270c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 801261c:	461a      	mov	r2, r3
 801261e:	a803      	add	r0, sp, #12
 8012620:	f7ff fd32 	bl	8012088 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 8012624:	e77c      	b.n	8012520 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xb8>
 8012626:	2a00      	cmp	r2, #0
 8012628:	d05e      	beq.n	80126e8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x280>
 801262a:	9300      	str	r3, [sp, #0]
 801262c:	4a35      	ldr	r2, [pc, #212]	; (8012704 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 801262e:	4b40      	ldr	r3, [pc, #256]	; (8012730 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 8012630:	4629      	mov	r1, r5
 8012632:	f7f7 ffc3 	bl	800a5bc <snprintf>
 8012636:	4285      	cmp	r5, r0
 8012638:	bfa2      	ittt	ge
 801263a:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 801263e:	18c0      	addge	r0, r0, r3
 8012640:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8012644:	493c      	ldr	r1, [pc, #240]	; (8012738 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 8012646:	4e3d      	ldr	r6, [pc, #244]	; (801273c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 8012648:	a803      	add	r0, sp, #12
 801264a:	f005 f875 	bl	8017738 <PropertiesBuilder::AddComment(char const*)>
 801264e:	6863      	ldr	r3, [r4, #4]
 8012650:	7ca2      	ldrb	r2, [r4, #18]
 8012652:	493b      	ldr	r1, [pc, #236]	; (8012740 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 8012654:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012658:	a803      	add	r0, sp, #12
 801265a:	f7ff fc9d 	bl	8011f98 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 801265e:	f104 0718 	add.w	r7, r4, #24
 8012662:	2500      	movs	r5, #0
 8012664:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8012668:	6862      	ldr	r2, [r4, #4]
 801266a:	fa08 f305 	lsl.w	r3, r8, r5
 801266e:	4393      	bics	r3, r2
 8012670:	bf0c      	ite	eq
 8012672:	2301      	moveq	r3, #1
 8012674:	2300      	movne	r3, #0
 8012676:	4631      	mov	r1, r6
 8012678:	f837 2f02 	ldrh.w	r2, [r7, #2]!
 801267c:	a803      	add	r0, sp, #12
 801267e:	3501      	adds	r5, #1
 8012680:	f7ff fcb2 	bl	8011fe8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 8012684:	2d10      	cmp	r5, #16
 8012686:	f106 0614 	add.w	r6, r6, #20
 801268a:	d1ed      	bne.n	8012668 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x200>
 801268c:	6863      	ldr	r3, [r4, #4]
 801268e:	7ce2      	ldrb	r2, [r4, #19]
 8012690:	492c      	ldr	r1, [pc, #176]	; (8012744 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 8012692:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8012696:	a803      	add	r0, sp, #12
 8012698:	f7ff fc7e 	bl	8011f98 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 801269c:	492a      	ldr	r1, [pc, #168]	; (8012748 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2e0>)
 801269e:	a803      	add	r0, sp, #12
 80126a0:	f005 f84a 	bl	8017738 <PropertiesBuilder::AddComment(char const*)>
 80126a4:	6863      	ldr	r3, [r4, #4]
 80126a6:	7d22      	ldrb	r2, [r4, #20]
 80126a8:	4928      	ldr	r1, [pc, #160]	; (801274c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2e4>)
 80126aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80126ae:	a803      	add	r0, sp, #12
 80126b0:	f7ff fc72 	bl	8011f98 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80126b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80126b8:	b17b      	cbz	r3, 80126da <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x272>
 80126ba:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80126be:	9b03      	ldr	r3, [sp, #12]
 80126c0:	4413      	add	r3, r2
 80126c2:	227d      	movs	r2, #125	; 0x7d
 80126c4:	f803 2c01 	strb.w	r2, [r3, #-1]
 80126c8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80126cc:	9903      	ldr	r1, [sp, #12]
 80126ce:	54ca      	strb	r2, [r1, r3]
 80126d0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80126d4:	3301      	adds	r3, #1
 80126d6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80126da:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80126de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126e0:	601a      	str	r2, [r3, #0]
 80126e2:	b006      	add	sp, #24
 80126e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126e8:	9300      	str	r3, [sp, #0]
 80126ea:	4a12      	ldr	r2, [pc, #72]	; (8012734 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 80126ec:	4b10      	ldr	r3, [pc, #64]	; (8012730 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 80126ee:	e79f      	b.n	8012630 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c8>
 80126f0:	0801d968 	stmdaeq	r1, {r3, r5, r6, r8, fp, ip, lr, pc}
 80126f4:	0801d945 	stmdaeq	r1, {r0, r2, r6, r8, fp, ip, lr, pc}
 80126f8:	0801d94e 	stmdaeq	r1, {r1, r2, r3, r6, r8, fp, ip, lr, pc}
 80126fc:	0801d912 	stmdaeq	r1, {r1, r4, r8, fp, ip, lr, pc}
 8012700:	0801aff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8012704:	0801afec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8012708:	0801c851 	stmdaeq	r1, {r0, r4, r6, fp, lr, pc}
 801270c:	0801d8da 	stmdaeq	r1, {r1, r3, r4, r6, r7, fp, ip, lr, pc}
 8012710:	0801c85b 	stmdaeq	r1, {r0, r1, r3, r4, r6, fp, lr, pc}
 8012714:	0801d935 	stmdaeq	r1, {r0, r2, r4, r5, r8, fp, ip, lr, pc}
 8012718:	0801c86f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, fp, lr, pc}
 801271c:	0801d958 	stmdaeq	r1, {r3, r4, r6, r8, fp, ip, lr, pc}
 8012720:	0801d960 	stmdaeq	r1, {r5, r6, r8, fp, ip, lr, pc}
 8012724:	0801c885 	stmdaeq	r1, {r0, r2, r7, fp, lr, pc}
 8012728:	0801d902 	stmdaeq	r1, {r1, r8, fp, ip, lr, pc}
 801272c:	0801c88e 	stmdaeq	r1, {r1, r2, r3, r7, fp, lr, pc}
 8012730:	0801d8e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, fp, ip, lr, pc}
 8012734:	0801aff6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8012738:	0801c8a0 	stmdaeq	r1, {r5, r7, fp, lr, pc}
 801273c:	0801d9e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, fp, ip, lr, pc}
 8012740:	0801d923 	stmdaeq	r1, {r0, r1, r5, r8, fp, ip, lr, pc}
 8012744:	0801d8cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, fp, ip, lr, pc}
 8012748:	0801c8ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, fp, lr, pc}
 801274c:	0801d8f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, fp, ip, lr, pc}

08012750 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)>:
 8012750:	b513      	push	{r0, r1, r4, lr}
 8012752:	6804      	ldr	r4, [r0, #0]
 8012754:	b914      	cbnz	r4, 801275c <PixelDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8012756:	601c      	str	r4, [r3, #0]
 8012758:	b002      	add	sp, #8
 801275a:	bd10      	pop	{r4, pc}
 801275c:	9300      	str	r3, [sp, #0]
 801275e:	4613      	mov	r3, r2
 8012760:	460a      	mov	r2, r1
 8012762:	2100      	movs	r1, #0
 8012764:	f7ff fe80 	bl	8012468 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)>
 8012768:	e7f6      	b.n	8012758 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

0801276a <PixelDmxParams::Set(PixelDmxConfiguration*)>:
 801276a:	6843      	ldr	r3, [r0, #4]
 801276c:	07da      	lsls	r2, r3, #31
 801276e:	bf44      	itt	mi
 8012770:	7a02      	ldrbmi	r2, [r0, #8]
 8012772:	600a      	strmi	r2, [r1, #0]
 8012774:	079a      	lsls	r2, r3, #30
 8012776:	d505      	bpl.n	8012784 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 8012778:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 801277c:	2a00      	cmp	r2, #0
 801277e:	bf08      	it	eq
 8012780:	22aa      	moveq	r2, #170	; 0xaa
 8012782:	604a      	str	r2, [r1, #4]
 8012784:	059a      	lsls	r2, r3, #22
 8012786:	bf44      	itt	mi
 8012788:	7dc2      	ldrbmi	r2, [r0, #23]
 801278a:	608a      	strmi	r2, [r1, #8]
 801278c:	055a      	lsls	r2, r3, #21
 801278e:	bf44      	itt	mi
 8012790:	7e02      	ldrbmi	r2, [r0, #24]
 8012792:	740a      	strbmi	r2, [r1, #16]
 8012794:	051a      	lsls	r2, r3, #20
 8012796:	bf44      	itt	mi
 8012798:	7e42      	ldrbmi	r2, [r0, #25]
 801279a:	744a      	strbmi	r2, [r1, #17]
 801279c:	06da      	lsls	r2, r3, #27
 801279e:	bf44      	itt	mi
 80127a0:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 80127a4:	60ca      	strmi	r2, [r1, #12]
 80127a6:	069a      	lsls	r2, r3, #26
 80127a8:	bf44      	itt	mi
 80127aa:	7c82      	ldrbmi	r2, [r0, #18]
 80127ac:	748a      	strbmi	r2, [r1, #18]
 80127ae:	061a      	lsls	r2, r3, #24
 80127b0:	d504      	bpl.n	80127bc <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 80127b2:	2201      	movs	r2, #1
 80127b4:	750a      	strb	r2, [r1, #20]
 80127b6:	7b42      	ldrb	r2, [r0, #13]
 80127b8:	b102      	cbz	r2, 80127bc <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 80127ba:	74ca      	strb	r2, [r1, #19]
 80127bc:	075a      	lsls	r2, r3, #29
 80127be:	d50f      	bpl.n	80127e0 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x76>
 80127c0:	7ac2      	ldrb	r2, [r0, #11]
 80127c2:	b510      	push	{r4, lr}
 80127c4:	7b04      	ldrb	r4, [r0, #12]
 80127c6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80127ca:	858a      	strh	r2, [r1, #44]	; 0x2c
 80127cc:	05da      	lsls	r2, r3, #23
 80127ce:	bf44      	itt	mi
 80127d0:	f8b0 2015 	ldrhmi.w	r2, [r0, #21]
 80127d4:	620a      	strmi	r2, [r1, #32]
 80127d6:	065c      	lsls	r4, r3, #25
 80127d8:	bf44      	itt	mi
 80127da:	7cc3      	ldrbmi	r3, [r0, #19]
 80127dc:	61cb      	strmi	r3, [r1, #28]
 80127de:	bd10      	pop	{r4, pc}
 80127e0:	05da      	lsls	r2, r3, #23
 80127e2:	bf44      	itt	mi
 80127e4:	f8b0 2015 	ldrhmi.w	r2, [r0, #21]
 80127e8:	620a      	strmi	r2, [r1, #32]
 80127ea:	065b      	lsls	r3, r3, #25
 80127ec:	bf44      	itt	mi
 80127ee:	7cc3      	ldrbmi	r3, [r0, #19]
 80127f0:	61cb      	strmi	r3, [r1, #28]
 80127f2:	4770      	bx	lr

080127f4 <PixelDmxParams::Dump()>:
 80127f4:	4770      	bx	lr

080127f6 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>:
 80127f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80127f8:	4604      	mov	r4, r0
 80127fa:	460e      	mov	r6, r1
 80127fc:	4611      	mov	r1, r2
 80127fe:	9201      	str	r2, [sp, #4]
 8012800:	461d      	mov	r5, r3
 8012802:	f000 f861 	bl	80128c8 <PixelConfiguration::Validate(unsigned int&)>
 8012806:	7d62      	ldrb	r2, [r4, #21]
 8012808:	b94a      	cbnz	r2, 801281e <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x28>
 801280a:	6823      	ldr	r3, [r4, #0]
 801280c:	9901      	ldr	r1, [sp, #4]
 801280e:	b11b      	cbz	r3, 8012818 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x22>
 8012810:	3b0b      	subs	r3, #11
 8012812:	2b01      	cmp	r3, #1
 8012814:	bf88      	it	hi
 8012816:	6022      	strhi	r2, [r4, #0]
 8012818:	4620      	mov	r0, r4
 801281a:	f000 f855 	bl	80128c8 <PixelConfiguration::Validate(unsigned int&)>
 801281e:	6823      	ldr	r3, [r4, #0]
 8012820:	2b07      	cmp	r3, #7
 8012822:	bf15      	itete	ne
 8012824:	f44f 71aa 	movne.w	r1, #340	; 0x154
 8012828:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801282c:	23aa      	movne	r3, #170	; 0xaa
 801282e:	2380      	moveq	r3, #128	; 0x80
 8012830:	e9c5 3100 	strd	r3, r1, [r5]
 8012834:	6a21      	ldr	r1, [r4, #32]
 8012836:	bf14      	ite	ne
 8012838:	f44f 72ff 	movne.w	r2, #510	; 0x1fe
 801283c:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 8012840:	60aa      	str	r2, [r5, #8]
 8012842:	6862      	ldr	r2, [r4, #4]
 8012844:	b109      	cbz	r1, 801284a <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x54>
 8012846:	4291      	cmp	r1, r2
 8012848:	d900      	bls.n	801284c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x56>
 801284a:	6222      	str	r2, [r4, #32]
 801284c:	69e0      	ldr	r0, [r4, #28]
 801284e:	6a21      	ldr	r1, [r4, #32]
 8012850:	fbb2 f2f1 	udiv	r2, r2, r1
 8012854:	42b0      	cmp	r0, r6
 8012856:	bf28      	it	cs
 8012858:	4630      	movcs	r0, r6
 801285a:	6262      	str	r2, [r4, #36]	; 0x24
 801285c:	2e01      	cmp	r6, #1
 801285e:	f103 0301 	add.w	r3, r3, #1
 8012862:	fbb2 f2f3 	udiv	r2, r2, r3
 8012866:	f102 0301 	add.w	r3, r2, #1
 801286a:	62a3      	str	r3, [r4, #40]	; 0x28
 801286c:	bf1c      	itt	ne
 801286e:	eb03 0380 	addne.w	r3, r3, r0, lsl #2
 8012872:	1f5a      	subne	r2, r3, #5
 8012874:	61e0      	str	r0, [r4, #28]
 8012876:	60ea      	str	r2, [r5, #12]
 8012878:	b002      	add	sp, #8
 801287a:	bd70      	pop	{r4, r5, r6, pc}

0801287c <PixelDmxConfiguration::Print()>:
 801287c:	b510      	push	{r4, lr}
 801287e:	4604      	mov	r4, r0
 8012880:	f000 f8b8 	bl	80129f4 <PixelConfiguration::Print()>
 8012884:	4806      	ldr	r0, [pc, #24]	; (80128a0 <PixelDmxConfiguration::Print()+0x24>)
 8012886:	f7f7 fe71 	bl	800a56c <printf>
 801288a:	69e1      	ldr	r1, [r4, #28]
 801288c:	4805      	ldr	r0, [pc, #20]	; (80128a4 <PixelDmxConfiguration::Print()+0x28>)
 801288e:	f7f7 fe6d 	bl	800a56c <printf>
 8012892:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8012896:	4804      	ldr	r0, [pc, #16]	; (80128a8 <PixelDmxConfiguration::Print()+0x2c>)
 8012898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801289c:	f7f7 be66 	b.w	800a56c <printf>
 80128a0:	0801c8bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, fp, lr, pc}
 80128a4:	0801c8d4 	stmdaeq	r1, {r2, r4, r6, r7, fp, lr, pc}
 80128a8:	0801c8e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, fp, lr, pc}

080128ac <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 80128ac:	23c0      	movs	r3, #192	; 0xc0
 80128ae:	2803      	cmp	r0, #3
 80128b0:	700b      	strb	r3, [r1, #0]
 80128b2:	d006      	beq.n	80128c2 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 80128b4:	3808      	subs	r0, #8
 80128b6:	2803      	cmp	r0, #3
 80128b8:	bf34      	ite	cc
 80128ba:	23fc      	movcc	r3, #252	; 0xfc
 80128bc:	23f0      	movcs	r3, #240	; 0xf0
 80128be:	7013      	strb	r3, [r2, #0]
 80128c0:	4770      	bx	lr
 80128c2:	23f8      	movs	r3, #248	; 0xf8
 80128c4:	e7fb      	b.n	80128be <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

080128c8 <PixelConfiguration::Validate(unsigned int&)>:
 80128c8:	b513      	push	{r0, r1, r4, lr}
 80128ca:	4604      	mov	r4, r0
 80128cc:	6800      	ldr	r0, [r0, #0]
 80128ce:	6863      	ldr	r3, [r4, #4]
 80128d0:	68a2      	ldr	r2, [r4, #8]
 80128d2:	2807      	cmp	r0, #7
 80128d4:	d127      	bne.n	8012926 <PixelConfiguration::Validate(unsigned int&)+0x5e>
 80128d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128da:	bf28      	it	cs
 80128dc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80128e0:	6063      	str	r3, [r4, #4]
 80128e2:	2304      	movs	r3, #4
 80128e4:	600b      	str	r3, [r1, #0]
 80128e6:	2301      	movs	r3, #1
 80128e8:	2a06      	cmp	r2, #6
 80128ea:	7563      	strb	r3, [r4, #21]
 80128ec:	d102      	bne.n	80128f4 <PixelConfiguration::Validate(unsigned int&)+0x2c>
 80128ee:	f000 f94d 	bl	8012b8c <PixelType::GetMap(pixel::Type)>
 80128f2:	60a0      	str	r0, [r4, #8]
 80128f4:	7c63      	ldrb	r3, [r4, #17]
 80128f6:	7c22      	ldrb	r2, [r4, #16]
 80128f8:	6820      	ldr	r0, [r4, #0]
 80128fa:	429a      	cmp	r2, r3
 80128fc:	bf24      	itt	cs
 80128fe:	2300      	movcs	r3, #0
 8012900:	8223      	strhcs	r3, [r4, #16]
 8012902:	f10d 0207 	add.w	r2, sp, #7
 8012906:	f10d 0106 	add.w	r1, sp, #6
 801290a:	f7ff ffcf 	bl	80128ac <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 801290e:	7c23      	ldrb	r3, [r4, #16]
 8012910:	b913      	cbnz	r3, 8012918 <PixelConfiguration::Validate(unsigned int&)+0x50>
 8012912:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012916:	7423      	strb	r3, [r4, #16]
 8012918:	7c63      	ldrb	r3, [r4, #17]
 801291a:	b913      	cbnz	r3, 8012922 <PixelConfiguration::Validate(unsigned int&)+0x5a>
 801291c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012920:	7463      	strb	r3, [r4, #17]
 8012922:	4b2a      	ldr	r3, [pc, #168]	; (80129cc <PixelConfiguration::Validate(unsigned int&)+0x104>)
 8012924:	e01e      	b.n	8012964 <PixelConfiguration::Validate(unsigned int&)+0x9c>
 8012926:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 801292a:	bf28      	it	cs
 801292c:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 8012930:	6063      	str	r3, [r4, #4]
 8012932:	2303      	movs	r3, #3
 8012934:	600b      	str	r3, [r1, #0]
 8012936:	f1a0 030b 	sub.w	r3, r0, #11
 801293a:	2b01      	cmp	r3, #1
 801293c:	d806      	bhi.n	801294c <PixelConfiguration::Validate(unsigned int&)+0x84>
 801293e:	7ca3      	ldrb	r3, [r4, #18]
 8012940:	2b1f      	cmp	r3, #31
 8012942:	d83d      	bhi.n	80129c0 <PixelConfiguration::Validate(unsigned int&)+0xf8>
 8012944:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8012948:	74a3      	strb	r3, [r4, #18]
 801294a:	e001      	b.n	8012950 <PixelConfiguration::Validate(unsigned int&)+0x88>
 801294c:	2800      	cmp	r0, #0
 801294e:	d139      	bne.n	80129c4 <PixelConfiguration::Validate(unsigned int&)+0xfc>
 8012950:	2300      	movs	r3, #0
 8012952:	2a06      	cmp	r2, #6
 8012954:	bf08      	it	eq
 8012956:	60a3      	streq	r3, [r4, #8]
 8012958:	280d      	cmp	r0, #13
 801295a:	7563      	strb	r3, [r4, #21]
 801295c:	68e3      	ldr	r3, [r4, #12]
 801295e:	d119      	bne.n	8012994 <PixelConfiguration::Validate(unsigned int&)+0xcc>
 8012960:	b913      	cbnz	r3, 8012968 <PixelConfiguration::Validate(unsigned int&)+0xa0>
 8012962:	4b1b      	ldr	r3, [pc, #108]	; (80129d0 <PixelConfiguration::Validate(unsigned int&)+0x108>)
 8012964:	60e3      	str	r3, [r4, #12]
 8012966:	e003      	b.n	8012970 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 8012968:	4a1a      	ldr	r2, [pc, #104]	; (80129d4 <PixelConfiguration::Validate(unsigned int&)+0x10c>)
 801296a:	4293      	cmp	r3, r2
 801296c:	d900      	bls.n	8012970 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 801296e:	60e2      	str	r2, [r4, #12]
 8012970:	7d23      	ldrb	r3, [r4, #20]
 8012972:	b31b      	cbz	r3, 80129bc <PixelConfiguration::Validate(unsigned int&)+0xf4>
 8012974:	7ce3      	ldrb	r3, [r4, #19]
 8012976:	b9ab      	cbnz	r3, 80129a4 <PixelConfiguration::Validate(unsigned int&)+0xdc>
 8012978:	6822      	ldr	r2, [r4, #0]
 801297a:	b17a      	cbz	r2, 801299c <PixelConfiguration::Validate(unsigned int&)+0xd4>
 801297c:	f1a2 030b 	sub.w	r3, r2, #11
 8012980:	2b01      	cmp	r3, #1
 8012982:	d90d      	bls.n	80129a0 <PixelConfiguration::Validate(unsigned int&)+0xd8>
 8012984:	4b14      	ldr	r3, [pc, #80]	; (80129d8 <PixelConfiguration::Validate(unsigned int&)+0x110>)
 8012986:	4915      	ldr	r1, [pc, #84]	; (80129dc <PixelConfiguration::Validate(unsigned int&)+0x114>)
 8012988:	2a0d      	cmp	r2, #13
 801298a:	bf08      	it	eq
 801298c:	460b      	moveq	r3, r1
 801298e:	61a3      	str	r3, [r4, #24]
 8012990:	b002      	add	sp, #8
 8012992:	bd10      	pop	{r4, pc}
 8012994:	2b00      	cmp	r3, #0
 8012996:	d0e4      	beq.n	8012962 <PixelConfiguration::Validate(unsigned int&)+0x9a>
 8012998:	4a11      	ldr	r2, [pc, #68]	; (80129e0 <PixelConfiguration::Validate(unsigned int&)+0x118>)
 801299a:	e7e6      	b.n	801296a <PixelConfiguration::Validate(unsigned int&)+0xa2>
 801299c:	4b11      	ldr	r3, [pc, #68]	; (80129e4 <PixelConfiguration::Validate(unsigned int&)+0x11c>)
 801299e:	e7f6      	b.n	801298e <PixelConfiguration::Validate(unsigned int&)+0xc6>
 80129a0:	4b11      	ldr	r3, [pc, #68]	; (80129e8 <PixelConfiguration::Validate(unsigned int&)+0x120>)
 80129a2:	e7f4      	b.n	801298e <PixelConfiguration::Validate(unsigned int&)+0xc6>
 80129a4:	f1a3 0214 	sub.w	r2, r3, #20
 80129a8:	2a05      	cmp	r2, #5
 80129aa:	d807      	bhi.n	80129bc <PixelConfiguration::Validate(unsigned int&)+0xf4>
 80129ac:	3b15      	subs	r3, #21
 80129ae:	2b04      	cmp	r3, #4
 80129b0:	bf96      	itet	ls
 80129b2:	4a0e      	ldrls	r2, [pc, #56]	; (80129ec <PixelConfiguration::Validate(unsigned int&)+0x124>)
 80129b4:	4b0e      	ldrhi	r3, [pc, #56]	; (80129f0 <PixelConfiguration::Validate(unsigned int&)+0x128>)
 80129b6:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 80129ba:	e7e8      	b.n	801298e <PixelConfiguration::Validate(unsigned int&)+0xc6>
 80129bc:	4b07      	ldr	r3, [pc, #28]	; (80129dc <PixelConfiguration::Validate(unsigned int&)+0x114>)
 80129be:	e7e6      	b.n	801298e <PixelConfiguration::Validate(unsigned int&)+0xc6>
 80129c0:	23ff      	movs	r3, #255	; 0xff
 80129c2:	e7c1      	b.n	8012948 <PixelConfiguration::Validate(unsigned int&)+0x80>
 80129c4:	280d      	cmp	r0, #13
 80129c6:	d18e      	bne.n	80128e6 <PixelConfiguration::Validate(unsigned int&)+0x1e>
 80129c8:	e7c2      	b.n	8012950 <PixelConfiguration::Validate(unsigned int&)+0x88>
 80129ca:	bf00      	nop
 80129cc:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 80129d0:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80129d4:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 80129d8:	0801ccdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, sl, fp, lr, pc}
 80129dc:	0801c9dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, fp, lr, pc}
 80129e0:	017d7840 	cmneq	sp, r0, asr #16
 80129e4:	0801cfdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, sl, fp, lr, pc}
 80129e8:	0801d0dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, ip, lr, pc}
 80129ec:	0801c9c8 	stmdaeq	r1, {r3, r6, r7, r8, fp, lr, pc}
 80129f0:	0801cadc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, fp, lr, pc}

080129f4 <PixelConfiguration::Print()>:
 80129f4:	b513      	push	{r0, r1, r4, lr}
 80129f6:	4604      	mov	r4, r0
 80129f8:	4827      	ldr	r0, [pc, #156]	; (8012a98 <PixelConfiguration::Print()+0xa4>)
 80129fa:	f7f7 fdb7 	bl	800a56c <printf>
 80129fe:	6820      	ldr	r0, [r4, #0]
 8012a00:	f000 f860 	bl	8012ac4 <PixelType::GetType(pixel::Type)>
 8012a04:	6822      	ldr	r2, [r4, #0]
 8012a06:	4601      	mov	r1, r0
 8012a08:	4824      	ldr	r0, [pc, #144]	; (8012a9c <PixelConfiguration::Print()+0xa8>)
 8012a0a:	f7f7 fdaf 	bl	800a56c <printf>
 8012a0e:	6861      	ldr	r1, [r4, #4]
 8012a10:	4823      	ldr	r0, [pc, #140]	; (8012aa0 <PixelConfiguration::Print()+0xac>)
 8012a12:	f7f7 fdab 	bl	800a56c <printf>
 8012a16:	7d63      	ldrb	r3, [r4, #21]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d034      	beq.n	8012a86 <PixelConfiguration::Print()+0x92>
 8012a1c:	68a0      	ldr	r0, [r4, #8]
 8012a1e:	f000 f8a9 	bl	8012b74 <PixelType::GetMap(pixel::Map)>
 8012a22:	68a2      	ldr	r2, [r4, #8]
 8012a24:	4601      	mov	r1, r0
 8012a26:	481f      	ldr	r0, [pc, #124]	; (8012aa4 <PixelConfiguration::Print()+0xb0>)
 8012a28:	f7f7 fda0 	bl	800a56c <printf>
 8012a2c:	7c20      	ldrb	r0, [r4, #16]
 8012a2e:	f000 f8b7 	bl	8012ba0 <PixelType::ConvertTxH(unsigned char)>
 8012a32:	ee10 0a10 	vmov	r0, s0
 8012a36:	f7f6 faad 	bl	8008f94 <__aeabi_f2d>
 8012a3a:	460b      	mov	r3, r1
 8012a3c:	7c21      	ldrb	r1, [r4, #16]
 8012a3e:	9100      	str	r1, [sp, #0]
 8012a40:	4602      	mov	r2, r0
 8012a42:	4819      	ldr	r0, [pc, #100]	; (8012aa8 <PixelConfiguration::Print()+0xb4>)
 8012a44:	f7f7 fd92 	bl	800a56c <printf>
 8012a48:	7c60      	ldrb	r0, [r4, #17]
 8012a4a:	f000 f8a9 	bl	8012ba0 <PixelType::ConvertTxH(unsigned char)>
 8012a4e:	ee10 0a10 	vmov	r0, s0
 8012a52:	f7f6 fa9f 	bl	8008f94 <__aeabi_f2d>
 8012a56:	460b      	mov	r3, r1
 8012a58:	7c61      	ldrb	r1, [r4, #17]
 8012a5a:	9100      	str	r1, [sp, #0]
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	4813      	ldr	r0, [pc, #76]	; (8012aac <PixelConfiguration::Print()+0xb8>)
 8012a60:	f7f7 fd84 	bl	800a56c <printf>
 8012a64:	7d21      	ldrb	r1, [r4, #20]
 8012a66:	4a12      	ldr	r2, [pc, #72]	; (8012ab0 <PixelConfiguration::Print()+0xbc>)
 8012a68:	4b12      	ldr	r3, [pc, #72]	; (8012ab4 <PixelConfiguration::Print()+0xc0>)
 8012a6a:	4813      	ldr	r0, [pc, #76]	; (8012ab8 <PixelConfiguration::Print()+0xc4>)
 8012a6c:	2900      	cmp	r1, #0
 8012a6e:	bf14      	ite	ne
 8012a70:	4611      	movne	r1, r2
 8012a72:	4619      	moveq	r1, r3
 8012a74:	f7f7 fd7a 	bl	800a56c <printf>
 8012a78:	68e1      	ldr	r1, [r4, #12]
 8012a7a:	4810      	ldr	r0, [pc, #64]	; (8012abc <PixelConfiguration::Print()+0xc8>)
 8012a7c:	b002      	add	sp, #8
 8012a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a82:	f7f7 bd73 	b.w	800a56c <printf>
 8012a86:	6823      	ldr	r3, [r4, #0]
 8012a88:	3b0b      	subs	r3, #11
 8012a8a:	2b01      	cmp	r3, #1
 8012a8c:	d8ea      	bhi.n	8012a64 <PixelConfiguration::Print()+0x70>
 8012a8e:	7ca1      	ldrb	r1, [r4, #18]
 8012a90:	480b      	ldr	r0, [pc, #44]	; (8012ac0 <PixelConfiguration::Print()+0xcc>)
 8012a92:	f7f7 fd6b 	bl	800a56c <printf>
 8012a96:	e7e5      	b.n	8012a64 <PixelConfiguration::Print()+0x70>
 8012a98:	0801c90e 	stmdaeq	r1, {r1, r2, r3, r8, fp, lr, pc}
 8012a9c:	0801c923 	stmdaeq	r1, {r0, r1, r5, r8, fp, lr, pc}
 8012aa0:	0801c937 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, fp, lr, pc}
 8012aa4:	0801c946 	stmdaeq	r1, {r1, r2, r6, r8, fp, lr, pc}
 8012aa8:	0801c95a 	stmdaeq	r1, {r1, r3, r4, r6, r8, fp, lr, pc}
 8012aac:	0801c972 	stmdaeq	r1, {r1, r4, r5, r6, r8, fp, lr, pc}
 8012ab0:	0801c907 	stmdaeq	r1, {r0, r1, r2, r8, fp, lr, pc}
 8012ab4:	0801c90b 	stmdaeq	r1, {r0, r1, r3, r8, fp, lr, pc}
 8012ab8:	0801c9a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, lr, pc}
 8012abc:	0801c9b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, fp, lr, pc}
 8012ac0:	0801c98a 	stmdaeq	r1, {r1, r3, r7, r8, fp, lr, pc}

08012ac4 <PixelType::GetType(pixel::Type)>:
 8012ac4:	280d      	cmp	r0, #13
 8012ac6:	bfda      	itte	le
 8012ac8:	4b02      	ldrle	r3, [pc, #8]	; (8012ad4 <PixelType::GetType(pixel::Type)+0x10>)
 8012aca:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 8012ace:	4802      	ldrgt	r0, [pc, #8]	; (8012ad8 <PixelType::GetType(pixel::Type)+0x14>)
 8012ad0:	4770      	bx	lr
 8012ad2:	bf00      	nop
 8012ad4:	0801d210 	stmdaeq	r1, {r4, r9, ip, lr, pc}
 8012ad8:	0801d1dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, ip, lr, pc}

08012adc <PixelType::GetType(char const*)>:
 8012adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ade:	4c10      	ldr	r4, [pc, #64]	; (8012b20 <PixelType::GetType(char const*)+0x44>)
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	1e47      	subs	r7, r0, #1
 8012ae4:	1e66      	subs	r6, r4, #1
 8012ae6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8012aea:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 8012aee:	2a19      	cmp	r2, #25
 8012af0:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012af4:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
 8012af8:	460d      	mov	r5, r1
 8012afa:	bf98      	it	ls
 8012afc:	f101 0520 	addls.w	r5, r1, #32
 8012b00:	f1bc 0f19 	cmp.w	ip, #25
 8012b04:	bf98      	it	ls
 8012b06:	3220      	addls	r2, #32
 8012b08:	42aa      	cmp	r2, r5
 8012b0a:	d005      	beq.n	8012b18 <PixelType::GetType(char const*)+0x3c>
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	2b0e      	cmp	r3, #14
 8012b10:	f104 0408 	add.w	r4, r4, #8
 8012b14:	d1e5      	bne.n	8012ae2 <PixelType::GetType(char const*)+0x6>
 8012b16:	e001      	b.n	8012b1c <PixelType::GetType(char const*)+0x40>
 8012b18:	2900      	cmp	r1, #0
 8012b1a:	d1e4      	bne.n	8012ae6 <PixelType::GetType(char const*)+0xa>
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b20:	0801d210 	stmdaeq	r1, {r4, r9, ip, lr, pc}

08012b24 <PixelType::GetMap(char const*)>:
 8012b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b26:	4a12      	ldr	r2, [pc, #72]	; (8012b70 <PixelType::GetMap(char const*)+0x4c>)
 8012b28:	2300      	movs	r3, #0
 8012b2a:	1e55      	subs	r5, r2, #1
 8012b2c:	1e46      	subs	r6, r0, #1
 8012b2e:	f102 0c02 	add.w	ip, r2, #2
 8012b32:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8012b36:	f1a1 0441 	sub.w	r4, r1, #65	; 0x41
 8012b3a:	2c19      	cmp	r4, #25
 8012b3c:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8012b40:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012b44:	460f      	mov	r7, r1
 8012b46:	bf98      	it	ls
 8012b48:	f101 0720 	addls.w	r7, r1, #32
 8012b4c:	f1be 0f19 	cmp.w	lr, #25
 8012b50:	bf98      	it	ls
 8012b52:	3420      	addls	r4, #32
 8012b54:	42bc      	cmp	r4, r7
 8012b56:	d006      	beq.n	8012b66 <PixelType::GetMap(char const*)+0x42>
 8012b58:	3301      	adds	r3, #1
 8012b5a:	2b06      	cmp	r3, #6
 8012b5c:	f102 0204 	add.w	r2, r2, #4
 8012b60:	d1e3      	bne.n	8012b2a <PixelType::GetMap(char const*)+0x6>
 8012b62:	4618      	mov	r0, r3
 8012b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b66:	2900      	cmp	r1, #0
 8012b68:	d0fb      	beq.n	8012b62 <PixelType::GetMap(char const*)+0x3e>
 8012b6a:	4565      	cmp	r5, ip
 8012b6c:	d1e1      	bne.n	8012b32 <PixelType::GetMap(char const*)+0xe>
 8012b6e:	e7f8      	b.n	8012b62 <PixelType::GetMap(char const*)+0x3e>
 8012b70:	0801d1f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, ip, lr, pc}

08012b74 <PixelType::GetMap(pixel::Map)>:
 8012b74:	2805      	cmp	r0, #5
 8012b76:	bfda      	itte	le
 8012b78:	4b02      	ldrle	r3, [pc, #8]	; (8012b84 <PixelType::GetMap(pixel::Map)+0x10>)
 8012b7a:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 8012b7e:	4802      	ldrgt	r0, [pc, #8]	; (8012b88 <PixelType::GetMap(pixel::Map)+0x14>)
 8012b80:	4770      	bx	lr
 8012b82:	bf00      	nop
 8012b84:	0801d1f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, ip, lr, pc}
 8012b88:	0801d1e4 	stmdaeq	r1, {r2, r5, r6, r7, r8, ip, lr, pc}

08012b8c <PixelType::GetMap(pixel::Type)>:
 8012b8c:	3801      	subs	r0, #1
 8012b8e:	2809      	cmp	r0, #9
 8012b90:	bf9a      	itte	ls
 8012b92:	4b02      	ldrls	r3, [pc, #8]	; (8012b9c <PixelType::GetMap(pixel::Type)+0x10>)
 8012b94:	5618      	ldrsbls	r0, [r3, r0]
 8012b96:	2002      	movhi	r0, #2
 8012b98:	4770      	bx	lr
 8012b9a:	bf00      	nop
 8012b9c:	0801d1ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, ip, lr, pc}

08012ba0 <PixelType::ConvertTxH(unsigned char)>:
 8012ba0:	28f0      	cmp	r0, #240	; 0xf0
 8012ba2:	d017      	beq.n	8012bd4 <PixelType::ConvertTxH(unsigned char)+0x34>
 8012ba4:	d80c      	bhi.n	8012bc0 <PixelType::ConvertTxH(unsigned char)+0x20>
 8012ba6:	28c0      	cmp	r0, #192	; 0xc0
 8012ba8:	d017      	beq.n	8012bda <PixelType::ConvertTxH(unsigned char)+0x3a>
 8012baa:	28e0      	cmp	r0, #224	; 0xe0
 8012bac:	d018      	beq.n	8012be0 <PixelType::ConvertTxH(unsigned char)+0x40>
 8012bae:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8012bf4 <PixelType::ConvertTxH(unsigned char)+0x54>
 8012bb2:	2880      	cmp	r0, #128	; 0x80
 8012bb4:	eef4 7a04 	vmov.f32	s15, #68	; 0x3e200000  0.1562500
 8012bb8:	bf08      	it	eq
 8012bba:	eeb0 0a67 	vmoveq.f32	s0, s15
 8012bbe:	4770      	bx	lr
 8012bc0:	28fc      	cmp	r0, #252	; 0xfc
 8012bc2:	d010      	beq.n	8012be6 <PixelType::ConvertTxH(unsigned char)+0x46>
 8012bc4:	28fe      	cmp	r0, #254	; 0xfe
 8012bc6:	d011      	beq.n	8012bec <PixelType::ConvertTxH(unsigned char)+0x4c>
 8012bc8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8012bf4 <PixelType::ConvertTxH(unsigned char)+0x54>
 8012bcc:	28f8      	cmp	r0, #248	; 0xf8
 8012bce:	eef6 7a09 	vmov.f32	s15, #105	; 0x3f480000  0.7812500
 8012bd2:	e7f1      	b.n	8012bb8 <PixelType::ConvertTxH(unsigned char)+0x18>
 8012bd4:	eeb6 0a04 	vmov.f32	s0, #100	; 0x3f200000  0.625
 8012bd8:	4770      	bx	lr
 8012bda:	eeb5 0a04 	vmov.f32	s0, #84	; 0x3ea00000  0.3125000
 8012bde:	4770      	bx	lr
 8012be0:	eeb5 0a0e 	vmov.f32	s0, #94	; 0x3ef00000  0.4687500
 8012be4:	4770      	bx	lr
 8012be6:	eeb6 0a0e 	vmov.f32	s0, #110	; 0x3f700000  0.9375000
 8012bea:	4770      	bx	lr
 8012bec:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8012bf8 <PixelType::ConvertTxH(unsigned char)+0x58>
 8012bf0:	4770      	bx	lr
 8012bf2:	bf00      	nop
 8012bf4:	00000000 	andeq	r0, r0, r0
 8012bf8:	3f8c0000 	svccc	0x008c0000

08012bfc <PixelType::ConvertTxH(float)>:
 8012bfc:	eddf 7a24 	vldr	s15, [pc, #144]	; 8012c90 <PixelType::ConvertTxH(float)+0x94>
 8012c00:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c08:	d433      	bmi.n	8012c72 <PixelType::ConvertTxH(float)+0x76>
 8012c0a:	eef4 7a0e 	vmov.f32	s15, #78	; 0x3e700000  0.2343750
 8012c0e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c16:	d42e      	bmi.n	8012c76 <PixelType::ConvertTxH(float)+0x7a>
 8012c18:	eef5 7a09 	vmov.f32	s15, #89	; 0x3ec80000  0.3906250
 8012c1c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c24:	d429      	bmi.n	8012c7a <PixelType::ConvertTxH(float)+0x7e>
 8012c26:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8012c94 <PixelType::ConvertTxH(float)+0x98>
 8012c2a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c32:	d424      	bmi.n	8012c7e <PixelType::ConvertTxH(float)+0x82>
 8012c34:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012c98 <PixelType::ConvertTxH(float)+0x9c>
 8012c38:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c40:	d41f      	bmi.n	8012c82 <PixelType::ConvertTxH(float)+0x86>
 8012c42:	eddf 7a16 	vldr	s15, [pc, #88]	; 8012c9c <PixelType::ConvertTxH(float)+0xa0>
 8012c46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c4e:	d41a      	bmi.n	8012c86 <PixelType::ConvertTxH(float)+0x8a>
 8012c50:	eddf 7a13 	vldr	s15, [pc, #76]	; 8012ca0 <PixelType::ConvertTxH(float)+0xa4>
 8012c54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c5c:	d415      	bmi.n	8012c8a <PixelType::ConvertTxH(float)+0x8e>
 8012c5e:	eddf 7a11 	vldr	s15, [pc, #68]	; 8012ca4 <PixelType::ConvertTxH(float)+0xa8>
 8012c62:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c6a:	bf4c      	ite	mi
 8012c6c:	20fe      	movmi	r0, #254	; 0xfe
 8012c6e:	2000      	movpl	r0, #0
 8012c70:	4770      	bx	lr
 8012c72:	2000      	movs	r0, #0
 8012c74:	4770      	bx	lr
 8012c76:	2080      	movs	r0, #128	; 0x80
 8012c78:	4770      	bx	lr
 8012c7a:	20c0      	movs	r0, #192	; 0xc0
 8012c7c:	4770      	bx	lr
 8012c7e:	20e0      	movs	r0, #224	; 0xe0
 8012c80:	4770      	bx	lr
 8012c82:	20f0      	movs	r0, #240	; 0xf0
 8012c84:	4770      	bx	lr
 8012c86:	20f8      	movs	r0, #248	; 0xf8
 8012c88:	4770      	bx	lr
 8012c8a:	20fc      	movs	r0, #252	; 0xfc
 8012c8c:	4770      	bx	lr
 8012c8e:	bf00      	nop
 8012c90:	3da00000 	stccc	0, cr0, [r0]
 8012c94:	3f0c0000 	svccc	0x000c0000
 8012c98:	3f340000 	svccc	0x00340000
 8012c9c:	3f5c0000 	svccc	0x005c0000
 8012ca0:	3f820000 	svccc	0x00820000
 8012ca4:	3f960000 	svccc	0x00960000

08012ca8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>:
 8012ca8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012caa:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8012cae:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8012cb2:	b2d4      	uxtb	r4, r2
 8012cb4:	4a10      	ldr	r2, [pc, #64]	; (8012cf8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x50>)
 8012cb6:	4605      	mov	r5, r0
 8012cb8:	6810      	ldr	r0, [r2, #0]
 8012cba:	6802      	ldr	r2, [r0, #0]
 8012cbc:	2a07      	cmp	r2, #7
 8012cbe:	d007      	beq.n	8012cd0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x28>
 8012cc0:	460a      	mov	r2, r1
 8012cc2:	e9cd 6400 	strd	r6, r4, [sp]
 8012cc6:	4629      	mov	r1, r5
 8012cc8:	f000 ff80 	bl	8013bcc <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8012ccc:	b004      	add	sp, #16
 8012cce:	bd70      	pop	{r4, r5, r6, pc}
 8012cd0:	42b3      	cmp	r3, r6
 8012cd2:	f04f 0200 	mov.w	r2, #0
 8012cd6:	d10a      	bne.n	8012cee <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x46>
 8012cd8:	42a3      	cmp	r3, r4
 8012cda:	d108      	bne.n	8012cee <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x46>
 8012cdc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8012ce0:	9200      	str	r2, [sp, #0]
 8012ce2:	4613      	mov	r3, r2
 8012ce4:	460a      	mov	r2, r1
 8012ce6:	4629      	mov	r1, r5
 8012ce8:	f000 fff2 	bl	8013cd0 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012cec:	e7ee      	b.n	8012ccc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x24>
 8012cee:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8012cf2:	9600      	str	r6, [sp, #0]
 8012cf4:	e7f6      	b.n	8012ce4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x3c>
 8012cf6:	bf00      	nop
 8012cf8:	20001290 	mulcs	r0, r0, r2

08012cfc <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 8012cfc:	b570      	push	{r4, r5, r6, lr}
 8012cfe:	4d07      	ldr	r5, [pc, #28]	; (8012d1c <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x20>)
 8012d00:	4606      	mov	r6, r0
 8012d02:	2400      	movs	r4, #0
 8012d04:	682b      	ldr	r3, [r5, #0]
 8012d06:	429c      	cmp	r4, r3
 8012d08:	d300      	bcc.n	8012d0c <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x10>
 8012d0a:	bd70      	pop	{r4, r5, r6, pc}
 8012d0c:	4621      	mov	r1, r4
 8012d0e:	2200      	movs	r2, #0
 8012d10:	4630      	mov	r0, r6
 8012d12:	f7ff ffc9 	bl	8012ca8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012d16:	3401      	adds	r4, #1
 8012d18:	e7f4      	b.n	8012d04 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x8>
 8012d1a:	bf00      	nop
 8012d1c:	2000128c 	andcs	r1, r0, ip, lsl #5

08012d20 <PixelPatterns::PixelPatterns(unsigned int)>:
 8012d20:	4b0c      	ldr	r3, [pc, #48]	; (8012d54 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 8012d22:	4a0d      	ldr	r2, [pc, #52]	; (8012d58 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	b510      	push	{r4, lr}
 8012d28:	2910      	cmp	r1, #16
 8012d2a:	6013      	str	r3, [r2, #0]
 8012d2c:	4a0b      	ldr	r2, [pc, #44]	; (8012d5c <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 8012d2e:	bf28      	it	cs
 8012d30:	2110      	movcs	r1, #16
 8012d32:	6011      	str	r1, [r2, #0]
 8012d34:	685a      	ldr	r2, [r3, #4]
 8012d36:	4b0a      	ldr	r3, [pc, #40]	; (8012d60 <PixelPatterns::PixelPatterns(unsigned int)+0x40>)
 8012d38:	601a      	str	r2, [r3, #0]
 8012d3a:	4b0a      	ldr	r3, [pc, #40]	; (8012d64 <PixelPatterns::PixelPatterns(unsigned int)+0x44>)
 8012d3c:	681c      	ldr	r4, [r3, #0]
 8012d3e:	4b0a      	ldr	r3, [pc, #40]	; (8012d68 <PixelPatterns::PixelPatterns(unsigned int)+0x48>)
 8012d40:	2210      	movs	r2, #16
 8012d42:	2100      	movs	r1, #0
 8012d44:	3a01      	subs	r2, #1
 8012d46:	61d9      	str	r1, [r3, #28]
 8012d48:	601c      	str	r4, [r3, #0]
 8012d4a:	6199      	str	r1, [r3, #24]
 8012d4c:	f103 0320 	add.w	r3, r3, #32
 8012d50:	d1f8      	bne.n	8012d44 <PixelPatterns::PixelPatterns(unsigned int)+0x24>
 8012d52:	bd10      	pop	{r4, pc}
 8012d54:	200012a0 	andcs	r1, r0, r0, lsr #5
 8012d58:	20001290 	mulcs	r0, r0, r2
 8012d5c:	20001284 	andcs	r1, r0, r4, lsl #5
 8012d60:	2000128c 	andcs	r1, r0, ip, lsl #5
 8012d64:	2000fddc 	ldrdcs	pc, [r0], -ip
 8012d68:	20001084 	andcs	r1, r0, r4, lsl #1

08012d6c <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8012d6c:	2805      	cmp	r0, #5
 8012d6e:	bfdd      	ittte	le
 8012d70:	4b02      	ldrle	r3, [pc, #8]	; (8012d7c <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8012d72:	220e      	movle	r2, #14
 8012d74:	fb02 3000 	mlale	r0, r2, r0, r3
 8012d78:	4801      	ldrgt	r0, [pc, #4]	; (8012d80 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 8012d7a:	4770      	bx	lr
 8012d7c:	0801d280 	stmdaeq	r1, {r7, r9, ip, lr, pc}
 8012d80:	0801d1dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, ip, lr, pc}

08012d84 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 8012d84:	b5e0      	push	{r5, r6, r7, lr}
 8012d86:	4608      	mov	r0, r1
 8012d88:	460d      	mov	r5, r1
 8012d8a:	4617      	mov	r7, r2
 8012d8c:	461e      	mov	r6, r3
 8012d8e:	f7ff ffb5 	bl	8012cfc <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012d92:	4906      	ldr	r1, [pc, #24]	; (8012dac <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x28>)
 8012d94:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012d98:	2301      	movs	r3, #1
 8012d9a:	61cb      	str	r3, [r1, #28]
 8012d9c:	22ff      	movs	r2, #255	; 0xff
 8012d9e:	2300      	movs	r3, #0
 8012da0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8012da4:	604f      	str	r7, [r1, #4]
 8012da6:	618e      	str	r6, [r1, #24]
 8012da8:	bde0      	pop	{r5, r6, r7, pc}
 8012daa:	bf00      	nop
 8012dac:	20001084 	andcs	r1, r0, r4, lsl #1

08012db0 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8012db0:	b5e0      	push	{r5, r6, r7, lr}
 8012db2:	4608      	mov	r0, r1
 8012db4:	460d      	mov	r5, r1
 8012db6:	461e      	mov	r6, r3
 8012db8:	4617      	mov	r7, r2
 8012dba:	f7ff ff9f 	bl	8012cfc <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012dbe:	4908      	ldr	r1, [pc, #32]	; (8012de0 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8012dc0:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012dc4:	2302      	movs	r3, #2
 8012dc6:	61cb      	str	r3, [r1, #28]
 8012dc8:	9b04      	ldr	r3, [sp, #16]
 8012dca:	604b      	str	r3, [r1, #4]
 8012dcc:	4b05      	ldr	r3, [pc, #20]	; (8012de4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	610b      	str	r3, [r1, #16]
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	614b      	str	r3, [r1, #20]
 8012dd6:	9b05      	ldr	r3, [sp, #20]
 8012dd8:	618b      	str	r3, [r1, #24]
 8012dda:	e9c1 7602 	strd	r7, r6, [r1, #8]
 8012dde:	bde0      	pop	{r5, r6, r7, pc}
 8012de0:	20001084 	andcs	r1, r0, r4, lsl #1
 8012de4:	2000128c 	andcs	r1, r0, ip, lsl #5

08012de8 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8012de8:	b5e0      	push	{r5, r6, r7, lr}
 8012dea:	4608      	mov	r0, r1
 8012dec:	460d      	mov	r5, r1
 8012dee:	461f      	mov	r7, r3
 8012df0:	4616      	mov	r6, r2
 8012df2:	f7ff ff83 	bl	8012cfc <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012df6:	4907      	ldr	r1, [pc, #28]	; (8012e14 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8012df8:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012dfc:	2303      	movs	r3, #3
 8012dfe:	61cb      	str	r3, [r1, #28]
 8012e00:	4b05      	ldr	r3, [pc, #20]	; (8012e18 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8012e02:	604f      	str	r7, [r1, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	610b      	str	r3, [r1, #16]
 8012e08:	2300      	movs	r3, #0
 8012e0a:	614b      	str	r3, [r1, #20]
 8012e0c:	9b04      	ldr	r3, [sp, #16]
 8012e0e:	608e      	str	r6, [r1, #8]
 8012e10:	618b      	str	r3, [r1, #24]
 8012e12:	bde0      	pop	{r5, r6, r7, pc}
 8012e14:	20001084 	andcs	r1, r0, r4, lsl #1
 8012e18:	2000128c 	andcs	r1, r0, ip, lsl #5

08012e1c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 8012e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e1e:	4608      	mov	r0, r1
 8012e20:	460d      	mov	r5, r1
 8012e22:	461f      	mov	r7, r3
 8012e24:	4616      	mov	r6, r2
 8012e26:	4c14      	ldr	r4, [pc, #80]	; (8012e78 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 8012e28:	f7ff ff68 	bl	8012cfc <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012e2c:	4913      	ldr	r1, [pc, #76]	; (8012e7c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 8012e2e:	6820      	ldr	r0, [r4, #0]
 8012e30:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012e34:	2304      	movs	r3, #4
 8012e36:	61cb      	str	r3, [r1, #28]
 8012e38:	1e43      	subs	r3, r0, #1
 8012e3a:	005b      	lsls	r3, r3, #1
 8012e3c:	b29b      	uxth	r3, r3
 8012e3e:	4d10      	ldr	r5, [pc, #64]	; (8012e80 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x64>)
 8012e40:	610b      	str	r3, [r1, #16]
 8012e42:	2300      	movs	r3, #0
 8012e44:	614b      	str	r3, [r1, #20]
 8012e46:	682b      	ldr	r3, [r5, #0]
 8012e48:	604f      	str	r7, [r1, #4]
 8012e4a:	608e      	str	r6, [r1, #8]
 8012e4c:	b97b      	cbnz	r3, 8012e6e <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 8012e4e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012e52:	4298      	cmp	r0, r3
 8012e54:	bf34      	ite	cc
 8012e56:	0080      	lslcc	r0, r0, #2
 8012e58:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8012e5c:	f005 fa5c 	bl	8018318 <operator new[](unsigned int)>
 8012e60:	6823      	ldr	r3, [r4, #0]
 8012e62:	6028      	str	r0, [r5, #0]
 8012e64:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012e68:	2200      	movs	r2, #0
 8012e6a:	4298      	cmp	r0, r3
 8012e6c:	d100      	bne.n	8012e70 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x54>
 8012e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e70:	f840 2b04 	str.w	r2, [r0], #4
 8012e74:	e7f9      	b.n	8012e6a <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4e>
 8012e76:	bf00      	nop
 8012e78:	2000128c 	andcs	r1, r0, ip, lsl #5
 8012e7c:	20001084 	andcs	r1, r0, r4, lsl #1
 8012e80:	20001288 	andcs	r1, r0, r8, lsl #5

08012e84 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8012e84:	b5e0      	push	{r5, r6, r7, lr}
 8012e86:	4608      	mov	r0, r1
 8012e88:	460d      	mov	r5, r1
 8012e8a:	461e      	mov	r6, r3
 8012e8c:	4617      	mov	r7, r2
 8012e8e:	f7ff ff35 	bl	8012cfc <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012e92:	4908      	ldr	r1, [pc, #32]	; (8012eb4 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8012e94:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012e98:	2305      	movs	r3, #5
 8012e9a:	61cb      	str	r3, [r1, #28]
 8012e9c:	9b05      	ldr	r3, [sp, #20]
 8012e9e:	604b      	str	r3, [r1, #4]
 8012ea0:	9b04      	ldr	r3, [sp, #16]
 8012ea2:	610b      	str	r3, [r1, #16]
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	614b      	str	r3, [r1, #20]
 8012ea8:	9b06      	ldr	r3, [sp, #24]
 8012eaa:	618b      	str	r3, [r1, #24]
 8012eac:	e9c1 7602 	strd	r7, r6, [r1, #8]
 8012eb0:	bde0      	pop	{r5, r6, r7, pc}
 8012eb2:	bf00      	nop
 8012eb4:	20001084 	andcs	r1, r0, r4, lsl #1

08012eb8 <PixelPatterns::Wheel(unsigned char)>:
 8012eb8:	43cb      	mvns	r3, r1
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	2b54      	cmp	r3, #84	; 0x54
 8012ebe:	d809      	bhi.n	8012ed4 <PixelPatterns::Wheel(unsigned char)+0x1c>
 8012ec0:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	1e5a      	subs	r2, r3, #1
 8012ec8:	4258      	negs	r0, r3
 8012eca:	b2d2      	uxtb	r2, r2
 8012ecc:	b2c0      	uxtb	r0, r0
 8012ece:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8012ed2:	4770      	bx	lr
 8012ed4:	2ba9      	cmp	r3, #169	; 0xa9
 8012ed6:	d809      	bhi.n	8012eec <PixelPatterns::Wheel(unsigned char)+0x34>
 8012ed8:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 8012edc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012ee0:	b2c9      	uxtb	r1, r1
 8012ee2:	43c8      	mvns	r0, r1
 8012ee4:	b2c0      	uxtb	r0, r0
 8012ee6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8012eea:	4770      	bx	lr
 8012eec:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 8012ef0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012ef4:	b2c9      	uxtb	r1, r1
 8012ef6:	0208      	lsls	r0, r1, #8
 8012ef8:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 8012efc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8012f00:	4770      	bx	lr
	...

08012f04 <PixelPatterns::Increment(unsigned int)>:
 8012f04:	4a0d      	ldr	r2, [pc, #52]	; (8012f3c <PixelPatterns::Increment(unsigned int)+0x38>)
 8012f06:	b510      	push	{r4, lr}
 8012f08:	014c      	lsls	r4, r1, #5
 8012f0a:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8012f0e:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 8012f12:	b930      	cbnz	r0, 8012f22 <PixelPatterns::Increment(unsigned int)+0x1e>
 8012f14:	690a      	ldr	r2, [r1, #16]
 8012f16:	3301      	adds	r3, #1
 8012f18:	4293      	cmp	r3, r2
 8012f1a:	bf18      	it	ne
 8012f1c:	4618      	movne	r0, r3
 8012f1e:	6148      	str	r0, [r1, #20]
 8012f20:	bd10      	pop	{r4, pc}
 8012f22:	b92b      	cbnz	r3, 8012f30 <PixelPatterns::Increment(unsigned int)+0x2c>
 8012f24:	4422      	add	r2, r4
 8012f26:	6913      	ldr	r3, [r2, #16]
 8012f28:	3b01      	subs	r3, #1
 8012f2a:	b29b      	uxth	r3, r3
 8012f2c:	6153      	str	r3, [r2, #20]
 8012f2e:	e7f7      	b.n	8012f20 <PixelPatterns::Increment(unsigned int)+0x1c>
 8012f30:	3b01      	subs	r3, #1
 8012f32:	614b      	str	r3, [r1, #20]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d1f3      	bne.n	8012f20 <PixelPatterns::Increment(unsigned int)+0x1c>
 8012f38:	e7f4      	b.n	8012f24 <PixelPatterns::Increment(unsigned int)+0x20>
 8012f3a:	bf00      	nop
 8012f3c:	20001084 	andcs	r1, r0, r4, lsl #1

08012f40 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 8012f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f44:	4b12      	ldr	r3, [pc, #72]	; (8012f90 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>)
 8012f46:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8012f94 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x54>
 8012f4a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012f4e:	4605      	mov	r5, r0
 8012f50:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8012f54:	460c      	mov	r4, r1
 8012f56:	2700      	movs	r7, #0
 8012f58:	f8d8 3000 	ldr.w	r3, [r8]
 8012f5c:	b2be      	uxth	r6, r7
 8012f5e:	42b3      	cmp	r3, r6
 8012f60:	f107 0701 	add.w	r7, r7, #1
 8012f64:	d805      	bhi.n	8012f72 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 8012f66:	4621      	mov	r1, r4
 8012f68:	4628      	mov	r0, r5
 8012f6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f6e:	f7ff bfc9 	b.w	8012f04 <PixelPatterns::Increment(unsigned int)>
 8012f72:	0231      	lsls	r1, r6, #8
 8012f74:	fbb1 f1f3 	udiv	r1, r1, r3
 8012f78:	4449      	add	r1, r9
 8012f7a:	b2c9      	uxtb	r1, r1
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	f7ff ff9b 	bl	8012eb8 <PixelPatterns::Wheel(unsigned char)>
 8012f82:	4631      	mov	r1, r6
 8012f84:	4602      	mov	r2, r0
 8012f86:	4620      	mov	r0, r4
 8012f88:	f7ff fe8e 	bl	8012ca8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012f8c:	e7e4      	b.n	8012f58 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 8012f8e:	bf00      	nop
 8012f90:	20001084 	andcs	r1, r0, r4, lsl #1
 8012f94:	2000128c 	andcs	r1, r0, ip, lsl #5

08012f98 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 8012f98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f9c:	4b13      	ldr	r3, [pc, #76]	; (8012fec <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 8012f9e:	4e14      	ldr	r6, [pc, #80]	; (8012ff0 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 8012fa0:	f8df a050 	ldr.w	sl, [pc, #80]	; 8012ff4 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 8012fa4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012fa8:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 8012fac:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8012fb0:	4605      	mov	r5, r0
 8012fb2:	460c      	mov	r4, r1
 8012fb4:	f04f 0b00 	mov.w	fp, #0
 8012fb8:	6833      	ldr	r3, [r6, #0]
 8012fba:	fa1f f18b 	uxth.w	r1, fp
 8012fbe:	428b      	cmp	r3, r1
 8012fc0:	d805      	bhi.n	8012fce <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 8012fc2:	4621      	mov	r1, r4
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fca:	f7ff bf9b 	b.w	8012f04 <PixelPatterns::Increment(unsigned int)>
 8012fce:	eb09 0301 	add.w	r3, r9, r1
 8012fd2:	fb0a f303 	mul.w	r3, sl, r3
 8012fd6:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8012fda:	bf94      	ite	ls
 8012fdc:	463a      	movls	r2, r7
 8012fde:	4642      	movhi	r2, r8
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f7ff fe61 	bl	8012ca8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012fe6:	f10b 0b01 	add.w	fp, fp, #1
 8012fea:	e7e5      	b.n	8012fb8 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 8012fec:	20001084 	andcs	r1, r0, r4, lsl #1
 8012ff0:	2000128c 	andcs	r1, r0, ip, lsl #5
 8012ff4:	aaaaaaab 	bge	6abdaa8 <__stack_size+0x6ab9aa8>

08012ff8 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 8012ff8:	b538      	push	{r3, r4, r5, lr}
 8012ffa:	4b08      	ldr	r3, [pc, #32]	; (801301c <PixelPatterns::ColourWipeUpdate(unsigned int)+0x24>)
 8012ffc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013000:	460c      	mov	r4, r1
 8013002:	4605      	mov	r5, r0
 8013004:	6959      	ldr	r1, [r3, #20]
 8013006:	689a      	ldr	r2, [r3, #8]
 8013008:	4620      	mov	r0, r4
 801300a:	f7ff fe4d 	bl	8012ca8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 801300e:	4621      	mov	r1, r4
 8013010:	4628      	mov	r0, r5
 8013012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013016:	f7ff bf75 	b.w	8012f04 <PixelPatterns::Increment(unsigned int)>
 801301a:	bf00      	nop
 801301c:	20001084 	andcs	r1, r0, r4, lsl #1

08013020 <PixelPatterns::ScannerUpdate(unsigned int)>:
 8013020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013024:	4b29      	ldr	r3, [pc, #164]	; (80130cc <PixelPatterns::ScannerUpdate(unsigned int)+0xac>)
 8013026:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80130d0 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 801302a:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 80130d4 <PixelPatterns::ScannerUpdate(unsigned int)+0xb4>
 801302e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013032:	e9d3 7604 	ldrd	r7, r6, [r3, #16]
 8013036:	b085      	sub	sp, #20
 8013038:	689d      	ldr	r5, [r3, #8]
 801303a:	00b3      	lsls	r3, r6, #2
 801303c:	4680      	mov	r8, r0
 801303e:	9301      	str	r3, [sp, #4]
 8013040:	4608      	mov	r0, r1
 8013042:	f04f 0900 	mov.w	r9, #0
 8013046:	1bbf      	subs	r7, r7, r6
 8013048:	f8da 2000 	ldr.w	r2, [sl]
 801304c:	fa1f f489 	uxth.w	r4, r9
 8013050:	42a2      	cmp	r2, r4
 8013052:	d806      	bhi.n	8013062 <PixelPatterns::ScannerUpdate(unsigned int)+0x42>
 8013054:	4601      	mov	r1, r0
 8013056:	4640      	mov	r0, r8
 8013058:	b005      	add	sp, #20
 801305a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801305e:	f7ff bf51 	b.w	8012f04 <PixelPatterns::Increment(unsigned int)>
 8013062:	42a6      	cmp	r6, r4
 8013064:	d10c      	bne.n	8013080 <PixelPatterns::ScannerUpdate(unsigned int)+0x60>
 8013066:	462a      	mov	r2, r5
 8013068:	4631      	mov	r1, r6
 801306a:	9002      	str	r0, [sp, #8]
 801306c:	f7ff fe1c 	bl	8012ca8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8013070:	f8db 2000 	ldr.w	r2, [fp]
 8013074:	9b01      	ldr	r3, [sp, #4]
 8013076:	50d5      	str	r5, [r2, r3]
 8013078:	9802      	ldr	r0, [sp, #8]
 801307a:	f109 0901 	add.w	r9, r9, #1
 801307e:	e7e3      	b.n	8013048 <PixelPatterns::ScannerUpdate(unsigned int)+0x28>
 8013080:	42a7      	cmp	r7, r4
 8013082:	d109      	bne.n	8013098 <PixelPatterns::ScannerUpdate(unsigned int)+0x78>
 8013084:	462a      	mov	r2, r5
 8013086:	4639      	mov	r1, r7
 8013088:	9002      	str	r0, [sp, #8]
 801308a:	f7ff fe0d 	bl	8012ca8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 801308e:	f8db 2000 	ldr.w	r2, [fp]
 8013092:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8013096:	e7ef      	b.n	8013078 <PixelPatterns::ScannerUpdate(unsigned int)+0x58>
 8013098:	f8db 2000 	ldr.w	r2, [fp]
 801309c:	9002      	str	r0, [sp, #8]
 801309e:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 80130a2:	f3c1 2246 	ubfx	r2, r1, #9, #7
 80130a6:	f3c1 4c46 	ubfx	ip, r1, #17, #7
 80130aa:	0212      	lsls	r2, r2, #8
 80130ac:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80130b0:	f3c1 0146 	ubfx	r1, r1, #1, #7
 80130b4:	430a      	orrs	r2, r1
 80130b6:	4621      	mov	r1, r4
 80130b8:	9203      	str	r2, [sp, #12]
 80130ba:	f7ff fdf5 	bl	8012ca8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 80130be:	f8db 1000 	ldr.w	r1, [fp]
 80130c2:	9a03      	ldr	r2, [sp, #12]
 80130c4:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80130c8:	e7d6      	b.n	8013078 <PixelPatterns::ScannerUpdate(unsigned int)+0x58>
 80130ca:	bf00      	nop
 80130cc:	20001084 	andcs	r1, r0, r4, lsl #1
 80130d0:	2000128c 	andcs	r1, r0, ip, lsl #5
 80130d4:	20001288 	andcs	r1, r0, r8, lsl #5

080130d8 <PixelPatterns::FadeUpdate(unsigned int)>:
 80130d8:	4a20      	ldr	r2, [pc, #128]	; (801315c <PixelPatterns::FadeUpdate(unsigned int)+0x84>)
 80130da:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 80130de:	e9d2 c302 	ldrd	ip, r3, [r2, #8]
 80130e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130e6:	460e      	mov	r6, r1
 80130e8:	e9d2 1704 	ldrd	r1, r7, [r2, #16]
 80130ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80130f0:	f3cc 2407 	ubfx	r4, ip, #8, #8
 80130f4:	437a      	muls	r2, r7
 80130f6:	4605      	mov	r5, r0
 80130f8:	1bc8      	subs	r0, r1, r7
 80130fa:	fb00 2204 	mla	r2, r0, r4, r2
 80130fe:	f3c3 4407 	ubfx	r4, r3, #16, #8
 8013102:	f3cc 4e07 	ubfx	lr, ip, #16, #8
 8013106:	437c      	muls	r4, r7
 8013108:	fb00 440e 	mla	r4, r0, lr, r4
 801310c:	b2db      	uxtb	r3, r3
 801310e:	fbb2 f2f1 	udiv	r2, r2, r1
 8013112:	fbb4 f4f1 	udiv	r4, r4, r1
 8013116:	0212      	lsls	r2, r2, #8
 8013118:	0424      	lsls	r4, r4, #16
 801311a:	437b      	muls	r3, r7
 801311c:	b292      	uxth	r2, r2
 801311e:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8013122:	fa5f fc8c 	uxtb.w	ip, ip
 8013126:	4314      	orrs	r4, r2
 8013128:	fb00 330c 	mla	r3, r0, ip, r3
 801312c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8013160 <PixelPatterns::FadeUpdate(unsigned int)+0x88>
 8013130:	fbb3 f3f1 	udiv	r3, r3, r1
 8013134:	b2db      	uxtb	r3, r3
 8013136:	431c      	orrs	r4, r3
 8013138:	2700      	movs	r7, #0
 801313a:	f8d8 3000 	ldr.w	r3, [r8]
 801313e:	429f      	cmp	r7, r3
 8013140:	d305      	bcc.n	801314e <PixelPatterns::FadeUpdate(unsigned int)+0x76>
 8013142:	4631      	mov	r1, r6
 8013144:	4628      	mov	r0, r5
 8013146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801314a:	f7ff bedb 	b.w	8012f04 <PixelPatterns::Increment(unsigned int)>
 801314e:	4639      	mov	r1, r7
 8013150:	4622      	mov	r2, r4
 8013152:	4630      	mov	r0, r6
 8013154:	f7ff fda8 	bl	8012ca8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8013158:	3701      	adds	r7, #1
 801315a:	e7ee      	b.n	801313a <PixelPatterns::FadeUpdate(unsigned int)+0x62>
 801315c:	20001084 	andcs	r1, r0, r4, lsl #1
 8013160:	2000128c 	andcs	r1, r0, ip, lsl #5

08013164 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 8013164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013166:	4b12      	ldr	r3, [pc, #72]	; (80131b0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 8013168:	014e      	lsls	r6, r1, #5
 801316a:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 801316e:	599c      	ldr	r4, [r3, r6]
 8013170:	686f      	ldr	r7, [r5, #4]
 8013172:	1b14      	subs	r4, r2, r4
 8013174:	42bc      	cmp	r4, r7
 8013176:	d319      	bcc.n	80131ac <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8013178:	519a      	str	r2, [r3, r6]
 801317a:	69eb      	ldr	r3, [r5, #28]
 801317c:	3b01      	subs	r3, #1
 801317e:	2b04      	cmp	r3, #4
 8013180:	d814      	bhi.n	80131ac <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8013182:	e8df f003 	tbb	[pc, r3]
 8013186:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 801318a:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 801318e:	fed8 2001 	cdp2	0, 13, cr2, cr8, cr1, {0}
 8013192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013194:	f7ff ff00 	bl	8012f98 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 8013198:	e7fa      	b.n	8013190 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 801319a:	f7ff ff2d 	bl	8012ff8 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 801319e:	e7f7      	b.n	8013190 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 80131a0:	f7ff ff3e 	bl	8013020 <PixelPatterns::ScannerUpdate(unsigned int)>
 80131a4:	e7f4      	b.n	8013190 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 80131a6:	f7ff ff97 	bl	80130d8 <PixelPatterns::FadeUpdate(unsigned int)>
 80131aa:	e7f1      	b.n	8013190 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 80131ac:	2000      	movs	r0, #0
 80131ae:	e7f0      	b.n	8013192 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 80131b0:	20001084 	andcs	r1, r0, r4, lsl #1

080131b4 <PixelPatterns::Run()>:
 80131b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131b8:	4f11      	ldr	r7, [pc, #68]	; (8013200 <PixelPatterns::Run()+0x4c>)
 80131ba:	4606      	mov	r6, r0
 80131bc:	6838      	ldr	r0, [r7, #0]
 80131be:	f000 fc85 	bl	8013acc <WS28xxMulti::IsUpdating()>
 80131c2:	4604      	mov	r4, r0
 80131c4:	b9c8      	cbnz	r0, 80131fa <PixelPatterns::Run()+0x46>
 80131c6:	4b0f      	ldr	r3, [pc, #60]	; (8013204 <PixelPatterns::Run()+0x50>)
 80131c8:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8013208 <PixelPatterns::Run()+0x54>
 80131cc:	f8d3 9000 	ldr.w	r9, [r3]
 80131d0:	4605      	mov	r5, r0
 80131d2:	f8d8 3000 	ldr.w	r3, [r8]
 80131d6:	b2e9      	uxtb	r1, r5
 80131d8:	428b      	cmp	r3, r1
 80131da:	f105 0501 	add.w	r5, r5, #1
 80131de:	d805      	bhi.n	80131ec <PixelPatterns::Run()+0x38>
 80131e0:	b15c      	cbz	r4, 80131fa <PixelPatterns::Run()+0x46>
 80131e2:	6838      	ldr	r0, [r7, #0]
 80131e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131e8:	f000 bb0a 	b.w	8013800 <WS28xxMulti::Update()>
 80131ec:	464a      	mov	r2, r9
 80131ee:	4630      	mov	r0, r6
 80131f0:	f7ff ffb8 	bl	8013164 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 80131f4:	4320      	orrs	r0, r4
 80131f6:	b2c4      	uxtb	r4, r0
 80131f8:	e7eb      	b.n	80131d2 <PixelPatterns::Run()+0x1e>
 80131fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131fe:	bf00      	nop
 8013200:	20001290 	mulcs	r0, r0, r2
 8013204:	2000fddc 	ldrdcs	pc, [r0], -ip
 8013208:	20001284 	andcs	r1, r0, r4, lsl #5

0801320c <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>:
 801320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801320e:	4c20      	ldr	r4, [pc, #128]	; (8013290 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]+0x84>)
 8013210:	f89d e014 	ldrb.w	lr, [sp, #20]
 8013214:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8013218:	eb04 1181 	add.w	r1, r4, r1, lsl #6
 801321c:	4c1d      	ldr	r4, [pc, #116]	; (8013294 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]+0x88>)
 801321e:	b2c0      	uxtb	r0, r0
 8013220:	440c      	add	r4, r1
 8013222:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8013226:	f100 6008 	add.w	r0, r0, #142606336	; 0x8800000
 801322a:	f500 7000 	add.w	r0, r0, #512	; 0x200
 801322e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013232:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8013236:	0089      	lsls	r1, r1, #2
 8013238:	2080      	movs	r0, #128	; 0x80
 801323a:	2601      	movs	r6, #1
 801323c:	ea12 0400 	ands.w	r4, r2, r0
 8013240:	bf0b      	itete	eq
 8013242:	f5ac 67c0 	subeq.w	r7, ip, #1536	; 0x600
 8013246:	f5ac 64c0 	subne.w	r4, ip, #1536	; 0x600
 801324a:	603c      	streq	r4, [r7, #0]
 801324c:	6026      	strne	r6, [r4, #0]
 801324e:	ea13 0400 	ands.w	r4, r3, r0
 8013252:	bf0b      	itete	eq
 8013254:	f5ac 6780 	subeq.w	r7, ip, #1024	; 0x400
 8013258:	f5ac 6480 	subne.w	r4, ip, #1024	; 0x400
 801325c:	603c      	streq	r4, [r7, #0]
 801325e:	6026      	strne	r6, [r4, #0]
 8013260:	ea1e 0400 	ands.w	r4, lr, r0
 8013264:	bf15      	itete	ne
 8013266:	f5ac 7400 	subne.w	r4, ip, #512	; 0x200
 801326a:	f5ac 7700 	subeq.w	r7, ip, #512	; 0x200
 801326e:	6026      	strne	r6, [r4, #0]
 8013270:	603c      	streq	r4, [r7, #0]
 8013272:	ea15 0400 	ands.w	r4, r5, r0
 8013276:	bf14      	ite	ne
 8013278:	f8cc 6000 	strne.w	r6, [ip]
 801327c:	f8cc 4000 	streq.w	r4, [ip]
 8013280:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8013284:	4561      	cmp	r1, ip
 8013286:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801328a:	d1d7      	bne.n	801323c <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]+0x30>
 801328c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801328e:	bf00      	nop
 8013290:	200012a4 	andcs	r1, r0, r4, lsr #5
 8013294:	e1100030 	tst	r0, r0, lsr r0

08013298 <TIMER3_IRQHandler>:
 8013298:	f3bf 8f5f 	dmb	sy
 801329c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80132a0:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80132a4:	0791      	lsls	r1, r2, #30
 80132a6:	d51e      	bpl.n	80132e6 <TIMER3_IRQHandler+0x4e>
 80132a8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80132ac:	f021 0101 	bic.w	r1, r1, #1
 80132b0:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
 80132b4:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 80132b8:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80132bc:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 80132c0:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 80132c4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80132c8:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 80132cc:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 80132d0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80132d4:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 80132d8:	4b07      	ldr	r3, [pc, #28]	; (80132f8 <TIMER3_IRQHandler+0x60>)
 80132da:	2100      	movs	r1, #0
 80132dc:	7019      	strb	r1, [r3, #0]
 80132de:	4b07      	ldr	r3, [pc, #28]	; (80132fc <TIMER3_IRQHandler+0x64>)
 80132e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80132e4:	6299      	str	r1, [r3, #40]	; 0x28
 80132e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80132ea:	43d2      	mvns	r2, r2
 80132ec:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
 80132f0:	f3bf 8f5f 	dmb	sy
 80132f4:	4770      	bx	lr
 80132f6:	bf00      	nop
 80132f8:	2000129c 	mulcs	r0, ip, r2
 80132fc:	40021000 	andmi	r1, r2, r0

08013300 <WS28xxMulti::~WS28xxMulti()>:
 8013300:	4b01      	ldr	r3, [pc, #4]	; (8013308 <WS28xxMulti::~WS28xxMulti()+0x8>)
 8013302:	2200      	movs	r2, #0
 8013304:	601a      	str	r2, [r3, #0]
 8013306:	4770      	bx	lr
 8013308:	200012a0 	andcs	r1, r0, r0, lsr #5

0801330c <WS28xxMulti::Setup(unsigned char, unsigned char)>:
 801330c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013310:	4680      	mov	r8, r0
 8013312:	b08e      	sub	sp, #56	; 0x38
 8013314:	4608      	mov	r0, r1
 8013316:	4614      	mov	r4, r2
 8013318:	f007 fb46 	bl	801a9a8 <__popcountsi2>
 801331c:	4607      	mov	r7, r0
 801331e:	4620      	mov	r0, r4
 8013320:	f007 fb42 	bl	801a9a8 <__popcountsi2>
 8013324:	4c70      	ldr	r4, [pc, #448]	; (80134e8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1dc>)
 8013326:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80134fc <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1f0>
 801332a:	4606      	mov	r6, r0
 801332c:	f241 0001 	movw	r0, #4097	; 0x1001
 8013330:	f005 fc4c 	bl	8018bcc <rcu_periph_clock_enable>
 8013334:	4620      	mov	r0, r4
 8013336:	f005 fcf9 	bl	8018d2c <timer_deinit>
 801333a:	2500      	movs	r5, #0
 801333c:	23f9      	movs	r3, #249	; 0xf9
 801333e:	a901      	add	r1, sp, #4
 8013340:	4620      	mov	r0, r4
 8013342:	9303      	str	r3, [sp, #12]
 8013344:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8013348:	f005 fd96 	bl	8018e78 <timer_init>
 801334c:	4620      	mov	r0, r4
 801334e:	2101      	movs	r1, #1
 8013350:	f005 ff3e 	bl	80191d0 <timer_master_slave_mode_config>
 8013354:	4620      	mov	r0, r4
 8013356:	2130      	movs	r1, #48	; 0x30
 8013358:	f005 ff2a 	bl	80191b0 <timer_master_output_trigger_source_select>
 801335c:	4629      	mov	r1, r5
 801335e:	4620      	mov	r0, r4
 8013360:	2210      	movs	r2, #16
 8013362:	f005 fec3 	bl	80190ec <timer_channel_output_mode_config>
 8013366:	4620      	mov	r0, r4
 8013368:	2210      	movs	r2, #16
 801336a:	2102      	movs	r1, #2
 801336c:	f005 febe 	bl	80190ec <timer_channel_output_mode_config>
 8013370:	4620      	mov	r0, r4
 8013372:	2210      	movs	r2, #16
 8013374:	2103      	movs	r1, #3
 8013376:	f005 feb9 	bl	80190ec <timer_channel_output_mode_config>
 801337a:	f04f 09fa 	mov.w	r9, #250	; 0xfa
 801337e:	4629      	mov	r1, r5
 8013380:	4620      	mov	r0, r4
 8013382:	2201      	movs	r2, #1
 8013384:	f005 fed8 	bl	8019138 <timer_channel_output_pulse_value_config>
 8013388:	fb09 f207 	mul.w	r2, r9, r7
 801338c:	4620      	mov	r0, r4
 801338e:	08d2      	lsrs	r2, r2, #3
 8013390:	2102      	movs	r1, #2
 8013392:	f005 fed1 	bl	8019138 <timer_channel_output_pulse_value_config>
 8013396:	fb09 f206 	mul.w	r2, r9, r6
 801339a:	08d2      	lsrs	r2, r2, #3
 801339c:	2103      	movs	r1, #3
 801339e:	4620      	mov	r0, r4
 80133a0:	f005 feca 	bl	8019138 <timer_channel_output_pulse_value_config>
 80133a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80133a8:	f241 0002 	movw	r0, #4098	; 0x1002
 80133ac:	f005 fc0e 	bl	8018bcc <rcu_periph_clock_enable>
 80133b0:	4620      	mov	r0, r4
 80133b2:	f005 fcbb 	bl	8018d2c <timer_deinit>
 80133b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133ba:	a901      	add	r1, sp, #4
 80133bc:	4620      	mov	r0, r4
 80133be:	9303      	str	r3, [sp, #12]
 80133c0:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80133c4:	f005 fd58 	bl	8018e78 <timer_init>
 80133c8:	4620      	mov	r0, r4
 80133ca:	2101      	movs	r1, #1
 80133cc:	f005 ff00 	bl	80191d0 <timer_master_slave_mode_config>
 80133d0:	4620      	mov	r0, r4
 80133d2:	2107      	movs	r1, #7
 80133d4:	f005 fef4 	bl	80191c0 <timer_slave_mode_select>
 80133d8:	4620      	mov	r0, r4
 80133da:	2120      	movs	r1, #32
 80133dc:	f005 fee0 	bl	80191a0 <timer_input_trigger_source_select>
 80133e0:	4629      	mov	r1, r5
 80133e2:	4620      	mov	r0, r4
 80133e4:	2210      	movs	r2, #16
 80133e6:	f005 fe81 	bl	80190ec <timer_channel_output_mode_config>
 80133ea:	f8d8 201c 	ldr.w	r2, [r8, #28]
 80133ee:	4629      	mov	r1, r5
 80133f0:	3201      	adds	r2, #1
 80133f2:	4620      	mov	r0, r4
 80133f4:	f005 fea0 	bl	8019138 <timer_channel_output_pulse_value_config>
 80133f8:	2102      	movs	r1, #2
 80133fa:	4620      	mov	r0, r4
 80133fc:	f005 fd7f 	bl	8018efe <timer_interrupt_enable>
 8013400:	4b3a      	ldr	r3, [pc, #232]	; (80134ec <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1e0>)
 8013402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013406:	f504 3416 	add.w	r4, r4, #153600	; 0x25800
 801340a:	f883 531e 	strb.w	r5, [r3, #798]	; 0x31e
 801340e:	f640 4015 	movw	r0, #3093	; 0xc15
 8013412:	601a      	str	r2, [r3, #0]
 8013414:	f005 fbda 	bl	8018bcc <rcu_periph_clock_enable>
 8013418:	2104      	movs	r1, #4
 801341a:	4620      	mov	r0, r4
 801341c:	f005 fa7c 	bl	8018918 <dma_deinit>
 8013420:	a805      	add	r0, sp, #20
 8013422:	f005 faa4 	bl	801896e <dma_single_data_para_struct_init>
 8013426:	4b32      	ldr	r3, [pc, #200]	; (80134f0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1e4>)
 8013428:	f8cd a01c 	str.w	sl, [sp, #28]
 801342c:	2601      	movs	r6, #1
 801342e:	f04f 0940 	mov.w	r9, #64	; 0x40
 8013432:	f44f 6800 	mov.w	r8, #2048	; 0x800
 8013436:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 801343a:	aa05      	add	r2, sp, #20
 801343c:	4620      	mov	r0, r4
 801343e:	2104      	movs	r1, #4
 8013440:	e9cd 3605 	strd	r3, r6, [sp, #20]
 8013444:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8013448:	9608      	str	r6, [sp, #32]
 801344a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801344e:	970d      	str	r7, [sp, #52]	; 0x34
 8013450:	f005 fa99 	bl	8018986 <dma_single_data_mode_init>
 8013454:	4620      	mov	r0, r4
 8013456:	2104      	movs	r1, #4
 8013458:	f005 fad4 	bl	8018a04 <dma_circulation_disable>
 801345c:	2205      	movs	r2, #5
 801345e:	4620      	mov	r0, r4
 8013460:	2104      	movs	r1, #4
 8013462:	f005 fad7 	bl	8018a14 <dma_channel_subperipheral_select>
 8013466:	2107      	movs	r1, #7
 8013468:	4620      	mov	r0, r4
 801346a:	f005 fa55 	bl	8018918 <dma_deinit>
 801346e:	a805      	add	r0, sp, #20
 8013470:	f005 fa7d 	bl	801896e <dma_single_data_para_struct_init>
 8013474:	4b1f      	ldr	r3, [pc, #124]	; (80134f4 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1e8>)
 8013476:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 801347a:	e9cd 3507 	strd	r3, r5, [sp, #28]
 801347e:	4d1e      	ldr	r5, [pc, #120]	; (80134f8 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1ec>)
 8013480:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8013484:	aa05      	add	r2, sp, #20
 8013486:	4620      	mov	r0, r4
 8013488:	2107      	movs	r1, #7
 801348a:	e9cd 5605 	strd	r5, r6, [sp, #20]
 801348e:	970d      	str	r7, [sp, #52]	; 0x34
 8013490:	f005 fa79 	bl	8018986 <dma_single_data_mode_init>
 8013494:	4620      	mov	r0, r4
 8013496:	2107      	movs	r1, #7
 8013498:	f005 fab4 	bl	8018a04 <dma_circulation_disable>
 801349c:	2205      	movs	r2, #5
 801349e:	4620      	mov	r0, r4
 80134a0:	2107      	movs	r1, #7
 80134a2:	f005 fab7 	bl	8018a14 <dma_channel_subperipheral_select>
 80134a6:	2102      	movs	r1, #2
 80134a8:	4620      	mov	r0, r4
 80134aa:	f005 fa35 	bl	8018918 <dma_deinit>
 80134ae:	a805      	add	r0, sp, #20
 80134b0:	f005 fa5d 	bl	801896e <dma_single_data_para_struct_init>
 80134b4:	aa05      	add	r2, sp, #20
 80134b6:	4620      	mov	r0, r4
 80134b8:	2102      	movs	r1, #2
 80134ba:	e9cd a607 	strd	sl, r6, [sp, #28]
 80134be:	e9cd 5605 	strd	r5, r6, [sp, #20]
 80134c2:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80134c6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80134ca:	970d      	str	r7, [sp, #52]	; 0x34
 80134cc:	f005 fa5b 	bl	8018986 <dma_single_data_mode_init>
 80134d0:	4620      	mov	r0, r4
 80134d2:	2102      	movs	r1, #2
 80134d4:	f005 fa96 	bl	8018a04 <dma_circulation_disable>
 80134d8:	2205      	movs	r2, #5
 80134da:	2102      	movs	r1, #2
 80134dc:	4620      	mov	r0, r4
 80134de:	f005 fa99 	bl	8018a14 <dma_channel_subperipheral_select>
 80134e2:	b00e      	add	sp, #56	; 0x38
 80134e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134e8:	40000400 	andmi	r0, r0, r0, lsl #8
 80134ec:	e000e100 	and	lr, r0, r0, lsl #2
 80134f0:	40021018 	andmi	r1, r2, r8, lsl r0
 80134f4:	200012a4 	andcs	r1, r0, r4, lsr #5
 80134f8:	40021028 	andmi	r1, r2, r8, lsr #32
 80134fc:	0801d2d4 	stmdaeq	r1, {r2, r4, r6, r7, r9, ip, lr, pc}

08013500 <WS28xxMulti::Setup(unsigned int)>:
 8013500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013504:	4680      	mov	r8, r0
 8013506:	b092      	sub	sp, #72	; 0x48
 8013508:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801350c:	460c      	mov	r4, r1
 801350e:	f005 fb5d 	bl	8018bcc <rcu_periph_clock_enable>
 8013512:	4882      	ldr	r0, [pc, #520]	; (801371c <WS28xxMulti::Setup(unsigned int)+0x21c>)
 8013514:	4d82      	ldr	r5, [pc, #520]	; (8013720 <WS28xxMulti::Setup(unsigned int)+0x220>)
 8013516:	2340      	movs	r3, #64	; 0x40
 8013518:	2200      	movs	r2, #0
 801351a:	2102      	movs	r1, #2
 801351c:	f005 fada 	bl	8018ad4 <gpio_mode_set>
 8013520:	2340      	movs	r3, #64	; 0x40
 8013522:	487e      	ldr	r0, [pc, #504]	; (801371c <WS28xxMulti::Setup(unsigned int)+0x21c>)
 8013524:	2202      	movs	r2, #2
 8013526:	2100      	movs	r1, #0
 8013528:	f005 faf4 	bl	8018b14 <gpio_output_options_set>
 801352c:	2240      	movs	r2, #64	; 0x40
 801352e:	2102      	movs	r1, #2
 8013530:	487a      	ldr	r0, [pc, #488]	; (801371c <WS28xxMulti::Setup(unsigned int)+0x21c>)
 8013532:	f005 fb0a 	bl	8018b4a <gpio_af_set>
 8013536:	fbb5 f5f4 	udiv	r5, r5, r4
 801353a:	f241 0001 	movw	r0, #4097	; 0x1001
 801353e:	2d0c      	cmp	r5, #12
 8013540:	bf38      	it	cc
 8013542:	250c      	movcc	r5, #12
 8013544:	f005 fb42 	bl	8018bcc <rcu_periph_clock_enable>
 8013548:	4876      	ldr	r0, [pc, #472]	; (8013724 <WS28xxMulti::Setup(unsigned int)+0x224>)
 801354a:	2400      	movs	r4, #0
 801354c:	f005 fbee 	bl	8018d2c <timer_deinit>
 8013550:	1e6b      	subs	r3, r5, #1
 8013552:	4874      	ldr	r0, [pc, #464]	; (8013724 <WS28xxMulti::Setup(unsigned int)+0x224>)
 8013554:	9307      	str	r3, [sp, #28]
 8013556:	a905      	add	r1, sp, #20
 8013558:	2602      	movs	r6, #2
 801355a:	2701      	movs	r7, #1
 801355c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8013560:	f88d 4020 	strb.w	r4, [sp, #32]
 8013564:	f005 fc88 	bl	8018e78 <timer_init>
 8013568:	f44f 7380 	mov.w	r3, #256	; 0x100
 801356c:	486d      	ldr	r0, [pc, #436]	; (8013724 <WS28xxMulti::Setup(unsigned int)+0x224>)
 801356e:	9304      	str	r3, [sp, #16]
 8013570:	aa02      	add	r2, sp, #8
 8013572:	4621      	mov	r1, r4
 8013574:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8013578:	f005 fcd0 	bl	8018f1c <timer_channel_output_config>
 801357c:	fa25 f207 	lsr.w	r2, r5, r7
 8013580:	4868      	ldr	r0, [pc, #416]	; (8013724 <WS28xxMulti::Setup(unsigned int)+0x224>)
 8013582:	3a01      	subs	r2, #1
 8013584:	4621      	mov	r1, r4
 8013586:	f005 fdd7 	bl	8019138 <timer_channel_output_pulse_value_config>
 801358a:	4866      	ldr	r0, [pc, #408]	; (8013724 <WS28xxMulti::Setup(unsigned int)+0x224>)
 801358c:	2260      	movs	r2, #96	; 0x60
 801358e:	4621      	mov	r1, r4
 8013590:	f005 fdac 	bl	80190ec <timer_channel_output_mode_config>
 8013594:	4863      	ldr	r0, [pc, #396]	; (8013724 <WS28xxMulti::Setup(unsigned int)+0x224>)
 8013596:	4622      	mov	r2, r4
 8013598:	4621      	mov	r1, r4
 801359a:	f005 fddb 	bl	8019154 <timer_channel_output_shadow_config>
 801359e:	4861      	ldr	r0, [pc, #388]	; (8013724 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80135a0:	2210      	movs	r2, #16
 80135a2:	4631      	mov	r1, r6
 80135a4:	f005 fda2 	bl	80190ec <timer_channel_output_mode_config>
 80135a8:	485e      	ldr	r0, [pc, #376]	; (8013724 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80135aa:	2210      	movs	r2, #16
 80135ac:	2103      	movs	r1, #3
 80135ae:	f005 fd9d 	bl	80190ec <timer_channel_output_mode_config>
 80135b2:	485c      	ldr	r0, [pc, #368]	; (8013724 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80135b4:	463a      	mov	r2, r7
 80135b6:	4631      	mov	r1, r6
 80135b8:	f005 fdbe 	bl	8019138 <timer_channel_output_pulse_value_config>
 80135bc:	fa25 f206 	lsr.w	r2, r5, r6
 80135c0:	3a01      	subs	r2, #1
 80135c2:	4858      	ldr	r0, [pc, #352]	; (8013724 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80135c4:	2103      	movs	r1, #3
 80135c6:	f005 fdb7 	bl	8019138 <timer_channel_output_pulse_value_config>
 80135ca:	4856      	ldr	r0, [pc, #344]	; (8013724 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80135cc:	4639      	mov	r1, r7
 80135ce:	f005 fdff 	bl	80191d0 <timer_master_slave_mode_config>
 80135d2:	2130      	movs	r1, #48	; 0x30
 80135d4:	4853      	ldr	r0, [pc, #332]	; (8013724 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80135d6:	f005 fdeb 	bl	80191b0 <timer_master_output_trigger_source_select>
 80135da:	f241 0002 	movw	r0, #4098	; 0x1002
 80135de:	f005 faf5 	bl	8018bcc <rcu_periph_clock_enable>
 80135e2:	4851      	ldr	r0, [pc, #324]	; (8013728 <WS28xxMulti::Setup(unsigned int)+0x228>)
 80135e4:	f005 fba2 	bl	8018d2c <timer_deinit>
 80135e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135ec:	484e      	ldr	r0, [pc, #312]	; (8013728 <WS28xxMulti::Setup(unsigned int)+0x228>)
 80135ee:	9307      	str	r3, [sp, #28]
 80135f0:	a905      	add	r1, sp, #20
 80135f2:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80135f6:	f005 fc3f 	bl	8018e78 <timer_init>
 80135fa:	484b      	ldr	r0, [pc, #300]	; (8013728 <WS28xxMulti::Setup(unsigned int)+0x228>)
 80135fc:	4639      	mov	r1, r7
 80135fe:	f005 fde7 	bl	80191d0 <timer_master_slave_mode_config>
 8013602:	4849      	ldr	r0, [pc, #292]	; (8013728 <WS28xxMulti::Setup(unsigned int)+0x228>)
 8013604:	2107      	movs	r1, #7
 8013606:	f005 fddb 	bl	80191c0 <timer_slave_mode_select>
 801360a:	4847      	ldr	r0, [pc, #284]	; (8013728 <WS28xxMulti::Setup(unsigned int)+0x228>)
 801360c:	2120      	movs	r1, #32
 801360e:	f005 fdc7 	bl	80191a0 <timer_input_trigger_source_select>
 8013612:	4845      	ldr	r0, [pc, #276]	; (8013728 <WS28xxMulti::Setup(unsigned int)+0x228>)
 8013614:	2210      	movs	r2, #16
 8013616:	4621      	mov	r1, r4
 8013618:	f005 fd68 	bl	80190ec <timer_channel_output_mode_config>
 801361c:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8013620:	4841      	ldr	r0, [pc, #260]	; (8013728 <WS28xxMulti::Setup(unsigned int)+0x228>)
 8013622:	4621      	mov	r1, r4
 8013624:	f005 fd88 	bl	8019138 <timer_channel_output_pulse_value_config>
 8013628:	4631      	mov	r1, r6
 801362a:	483f      	ldr	r0, [pc, #252]	; (8013728 <WS28xxMulti::Setup(unsigned int)+0x228>)
 801362c:	f005 fc67 	bl	8018efe <timer_interrupt_enable>
 8013630:	4b3e      	ldr	r3, [pc, #248]	; (801372c <WS28xxMulti::Setup(unsigned int)+0x22c>)
 8013632:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013636:	f883 431e 	strb.w	r4, [r3, #798]	; 0x31e
 801363a:	f640 4015 	movw	r0, #3093	; 0xc15
 801363e:	601a      	str	r2, [r3, #0]
 8013640:	f005 fac4 	bl	8018bcc <rcu_periph_clock_enable>
 8013644:	2107      	movs	r1, #7
 8013646:	483a      	ldr	r0, [pc, #232]	; (8013730 <WS28xxMulti::Setup(unsigned int)+0x230>)
 8013648:	f005 f966 	bl	8018918 <dma_deinit>
 801364c:	a809      	add	r0, sp, #36	; 0x24
 801364e:	f005 f98e 	bl	801896e <dma_single_data_para_struct_init>
 8013652:	4b38      	ldr	r3, [pc, #224]	; (8013734 <WS28xxMulti::Setup(unsigned int)+0x234>)
 8013654:	4836      	ldr	r0, [pc, #216]	; (8013730 <WS28xxMulti::Setup(unsigned int)+0x230>)
 8013656:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
 801365a:	4b37      	ldr	r3, [pc, #220]	; (8013738 <WS28xxMulti::Setup(unsigned int)+0x238>)
 801365c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8013660:	aa09      	add	r2, sp, #36	; 0x24
 8013662:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8013666:	f44f 6900 	mov.w	r9, #2048	; 0x800
 801366a:	2107      	movs	r1, #7
 801366c:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
 8013670:	9511      	str	r5, [sp, #68]	; 0x44
 8013672:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8013676:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801367a:	f005 f984 	bl	8018986 <dma_single_data_mode_init>
 801367e:	482c      	ldr	r0, [pc, #176]	; (8013730 <WS28xxMulti::Setup(unsigned int)+0x230>)
 8013680:	2107      	movs	r1, #7
 8013682:	f005 f9bf 	bl	8018a04 <dma_circulation_disable>
 8013686:	2205      	movs	r2, #5
 8013688:	4829      	ldr	r0, [pc, #164]	; (8013730 <WS28xxMulti::Setup(unsigned int)+0x230>)
 801368a:	2107      	movs	r1, #7
 801368c:	f005 f9c2 	bl	8018a14 <dma_channel_subperipheral_select>
 8013690:	4631      	mov	r1, r6
 8013692:	4827      	ldr	r0, [pc, #156]	; (8013730 <WS28xxMulti::Setup(unsigned int)+0x230>)
 8013694:	f005 f940 	bl	8018918 <dma_deinit>
 8013698:	a809      	add	r0, sp, #36	; 0x24
 801369a:	f005 f968 	bl	801896e <dma_single_data_para_struct_init>
 801369e:	4b27      	ldr	r3, [pc, #156]	; (801373c <WS28xxMulti::Setup(unsigned int)+0x23c>)
 80136a0:	4823      	ldr	r0, [pc, #140]	; (8013730 <WS28xxMulti::Setup(unsigned int)+0x230>)
 80136a2:	9511      	str	r5, [sp, #68]	; 0x44
 80136a4:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
 80136a8:	4b25      	ldr	r3, [pc, #148]	; (8013740 <WS28xxMulti::Setup(unsigned int)+0x240>)
 80136aa:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80136ae:	aa09      	add	r2, sp, #36	; 0x24
 80136b0:	4631      	mov	r1, r6
 80136b2:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
 80136b6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80136ba:	f005 f964 	bl	8018986 <dma_single_data_mode_init>
 80136be:	481c      	ldr	r0, [pc, #112]	; (8013730 <WS28xxMulti::Setup(unsigned int)+0x230>)
 80136c0:	4631      	mov	r1, r6
 80136c2:	f005 f99f 	bl	8018a04 <dma_circulation_disable>
 80136c6:	481a      	ldr	r0, [pc, #104]	; (8013730 <WS28xxMulti::Setup(unsigned int)+0x230>)
 80136c8:	2205      	movs	r2, #5
 80136ca:	4631      	mov	r1, r6
 80136cc:	f005 f9a2 	bl	8018a14 <dma_channel_subperipheral_select>
 80136d0:	f8d8 5000 	ldr.w	r5, [r8]
 80136d4:	3d0b      	subs	r5, #11
 80136d6:	42b5      	cmp	r5, r6
 80136d8:	d81c      	bhi.n	8013714 <WS28xxMulti::Setup(unsigned int)+0x214>
 80136da:	f8d8 6004 	ldr.w	r6, [r8, #4]
 80136de:	4627      	mov	r7, r4
 80136e0:	3601      	adds	r6, #1
 80136e2:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80136e6:	2300      	movs	r3, #0
 80136e8:	461a      	mov	r2, r3
 80136ea:	4619      	mov	r1, r3
 80136ec:	4620      	mov	r0, r4
 80136ee:	e9cd 7700 	strd	r7, r7, [sp]
 80136f2:	f7ff fd8b 	bl	801320c <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 80136f6:	2d02      	cmp	r5, #2
 80136f8:	bf1b      	ittet	ne
 80136fa:	23ff      	movne	r3, #255	; 0xff
 80136fc:	e9cd 8800 	strdne	r8, r8, [sp]
 8013700:	e9cd 7700 	strdeq	r7, r7, [sp]
 8013704:	461a      	movne	r2, r3
 8013706:	4620      	mov	r0, r4
 8013708:	4631      	mov	r1, r6
 801370a:	3401      	adds	r4, #1
 801370c:	f7ff fd7e 	bl	801320c <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013710:	2c10      	cmp	r4, #16
 8013712:	d1e8      	bne.n	80136e6 <WS28xxMulti::Setup(unsigned int)+0x1e6>
 8013714:	b012      	add	sp, #72	; 0x48
 8013716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801371a:	bf00      	nop
 801371c:	40020000 	andmi	r0, r2, r0
 8013720:	0bebc200 	bleq	7b03f28 <__stack_size+0x7afff28>
 8013724:	40000400 	andmi	r0, r0, r0, lsl #8
 8013728:	40000800 	andmi	r0, r0, r0, lsl #16
 801372c:	e000e100 	and	lr, r0, r0, lsl #2
 8013730:	40026000 	andmi	r6, r2, r0
 8013734:	0801d2d4 	stmdaeq	r1, {r2, r4, r6, r7, r9, ip, lr, pc}
 8013738:	40021028 	andmi	r1, r2, r8, lsr #32
 801373c:	200012a4 	andcs	r1, r0, r4, lsr #5
 8013740:	40021018 	andmi	r1, r2, r8, lsl r0

08013744 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)>:
 8013744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013746:	460f      	mov	r7, r1
 8013748:	4604      	mov	r4, r0
 801374a:	460d      	mov	r5, r1
 801374c:	4606      	mov	r6, r0
 801374e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013750:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013752:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013756:	2300      	movs	r3, #0
 8013758:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801375c:	61e3      	str	r3, [r4, #28]
 801375e:	4b26      	ldr	r3, [pc, #152]	; (80137f8 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0xb4>)
 8013760:	a901      	add	r1, sp, #4
 8013762:	4628      	mov	r0, r5
 8013764:	601c      	str	r4, [r3, #0]
 8013766:	f7ff f8af 	bl	80128c8 <PixelConfiguration::Validate(unsigned int&)>
 801376a:	6826      	ldr	r6, [r4, #0]
 801376c:	3e0b      	subs	r6, #11
 801376e:	2e02      	cmp	r6, #2
 8013770:	d80a      	bhi.n	8013788 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x44>
 8013772:	686b      	ldr	r3, [r5, #4]
 8013774:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8013778:	d906      	bls.n	8013788 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x44>
 801377a:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 801377e:	606b      	str	r3, [r5, #4]
 8013780:	a901      	add	r1, sp, #4
 8013782:	4628      	mov	r0, r5
 8013784:	f7ff f8a0 	bl	80128c8 <PixelConfiguration::Validate(unsigned int&)>
 8013788:	6863      	ldr	r3, [r4, #4]
 801378a:	9a01      	ldr	r2, [sp, #4]
 801378c:	2e02      	cmp	r6, #2
 801378e:	fb03 f202 	mul.w	r2, r3, r2
 8013792:	bf9b      	ittet	ls
 8013794:	3308      	addls	r3, #8
 8013796:	189b      	addls	r3, r3, r2
 8013798:	61e2      	strhi	r2, [r4, #28]
 801379a:	61e3      	strls	r3, [r4, #28]
 801379c:	69e3      	ldr	r3, [r4, #28]
 801379e:	4e17      	ldr	r6, [pc, #92]	; (80137fc <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0xb8>)
 80137a0:	00db      	lsls	r3, r3, #3
 80137a2:	61e3      	str	r3, [r4, #28]
 80137a4:	f640 4004 	movw	r0, #3076	; 0xc04
 80137a8:	f005 fa10 	bl	8018bcc <rcu_periph_clock_enable>
 80137ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80137b0:	2100      	movs	r1, #0
 80137b2:	4630      	mov	r0, r6
 80137b4:	f005 f9c9 	bl	8018b4a <gpio_af_set>
 80137b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80137bc:	2202      	movs	r2, #2
 80137be:	2101      	movs	r1, #1
 80137c0:	4630      	mov	r0, r6
 80137c2:	f005 f987 	bl	8018ad4 <gpio_mode_set>
 80137c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80137ca:	2202      	movs	r2, #2
 80137cc:	2100      	movs	r1, #0
 80137ce:	4630      	mov	r0, r6
 80137d0:	f005 f9a0 	bl	8018b14 <gpio_output_options_set>
 80137d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80137d8:	62b3      	str	r3, [r6, #40]	; 0x28
 80137da:	7d6b      	ldrb	r3, [r5, #21]
 80137dc:	b13b      	cbz	r3, 80137ee <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0xaa>
 80137de:	7c6a      	ldrb	r2, [r5, #17]
 80137e0:	7c29      	ldrb	r1, [r5, #16]
 80137e2:	4620      	mov	r0, r4
 80137e4:	f7ff fd92 	bl	801330c <WS28xxMulti::Setup(unsigned char, unsigned char)>
 80137e8:	4620      	mov	r0, r4
 80137ea:	b003      	add	sp, #12
 80137ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137ee:	68e9      	ldr	r1, [r5, #12]
 80137f0:	4620      	mov	r0, r4
 80137f2:	f7ff fe85 	bl	8013500 <WS28xxMulti::Setup(unsigned int)>
 80137f6:	e7f7      	b.n	80137e8 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0xa4>
 80137f8:	200012a0 	andcs	r1, r0, r0, lsr #5
 80137fc:	40021000 	andmi	r1, r2, r0

08013800 <WS28xxMulti::Update()>:
 8013800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013802:	4b4c      	ldr	r3, [pc, #304]	; (8013934 <WS28xxMulti::Update()+0x134>)
 8013804:	4e4c      	ldr	r6, [pc, #304]	; (8013938 <WS28xxMulti::Update()+0x138>)
 8013806:	4c4d      	ldr	r4, [pc, #308]	; (801393c <WS28xxMulti::Update()+0x13c>)
 8013808:	4f4d      	ldr	r7, [pc, #308]	; (8013940 <WS28xxMulti::Update()+0x140>)
 801380a:	2201      	movs	r2, #1
 801380c:	701a      	strb	r2, [r3, #0]
 801380e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013812:	2100      	movs	r1, #0
 8013814:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8013818:	f022 0201 	bic.w	r2, r2, #1
 801381c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8013820:	f8c3 1824 	str.w	r1, [r3, #2084]	; 0x824
 8013824:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8013828:	f022 0201 	bic.w	r2, r2, #1
 801382c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8013830:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
 8013834:	7d43      	ldrb	r3, [r0, #21]
 8013836:	4605      	mov	r5, r0
 8013838:	2b00      	cmp	r3, #0
 801383a:	d053      	beq.n	80138e4 <WS28xxMulti::Update()+0xe4>
 801383c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801383e:	f023 0301 	bic.w	r3, r3, #1
 8013842:	6723      	str	r3, [r4, #112]	; 0x70
 8013844:	2220      	movs	r2, #32
 8013846:	2104      	movs	r1, #4
 8013848:	4620      	mov	r0, r4
 801384a:	f005 f907 	bl	8018a5c <dma_interrupt_flag_clear>
 801384e:	67e6      	str	r6, [r4, #124]	; 0x7c
 8013850:	8bab      	ldrh	r3, [r5, #28]
 8013852:	6763      	str	r3, [r4, #116]	; 0x74
 8013854:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013856:	f043 0301 	orr.w	r3, r3, #1
 801385a:	6723      	str	r3, [r4, #112]	; 0x70
 801385c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8013860:	f023 0301 	bic.w	r3, r3, #1
 8013864:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8013868:	2220      	movs	r2, #32
 801386a:	2107      	movs	r1, #7
 801386c:	4620      	mov	r0, r4
 801386e:	f005 f8f5 	bl	8018a5c <dma_interrupt_flag_clear>
 8013872:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
 8013876:	8bab      	ldrh	r3, [r5, #28]
 8013878:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 801387c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8013880:	f043 0301 	orr.w	r3, r3, #1
 8013884:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8013888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801388a:	f023 0301 	bic.w	r3, r3, #1
 801388e:	6423      	str	r3, [r4, #64]	; 0x40
 8013890:	2102      	movs	r1, #2
 8013892:	4620      	mov	r0, r4
 8013894:	2220      	movs	r2, #32
 8013896:	f005 f8e1 	bl	8018a5c <dma_interrupt_flag_clear>
 801389a:	64e6      	str	r6, [r4, #76]	; 0x4c
 801389c:	8bab      	ldrh	r3, [r5, #28]
 801389e:	6463      	str	r3, [r4, #68]	; 0x44
 80138a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80138a2:	4828      	ldr	r0, [pc, #160]	; (8013944 <WS28xxMulti::Update()+0x144>)
 80138a4:	f043 0301 	orr.w	r3, r3, #1
 80138a8:	6423      	str	r3, [r4, #64]	; 0x40
 80138aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80138ae:	f005 fb30 	bl	8018f12 <timer_dma_enable>
 80138b2:	4824      	ldr	r0, [pc, #144]	; (8013944 <WS28xxMulti::Update()+0x144>)
 80138b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80138b8:	f005 fb2b 	bl	8018f12 <timer_dma_enable>
 80138bc:	4821      	ldr	r0, [pc, #132]	; (8013944 <WS28xxMulti::Update()+0x144>)
 80138be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80138c2:	f005 fb26 	bl	8018f12 <timer_dma_enable>
 80138c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80138ca:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80138ce:	f042 0201 	orr.w	r2, r2, #1
 80138d2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 80138d6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80138da:	f042 0201 	orr.w	r2, r2, #1
 80138de:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80138e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138e4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80138e8:	f023 0301 	bic.w	r3, r3, #1
 80138ec:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80138f0:	2220      	movs	r2, #32
 80138f2:	2107      	movs	r1, #7
 80138f4:	4620      	mov	r0, r4
 80138f6:	f005 f8b1 	bl	8018a5c <dma_interrupt_flag_clear>
 80138fa:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
 80138fe:	8bab      	ldrh	r3, [r5, #28]
 8013900:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8013904:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8013908:	f043 0301 	orr.w	r3, r3, #1
 801390c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8013910:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013912:	f023 0301 	bic.w	r3, r3, #1
 8013916:	6423      	str	r3, [r4, #64]	; 0x40
 8013918:	2220      	movs	r2, #32
 801391a:	2102      	movs	r1, #2
 801391c:	4620      	mov	r0, r4
 801391e:	f005 f89d 	bl	8018a5c <dma_interrupt_flag_clear>
 8013922:	64e7      	str	r7, [r4, #76]	; 0x4c
 8013924:	8bab      	ldrh	r3, [r5, #28]
 8013926:	6463      	str	r3, [r4, #68]	; 0x44
 8013928:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801392a:	f043 0301 	orr.w	r3, r3, #1
 801392e:	6423      	str	r3, [r4, #64]	; 0x40
 8013930:	e7bf      	b.n	80138b2 <WS28xxMulti::Update()+0xb2>
 8013932:	bf00      	nop
 8013934:	2000129c 	mulcs	r0, ip, r2
 8013938:	0801d2d4 	stmdaeq	r1, {r2, r4, r6, r7, r9, ip, lr, pc}
 801393c:	40026000 	andmi	r6, r2, r0
 8013940:	200012a4 	andcs	r1, r0, r4, lsr #5
 8013944:	40000400 	andmi	r0, r0, r0, lsl #8

08013948 <WS28xxMulti::Blackout()>:
 8013948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801394c:	4f2d      	ldr	r7, [pc, #180]	; (8013a04 <WS28xxMulti::Blackout()+0xbc>)
 801394e:	4605      	mov	r5, r0
 8013950:	f3bf 8f5f 	dmb	sy
 8013954:	783a      	ldrb	r2, [r7, #0]
 8013956:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 801395a:	2a00      	cmp	r2, #0
 801395c:	d1f8      	bne.n	8013950 <WS28xxMulti::Blackout()+0x8>
 801395e:	7d6c      	ldrb	r4, [r5, #21]
 8013960:	b19c      	cbz	r4, 801398a <WS28xxMulti::Blackout()+0x42>
 8013962:	4a29      	ldr	r2, [pc, #164]	; (8013a08 <WS28xxMulti::Blackout()+0xc0>)
 8013964:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013968:	3301      	adds	r3, #1
 801396a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801396e:	f842 1b04 	str.w	r1, [r2], #4
 8013972:	d1f9      	bne.n	8013968 <WS28xxMulti::Blackout()+0x20>
 8013974:	4628      	mov	r0, r5
 8013976:	f7ff ff43 	bl	8013800 <WS28xxMulti::Update()>
 801397a:	f3bf 8f5f 	dmb	sy
 801397e:	783b      	ldrb	r3, [r7, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d1fa      	bne.n	801397a <WS28xxMulti::Blackout()+0x32>
 8013984:	b003      	add	sp, #12
 8013986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801398a:	682b      	ldr	r3, [r5, #0]
 801398c:	f1a3 080b 	sub.w	r8, r3, #11
 8013990:	f1b8 0f02 	cmp.w	r8, #2
 8013994:	d908      	bls.n	80139a8 <WS28xxMulti::Blackout()+0x60>
 8013996:	4b1c      	ldr	r3, [pc, #112]	; (8013a08 <WS28xxMulti::Blackout()+0xc0>)
 8013998:	4622      	mov	r2, r4
 801399a:	3401      	adds	r4, #1
 801399c:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80139a0:	f843 2b04 	str.w	r2, [r3], #4
 80139a4:	d1f9      	bne.n	801399a <WS28xxMulti::Blackout()+0x52>
 80139a6:	e7e5      	b.n	8013974 <WS28xxMulti::Blackout()+0x2c>
 80139a8:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80139ac:	4626      	mov	r6, r4
 80139ae:	f10a 0b01 	add.w	fp, sl, #1
 80139b2:	2300      	movs	r3, #0
 80139b4:	e9cd 6600 	strd	r6, r6, [sp]
 80139b8:	461a      	mov	r2, r3
 80139ba:	4619      	mov	r1, r3
 80139bc:	4620      	mov	r0, r4
 80139be:	f7ff fc25 	bl	801320c <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 80139c2:	f04f 0901 	mov.w	r9, #1
 80139c6:	45ca      	cmp	sl, r9
 80139c8:	d211      	bcs.n	80139ee <WS28xxMulti::Blackout()+0xa6>
 80139ca:	f1b8 0f02 	cmp.w	r8, #2
 80139ce:	bf15      	itete	ne
 80139d0:	23ff      	movne	r3, #255	; 0xff
 80139d2:	2300      	moveq	r3, #0
 80139d4:	e9cd 3300 	strdne	r3, r3, [sp]
 80139d8:	e9cd 6600 	strdeq	r6, r6, [sp]
 80139dc:	4620      	mov	r0, r4
 80139de:	461a      	mov	r2, r3
 80139e0:	4659      	mov	r1, fp
 80139e2:	3401      	adds	r4, #1
 80139e4:	f7ff fc12 	bl	801320c <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 80139e8:	2c10      	cmp	r4, #16
 80139ea:	d1e2      	bne.n	80139b2 <WS28xxMulti::Blackout()+0x6a>
 80139ec:	e7c2      	b.n	8013974 <WS28xxMulti::Blackout()+0x2c>
 80139ee:	4649      	mov	r1, r9
 80139f0:	e9cd 6600 	strd	r6, r6, [sp]
 80139f4:	2300      	movs	r3, #0
 80139f6:	22e0      	movs	r2, #224	; 0xe0
 80139f8:	4620      	mov	r0, r4
 80139fa:	f7ff fc07 	bl	801320c <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 80139fe:	f109 0901 	add.w	r9, r9, #1
 8013a02:	e7e0      	b.n	80139c6 <WS28xxMulti::Blackout()+0x7e>
 8013a04:	2000129c 	mulcs	r0, ip, r2
 8013a08:	200012a4 	andcs	r1, r0, r4, lsr #5

08013a0c <WS28xxMulti::FullOn()>:
 8013a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a10:	4f2c      	ldr	r7, [pc, #176]	; (8013ac4 <WS28xxMulti::FullOn()+0xb8>)
 8013a12:	4605      	mov	r5, r0
 8013a14:	f3bf 8f5f 	dmb	sy
 8013a18:	783a      	ldrb	r2, [r7, #0]
 8013a1a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8013a1e:	2a00      	cmp	r2, #0
 8013a20:	d1f8      	bne.n	8013a14 <WS28xxMulti::FullOn()+0x8>
 8013a22:	7d6c      	ldrb	r4, [r5, #21]
 8013a24:	b194      	cbz	r4, 8013a4c <WS28xxMulti::FullOn()+0x40>
 8013a26:	4a28      	ldr	r2, [pc, #160]	; (8013ac8 <WS28xxMulti::FullOn()+0xbc>)
 8013a28:	4619      	mov	r1, r3
 8013a2a:	3301      	adds	r3, #1
 8013a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013a30:	f842 1b04 	str.w	r1, [r2], #4
 8013a34:	d1f9      	bne.n	8013a2a <WS28xxMulti::FullOn()+0x1e>
 8013a36:	4628      	mov	r0, r5
 8013a38:	f7ff fee2 	bl	8013800 <WS28xxMulti::Update()>
 8013a3c:	f3bf 8f5f 	dmb	sy
 8013a40:	783b      	ldrb	r3, [r7, #0]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d1fa      	bne.n	8013a3c <WS28xxMulti::FullOn()+0x30>
 8013a46:	b003      	add	sp, #12
 8013a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a4c:	682e      	ldr	r6, [r5, #0]
 8013a4e:	3e0b      	subs	r6, #11
 8013a50:	2e02      	cmp	r6, #2
 8013a52:	d908      	bls.n	8013a66 <WS28xxMulti::FullOn()+0x5a>
 8013a54:	4b1c      	ldr	r3, [pc, #112]	; (8013ac8 <WS28xxMulti::FullOn()+0xbc>)
 8013a56:	22ff      	movs	r2, #255	; 0xff
 8013a58:	3401      	adds	r4, #1
 8013a5a:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8013a5e:	f843 2b04 	str.w	r2, [r3], #4
 8013a62:	d1f9      	bne.n	8013a58 <WS28xxMulti::FullOn()+0x4c>
 8013a64:	e7e7      	b.n	8013a36 <WS28xxMulti::FullOn()+0x2a>
 8013a66:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8013a6a:	46a0      	mov	r8, r4
 8013a6c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8013a70:	2300      	movs	r3, #0
 8013a72:	e9cd 8800 	strd	r8, r8, [sp]
 8013a76:	461a      	mov	r2, r3
 8013a78:	4619      	mov	r1, r3
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	f7ff fbc6 	bl	801320c <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013a80:	f04f 0b01 	mov.w	fp, #1
 8013a84:	45da      	cmp	sl, fp
 8013a86:	d211      	bcs.n	8013aac <WS28xxMulti::FullOn()+0xa0>
 8013a88:	2e02      	cmp	r6, #2
 8013a8a:	bf15      	itete	ne
 8013a8c:	23ff      	movne	r3, #255	; 0xff
 8013a8e:	2300      	moveq	r3, #0
 8013a90:	e9cd 9900 	strdne	r9, r9, [sp]
 8013a94:	e9cd 8800 	strdeq	r8, r8, [sp]
 8013a98:	4620      	mov	r0, r4
 8013a9a:	f10a 0101 	add.w	r1, sl, #1
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	3401      	adds	r4, #1
 8013aa2:	f7ff fbb3 	bl	801320c <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013aa6:	2c10      	cmp	r4, #16
 8013aa8:	d1e2      	bne.n	8013a70 <WS28xxMulti::FullOn()+0x64>
 8013aaa:	e7c4      	b.n	8013a36 <WS28xxMulti::FullOn()+0x2a>
 8013aac:	4659      	mov	r1, fp
 8013aae:	e9cd 9900 	strd	r9, r9, [sp]
 8013ab2:	23ff      	movs	r3, #255	; 0xff
 8013ab4:	22e0      	movs	r2, #224	; 0xe0
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	f7ff fba8 	bl	801320c <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013abc:	f10b 0b01 	add.w	fp, fp, #1
 8013ac0:	e7e0      	b.n	8013a84 <WS28xxMulti::FullOn()+0x78>
 8013ac2:	bf00      	nop
 8013ac4:	2000129c 	mulcs	r0, ip, r2
 8013ac8:	200012a4 	andcs	r1, r0, r4, lsr #5

08013acc <WS28xxMulti::IsUpdating()>:
 8013acc:	f3bf 8f5f 	dmb	sy
 8013ad0:	4b01      	ldr	r3, [pc, #4]	; (8013ad8 <WS28xxMulti::IsUpdating()+0xc>)
 8013ad2:	7818      	ldrb	r0, [r3, #0]
 8013ad4:	4770      	bx	lr
 8013ad6:	bf00      	nop
 8013ad8:	2000129c 	mulcs	r0, ip, r2

08013adc <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 8013adc:	b2c8      	uxtb	r0, r1
 8013ade:	491c      	ldr	r1, [pc, #112]	; (8013b50 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x74>)
 8013ae0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013ae4:	b570      	push	{r4, r5, r6, lr}
 8013ae6:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8013aea:	4a1a      	ldr	r2, [pc, #104]	; (8013b54 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x78>)
 8013aec:	f89d e010 	ldrb.w	lr, [sp, #16]
 8013af0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8013af4:	440a      	add	r2, r1
 8013af6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8013afa:	f100 6008 	add.w	r0, r0, #142606336	; 0x8800000
 8013afe:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8013b02:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8013b06:	0092      	lsls	r2, r2, #2
 8013b08:	0080      	lsls	r0, r0, #2
 8013b0a:	2180      	movs	r1, #128	; 0x80
 8013b0c:	2400      	movs	r4, #0
 8013b0e:	2501      	movs	r5, #1
 8013b10:	420b      	tst	r3, r1
 8013b12:	f5a2 6c80 	sub.w	ip, r2, #1024	; 0x400
 8013b16:	bf16      	itet	ne
 8013b18:	f5a2 6c80 	subne.w	ip, r2, #1024	; 0x400
 8013b1c:	f8cc 5000 	streq.w	r5, [ip]
 8013b20:	f8cc 4000 	strne.w	r4, [ip]
 8013b24:	ea1e 0f01 	tst.w	lr, r1
 8013b28:	f5a2 7c00 	sub.w	ip, r2, #512	; 0x200
 8013b2c:	bf16      	itet	ne
 8013b2e:	f5a2 7c00 	subne.w	ip, r2, #512	; 0x200
 8013b32:	f8cc 5000 	streq.w	r5, [ip]
 8013b36:	f8cc 4000 	strne.w	r4, [ip]
 8013b3a:	420e      	tst	r6, r1
 8013b3c:	bf0c      	ite	eq
 8013b3e:	6015      	streq	r5, [r2, #0]
 8013b40:	6014      	strne	r4, [r2, #0]
 8013b42:	3240      	adds	r2, #64	; 0x40
 8013b44:	4290      	cmp	r0, r2
 8013b46:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013b4a:	d1e1      	bne.n	8013b10 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x34>
 8013b4c:	bd70      	pop	{r4, r5, r6, pc}
 8013b4e:	bf00      	nop
 8013b50:	200012a4 	andcs	r1, r0, r4, lsr #5
 8013b54:	e1100020 	tst	r0, r0, lsr #32

08013b58 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 8013b58:	b2c8      	uxtb	r0, r1
 8013b5a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8013b5e:	4a19      	ldr	r2, [pc, #100]	; (8013bc4 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x6c>)
 8013b60:	b570      	push	{r4, r5, r6, lr}
 8013b62:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8013b66:	4918      	ldr	r1, [pc, #96]	; (8013bc8 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x70>)
 8013b68:	f89d c010 	ldrb.w	ip, [sp, #16]
 8013b6c:	f89d e014 	ldrb.w	lr, [sp, #20]
 8013b70:	4411      	add	r1, r2
 8013b72:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013b76:	f100 6008 	add.w	r0, r0, #142606336	; 0x8800000
 8013b7a:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8013b7e:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8013b82:	0089      	lsls	r1, r1, #2
 8013b84:	0080      	lsls	r0, r0, #2
 8013b86:	2280      	movs	r2, #128	; 0x80
 8013b88:	2401      	movs	r4, #1
 8013b8a:	ea13 0502 	ands.w	r5, r3, r2
 8013b8e:	f5a1 6680 	sub.w	r6, r1, #1024	; 0x400
 8013b92:	bf0a      	itet	eq
 8013b94:	f5a1 6680 	subeq.w	r6, r1, #1024	; 0x400
 8013b98:	6034      	strne	r4, [r6, #0]
 8013b9a:	6035      	streq	r5, [r6, #0]
 8013b9c:	ea1c 0502 	ands.w	r5, ip, r2
 8013ba0:	f5a1 7600 	sub.w	r6, r1, #512	; 0x200
 8013ba4:	bf0a      	itet	eq
 8013ba6:	f5a1 7600 	subeq.w	r6, r1, #512	; 0x200
 8013baa:	6034      	strne	r4, [r6, #0]
 8013bac:	6035      	streq	r5, [r6, #0]
 8013bae:	ea1e 0502 	ands.w	r5, lr, r2
 8013bb2:	bf14      	ite	ne
 8013bb4:	600c      	strne	r4, [r1, #0]
 8013bb6:	600d      	streq	r5, [r1, #0]
 8013bb8:	3140      	adds	r1, #64	; 0x40
 8013bba:	4288      	cmp	r0, r1
 8013bbc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013bc0:	d1e3      	bne.n	8013b8a <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x32>
 8013bc2:	bd70      	pop	{r4, r5, r6, pc}
 8013bc4:	200012a4 	andcs	r1, r0, r4, lsr #5
 8013bc8:	e1100020 	tst	r0, r0, lsr #32

08013bcc <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 8013bcc:	b530      	push	{r4, r5, lr}
 8013bce:	6984      	ldr	r4, [r0, #24]
 8013bd0:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8013bd4:	468c      	mov	ip, r1
 8013bd6:	4611      	mov	r1, r2
 8013bd8:	5ce2      	ldrb	r2, [r4, r3]
 8013bda:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013bde:	5d65      	ldrb	r5, [r4, r5]
 8013be0:	5ce3      	ldrb	r3, [r4, r3]
 8013be2:	7d44      	ldrb	r4, [r0, #21]
 8013be4:	bb1c      	cbnz	r4, 8013c2e <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x62>
 8013be6:	6804      	ldr	r4, [r0, #0]
 8013be8:	b1cc      	cbz	r4, 8013c1e <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x52>
 8013bea:	3c0b      	subs	r4, #11
 8013bec:	2c01      	cmp	r4, #1
 8013bee:	9204      	str	r2, [sp, #16]
 8013bf0:	d94a      	bls.n	8013c88 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xbc>
 8013bf2:	ea6f 0493 	mvn.w	r4, r3, lsr #2
 8013bf6:	9503      	str	r5, [sp, #12]
 8013bf8:	f004 0430 	and.w	r4, r4, #48	; 0x30
 8013bfc:	f082 02c0 	eor.w	r2, r2, #192	; 0xc0
 8013c00:	ea6f 1515 	mvn.w	r5, r5, lsr #4
 8013c04:	f005 050c 	and.w	r5, r5, #12
 8013c08:	ea44 1292 	orr.w	r2, r4, r2, lsr #6
 8013c0c:	432a      	orrs	r2, r5
 8013c0e:	3101      	adds	r1, #1
 8013c10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c14:	4660      	mov	r0, ip
 8013c16:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8013c1a:	f7ff baf7 	b.w	801320c <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013c1e:	6884      	ldr	r4, [r0, #8]
 8013c20:	2c05      	cmp	r4, #5
 8013c22:	d854      	bhi.n	8013cce <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x102>
 8013c24:	e8df f004 	tbb	[pc, r4]
 8013c28:	4c484440 	cfstrdmi	mvd4, [r8], {64}	; 0x40
 8013c2c:	68843850 	stmvs	r4, {r4, r6, fp, ip, sp}
 8013c30:	2c05      	cmp	r4, #5
 8013c32:	d826      	bhi.n	8013c82 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xb6>
 8013c34:	e8df f004 	tbb	[pc, r4]
 8013c38:	0b141821 	bleq	8519cc4 <__exidx_end+0x4fbc98>
 8013c3c:	e9cd2503 	stmib	sp, {r0, r1, r8, sl, sp}^
 8013c40:	2503      	movs	r5, #3
 8013c42:	460a      	mov	r2, r1
 8013c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c48:	4661      	mov	r1, ip
 8013c4a:	f7ff bf47 	b.w	8013adc <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8013c4e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013c52:	462b      	mov	r3, r5
 8013c54:	460a      	mov	r2, r1
 8013c56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c5a:	4661      	mov	r1, ip
 8013c5c:	f7ff bf3e 	b.w	8013adc <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8013c60:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8013c64:	462b      	mov	r3, r5
 8013c66:	e7f5      	b.n	8013c54 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x88>
 8013c68:	e9cd 3503 	strd	r3, r5, [sp, #12]
 8013c6c:	4613      	mov	r3, r2
 8013c6e:	460a      	mov	r2, r1
 8013c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c74:	4661      	mov	r1, ip
 8013c76:	f7ff bf31 	b.w	8013adc <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8013c7a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8013c7e:	4613      	mov	r3, r2
 8013c80:	e7f5      	b.n	8013c6e <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xa2>
 8013c82:	e9cd 5203 	strd	r5, r2, [sp, #12]
 8013c86:	e7dc      	b.n	8013c42 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x76>
 8013c88:	7c82      	ldrb	r2, [r0, #18]
 8013c8a:	9503      	str	r5, [sp, #12]
 8013c8c:	3101      	adds	r1, #1
 8013c8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c92:	4660      	mov	r0, ip
 8013c94:	f7ff baba 	b.w	801320c <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013c98:	e9cd 5203 	strd	r5, r2, [sp, #12]
 8013c9c:	460a      	mov	r2, r1
 8013c9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ca2:	4661      	mov	r1, ip
 8013ca4:	f7ff bf58 	b.w	8013b58 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8013ca8:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8013cac:	4613      	mov	r3, r2
 8013cae:	e7f5      	b.n	8013c9c <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013cb0:	e9cd 3503 	strd	r3, r5, [sp, #12]
 8013cb4:	4613      	mov	r3, r2
 8013cb6:	e7f1      	b.n	8013c9c <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013cb8:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8013cbc:	462b      	mov	r3, r5
 8013cbe:	e7ed      	b.n	8013c9c <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013cc0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013cc4:	462b      	mov	r3, r5
 8013cc6:	e7e9      	b.n	8013c9c <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013cc8:	e9cd 2503 	strd	r2, r5, [sp, #12]
 8013ccc:	e7e6      	b.n	8013c9c <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013cce:	bf00      	nop

08013cd0 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 8013cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cd2:	6980      	ldr	r0, [r0, #24]
 8013cd4:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8013cd8:	f810 c003 	ldrb.w	ip, [r0, r3]
 8013cdc:	4b1c      	ldr	r3, [pc, #112]	; (8013d50 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x80>)
 8013cde:	f810 e004 	ldrb.w	lr, [r0, r4]
 8013ce2:	eb03 1282 	add.w	r2, r3, r2, lsl #6
 8013ce6:	4b1b      	ldr	r3, [pc, #108]	; (8013d54 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x84>)
 8013ce8:	b2c9      	uxtb	r1, r1
 8013cea:	4413      	add	r3, r2
 8013cec:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8013cf0:	f101 6108 	add.w	r1, r1, #142606336	; 0x8800000
 8013cf4:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8013cf8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013cfc:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013d00:	5c45      	ldrb	r5, [r0, r1]
 8013d02:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8013d06:	009b      	lsls	r3, r3, #2
 8013d08:	5c46      	ldrb	r6, [r0, r1]
 8013d0a:	0092      	lsls	r2, r2, #2
 8013d0c:	2180      	movs	r1, #128	; 0x80
 8013d0e:	2000      	movs	r0, #0
 8013d10:	2401      	movs	r4, #1
 8013d12:	f5a3 67c0 	sub.w	r7, r3, #1536	; 0x600
 8013d16:	ea1e 0f01 	tst.w	lr, r1
 8013d1a:	bf0c      	ite	eq
 8013d1c:	603c      	streq	r4, [r7, #0]
 8013d1e:	6038      	strne	r0, [r7, #0]
 8013d20:	f5a3 6780 	sub.w	r7, r3, #1024	; 0x400
 8013d24:	ea1c 0f01 	tst.w	ip, r1
 8013d28:	bf0c      	ite	eq
 8013d2a:	603c      	streq	r4, [r7, #0]
 8013d2c:	6038      	strne	r0, [r7, #0]
 8013d2e:	f5a3 7700 	sub.w	r7, r3, #512	; 0x200
 8013d32:	420d      	tst	r5, r1
 8013d34:	bf0c      	ite	eq
 8013d36:	603c      	streq	r4, [r7, #0]
 8013d38:	6038      	strne	r0, [r7, #0]
 8013d3a:	420e      	tst	r6, r1
 8013d3c:	bf0c      	ite	eq
 8013d3e:	601c      	streq	r4, [r3, #0]
 8013d40:	6018      	strne	r0, [r3, #0]
 8013d42:	3340      	adds	r3, #64	; 0x40
 8013d44:	429a      	cmp	r2, r3
 8013d46:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013d4a:	d1e2      	bne.n	8013d12 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
 8013d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	200012a4 	andcs	r1, r0, r4, lsr #5
 8013d54:	e1100030 	tst	r0, r0, lsr r0

08013d58 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 8013d58:	b510      	push	{r4, lr}
 8013d5a:	4a05      	ldr	r2, [pc, #20]	; (8013d70 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	2020      	movs	r0, #32
 8013d60:	428b      	cmp	r3, r1
 8013d62:	d100      	bne.n	8013d66 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0xe>
 8013d64:	bd10      	pop	{r4, pc}
 8013d66:	f852 4b04 	ldr.w	r4, [r2], #4
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	4420      	add	r0, r4
 8013d6e:	e7f7      	b.n	8013d60 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 8013d70:	0801d2d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, ip, lr, pc}

08013d74 <SpiFlashStore::Init()>:
 8013d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d78:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8013ea4 <SpiFlashStore::Init()+0x130>
 8013d7c:	b085      	sub	sp, #20
 8013d7e:	4607      	mov	r7, r0
 8013d80:	f8d8 0000 	ldr.w	r0, [r8]
 8013d84:	f000 fe07 	bl	8014996 <FlashRom::GetSectorSize() const>
 8013d88:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8013d8c:	4605      	mov	r5, r0
 8013d8e:	d17e      	bne.n	8013e8e <SpiFlashStore::Init()+0x11a>
 8013d90:	f8d8 0000 	ldr.w	r0, [r8]
 8013d94:	f000 fdfc 	bl	8014990 <FlashRom::GetSize() const>
 8013d98:	4b3e      	ldr	r3, [pc, #248]	; (8013e94 <SpiFlashStore::Init()+0x120>)
 8013d9a:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 8013d9e:	f3c1 060b 	ubfx	r6, r1, #0, #12
 8013da2:	6019      	str	r1, [r3, #0]
 8013da4:	2e00      	cmp	r6, #0
 8013da6:	d172      	bne.n	8013e8e <SpiFlashStore::Init()+0x11a>
 8013da8:	4c3b      	ldr	r4, [pc, #236]	; (8013e98 <SpiFlashStore::Init()+0x124>)
 8013daa:	ab03      	add	r3, sp, #12
 8013dac:	9300      	str	r3, [sp, #0]
 8013dae:	462a      	mov	r2, r5
 8013db0:	4623      	mov	r3, r4
 8013db2:	f8d8 0000 	ldr.w	r0, [r8]
 8013db6:	f000 fdf1 	bl	801499c <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 8013dba:	7823      	ldrb	r3, [r4, #0]
 8013dbc:	2b41      	cmp	r3, #65	; 0x41
 8013dbe:	bf1c      	itt	ne
 8013dc0:	2341      	movne	r3, #65	; 0x41
 8013dc2:	7023      	strbne	r3, [r4, #0]
 8013dc4:	7863      	ldrb	r3, [r4, #1]
 8013dc6:	bf14      	ite	ne
 8013dc8:	4635      	movne	r5, r6
 8013dca:	2501      	moveq	r5, #1
 8013dcc:	2b76      	cmp	r3, #118	; 0x76
 8013dce:	bf1c      	itt	ne
 8013dd0:	2376      	movne	r3, #118	; 0x76
 8013dd2:	7063      	strbne	r3, [r4, #1]
 8013dd4:	78a3      	ldrb	r3, [r4, #2]
 8013dd6:	bf18      	it	ne
 8013dd8:	2500      	movne	r5, #0
 8013dda:	2b56      	cmp	r3, #86	; 0x56
 8013ddc:	bf1c      	itt	ne
 8013dde:	2356      	movne	r3, #86	; 0x56
 8013de0:	70a3      	strbne	r3, [r4, #2]
 8013de2:	78e3      	ldrb	r3, [r4, #3]
 8013de4:	bf18      	it	ne
 8013de6:	2500      	movne	r5, #0
 8013de8:	2b10      	cmp	r3, #16
 8013dea:	d023      	beq.n	8013e34 <SpiFlashStore::Init()+0xc0>
 8013dec:	2310      	movs	r3, #16
 8013dee:	70e3      	strb	r3, [r4, #3]
 8013df0:	4b2a      	ldr	r3, [pc, #168]	; (8013e9c <SpiFlashStore::Init()+0x128>)
 8013df2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8013ea8 <SpiFlashStore::Init()+0x134>
 8013df6:	2201      	movs	r2, #1
 8013df8:	701a      	strb	r2, [r3, #0]
 8013dfa:	2500      	movs	r5, #0
 8013dfc:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8013e00:	4631      	mov	r1, r6
 8013e02:	4638      	mov	r0, r7
 8013e04:	f7ff ffa8 	bl	8013d58 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8013e08:	1821      	adds	r1, r4, r0
 8013e0a:	5425      	strb	r5, [r4, r0]
 8013e0c:	704d      	strb	r5, [r1, #1]
 8013e0e:	708d      	strb	r5, [r1, #2]
 8013e10:	70cd      	strb	r5, [r1, #3]
 8013e12:	f858 1b04 	ldr.w	r1, [r8], #4
 8013e16:	4603      	mov	r3, r0
 8013e18:	1d02      	adds	r2, r0, #4
 8013e1a:	440b      	add	r3, r1
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d332      	bcc.n	8013e86 <SpiFlashStore::Init()+0x112>
 8013e20:	3601      	adds	r6, #1
 8013e22:	2e1c      	cmp	r6, #28
 8013e24:	d1ec      	bne.n	8013e00 <SpiFlashStore::Init()+0x8c>
 8013e26:	4b1e      	ldr	r3, [pc, #120]	; (8013ea0 <SpiFlashStore::Init()+0x12c>)
 8013e28:	2501      	movs	r5, #1
 8013e2a:	601d      	str	r5, [r3, #0]
 8013e2c:	4628      	mov	r0, r5
 8013e2e:	b005      	add	sp, #20
 8013e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e34:	2d00      	cmp	r5, #0
 8013e36:	d0db      	beq.n	8013df0 <SpiFlashStore::Init()+0x7c>
 8013e38:	f04f 0900 	mov.w	r9, #0
 8013e3c:	46c8      	mov	r8, r9
 8013e3e:	4631      	mov	r1, r6
 8013e40:	4638      	mov	r0, r7
 8013e42:	f7ff ff89 	bl	8013d58 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8013e46:	5c23      	ldrb	r3, [r4, r0]
 8013e48:	2bff      	cmp	r3, #255	; 0xff
 8013e4a:	d112      	bne.n	8013e72 <SpiFlashStore::Init()+0xfe>
 8013e4c:	1823      	adds	r3, r4, r0
 8013e4e:	785a      	ldrb	r2, [r3, #1]
 8013e50:	2aff      	cmp	r2, #255	; 0xff
 8013e52:	d10e      	bne.n	8013e72 <SpiFlashStore::Init()+0xfe>
 8013e54:	789a      	ldrb	r2, [r3, #2]
 8013e56:	2aff      	cmp	r2, #255	; 0xff
 8013e58:	d10b      	bne.n	8013e72 <SpiFlashStore::Init()+0xfe>
 8013e5a:	78da      	ldrb	r2, [r3, #3]
 8013e5c:	2aff      	cmp	r2, #255	; 0xff
 8013e5e:	d108      	bne.n	8013e72 <SpiFlashStore::Init()+0xfe>
 8013e60:	f804 8000 	strb.w	r8, [r4, r0]
 8013e64:	46a9      	mov	r9, r5
 8013e66:	f883 8001 	strb.w	r8, [r3, #1]
 8013e6a:	f883 8002 	strb.w	r8, [r3, #2]
 8013e6e:	f883 8003 	strb.w	r8, [r3, #3]
 8013e72:	3601      	adds	r6, #1
 8013e74:	2e1c      	cmp	r6, #28
 8013e76:	d1e2      	bne.n	8013e3e <SpiFlashStore::Init()+0xca>
 8013e78:	f1b9 0f00 	cmp.w	r9, #0
 8013e7c:	d0d6      	beq.n	8013e2c <SpiFlashStore::Init()+0xb8>
 8013e7e:	4b08      	ldr	r3, [pc, #32]	; (8013ea0 <SpiFlashStore::Init()+0x12c>)
 8013e80:	2201      	movs	r2, #1
 8013e82:	601a      	str	r2, [r3, #0]
 8013e84:	e7d2      	b.n	8013e2c <SpiFlashStore::Init()+0xb8>
 8013e86:	f804 9002 	strb.w	r9, [r4, r2]
 8013e8a:	3201      	adds	r2, #1
 8013e8c:	e7c6      	b.n	8013e1c <SpiFlashStore::Init()+0xa8>
 8013e8e:	2500      	movs	r5, #0
 8013e90:	e7cc      	b.n	8013e2c <SpiFlashStore::Init()+0xb8>
 8013e92:	bf00      	nop
 8013e94:	200092a8 	andcs	r9, r0, r8, lsr #5
 8013e98:	40024000 	andmi	r4, r2, r0
 8013e9c:	200092bc 			; <UNDEFINED> instruction: 0x200092bc
 8013ea0:	200092b4 			; <UNDEFINED> instruction: 0x200092b4
 8013ea4:	200092e4 	andcs	r9, r0, r4, ror #5
 8013ea8:	0801d2d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, ip, lr, pc}

08013eac <SpiFlashStore::SpiFlashStore()>:
 8013eac:	b538      	push	{r3, r4, r5, lr}
 8013eae:	4b0d      	ldr	r3, [pc, #52]	; (8013ee4 <SpiFlashStore::SpiFlashStore()+0x38>)
 8013eb0:	4d0d      	ldr	r5, [pc, #52]	; (8013ee8 <SpiFlashStore::SpiFlashStore()+0x3c>)
 8013eb2:	6018      	str	r0, [r3, #0]
 8013eb4:	4b0d      	ldr	r3, [pc, #52]	; (8013eec <SpiFlashStore::SpiFlashStore()+0x40>)
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	7a9b      	ldrb	r3, [r3, #10]
 8013eba:	4604      	mov	r4, r0
 8013ebc:	b113      	cbz	r3, 8013ec4 <SpiFlashStore::SpiFlashStore()+0x18>
 8013ebe:	f7ff ff59 	bl	8013d74 <SpiFlashStore::Init()>
 8013ec2:	7028      	strb	r0, [r5, #0]
 8013ec4:	782b      	ldrb	r3, [r5, #0]
 8013ec6:	b153      	cbz	r3, 8013ede <SpiFlashStore::SpiFlashStore()+0x32>
 8013ec8:	4909      	ldr	r1, [pc, #36]	; (8013ef0 <SpiFlashStore::SpiFlashStore()+0x44>)
 8013eca:	2320      	movs	r3, #32
 8013ecc:	2200      	movs	r2, #0
 8013ece:	f851 0b04 	ldr.w	r0, [r1], #4
 8013ed2:	3201      	adds	r2, #1
 8013ed4:	2a1c      	cmp	r2, #28
 8013ed6:	4403      	add	r3, r0
 8013ed8:	d1f9      	bne.n	8013ece <SpiFlashStore::SpiFlashStore()+0x22>
 8013eda:	4a06      	ldr	r2, [pc, #24]	; (8013ef4 <SpiFlashStore::SpiFlashStore()+0x48>)
 8013edc:	6013      	str	r3, [r2, #0]
 8013ede:	4620      	mov	r0, r4
 8013ee0:	bd38      	pop	{r3, r4, r5, pc}
 8013ee2:	bf00      	nop
 8013ee4:	200092b8 			; <UNDEFINED> instruction: 0x200092b8
 8013ee8:	200092ac 	andcs	r9, r0, ip, lsr #5
 8013eec:	200092e4 	andcs	r9, r0, r4, ror #5
 8013ef0:	0801d2d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, ip, lr, pc}
 8013ef4:	200092b0 			; <UNDEFINED> instruction: 0x200092b0

08013ef8 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 8013ef8:	b508      	push	{r3, lr}
 8013efa:	f7ff ff2d 	bl	8013d58 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8013efe:	4905      	ldr	r1, [pc, #20]	; (8013f14 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 8013f00:	1842      	adds	r2, r0, r1
 8013f02:	2300      	movs	r3, #0
 8013f04:	540b      	strb	r3, [r1, r0]
 8013f06:	7053      	strb	r3, [r2, #1]
 8013f08:	7093      	strb	r3, [r2, #2]
 8013f0a:	70d3      	strb	r3, [r2, #3]
 8013f0c:	4b02      	ldr	r3, [pc, #8]	; (8013f18 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 8013f0e:	2201      	movs	r2, #1
 8013f10:	601a      	str	r2, [r3, #0]
 8013f12:	bd08      	pop	{r3, pc}
 8013f14:	40024000 	andmi	r4, r2, r0
 8013f18:	200092b4 			; <UNDEFINED> instruction: 0x200092b4

08013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 8013f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f20:	461c      	mov	r4, r3
 8013f22:	4b19      	ldr	r3, [pc, #100]	; (8013f88 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8013f24:	9d07      	ldr	r5, [sp, #28]
 8013f26:	781f      	ldrb	r7, [r3, #0]
 8013f28:	4616      	mov	r6, r2
 8013f2a:	b307      	cbz	r7, 8013f6e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8013f2c:	f7ff ff14 	bl	8013d58 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8013f30:	4a16      	ldr	r2, [pc, #88]	; (8013f8c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 8013f32:	1831      	adds	r1, r6, r0
 8013f34:	1e63      	subs	r3, r4, #1
 8013f36:	9c06      	ldr	r4, [sp, #24]
 8013f38:	4411      	add	r1, r2
 8013f3a:	440c      	add	r4, r1
 8013f3c:	f04f 0c00 	mov.w	ip, #0
 8013f40:	42a1      	cmp	r1, r4
 8013f42:	d116      	bne.n	8013f72 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 8013f44:	f1bc 0f00 	cmp.w	ip, #0
 8013f48:	d011      	beq.n	8013f6e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8013f4a:	4b11      	ldr	r3, [pc, #68]	; (8013f90 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 8013f4c:	6819      	ldr	r1, [r3, #0]
 8013f4e:	b109      	cbz	r1, 8013f54 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 8013f50:	2906      	cmp	r1, #6
 8013f52:	d101      	bne.n	8013f58 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 8013f54:	2101      	movs	r1, #1
 8013f56:	6019      	str	r1, [r3, #0]
 8013f58:	4b0e      	ldr	r3, [pc, #56]	; (8013f94 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 8013f5a:	6819      	ldr	r1, [r3, #0]
 8013f5c:	4b0e      	ldr	r3, [pc, #56]	; (8013f98 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 8013f5e:	6019      	str	r1, [r3, #0]
 8013f60:	b12e      	cbz	r6, 8013f6e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8013f62:	b125      	cbz	r5, 8013f6e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8013f64:	9b08      	ldr	r3, [sp, #32]
 8013f66:	4418      	add	r0, r3
 8013f68:	5813      	ldr	r3, [r2, r0]
 8013f6a:	432b      	orrs	r3, r5
 8013f6c:	5013      	str	r3, [r2, r0]
 8013f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f72:	f891 8000 	ldrb.w	r8, [r1]
 8013f76:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8013f7a:	45f0      	cmp	r8, lr
 8013f7c:	bf1c      	itt	ne
 8013f7e:	f881 e000 	strbne.w	lr, [r1]
 8013f82:	46bc      	movne	ip, r7
 8013f84:	3101      	adds	r1, #1
 8013f86:	e7db      	b.n	8013f40 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 8013f88:	200092ac 	andcs	r9, r0, ip, lsr #5
 8013f8c:	40024000 	andmi	r4, r2, r0
 8013f90:	200092b4 			; <UNDEFINED> instruction: 0x200092b4
 8013f94:	2000fddc 	ldrdcs	pc, [r0], -ip
 8013f98:	200092a4 	andcs	r9, r0, r4, lsr #5

08013f9c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>:
 8013f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013fa0:	461d      	mov	r5, r3
 8013fa2:	4b15      	ldr	r3, [pc, #84]	; (8013ff8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x5c>)
 8013fa4:	b085      	sub	sp, #20
 8013fa6:	781b      	ldrb	r3, [r3, #0]
 8013fa8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8013fac:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8013fb0:	4607      	mov	r7, r0
 8013fb2:	4614      	mov	r4, r2
 8013fb4:	b193      	cbz	r3, 8013fdc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 8013fb6:	f7ff fecf 	bl	8013d58 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8013fba:	4a10      	ldr	r2, [pc, #64]	; (8013ffc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x60>)
 8013fbc:	eb08 0600 	add.w	r6, r8, r0
 8013fc0:	18b3      	adds	r3, r6, r2
 8013fc2:	f1b9 0f00 	cmp.w	r9, #0
 8013fc6:	d013      	beq.n	8013ff0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 8013fc8:	5990      	ldr	r0, [r2, r6]
 8013fca:	b988      	cbnz	r0, 8013ff0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 8013fcc:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8013fd0:	9500      	str	r5, [sp, #0]
 8013fd2:	4623      	mov	r3, r4
 8013fd4:	4642      	mov	r2, r8
 8013fd6:	4638      	mov	r0, r7
 8013fd8:	f7ff ffa0 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8013fdc:	b005      	add	sp, #20
 8013fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fe6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013fea:	429d      	cmp	r5, r3
 8013fec:	d1f9      	bne.n	8013fe2 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x46>
 8013fee:	e7f5      	b.n	8013fdc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 8013ff0:	3c01      	subs	r4, #1
 8013ff2:	441d      	add	r5, r3
 8013ff4:	e7f9      	b.n	8013fea <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x4e>
 8013ff6:	bf00      	nop
 8013ff8:	200092ac 	andcs	r9, r0, ip, lsr #5
 8013ffc:	40024000 	andmi	r4, r2, r0

08014000 <SpiFlashStore::Flash()>:
 8014000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014002:	4c25      	ldr	r4, [pc, #148]	; (8014098 <SpiFlashStore::Flash()+0x98>)
 8014004:	6820      	ldr	r0, [r4, #0]
 8014006:	2800      	cmp	r0, #0
 8014008:	d043      	beq.n	8014092 <SpiFlashStore::Flash()+0x92>
 801400a:	3801      	subs	r0, #1
 801400c:	2805      	cmp	r0, #5
 801400e:	d831      	bhi.n	8014074 <SpiFlashStore::Flash()+0x74>
 8014010:	e8df f000 	tbb	[pc, r0]
 8014014:	2e140b03 	vnmlscs.f64	d0, d4, d3
 8014018:	4b203025 	blmi	88200b4 <__exidx_end+0x802088>
 801401c:	681a      	ldr	r2, [r3, #0]
 801401e:	4b20      	ldr	r3, [pc, #128]	; (80140a0 <SpiFlashStore::Flash()+0xa0>)
 8014020:	601a      	str	r2, [r3, #0]
 8014022:	2302      	movs	r3, #2
 8014024:	6023      	str	r3, [r4, #0]
 8014026:	2001      	movs	r0, #1
 8014028:	e033      	b.n	8014092 <SpiFlashStore::Flash()+0x92>
 801402a:	4b1c      	ldr	r3, [pc, #112]	; (801409c <SpiFlashStore::Flash()+0x9c>)
 801402c:	4a1c      	ldr	r2, [pc, #112]	; (80140a0 <SpiFlashStore::Flash()+0xa0>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	6812      	ldr	r2, [r2, #0]
 8014032:	1a9b      	subs	r3, r3, r2
 8014034:	2b63      	cmp	r3, #99	; 0x63
 8014036:	d9f6      	bls.n	8014026 <SpiFlashStore::Flash()+0x26>
 8014038:	2303      	movs	r3, #3
 801403a:	e7f3      	b.n	8014024 <SpiFlashStore::Flash()+0x24>
 801403c:	4919      	ldr	r1, [pc, #100]	; (80140a4 <SpiFlashStore::Flash()+0xa4>)
 801403e:	481a      	ldr	r0, [pc, #104]	; (80140a8 <SpiFlashStore::Flash()+0xa8>)
 8014040:	6809      	ldr	r1, [r1, #0]
 8014042:	6800      	ldr	r0, [r0, #0]
 8014044:	ab03      	add	r3, sp, #12
 8014046:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801404a:	f000 fccb 	bl	80149e4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 801404e:	2800      	cmp	r0, #0
 8014050:	d0e9      	beq.n	8014026 <SpiFlashStore::Flash()+0x26>
 8014052:	4b12      	ldr	r3, [pc, #72]	; (801409c <SpiFlashStore::Flash()+0x9c>)
 8014054:	681a      	ldr	r2, [r3, #0]
 8014056:	4b12      	ldr	r3, [pc, #72]	; (80140a0 <SpiFlashStore::Flash()+0xa0>)
 8014058:	601a      	str	r2, [r3, #0]
 801405a:	2305      	movs	r3, #5
 801405c:	e7e2      	b.n	8014024 <SpiFlashStore::Flash()+0x24>
 801405e:	4b0f      	ldr	r3, [pc, #60]	; (801409c <SpiFlashStore::Flash()+0x9c>)
 8014060:	4a0f      	ldr	r2, [pc, #60]	; (80140a0 <SpiFlashStore::Flash()+0xa0>)
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	6812      	ldr	r2, [r2, #0]
 8014066:	1a9b      	subs	r3, r3, r2
 8014068:	2b63      	cmp	r3, #99	; 0x63
 801406a:	d9dc      	bls.n	8014026 <SpiFlashStore::Flash()+0x26>
 801406c:	2304      	movs	r3, #4
 801406e:	e7d9      	b.n	8014024 <SpiFlashStore::Flash()+0x24>
 8014070:	2306      	movs	r3, #6
 8014072:	e7d7      	b.n	8014024 <SpiFlashStore::Flash()+0x24>
 8014074:	ab03      	add	r3, sp, #12
 8014076:	4a0d      	ldr	r2, [pc, #52]	; (80140ac <SpiFlashStore::Flash()+0xac>)
 8014078:	490a      	ldr	r1, [pc, #40]	; (80140a4 <SpiFlashStore::Flash()+0xa4>)
 801407a:	480b      	ldr	r0, [pc, #44]	; (80140a8 <SpiFlashStore::Flash()+0xa8>)
 801407c:	9300      	str	r3, [sp, #0]
 801407e:	6812      	ldr	r2, [r2, #0]
 8014080:	4b0b      	ldr	r3, [pc, #44]	; (80140b0 <SpiFlashStore::Flash()+0xb0>)
 8014082:	6809      	ldr	r1, [r1, #0]
 8014084:	6800      	ldr	r0, [r0, #0]
 8014086:	f000 fcb1 	bl	80149ec <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 801408a:	2800      	cmp	r0, #0
 801408c:	d0cb      	beq.n	8014026 <SpiFlashStore::Flash()+0x26>
 801408e:	2000      	movs	r0, #0
 8014090:	6020      	str	r0, [r4, #0]
 8014092:	b004      	add	sp, #16
 8014094:	bd10      	pop	{r4, pc}
 8014096:	bf00      	nop
 8014098:	200092b4 			; <UNDEFINED> instruction: 0x200092b4
 801409c:	2000fddc 	ldrdcs	pc, [r0], -ip
 80140a0:	200092a4 	andcs	r9, r0, r4, lsr #5
 80140a4:	200092a8 	andcs	r9, r0, r8, lsr #5
 80140a8:	200092e4 	andcs	r9, r0, r4, ror #5
 80140ac:	200092b0 			; <UNDEFINED> instruction: 0x200092b0
 80140b0:	40024000 	andmi	r4, r2, r0

080140b4 <StoreDisplayUdf::~StoreDisplayUdf()>:
 80140b4:	4770      	bx	lr
	...

080140b8 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 80140b8:	b507      	push	{r0, r1, r2, lr}
 80140ba:	2300      	movs	r3, #0
 80140bc:	460a      	mov	r2, r1
 80140be:	2101      	movs	r1, #1
 80140c0:	e9cd 3100 	strd	r3, r1, [sp]
 80140c4:	4804      	ldr	r0, [pc, #16]	; (80140d8 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x20>)
 80140c6:	2322      	movs	r3, #34	; 0x22
 80140c8:	6800      	ldr	r0, [r0, #0]
 80140ca:	210f      	movs	r1, #15
 80140cc:	f7ff ff66 	bl	8013f9c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 80140d0:	b003      	add	sp, #12
 80140d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80140d6:	bf00      	nop
 80140d8:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

080140dc <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 80140dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80140de:	2200      	movs	r2, #0
 80140e0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80140e4:	460b      	mov	r3, r1
 80140e6:	4805      	ldr	r0, [pc, #20]	; (80140fc <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 80140e8:	2122      	movs	r1, #34	; 0x22
 80140ea:	9100      	str	r1, [sp, #0]
 80140ec:	6800      	ldr	r0, [r0, #0]
 80140ee:	210f      	movs	r1, #15
 80140f0:	f7ff ff14 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80140f4:	b005      	add	sp, #20
 80140f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80140fa:	bf00      	nop
 80140fc:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

08014100 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8014100:	b510      	push	{r4, lr}
 8014102:	4604      	mov	r4, r0
 8014104:	f004 f902 	bl	801830c <operator delete(void*)>
 8014108:	4620      	mov	r0, r4
 801410a:	bd10      	pop	{r4, pc}

0801410c <StoreDisplayUdf::StoreDisplayUdf()>:
 801410c:	4a02      	ldr	r2, [pc, #8]	; (8014118 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 801410e:	6002      	str	r2, [r0, #0]
 8014110:	4a02      	ldr	r2, [pc, #8]	; (801411c <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 8014112:	6010      	str	r0, [r2, #0]
 8014114:	4770      	bx	lr
 8014116:	bf00      	nop
 8014118:	0801d350 	stmdaeq	r1, {r4, r6, r8, r9, ip, lr, pc}
 801411c:	200092c0 	andcs	r9, r0, r0, asr #5

08014120 <StoreDmxSend::~StoreDmxSend()>:
 8014120:	4770      	bx	lr
	...

08014124 <StoreDmxSend::Copy(TDmxParams*)>:
 8014124:	b507      	push	{r0, r1, r2, lr}
 8014126:	2300      	movs	r3, #0
 8014128:	460a      	mov	r2, r1
 801412a:	2101      	movs	r1, #1
 801412c:	e9cd 3100 	strd	r3, r1, [sp]
 8014130:	4804      	ldr	r0, [pc, #16]	; (8014144 <StoreDmxSend::Copy(TDmxParams*)+0x20>)
 8014132:	230a      	movs	r3, #10
 8014134:	6800      	ldr	r0, [r0, #0]
 8014136:	2102      	movs	r1, #2
 8014138:	f7ff ff30 	bl	8013f9c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 801413c:	b003      	add	sp, #12
 801413e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014142:	bf00      	nop
 8014144:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

08014148 <StoreDmxSend::Update(TDmxParams const*)>:
 8014148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801414a:	2200      	movs	r2, #0
 801414c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8014150:	460b      	mov	r3, r1
 8014152:	4805      	ldr	r0, [pc, #20]	; (8014168 <StoreDmxSend::Update(TDmxParams const*)+0x20>)
 8014154:	210a      	movs	r1, #10
 8014156:	9100      	str	r1, [sp, #0]
 8014158:	6800      	ldr	r0, [r0, #0]
 801415a:	2102      	movs	r1, #2
 801415c:	f7ff fede 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8014160:	b005      	add	sp, #20
 8014162:	f85d fb04 	ldr.w	pc, [sp], #4
 8014166:	bf00      	nop
 8014168:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

0801416c <StoreDmxSend::~StoreDmxSend()>:
 801416c:	b510      	push	{r4, lr}
 801416e:	4604      	mov	r4, r0
 8014170:	f004 f8cc 	bl	801830c <operator delete(void*)>
 8014174:	4620      	mov	r0, r4
 8014176:	bd10      	pop	{r4, pc}

08014178 <StoreDmxSend::StoreDmxSend()>:
 8014178:	4a02      	ldr	r2, [pc, #8]	; (8014184 <StoreDmxSend::StoreDmxSend()+0xc>)
 801417a:	6002      	str	r2, [r0, #0]
 801417c:	4a02      	ldr	r2, [pc, #8]	; (8014188 <StoreDmxSend::StoreDmxSend()+0x10>)
 801417e:	6010      	str	r0, [r2, #0]
 8014180:	4770      	bx	lr
 8014182:	bf00      	nop
 8014184:	0801d368 	stmdaeq	r1, {r3, r5, r6, r8, r9, ip, lr, pc}
 8014188:	200092c4 	andcs	r9, r0, r4, asr #5

0801418c <StoreNetwork::~StoreNetwork()>:
 801418c:	4770      	bx	lr

0801418e <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 801418e:	3804      	subs	r0, #4
 8014190:	4770      	bx	lr
	...

08014194 <StoreNetwork::Update(networkparams::Params const*)>:
 8014194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014196:	2200      	movs	r2, #0
 8014198:	e9cd 2201 	strd	r2, r2, [sp, #4]
 801419c:	460b      	mov	r3, r1
 801419e:	4805      	ldr	r0, [pc, #20]	; (80141b4 <StoreNetwork::Update(networkparams::Params const*)+0x20>)
 80141a0:	215e      	movs	r1, #94	; 0x5e
 80141a2:	9100      	str	r1, [sp, #0]
 80141a4:	6800      	ldr	r0, [r0, #0]
 80141a6:	4611      	mov	r1, r2
 80141a8:	f7ff feb8 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80141ac:	b005      	add	sp, #20
 80141ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80141b2:	bf00      	nop
 80141b4:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

080141b8 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 80141b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80141ba:	2308      	movs	r3, #8
 80141bc:	9105      	str	r1, [sp, #20]
 80141be:	2100      	movs	r1, #0
 80141c0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80141c4:	4805      	ldr	r0, [pc, #20]	; (80141dc <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 80141c6:	2304      	movs	r3, #4
 80141c8:	9300      	str	r3, [sp, #0]
 80141ca:	6800      	ldr	r0, [r0, #0]
 80141cc:	ab05      	add	r3, sp, #20
 80141ce:	220c      	movs	r2, #12
 80141d0:	f7ff fea4 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80141d4:	b007      	add	sp, #28
 80141d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80141da:	bf00      	nop
 80141dc:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

080141e0 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 80141e0:	f1a0 0004 	sub.w	r0, r0, #4
 80141e4:	e7e8      	b.n	80141b8 <StoreNetwork::SaveGatewayIp(unsigned int)>
 80141e6:	bf00      	nop

080141e8 <StoreNetwork::SaveNetMask(unsigned int)>:
 80141e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80141ea:	2304      	movs	r3, #4
 80141ec:	9105      	str	r1, [sp, #20]
 80141ee:	2100      	movs	r1, #0
 80141f0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80141f4:	4804      	ldr	r0, [pc, #16]	; (8014208 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 80141f6:	9300      	str	r3, [sp, #0]
 80141f8:	6800      	ldr	r0, [r0, #0]
 80141fa:	ab05      	add	r3, sp, #20
 80141fc:	2208      	movs	r2, #8
 80141fe:	f7ff fe8d 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8014202:	b007      	add	sp, #28
 8014204:	f85d fb04 	ldr.w	pc, [sp], #4
 8014208:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

0801420c <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 801420c:	f1a0 0004 	sub.w	r0, r0, #4
 8014210:	e7ea      	b.n	80141e8 <StoreNetwork::SaveNetMask(unsigned int)>
 8014212:	bf00      	nop

08014214 <StoreNetwork::SaveIp(unsigned int)>:
 8014214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014216:	2302      	movs	r3, #2
 8014218:	9105      	str	r1, [sp, #20]
 801421a:	2100      	movs	r1, #0
 801421c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014220:	2204      	movs	r2, #4
 8014222:	4804      	ldr	r0, [pc, #16]	; (8014234 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 8014224:	9200      	str	r2, [sp, #0]
 8014226:	6800      	ldr	r0, [r0, #0]
 8014228:	ab05      	add	r3, sp, #20
 801422a:	f7ff fe77 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801422e:	b007      	add	sp, #28
 8014230:	f85d fb04 	ldr.w	pc, [sp], #4
 8014234:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

08014238 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 8014238:	f1a0 0004 	sub.w	r0, r0, #4
 801423c:	e7ea      	b.n	8014214 <StoreNetwork::SaveIp(unsigned int)>
 801423e:	bf00      	nop

08014240 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 8014240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014242:	460b      	mov	r3, r1
 8014244:	2000      	movs	r0, #0
 8014246:	2120      	movs	r1, #32
 8014248:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801424c:	2a40      	cmp	r2, #64	; 0x40
 801424e:	bf28      	it	cs
 8014250:	2240      	movcs	r2, #64	; 0x40
 8014252:	4601      	mov	r1, r0
 8014254:	4804      	ldr	r0, [pc, #16]	; (8014268 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x28>)
 8014256:	9200      	str	r2, [sp, #0]
 8014258:	6800      	ldr	r0, [r0, #0]
 801425a:	2215      	movs	r2, #21
 801425c:	f7ff fe5e 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8014260:	b005      	add	sp, #20
 8014262:	f85d fb04 	ldr.w	pc, [sp], #4
 8014266:	bf00      	nop
 8014268:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

0801426c <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 801426c:	f1a0 0004 	sub.w	r0, r0, #4
 8014270:	e7e6      	b.n	8014240 <StoreNetwork::SaveHostName(char const*, unsigned int)>
 8014272:	bf00      	nop

08014274 <StoreNetwork::~StoreNetwork()>:
 8014274:	b510      	push	{r4, lr}
 8014276:	4604      	mov	r4, r0
 8014278:	f004 f848 	bl	801830c <operator delete(void*)>
 801427c:	4620      	mov	r0, r4
 801427e:	bd10      	pop	{r4, pc}

08014280 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 8014280:	f1a0 0004 	sub.w	r0, r0, #4
 8014284:	e7f6      	b.n	8014274 <StoreNetwork::~StoreNetwork()>
	...

08014288 <StoreNetwork::Copy(networkparams::Params*)>:
 8014288:	b507      	push	{r0, r1, r2, lr}
 801428a:	2301      	movs	r3, #1
 801428c:	460a      	mov	r2, r1
 801428e:	2100      	movs	r1, #0
 8014290:	e9cd 1300 	strd	r1, r3, [sp]
 8014294:	4803      	ldr	r0, [pc, #12]	; (80142a4 <StoreNetwork::Copy(networkparams::Params*)+0x1c>)
 8014296:	235e      	movs	r3, #94	; 0x5e
 8014298:	6800      	ldr	r0, [r0, #0]
 801429a:	f7ff fe7f 	bl	8013f9c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 801429e:	b003      	add	sp, #12
 80142a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80142a4:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

080142a8 <StoreNetwork::StoreNetwork()>:
 80142a8:	4a03      	ldr	r2, [pc, #12]	; (80142b8 <StoreNetwork::StoreNetwork()+0x10>)
 80142aa:	6002      	str	r2, [r0, #0]
 80142ac:	322c      	adds	r2, #44	; 0x2c
 80142ae:	6042      	str	r2, [r0, #4]
 80142b0:	4a02      	ldr	r2, [pc, #8]	; (80142bc <StoreNetwork::StoreNetwork()+0x14>)
 80142b2:	6010      	str	r0, [r2, #0]
 80142b4:	4770      	bx	lr
 80142b6:	bf00      	nop
 80142b8:	0801d380 	stmdaeq	r1, {r7, r8, r9, ip, lr, pc}
 80142bc:	200092c8 	andcs	r9, r0, r8, asr #5

080142c0 <StoreRDMDevice::~StoreRDMDevice()>:
 80142c0:	4770      	bx	lr

080142c2 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 80142c2:	3804      	subs	r0, #4
 80142c4:	4770      	bx	lr
	...

080142c8 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 80142c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80142ca:	2200      	movs	r2, #0
 80142cc:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80142d0:	460b      	mov	r3, r1
 80142d2:	4805      	ldr	r0, [pc, #20]	; (80142e8 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 80142d4:	2129      	movs	r1, #41	; 0x29
 80142d6:	9100      	str	r1, [sp, #0]
 80142d8:	6800      	ldr	r0, [r0, #0]
 80142da:	210b      	movs	r1, #11
 80142dc:	f7ff fe1e 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80142e0:	b005      	add	sp, #20
 80142e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80142e6:	bf00      	nop
 80142e8:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

080142ec <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 80142ec:	b570      	push	{r4, r5, r6, lr}
 80142ee:	4d0d      	ldr	r5, [pc, #52]	; (8014324 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 80142f0:	b086      	sub	sp, #24
 80142f2:	2401      	movs	r4, #1
 80142f4:	2600      	movs	r6, #0
 80142f6:	6828      	ldr	r0, [r5, #0]
 80142f8:	f88d 2017 	strb.w	r2, [sp, #23]
 80142fc:	460b      	mov	r3, r1
 80142fe:	9200      	str	r2, [sp, #0]
 8014300:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8014304:	2204      	movs	r2, #4
 8014306:	210b      	movs	r1, #11
 8014308:	f7ff fe08 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801430c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8014310:	6828      	ldr	r0, [r5, #0]
 8014312:	9400      	str	r4, [sp, #0]
 8014314:	f10d 0317 	add.w	r3, sp, #23
 8014318:	2224      	movs	r2, #36	; 0x24
 801431a:	210b      	movs	r1, #11
 801431c:	f7ff fdfe 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8014320:	b006      	add	sp, #24
 8014322:	bd70      	pop	{r4, r5, r6, pc}
 8014324:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

08014328 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8014328:	f1a0 0004 	sub.w	r0, r0, #4
 801432c:	e7de      	b.n	80142ec <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 801432e:	bf00      	nop

08014330 <StoreRDMDevice::~StoreRDMDevice()>:
 8014330:	b510      	push	{r4, lr}
 8014332:	4604      	mov	r4, r0
 8014334:	f003 ffea 	bl	801830c <operator delete(void*)>
 8014338:	4620      	mov	r0, r4
 801433a:	bd10      	pop	{r4, pc}

0801433c <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 801433c:	f1a0 0004 	sub.w	r0, r0, #4
 8014340:	e7f6      	b.n	8014330 <StoreRDMDevice::~StoreRDMDevice()>
	...

08014344 <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 8014344:	b507      	push	{r0, r1, r2, lr}
 8014346:	2300      	movs	r3, #0
 8014348:	460a      	mov	r2, r1
 801434a:	2101      	movs	r1, #1
 801434c:	e9cd 3100 	strd	r3, r1, [sp]
 8014350:	4804      	ldr	r0, [pc, #16]	; (8014364 <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x20>)
 8014352:	2329      	movs	r3, #41	; 0x29
 8014354:	6800      	ldr	r0, [r0, #0]
 8014356:	210b      	movs	r1, #11
 8014358:	f7ff fe20 	bl	8013f9c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 801435c:	b003      	add	sp, #12
 801435e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014362:	bf00      	nop
 8014364:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

08014368 <StoreRDMDevice::StoreRDMDevice()>:
 8014368:	4a03      	ldr	r2, [pc, #12]	; (8014378 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 801436a:	6002      	str	r2, [r0, #0]
 801436c:	321c      	adds	r2, #28
 801436e:	6042      	str	r2, [r0, #4]
 8014370:	4a02      	ldr	r2, [pc, #8]	; (801437c <StoreRDMDevice::StoreRDMDevice()+0x14>)
 8014372:	6010      	str	r0, [r2, #0]
 8014374:	4770      	bx	lr
 8014376:	bf00      	nop
 8014378:	0801d3d0 	stmdaeq	r1, {r4, r6, r7, r8, r9, ip, lr, pc}
 801437c:	200092cc 	andcs	r9, r0, ip, asr #5

08014380 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8014380:	4770      	bx	lr
	...

08014384 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 8014384:	b507      	push	{r0, r1, r2, lr}
 8014386:	2300      	movs	r3, #0
 8014388:	460a      	mov	r2, r1
 801438a:	2101      	movs	r1, #1
 801438c:	e9cd 3100 	strd	r3, r1, [sp]
 8014390:	4804      	ldr	r0, [pc, #16]	; (80143a4 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x20>)
 8014392:	2320      	movs	r3, #32
 8014394:	6800      	ldr	r0, [r0, #0]
 8014396:	210c      	movs	r1, #12
 8014398:	f7ff fe00 	bl	8013f9c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 801439c:	b003      	add	sp, #12
 801439e:	f85d fb04 	ldr.w	pc, [sp], #4
 80143a2:	bf00      	nop
 80143a4:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

080143a8 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 80143a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80143aa:	2200      	movs	r2, #0
 80143ac:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80143b0:	460b      	mov	r3, r1
 80143b2:	4805      	ldr	r0, [pc, #20]	; (80143c8 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 80143b4:	2120      	movs	r1, #32
 80143b6:	9100      	str	r1, [sp, #0]
 80143b8:	6800      	ldr	r0, [r0, #0]
 80143ba:	210c      	movs	r1, #12
 80143bc:	f7ff fdae 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80143c0:	b005      	add	sp, #20
 80143c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80143c6:	bf00      	nop
 80143c8:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

080143cc <StoreRemoteConfig::~StoreRemoteConfig()>:
 80143cc:	b510      	push	{r4, lr}
 80143ce:	4604      	mov	r4, r0
 80143d0:	f003 ff9c 	bl	801830c <operator delete(void*)>
 80143d4:	4620      	mov	r0, r4
 80143d6:	bd10      	pop	{r4, pc}

080143d8 <StoreRemoteConfig::StoreRemoteConfig()>:
 80143d8:	4a02      	ldr	r2, [pc, #8]	; (80143e4 <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 80143da:	6002      	str	r2, [r0, #0]
 80143dc:	4a02      	ldr	r2, [pc, #8]	; (80143e8 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 80143de:	6010      	str	r0, [r2, #0]
 80143e0:	4770      	bx	lr
 80143e2:	bf00      	nop
 80143e4:	0801d400 	stmdaeq	r1, {sl, ip, lr, pc}
 80143e8:	200092d0 	ldrdcs	r9, [r0], -r0

080143ec <StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 80143ec:	4770      	bx	lr

080143ee <non-virtual thunk to StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 80143ee:	4770      	bx	lr

080143f0 <StoreArtNet::~StoreArtNet()>:
 80143f0:	4770      	bx	lr

080143f2 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 80143f2:	3804      	subs	r0, #4
 80143f4:	4770      	bx	lr
	...

080143f8 <StoreArtNet::Update(artnetparams::Params const*)>:
 80143f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80143fa:	2200      	movs	r2, #0
 80143fc:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8014400:	460b      	mov	r3, r1
 8014402:	4805      	ldr	r0, [pc, #20]	; (8014418 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 8014404:	2187      	movs	r1, #135	; 0x87
 8014406:	9100      	str	r1, [sp, #0]
 8014408:	6800      	ldr	r0, [r0, #0]
 801440a:	2101      	movs	r1, #1
 801440c:	f7ff fd86 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8014410:	b005      	add	sp, #20
 8014412:	f85d fb04 	ldr.w	pc, [sp], #4
 8014416:	bf00      	nop
 8014418:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

0801441c <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 801441c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801441e:	4b0d      	ldr	r3, [pc, #52]	; (8014454 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x38>)
 8014420:	f88d 2017 	strb.w	r2, [sp, #23]
 8014424:	681a      	ldr	r2, [r3, #0]
 8014426:	428a      	cmp	r2, r1
 8014428:	d811      	bhi.n	801444e <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 801442a:	1a8a      	subs	r2, r1, r2
 801442c:	2a03      	cmp	r2, #3
 801442e:	d80e      	bhi.n	801444e <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 8014430:	2300      	movs	r3, #0
 8014432:	9302      	str	r3, [sp, #8]
 8014434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014438:	4093      	lsls	r3, r2
 801443a:	4807      	ldr	r0, [pc, #28]	; (8014458 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x3c>)
 801443c:	9301      	str	r3, [sp, #4]
 801443e:	2101      	movs	r1, #1
 8014440:	9100      	str	r1, [sp, #0]
 8014442:	6800      	ldr	r0, [r0, #0]
 8014444:	f10d 0317 	add.w	r3, sp, #23
 8014448:	3267      	adds	r2, #103	; 0x67
 801444a:	f7ff fd67 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801444e:	b007      	add	sp, #28
 8014450:	f85d fb04 	ldr.w	pc, [sp], #4
 8014454:	200092d4 	ldrdcs	r9, [r0], -r4
 8014458:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

0801445c <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 801445c:	f1a0 0004 	sub.w	r0, r0, #4
 8014460:	f7ff bfdc 	b.w	801441c <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

08014464 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 8014464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014466:	f88d 2017 	strb.w	r2, [sp, #23]
 801446a:	b951      	cbnz	r1, 8014482 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x1e>
 801446c:	9102      	str	r1, [sp, #8]
 801446e:	2204      	movs	r2, #4
 8014470:	2101      	movs	r1, #1
 8014472:	e9cd 1200 	strd	r1, r2, [sp]
 8014476:	4804      	ldr	r0, [pc, #16]	; (8014488 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x24>)
 8014478:	f10d 0317 	add.w	r3, sp, #23
 801447c:	6800      	ldr	r0, [r0, #0]
 801447e:	f7ff fd4d 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8014482:	b007      	add	sp, #28
 8014484:	f85d fb04 	ldr.w	pc, [sp], #4
 8014488:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

0801448c <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 801448c:	f1a0 0004 	sub.w	r0, r0, #4
 8014490:	f7ff bfe8 	b.w	8014464 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>

08014494 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 8014494:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014496:	f88d 2017 	strb.w	r2, [sp, #23]
 801449a:	b959      	cbnz	r1, 80144b4 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x20>
 801449c:	9102      	str	r1, [sp, #8]
 801449e:	2308      	movs	r3, #8
 80144a0:	2101      	movs	r1, #1
 80144a2:	e9cd 1300 	strd	r1, r3, [sp]
 80144a6:	4805      	ldr	r0, [pc, #20]	; (80144bc <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x28>)
 80144a8:	f10d 0317 	add.w	r3, sp, #23
 80144ac:	6800      	ldr	r0, [r0, #0]
 80144ae:	2205      	movs	r2, #5
 80144b0:	f7ff fd34 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80144b4:	b007      	add	sp, #28
 80144b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80144ba:	bf00      	nop
 80144bc:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

080144c0 <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 80144c0:	f1a0 0004 	sub.w	r0, r0, #4
 80144c4:	f7ff bfe6 	b.w	8014494 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>

080144c8 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 80144c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80144ca:	4b0c      	ldr	r3, [pc, #48]	; (80144fc <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x34>)
 80144cc:	9205      	str	r2, [sp, #20]
 80144ce:	681a      	ldr	r2, [r3, #0]
 80144d0:	428a      	cmp	r2, r1
 80144d2:	d810      	bhi.n	80144f6 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 80144d4:	1a8a      	subs	r2, r1, r2
 80144d6:	2a03      	cmp	r2, #3
 80144d8:	d80d      	bhi.n	80144f6 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 80144da:	2300      	movs	r3, #0
 80144dc:	9302      	str	r3, [sp, #8]
 80144de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80144e2:	4093      	lsls	r3, r2
 80144e4:	4806      	ldr	r0, [pc, #24]	; (8014500 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x38>)
 80144e6:	9301      	str	r3, [sp, #4]
 80144e8:	2101      	movs	r1, #1
 80144ea:	9100      	str	r1, [sp, #0]
 80144ec:	6800      	ldr	r0, [r0, #0]
 80144ee:	ab05      	add	r3, sp, #20
 80144f0:	326c      	adds	r2, #108	; 0x6c
 80144f2:	f7ff fd13 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80144f6:	b007      	add	sp, #28
 80144f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80144fc:	200092d4 	ldrdcs	r9, [r0], -r4
 8014500:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

08014504 <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8014504:	f1a0 0004 	sub.w	r0, r0, #4
 8014508:	f7ff bfde 	b.w	80144c8 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

0801450c <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 801450c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801450e:	4b0c      	ldr	r3, [pc, #48]	; (8014540 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x34>)
 8014510:	9205      	str	r2, [sp, #20]
 8014512:	681a      	ldr	r2, [r3, #0]
 8014514:	428a      	cmp	r2, r1
 8014516:	d810      	bhi.n	801453a <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 8014518:	1a8a      	subs	r2, r1, r2
 801451a:	2a03      	cmp	r2, #3
 801451c:	d80d      	bhi.n	801453a <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 801451e:	2300      	movs	r3, #0
 8014520:	9302      	str	r3, [sp, #8]
 8014522:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014526:	4093      	lsls	r3, r2
 8014528:	4806      	ldr	r0, [pc, #24]	; (8014544 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x38>)
 801452a:	9301      	str	r3, [sp, #4]
 801452c:	2101      	movs	r1, #1
 801452e:	9100      	str	r1, [sp, #0]
 8014530:	6800      	ldr	r0, [r0, #0]
 8014532:	ab05      	add	r3, sp, #20
 8014534:	3271      	adds	r2, #113	; 0x71
 8014536:	f7ff fcf1 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801453a:	b007      	add	sp, #28
 801453c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014540:	200092d4 	ldrdcs	r9, [r0], -r4
 8014544:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

08014548 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8014548:	f1a0 0004 	sub.w	r0, r0, #4
 801454c:	f7ff bfde 	b.w	801450c <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

08014550 <StoreArtNet::SaveLongName(char const*)>:
 8014550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014552:	460b      	mov	r3, r1
 8014554:	2200      	movs	r2, #0
 8014556:	2101      	movs	r1, #1
 8014558:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801455c:	4804      	ldr	r0, [pc, #16]	; (8014570 <StoreArtNet::SaveLongName(char const*)+0x20>)
 801455e:	2240      	movs	r2, #64	; 0x40
 8014560:	9200      	str	r2, [sp, #0]
 8014562:	6800      	ldr	r0, [r0, #0]
 8014564:	221e      	movs	r2, #30
 8014566:	f7ff fcd9 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801456a:	b005      	add	sp, #20
 801456c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014570:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

08014574 <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 8014574:	f1a0 0004 	sub.w	r0, r0, #4
 8014578:	e7ea      	b.n	8014550 <StoreArtNet::SaveLongName(char const*)>
 801457a:	bf00      	nop

0801457c <StoreArtNet::SaveShortName(char const*)>:
 801457c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801457e:	460b      	mov	r3, r1
 8014580:	2202      	movs	r2, #2
 8014582:	2100      	movs	r1, #0
 8014584:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014588:	4805      	ldr	r0, [pc, #20]	; (80145a0 <StoreArtNet::SaveShortName(char const*)+0x24>)
 801458a:	2212      	movs	r2, #18
 801458c:	9200      	str	r2, [sp, #0]
 801458e:	6800      	ldr	r0, [r0, #0]
 8014590:	220c      	movs	r2, #12
 8014592:	2101      	movs	r1, #1
 8014594:	f7ff fcc2 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8014598:	b005      	add	sp, #20
 801459a:	f85d fb04 	ldr.w	pc, [sp], #4
 801459e:	bf00      	nop
 80145a0:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

080145a4 <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 80145a4:	f1a0 0004 	sub.w	r0, r0, #4
 80145a8:	e7e8      	b.n	801457c <StoreArtNet::SaveShortName(char const*)>
 80145aa:	bf00      	nop

080145ac <StoreArtNet::SaveFailSafe(unsigned char)>:
 80145ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80145ae:	2310      	movs	r3, #16
 80145b0:	2200      	movs	r2, #0
 80145b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80145b6:	f88d 1017 	strb.w	r1, [sp, #23]
 80145ba:	4806      	ldr	r0, [pc, #24]	; (80145d4 <StoreArtNet::SaveFailSafe(unsigned char)+0x28>)
 80145bc:	2101      	movs	r1, #1
 80145be:	9100      	str	r1, [sp, #0]
 80145c0:	6800      	ldr	r0, [r0, #0]
 80145c2:	f10d 0317 	add.w	r3, sp, #23
 80145c6:	2206      	movs	r2, #6
 80145c8:	f7ff fca8 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80145cc:	b007      	add	sp, #28
 80145ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80145d2:	bf00      	nop
 80145d4:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

080145d8 <non-virtual thunk to StoreArtNet::SaveFailSafe(unsigned char)>:
 80145d8:	f1a0 0004 	sub.w	r0, r0, #4
 80145dc:	e7e6      	b.n	80145ac <StoreArtNet::SaveFailSafe(unsigned char)>
 80145de:	bf00      	nop

080145e0 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 80145e0:	b570      	push	{r4, r5, r6, lr}
 80145e2:	4b1b      	ldr	r3, [pc, #108]	; (8014650 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x70>)
 80145e4:	681c      	ldr	r4, [r3, #0]
 80145e6:	428c      	cmp	r4, r1
 80145e8:	b086      	sub	sp, #24
 80145ea:	4615      	mov	r5, r2
 80145ec:	d829      	bhi.n	8014642 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 80145ee:	1b0c      	subs	r4, r1, r4
 80145f0:	2c03      	cmp	r4, #3
 80145f2:	d826      	bhi.n	8014642 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 80145f4:	4e17      	ldr	r6, [pc, #92]	; (8014654 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x74>)
 80145f6:	2308      	movs	r3, #8
 80145f8:	2200      	movs	r2, #0
 80145fa:	e9cd 3200 	strd	r3, r2, [sp]
 80145fe:	2101      	movs	r1, #1
 8014600:	2302      	movs	r3, #2
 8014602:	f10d 0216 	add.w	r2, sp, #22
 8014606:	6830      	ldr	r0, [r6, #0]
 8014608:	f7ff fcc8 	bl	8013f9c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 801460c:	2201      	movs	r2, #1
 801460e:	f104 0308 	add.w	r3, r4, #8
 8014612:	fa02 f303 	lsl.w	r3, r2, r3
 8014616:	40a2      	lsls	r2, r4
 8014618:	4313      	orrs	r3, r2
 801461a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801461e:	b29b      	uxth	r3, r3
 8014620:	ea21 0203 	bic.w	r2, r1, r3
 8014624:	b97d      	cbnz	r5, 8014646 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x66>
 8014626:	f8ad 2016 	strh.w	r2, [sp, #22]
 801462a:	2300      	movs	r3, #0
 801462c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8014630:	2302      	movs	r3, #2
 8014632:	9300      	str	r3, [sp, #0]
 8014634:	6830      	ldr	r0, [r6, #0]
 8014636:	f10d 0316 	add.w	r3, sp, #22
 801463a:	2208      	movs	r2, #8
 801463c:	2101      	movs	r1, #1
 801463e:	f7ff fc6d 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8014642:	b006      	add	sp, #24
 8014644:	bd70      	pop	{r4, r5, r6, pc}
 8014646:	4319      	orrs	r1, r3
 8014648:	f8ad 1016 	strh.w	r1, [sp, #22]
 801464c:	e7ed      	b.n	801462a <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x4a>
 801464e:	bf00      	nop
 8014650:	200092d4 	ldrdcs	r9, [r0], -r4
 8014654:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

08014658 <non-virtual thunk to StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 8014658:	f1a0 0004 	sub.w	r0, r0, #4
 801465c:	f7ff bfc0 	b.w	80145e0 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>

08014660 <StoreArtNet::Copy(artnetparams::Params*)>:
 8014660:	b507      	push	{r0, r1, r2, lr}
 8014662:	2300      	movs	r3, #0
 8014664:	460a      	mov	r2, r1
 8014666:	2101      	movs	r1, #1
 8014668:	e9cd 3100 	strd	r3, r1, [sp]
 801466c:	4803      	ldr	r0, [pc, #12]	; (801467c <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 801466e:	2387      	movs	r3, #135	; 0x87
 8014670:	6800      	ldr	r0, [r0, #0]
 8014672:	f7ff fc93 	bl	8013f9c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 8014676:	b003      	add	sp, #12
 8014678:	f85d fb04 	ldr.w	pc, [sp], #4
 801467c:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

08014680 <StoreArtNet::~StoreArtNet()>:
 8014680:	b510      	push	{r4, lr}
 8014682:	4604      	mov	r4, r0
 8014684:	f003 fe42 	bl	801830c <operator delete(void*)>
 8014688:	4620      	mov	r0, r4
 801468a:	bd10      	pop	{r4, pc}

0801468c <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 801468c:	f1a0 0004 	sub.w	r0, r0, #4
 8014690:	e7f6      	b.n	8014680 <StoreArtNet::~StoreArtNet()>
	...

08014694 <StoreArtNet::StoreArtNet(unsigned int)>:
 8014694:	b510      	push	{r4, lr}
 8014696:	4a05      	ldr	r2, [pc, #20]	; (80146ac <StoreArtNet::StoreArtNet(unsigned int)+0x18>)
 8014698:	4b05      	ldr	r3, [pc, #20]	; (80146b0 <StoreArtNet::StoreArtNet(unsigned int)+0x1c>)
 801469a:	f102 0408 	add.w	r4, r2, #8
 801469e:	3248      	adds	r2, #72	; 0x48
 80146a0:	6042      	str	r2, [r0, #4]
 80146a2:	4a04      	ldr	r2, [pc, #16]	; (80146b4 <StoreArtNet::StoreArtNet(unsigned int)+0x20>)
 80146a4:	6004      	str	r4, [r0, #0]
 80146a6:	6010      	str	r0, [r2, #0]
 80146a8:	6019      	str	r1, [r3, #0]
 80146aa:	bd10      	pop	{r4, pc}
 80146ac:	0801d410 	stmdaeq	r1, {r4, sl, ip, lr, pc}
 80146b0:	200092d4 	ldrdcs	r9, [r0], -r4
 80146b4:	200092d8 	ldrdcs	r9, [r0], -r8

080146b8 <StorePixelDmx::~StorePixelDmx()>:
 80146b8:	4770      	bx	lr

080146ba <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 80146ba:	3804      	subs	r0, #4
 80146bc:	4770      	bx	lr
	...

080146c0 <StorePixelDmx::Update(pixeldmxparams::Params const*)>:
 80146c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146c2:	2200      	movs	r2, #0
 80146c4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80146c8:	460b      	mov	r3, r1
 80146ca:	4805      	ldr	r0, [pc, #20]	; (80146e0 <StorePixelDmx::Update(pixeldmxparams::Params const*)+0x20>)
 80146cc:	2136      	movs	r1, #54	; 0x36
 80146ce:	9100      	str	r1, [sp, #0]
 80146d0:	6800      	ldr	r0, [r0, #0]
 80146d2:	2103      	movs	r1, #3
 80146d4:	f7ff fc22 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80146d8:	b005      	add	sp, #20
 80146da:	f85d fb04 	ldr.w	pc, [sp], #4
 80146de:	bf00      	nop
 80146e0:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

080146e4 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 80146e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80146e6:	2304      	movs	r3, #4
 80146e8:	2200      	movs	r2, #0
 80146ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80146ee:	4807      	ldr	r0, [pc, #28]	; (801470c <StorePixelDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 80146f0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80146f4:	2302      	movs	r3, #2
 80146f6:	9300      	str	r3, [sp, #0]
 80146f8:	6800      	ldr	r0, [r0, #0]
 80146fa:	f10d 0316 	add.w	r3, sp, #22
 80146fe:	2207      	movs	r2, #7
 8014700:	2103      	movs	r1, #3
 8014702:	f7ff fc0b 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8014706:	b007      	add	sp, #28
 8014708:	f85d fb04 	ldr.w	pc, [sp], #4
 801470c:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

08014710 <non-virtual thunk to StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 8014710:	f1a0 0004 	sub.w	r0, r0, #4
 8014714:	e7e6      	b.n	80146e4 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>
 8014716:	bf00      	nop

08014718 <StorePixelDmx::SaveTestPattern(unsigned char)>:
 8014718:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801471a:	2308      	movs	r3, #8
 801471c:	2200      	movs	r2, #0
 801471e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014722:	4807      	ldr	r0, [pc, #28]	; (8014740 <StorePixelDmx::SaveTestPattern(unsigned char)+0x28>)
 8014724:	f88d 1017 	strb.w	r1, [sp, #23]
 8014728:	2301      	movs	r3, #1
 801472a:	9300      	str	r3, [sp, #0]
 801472c:	6800      	ldr	r0, [r0, #0]
 801472e:	f10d 0317 	add.w	r3, sp, #23
 8014732:	2210      	movs	r2, #16
 8014734:	2103      	movs	r1, #3
 8014736:	f7ff fbf1 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801473a:	b007      	add	sp, #28
 801473c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014740:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

08014744 <non-virtual thunk to StorePixelDmx::SaveTestPattern(unsigned char)>:
 8014744:	f1a0 0004 	sub.w	r0, r0, #4
 8014748:	e7e6      	b.n	8014718 <StorePixelDmx::SaveTestPattern(unsigned char)>
 801474a:	bf00      	nop

0801474c <StorePixelDmx::SaveMap(unsigned char)>:
 801474c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801474e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014752:	2200      	movs	r2, #0
 8014754:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014758:	4807      	ldr	r0, [pc, #28]	; (8014778 <StorePixelDmx::SaveMap(unsigned char)+0x2c>)
 801475a:	f88d 1017 	strb.w	r1, [sp, #23]
 801475e:	2301      	movs	r3, #1
 8014760:	9300      	str	r3, [sp, #0]
 8014762:	6800      	ldr	r0, [r0, #0]
 8014764:	f10d 0317 	add.w	r3, sp, #23
 8014768:	2213      	movs	r2, #19
 801476a:	2103      	movs	r1, #3
 801476c:	f7ff fbd6 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8014770:	b007      	add	sp, #28
 8014772:	f85d fb04 	ldr.w	pc, [sp], #4
 8014776:	bf00      	nop
 8014778:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

0801477c <non-virtual thunk to StorePixelDmx::SaveMap(unsigned char)>:
 801477c:	f1a0 0004 	sub.w	r0, r0, #4
 8014780:	e7e4      	b.n	801474c <StorePixelDmx::SaveMap(unsigned char)>
 8014782:	bf00      	nop

08014784 <StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8014784:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014786:	f44f 7380 	mov.w	r3, #256	; 0x100
 801478a:	2200      	movs	r2, #0
 801478c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014790:	4807      	ldr	r0, [pc, #28]	; (80147b0 <StorePixelDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8014792:	f8ad 1016 	strh.w	r1, [sp, #22]
 8014796:	2302      	movs	r3, #2
 8014798:	9300      	str	r3, [sp, #0]
 801479a:	6800      	ldr	r0, [r0, #0]
 801479c:	f10d 0316 	add.w	r3, sp, #22
 80147a0:	2211      	movs	r2, #17
 80147a2:	2103      	movs	r1, #3
 80147a4:	f7ff fbba 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80147a8:	b007      	add	sp, #28
 80147aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80147ae:	bf00      	nop
 80147b0:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

080147b4 <non-virtual thunk to StorePixelDmx::SaveGroupingCount(unsigned short)>:
 80147b4:	f1a0 0004 	sub.w	r0, r0, #4
 80147b8:	e7e4      	b.n	8014784 <StorePixelDmx::SaveGroupingCount(unsigned short)>
 80147ba:	bf00      	nop

080147bc <StorePixelDmx::SaveCount(unsigned short)>:
 80147bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80147be:	2302      	movs	r3, #2
 80147c0:	2200      	movs	r2, #0
 80147c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80147c6:	4807      	ldr	r0, [pc, #28]	; (80147e4 <StorePixelDmx::SaveCount(unsigned short)+0x28>)
 80147c8:	9300      	str	r3, [sp, #0]
 80147ca:	f8ad 1016 	strh.w	r1, [sp, #22]
 80147ce:	6800      	ldr	r0, [r0, #0]
 80147d0:	f10d 0316 	add.w	r3, sp, #22
 80147d4:	2205      	movs	r2, #5
 80147d6:	2103      	movs	r1, #3
 80147d8:	f7ff fba0 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80147dc:	b007      	add	sp, #28
 80147de:	f85d fb04 	ldr.w	pc, [sp], #4
 80147e2:	bf00      	nop
 80147e4:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

080147e8 <non-virtual thunk to StorePixelDmx::SaveCount(unsigned short)>:
 80147e8:	f1a0 0004 	sub.w	r0, r0, #4
 80147ec:	e7e6      	b.n	80147bc <StorePixelDmx::SaveCount(unsigned short)>
 80147ee:	bf00      	nop

080147f0 <StorePixelDmx::SaveType(unsigned char)>:
 80147f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80147f2:	2301      	movs	r3, #1
 80147f4:	2200      	movs	r2, #0
 80147f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80147fa:	4807      	ldr	r0, [pc, #28]	; (8014818 <StorePixelDmx::SaveType(unsigned char)+0x28>)
 80147fc:	9300      	str	r3, [sp, #0]
 80147fe:	f88d 1017 	strb.w	r1, [sp, #23]
 8014802:	6800      	ldr	r0, [r0, #0]
 8014804:	f10d 0317 	add.w	r3, sp, #23
 8014808:	2204      	movs	r2, #4
 801480a:	2103      	movs	r1, #3
 801480c:	f7ff fb86 	bl	8013f1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8014810:	b007      	add	sp, #28
 8014812:	f85d fb04 	ldr.w	pc, [sp], #4
 8014816:	bf00      	nop
 8014818:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

0801481c <non-virtual thunk to StorePixelDmx::SaveType(unsigned char)>:
 801481c:	f1a0 0004 	sub.w	r0, r0, #4
 8014820:	e7e6      	b.n	80147f0 <StorePixelDmx::SaveType(unsigned char)>
 8014822:	bf00      	nop

08014824 <StorePixelDmx::~StorePixelDmx()>:
 8014824:	b510      	push	{r4, lr}
 8014826:	4604      	mov	r4, r0
 8014828:	f003 fd70 	bl	801830c <operator delete(void*)>
 801482c:	4620      	mov	r0, r4
 801482e:	bd10      	pop	{r4, pc}

08014830 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 8014830:	f1a0 0004 	sub.w	r0, r0, #4
 8014834:	e7f6      	b.n	8014824 <StorePixelDmx::~StorePixelDmx()>
	...

08014838 <StorePixelDmx::Copy(pixeldmxparams::Params*)>:
 8014838:	b507      	push	{r0, r1, r2, lr}
 801483a:	2300      	movs	r3, #0
 801483c:	460a      	mov	r2, r1
 801483e:	2101      	movs	r1, #1
 8014840:	e9cd 3100 	strd	r3, r1, [sp]
 8014844:	4804      	ldr	r0, [pc, #16]	; (8014858 <StorePixelDmx::Copy(pixeldmxparams::Params*)+0x20>)
 8014846:	2336      	movs	r3, #54	; 0x36
 8014848:	6800      	ldr	r0, [r0, #0]
 801484a:	2103      	movs	r1, #3
 801484c:	f7ff fba6 	bl	8013f9c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 8014850:	b003      	add	sp, #12
 8014852:	f85d fb04 	ldr.w	pc, [sp], #4
 8014856:	bf00      	nop
 8014858:	200092b8 			; <UNDEFINED> instruction: 0x200092b8

0801485c <StorePixelDmx::StorePixelDmx()>:
 801485c:	4a03      	ldr	r2, [pc, #12]	; (801486c <StorePixelDmx::StorePixelDmx()+0x10>)
 801485e:	6002      	str	r2, [r0, #0]
 8014860:	3230      	adds	r2, #48	; 0x30
 8014862:	6042      	str	r2, [r0, #4]
 8014864:	4a02      	ldr	r2, [pc, #8]	; (8014870 <StorePixelDmx::StorePixelDmx()+0x14>)
 8014866:	6010      	str	r0, [r2, #0]
 8014868:	4770      	bx	lr
 801486a:	bf00      	nop
 801486c:	0801d490 	stmdaeq	r1, {r4, r7, sl, ip, lr, pc}
 8014870:	200092e0 	andcs	r9, r0, r0, ror #5

08014874 <HAL_I2C::Setup()>:
 8014874:	b510      	push	{r4, lr}
 8014876:	4604      	mov	r4, r0
 8014878:	7800      	ldrb	r0, [r0, #0]
 801487a:	f004 fe9d 	bl	80195b8 <gd32_i2c_set_address>
 801487e:	6860      	ldr	r0, [r4, #4]
 8014880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014884:	f004 be90 	b.w	80195a8 <gd32_i2c_set_baudrate>

08014888 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)>:
 8014888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801488c:	b08d      	sub	sp, #52	; 0x34
 801488e:	4606      	mov	r6, r0
 8014890:	9301      	str	r3, [sp, #4]
 8014892:	7a03      	ldrb	r3, [r0, #8]
 8014894:	460c      	mov	r4, r1
 8014896:	4617      	mov	r7, r2
 8014898:	2b00      	cmp	r3, #0
 801489a:	d13c      	bne.n	8014916 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x8e>
 801489c:	b00d      	add	sp, #52	; 0x34
 801489e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148a2:	2101      	movs	r1, #1
 80148a4:	4640      	mov	r0, r8
 80148a6:	f004 fef3 	bl	8019690 <gd32_i2c_read>
 80148aa:	2800      	cmp	r0, #0
 80148ac:	d1f9      	bne.n	80148a2 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x1a>
 80148ae:	7a73      	ldrb	r3, [r6, #9]
 80148b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80148b4:	2d1d      	cmp	r5, #29
 80148b6:	bf8c      	ite	hi
 80148b8:	a902      	addhi	r1, sp, #8
 80148ba:	a901      	addls	r1, sp, #4
 80148bc:	fbb4 f2f3 	udiv	r2, r4, r3
 80148c0:	fb03 4212 	mls	r2, r3, r2, r4
 80148c4:	1a9b      	subs	r3, r3, r2
 80148c6:	680a      	ldr	r2, [r1, #0]
 80148c8:	9303      	str	r3, [sp, #12]
 80148ca:	4293      	cmp	r3, r2
 80148cc:	bf98      	it	ls
 80148ce:	4641      	movls	r1, r8
 80148d0:	ba63      	rev16	r3, r4
 80148d2:	f8d1 a000 	ldr.w	sl, [r1]
 80148d6:	f8ad 3010 	strh.w	r3, [sp, #16]
 80148da:	eb07 030b 	add.w	r3, r7, fp
 80148de:	f10d 0211 	add.w	r2, sp, #17
 80148e2:	eb03 010a 	add.w	r1, r3, sl
 80148e6:	428b      	cmp	r3, r1
 80148e8:	d110      	bne.n	801490c <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x84>
 80148ea:	4630      	mov	r0, r6
 80148ec:	f7ff ffc2 	bl	8014874 <HAL_I2C::Setup()>
 80148f0:	eba5 050a 	sub.w	r5, r5, sl
 80148f4:	f10a 0102 	add.w	r1, sl, #2
 80148f8:	a804      	add	r0, sp, #16
 80148fa:	f004 fe63 	bl	80195c4 <gd32_i2c_write>
 80148fe:	4454      	add	r4, sl
 8014900:	9501      	str	r5, [sp, #4]
 8014902:	44d3      	add	fp, sl
 8014904:	9d01      	ldr	r5, [sp, #4]
 8014906:	2d00      	cmp	r5, #0
 8014908:	d1cb      	bne.n	80148a2 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x1a>
 801490a:	e7c7      	b.n	801489c <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x14>
 801490c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014910:	f802 0f01 	strb.w	r0, [r2, #1]!
 8014914:	e7e7      	b.n	80148e6 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x5e>
 8014916:	f04f 0b00 	mov.w	fp, #0
 801491a:	f10d 080c 	add.w	r8, sp, #12
 801491e:	f04f 091e 	mov.w	r9, #30
 8014922:	e7ef      	b.n	8014904 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x7c>

08014924 <FlashRom::FlashRom()>:
 8014924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014926:	4604      	mov	r4, r0
 8014928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801492c:	2050      	movs	r0, #80	; 0x50
 801492e:	4d13      	ldr	r5, [pc, #76]	; (801497c <FlashRom::FlashRom()+0x58>)
 8014930:	8123      	strh	r3, [r4, #8]
 8014932:	7020      	strb	r0, [r4, #0]
 8014934:	6065      	str	r5, [r4, #4]
 8014936:	f004 fe3f 	bl	80195b8 <gd32_i2c_set_address>
 801493a:	4628      	mov	r0, r5
 801493c:	f004 fe34 	bl	80195a8 <gd32_i2c_set_baudrate>
 8014940:	2101      	movs	r1, #1
 8014942:	f10d 0007 	add.w	r0, sp, #7
 8014946:	f004 fea3 	bl	8019690 <gd32_i2c_read>
 801494a:	4a0d      	ldr	r2, [pc, #52]	; (8014980 <FlashRom::FlashRom()+0x5c>)
 801494c:	2800      	cmp	r0, #0
 801494e:	bf0c      	ite	eq
 8014950:	2301      	moveq	r3, #1
 8014952:	2300      	movne	r3, #0
 8014954:	7223      	strb	r3, [r4, #8]
 8014956:	6014      	str	r4, [r2, #0]
 8014958:	72a3      	strb	r3, [r4, #10]
 801495a:	d007      	beq.n	801496c <FlashRom::FlashRom()+0x48>
 801495c:	7822      	ldrb	r2, [r4, #0]
 801495e:	4909      	ldr	r1, [pc, #36]	; (8014984 <FlashRom::FlashRom()+0x60>)
 8014960:	4809      	ldr	r0, [pc, #36]	; (8014988 <FlashRom::FlashRom()+0x64>)
 8014962:	f7f5 fe03 	bl	800a56c <printf>
 8014966:	4620      	mov	r0, r4
 8014968:	b003      	add	sp, #12
 801496a:	bd30      	pop	{r4, r5, pc}
 801496c:	4905      	ldr	r1, [pc, #20]	; (8014984 <FlashRom::FlashRom()+0x60>)
 801496e:	4807      	ldr	r0, [pc, #28]	; (801498c <FlashRom::FlashRom()+0x68>)
 8014970:	2304      	movs	r3, #4
 8014972:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014976:	f7f5 fdf9 	bl	800a56c <printf>
 801497a:	e7f4      	b.n	8014966 <FlashRom::FlashRom()+0x42>
 801497c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8014980:	200092e4 	andcs	r9, r0, r4, ror #5
 8014984:	0801d4e0 	stmdaeq	r1, {r5, r6, r7, sl, ip, lr, pc}
 8014988:	0801d4e8 	stmdaeq	r1, {r3, r5, r6, r7, sl, ip, lr, pc}
 801498c:	0801d4f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, sl, ip, lr, pc}

08014990 <FlashRom::GetSize() const>:
 8014990:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8014994:	4770      	bx	lr

08014996 <FlashRom::GetSectorSize() const>:
 8014996:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801499a:	4770      	bx	lr

0801499c <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 801499c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801499e:	461e      	mov	r6, r3
 80149a0:	7a03      	ldrb	r3, [r0, #8]
 80149a2:	4604      	mov	r4, r0
 80149a4:	460d      	mov	r5, r1
 80149a6:	4617      	mov	r7, r2
 80149a8:	b1b3      	cbz	r3, 80149d8 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x3c>
 80149aa:	2101      	movs	r1, #1
 80149ac:	a801      	add	r0, sp, #4
 80149ae:	f004 fe6f 	bl	8019690 <gd32_i2c_read>
 80149b2:	2800      	cmp	r0, #0
 80149b4:	d1f9      	bne.n	80149aa <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0xe>
 80149b6:	4620      	mov	r0, r4
 80149b8:	ba6d      	rev16	r5, r5
 80149ba:	f8ad 5004 	strh.w	r5, [sp, #4]
 80149be:	f7ff ff59 	bl	8014874 <HAL_I2C::Setup()>
 80149c2:	2102      	movs	r1, #2
 80149c4:	a801      	add	r0, sp, #4
 80149c6:	f004 fdfd 	bl	80195c4 <gd32_i2c_write>
 80149ca:	4620      	mov	r0, r4
 80149cc:	f7ff ff52 	bl	8014874 <HAL_I2C::Setup()>
 80149d0:	4639      	mov	r1, r7
 80149d2:	4630      	mov	r0, r6
 80149d4:	f004 fe5c 	bl	8019690 <gd32_i2c_read>
 80149d8:	9b08      	ldr	r3, [sp, #32]
 80149da:	2200      	movs	r2, #0
 80149dc:	2001      	movs	r0, #1
 80149de:	601a      	str	r2, [r3, #0]
 80149e0:	b003      	add	sp, #12
 80149e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080149e4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 80149e4:	2200      	movs	r2, #0
 80149e6:	601a      	str	r2, [r3, #0]
 80149e8:	2001      	movs	r0, #1
 80149ea:	4770      	bx	lr

080149ec <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 80149ec:	b510      	push	{r4, lr}
 80149ee:	4614      	mov	r4, r2
 80149f0:	461a      	mov	r2, r3
 80149f2:	4623      	mov	r3, r4
 80149f4:	f7ff ff48 	bl	8014888 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)>
 80149f8:	9b02      	ldr	r3, [sp, #8]
 80149fa:	2200      	movs	r2, #0
 80149fc:	601a      	str	r2, [r3, #0]
 80149fe:	2001      	movs	r0, #1
 8014a00:	bd10      	pop	{r4, pc}
	...

08014a04 <net_set_ip>:
 8014a04:	b510      	push	{r4, lr}
 8014a06:	4c05      	ldr	r4, [pc, #20]	; (8014a1c <net_set_ip+0x18>)
 8014a08:	6020      	str	r0, [r4, #0]
 8014a0a:	4621      	mov	r1, r4
 8014a0c:	4804      	ldr	r0, [pc, #16]	; (8014a20 <net_set_ip+0x1c>)
 8014a0e:	f7f3 fc83 	bl	8008318 <arp_init>
 8014a12:	4620      	mov	r0, r4
 8014a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a18:	f002 b8cc 	b.w	8016bb4 <ip_set_ip>
 8014a1c:	200092e8 	andcs	r9, r0, r8, ror #5
 8014a20:	200092f4 	strdcs	r9, [r0], -r4

08014a24 <net_set_gw>:
 8014a24:	4b02      	ldr	r3, [pc, #8]	; (8014a30 <net_set_gw+0xc>)
 8014a26:	6098      	str	r0, [r3, #8]
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f002 b8c3 	b.w	8016bb4 <ip_set_ip>
 8014a2e:	bf00      	nop
 8014a30:	200092e8 	andcs	r9, r0, r8, ror #5

08014a34 <net_set_dhcp>:
 8014a34:	b570      	push	{r4, r5, r6, lr}
 8014a36:	2400      	movs	r4, #0
 8014a38:	7014      	strb	r4, [r2, #0]
 8014a3a:	4605      	mov	r5, r0
 8014a3c:	4616      	mov	r6, r2
 8014a3e:	4810      	ldr	r0, [pc, #64]	; (8014a80 <net_set_dhcp+0x4c>)
 8014a40:	460a      	mov	r2, r1
 8014a42:	4910      	ldr	r1, [pc, #64]	; (8014a84 <net_set_dhcp+0x50>)
 8014a44:	f001 fe9c 	bl	8016780 <dhcp_client>
 8014a48:	42a0      	cmp	r0, r4
 8014a4a:	da17      	bge.n	8014a7c <net_set_dhcp+0x48>
 8014a4c:	480d      	ldr	r0, [pc, #52]	; (8014a84 <net_set_dhcp+0x50>)
 8014a4e:	f000 f859 	bl	8014b04 <rfc3927>
 8014a52:	7030      	strb	r0, [r6, #0]
 8014a54:	490b      	ldr	r1, [pc, #44]	; (8014a84 <net_set_dhcp+0x50>)
 8014a56:	480a      	ldr	r0, [pc, #40]	; (8014a80 <net_set_dhcp+0x4c>)
 8014a58:	f7f3 fc5e 	bl	8008318 <arp_init>
 8014a5c:	4809      	ldr	r0, [pc, #36]	; (8014a84 <net_set_dhcp+0x50>)
 8014a5e:	f002 f8a9 	bl	8016bb4 <ip_set_ip>
 8014a62:	4a08      	ldr	r2, [pc, #32]	; (8014a84 <net_set_dhcp+0x50>)
 8014a64:	1e6b      	subs	r3, r5, #1
 8014a66:	350b      	adds	r5, #11
 8014a68:	f812 1b01 	ldrb.w	r1, [r2], #1
 8014a6c:	f803 1f01 	strb.w	r1, [r3, #1]!
 8014a70:	42ab      	cmp	r3, r5
 8014a72:	d1f9      	bne.n	8014a68 <net_set_dhcp+0x34>
 8014a74:	4b04      	ldr	r3, [pc, #16]	; (8014a88 <net_set_dhcp+0x54>)
 8014a76:	4620      	mov	r0, r4
 8014a78:	701c      	strb	r4, [r3, #0]
 8014a7a:	bd70      	pop	{r4, r5, r6, pc}
 8014a7c:	2401      	movs	r4, #1
 8014a7e:	e7e9      	b.n	8014a54 <net_set_dhcp+0x20>
 8014a80:	200092f4 	strdcs	r9, [r0], -r4
 8014a84:	200092e8 	andcs	r9, r0, r8, ror #5
 8014a88:	200092fa 	strdcs	r9, [r0], -sl

08014a8c <net_dhcp_release>:
 8014a8c:	b508      	push	{r3, lr}
 8014a8e:	f001 ff7f 	bl	8016990 <dhcp_client_release>
 8014a92:	4b02      	ldr	r3, [pc, #8]	; (8014a9c <net_dhcp_release+0x10>)
 8014a94:	2200      	movs	r2, #0
 8014a96:	701a      	strb	r2, [r3, #0]
 8014a98:	bd08      	pop	{r3, pc}
 8014a9a:	bf00      	nop
 8014a9c:	200092fa 	strdcs	r9, [r0], -sl

08014aa0 <net_set_zeroconf>:
 8014aa0:	b538      	push	{r3, r4, r5, lr}
 8014aa2:	4604      	mov	r4, r0
 8014aa4:	480c      	ldr	r0, [pc, #48]	; (8014ad8 <net_set_zeroconf+0x38>)
 8014aa6:	f000 f82d 	bl	8014b04 <rfc3927>
 8014aaa:	4605      	mov	r5, r0
 8014aac:	b190      	cbz	r0, 8014ad4 <net_set_zeroconf+0x34>
 8014aae:	490a      	ldr	r1, [pc, #40]	; (8014ad8 <net_set_zeroconf+0x38>)
 8014ab0:	480a      	ldr	r0, [pc, #40]	; (8014adc <net_set_zeroconf+0x3c>)
 8014ab2:	f7f3 fc31 	bl	8008318 <arp_init>
 8014ab6:	4808      	ldr	r0, [pc, #32]	; (8014ad8 <net_set_zeroconf+0x38>)
 8014ab8:	f002 f87c 	bl	8016bb4 <ip_set_ip>
 8014abc:	4a06      	ldr	r2, [pc, #24]	; (8014ad8 <net_set_zeroconf+0x38>)
 8014abe:	1e63      	subs	r3, r4, #1
 8014ac0:	340b      	adds	r4, #11
 8014ac2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8014ac6:	f803 1f01 	strb.w	r1, [r3, #1]!
 8014aca:	42a3      	cmp	r3, r4
 8014acc:	d1f9      	bne.n	8014ac2 <net_set_zeroconf+0x22>
 8014ace:	4b04      	ldr	r3, [pc, #16]	; (8014ae0 <net_set_zeroconf+0x40>)
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	701a      	strb	r2, [r3, #0]
 8014ad4:	4628      	mov	r0, r5
 8014ad6:	bd38      	pop	{r3, r4, r5, pc}
 8014ad8:	200092e8 	andcs	r9, r0, r8, ror #5
 8014adc:	200092f4 	strdcs	r9, [r0], -r4
 8014ae0:	200092fa 	strdcs	r9, [r0], -sl

08014ae4 <net_timers_run>:
 8014ae4:	4b05      	ldr	r3, [pc, #20]	; (8014afc <net_timers_run+0x18>)
 8014ae6:	4a06      	ldr	r2, [pc, #24]	; (8014b00 <net_timers_run+0x1c>)
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	6811      	ldr	r1, [r2, #0]
 8014aec:	4299      	cmp	r1, r3
 8014aee:	d803      	bhi.n	8014af8 <net_timers_run+0x14>
 8014af0:	3364      	adds	r3, #100	; 0x64
 8014af2:	6013      	str	r3, [r2, #0]
 8014af4:	f001 bfd8 	b.w	8016aa8 <igmp_timer>
 8014af8:	4770      	bx	lr
 8014afa:	bf00      	nop
 8014afc:	2000fddc 	ldrdcs	pc, [r0], -ip
 8014b00:	20009300 	andcs	r9, r0, r0, lsl #6

08014b04 <rfc3927>:
 8014b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b08:	4b19      	ldr	r3, [pc, #100]	; (8014b70 <rfc3927+0x6c>)
 8014b0a:	4f1a      	ldr	r7, [pc, #104]	; (8014b74 <rfc3927+0x70>)
 8014b0c:	791a      	ldrb	r2, [r3, #4]
 8014b0e:	78dc      	ldrb	r4, [r3, #3]
 8014b10:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8014b78 <rfc3927+0x74>
 8014b14:	f8d7 9000 	ldr.w	r9, [r7]
 8014b18:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014b7c <rfc3927+0x78>
 8014b1c:	f8df a060 	ldr.w	sl, [pc, #96]	; 8014b80 <rfc3927+0x7c>
 8014b20:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8014b24:	4606      	mov	r6, r0
 8014b26:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8014b2a:	25ff      	movs	r5, #255	; 0xff
 8014b2c:	4659      	mov	r1, fp
 8014b2e:	4620      	mov	r0, r4
 8014b30:	f001 fd1a 	bl	8016568 <arp_cache_lookup>
 8014b34:	b190      	cbz	r0, 8014b5c <rfc3927+0x58>
 8014b36:	ba24      	rev	r4, r4
 8014b38:	3401      	adds	r4, #1
 8014b3a:	3d01      	subs	r5, #1
 8014b3c:	ba24      	rev	r4, r4
 8014b3e:	b2ad      	uxth	r5, r5
 8014b40:	4554      	cmp	r4, sl
 8014b42:	bf08      	it	eq
 8014b44:	4644      	moveq	r4, r8
 8014b46:	b18d      	cbz	r5, 8014b6c <rfc3927+0x68>
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	eba3 0309 	sub.w	r3, r3, r9
 8014b4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8014b52:	d3eb      	bcc.n	8014b2c <rfc3927+0x28>
 8014b54:	2400      	movs	r4, #0
 8014b56:	4623      	mov	r3, r4
 8014b58:	4620      	mov	r0, r4
 8014b5a:	e002      	b.n	8014b62 <rfc3927+0x5e>
 8014b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b60:	2001      	movs	r0, #1
 8014b62:	e9c6 3401 	strd	r3, r4, [r6, #4]
 8014b66:	6034      	str	r4, [r6, #0]
 8014b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b6c:	462c      	mov	r4, r5
 8014b6e:	e7f2      	b.n	8014b56 <rfc3927+0x52>
 8014b70:	20009304 	andcs	r9, r0, r4, lsl #6
 8014b74:	2000fddc 	ldrdcs	pc, [r0], -ip
 8014b78:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 8014b7c:	2000930c 	andcs	r9, r0, ip, lsl #6
 8014b80:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

08014b84 <_init_tcb>:
 8014b84:	b510      	push	{r4, lr}
 8014b86:	f100 0244 	add.w	r2, r0, #68	; 0x44
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	2400      	movs	r4, #0
 8014b8e:	4293      	cmp	r3, r2
 8014b90:	d10d      	bne.n	8014bae <_init_tcb+0x2a>
 8014b92:	4b08      	ldr	r3, [pc, #32]	; (8014bb4 <_init_tcb+0x30>)
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	6283      	str	r3, [r0, #40]	; 0x28
 8014b98:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b9c:	f640 3268 	movw	r2, #2920	; 0xb68
 8014ba0:	6243      	str	r3, [r0, #36]	; 0x24
 8014ba2:	2301      	movs	r3, #1
 8014ba4:	8001      	strh	r1, [r0, #0]
 8014ba6:	8702      	strh	r2, [r0, #56]	; 0x38
 8014ba8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8014bac:	bd10      	pop	{r4, pc}
 8014bae:	f803 4b01 	strb.w	r4, [r3], #1
 8014bb2:	e7ec      	b.n	8014b8e <_init_tcb+0xa>
 8014bb4:	2000fddc 	ldrdcs	pc, [r0], -ip

08014bb8 <memcpy.isra.0>:
 8014bb8:	3801      	subs	r0, #1
 8014bba:	440a      	add	r2, r1
 8014bbc:	4291      	cmp	r1, r2
 8014bbe:	d100      	bne.n	8014bc2 <memcpy.isra.0+0xa>
 8014bc0:	4770      	bx	lr
 8014bc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bc6:	f800 3f01 	strb.w	r3, [r0, #1]!
 8014bca:	e7f7      	b.n	8014bbc <memcpy.isra.0+0x4>

08014bcc <_bswap32>:
 8014bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014bce:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 8014bd2:	2204      	movs	r2, #4
 8014bd4:	4629      	mov	r1, r5
 8014bd6:	4604      	mov	r4, r0
 8014bd8:	eb0d 0002 	add.w	r0, sp, r2
 8014bdc:	f7ff ffec 	bl	8014bb8 <memcpy.isra.0>
 8014be0:	9b01      	ldr	r3, [sp, #4]
 8014be2:	2204      	movs	r2, #4
 8014be4:	ba1b      	rev	r3, r3
 8014be6:	eb0d 0102 	add.w	r1, sp, r2
 8014bea:	4628      	mov	r0, r5
 8014bec:	9301      	str	r3, [sp, #4]
 8014bee:	3426      	adds	r4, #38	; 0x26
 8014bf0:	f7ff ffe2 	bl	8014bb8 <memcpy.isra.0>
 8014bf4:	2204      	movs	r2, #4
 8014bf6:	eb0d 0002 	add.w	r0, sp, r2
 8014bfa:	4621      	mov	r1, r4
 8014bfc:	f7ff ffdc 	bl	8014bb8 <memcpy.isra.0>
 8014c00:	9b01      	ldr	r3, [sp, #4]
 8014c02:	2204      	movs	r2, #4
 8014c04:	ba1b      	rev	r3, r3
 8014c06:	eb0d 0102 	add.w	r1, sp, r2
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	9301      	str	r3, [sp, #4]
 8014c0e:	f7ff ffd3 	bl	8014bb8 <memcpy.isra.0>
 8014c12:	b003      	add	sp, #12
 8014c14:	bd30      	pop	{r4, r5, pc}
	...

08014c18 <_tcp_send_package>:
 8014c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014c1c:	7a0b      	ldrb	r3, [r1, #8]
 8014c1e:	4c4c      	ldr	r4, [pc, #304]	; (8014d50 <_tcp_send_package+0x138>)
 8014c20:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8014c22:	f013 0f02 	tst.w	r3, #2
 8014c26:	4605      	mov	r5, r0
 8014c28:	bf0c      	ite	eq
 8014c2a:	f04f 0805 	moveq.w	r8, #5
 8014c2e:	f04f 0806 	movne.w	r8, #6
 8014c32:	460f      	mov	r7, r1
 8014c34:	2206      	movs	r2, #6
 8014c36:	f100 0108 	add.w	r1, r0, #8
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	f7ff ffbc 	bl	8014bb8 <memcpy.isra.0>
 8014c40:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8014c44:	f8b4 35ec 	ldrh.w	r3, [r4, #1516]	; 0x5ec
 8014c48:	8263      	strh	r3, [r4, #18]
 8014c4a:	b2b6      	uxth	r6, r6
 8014c4c:	1c5a      	adds	r2, r3, #1
 8014c4e:	f105 0904 	add.w	r9, r5, #4
 8014c52:	f106 0314 	add.w	r3, r6, #20
 8014c56:	ba5b      	rev16	r3, r3
 8014c58:	f8a4 25ec 	strh.w	r2, [r4, #1516]	; 0x5ec
 8014c5c:	4649      	mov	r1, r9
 8014c5e:	2204      	movs	r2, #4
 8014c60:	f104 001e 	add.w	r0, r4, #30
 8014c64:	8223      	strh	r3, [r4, #16]
 8014c66:	f04f 0a00 	mov.w	sl, #0
 8014c6a:	f7ff ffa5 	bl	8014bb8 <memcpy.isra.0>
 8014c6e:	2114      	movs	r1, #20
 8014c70:	f104 000e 	add.w	r0, r4, #14
 8014c74:	f8a4 a018 	strh.w	sl, [r4, #24]
 8014c78:	f001 ffa5 	bl	8016bc6 <net_chksum>
 8014c7c:	882b      	ldrh	r3, [r5, #0]
 8014c7e:	8463      	strh	r3, [r4, #34]	; 0x22
 8014c80:	886b      	ldrh	r3, [r5, #2]
 8014c82:	84a3      	strh	r3, [r4, #36]	; 0x24
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 8014c8a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	8320      	strh	r0, [r4, #24]
 8014c92:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
 8014c96:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 8014c9a:	7a3b      	ldrb	r3, [r7, #8]
 8014c9c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8014ca0:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 8014ca2:	8622      	strh	r2, [r4, #48]	; 0x30
 8014ca4:	079b      	lsls	r3, r3, #30
 8014ca6:	8baa      	ldrh	r2, [r5, #28]
 8014ca8:	86a2      	strh	r2, [r4, #52]	; 0x34
 8014caa:	bf41      	itttt	mi
 8014cac:	f240 4302 	movwmi	r3, #1026	; 0x402
 8014cb0:	4622      	movmi	r2, r4
 8014cb2:	86e3      	strhmi	r3, [r4, #54]	; 0x36
 8014cb4:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 8014cb8:	bf48      	it	mi
 8014cba:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 8014cbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8014cc0:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
 8014cc4:	bf58      	it	pl
 8014cc6:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d13e      	bne.n	8014d4c <_tcp_send_package+0x134>
 8014cce:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8014cd0:	481f      	ldr	r0, [pc, #124]	; (8014d50 <_tcp_send_package+0x138>)
 8014cd2:	ba5b      	rev16	r3, r3
 8014cd4:	8463      	strh	r3, [r4, #34]	; 0x22
 8014cd6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8014cd8:	ba5b      	rev16	r3, r3
 8014cda:	84a3      	strh	r3, [r4, #36]	; 0x24
 8014cdc:	f7ff ff76 	bl	8014bcc <_bswap32>
 8014ce0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014ce2:	491c      	ldr	r1, [pc, #112]	; (8014d54 <_tcp_send_package+0x13c>)
 8014ce4:	ba5b      	rev16	r3, r3
 8014ce6:	8623      	strh	r3, [r4, #48]	; 0x30
 8014ce8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014cea:	a801      	add	r0, sp, #4
 8014cec:	ba5b      	rev16	r3, r3
 8014cee:	220c      	movs	r2, #12
 8014cf0:	86a3      	strh	r3, [r4, #52]	; 0x34
 8014cf2:	f7ff ff61 	bl	8014bb8 <memcpy.isra.0>
 8014cf6:	4918      	ldr	r1, [pc, #96]	; (8014d58 <_tcp_send_package+0x140>)
 8014cf8:	4816      	ldr	r0, [pc, #88]	; (8014d54 <_tcp_send_package+0x13c>)
 8014cfa:	2204      	movs	r2, #4
 8014cfc:	f7ff ff5c 	bl	8014bb8 <memcpy.isra.0>
 8014d00:	2204      	movs	r2, #4
 8014d02:	4649      	mov	r1, r9
 8014d04:	4815      	ldr	r0, [pc, #84]	; (8014d5c <_tcp_send_package+0x144>)
 8014d06:	f7ff ff57 	bl	8014bb8 <memcpy.isra.0>
 8014d0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8014d0e:	83e3      	strh	r3, [r4, #30]
 8014d10:	f106 010c 	add.w	r1, r6, #12
 8014d14:	ba73      	rev16	r3, r6
 8014d16:	480f      	ldr	r0, [pc, #60]	; (8014d54 <_tcp_send_package+0x13c>)
 8014d18:	8423      	strh	r3, [r4, #32]
 8014d1a:	f001 ff54 	bl	8016bc6 <net_chksum>
 8014d1e:	a901      	add	r1, sp, #4
 8014d20:	4605      	mov	r5, r0
 8014d22:	220c      	movs	r2, #12
 8014d24:	480b      	ldr	r0, [pc, #44]	; (8014d54 <_tcp_send_package+0x13c>)
 8014d26:	f7ff ff47 	bl	8014bb8 <memcpy.isra.0>
 8014d2a:	4809      	ldr	r0, [pc, #36]	; (8014d50 <_tcp_send_package+0x138>)
 8014d2c:	8665      	strh	r5, [r4, #50]	; 0x32
 8014d2e:	f106 0122 	add.w	r1, r6, #34	; 0x22
 8014d32:	b004      	add	sp, #16
 8014d34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d38:	f004 bb78 	b.w	801942c <emac_eth_send>
 8014d3c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8014d3e:	5cc9      	ldrb	r1, [r1, r3]
 8014d40:	54d1      	strb	r1, [r2, r3]
 8014d42:	3301      	adds	r3, #1
 8014d44:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8014d46:	4299      	cmp	r1, r3
 8014d48:	d8f8      	bhi.n	8014d3c <_tcp_send_package+0x124>
 8014d4a:	e7c0      	b.n	8014cce <_tcp_send_package+0xb6>
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	e7f9      	b.n	8014d44 <_tcp_send_package+0x12c>
 8014d50:	10000000 	andne	r0, r0, r0
 8014d54:	10000016 	andne	r0, r0, r6, lsl r0
 8014d58:	200092e8 	andcs	r9, r0, r8, ror #5
 8014d5c:	1000001a 	andne	r0, r0, sl, lsl r0

08014d60 <_send_reset>:
 8014d60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014d62:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8014d66:	075a      	lsls	r2, r3, #29
 8014d68:	4604      	mov	r4, r0
 8014d6a:	460e      	mov	r6, r1
 8014d6c:	d421      	bmi.n	8014db2 <_send_reset+0x52>
 8014d6e:	2204      	movs	r2, #4
 8014d70:	f013 0310 	ands.w	r3, r3, #16
 8014d74:	f88d 200c 	strb.w	r2, [sp, #12]
 8014d78:	d01d      	beq.n	8014db6 <_send_reset+0x56>
 8014d7a:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 8014d7e:	4668      	mov	r0, sp
 8014d80:	f7ff ff1a 	bl	8014bb8 <memcpy.isra.0>
 8014d84:	9b00      	ldr	r3, [sp, #0]
 8014d86:	9301      	str	r3, [sp, #4]
 8014d88:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8014d8c:	f104 0126 	add.w	r1, r4, #38	; 0x26
 8014d90:	f3c3 0540 	ubfx	r5, r3, #1, #1
 8014d94:	4668      	mov	r0, sp
 8014d96:	07db      	lsls	r3, r3, #31
 8014d98:	f04f 0204 	mov.w	r2, #4
 8014d9c:	bf48      	it	mi
 8014d9e:	3501      	addmi	r5, #1
 8014da0:	f7ff ff0a 	bl	8014bb8 <memcpy.isra.0>
 8014da4:	9b00      	ldr	r3, [sp, #0]
 8014da6:	a901      	add	r1, sp, #4
 8014da8:	441d      	add	r5, r3
 8014daa:	4630      	mov	r0, r6
 8014dac:	9502      	str	r5, [sp, #8]
 8014dae:	f7ff ff33 	bl	8014c18 <_tcp_send_package>
 8014db2:	b004      	add	sp, #16
 8014db4:	bd70      	pop	{r4, r5, r6, pc}
 8014db6:	9301      	str	r3, [sp, #4]
 8014db8:	2314      	movs	r3, #20
 8014dba:	f88d 300c 	strb.w	r3, [sp, #12]
 8014dbe:	e7e3      	b.n	8014d88 <_send_reset+0x28>

08014dc0 <tcp_begin>:
 8014dc0:	b508      	push	{r3, lr}
 8014dc2:	4b0b      	ldr	r3, [pc, #44]	; (8014df0 <tcp_begin+0x30>)
 8014dc4:	f8b3 25f0 	ldrh.w	r2, [r3, #1520]	; 0x5f0
 8014dc8:	4282      	cmp	r2, r0
 8014dca:	4601      	mov	r1, r0
 8014dcc:	d102      	bne.n	8014dd4 <tcp_begin+0x14>
 8014dce:	f893 0630 	ldrb.w	r0, [r3, #1584]	; 0x630
 8014dd2:	b130      	cbz	r0, 8014de2 <tcp_begin+0x22>
 8014dd4:	b12a      	cbz	r2, 8014de2 <tcp_begin+0x22>
 8014dd6:	4807      	ldr	r0, [pc, #28]	; (8014df4 <tcp_begin+0x34>)
 8014dd8:	f003 f900 	bl	8017fdc <console_error>
 8014ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014de0:	bd08      	pop	{r3, pc}
 8014de2:	4805      	ldr	r0, [pc, #20]	; (8014df8 <tcp_begin+0x38>)
 8014de4:	f8a3 15f0 	strh.w	r1, [r3, #1520]	; 0x5f0
 8014de8:	f7ff fecc 	bl	8014b84 <_init_tcb>
 8014dec:	2000      	movs	r0, #0
 8014dee:	e7f7      	b.n	8014de0 <tcp_begin+0x20>
 8014df0:	10000000 	andne	r0, r0, r0
 8014df4:	0801d51e 	stmdaeq	r1, {r1, r2, r3, r4, r8, sl, ip, lr, pc}
 8014df8:	100005f0 	strdne	r0, [r0], -r0	; <UNPREDICTABLE>

08014dfc <tcp_write>:
 8014dfc:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8014e00:	b530      	push	{r4, r5, lr}
 8014e02:	429a      	cmp	r2, r3
 8014e04:	bf28      	it	cs
 8014e06:	461a      	movcs	r2, r3
 8014e08:	4615      	mov	r5, r2
 8014e0a:	4b12      	ldr	r3, [pc, #72]	; (8014e54 <tcp_write+0x58>)
 8014e0c:	2244      	movs	r2, #68	; 0x44
 8014e0e:	4350      	muls	r0, r2
 8014e10:	181c      	adds	r4, r3, r0
 8014e12:	b085      	sub	sp, #20
 8014e14:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 8014e18:	9201      	str	r2, [sp, #4]
 8014e1a:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8014e1e:	f8d4 2624 	ldr.w	r2, [r4, #1572]	; 0x624
 8014e22:	f8c4 161c 	str.w	r1, [r4, #1564]	; 0x61c
 8014e26:	9202      	str	r2, [sp, #8]
 8014e28:	4418      	add	r0, r3
 8014e2a:	2218      	movs	r2, #24
 8014e2c:	f8a4 5620 	strh.w	r5, [r4, #1568]	; 0x620
 8014e30:	a901      	add	r1, sp, #4
 8014e32:	f88d 200c 	strb.w	r2, [sp, #12]
 8014e36:	f7ff feef 	bl	8014c18 <_tcp_send_package>
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	f8c4 361c 	str.w	r3, [r4, #1564]	; 0x61c
 8014e40:	f8a4 3620 	strh.w	r3, [r4, #1568]	; 0x620
 8014e44:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8014e48:	442b      	add	r3, r5
 8014e4a:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
 8014e4e:	b005      	add	sp, #20
 8014e50:	bd30      	pop	{r4, r5, pc}
 8014e52:	bf00      	nop
 8014e54:	10000000 	andne	r0, r0, r0

08014e58 <tcp_read>:
 8014e58:	4b23      	ldr	r3, [pc, #140]	; (8014ee8 <tcp_read+0x90>)
 8014e5a:	2244      	movs	r2, #68	; 0x44
 8014e5c:	4342      	muls	r2, r0
 8014e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e60:	189c      	adds	r4, r3, r2
 8014e62:	b085      	sub	sp, #20
 8014e64:	f894 5630 	ldrb.w	r5, [r4, #1584]	; 0x630
 8014e68:	2d07      	cmp	r5, #7
 8014e6a:	d118      	bne.n	8014e9e <tcp_read+0x46>
 8014e6c:	f8d4 1604 	ldr.w	r1, [r4, #1540]	; 0x604
 8014e70:	9101      	str	r1, [sp, #4]
 8014e72:	f8d4 1624 	ldr.w	r1, [r4, #1572]	; 0x624
 8014e76:	9102      	str	r1, [sp, #8]
 8014e78:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8014e7c:	2111      	movs	r1, #17
 8014e7e:	f88d 100c 	strb.w	r1, [sp, #12]
 8014e82:	1898      	adds	r0, r3, r2
 8014e84:	a901      	add	r1, sp, #4
 8014e86:	f7ff fec7 	bl	8014c18 <_tcp_send_package>
 8014e8a:	2309      	movs	r3, #9
 8014e8c:	f884 3630 	strb.w	r3, [r4, #1584]	; 0x630
 8014e90:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8014e94:	3301      	adds	r3, #1
 8014e96:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
 8014e9a:	2000      	movs	r0, #0
 8014e9c:	e022      	b.n	8014ee4 <tcp_read+0x8c>
 8014e9e:	f44f 6237 	mov.w	r2, #2928	; 0xb70
 8014ea2:	4350      	muls	r0, r2
 8014ea4:	181e      	adds	r6, r3, r0
 8014ea6:	f8b6 5636 	ldrh.w	r5, [r6, #1590]	; 0x636
 8014eaa:	f8b6 2634 	ldrh.w	r2, [r6, #1588]	; 0x634
 8014eae:	42aa      	cmp	r2, r5
 8014eb0:	d0f3      	beq.n	8014e9a <tcp_read+0x42>
 8014eb2:	f240 52b6 	movw	r2, #1462	; 0x5b6
 8014eb6:	f100 0c04 	add.w	ip, r0, #4
 8014eba:	436a      	muls	r2, r5
 8014ebc:	f203 6734 	addw	r7, r3, #1588	; 0x634
 8014ec0:	4494      	add	ip, r2
 8014ec2:	4467      	add	r7, ip
 8014ec4:	600f      	str	r7, [r1, #0]
 8014ec6:	4402      	add	r2, r0
 8014ec8:	441a      	add	r2, r3
 8014eca:	f8b4 3628 	ldrh.w	r3, [r4, #1576]	; 0x628
 8014ece:	f8b2 0bec 	ldrh.w	r0, [r2, #3052]	; 0xbec
 8014ed2:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8014ed6:	f8a4 3628 	strh.w	r3, [r4, #1576]	; 0x628
 8014eda:	1c6b      	adds	r3, r5, #1
 8014edc:	f003 0301 	and.w	r3, r3, #1
 8014ee0:	f8a6 3636 	strh.w	r3, [r6, #1590]	; 0x636
 8014ee4:	b005      	add	sp, #20
 8014ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ee8:	10000000 	andne	r0, r0, r0

08014eec <memcpy.isra.0>:
 8014eec:	3801      	subs	r0, #1
 8014eee:	440a      	add	r2, r1
 8014ef0:	4291      	cmp	r1, r2
 8014ef2:	d100      	bne.n	8014ef6 <memcpy.isra.0+0xa>
 8014ef4:	4770      	bx	lr
 8014ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014efa:	f800 3f01 	strb.w	r3, [r0, #1]!
 8014efe:	e7f7      	b.n	8014ef0 <memcpy.isra.0+0x4>

08014f00 <net_memcpy>:
 8014f00:	ea40 0301 	orr.w	r3, r0, r1
 8014f04:	079b      	lsls	r3, r3, #30
 8014f06:	b570      	push	{r4, r5, r6, lr}
 8014f08:	d108      	bne.n	8014f1c <net_memcpy+0x1c>
 8014f0a:	f022 0303 	bic.w	r3, r2, #3
 8014f0e:	1f04      	subs	r4, r0, #4
 8014f10:	18cd      	adds	r5, r1, r3
 8014f12:	42a9      	cmp	r1, r5
 8014f14:	d108      	bne.n	8014f28 <net_memcpy+0x28>
 8014f16:	1ad2      	subs	r2, r2, r3
 8014f18:	4403      	add	r3, r0
 8014f1a:	e000      	b.n	8014f1e <net_memcpy+0x1e>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	3b01      	subs	r3, #1
 8014f20:	440a      	add	r2, r1
 8014f22:	4291      	cmp	r1, r2
 8014f24:	d105      	bne.n	8014f32 <net_memcpy+0x32>
 8014f26:	bd70      	pop	{r4, r5, r6, pc}
 8014f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8014f2c:	f844 6f04 	str.w	r6, [r4, #4]!
 8014f30:	e7ef      	b.n	8014f12 <net_memcpy+0x12>
 8014f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014f3a:	e7f2      	b.n	8014f22 <net_memcpy+0x22>

08014f3c <udp_set_ip>:
 8014f3c:	b513      	push	{r0, r1, r4, lr}
 8014f3e:	2204      	movs	r2, #4
 8014f40:	4604      	mov	r4, r0
 8014f42:	6803      	ldr	r3, [r0, #0]
 8014f44:	4809      	ldr	r0, [pc, #36]	; (8014f6c <udp_set_ip+0x30>)
 8014f46:	9301      	str	r3, [sp, #4]
 8014f48:	eb0d 0102 	add.w	r1, sp, r2
 8014f4c:	f7ff ffce 	bl	8014eec <memcpy.isra.0>
 8014f50:	6862      	ldr	r2, [r4, #4]
 8014f52:	4b07      	ldr	r3, [pc, #28]	; (8014f70 <udp_set_ip+0x34>)
 8014f54:	43d1      	mvns	r1, r2
 8014f56:	6019      	str	r1, [r3, #0]
 8014f58:	6823      	ldr	r3, [r4, #0]
 8014f5a:	4013      	ands	r3, r2
 8014f5c:	4a05      	ldr	r2, [pc, #20]	; (8014f74 <udp_set_ip+0x38>)
 8014f5e:	6013      	str	r3, [r2, #0]
 8014f60:	68a2      	ldr	r2, [r4, #8]
 8014f62:	4b05      	ldr	r3, [pc, #20]	; (8014f78 <udp_set_ip+0x3c>)
 8014f64:	601a      	str	r2, [r3, #0]
 8014f66:	b002      	add	sp, #8
 8014f68:	bd10      	pop	{r4, pc}
 8014f6a:	bf00      	nop
 8014f6c:	2000effe 	strdcs	lr, [r0], -lr	; <UNPREDICTABLE>
 8014f70:	20009314 	andcs	r9, r0, r4, lsl r3
 8014f74:	2000931c 	andcs	r9, r0, ip, lsl r3
 8014f78:	20009318 	andcs	r9, r0, r8, lsl r3

08014f7c <udp_bind>:
 8014f7c:	4a0a      	ldr	r2, [pc, #40]	; (8014fa8 <udp_bind+0x2c>)
 8014f7e:	b510      	push	{r4, lr}
 8014f80:	2300      	movs	r3, #0
 8014f82:	4614      	mov	r4, r2
 8014f84:	f852 1b04 	ldr.w	r1, [r2], #4
 8014f88:	4281      	cmp	r1, r0
 8014f8a:	d008      	beq.n	8014f9e <udp_bind+0x22>
 8014f8c:	b149      	cbz	r1, 8014fa2 <udp_bind+0x26>
 8014f8e:	3301      	adds	r3, #1
 8014f90:	2b08      	cmp	r3, #8
 8014f92:	d1f7      	bne.n	8014f84 <udp_bind+0x8>
 8014f94:	4805      	ldr	r0, [pc, #20]	; (8014fac <udp_bind+0x30>)
 8014f96:	f003 f821 	bl	8017fdc <console_error>
 8014f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	bd10      	pop	{r4, pc}
 8014fa2:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8014fa6:	e7fa      	b.n	8014f9e <udp_bind+0x22>
 8014fa8:	20009324 	andcs	r9, r0, r4, lsr #6
 8014fac:	0801d53e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, sl, ip, lr, pc}

08014fb0 <udp_unbind>:
 8014fb0:	b510      	push	{r4, lr}
 8014fb2:	4a0c      	ldr	r2, [pc, #48]	; (8014fe4 <udp_unbind+0x34>)
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	4611      	mov	r1, r2
 8014fb8:	f852 4b04 	ldr.w	r4, [r2], #4
 8014fbc:	4284      	cmp	r4, r0
 8014fbe:	d108      	bne.n	8014fd2 <udp_unbind+0x22>
 8014fc0:	2000      	movs	r0, #0
 8014fc2:	f640 3294 	movw	r2, #2964	; 0xb94
 8014fc6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8014fca:	4353      	muls	r3, r2
 8014fcc:	4a06      	ldr	r2, [pc, #24]	; (8014fe8 <udp_unbind+0x38>)
 8014fce:	50d0      	str	r0, [r2, r3]
 8014fd0:	bd10      	pop	{r4, pc}
 8014fd2:	3301      	adds	r3, #1
 8014fd4:	2b08      	cmp	r3, #8
 8014fd6:	d1ef      	bne.n	8014fb8 <udp_unbind+0x8>
 8014fd8:	4804      	ldr	r0, [pc, #16]	; (8014fec <udp_unbind+0x3c>)
 8014fda:	f002 ffff 	bl	8017fdc <console_error>
 8014fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014fe2:	e7f5      	b.n	8014fd0 <udp_unbind+0x20>
 8014fe4:	20009324 	andcs	r9, r0, r4, lsr #6
 8014fe8:	20009344 	andcs	r9, r0, r4, asr #6
 8014fec:	0801d543 	stmdaeq	r1, {r0, r1, r6, r8, sl, ip, lr, pc}

08014ff0 <udp_recv>:
 8014ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ff4:	4604      	mov	r4, r0
 8014ff6:	4698      	mov	r8, r3
 8014ff8:	4608      	mov	r0, r1
 8014ffa:	f640 3394 	movw	r3, #2964	; 0xb94
 8014ffe:	4916      	ldr	r1, [pc, #88]	; (8015058 <udp_recv+0x68>)
 8015000:	435c      	muls	r4, r3
 8015002:	190f      	adds	r7, r1, r4
 8015004:	5b0b      	ldrh	r3, [r1, r4]
 8015006:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 801500a:	4563      	cmp	r3, ip
 801500c:	d021      	beq.n	8015052 <udp_recv+0x62>
 801500e:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8015012:	fb03 fc0c 	mul.w	ip, r3, ip
 8015016:	eb0c 0604 	add.w	r6, ip, r4
 801501a:	440e      	add	r6, r1
 801501c:	3404      	adds	r4, #4
 801501e:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 8015022:	4295      	cmp	r5, r2
 8015024:	bf28      	it	cs
 8015026:	4615      	movcs	r5, r2
 8015028:	4464      	add	r4, ip
 801502a:	462a      	mov	r2, r5
 801502c:	4421      	add	r1, r4
 801502e:	f7ff ff67 	bl	8014f00 <net_memcpy>
 8015032:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 8015036:	f8c8 3000 	str.w	r3, [r8]
 801503a:	9b06      	ldr	r3, [sp, #24]
 801503c:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 8015040:	801a      	strh	r2, [r3, #0]
 8015042:	887b      	ldrh	r3, [r7, #2]
 8015044:	3301      	adds	r3, #1
 8015046:	f003 0301 	and.w	r3, r3, #1
 801504a:	807b      	strh	r3, [r7, #2]
 801504c:	4628      	mov	r0, r5
 801504e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015052:	2500      	movs	r5, #0
 8015054:	e7fa      	b.n	801504c <udp_recv+0x5c>
 8015056:	bf00      	nop
 8015058:	20009344 	andcs	r9, r0, r4, asr #6

0801505c <udp_recv2>:
 801505c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801505e:	4c11      	ldr	r4, [pc, #68]	; (80150a4 <udp_recv2+0x48>)
 8015060:	f640 3594 	movw	r5, #2964	; 0xb94
 8015064:	4368      	muls	r0, r5
 8015066:	1827      	adds	r7, r4, r0
 8015068:	5a26      	ldrh	r6, [r4, r0]
 801506a:	887d      	ldrh	r5, [r7, #2]
 801506c:	42ae      	cmp	r6, r5
 801506e:	d017      	beq.n	80150a0 <udp_recv2+0x44>
 8015070:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 8015074:	1d06      	adds	r6, r0, #4
 8015076:	fb0c f505 	mul.w	r5, ip, r5
 801507a:	442e      	add	r6, r5
 801507c:	4405      	add	r5, r0
 801507e:	4426      	add	r6, r4
 8015080:	442c      	add	r4, r5
 8015082:	600e      	str	r6, [r1, #0]
 8015084:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 8015088:	6011      	str	r1, [r2, #0]
 801508a:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 801508e:	801a      	strh	r2, [r3, #0]
 8015090:	887b      	ldrh	r3, [r7, #2]
 8015092:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 8015096:	3301      	adds	r3, #1
 8015098:	f003 0301 	and.w	r3, r3, #1
 801509c:	807b      	strh	r3, [r7, #2]
 801509e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150a0:	2000      	movs	r0, #0
 80150a2:	e7fc      	b.n	801509e <udp_recv2+0x42>
 80150a4:	20009344 	andcs	r9, r0, r4, asr #6

080150a8 <udp_send>:
 80150a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80150ac:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8015200 <udp_send+0x158>
 80150b0:	461c      	mov	r4, r3
 80150b2:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 80150b6:	4607      	mov	r7, r0
 80150b8:	4688      	mov	r8, r1
 80150ba:	4616      	mov	r6, r2
 80150bc:	2b00      	cmp	r3, #0
 80150be:	f000 808b 	beq.w	80151d8 <udp_send+0x130>
 80150c2:	1c63      	adds	r3, r4, #1
 80150c4:	d141      	bne.n	801514a <udp_send+0xa2>
 80150c6:	4a46      	ldr	r2, [pc, #280]	; (80151e0 <udp_send+0x138>)
 80150c8:	2307      	movs	r3, #7
 80150ca:	4611      	mov	r1, r2
 80150cc:	20ff      	movs	r0, #255	; 0xff
 80150ce:	e001      	b.n	80150d4 <udp_send+0x2c>
 80150d0:	f802 0b01 	strb.w	r0, [r2], #1
 80150d4:	3b01      	subs	r3, #1
 80150d6:	d1fb      	bne.n	80150d0 <udp_send+0x28>
 80150d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150dc:	83cb      	strh	r3, [r1, #30]
 80150de:	840b      	strh	r3, [r1, #32]
 80150e0:	f8df a120 	ldr.w	sl, [pc, #288]	; 8015204 <udp_send+0x15c>
 80150e4:	4c3e      	ldr	r4, [pc, #248]	; (80151e0 <udp_send+0x138>)
 80150e6:	f8ba 3000 	ldrh.w	r3, [sl]
 80150ea:	8263      	strh	r3, [r4, #18]
 80150ec:	f106 031c 	add.w	r3, r6, #28
 80150f0:	ba5b      	rev16	r3, r3
 80150f2:	2500      	movs	r5, #0
 80150f4:	2114      	movs	r1, #20
 80150f6:	f104 000e 	add.w	r0, r4, #14
 80150fa:	8223      	strh	r3, [r4, #16]
 80150fc:	8325      	strh	r5, [r4, #24]
 80150fe:	f001 fd62 	bl	8016bc6 <net_chksum>
 8015102:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8015106:	8320      	strh	r0, [r4, #24]
 8015108:	ba5b      	rev16	r3, r3
 801510a:	8463      	strh	r3, [r4, #34]	; 0x22
 801510c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8015110:	ba5b      	rev16	r3, r3
 8015112:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 8015116:	84a3      	strh	r3, [r4, #36]	; 0x24
 8015118:	f106 0308 	add.w	r3, r6, #8
 801511c:	ba5b      	rev16	r3, r3
 801511e:	4632      	mov	r2, r6
 8015120:	4641      	mov	r1, r8
 8015122:	bf28      	it	cs
 8015124:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 8015128:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801512c:	84e3      	strh	r3, [r4, #38]	; 0x26
 801512e:	f7ff fee7 	bl	8014f00 <net_memcpy>
 8015132:	4620      	mov	r0, r4
 8015134:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 8015138:	f004 f978 	bl	801942c <emac_eth_send>
 801513c:	f8ba 3000 	ldrh.w	r3, [sl]
 8015140:	3301      	adds	r3, #1
 8015142:	f8aa 3000 	strh.w	r3, [sl]
 8015146:	4628      	mov	r0, r5
 8015148:	e037      	b.n	80151ba <udp_send+0x112>
 801514a:	4b26      	ldr	r3, [pc, #152]	; (80151e4 <udp_send+0x13c>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	43a3      	bics	r3, r4
 8015150:	d10f      	bne.n	8015172 <udp_send+0xca>
 8015152:	4a23      	ldr	r2, [pc, #140]	; (80151e0 <udp_send+0x138>)
 8015154:	2307      	movs	r3, #7
 8015156:	21ff      	movs	r1, #255	; 0xff
 8015158:	e001      	b.n	801515e <udp_send+0xb6>
 801515a:	f802 1b01 	strb.w	r1, [r2], #1
 801515e:	3b01      	subs	r3, #1
 8015160:	d1fb      	bne.n	801515a <udp_send+0xb2>
 8015162:	2204      	movs	r2, #4
 8015164:	4820      	ldr	r0, [pc, #128]	; (80151e8 <udp_send+0x140>)
 8015166:	9401      	str	r4, [sp, #4]
 8015168:	eb0d 0102 	add.w	r1, sp, r2
 801516c:	f7ff febe 	bl	8014eec <memcpy.isra.0>
 8015170:	e7b6      	b.n	80150e0 <udp_send+0x38>
 8015172:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 8015176:	2be0      	cmp	r3, #224	; 0xe0
 8015178:	d10e      	bne.n	8015198 <udp_send+0xf0>
 801517a:	491c      	ldr	r1, [pc, #112]	; (80151ec <udp_send+0x144>)
 801517c:	4818      	ldr	r0, [pc, #96]	; (80151e0 <udp_send+0x138>)
 801517e:	f3c4 2206 	ubfx	r2, r4, #8, #7
 8015182:	70ca      	strb	r2, [r1, #3]
 8015184:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8015188:	710a      	strb	r2, [r1, #4]
 801518a:	f3c4 6207 	ubfx	r2, r4, #24, #8
 801518e:	714a      	strb	r2, [r1, #5]
 8015190:	2206      	movs	r2, #6
 8015192:	f7ff feab 	bl	8014eec <memcpy.isra.0>
 8015196:	e7e4      	b.n	8015162 <udp_send+0xba>
 8015198:	4b15      	ldr	r3, [pc, #84]	; (80151f0 <udp_send+0x148>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	43a3      	bics	r3, r4
 801519e:	d00f      	beq.n	80151c0 <udp_send+0x118>
 80151a0:	4d14      	ldr	r5, [pc, #80]	; (80151f4 <udp_send+0x14c>)
 80151a2:	490f      	ldr	r1, [pc, #60]	; (80151e0 <udp_send+0x138>)
 80151a4:	6828      	ldr	r0, [r5, #0]
 80151a6:	f001 f9df 	bl	8016568 <arp_cache_lookup>
 80151aa:	682b      	ldr	r3, [r5, #0]
 80151ac:	4298      	cmp	r0, r3
 80151ae:	d0d8      	beq.n	8015162 <udp_send+0xba>
 80151b0:	4811      	ldr	r0, [pc, #68]	; (80151f8 <udp_send+0x150>)
 80151b2:	f002 ff13 	bl	8017fdc <console_error>
 80151b6:	f06f 0002 	mvn.w	r0, #2
 80151ba:	b002      	add	sp, #8
 80151bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151c0:	4907      	ldr	r1, [pc, #28]	; (80151e0 <udp_send+0x138>)
 80151c2:	4620      	mov	r0, r4
 80151c4:	f001 f9d0 	bl	8016568 <arp_cache_lookup>
 80151c8:	42a0      	cmp	r0, r4
 80151ca:	d0ca      	beq.n	8015162 <udp_send+0xba>
 80151cc:	480b      	ldr	r0, [pc, #44]	; (80151fc <udp_send+0x154>)
 80151ce:	f002 ff05 	bl	8017fdc <console_error>
 80151d2:	f06f 0001 	mvn.w	r0, #1
 80151d6:	e7f0      	b.n	80151ba <udp_send+0x112>
 80151d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80151dc:	e7ed      	b.n	80151ba <udp_send+0x112>
 80151de:	bf00      	nop
 80151e0:	2000efe4 	andcs	lr, r0, r4, ror #31
 80151e4:	20009314 	andcs	r9, r0, r4, lsl r3
 80151e8:	2000f002 	andcs	pc, r0, r2
 80151ec:	20000014 	andcs	r0, r0, r4, lsl r0
 80151f0:	2000931c 	andcs	r9, r0, ip, lsl r3
 80151f4:	20009318 	andcs	r9, r0, r8, lsl r3
 80151f8:	0801d54b 	stmdaeq	r1, {r0, r1, r3, r6, r8, sl, ip, lr, pc}
 80151fc:	0801d571 	stmdaeq	r1, {r0, r4, r5, r6, r8, sl, ip, lr, pc}
 8015200:	20009324 	andcs	r9, r0, r4, lsr #6
 8015204:	20009320 	andcs	r9, r0, r0, lsr #6

08015208 <strlen>:
 8015208:	4603      	mov	r3, r0
 801520a:	461a      	mov	r2, r3
 801520c:	3301      	adds	r3, #1
 801520e:	7811      	ldrb	r1, [r2, #0]
 8015210:	2900      	cmp	r1, #0
 8015212:	d1fa      	bne.n	801520a <strlen+0x2>
 8015214:	1a10      	subs	r0, r2, r0
 8015216:	4770      	bx	lr

08015218 <strcmp>:
 8015218:	1e43      	subs	r3, r0, #1
 801521a:	3901      	subs	r1, #1
 801521c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8015220:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015224:	4290      	cmp	r0, r2
 8015226:	d001      	beq.n	801522c <strcmp+0x14>
 8015228:	1a80      	subs	r0, r0, r2
 801522a:	e001      	b.n	8015230 <strcmp+0x18>
 801522c:	2800      	cmp	r0, #0
 801522e:	d1f5      	bne.n	801521c <strcmp+0x4>
 8015230:	4770      	bx	lr

08015232 <strcpy.isra.0>:
 8015232:	3801      	subs	r0, #1
 8015234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015238:	f800 3f01 	strb.w	r3, [r0, #1]!
 801523c:	2b00      	cmp	r3, #0
 801523e:	d1f9      	bne.n	8015234 <strcpy.isra.0+0x2>
 8015240:	4770      	bx	lr

08015242 <strcat.isra.0>:
 8015242:	b513      	push	{r0, r1, r4, lr}
 8015244:	4604      	mov	r4, r0
 8015246:	9101      	str	r1, [sp, #4]
 8015248:	f7ff ffde 	bl	8015208 <strlen>
 801524c:	9901      	ldr	r1, [sp, #4]
 801524e:	4420      	add	r0, r4
 8015250:	b002      	add	sp, #8
 8015252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015256:	f7ff bfec 	b.w	8015232 <strcpy.isra.0>
	...

0801525c <MDNS::MDNS()>:
 801525c:	b513      	push	{r0, r1, r4, lr}
 801525e:	4604      	mov	r4, r0
 8015260:	a901      	add	r1, sp, #4
 8015262:	4804      	ldr	r0, [pc, #16]	; (8015274 <MDNS::MDNS()+0x18>)
 8015264:	f003 f85a 	bl	801831c <inet_aton>
 8015268:	4b03      	ldr	r3, [pc, #12]	; (8015278 <MDNS::MDNS()+0x1c>)
 801526a:	9a01      	ldr	r2, [sp, #4]
 801526c:	601a      	str	r2, [r3, #0]
 801526e:	4620      	mov	r0, r4
 8015270:	b002      	add	sp, #8
 8015272:	bd10      	pop	{r4, pc}
 8015274:	0801d5a2 	stmdaeq	r1, {r1, r5, r7, r8, sl, ip, lr, pc}
 8015278:	2000f5d8 	ldrdcs	pc, [r0], -r8

0801527c <MDNS::SetName(char const*)>:
 801527c:	b538      	push	{r3, r4, r5, lr}
 801527e:	4d0b      	ldr	r5, [pc, #44]	; (80152ac <MDNS::SetName(char const*)+0x30>)
 8015280:	6828      	ldr	r0, [r5, #0]
 8015282:	460c      	mov	r4, r1
 8015284:	b108      	cbz	r0, 801528a <MDNS::SetName(char const*)+0xe>
 8015286:	f003 f843 	bl	8018310 <operator delete[](void*)>
 801528a:	4620      	mov	r0, r4
 801528c:	f7ff ffbc 	bl	8015208 <strlen>
 8015290:	3007      	adds	r0, #7
 8015292:	f003 f841 	bl	8018318 <operator new[](unsigned int)>
 8015296:	4621      	mov	r1, r4
 8015298:	6028      	str	r0, [r5, #0]
 801529a:	f7ff ffca 	bl	8015232 <strcpy.isra.0>
 801529e:	6828      	ldr	r0, [r5, #0]
 80152a0:	4903      	ldr	r1, [pc, #12]	; (80152b0 <MDNS::SetName(char const*)+0x34>)
 80152a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80152a6:	f7ff bfcc 	b.w	8015242 <strcat.isra.0>
 80152aa:	bf00      	nop
 80152ac:	2000fa08 	andcs	pc, r0, r8, lsl #20
 80152b0:	0801d5b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, sl, ip, lr, pc}

080152b4 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 80152b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152b8:	f04f 0e00 	mov.w	lr, #0
 80152bc:	4e1c      	ldr	r6, [pc, #112]	; (8015330 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 80152be:	4f1d      	ldr	r7, [pc, #116]	; (8015334 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 80152c0:	4675      	mov	r5, lr
 80152c2:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 80152c6:	780b      	ldrb	r3, [r1, #0]
 80152c8:	1c68      	adds	r0, r5, #1
 80152ca:	b913      	cbnz	r3, 80152d2 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 80152cc:	7013      	strb	r3, [r2, #0]
 80152ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152d2:	2b3f      	cmp	r3, #63	; 0x3f
 80152d4:	d91c      	bls.n	8015310 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 80152d6:	7849      	ldrb	r1, [r1, #1]
 80152d8:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 80152dc:	430b      	orrs	r3, r1
 80152de:	6839      	ldr	r1, [r7, #0]
 80152e0:	5ccc      	ldrb	r4, [r1, r3]
 80152e2:	3301      	adds	r3, #1
 80152e4:	4419      	add	r1, r3
 80152e6:	f1be 0f00 	cmp.w	lr, #0
 80152ea:	bf08      	it	eq
 80152ec:	4605      	moveq	r5, r0
 80152ee:	2300      	movs	r3, #0
 80152f0:	42a3      	cmp	r3, r4
 80152f2:	5cc8      	ldrb	r0, [r1, r3]
 80152f4:	d309      	bcc.n	801530a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 80152f6:	4421      	add	r1, r4
 80152f8:	f04f 0e01 	mov.w	lr, #1
 80152fc:	4414      	add	r4, r2
 80152fe:	780b      	ldrb	r3, [r1, #0]
 8015300:	b10b      	cbz	r3, 8015306 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 8015302:	f804 cb01 	strb.w	ip, [r4], #1
 8015306:	4622      	mov	r2, r4
 8015308:	e7dd      	b.n	80152c6 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 801530a:	54d0      	strb	r0, [r2, r3]
 801530c:	3301      	adds	r3, #1
 801530e:	e7ef      	b.n	80152f0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 8015310:	4688      	mov	r8, r1
 8015312:	18d4      	adds	r4, r2, r3
 8015314:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8015318:	f802 9b01 	strb.w	r9, [r2], #1
 801531c:	4294      	cmp	r4, r2
 801531e:	d1f9      	bne.n	8015314 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 8015320:	1c5a      	adds	r2, r3, #1
 8015322:	4411      	add	r1, r2
 8015324:	f1be 0f00 	cmp.w	lr, #0
 8015328:	d1e9      	bne.n	80152fe <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 801532a:	181d      	adds	r5, r3, r0
 801532c:	e7e7      	b.n	80152fe <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 801532e:	bf00      	nop
 8015330:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 8015334:	2000fa0c 	andcs	pc, r0, ip, lsl #20

08015338 <MDNS::FindFirstDotFromRight(char const*) const>:
 8015338:	b510      	push	{r4, lr}
 801533a:	4608      	mov	r0, r1
 801533c:	460c      	mov	r4, r1
 801533e:	f7ff ff63 	bl	8015208 <strlen>
 8015342:	4420      	add	r0, r4
 8015344:	42a0      	cmp	r0, r4
 8015346:	d903      	bls.n	8015350 <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 8015348:	f810 3901 	ldrb.w	r3, [r0], #-1
 801534c:	2b2e      	cmp	r3, #46	; 0x2e
 801534e:	d1f9      	bne.n	8015344 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 8015350:	3001      	adds	r0, #1
 8015352:	bd10      	pop	{r4, pc}

08015354 <MDNS::WriteDnsName(char const*, char*, bool)>:
 8015354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015356:	4610      	mov	r0, r2
 8015358:	1c44      	adds	r4, r0, #1
 801535a:	460f      	mov	r7, r1
 801535c:	463d      	mov	r5, r7
 801535e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8015362:	b946      	cbnz	r6, 8015376 <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 8015364:	1a69      	subs	r1, r5, r1
 8015366:	7001      	strb	r1, [r0, #0]
 8015368:	7829      	ldrb	r1, [r5, #0]
 801536a:	b949      	cbnz	r1, 8015380 <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 801536c:	b10b      	cbz	r3, 8015372 <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 801536e:	f804 1b01 	strb.w	r1, [r4], #1
 8015372:	1aa0      	subs	r0, r4, r2
 8015374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015376:	2e2e      	cmp	r6, #46	; 0x2e
 8015378:	d0f4      	beq.n	8015364 <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 801537a:	f804 6b01 	strb.w	r6, [r4], #1
 801537e:	e7ed      	b.n	801535c <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 8015380:	1c69      	adds	r1, r5, #1
 8015382:	4620      	mov	r0, r4
 8015384:	e7e8      	b.n	8015358 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

08015388 <MDNS::CreateAnswerLocalIpAddress()>:
 8015388:	b510      	push	{r4, lr}
 801538a:	4c10      	ldr	r4, [pc, #64]	; (80153cc <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 801538c:	4910      	ldr	r1, [pc, #64]	; (80153d0 <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 801538e:	2384      	movs	r3, #132	; 0x84
 8015390:	80e3      	strh	r3, [r4, #6]
 8015392:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015396:	2300      	movs	r3, #0
 8015398:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801539c:	6809      	ldr	r1, [r1, #0]
 801539e:	f104 0210 	add.w	r2, r4, #16
 80153a2:	2301      	movs	r3, #1
 80153a4:	f7ff ffd6 	bl	8015354 <MDNS::WriteDnsName(char const*, char*, bool)>
 80153a8:	490a      	ldr	r1, [pc, #40]	; (80153d4 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 80153aa:	5011      	str	r1, [r2, r0]
 80153ac:	1813      	adds	r3, r2, r0
 80153ae:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80153b2:	605a      	str	r2, [r3, #4]
 80153b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80153b8:	811a      	strh	r2, [r3, #8]
 80153ba:	4a07      	ldr	r2, [pc, #28]	; (80153d8 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 80153bc:	6812      	ldr	r2, [r2, #0]
 80153be:	6952      	ldr	r2, [r2, #20]
 80153c0:	f8c3 200a 	str.w	r2, [r3, #10]
 80153c4:	1b1b      	subs	r3, r3, r4
 80153c6:	330a      	adds	r3, #10
 80153c8:	6023      	str	r3, [r4, #0]
 80153ca:	bd10      	pop	{r4, pc}
 80153cc:	2000f5dc 	ldrdcs	pc, [r0], -ip
 80153d0:	2000fa08 	andcs	pc, r0, r8, lsl #20
 80153d4:	01800100 	orreq	r0, r0, r0, lsl #2
 80153d8:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

080153dc <MDNS::Start()>:
 80153dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80153de:	4c1d      	ldr	r4, [pc, #116]	; (8015454 <MDNS::Start()+0x78>)
 80153e0:	4e1d      	ldr	r6, [pc, #116]	; (8015458 <MDNS::Start()+0x7c>)
 80153e2:	4f1e      	ldr	r7, [pc, #120]	; (801545c <MDNS::Start()+0x80>)
 80153e4:	f241 41e9 	movw	r1, #5353	; 0x14e9
 80153e8:	4605      	mov	r5, r0
 80153ea:	6820      	ldr	r0, [r4, #0]
 80153ec:	f000 fb2c 	bl	8015a48 <Network::Begin(unsigned short)>
 80153f0:	683a      	ldr	r2, [r7, #0]
 80153f2:	6030      	str	r0, [r6, #0]
 80153f4:	4601      	mov	r1, r0
 80153f6:	6820      	ldr	r0, [r4, #0]
 80153f8:	f000 fb37 	bl	8015a6a <Network::JoinGroup(int, unsigned int)>
 80153fc:	4b18      	ldr	r3, [pc, #96]	; (8015460 <MDNS::Start()+0x84>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	b923      	cbnz	r3, 801540c <MDNS::Start()+0x30>
 8015402:	6821      	ldr	r1, [r4, #0]
 8015404:	4628      	mov	r0, r5
 8015406:	3120      	adds	r1, #32
 8015408:	f7ff ff38 	bl	801527c <MDNS::SetName(char const*)>
 801540c:	4628      	mov	r0, r5
 801540e:	f7ff ffbb 	bl	8015388 <MDNS::CreateAnswerLocalIpAddress()>
 8015412:	4914      	ldr	r1, [pc, #80]	; (8015464 <MDNS::Start()+0x88>)
 8015414:	7830      	ldrb	r0, [r6, #0]
 8015416:	f831 2b04 	ldrh.w	r2, [r1], #4
 801541a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801541e:	9300      	str	r3, [sp, #0]
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	f7ff fe41 	bl	80150a8 <udp_send>
 8015426:	6820      	ldr	r0, [r4, #0]
 8015428:	4c0f      	ldr	r4, [pc, #60]	; (8015468 <MDNS::Start()+0x8c>)
 801542a:	f100 0260 	add.w	r2, r0, #96	; 0x60
 801542e:	233f      	movs	r3, #63	; 0x3f
 8015430:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8015434:	b929      	cbnz	r1, 8015442 <MDNS::Start()+0x66>
 8015436:	4413      	add	r3, r2
 8015438:	429a      	cmp	r2, r3
 801543a:	d006      	beq.n	801544a <MDNS::Start()+0x6e>
 801543c:	f802 1b01 	strb.w	r1, [r2], #1
 8015440:	e7fa      	b.n	8015438 <MDNS::Start()+0x5c>
 8015442:	3b01      	subs	r3, #1
 8015444:	f802 1b01 	strb.w	r1, [r2], #1
 8015448:	d1f2      	bne.n	8015430 <MDNS::Start()+0x54>
 801544a:	2300      	movs	r3, #0
 801544c:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
 8015450:	b003      	add	sp, #12
 8015452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015454:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 8015458:	2000001c 	andcs	r0, r0, ip, lsl r0
 801545c:	2000f5d8 	ldrdcs	pc, [r0], -r8
 8015460:	2000fa08 	andcs	pc, r0, r8, lsl #20
 8015464:	2000f5dc 	ldrdcs	pc, [r0], -ip
 8015468:	0801d5b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, sl, ip, lr, pc}

0801546c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 801546c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801546e:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8015472:	4c1b      	ldr	r4, [pc, #108]	; (80154e0 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 8015474:	2300      	movs	r3, #0
 8015476:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 801547a:	f854 100c 	ldr.w	r1, [r4, ip]
 801547e:	4607      	mov	r7, r0
 8015480:	f7ff ff68 	bl	8015354 <MDNS::WriteDnsName(char const*, char*, bool)>
 8015484:	4616      	mov	r6, r2
 8015486:	7bac      	ldrb	r4, [r5, #14]
 8015488:	4916      	ldr	r1, [pc, #88]	; (80154e4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 801548a:	4402      	add	r2, r0
 801548c:	4816      	ldr	r0, [pc, #88]	; (80154e8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 801548e:	2301      	movs	r3, #1
 8015490:	429c      	cmp	r4, r3
 8015492:	bf18      	it	ne
 8015494:	4601      	movne	r1, r0
 8015496:	4638      	mov	r0, r7
 8015498:	f7ff ff5c 	bl	8015354 <MDNS::WriteDnsName(char const*, char*, bool)>
 801549c:	4b13      	ldr	r3, [pc, #76]	; (80154ec <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 801549e:	5013      	str	r3, [r2, r0]
 80154a0:	1814      	adds	r4, r2, r0
 80154a2:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80154a6:	6063      	str	r3, [r4, #4]
 80154a8:	4b11      	ldr	r3, [pc, #68]	; (80154f0 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 80154aa:	6819      	ldr	r1, [r3, #0]
 80154ac:	9101      	str	r1, [sp, #4]
 80154ae:	4608      	mov	r0, r1
 80154b0:	f7ff feaa 	bl	8015208 <strlen>
 80154b4:	f100 0308 	add.w	r3, r0, #8
 80154b8:	ba5b      	rev16	r3, r3
 80154ba:	8123      	strh	r3, [r4, #8]
 80154bc:	2300      	movs	r3, #0
 80154be:	f8c4 300a 	str.w	r3, [r4, #10]
 80154c2:	89ab      	ldrh	r3, [r5, #12]
 80154c4:	9901      	ldr	r1, [sp, #4]
 80154c6:	ba5b      	rev16	r3, r3
 80154c8:	81e3      	strh	r3, [r4, #14]
 80154ca:	f104 0210 	add.w	r2, r4, #16
 80154ce:	2301      	movs	r3, #1
 80154d0:	4638      	mov	r0, r7
 80154d2:	f7ff ff3f 	bl	8015354 <MDNS::WriteDnsName(char const*, char*, bool)>
 80154d6:	4410      	add	r0, r2
 80154d8:	1b80      	subs	r0, r0, r6
 80154da:	b003      	add	sp, #12
 80154dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154de:	bf00      	nop
 80154e0:	2000f7e0 	andcs	pc, r0, r0, ror #15
 80154e4:	0801d5ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 80154e8:	0801d5cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, sl, ip, lr, pc}
 80154ec:	01802100 	orreq	r2, r0, r0, lsl #2
 80154f0:	2000fa08 	andcs	pc, r0, r8, lsl #20

080154f4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 80154f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154f8:	4e19      	ldr	r6, [pc, #100]	; (8015560 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 80154fa:	010f      	lsls	r7, r1, #4
 80154fc:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8015500:	2300      	movs	r3, #0
 8015502:	59f1      	ldr	r1, [r6, r7]
 8015504:	4604      	mov	r4, r0
 8015506:	f7ff ff25 	bl	8015354 <MDNS::WriteDnsName(char const*, char*, bool)>
 801550a:	4690      	mov	r8, r2
 801550c:	7bae      	ldrb	r6, [r5, #14]
 801550e:	4915      	ldr	r1, [pc, #84]	; (8015564 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 8015510:	4402      	add	r2, r0
 8015512:	4815      	ldr	r0, [pc, #84]	; (8015568 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 8015514:	2301      	movs	r3, #1
 8015516:	429e      	cmp	r6, r3
 8015518:	bf18      	it	ne
 801551a:	4601      	movne	r1, r0
 801551c:	4620      	mov	r0, r4
 801551e:	f7ff ff19 	bl	8015354 <MDNS::WriteDnsName(char const*, char*, bool)>
 8015522:	4b12      	ldr	r3, [pc, #72]	; (801556c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 8015524:	5013      	str	r3, [r2, r0]
 8015526:	1816      	adds	r6, r2, r0
 8015528:	68a8      	ldr	r0, [r5, #8]
 801552a:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 801552e:	6073      	str	r3, [r6, #4]
 8015530:	f106 040b 	add.w	r4, r6, #11
 8015534:	b938      	cbnz	r0, 8015546 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 8015536:	f44f 7380 	mov.w	r3, #256	; 0x100
 801553a:	8133      	strh	r3, [r6, #8]
 801553c:	72b0      	strb	r0, [r6, #10]
 801553e:	eba4 0008 	sub.w	r0, r4, r8
 8015542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015546:	f7ff fe5f 	bl	8015208 <strlen>
 801554a:	1c43      	adds	r3, r0, #1
 801554c:	72b0      	strb	r0, [r6, #10]
 801554e:	ba5b      	rev16	r3, r3
 8015550:	4607      	mov	r7, r0
 8015552:	68a9      	ldr	r1, [r5, #8]
 8015554:	8133      	strh	r3, [r6, #8]
 8015556:	4620      	mov	r0, r4
 8015558:	f7ff fe6b 	bl	8015232 <strcpy.isra.0>
 801555c:	443c      	add	r4, r7
 801555e:	e7ee      	b.n	801553e <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 8015560:	2000f7e0 	andcs	pc, r0, r0, ror #15
 8015564:	0801d5ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8015568:	0801d5cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, sl, ip, lr, pc}
 801556c:	01801000 	orreq	r1, r0, r0

08015570 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 8015570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015574:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80155e8 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x78>
 8015578:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 801557c:	ea4f 1901 	mov.w	r9, r1, lsl #4
 8015580:	2301      	movs	r3, #1
 8015582:	6869      	ldr	r1, [r5, #4]
 8015584:	4607      	mov	r7, r0
 8015586:	f7ff fee5 	bl	8015354 <MDNS::WriteDnsName(char const*, char*, bool)>
 801558a:	f858 1009 	ldr.w	r1, [r8, r9]
 801558e:	4b13      	ldr	r3, [pc, #76]	; (80155dc <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 8015590:	5013      	str	r3, [r2, r0]
 8015592:	1816      	adds	r6, r2, r0
 8015594:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8015598:	6073      	str	r3, [r6, #4]
 801559a:	4608      	mov	r0, r1
 801559c:	4614      	mov	r4, r2
 801559e:	9101      	str	r1, [sp, #4]
 80155a0:	f7ff fe32 	bl	8015208 <strlen>
 80155a4:	f100 030d 	add.w	r3, r0, #13
 80155a8:	ba5b      	rev16	r3, r3
 80155aa:	9901      	ldr	r1, [sp, #4]
 80155ac:	8133      	strh	r3, [r6, #8]
 80155ae:	f106 020a 	add.w	r2, r6, #10
 80155b2:	2300      	movs	r3, #0
 80155b4:	4638      	mov	r0, r7
 80155b6:	f7ff fecd 	bl	8015354 <MDNS::WriteDnsName(char const*, char*, bool)>
 80155ba:	7bad      	ldrb	r5, [r5, #14]
 80155bc:	4908      	ldr	r1, [pc, #32]	; (80155e0 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 80155be:	4402      	add	r2, r0
 80155c0:	4808      	ldr	r0, [pc, #32]	; (80155e4 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 80155c2:	2301      	movs	r3, #1
 80155c4:	429d      	cmp	r5, r3
 80155c6:	bf18      	it	ne
 80155c8:	4601      	movne	r1, r0
 80155ca:	4638      	mov	r0, r7
 80155cc:	f7ff fec2 	bl	8015354 <MDNS::WriteDnsName(char const*, char*, bool)>
 80155d0:	4410      	add	r0, r2
 80155d2:	1b00      	subs	r0, r0, r4
 80155d4:	b003      	add	sp, #12
 80155d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80155da:	bf00      	nop
 80155dc:	01000c00 	tsteq	r0, r0, lsl #24
 80155e0:	0801d5ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 80155e4:	0801d5cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, sl, ip, lr, pc}
 80155e8:	2000f7e0 	andcs	pc, r0, r0, ror #15

080155ec <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 80155ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80155ee:	2301      	movs	r3, #1
 80155f0:	460f      	mov	r7, r1
 80155f2:	4910      	ldr	r1, [pc, #64]	; (8015634 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 80155f4:	4606      	mov	r6, r0
 80155f6:	f7ff fead 	bl	8015354 <MDNS::WriteDnsName(char const*, char*, bool)>
 80155fa:	490f      	ldr	r1, [pc, #60]	; (8015638 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 80155fc:	4b0f      	ldr	r3, [pc, #60]	; (801563c <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x50>)
 80155fe:	5013      	str	r3, [r2, r0]
 8015600:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8015604:	1815      	adds	r5, r2, r0
 8015606:	6849      	ldr	r1, [r1, #4]
 8015608:	9101      	str	r1, [sp, #4]
 801560a:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 801560e:	606b      	str	r3, [r5, #4]
 8015610:	4608      	mov	r0, r1
 8015612:	4614      	mov	r4, r2
 8015614:	f7ff fdf8 	bl	8015208 <strlen>
 8015618:	1c83      	adds	r3, r0, #2
 801561a:	ba5b      	rev16	r3, r3
 801561c:	812b      	strh	r3, [r5, #8]
 801561e:	f105 020a 	add.w	r2, r5, #10
 8015622:	9901      	ldr	r1, [sp, #4]
 8015624:	2301      	movs	r3, #1
 8015626:	4630      	mov	r0, r6
 8015628:	f7ff fe94 	bl	8015354 <MDNS::WriteDnsName(char const*, char*, bool)>
 801562c:	4410      	add	r0, r2
 801562e:	1b00      	subs	r0, r0, r4
 8015630:	b003      	add	sp, #12
 8015632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015634:	0801d5b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, sl, ip, lr, pc}
 8015638:	2000f7e0 	andcs	pc, r0, r0, ror #15
 801563c:	01000c00 	tsteq	r0, r0, lsl #24

08015640 <MDNS::CreateMDNSMessage(unsigned int)>:
 8015640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015642:	4d1a      	ldr	r5, [pc, #104]	; (80156ac <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 8015644:	2384      	movs	r3, #132	; 0x84
 8015646:	80eb      	strh	r3, [r5, #6]
 8015648:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801564c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015650:	f105 0410 	add.w	r4, r5, #16
 8015654:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8015658:	4622      	mov	r2, r4
 801565a:	4606      	mov	r6, r0
 801565c:	460f      	mov	r7, r1
 801565e:	f7ff ff05 	bl	801546c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 8015662:	4404      	add	r4, r0
 8015664:	4622      	mov	r2, r4
 8015666:	4639      	mov	r1, r7
 8015668:	4630      	mov	r0, r6
 801566a:	f7ff ff43 	bl	80154f4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 801566e:	4404      	add	r4, r0
 8015670:	4622      	mov	r2, r4
 8015672:	4639      	mov	r1, r7
 8015674:	4630      	mov	r0, r6
 8015676:	f7ff ffb9 	bl	80155ec <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 801567a:	4404      	add	r4, r0
 801567c:	4622      	mov	r2, r4
 801567e:	4639      	mov	r1, r7
 8015680:	4630      	mov	r0, r6
 8015682:	f7ff ff75 	bl	8015570 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 8015686:	4a0a      	ldr	r2, [pc, #40]	; (80156b0 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 8015688:	f852 3b10 	ldr.w	r3, [r2], #16
 801568c:	4420      	add	r0, r4
 801568e:	3b0c      	subs	r3, #12
 8015690:	1e44      	subs	r4, r0, #1
 8015692:	4619      	mov	r1, r3
 8015694:	3901      	subs	r1, #1
 8015696:	d204      	bcs.n	80156a2 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 8015698:	18c4      	adds	r4, r0, r3
 801569a:	4b06      	ldr	r3, [pc, #24]	; (80156b4 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 801569c:	1ae4      	subs	r4, r4, r3
 801569e:	602c      	str	r4, [r5, #0]
 80156a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156a2:	f812 6b01 	ldrb.w	r6, [r2], #1
 80156a6:	f804 6f01 	strb.w	r6, [r4, #1]!
 80156aa:	e7f3      	b.n	8015694 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 80156ac:	2000f804 	andcs	pc, r0, r4, lsl #16
 80156b0:	2000f5dc 	ldrdcs	pc, [r0], -ip
 80156b4:	2000f808 	andcs	pc, r0, r8, lsl #16

080156b8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 80156b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156bc:	4d41      	ldr	r5, [pc, #260]	; (80157c4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 80156be:	b085      	sub	sp, #20
 80156c0:	682c      	ldr	r4, [r5, #0]
 80156c2:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 80156c6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80156ca:	4607      	mov	r7, r0
 80156cc:	4616      	mov	r6, r2
 80156ce:	b11c      	cbz	r4, 80156d8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x20>
 80156d0:	692a      	ldr	r2, [r5, #16]
 80156d2:	2a00      	cmp	r2, #0
 80156d4:	d172      	bne.n	80157bc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x104>
 80156d6:	2401      	movs	r4, #1
 80156d8:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 80156dc:	ea4f 1804 	mov.w	r8, r4, lsl #4
 80156e0:	8193      	strh	r3, [r2, #12]
 80156e2:	f882 a00e 	strb.w	sl, [r2, #14]
 80156e6:	2900      	cmp	r1, #0
 80156e8:	d158      	bne.n	801579c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xe4>
 80156ea:	4b37      	ldr	r3, [pc, #220]	; (80157c8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 80156ec:	6818      	ldr	r0, [r3, #0]
 80156ee:	3020      	adds	r0, #32
 80156f0:	f7ff fd8a 	bl	8015208 <strlen>
 80156f4:	4683      	mov	fp, r0
 80156f6:	4630      	mov	r0, r6
 80156f8:	f7ff fd86 	bl	8015208 <strlen>
 80156fc:	4458      	add	r0, fp
 80156fe:	3001      	adds	r0, #1
 8015700:	f002 fe0a 	bl	8018318 <operator new[](unsigned int)>
 8015704:	4b30      	ldr	r3, [pc, #192]	; (80157c8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 8015706:	f845 0008 	str.w	r0, [r5, r8]
 801570a:	6819      	ldr	r1, [r3, #0]
 801570c:	3120      	adds	r1, #32
 801570e:	f7ff fd90 	bl	8015232 <strcpy.isra.0>
 8015712:	f855 0008 	ldr.w	r0, [r5, r8]
 8015716:	4631      	mov	r1, r6
 8015718:	f7ff fd93 	bl	8015242 <strcat.isra.0>
 801571c:	4631      	mov	r1, r6
 801571e:	4638      	mov	r0, r7
 8015720:	f7ff fe0a 	bl	8015338 <MDNS::FindFirstDotFromRight(char const*) const>
 8015724:	9003      	str	r0, [sp, #12]
 8015726:	f7ff fd6f 	bl	8015208 <strlen>
 801572a:	300d      	adds	r0, #13
 801572c:	f002 fdf4 	bl	8018318 <operator new[](unsigned int)>
 8015730:	eb05 0b08 	add.w	fp, r5, r8
 8015734:	9903      	ldr	r1, [sp, #12]
 8015736:	f8cb 0004 	str.w	r0, [fp, #4]
 801573a:	f7ff fd7a 	bl	8015232 <strcpy.isra.0>
 801573e:	4923      	ldr	r1, [pc, #140]	; (80157cc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 8015740:	f8db 0004 	ldr.w	r0, [fp, #4]
 8015744:	f7ff fd7d 	bl	8015242 <strcat.isra.0>
 8015748:	4921      	ldr	r1, [pc, #132]	; (80157d0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 801574a:	4b22      	ldr	r3, [pc, #136]	; (80157d4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 801574c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8015750:	f1ba 0f01 	cmp.w	sl, #1
 8015754:	bf18      	it	ne
 8015756:	4619      	movne	r1, r3
 8015758:	f7ff fd73 	bl	8015242 <strcat.isra.0>
 801575c:	f1b9 0f00 	cmp.w	r9, #0
 8015760:	d00a      	beq.n	8015778 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xc0>
 8015762:	4648      	mov	r0, r9
 8015764:	f7ff fd50 	bl	8015208 <strlen>
 8015768:	3001      	adds	r0, #1
 801576a:	f002 fdd5 	bl	8018318 <operator new[](unsigned int)>
 801576e:	4649      	mov	r1, r9
 8015770:	f8cb 0008 	str.w	r0, [fp, #8]
 8015774:	f7ff fd5d 	bl	8015232 <strcpy.isra.0>
 8015778:	4621      	mov	r1, r4
 801577a:	4638      	mov	r0, r7
 801577c:	f7ff ff60 	bl	8015640 <MDNS::CreateMDNSMessage(unsigned int)>
 8015780:	4915      	ldr	r1, [pc, #84]	; (80157d8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 8015782:	4816      	ldr	r0, [pc, #88]	; (80157dc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 8015784:	f831 2b04 	ldrh.w	r2, [r1], #4
 8015788:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801578c:	9300      	str	r3, [sp, #0]
 801578e:	4b14      	ldr	r3, [pc, #80]	; (80157e0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x128>)
 8015790:	7800      	ldrb	r0, [r0, #0]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	f7ff fc88 	bl	80150a8 <udp_send>
 8015798:	2001      	movs	r0, #1
 801579a:	e010      	b.n	80157be <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x106>
 801579c:	4608      	mov	r0, r1
 801579e:	9103      	str	r1, [sp, #12]
 80157a0:	f7ff fd32 	bl	8015208 <strlen>
 80157a4:	4683      	mov	fp, r0
 80157a6:	4630      	mov	r0, r6
 80157a8:	f7ff fd2e 	bl	8015208 <strlen>
 80157ac:	4458      	add	r0, fp
 80157ae:	3001      	adds	r0, #1
 80157b0:	f002 fdb2 	bl	8018318 <operator new[](unsigned int)>
 80157b4:	9903      	ldr	r1, [sp, #12]
 80157b6:	f845 0008 	str.w	r0, [r5, r8]
 80157ba:	e7a8      	b.n	801570e <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x56>
 80157bc:	2000      	movs	r0, #0
 80157be:	b005      	add	sp, #20
 80157c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157c4:	2000f7e0 	andcs	pc, r0, r0, ror #15
 80157c8:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 80157cc:	0801b02b 	stmdaeq	r1, {r0, r1, r3, r5, ip, sp, pc}
 80157d0:	0801d5ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 80157d4:	0801d5cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, sl, ip, lr, pc}
 80157d8:	2000f804 	andcs	pc, r0, r4, lsl #16
 80157dc:	2000001c 	andcs	r0, r0, ip, lsl r0
 80157e0:	2000f5d8 	ldrdcs	pc, [r0], -r8

080157e4 <MDNS::HandleRequest(unsigned short)>:
 80157e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e8:	b0c5      	sub	sp, #276	; 0x114
 80157ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80158d0 <MDNS::HandleRequest(unsigned short)+0xec>
 80157ee:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 80158d4 <MDNS::HandleRequest(unsigned short)+0xf0>
 80157f2:	9103      	str	r1, [sp, #12]
 80157f4:	4605      	mov	r5, r0
 80157f6:	2700      	movs	r7, #0
 80157f8:	f04f 080c 	mov.w	r8, #12
 80157fc:	9b03      	ldr	r3, [sp, #12]
 80157fe:	42bb      	cmp	r3, r7
 8015800:	d802      	bhi.n	8015808 <MDNS::HandleRequest(unsigned short)+0x24>
 8015802:	b045      	add	sp, #276	; 0x114
 8015804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015808:	f8da 1000 	ldr.w	r1, [sl]
 801580c:	aa04      	add	r2, sp, #16
 801580e:	4441      	add	r1, r8
 8015810:	4628      	mov	r0, r5
 8015812:	f7ff fd4f 	bl	80152b4 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8015816:	f8da 2000 	ldr.w	r2, [sl]
 801581a:	4440      	add	r0, r8
 801581c:	1813      	adds	r3, r2, r0
 801581e:	f100 0804 	add.w	r8, r0, #4
 8015822:	885b      	ldrh	r3, [r3, #2]
 8015824:	ba5b      	rev16	r3, r3
 8015826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801582a:	2b01      	cmp	r3, #1
 801582c:	d13d      	bne.n	80158aa <MDNS::HandleRequest(unsigned short)+0xc6>
 801582e:	5a14      	ldrh	r4, [r2, r0]
 8015830:	4b20      	ldr	r3, [pc, #128]	; (80158b4 <MDNS::HandleRequest(unsigned short)+0xd0>)
 8015832:	ba64      	rev16	r4, r4
 8015834:	6818      	ldr	r0, [r3, #0]
 8015836:	a904      	add	r1, sp, #16
 8015838:	b2a4      	uxth	r4, r4
 801583a:	f7ff fced 	bl	8015218 <strcmp>
 801583e:	b968      	cbnz	r0, 801585c <MDNS::HandleRequest(unsigned short)+0x78>
 8015840:	2c01      	cmp	r4, #1
 8015842:	d10b      	bne.n	801585c <MDNS::HandleRequest(unsigned short)+0x78>
 8015844:	491c      	ldr	r1, [pc, #112]	; (80158b8 <MDNS::HandleRequest(unsigned short)+0xd4>)
 8015846:	481d      	ldr	r0, [pc, #116]	; (80158bc <MDNS::HandleRequest(unsigned short)+0xd8>)
 8015848:	f831 2b04 	ldrh.w	r2, [r1], #4
 801584c:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8015850:	9300      	str	r3, [sp, #0]
 8015852:	4b1b      	ldr	r3, [pc, #108]	; (80158c0 <MDNS::HandleRequest(unsigned short)+0xdc>)
 8015854:	7800      	ldrb	r0, [r0, #0]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	f7ff fc26 	bl	80150a8 <udp_send>
 801585c:	4819      	ldr	r0, [pc, #100]	; (80158c4 <MDNS::HandleRequest(unsigned short)+0xe0>)
 801585e:	4e1a      	ldr	r6, [pc, #104]	; (80158c8 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8015860:	a904      	add	r1, sp, #16
 8015862:	f7ff fcd9 	bl	8015218 <strcmp>
 8015866:	f04f 0900 	mov.w	r9, #0
 801586a:	9002      	str	r0, [sp, #8]
 801586c:	6833      	ldr	r3, [r6, #0]
 801586e:	b1c3      	cbz	r3, 80158a2 <MDNS::HandleRequest(unsigned short)+0xbe>
 8015870:	9b02      	ldr	r3, [sp, #8]
 8015872:	b123      	cbz	r3, 801587e <MDNS::HandleRequest(unsigned short)+0x9a>
 8015874:	6870      	ldr	r0, [r6, #4]
 8015876:	a904      	add	r1, sp, #16
 8015878:	f7ff fcce 	bl	8015218 <strcmp>
 801587c:	b988      	cbnz	r0, 80158a2 <MDNS::HandleRequest(unsigned short)+0xbe>
 801587e:	2c0c      	cmp	r4, #12
 8015880:	d10f      	bne.n	80158a2 <MDNS::HandleRequest(unsigned short)+0xbe>
 8015882:	4649      	mov	r1, r9
 8015884:	4628      	mov	r0, r5
 8015886:	f7ff fedb 	bl	8015640 <MDNS::CreateMDNSMessage(unsigned int)>
 801588a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801588e:	9300      	str	r3, [sp, #0]
 8015890:	480a      	ldr	r0, [pc, #40]	; (80158bc <MDNS::HandleRequest(unsigned short)+0xd8>)
 8015892:	4b0b      	ldr	r3, [pc, #44]	; (80158c0 <MDNS::HandleRequest(unsigned short)+0xdc>)
 8015894:	f8bb 2000 	ldrh.w	r2, [fp]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	490c      	ldr	r1, [pc, #48]	; (80158cc <MDNS::HandleRequest(unsigned short)+0xe8>)
 801589c:	7800      	ldrb	r0, [r0, #0]
 801589e:	f7ff fc03 	bl	80150a8 <udp_send>
 80158a2:	3610      	adds	r6, #16
 80158a4:	f1b9 0f00 	cmp.w	r9, #0
 80158a8:	d001      	beq.n	80158ae <MDNS::HandleRequest(unsigned short)+0xca>
 80158aa:	3701      	adds	r7, #1
 80158ac:	e7a6      	b.n	80157fc <MDNS::HandleRequest(unsigned short)+0x18>
 80158ae:	f04f 0901 	mov.w	r9, #1
 80158b2:	e7db      	b.n	801586c <MDNS::HandleRequest(unsigned short)+0x88>
 80158b4:	2000fa08 	andcs	pc, r0, r8, lsl #20
 80158b8:	2000f5dc 	ldrdcs	pc, [r0], -ip
 80158bc:	2000001c 	andcs	r0, r0, ip, lsl r0
 80158c0:	2000f5d8 	ldrdcs	pc, [r0], -r8
 80158c4:	0801d5b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, sl, ip, lr, pc}
 80158c8:	2000f7e0 	andcs	pc, r0, r0, ror #15
 80158cc:	2000f808 	andcs	pc, r0, r8, lsl #16
 80158d0:	2000fa0c 	andcs	pc, r0, ip, lsl #20
 80158d4:	2000f804 	andcs	pc, r0, r4, lsl #16

080158d8 <MDNS::Parse()>:
 80158d8:	4b08      	ldr	r3, [pc, #32]	; (80158fc <MDNS::Parse()+0x24>)
 80158da:	681a      	ldr	r2, [r3, #0]
 80158dc:	8853      	ldrh	r3, [r2, #2]
 80158de:	ba5b      	rev16	r3, r3
 80158e0:	b299      	uxth	r1, r3
 80158e2:	041b      	lsls	r3, r3, #16
 80158e4:	d408      	bmi.n	80158f8 <MDNS::Parse()+0x20>
 80158e6:	0b89      	lsrs	r1, r1, #14
 80158e8:	d106      	bne.n	80158f8 <MDNS::Parse()+0x20>
 80158ea:	8891      	ldrh	r1, [r2, #4]
 80158ec:	b28b      	uxth	r3, r1
 80158ee:	b11b      	cbz	r3, 80158f8 <MDNS::Parse()+0x20>
 80158f0:	ba49      	rev16	r1, r1
 80158f2:	b289      	uxth	r1, r1
 80158f4:	f7ff bf76 	b.w	80157e4 <MDNS::HandleRequest(unsigned short)>
 80158f8:	4770      	bx	lr
 80158fa:	bf00      	nop
 80158fc:	2000fa0c 	andcs	pc, r0, ip, lsl #20

08015900 <MDNS::Run()>:
 8015900:	b538      	push	{r3, r4, r5, lr}
 8015902:	4d0c      	ldr	r5, [pc, #48]	; (8015934 <MDNS::Run()+0x34>)
 8015904:	490c      	ldr	r1, [pc, #48]	; (8015938 <MDNS::Run()+0x38>)
 8015906:	4a0d      	ldr	r2, [pc, #52]	; (801593c <MDNS::Run()+0x3c>)
 8015908:	4604      	mov	r4, r0
 801590a:	480d      	ldr	r0, [pc, #52]	; (8015940 <MDNS::Run()+0x40>)
 801590c:	462b      	mov	r3, r5
 801590e:	7800      	ldrb	r0, [r0, #0]
 8015910:	f7ff fba4 	bl	801505c <udp_recv2>
 8015914:	4b0b      	ldr	r3, [pc, #44]	; (8015944 <MDNS::Run()+0x44>)
 8015916:	8829      	ldrh	r1, [r5, #0]
 8015918:	8018      	strh	r0, [r3, #0]
 801591a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801591e:	4299      	cmp	r1, r3
 8015920:	d106      	bne.n	8015930 <MDNS::Run()+0x30>
 8015922:	280c      	cmp	r0, #12
 8015924:	d904      	bls.n	8015930 <MDNS::Run()+0x30>
 8015926:	4620      	mov	r0, r4
 8015928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801592c:	f7ff bfd4 	b.w	80158d8 <MDNS::Parse()>
 8015930:	bd38      	pop	{r3, r4, r5, pc}
 8015932:	bf00      	nop
 8015934:	2000f5d4 	ldrdcs	pc, [r0], -r4
 8015938:	2000fa0c 	andcs	pc, r0, ip, lsl #20
 801593c:	2000f5d0 	ldrdcs	pc, [r0], -r0
 8015940:	2000001c 	andcs	r0, r0, ip, lsl r0
 8015944:	2000f800 	andcs	pc, r0, r0, lsl #16

08015948 <MDNS::Print()>:
 8015948:	b510      	push	{r4, lr}
 801594a:	4816      	ldr	r0, [pc, #88]	; (80159a4 <MDNS::Print()+0x5c>)
 801594c:	f7f4 fe0e 	bl	800a56c <printf>
 8015950:	4b15      	ldr	r3, [pc, #84]	; (80159a8 <MDNS::Print()+0x60>)
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	3301      	adds	r3, #1
 8015956:	d104      	bne.n	8015962 <MDNS::Print()+0x1a>
 8015958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801595c:	4813      	ldr	r0, [pc, #76]	; (80159ac <MDNS::Print()+0x64>)
 801595e:	f7f4 be05 	b.w	800a56c <printf>
 8015962:	4b13      	ldr	r3, [pc, #76]	; (80159b0 <MDNS::Print()+0x68>)
 8015964:	4c13      	ldr	r4, [pc, #76]	; (80159b4 <MDNS::Print()+0x6c>)
 8015966:	6819      	ldr	r1, [r3, #0]
 8015968:	4813      	ldr	r0, [pc, #76]	; (80159b8 <MDNS::Print()+0x70>)
 801596a:	f7f4 fdff 	bl	800a56c <printf>
 801596e:	6823      	ldr	r3, [r4, #0]
 8015970:	b14b      	cbz	r3, 8015986 <MDNS::Print()+0x3e>
 8015972:	4a12      	ldr	r2, [pc, #72]	; (80159bc <MDNS::Print()+0x74>)
 8015974:	68a3      	ldr	r3, [r4, #8]
 8015976:	6861      	ldr	r1, [r4, #4]
 8015978:	4811      	ldr	r0, [pc, #68]	; (80159c0 <MDNS::Print()+0x78>)
 801597a:	2b00      	cmp	r3, #0
 801597c:	bf08      	it	eq
 801597e:	4613      	moveq	r3, r2
 8015980:	89a2      	ldrh	r2, [r4, #12]
 8015982:	f7f4 fdf3 	bl	800a56c <printf>
 8015986:	6923      	ldr	r3, [r4, #16]
 8015988:	b15b      	cbz	r3, 80159a2 <MDNS::Print()+0x5a>
 801598a:	69a3      	ldr	r3, [r4, #24]
 801598c:	4a0b      	ldr	r2, [pc, #44]	; (80159bc <MDNS::Print()+0x74>)
 801598e:	6961      	ldr	r1, [r4, #20]
 8015990:	480b      	ldr	r0, [pc, #44]	; (80159c0 <MDNS::Print()+0x78>)
 8015992:	2b00      	cmp	r3, #0
 8015994:	bf08      	it	eq
 8015996:	4613      	moveq	r3, r2
 8015998:	8ba2      	ldrh	r2, [r4, #28]
 801599a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801599e:	f7f4 bde5 	b.w	800a56c <printf>
 80159a2:	bd10      	pop	{r4, pc}
 80159a4:	0801d5d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, sl, ip, lr, pc}
 80159a8:	2000001c 	andcs	r0, r0, ip, lsl r0
 80159ac:	0801d5dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, sl, ip, lr, pc}
 80159b0:	2000fa08 	andcs	pc, r0, r8, lsl #20
 80159b4:	2000f7e0 	andcs	pc, r0, r0, ror #15
 80159b8:	0801d5ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r8, sl, ip, lr, pc}
 80159bc:	0801b399 	stmdaeq	r1, {r0, r3, r4, r7, r8, r9, ip, sp, pc}
 80159c0:	0801d5f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, sl, ip, lr, pc}

080159c4 <strncpy.constprop.0.isra.0>:
 80159c4:	3901      	subs	r1, #1
 80159c6:	233f      	movs	r3, #63	; 0x3f
 80159c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80159cc:	b92a      	cbnz	r2, 80159da <strncpy.constprop.0.isra.0+0x16>
 80159ce:	4403      	add	r3, r0
 80159d0:	4298      	cmp	r0, r3
 80159d2:	d006      	beq.n	80159e2 <strncpy.constprop.0.isra.0+0x1e>
 80159d4:	f800 2b01 	strb.w	r2, [r0], #1
 80159d8:	e7fa      	b.n	80159d0 <strncpy.constprop.0.isra.0+0xc>
 80159da:	3b01      	subs	r3, #1
 80159dc:	f800 2b01 	strb.w	r2, [r0], #1
 80159e0:	d1f2      	bne.n	80159c8 <strncpy.constprop.0.isra.0+0x4>
 80159e2:	4770      	bx	lr

080159e4 <Network::Network()>:
 80159e4:	4a12      	ldr	r2, [pc, #72]	; (8015a30 <Network::Network()+0x4c>)
 80159e6:	2300      	movs	r3, #0
 80159e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80159ec:	6010      	str	r0, [r2, #0]
 80159ee:	e9c0 3330 	strd	r3, r3, [r0, #192]	; 0xc0
 80159f2:	2201      	movs	r2, #1
 80159f4:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80159f8:	e9c0 2100 	strd	r2, r1, [r0]
 80159fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015a00:	490c      	ldr	r1, [pc, #48]	; (8015a34 <Network::Network()+0x50>)
 8015a02:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8015a06:	2200      	movs	r2, #0
 8015a08:	6102      	str	r2, [r0, #16]
 8015a0a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
 8015a0e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8015a12:	61c3      	str	r3, [r0, #28]
 8015a14:	f880 3020 	strb.w	r3, [r0, #32]
 8015a18:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8015a1c:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
 8015a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a24:	f802 3f01 	strb.w	r3, [r2, #1]!
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d1f9      	bne.n	8015a20 <Network::Network()+0x3c>
 8015a2c:	4770      	bx	lr
 8015a2e:	bf00      	nop
 8015a30:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 8015a34:	0801d601 	stmdaeq	r1, {r0, r9, sl, ip, lr, pc}

08015a38 <Network::Shutdown()>:
 8015a38:	b508      	push	{r3, lr}
 8015a3a:	30bc      	adds	r0, #188	; 0xbc
 8015a3c:	f001 fd38 	bl	80174b0 <NetworkDisplay::ShowShutdown()>
 8015a40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015a44:	f7f2 bbfe 	b.w	8008244 <net_shutdown>

08015a48 <Network::Begin(unsigned short)>:
 8015a48:	4608      	mov	r0, r1
 8015a4a:	f7ff ba97 	b.w	8014f7c <udp_bind>

08015a4e <Network::End(unsigned short)>:
 8015a4e:	4608      	mov	r0, r1
 8015a50:	f7ff baae 	b.w	8014fb0 <udp_unbind>

08015a54 <Network::MacAddressCopyTo(unsigned char*)>:
 8015a54:	f100 039f 	add.w	r3, r0, #159	; 0x9f
 8015a58:	3901      	subs	r1, #1
 8015a5a:	30a5      	adds	r0, #165	; 0xa5
 8015a5c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8015a60:	f801 2f01 	strb.w	r2, [r1, #1]!
 8015a64:	4283      	cmp	r3, r0
 8015a66:	d1f9      	bne.n	8015a5c <Network::MacAddressCopyTo(unsigned char*)+0x8>
 8015a68:	4770      	bx	lr

08015a6a <Network::JoinGroup(int, unsigned int)>:
 8015a6a:	4610      	mov	r0, r2
 8015a6c:	f001 b836 	b.w	8016adc <igmp_join>

08015a70 <Network::LeaveGroup(int, unsigned int)>:
 8015a70:	4610      	mov	r0, r2
 8015a72:	f001 b85f 	b.w	8016b34 <igmp_leave>

08015a76 <Network::SetDefaultIp()>:
 8015a76:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8015a7a:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 8015a7e:	041b      	lsls	r3, r3, #16
 8015a80:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015a84:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 8015a88:	3302      	adds	r3, #2
 8015a8a:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8015a8e:	22ff      	movs	r2, #255	; 0xff
 8015a90:	e9c0 3206 	strd	r3, r2, [r0, #24]
 8015a94:	6143      	str	r3, [r0, #20]
 8015a96:	4770      	bx	lr

08015a98 <Network::Init(NetworkParamsStore*)>:
 8015a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a9c:	b0a5      	sub	sp, #148	; 0x94
 8015a9e:	4604      	mov	r4, r0
 8015aa0:	a80b      	add	r0, sp, #44	; 0x2c
 8015aa2:	f000 fb0d 	bl	80160c0 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8015aa6:	a80b      	add	r0, sp, #44	; 0x2c
 8015aa8:	f000 fb16 	bl	80160d8 <NetworkParams::Load()>
 8015aac:	b110      	cbz	r0, 8015ab4 <Network::Init(NetworkParamsStore*)+0x1c>
 8015aae:	a80b      	add	r0, sp, #44	; 0x2c
 8015ab0:	f000 fce7 	bl	8016482 <NetworkParams::Dump()>
 8015ab4:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 8015ab8:	4628      	mov	r0, r5
 8015aba:	f001 fcdb 	bl	8017474 <NetworkDisplay::ShowEmacStart()>
 8015abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ac0:	9308      	str	r3, [sp, #32]
 8015ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8015ac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ac8:	930a      	str	r3, [sp, #40]	; 0x28
 8015aca:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8015ace:	7163      	strb	r3, [r4, #5]
 8015ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ad2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8015ad6:	bf18      	it	ne
 8015ad8:	f8dd 2085 	ldrne.w	r2, [sp, #133]	; 0x85
 8015adc:	60e2      	str	r2, [r4, #12]
 8015ade:	061b      	lsls	r3, r3, #24
 8015ae0:	bf4c      	ite	mi
 8015ae2:	f8dd 3089 	ldrmi.w	r3, [sp, #137]	; 0x89
 8015ae6:	2300      	movpl	r3, #0
 8015ae8:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8015aec:	6123      	str	r3, [r4, #16]
 8015aee:	4630      	mov	r0, r6
 8015af0:	f004 f88a 	bl	8019c08 <emac_start(unsigned char*)>
 8015af4:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8015af8:	f104 0720 	add.w	r7, r4, #32
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	f040 80cb 	bne.w	8015c98 <Network::Init(NetworkParamsStore*)+0x200>
 8015b02:	4987      	ldr	r1, [pc, #540]	; (8015d20 <Network::Init(NetworkParamsStore*)+0x288>)
 8015b04:	f104 001f 	add.w	r0, r4, #31
 8015b08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015b0c:	f103 0c01 	add.w	ip, r3, #1
 8015b10:	2a00      	cmp	r2, #0
 8015b12:	f040 80bd 	bne.w	8015c90 <Network::Init(NetworkParamsStore*)+0x1f8>
 8015b16:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
 8015b1a:	0910      	lsrs	r0, r2, #4
 8015b1c:	2a9f      	cmp	r2, #159	; 0x9f
 8015b1e:	f002 020f 	and.w	r2, r2, #15
 8015b22:	bf94      	ite	ls
 8015b24:	3030      	addls	r0, #48	; 0x30
 8015b26:	3037      	addhi	r0, #55	; 0x37
 8015b28:	18e1      	adds	r1, r4, r3
 8015b2a:	2a09      	cmp	r2, #9
 8015b2c:	44a4      	add	ip, r4
 8015b2e:	bf94      	ite	ls
 8015b30:	3230      	addls	r2, #48	; 0x30
 8015b32:	3237      	addhi	r2, #55	; 0x37
 8015b34:	f881 0020 	strb.w	r0, [r1, #32]
 8015b38:	f88c 2020 	strb.w	r2, [ip, #32]
 8015b3c:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
 8015b40:	f103 0802 	add.w	r8, r3, #2
 8015b44:	0910      	lsrs	r0, r2, #4
 8015b46:	2a9f      	cmp	r2, #159	; 0x9f
 8015b48:	eb04 0c08 	add.w	ip, r4, r8
 8015b4c:	f002 020f 	and.w	r2, r2, #15
 8015b50:	bf94      	ite	ls
 8015b52:	3030      	addls	r0, #48	; 0x30
 8015b54:	3037      	addhi	r0, #55	; 0x37
 8015b56:	f103 0e03 	add.w	lr, r3, #3
 8015b5a:	f88c 0020 	strb.w	r0, [ip, #32]
 8015b5e:	2a09      	cmp	r2, #9
 8015b60:	eb04 000e 	add.w	r0, r4, lr
 8015b64:	bf94      	ite	ls
 8015b66:	3230      	addls	r2, #48	; 0x30
 8015b68:	3237      	addhi	r2, #55	; 0x37
 8015b6a:	f880 2020 	strb.w	r2, [r0, #32]
 8015b6e:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8015b72:	f103 0c04 	add.w	ip, r3, #4
 8015b76:	0910      	lsrs	r0, r2, #4
 8015b78:	2a9f      	cmp	r2, #159	; 0x9f
 8015b7a:	f103 0305 	add.w	r3, r3, #5
 8015b7e:	f002 020f 	and.w	r2, r2, #15
 8015b82:	bf94      	ite	ls
 8015b84:	3030      	addls	r0, #48	; 0x30
 8015b86:	3037      	addhi	r0, #55	; 0x37
 8015b88:	4423      	add	r3, r4
 8015b8a:	2a09      	cmp	r2, #9
 8015b8c:	44a4      	add	ip, r4
 8015b8e:	bf94      	ite	ls
 8015b90:	3230      	addls	r2, #48	; 0x30
 8015b92:	3237      	addhi	r2, #55	; 0x37
 8015b94:	f88c 0020 	strb.w	r0, [ip, #32]
 8015b98:	f883 2020 	strb.w	r2, [r3, #32]
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	f881 3026 	strb.w	r3, [r1, #38]	; 0x26
 8015ba2:	f004 f947 	bl	8019e34 <net::link_register_read()>
 8015ba6:	7963      	ldrb	r3, [r4, #5]
 8015ba8:	6020      	str	r0, [r4, #0]
 8015baa:	2800      	cmp	r0, #0
 8015bac:	f040 80a1 	bne.w	8015cf2 <Network::Init(NetworkParamsStore*)+0x25a>
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	f040 80af 	bne.w	8015d14 <Network::Init(NetworkParamsStore*)+0x27c>
 8015bb6:	9b08      	ldr	r3, [sp, #32]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d176      	bne.n	8015caa <Network::Init(NetworkParamsStore*)+0x212>
 8015bbc:	4620      	mov	r0, r4
 8015bbe:	f7ff ff5a 	bl	8015a76 <Network::SetDefaultIp()>
 8015bc2:	6963      	ldr	r3, [r4, #20]
 8015bc4:	69e2      	ldr	r2, [r4, #28]
 8015bc6:	9308      	str	r3, [sp, #32]
 8015bc8:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 8015bcc:	f104 0905 	add.w	r9, r4, #5
 8015bd0:	f104 0a07 	add.w	sl, r4, #7
 8015bd4:	464b      	mov	r3, r9
 8015bd6:	f8cd a000 	str.w	sl, [sp]
 8015bda:	463a      	mov	r2, r7
 8015bdc:	a908      	add	r1, sp, #32
 8015bde:	4630      	mov	r0, r6
 8015be0:	f7f2 fae4 	bl	80081ac <net_init>
 8015be4:	79e3      	ldrb	r3, [r4, #7]
 8015be6:	b11b      	cbz	r3, 8015bf0 <Network::Init(NetworkParamsStore*)+0x158>
 8015be8:	2104      	movs	r1, #4
 8015bea:	4628      	mov	r0, r5
 8015bec:	f001 fc66 	bl	80174bc <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8015bf0:	f89d 308d 	ldrb.w	r3, [sp, #141]	; 0x8d
 8015bf4:	9302      	str	r3, [sp, #8]
 8015bf6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8015bfa:	9303      	str	r3, [sp, #12]
 8015bfc:	f89d 308d 	ldrb.w	r3, [sp, #141]	; 0x8d
 8015c00:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8015d28 <Network::Init(NetworkParamsStore*)+0x290>
 8015c04:	f8df b124 	ldr.w	fp, [pc, #292]	; 8015d2c <Network::Init(NetworkParamsStore*)+0x294>
 8015c08:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8015c0c:	009b      	lsls	r3, r3, #2
 8015c0e:	9305      	str	r3, [sp, #20]
 8015c10:	79e3      	ldrb	r3, [r4, #7]
 8015c12:	b38b      	cbz	r3, 8015c78 <Network::Init(NetworkParamsStore*)+0x1e0>
 8015c14:	9b02      	ldr	r3, [sp, #8]
 8015c16:	b37b      	cbz	r3, 8015c78 <Network::Init(NetworkParamsStore*)+0x1e0>
 8015c18:	9b03      	ldr	r3, [sp, #12]
 8015c1a:	b36b      	cbz	r3, 8015c78 <Network::Init(NetworkParamsStore*)+0x1e0>
 8015c1c:	f8d8 0000 	ldr.w	r0, [r8]
 8015c20:	2104      	movs	r1, #4
 8015c22:	f002 fa75 	bl	8018110 <LedBlink::SetMode(ledblink::Mode)>
 8015c26:	2103      	movs	r1, #3
 8015c28:	4628      	mov	r0, r5
 8015c2a:	f001 fc47 	bl	80174bc <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8015c2e:	2000      	movs	r0, #0
 8015c30:	f002 fd4e 	bl	80186d0 <time>
 8015c34:	9004      	str	r0, [sp, #16]
 8015c36:	2000      	movs	r0, #0
 8015c38:	f002 fd4a 	bl	80186d0 <time>
 8015c3c:	9b04      	ldr	r3, [sp, #16]
 8015c3e:	4939      	ldr	r1, [pc, #228]	; (8015d24 <Network::Init(NetworkParamsStore*)+0x28c>)
 8015c40:	1ac0      	subs	r0, r0, r3
 8015c42:	9b05      	ldr	r3, [sp, #20]
 8015c44:	4298      	cmp	r0, r3
 8015c46:	db38      	blt.n	8015cba <Network::Init(NetworkParamsStore*)+0x222>
 8015c48:	2101      	movs	r1, #1
 8015c4a:	4628      	mov	r0, r5
 8015c4c:	f001 fc36 	bl	80174bc <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8015c50:	f8d8 0000 	ldr.w	r0, [r8]
 8015c54:	2101      	movs	r1, #1
 8015c56:	f002 fa5b 	bl	8018110 <LedBlink::SetMode(ledblink::Mode)>
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	7163      	strb	r3, [r4, #5]
 8015c5e:	2300      	movs	r3, #0
 8015c60:	71e3      	strb	r3, [r4, #7]
 8015c62:	f8cd a000 	str.w	sl, [sp]
 8015c66:	464b      	mov	r3, r9
 8015c68:	463a      	mov	r2, r7
 8015c6a:	a908      	add	r1, sp, #32
 8015c6c:	4630      	mov	r0, r6
 8015c6e:	f7f2 fa9d 	bl	80081ac <net_init>
 8015c72:	7963      	ldrb	r3, [r4, #5]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d0cb      	beq.n	8015c10 <Network::Init(NetworkParamsStore*)+0x178>
 8015c78:	9b08      	ldr	r3, [sp, #32]
 8015c7a:	6163      	str	r3, [r4, #20]
 8015c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c7e:	61e3      	str	r3, [r4, #28]
 8015c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c82:	61a3      	str	r3, [r4, #24]
 8015c84:	4628      	mov	r0, r5
 8015c86:	f001 fbfb 	bl	8017480 <NetworkDisplay::ShowIp()>
 8015c8a:	b025      	add	sp, #148	; 0x94
 8015c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c90:	f800 2f01 	strb.w	r2, [r0, #1]!
 8015c94:	4663      	mov	r3, ip
 8015c96:	e737      	b.n	8015b08 <Network::Init(NetworkParamsStore*)+0x70>
 8015c98:	f10d 0145 	add.w	r1, sp, #69	; 0x45
 8015c9c:	4638      	mov	r0, r7
 8015c9e:	f7ff fe91 	bl	80159c4 <strncpy.constprop.0.isra.0>
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 8015ca8:	e77b      	b.n	8015ba2 <Network::Init(NetworkParamsStore*)+0x10a>
 8015caa:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8015cae:	69e1      	ldr	r1, [r4, #28]
 8015cb0:	4053      	eors	r3, r2
 8015cb2:	420b      	tst	r3, r1
 8015cb4:	bf18      	it	ne
 8015cb6:	920a      	strne	r2, [sp, #40]	; 0x28
 8015cb8:	e788      	b.n	8015bcc <Network::Init(NetworkParamsStore*)+0x134>
 8015cba:	f8d8 3000 	ldr.w	r3, [r8]
 8015cbe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8015cc2:	f1bc 0f00 	cmp.w	ip, #0
 8015cc6:	d0b6      	beq.n	8015c36 <Network::Init(NetworkParamsStore*)+0x19e>
 8015cc8:	f8db 0000 	ldr.w	r0, [fp]
 8015ccc:	695a      	ldr	r2, [r3, #20]
 8015cce:	1a80      	subs	r0, r0, r2
 8015cd0:	4584      	cmp	ip, r0
 8015cd2:	d8b0      	bhi.n	8015c36 <Network::Init(NetworkParamsStore*)+0x19e>
 8015cd4:	f8db 0000 	ldr.w	r0, [fp]
 8015cd8:	6158      	str	r0, [r3, #20]
 8015cda:	6918      	ldr	r0, [r3, #16]
 8015cdc:	2801      	cmp	r0, #1
 8015cde:	f080 0201 	eor.w	r2, r0, #1
 8015ce2:	611a      	str	r2, [r3, #16]
 8015ce4:	bf1a      	itte	ne
 8015ce6:	2301      	movne	r3, #1
 8015ce8:	f8c1 3818 	strne.w	r3, [r1, #2072]	; 0x818
 8015cec:	f8c1 0828 	streq.w	r0, [r1, #2088]	; 0x828
 8015cf0:	e7a1      	b.n	8015c36 <Network::Init(NetworkParamsStore*)+0x19e>
 8015cf2:	b11b      	cbz	r3, 8015cfc <Network::Init(NetworkParamsStore*)+0x264>
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8015cfa:	9308      	str	r3, [sp, #32]
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	f88d 301f 	strb.w	r3, [sp, #31]
 8015d02:	f10d 031f 	add.w	r3, sp, #31
 8015d06:	9300      	str	r3, [sp, #0]
 8015d08:	463a      	mov	r2, r7
 8015d0a:	a908      	add	r1, sp, #32
 8015d0c:	4630      	mov	r0, r6
 8015d0e:	f7f2 fa4d 	bl	80081ac <net_init>
 8015d12:	e7b1      	b.n	8015c78 <Network::Init(NetworkParamsStore*)+0x1e0>
 8015d14:	2101      	movs	r1, #1
 8015d16:	4628      	mov	r0, r5
 8015d18:	f001 fbd0 	bl	80174bc <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8015d1c:	e756      	b.n	8015bcc <Network::Init(NetworkParamsStore*)+0x134>
 8015d1e:	bf00      	nop
 8015d20:	0801d606 	stmdaeq	r1, {r1, r2, r9, sl, ip, lr, pc}
 8015d24:	40020000 	andmi	r0, r2, r0
 8015d28:	2000fdc0 	andcs	pc, r0, r0, asr #27
 8015d2c:	2000fddc 	ldrdcs	pc, [r0], -ip

08015d30 <Network::SetIp(unsigned int)>:
 8015d30:	7943      	ldrb	r3, [r0, #5]
 8015d32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015d34:	4604      	mov	r4, r0
 8015d36:	460d      	mov	r5, r1
 8015d38:	2600      	movs	r6, #0
 8015d3a:	b113      	cbz	r3, 8015d42 <Network::SetIp(unsigned int)+0x12>
 8015d3c:	7146      	strb	r6, [r0, #5]
 8015d3e:	f7fe fea5 	bl	8014a8c <net_dhcp_release>
 8015d42:	71e6      	strb	r6, [r4, #7]
 8015d44:	b985      	cbnz	r5, 8015d68 <Network::SetIp(unsigned int)+0x38>
 8015d46:	4620      	mov	r0, r4
 8015d48:	f7ff fe95 	bl	8015a76 <Network::SetDefaultIp()>
 8015d4c:	6960      	ldr	r0, [r4, #20]
 8015d4e:	f7fe fe59 	bl	8014a04 <net_set_ip>
 8015d52:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8015d56:	9001      	str	r0, [sp, #4]
 8015d58:	f001 fb92 	bl	8017480 <NetworkDisplay::ShowIp()>
 8015d5c:	9801      	ldr	r0, [sp, #4]
 8015d5e:	b002      	add	sp, #8
 8015d60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d64:	f001 bb92 	b.w	801748c <NetworkDisplay::ShowNetMask()>
 8015d68:	4628      	mov	r0, r5
 8015d6a:	f7fe fe4b 	bl	8014a04 <net_set_ip>
 8015d6e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8015d72:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015d76:	2800      	cmp	r0, #0
 8015d78:	d0eb      	beq.n	8015d52 <Network::SetIp(unsigned int)+0x22>
 8015d7a:	6803      	ldr	r3, [r0, #0]
 8015d7c:	4629      	mov	r1, r5
 8015d7e:	689b      	ldr	r3, [r3, #8]
 8015d80:	4798      	blx	r3
 8015d82:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8015d86:	6803      	ldr	r3, [r0, #0]
 8015d88:	2100      	movs	r1, #0
 8015d8a:	699b      	ldr	r3, [r3, #24]
 8015d8c:	4798      	blx	r3
 8015d8e:	e7e0      	b.n	8015d52 <Network::SetIp(unsigned int)+0x22>

08015d90 <Network::SetNetmask(unsigned int)>:
 8015d90:	69c2      	ldr	r2, [r0, #28]
 8015d92:	428a      	cmp	r2, r1
 8015d94:	b513      	push	{r0, r1, r4, lr}
 8015d96:	4604      	mov	r4, r0
 8015d98:	d011      	beq.n	8015dbe <Network::SetNetmask(unsigned int)+0x2e>
 8015d9a:	61c1      	str	r1, [r0, #28]
 8015d9c:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8015da0:	b110      	cbz	r0, 8015da8 <Network::SetNetmask(unsigned int)+0x18>
 8015da2:	6803      	ldr	r3, [r0, #0]
 8015da4:	68db      	ldr	r3, [r3, #12]
 8015da6:	4798      	blx	r3
 8015da8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8015dac:	9001      	str	r0, [sp, #4]
 8015dae:	f001 fb67 	bl	8017480 <NetworkDisplay::ShowIp()>
 8015db2:	9801      	ldr	r0, [sp, #4]
 8015db4:	b002      	add	sp, #8
 8015db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dba:	f001 bb67 	b.w	801748c <NetworkDisplay::ShowNetMask()>
 8015dbe:	b002      	add	sp, #8
 8015dc0:	bd10      	pop	{r4, pc}

08015dc2 <Network::SetGatewayIp(unsigned int)>:
 8015dc2:	6983      	ldr	r3, [r0, #24]
 8015dc4:	428b      	cmp	r3, r1
 8015dc6:	b513      	push	{r0, r1, r4, lr}
 8015dc8:	4604      	mov	r4, r0
 8015dca:	d011      	beq.n	8015df0 <Network::SetGatewayIp(unsigned int)+0x2e>
 8015dcc:	4608      	mov	r0, r1
 8015dce:	9101      	str	r1, [sp, #4]
 8015dd0:	f7fe fe28 	bl	8014a24 <net_set_gw>
 8015dd4:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8015dd8:	b118      	cbz	r0, 8015de2 <Network::SetGatewayIp(unsigned int)+0x20>
 8015dda:	6803      	ldr	r3, [r0, #0]
 8015ddc:	9901      	ldr	r1, [sp, #4]
 8015dde:	691b      	ldr	r3, [r3, #16]
 8015de0:	4798      	blx	r3
 8015de2:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8015de6:	b002      	add	sp, #8
 8015de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dec:	f001 bb54 	b.w	8017498 <NetworkDisplay::ShowGatewayIp()>
 8015df0:	b002      	add	sp, #8
 8015df2:	bd10      	pop	{r4, pc}

08015df4 <Network::SetHostName(char const*)>:
 8015df4:	b570      	push	{r4, r5, r6, lr}
 8015df6:	4604      	mov	r4, r0
 8015df8:	f100 0520 	add.w	r5, r0, #32
 8015dfc:	4628      	mov	r0, r5
 8015dfe:	f7ff fde1 	bl	80159c4 <strncpy.constprop.0.isra.0>
 8015e02:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8015e06:	2300      	movs	r3, #0
 8015e08:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 8015e0c:	b158      	cbz	r0, 8015e26 <Network::SetHostName(char const*)+0x32>
 8015e0e:	6803      	ldr	r3, [r0, #0]
 8015e10:	695e      	ldr	r6, [r3, #20]
 8015e12:	462b      	mov	r3, r5
 8015e14:	461a      	mov	r2, r3
 8015e16:	3301      	adds	r3, #1
 8015e18:	7811      	ldrb	r1, [r2, #0]
 8015e1a:	2900      	cmp	r1, #0
 8015e1c:	d1fa      	bne.n	8015e14 <Network::SetHostName(char const*)+0x20>
 8015e1e:	1b52      	subs	r2, r2, r5
 8015e20:	b292      	uxth	r2, r2
 8015e22:	4629      	mov	r1, r5
 8015e24:	47b0      	blx	r6
 8015e26:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8015e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e2e:	f001 bb39 	b.w	80174a4 <NetworkDisplay::ShowHostName()>

08015e32 <Network::SetZeroconf()>:
 8015e32:	b510      	push	{r4, lr}
 8015e34:	b086      	sub	sp, #24
 8015e36:	4604      	mov	r4, r0
 8015e38:	a803      	add	r0, sp, #12
 8015e3a:	f7fe fe31 	bl	8014aa0 <net_set_zeroconf>
 8015e3e:	71e0      	strb	r0, [r4, #7]
 8015e40:	b170      	cbz	r0, 8015e60 <Network::SetZeroconf()+0x2e>
 8015e42:	9b03      	ldr	r3, [sp, #12]
 8015e44:	6163      	str	r3, [r4, #20]
 8015e46:	9b04      	ldr	r3, [sp, #16]
 8015e48:	61e3      	str	r3, [r4, #28]
 8015e4a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8015e4e:	9b05      	ldr	r3, [sp, #20]
 8015e50:	61a3      	str	r3, [r4, #24]
 8015e52:	2300      	movs	r3, #0
 8015e54:	7163      	strb	r3, [r4, #5]
 8015e56:	b118      	cbz	r0, 8015e60 <Network::SetZeroconf()+0x2e>
 8015e58:	6803      	ldr	r3, [r0, #0]
 8015e5a:	2101      	movs	r1, #1
 8015e5c:	699b      	ldr	r3, [r3, #24]
 8015e5e:	4798      	blx	r3
 8015e60:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8015e64:	9001      	str	r0, [sp, #4]
 8015e66:	f001 fb0b 	bl	8017480 <NetworkDisplay::ShowIp()>
 8015e6a:	9801      	ldr	r0, [sp, #4]
 8015e6c:	f001 fb0e 	bl	801748c <NetworkDisplay::ShowNetMask()>
 8015e70:	79e0      	ldrb	r0, [r4, #7]
 8015e72:	b006      	add	sp, #24
 8015e74:	bd10      	pop	{r4, pc}
	...

08015e78 <Network::EnableDhcp()>:
 8015e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e7a:	4e25      	ldr	r6, [pc, #148]	; (8015f10 <Network::EnableDhcp()+0x98>)
 8015e7c:	6833      	ldr	r3, [r6, #0]
 8015e7e:	781f      	ldrb	r7, [r3, #0]
 8015e80:	b085      	sub	sp, #20
 8015e82:	4604      	mov	r4, r0
 8015e84:	b137      	cbz	r7, 8015e94 <Network::EnableDhcp()+0x1c>
 8015e86:	2200      	movs	r2, #0
 8015e88:	701a      	strb	r2, [r3, #0]
 8015e8a:	2104      	movs	r1, #4
 8015e8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015e90:	f002 fdf6 	bl	8018a80 <fwdgt_config>
 8015e94:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 8015e98:	2101      	movs	r1, #1
 8015e9a:	4628      	mov	r0, r5
 8015e9c:	f001 fb0e 	bl	80174bc <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8015ea0:	1de2      	adds	r2, r4, #7
 8015ea2:	f104 0120 	add.w	r1, r4, #32
 8015ea6:	a801      	add	r0, sp, #4
 8015ea8:	f7fe fdc4 	bl	8014a34 <net_set_dhcp>
 8015eac:	79e3      	ldrb	r3, [r4, #7]
 8015eae:	7160      	strb	r0, [r4, #5]
 8015eb0:	b35b      	cbz	r3, 8015f0a <Network::EnableDhcp()+0x92>
 8015eb2:	2104      	movs	r1, #4
 8015eb4:	4628      	mov	r0, r5
 8015eb6:	f001 fb01 	bl	80174bc <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8015eba:	b16f      	cbz	r7, 8015ed8 <Network::EnableDhcp()+0x60>
 8015ebc:	2102      	movs	r1, #2
 8015ebe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015ec2:	6836      	ldr	r6, [r6, #0]
 8015ec4:	f002 fddc 	bl	8018a80 <fwdgt_config>
 8015ec8:	2801      	cmp	r0, #1
 8015eca:	bf0c      	ite	eq
 8015ecc:	2301      	moveq	r3, #1
 8015ece:	2300      	movne	r3, #0
 8015ed0:	7033      	strb	r3, [r6, #0]
 8015ed2:	d101      	bne.n	8015ed8 <Network::EnableDhcp()+0x60>
 8015ed4:	f002 fdc4 	bl	8018a60 <fwdgt_enable>
 8015ed8:	9b01      	ldr	r3, [sp, #4]
 8015eda:	6163      	str	r3, [r4, #20]
 8015edc:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8015ee0:	9b02      	ldr	r3, [sp, #8]
 8015ee2:	61e3      	str	r3, [r4, #28]
 8015ee4:	9b03      	ldr	r3, [sp, #12]
 8015ee6:	61a3      	str	r3, [r4, #24]
 8015ee8:	b118      	cbz	r0, 8015ef2 <Network::EnableDhcp()+0x7a>
 8015eea:	6803      	ldr	r3, [r0, #0]
 8015eec:	7961      	ldrb	r1, [r4, #5]
 8015eee:	699b      	ldr	r3, [r3, #24]
 8015ef0:	4798      	blx	r3
 8015ef2:	4628      	mov	r0, r5
 8015ef4:	f001 fac4 	bl	8017480 <NetworkDisplay::ShowIp()>
 8015ef8:	4628      	mov	r0, r5
 8015efa:	f001 fac7 	bl	801748c <NetworkDisplay::ShowNetMask()>
 8015efe:	4628      	mov	r0, r5
 8015f00:	f001 faca 	bl	8017498 <NetworkDisplay::ShowGatewayIp()>
 8015f04:	7960      	ldrb	r0, [r4, #5]
 8015f06:	b005      	add	sp, #20
 8015f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f0a:	2102      	movs	r1, #2
 8015f0c:	e7d2      	b.n	8015eb4 <Network::EnableDhcp()+0x3c>
 8015f0e:	bf00      	nop
 8015f10:	2000fdc4 	andcs	pc, r0, r4, asr #27

08015f14 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>:
 8015f14:	b109      	cbz	r1, 8015f1a <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0x6>
 8015f16:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 8015f1a:	b10a      	cbz	r2, 8015f20 <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0xc>
 8015f1c:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
 8015f20:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8015f24:	f043 0303 	orr.w	r3, r3, #3
 8015f28:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
 8015f2c:	4770      	bx	lr

08015f2e <Network::ApplyQueuedConfig()>:
 8015f2e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8015f32:	b510      	push	{r4, lr}
 8015f34:	4604      	mov	r4, r0
 8015f36:	b3c3      	cbz	r3, 8015faa <Network::ApplyQueuedConfig()+0x7c>
 8015f38:	079a      	lsls	r2, r3, #30
 8015f3a:	d01a      	beq.n	8015f72 <Network::ApplyQueuedConfig()+0x44>
 8015f3c:	079b      	lsls	r3, r3, #30
 8015f3e:	d509      	bpl.n	8015f54 <Network::ApplyQueuedConfig()+0x26>
 8015f40:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
 8015f44:	f7ff ff24 	bl	8015d90 <Network::SetNetmask(unsigned int)>
 8015f48:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8015f4c:	f023 0302 	bic.w	r3, r3, #2
 8015f50:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8015f54:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8015f58:	07d9      	lsls	r1, r3, #31
 8015f5a:	d50a      	bpl.n	8015f72 <Network::ApplyQueuedConfig()+0x44>
 8015f5c:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8015f60:	4620      	mov	r0, r4
 8015f62:	f7ff fee5 	bl	8015d30 <Network::SetIp(unsigned int)>
 8015f66:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8015f6a:	f023 0301 	bic.w	r3, r3, #1
 8015f6e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8015f72:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8015f76:	075a      	lsls	r2, r3, #29
 8015f78:	d508      	bpl.n	8015f8c <Network::ApplyQueuedConfig()+0x5e>
 8015f7a:	4620      	mov	r0, r4
 8015f7c:	f7ff ff7c 	bl	8015e78 <Network::EnableDhcp()>
 8015f80:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8015f84:	f023 0304 	bic.w	r3, r3, #4
 8015f88:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8015f8c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8015f90:	071b      	lsls	r3, r3, #28
 8015f92:	d508      	bpl.n	8015fa6 <Network::ApplyQueuedConfig()+0x78>
 8015f94:	4620      	mov	r0, r4
 8015f96:	f7ff ff4c 	bl	8015e32 <Network::SetZeroconf()>
 8015f9a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8015f9e:	f023 0308 	bic.w	r3, r3, #8
 8015fa2:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8015fa6:	2001      	movs	r0, #1
 8015fa8:	e000      	b.n	8015fac <Network::ApplyQueuedConfig()+0x7e>
 8015faa:	4618      	mov	r0, r3
 8015fac:	bd10      	pop	{r4, pc}
	...

08015fb0 <Network::Print()>:
 8015fb0:	b530      	push	{r4, r5, lr}
 8015fb2:	4604      	mov	r4, r0
 8015fb4:	b085      	sub	sp, #20
 8015fb6:	4832      	ldr	r0, [pc, #200]	; (8016080 <Network::Print()+0xd0>)
 8015fb8:	f7f4 fad8 	bl	800a56c <printf>
 8015fbc:	f104 0120 	add.w	r1, r4, #32
 8015fc0:	4830      	ldr	r0, [pc, #192]	; (8016084 <Network::Print()+0xd4>)
 8015fc2:	f7f4 fad3 	bl	800a56c <printf>
 8015fc6:	68a1      	ldr	r1, [r4, #8]
 8015fc8:	482f      	ldr	r0, [pc, #188]	; (8016088 <Network::Print()+0xd8>)
 8015fca:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
 8015fce:	f7f4 facd 	bl	800a56c <printf>
 8015fd2:	69e0      	ldr	r0, [r4, #28]
 8015fd4:	6965      	ldr	r5, [r4, #20]
 8015fd6:	f004 fce7 	bl	801a9a8 <__popcountsi2>
 8015fda:	0e2b      	lsrs	r3, r5, #24
 8015fdc:	9001      	str	r0, [sp, #4]
 8015fde:	9300      	str	r3, [sp, #0]
 8015fe0:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8015fe4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8015fe8:	b2e9      	uxtb	r1, r5
 8015fea:	4828      	ldr	r0, [pc, #160]	; (801608c <Network::Print()+0xdc>)
 8015fec:	f7f4 fabe 	bl	800a56c <printf>
 8015ff0:	69e1      	ldr	r1, [r4, #28]
 8015ff2:	4827      	ldr	r0, [pc, #156]	; (8016090 <Network::Print()+0xe0>)
 8015ff4:	0e0b      	lsrs	r3, r1, #24
 8015ff6:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8015ffa:	9300      	str	r3, [sp, #0]
 8015ffc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8016000:	b2c9      	uxtb	r1, r1
 8016002:	f7f4 fab3 	bl	800a56c <printf>
 8016006:	69a1      	ldr	r1, [r4, #24]
 8016008:	4822      	ldr	r0, [pc, #136]	; (8016094 <Network::Print()+0xe4>)
 801600a:	0e0b      	lsrs	r3, r1, #24
 801600c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8016010:	9300      	str	r3, [sp, #0]
 8016012:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8016016:	b2c9      	uxtb	r1, r1
 8016018:	f7f4 faa8 	bl	800a56c <printf>
 801601c:	69e3      	ldr	r3, [r4, #28]
 801601e:	6961      	ldr	r1, [r4, #20]
 8016020:	481d      	ldr	r0, [pc, #116]	; (8016098 <Network::Print()+0xe8>)
 8016022:	ea61 0103 	orn	r1, r1, r3
 8016026:	0e0b      	lsrs	r3, r1, #24
 8016028:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801602c:	9300      	str	r3, [sp, #0]
 801602e:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8016032:	b2c9      	uxtb	r1, r1
 8016034:	f7f4 fa9a 	bl	800a56c <printf>
 8016038:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 801603c:	9302      	str	r3, [sp, #8]
 801603e:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8016042:	9301      	str	r3, [sp, #4]
 8016044:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 8016048:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 801604c:	9300      	str	r3, [sp, #0]
 801604e:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
 8016052:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8016056:	4811      	ldr	r0, [pc, #68]	; (801609c <Network::Print()+0xec>)
 8016058:	f7f4 fa88 	bl	800a56c <printf>
 801605c:	4b10      	ldr	r3, [pc, #64]	; (80160a0 <Network::Print()+0xf0>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	79da      	ldrb	r2, [r3, #7]
 8016062:	b952      	cbnz	r2, 801607a <Network::Print()+0xca>
 8016064:	795b      	ldrb	r3, [r3, #5]
 8016066:	2b00      	cmp	r3, #0
 8016068:	bf14      	ite	ne
 801606a:	2144      	movne	r1, #68	; 0x44
 801606c:	2153      	moveq	r1, #83	; 0x53
 801606e:	480d      	ldr	r0, [pc, #52]	; (80160a4 <Network::Print()+0xf4>)
 8016070:	b005      	add	sp, #20
 8016072:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016076:	f7f4 ba79 	b.w	800a56c <printf>
 801607a:	215a      	movs	r1, #90	; 0x5a
 801607c:	e7f7      	b.n	801606e <Network::Print()+0xbe>
 801607e:	bf00      	nop
 8016080:	0801d612 	stmdaeq	r1, {r1, r4, r9, sl, ip, lr, pc}
 8016084:	0801d61b 	stmdaeq	r1, {r0, r1, r3, r4, r9, sl, ip, lr, pc}
 8016088:	0801d62c 	stmdaeq	r1, {r2, r3, r5, r9, sl, ip, lr, pc}
 801608c:	0801d641 	stmdaeq	r1, {r0, r6, r9, sl, ip, lr, pc}
 8016090:	0801d65e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r9, sl, ip, lr, pc}
 8016094:	0801d678 	stmdaeq	r1, {r3, r4, r5, r6, r9, sl, ip, lr, pc}
 8016098:	0801d692 	stmdaeq	r1, {r1, r4, r7, r9, sl, ip, lr, pc}
 801609c:	0801d6ac 	stmdaeq	r1, {r2, r3, r5, r7, r9, sl, ip, lr, pc}
 80160a0:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 80160a4:	0801d6d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, sl, ip, lr, pc}

080160a8 <Network::TcpBegin(unsigned short)>:
 80160a8:	4608      	mov	r0, r1
 80160aa:	f7fe be89 	b.w	8014dc0 <tcp_begin>

080160ae <Network::TcpRead(int, unsigned char const**)>:
 80160ae:	4608      	mov	r0, r1
 80160b0:	4611      	mov	r1, r2
 80160b2:	f7fe bed1 	b.w	8014e58 <tcp_read>

080160b6 <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 80160b6:	4608      	mov	r0, r1
 80160b8:	4611      	mov	r1, r2
 80160ba:	461a      	mov	r2, r3
 80160bc:	f7fe be9e 	b.w	8014dfc <tcp_write>

080160c0 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 80160c0:	b510      	push	{r4, lr}
 80160c2:	225e      	movs	r2, #94	; 0x5e
 80160c4:	4604      	mov	r4, r0
 80160c6:	f840 1b04 	str.w	r1, [r0], #4
 80160ca:	2100      	movs	r1, #0
 80160cc:	f002 f9f8 	bl	80184c0 <memset>
 80160d0:	2301      	movs	r3, #1
 80160d2:	7623      	strb	r3, [r4, #24]
 80160d4:	4620      	mov	r0, r4
 80160d6:	bd10      	pop	{r4, pc}

080160d8 <NetworkParams::Load()>:
 80160d8:	b508      	push	{r3, lr}
 80160da:	2300      	movs	r3, #0
 80160dc:	4601      	mov	r1, r0
 80160de:	6043      	str	r3, [r0, #4]
 80160e0:	6800      	ldr	r0, [r0, #0]
 80160e2:	b120      	cbz	r0, 80160ee <NetworkParams::Load()+0x16>
 80160e4:	6803      	ldr	r3, [r0, #0]
 80160e6:	3104      	adds	r1, #4
 80160e8:	68db      	ldr	r3, [r3, #12]
 80160ea:	4798      	blx	r3
 80160ec:	2001      	movs	r0, #1
 80160ee:	bd08      	pop	{r3, pc}

080160f0 <NetworkParams::Load(char const*, unsigned int)>:
 80160f0:	6803      	ldr	r3, [r0, #0]
 80160f2:	b1d3      	cbz	r3, 801612a <NetworkParams::Load(char const*, unsigned int)+0x3a>
 80160f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80160f6:	2300      	movs	r3, #0
 80160f8:	6043      	str	r3, [r0, #4]
 80160fa:	4604      	mov	r4, r0
 80160fc:	460d      	mov	r5, r1
 80160fe:	4616      	mov	r6, r2
 8016100:	490a      	ldr	r1, [pc, #40]	; (801612c <NetworkParams::Load(char const*, unsigned int)+0x3c>)
 8016102:	4602      	mov	r2, r0
 8016104:	4668      	mov	r0, sp
 8016106:	f001 fb31 	bl	801776c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801610a:	4632      	mov	r2, r6
 801610c:	4629      	mov	r1, r5
 801610e:	4668      	mov	r0, sp
 8016110:	f001 fb30 	bl	8017774 <ReadConfigFile::Read(char const*, unsigned int)>
 8016114:	4621      	mov	r1, r4
 8016116:	f851 0b04 	ldr.w	r0, [r1], #4
 801611a:	6803      	ldr	r3, [r0, #0]
 801611c:	689b      	ldr	r3, [r3, #8]
 801611e:	4798      	blx	r3
 8016120:	4668      	mov	r0, sp
 8016122:	f001 fb26 	bl	8017772 <ReadConfigFile::~ReadConfigFile()>
 8016126:	b002      	add	sp, #8
 8016128:	bd70      	pop	{r4, r5, r6, pc}
 801612a:	4770      	bx	lr
 801612c:	08016251 	stmdaeq	r1, {r0, r4, r6, r9, sp, lr}

08016130 <NetworkParams::callbackFunction(char const*)>:
 8016130:	b530      	push	{r4, r5, lr}
 8016132:	460d      	mov	r5, r1
 8016134:	b085      	sub	sp, #20
 8016136:	4604      	mov	r4, r0
 8016138:	493f      	ldr	r1, [pc, #252]	; (8016238 <NetworkParams::callbackFunction(char const*)+0x108>)
 801613a:	f10d 0207 	add.w	r2, sp, #7
 801613e:	4628      	mov	r0, r5
 8016140:	f001 fc49 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8016144:	b978      	cbnz	r0, 8016166 <NetworkParams::callbackFunction(char const*)+0x36>
 8016146:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801614a:	6863      	ldr	r3, [r4, #4]
 801614c:	b142      	cbz	r2, 8016160 <NetworkParams::callbackFunction(char const*)+0x30>
 801614e:	f023 0301 	bic.w	r3, r3, #1
 8016152:	3a00      	subs	r2, #0
 8016154:	bf18      	it	ne
 8016156:	2201      	movne	r2, #1
 8016158:	6063      	str	r3, [r4, #4]
 801615a:	7622      	strb	r2, [r4, #24]
 801615c:	b005      	add	sp, #20
 801615e:	bd30      	pop	{r4, r5, pc}
 8016160:	f043 0301 	orr.w	r3, r3, #1
 8016164:	e7f5      	b.n	8016152 <NetworkParams::callbackFunction(char const*)+0x22>
 8016166:	4935      	ldr	r1, [pc, #212]	; (801623c <NetworkParams::callbackFunction(char const*)+0x10c>)
 8016168:	f10d 0207 	add.w	r2, sp, #7
 801616c:	4628      	mov	r0, r5
 801616e:	f001 fc32 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8016172:	b980      	cbnz	r0, 8016196 <NetworkParams::callbackFunction(char const*)+0x66>
 8016174:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016178:	6863      	ldr	r3, [r4, #4]
 801617a:	1e51      	subs	r1, r2, #1
 801617c:	2904      	cmp	r1, #4
 801617e:	bf97      	itett	ls
 8016180:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 8016184:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 8016188:	6063      	strls	r3, [r4, #4]
 801618a:	f884 2061 	strbls.w	r2, [r4, #97]	; 0x61
 801618e:	bf84      	itt	hi
 8016190:	6063      	strhi	r3, [r4, #4]
 8016192:	f884 0061 	strbhi.w	r0, [r4, #97]	; 0x61
 8016196:	492a      	ldr	r1, [pc, #168]	; (8016240 <NetworkParams::callbackFunction(char const*)+0x110>)
 8016198:	aa02      	add	r2, sp, #8
 801619a:	4628      	mov	r0, r5
 801619c:	f001 fb92 	bl	80178c4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80161a0:	b9c8      	cbnz	r0, 80161d6 <NetworkParams::callbackFunction(char const*)+0xa6>
 80161a2:	9b02      	ldr	r3, [sp, #8]
 80161a4:	b2d9      	uxtb	r1, r3
 80161a6:	29ac      	cmp	r1, #172	; 0xac
 80161a8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80161ac:	d009      	beq.n	80161c2 <NetworkParams::callbackFunction(char const*)+0x92>
 80161ae:	29c0      	cmp	r1, #192	; 0xc0
 80161b0:	d00b      	beq.n	80161ca <NetworkParams::callbackFunction(char const*)+0x9a>
 80161b2:	290a      	cmp	r1, #10
 80161b4:	d10c      	bne.n	80161d0 <NetworkParams::callbackFunction(char const*)+0xa0>
 80161b6:	60a3      	str	r3, [r4, #8]
 80161b8:	6863      	ldr	r3, [r4, #4]
 80161ba:	f043 0302 	orr.w	r3, r3, #2
 80161be:	6063      	str	r3, [r4, #4]
 80161c0:	e7cc      	b.n	801615c <NetworkParams::callbackFunction(char const*)+0x2c>
 80161c2:	3a10      	subs	r2, #16
 80161c4:	2a0f      	cmp	r2, #15
 80161c6:	d8c9      	bhi.n	801615c <NetworkParams::callbackFunction(char const*)+0x2c>
 80161c8:	e7f5      	b.n	80161b6 <NetworkParams::callbackFunction(char const*)+0x86>
 80161ca:	2aa8      	cmp	r2, #168	; 0xa8
 80161cc:	d1c6      	bne.n	801615c <NetworkParams::callbackFunction(char const*)+0x2c>
 80161ce:	e7f2      	b.n	80161b6 <NetworkParams::callbackFunction(char const*)+0x86>
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d0f0      	beq.n	80161b6 <NetworkParams::callbackFunction(char const*)+0x86>
 80161d4:	e7c2      	b.n	801615c <NetworkParams::callbackFunction(char const*)+0x2c>
 80161d6:	491b      	ldr	r1, [pc, #108]	; (8016244 <NetworkParams::callbackFunction(char const*)+0x114>)
 80161d8:	aa02      	add	r2, sp, #8
 80161da:	4628      	mov	r0, r5
 80161dc:	f001 fb72 	bl	80178c4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80161e0:	b960      	cbnz	r0, 80161fc <NetworkParams::callbackFunction(char const*)+0xcc>
 80161e2:	9b02      	ldr	r3, [sp, #8]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d0b9      	beq.n	801615c <NetworkParams::callbackFunction(char const*)+0x2c>
 80161e8:	ba1a      	rev	r2, r3
 80161ea:	43d1      	mvns	r1, r2
 80161ec:	ea12 0251 	ands.w	r2, r2, r1, lsr #1
 80161f0:	d1b4      	bne.n	801615c <NetworkParams::callbackFunction(char const*)+0x2c>
 80161f2:	60e3      	str	r3, [r4, #12]
 80161f4:	6863      	ldr	r3, [r4, #4]
 80161f6:	f043 0304 	orr.w	r3, r3, #4
 80161fa:	e7e0      	b.n	80161be <NetworkParams::callbackFunction(char const*)+0x8e>
 80161fc:	4912      	ldr	r1, [pc, #72]	; (8016248 <NetworkParams::callbackFunction(char const*)+0x118>)
 80161fe:	aa02      	add	r2, sp, #8
 8016200:	4628      	mov	r0, r5
 8016202:	f001 fb5f 	bl	80178c4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8016206:	b928      	cbnz	r0, 8016214 <NetworkParams::callbackFunction(char const*)+0xe4>
 8016208:	9b02      	ldr	r3, [sp, #8]
 801620a:	6123      	str	r3, [r4, #16]
 801620c:	6863      	ldr	r3, [r4, #4]
 801620e:	f043 0308 	orr.w	r3, r3, #8
 8016212:	e7d4      	b.n	80161be <NetworkParams::callbackFunction(char const*)+0x8e>
 8016214:	233f      	movs	r3, #63	; 0x3f
 8016216:	9303      	str	r3, [sp, #12]
 8016218:	490c      	ldr	r1, [pc, #48]	; (801624c <NetworkParams::callbackFunction(char const*)+0x11c>)
 801621a:	ab03      	add	r3, sp, #12
 801621c:	f104 0219 	add.w	r2, r4, #25
 8016220:	4628      	mov	r0, r5
 8016222:	f001 fadb 	bl	80177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8016226:	2800      	cmp	r0, #0
 8016228:	d198      	bne.n	801615c <NetworkParams::callbackFunction(char const*)+0x2c>
 801622a:	9b03      	ldr	r3, [sp, #12]
 801622c:	4423      	add	r3, r4
 801622e:	7658      	strb	r0, [r3, #25]
 8016230:	6863      	ldr	r3, [r4, #4]
 8016232:	f043 0320 	orr.w	r3, r3, #32
 8016236:	e7c2      	b.n	80161be <NetworkParams::callbackFunction(char const*)+0x8e>
 8016238:	0801d730 	stmdaeq	r1, {r4, r5, r8, r9, sl, ip, lr, pc}
 801623c:	0801d70e 	stmdaeq	r1, {r1, r2, r3, r8, r9, sl, ip, lr, pc}
 8016240:	0801d6f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, sl, ip, lr, pc}
 8016244:	0801d727 	stmdaeq	r1, {r0, r1, r2, r5, r8, r9, sl, ip, lr, pc}
 8016248:	0801d6fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r9, sl, ip, lr, pc}
 801624c:	0801d71e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, sl, ip, lr, pc}

08016250 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8016250:	f7ff bf6e 	b.w	8016130 <NetworkParams::callbackFunction(char const*)>

08016254 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>:
 8016254:	b570      	push	{r4, r5, r6, lr}
 8016256:	4604      	mov	r4, r0
 8016258:	b086      	sub	sp, #24
 801625a:	4615      	mov	r5, r2
 801625c:	461e      	mov	r6, r3
 801625e:	3004      	adds	r0, #4
 8016260:	2900      	cmp	r1, #0
 8016262:	d02a      	beq.n	80162ba <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x66>
 8016264:	225e      	movs	r2, #94	; 0x5e
 8016266:	f002 f914 	bl	8018492 <memmove>
 801626a:	462a      	mov	r2, r5
 801626c:	4633      	mov	r3, r6
 801626e:	496f      	ldr	r1, [pc, #444]	; (801642c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d8>)
 8016270:	a803      	add	r0, sp, #12
 8016272:	f001 f9db 	bl	801762c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8016276:	6863      	ldr	r3, [r4, #4]
 8016278:	079a      	lsls	r2, r3, #30
 801627a:	bf5f      	itttt	pl
 801627c:	4a6c      	ldrpl	r2, [pc, #432]	; (8016430 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 801627e:	6812      	ldrpl	r2, [r2, #0]
 8016280:	6952      	ldrpl	r2, [r2, #20]
 8016282:	60a2      	strpl	r2, [r4, #8]
 8016284:	075e      	lsls	r6, r3, #29
 8016286:	bf5f      	itttt	pl
 8016288:	4a69      	ldrpl	r2, [pc, #420]	; (8016430 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 801628a:	6812      	ldrpl	r2, [r2, #0]
 801628c:	69d2      	ldrpl	r2, [r2, #28]
 801628e:	60e2      	strpl	r2, [r4, #12]
 8016290:	071d      	lsls	r5, r3, #28
 8016292:	bf5f      	itttt	pl
 8016294:	4a66      	ldrpl	r2, [pc, #408]	; (8016430 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8016296:	6812      	ldrpl	r2, [r2, #0]
 8016298:	6992      	ldrpl	r2, [r2, #24]
 801629a:	6122      	strpl	r2, [r4, #16]
 801629c:	0698      	lsls	r0, r3, #26
 801629e:	f104 0519 	add.w	r5, r4, #25
 80162a2:	d418      	bmi.n	80162d6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 80162a4:	4b62      	ldr	r3, [pc, #392]	; (8016430 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	4628      	mov	r0, r5
 80162aa:	331f      	adds	r3, #31
 80162ac:	223f      	movs	r2, #63	; 0x3f
 80162ae:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80162b2:	b949      	cbnz	r1, 80162c8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x74>
 80162b4:	f002 f904 	bl	80184c0 <memset>
 80162b8:	e00a      	b.n	80162d0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x7c>
 80162ba:	6823      	ldr	r3, [r4, #0]
 80162bc:	681a      	ldr	r2, [r3, #0]
 80162be:	4601      	mov	r1, r0
 80162c0:	68d2      	ldr	r2, [r2, #12]
 80162c2:	4618      	mov	r0, r3
 80162c4:	4790      	blx	r2
 80162c6:	e7d0      	b.n	801626a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 80162c8:	3a01      	subs	r2, #1
 80162ca:	f800 1b01 	strb.w	r1, [r0], #1
 80162ce:	d1ee      	bne.n	80162ae <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x5a>
 80162d0:	2300      	movs	r3, #0
 80162d2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80162d6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80162da:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 80162de:	7e23      	ldrb	r3, [r4, #24]
 80162e0:	6861      	ldr	r1, [r4, #4]
 80162e2:	42b2      	cmp	r2, r6
 80162e4:	d21a      	bcs.n	801631c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xc8>
 80162e6:	9803      	ldr	r0, [sp, #12]
 80162e8:	07c9      	lsls	r1, r1, #31
 80162ea:	4410      	add	r0, r2
 80162ec:	eba6 0602 	sub.w	r6, r6, r2
 80162f0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80162f4:	d404      	bmi.n	8016300 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 80162f6:	b922      	cbnz	r2, 8016302 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xae>
 80162f8:	9300      	str	r3, [sp, #0]
 80162fa:	4a4e      	ldr	r2, [pc, #312]	; (8016434 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80162fc:	4b4e      	ldr	r3, [pc, #312]	; (8016438 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 80162fe:	e003      	b.n	8016308 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb4>
 8016300:	b312      	cbz	r2, 8016348 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xf4>
 8016302:	9300      	str	r3, [sp, #0]
 8016304:	4a4d      	ldr	r2, [pc, #308]	; (801643c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8016306:	4b4c      	ldr	r3, [pc, #304]	; (8016438 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8016308:	4631      	mov	r1, r6
 801630a:	f7f4 f957 	bl	800a5bc <snprintf>
 801630e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016312:	4286      	cmp	r6, r0
 8016314:	bfa4      	itt	ge
 8016316:	181b      	addge	r3, r3, r0
 8016318:	f8ad 3012 	strhge.w	r3, [sp, #18]
 801631c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8016320:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8016324:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8016328:	6861      	ldr	r1, [r4, #4]
 801632a:	42b2      	cmp	r2, r6
 801632c:	d21f      	bcs.n	801636e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x11a>
 801632e:	9803      	ldr	r0, [sp, #12]
 8016330:	05c9      	lsls	r1, r1, #23
 8016332:	4410      	add	r0, r2
 8016334:	eba6 0602 	sub.w	r6, r6, r2
 8016338:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801633c:	d408      	bmi.n	8016350 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xfc>
 801633e:	b94a      	cbnz	r2, 8016354 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x100>
 8016340:	9300      	str	r3, [sp, #0]
 8016342:	4a3c      	ldr	r2, [pc, #240]	; (8016434 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8016344:	4b3e      	ldr	r3, [pc, #248]	; (8016440 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8016346:	e008      	b.n	801635a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 8016348:	9300      	str	r3, [sp, #0]
 801634a:	4a3e      	ldr	r2, [pc, #248]	; (8016444 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 801634c:	4b3a      	ldr	r3, [pc, #232]	; (8016438 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 801634e:	e7db      	b.n	8016308 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb4>
 8016350:	2a00      	cmp	r2, #0
 8016352:	d03c      	beq.n	80163ce <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x17a>
 8016354:	9300      	str	r3, [sp, #0]
 8016356:	4a39      	ldr	r2, [pc, #228]	; (801643c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8016358:	4b39      	ldr	r3, [pc, #228]	; (8016440 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 801635a:	4631      	mov	r1, r6
 801635c:	f7f4 f92e 	bl	800a5bc <snprintf>
 8016360:	4286      	cmp	r6, r0
 8016362:	bfa2      	ittt	ge
 8016364:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8016368:	18c0      	addge	r0, r0, r3
 801636a:	f8ad 0012 	strhge.w	r0, [sp, #18]
 801636e:	4936      	ldr	r1, [pc, #216]	; (8016448 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8016370:	a803      	add	r0, sp, #12
 8016372:	f001 f9e1 	bl	8017738 <PropertiesBuilder::AddComment(char const*)>
 8016376:	6863      	ldr	r3, [r4, #4]
 8016378:	68a2      	ldr	r2, [r4, #8]
 801637a:	4934      	ldr	r1, [pc, #208]	; (801644c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f8>)
 801637c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016380:	a803      	add	r0, sp, #12
 8016382:	f001 f995 	bl	80176b0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8016386:	6863      	ldr	r3, [r4, #4]
 8016388:	68e2      	ldr	r2, [r4, #12]
 801638a:	4931      	ldr	r1, [pc, #196]	; (8016450 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1fc>)
 801638c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016390:	a803      	add	r0, sp, #12
 8016392:	f001 f98d 	bl	80176b0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8016396:	6863      	ldr	r3, [r4, #4]
 8016398:	6922      	ldr	r2, [r4, #16]
 801639a:	492e      	ldr	r1, [pc, #184]	; (8016454 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x200>)
 801639c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80163a0:	a803      	add	r0, sp, #12
 80163a2:	f001 f985 	bl	80176b0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80163a6:	6862      	ldr	r2, [r4, #4]
 80163a8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80163ac:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80163b0:	42a3      	cmp	r3, r4
 80163b2:	d21e      	bcs.n	80163f2 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x19e>
 80163b4:	9803      	ldr	r0, [sp, #12]
 80163b6:	0692      	lsls	r2, r2, #26
 80163b8:	4418      	add	r0, r3
 80163ba:	eba4 0403 	sub.w	r4, r4, r3
 80163be:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80163c2:	d408      	bmi.n	80163d6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x182>
 80163c4:	b943      	cbnz	r3, 80163d8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x184>
 80163c6:	4b24      	ldr	r3, [pc, #144]	; (8016458 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 80163c8:	4a24      	ldr	r2, [pc, #144]	; (801645c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 80163ca:	9500      	str	r5, [sp, #0]
 80163cc:	e007      	b.n	80163de <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18a>
 80163ce:	9300      	str	r3, [sp, #0]
 80163d0:	4a1c      	ldr	r2, [pc, #112]	; (8016444 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 80163d2:	4b1b      	ldr	r3, [pc, #108]	; (8016440 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 80163d4:	e7c1      	b.n	801635a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 80163d6:	b32b      	cbz	r3, 8016424 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d0>
 80163d8:	4b1f      	ldr	r3, [pc, #124]	; (8016458 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 80163da:	4a21      	ldr	r2, [pc, #132]	; (8016460 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x20c>)
 80163dc:	9500      	str	r5, [sp, #0]
 80163de:	4621      	mov	r1, r4
 80163e0:	f7f4 f8ec 	bl	800a5bc <snprintf>
 80163e4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80163e8:	4284      	cmp	r4, r0
 80163ea:	bfa4      	itt	ge
 80163ec:	181b      	addge	r3, r3, r0
 80163ee:	f8ad 3012 	strhge.w	r3, [sp, #18]
 80163f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80163f6:	b17b      	cbz	r3, 8016418 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1c4>
 80163f8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80163fc:	9b03      	ldr	r3, [sp, #12]
 80163fe:	4413      	add	r3, r2
 8016400:	227d      	movs	r2, #125	; 0x7d
 8016402:	f803 2c01 	strb.w	r2, [r3, #-1]
 8016406:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801640a:	9903      	ldr	r1, [sp, #12]
 801640c:	54ca      	strb	r2, [r1, r3]
 801640e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016412:	3301      	adds	r3, #1
 8016414:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016418:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801641c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801641e:	601a      	str	r2, [r3, #0]
 8016420:	b006      	add	sp, #24
 8016422:	bd70      	pop	{r4, r5, r6, pc}
 8016424:	4b0c      	ldr	r3, [pc, #48]	; (8016458 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 8016426:	4a0f      	ldr	r2, [pc, #60]	; (8016464 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x210>)
 8016428:	9500      	str	r5, [sp, #0]
 801642a:	e7d8      	b.n	80163de <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18a>
 801642c:	0801d739 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, sl, ip, lr, pc}
 8016430:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 8016434:	0801aff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8016438:	0801d730 	stmdaeq	r1, {r4, r5, r8, r9, sl, ip, lr, pc}
 801643c:	0801afec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8016440:	0801d70e 	stmdaeq	r1, {r1, r2, r3, r8, r9, sl, ip, lr, pc}
 8016444:	0801aff6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8016448:	0801d6e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, sl, ip, lr, pc}
 801644c:	0801d6f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, sl, ip, lr, pc}
 8016450:	0801d727 	stmdaeq	r1, {r0, r1, r2, r5, r8, r9, sl, ip, lr, pc}
 8016454:	0801d6fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r9, sl, ip, lr, pc}
 8016458:	0801d71e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, sl, ip, lr, pc}
 801645c:	0801b008 	stmdaeq	r1, {r3, ip, sp, pc}
 8016460:	0801affd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8016464:	0801b009 	stmdaeq	r1, {r0, r3, ip, sp, pc}

08016468 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 8016468:	b513      	push	{r0, r1, r4, lr}
 801646a:	6804      	ldr	r4, [r0, #0]
 801646c:	b914      	cbnz	r4, 8016474 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 801646e:	601c      	str	r4, [r3, #0]
 8016470:	b002      	add	sp, #8
 8016472:	bd10      	pop	{r4, pc}
 8016474:	9300      	str	r3, [sp, #0]
 8016476:	4613      	mov	r3, r2
 8016478:	460a      	mov	r2, r1
 801647a:	2100      	movs	r1, #0
 801647c:	f7ff feea 	bl	8016254 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>
 8016480:	e7f6      	b.n	8016470 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

08016482 <NetworkParams::Dump()>:
 8016482:	4770      	bx	lr

08016484 <memcpy.isra.0>:
 8016484:	3801      	subs	r0, #1
 8016486:	440a      	add	r2, r1
 8016488:	4291      	cmp	r1, r2
 801648a:	d100      	bne.n	801648e <memcpy.isra.0+0xa>
 801648c:	4770      	bx	lr
 801648e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016492:	f800 3f01 	strb.w	r3, [r0, #1]!
 8016496:	e7f7      	b.n	8016488 <memcpy.isra.0+0x4>

08016498 <arp_announce>:
 8016498:	4803      	ldr	r0, [pc, #12]	; (80164a8 <arp_announce+0x10>)
 801649a:	69c3      	ldr	r3, [r0, #28]
 801649c:	b113      	cbz	r3, 80164a4 <arp_announce+0xc>
 801649e:	212a      	movs	r1, #42	; 0x2a
 80164a0:	f002 bfc4 	b.w	801942c <emac_eth_send>
 80164a4:	4770      	bx	lr
 80164a6:	bf00      	nop
 80164a8:	2000fa14 	andcs	pc, r0, r4, lsl sl	; <UNPREDICTABLE>

080164ac <arp_handle_request>:
 80164ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164ae:	2204      	movs	r2, #4
 80164b0:	f100 0126 	add.w	r1, r0, #38	; 0x26
 80164b4:	4604      	mov	r4, r0
 80164b6:	eb0d 0002 	add.w	r0, sp, r2
 80164ba:	f7ff ffe3 	bl	8016484 <memcpy.isra.0>
 80164be:	4b0d      	ldr	r3, [pc, #52]	; (80164f4 <arp_handle_request+0x48>)
 80164c0:	9a01      	ldr	r2, [sp, #4]
 80164c2:	69db      	ldr	r3, [r3, #28]
 80164c4:	429a      	cmp	r2, r3
 80164c6:	d113      	bne.n	80164f0 <arp_handle_request+0x44>
 80164c8:	4d0b      	ldr	r5, [pc, #44]	; (80164f8 <arp_handle_request+0x4c>)
 80164ca:	2206      	movs	r2, #6
 80164cc:	18a1      	adds	r1, r4, r2
 80164ce:	4628      	mov	r0, r5
 80164d0:	f7ff ffd8 	bl	8016484 <memcpy.isra.0>
 80164d4:	f104 0116 	add.w	r1, r4, #22
 80164d8:	f105 0020 	add.w	r0, r5, #32
 80164dc:	2206      	movs	r2, #6
 80164de:	f7ff ffd1 	bl	8016484 <memcpy.isra.0>
 80164e2:	69e3      	ldr	r3, [r4, #28]
 80164e4:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 80164e8:	212a      	movs	r1, #42	; 0x2a
 80164ea:	4628      	mov	r0, r5
 80164ec:	f002 ff9e 	bl	801942c <emac_eth_send>
 80164f0:	b003      	add	sp, #12
 80164f2:	bd30      	pop	{r4, r5, pc}
 80164f4:	2000fa14 	andcs	pc, r0, r4, lsl sl	; <UNPREDICTABLE>
 80164f8:	2000fa40 	andcs	pc, r0, r0, asr #20

080164fc <arp_handle_reply>:
 80164fc:	69c1      	ldr	r1, [r0, #28]
 80164fe:	3016      	adds	r0, #22
 8016500:	f000 b80a 	b.w	8016518 <arp_cache_update>

08016504 <arp_send_request>:
 8016504:	4b03      	ldr	r3, [pc, #12]	; (8016514 <arp_send_request+0x10>)
 8016506:	212a      	movs	r1, #42	; 0x2a
 8016508:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 801650c:	4618      	mov	r0, r3
 801650e:	f002 bf8d 	b.w	801942c <emac_eth_send>
 8016512:	bf00      	nop
 8016514:	2000fa6c 	andcs	pc, r0, ip, ror #20

08016518 <arp_cache_update>:
 8016518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801651a:	4c12      	ldr	r4, [pc, #72]	; (8016564 <arp_cache_update+0x4c>)
 801651c:	8823      	ldrh	r3, [r4, #0]
 801651e:	2b20      	cmp	r3, #32
 8016520:	d019      	beq.n	8016556 <arp_cache_update+0x3e>
 8016522:	2500      	movs	r5, #0
 8016524:	1d22      	adds	r2, r4, #4
 8016526:	260c      	movs	r6, #12
 8016528:	b2af      	uxth	r7, r5
 801652a:	42bb      	cmp	r3, r7
 801652c:	d80c      	bhi.n	8016548 <arp_cache_update+0x30>
 801652e:	fb06 2203 	mla	r2, r6, r3, r2
 8016532:	3203      	adds	r2, #3
 8016534:	1d85      	adds	r5, r0, #6
 8016536:	42a8      	cmp	r0, r5
 8016538:	d10e      	bne.n	8016558 <arp_cache_update+0x40>
 801653a:	220c      	movs	r2, #12
 801653c:	fb02 4203 	mla	r2, r2, r3, r4
 8016540:	3301      	adds	r3, #1
 8016542:	6051      	str	r1, [r2, #4]
 8016544:	8023      	strh	r3, [r4, #0]
 8016546:	e006      	b.n	8016556 <arp_cache_update+0x3e>
 8016548:	3501      	adds	r5, #1
 801654a:	fb06 2705 	mla	r7, r6, r5, r2
 801654e:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 8016552:	428f      	cmp	r7, r1
 8016554:	d1e8      	bne.n	8016528 <arp_cache_update+0x10>
 8016556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016558:	f810 6b01 	ldrb.w	r6, [r0], #1
 801655c:	f802 6f01 	strb.w	r6, [r2, #1]!
 8016560:	e7e9      	b.n	8016536 <arp_cache_update+0x1e>
 8016562:	bf00      	nop
 8016564:	100011a4 	andne	r1, r0, r4, lsr #3

08016568 <arp_cache_lookup>:
 8016568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801656c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80165fc <arp_cache_lookup+0x94>
 8016570:	4606      	mov	r6, r0
 8016572:	460c      	mov	r4, r1
 8016574:	2200      	movs	r2, #0
 8016576:	200c      	movs	r0, #12
 8016578:	fb00 f302 	mul.w	r3, r0, r2
 801657c:	f853 1008 	ldr.w	r1, [r3, r8]
 8016580:	42b1      	cmp	r1, r6
 8016582:	d10d      	bne.n	80165a0 <arp_cache_lookup+0x38>
 8016584:	3304      	adds	r3, #4
 8016586:	4443      	add	r3, r8
 8016588:	3c01      	subs	r4, #1
 801658a:	1d9a      	adds	r2, r3, #6
 801658c:	4293      	cmp	r3, r2
 801658e:	d102      	bne.n	8016596 <arp_cache_lookup+0x2e>
 8016590:	4630      	mov	r0, r6
 8016592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016596:	f813 1b01 	ldrb.w	r1, [r3], #1
 801659a:	f804 1f01 	strb.w	r1, [r4, #1]!
 801659e:	e7f5      	b.n	801658c <arp_cache_lookup+0x24>
 80165a0:	b111      	cbz	r1, 80165a8 <arp_cache_lookup+0x40>
 80165a2:	3201      	adds	r2, #1
 80165a4:	2a20      	cmp	r2, #32
 80165a6:	d1e7      	bne.n	8016578 <arp_cache_lookup+0x10>
 80165a8:	f8df a054 	ldr.w	sl, [pc, #84]	; 8016600 <arp_cache_lookup+0x98>
 80165ac:	f8ba 5000 	ldrh.w	r5, [sl]
 80165b0:	2704      	movs	r7, #4
 80165b2:	3f01      	subs	r7, #1
 80165b4:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80165b8:	d101      	bne.n	80165be <arp_cache_lookup+0x56>
 80165ba:	463e      	mov	r6, r7
 80165bc:	e7e8      	b.n	8016590 <arp_cache_lookup+0x28>
 80165be:	4630      	mov	r0, r6
 80165c0:	f7ff ffa0 	bl	8016504 <arp_send_request>
 80165c4:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 80165c8:	f1b9 0901 	subs.w	r9, r9, #1
 80165cc:	f8ba 3000 	ldrh.w	r3, [sl]
 80165d0:	d011      	beq.n	80165f6 <arp_cache_lookup+0x8e>
 80165d2:	429d      	cmp	r5, r3
 80165d4:	d00c      	beq.n	80165f0 <arp_cache_lookup+0x88>
 80165d6:	230c      	movs	r3, #12
 80165d8:	fb03 8505 	mla	r5, r3, r5, r8
 80165dc:	1d2b      	adds	r3, r5, #4
 80165de:	3c01      	subs	r4, #1
 80165e0:	350a      	adds	r5, #10
 80165e2:	42ab      	cmp	r3, r5
 80165e4:	d0d4      	beq.n	8016590 <arp_cache_lookup+0x28>
 80165e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80165ee:	e7f8      	b.n	80165e2 <arp_cache_lookup+0x7a>
 80165f0:	f7f1 ffb8 	bl	8008564 <net_handle>
 80165f4:	e7e8      	b.n	80165c8 <arp_cache_lookup+0x60>
 80165f6:	429d      	cmp	r5, r3
 80165f8:	d0db      	beq.n	80165b2 <arp_cache_lookup+0x4a>
 80165fa:	e7ec      	b.n	80165d6 <arp_cache_lookup+0x6e>
 80165fc:	100011a8 	andne	r1, r0, r8, lsr #3
 8016600:	100011a4 	andne	r1, r0, r4, lsr #3

08016604 <_parse_response>:
 8016604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016608:	2400      	movs	r4, #0
 801660a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 801660e:	4e52      	ldr	r6, [pc, #328]	; (8016758 <_parse_response+0x154>)
 8016610:	9009      	str	r0, [sp, #36]	; 0x24
 8016612:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8016616:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801661a:	6833      	ldr	r3, [r6, #0]
 801661c:	9402      	str	r4, [sp, #8]
 801661e:	460d      	mov	r5, r1
 8016620:	46a3      	mov	fp, r4
 8016622:	4627      	mov	r7, r4
 8016624:	46a2      	mov	sl, r4
 8016626:	46a1      	mov	r9, r4
 8016628:	9407      	str	r4, [sp, #28]
 801662a:	46a0      	mov	r8, r4
 801662c:	9308      	str	r3, [sp, #32]
 801662e:	f7f1 ff99 	bl	8008564 <net_handle>
 8016632:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8016636:	9300      	str	r3, [sp, #0]
 8016638:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801663c:	ab0c      	add	r3, sp, #48	; 0x30
 801663e:	f44f 7209 	mov.w	r2, #548	; 0x224
 8016642:	a90d      	add	r1, sp, #52	; 0x34
 8016644:	f7fe fcd4 	bl	8014ff0 <udp_recv>
 8016648:	2800      	cmp	r0, #0
 801664a:	d040      	beq.n	80166ce <_parse_response+0xca>
 801664c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8016650:	2b43      	cmp	r3, #67	; 0x43
 8016652:	d13c      	bne.n	80166ce <_parse_response+0xca>
 8016654:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8016658:	1e6b      	subs	r3, r5, #1
 801665a:	1d69      	adds	r1, r5, #5
 801665c:	4299      	cmp	r1, r3
 801665e:	d130      	bne.n	80166c2 <_parse_response+0xbe>
 8016660:	2500      	movs	r5, #0
 8016662:	ab0d      	add	r3, sp, #52	; 0x34
 8016664:	4418      	add	r0, r3
 8016666:	46ac      	mov	ip, r5
 8016668:	462e      	mov	r6, r5
 801666a:	ab49      	add	r3, sp, #292	; 0x124
 801666c:	4629      	mov	r1, r5
 801666e:	4283      	cmp	r3, r0
 8016670:	d338      	bcc.n	80166e4 <_parse_response+0xe0>
 8016672:	b145      	cbz	r5, 8016686 <_parse_response+0x82>
 8016674:	4b39      	ldr	r3, [pc, #228]	; (801675c <_parse_response+0x158>)
 8016676:	9a07      	ldr	r2, [sp, #28]
 8016678:	709a      	strb	r2, [r3, #2]
 801667a:	9a06      	ldr	r2, [sp, #24]
 801667c:	705a      	strb	r2, [r3, #1]
 801667e:	9a05      	ldr	r2, [sp, #20]
 8016680:	f883 8003 	strb.w	r8, [r3, #3]
 8016684:	701a      	strb	r2, [r3, #0]
 8016686:	f1bc 0f00 	cmp.w	ip, #0
 801668a:	d007      	beq.n	801669c <_parse_response+0x98>
 801668c:	4b34      	ldr	r3, [pc, #208]	; (8016760 <_parse_response+0x15c>)
 801668e:	9a04      	ldr	r2, [sp, #16]
 8016690:	70da      	strb	r2, [r3, #3]
 8016692:	9a03      	ldr	r2, [sp, #12]
 8016694:	709a      	strb	r2, [r3, #2]
 8016696:	9a02      	ldr	r2, [sp, #8]
 8016698:	705c      	strb	r4, [r3, #1]
 801669a:	701a      	strb	r2, [r3, #0]
 801669c:	b13e      	cbz	r6, 80166ae <_parse_response+0xaa>
 801669e:	4b31      	ldr	r3, [pc, #196]	; (8016764 <_parse_response+0x160>)
 80166a0:	70df      	strb	r7, [r3, #3]
 80166a2:	f883 a002 	strb.w	sl, [r3, #2]
 80166a6:	f883 9001 	strb.w	r9, [r3, #1]
 80166aa:	f883 b000 	strb.w	fp, [r3]
 80166ae:	2902      	cmp	r1, #2
 80166b0:	bf02      	ittt	eq
 80166b2:	4b2d      	ldreq	r3, [pc, #180]	; (8016768 <_parse_response+0x164>)
 80166b4:	9a11      	ldreq	r2, [sp, #68]	; 0x44
 80166b6:	601a      	streq	r2, [r3, #0]
 80166b8:	4608      	mov	r0, r1
 80166ba:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 80166be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166c2:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 80166c6:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 80166ca:	45e6      	cmp	lr, ip
 80166cc:	d0c6      	beq.n	801665c <_parse_response+0x58>
 80166ce:	6833      	ldr	r3, [r6, #0]
 80166d0:	9a08      	ldr	r2, [sp, #32]
 80166d2:	1a9b      	subs	r3, r3, r2
 80166d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80166d8:	d3a9      	bcc.n	801662e <_parse_response+0x2a>
 80166da:	2800      	cmp	r0, #0
 80166dc:	d1c0      	bne.n	8016660 <_parse_response+0x5c>
 80166de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80166e2:	e7ea      	b.n	80166ba <_parse_response+0xb6>
 80166e4:	781a      	ldrb	r2, [r3, #0]
 80166e6:	2a35      	cmp	r2, #53	; 0x35
 80166e8:	d011      	beq.n	801670e <_parse_response+0x10a>
 80166ea:	d808      	bhi.n	80166fe <_parse_response+0xfa>
 80166ec:	2a01      	cmp	r2, #1
 80166ee:	d011      	beq.n	8016714 <_parse_response+0x110>
 80166f0:	2a03      	cmp	r2, #3
 80166f2:	d019      	beq.n	8016728 <_parse_response+0x124>
 80166f4:	b14a      	cbz	r2, 801670a <_parse_response+0x106>
 80166f6:	1c9a      	adds	r2, r3, #2
 80166f8:	785b      	ldrb	r3, [r3, #1]
 80166fa:	4413      	add	r3, r2
 80166fc:	e7b7      	b.n	801666e <_parse_response+0x6a>
 80166fe:	2a36      	cmp	r2, #54	; 0x36
 8016700:	d01f      	beq.n	8016742 <_parse_response+0x13e>
 8016702:	2aff      	cmp	r2, #255	; 0xff
 8016704:	d1f7      	bne.n	80166f6 <_parse_response+0xf2>
 8016706:	4603      	mov	r3, r0
 8016708:	e7b1      	b.n	801666e <_parse_response+0x6a>
 801670a:	3301      	adds	r3, #1
 801670c:	e7af      	b.n	801666e <_parse_response+0x6a>
 801670e:	7899      	ldrb	r1, [r3, #2]
 8016710:	3303      	adds	r3, #3
 8016712:	e7ac      	b.n	801666e <_parse_response+0x6a>
 8016714:	f893 b002 	ldrb.w	fp, [r3, #2]
 8016718:	f893 9003 	ldrb.w	r9, [r3, #3]
 801671c:	f893 a004 	ldrb.w	sl, [r3, #4]
 8016720:	795f      	ldrb	r7, [r3, #5]
 8016722:	4616      	mov	r6, r2
 8016724:	3306      	adds	r3, #6
 8016726:	e7a2      	b.n	801666e <_parse_response+0x6a>
 8016728:	789a      	ldrb	r2, [r3, #2]
 801672a:	9202      	str	r2, [sp, #8]
 801672c:	791a      	ldrb	r2, [r3, #4]
 801672e:	9203      	str	r2, [sp, #12]
 8016730:	795a      	ldrb	r2, [r3, #5]
 8016732:	9204      	str	r2, [sp, #16]
 8016734:	785a      	ldrb	r2, [r3, #1]
 8016736:	78dc      	ldrb	r4, [r3, #3]
 8016738:	4413      	add	r3, r2
 801673a:	3302      	adds	r3, #2
 801673c:	f04f 0c01 	mov.w	ip, #1
 8016740:	e795      	b.n	801666e <_parse_response+0x6a>
 8016742:	789a      	ldrb	r2, [r3, #2]
 8016744:	9205      	str	r2, [sp, #20]
 8016746:	78da      	ldrb	r2, [r3, #3]
 8016748:	9206      	str	r2, [sp, #24]
 801674a:	791a      	ldrb	r2, [r3, #4]
 801674c:	f893 8005 	ldrb.w	r8, [r3, #5]
 8016750:	9207      	str	r2, [sp, #28]
 8016752:	3306      	adds	r3, #6
 8016754:	2501      	movs	r5, #1
 8016756:	e78a      	b.n	801666e <_parse_response+0x6a>
 8016758:	2000fddc 	ldrdcs	pc, [r0], -ip
 801675c:	2000fcc8 	andcs	pc, r0, r8, asr #25
 8016760:	2000fa98 	mulcs	r0, r8, sl
 8016764:	2000faa0 	andcs	pc, r0, r0, lsr #21
 8016768:	2000fa9c 	mulcs	r0, ip, sl

0801676c <memcpy.isra.0>:
 801676c:	3801      	subs	r0, #1
 801676e:	440a      	add	r2, r1
 8016770:	4291      	cmp	r1, r2
 8016772:	d100      	bne.n	8016776 <memcpy.isra.0+0xa>
 8016774:	4770      	bx	lr
 8016776:	f811 3b01 	ldrb.w	r3, [r1], #1
 801677a:	f800 3f01 	strb.w	r3, [r0, #1]!
 801677e:	e7f7      	b.n	8016770 <memcpy.isra.0+0x4>

08016780 <dhcp_client>:
 8016780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016784:	b087      	sub	sp, #28
 8016786:	460f      	mov	r7, r1
 8016788:	9203      	str	r2, [sp, #12]
 801678a:	4a77      	ldr	r2, [pc, #476]	; (8016968 <dhcp_client+0x1e8>)
 801678c:	4605      	mov	r5, r0
 801678e:	f44f 7309 	mov.w	r3, #548	; 0x224
 8016792:	4614      	mov	r4, r2
 8016794:	2100      	movs	r1, #0
 8016796:	3b01      	subs	r3, #1
 8016798:	f802 1b01 	strb.w	r1, [r2], #1
 801679c:	d1fb      	bne.n	8016796 <dhcp_client+0x16>
 801679e:	f240 1301 	movw	r3, #257	; 0x101
 80167a2:	2206      	movs	r2, #6
 80167a4:	4871      	ldr	r0, [pc, #452]	; (801696c <dhcp_client+0x1ec>)
 80167a6:	8023      	strh	r3, [r4, #0]
 80167a8:	4629      	mov	r1, r5
 80167aa:	70a2      	strb	r2, [r4, #2]
 80167ac:	f7ff ffde 	bl	801676c <memcpy.isra.0>
 80167b0:	4b6f      	ldr	r3, [pc, #444]	; (8016970 <dhcp_client+0x1f0>)
 80167b2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80167b6:	f240 1335 	movw	r3, #309	; 0x135
 80167ba:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 80167be:	2044      	movs	r0, #68	; 0x44
 80167c0:	f7fe fbdc 	bl	8014f7c <udp_bind>
 80167c4:	1e06      	subs	r6, r0, #0
 80167c6:	f2c0 80c9 	blt.w	801695c <dhcp_client+0x1dc>
 80167ca:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8016968 <dhcp_client+0x1e8>
 80167ce:	f04f 0915 	mov.w	r9, #21
 80167d2:	f1b9 0901 	subs.w	r9, r9, #1
 80167d6:	d11f      	bne.n	8016818 <dhcp_client+0x98>
 80167d8:	464c      	mov	r4, r9
 80167da:	2044      	movs	r0, #68	; 0x44
 80167dc:	f7fe fbe8 	bl	8014fb0 <udp_unbind>
 80167e0:	2c00      	cmp	r4, #0
 80167e2:	f000 80be 	beq.w	8016962 <dhcp_client+0x1e2>
 80167e6:	4963      	ldr	r1, [pc, #396]	; (8016974 <dhcp_client+0x1f4>)
 80167e8:	2204      	movs	r2, #4
 80167ea:	a805      	add	r0, sp, #20
 80167ec:	f7ff ffbe 	bl	801676c <memcpy.isra.0>
 80167f0:	9b05      	ldr	r3, [sp, #20]
 80167f2:	4961      	ldr	r1, [pc, #388]	; (8016978 <dhcp_client+0x1f8>)
 80167f4:	603b      	str	r3, [r7, #0]
 80167f6:	2204      	movs	r2, #4
 80167f8:	a805      	add	r0, sp, #20
 80167fa:	f7ff ffb7 	bl	801676c <memcpy.isra.0>
 80167fe:	9b05      	ldr	r3, [sp, #20]
 8016800:	60bb      	str	r3, [r7, #8]
 8016802:	a805      	add	r0, sp, #20
 8016804:	495d      	ldr	r1, [pc, #372]	; (801697c <dhcp_client+0x1fc>)
 8016806:	2204      	movs	r2, #4
 8016808:	f7ff ffb0 	bl	801676c <memcpy.isra.0>
 801680c:	9b05      	ldr	r3, [sp, #20]
 801680e:	607b      	str	r3, [r7, #4]
 8016810:	2000      	movs	r0, #0
 8016812:	b007      	add	sp, #28
 8016814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016818:	f643 5301 	movw	r3, #15617	; 0x3d01
 801681c:	f240 1807 	movw	r8, #263	; 0x107
 8016820:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8016824:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8016828:	782b      	ldrb	r3, [r5, #0]
 801682a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 801682e:	786b      	ldrb	r3, [r5, #1]
 8016830:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8016834:	78ab      	ldrb	r3, [r5, #2]
 8016836:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 801683a:	78eb      	ldrb	r3, [r5, #3]
 801683c:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8016840:	792b      	ldrb	r3, [r5, #4]
 8016842:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8016846:	796b      	ldrb	r3, [r5, #5]
 8016848:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 801684c:	4a4c      	ldr	r2, [pc, #304]	; (8016980 <dhcp_client+0x200>)
 801684e:	4b4d      	ldr	r3, [pc, #308]	; (8016984 <dhcp_client+0x204>)
 8016850:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8016854:	23ff      	movs	r3, #255	; 0xff
 8016856:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 801685a:	fa5f fb86 	uxtb.w	fp, r6
 801685e:	2343      	movs	r3, #67	; 0x43
 8016860:	9300      	str	r3, [sp, #0]
 8016862:	f240 1205 	movw	r2, #261	; 0x105
 8016866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801686a:	4651      	mov	r1, sl
 801686c:	4658      	mov	r0, fp
 801686e:	f7fe fc1b 	bl	80150a8 <udp_send>
 8016872:	4629      	mov	r1, r5
 8016874:	4630      	mov	r0, r6
 8016876:	f7ff fec5 	bl	8016604 <_parse_response>
 801687a:	2802      	cmp	r0, #2
 801687c:	d1a9      	bne.n	80167d2 <dhcp_client+0x52>
 801687e:	f643 5303 	movw	r3, #15619	; 0x3d03
 8016882:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8016886:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 801688a:	782b      	ldrb	r3, [r5, #0]
 801688c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8016890:	786b      	ldrb	r3, [r5, #1]
 8016892:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8016896:	78ab      	ldrb	r3, [r5, #2]
 8016898:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 801689c:	78eb      	ldrb	r3, [r5, #3]
 801689e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 80168a2:	792b      	ldrb	r3, [r5, #4]
 80168a4:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 80168a8:	796b      	ldrb	r3, [r5, #5]
 80168aa:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 80168ae:	f240 4332 	movw	r3, #1074	; 0x432
 80168b2:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 80168b6:	4b2f      	ldr	r3, [pc, #188]	; (8016974 <dhcp_client+0x1f4>)
 80168b8:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 801698c <dhcp_client+0x20c>
 80168bc:	881a      	ldrh	r2, [r3, #0]
 80168be:	885b      	ldrh	r3, [r3, #2]
 80168c0:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 80168c4:	f240 4336 	movw	r3, #1078	; 0x436
 80168c8:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 80168cc:	4b2e      	ldr	r3, [pc, #184]	; (8016988 <dhcp_client+0x208>)
 80168ce:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 80168d8:	230c      	movs	r3, #12
 80168da:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 80168de:	9b03      	ldr	r3, [sp, #12]
 80168e0:	221e      	movs	r2, #30
 80168e2:	1e58      	subs	r0, r3, #1
 80168e4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80168e8:	f1a2 0e1e 	sub.w	lr, r2, #30
 80168ec:	1c51      	adds	r1, r2, #1
 80168ee:	bb8b      	cbnz	r3, 8016954 <dhcp_client+0x1d4>
 80168f0:	18a3      	adds	r3, r4, r2
 80168f2:	2037      	movs	r0, #55	; 0x37
 80168f4:	4421      	add	r1, r4
 80168f6:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 80168fa:	2006      	movs	r0, #6
 80168fc:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8016900:	2103      	movs	r1, #3
 8016902:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 8016906:	210f      	movs	r1, #15
 8016908:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 801690c:	213a      	movs	r1, #58	; 0x3a
 801690e:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8016912:	213b      	movs	r1, #59	; 0x3b
 8016914:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8016918:	f04f 0801 	mov.w	r8, #1
 801691c:	21ff      	movs	r1, #255	; 0xff
 801691e:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8016922:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8016926:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 801692a:	32f5      	adds	r2, #245	; 0xf5
 801692c:	2343      	movs	r3, #67	; 0x43
 801692e:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8016932:	b292      	uxth	r2, r2
 8016934:	9300      	str	r3, [sp, #0]
 8016936:	4651      	mov	r1, sl
 8016938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801693c:	4658      	mov	r0, fp
 801693e:	f7fe fbb3 	bl	80150a8 <udp_send>
 8016942:	4629      	mov	r1, r5
 8016944:	4630      	mov	r0, r6
 8016946:	f7ff fe5d 	bl	8016604 <_parse_response>
 801694a:	2805      	cmp	r0, #5
 801694c:	f47f af41 	bne.w	80167d2 <dhcp_client+0x52>
 8016950:	4644      	mov	r4, r8
 8016952:	e742      	b.n	80167da <dhcp_client+0x5a>
 8016954:	f80c 3f01 	strb.w	r3, [ip, #1]!
 8016958:	460a      	mov	r2, r1
 801695a:	e7c3      	b.n	80168e4 <dhcp_client+0x164>
 801695c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016960:	e757      	b.n	8016812 <dhcp_client+0x92>
 8016962:	f06f 0001 	mvn.w	r0, #1
 8016966:	e754      	b.n	8016812 <dhcp_client+0x92>
 8016968:	2000faa4 	andcs	pc, r0, r4, lsr #21
 801696c:	2000fac0 	andcs	pc, r0, r0, asr #21
 8016970:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8016974:	2000fa9c 	mulcs	r0, ip, sl
 8016978:	2000fa98 	mulcs	r0, r8, sl
 801697c:	2000faa0 	andcs	pc, r0, r0, lsr #21
 8016980:	03010637 	movweq	r0, #5687	; 0x1637
 8016984:	3b3a0f06 	blcc	8e9a5a4 <__exidx_end+0xe7c578>
 8016988:	2000fcc8 	andcs	pc, r0, r8, asr #25
 801698c:	2000fbad 	andcs	pc, r0, sp, lsr #23

08016990 <dhcp_client_release>:
 8016990:	b507      	push	{r0, r1, r2, lr}
 8016992:	2044      	movs	r0, #68	; 0x44
 8016994:	f7fe faf2 	bl	8014f7c <udp_bind>
 8016998:	4912      	ldr	r1, [pc, #72]	; (80169e4 <dhcp_client_release+0x54>)
 801699a:	f243 6307 	movw	r3, #13831	; 0x3607
 801699e:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 80169a2:	2304      	movs	r3, #4
 80169a4:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 80169a8:	4b0f      	ldr	r3, [pc, #60]	; (80169e8 <dhcp_client_release+0x58>)
 80169aa:	781a      	ldrb	r2, [r3, #0]
 80169ac:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 80169b0:	785a      	ldrb	r2, [r3, #1]
 80169b2:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 80169b6:	789a      	ldrb	r2, [r3, #2]
 80169b8:	78db      	ldrb	r3, [r3, #3]
 80169ba:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 80169be:	23ff      	movs	r3, #255	; 0xff
 80169c0:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 80169c4:	2343      	movs	r3, #67	; 0x43
 80169c6:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 80169ca:	b2c0      	uxtb	r0, r0
 80169cc:	9300      	str	r3, [sp, #0]
 80169ce:	22fa      	movs	r2, #250	; 0xfa
 80169d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80169d4:	f7fe fb68 	bl	80150a8 <udp_send>
 80169d8:	2044      	movs	r0, #68	; 0x44
 80169da:	b003      	add	sp, #12
 80169dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80169e0:	f7fe bae6 	b.w	8014fb0 <udp_unbind>
 80169e4:	2000faa4 	andcs	pc, r0, r4, lsr #21
 80169e8:	2000fcc8 	andcs	pc, r0, r8, asr #25

080169ec <memcpy.isra.0>:
 80169ec:	3801      	subs	r0, #1
 80169ee:	440a      	add	r2, r1
 80169f0:	4291      	cmp	r1, r2
 80169f2:	d100      	bne.n	80169f6 <memcpy.isra.0+0xa>
 80169f4:	4770      	bx	lr
 80169f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80169fa:	f800 3f01 	strb.w	r3, [r0, #1]!
 80169fe:	e7f7      	b.n	80169f0 <memcpy.isra.0+0x4>

08016a00 <_send_report>:
 8016a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016a02:	4c1d      	ldr	r4, [pc, #116]	; (8016a78 <_send_report+0x78>)
 8016a04:	9001      	str	r0, [sp, #4]
 8016a06:	f3c0 2306 	ubfx	r3, r0, #8, #7
 8016a0a:	70e3      	strb	r3, [r4, #3]
 8016a0c:	f104 0508 	add.w	r5, r4, #8
 8016a10:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8016a14:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8016a18:	7160      	strb	r0, [r4, #5]
 8016a1a:	4621      	mov	r1, r4
 8016a1c:	4628      	mov	r0, r5
 8016a1e:	2206      	movs	r2, #6
 8016a20:	7123      	strb	r3, [r4, #4]
 8016a22:	f7ff ffe3 	bl	80169ec <memcpy.isra.0>
 8016a26:	2204      	movs	r2, #4
 8016a28:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016a2a:	8363      	strh	r3, [r4, #26]
 8016a2c:	eb0d 0102 	add.w	r1, sp, r2
 8016a30:	f104 0026 	add.w	r0, r4, #38	; 0x26
 8016a34:	f104 0616 	add.w	r6, r4, #22
 8016a38:	f7ff ffd8 	bl	80169ec <memcpy.isra.0>
 8016a3c:	2700      	movs	r7, #0
 8016a3e:	2118      	movs	r1, #24
 8016a40:	4630      	mov	r0, r6
 8016a42:	8427      	strh	r7, [r4, #32]
 8016a44:	f000 f8bf 	bl	8016bc6 <net_chksum>
 8016a48:	2204      	movs	r2, #4
 8016a4a:	eb0d 0102 	add.w	r1, sp, r2
 8016a4e:	8420      	strh	r0, [r4, #32]
 8016a50:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8016a54:	f7ff ffca 	bl	80169ec <memcpy.isra.0>
 8016a58:	2120      	movs	r1, #32
 8016a5a:	4630      	mov	r0, r6
 8016a5c:	8627      	strh	r7, [r4, #48]	; 0x30
 8016a5e:	f000 f8b2 	bl	8016bc6 <net_chksum>
 8016a62:	212e      	movs	r1, #46	; 0x2e
 8016a64:	8620      	strh	r0, [r4, #48]	; 0x30
 8016a66:	4628      	mov	r0, r5
 8016a68:	f002 fce0 	bl	801942c <emac_eth_send>
 8016a6c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016a6e:	3301      	adds	r3, #1
 8016a70:	8723      	strh	r3, [r4, #56]	; 0x38
 8016a72:	b003      	add	sp, #12
 8016a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a76:	bf00      	nop
 8016a78:	10001328 	andne	r1, r0, r8, lsr #6

08016a7c <igmp_set_ip>:
 8016a7c:	b513      	push	{r0, r1, r4, lr}
 8016a7e:	4c09      	ldr	r4, [pc, #36]	; (8016aa4 <igmp_set_ip+0x28>)
 8016a80:	6803      	ldr	r3, [r0, #0]
 8016a82:	9301      	str	r3, [sp, #4]
 8016a84:	2204      	movs	r2, #4
 8016a86:	eb0d 0102 	add.w	r1, sp, r2
 8016a8a:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8016a8e:	f7ff ffad 	bl	80169ec <memcpy.isra.0>
 8016a92:	2204      	movs	r2, #4
 8016a94:	eb0d 0102 	add.w	r1, sp, r2
 8016a98:	f104 0056 	add.w	r0, r4, #86	; 0x56
 8016a9c:	f7ff ffa6 	bl	80169ec <memcpy.isra.0>
 8016aa0:	b002      	add	sp, #8
 8016aa2:	bd10      	pop	{r4, pc}
 8016aa4:	10001328 	andne	r1, r0, r8, lsr #6

08016aa8 <igmp_timer>:
 8016aa8:	b570      	push	{r4, r5, r6, lr}
 8016aaa:	4c0b      	ldr	r4, [pc, #44]	; (8016ad8 <igmp_timer+0x30>)
 8016aac:	2500      	movs	r5, #0
 8016aae:	2602      	movs	r6, #2
 8016ab0:	7963      	ldrb	r3, [r4, #5]
 8016ab2:	2b01      	cmp	r3, #1
 8016ab4:	d109      	bne.n	8016aca <igmp_timer+0x22>
 8016ab6:	7923      	ldrb	r3, [r4, #4]
 8016ab8:	b13b      	cbz	r3, 8016aca <igmp_timer+0x22>
 8016aba:	3b01      	subs	r3, #1
 8016abc:	b2db      	uxtb	r3, r3
 8016abe:	7123      	strb	r3, [r4, #4]
 8016ac0:	b91b      	cbnz	r3, 8016aca <igmp_timer+0x22>
 8016ac2:	6820      	ldr	r0, [r4, #0]
 8016ac4:	f7ff ff9c 	bl	8016a00 <_send_report>
 8016ac8:	7166      	strb	r6, [r4, #5]
 8016aca:	3501      	adds	r5, #1
 8016acc:	2d24      	cmp	r5, #36	; 0x24
 8016ace:	f104 0408 	add.w	r4, r4, #8
 8016ad2:	d1ed      	bne.n	8016ab0 <igmp_timer+0x8>
 8016ad4:	bd70      	pop	{r4, r5, r6, pc}
 8016ad6:	bf00      	nop
 8016ad8:	10001394 	mulne	r0, r4, r3

08016adc <igmp_join>:
 8016adc:	b538      	push	{r3, r4, r5, lr}
 8016ade:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8016ae2:	2be0      	cmp	r3, #224	; 0xe0
 8016ae4:	d11e      	bne.n	8016b24 <igmp_join+0x48>
 8016ae6:	4a12      	ldr	r2, [pc, #72]	; (8016b30 <igmp_join+0x54>)
 8016ae8:	f8d2 418c 	ldr.w	r4, [r2, #396]	; 0x18c
 8016aec:	2c24      	cmp	r4, #36	; 0x24
 8016aee:	d01c      	beq.n	8016b2a <igmp_join+0x4e>
 8016af0:	2300      	movs	r3, #0
 8016af2:	f102 016c 	add.w	r1, r2, #108	; 0x6c
 8016af6:	429c      	cmp	r4, r3
 8016af8:	dc0e      	bgt.n	8016b18 <igmp_join+0x3c>
 8016afa:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 8016afe:	f44f 7181 	mov.w	r1, #258	; 0x102
 8016b02:	66d8      	str	r0, [r3, #108]	; 0x6c
 8016b04:	f8a3 1070 	strh.w	r1, [r3, #112]	; 0x70
 8016b08:	1c63      	adds	r3, r4, #1
 8016b0a:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
 8016b0e:	f7ff ff77 	bl	8016a00 <_send_report>
 8016b12:	4623      	mov	r3, r4
 8016b14:	4618      	mov	r0, r3
 8016b16:	bd38      	pop	{r3, r4, r5, pc}
 8016b18:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
 8016b1c:	4285      	cmp	r5, r0
 8016b1e:	d0f9      	beq.n	8016b14 <igmp_join+0x38>
 8016b20:	3301      	adds	r3, #1
 8016b22:	e7e8      	b.n	8016af6 <igmp_join+0x1a>
 8016b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016b28:	e7f4      	b.n	8016b14 <igmp_join+0x38>
 8016b2a:	f06f 0301 	mvn.w	r3, #1
 8016b2e:	e7f1      	b.n	8016b14 <igmp_join+0x38>
 8016b30:	10001328 	andne	r1, r0, r8, lsr #6

08016b34 <igmp_leave>:
 8016b34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b36:	4c1d      	ldr	r4, [pc, #116]	; (8016bac <igmp_leave+0x78>)
 8016b38:	2600      	movs	r6, #0
 8016b3a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8016b3e:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
 8016b42:	4282      	cmp	r2, r0
 8016b44:	d006      	beq.n	8016b54 <igmp_leave+0x20>
 8016b46:	3601      	adds	r6, #1
 8016b48:	2e24      	cmp	r6, #36	; 0x24
 8016b4a:	d1f8      	bne.n	8016b3e <igmp_leave+0xa>
 8016b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b50:	b002      	add	sp, #8
 8016b52:	bd70      	pop	{r4, r5, r6, pc}
 8016b54:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016b56:	9001      	str	r0, [sp, #4]
 8016b58:	2500      	movs	r5, #0
 8016b5a:	2118      	movs	r1, #24
 8016b5c:	f104 0016 	add.w	r0, r4, #22
 8016b60:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8016b64:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8016b68:	f000 f82d 	bl	8016bc6 <net_chksum>
 8016b6c:	2204      	movs	r2, #4
 8016b6e:	eb0d 0102 	add.w	r1, sp, r2
 8016b72:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
 8016b76:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8016b7a:	f7ff ff37 	bl	80169ec <memcpy.isra.0>
 8016b7e:	2120      	movs	r1, #32
 8016b80:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 8016b84:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8016b88:	f000 f81d 	bl	8016bc6 <net_chksum>
 8016b8c:	212e      	movs	r1, #46	; 0x2e
 8016b8e:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
 8016b92:	4807      	ldr	r0, [pc, #28]	; (8016bb0 <igmp_leave+0x7c>)
 8016b94:	f002 fc4a 	bl	801942c <emac_eth_send>
 8016b98:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016b9a:	3301      	adds	r3, #1
 8016b9c:	8723      	strh	r3, [r4, #56]	; 0x38
 8016b9e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8016ba2:	4628      	mov	r0, r5
 8016ba4:	66e5      	str	r5, [r4, #108]	; 0x6c
 8016ba6:	f8a4 5070 	strh.w	r5, [r4, #112]	; 0x70
 8016baa:	e7d1      	b.n	8016b50 <igmp_leave+0x1c>
 8016bac:	10001328 	andne	r1, r0, r8, lsr #6
 8016bb0:	10001364 	andne	r1, r0, r4, ror #6

08016bb4 <ip_set_ip>:
 8016bb4:	b510      	push	{r4, lr}
 8016bb6:	4604      	mov	r4, r0
 8016bb8:	f7fe f9c0 	bl	8014f3c <udp_set_ip>
 8016bbc:	4620      	mov	r0, r4
 8016bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bc2:	f7ff bf5b 	b.w	8016a7c <igmp_set_ip>

08016bc6 <net_chksum>:
 8016bc6:	f021 0201 	bic.w	r2, r1, #1
 8016bca:	b530      	push	{r4, r5, lr}
 8016bcc:	2300      	movs	r3, #0
 8016bce:	1884      	adds	r4, r0, r2
 8016bd0:	42a0      	cmp	r0, r4
 8016bd2:	d10b      	bne.n	8016bec <net_chksum+0x26>
 8016bd4:	4291      	cmp	r1, r2
 8016bd6:	d004      	beq.n	8016be2 <net_chksum+0x1c>
 8016bd8:	7802      	ldrb	r2, [r0, #0]
 8016bda:	0212      	lsls	r2, r2, #8
 8016bdc:	ba52      	rev16	r2, r2
 8016bde:	fa13 f382 	uxtah	r3, r3, r2
 8016be2:	0c1a      	lsrs	r2, r3, #16
 8016be4:	d106      	bne.n	8016bf4 <net_chksum+0x2e>
 8016be6:	43d8      	mvns	r0, r3
 8016be8:	b280      	uxth	r0, r0
 8016bea:	bd30      	pop	{r4, r5, pc}
 8016bec:	f830 5b02 	ldrh.w	r5, [r0], #2
 8016bf0:	442b      	add	r3, r5
 8016bf2:	e7ed      	b.n	8016bd0 <net_chksum+0xa>
 8016bf4:	fa12 f383 	uxtah	r3, r2, r3
 8016bf8:	e7f3      	b.n	8016be2 <net_chksum+0x1c>

08016bfa <memcpy.isra.0>:
 8016bfa:	3801      	subs	r0, #1
 8016bfc:	440a      	add	r2, r1
 8016bfe:	4291      	cmp	r1, r2
 8016c00:	d100      	bne.n	8016c04 <memcpy.isra.0+0xa>
 8016c02:	4770      	bx	lr
 8016c04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c08:	f800 3f01 	strb.w	r3, [r0, #1]!
 8016c0c:	e7f7      	b.n	8016bfe <memcpy.isra.0+0x4>

08016c0e <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8016c0e:	b430      	push	{r4, r5}
 8016c10:	b168      	cbz	r0, 8016c2e <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8016c12:	7905      	ldrb	r5, [r0, #4]
 8016c14:	2300      	movs	r3, #0
 8016c16:	5cd4      	ldrb	r4, [r2, r3]
 8016c18:	b11c      	cbz	r4, 8016c22 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8016c1a:	1c5c      	adds	r4, r3, #1
 8016c1c:	429d      	cmp	r5, r3
 8016c1e:	4623      	mov	r3, r4
 8016c20:	dcf9      	bgt.n	8016c16 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8016c22:	6804      	ldr	r4, [r0, #0]
 8016c24:	69e4      	ldr	r4, [r4, #28]
 8016c26:	b2db      	uxtb	r3, r3
 8016c28:	46a4      	mov	ip, r4
 8016c2a:	bc30      	pop	{r4, r5}
 8016c2c:	4760      	bx	ip
 8016c2e:	bc30      	pop	{r4, r5}
 8016c30:	4770      	bx	lr

08016c32 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8016c32:	b110      	cbz	r0, 8016c3a <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8016c34:	6803      	ldr	r3, [r0, #0]
 8016c36:	691b      	ldr	r3, [r3, #16]
 8016c38:	4718      	bx	r3
 8016c3a:	4770      	bx	lr

08016c3c <DisplayUdf::DisplayUdf()>:
 8016c3c:	b510      	push	{r4, lr}
 8016c3e:	4604      	mov	r4, r0
 8016c40:	f000 ff8a 	bl	8017b58 <Display::Display()>
 8016c44:	2202      	movs	r2, #2
 8016c46:	2300      	movs	r3, #0
 8016c48:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8016c4c:	4b05      	ldr	r3, [pc, #20]	; (8016c64 <DisplayUdf::DisplayUdf()+0x28>)
 8016c4e:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8016c52:	601c      	str	r4, [r3, #0]
 8016c54:	2301      	movs	r3, #1
 8016c56:	f802 3f01 	strb.w	r3, [r2, #1]!
 8016c5a:	3301      	adds	r3, #1
 8016c5c:	2b15      	cmp	r3, #21
 8016c5e:	d1fa      	bne.n	8016c56 <DisplayUdf::DisplayUdf()+0x1a>
 8016c60:	4620      	mov	r0, r4
 8016c62:	bd10      	pop	{r4, pc}
 8016c64:	2000fccc 	andcs	pc, r0, ip, asr #25

08016c68 <DisplayUdf::SetTitle(char const*, ...)>:
 8016c68:	b40e      	push	{r1, r2, r3}
 8016c6a:	b517      	push	{r0, r1, r2, r4, lr}
 8016c6c:	ab05      	add	r3, sp, #20
 8016c6e:	4604      	mov	r4, r0
 8016c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c74:	9301      	str	r3, [sp, #4]
 8016c76:	211f      	movs	r1, #31
 8016c78:	301c      	adds	r0, #28
 8016c7a:	f7f3 fcb7 	bl	800a5ec <vsnprintf>
 8016c7e:	4420      	add	r0, r4
 8016c80:	2300      	movs	r3, #0
 8016c82:	7703      	strb	r3, [r0, #28]
 8016c84:	b003      	add	sp, #12
 8016c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c8a:	b003      	add	sp, #12
 8016c8c:	4770      	bx	lr

08016c8e <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 8016c8e:	1e4b      	subs	r3, r1, #1
 8016c90:	2b05      	cmp	r3, #5
 8016c92:	b530      	push	{r4, r5, lr}
 8016c94:	d80f      	bhi.n	8016cb6 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8016c96:	f100 043b 	add.w	r4, r0, #59	; 0x3b
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8016ca0:	428d      	cmp	r5, r1
 8016ca2:	d109      	bne.n	8016cb8 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8016ca4:	1884      	adds	r4, r0, r2
 8016ca6:	4403      	add	r3, r0
 8016ca8:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8016cac:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 8016cb0:	4402      	add	r2, r0
 8016cb2:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
 8016cb6:	bd30      	pop	{r4, r5, pc}
 8016cb8:	3301      	adds	r3, #1
 8016cba:	2b14      	cmp	r3, #20
 8016cbc:	d1ee      	bne.n	8016c9c <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8016cbe:	e7f7      	b.n	8016cb0 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

08016cc0 <DisplayUdf::ShowEmacStart()>:
 8016cc0:	b510      	push	{r4, lr}
 8016cc2:	4604      	mov	r4, r0
 8016cc4:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8016cc8:	6980      	ldr	r0, [r0, #24]
 8016cca:	f7ff ffb2 	bl	8016c32 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8016cce:	4a03      	ldr	r2, [pc, #12]	; (8016cdc <DisplayUdf::ShowEmacStart()+0x1c>)
 8016cd0:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8016cd4:	4620      	mov	r0, r4
 8016cd6:	f7f2 fb3f 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 8016cda:	bd10      	pop	{r4, pc}
 8016cdc:	0801d745 	stmdaeq	r1, {r0, r2, r6, r8, r9, sl, ip, lr, pc}

08016ce0 <DisplayUdf::ShowIpAddress()>:
 8016ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ce4:	4604      	mov	r4, r0
 8016ce6:	b088      	sub	sp, #32
 8016ce8:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8016cec:	6980      	ldr	r0, [r0, #24]
 8016cee:	f7ff ffa0 	bl	8016c32 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8016cf2:	4b13      	ldr	r3, [pc, #76]	; (8016d40 <DisplayUdf::ShowIpAddress()+0x60>)
 8016cf4:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8016cf8:	681d      	ldr	r5, [r3, #0]
 8016cfa:	9107      	str	r1, [sp, #28]
 8016cfc:	696e      	ldr	r6, [r5, #20]
 8016cfe:	69e8      	ldr	r0, [r5, #28]
 8016d00:	b2f3      	uxtb	r3, r6
 8016d02:	9306      	str	r3, [sp, #24]
 8016d04:	f003 fe50 	bl	801a9a8 <__popcountsi2>
 8016d08:	79ea      	ldrb	r2, [r5, #7]
 8016d0a:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8016d0e:	f3c6 4807 	ubfx	r8, r6, #16, #8
 8016d12:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 8016d16:	0e36      	lsrs	r6, r6, #24
 8016d18:	b982      	cbnz	r2, 8016d3c <DisplayUdf::ShowIpAddress()+0x5c>
 8016d1a:	796a      	ldrb	r2, [r5, #5]
 8016d1c:	2a00      	cmp	r2, #0
 8016d1e:	bf14      	ite	ne
 8016d20:	2244      	movne	r2, #68	; 0x44
 8016d22:	2253      	moveq	r2, #83	; 0x53
 8016d24:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8016d28:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8016d2c:	4a05      	ldr	r2, [pc, #20]	; (8016d44 <DisplayUdf::ShowIpAddress()+0x64>)
 8016d2e:	9700      	str	r7, [sp, #0]
 8016d30:	4620      	mov	r0, r4
 8016d32:	f7f2 fb11 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 8016d36:	b008      	add	sp, #32
 8016d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d3c:	225a      	movs	r2, #90	; 0x5a
 8016d3e:	e7f1      	b.n	8016d24 <DisplayUdf::ShowIpAddress()+0x44>
 8016d40:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 8016d44:	0801d754 	stmdaeq	r1, {r2, r4, r6, r8, r9, sl, ip, lr, pc}

08016d48 <DisplayUdf::ShowNetmask()>:
 8016d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d4a:	4b0c      	ldr	r3, [pc, #48]	; (8016d7c <DisplayUdf::ShowNetmask()+0x34>)
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	69db      	ldr	r3, [r3, #28]
 8016d50:	0e1a      	lsrs	r2, r3, #24
 8016d52:	9202      	str	r2, [sp, #8]
 8016d54:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8016d58:	9201      	str	r2, [sp, #4]
 8016d5a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8016d5e:	9200      	str	r2, [sp, #0]
 8016d60:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8016d64:	4a06      	ldr	r2, [pc, #24]	; (8016d80 <DisplayUdf::ShowNetmask()+0x38>)
 8016d66:	b2db      	uxtb	r3, r3
 8016d68:	4604      	mov	r4, r0
 8016d6a:	f7f2 faf5 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 8016d6e:	4620      	mov	r0, r4
 8016d70:	b004      	add	sp, #16
 8016d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d76:	f7ff bfb3 	b.w	8016ce0 <DisplayUdf::ShowIpAddress()>
 8016d7a:	bf00      	nop
 8016d7c:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 8016d80:	0801d766 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, ip, lr, pc}

08016d84 <DisplayUdf::ShowGatewayIp()>:
 8016d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d86:	4604      	mov	r4, r0
 8016d88:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8016d8c:	6980      	ldr	r0, [r0, #24]
 8016d8e:	f7ff ff50 	bl	8016c32 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8016d92:	4b0a      	ldr	r3, [pc, #40]	; (8016dbc <DisplayUdf::ShowGatewayIp()+0x38>)
 8016d94:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	699b      	ldr	r3, [r3, #24]
 8016d9c:	0e1a      	lsrs	r2, r3, #24
 8016d9e:	9202      	str	r2, [sp, #8]
 8016da0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8016da4:	9201      	str	r2, [sp, #4]
 8016da6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8016daa:	9200      	str	r2, [sp, #0]
 8016dac:	b2db      	uxtb	r3, r3
 8016dae:	4a04      	ldr	r2, [pc, #16]	; (8016dc0 <DisplayUdf::ShowGatewayIp()+0x3c>)
 8016db0:	4620      	mov	r0, r4
 8016db2:	f7f2 fad1 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 8016db6:	b004      	add	sp, #16
 8016db8:	bd10      	pop	{r4, pc}
 8016dba:	bf00      	nop
 8016dbc:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 8016dc0:	0801d775 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, sl, ip, lr, pc}

08016dc4 <DisplayUdf::ShowHostName()>:
 8016dc4:	b510      	push	{r4, lr}
 8016dc6:	4604      	mov	r4, r0
 8016dc8:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8016dcc:	6980      	ldr	r0, [r0, #24]
 8016dce:	f7ff ff30 	bl	8016c32 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8016dd2:	4b05      	ldr	r3, [pc, #20]	; (8016de8 <DisplayUdf::ShowHostName()+0x24>)
 8016dd4:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8016dd8:	681a      	ldr	r2, [r3, #0]
 8016dda:	69a0      	ldr	r0, [r4, #24]
 8016ddc:	3220      	adds	r2, #32
 8016dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016de2:	f7ff bf14 	b.w	8016c0e <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8016de6:	bf00      	nop
 8016de8:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

08016dec <DisplayUdf::Show()>:
 8016dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016dee:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 8016df2:	4604      	mov	r4, r0
 8016df4:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 8016df8:	21ff      	movs	r1, #255	; 0xff
 8016dfa:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8016dfe:	2806      	cmp	r0, #6
 8016e00:	bf88      	it	hi
 8016e02:	7019      	strbhi	r1, [r3, #0]
 8016e04:	429a      	cmp	r2, r3
 8016e06:	d1f8      	bne.n	8016dfa <DisplayUdf::Show()+0xe>
 8016e08:	2501      	movs	r5, #1
 8016e0a:	4629      	mov	r1, r5
 8016e0c:	3501      	adds	r5, #1
 8016e0e:	69a0      	ldr	r0, [r4, #24]
 8016e10:	b2ed      	uxtb	r5, r5
 8016e12:	f7ff ff0e 	bl	8016c32 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8016e16:	2d06      	cmp	r5, #6
 8016e18:	d1f7      	bne.n	8016e0a <DisplayUdf::Show()+0x1e>
 8016e1a:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8016e1e:	69a0      	ldr	r0, [r4, #24]
 8016e20:	f104 021c 	add.w	r2, r4, #28
 8016e24:	f7ff fef3 	bl	8016c0e <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8016e28:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8016e2c:	69a0      	ldr	r0, [r4, #24]
 8016e2e:	4a0d      	ldr	r2, [pc, #52]	; (8016e64 <DisplayUdf::Show()+0x78>)
 8016e30:	f7ff feed 	bl	8016c0e <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8016e34:	4b0c      	ldr	r3, [pc, #48]	; (8016e68 <DisplayUdf::Show()+0x7c>)
 8016e36:	4a0d      	ldr	r2, [pc, #52]	; (8016e6c <DisplayUdf::Show()+0x80>)
 8016e38:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8016e3c:	9300      	str	r3, [sp, #0]
 8016e3e:	4620      	mov	r0, r4
 8016e40:	2303      	movs	r3, #3
 8016e42:	f7f2 fa89 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 8016e46:	4620      	mov	r0, r4
 8016e48:	f7ff ff4a 	bl	8016ce0 <DisplayUdf::ShowIpAddress()>
 8016e4c:	4620      	mov	r0, r4
 8016e4e:	f7ff ff99 	bl	8016d84 <DisplayUdf::ShowGatewayIp()>
 8016e52:	4620      	mov	r0, r4
 8016e54:	f7ff ff78 	bl	8016d48 <DisplayUdf::ShowNetmask()>
 8016e58:	4620      	mov	r0, r4
 8016e5a:	b003      	add	sp, #12
 8016e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e60:	f7ff bfb0 	b.w	8016dc4 <DisplayUdf::ShowHostName()>
 8016e64:	0801b39a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, ip, sp, pc}
 8016e68:	2000fd64 	andcs	pc, r0, r4, ror #26
 8016e6c:	0801d784 	stmdaeq	r1, {r2, r7, r8, r9, sl, ip, lr, pc}

08016e70 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8016e70:	3901      	subs	r1, #1
 8016e72:	b510      	push	{r4, lr}
 8016e74:	4604      	mov	r4, r0
 8016e76:	2903      	cmp	r1, #3
 8016e78:	d814      	bhi.n	8016ea4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8016e7a:	e8df f001 	tbb	[pc, r1]
 8016e7e:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 8016e82:	4b14      	ldr	r3, [pc, #80]	; (8016ed4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8016e84:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8016e88:	6818      	ldr	r0, [r3, #0]
 8016e8a:	f7f3 fe23 	bl	800aad4 <Display::Status(Display7SegmentMessage)>
 8016e8e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8016e92:	69a0      	ldr	r0, [r4, #24]
 8016e94:	f7ff fecd 	bl	8016c32 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8016e98:	4a0f      	ldr	r2, [pc, #60]	; (8016ed8 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 8016e9a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8016e9e:	4620      	mov	r0, r4
 8016ea0:	f7f2 fa5a 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 8016ea4:	bd10      	pop	{r4, pc}
 8016ea6:	f248 0180 	movw	r1, #32896	; 0x8080
 8016eaa:	4b0a      	ldr	r3, [pc, #40]	; (8016ed4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8016eac:	6818      	ldr	r0, [r3, #0]
 8016eae:	f7f3 fe11 	bl	800aad4 <Display::Status(Display7SegmentMessage)>
 8016eb2:	e7f7      	b.n	8016ea4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8016eb4:	4b07      	ldr	r3, [pc, #28]	; (8016ed4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8016eb6:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8016eba:	6818      	ldr	r0, [r3, #0]
 8016ebc:	f7f3 fe0a 	bl	800aad4 <Display::Status(Display7SegmentMessage)>
 8016ec0:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8016ec4:	69a0      	ldr	r0, [r4, #24]
 8016ec6:	f7ff feb4 	bl	8016c32 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8016eca:	4a04      	ldr	r2, [pc, #16]	; (8016edc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8016ecc:	e7e5      	b.n	8016e9a <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 8016ece:	f645 3179 	movw	r1, #23417	; 0x5b79
 8016ed2:	e7ea      	b.n	8016eaa <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8016ed4:	2000fcd4 	ldrdcs	pc, [r0], -r4
 8016ed8:	0801d793 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, sl, ip, lr, pc}
 8016edc:	0801d7a1 	stmdaeq	r1, {r0, r5, r7, r8, r9, sl, ip, lr, pc}

08016ee0 <DisplayUdf::ShowShutdown()>:
 8016ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ee2:	4604      	mov	r4, r0
 8016ee4:	6980      	ldr	r0, [r0, #24]
 8016ee6:	b1c0      	cbz	r0, 8016f1a <DisplayUdf::ShowShutdown()+0x3a>
 8016ee8:	7947      	ldrb	r7, [r0, #5]
 8016eea:	6803      	ldr	r3, [r0, #0]
 8016eec:	7905      	ldrb	r5, [r0, #4]
 8016eee:	6a1b      	ldr	r3, [r3, #32]
 8016ef0:	1e7a      	subs	r2, r7, #1
 8016ef2:	b2d2      	uxtb	r2, r2
 8016ef4:	9201      	str	r2, [sp, #4]
 8016ef6:	2100      	movs	r1, #0
 8016ef8:	4798      	blx	r3
 8016efa:	9a01      	ldr	r2, [sp, #4]
 8016efc:	2600      	movs	r6, #0
 8016efe:	3d01      	subs	r5, #1
 8016f00:	42ae      	cmp	r6, r5
 8016f02:	69a0      	ldr	r0, [r4, #24]
 8016f04:	d310      	bcc.n	8016f28 <DisplayUdf::ShowShutdown()+0x48>
 8016f06:	b118      	cbz	r0, 8016f10 <DisplayUdf::ShowShutdown()+0x30>
 8016f08:	6803      	ldr	r3, [r0, #0]
 8016f0a:	2100      	movs	r1, #0
 8016f0c:	6a1b      	ldr	r3, [r3, #32]
 8016f0e:	4798      	blx	r3
 8016f10:	4a0a      	ldr	r2, [pc, #40]	; (8016f3c <DisplayUdf::ShowShutdown()+0x5c>)
 8016f12:	69a0      	ldr	r0, [r4, #24]
 8016f14:	4639      	mov	r1, r7
 8016f16:	f7ff fe7a 	bl	8016c0e <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8016f1a:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8016f1e:	4620      	mov	r0, r4
 8016f20:	f7f3 fdd8 	bl	800aad4 <Display::Status(Display7SegmentMessage)>
 8016f24:	b003      	add	sp, #12
 8016f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f28:	b128      	cbz	r0, 8016f36 <DisplayUdf::ShowShutdown()+0x56>
 8016f2a:	6803      	ldr	r3, [r0, #0]
 8016f2c:	9201      	str	r2, [sp, #4]
 8016f2e:	695b      	ldr	r3, [r3, #20]
 8016f30:	2120      	movs	r1, #32
 8016f32:	4798      	blx	r3
 8016f34:	9a01      	ldr	r2, [sp, #4]
 8016f36:	3601      	adds	r6, #1
 8016f38:	e7e2      	b.n	8016f00 <DisplayUdf::ShowShutdown()+0x20>
 8016f3a:	bf00      	nop
 8016f3c:	0801d7af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, r9, sl, ip, lr, pc}

08016f40 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8016f40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016f42:	88c6      	ldrh	r6, [r0, #6]
 8016f44:	8885      	ldrh	r5, [r0, #4]
 8016f46:	42ae      	cmp	r6, r5
 8016f48:	d216      	bcs.n	8016f78 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 8016f4a:	4604      	mov	r4, r0
 8016f4c:	6800      	ldr	r0, [r0, #0]
 8016f4e:	1bad      	subs	r5, r5, r6
 8016f50:	4430      	add	r0, r6
 8016f52:	7a26      	ldrb	r6, [r4, #8]
 8016f54:	b923      	cbnz	r3, 8016f60 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8016f56:	b926      	cbnz	r6, 8016f62 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8016f58:	9200      	str	r2, [sp, #0]
 8016f5a:	460b      	mov	r3, r1
 8016f5c:	4a09      	ldr	r2, [pc, #36]	; (8016f84 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 8016f5e:	e003      	b.n	8016f68 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8016f60:	b166      	cbz	r6, 8016f7c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8016f62:	9200      	str	r2, [sp, #0]
 8016f64:	4a08      	ldr	r2, [pc, #32]	; (8016f88 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8016f66:	460b      	mov	r3, r1
 8016f68:	4629      	mov	r1, r5
 8016f6a:	f7f3 fb27 	bl	800a5bc <snprintf>
 8016f6e:	4285      	cmp	r5, r0
 8016f70:	bfa2      	ittt	ge
 8016f72:	88e3      	ldrhge	r3, [r4, #6]
 8016f74:	181b      	addge	r3, r3, r0
 8016f76:	80e3      	strhge	r3, [r4, #6]
 8016f78:	b002      	add	sp, #8
 8016f7a:	bd70      	pop	{r4, r5, r6, pc}
 8016f7c:	9200      	str	r2, [sp, #0]
 8016f7e:	460b      	mov	r3, r1
 8016f80:	4a02      	ldr	r2, [pc, #8]	; (8016f8c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8016f82:	e7f1      	b.n	8016f68 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8016f84:	0801aff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8016f88:	0801afec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 8016f8c:	0801aff6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}

08016f90 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8016f90:	b510      	push	{r4, lr}
 8016f92:	2220      	movs	r2, #32
 8016f94:	4604      	mov	r4, r0
 8016f96:	f840 1b04 	str.w	r1, [r0], #4
 8016f9a:	2100      	movs	r1, #0
 8016f9c:	f001 fa90 	bl	80184c0 <memset>
 8016fa0:	f647 7305 	movw	r3, #32517	; 0x7f05
 8016fa4:	84a3      	strh	r3, [r4, #36]	; 0x24
 8016fa6:	4620      	mov	r0, r4
 8016fa8:	bd10      	pop	{r4, pc}

08016faa <DisplayUdfParams::Load()>:
 8016faa:	b508      	push	{r3, lr}
 8016fac:	2300      	movs	r3, #0
 8016fae:	4601      	mov	r1, r0
 8016fb0:	6043      	str	r3, [r0, #4]
 8016fb2:	6800      	ldr	r0, [r0, #0]
 8016fb4:	b120      	cbz	r0, 8016fc0 <DisplayUdfParams::Load()+0x16>
 8016fb6:	6803      	ldr	r3, [r0, #0]
 8016fb8:	3104      	adds	r1, #4
 8016fba:	68db      	ldr	r3, [r3, #12]
 8016fbc:	4798      	blx	r3
 8016fbe:	2001      	movs	r0, #1
 8016fc0:	bd08      	pop	{r3, pc}
	...

08016fc4 <DisplayUdfParams::Load(char const*, unsigned int)>:
 8016fc4:	6803      	ldr	r3, [r0, #0]
 8016fc6:	b1d3      	cbz	r3, 8016ffe <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 8016fc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016fca:	2300      	movs	r3, #0
 8016fcc:	6043      	str	r3, [r0, #4]
 8016fce:	4604      	mov	r4, r0
 8016fd0:	460d      	mov	r5, r1
 8016fd2:	4616      	mov	r6, r2
 8016fd4:	490a      	ldr	r1, [pc, #40]	; (8017000 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 8016fd6:	4602      	mov	r2, r0
 8016fd8:	4668      	mov	r0, sp
 8016fda:	f000 fbc7 	bl	801776c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8016fde:	4632      	mov	r2, r6
 8016fe0:	4629      	mov	r1, r5
 8016fe2:	4668      	mov	r0, sp
 8016fe4:	f000 fbc6 	bl	8017774 <ReadConfigFile::Read(char const*, unsigned int)>
 8016fe8:	4621      	mov	r1, r4
 8016fea:	f851 0b04 	ldr.w	r0, [r1], #4
 8016fee:	6803      	ldr	r3, [r0, #0]
 8016ff0:	689b      	ldr	r3, [r3, #8]
 8016ff2:	4798      	blx	r3
 8016ff4:	4668      	mov	r0, sp
 8016ff6:	f000 fbbc 	bl	8017772 <ReadConfigFile::~ReadConfigFile()>
 8016ffa:	b002      	add	sp, #8
 8016ffc:	bd70      	pop	{r4, r5, r6, pc}
 8016ffe:	4770      	bx	lr
 8017000:	080170cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, ip, sp, lr}

08017004 <DisplayUdfParams::callbackFunction(char const*)>:
 8017004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017006:	460e      	mov	r6, r1
 8017008:	4604      	mov	r4, r0
 801700a:	492c      	ldr	r1, [pc, #176]	; (80170bc <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 801700c:	f10d 0207 	add.w	r2, sp, #7
 8017010:	4630      	mov	r0, r6
 8017012:	f000 fce0 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8017016:	b968      	cbnz	r0, 8017034 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 8017018:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801701c:	6863      	ldr	r3, [r4, #4]
 801701e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8017022:	2a7f      	cmp	r2, #127	; 0x7f
 8017024:	bf14      	ite	ne
 8017026:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 801702a:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 801702e:	6063      	str	r3, [r4, #4]
 8017030:	b003      	add	sp, #12
 8017032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017034:	4922      	ldr	r1, [pc, #136]	; (80170c0 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 8017036:	f10d 0207 	add.w	r2, sp, #7
 801703a:	4630      	mov	r0, r6
 801703c:	f000 fccb 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8017040:	b958      	cbnz	r0, 801705a <DisplayUdfParams::callbackFunction(char const*)+0x56>
 8017042:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017046:	6863      	ldr	r3, [r4, #4]
 8017048:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 801704c:	2a05      	cmp	r2, #5
 801704e:	bf14      	ite	ne
 8017050:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8017054:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 8017058:	e7e9      	b.n	801702e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801705a:	491a      	ldr	r1, [pc, #104]	; (80170c4 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 801705c:	f10d 0207 	add.w	r2, sp, #7
 8017060:	4630      	mov	r0, r6
 8017062:	f000 fcb8 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8017066:	b948      	cbnz	r0, 801707c <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8017068:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801706c:	6863      	ldr	r3, [r4, #4]
 801706e:	b112      	cbz	r2, 8017076 <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8017070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017074:	e7db      	b.n	801702e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8017076:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801707a:	e7d8      	b.n	801702e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801707c:	4f12      	ldr	r7, [pc, #72]	; (80170c8 <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 801707e:	2500      	movs	r5, #0
 8017080:	f857 1b04 	ldr.w	r1, [r7], #4
 8017084:	f10d 0207 	add.w	r2, sp, #7
 8017088:	4630      	mov	r0, r6
 801708a:	f000 fca4 	bl	80179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801708e:	b988      	cbnz	r0, 80170b4 <DisplayUdfParams::callbackFunction(char const*)+0xb0>
 8017090:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017094:	6862      	ldr	r2, [r4, #4]
 8017096:	1e4e      	subs	r6, r1, #1
 8017098:	2301      	movs	r3, #1
 801709a:	2e05      	cmp	r6, #5
 801709c:	fa03 f305 	lsl.w	r3, r3, r5
 80170a0:	4425      	add	r5, r4
 80170a2:	d802      	bhi.n	80170aa <DisplayUdfParams::callbackFunction(char const*)+0xa6>
 80170a4:	7229      	strb	r1, [r5, #8]
 80170a6:	4313      	orrs	r3, r2
 80170a8:	e7c1      	b.n	801702e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80170aa:	ea22 0203 	bic.w	r2, r2, r3
 80170ae:	7228      	strb	r0, [r5, #8]
 80170b0:	6062      	str	r2, [r4, #4]
 80170b2:	e7bd      	b.n	8017030 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80170b4:	3501      	adds	r5, #1
 80170b6:	2d14      	cmp	r5, #20
 80170b8:	d1e2      	bne.n	8017080 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 80170ba:	e7b9      	b.n	8017030 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80170bc:	0801d86e 	stmdaeq	r1, {r1, r2, r3, r5, r6, fp, ip, lr, pc}
 80170c0:	0801d836 	stmdaeq	r1, {r1, r2, r4, r5, fp, ip, lr, pc}
 80170c4:	0801d844 	stmdaeq	r1, {r2, r6, fp, ip, lr, pc}
 80170c8:	0801d7c0 	stmdaeq	r1, {r6, r7, r8, r9, sl, ip, lr, pc}

080170cc <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 80170cc:	f7ff bf9a 	b.w	8017004 <DisplayUdfParams::callbackFunction(char const*)>

080170d0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 80170d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170d4:	4604      	mov	r4, r0
 80170d6:	b086      	sub	sp, #24
 80170d8:	4615      	mov	r5, r2
 80170da:	461e      	mov	r6, r3
 80170dc:	3004      	adds	r0, #4
 80170de:	b379      	cbz	r1, 8017140 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 80170e0:	2222      	movs	r2, #34	; 0x22
 80170e2:	f001 f9d6 	bl	8018492 <memmove>
 80170e6:	462a      	mov	r2, r5
 80170e8:	493e      	ldr	r1, [pc, #248]	; (80171e4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 80170ea:	4633      	mov	r3, r6
 80170ec:	a803      	add	r0, sp, #12
 80170ee:	f000 fa9d 	bl	801762c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80170f2:	6863      	ldr	r3, [r4, #4]
 80170f4:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80170f8:	493b      	ldr	r1, [pc, #236]	; (80171e8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 80170fa:	f3c3 7340 	ubfx	r3, r3, #29, #1
 80170fe:	a803      	add	r0, sp, #12
 8017100:	f7ff ff1e 	bl	8016f40 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8017104:	6863      	ldr	r3, [r4, #4]
 8017106:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801710a:	4938      	ldr	r1, [pc, #224]	; (80171ec <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801710c:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8017110:	a803      	add	r0, sp, #12
 8017112:	f7ff ff15 	bl	8016f40 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8017116:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801711a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801711e:	6863      	ldr	r3, [r4, #4]
 8017120:	42aa      	cmp	r2, r5
 8017122:	d226      	bcs.n	8017172 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 8017124:	9803      	ldr	r0, [sp, #12]
 8017126:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 801712a:	4410      	add	r0, r2
 801712c:	eba5 0502 	sub.w	r5, r5, r2
 8017130:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8017134:	d10b      	bne.n	801714e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8017136:	b962      	cbnz	r2, 8017152 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 8017138:	9200      	str	r2, [sp, #0]
 801713a:	4b2d      	ldr	r3, [pc, #180]	; (80171f0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 801713c:	4a2d      	ldr	r2, [pc, #180]	; (80171f4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 801713e:	e00e      	b.n	801715e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8017140:	6823      	ldr	r3, [r4, #0]
 8017142:	681a      	ldr	r2, [r3, #0]
 8017144:	4601      	mov	r1, r0
 8017146:	68d2      	ldr	r2, [r2, #12]
 8017148:	4618      	mov	r0, r3
 801714a:	4790      	blx	r2
 801714c:	e7cb      	b.n	80170e6 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 801714e:	2a00      	cmp	r2, #0
 8017150:	d042      	beq.n	80171d8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 8017152:	3b00      	subs	r3, #0
 8017154:	bf18      	it	ne
 8017156:	2301      	movne	r3, #1
 8017158:	9300      	str	r3, [sp, #0]
 801715a:	4a27      	ldr	r2, [pc, #156]	; (80171f8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 801715c:	4b24      	ldr	r3, [pc, #144]	; (80171f0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 801715e:	4629      	mov	r1, r5
 8017160:	f7f3 fa2c 	bl	800a5bc <snprintf>
 8017164:	4285      	cmp	r5, r0
 8017166:	bfa2      	ittt	ge
 8017168:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 801716c:	181b      	addge	r3, r3, r0
 801716e:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8017172:	4e22      	ldr	r6, [pc, #136]	; (80171fc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 8017174:	2500      	movs	r5, #0
 8017176:	2701      	movs	r7, #1
 8017178:	f104 0808 	add.w	r8, r4, #8
 801717c:	f856 1b04 	ldr.w	r1, [r6], #4
 8017180:	780b      	ldrb	r3, [r1, #0]
 8017182:	b163      	cbz	r3, 801719e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xce>
 8017184:	6862      	ldr	r2, [r4, #4]
 8017186:	fa07 f305 	lsl.w	r3, r7, r5
 801718a:	4393      	bics	r3, r2
 801718c:	bf08      	it	eq
 801718e:	2301      	moveq	r3, #1
 8017190:	f818 2005 	ldrb.w	r2, [r8, r5]
 8017194:	bf18      	it	ne
 8017196:	2300      	movne	r3, #0
 8017198:	a803      	add	r0, sp, #12
 801719a:	f7ff fed1 	bl	8016f40 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 801719e:	3501      	adds	r5, #1
 80171a0:	2d14      	cmp	r5, #20
 80171a2:	d1eb      	bne.n	801717c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 80171a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80171a8:	b17b      	cbz	r3, 80171ca <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xfa>
 80171aa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80171ae:	9b03      	ldr	r3, [sp, #12]
 80171b0:	4413      	add	r3, r2
 80171b2:	227d      	movs	r2, #125	; 0x7d
 80171b4:	f803 2c01 	strb.w	r2, [r3, #-1]
 80171b8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80171bc:	9903      	ldr	r1, [sp, #12]
 80171be:	54ca      	strb	r2, [r1, r3]
 80171c0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80171c4:	3301      	adds	r3, #1
 80171c6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80171ca:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80171ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171d0:	601a      	str	r2, [r3, #0]
 80171d2:	b006      	add	sp, #24
 80171d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171d8:	2301      	movs	r3, #1
 80171da:	9300      	str	r3, [sp, #0]
 80171dc:	4a08      	ldr	r2, [pc, #32]	; (8017200 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x130>)
 80171de:	4b04      	ldr	r3, [pc, #16]	; (80171f0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 80171e0:	e7bd      	b.n	801715e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 80171e2:	bf00      	nop
 80171e4:	0801d862 	stmdaeq	r1, {r1, r5, r6, fp, ip, lr, pc}
 80171e8:	0801d86e 	stmdaeq	r1, {r1, r2, r3, r5, r6, fp, ip, lr, pc}
 80171ec:	0801d836 	stmdaeq	r1, {r1, r2, r4, r5, fp, ip, lr, pc}
 80171f0:	0801d844 	stmdaeq	r1, {r2, r6, fp, ip, lr, pc}
 80171f4:	0801aff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 80171f8:	0801afec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 80171fc:	0801d7c0 	stmdaeq	r1, {r6, r7, r8, r9, sl, ip, lr, pc}
 8017200:	0801aff6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}

08017204 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 8017204:	b513      	push	{r0, r1, r4, lr}
 8017206:	6804      	ldr	r4, [r0, #0]
 8017208:	b914      	cbnz	r4, 8017210 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 801720a:	601c      	str	r4, [r3, #0]
 801720c:	b002      	add	sp, #8
 801720e:	bd10      	pop	{r4, pc}
 8017210:	9300      	str	r3, [sp, #0]
 8017212:	4613      	mov	r3, r2
 8017214:	460a      	mov	r2, r1
 8017216:	2100      	movs	r1, #0
 8017218:	f7ff ff5a 	bl	80170d0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 801721c:	e7f6      	b.n	801720c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

0801721e <DisplayUdfParams::Set(DisplayUdf*)>:
 801721e:	6843      	ldr	r3, [r0, #4]
 8017220:	009a      	lsls	r2, r3, #2
 8017222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017226:	4604      	mov	r4, r0
 8017228:	460e      	mov	r6, r1
 801722a:	d506      	bpl.n	801723a <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 801722c:	6988      	ldr	r0, [r1, #24]
 801722e:	b120      	cbz	r0, 801723a <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8017230:	6803      	ldr	r3, [r0, #0]
 8017232:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8017236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017238:	4798      	blx	r3
 801723a:	6863      	ldr	r3, [r4, #4]
 801723c:	69b0      	ldr	r0, [r6, #24]
 801723e:	00db      	lsls	r3, r3, #3
 8017240:	bf41      	itttt	mi
 8017242:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8017246:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 801724a:	4353      	mulmi	r3, r2
 801724c:	6173      	strmi	r3, [r6, #20]
 801724e:	6861      	ldr	r1, [r4, #4]
 8017250:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8017254:	b110      	cbz	r0, 801725c <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 8017256:	6803      	ldr	r3, [r0, #0]
 8017258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801725a:	4798      	blx	r3
 801725c:	2500      	movs	r5, #0
 801725e:	2701      	movs	r7, #1
 8017260:	f104 0808 	add.w	r8, r4, #8
 8017264:	6862      	ldr	r2, [r4, #4]
 8017266:	fa07 f305 	lsl.w	r3, r7, r5
 801726a:	4393      	bics	r3, r2
 801726c:	d105      	bne.n	801727a <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 801726e:	f818 1005 	ldrb.w	r1, [r8, r5]
 8017272:	462a      	mov	r2, r5
 8017274:	4630      	mov	r0, r6
 8017276:	f7ff fd0a 	bl	8016c8e <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 801727a:	3501      	adds	r5, #1
 801727c:	2d14      	cmp	r5, #20
 801727e:	d1f1      	bne.n	8017264 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8017280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017284 <DisplayUdfParams::Dump()>:
 8017284:	4770      	bx	lr

08017286 <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 8017286:	b570      	push	{r4, r5, r6, lr}
 8017288:	4605      	mov	r5, r0
 801728a:	6980      	ldr	r0, [r0, #24]
 801728c:	460c      	mov	r4, r1
 801728e:	b120      	cbz	r0, 801729a <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 8017290:	6803      	ldr	r3, [r0, #0]
 8017292:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8017296:	691b      	ldr	r3, [r3, #16]
 8017298:	4798      	blx	r3
 801729a:	69a8      	ldr	r0, [r5, #24]
 801729c:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 80172a0:	b190      	cbz	r0, 80172c8 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 80172a2:	7906      	ldrb	r6, [r0, #4]
 80172a4:	345b      	adds	r4, #91	; 0x5b
 80172a6:	2300      	movs	r3, #0
 80172a8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80172ac:	b119      	cbz	r1, 80172b6 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 80172ae:	1c59      	adds	r1, r3, #1
 80172b0:	429e      	cmp	r6, r3
 80172b2:	460b      	mov	r3, r1
 80172b4:	dcf8      	bgt.n	80172a8 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 80172b6:	6801      	ldr	r1, [r0, #0]
 80172b8:	69cc      	ldr	r4, [r1, #28]
 80172ba:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 80172be:	46a4      	mov	ip, r4
 80172c0:	b2db      	uxtb	r3, r3
 80172c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172c6:	4760      	bx	ip
 80172c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080172cc <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 80172cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172d0:	460c      	mov	r4, r1
 80172d2:	b089      	sub	sp, #36	; 0x24
 80172d4:	4606      	mov	r6, r0
 80172d6:	2301      	movs	r3, #1
 80172d8:	f10d 021f 	add.w	r2, sp, #31
 80172dc:	2100      	movs	r1, #0
 80172de:	4620      	mov	r0, r4
 80172e0:	f7f5 fac3 	bl	800c86a <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 80172e4:	b1e8      	cbz	r0, 8017322 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x56>
 80172e6:	f8d4 5928 	ldr.w	r5, [r4, #2344]	; 0x928
 80172ea:	4a2a      	ldr	r2, [pc, #168]	; (8017394 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xc8>)
 80172ec:	4b2a      	ldr	r3, [pc, #168]	; (8017398 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>)
 80172ee:	4f2b      	ldr	r7, [pc, #172]	; (801739c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>)
 80172f0:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 80172f4:	f89d 001f 	ldrb.w	r0, [sp, #31]
 80172f8:	2d00      	cmp	r5, #0
 80172fa:	bf18      	it	ne
 80172fc:	4613      	movne	r3, r2
 80172fe:	f8d4 5930 	ldr.w	r5, [r4, #2352]	; 0x930
 8017302:	4a27      	ldr	r2, [pc, #156]	; (80173a0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>)
 8017304:	2d00      	cmp	r5, #0
 8017306:	bf18      	it	ne
 8017308:	463a      	movne	r2, r7
 801730a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801730e:	e9cd 1000 	strd	r1, r0, [sp]
 8017312:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8017316:	4a23      	ldr	r2, [pc, #140]	; (80173a4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>)
 8017318:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
 801731c:	4630      	mov	r0, r6
 801731e:	f7f2 f81b 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 8017322:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8017398 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>
 8017326:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8017394 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xc8>
 801732a:	f8df a074 	ldr.w	sl, [pc, #116]	; 80173a0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>
 801732e:	4627      	mov	r7, r4
 8017330:	2500      	movs	r5, #0
 8017332:	4629      	mov	r1, r5
 8017334:	2301      	movs	r3, #1
 8017336:	f10d 021f 	add.w	r2, sp, #31
 801733a:	4620      	mov	r0, r4
 801733c:	f7f5 fa95 	bl	800c86a <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8017340:	3501      	adds	r5, #1
 8017342:	b300      	cbz	r0, 8017386 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xba>
 8017344:	f8d7 3928 	ldr.w	r3, [r7, #2344]	; 0x928
 8017348:	f8df b050 	ldr.w	fp, [pc, #80]	; 801739c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>
 801734c:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 8017350:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8017354:	f894 c03a 	ldrb.w	ip, [r4, #58]	; 0x3a
 8017358:	2b00      	cmp	r3, #0
 801735a:	bf0c      	ite	eq
 801735c:	46c6      	moveq	lr, r8
 801735e:	46ce      	movne	lr, r9
 8017360:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8017364:	f8cd c000 	str.w	ip, [sp]
 8017368:	2b00      	cmp	r3, #0
 801736a:	bf08      	it	eq
 801736c:	46d3      	moveq	fp, sl
 801736e:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8017372:	e9cd eb03 	strd	lr, fp, [sp, #12]
 8017376:	f106 0143 	add.w	r1, r6, #67	; 0x43
 801737a:	4a0b      	ldr	r2, [pc, #44]	; (80173a8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xdc>)
 801737c:	5d49      	ldrb	r1, [r1, r5]
 801737e:	462b      	mov	r3, r5
 8017380:	4630      	mov	r0, r6
 8017382:	f7f1 ffe9 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 8017386:	2d04      	cmp	r5, #4
 8017388:	f107 0728 	add.w	r7, r7, #40	; 0x28
 801738c:	d1d1      	bne.n	8017332 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x66>
 801738e:	b009      	add	sp, #36	; 0x24
 8017390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017394:	0801bebb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, fp, ip, sp, pc}
 8017398:	0801beb7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r9, sl, fp, ip, sp, pc}
 801739c:	0801bec7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r9, sl, fp, ip, sp, pc}
 80173a0:	0801d878 	stmdaeq	r1, {r3, r4, r5, r6, fp, ip, lr, pc}
 80173a4:	0801d87d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, fp, ip, lr, pc}
 80173a8:	0801d891 	stmdaeq	r1, {r0, r4, r7, fp, ip, lr, pc}

080173ac <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 80173ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173b0:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80173f4 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x48>
 80173b4:	b085      	sub	sp, #20
 80173b6:	4606      	mov	r6, r0
 80173b8:	f100 0849 	add.w	r8, r0, #73	; 0x49
 80173bc:	2541      	movs	r5, #65	; 0x41
 80173be:	f601 7758 	addw	r7, r1, #3928	; 0xf58
 80173c2:	012b      	lsls	r3, r5, #4
 80173c4:	464a      	mov	r2, r9
 80173c6:	58fc      	ldr	r4, [r7, r3]
 80173c8:	0e23      	lsrs	r3, r4, #24
 80173ca:	9303      	str	r3, [sp, #12]
 80173cc:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80173d0:	9302      	str	r3, [sp, #8]
 80173d2:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80173d6:	b2e4      	uxtb	r4, r4
 80173d8:	9301      	str	r3, [sp, #4]
 80173da:	9400      	str	r4, [sp, #0]
 80173dc:	462b      	mov	r3, r5
 80173de:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80173e2:	4630      	mov	r0, r6
 80173e4:	3501      	adds	r5, #1
 80173e6:	f7f1 ffb7 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 80173ea:	2d45      	cmp	r5, #69	; 0x45
 80173ec:	d1e9      	bne.n	80173c2 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 80173ee:	b005      	add	sp, #20
 80173f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173f4:	0801d8a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, fp, ip, lr, pc}

080173f8 <DisplayUdf::Show(ArtNetNode*)>:
 80173f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80173fa:	4604      	mov	r4, r0
 80173fc:	460d      	mov	r5, r1
 80173fe:	f7ff fcf5 	bl	8016dec <DisplayUdf::Show()>
 8017402:	4629      	mov	r1, r5
 8017404:	4620      	mov	r0, r4
 8017406:	f7ff ff3e 	bl	8017286 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 801740a:	4629      	mov	r1, r5
 801740c:	4620      	mov	r0, r4
 801740e:	f7ff ff5d 	bl	80172cc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8017412:	4629      	mov	r1, r5
 8017414:	4620      	mov	r0, r4
 8017416:	f7ff ffc9 	bl	80173ac <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 801741a:	f895 290b 	ldrb.w	r2, [r5, #2315]	; 0x90b
 801741e:	f895 390a 	ldrb.w	r3, [r5, #2314]	; 0x90a
 8017422:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8017426:	4413      	add	r3, r2
 8017428:	4620      	mov	r0, r4
 801742a:	4a0d      	ldr	r2, [pc, #52]	; (8017460 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 801742c:	f7f1 ff94 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 8017430:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8017432:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 8017436:	2a02      	cmp	r2, #2
 8017438:	d001      	beq.n	801743e <DisplayUdf::Show(ArtNetNode*)+0x46>
 801743a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801743c:	b92b      	cbnz	r3, 801744a <DisplayUdf::Show(ArtNetNode*)+0x52>
 801743e:	4a09      	ldr	r2, [pc, #36]	; (8017464 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 8017440:	4620      	mov	r0, r4
 8017442:	f7f1 ff89 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 8017446:	b003      	add	sp, #12
 8017448:	bd30      	pop	{r4, r5, pc}
 801744a:	4807      	ldr	r0, [pc, #28]	; (8017468 <DisplayUdf::Show(ArtNetNode*)+0x70>)
 801744c:	9300      	str	r3, [sp, #0]
 801744e:	4b07      	ldr	r3, [pc, #28]	; (801746c <DisplayUdf::Show(ArtNetNode*)+0x74>)
 8017450:	2a00      	cmp	r2, #0
 8017452:	bf08      	it	eq
 8017454:	4603      	moveq	r3, r0
 8017456:	4a06      	ldr	r2, [pc, #24]	; (8017470 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 8017458:	4620      	mov	r0, r4
 801745a:	f7f1 ff7d 	bl	8009358 <Display::Printf(unsigned char, char const*, ...)>
 801745e:	e7f2      	b.n	8017446 <DisplayUdf::Show(ArtNetNode*)+0x4e>
 8017460:	0801d8b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, fp, ip, lr, pc}
 8017464:	0801d8be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, fp, ip, lr, pc}
 8017468:	0801c1ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, lr, pc}
 801746c:	0801c1af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, lr, pc}
 8017470:	0801d8c5 	stmdaeq	r1, {r0, r2, r6, r7, fp, ip, lr, pc}

08017474 <NetworkDisplay::ShowEmacStart()>:
 8017474:	4b01      	ldr	r3, [pc, #4]	; (801747c <NetworkDisplay::ShowEmacStart()+0x8>)
 8017476:	6818      	ldr	r0, [r3, #0]
 8017478:	f7ff bc22 	b.w	8016cc0 <DisplayUdf::ShowEmacStart()>
 801747c:	2000fccc 	andcs	pc, r0, ip, asr #25

08017480 <NetworkDisplay::ShowIp()>:
 8017480:	4b01      	ldr	r3, [pc, #4]	; (8017488 <NetworkDisplay::ShowIp()+0x8>)
 8017482:	6818      	ldr	r0, [r3, #0]
 8017484:	f7ff bc2c 	b.w	8016ce0 <DisplayUdf::ShowIpAddress()>
 8017488:	2000fccc 	andcs	pc, r0, ip, asr #25

0801748c <NetworkDisplay::ShowNetMask()>:
 801748c:	4b01      	ldr	r3, [pc, #4]	; (8017494 <NetworkDisplay::ShowNetMask()+0x8>)
 801748e:	6818      	ldr	r0, [r3, #0]
 8017490:	f7ff bc5a 	b.w	8016d48 <DisplayUdf::ShowNetmask()>
 8017494:	2000fccc 	andcs	pc, r0, ip, asr #25

08017498 <NetworkDisplay::ShowGatewayIp()>:
 8017498:	4b01      	ldr	r3, [pc, #4]	; (80174a0 <NetworkDisplay::ShowGatewayIp()+0x8>)
 801749a:	6818      	ldr	r0, [r3, #0]
 801749c:	f7ff bc72 	b.w	8016d84 <DisplayUdf::ShowGatewayIp()>
 80174a0:	2000fccc 	andcs	pc, r0, ip, asr #25

080174a4 <NetworkDisplay::ShowHostName()>:
 80174a4:	4b01      	ldr	r3, [pc, #4]	; (80174ac <NetworkDisplay::ShowHostName()+0x8>)
 80174a6:	6818      	ldr	r0, [r3, #0]
 80174a8:	f7ff bc8c 	b.w	8016dc4 <DisplayUdf::ShowHostName()>
 80174ac:	2000fccc 	andcs	pc, r0, ip, asr #25

080174b0 <NetworkDisplay::ShowShutdown()>:
 80174b0:	4b01      	ldr	r3, [pc, #4]	; (80174b8 <NetworkDisplay::ShowShutdown()+0x8>)
 80174b2:	6818      	ldr	r0, [r3, #0]
 80174b4:	f7ff bd14 	b.w	8016ee0 <DisplayUdf::ShowShutdown()>
 80174b8:	2000fccc 	andcs	pc, r0, ip, asr #25

080174bc <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 80174bc:	4b01      	ldr	r3, [pc, #4]	; (80174c4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 80174be:	6818      	ldr	r0, [r3, #0]
 80174c0:	f7ff bcd6 	b.w	8016e70 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80174c4:	2000fccc 	andcs	pc, r0, ip, asr #25

080174c8 <properties::convert_json_file(char*, unsigned short, bool)>:
 80174c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174cc:	7803      	ldrb	r3, [r0, #0]
 80174ce:	2b7b      	cmp	r3, #123	; 0x7b
 80174d0:	f040 80a4 	bne.w	801761c <properties::convert_json_file(char*, unsigned short, bool)+0x154>
 80174d4:	b182      	cbz	r2, 80174f8 <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 80174d6:	2401      	movs	r4, #1
 80174d8:	4606      	mov	r6, r0
 80174da:	4623      	mov	r3, r4
 80174dc:	2a00      	cmp	r2, #0
 80174de:	bf0c      	ite	eq
 80174e0:	f04f 0c0a 	moveq.w	ip, #10
 80174e4:	f04f 0c00 	movne.w	ip, #0
 80174e8:	273d      	movs	r7, #61	; 0x3d
 80174ea:	42a1      	cmp	r1, r4
 80174ec:	d852      	bhi.n	8017594 <properties::convert_json_file(char*, unsigned short, bool)+0xcc>
 80174ee:	4618      	mov	r0, r3
 80174f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174f4:	463c      	mov	r4, r7
 80174f6:	e7f1      	b.n	80174dc <properties::convert_json_file(char*, unsigned short, bool)+0x14>
 80174f8:	2323      	movs	r3, #35	; 0x23
 80174fa:	f800 3b01 	strb.w	r3, [r0], #1
 80174fe:	2701      	movs	r7, #1
 8017500:	4604      	mov	r4, r0
 8017502:	42b9      	cmp	r1, r7
 8017504:	d811      	bhi.n	801752a <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 8017506:	2301      	movs	r3, #1
 8017508:	4606      	mov	r6, r0
 801750a:	200a      	movs	r0, #10
 801750c:	f806 0b01 	strb.w	r0, [r6], #1
 8017510:	3301      	adds	r3, #1
 8017512:	4625      	mov	r5, r4
 8017514:	4628      	mov	r0, r5
 8017516:	3501      	adds	r5, #1
 8017518:	7804      	ldrb	r4, [r0, #0]
 801751a:	2c7b      	cmp	r4, #123	; 0x7b
 801751c:	d0ea      	beq.n	80174f4 <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 801751e:	42b9      	cmp	r1, r7
 8017520:	f107 0401 	add.w	r4, r7, #1
 8017524:	d9da      	bls.n	80174dc <properties::convert_json_file(char*, unsigned short, bool)+0x14>
 8017526:	4627      	mov	r7, r4
 8017528:	e7f4      	b.n	8017514 <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 801752a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801752e:	2b22      	cmp	r3, #34	; 0x22
 8017530:	d119      	bne.n	8017566 <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 8017532:	46a4      	mov	ip, r4
 8017534:	4605      	mov	r5, r0
 8017536:	2601      	movs	r6, #1
 8017538:	f89c e000 	ldrb.w	lr, [ip]
 801753c:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8017540:	4664      	mov	r4, ip
 8017542:	4628      	mov	r0, r5
 8017544:	4633      	mov	r3, r6
 8017546:	f10c 0c01 	add.w	ip, ip, #1
 801754a:	f105 0501 	add.w	r5, r5, #1
 801754e:	f106 0601 	add.w	r6, r6, #1
 8017552:	d0d9      	beq.n	8017508 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8017554:	3701      	adds	r7, #1
 8017556:	42b9      	cmp	r1, r7
 8017558:	4664      	mov	r4, ip
 801755a:	f805 ec01 	strb.w	lr, [r5, #-1]
 801755e:	d8eb      	bhi.n	8017538 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 8017560:	4633      	mov	r3, r6
 8017562:	4628      	mov	r0, r5
 8017564:	e7d0      	b.n	8017508 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8017566:	3701      	adds	r7, #1
 8017568:	e7cb      	b.n	8017502 <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 801756a:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 801756e:	d111      	bne.n	8017594 <properties::convert_json_file(char*, unsigned short, bool)+0xcc>
 8017570:	eba3 0800 	sub.w	r8, r3, r0
 8017574:	eb08 0300 	add.w	r3, r8, r0
 8017578:	4602      	mov	r2, r0
 801757a:	f810 eb01 	ldrb.w	lr, [r0], #1
 801757e:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8017582:	f104 0501 	add.w	r5, r4, #1
 8017586:	d04c      	beq.n	8017622 <properties::convert_json_file(char*, unsigned short, bool)+0x15a>
 8017588:	42a1      	cmp	r1, r4
 801758a:	d911      	bls.n	80175b0 <properties::convert_json_file(char*, unsigned short, bool)+0xe8>
 801758c:	f806 eb01 	strb.w	lr, [r6], #1
 8017590:	462c      	mov	r4, r5
 8017592:	e7ef      	b.n	8017574 <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 8017594:	42a1      	cmp	r1, r4
 8017596:	f890 e000 	ldrb.w	lr, [r0]
 801759a:	4605      	mov	r5, r0
 801759c:	f104 0401 	add.w	r4, r4, #1
 80175a0:	f100 0001 	add.w	r0, r0, #1
 80175a4:	d8e1      	bhi.n	801756a <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 80175a6:	4628      	mov	r0, r5
 80175a8:	e7e2      	b.n	8017570 <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 80175aa:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 80175ae:	d009      	beq.n	80175c4 <properties::convert_json_file(char*, unsigned short, bool)+0xfc>
 80175b0:	42a9      	cmp	r1, r5
 80175b2:	f892 e000 	ldrb.w	lr, [r2]
 80175b6:	4614      	mov	r4, r2
 80175b8:	f105 0501 	add.w	r5, r5, #1
 80175bc:	f102 0201 	add.w	r2, r2, #1
 80175c0:	d8f3      	bhi.n	80175aa <properties::convert_json_file(char*, unsigned short, bool)+0xe2>
 80175c2:	4622      	mov	r2, r4
 80175c4:	7814      	ldrb	r4, [r2, #0]
 80175c6:	2c2f      	cmp	r4, #47	; 0x2f
 80175c8:	4696      	mov	lr, r2
 80175ca:	4628      	mov	r0, r5
 80175cc:	f102 0201 	add.w	r2, r2, #1
 80175d0:	f105 0501 	add.w	r5, r5, #1
 80175d4:	d81a      	bhi.n	801760c <properties::convert_json_file(char*, unsigned short, bool)+0x144>
 80175d6:	4281      	cmp	r1, r0
 80175d8:	d8f4      	bhi.n	80175c4 <properties::convert_json_file(char*, unsigned short, bool)+0xfc>
 80175da:	2c22      	cmp	r4, #34	; 0x22
 80175dc:	bf08      	it	eq
 80175de:	4696      	moveq	lr, r2
 80175e0:	4670      	mov	r0, lr
 80175e2:	1c6c      	adds	r4, r5, #1
 80175e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175e8:	2a22      	cmp	r2, #34	; 0x22
 80175ea:	d011      	beq.n	8017610 <properties::convert_json_file(char*, unsigned short, bool)+0x148>
 80175ec:	2a2c      	cmp	r2, #44	; 0x2c
 80175ee:	d00f      	beq.n	8017610 <properties::convert_json_file(char*, unsigned short, bool)+0x148>
 80175f0:	2a7d      	cmp	r2, #125	; 0x7d
 80175f2:	d00d      	beq.n	8017610 <properties::convert_json_file(char*, unsigned short, bool)+0x148>
 80175f4:	42a9      	cmp	r1, r5
 80175f6:	d90f      	bls.n	8017618 <properties::convert_json_file(char*, unsigned short, bool)+0x150>
 80175f8:	f1a2 0520 	sub.w	r5, r2, #32
 80175fc:	2d5a      	cmp	r5, #90	; 0x5a
 80175fe:	d803      	bhi.n	8017608 <properties::convert_json_file(char*, unsigned short, bool)+0x140>
 8017600:	f806 2b01 	strb.w	r2, [r6], #1
 8017604:	3301      	adds	r3, #1
 8017606:	4686      	mov	lr, r0
 8017608:	4625      	mov	r5, r4
 801760a:	e7e9      	b.n	80175e0 <properties::convert_json_file(char*, unsigned short, bool)+0x118>
 801760c:	4605      	mov	r5, r0
 801760e:	e7e7      	b.n	80175e0 <properties::convert_json_file(char*, unsigned short, bool)+0x118>
 8017610:	f806 cb01 	strb.w	ip, [r6], #1
 8017614:	3301      	adds	r3, #1
 8017616:	462c      	mov	r4, r5
 8017618:	3401      	adds	r4, #1
 801761a:	e766      	b.n	80174ea <properties::convert_json_file(char*, unsigned short, bool)+0x22>
 801761c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017620:	e766      	b.n	80174f0 <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 8017622:	f806 7b01 	strb.w	r7, [r6], #1
 8017626:	3301      	adds	r3, #1
 8017628:	4625      	mov	r5, r4
 801762a:	e7c1      	b.n	80175b0 <properties::convert_json_file(char*, unsigned short, bool)+0xe8>

0801762c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 801762c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017630:	6002      	str	r2, [r0, #0]
 8017632:	4614      	mov	r4, r2
 8017634:	2200      	movs	r2, #0
 8017636:	80c2      	strh	r2, [r0, #6]
 8017638:	4a1c      	ldr	r2, [pc, #112]	; (80176ac <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 801763a:	8083      	strh	r3, [r0, #4]
 801763c:	7812      	ldrb	r2, [r2, #0]
 801763e:	f002 0201 	and.w	r2, r2, #1
 8017642:	4606      	mov	r6, r0
 8017644:	7202      	strb	r2, [r0, #8]
 8017646:	4608      	mov	r0, r1
 8017648:	4605      	mov	r5, r0
 801764a:	3001      	adds	r0, #1
 801764c:	782f      	ldrb	r7, [r5, #0]
 801764e:	2f00      	cmp	r7, #0
 8017650:	d1fa      	bne.n	8017648 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8017652:	1a6d      	subs	r5, r5, r1
 8017654:	b29b      	uxth	r3, r3
 8017656:	b1d2      	cbz	r2, 801768e <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8017658:	1d2f      	adds	r7, r5, #4
 801765a:	429f      	cmp	r7, r3
 801765c:	d814      	bhi.n	8017688 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 801765e:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8017662:	f04f 0922 	mov.w	r9, #34	; 0x22
 8017666:	462a      	mov	r2, r5
 8017668:	f884 8000 	strb.w	r8, [r4]
 801766c:	f884 9001 	strb.w	r9, [r4, #1]
 8017670:	1ca0      	adds	r0, r4, #2
 8017672:	f000 ff0e 	bl	8018492 <memmove>
 8017676:	1963      	adds	r3, r4, r5
 8017678:	223a      	movs	r2, #58	; 0x3a
 801767a:	f883 9002 	strb.w	r9, [r3, #2]
 801767e:	70da      	strb	r2, [r3, #3]
 8017680:	3505      	adds	r5, #5
 8017682:	f804 8007 	strb.w	r8, [r4, r7]
 8017686:	80f5      	strh	r5, [r6, #6]
 8017688:	4630      	mov	r0, r6
 801768a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801768e:	1caf      	adds	r7, r5, #2
 8017690:	429f      	cmp	r7, r3
 8017692:	d8f9      	bhi.n	8017688 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8017694:	4620      	mov	r0, r4
 8017696:	2323      	movs	r3, #35	; 0x23
 8017698:	f800 3b01 	strb.w	r3, [r0], #1
 801769c:	462a      	mov	r2, r5
 801769e:	442c      	add	r4, r5
 80176a0:	f000 fef7 	bl	8018492 <memmove>
 80176a4:	230a      	movs	r3, #10
 80176a6:	7063      	strb	r3, [r4, #1]
 80176a8:	80f7      	strh	r7, [r6, #6]
 80176aa:	e7ed      	b.n	8017688 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 80176ac:	2000fcd0 	ldrdcs	pc, [r0], -r0

080176b0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 80176b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176b2:	469c      	mov	ip, r3
 80176b4:	8885      	ldrh	r5, [r0, #4]
 80176b6:	88c3      	ldrh	r3, [r0, #6]
 80176b8:	42ab      	cmp	r3, r5
 80176ba:	b085      	sub	sp, #20
 80176bc:	d302      	bcc.n	80176c4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 80176be:	2000      	movs	r0, #0
 80176c0:	b005      	add	sp, #20
 80176c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176c4:	4604      	mov	r4, r0
 80176c6:	6800      	ldr	r0, [r0, #0]
 80176c8:	f894 e008 	ldrb.w	lr, [r4, #8]
 80176cc:	4418      	add	r0, r3
 80176ce:	1aed      	subs	r5, r5, r3
 80176d0:	b2d6      	uxtb	r6, r2
 80176d2:	f3c2 2707 	ubfx	r7, r2, #8, #8
 80176d6:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80176da:	0e12      	lsrs	r2, r2, #24
 80176dc:	f1bc 0f00 	cmp.w	ip, #0
 80176e0:	d109      	bne.n	80176f6 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 80176e2:	f1be 0f00 	cmp.w	lr, #0
 80176e6:	d109      	bne.n	80176fc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 80176e8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80176ec:	e9cd 6700 	strd	r6, r7, [sp]
 80176f0:	4a0e      	ldr	r2, [pc, #56]	; (801772c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 80176f2:	460b      	mov	r3, r1
 80176f4:	e008      	b.n	8017708 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 80176f6:	f1be 0f00 	cmp.w	lr, #0
 80176fa:	d00f      	beq.n	801771c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 80176fc:	e9cd 6700 	strd	r6, r7, [sp]
 8017700:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017704:	4a0a      	ldr	r2, [pc, #40]	; (8017730 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8017706:	460b      	mov	r3, r1
 8017708:	4629      	mov	r1, r5
 801770a:	f7f2 ff57 	bl	800a5bc <snprintf>
 801770e:	4285      	cmp	r5, r0
 8017710:	dbd5      	blt.n	80176be <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 8017712:	88e3      	ldrh	r3, [r4, #6]
 8017714:	4403      	add	r3, r0
 8017716:	80e3      	strh	r3, [r4, #6]
 8017718:	2001      	movs	r0, #1
 801771a:	e7d1      	b.n	80176c0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 801771c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017720:	e9cd 6700 	strd	r6, r7, [sp]
 8017724:	4a03      	ldr	r2, [pc, #12]	; (8017734 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8017726:	460b      	mov	r3, r1
 8017728:	e7ee      	b.n	8017708 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 801772a:	bf00      	nop
 801772c:	0801d988 	stmdaeq	r1, {r3, r7, r8, fp, ip, lr, pc}
 8017730:	0801d974 	stmdaeq	r1, {r2, r4, r5, r6, r8, fp, ip, lr, pc}
 8017734:	0801d989 	stmdaeq	r1, {r0, r3, r7, r8, fp, ip, lr, pc}

08017738 <PropertiesBuilder::AddComment(char const*)>:
 8017738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801773a:	7a06      	ldrb	r6, [r0, #8]
 801773c:	b996      	cbnz	r6, 8017764 <PropertiesBuilder::AddComment(char const*)+0x2c>
 801773e:	4604      	mov	r4, r0
 8017740:	88c0      	ldrh	r0, [r0, #6]
 8017742:	88a5      	ldrh	r5, [r4, #4]
 8017744:	42a8      	cmp	r0, r5
 8017746:	d20d      	bcs.n	8017764 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8017748:	6827      	ldr	r7, [r4, #0]
 801774a:	4a07      	ldr	r2, [pc, #28]	; (8017768 <PropertiesBuilder::AddComment(char const*)+0x30>)
 801774c:	1a2d      	subs	r5, r5, r0
 801774e:	460b      	mov	r3, r1
 8017750:	4438      	add	r0, r7
 8017752:	4629      	mov	r1, r5
 8017754:	f7f2 ff32 	bl	800a5bc <snprintf>
 8017758:	4285      	cmp	r5, r0
 801775a:	bfa1      	itttt	ge
 801775c:	88e3      	ldrhge	r3, [r4, #6]
 801775e:	18c0      	addge	r0, r0, r3
 8017760:	80e0      	strhge	r0, [r4, #6]
 8017762:	2601      	movge	r6, #1
 8017764:	4630      	mov	r0, r6
 8017766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017768:	0801d999 	stmdaeq	r1, {r0, r3, r4, r7, r8, fp, ip, lr, pc}

0801776c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 801776c:	e9c0 1200 	strd	r1, r2, [r0]
 8017770:	4770      	bx	lr

08017772 <ReadConfigFile::~ReadConfigFile()>:
 8017772:	4770      	bx	lr

08017774 <ReadConfigFile::Read(char const*, unsigned int)>:
 8017774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017778:	4606      	mov	r6, r0
 801777a:	b0a0      	sub	sp, #128	; 0x80
 801777c:	460d      	mov	r5, r1
 801777e:	4614      	mov	r4, r2
 8017780:	f04f 0800 	mov.w	r8, #0
 8017784:	b33c      	cbz	r4, 80177d6 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8017786:	466b      	mov	r3, sp
 8017788:	462a      	mov	r2, r5
 801778a:	4619      	mov	r1, r3
 801778c:	e007      	b.n	801779e <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 801778e:	f803 7b01 	strb.w	r7, [r3], #1
 8017792:	1a58      	subs	r0, r3, r1
 8017794:	287f      	cmp	r0, #127	; 0x7f
 8017796:	4615      	mov	r5, r2
 8017798:	dc1d      	bgt.n	80177d6 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 801779a:	3c01      	subs	r4, #1
 801779c:	d00f      	beq.n	80177be <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 801779e:	7817      	ldrb	r7, [r2, #0]
 80177a0:	2f0d      	cmp	r7, #13
 80177a2:	4610      	mov	r0, r2
 80177a4:	f102 0201 	add.w	r2, r2, #1
 80177a8:	d001      	beq.n	80177ae <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 80177aa:	2f0a      	cmp	r7, #10
 80177ac:	d1ef      	bne.n	801778e <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 80177ae:	4605      	mov	r5, r0
 80177b0:	b12c      	cbz	r4, 80177be <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 80177b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177b6:	2a0d      	cmp	r2, #13
 80177b8:	d00b      	beq.n	80177d2 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 80177ba:	2a0a      	cmp	r2, #10
 80177bc:	d009      	beq.n	80177d2 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 80177be:	f89d 2000 	ldrb.w	r2, [sp]
 80177c2:	2a60      	cmp	r2, #96	; 0x60
 80177c4:	d9de      	bls.n	8017784 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80177c6:	f883 8000 	strb.w	r8, [r3]
 80177ca:	e9d6 3000 	ldrd	r3, r0, [r6]
 80177ce:	4798      	blx	r3
 80177d0:	e7d8      	b.n	8017784 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80177d2:	3c01      	subs	r4, #1
 80177d4:	e7eb      	b.n	80177ae <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 80177d6:	b020      	add	sp, #128	; 0x80
 80177d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080177dc <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 80177dc:	b570      	push	{r4, r5, r6, lr}
 80177de:	4615      	mov	r5, r2
 80177e0:	461c      	mov	r4, r3
 80177e2:	f000 f916 	bl	8017a12 <Sscan::checkName(char const*, char const*)>
 80177e6:	b180      	cbz	r0, 801780a <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 80177e8:	2100      	movs	r1, #0
 80177ea:	5c43      	ldrb	r3, [r0, r1]
 80177ec:	6826      	ldr	r6, [r4, #0]
 80177ee:	b28a      	uxth	r2, r1
 80177f0:	b143      	cbz	r3, 8017804 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 80177f2:	42b2      	cmp	r2, r6
 80177f4:	d303      	bcc.n	80177fe <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 80177f6:	2b0a      	cmp	r3, #10
 80177f8:	d004      	beq.n	8017804 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 80177fa:	2002      	movs	r0, #2
 80177fc:	e004      	b.n	8017808 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 80177fe:	546b      	strb	r3, [r5, r1]
 8017800:	3101      	adds	r1, #1
 8017802:	e7f2      	b.n	80177ea <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 8017804:	6022      	str	r2, [r4, #0]
 8017806:	2000      	movs	r0, #0
 8017808:	bd70      	pop	{r4, r5, r6, pc}
 801780a:	2001      	movs	r0, #1
 801780c:	e7fc      	b.n	8017808 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

0801780e <Sscan::Float(char const*, char const*, float&)>:
 801780e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017810:	4614      	mov	r4, r2
 8017812:	f000 f8fe 	bl	8017a12 <Sscan::checkName(char const*, char const*)>
 8017816:	2800      	cmp	r0, #0
 8017818:	d052      	beq.n	80178c0 <Sscan::Float(char const*, char const*, float&)+0xb2>
 801781a:	7803      	ldrb	r3, [r0, #0]
 801781c:	2b2d      	cmp	r3, #45	; 0x2d
 801781e:	bf04      	itt	eq
 8017820:	3001      	addeq	r0, #1
 8017822:	2601      	moveq	r6, #1
 8017824:	7803      	ldrb	r3, [r0, #0]
 8017826:	bf18      	it	ne
 8017828:	2600      	movne	r6, #0
 801782a:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 801782e:	d101      	bne.n	8017834 <Sscan::Float(char const*, char const*, float&)+0x26>
 8017830:	2002      	movs	r0, #2
 8017832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017834:	2300      	movs	r3, #0
 8017836:	210a      	movs	r1, #10
 8017838:	7802      	ldrb	r2, [r0, #0]
 801783a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801783e:	2d09      	cmp	r5, #9
 8017840:	d8f6      	bhi.n	8017830 <Sscan::Float(char const*, char const*, float&)+0x22>
 8017842:	fb01 2303 	mla	r3, r1, r3, r2
 8017846:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801784a:	2a2e      	cmp	r2, #46	; 0x2e
 801784c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8017850:	d002      	beq.n	8017858 <Sscan::Float(char const*, char const*, float&)+0x4a>
 8017852:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8017856:	d1ef      	bne.n	8017838 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8017858:	ee07 3a90 	vmov	s15, r3
 801785c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017860:	edc4 7a00 	vstr	s15, [r4]
 8017864:	7803      	ldrb	r3, [r0, #0]
 8017866:	2b2e      	cmp	r3, #46	; 0x2e
 8017868:	d007      	beq.n	801787a <Sscan::Float(char const*, char const*, float&)+0x6c>
 801786a:	b90e      	cbnz	r6, 8017870 <Sscan::Float(char const*, char const*, float&)+0x62>
 801786c:	2000      	movs	r0, #0
 801786e:	e7e0      	b.n	8017832 <Sscan::Float(char const*, char const*, float&)+0x24>
 8017870:	eef1 7a67 	vneg.f32	s15, s15
 8017874:	edc4 7a00 	vstr	s15, [r4]
 8017878:	e7f8      	b.n	801786c <Sscan::Float(char const*, char const*, float&)+0x5e>
 801787a:	4603      	mov	r3, r0
 801787c:	2101      	movs	r1, #1
 801787e:	2500      	movs	r5, #0
 8017880:	270a      	movs	r7, #10
 8017882:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8017886:	f012 00df 	ands.w	r0, r2, #223	; 0xdf
 801788a:	d112      	bne.n	80178b2 <Sscan::Float(char const*, char const*, float&)+0xa4>
 801788c:	ee07 5a10 	vmov	s14, r5
 8017890:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8017894:	ee07 1a10 	vmov	s14, r1
 8017898:	eef8 6a47 	vcvt.f32.u32	s13, s14
 801789c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80178a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80178a4:	2e00      	cmp	r6, #0
 80178a6:	d0e5      	beq.n	8017874 <Sscan::Float(char const*, char const*, float&)+0x66>
 80178a8:	eef1 7a67 	vneg.f32	s15, s15
 80178ac:	edc4 7a00 	vstr	s15, [r4]
 80178b0:	e7bf      	b.n	8017832 <Sscan::Float(char const*, char const*, float&)+0x24>
 80178b2:	3a30      	subs	r2, #48	; 0x30
 80178b4:	2a09      	cmp	r2, #9
 80178b6:	d8bb      	bhi.n	8017830 <Sscan::Float(char const*, char const*, float&)+0x22>
 80178b8:	fb07 2505 	mla	r5, r7, r5, r2
 80178bc:	4379      	muls	r1, r7
 80178be:	e7e0      	b.n	8017882 <Sscan::Float(char const*, char const*, float&)+0x74>
 80178c0:	2001      	movs	r0, #1
 80178c2:	e7b6      	b.n	8017832 <Sscan::Float(char const*, char const*, float&)+0x24>

080178c4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 80178c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80178c6:	4615      	mov	r5, r2
 80178c8:	f000 f8a3 	bl	8017a12 <Sscan::checkName(char const*, char const*)>
 80178cc:	bb58      	cbnz	r0, 8017926 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 80178ce:	2001      	movs	r0, #1
 80178d0:	e027      	b.n	8017922 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 80178d2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80178d6:	2b09      	cmp	r3, #9
 80178d8:	d822      	bhi.n	8017920 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80178da:	fb0c 2101 	mla	r1, ip, r1, r2
 80178de:	3930      	subs	r1, #48	; 0x30
 80178e0:	4603      	mov	r3, r0
 80178e2:	4618      	mov	r0, r3
 80178e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178e8:	2a2e      	cmp	r2, #46	; 0x2e
 80178ea:	d115      	bne.n	8017918 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 80178ec:	29ff      	cmp	r1, #255	; 0xff
 80178ee:	d817      	bhi.n	8017920 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80178f0:	3401      	adds	r4, #1
 80178f2:	2c03      	cmp	r4, #3
 80178f4:	f806 1b01 	strb.w	r1, [r6], #1
 80178f8:	d119      	bne.n	801792e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 80178fa:	1d1a      	adds	r2, r3, #4
 80178fc:	2400      	movs	r4, #0
 80178fe:	260a      	movs	r6, #10
 8017900:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8017904:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8017908:	d115      	bne.n	8017936 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 801790a:	2cff      	cmp	r4, #255	; 0xff
 801790c:	d808      	bhi.n	8017920 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801790e:	f88d 4007 	strb.w	r4, [sp, #7]
 8017912:	9b01      	ldr	r3, [sp, #4]
 8017914:	602b      	str	r3, [r5, #0]
 8017916:	e004      	b.n	8017922 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8017918:	2a00      	cmp	r2, #0
 801791a:	d0e7      	beq.n	80178ec <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 801791c:	42b8      	cmp	r0, r7
 801791e:	d1d8      	bne.n	80178d2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 8017920:	2002      	movs	r0, #2
 8017922:	b003      	add	sp, #12
 8017924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017926:	ae01      	add	r6, sp, #4
 8017928:	2400      	movs	r4, #0
 801792a:	f04f 0c0a 	mov.w	ip, #10
 801792e:	4603      	mov	r3, r0
 8017930:	1d07      	adds	r7, r0, #4
 8017932:	2100      	movs	r1, #0
 8017934:	e7d5      	b.n	80178e2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 8017936:	4293      	cmp	r3, r2
 8017938:	d0f2      	beq.n	8017920 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801793a:	3930      	subs	r1, #48	; 0x30
 801793c:	2909      	cmp	r1, #9
 801793e:	d8ef      	bhi.n	8017920 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8017940:	fb06 1404 	mla	r4, r6, r4, r1
 8017944:	e7dc      	b.n	8017900 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

08017946 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8017946:	b538      	push	{r3, r4, r5, lr}
 8017948:	4614      	mov	r4, r2
 801794a:	f000 f862 	bl	8017a12 <Sscan::checkName(char const*, char const*)>
 801794e:	b1a8      	cbz	r0, 801797c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x36>
 8017950:	2100      	movs	r1, #0
 8017952:	220a      	movs	r2, #10
 8017954:	7803      	ldrb	r3, [r0, #0]
 8017956:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 801795a:	2d09      	cmp	r5, #9
 801795c:	d810      	bhi.n	8017980 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x3a>
 801795e:	fb02 3101 	mla	r1, r2, r1, r3
 8017962:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8017966:	f013 03df 	ands.w	r3, r3, #223	; 0xdf
 801796a:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
 801796e:	d1f1      	bne.n	8017954 <Sscan::Uint16(char const*, char const*, unsigned short&)+0xe>
 8017970:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8017974:	d204      	bcs.n	8017980 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x3a>
 8017976:	8021      	strh	r1, [r4, #0]
 8017978:	4618      	mov	r0, r3
 801797a:	bd38      	pop	{r3, r4, r5, pc}
 801797c:	2301      	movs	r3, #1
 801797e:	e7fb      	b.n	8017978 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 8017980:	2302      	movs	r3, #2
 8017982:	e7f9      	b.n	8017978 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08017984 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 8017984:	b570      	push	{r4, r5, r6, lr}
 8017986:	4614      	mov	r4, r2
 8017988:	f000 f843 	bl	8017a12 <Sscan::checkName(char const*, char const*)>
 801798c:	b1f8      	cbz	r0, 80179ce <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 801798e:	2300      	movs	r3, #0
 8017990:	461a      	mov	r2, r3
 8017992:	260a      	movs	r6, #10
 8017994:	7805      	ldrb	r5, [r0, #0]
 8017996:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 801799a:	2909      	cmp	r1, #9
 801799c:	d819      	bhi.n	80179d2 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 801799e:	fba3 3106 	umull	r3, r1, r3, r6
 80179a2:	fb06 1102 	mla	r1, r6, r2, r1
 80179a6:	3b30      	subs	r3, #48	; 0x30
 80179a8:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80179ac:	18eb      	adds	r3, r5, r3
 80179ae:	f141 0200 	adc.w	r2, r1, #0
 80179b2:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80179b6:	f011 01df 	ands.w	r1, r1, #223	; 0xdf
 80179ba:	d1eb      	bne.n	8017994 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x10>
 80179bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80179c0:	4298      	cmp	r0, r3
 80179c2:	eb71 0202 	sbcs.w	r2, r1, r2
 80179c6:	d304      	bcc.n	80179d2 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 80179c8:	6023      	str	r3, [r4, #0]
 80179ca:	4608      	mov	r0, r1
 80179cc:	bd70      	pop	{r4, r5, r6, pc}
 80179ce:	2101      	movs	r1, #1
 80179d0:	e7fb      	b.n	80179ca <Sscan::Uint32(char const*, char const*, unsigned int&)+0x46>
 80179d2:	2102      	movs	r1, #2
 80179d4:	e7f9      	b.n	80179ca <Sscan::Uint32(char const*, char const*, unsigned int&)+0x46>

080179d6 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 80179d6:	b538      	push	{r3, r4, r5, lr}
 80179d8:	4614      	mov	r4, r2
 80179da:	f000 f81a 	bl	8017a12 <Sscan::checkName(char const*, char const*)>
 80179de:	b1a0      	cbz	r0, 8017a0a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x34>
 80179e0:	2100      	movs	r1, #0
 80179e2:	220a      	movs	r2, #10
 80179e4:	7803      	ldrb	r3, [r0, #0]
 80179e6:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80179ea:	2d09      	cmp	r5, #9
 80179ec:	d80f      	bhi.n	8017a0e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x38>
 80179ee:	fb02 3101 	mla	r1, r2, r1, r3
 80179f2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80179f6:	f013 03df 	ands.w	r3, r3, #223	; 0xdf
 80179fa:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
 80179fe:	d1f1      	bne.n	80179e4 <Sscan::Uint8(char const*, char const*, unsigned char&)+0xe>
 8017a00:	29ff      	cmp	r1, #255	; 0xff
 8017a02:	d804      	bhi.n	8017a0e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x38>
 8017a04:	7021      	strb	r1, [r4, #0]
 8017a06:	4618      	mov	r0, r3
 8017a08:	bd38      	pop	{r3, r4, r5, pc}
 8017a0a:	2301      	movs	r3, #1
 8017a0c:	e7fb      	b.n	8017a06 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 8017a0e:	2302      	movs	r3, #2
 8017a10:	e7f9      	b.n	8017a06 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

08017a12 <Sscan::checkName(char const*, char const*)>:
 8017a12:	b510      	push	{r4, lr}
 8017a14:	3901      	subs	r1, #1
 8017a16:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017a1a:	4604      	mov	r4, r0
 8017a1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a20:	b123      	cbz	r3, 8017a2c <Sscan::checkName(char const*, char const*)+0x1a>
 8017a22:	b10a      	cbz	r2, 8017a28 <Sscan::checkName(char const*, char const*)+0x16>
 8017a24:	4293      	cmp	r3, r2
 8017a26:	d0f6      	beq.n	8017a16 <Sscan::checkName(char const*, char const*)+0x4>
 8017a28:	2000      	movs	r0, #0
 8017a2a:	e006      	b.n	8017a3a <Sscan::checkName(char const*, char const*)+0x28>
 8017a2c:	2a3d      	cmp	r2, #61	; 0x3d
 8017a2e:	d1fb      	bne.n	8017a28 <Sscan::checkName(char const*, char const*)+0x16>
 8017a30:	7860      	ldrb	r0, [r4, #1]
 8017a32:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8017a36:	d000      	beq.n	8017a3a <Sscan::checkName(char const*, char const*)+0x28>
 8017a38:	1c60      	adds	r0, r4, #1
 8017a3a:	bd10      	pop	{r4, pc}

08017a3c <LightSet::GetDmxStartAddress()>:
 8017a3c:	2001      	movs	r0, #1
 8017a3e:	4770      	bx	lr

08017a40 <LightSet::GetDmxFootprint()>:
 8017a40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017a44:	4770      	bx	lr

08017a46 <LightSet::SetDmxStartAddress(unsigned short)>:
 8017a46:	2000      	movs	r0, #0
 8017a48:	4770      	bx	lr

08017a4a <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	2001      	movs	r0, #1
 8017a4e:	7093      	strb	r3, [r2, #2]
 8017a50:	8010      	strh	r0, [r2, #0]
 8017a52:	4770      	bx	lr

08017a54 <Display::PrintInfo() [clone .isra.0]>:
 8017a54:	b910      	cbnz	r0, 8017a5c <Display::PrintInfo() [clone .isra.0]+0x8>
 8017a56:	4803      	ldr	r0, [pc, #12]	; (8017a64 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8017a58:	f000 bd53 	b.w	8018502 <puts>
 8017a5c:	6803      	ldr	r3, [r0, #0]
 8017a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017a60:	4718      	bx	r3
 8017a62:	bf00      	nop
 8017a64:	0801dbeb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, fp, ip, lr, pc}

08017a68 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8017a68:	b513      	push	{r0, r1, r4, lr}
 8017a6a:	4604      	mov	r4, r0
 8017a6c:	0a13      	lsrs	r3, r2, #8
 8017a6e:	7800      	ldrb	r0, [r0, #0]
 8017a70:	f88d 1004 	strb.w	r1, [sp, #4]
 8017a74:	f88d 3005 	strb.w	r3, [sp, #5]
 8017a78:	f88d 2006 	strb.w	r2, [sp, #6]
 8017a7c:	f001 fd9c 	bl	80195b8 <gd32_i2c_set_address>
 8017a80:	6860      	ldr	r0, [r4, #4]
 8017a82:	f001 fd91 	bl	80195a8 <gd32_i2c_set_baudrate>
 8017a86:	2103      	movs	r1, #3
 8017a88:	a801      	add	r0, sp, #4
 8017a8a:	f001 fd9b 	bl	80195c4 <gd32_i2c_write>
 8017a8e:	b002      	add	sp, #8
 8017a90:	bd10      	pop	{r4, pc}

08017a92 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8017a92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a94:	460d      	mov	r5, r1
 8017a96:	4604      	mov	r4, r0
 8017a98:	f001 fd8e 	bl	80195b8 <gd32_i2c_set_address>
 8017a9c:	4628      	mov	r0, r5
 8017a9e:	f001 fd83 	bl	80195a8 <gd32_i2c_set_baudrate>
 8017aa2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017aa6:	2b07      	cmp	r3, #7
 8017aa8:	d902      	bls.n	8017ab0 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8017aaa:	3c50      	subs	r4, #80	; 0x50
 8017aac:	2c0f      	cmp	r4, #15
 8017aae:	d809      	bhi.n	8017ac4 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8017ab0:	2101      	movs	r1, #1
 8017ab2:	f10d 0007 	add.w	r0, sp, #7
 8017ab6:	f001 fdeb 	bl	8019690 <gd32_i2c_read>
 8017aba:	fab0 f080 	clz	r0, r0
 8017abe:	0940      	lsrs	r0, r0, #5
 8017ac0:	b003      	add	sp, #12
 8017ac2:	bd30      	pop	{r4, r5, pc}
 8017ac4:	2100      	movs	r1, #0
 8017ac6:	4608      	mov	r0, r1
 8017ac8:	f001 fd7c 	bl	80195c4 <gd32_i2c_write>
 8017acc:	e7f5      	b.n	8017aba <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

08017ace <Display::Detect7Segment()>:
 8017ace:	b513      	push	{r0, r1, r4, lr}
 8017ad0:	68c1      	ldr	r1, [r0, #12]
 8017ad2:	4604      	mov	r4, r0
 8017ad4:	7a00      	ldrb	r0, [r0, #8]
 8017ad6:	f7ff ffdc 	bl	8017a92 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8017ada:	7460      	strb	r0, [r4, #17]
 8017adc:	b170      	cbz	r0, 8017afc <Display::Detect7Segment()+0x2e>
 8017ade:	2200      	movs	r2, #0
 8017ae0:	f104 0008 	add.w	r0, r4, #8
 8017ae4:	4611      	mov	r1, r2
 8017ae6:	9001      	str	r0, [sp, #4]
 8017ae8:	f7ff ffbe 	bl	8017a68 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8017aec:	7c63      	ldrb	r3, [r4, #17]
 8017aee:	9801      	ldr	r0, [sp, #4]
 8017af0:	b123      	cbz	r3, 8017afc <Display::Detect7Segment()+0x2e>
 8017af2:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8017af6:	2112      	movs	r1, #18
 8017af8:	f7ff ffb6 	bl	8017a68 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8017afc:	b002      	add	sp, #8
 8017afe:	bd10      	pop	{r4, pc}

08017b00 <Display::Detect(display::Type)>:
 8017b00:	2902      	cmp	r1, #2
 8017b02:	b538      	push	{r3, r4, r5, lr}
 8017b04:	4604      	mov	r4, r0
 8017b06:	d014      	beq.n	8017b32 <Display::Detect(display::Type)+0x32>
 8017b08:	2904      	cmp	r1, #4
 8017b0a:	d01b      	beq.n	8017b44 <Display::Detect(display::Type)+0x44>
 8017b0c:	69a0      	ldr	r0, [r4, #24]
 8017b0e:	b168      	cbz	r0, 8017b2c <Display::Detect(display::Type)+0x2c>
 8017b10:	6803      	ldr	r3, [r0, #0]
 8017b12:	689b      	ldr	r3, [r3, #8]
 8017b14:	4798      	blx	r3
 8017b16:	69a3      	ldr	r3, [r4, #24]
 8017b18:	b9b0      	cbnz	r0, 8017b48 <Display::Detect(display::Type)+0x48>
 8017b1a:	b11b      	cbz	r3, 8017b24 <Display::Detect(display::Type)+0x24>
 8017b1c:	681a      	ldr	r2, [r3, #0]
 8017b1e:	4618      	mov	r0, r3
 8017b20:	6852      	ldr	r2, [r2, #4]
 8017b22:	4790      	blx	r2
 8017b24:	2300      	movs	r3, #0
 8017b26:	61a3      	str	r3, [r4, #24]
 8017b28:	2304      	movs	r3, #4
 8017b2a:	6023      	str	r3, [r4, #0]
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	6163      	str	r3, [r4, #20]
 8017b30:	e011      	b.n	8017b56 <Display::Detect(display::Type)+0x56>
 8017b32:	2018      	movs	r0, #24
 8017b34:	f000 fbee 	bl	8018314 <operator new(unsigned int)>
 8017b38:	2100      	movs	r1, #0
 8017b3a:	4605      	mov	r5, r0
 8017b3c:	f000 f896 	bl	8017c6c <Ssd1306::Ssd1306(TOledPanel)>
 8017b40:	61a5      	str	r5, [r4, #24]
 8017b42:	e7e3      	b.n	8017b0c <Display::Detect(display::Type)+0xc>
 8017b44:	6001      	str	r1, [r0, #0]
 8017b46:	e7e1      	b.n	8017b0c <Display::Detect(display::Type)+0xc>
 8017b48:	681a      	ldr	r2, [r3, #0]
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	68d2      	ldr	r2, [r2, #12]
 8017b4e:	4790      	blx	r2
 8017b50:	69a3      	ldr	r3, [r4, #24]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d0ea      	beq.n	8017b2c <Display::Detect(display::Type)+0x2c>
 8017b56:	bd38      	pop	{r3, r4, r5, pc}

08017b58 <Display::Display()>:
 8017b58:	2304      	movs	r3, #4
 8017b5a:	b510      	push	{r4, lr}
 8017b5c:	6003      	str	r3, [r0, #0]
 8017b5e:	4b0f      	ldr	r3, [pc, #60]	; (8017b9c <Display::Display()+0x44>)
 8017b60:	4a0f      	ldr	r2, [pc, #60]	; (8017ba0 <Display::Display()+0x48>)
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	6043      	str	r3, [r0, #4]
 8017b66:	2321      	movs	r3, #33	; 0x21
 8017b68:	7203      	strb	r3, [r0, #8]
 8017b6a:	4b0e      	ldr	r3, [pc, #56]	; (8017ba4 <Display::Display()+0x4c>)
 8017b6c:	60c3      	str	r3, [r0, #12]
 8017b6e:	2300      	movs	r3, #0
 8017b70:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8017b74:	8203      	strh	r3, [r0, #16]
 8017b76:	4b0c      	ldr	r3, [pc, #48]	; (8017ba8 <Display::Display()+0x50>)
 8017b78:	4604      	mov	r4, r0
 8017b7a:	2102      	movs	r1, #2
 8017b7c:	6018      	str	r0, [r3, #0]
 8017b7e:	f7ff ffbf 	bl	8017b00 <Display::Detect(display::Type)>
 8017b82:	4620      	mov	r0, r4
 8017b84:	f7ff ffa3 	bl	8017ace <Display::Detect7Segment()>
 8017b88:	69a3      	ldr	r3, [r4, #24]
 8017b8a:	b10b      	cbz	r3, 8017b90 <Display::Display()+0x38>
 8017b8c:	f7f1 fc6e 	bl	800946c <display::timeout::gpio_init()>
 8017b90:	69a0      	ldr	r0, [r4, #24]
 8017b92:	f7ff ff5f 	bl	8017a54 <Display::PrintInfo() [clone .isra.0]>
 8017b96:	4620      	mov	r0, r4
 8017b98:	bd10      	pop	{r4, pc}
 8017b9a:	bf00      	nop
 8017b9c:	2000fddc 	ldrdcs	pc, [r0], -ip
 8017ba0:	000493e0 	andeq	r9, r4, r0, ror #7
 8017ba4:	00061a80 	andeq	r1, r6, r0, lsl #21
 8017ba8:	2000fcd4 	ldrdcs	pc, [r0], -r4

08017bac <Ssd1306::~Ssd1306()>:
 8017bac:	4770      	bx	lr

08017bae <Ssd1306::SetCursor(unsigned int)>:
 8017bae:	4770      	bx	lr

08017bb0 <Ssd1306::PrintInfo()>:
 8017bb0:	b410      	push	{r4}
 8017bb2:	4906      	ldr	r1, [pc, #24]	; (8017bcc <Ssd1306::PrintInfo()+0x1c>)
 8017bb4:	7c44      	ldrb	r4, [r0, #17]
 8017bb6:	7903      	ldrb	r3, [r0, #4]
 8017bb8:	7942      	ldrb	r2, [r0, #5]
 8017bba:	4805      	ldr	r0, [pc, #20]	; (8017bd0 <Ssd1306::PrintInfo()+0x20>)
 8017bbc:	2c00      	cmp	r4, #0
 8017bbe:	bf08      	it	eq
 8017bc0:	4601      	moveq	r1, r0
 8017bc2:	4804      	ldr	r0, [pc, #16]	; (8017bd4 <Ssd1306::PrintInfo()+0x24>)
 8017bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bc8:	f7f2 bcd0 	b.w	800a56c <printf>
 8017bcc:	0801dbfc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 8017bd0:	0801dc03 	stmdaeq	r1, {r0, r1, sl, fp, ip, lr, pc}
 8017bd4:	0801dc0b 	stmdaeq	r1, {r0, r1, r3, sl, fp, ip, lr, pc}

08017bd8 <Ssd1306::~Ssd1306()>:
 8017bd8:	b510      	push	{r4, lr}
 8017bda:	4604      	mov	r4, r0
 8017bdc:	f000 fb96 	bl	801830c <operator delete(void*)>
 8017be0:	4620      	mov	r0, r4
 8017be2:	bd10      	pop	{r4, pc}

08017be4 <Ssd1306::PutChar(int)>:
 8017be4:	b510      	push	{r4, lr}
 8017be6:	3920      	subs	r1, #32
 8017be8:	295f      	cmp	r1, #95	; 0x5f
 8017bea:	f100 0008 	add.w	r0, r0, #8
 8017bee:	bf94      	ite	ls
 8017bf0:	460c      	movls	r4, r1
 8017bf2:	2400      	movhi	r4, #0
 8017bf4:	f7fc fe3e 	bl	8014874 <HAL_I2C::Setup()>
 8017bf8:	4804      	ldr	r0, [pc, #16]	; (8017c0c <Ssd1306::PutChar(int)+0x28>)
 8017bfa:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8017bfe:	4420      	add	r0, r4
 8017c00:	2107      	movs	r1, #7
 8017c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c06:	f001 bcdd 	b.w	80195c4 <gd32_i2c_write>
 8017c0a:	bf00      	nop
 8017c0c:	0801dc20 	stmdaeq	r1, {r5, sl, fp, ip, lr, pc}

08017c10 <Ssd1306::PutString(char const*)>:
 8017c10:	b538      	push	{r3, r4, r5, lr}
 8017c12:	4605      	mov	r5, r0
 8017c14:	1e4c      	subs	r4, r1, #1
 8017c16:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8017c1a:	b901      	cbnz	r1, 8017c1e <Ssd1306::PutString(char const*)+0xe>
 8017c1c:	bd38      	pop	{r3, r4, r5, pc}
 8017c1e:	4628      	mov	r0, r5
 8017c20:	f7ff ffe0 	bl	8017be4 <Ssd1306::PutChar(int)>
 8017c24:	e7f7      	b.n	8017c16 <Ssd1306::PutString(char const*)+0x6>

08017c26 <Ssd1306::Text(char const*, unsigned int)>:
 8017c26:	b570      	push	{r4, r5, r6, lr}
 8017c28:	7903      	ldrb	r3, [r0, #4]
 8017c2a:	4605      	mov	r5, r0
 8017c2c:	460c      	mov	r4, r1
 8017c2e:	4293      	cmp	r3, r2
 8017c30:	bf94      	ite	ls
 8017c32:	18ce      	addls	r6, r1, r3
 8017c34:	188e      	addhi	r6, r1, r2
 8017c36:	42b4      	cmp	r4, r6
 8017c38:	d100      	bne.n	8017c3c <Ssd1306::Text(char const*, unsigned int)+0x16>
 8017c3a:	bd70      	pop	{r4, r5, r6, pc}
 8017c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c40:	4628      	mov	r0, r5
 8017c42:	f7ff ffcf 	bl	8017be4 <Ssd1306::PutChar(int)>
 8017c46:	e7f6      	b.n	8017c36 <Ssd1306::Text(char const*, unsigned int)+0x10>

08017c48 <Ssd1306::InitMembers()>:
 8017c48:	7c03      	ldrb	r3, [r0, #16]
 8017c4a:	b14b      	cbz	r3, 8017c60 <Ssd1306::InitMembers()+0x18>
 8017c4c:	3b01      	subs	r3, #1
 8017c4e:	2b01      	cmp	r3, #1
 8017c50:	d909      	bls.n	8017c66 <Ssd1306::InitMembers()+0x1e>
 8017c52:	2308      	movs	r3, #8
 8017c54:	2204      	movs	r2, #4
 8017c56:	2115      	movs	r1, #21
 8017c58:	7101      	strb	r1, [r0, #4]
 8017c5a:	7143      	strb	r3, [r0, #5]
 8017c5c:	6142      	str	r2, [r0, #20]
 8017c5e:	4770      	bx	lr
 8017c60:	2308      	movs	r3, #8
 8017c62:	461a      	mov	r2, r3
 8017c64:	e7f7      	b.n	8017c56 <Ssd1306::InitMembers()+0xe>
 8017c66:	2304      	movs	r3, #4
 8017c68:	e7fb      	b.n	8017c62 <Ssd1306::InitMembers()+0x1a>
	...

08017c6c <Ssd1306::Ssd1306(TOledPanel)>:
 8017c6c:	4a08      	ldr	r2, [pc, #32]	; (8017c90 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8017c6e:	6002      	str	r2, [r0, #0]
 8017c70:	227f      	movs	r2, #127	; 0x7f
 8017c72:	b508      	push	{r3, lr}
 8017c74:	80c2      	strh	r2, [r0, #6]
 8017c76:	223c      	movs	r2, #60	; 0x3c
 8017c78:	7202      	strb	r2, [r0, #8]
 8017c7a:	4a06      	ldr	r2, [pc, #24]	; (8017c94 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8017c7c:	60c2      	str	r2, [r0, #12]
 8017c7e:	2200      	movs	r2, #0
 8017c80:	7442      	strb	r2, [r0, #17]
 8017c82:	4a05      	ldr	r2, [pc, #20]	; (8017c98 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8017c84:	7401      	strb	r1, [r0, #16]
 8017c86:	6010      	str	r0, [r2, #0]
 8017c88:	f7ff ffde 	bl	8017c48 <Ssd1306::InitMembers()>
 8017c8c:	bd08      	pop	{r3, pc}
 8017c8e:	bf00      	nop
 8017c90:	0801def8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r9, sl, fp, ip, lr, pc}
 8017c94:	00061a80 	andeq	r1, r6, r0, lsl #21
 8017c98:	2000fd60 	andcs	pc, r0, r0, ror #26

08017c9c <Ssd1306::SendCommand(unsigned char)>:
 8017c9c:	b507      	push	{r0, r1, r2, lr}
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	3008      	adds	r0, #8
 8017ca2:	f88d 3004 	strb.w	r3, [sp, #4]
 8017ca6:	f88d 1005 	strb.w	r1, [sp, #5]
 8017caa:	f7fc fde3 	bl	8014874 <HAL_I2C::Setup()>
 8017cae:	2102      	movs	r1, #2
 8017cb0:	a801      	add	r0, sp, #4
 8017cb2:	f001 fc87 	bl	80195c4 <gd32_i2c_write>
 8017cb6:	b003      	add	sp, #12
 8017cb8:	f85d fb04 	ldr.w	pc, [sp], #4

08017cbc <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8017cbc:	2914      	cmp	r1, #20
 8017cbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017cc0:	4615      	mov	r5, r2
 8017cc2:	d81d      	bhi.n	8017d00 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8017cc4:	7943      	ldrb	r3, [r0, #5]
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	d91a      	bls.n	8017d00 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8017cca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017cce:	7c43      	ldrb	r3, [r0, #17]
 8017cd0:	004c      	lsls	r4, r1, #1
 8017cd2:	b2e4      	uxtb	r4, r4
 8017cd4:	b10b      	cbz	r3, 8017cda <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x1e>
 8017cd6:	3404      	adds	r4, #4
 8017cd8:	b2e4      	uxtb	r4, r4
 8017cda:	f004 010e 	and.w	r1, r4, #14
 8017cde:	9001      	str	r0, [sp, #4]
 8017ce0:	f7ff ffdc 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017ce4:	0921      	lsrs	r1, r4, #4
 8017ce6:	9801      	ldr	r0, [sp, #4]
 8017ce8:	f041 0110 	orr.w	r1, r1, #16
 8017cec:	f7ff ffd6 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017cf0:	9801      	ldr	r0, [sp, #4]
 8017cf2:	f045 01b0 	orr.w	r1, r5, #176	; 0xb0
 8017cf6:	b003      	add	sp, #12
 8017cf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017cfc:	f7ff bfce 	b.w	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017d00:	b003      	add	sp, #12
 8017d02:	bd30      	pop	{r4, r5, pc}

08017d04 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8017d04:	b5e0      	push	{r5, r6, r7, lr}
 8017d06:	461f      	mov	r7, r3
 8017d08:	7943      	ldrb	r3, [r0, #5]
 8017d0a:	428b      	cmp	r3, r1
 8017d0c:	4605      	mov	r5, r0
 8017d0e:	4616      	mov	r6, r2
 8017d10:	d30b      	bcc.n	8017d2a <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x26>
 8017d12:	1e4a      	subs	r2, r1, #1
 8017d14:	b2d2      	uxtb	r2, r2
 8017d16:	2100      	movs	r1, #0
 8017d18:	f7ff ffd0 	bl	8017cbc <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8017d1c:	463a      	mov	r2, r7
 8017d1e:	4631      	mov	r1, r6
 8017d20:	4628      	mov	r0, r5
 8017d22:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8017d26:	f7ff bf7e 	b.w	8017c26 <Ssd1306::Text(char const*, unsigned int)>
 8017d2a:	bde0      	pop	{r5, r6, r7, pc}

08017d2c <Ssd1306::ClearLine(unsigned char)>:
 8017d2c:	b513      	push	{r0, r1, r4, lr}
 8017d2e:	7943      	ldrb	r3, [r0, #5]
 8017d30:	428b      	cmp	r3, r1
 8017d32:	4604      	mov	r4, r0
 8017d34:	d315      	bcc.n	8017d62 <Ssd1306::ClearLine(unsigned char)+0x36>
 8017d36:	1e4a      	subs	r2, r1, #1
 8017d38:	b2d2      	uxtb	r2, r2
 8017d3a:	2100      	movs	r1, #0
 8017d3c:	9201      	str	r2, [sp, #4]
 8017d3e:	f7ff ffbd 	bl	8017cbc <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8017d42:	f104 0008 	add.w	r0, r4, #8
 8017d46:	f7fc fd95 	bl	8014874 <HAL_I2C::Setup()>
 8017d4a:	2181      	movs	r1, #129	; 0x81
 8017d4c:	4806      	ldr	r0, [pc, #24]	; (8017d68 <Ssd1306::ClearLine(unsigned char)+0x3c>)
 8017d4e:	f001 fc39 	bl	80195c4 <gd32_i2c_write>
 8017d52:	9a01      	ldr	r2, [sp, #4]
 8017d54:	2100      	movs	r1, #0
 8017d56:	4620      	mov	r0, r4
 8017d58:	b002      	add	sp, #8
 8017d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d5e:	f7ff bfad 	b.w	8017cbc <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8017d62:	b002      	add	sp, #8
 8017d64:	bd10      	pop	{r4, pc}
 8017d66:	bf00      	nop
 8017d68:	2000fcd8 	ldrdcs	pc, [r0], -r8

08017d6c <Ssd1306::SetSleep(bool)>:
 8017d6c:	b111      	cbz	r1, 8017d74 <Ssd1306::SetSleep(bool)+0x8>
 8017d6e:	21ae      	movs	r1, #174	; 0xae
 8017d70:	f7ff bf94 	b.w	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017d74:	21af      	movs	r1, #175	; 0xaf
 8017d76:	e7fb      	b.n	8017d70 <Ssd1306::SetSleep(bool)+0x4>

08017d78 <Ssd1306::SetContrast(unsigned char)>:
 8017d78:	b538      	push	{r3, r4, r5, lr}
 8017d7a:	4604      	mov	r4, r0
 8017d7c:	460d      	mov	r5, r1
 8017d7e:	7181      	strb	r1, [r0, #6]
 8017d80:	2181      	movs	r1, #129	; 0x81
 8017d82:	f7ff ff8b 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017d86:	4629      	mov	r1, r5
 8017d88:	4620      	mov	r0, r4
 8017d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d8e:	f7ff bf85 	b.w	8017c9c <Ssd1306::SendCommand(unsigned char)>

08017d92 <Ssd1306::SetFlipVertically(bool)>:
 8017d92:	b510      	push	{r4, lr}
 8017d94:	4604      	mov	r4, r0
 8017d96:	71c1      	strb	r1, [r0, #7]
 8017d98:	b141      	cbz	r1, 8017dac <Ssd1306::SetFlipVertically(bool)+0x1a>
 8017d9a:	21c0      	movs	r1, #192	; 0xc0
 8017d9c:	f7ff ff7e 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017da0:	21a0      	movs	r1, #160	; 0xa0
 8017da2:	4620      	mov	r0, r4
 8017da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017da8:	f7ff bf78 	b.w	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017dac:	21c8      	movs	r1, #200	; 0xc8
 8017dae:	f7ff ff75 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017db2:	21a1      	movs	r1, #161	; 0xa1
 8017db4:	e7f5      	b.n	8017da2 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08017db8 <Ssd1306::CheckSH1106()>:
 8017db8:	b530      	push	{r4, r5, lr}
 8017dba:	2100      	movs	r1, #0
 8017dbc:	b087      	sub	sp, #28
 8017dbe:	4604      	mov	r4, r0
 8017dc0:	f7ff ff6c 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017dc4:	2190      	movs	r1, #144	; 0x90
 8017dc6:	4620      	mov	r0, r4
 8017dc8:	f7ff ff68 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017dcc:	21b0      	movs	r1, #176	; 0xb0
 8017dce:	4620      	mov	r0, r4
 8017dd0:	f7ff ff64 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017dd4:	4b22      	ldr	r3, [pc, #136]	; (8017e60 <Ssd1306::CheckSH1106()+0xa8>)
 8017dd6:	f104 0508 	add.w	r5, r4, #8
 8017dda:	6818      	ldr	r0, [r3, #0]
 8017ddc:	9002      	str	r0, [sp, #8]
 8017dde:	791b      	ldrb	r3, [r3, #4]
 8017de0:	f88d 300c 	strb.w	r3, [sp, #12]
 8017de4:	4628      	mov	r0, r5
 8017de6:	f7fc fd45 	bl	8014874 <HAL_I2C::Setup()>
 8017dea:	2105      	movs	r1, #5
 8017dec:	a802      	add	r0, sp, #8
 8017dee:	f001 fbe9 	bl	80195c4 <gd32_i2c_write>
 8017df2:	2100      	movs	r1, #0
 8017df4:	4620      	mov	r0, r4
 8017df6:	f7ff ff51 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017dfa:	2190      	movs	r1, #144	; 0x90
 8017dfc:	4620      	mov	r0, r4
 8017dfe:	f7ff ff4d 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017e02:	21b0      	movs	r1, #176	; 0xb0
 8017e04:	4620      	mov	r0, r4
 8017e06:	f7ff ff49 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	9304      	str	r3, [sp, #16]
 8017e0e:	f88d 3014 	strb.w	r3, [sp, #20]
 8017e12:	4628      	mov	r0, r5
 8017e14:	2340      	movs	r3, #64	; 0x40
 8017e16:	f88d 3007 	strb.w	r3, [sp, #7]
 8017e1a:	f7fc fd2b 	bl	8014874 <HAL_I2C::Setup()>
 8017e1e:	2101      	movs	r1, #1
 8017e20:	f10d 0007 	add.w	r0, sp, #7
 8017e24:	f001 fbce 	bl	80195c4 <gd32_i2c_write>
 8017e28:	4628      	mov	r0, r5
 8017e2a:	f7fc fd23 	bl	8014874 <HAL_I2C::Setup()>
 8017e2e:	2105      	movs	r1, #5
 8017e30:	a804      	add	r0, sp, #16
 8017e32:	f001 fc2d 	bl	8019690 <gd32_i2c_read>
 8017e36:	aa02      	add	r2, sp, #8
 8017e38:	a904      	add	r1, sp, #16
 8017e3a:	2004      	movs	r0, #4
 8017e3c:	3801      	subs	r0, #1
 8017e3e:	d201      	bcs.n	8017e44 <Ssd1306::CheckSH1106()+0x8c>
 8017e40:	2300      	movs	r3, #0
 8017e42:	e006      	b.n	8017e52 <Ssd1306::CheckSH1106()+0x9a>
 8017e44:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8017e48:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8017e4c:	42ab      	cmp	r3, r5
 8017e4e:	d0f5      	beq.n	8017e3c <Ssd1306::CheckSH1106()+0x84>
 8017e50:	1b5b      	subs	r3, r3, r5
 8017e52:	fab3 f383 	clz	r3, r3
 8017e56:	095b      	lsrs	r3, r3, #5
 8017e58:	7463      	strb	r3, [r4, #17]
 8017e5a:	b007      	add	sp, #28
 8017e5c:	bd30      	pop	{r4, r5, pc}
 8017e5e:	bf00      	nop
 8017e60:	0801dc17 	stmdaeq	r1, {r0, r1, r2, r4, sl, fp, ip, lr, pc}

08017e64 <Ssd1306::Cls()>:
 8017e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e68:	7c45      	ldrb	r5, [r0, #17]
 8017e6a:	00ad      	lsls	r5, r5, #2
 8017e6c:	b2ed      	uxtb	r5, r5
 8017e6e:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8017e72:	4604      	mov	r4, r0
 8017e74:	2600      	movs	r6, #0
 8017e76:	f045 0810 	orr.w	r8, r5, #16
 8017e7a:	b2ff      	uxtb	r7, r7
 8017e7c:	6963      	ldr	r3, [r4, #20]
 8017e7e:	42b3      	cmp	r3, r6
 8017e80:	4629      	mov	r1, r5
 8017e82:	4620      	mov	r0, r4
 8017e84:	d80b      	bhi.n	8017e9e <Ssd1306::Cls()+0x3a>
 8017e86:	f7ff ff09 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017e8a:	4641      	mov	r1, r8
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	f7ff ff05 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017e92:	4620      	mov	r0, r4
 8017e94:	21b0      	movs	r1, #176	; 0xb0
 8017e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e9a:	f7ff beff 	b.w	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017e9e:	f7ff fefd 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017ea2:	4641      	mov	r1, r8
 8017ea4:	4620      	mov	r0, r4
 8017ea6:	f7ff fef9 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017eaa:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8017eae:	b2c9      	uxtb	r1, r1
 8017eb0:	4620      	mov	r0, r4
 8017eb2:	f7ff fef3 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017eb6:	7c23      	ldrb	r3, [r4, #16]
 8017eb8:	b123      	cbz	r3, 8017ec4 <Ssd1306::Cls()+0x60>
 8017eba:	3b01      	subs	r3, #1
 8017ebc:	2b01      	cmp	r3, #1
 8017ebe:	d901      	bls.n	8017ec4 <Ssd1306::Cls()+0x60>
 8017ec0:	3601      	adds	r6, #1
 8017ec2:	e7db      	b.n	8017e7c <Ssd1306::Cls()+0x18>
 8017ec4:	f104 0008 	add.w	r0, r4, #8
 8017ec8:	f7fc fcd4 	bl	8014874 <HAL_I2C::Setup()>
 8017ecc:	4639      	mov	r1, r7
 8017ece:	4802      	ldr	r0, [pc, #8]	; (8017ed8 <Ssd1306::Cls()+0x74>)
 8017ed0:	f001 fb78 	bl	80195c4 <gd32_i2c_write>
 8017ed4:	e7f4      	b.n	8017ec0 <Ssd1306::Cls()+0x5c>
 8017ed6:	bf00      	nop
 8017ed8:	2000fcd8 	ldrdcs	pc, [r0], -r8

08017edc <Ssd1306::Start()>:
 8017edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017ede:	7a04      	ldrb	r4, [r0, #8]
 8017ee0:	68c6      	ldr	r6, [r0, #12]
 8017ee2:	4605      	mov	r5, r0
 8017ee4:	4620      	mov	r0, r4
 8017ee6:	f001 fb67 	bl	80195b8 <gd32_i2c_set_address>
 8017eea:	4630      	mov	r0, r6
 8017eec:	f001 fb5c 	bl	80195a8 <gd32_i2c_set_baudrate>
 8017ef0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017ef4:	2b07      	cmp	r3, #7
 8017ef6:	d902      	bls.n	8017efe <Ssd1306::Start()+0x22>
 8017ef8:	3c50      	subs	r4, #80	; 0x50
 8017efa:	2c0f      	cmp	r4, #15
 8017efc:	d80f      	bhi.n	8017f1e <Ssd1306::Start()+0x42>
 8017efe:	2101      	movs	r1, #1
 8017f00:	f10d 0007 	add.w	r0, sp, #7
 8017f04:	f001 fbc4 	bl	8019690 <gd32_i2c_read>
 8017f08:	fab0 f480 	clz	r4, r0
 8017f0c:	0964      	lsrs	r4, r4, #5
 8017f0e:	b35c      	cbz	r4, 8017f68 <Ssd1306::Start()+0x8c>
 8017f10:	7c2e      	ldrb	r6, [r5, #16]
 8017f12:	b14e      	cbz	r6, 8017f28 <Ssd1306::Start()+0x4c>
 8017f14:	3e01      	subs	r6, #1
 8017f16:	2e01      	cmp	r6, #1
 8017f18:	d929      	bls.n	8017f6e <Ssd1306::Start()+0x92>
 8017f1a:	2400      	movs	r4, #0
 8017f1c:	e024      	b.n	8017f68 <Ssd1306::Start()+0x8c>
 8017f1e:	2100      	movs	r1, #0
 8017f20:	4608      	mov	r0, r1
 8017f22:	f001 fb4f 	bl	80195c4 <gd32_i2c_write>
 8017f26:	e7ef      	b.n	8017f08 <Ssd1306::Start()+0x2c>
 8017f28:	4f16      	ldr	r7, [pc, #88]	; (8017f84 <Ssd1306::Start()+0xa8>)
 8017f2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017f2e:	4628      	mov	r0, r5
 8017f30:	3601      	adds	r6, #1
 8017f32:	f7ff feb3 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017f36:	2e18      	cmp	r6, #24
 8017f38:	d1f7      	bne.n	8017f2a <Ssd1306::Start()+0x4e>
 8017f3a:	4a13      	ldr	r2, [pc, #76]	; (8017f88 <Ssd1306::Start()+0xac>)
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	4611      	mov	r1, r2
 8017f40:	4618      	mov	r0, r3
 8017f42:	3301      	adds	r3, #1
 8017f44:	2b86      	cmp	r3, #134	; 0x86
 8017f46:	f802 0b01 	strb.w	r0, [r2], #1
 8017f4a:	d1fa      	bne.n	8017f42 <Ssd1306::Start()+0x66>
 8017f4c:	2340      	movs	r3, #64	; 0x40
 8017f4e:	700b      	strb	r3, [r1, #0]
 8017f50:	4628      	mov	r0, r5
 8017f52:	f7ff ff31 	bl	8017db8 <Ssd1306::CheckSH1106()>
 8017f56:	4628      	mov	r0, r5
 8017f58:	f7ff ff84 	bl	8017e64 <Ssd1306::Cls()>
 8017f5c:	21af      	movs	r1, #175	; 0xaf
 8017f5e:	4628      	mov	r0, r5
 8017f60:	f7ff fe9c 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017f64:	2301      	movs	r3, #1
 8017f66:	71eb      	strb	r3, [r5, #7]
 8017f68:	4620      	mov	r0, r4
 8017f6a:	b003      	add	sp, #12
 8017f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f6e:	4f07      	ldr	r7, [pc, #28]	; (8017f8c <Ssd1306::Start()+0xb0>)
 8017f70:	2600      	movs	r6, #0
 8017f72:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017f76:	4628      	mov	r0, r5
 8017f78:	3601      	adds	r6, #1
 8017f7a:	f7ff fe8f 	bl	8017c9c <Ssd1306::SendCommand(unsigned char)>
 8017f7e:	2e18      	cmp	r6, #24
 8017f80:	d1f7      	bne.n	8017f72 <Ssd1306::Start()+0x96>
 8017f82:	e7da      	b.n	8017f3a <Ssd1306::Start()+0x5e>
 8017f84:	0801ded8 	stmdaeq	r1, {r3, r4, r6, r7, r9, sl, fp, ip, lr, pc}
 8017f88:	2000fcd8 	ldrdcs	pc, [r0], -r8
 8017f8c:	0801dec0 	stmdaeq	r1, {r6, r7, r9, sl, fp, ip, lr, pc}

08017f90 <console_putc>:
 8017f90:	f000 bbba 	b.w	8018708 <uart0_putc>

08017f94 <console_puts>:
 8017f94:	f000 bbd2 	b.w	801873c <uart0_puts>

08017f98 <console_set_fg_color>:
 8017f98:	2807      	cmp	r0, #7
 8017f9a:	d810      	bhi.n	8017fbe <console_set_fg_color+0x26>
 8017f9c:	e8df f000 	tbb	[pc, r0]
 8017fa0:	0b090704 	bleq	8259bb8 <__exidx_end+0x23bb8c>
 8017fa4:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8017f70 <Ssd1306::Start()+0x94>
 8017fa8:	4806      	ldr	r0, [pc, #24]	; (8017fc4 <console_set_fg_color+0x2c>)
 8017faa:	f000 bbc7 	b.w	801873c <uart0_puts>
 8017fae:	4806      	ldr	r0, [pc, #24]	; (8017fc8 <console_set_fg_color+0x30>)
 8017fb0:	e7fb      	b.n	8017faa <console_set_fg_color+0x12>
 8017fb2:	4806      	ldr	r0, [pc, #24]	; (8017fcc <console_set_fg_color+0x34>)
 8017fb4:	e7f9      	b.n	8017faa <console_set_fg_color+0x12>
 8017fb6:	4806      	ldr	r0, [pc, #24]	; (8017fd0 <console_set_fg_color+0x38>)
 8017fb8:	e7f7      	b.n	8017faa <console_set_fg_color+0x12>
 8017fba:	4806      	ldr	r0, [pc, #24]	; (8017fd4 <console_set_fg_color+0x3c>)
 8017fbc:	e7f5      	b.n	8017faa <console_set_fg_color+0x12>
 8017fbe:	4806      	ldr	r0, [pc, #24]	; (8017fd8 <console_set_fg_color+0x40>)
 8017fc0:	e7f3      	b.n	8017faa <console_set_fg_color+0x12>
 8017fc2:	bf00      	nop
 8017fc4:	0801df36 	stmdaeq	r1, {r1, r2, r4, r5, r8, r9, sl, fp, ip, lr, pc}
 8017fc8:	0801df3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, sl, fp, ip, lr, pc}
 8017fcc:	0801df42 	stmdaeq	r1, {r1, r6, r8, r9, sl, fp, ip, lr, pc}
 8017fd0:	0801df48 	stmdaeq	r1, {r3, r6, r8, r9, sl, fp, ip, lr, pc}
 8017fd4:	0801aa46 	stmdaeq	r1, {r1, r2, r6, r9, fp, sp, pc}
 8017fd8:	0801df4e 	stmdaeq	r1, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr, pc}

08017fdc <console_error>:
 8017fdc:	b510      	push	{r4, lr}
 8017fde:	4604      	mov	r4, r0
 8017fe0:	4805      	ldr	r0, [pc, #20]	; (8017ff8 <console_error+0x1c>)
 8017fe2:	f000 fbab 	bl	801873c <uart0_puts>
 8017fe6:	4620      	mov	r0, r4
 8017fe8:	f000 fba8 	bl	801873c <uart0_puts>
 8017fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ff0:	4802      	ldr	r0, [pc, #8]	; (8017ffc <console_error+0x20>)
 8017ff2:	f000 bba3 	b.w	801873c <uart0_puts>
 8017ff6:	bf00      	nop
 8017ff8:	0801df3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, sl, fp, ip, lr, pc}
 8017ffc:	0801aa46 	stmdaeq	r1, {r1, r2, r6, r9, fp, sp, pc}

08018000 <console_status>:
 8018000:	b510      	push	{r4, lr}
 8018002:	b280      	uxth	r0, r0
 8018004:	460c      	mov	r4, r1
 8018006:	f7ff ffc7 	bl	8017f98 <console_set_fg_color>
 801800a:	4807      	ldr	r0, [pc, #28]	; (8018028 <console_status+0x28>)
 801800c:	f000 fb96 	bl	801873c <uart0_puts>
 8018010:	4620      	mov	r0, r4
 8018012:	f000 fb93 	bl	801873c <uart0_puts>
 8018016:	200a      	movs	r0, #10
 8018018:	f000 fb76 	bl	8018708 <uart0_putc>
 801801c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018020:	4802      	ldr	r0, [pc, #8]	; (801802c <console_status+0x2c>)
 8018022:	f000 bb8b 	b.w	801873c <uart0_puts>
 8018026:	bf00      	nop
 8018028:	0801df30 	stmdaeq	r1, {r4, r5, r8, r9, sl, fp, ip, lr, pc}
 801802c:	0801aa46 	stmdaeq	r1, {r1, r2, r6, r9, fp, sp, pc}

08018030 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8018030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018034:	4d15      	ldr	r5, [pc, #84]	; (801808c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8018036:	461e      	mov	r6, r3
 8018038:	4b15      	ldr	r3, [pc, #84]	; (8018090 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 801803a:	b086      	sub	sp, #24
 801803c:	6018      	str	r0, [r3, #0]
 801803e:	4604      	mov	r4, r0
 8018040:	4617      	mov	r7, r2
 8018042:	f105 0803 	add.w	r8, r5, #3
 8018046:	2203      	movs	r2, #3
 8018048:	4628      	mov	r0, r5
 801804a:	f000 fa22 	bl	8018492 <memmove>
 801804e:	4639      	mov	r1, r7
 8018050:	220b      	movs	r2, #11
 8018052:	4640      	mov	r0, r8
 8018054:	f000 fa1d 	bl	8018492 <memmove>
 8018058:	f105 030e 	add.w	r3, r5, #14
 801805c:	4631      	mov	r1, r6
 801805e:	2208      	movs	r2, #8
 8018060:	4618      	mov	r0, r3
 8018062:	f000 fa16 	bl	8018492 <memmove>
 8018066:	2308      	movs	r3, #8
 8018068:	e9cd 8303 	strd	r8, r3, [sp, #12]
 801806c:	230b      	movs	r3, #11
 801806e:	9302      	str	r3, [sp, #8]
 8018070:	4b08      	ldr	r3, [pc, #32]	; (8018094 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8018072:	9005      	str	r0, [sp, #20]
 8018074:	e9cd 5300 	strd	r5, r3, [sp]
 8018078:	4a07      	ldr	r2, [pc, #28]	; (8018098 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 801807a:	4808      	ldr	r0, [pc, #32]	; (801809c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 801807c:	2303      	movs	r3, #3
 801807e:	213f      	movs	r1, #63	; 0x3f
 8018080:	f7f2 fa9c 	bl	800a5bc <snprintf>
 8018084:	4620      	mov	r0, r4
 8018086:	b006      	add	sp, #24
 8018088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801808c:	2000fd64 	andcs	pc, r0, r4, ror #26
 8018090:	2000fdbc 			; <UNDEFINED> instruction: 0x2000fdbc
 8018094:	0801b39a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, ip, sp, pc}
 8018098:	0801df54 	stmdaeq	r1, {r2, r4, r6, r8, r9, sl, fp, ip, lr, pc}
 801809c:	2000fd7a 	andcs	pc, r0, sl, ror sp	; <UNPREDICTABLE>

080180a0 <FirmwareVersion::Print(char const*)>:
 80180a0:	b510      	push	{r4, lr}
 80180a2:	4805      	ldr	r0, [pc, #20]	; (80180b8 <FirmwareVersion::Print(char const*)+0x18>)
 80180a4:	460c      	mov	r4, r1
 80180a6:	f000 fa2c 	bl	8018502 <puts>
 80180aa:	b124      	cbz	r4, 80180b6 <FirmwareVersion::Print(char const*)+0x16>
 80180ac:	4620      	mov	r0, r4
 80180ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180b2:	f000 ba26 	b.w	8018502 <puts>
 80180b6:	bd10      	pop	{r4, pc}
 80180b8:	2000fd7a 	andcs	pc, r0, sl, ror sp	; <UNPREDICTABLE>

080180bc <LedBlink::LedBlink()>:
 80180bc:	b538      	push	{r3, r4, r5, lr}
 80180be:	2500      	movs	r5, #0
 80180c0:	2305      	movs	r3, #5
 80180c2:	e9c0 5300 	strd	r5, r3, [r0]
 80180c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80180ca:	e9c0 3503 	strd	r3, r5, [r0, #12]
 80180ce:	4b0d      	ldr	r3, [pc, #52]	; (8018104 <LedBlink::LedBlink()+0x48>)
 80180d0:	6085      	str	r5, [r0, #8]
 80180d2:	4604      	mov	r4, r0
 80180d4:	6145      	str	r5, [r0, #20]
 80180d6:	6018      	str	r0, [r3, #0]
 80180d8:	f640 4002 	movw	r0, #3074	; 0xc02
 80180dc:	f000 fd76 	bl	8018bcc <rcu_periph_clock_enable>
 80180e0:	2301      	movs	r3, #1
 80180e2:	462a      	mov	r2, r5
 80180e4:	4619      	mov	r1, r3
 80180e6:	4808      	ldr	r0, [pc, #32]	; (8018108 <LedBlink::LedBlink()+0x4c>)
 80180e8:	f000 fcf4 	bl	8018ad4 <gpio_mode_set>
 80180ec:	4806      	ldr	r0, [pc, #24]	; (8018108 <LedBlink::LedBlink()+0x4c>)
 80180ee:	2301      	movs	r3, #1
 80180f0:	2202      	movs	r2, #2
 80180f2:	4629      	mov	r1, r5
 80180f4:	f000 fd0e 	bl	8018b14 <gpio_output_options_set>
 80180f8:	4b04      	ldr	r3, [pc, #16]	; (801810c <LedBlink::LedBlink()+0x50>)
 80180fa:	2201      	movs	r2, #1
 80180fc:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 8018100:	4620      	mov	r0, r4
 8018102:	bd38      	pop	{r3, r4, r5, pc}
 8018104:	2000fdc0 	andcs	pc, r0, r0, asr #27
 8018108:	40020800 	andmi	r0, r2, r0, lsl #16
 801810c:	40020000 	andmi	r0, r2, r0

08018110 <LedBlink::SetMode(ledblink::Mode)>:
 8018110:	6843      	ldr	r3, [r0, #4]
 8018112:	428b      	cmp	r3, r1
 8018114:	d02b      	beq.n	801816e <LedBlink::SetMode(ledblink::Mode)+0x5e>
 8018116:	6041      	str	r1, [r0, #4]
 8018118:	2904      	cmp	r1, #4
 801811a:	d820      	bhi.n	801815e <LedBlink::SetMode(ledblink::Mode)+0x4e>
 801811c:	e8df f001 	tbb	[pc, r1]
 8018120:	1610031f 			; <UNDEFINED> instruction: 0x1610031f
 8018124:	23ff001b 	mvnscs	r0, #27
 8018128:	6003      	str	r3, [r0, #0]
 801812a:	2300      	movs	r3, #0
 801812c:	60c3      	str	r3, [r0, #12]
 801812e:	4b10      	ldr	r3, [pc, #64]	; (8018170 <LedBlink::SetMode(ledblink::Mode)+0x60>)
 8018130:	2201      	movs	r2, #1
 8018132:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8018136:	6880      	ldr	r0, [r0, #8]
 8018138:	b1c8      	cbz	r0, 801816e <LedBlink::SetMode(ledblink::Mode)+0x5e>
 801813a:	6803      	ldr	r3, [r0, #0]
 801813c:	689b      	ldr	r3, [r3, #8]
 801813e:	4718      	bx	r3
 8018140:	2301      	movs	r3, #1
 8018142:	6003      	str	r3, [r0, #0]
 8018144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018148:	60c3      	str	r3, [r0, #12]
 801814a:	e7f4      	b.n	8018136 <LedBlink::SetMode(ledblink::Mode)+0x26>
 801814c:	2303      	movs	r3, #3
 801814e:	6003      	str	r3, [r0, #0]
 8018150:	f240 134d 	movw	r3, #333	; 0x14d
 8018154:	e7f8      	b.n	8018148 <LedBlink::SetMode(ledblink::Mode)+0x38>
 8018156:	2305      	movs	r3, #5
 8018158:	6003      	str	r3, [r0, #0]
 801815a:	23c8      	movs	r3, #200	; 0xc8
 801815c:	e7f4      	b.n	8018148 <LedBlink::SetMode(ledblink::Mode)+0x38>
 801815e:	2300      	movs	r3, #0
 8018160:	6003      	str	r3, [r0, #0]
 8018162:	60c3      	str	r3, [r0, #12]
 8018164:	4b02      	ldr	r3, [pc, #8]	; (8018170 <LedBlink::SetMode(ledblink::Mode)+0x60>)
 8018166:	2201      	movs	r2, #1
 8018168:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 801816c:	e7e3      	b.n	8018136 <LedBlink::SetMode(ledblink::Mode)+0x26>
 801816e:	4770      	bx	lr
 8018170:	40020000 	andmi	r0, r2, r0

08018174 <Hardware::Hardware()>:
 8018174:	b530      	push	{r4, r5, lr}
 8018176:	4b31      	ldr	r3, [pc, #196]	; (801823c <Hardware::Hardware()+0xc8>)
 8018178:	2400      	movs	r4, #0
 801817a:	b091      	sub	sp, #68	; 0x44
 801817c:	7004      	strb	r4, [r0, #0]
 801817e:	6018      	str	r0, [r3, #0]
 8018180:	4605      	mov	r5, r0
 8018182:	f7f0 f9df 	bl	8008544 <console_init>
 8018186:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801818a:	f000 fd4b 	bl	8018c24 <rcu_timer_clock_prescaler_config>
 801818e:	f000 fae5 	bl	801875c <systick_config>
 8018192:	f001 fd0d 	bl	8019bb0 <udelay_init()>
 8018196:	f001 fceb 	bl	8019b70 <micros_init()>
 801819a:	f241 001c 	movw	r0, #4124	; 0x101c
 801819e:	f000 fd15 	bl	8018bcc <rcu_periph_clock_enable>
 80181a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80181a6:	f000 fcfd 	bl	8018ba4 <pmu_backup_ldo_config>
 80181aa:	f640 4012 	movw	r0, #3090	; 0xc12
 80181ae:	f000 fd0d 	bl	8018bcc <rcu_periph_clock_enable>
 80181b2:	f000 fd03 	bl	8018bbc <pmu_backup_write_enable>
 80181b6:	4621      	mov	r1, r4
 80181b8:	2001      	movs	r0, #1
 80181ba:	f001 f939 	bl	8019430 <bkp_data_write(bkp_data_register_enum, unsigned short)>
 80181be:	4a20      	ldr	r2, [pc, #128]	; (8018240 <Hardware::Hardware()+0xcc>)
 80181c0:	4b20      	ldr	r3, [pc, #128]	; (8018244 <Hardware::Hardware()+0xd0>)
 80181c2:	1a9b      	subs	r3, r3, r2
 80181c4:	3b01      	subs	r3, #1
 80181c6:	d232      	bcs.n	801822e <Hardware::Hardware()+0xba>
 80181c8:	4b1f      	ldr	r3, [pc, #124]	; (8018248 <Hardware::Hardware()+0xd4>)
 80181ca:	4c20      	ldr	r4, [pc, #128]	; (801824c <Hardware::Hardware()+0xd8>)
 80181cc:	2200      	movs	r2, #0
 80181ce:	1ae4      	subs	r4, r4, r3
 80181d0:	3c01      	subs	r4, #1
 80181d2:	d22f      	bcs.n	8018234 <Hardware::Hardware()+0xc0>
 80181d4:	f241 0004 	movw	r0, #4100	; 0x1004
 80181d8:	f000 fcf8 	bl	8018bcc <rcu_periph_clock_enable>
 80181dc:	481c      	ldr	r0, [pc, #112]	; (8018250 <Hardware::Hardware()+0xdc>)
 80181de:	f000 fda5 	bl	8018d2c <timer_deinit>
 80181e2:	a903      	add	r1, sp, #12
 80181e4:	23c7      	movs	r3, #199	; 0xc7
 80181e6:	481a      	ldr	r0, [pc, #104]	; (8018250 <Hardware::Hardware()+0xdc>)
 80181e8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80181ec:	9405      	str	r4, [sp, #20]
 80181ee:	f000 fe43 	bl	8018e78 <timer_init>
 80181f2:	4817      	ldr	r0, [pc, #92]	; (8018250 <Hardware::Hardware()+0xdc>)
 80181f4:	f000 fe7e 	bl	8018ef4 <timer_enable>
 80181f8:	f001 f92c 	bl	8019454 <gd32_adc_init()>
 80181fc:	220b      	movs	r2, #11
 80181fe:	2309      	movs	r3, #9
 8018200:	2400      	movs	r4, #0
 8018202:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018206:	a807      	add	r0, sp, #28
 8018208:	237a      	movs	r3, #122	; 0x7a
 801820a:	930c      	str	r3, [sp, #48]	; 0x30
 801820c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8018210:	9407      	str	r4, [sp, #28]
 8018212:	940f      	str	r4, [sp, #60]	; 0x3c
 8018214:	f000 f9ce 	bl	80185b4 <mktime>
 8018218:	4621      	mov	r1, r4
 801821a:	e9cd 0401 	strd	r0, r4, [sp, #4]
 801821e:	a801      	add	r0, sp, #4
 8018220:	f000 fa3e 	bl	80186a0 <settimeofday>
 8018224:	f001 f976 	bl	8019514 <gd32_i2c_begin>
 8018228:	4628      	mov	r0, r5
 801822a:	b011      	add	sp, #68	; 0x44
 801822c:	bd30      	pop	{r4, r5, pc}
 801822e:	f802 4b01 	strb.w	r4, [r2], #1
 8018232:	e7c7      	b.n	80181c4 <Hardware::Hardware()+0x50>
 8018234:	f803 2b01 	strb.w	r2, [r3], #1
 8018238:	e7ca      	b.n	80181d0 <Hardware::Hardware()+0x5c>
 801823a:	bf00      	nop
 801823c:	2000fdc4 	andcs	pc, r0, r4, asr #27
 8018240:	10000000 	andne	r0, r0, r0
 8018244:	100014b8 			; <UNDEFINED> instruction: 0x100014b8
 8018248:	20030000 	andcs	r0, r3, r0
 801824c:	20048d08 	andcs	r8, r4, r8, lsl #26
 8018250:	40001000 	andmi	r1, r0, r0

08018254 <Hardware::GetUuid(unsigned char*)>:
 8018254:	4a0c      	ldr	r2, [pc, #48]	; (8018288 <Hardware::GetUuid(unsigned char*)+0x34>)
 8018256:	b084      	sub	sp, #16
 8018258:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	; 0xa10
 801825c:	9300      	str	r3, [sp, #0]
 801825e:	f8d2 0a14 	ldr.w	r0, [r2, #2580]	; 0xa14
 8018262:	9001      	str	r0, [sp, #4]
 8018264:	f8d2 2a18 	ldr.w	r2, [r2, #2584]	; 0xa18
 8018268:	9202      	str	r2, [sp, #8]
 801826a:	4403      	add	r3, r0
 801826c:	4413      	add	r3, r2
 801826e:	9303      	str	r3, [sp, #12]
 8018270:	466a      	mov	r2, sp
 8018272:	1e4b      	subs	r3, r1, #1
 8018274:	310f      	adds	r1, #15
 8018276:	428b      	cmp	r3, r1
 8018278:	d101      	bne.n	801827e <Hardware::GetUuid(unsigned char*)+0x2a>
 801827a:	b004      	add	sp, #16
 801827c:	4770      	bx	lr
 801827e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8018282:	f803 0f01 	strb.w	r0, [r3, #1]!
 8018286:	e7f6      	b.n	8018276 <Hardware::GetUuid(unsigned char*)+0x22>
 8018288:	1fff7000 	svcne	0x00ff7000

0801828c <Hardware::SetTime(tm const*)>:
 801828c:	2000      	movs	r0, #0
 801828e:	4770      	bx	lr

08018290 <Hardware::Reboot()>:
 8018290:	b508      	push	{r3, lr}
 8018292:	2300      	movs	r3, #0
 8018294:	7003      	strb	r3, [r0, #0]
 8018296:	4604      	mov	r4, r0
 8018298:	2104      	movs	r1, #4
 801829a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801829e:	f000 fbef 	bl	8018a80 <fwdgt_config>
 80182a2:	4620      	mov	r0, r4
 80182a4:	f7f1 f9ee 	bl	8009684 <Hardware::RebootHandler()>
 80182a8:	2102      	movs	r1, #2
 80182aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80182ae:	f000 fbe7 	bl	8018a80 <fwdgt_config>
 80182b2:	2801      	cmp	r0, #1
 80182b4:	bf0c      	ite	eq
 80182b6:	2301      	moveq	r3, #1
 80182b8:	2300      	movne	r3, #0
 80182ba:	7023      	strb	r3, [r4, #0]
 80182bc:	d101      	bne.n	80182c2 <Hardware::Reboot()+0x32>
 80182be:	f000 fbcf 	bl	8018a60 <fwdgt_enable>
 80182c2:	4b0f      	ldr	r3, [pc, #60]	; (8018300 <Hardware::Reboot()+0x70>)
 80182c4:	480f      	ldr	r0, [pc, #60]	; (8018304 <Hardware::Reboot()+0x74>)
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	490f      	ldr	r1, [pc, #60]	; (8018308 <Hardware::Reboot()+0x78>)
 80182ca:	2208      	movs	r2, #8
 80182cc:	601a      	str	r2, [r3, #0]
 80182ce:	227d      	movs	r2, #125	; 0x7d
 80182d0:	60da      	str	r2, [r3, #12]
 80182d2:	2501      	movs	r5, #1
 80182d4:	68dc      	ldr	r4, [r3, #12]
 80182d6:	b904      	cbnz	r4, 80182da <Hardware::Reboot()+0x4a>
 80182d8:	e7fe      	b.n	80182d8 <Hardware::Reboot()+0x48>
 80182da:	6802      	ldr	r2, [r0, #0]
 80182dc:	695e      	ldr	r6, [r3, #20]
 80182de:	1b92      	subs	r2, r2, r6
 80182e0:	4294      	cmp	r4, r2
 80182e2:	d8f8      	bhi.n	80182d6 <Hardware::Reboot()+0x46>
 80182e4:	6802      	ldr	r2, [r0, #0]
 80182e6:	615a      	str	r2, [r3, #20]
 80182e8:	691a      	ldr	r2, [r3, #16]
 80182ea:	2a01      	cmp	r2, #1
 80182ec:	f082 0401 	eor.w	r4, r2, #1
 80182f0:	611c      	str	r4, [r3, #16]
 80182f2:	bf14      	ite	ne
 80182f4:	f8c1 5818 	strne.w	r5, [r1, #2072]	; 0x818
 80182f8:	f8c1 2828 	streq.w	r2, [r1, #2088]	; 0x828
 80182fc:	e7ea      	b.n	80182d4 <Hardware::Reboot()+0x44>
 80182fe:	bf00      	nop
 8018300:	2000fdc0 	andcs	pc, r0, r0, asr #27
 8018304:	2000fddc 	ldrdcs	pc, [r0], -ip
 8018308:	40020000 	andmi	r0, r2, r0

0801830c <operator delete(void*)>:
 801830c:	f000 b890 	b.w	8018430 <free>

08018310 <operator delete[](void*)>:
 8018310:	f000 b88e 	b.w	8018430 <free>

08018314 <operator new(unsigned int)>:
 8018314:	f000 b842 	b.w	801839c <malloc>

08018318 <operator new[](unsigned int)>:
 8018318:	f000 b840 	b.w	801839c <malloc>

0801831c <inet_aton>:
 801831c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801831e:	f04f 0c0a 	mov.w	ip, #10
 8018322:	ae01      	add	r6, sp, #4
 8018324:	2500      	movs	r5, #0
 8018326:	4603      	mov	r3, r0
 8018328:	1d07      	adds	r7, r0, #4
 801832a:	2200      	movs	r2, #0
 801832c:	e007      	b.n	801833e <inet_aton+0x22>
 801832e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018332:	2b09      	cmp	r3, #9
 8018334:	d820      	bhi.n	8018378 <inet_aton+0x5c>
 8018336:	fb0c 4202 	mla	r2, ip, r2, r4
 801833a:	3a30      	subs	r2, #48	; 0x30
 801833c:	4603      	mov	r3, r0
 801833e:	4618      	mov	r0, r3
 8018340:	f810 4b01 	ldrb.w	r4, [r0], #1
 8018344:	2c2e      	cmp	r4, #46	; 0x2e
 8018346:	d111      	bne.n	801836c <inet_aton+0x50>
 8018348:	3501      	adds	r5, #1
 801834a:	2d03      	cmp	r5, #3
 801834c:	f806 2b01 	strb.w	r2, [r6], #1
 8018350:	d1e9      	bne.n	8018326 <inet_aton+0xa>
 8018352:	1d1c      	adds	r4, r3, #4
 8018354:	2200      	movs	r2, #0
 8018356:	250a      	movs	r5, #10
 8018358:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 801835c:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8018360:	d10d      	bne.n	801837e <inet_aton+0x62>
 8018362:	f88d 2007 	strb.w	r2, [sp, #7]
 8018366:	b9b1      	cbnz	r1, 8018396 <inet_aton+0x7a>
 8018368:	2001      	movs	r0, #1
 801836a:	e006      	b.n	801837a <inet_aton+0x5e>
 801836c:	2c00      	cmp	r4, #0
 801836e:	d0eb      	beq.n	8018348 <inet_aton+0x2c>
 8018370:	2c0a      	cmp	r4, #10
 8018372:	d0e9      	beq.n	8018348 <inet_aton+0x2c>
 8018374:	42b8      	cmp	r0, r7
 8018376:	d1da      	bne.n	801832e <inet_aton+0x12>
 8018378:	2000      	movs	r0, #0
 801837a:	b003      	add	sp, #12
 801837c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801837e:	280a      	cmp	r0, #10
 8018380:	d0ef      	beq.n	8018362 <inet_aton+0x46>
 8018382:	42a3      	cmp	r3, r4
 8018384:	d0f8      	beq.n	8018378 <inet_aton+0x5c>
 8018386:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 801838a:	2e09      	cmp	r6, #9
 801838c:	d8f4      	bhi.n	8018378 <inet_aton+0x5c>
 801838e:	fb05 0202 	mla	r2, r5, r2, r0
 8018392:	3a30      	subs	r2, #48	; 0x30
 8018394:	e7e0      	b.n	8018358 <inet_aton+0x3c>
 8018396:	9b01      	ldr	r3, [sp, #4]
 8018398:	600b      	str	r3, [r1, #0]
 801839a:	e7e5      	b.n	8018368 <inet_aton+0x4c>

0801839c <malloc>:
 801839c:	b538      	push	{r3, r4, r5, lr}
 801839e:	4601      	mov	r1, r0
 80183a0:	4604      	mov	r4, r0
 80183a2:	481c      	ldr	r0, [pc, #112]	; (8018414 <malloc+0x78>)
 80183a4:	f7f2 f8e2 	bl	800a56c <printf>
 80183a8:	b17c      	cbz	r4, 80183ca <malloc+0x2e>
 80183aa:	4b1b      	ldr	r3, [pc, #108]	; (8018418 <malloc+0x7c>)
 80183ac:	6818      	ldr	r0, [r3, #0]
 80183ae:	b978      	cbnz	r0, 80183d0 <malloc+0x34>
 80183b0:	4a1a      	ldr	r2, [pc, #104]	; (801841c <malloc+0x80>)
 80183b2:	481b      	ldr	r0, [pc, #108]	; (8018420 <malloc+0x84>)
 80183b4:	6811      	ldr	r1, [r2, #0]
 80183b6:	f104 031b 	add.w	r3, r4, #27
 80183ba:	f023 030f 	bic.w	r3, r3, #15
 80183be:	440b      	add	r3, r1
 80183c0:	4283      	cmp	r3, r0
 80183c2:	d921      	bls.n	8018408 <malloc+0x6c>
 80183c4:	4817      	ldr	r0, [pc, #92]	; (8018424 <malloc+0x88>)
 80183c6:	f7f2 f8d1 	bl	800a56c <printf>
 80183ca:	2500      	movs	r5, #0
 80183cc:	4628      	mov	r0, r5
 80183ce:	bd38      	pop	{r3, r4, r5, pc}
 80183d0:	4284      	cmp	r4, r0
 80183d2:	d80a      	bhi.n	80183ea <malloc+0x4e>
 80183d4:	685a      	ldr	r2, [r3, #4]
 80183d6:	6899      	ldr	r1, [r3, #8]
 80183d8:	3201      	adds	r2, #1
 80183da:	428a      	cmp	r2, r1
 80183dc:	605a      	str	r2, [r3, #4]
 80183de:	d900      	bls.n	80183e2 <malloc+0x46>
 80183e0:	609a      	str	r2, [r3, #8]
 80183e2:	68d9      	ldr	r1, [r3, #12]
 80183e4:	b919      	cbnz	r1, 80183ee <malloc+0x52>
 80183e6:	4604      	mov	r4, r0
 80183e8:	e7e2      	b.n	80183b0 <malloc+0x14>
 80183ea:	3310      	adds	r3, #16
 80183ec:	e7de      	b.n	80183ac <malloc+0x10>
 80183ee:	688a      	ldr	r2, [r1, #8]
 80183f0:	60da      	str	r2, [r3, #12]
 80183f2:	4604      	mov	r4, r0
 80183f4:	2300      	movs	r3, #0
 80183f6:	f101 050c 	add.w	r5, r1, #12
 80183fa:	608b      	str	r3, [r1, #8]
 80183fc:	4622      	mov	r2, r4
 80183fe:	462b      	mov	r3, r5
 8018400:	4809      	ldr	r0, [pc, #36]	; (8018428 <malloc+0x8c>)
 8018402:	f7f2 f8b3 	bl	800a56c <printf>
 8018406:	e7e1      	b.n	80183cc <malloc+0x30>
 8018408:	6013      	str	r3, [r2, #0]
 801840a:	4b08      	ldr	r3, [pc, #32]	; (801842c <malloc+0x90>)
 801840c:	e9c1 3400 	strd	r3, r4, [r1]
 8018410:	e7f0      	b.n	80183f4 <malloc+0x58>
 8018412:	bf00      	nop
 8018414:	0801df78 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr, pc}
 8018418:	20000024 	andcs	r0, r0, r4, lsr #32
 801841c:	20000020 	andcs	r0, r0, r0, lsr #32
 8018420:	1000c000 	andne	ip, r0, r0
 8018424:	0801df84 	stmdaeq	r1, {r2, r7, r8, r9, sl, fp, ip, lr, pc}
 8018428:	0801dfa0 	stmdaeq	r1, {r5, r7, r8, r9, sl, fp, ip, lr, pc}
 801842c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08018430 <free>:
 8018430:	b538      	push	{r3, r4, r5, lr}
 8018432:	4604      	mov	r4, r0
 8018434:	b1c8      	cbz	r0, 801846a <free+0x3a>
 8018436:	f1a0 050c 	sub.w	r5, r0, #12
 801843a:	4602      	mov	r2, r0
 801843c:	4629      	mov	r1, r5
 801843e:	480c      	ldr	r0, [pc, #48]	; (8018470 <free+0x40>)
 8018440:	f7f2 f894 	bl	800a56c <printf>
 8018444:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8018448:	4b0a      	ldr	r3, [pc, #40]	; (8018474 <free+0x44>)
 801844a:	429a      	cmp	r2, r3
 801844c:	d10d      	bne.n	801846a <free+0x3a>
 801844e:	4b0a      	ldr	r3, [pc, #40]	; (8018478 <free+0x48>)
 8018450:	681a      	ldr	r2, [r3, #0]
 8018452:	b152      	cbz	r2, 801846a <free+0x3a>
 8018454:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8018458:	4291      	cmp	r1, r2
 801845a:	d107      	bne.n	801846c <free+0x3c>
 801845c:	68da      	ldr	r2, [r3, #12]
 801845e:	f844 2c04 	str.w	r2, [r4, #-4]
 8018462:	685a      	ldr	r2, [r3, #4]
 8018464:	60dd      	str	r5, [r3, #12]
 8018466:	3a01      	subs	r2, #1
 8018468:	605a      	str	r2, [r3, #4]
 801846a:	bd38      	pop	{r3, r4, r5, pc}
 801846c:	3310      	adds	r3, #16
 801846e:	e7ef      	b.n	8018450 <free+0x20>
 8018470:	0801dfcb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 8018474:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8018478:	20000024 	andcs	r0, r0, r4, lsr #32

0801847c <memcpy>:
 801847c:	b510      	push	{r4, lr}
 801847e:	1e43      	subs	r3, r0, #1
 8018480:	440a      	add	r2, r1
 8018482:	4291      	cmp	r1, r2
 8018484:	d100      	bne.n	8018488 <memcpy+0xc>
 8018486:	bd10      	pop	{r4, pc}
 8018488:	f811 4b01 	ldrb.w	r4, [r1], #1
 801848c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018490:	e7f7      	b.n	8018482 <memcpy+0x6>

08018492 <memmove>:
 8018492:	4288      	cmp	r0, r1
 8018494:	b510      	push	{r4, lr}
 8018496:	eb01 0302 	add.w	r3, r1, r2
 801849a:	d208      	bcs.n	80184ae <memmove+0x1c>
 801849c:	1e42      	subs	r2, r0, #1
 801849e:	4299      	cmp	r1, r3
 80184a0:	d100      	bne.n	80184a4 <memmove+0x12>
 80184a2:	bd10      	pop	{r4, pc}
 80184a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80184a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80184ac:	e7f7      	b.n	801849e <memmove+0xc>
 80184ae:	4402      	add	r2, r0
 80184b0:	4601      	mov	r1, r0
 80184b2:	428a      	cmp	r2, r1
 80184b4:	d0f5      	beq.n	80184a2 <memmove+0x10>
 80184b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80184ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80184be:	e7f8      	b.n	80184b2 <memmove+0x20>

080184c0 <memset>:
 80184c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184c2:	b1c2      	cbz	r2, 80184f6 <memset+0x36>
 80184c4:	b2c9      	uxtb	r1, r1
 80184c6:	4603      	mov	r3, r0
 80184c8:	075c      	lsls	r4, r3, #29
 80184ca:	d110      	bne.n	80184ee <memset+0x2e>
 80184cc:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 80184d0:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 80184d4:	f022 0407 	bic.w	r4, r2, #7
 80184d8:	463d      	mov	r5, r7
 80184da:	441c      	add	r4, r3
 80184dc:	461e      	mov	r6, r3
 80184de:	42a6      	cmp	r6, r4
 80184e0:	d10a      	bne.n	80184f8 <memset+0x38>
 80184e2:	441a      	add	r2, r3
 80184e4:	4294      	cmp	r4, r2
 80184e6:	d006      	beq.n	80184f6 <memset+0x36>
 80184e8:	f804 1b01 	strb.w	r1, [r4], #1
 80184ec:	e7fa      	b.n	80184e4 <memset+0x24>
 80184ee:	3a01      	subs	r2, #1
 80184f0:	f803 1b01 	strb.w	r1, [r3], #1
 80184f4:	d1e8      	bne.n	80184c8 <memset+0x8>
 80184f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184f8:	f846 7b08 	str.w	r7, [r6], #8
 80184fc:	f846 5c04 	str.w	r5, [r6, #-4]
 8018500:	e7ed      	b.n	80184de <memset+0x1e>

08018502 <puts>:
 8018502:	b508      	push	{r3, lr}
 8018504:	f7ff fd46 	bl	8017f94 <console_puts>
 8018508:	200a      	movs	r0, #10
 801850a:	f7ff fd41 	bl	8017f90 <console_putc>
 801850e:	2001      	movs	r0, #1
 8018510:	bd08      	pop	{r3, pc}
	...

08018514 <strtok>:
 8018514:	b530      	push	{r4, r5, lr}
 8018516:	b910      	cbnz	r0, 801851e <strtok+0xa>
 8018518:	4b12      	ldr	r3, [pc, #72]	; (8018564 <strtok+0x50>)
 801851a:	6818      	ldr	r0, [r3, #0]
 801851c:	b158      	cbz	r0, 8018536 <strtok+0x22>
 801851e:	4603      	mov	r3, r0
 8018520:	4618      	mov	r0, r3
 8018522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018526:	460d      	mov	r5, r1
 8018528:	f815 4b01 	ldrb.w	r4, [r5], #1
 801852c:	b924      	cbnz	r4, 8018538 <strtok+0x24>
 801852e:	b94a      	cbnz	r2, 8018544 <strtok+0x30>
 8018530:	4b0c      	ldr	r3, [pc, #48]	; (8018564 <strtok+0x50>)
 8018532:	4610      	mov	r0, r2
 8018534:	601a      	str	r2, [r3, #0]
 8018536:	bd30      	pop	{r4, r5, pc}
 8018538:	42a2      	cmp	r2, r4
 801853a:	d1f5      	bne.n	8018528 <strtok+0x14>
 801853c:	e7f0      	b.n	8018520 <strtok+0xc>
 801853e:	4613      	mov	r3, r2
 8018540:	e00c      	b.n	801855c <strtok+0x48>
 8018542:	b914      	cbnz	r4, 801854a <strtok+0x36>
 8018544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018548:	460d      	mov	r5, r1
 801854a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801854e:	42a2      	cmp	r2, r4
 8018550:	d1f7      	bne.n	8018542 <strtok+0x2e>
 8018552:	2a00      	cmp	r2, #0
 8018554:	d0f3      	beq.n	801853e <strtok+0x2a>
 8018556:	2200      	movs	r2, #0
 8018558:	f803 2c01 	strb.w	r2, [r3, #-1]
 801855c:	4a01      	ldr	r2, [pc, #4]	; (8018564 <strtok+0x50>)
 801855e:	6013      	str	r3, [r2, #0]
 8018560:	e7e9      	b.n	8018536 <strtok+0x22>
 8018562:	bf00      	nop
 8018564:	2000fdc8 	andcs	pc, r0, r8, asr #27

08018568 <isleapyear>:
 8018568:	2264      	movs	r2, #100	; 0x64
 801856a:	fb90 f3f2 	sdiv	r3, r0, r2
 801856e:	fb02 0313 	mls	r3, r2, r3, r0
 8018572:	b94b      	cbnz	r3, 8018588 <isleapyear+0x20>
 8018574:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8018578:	fb90 f2f3 	sdiv	r2, r0, r3
 801857c:	fb03 0012 	mls	r0, r3, r2, r0
 8018580:	fab0 f080 	clz	r0, r0
 8018584:	0940      	lsrs	r0, r0, #5
 8018586:	4770      	bx	lr
 8018588:	f010 0f03 	tst.w	r0, #3
 801858c:	bf0c      	ite	eq
 801858e:	2001      	moveq	r0, #1
 8018590:	2000      	movne	r0, #0
 8018592:	4770      	bx	lr

08018594 <getdaysofmonth>:
 8018594:	b510      	push	{r4, lr}
 8018596:	4604      	mov	r4, r0
 8018598:	2c01      	cmp	r4, #1
 801859a:	4608      	mov	r0, r1
 801859c:	d102      	bne.n	80185a4 <getdaysofmonth+0x10>
 801859e:	f7ff ffe3 	bl	8018568 <isleapyear>
 80185a2:	b918      	cbnz	r0, 80185ac <getdaysofmonth+0x18>
 80185a4:	4b02      	ldr	r3, [pc, #8]	; (80185b0 <getdaysofmonth+0x1c>)
 80185a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80185aa:	bd10      	pop	{r4, pc}
 80185ac:	201d      	movs	r0, #29
 80185ae:	e7fc      	b.n	80185aa <getdaysofmonth+0x16>
 80185b0:	0801dff4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}

080185b4 <mktime>:
 80185b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185b8:	4604      	mov	r4, r0
 80185ba:	2800      	cmp	r0, #0
 80185bc:	d043      	beq.n	8018646 <mktime+0x92>
 80185be:	6941      	ldr	r1, [r0, #20]
 80185c0:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 80185c4:	2b45      	cmp	r3, #69	; 0x45
 80185c6:	d83e      	bhi.n	8018646 <mktime+0x92>
 80185c8:	2600      	movs	r6, #0
 80185ca:	f240 75b2 	movw	r5, #1970	; 0x7b2
 80185ce:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 80185d2:	f240 186d 	movw	r8, #365	; 0x16d
 80185d6:	42af      	cmp	r7, r5
 80185d8:	da24      	bge.n	8018624 <mktime+0x70>
 80185da:	6927      	ldr	r7, [r4, #16]
 80185dc:	2f0b      	cmp	r7, #11
 80185de:	d832      	bhi.n	8018646 <mktime+0x92>
 80185e0:	2500      	movs	r5, #0
 80185e2:	42af      	cmp	r7, r5
 80185e4:	d129      	bne.n	801863a <mktime+0x86>
 80185e6:	68e5      	ldr	r5, [r4, #12]
 80185e8:	2d00      	cmp	r5, #0
 80185ea:	dd2c      	ble.n	8018646 <mktime+0x92>
 80185ec:	4638      	mov	r0, r7
 80185ee:	f7ff ffd1 	bl	8018594 <getdaysofmonth>
 80185f2:	4285      	cmp	r5, r0
 80185f4:	dc27      	bgt.n	8018646 <mktime+0x92>
 80185f6:	3d01      	subs	r5, #1
 80185f8:	2318      	movs	r3, #24
 80185fa:	4435      	add	r5, r6
 80185fc:	435d      	muls	r5, r3
 80185fe:	68a3      	ldr	r3, [r4, #8]
 8018600:	2b17      	cmp	r3, #23
 8018602:	d820      	bhi.n	8018646 <mktime+0x92>
 8018604:	442b      	add	r3, r5
 8018606:	213c      	movs	r1, #60	; 0x3c
 8018608:	fb01 f203 	mul.w	r2, r1, r3
 801860c:	6863      	ldr	r3, [r4, #4]
 801860e:	2b3b      	cmp	r3, #59	; 0x3b
 8018610:	d819      	bhi.n	8018646 <mktime+0x92>
 8018612:	6820      	ldr	r0, [r4, #0]
 8018614:	4413      	add	r3, r2
 8018616:	283b      	cmp	r0, #59	; 0x3b
 8018618:	fb01 f303 	mul.w	r3, r1, r3
 801861c:	d813      	bhi.n	8018646 <mktime+0x92>
 801861e:	4418      	add	r0, r3
 8018620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018624:	4628      	mov	r0, r5
 8018626:	f7ff ff9f 	bl	8018568 <isleapyear>
 801862a:	2800      	cmp	r0, #0
 801862c:	bf14      	ite	ne
 801862e:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8018632:	4643      	moveq	r3, r8
 8018634:	441e      	add	r6, r3
 8018636:	3501      	adds	r5, #1
 8018638:	e7cd      	b.n	80185d6 <mktime+0x22>
 801863a:	4628      	mov	r0, r5
 801863c:	f7ff ffaa 	bl	8018594 <getdaysofmonth>
 8018640:	3501      	adds	r5, #1
 8018642:	4406      	add	r6, r0
 8018644:	e7cd      	b.n	80185e2 <mktime+0x2e>
 8018646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801864a:	e7e9      	b.n	8018620 <mktime+0x6c>

0801864c <gettimeofday>:
 801864c:	b538      	push	{r3, r4, r5, lr}
 801864e:	4a10      	ldr	r2, [pc, #64]	; (8018690 <gettimeofday+0x44>)
 8018650:	4b10      	ldr	r3, [pc, #64]	; (8018694 <gettimeofday+0x48>)
 8018652:	6814      	ldr	r4, [r2, #0]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	6013      	str	r3, [r2, #0]
 8018658:	429c      	cmp	r4, r3
 801865a:	bf2c      	ite	cs
 801865c:	1ae4      	subcs	r4, r4, r3
 801865e:	1b1c      	subcc	r4, r3, r4
 8018660:	4b0d      	ldr	r3, [pc, #52]	; (8018698 <gettimeofday+0x4c>)
 8018662:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018666:	4354      	muls	r4, r2
 8018668:	e9d3 2100 	ldrd	r2, r1, [r3]
 801866c:	18a4      	adds	r4, r4, r2
 801866e:	f141 0100 	adc.w	r1, r1, #0
 8018672:	4605      	mov	r5, r0
 8018674:	e9c3 4100 	strd	r4, r1, [r3]
 8018678:	4a08      	ldr	r2, [pc, #32]	; (801869c <gettimeofday+0x50>)
 801867a:	2300      	movs	r3, #0
 801867c:	4620      	mov	r0, r4
 801867e:	f7f0 fb0b 	bl	8008c98 <__aeabi_uldivmod>
 8018682:	4b06      	ldr	r3, [pc, #24]	; (801869c <gettimeofday+0x50>)
 8018684:	6028      	str	r0, [r5, #0]
 8018686:	fb03 4410 	mls	r4, r3, r0, r4
 801868a:	606c      	str	r4, [r5, #4]
 801868c:	2000      	movs	r0, #0
 801868e:	bd38      	pop	{r3, r4, r5, pc}
 8018690:	2000fdd8 	ldrdcs	pc, [r0], -r8
 8018694:	2000fddc 	ldrdcs	pc, [r0], -ip
 8018698:	2000fdd0 	ldrdcs	pc, [r0], -r0
 801869c:	000f4240 	andeq	r4, pc, r0, asr #4

080186a0 <settimeofday>:
 80186a0:	4b07      	ldr	r3, [pc, #28]	; (80186c0 <settimeofday+0x20>)
 80186a2:	4908      	ldr	r1, [pc, #32]	; (80186c4 <settimeofday+0x24>)
 80186a4:	681a      	ldr	r2, [r3, #0]
 80186a6:	4b08      	ldr	r3, [pc, #32]	; (80186c8 <settimeofday+0x28>)
 80186a8:	b510      	push	{r4, lr}
 80186aa:	601a      	str	r2, [r3, #0]
 80186ac:	6843      	ldr	r3, [r0, #4]
 80186ae:	6804      	ldr	r4, [r0, #0]
 80186b0:	4806      	ldr	r0, [pc, #24]	; (80186cc <settimeofday+0x2c>)
 80186b2:	17da      	asrs	r2, r3, #31
 80186b4:	fbc4 3200 	smlal	r3, r2, r4, r0
 80186b8:	e9c1 3200 	strd	r3, r2, [r1]
 80186bc:	2000      	movs	r0, #0
 80186be:	bd10      	pop	{r4, pc}
 80186c0:	2000fddc 	ldrdcs	pc, [r0], -ip
 80186c4:	2000fdd0 	ldrdcs	pc, [r0], -r0
 80186c8:	2000fdd8 	ldrdcs	pc, [r0], -r8
 80186cc:	000f4240 	andeq	r4, pc, r0, asr #4

080186d0 <time>:
 80186d0:	b513      	push	{r0, r1, r4, lr}
 80186d2:	4604      	mov	r4, r0
 80186d4:	2100      	movs	r1, #0
 80186d6:	4668      	mov	r0, sp
 80186d8:	f7ff ffb8 	bl	801864c <gettimeofday>
 80186dc:	9800      	ldr	r0, [sp, #0]
 80186de:	b104      	cbz	r4, 80186e2 <time+0x12>
 80186e0:	6020      	str	r0, [r4, #0]
 80186e2:	b002      	add	sp, #8
 80186e4:	bd10      	pop	{r4, pc}
	...

080186e8 <uart0_init>:
 80186e8:	b507      	push	{r0, r1, r2, lr}
 80186ea:	2301      	movs	r3, #1
 80186ec:	9300      	str	r3, [sp, #0]
 80186ee:	4805      	ldr	r0, [pc, #20]	; (8018704 <uart0_init+0x1c>)
 80186f0:	2300      	movs	r3, #0
 80186f2:	2208      	movs	r2, #8
 80186f4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80186f8:	f001 f9aa 	bl	8019a50 <gd32_uart_begin>
 80186fc:	b003      	add	sp, #12
 80186fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8018702:	bf00      	nop
 8018704:	40011000 	andmi	r1, r1, r0

08018708 <uart0_putc>:
 8018708:	280a      	cmp	r0, #10
 801870a:	b570      	push	{r4, r5, r6, lr}
 801870c:	4d0a      	ldr	r5, [pc, #40]	; (8018738 <uart0_putc+0x30>)
 801870e:	4604      	mov	r4, r0
 8018710:	d107      	bne.n	8018722 <uart0_putc+0x1a>
 8018712:	2107      	movs	r1, #7
 8018714:	4628      	mov	r0, r5
 8018716:	f000 fe43 	bl	80193a0 <usart_flag_get>
 801871a:	2800      	cmp	r0, #0
 801871c:	d0f9      	beq.n	8018712 <uart0_putc+0xa>
 801871e:	230d      	movs	r3, #13
 8018720:	606b      	str	r3, [r5, #4]
 8018722:	4e05      	ldr	r6, [pc, #20]	; (8018738 <uart0_putc+0x30>)
 8018724:	2107      	movs	r1, #7
 8018726:	4630      	mov	r0, r6
 8018728:	f000 fe3a 	bl	80193a0 <usart_flag_get>
 801872c:	2800      	cmp	r0, #0
 801872e:	d0f9      	beq.n	8018724 <uart0_putc+0x1c>
 8018730:	b2e4      	uxtb	r4, r4
 8018732:	606c      	str	r4, [r5, #4]
 8018734:	bd70      	pop	{r4, r5, r6, pc}
 8018736:	bf00      	nop
 8018738:	40011000 	andmi	r1, r1, r0

0801873c <uart0_puts>:
 801873c:	b510      	push	{r4, lr}
 801873e:	1e44      	subs	r4, r0, #1
 8018740:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018744:	b903      	cbnz	r3, 8018748 <uart0_puts+0xc>
 8018746:	bd10      	pop	{r4, pc}
 8018748:	2b0a      	cmp	r3, #10
 801874a:	d102      	bne.n	8018752 <uart0_puts+0x16>
 801874c:	200d      	movs	r0, #13
 801874e:	f7ff ffdb 	bl	8018708 <uart0_putc>
 8018752:	7820      	ldrb	r0, [r4, #0]
 8018754:	f7ff ffd8 	bl	8018708 <uart0_putc>
 8018758:	e7f2      	b.n	8018740 <uart0_puts+0x4>
	...

0801875c <systick_config>:
 801875c:	4b0c      	ldr	r3, [pc, #48]	; (8018790 <systick_config+0x34>)
 801875e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	fbb3 f3f2 	udiv	r3, r3, r2
 8018768:	3b01      	subs	r3, #1
 801876a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801876e:	d20d      	bcs.n	801878c <systick_config+0x30>
 8018770:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8018774:	21f0      	movs	r1, #240	; 0xf0
 8018776:	6153      	str	r3, [r2, #20]
 8018778:	4b06      	ldr	r3, [pc, #24]	; (8018794 <systick_config+0x38>)
 801877a:	2007      	movs	r0, #7
 801877c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8018780:	2100      	movs	r1, #0
 8018782:	6191      	str	r1, [r2, #24]
 8018784:	6110      	str	r0, [r2, #16]
 8018786:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 801878a:	4770      	bx	lr
 801878c:	e7fe      	b.n	801878c <systick_config+0x30>
 801878e:	bf00      	nop
 8018790:	200000f4 	strdcs	r0, [r0], -r4
 8018794:	e000ed00 	and	lr, r0, r0, lsl #26

08018798 <SysTick_Handler>:
 8018798:	4a02      	ldr	r2, [pc, #8]	; (80187a4 <SysTick_Handler+0xc>)
 801879a:	6813      	ldr	r3, [r2, #0]
 801879c:	3301      	adds	r3, #1
 801879e:	6013      	str	r3, [r2, #0]
 80187a0:	4770      	bx	lr
 80187a2:	bf00      	nop
 80187a4:	2000fddc 	ldrdcs	pc, [r0], -ip

080187a8 <SystemInit>:
 80187a8:	4a56      	ldr	r2, [pc, #344]	; (8018904 <SystemInit+0x15c>)
 80187aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80187ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80187b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80187b6:	4b54      	ldr	r3, [pc, #336]	; (8018908 <SystemInit+0x160>)
 80187b8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80187bc:	f042 0201 	orr.w	r2, r2, #1
 80187c0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 80187c4:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80187c8:	b082      	sub	sp, #8
 80187ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80187ce:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 80187d2:	2200      	movs	r2, #0
 80187d4:	9201      	str	r2, [sp, #4]
 80187d6:	f24c 314f 	movw	r1, #49999	; 0xc34f
 80187da:	9a01      	ldr	r2, [sp, #4]
 80187dc:	428a      	cmp	r2, r1
 80187de:	d93e      	bls.n	801885e <SystemInit+0xb6>
 80187e0:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80187e4:	f042 0290 	orr.w	r2, r2, #144	; 0x90
 80187e8:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 80187ec:	2300      	movs	r3, #0
 80187ee:	9301      	str	r3, [sp, #4]
 80187f0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80187f4:	9b01      	ldr	r3, [sp, #4]
 80187f6:	4293      	cmp	r3, r2
 80187f8:	d935      	bls.n	8018866 <SystemInit+0xbe>
 80187fa:	4b43      	ldr	r3, [pc, #268]	; (8018908 <SystemInit+0x160>)
 80187fc:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8018800:	f022 0203 	bic.w	r2, r2, #3
 8018804:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8018808:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 801880c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8018810:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8018814:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8018818:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 801881c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8018820:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8018824:	2200      	movs	r2, #0
 8018826:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 801882a:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 801882e:	4937      	ldr	r1, [pc, #220]	; (801890c <SystemInit+0x164>)
 8018830:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
 8018834:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
 8018838:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 801883c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8018840:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8018844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018848:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 801884c:	0389      	lsls	r1, r1, #14
 801884e:	d401      	bmi.n	8018854 <SystemInit+0xac>
 8018850:	3a01      	subs	r2, #1
 8018852:	d1f9      	bne.n	8018848 <SystemInit+0xa0>
 8018854:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8018858:	0392      	lsls	r2, r2, #14
 801885a:	d408      	bmi.n	801886e <SystemInit+0xc6>
 801885c:	e7fe      	b.n	801885c <SystemInit+0xb4>
 801885e:	9a01      	ldr	r2, [sp, #4]
 8018860:	3201      	adds	r2, #1
 8018862:	9201      	str	r2, [sp, #4]
 8018864:	e7b9      	b.n	80187da <SystemInit+0x32>
 8018866:	9b01      	ldr	r3, [sp, #4]
 8018868:	3301      	adds	r3, #1
 801886a:	9301      	str	r3, [sp, #4]
 801886c:	e7c2      	b.n	80187f4 <SystemInit+0x4c>
 801886e:	f8d3 2840 	ldr.w	r2, [r3, #2112]	; 0x840
 8018872:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8018876:	f8c3 2840 	str.w	r2, [r3, #2112]	; 0x840
 801887a:	4a25      	ldr	r2, [pc, #148]	; (8018910 <SystemInit+0x168>)
 801887c:	6811      	ldr	r1, [r2, #0]
 801887e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8018882:	6011      	str	r1, [r2, #0]
 8018884:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 8018888:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
 801888c:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 8018890:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8018894:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
 8018898:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 801889c:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400
 80188a0:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
 80188a4:	491b      	ldr	r1, [pc, #108]	; (8018914 <SystemInit+0x16c>)
 80188a6:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
 80188aa:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 80188ae:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80188b2:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
 80188b6:	4914      	ldr	r1, [pc, #80]	; (8018908 <SystemInit+0x160>)
 80188b8:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
 80188bc:	019b      	lsls	r3, r3, #6
 80188be:	d5fb      	bpl.n	80188b8 <SystemInit+0x110>
 80188c0:	6813      	ldr	r3, [r2, #0]
 80188c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80188c6:	6013      	str	r3, [r2, #0]
 80188c8:	4b11      	ldr	r3, [pc, #68]	; (8018910 <SystemInit+0x168>)
 80188ca:	685a      	ldr	r2, [r3, #4]
 80188cc:	03d0      	lsls	r0, r2, #15
 80188ce:	d5fc      	bpl.n	80188ca <SystemInit+0x122>
 80188d0:	681a      	ldr	r2, [r3, #0]
 80188d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80188d6:	601a      	str	r2, [r3, #0]
 80188d8:	685a      	ldr	r2, [r3, #4]
 80188da:	0391      	lsls	r1, r2, #14
 80188dc:	d5fc      	bpl.n	80188d8 <SystemInit+0x130>
 80188de:	4b0a      	ldr	r3, [pc, #40]	; (8018908 <SystemInit+0x160>)
 80188e0:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80188e4:	f022 0203 	bic.w	r2, r2, #3
 80188e8:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 80188ec:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80188f0:	f042 0202 	orr.w	r2, r2, #2
 80188f4:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 80188f8:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80188fc:	0712      	lsls	r2, r2, #28
 80188fe:	d5fb      	bpl.n	80188f8 <SystemInit+0x150>
 8018900:	b002      	add	sp, #8
 8018902:	4770      	bx	lr
 8018904:	e000ed00 	and	lr, r0, r0, lsl #26
 8018908:	40023000 	andmi	r3, r2, r0
 801890c:	24003010 	strcs	r3, [r0], #-16
 8018910:	40007000 	andmi	r7, r0, r0
 8018914:	09406419 	stmdbeq	r0, {r0, r3, r4, sl, sp, lr}^

08018918 <dma_deinit>:
 8018918:	2318      	movs	r3, #24
 801891a:	fb03 0301 	mla	r3, r3, r1, r0
 801891e:	b510      	push	{r4, lr}
 8018920:	691a      	ldr	r2, [r3, #16]
 8018922:	f022 0201 	bic.w	r2, r2, #1
 8018926:	611a      	str	r2, [r3, #16]
 8018928:	2903      	cmp	r1, #3
 801892a:	f04f 0200 	mov.w	r2, #0
 801892e:	611a      	str	r2, [r3, #16]
 8018930:	615a      	str	r2, [r3, #20]
 8018932:	619a      	str	r2, [r3, #24]
 8018934:	61da      	str	r2, [r3, #28]
 8018936:	621a      	str	r2, [r3, #32]
 8018938:	625a      	str	r2, [r3, #36]	; 0x24
 801893a:	d80a      	bhi.n	8018952 <dma_deinit+0x3a>
 801893c:	2406      	movs	r4, #6
 801893e:	084b      	lsrs	r3, r1, #1
 8018940:	4361      	muls	r1, r4
 8018942:	6882      	ldr	r2, [r0, #8]
 8018944:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018948:	233d      	movs	r3, #61	; 0x3d
 801894a:	408b      	lsls	r3, r1
 801894c:	4313      	orrs	r3, r2
 801894e:	6083      	str	r3, [r0, #8]
 8018950:	bd10      	pop	{r4, pc}
 8018952:	3904      	subs	r1, #4
 8018954:	b2ca      	uxtb	r2, r1
 8018956:	2306      	movs	r3, #6
 8018958:	435a      	muls	r2, r3
 801895a:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801895e:	68c4      	ldr	r4, [r0, #12]
 8018960:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8018964:	233d      	movs	r3, #61	; 0x3d
 8018966:	4093      	lsls	r3, r2
 8018968:	4323      	orrs	r3, r4
 801896a:	60c3      	str	r3, [r0, #12]
 801896c:	e7f0      	b.n	8018950 <dma_deinit+0x38>

0801896e <dma_single_data_para_struct_init>:
 801896e:	2300      	movs	r3, #0
 8018970:	2201      	movs	r2, #1
 8018972:	e9c0 3200 	strd	r3, r2, [r0]
 8018976:	e9c0 3202 	strd	r3, r2, [r0, #8]
 801897a:	e9c0 3204 	strd	r3, r2, [r0, #16]
 801897e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018982:	6203      	str	r3, [r0, #32]
 8018984:	4770      	bx	lr

08018986 <dma_single_data_mode_init>:
 8018986:	2318      	movs	r3, #24
 8018988:	fb03 0101 	mla	r1, r3, r1, r0
 801898c:	b530      	push	{r4, r5, lr}
 801898e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8018990:	f023 0304 	bic.w	r3, r3, #4
 8018994:	624b      	str	r3, [r1, #36]	; 0x24
 8018996:	6813      	ldr	r3, [r2, #0]
 8018998:	618b      	str	r3, [r1, #24]
 801899a:	6893      	ldr	r3, [r2, #8]
 801899c:	61cb      	str	r3, [r1, #28]
 801899e:	69d3      	ldr	r3, [r2, #28]
 80189a0:	614b      	str	r3, [r1, #20]
 80189a2:	6914      	ldr	r4, [r2, #16]
 80189a4:	6a13      	ldr	r3, [r2, #32]
 80189a6:	6908      	ldr	r0, [r1, #16]
 80189a8:	6995      	ldr	r5, [r2, #24]
 80189aa:	4323      	orrs	r3, r4
 80189ac:	f420 305e 	bic.w	r0, r0, #227328	; 0x37800
 80189b0:	432b      	orrs	r3, r5
 80189b2:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 80189b6:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 80189ba:	4303      	orrs	r3, r0
 80189bc:	610b      	str	r3, [r1, #16]
 80189be:	6853      	ldr	r3, [r2, #4]
 80189c0:	b983      	cbnz	r3, 80189e4 <dma_single_data_mode_init+0x5e>
 80189c2:	690b      	ldr	r3, [r1, #16]
 80189c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80189c8:	610b      	str	r3, [r1, #16]
 80189ca:	68d3      	ldr	r3, [r2, #12]
 80189cc:	b993      	cbnz	r3, 80189f4 <dma_single_data_mode_init+0x6e>
 80189ce:	690b      	ldr	r3, [r1, #16]
 80189d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80189d4:	610b      	str	r3, [r1, #16]
 80189d6:	6953      	ldr	r3, [r2, #20]
 80189d8:	b983      	cbnz	r3, 80189fc <dma_single_data_mode_init+0x76>
 80189da:	690b      	ldr	r3, [r1, #16]
 80189dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80189e0:	610b      	str	r3, [r1, #16]
 80189e2:	bd30      	pop	{r4, r5, pc}
 80189e4:	2b01      	cmp	r3, #1
 80189e6:	690b      	ldr	r3, [r1, #16]
 80189e8:	bf0c      	ite	eq
 80189ea:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 80189ee:	f443 4300 	orrne.w	r3, r3, #32768	; 0x8000
 80189f2:	e7e9      	b.n	80189c8 <dma_single_data_mode_init+0x42>
 80189f4:	690b      	ldr	r3, [r1, #16]
 80189f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80189fa:	e7eb      	b.n	80189d4 <dma_single_data_mode_init+0x4e>
 80189fc:	690b      	ldr	r3, [r1, #16]
 80189fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018a02:	e7ed      	b.n	80189e0 <dma_single_data_mode_init+0x5a>

08018a04 <dma_circulation_disable>:
 8018a04:	2318      	movs	r3, #24
 8018a06:	4359      	muls	r1, r3
 8018a08:	3010      	adds	r0, #16
 8018a0a:	580b      	ldr	r3, [r1, r0]
 8018a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018a10:	500b      	str	r3, [r1, r0]
 8018a12:	4770      	bx	lr

08018a14 <dma_channel_subperipheral_select>:
 8018a14:	2318      	movs	r3, #24
 8018a16:	4359      	muls	r1, r3
 8018a18:	3010      	adds	r0, #16
 8018a1a:	580b      	ldr	r3, [r1, r0]
 8018a1c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8018a20:	ea43 6242 	orr.w	r2, r3, r2, lsl #25
 8018a24:	500a      	str	r2, [r1, r0]
 8018a26:	4770      	bx	lr

08018a28 <dma_flag_clear>:
 8018a28:	2903      	cmp	r1, #3
 8018a2a:	b530      	push	{r4, r5, lr}
 8018a2c:	d809      	bhi.n	8018a42 <dma_flag_clear+0x1a>
 8018a2e:	2506      	movs	r5, #6
 8018a30:	084c      	lsrs	r4, r1, #1
 8018a32:	4369      	muls	r1, r5
 8018a34:	6883      	ldr	r3, [r0, #8]
 8018a36:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018a3a:	408a      	lsls	r2, r1
 8018a3c:	4313      	orrs	r3, r2
 8018a3e:	6083      	str	r3, [r0, #8]
 8018a40:	bd30      	pop	{r4, r5, pc}
 8018a42:	3904      	subs	r1, #4
 8018a44:	b2cb      	uxtb	r3, r1
 8018a46:	2506      	movs	r5, #6
 8018a48:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8018a4c:	436b      	muls	r3, r5
 8018a4e:	68c4      	ldr	r4, [r0, #12]
 8018a50:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8018a54:	409a      	lsls	r2, r3
 8018a56:	4322      	orrs	r2, r4
 8018a58:	60c2      	str	r2, [r0, #12]
 8018a5a:	e7f1      	b.n	8018a40 <dma_flag_clear+0x18>

08018a5c <dma_interrupt_flag_clear>:
 8018a5c:	f7ff bfe4 	b.w	8018a28 <dma_flag_clear>

08018a60 <fwdgt_enable>:
 8018a60:	4b02      	ldr	r3, [pc, #8]	; (8018a6c <fwdgt_enable+0xc>)
 8018a62:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8018a66:	601a      	str	r2, [r3, #0]
 8018a68:	4770      	bx	lr
 8018a6a:	bf00      	nop
 8018a6c:	40003000 	andmi	r3, r0, r0

08018a70 <fwdgt_counter_reload>:
 8018a70:	4b02      	ldr	r3, [pc, #8]	; (8018a7c <fwdgt_counter_reload+0xc>)
 8018a72:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8018a76:	601a      	str	r2, [r3, #0]
 8018a78:	4770      	bx	lr
 8018a7a:	bf00      	nop
 8018a7c:	40003000 	andmi	r3, r0, r0

08018a80 <fwdgt_config>:
 8018a80:	4a12      	ldr	r2, [pc, #72]	; (8018acc <fwdgt_config+0x4c>)
 8018a82:	b510      	push	{r4, lr}
 8018a84:	f245 5355 	movw	r3, #21845	; 0x5555
 8018a88:	4c11      	ldr	r4, [pc, #68]	; (8018ad0 <fwdgt_config+0x50>)
 8018a8a:	6013      	str	r3, [r2, #0]
 8018a8c:	68d3      	ldr	r3, [r2, #12]
 8018a8e:	3c01      	subs	r4, #1
 8018a90:	f003 0301 	and.w	r3, r3, #1
 8018a94:	d013      	beq.n	8018abe <fwdgt_config+0x3e>
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d1f8      	bne.n	8018a8c <fwdgt_config+0xc>
 8018a9a:	6051      	str	r1, [r2, #4]
 8018a9c:	490c      	ldr	r1, [pc, #48]	; (8018ad0 <fwdgt_config+0x50>)
 8018a9e:	4a0b      	ldr	r2, [pc, #44]	; (8018acc <fwdgt_config+0x4c>)
 8018aa0:	68d3      	ldr	r3, [r2, #12]
 8018aa2:	3901      	subs	r1, #1
 8018aa4:	f003 0302 	and.w	r3, r3, #2
 8018aa8:	d00d      	beq.n	8018ac6 <fwdgt_config+0x46>
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d1f8      	bne.n	8018aa0 <fwdgt_config+0x20>
 8018aae:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8018ab2:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8018ab6:	6090      	str	r0, [r2, #8]
 8018ab8:	6013      	str	r3, [r2, #0]
 8018aba:	2001      	movs	r0, #1
 8018abc:	e002      	b.n	8018ac4 <fwdgt_config+0x44>
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d0eb      	beq.n	8018a9a <fwdgt_config+0x1a>
 8018ac2:	2000      	movs	r0, #0
 8018ac4:	bd10      	pop	{r4, pc}
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d1fb      	bne.n	8018ac2 <fwdgt_config+0x42>
 8018aca:	e7f0      	b.n	8018aae <fwdgt_config+0x2e>
 8018acc:	40003000 	andmi	r3, r0, r0
 8018ad0:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08018ad4 <gpio_mode_set>:
 8018ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ad8:	6805      	ldr	r5, [r0, #0]
 8018ada:	68c4      	ldr	r4, [r0, #12]
 8018adc:	2600      	movs	r6, #0
 8018ade:	f04f 0e03 	mov.w	lr, #3
 8018ae2:	fa23 f706 	lsr.w	r7, r3, r6
 8018ae6:	07ff      	lsls	r7, r7, #31
 8018ae8:	d50d      	bpl.n	8018b06 <gpio_mode_set+0x32>
 8018aea:	0077      	lsls	r7, r6, #1
 8018aec:	fa0e fc07 	lsl.w	ip, lr, r7
 8018af0:	fa01 f807 	lsl.w	r8, r1, r7
 8018af4:	ea25 050c 	bic.w	r5, r5, ip
 8018af8:	ea24 040c 	bic.w	r4, r4, ip
 8018afc:	fa02 f707 	lsl.w	r7, r2, r7
 8018b00:	ea48 0505 	orr.w	r5, r8, r5
 8018b04:	433c      	orrs	r4, r7
 8018b06:	3601      	adds	r6, #1
 8018b08:	2e10      	cmp	r6, #16
 8018b0a:	d1ea      	bne.n	8018ae2 <gpio_mode_set+0xe>
 8018b0c:	6005      	str	r5, [r0, #0]
 8018b0e:	60c4      	str	r4, [r0, #12]
 8018b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018b14 <gpio_output_options_set>:
 8018b14:	2901      	cmp	r1, #1
 8018b16:	6841      	ldr	r1, [r0, #4]
 8018b18:	bf0c      	ite	eq
 8018b1a:	4319      	orreq	r1, r3
 8018b1c:	4399      	bicne	r1, r3
 8018b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b20:	6041      	str	r1, [r0, #4]
 8018b22:	6881      	ldr	r1, [r0, #8]
 8018b24:	2400      	movs	r4, #0
 8018b26:	2603      	movs	r6, #3
 8018b28:	fa23 f504 	lsr.w	r5, r3, r4
 8018b2c:	07ed      	lsls	r5, r5, #31
 8018b2e:	d507      	bpl.n	8018b40 <gpio_output_options_set+0x2c>
 8018b30:	0065      	lsls	r5, r4, #1
 8018b32:	fa06 f705 	lsl.w	r7, r6, r5
 8018b36:	ea21 0107 	bic.w	r1, r1, r7
 8018b3a:	fa02 f505 	lsl.w	r5, r2, r5
 8018b3e:	4329      	orrs	r1, r5
 8018b40:	3401      	adds	r4, #1
 8018b42:	2c10      	cmp	r4, #16
 8018b44:	d1f0      	bne.n	8018b28 <gpio_output_options_set+0x14>
 8018b46:	6081      	str	r1, [r0, #8]
 8018b48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018b4a <gpio_af_set>:
 8018b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b4c:	6a06      	ldr	r6, [r0, #32]
 8018b4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018b50:	2300      	movs	r3, #0
 8018b52:	f04f 0c0f 	mov.w	ip, #15
 8018b56:	fa22 f403 	lsr.w	r4, r2, r3
 8018b5a:	07e7      	lsls	r7, r4, #31
 8018b5c:	d507      	bpl.n	8018b6e <gpio_af_set+0x24>
 8018b5e:	009c      	lsls	r4, r3, #2
 8018b60:	fa0c f704 	lsl.w	r7, ip, r4
 8018b64:	ea26 0607 	bic.w	r6, r6, r7
 8018b68:	fa01 f404 	lsl.w	r4, r1, r4
 8018b6c:	4326      	orrs	r6, r4
 8018b6e:	3301      	adds	r3, #1
 8018b70:	2b08      	cmp	r3, #8
 8018b72:	d1f0      	bne.n	8018b56 <gpio_af_set+0xc>
 8018b74:	2300      	movs	r3, #0
 8018b76:	f04f 0c0f 	mov.w	ip, #15
 8018b7a:	f103 0408 	add.w	r4, r3, #8
 8018b7e:	fa22 f404 	lsr.w	r4, r2, r4
 8018b82:	07e4      	lsls	r4, r4, #31
 8018b84:	d507      	bpl.n	8018b96 <gpio_af_set+0x4c>
 8018b86:	009c      	lsls	r4, r3, #2
 8018b88:	fa0c f704 	lsl.w	r7, ip, r4
 8018b8c:	ea25 0507 	bic.w	r5, r5, r7
 8018b90:	fa01 f404 	lsl.w	r4, r1, r4
 8018b94:	4325      	orrs	r5, r4
 8018b96:	3301      	adds	r3, #1
 8018b98:	2b08      	cmp	r3, #8
 8018b9a:	d1ee      	bne.n	8018b7a <gpio_af_set+0x30>
 8018b9c:	6206      	str	r6, [r0, #32]
 8018b9e:	6245      	str	r5, [r0, #36]	; 0x24
 8018ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018ba4 <pmu_backup_ldo_config>:
 8018ba4:	4b04      	ldr	r3, [pc, #16]	; (8018bb8 <pmu_backup_ldo_config+0x14>)
 8018ba6:	685a      	ldr	r2, [r3, #4]
 8018ba8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8018bac:	605a      	str	r2, [r3, #4]
 8018bae:	685a      	ldr	r2, [r3, #4]
 8018bb0:	4310      	orrs	r0, r2
 8018bb2:	6058      	str	r0, [r3, #4]
 8018bb4:	4770      	bx	lr
 8018bb6:	bf00      	nop
 8018bb8:	40007000 	andmi	r7, r0, r0

08018bbc <pmu_backup_write_enable>:
 8018bbc:	4a02      	ldr	r2, [pc, #8]	; (8018bc8 <pmu_backup_write_enable+0xc>)
 8018bbe:	6813      	ldr	r3, [r2, #0]
 8018bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018bc4:	6013      	str	r3, [r2, #0]
 8018bc6:	4770      	bx	lr
 8018bc8:	40007000 	andmi	r7, r0, r0

08018bcc <rcu_periph_clock_enable>:
 8018bcc:	0983      	lsrs	r3, r0, #6
 8018bce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018bd2:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8018bd6:	f000 001f 	and.w	r0, r0, #31
 8018bda:	6819      	ldr	r1, [r3, #0]
 8018bdc:	2201      	movs	r2, #1
 8018bde:	4082      	lsls	r2, r0
 8018be0:	430a      	orrs	r2, r1
 8018be2:	601a      	str	r2, [r3, #0]
 8018be4:	4770      	bx	lr

08018be6 <rcu_periph_clock_disable>:
 8018be6:	0983      	lsrs	r3, r0, #6
 8018be8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018bec:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8018bf0:	f000 001f 	and.w	r0, r0, #31
 8018bf4:	681a      	ldr	r2, [r3, #0]
 8018bf6:	2101      	movs	r1, #1
 8018bf8:	4081      	lsls	r1, r0
 8018bfa:	ea22 0201 	bic.w	r2, r2, r1
 8018bfe:	601a      	str	r2, [r3, #0]
 8018c00:	4770      	bx	lr

08018c02 <rcu_periph_reset_enable>:
 8018c02:	f7ff bfe3 	b.w	8018bcc <rcu_periph_clock_enable>

08018c06 <rcu_periph_reset_disable>:
 8018c06:	f7ff bfee 	b.w	8018be6 <rcu_periph_clock_disable>
	...

08018c0c <rcu_ckout0_config>:
 8018c0c:	4a04      	ldr	r2, [pc, #16]	; (8018c20 <rcu_ckout0_config+0x14>)
 8018c0e:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8018c12:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8018c16:	4319      	orrs	r1, r3
 8018c18:	4308      	orrs	r0, r1
 8018c1a:	f8c2 0808 	str.w	r0, [r2, #2056]	; 0x808
 8018c1e:	4770      	bx	lr
 8018c20:	40023000 	andmi	r3, r2, r0

08018c24 <rcu_timer_clock_prescaler_config>:
 8018c24:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8018c28:	4298      	cmp	r0, r3
 8018c2a:	4b05      	ldr	r3, [pc, #20]	; (8018c40 <rcu_timer_clock_prescaler_config+0x1c>)
 8018c2c:	f8d3 288c 	ldr.w	r2, [r3, #2188]	; 0x88c
 8018c30:	bf0c      	ite	eq
 8018c32:	f022 7280 	biceq.w	r2, r2, #16777216	; 0x1000000
 8018c36:	4302      	orrne	r2, r0
 8018c38:	f8c3 288c 	str.w	r2, [r3, #2188]	; 0x88c
 8018c3c:	4770      	bx	lr
 8018c3e:	bf00      	nop
 8018c40:	40023000 	andmi	r3, r2, r0

08018c44 <rcu_clock_freq_get>:
 8018c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c46:	4b35      	ldr	r3, [pc, #212]	; (8018d1c <rcu_clock_freq_get+0xd8>)
 8018c48:	b089      	sub	sp, #36	; 0x24
 8018c4a:	4604      	mov	r4, r0
 8018c4c:	ad04      	add	r5, sp, #16
 8018c4e:	f103 0610 	add.w	r6, r3, #16
 8018c52:	461f      	mov	r7, r3
 8018c54:	6818      	ldr	r0, [r3, #0]
 8018c56:	6859      	ldr	r1, [r3, #4]
 8018c58:	462a      	mov	r2, r5
 8018c5a:	c203      	stmia	r2!, {r0, r1}
 8018c5c:	3308      	adds	r3, #8
 8018c5e:	42b3      	cmp	r3, r6
 8018c60:	4615      	mov	r5, r2
 8018c62:	d1f7      	bne.n	8018c54 <rcu_clock_freq_get+0x10>
 8018c64:	6938      	ldr	r0, [r7, #16]
 8018c66:	6871      	ldr	r1, [r6, #4]
 8018c68:	4a2d      	ldr	r2, [pc, #180]	; (8018d20 <rcu_clock_freq_get+0xdc>)
 8018c6a:	466b      	mov	r3, sp
 8018c6c:	c303      	stmia	r3!, {r0, r1}
 8018c6e:	c303      	stmia	r3!, {r0, r1}
 8018c70:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8018c74:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018c78:	2b01      	cmp	r3, #1
 8018c7a:	d03f      	beq.n	8018cfc <rcu_clock_freq_get+0xb8>
 8018c7c:	2b02      	cmp	r3, #2
 8018c7e:	d13f      	bne.n	8018d00 <rcu_clock_freq_get+0xbc>
 8018c80:	f8d2 0804 	ldr.w	r0, [r2, #2052]	; 0x804
 8018c84:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
 8018c88:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8018c8c:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 8018c90:	4d24      	ldr	r5, [pc, #144]	; (8018d24 <rcu_clock_freq_get+0xe0>)
 8018c92:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8018c96:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8018c9a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8018c9e:	f103 0301 	add.w	r3, r3, #1
 8018ca2:	4a21      	ldr	r2, [pc, #132]	; (8018d28 <rcu_clock_freq_get+0xe4>)
 8018ca4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8018ca8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018cac:	bf08      	it	eq
 8018cae:	462a      	moveq	r2, r5
 8018cb0:	fbb2 f2f0 	udiv	r2, r2, r0
 8018cb4:	434a      	muls	r2, r1
 8018cb6:	fbb2 f0f3 	udiv	r0, r2, r3
 8018cba:	4919      	ldr	r1, [pc, #100]	; (8018d20 <rcu_clock_freq_get+0xdc>)
 8018cbc:	f8d1 3808 	ldr.w	r3, [r1, #2056]	; 0x808
 8018cc0:	f8d1 2808 	ldr.w	r2, [r1, #2056]	; 0x808
 8018cc4:	f3c2 2282 	ubfx	r2, r2, #10, #3
 8018cc8:	3220      	adds	r2, #32
 8018cca:	446a      	add	r2, sp
 8018ccc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8018cd0:	f812 5c20 	ldrb.w	r5, [r2, #-32]
 8018cd4:	f8d1 2808 	ldr.w	r2, [r1, #2056]	; 0x808
 8018cd8:	3320      	adds	r3, #32
 8018cda:	446b      	add	r3, sp
 8018cdc:	f3c2 3242 	ubfx	r2, r2, #13, #3
 8018ce0:	3220      	adds	r2, #32
 8018ce2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8018ce6:	446a      	add	r2, sp
 8018ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8018cec:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8018cf0:	2c03      	cmp	r4, #3
 8018cf2:	d810      	bhi.n	8018d16 <rcu_clock_freq_get+0xd2>
 8018cf4:	e8df f004 	tbb	[pc, r4]
 8018cf8:	0c090607 	stceq	6, cr0, [r9], {7}
 8018cfc:	480a      	ldr	r0, [pc, #40]	; (8018d28 <rcu_clock_freq_get+0xe4>)
 8018cfe:	e7dc      	b.n	8018cba <rcu_clock_freq_get+0x76>
 8018d00:	4808      	ldr	r0, [pc, #32]	; (8018d24 <rcu_clock_freq_get+0xe0>)
 8018d02:	e7da      	b.n	8018cba <rcu_clock_freq_get+0x76>
 8018d04:	4618      	mov	r0, r3
 8018d06:	b009      	add	sp, #36	; 0x24
 8018d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d0a:	fa23 f005 	lsr.w	r0, r3, r5
 8018d0e:	e7fa      	b.n	8018d06 <rcu_clock_freq_get+0xc2>
 8018d10:	fa23 f002 	lsr.w	r0, r3, r2
 8018d14:	e7f7      	b.n	8018d06 <rcu_clock_freq_get+0xc2>
 8018d16:	2000      	movs	r0, #0
 8018d18:	e7f5      	b.n	8018d06 <rcu_clock_freq_get+0xc2>
 8018d1a:	bf00      	nop
 8018d1c:	0801a9d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, fp, sp, pc}
 8018d20:	40023000 	andmi	r3, r2, r0
 8018d24:	00f42400 	rscseq	r2, r4, r0, lsl #8
 8018d28:	017d7840 	cmneq	sp, r0, asr #16

08018d2c <timer_deinit>:
 8018d2c:	b508      	push	{r3, lr}
 8018d2e:	4b4e      	ldr	r3, [pc, #312]	; (8018e68 <timer_deinit+0x13c>)
 8018d30:	4298      	cmp	r0, r3
 8018d32:	f000 8092 	beq.w	8018e5a <timer_deinit+0x12e>
 8018d36:	d822      	bhi.n	8018d7e <timer_deinit+0x52>
 8018d38:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8018d3c:	4298      	cmp	r0, r3
 8018d3e:	d062      	beq.n	8018e06 <timer_deinit+0xda>
 8018d40:	d80b      	bhi.n	8018d5a <timer_deinit+0x2e>
 8018d42:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8018d46:	4298      	cmp	r0, r3
 8018d48:	d04f      	beq.n	8018dea <timer_deinit+0xbe>
 8018d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018d4e:	4298      	cmp	r0, r3
 8018d50:	d052      	beq.n	8018df8 <timer_deinit+0xcc>
 8018d52:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8018d56:	d041      	beq.n	8018ddc <timer_deinit+0xb0>
 8018d58:	bd08      	pop	{r3, pc}
 8018d5a:	4b44      	ldr	r3, [pc, #272]	; (8018e6c <timer_deinit+0x140>)
 8018d5c:	4298      	cmp	r0, r3
 8018d5e:	d059      	beq.n	8018e14 <timer_deinit+0xe8>
 8018d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018d64:	4298      	cmp	r0, r3
 8018d66:	d071      	beq.n	8018e4c <timer_deinit+0x120>
 8018d68:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8018d6c:	4298      	cmp	r0, r3
 8018d6e:	d1f3      	bne.n	8018d58 <timer_deinit+0x2c>
 8018d70:	f640 0004 	movw	r0, #2052	; 0x804
 8018d74:	f7ff ff45 	bl	8018c02 <rcu_periph_reset_enable>
 8018d78:	f640 0004 	movw	r0, #2052	; 0x804
 8018d7c:	e02a      	b.n	8018dd4 <timer_deinit+0xa8>
 8018d7e:	4b3c      	ldr	r3, [pc, #240]	; (8018e70 <timer_deinit+0x144>)
 8018d80:	4298      	cmp	r0, r3
 8018d82:	d055      	beq.n	8018e30 <timer_deinit+0x104>
 8018d84:	d812      	bhi.n	8018dac <timer_deinit+0x80>
 8018d86:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018d8a:	4298      	cmp	r0, r3
 8018d8c:	d01c      	beq.n	8018dc8 <timer_deinit+0x9c>
 8018d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018d92:	4298      	cmp	r0, r3
 8018d94:	d045      	beq.n	8018e22 <timer_deinit+0xf6>
 8018d96:	f5a3 4364 	sub.w	r3, r3, #58368	; 0xe400
 8018d9a:	4298      	cmp	r0, r3
 8018d9c:	d1dc      	bne.n	8018d58 <timer_deinit+0x2c>
 8018d9e:	f640 0008 	movw	r0, #2056	; 0x808
 8018da2:	f7ff ff2e 	bl	8018c02 <rcu_periph_reset_enable>
 8018da6:	f640 0008 	movw	r0, #2056	; 0x808
 8018daa:	e013      	b.n	8018dd4 <timer_deinit+0xa8>
 8018dac:	4b31      	ldr	r3, [pc, #196]	; (8018e74 <timer_deinit+0x148>)
 8018dae:	4298      	cmp	r0, r3
 8018db0:	d045      	beq.n	8018e3e <timer_deinit+0x112>
 8018db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018db6:	4298      	cmp	r0, r3
 8018db8:	d1ce      	bne.n	8018d58 <timer_deinit+0x2c>
 8018dba:	f640 1012 	movw	r0, #2322	; 0x912
 8018dbe:	f7ff ff20 	bl	8018c02 <rcu_periph_reset_enable>
 8018dc2:	f640 1012 	movw	r0, #2322	; 0x912
 8018dc6:	e005      	b.n	8018dd4 <timer_deinit+0xa8>
 8018dc8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8018dcc:	f7ff ff19 	bl	8018c02 <rcu_periph_reset_enable>
 8018dd0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8018dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018dd8:	f7ff bf15 	b.w	8018c06 <rcu_periph_reset_disable>
 8018ddc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018de0:	f7ff ff0f 	bl	8018c02 <rcu_periph_reset_enable>
 8018de4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018de8:	e7f4      	b.n	8018dd4 <timer_deinit+0xa8>
 8018dea:	f640 0001 	movw	r0, #2049	; 0x801
 8018dee:	f7ff ff08 	bl	8018c02 <rcu_periph_reset_enable>
 8018df2:	f640 0001 	movw	r0, #2049	; 0x801
 8018df6:	e7ed      	b.n	8018dd4 <timer_deinit+0xa8>
 8018df8:	f640 0002 	movw	r0, #2050	; 0x802
 8018dfc:	f7ff ff01 	bl	8018c02 <rcu_periph_reset_enable>
 8018e00:	f640 0002 	movw	r0, #2050	; 0x802
 8018e04:	e7e6      	b.n	8018dd4 <timer_deinit+0xa8>
 8018e06:	f640 0003 	movw	r0, #2051	; 0x803
 8018e0a:	f7ff fefa 	bl	8018c02 <rcu_periph_reset_enable>
 8018e0e:	f640 0003 	movw	r0, #2051	; 0x803
 8018e12:	e7df      	b.n	8018dd4 <timer_deinit+0xa8>
 8018e14:	f640 0005 	movw	r0, #2053	; 0x805
 8018e18:	f7ff fef3 	bl	8018c02 <rcu_periph_reset_enable>
 8018e1c:	f640 0005 	movw	r0, #2053	; 0x805
 8018e20:	e7d8      	b.n	8018dd4 <timer_deinit+0xa8>
 8018e22:	f640 1001 	movw	r0, #2305	; 0x901
 8018e26:	f7ff feec 	bl	8018c02 <rcu_periph_reset_enable>
 8018e2a:	f640 1001 	movw	r0, #2305	; 0x901
 8018e2e:	e7d1      	b.n	8018dd4 <timer_deinit+0xa8>
 8018e30:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8018e34:	f7ff fee5 	bl	8018c02 <rcu_periph_reset_enable>
 8018e38:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8018e3c:	e7ca      	b.n	8018dd4 <timer_deinit+0xa8>
 8018e3e:	f640 1011 	movw	r0, #2321	; 0x911
 8018e42:	f7ff fede 	bl	8018c02 <rcu_periph_reset_enable>
 8018e46:	f640 1011 	movw	r0, #2321	; 0x911
 8018e4a:	e7c3      	b.n	8018dd4 <timer_deinit+0xa8>
 8018e4c:	f640 0006 	movw	r0, #2054	; 0x806
 8018e50:	f7ff fed7 	bl	8018c02 <rcu_periph_reset_enable>
 8018e54:	f640 0006 	movw	r0, #2054	; 0x806
 8018e58:	e7bc      	b.n	8018dd4 <timer_deinit+0xa8>
 8018e5a:	f640 0007 	movw	r0, #2055	; 0x807
 8018e5e:	f7ff fed0 	bl	8018c02 <rcu_periph_reset_enable>
 8018e62:	f640 0007 	movw	r0, #2055	; 0x807
 8018e66:	e7b5      	b.n	8018dd4 <timer_deinit+0xa8>
 8018e68:	40001c00 	andmi	r1, r0, r0, lsl #24
 8018e6c:	40001400 	andmi	r1, r0, r0, lsl #8
 8018e70:	40014000 	andmi	r4, r1, r0
 8018e74:	40014400 	andmi	r4, r1, r0, lsl #8

08018e78 <timer_init>:
 8018e78:	880b      	ldrh	r3, [r1, #0]
 8018e7a:	6283      	str	r3, [r0, #40]	; 0x28
 8018e7c:	4b1a      	ldr	r3, [pc, #104]	; (8018ee8 <timer_init+0x70>)
 8018e7e:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8018e82:	429a      	cmp	r2, r3
 8018e84:	d004      	beq.n	8018e90 <timer_init+0x18>
 8018e86:	f420 6340 	bic.w	r3, r0, #3072	; 0xc00
 8018e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018e8e:	d10b      	bne.n	8018ea8 <timer_init+0x30>
 8018e90:	6803      	ldr	r3, [r0, #0]
 8018e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018e96:	6003      	str	r3, [r0, #0]
 8018e98:	6802      	ldr	r2, [r0, #0]
 8018e9a:	884b      	ldrh	r3, [r1, #2]
 8018e9c:	4313      	orrs	r3, r2
 8018e9e:	6003      	str	r3, [r0, #0]
 8018ea0:	6802      	ldr	r2, [r0, #0]
 8018ea2:	888b      	ldrh	r3, [r1, #4]
 8018ea4:	4313      	orrs	r3, r2
 8018ea6:	6003      	str	r3, [r0, #0]
 8018ea8:	688b      	ldr	r3, [r1, #8]
 8018eaa:	62c3      	str	r3, [r0, #44]	; 0x2c
 8018eac:	4b0f      	ldr	r3, [pc, #60]	; (8018eec <timer_init+0x74>)
 8018eae:	4298      	cmp	r0, r3
 8018eb0:	d003      	beq.n	8018eba <timer_init+0x42>
 8018eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018eb6:	4298      	cmp	r0, r3
 8018eb8:	d104      	bne.n	8018ec4 <timer_init+0x4c>
 8018eba:	6943      	ldr	r3, [r0, #20]
 8018ebc:	f043 0301 	orr.w	r3, r3, #1
 8018ec0:	6143      	str	r3, [r0, #20]
 8018ec2:	4770      	bx	lr
 8018ec4:	6803      	ldr	r3, [r0, #0]
 8018ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018eca:	6003      	str	r3, [r0, #0]
 8018ecc:	6802      	ldr	r2, [r0, #0]
 8018ece:	88cb      	ldrh	r3, [r1, #6]
 8018ed0:	4313      	orrs	r3, r2
 8018ed2:	6003      	str	r3, [r0, #0]
 8018ed4:	4b04      	ldr	r3, [pc, #16]	; (8018ee8 <timer_init+0x70>)
 8018ed6:	4298      	cmp	r0, r3
 8018ed8:	d002      	beq.n	8018ee0 <timer_init+0x68>
 8018eda:	4b05      	ldr	r3, [pc, #20]	; (8018ef0 <timer_init+0x78>)
 8018edc:	4298      	cmp	r0, r3
 8018ede:	d1ec      	bne.n	8018eba <timer_init+0x42>
 8018ee0:	7b0b      	ldrb	r3, [r1, #12]
 8018ee2:	6303      	str	r3, [r0, #48]	; 0x30
 8018ee4:	e7e9      	b.n	8018eba <timer_init+0x42>
 8018ee6:	bf00      	nop
 8018ee8:	40010000 	andmi	r0, r1, r0
 8018eec:	40001000 	andmi	r1, r0, r0
 8018ef0:	40010400 	andmi	r0, r1, r0, lsl #8

08018ef4 <timer_enable>:
 8018ef4:	6803      	ldr	r3, [r0, #0]
 8018ef6:	f043 0301 	orr.w	r3, r3, #1
 8018efa:	6003      	str	r3, [r0, #0]
 8018efc:	4770      	bx	lr

08018efe <timer_interrupt_enable>:
 8018efe:	68c3      	ldr	r3, [r0, #12]
 8018f00:	4319      	orrs	r1, r3
 8018f02:	60c1      	str	r1, [r0, #12]
 8018f04:	4770      	bx	lr

08018f06 <timer_interrupt_flag_clear>:
 8018f06:	43c9      	mvns	r1, r1
 8018f08:	6101      	str	r1, [r0, #16]
 8018f0a:	4770      	bx	lr

08018f0c <timer_flag_clear>:
 8018f0c:	43c9      	mvns	r1, r1
 8018f0e:	6101      	str	r1, [r0, #16]
 8018f10:	4770      	bx	lr

08018f12 <timer_dma_enable>:
 8018f12:	68c3      	ldr	r3, [r0, #12]
 8018f14:	4319      	orrs	r1, r3
 8018f16:	60c1      	str	r1, [r0, #12]
 8018f18:	4770      	bx	lr
	...

08018f1c <timer_channel_output_config>:
 8018f1c:	2903      	cmp	r1, #3
 8018f1e:	d83e      	bhi.n	8018f9e <timer_channel_output_config+0x82>
 8018f20:	e8df f011 	tbh	[pc, r1, lsl #1]
 8018f24:	003e0004 	eorseq	r0, lr, r4
 8018f28:	00bc007d 	adcseq	r0, ip, sp, ror r0
 8018f2c:	6a03      	ldr	r3, [r0, #32]
 8018f2e:	f023 0301 	bic.w	r3, r3, #1
 8018f32:	6203      	str	r3, [r0, #32]
 8018f34:	6983      	ldr	r3, [r0, #24]
 8018f36:	f023 0303 	bic.w	r3, r3, #3
 8018f3a:	6183      	str	r3, [r0, #24]
 8018f3c:	6a01      	ldr	r1, [r0, #32]
 8018f3e:	8813      	ldrh	r3, [r2, #0]
 8018f40:	430b      	orrs	r3, r1
 8018f42:	6203      	str	r3, [r0, #32]
 8018f44:	6a03      	ldr	r3, [r0, #32]
 8018f46:	f023 0302 	bic.w	r3, r3, #2
 8018f4a:	6203      	str	r3, [r0, #32]
 8018f4c:	6a01      	ldr	r1, [r0, #32]
 8018f4e:	8893      	ldrh	r3, [r2, #4]
 8018f50:	430b      	orrs	r3, r1
 8018f52:	6203      	str	r3, [r0, #32]
 8018f54:	4b64      	ldr	r3, [pc, #400]	; (80190e8 <timer_channel_output_config+0x1cc>)
 8018f56:	f420 6180 	bic.w	r1, r0, #1024	; 0x400
 8018f5a:	4299      	cmp	r1, r3
 8018f5c:	d11f      	bne.n	8018f9e <timer_channel_output_config+0x82>
 8018f5e:	6a03      	ldr	r3, [r0, #32]
 8018f60:	f023 0304 	bic.w	r3, r3, #4
 8018f64:	6203      	str	r3, [r0, #32]
 8018f66:	6a01      	ldr	r1, [r0, #32]
 8018f68:	8853      	ldrh	r3, [r2, #2]
 8018f6a:	430b      	orrs	r3, r1
 8018f6c:	6203      	str	r3, [r0, #32]
 8018f6e:	6a03      	ldr	r3, [r0, #32]
 8018f70:	f023 0308 	bic.w	r3, r3, #8
 8018f74:	6203      	str	r3, [r0, #32]
 8018f76:	6a01      	ldr	r1, [r0, #32]
 8018f78:	88d3      	ldrh	r3, [r2, #6]
 8018f7a:	430b      	orrs	r3, r1
 8018f7c:	6203      	str	r3, [r0, #32]
 8018f7e:	6843      	ldr	r3, [r0, #4]
 8018f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018f84:	6043      	str	r3, [r0, #4]
 8018f86:	6841      	ldr	r1, [r0, #4]
 8018f88:	8913      	ldrh	r3, [r2, #8]
 8018f8a:	430b      	orrs	r3, r1
 8018f8c:	6043      	str	r3, [r0, #4]
 8018f8e:	6843      	ldr	r3, [r0, #4]
 8018f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8018f94:	6043      	str	r3, [r0, #4]
 8018f96:	6841      	ldr	r1, [r0, #4]
 8018f98:	8953      	ldrh	r3, [r2, #10]
 8018f9a:	430b      	orrs	r3, r1
 8018f9c:	6043      	str	r3, [r0, #4]
 8018f9e:	4770      	bx	lr
 8018fa0:	6a03      	ldr	r3, [r0, #32]
 8018fa2:	8811      	ldrh	r1, [r2, #0]
 8018fa4:	f023 0310 	bic.w	r3, r3, #16
 8018fa8:	6203      	str	r3, [r0, #32]
 8018faa:	6983      	ldr	r3, [r0, #24]
 8018fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018fb0:	6183      	str	r3, [r0, #24]
 8018fb2:	6a03      	ldr	r3, [r0, #32]
 8018fb4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8018fb8:	6203      	str	r3, [r0, #32]
 8018fba:	6a03      	ldr	r3, [r0, #32]
 8018fbc:	8891      	ldrh	r1, [r2, #4]
 8018fbe:	f023 0320 	bic.w	r3, r3, #32
 8018fc2:	6203      	str	r3, [r0, #32]
 8018fc4:	6a03      	ldr	r3, [r0, #32]
 8018fc6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8018fca:	6203      	str	r3, [r0, #32]
 8018fcc:	4b46      	ldr	r3, [pc, #280]	; (80190e8 <timer_channel_output_config+0x1cc>)
 8018fce:	f420 6180 	bic.w	r1, r0, #1024	; 0x400
 8018fd2:	4299      	cmp	r1, r3
 8018fd4:	d1e3      	bne.n	8018f9e <timer_channel_output_config+0x82>
 8018fd6:	6a03      	ldr	r3, [r0, #32]
 8018fd8:	8851      	ldrh	r1, [r2, #2]
 8018fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018fde:	6203      	str	r3, [r0, #32]
 8018fe0:	6a03      	ldr	r3, [r0, #32]
 8018fe2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8018fe6:	6203      	str	r3, [r0, #32]
 8018fe8:	6a03      	ldr	r3, [r0, #32]
 8018fea:	88d1      	ldrh	r1, [r2, #6]
 8018fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018ff0:	6203      	str	r3, [r0, #32]
 8018ff2:	6a03      	ldr	r3, [r0, #32]
 8018ff4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8018ff8:	6203      	str	r3, [r0, #32]
 8018ffa:	6843      	ldr	r3, [r0, #4]
 8018ffc:	8911      	ldrh	r1, [r2, #8]
 8018ffe:	8952      	ldrh	r2, [r2, #10]
 8019000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019004:	6043      	str	r3, [r0, #4]
 8019006:	6843      	ldr	r3, [r0, #4]
 8019008:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 801900c:	6043      	str	r3, [r0, #4]
 801900e:	6843      	ldr	r3, [r0, #4]
 8019010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019014:	6043      	str	r3, [r0, #4]
 8019016:	6843      	ldr	r3, [r0, #4]
 8019018:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 801901c:	e7be      	b.n	8018f9c <timer_channel_output_config+0x80>
 801901e:	6a03      	ldr	r3, [r0, #32]
 8019020:	8811      	ldrh	r1, [r2, #0]
 8019022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019026:	6203      	str	r3, [r0, #32]
 8019028:	69c3      	ldr	r3, [r0, #28]
 801902a:	f023 0303 	bic.w	r3, r3, #3
 801902e:	61c3      	str	r3, [r0, #28]
 8019030:	6a03      	ldr	r3, [r0, #32]
 8019032:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8019036:	6203      	str	r3, [r0, #32]
 8019038:	6a03      	ldr	r3, [r0, #32]
 801903a:	8891      	ldrh	r1, [r2, #4]
 801903c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019040:	6203      	str	r3, [r0, #32]
 8019042:	6a03      	ldr	r3, [r0, #32]
 8019044:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8019048:	6203      	str	r3, [r0, #32]
 801904a:	4b27      	ldr	r3, [pc, #156]	; (80190e8 <timer_channel_output_config+0x1cc>)
 801904c:	f420 6180 	bic.w	r1, r0, #1024	; 0x400
 8019050:	4299      	cmp	r1, r3
 8019052:	d1a4      	bne.n	8018f9e <timer_channel_output_config+0x82>
 8019054:	6a03      	ldr	r3, [r0, #32]
 8019056:	8851      	ldrh	r1, [r2, #2]
 8019058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801905c:	6203      	str	r3, [r0, #32]
 801905e:	6a03      	ldr	r3, [r0, #32]
 8019060:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8019064:	6203      	str	r3, [r0, #32]
 8019066:	6a03      	ldr	r3, [r0, #32]
 8019068:	88d1      	ldrh	r1, [r2, #6]
 801906a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801906e:	6203      	str	r3, [r0, #32]
 8019070:	6a03      	ldr	r3, [r0, #32]
 8019072:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8019076:	6203      	str	r3, [r0, #32]
 8019078:	6843      	ldr	r3, [r0, #4]
 801907a:	8911      	ldrh	r1, [r2, #8]
 801907c:	8952      	ldrh	r2, [r2, #10]
 801907e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019082:	6043      	str	r3, [r0, #4]
 8019084:	6843      	ldr	r3, [r0, #4]
 8019086:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801908a:	6043      	str	r3, [r0, #4]
 801908c:	6843      	ldr	r3, [r0, #4]
 801908e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8019092:	6043      	str	r3, [r0, #4]
 8019094:	6843      	ldr	r3, [r0, #4]
 8019096:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801909a:	e77f      	b.n	8018f9c <timer_channel_output_config+0x80>
 801909c:	6a03      	ldr	r3, [r0, #32]
 801909e:	8811      	ldrh	r1, [r2, #0]
 80190a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80190a4:	6203      	str	r3, [r0, #32]
 80190a6:	69c3      	ldr	r3, [r0, #28]
 80190a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80190ac:	61c3      	str	r3, [r0, #28]
 80190ae:	6a03      	ldr	r3, [r0, #32]
 80190b0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80190b4:	6203      	str	r3, [r0, #32]
 80190b6:	6a03      	ldr	r3, [r0, #32]
 80190b8:	8891      	ldrh	r1, [r2, #4]
 80190ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80190be:	6203      	str	r3, [r0, #32]
 80190c0:	6a03      	ldr	r3, [r0, #32]
 80190c2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80190c6:	6203      	str	r3, [r0, #32]
 80190c8:	4b07      	ldr	r3, [pc, #28]	; (80190e8 <timer_channel_output_config+0x1cc>)
 80190ca:	f420 6180 	bic.w	r1, r0, #1024	; 0x400
 80190ce:	4299      	cmp	r1, r3
 80190d0:	f47f af65 	bne.w	8018f9e <timer_channel_output_config+0x82>
 80190d4:	6843      	ldr	r3, [r0, #4]
 80190d6:	8912      	ldrh	r2, [r2, #8]
 80190d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80190dc:	6043      	str	r3, [r0, #4]
 80190de:	6843      	ldr	r3, [r0, #4]
 80190e0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80190e4:	e75a      	b.n	8018f9c <timer_channel_output_config+0x80>
 80190e6:	bf00      	nop
 80190e8:	40010000 	andmi	r0, r1, r0

080190ec <timer_channel_output_mode_config>:
 80190ec:	2903      	cmp	r1, #3
 80190ee:	d81a      	bhi.n	8019126 <timer_channel_output_mode_config+0x3a>
 80190f0:	e8df f001 	tbb	[pc, r1]
 80190f4:	1a120a02 	bne	849b904 <__exidx_end+0x47d8d8>
 80190f8:	6983      	ldr	r3, [r0, #24]
 80190fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80190fe:	6183      	str	r3, [r0, #24]
 8019100:	6983      	ldr	r3, [r0, #24]
 8019102:	4313      	orrs	r3, r2
 8019104:	6183      	str	r3, [r0, #24]
 8019106:	4770      	bx	lr
 8019108:	6983      	ldr	r3, [r0, #24]
 801910a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801910e:	6183      	str	r3, [r0, #24]
 8019110:	6983      	ldr	r3, [r0, #24]
 8019112:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8019116:	e7f5      	b.n	8019104 <timer_channel_output_mode_config+0x18>
 8019118:	69c3      	ldr	r3, [r0, #28]
 801911a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801911e:	61c3      	str	r3, [r0, #28]
 8019120:	69c3      	ldr	r3, [r0, #28]
 8019122:	4313      	orrs	r3, r2
 8019124:	61c3      	str	r3, [r0, #28]
 8019126:	4770      	bx	lr
 8019128:	69c3      	ldr	r3, [r0, #28]
 801912a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801912e:	61c3      	str	r3, [r0, #28]
 8019130:	69c3      	ldr	r3, [r0, #28]
 8019132:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8019136:	e7f5      	b.n	8019124 <timer_channel_output_mode_config+0x38>

08019138 <timer_channel_output_pulse_value_config>:
 8019138:	2903      	cmp	r1, #3
 801913a:	d80a      	bhi.n	8019152 <timer_channel_output_pulse_value_config+0x1a>
 801913c:	e8df f001 	tbb	[pc, r1]
 8019140:	08060402 	stmdaeq	r6, {r1, sl}
 8019144:	6342      	str	r2, [r0, #52]	; 0x34
 8019146:	4770      	bx	lr
 8019148:	6382      	str	r2, [r0, #56]	; 0x38
 801914a:	4770      	bx	lr
 801914c:	63c2      	str	r2, [r0, #60]	; 0x3c
 801914e:	4770      	bx	lr
 8019150:	6402      	str	r2, [r0, #64]	; 0x40
 8019152:	4770      	bx	lr

08019154 <timer_channel_output_shadow_config>:
 8019154:	2903      	cmp	r1, #3
 8019156:	d81a      	bhi.n	801918e <timer_channel_output_shadow_config+0x3a>
 8019158:	e8df f001 	tbb	[pc, r1]
 801915c:	1a120a02 	bne	849b96c <__exidx_end+0x47d940>
 8019160:	6983      	ldr	r3, [r0, #24]
 8019162:	f023 0308 	bic.w	r3, r3, #8
 8019166:	6183      	str	r3, [r0, #24]
 8019168:	6983      	ldr	r3, [r0, #24]
 801916a:	4313      	orrs	r3, r2
 801916c:	6183      	str	r3, [r0, #24]
 801916e:	4770      	bx	lr
 8019170:	6983      	ldr	r3, [r0, #24]
 8019172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019176:	6183      	str	r3, [r0, #24]
 8019178:	6983      	ldr	r3, [r0, #24]
 801917a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801917e:	e7f5      	b.n	801916c <timer_channel_output_shadow_config+0x18>
 8019180:	69c3      	ldr	r3, [r0, #28]
 8019182:	f023 0308 	bic.w	r3, r3, #8
 8019186:	61c3      	str	r3, [r0, #28]
 8019188:	69c3      	ldr	r3, [r0, #28]
 801918a:	4313      	orrs	r3, r2
 801918c:	61c3      	str	r3, [r0, #28]
 801918e:	4770      	bx	lr
 8019190:	69c3      	ldr	r3, [r0, #28]
 8019192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019196:	61c3      	str	r3, [r0, #28]
 8019198:	69c3      	ldr	r3, [r0, #28]
 801919a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801919e:	e7f5      	b.n	801918c <timer_channel_output_shadow_config+0x38>

080191a0 <timer_input_trigger_source_select>:
 80191a0:	6883      	ldr	r3, [r0, #8]
 80191a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80191a6:	6083      	str	r3, [r0, #8]
 80191a8:	6883      	ldr	r3, [r0, #8]
 80191aa:	4319      	orrs	r1, r3
 80191ac:	6081      	str	r1, [r0, #8]
 80191ae:	4770      	bx	lr

080191b0 <timer_master_output_trigger_source_select>:
 80191b0:	6843      	ldr	r3, [r0, #4]
 80191b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80191b6:	6043      	str	r3, [r0, #4]
 80191b8:	6843      	ldr	r3, [r0, #4]
 80191ba:	4319      	orrs	r1, r3
 80191bc:	6041      	str	r1, [r0, #4]
 80191be:	4770      	bx	lr

080191c0 <timer_slave_mode_select>:
 80191c0:	6883      	ldr	r3, [r0, #8]
 80191c2:	f023 0307 	bic.w	r3, r3, #7
 80191c6:	6083      	str	r3, [r0, #8]
 80191c8:	6883      	ldr	r3, [r0, #8]
 80191ca:	4319      	orrs	r1, r3
 80191cc:	6081      	str	r1, [r0, #8]
 80191ce:	4770      	bx	lr

080191d0 <timer_master_slave_mode_config>:
 80191d0:	b921      	cbnz	r1, 80191dc <timer_master_slave_mode_config+0xc>
 80191d2:	6883      	ldr	r3, [r0, #8]
 80191d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80191d8:	6083      	str	r3, [r0, #8]
 80191da:	4770      	bx	lr
 80191dc:	2901      	cmp	r1, #1
 80191de:	d1fc      	bne.n	80191da <timer_master_slave_mode_config+0xa>
 80191e0:	6883      	ldr	r3, [r0, #8]
 80191e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80191e6:	e7f7      	b.n	80191d8 <timer_master_slave_mode_config+0x8>

080191e8 <usart_deinit>:
 80191e8:	b508      	push	{r3, lr}
 80191ea:	4b2d      	ldr	r3, [pc, #180]	; (80192a0 <usart_deinit+0xb8>)
 80191ec:	4298      	cmp	r0, r3
 80191ee:	d050      	beq.n	8019292 <usart_deinit+0xaa>
 80191f0:	d817      	bhi.n	8019222 <usart_deinit+0x3a>
 80191f2:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 80191f6:	4298      	cmp	r0, r3
 80191f8:	d044      	beq.n	8019284 <usart_deinit+0x9c>
 80191fa:	d808      	bhi.n	801920e <usart_deinit+0x26>
 80191fc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8019200:	4298      	cmp	r0, r3
 8019202:	d02a      	beq.n	801925a <usart_deinit+0x72>
 8019204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8019208:	4298      	cmp	r0, r3
 801920a:	d02d      	beq.n	8019268 <usart_deinit+0x80>
 801920c:	bd08      	pop	{r3, pc}
 801920e:	4b25      	ldr	r3, [pc, #148]	; (80192a4 <usart_deinit+0xbc>)
 8019210:	4298      	cmp	r0, r3
 8019212:	d1fb      	bne.n	801920c <usart_deinit+0x24>
 8019214:	f640 0014 	movw	r0, #2068	; 0x814
 8019218:	f7ff fcf3 	bl	8018c02 <rcu_periph_reset_enable>
 801921c:	f640 0014 	movw	r0, #2068	; 0x814
 8019220:	e017      	b.n	8019252 <usart_deinit+0x6a>
 8019222:	4b21      	ldr	r3, [pc, #132]	; (80192a8 <usart_deinit+0xc0>)
 8019224:	4298      	cmp	r0, r3
 8019226:	d00e      	beq.n	8019246 <usart_deinit+0x5e>
 8019228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801922c:	4298      	cmp	r0, r3
 801922e:	d022      	beq.n	8019276 <usart_deinit+0x8e>
 8019230:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 8019234:	4298      	cmp	r0, r3
 8019236:	d1e9      	bne.n	801920c <usart_deinit+0x24>
 8019238:	f640 001f 	movw	r0, #2079	; 0x81f
 801923c:	f7ff fce1 	bl	8018c02 <rcu_periph_reset_enable>
 8019240:	f640 001f 	movw	r0, #2079	; 0x81f
 8019244:	e005      	b.n	8019252 <usart_deinit+0x6a>
 8019246:	f640 1004 	movw	r0, #2308	; 0x904
 801924a:	f7ff fcda 	bl	8018c02 <rcu_periph_reset_enable>
 801924e:	f640 1004 	movw	r0, #2308	; 0x904
 8019252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019256:	f7ff bcd6 	b.w	8018c06 <rcu_periph_reset_disable>
 801925a:	f640 0011 	movw	r0, #2065	; 0x811
 801925e:	f7ff fcd0 	bl	8018c02 <rcu_periph_reset_enable>
 8019262:	f640 0011 	movw	r0, #2065	; 0x811
 8019266:	e7f4      	b.n	8019252 <usart_deinit+0x6a>
 8019268:	f640 0012 	movw	r0, #2066	; 0x812
 801926c:	f7ff fcc9 	bl	8018c02 <rcu_periph_reset_enable>
 8019270:	f640 0012 	movw	r0, #2066	; 0x812
 8019274:	e7ed      	b.n	8019252 <usart_deinit+0x6a>
 8019276:	f640 1005 	movw	r0, #2309	; 0x905
 801927a:	f7ff fcc2 	bl	8018c02 <rcu_periph_reset_enable>
 801927e:	f640 1005 	movw	r0, #2309	; 0x905
 8019282:	e7e6      	b.n	8019252 <usart_deinit+0x6a>
 8019284:	f640 0013 	movw	r0, #2067	; 0x813
 8019288:	f7ff fcbb 	bl	8018c02 <rcu_periph_reset_enable>
 801928c:	f640 0013 	movw	r0, #2067	; 0x813
 8019290:	e7df      	b.n	8019252 <usart_deinit+0x6a>
 8019292:	f640 001e 	movw	r0, #2078	; 0x81e
 8019296:	f7ff fcb4 	bl	8018c02 <rcu_periph_reset_enable>
 801929a:	f640 001e 	movw	r0, #2078	; 0x81e
 801929e:	e7d8      	b.n	8019252 <usart_deinit+0x6a>
 80192a0:	40007800 	andmi	r7, r0, r0, lsl #16
 80192a4:	40005000 	andmi	r5, r0, r0
 80192a8:	40011000 	andmi	r1, r1, r0

080192ac <usart_baudrate_set>:
 80192ac:	b538      	push	{r3, r4, r5, lr}
 80192ae:	4b1e      	ldr	r3, [pc, #120]	; (8019328 <usart_baudrate_set+0x7c>)
 80192b0:	4298      	cmp	r0, r3
 80192b2:	4604      	mov	r4, r0
 80192b4:	460d      	mov	r5, r1
 80192b6:	d02e      	beq.n	8019316 <usart_baudrate_set+0x6a>
 80192b8:	d821      	bhi.n	80192fe <usart_baudrate_set+0x52>
 80192ba:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 80192be:	4298      	cmp	r0, r3
 80192c0:	d029      	beq.n	8019316 <usart_baudrate_set+0x6a>
 80192c2:	d81a      	bhi.n	80192fa <usart_baudrate_set+0x4e>
 80192c4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80192c8:	4298      	cmp	r0, r3
 80192ca:	d024      	beq.n	8019316 <usart_baudrate_set+0x6a>
 80192cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80192d0:	429c      	cmp	r4, r3
 80192d2:	d020      	beq.n	8019316 <usart_baudrate_set+0x6a>
 80192d4:	2000      	movs	r0, #0
 80192d6:	68e2      	ldr	r2, [r4, #12]
 80192d8:	0412      	lsls	r2, r2, #16
 80192da:	ea4f 0355 	mov.w	r3, r5, lsr #1
 80192de:	d51c      	bpl.n	801931a <usart_baudrate_set+0x6e>
 80192e0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80192e4:	fbb3 f1f5 	udiv	r1, r3, r5
 80192e8:	f3c1 0342 	ubfx	r3, r1, #1, #3
 80192ec:	f021 010f 	bic.w	r1, r1, #15
 80192f0:	0409      	lsls	r1, r1, #16
 80192f2:	0c09      	lsrs	r1, r1, #16
 80192f4:	430b      	orrs	r3, r1
 80192f6:	60a3      	str	r3, [r4, #8]
 80192f8:	bd38      	pop	{r3, r4, r5, pc}
 80192fa:	4b0c      	ldr	r3, [pc, #48]	; (801932c <usart_baudrate_set+0x80>)
 80192fc:	e7e8      	b.n	80192d0 <usart_baudrate_set+0x24>
 80192fe:	4b0c      	ldr	r3, [pc, #48]	; (8019330 <usart_baudrate_set+0x84>)
 8019300:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8019304:	429a      	cmp	r2, r3
 8019306:	d002      	beq.n	801930e <usart_baudrate_set+0x62>
 8019308:	f5a3 4314 	sub.w	r3, r3, #37888	; 0x9400
 801930c:	e7e0      	b.n	80192d0 <usart_baudrate_set+0x24>
 801930e:	2003      	movs	r0, #3
 8019310:	f7ff fc98 	bl	8018c44 <rcu_clock_freq_get>
 8019314:	e7df      	b.n	80192d6 <usart_baudrate_set+0x2a>
 8019316:	2002      	movs	r0, #2
 8019318:	e7fa      	b.n	8019310 <usart_baudrate_set+0x64>
 801931a:	4403      	add	r3, r0
 801931c:	fbb3 f1f5 	udiv	r1, r3, r5
 8019320:	b289      	uxth	r1, r1
 8019322:	60a1      	str	r1, [r4, #8]
 8019324:	e7e8      	b.n	80192f8 <usart_baudrate_set+0x4c>
 8019326:	bf00      	nop
 8019328:	40007800 	andmi	r7, r0, r0, lsl #16
 801932c:	40005000 	andmi	r5, r0, r0
 8019330:	40011000 	andmi	r1, r1, r0

08019334 <usart_parity_config>:
 8019334:	68c3      	ldr	r3, [r0, #12]
 8019336:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801933a:	60c3      	str	r3, [r0, #12]
 801933c:	68c3      	ldr	r3, [r0, #12]
 801933e:	4319      	orrs	r1, r3
 8019340:	60c1      	str	r1, [r0, #12]
 8019342:	4770      	bx	lr

08019344 <usart_word_length_set>:
 8019344:	68c3      	ldr	r3, [r0, #12]
 8019346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801934a:	60c3      	str	r3, [r0, #12]
 801934c:	68c3      	ldr	r3, [r0, #12]
 801934e:	4319      	orrs	r1, r3
 8019350:	60c1      	str	r1, [r0, #12]
 8019352:	4770      	bx	lr

08019354 <usart_stop_bit_set>:
 8019354:	6903      	ldr	r3, [r0, #16]
 8019356:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801935a:	6103      	str	r3, [r0, #16]
 801935c:	6903      	ldr	r3, [r0, #16]
 801935e:	4319      	orrs	r1, r3
 8019360:	6101      	str	r1, [r0, #16]
 8019362:	4770      	bx	lr

08019364 <usart_transmit_config>:
 8019364:	68c3      	ldr	r3, [r0, #12]
 8019366:	f023 0308 	bic.w	r3, r3, #8
 801936a:	4319      	orrs	r1, r3
 801936c:	60c1      	str	r1, [r0, #12]
 801936e:	4770      	bx	lr

08019370 <usart_receive_config>:
 8019370:	68c3      	ldr	r3, [r0, #12]
 8019372:	f023 0304 	bic.w	r3, r3, #4
 8019376:	4319      	orrs	r1, r3
 8019378:	60c1      	str	r1, [r0, #12]
 801937a:	4770      	bx	lr

0801937c <usart_hardware_flow_rts_config>:
 801937c:	6943      	ldr	r3, [r0, #20]
 801937e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019382:	4319      	orrs	r1, r3
 8019384:	6141      	str	r1, [r0, #20]
 8019386:	4770      	bx	lr

08019388 <usart_hardware_flow_cts_config>:
 8019388:	6943      	ldr	r3, [r0, #20]
 801938a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801938e:	4319      	orrs	r1, r3
 8019390:	6141      	str	r1, [r0, #20]
 8019392:	4770      	bx	lr

08019394 <usart_dma_transmit_config>:
 8019394:	6943      	ldr	r3, [r0, #20]
 8019396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801939a:	4319      	orrs	r1, r3
 801939c:	6141      	str	r1, [r0, #20]
 801939e:	4770      	bx	lr

080193a0 <usart_flag_get>:
 80193a0:	098b      	lsrs	r3, r1, #6
 80193a2:	f001 011f 	and.w	r1, r1, #31
 80193a6:	581a      	ldr	r2, [r3, r0]
 80193a8:	2301      	movs	r3, #1
 80193aa:	408b      	lsls	r3, r1
 80193ac:	4213      	tst	r3, r2
 80193ae:	bf14      	ite	ne
 80193b0:	2001      	movne	r0, #1
 80193b2:	2000      	moveq	r0, #0
 80193b4:	4770      	bx	lr

080193b6 <usart_flag_clear>:
 80193b6:	b510      	push	{r4, lr}
 80193b8:	098c      	lsrs	r4, r1, #6
 80193ba:	2201      	movs	r2, #1
 80193bc:	5823      	ldr	r3, [r4, r0]
 80193be:	f001 011f 	and.w	r1, r1, #31
 80193c2:	408a      	lsls	r2, r1
 80193c4:	ea23 0302 	bic.w	r3, r3, r2
 80193c8:	5023      	str	r3, [r4, r0]
 80193ca:	bd10      	pop	{r4, pc}

080193cc <usart_interrupt_enable>:
 80193cc:	098a      	lsrs	r2, r1, #6
 80193ce:	b510      	push	{r4, lr}
 80193d0:	f001 011f 	and.w	r1, r1, #31
 80193d4:	5814      	ldr	r4, [r2, r0]
 80193d6:	2301      	movs	r3, #1
 80193d8:	408b      	lsls	r3, r1
 80193da:	4323      	orrs	r3, r4
 80193dc:	5013      	str	r3, [r2, r0]
 80193de:	bd10      	pop	{r4, pc}

080193e0 <usart_interrupt_disable>:
 80193e0:	f7ff bfe9 	b.w	80193b6 <usart_flag_clear>

080193e4 <usart_interrupt_flag_clear>:
 80193e4:	b510      	push	{r4, lr}
 80193e6:	0d8c      	lsrs	r4, r1, #22
 80193e8:	2201      	movs	r2, #1
 80193ea:	5823      	ldr	r3, [r4, r0]
 80193ec:	f3c1 4104 	ubfx	r1, r1, #16, #5
 80193f0:	408a      	lsls	r2, r1
 80193f2:	ea23 0302 	bic.w	r3, r3, r2
 80193f6:	5023      	str	r3, [r4, r0]
 80193f8:	bd10      	pop	{r4, pc}
	...

080193fc <emac_eth_recv>:
 80193fc:	b538      	push	{r3, r4, r5, lr}
 80193fe:	4605      	mov	r5, r0
 8019400:	f001 f9c4 	bl	801a78c <enet_rxframe_size_get>
 8019404:	4604      	mov	r4, r0
 8019406:	b138      	cbz	r0, 8019418 <emac_eth_recv+0x1c>
 8019408:	4b05      	ldr	r3, [pc, #20]	; (8019420 <emac_eth_recv+0x24>)
 801940a:	2105      	movs	r1, #5
 801940c:	6818      	ldr	r0, [r3, #0]
 801940e:	f001 f961 	bl	801a6d4 <enet_desc_information_get>
 8019412:	6028      	str	r0, [r5, #0]
 8019414:	4620      	mov	r0, r4
 8019416:	bd38      	pop	{r3, r4, r5, pc}
 8019418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801941c:	e7fb      	b.n	8019416 <emac_eth_recv+0x1a>
 801941e:	bf00      	nop
 8019420:	2000fdec 	andcs	pc, r0, ip, ror #27

08019424 <emac_free_pkt>:
 8019424:	2100      	movs	r1, #0
 8019426:	4608      	mov	r0, r1
 8019428:	f000 be70 	b.w	801a10c <enet_frame_receive>

0801942c <emac_eth_send>:
 801942c:	f000 beba 	b.w	801a1a4 <enet_frame_transmit>

08019430 <bkp_data_write(bkp_data_register_enum, unsigned short)>:
 8019430:	2801      	cmp	r0, #1
 8019432:	bf9c      	itt	ls
 8019434:	4b01      	ldrls	r3, [pc, #4]	; (801943c <bkp_data_write(bkp_data_register_enum, unsigned short)+0xc>)
 8019436:	f823 1010 	strhls.w	r1, [r3, r0, lsl #1]
 801943a:	4770      	bx	lr
 801943c:	40024010 	andmi	r4, r2, r0, lsl r0

08019440 <bkp_data_read(bkp_data_register_enum)>:
 8019440:	2801      	cmp	r0, #1
 8019442:	bf9d      	ittte	ls
 8019444:	4b02      	ldrls	r3, [pc, #8]	; (8019450 <bkp_data_read(bkp_data_register_enum)+0x10>)
 8019446:	f833 0010 	ldrhls.w	r0, [r3, r0, lsl #1]
 801944a:	b280      	uxthls	r0, r0
 801944c:	2000      	movhi	r0, #0
 801944e:	4770      	bx	lr
 8019450:	40024010 	andmi	r4, r2, r0, lsl r0

08019454 <gd32_adc_init()>:
 8019454:	b510      	push	{r4, lr}
 8019456:	f241 1008 	movw	r0, #4360	; 0x1108
 801945a:	4c24      	ldr	r4, [pc, #144]	; (80194ec <gd32_adc_init()+0x98>)
 801945c:	f7ff fbb6 	bl	8018bcc <rcu_periph_clock_enable>
 8019460:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8019464:	f000 fcf8 	bl	8019e58 <adc_clock_config>
 8019468:	4620      	mov	r0, r4
 801946a:	2203      	movs	r2, #3
 801946c:	2102      	movs	r1, #2
 801946e:	f000 fd75 	bl	8019f5c <adc_channel_length_config>
 8019472:	4620      	mov	r0, r4
 8019474:	2306      	movs	r3, #6
 8019476:	2210      	movs	r2, #16
 8019478:	2100      	movs	r1, #0
 801947a:	f000 fd8c 	bl	8019f96 <adc_inserted_channel_config>
 801947e:	4620      	mov	r0, r4
 8019480:	2306      	movs	r3, #6
 8019482:	2211      	movs	r2, #17
 8019484:	2101      	movs	r1, #1
 8019486:	f000 fd86 	bl	8019f96 <adc_inserted_channel_config>
 801948a:	2306      	movs	r3, #6
 801948c:	4620      	mov	r0, r4
 801948e:	2212      	movs	r2, #18
 8019490:	2102      	movs	r1, #2
 8019492:	f000 fd80 	bl	8019f96 <adc_inserted_channel_config>
 8019496:	2200      	movs	r2, #0
 8019498:	4620      	mov	r0, r4
 801949a:	2102      	movs	r1, #2
 801949c:	f000 fdaa 	bl	8019ff4 <adc_external_trigger_config>
 80194a0:	4620      	mov	r0, r4
 80194a2:	2100      	movs	r1, #0
 80194a4:	f000 fd10 	bl	8019ec8 <adc_data_alignment_config>
 80194a8:	2201      	movs	r2, #1
 80194aa:	4620      	mov	r0, r4
 80194ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80194b0:	f000 fce2 	bl	8019e78 <adc_special_function_config>
 80194b4:	2101      	movs	r1, #1
 80194b6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80194ba:	f000 fd27 	bl	8019f0c <adc_channel_16_to_18>
 80194be:	2101      	movs	r1, #1
 80194c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80194c4:	f000 fd22 	bl	8019f0c <adc_channel_16_to_18>
 80194c8:	4620      	mov	r0, r4
 80194ca:	f000 fd06 	bl	8019eda <adc_enable>
 80194ce:	2100      	movs	r1, #0
 80194d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80194d4:	f000 fb80 	bl	8019bd8 <udelay(unsigned int, unsigned int)>
 80194d8:	4620      	mov	r0, r4
 80194da:	f000 fd06 	bl	8019eea <adc_calibration_enable>
 80194de:	4620      	mov	r0, r4
 80194e0:	2102      	movs	r1, #2
 80194e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194e6:	f000 bd9b 	b.w	801a020 <adc_software_trigger_enable>
 80194ea:	bf00      	nop
 80194ec:	40012000 	andmi	r2, r1, r0

080194f0 <_stop() [clone .isra.0]>:
 80194f0:	b508      	push	{r3, lr}
 80194f2:	4806      	ldr	r0, [pc, #24]	; (801950c <_stop() [clone .isra.0]+0x1c>)
 80194f4:	f001 fa12 	bl	801a91c <i2c_stop_on_bus>
 80194f8:	4905      	ldr	r1, [pc, #20]	; (8019510 <_stop() [clone .isra.0]+0x20>)
 80194fa:	f640 73ff 	movw	r3, #4095	; 0xfff
 80194fe:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8019502:	0592      	lsls	r2, r2, #22
 8019504:	d501      	bpl.n	801950a <_stop() [clone .isra.0]+0x1a>
 8019506:	3b01      	subs	r3, #1
 8019508:	d1f9      	bne.n	80194fe <_stop() [clone .isra.0]+0xe>
 801950a:	bd08      	pop	{r3, pc}
 801950c:	40005400 	andmi	r5, r0, r0, lsl #8
 8019510:	40005000 	andmi	r5, r0, r0

08019514 <gd32_i2c_begin>:
 8019514:	b508      	push	{r3, lr}
 8019516:	f241 0015 	movw	r0, #4117	; 0x1015
 801951a:	f7ff fb57 	bl	8018bcc <rcu_periph_clock_enable>
 801951e:	f640 4001 	movw	r0, #3073	; 0xc01
 8019522:	f7ff fb53 	bl	8018bcc <rcu_periph_clock_enable>
 8019526:	f640 4001 	movw	r0, #3073	; 0xc01
 801952a:	f7ff fb4f 	bl	8018bcc <rcu_periph_clock_enable>
 801952e:	481b      	ldr	r0, [pc, #108]	; (801959c <gd32_i2c_begin+0x88>)
 8019530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019534:	2104      	movs	r1, #4
 8019536:	f7ff fb08 	bl	8018b4a <gpio_af_set>
 801953a:	4818      	ldr	r0, [pc, #96]	; (801959c <gd32_i2c_begin+0x88>)
 801953c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019540:	2104      	movs	r1, #4
 8019542:	f7ff fb02 	bl	8018b4a <gpio_af_set>
 8019546:	4815      	ldr	r0, [pc, #84]	; (801959c <gd32_i2c_begin+0x88>)
 8019548:	f44f 7380 	mov.w	r3, #256	; 0x100
 801954c:	2201      	movs	r2, #1
 801954e:	2102      	movs	r1, #2
 8019550:	f7ff fac0 	bl	8018ad4 <gpio_mode_set>
 8019554:	4811      	ldr	r0, [pc, #68]	; (801959c <gd32_i2c_begin+0x88>)
 8019556:	f44f 7380 	mov.w	r3, #256	; 0x100
 801955a:	2202      	movs	r2, #2
 801955c:	2101      	movs	r1, #1
 801955e:	f7ff fad9 	bl	8018b14 <gpio_output_options_set>
 8019562:	480e      	ldr	r0, [pc, #56]	; (801959c <gd32_i2c_begin+0x88>)
 8019564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019568:	2201      	movs	r2, #1
 801956a:	2102      	movs	r1, #2
 801956c:	f7ff fab2 	bl	8018ad4 <gpio_mode_set>
 8019570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019574:	4809      	ldr	r0, [pc, #36]	; (801959c <gd32_i2c_begin+0x88>)
 8019576:	2202      	movs	r2, #2
 8019578:	2101      	movs	r1, #1
 801957a:	f7ff facb 	bl	8018b14 <gpio_output_options_set>
 801957e:	4908      	ldr	r1, [pc, #32]	; (80195a0 <gd32_i2c_begin+0x8c>)
 8019580:	4808      	ldr	r0, [pc, #32]	; (80195a4 <gd32_i2c_begin+0x90>)
 8019582:	2200      	movs	r2, #0
 8019584:	f001 f94a 	bl	801a81c <i2c_clock_config>
 8019588:	4806      	ldr	r0, [pc, #24]	; (80195a4 <gd32_i2c_begin+0x90>)
 801958a:	f001 f9bd 	bl	801a908 <i2c_enable>
 801958e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019592:	4804      	ldr	r0, [pc, #16]	; (80195a4 <gd32_i2c_begin+0x90>)
 8019594:	2101      	movs	r1, #1
 8019596:	f001 b99d 	b.w	801a8d4 <i2c_ack_config>
 801959a:	bf00      	nop
 801959c:	40020400 	andmi	r0, r2, r0, lsl #8
 80195a0:	00061a80 	andeq	r1, r6, r0, lsl #21
 80195a4:	40005400 	andmi	r5, r0, r0, lsl #8

080195a8 <gd32_i2c_set_baudrate>:
 80195a8:	4601      	mov	r1, r0
 80195aa:	2200      	movs	r2, #0
 80195ac:	4801      	ldr	r0, [pc, #4]	; (80195b4 <gd32_i2c_set_baudrate+0xc>)
 80195ae:	f001 b935 	b.w	801a81c <i2c_clock_config>
 80195b2:	bf00      	nop
 80195b4:	40005400 	andmi	r5, r0, r0, lsl #8

080195b8 <gd32_i2c_set_address>:
 80195b8:	4b01      	ldr	r3, [pc, #4]	; (80195c0 <gd32_i2c_set_address+0x8>)
 80195ba:	0040      	lsls	r0, r0, #1
 80195bc:	7018      	strb	r0, [r3, #0]
 80195be:	4770      	bx	lr
 80195c0:	2000fde0 	andcs	pc, r0, r0, ror #27

080195c4 <gd32_i2c_write>:
 80195c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195c6:	4e30      	ldr	r6, [pc, #192]	; (8019688 <gd32_i2c_write+0xc4>)
 80195c8:	4604      	mov	r4, r0
 80195ca:	460f      	mov	r7, r1
 80195cc:	f640 75ff 	movw	r5, #4095	; 0xfff
 80195d0:	f240 6101 	movw	r1, #1537	; 0x601
 80195d4:	4630      	mov	r0, r6
 80195d6:	f001 f9ab 	bl	801a930 <i2c_flag_get>
 80195da:	b9b0      	cbnz	r0, 801960a <gd32_i2c_write+0x46>
 80195dc:	482a      	ldr	r0, [pc, #168]	; (8019688 <gd32_i2c_write+0xc4>)
 80195de:	4e2a      	ldr	r6, [pc, #168]	; (8019688 <gd32_i2c_write+0xc4>)
 80195e0:	f001 f997 	bl	801a912 <i2c_start_on_bus>
 80195e4:	f640 75ff 	movw	r5, #4095	; 0xfff
 80195e8:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80195ec:	4630      	mov	r0, r6
 80195ee:	f001 f99f 	bl	801a930 <i2c_flag_get>
 80195f2:	b190      	cbz	r0, 801961a <gd32_i2c_write+0x56>
 80195f4:	4b25      	ldr	r3, [pc, #148]	; (801968c <gd32_i2c_write+0xc8>)
 80195f6:	4824      	ldr	r0, [pc, #144]	; (8019688 <gd32_i2c_write+0xc4>)
 80195f8:	7819      	ldrb	r1, [r3, #0]
 80195fa:	4e23      	ldr	r6, [pc, #140]	; (8019688 <gd32_i2c_write+0xc4>)
 80195fc:	f06f 0201 	mvn.w	r2, #1
 8019600:	f001 f97a 	bl	801a8f8 <i2c_master_addressing>
 8019604:	f640 75ff 	movw	r5, #4095	; 0xfff
 8019608:	e00c      	b.n	8019624 <gd32_i2c_write+0x60>
 801960a:	3d01      	subs	r5, #1
 801960c:	d1e0      	bne.n	80195d0 <gd32_i2c_write+0xc>
 801960e:	f7ff ff6f 	bl	80194f0 <_stop() [clone .isra.0]>
 8019612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019616:	4240      	negs	r0, r0
 8019618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801961a:	3d01      	subs	r5, #1
 801961c:	d1e4      	bne.n	80195e8 <gd32_i2c_write+0x24>
 801961e:	e7f6      	b.n	801960e <gd32_i2c_write+0x4a>
 8019620:	3d01      	subs	r5, #1
 8019622:	d0f4      	beq.n	801960e <gd32_i2c_write+0x4a>
 8019624:	f240 5101 	movw	r1, #1281	; 0x501
 8019628:	4630      	mov	r0, r6
 801962a:	f001 f981 	bl	801a930 <i2c_flag_get>
 801962e:	2800      	cmp	r0, #0
 8019630:	d0f6      	beq.n	8019620 <gd32_i2c_write+0x5c>
 8019632:	4815      	ldr	r0, [pc, #84]	; (8019688 <gd32_i2c_write+0xc4>)
 8019634:	4e14      	ldr	r6, [pc, #80]	; (8019688 <gd32_i2c_write+0xc4>)
 8019636:	f240 5101 	movw	r1, #1281	; 0x501
 801963a:	f001 f984 	bl	801a946 <i2c_flag_clear>
 801963e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8019642:	f240 5107 	movw	r1, #1287	; 0x507
 8019646:	4630      	mov	r0, r6
 8019648:	f001 f972 	bl	801a930 <i2c_flag_get>
 801964c:	2801      	cmp	r0, #1
 801964e:	d107      	bne.n	8019660 <gd32_i2c_write+0x9c>
 8019650:	4e0d      	ldr	r6, [pc, #52]	; (8019688 <gd32_i2c_write+0xc4>)
 8019652:	4427      	add	r7, r4
 8019654:	42a7      	cmp	r7, r4
 8019656:	d106      	bne.n	8019666 <gd32_i2c_write+0xa2>
 8019658:	f7ff ff4a 	bl	80194f0 <_stop() [clone .isra.0]>
 801965c:	2000      	movs	r0, #0
 801965e:	e7da      	b.n	8019616 <gd32_i2c_write+0x52>
 8019660:	3d01      	subs	r5, #1
 8019662:	d1ee      	bne.n	8019642 <gd32_i2c_write+0x7e>
 8019664:	e7d3      	b.n	801960e <gd32_i2c_write+0x4a>
 8019666:	f814 1b01 	ldrb.w	r1, [r4], #1
 801966a:	4630      	mov	r0, r6
 801966c:	f001 f95b 	bl	801a926 <i2c_data_transmit>
 8019670:	f640 75ff 	movw	r5, #4095	; 0xfff
 8019674:	f240 5102 	movw	r1, #1282	; 0x502
 8019678:	4630      	mov	r0, r6
 801967a:	f001 f959 	bl	801a930 <i2c_flag_get>
 801967e:	2800      	cmp	r0, #0
 8019680:	d1e8      	bne.n	8019654 <gd32_i2c_write+0x90>
 8019682:	3d01      	subs	r5, #1
 8019684:	d1f6      	bne.n	8019674 <gd32_i2c_write+0xb0>
 8019686:	e7c2      	b.n	801960e <gd32_i2c_write+0x4a>
 8019688:	40005400 	andmi	r5, r0, r0, lsl #8
 801968c:	2000fde0 	andcs	pc, r0, r0, ror #27

08019690 <gd32_i2c_read>:
 8019690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019694:	4f4d      	ldr	r7, [pc, #308]	; (80197cc <gd32_i2c_read+0x13c>)
 8019696:	4680      	mov	r8, r0
 8019698:	460c      	mov	r4, r1
 801969a:	f640 76ff 	movw	r6, #4095	; 0xfff
 801969e:	f240 6101 	movw	r1, #1537	; 0x601
 80196a2:	4638      	mov	r0, r7
 80196a4:	f001 f944 	bl	801a930 <i2c_flag_get>
 80196a8:	4605      	mov	r5, r0
 80196aa:	bb08      	cbnz	r0, 80196f0 <gd32_i2c_read+0x60>
 80196ac:	2c02      	cmp	r4, #2
 80196ae:	d103      	bne.n	80196b8 <gd32_i2c_read+0x28>
 80196b0:	4601      	mov	r1, r0
 80196b2:	4846      	ldr	r0, [pc, #280]	; (80197cc <gd32_i2c_read+0x13c>)
 80196b4:	f001 f917 	bl	801a8e6 <i2c_ackpos_config>
 80196b8:	4844      	ldr	r0, [pc, #272]	; (80197cc <gd32_i2c_read+0x13c>)
 80196ba:	4f44      	ldr	r7, [pc, #272]	; (80197cc <gd32_i2c_read+0x13c>)
 80196bc:	f001 f929 	bl	801a912 <i2c_start_on_bus>
 80196c0:	f640 76ff 	movw	r6, #4095	; 0xfff
 80196c4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80196c8:	4638      	mov	r0, r7
 80196ca:	f001 f931 	bl	801a930 <i2c_flag_get>
 80196ce:	b1a8      	cbz	r0, 80196fc <gd32_i2c_read+0x6c>
 80196d0:	4b3f      	ldr	r3, [pc, #252]	; (80197d0 <gd32_i2c_read+0x140>)
 80196d2:	483e      	ldr	r0, [pc, #248]	; (80197cc <gd32_i2c_read+0x13c>)
 80196d4:	7819      	ldrb	r1, [r3, #0]
 80196d6:	2201      	movs	r2, #1
 80196d8:	f001 f90e 	bl	801a8f8 <i2c_master_addressing>
 80196dc:	2c02      	cmp	r4, #2
 80196de:	d803      	bhi.n	80196e8 <gd32_i2c_read+0x58>
 80196e0:	483a      	ldr	r0, [pc, #232]	; (80197cc <gd32_i2c_read+0x13c>)
 80196e2:	2100      	movs	r1, #0
 80196e4:	f001 f8f6 	bl	801a8d4 <i2c_ack_config>
 80196e8:	4f38      	ldr	r7, [pc, #224]	; (80197cc <gd32_i2c_read+0x13c>)
 80196ea:	f640 76ff 	movw	r6, #4095	; 0xfff
 80196ee:	e00a      	b.n	8019706 <gd32_i2c_read+0x76>
 80196f0:	3e01      	subs	r6, #1
 80196f2:	d1d4      	bne.n	801969e <gd32_i2c_read+0xe>
 80196f4:	f7ff fefc 	bl	80194f0 <_stop() [clone .isra.0]>
 80196f8:	2504      	movs	r5, #4
 80196fa:	e04d      	b.n	8019798 <gd32_i2c_read+0x108>
 80196fc:	3e01      	subs	r6, #1
 80196fe:	d1e1      	bne.n	80196c4 <gd32_i2c_read+0x34>
 8019700:	e7f8      	b.n	80196f4 <gd32_i2c_read+0x64>
 8019702:	3e01      	subs	r6, #1
 8019704:	d0f6      	beq.n	80196f4 <gd32_i2c_read+0x64>
 8019706:	f240 5101 	movw	r1, #1281	; 0x501
 801970a:	4638      	mov	r0, r7
 801970c:	f001 f910 	bl	801a930 <i2c_flag_get>
 8019710:	2800      	cmp	r0, #0
 8019712:	d0f6      	beq.n	8019702 <gd32_i2c_read+0x72>
 8019714:	482d      	ldr	r0, [pc, #180]	; (80197cc <gd32_i2c_read+0x13c>)
 8019716:	f240 5101 	movw	r1, #1281	; 0x501
 801971a:	f001 f914 	bl	801a946 <i2c_flag_clear>
 801971e:	2c01      	cmp	r4, #1
 8019720:	d102      	bne.n	8019728 <gd32_i2c_read+0x98>
 8019722:	482a      	ldr	r0, [pc, #168]	; (80197cc <gd32_i2c_read+0x13c>)
 8019724:	f001 f8fa 	bl	801a91c <i2c_stop_on_bus>
 8019728:	4e28      	ldr	r6, [pc, #160]	; (80197cc <gd32_i2c_read+0x13c>)
 801972a:	f640 77ff 	movw	r7, #4095	; 0xfff
 801972e:	e022      	b.n	8019776 <gd32_i2c_read+0xe6>
 8019730:	2c03      	cmp	r4, #3
 8019732:	d134      	bne.n	801979e <gd32_i2c_read+0x10e>
 8019734:	f640 79ff 	movw	r9, #4095	; 0xfff
 8019738:	e002      	b.n	8019740 <gd32_i2c_read+0xb0>
 801973a:	f1b9 0901 	subs.w	r9, r9, #1
 801973e:	d0d9      	beq.n	80196f4 <gd32_i2c_read+0x64>
 8019740:	f240 5102 	movw	r1, #1282	; 0x502
 8019744:	4630      	mov	r0, r6
 8019746:	f001 f8f3 	bl	801a930 <i2c_flag_get>
 801974a:	2800      	cmp	r0, #0
 801974c:	d0f5      	beq.n	801973a <gd32_i2c_read+0xaa>
 801974e:	2100      	movs	r1, #0
 8019750:	4630      	mov	r0, r6
 8019752:	f001 f8bf 	bl	801a8d4 <i2c_ack_config>
 8019756:	f240 5106 	movw	r1, #1286	; 0x506
 801975a:	4630      	mov	r0, r6
 801975c:	f001 f8e8 	bl	801a930 <i2c_flag_get>
 8019760:	b138      	cbz	r0, 8019772 <gd32_i2c_read+0xe2>
 8019762:	4630      	mov	r0, r6
 8019764:	f001 f8e1 	bl	801a92a <i2c_data_receive>
 8019768:	f808 0b01 	strb.w	r0, [r8], #1
 801976c:	3c01      	subs	r4, #1
 801976e:	f640 77ff 	movw	r7, #4095	; 0xfff
 8019772:	3f01      	subs	r7, #1
 8019774:	d0be      	beq.n	80196f4 <gd32_i2c_read+0x64>
 8019776:	2c00      	cmp	r4, #0
 8019778:	d1da      	bne.n	8019730 <gd32_i2c_read+0xa0>
 801977a:	4916      	ldr	r1, [pc, #88]	; (80197d4 <gd32_i2c_read+0x144>)
 801977c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8019780:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8019784:	0592      	lsls	r2, r2, #22
 8019786:	d41d      	bmi.n	80197c4 <gd32_i2c_read+0x134>
 8019788:	4810      	ldr	r0, [pc, #64]	; (80197cc <gd32_i2c_read+0x13c>)
 801978a:	2101      	movs	r1, #1
 801978c:	f001 f8a2 	bl	801a8d4 <i2c_ack_config>
 8019790:	480e      	ldr	r0, [pc, #56]	; (80197cc <gd32_i2c_read+0x13c>)
 8019792:	2101      	movs	r1, #1
 8019794:	f001 f8a7 	bl	801a8e6 <i2c_ackpos_config>
 8019798:	4628      	mov	r0, r5
 801979a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801979e:	2c02      	cmp	r4, #2
 80197a0:	d1d9      	bne.n	8019756 <gd32_i2c_read+0xc6>
 80197a2:	f640 79ff 	movw	r9, #4095	; 0xfff
 80197a6:	e002      	b.n	80197ae <gd32_i2c_read+0x11e>
 80197a8:	f1b9 0901 	subs.w	r9, r9, #1
 80197ac:	d0a2      	beq.n	80196f4 <gd32_i2c_read+0x64>
 80197ae:	f240 5102 	movw	r1, #1282	; 0x502
 80197b2:	4630      	mov	r0, r6
 80197b4:	f001 f8bc 	bl	801a930 <i2c_flag_get>
 80197b8:	2800      	cmp	r0, #0
 80197ba:	d0f5      	beq.n	80197a8 <gd32_i2c_read+0x118>
 80197bc:	4630      	mov	r0, r6
 80197be:	f001 f8ad 	bl	801a91c <i2c_stop_on_bus>
 80197c2:	e7c8      	b.n	8019756 <gd32_i2c_read+0xc6>
 80197c4:	3b01      	subs	r3, #1
 80197c6:	d1db      	bne.n	8019780 <gd32_i2c_read+0xf0>
 80197c8:	e796      	b.n	80196f8 <gd32_i2c_read+0x68>
 80197ca:	bf00      	nop
 80197cc:	40005400 	andmi	r5, r0, r0, lsl #8
 80197d0:	2000fde0 	andcs	pc, r0, r0, ror #27
 80197d4:	40005000 	andmi	r5, r0, r0

080197d8 <_gpio_init(unsigned int)>:
 80197d8:	4b96      	ldr	r3, [pc, #600]	; (8019a34 <_gpio_init(unsigned int)+0x25c>)
 80197da:	4298      	cmp	r0, r3
 80197dc:	b510      	push	{r4, lr}
 80197de:	f000 8104 	beq.w	80199ea <_gpio_init(unsigned int)+0x212>
 80197e2:	d831      	bhi.n	8019848 <_gpio_init(unsigned int)+0x70>
 80197e4:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 80197e8:	4298      	cmp	r0, r3
 80197ea:	f000 8098 	beq.w	801991e <_gpio_init(unsigned int)+0x146>
 80197ee:	f200 80bd 	bhi.w	801996c <_gpio_init(unsigned int)+0x194>
 80197f2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80197f6:	4298      	cmp	r0, r3
 80197f8:	d070      	beq.n	80198dc <_gpio_init(unsigned int)+0x104>
 80197fa:	488f      	ldr	r0, [pc, #572]	; (8019a38 <_gpio_init(unsigned int)+0x260>)
 80197fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019800:	2107      	movs	r1, #7
 8019802:	f7ff f9a2 	bl	8018b4a <gpio_af_set>
 8019806:	488c      	ldr	r0, [pc, #560]	; (8019a38 <_gpio_init(unsigned int)+0x260>)
 8019808:	f44f 7380 	mov.w	r3, #256	; 0x100
 801980c:	2201      	movs	r2, #1
 801980e:	2102      	movs	r1, #2
 8019810:	f7ff f960 	bl	8018ad4 <gpio_mode_set>
 8019814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019818:	4887      	ldr	r0, [pc, #540]	; (8019a38 <_gpio_init(unsigned int)+0x260>)
 801981a:	2202      	movs	r2, #2
 801981c:	2100      	movs	r1, #0
 801981e:	f7ff f979 	bl	8018b14 <gpio_output_options_set>
 8019822:	4885      	ldr	r0, [pc, #532]	; (8019a38 <_gpio_init(unsigned int)+0x260>)
 8019824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019828:	2107      	movs	r1, #7
 801982a:	f7ff f98e 	bl	8018b4a <gpio_af_set>
 801982e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019832:	4881      	ldr	r0, [pc, #516]	; (8019a38 <_gpio_init(unsigned int)+0x260>)
 8019834:	2201      	movs	r2, #1
 8019836:	2102      	movs	r1, #2
 8019838:	f7ff f94c 	bl	8018ad4 <gpio_mode_set>
 801983c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019840:	487d      	ldr	r0, [pc, #500]	; (8019a38 <_gpio_init(unsigned int)+0x260>)
 8019842:	2202      	movs	r2, #2
 8019844:	2100      	movs	r1, #0
 8019846:	e045      	b.n	80198d4 <_gpio_init(unsigned int)+0xfc>
 8019848:	4b7c      	ldr	r3, [pc, #496]	; (8019a3c <_gpio_init(unsigned int)+0x264>)
 801984a:	4298      	cmp	r0, r3
 801984c:	d022      	beq.n	8019894 <_gpio_init(unsigned int)+0xbc>
 801984e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8019852:	4298      	cmp	r0, r3
 8019854:	f000 80ab 	beq.w	80199ae <_gpio_init(unsigned int)+0x1d6>
 8019858:	4879      	ldr	r0, [pc, #484]	; (8019a40 <_gpio_init(unsigned int)+0x268>)
 801985a:	2202      	movs	r2, #2
 801985c:	2108      	movs	r1, #8
 801985e:	f7ff f974 	bl	8018b4a <gpio_af_set>
 8019862:	2302      	movs	r3, #2
 8019864:	4619      	mov	r1, r3
 8019866:	4876      	ldr	r0, [pc, #472]	; (8019a40 <_gpio_init(unsigned int)+0x268>)
 8019868:	2201      	movs	r2, #1
 801986a:	f7ff f933 	bl	8018ad4 <gpio_mode_set>
 801986e:	2302      	movs	r3, #2
 8019870:	461a      	mov	r2, r3
 8019872:	4873      	ldr	r0, [pc, #460]	; (8019a40 <_gpio_init(unsigned int)+0x268>)
 8019874:	2100      	movs	r1, #0
 8019876:	f7ff f94d 	bl	8018b14 <gpio_output_options_set>
 801987a:	4871      	ldr	r0, [pc, #452]	; (8019a40 <_gpio_init(unsigned int)+0x268>)
 801987c:	2201      	movs	r2, #1
 801987e:	2108      	movs	r1, #8
 8019880:	f7ff f963 	bl	8018b4a <gpio_af_set>
 8019884:	2301      	movs	r3, #1
 8019886:	461a      	mov	r2, r3
 8019888:	486d      	ldr	r0, [pc, #436]	; (8019a40 <_gpio_init(unsigned int)+0x268>)
 801988a:	2102      	movs	r1, #2
 801988c:	f7ff f922 	bl	8018ad4 <gpio_mode_set>
 8019890:	2301      	movs	r3, #1
 8019892:	e0ca      	b.n	8019a2a <_gpio_init(unsigned int)+0x252>
 8019894:	486b      	ldr	r0, [pc, #428]	; (8019a44 <_gpio_init(unsigned int)+0x26c>)
 8019896:	2240      	movs	r2, #64	; 0x40
 8019898:	2107      	movs	r1, #7
 801989a:	f7ff f956 	bl	8018b4a <gpio_af_set>
 801989e:	4869      	ldr	r0, [pc, #420]	; (8019a44 <_gpio_init(unsigned int)+0x26c>)
 80198a0:	2340      	movs	r3, #64	; 0x40
 80198a2:	2201      	movs	r2, #1
 80198a4:	2102      	movs	r1, #2
 80198a6:	f7ff f915 	bl	8018ad4 <gpio_mode_set>
 80198aa:	2340      	movs	r3, #64	; 0x40
 80198ac:	4865      	ldr	r0, [pc, #404]	; (8019a44 <_gpio_init(unsigned int)+0x26c>)
 80198ae:	2202      	movs	r2, #2
 80198b0:	2100      	movs	r1, #0
 80198b2:	f7ff f92f 	bl	8018b14 <gpio_output_options_set>
 80198b6:	4863      	ldr	r0, [pc, #396]	; (8019a44 <_gpio_init(unsigned int)+0x26c>)
 80198b8:	2280      	movs	r2, #128	; 0x80
 80198ba:	2107      	movs	r1, #7
 80198bc:	f7ff f945 	bl	8018b4a <gpio_af_set>
 80198c0:	4860      	ldr	r0, [pc, #384]	; (8019a44 <_gpio_init(unsigned int)+0x26c>)
 80198c2:	2380      	movs	r3, #128	; 0x80
 80198c4:	2201      	movs	r2, #1
 80198c6:	2102      	movs	r1, #2
 80198c8:	f7ff f904 	bl	8018ad4 <gpio_mode_set>
 80198cc:	485d      	ldr	r0, [pc, #372]	; (8019a44 <_gpio_init(unsigned int)+0x26c>)
 80198ce:	2380      	movs	r3, #128	; 0x80
 80198d0:	2202      	movs	r2, #2
 80198d2:	2100      	movs	r1, #0
 80198d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198d8:	f7ff b91c 	b.w	8018b14 <gpio_output_options_set>
 80198dc:	485a      	ldr	r0, [pc, #360]	; (8019a48 <_gpio_init(unsigned int)+0x270>)
 80198de:	2204      	movs	r2, #4
 80198e0:	2107      	movs	r1, #7
 80198e2:	f7ff f932 	bl	8018b4a <gpio_af_set>
 80198e6:	4858      	ldr	r0, [pc, #352]	; (8019a48 <_gpio_init(unsigned int)+0x270>)
 80198e8:	2304      	movs	r3, #4
 80198ea:	2201      	movs	r2, #1
 80198ec:	2102      	movs	r1, #2
 80198ee:	f7ff f8f1 	bl	8018ad4 <gpio_mode_set>
 80198f2:	2304      	movs	r3, #4
 80198f4:	4854      	ldr	r0, [pc, #336]	; (8019a48 <_gpio_init(unsigned int)+0x270>)
 80198f6:	2202      	movs	r2, #2
 80198f8:	2100      	movs	r1, #0
 80198fa:	f7ff f90b 	bl	8018b14 <gpio_output_options_set>
 80198fe:	4852      	ldr	r0, [pc, #328]	; (8019a48 <_gpio_init(unsigned int)+0x270>)
 8019900:	2208      	movs	r2, #8
 8019902:	2107      	movs	r1, #7
 8019904:	f7ff f921 	bl	8018b4a <gpio_af_set>
 8019908:	484f      	ldr	r0, [pc, #316]	; (8019a48 <_gpio_init(unsigned int)+0x270>)
 801990a:	2308      	movs	r3, #8
 801990c:	2201      	movs	r2, #1
 801990e:	2102      	movs	r1, #2
 8019910:	f7ff f8e0 	bl	8018ad4 <gpio_mode_set>
 8019914:	484c      	ldr	r0, [pc, #304]	; (8019a48 <_gpio_init(unsigned int)+0x270>)
 8019916:	2308      	movs	r3, #8
 8019918:	2202      	movs	r2, #2
 801991a:	2100      	movs	r1, #0
 801991c:	e7da      	b.n	80198d4 <_gpio_init(unsigned int)+0xfc>
 801991e:	484b      	ldr	r0, [pc, #300]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 8019920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019924:	2108      	movs	r1, #8
 8019926:	f7ff f910 	bl	8018b4a <gpio_af_set>
 801992a:	4848      	ldr	r0, [pc, #288]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 801992c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019930:	2201      	movs	r2, #1
 8019932:	2102      	movs	r1, #2
 8019934:	f7ff f8ce 	bl	8018ad4 <gpio_mode_set>
 8019938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801993c:	4843      	ldr	r0, [pc, #268]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 801993e:	2202      	movs	r2, #2
 8019940:	2100      	movs	r1, #0
 8019942:	f7ff f8e7 	bl	8018b14 <gpio_output_options_set>
 8019946:	4841      	ldr	r0, [pc, #260]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 8019948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801994c:	2108      	movs	r1, #8
 801994e:	f7ff f8fc 	bl	8018b4a <gpio_af_set>
 8019952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019956:	483d      	ldr	r0, [pc, #244]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 8019958:	2201      	movs	r2, #1
 801995a:	2102      	movs	r1, #2
 801995c:	f7ff f8ba 	bl	8018ad4 <gpio_mode_set>
 8019960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019964:	4839      	ldr	r0, [pc, #228]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 8019966:	2202      	movs	r2, #2
 8019968:	2100      	movs	r1, #0
 801996a:	e7b3      	b.n	80198d4 <_gpio_init(unsigned int)+0xfc>
 801996c:	4837      	ldr	r0, [pc, #220]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 801996e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019972:	2108      	movs	r1, #8
 8019974:	f7ff f8e9 	bl	8018b4a <gpio_af_set>
 8019978:	4834      	ldr	r0, [pc, #208]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 801997a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801997e:	2201      	movs	r2, #1
 8019980:	2102      	movs	r1, #2
 8019982:	f7ff f8a7 	bl	8018ad4 <gpio_mode_set>
 8019986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801998a:	4830      	ldr	r0, [pc, #192]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 801998c:	2202      	movs	r2, #2
 801998e:	2100      	movs	r1, #0
 8019990:	f7ff f8c0 	bl	8018b14 <gpio_output_options_set>
 8019994:	4828      	ldr	r0, [pc, #160]	; (8019a38 <_gpio_init(unsigned int)+0x260>)
 8019996:	2204      	movs	r2, #4
 8019998:	2108      	movs	r1, #8
 801999a:	f7ff f8d6 	bl	8018b4a <gpio_af_set>
 801999e:	2304      	movs	r3, #4
 80199a0:	4825      	ldr	r0, [pc, #148]	; (8019a38 <_gpio_init(unsigned int)+0x260>)
 80199a2:	2201      	movs	r2, #1
 80199a4:	2102      	movs	r1, #2
 80199a6:	f7ff f895 	bl	8018ad4 <gpio_mode_set>
 80199aa:	2304      	movs	r3, #4
 80199ac:	e748      	b.n	8019840 <_gpio_init(unsigned int)+0x68>
 80199ae:	4827      	ldr	r0, [pc, #156]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 80199b0:	2240      	movs	r2, #64	; 0x40
 80199b2:	2108      	movs	r1, #8
 80199b4:	f7ff f8c9 	bl	8018b4a <gpio_af_set>
 80199b8:	4824      	ldr	r0, [pc, #144]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 80199ba:	2340      	movs	r3, #64	; 0x40
 80199bc:	2201      	movs	r2, #1
 80199be:	2102      	movs	r1, #2
 80199c0:	f7ff f888 	bl	8018ad4 <gpio_mode_set>
 80199c4:	2340      	movs	r3, #64	; 0x40
 80199c6:	4821      	ldr	r0, [pc, #132]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 80199c8:	2202      	movs	r2, #2
 80199ca:	2100      	movs	r1, #0
 80199cc:	f7ff f8a2 	bl	8018b14 <gpio_output_options_set>
 80199d0:	481e      	ldr	r0, [pc, #120]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 80199d2:	2280      	movs	r2, #128	; 0x80
 80199d4:	2108      	movs	r1, #8
 80199d6:	f7ff f8b8 	bl	8018b4a <gpio_af_set>
 80199da:	2380      	movs	r3, #128	; 0x80
 80199dc:	481b      	ldr	r0, [pc, #108]	; (8019a4c <_gpio_init(unsigned int)+0x274>)
 80199de:	2201      	movs	r2, #1
 80199e0:	2102      	movs	r1, #2
 80199e2:	f7ff f877 	bl	8018ad4 <gpio_mode_set>
 80199e6:	2380      	movs	r3, #128	; 0x80
 80199e8:	e7bc      	b.n	8019964 <_gpio_init(unsigned int)+0x18c>
 80199ea:	4815      	ldr	r0, [pc, #84]	; (8019a40 <_gpio_init(unsigned int)+0x268>)
 80199ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80199f0:	2108      	movs	r1, #8
 80199f2:	f7ff f8aa 	bl	8018b4a <gpio_af_set>
 80199f6:	4812      	ldr	r0, [pc, #72]	; (8019a40 <_gpio_init(unsigned int)+0x268>)
 80199f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80199fc:	2201      	movs	r2, #1
 80199fe:	2102      	movs	r1, #2
 8019a00:	f7ff f868 	bl	8018ad4 <gpio_mode_set>
 8019a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019a08:	480d      	ldr	r0, [pc, #52]	; (8019a40 <_gpio_init(unsigned int)+0x268>)
 8019a0a:	2202      	movs	r2, #2
 8019a0c:	2100      	movs	r1, #0
 8019a0e:	f7ff f881 	bl	8018b14 <gpio_output_options_set>
 8019a12:	480b      	ldr	r0, [pc, #44]	; (8019a40 <_gpio_init(unsigned int)+0x268>)
 8019a14:	2280      	movs	r2, #128	; 0x80
 8019a16:	2108      	movs	r1, #8
 8019a18:	f7ff f897 	bl	8018b4a <gpio_af_set>
 8019a1c:	2380      	movs	r3, #128	; 0x80
 8019a1e:	4808      	ldr	r0, [pc, #32]	; (8019a40 <_gpio_init(unsigned int)+0x268>)
 8019a20:	2201      	movs	r2, #1
 8019a22:	2102      	movs	r1, #2
 8019a24:	f7ff f856 	bl	8018ad4 <gpio_mode_set>
 8019a28:	2380      	movs	r3, #128	; 0x80
 8019a2a:	4805      	ldr	r0, [pc, #20]	; (8019a40 <_gpio_init(unsigned int)+0x268>)
 8019a2c:	2202      	movs	r2, #2
 8019a2e:	2100      	movs	r1, #0
 8019a30:	e750      	b.n	80198d4 <_gpio_init(unsigned int)+0xfc>
 8019a32:	bf00      	nop
 8019a34:	40007800 	andmi	r7, r0, r0, lsl #16
 8019a38:	40020c00 	andmi	r0, r2, r0, lsl #24
 8019a3c:	40011000 	andmi	r1, r1, r0
 8019a40:	40021000 	andmi	r1, r2, r0
 8019a44:	40020400 	andmi	r0, r2, r0, lsl #8
 8019a48:	40020000 	andmi	r0, r2, r0
 8019a4c:	40020800 	andmi	r0, r2, r0, lsl #16

08019a50 <gd32_uart_begin>:
 8019a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a52:	461e      	mov	r6, r3
 8019a54:	4b44      	ldr	r3, [pc, #272]	; (8019b68 <gd32_uart_begin+0x118>)
 8019a56:	4298      	cmp	r0, r3
 8019a58:	4604      	mov	r4, r0
 8019a5a:	460f      	mov	r7, r1
 8019a5c:	4615      	mov	r5, r2
 8019a5e:	d076      	beq.n	8019b4e <gd32_uart_begin+0xfe>
 8019a60:	d80f      	bhi.n	8019a82 <gd32_uart_begin+0x32>
 8019a62:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8019a66:	4298      	cmp	r0, r3
 8019a68:	d060      	beq.n	8019b2c <gd32_uart_begin+0xdc>
 8019a6a:	d866      	bhi.n	8019b3a <gd32_uart_begin+0xea>
 8019a6c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8019a70:	4298      	cmp	r0, r3
 8019a72:	d054      	beq.n	8019b1e <gd32_uart_begin+0xce>
 8019a74:	f241 0012 	movw	r0, #4114	; 0x1012
 8019a78:	f7ff f8a8 	bl	8018bcc <rcu_periph_clock_enable>
 8019a7c:	f640 4003 	movw	r0, #3075	; 0xc03
 8019a80:	e00f      	b.n	8019aa2 <gd32_uart_begin+0x52>
 8019a82:	4b3a      	ldr	r3, [pc, #232]	; (8019b6c <gd32_uart_begin+0x11c>)
 8019a84:	4298      	cmp	r0, r3
 8019a86:	d006      	beq.n	8019a96 <gd32_uart_begin+0x46>
 8019a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8019a8c:	4298      	cmp	r0, r3
 8019a8e:	d05b      	beq.n	8019b48 <gd32_uart_begin+0xf8>
 8019a90:	f241 001f 	movw	r0, #4127	; 0x101f
 8019a94:	e05d      	b.n	8019b52 <gd32_uart_begin+0x102>
 8019a96:	f241 1004 	movw	r0, #4356	; 0x1104
 8019a9a:	f7ff f897 	bl	8018bcc <rcu_periph_clock_enable>
 8019a9e:	f640 4001 	movw	r0, #3073	; 0xc01
 8019aa2:	f7ff f893 	bl	8018bcc <rcu_periph_clock_enable>
 8019aa6:	4620      	mov	r0, r4
 8019aa8:	f7ff fe96 	bl	80197d8 <_gpio_init(unsigned int)>
 8019aac:	4620      	mov	r0, r4
 8019aae:	f7ff fb9b 	bl	80191e8 <usart_deinit>
 8019ab2:	68e3      	ldr	r3, [r4, #12]
 8019ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8019ab8:	60e3      	str	r3, [r4, #12]
 8019aba:	4639      	mov	r1, r7
 8019abc:	4620      	mov	r0, r4
 8019abe:	f7ff fbf5 	bl	80192ac <usart_baudrate_set>
 8019ac2:	f1a5 0309 	sub.w	r3, r5, #9
 8019ac6:	4259      	negs	r1, r3
 8019ac8:	4159      	adcs	r1, r3
 8019aca:	0309      	lsls	r1, r1, #12
 8019acc:	4620      	mov	r0, r4
 8019ace:	f7ff fc39 	bl	8019344 <usart_word_length_set>
 8019ad2:	9906      	ldr	r1, [sp, #24]
 8019ad4:	1e8a      	subs	r2, r1, #2
 8019ad6:	4251      	negs	r1, r2
 8019ad8:	4151      	adcs	r1, r2
 8019ada:	0349      	lsls	r1, r1, #13
 8019adc:	4620      	mov	r0, r4
 8019ade:	f7ff fc39 	bl	8019354 <usart_stop_bit_set>
 8019ae2:	2e01      	cmp	r6, #1
 8019ae4:	d03a      	beq.n	8019b5c <gd32_uart_begin+0x10c>
 8019ae6:	2e02      	cmp	r6, #2
 8019ae8:	d13b      	bne.n	8019b62 <gd32_uart_begin+0x112>
 8019aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019aee:	4620      	mov	r0, r4
 8019af0:	f7ff fc20 	bl	8019334 <usart_parity_config>
 8019af4:	2100      	movs	r1, #0
 8019af6:	4620      	mov	r0, r4
 8019af8:	f7ff fc40 	bl	801937c <usart_hardware_flow_rts_config>
 8019afc:	2100      	movs	r1, #0
 8019afe:	4620      	mov	r0, r4
 8019b00:	f7ff fc42 	bl	8019388 <usart_hardware_flow_cts_config>
 8019b04:	2104      	movs	r1, #4
 8019b06:	4620      	mov	r0, r4
 8019b08:	f7ff fc32 	bl	8019370 <usart_receive_config>
 8019b0c:	2108      	movs	r1, #8
 8019b0e:	4620      	mov	r0, r4
 8019b10:	f7ff fc28 	bl	8019364 <usart_transmit_config>
 8019b14:	68e3      	ldr	r3, [r4, #12]
 8019b16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019b1a:	60e3      	str	r3, [r4, #12]
 8019b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b1e:	f241 0011 	movw	r0, #4113	; 0x1011
 8019b22:	f7ff f853 	bl	8018bcc <rcu_periph_clock_enable>
 8019b26:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8019b2a:	e7ba      	b.n	8019aa2 <gd32_uart_begin+0x52>
 8019b2c:	f241 0013 	movw	r0, #4115	; 0x1013
 8019b30:	f7ff f84c 	bl	8018bcc <rcu_periph_clock_enable>
 8019b34:	f640 4002 	movw	r0, #3074	; 0xc02
 8019b38:	e7b3      	b.n	8019aa2 <gd32_uart_begin+0x52>
 8019b3a:	f241 0014 	movw	r0, #4116	; 0x1014
 8019b3e:	f7ff f845 	bl	8018bcc <rcu_periph_clock_enable>
 8019b42:	f640 4002 	movw	r0, #3074	; 0xc02
 8019b46:	e797      	b.n	8019a78 <gd32_uart_begin+0x28>
 8019b48:	f241 1005 	movw	r0, #4357	; 0x1105
 8019b4c:	e7f0      	b.n	8019b30 <gd32_uart_begin+0xe0>
 8019b4e:	f241 001e 	movw	r0, #4126	; 0x101e
 8019b52:	f7ff f83b 	bl	8018bcc <rcu_periph_clock_enable>
 8019b56:	f640 4004 	movw	r0, #3076	; 0xc04
 8019b5a:	e7a2      	b.n	8019aa2 <gd32_uart_begin+0x52>
 8019b5c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8019b60:	e7c5      	b.n	8019aee <gd32_uart_begin+0x9e>
 8019b62:	2100      	movs	r1, #0
 8019b64:	e7c3      	b.n	8019aee <gd32_uart_begin+0x9e>
 8019b66:	bf00      	nop
 8019b68:	40007800 	andmi	r7, r0, r0, lsl #16
 8019b6c:	40011000 	andmi	r1, r1, r0

08019b70 <micros_init()>:
 8019b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019b72:	f241 0003 	movw	r0, #4099	; 0x1003
 8019b76:	f7ff f829 	bl	8018bcc <rcu_periph_clock_enable>
 8019b7a:	480c      	ldr	r0, [pc, #48]	; (8019bac <micros_init()+0x3c>)
 8019b7c:	f7ff f8d6 	bl	8018d2c <timer_deinit>
 8019b80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019b84:	2300      	movs	r3, #0
 8019b86:	f8c2 3c24 	str.w	r3, [r2, #3108]	; 0xc24
 8019b8a:	22c7      	movs	r2, #199	; 0xc7
 8019b8c:	e9cd 2300 	strd	r2, r3, [sp]
 8019b90:	4669      	mov	r1, sp
 8019b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b96:	4805      	ldr	r0, [pc, #20]	; (8019bac <micros_init()+0x3c>)
 8019b98:	9302      	str	r3, [sp, #8]
 8019b9a:	f7ff f96d 	bl	8018e78 <timer_init>
 8019b9e:	4803      	ldr	r0, [pc, #12]	; (8019bac <micros_init()+0x3c>)
 8019ba0:	f7ff f9a8 	bl	8018ef4 <timer_enable>
 8019ba4:	b005      	add	sp, #20
 8019ba6:	f85d fb04 	ldr.w	pc, [sp], #4
 8019baa:	bf00      	nop
 8019bac:	40000c00 	andmi	r0, r0, r0, lsl #24

08019bb0 <udelay_init()>:
 8019bb0:	4a07      	ldr	r2, [pc, #28]	; (8019bd0 <udelay_init()+0x20>)
 8019bb2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8019bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8019bba:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8019bbe:	4b05      	ldr	r3, [pc, #20]	; (8019bd4 <udelay_init()+0x24>)
 8019bc0:	2200      	movs	r2, #0
 8019bc2:	605a      	str	r2, [r3, #4]
 8019bc4:	681a      	ldr	r2, [r3, #0]
 8019bc6:	f042 0201 	orr.w	r2, r2, #1
 8019bca:	601a      	str	r2, [r3, #0]
 8019bcc:	4770      	bx	lr
 8019bce:	bf00      	nop
 8019bd0:	e000ed00 	and	lr, r0, r0, lsl #26
 8019bd4:	e0001000 	and	r1, r0, r0

08019bd8 <udelay(unsigned int, unsigned int)>:
 8019bd8:	23c8      	movs	r3, #200	; 0xc8
 8019bda:	b530      	push	{r4, r5, lr}
 8019bdc:	4358      	muls	r0, r3
 8019bde:	b909      	cbnz	r1, 8019be4 <udelay(unsigned int, unsigned int)+0xc>
 8019be0:	4b08      	ldr	r3, [pc, #32]	; (8019c04 <udelay(unsigned int, unsigned int)+0x2c>)
 8019be2:	6859      	ldr	r1, [r3, #4]
 8019be4:	4c07      	ldr	r4, [pc, #28]	; (8019c04 <udelay(unsigned int, unsigned int)+0x2c>)
 8019be6:	2300      	movs	r3, #0
 8019be8:	6862      	ldr	r2, [r4, #4]
 8019bea:	4291      	cmp	r1, r2
 8019bec:	d0fc      	beq.n	8019be8 <udelay(unsigned int, unsigned int)+0x10>
 8019bee:	bf2a      	itet	cs
 8019bf0:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8019bf4:	189b      	addcc	r3, r3, r2
 8019bf6:	195b      	addcs	r3, r3, r5
 8019bf8:	1a5b      	subs	r3, r3, r1
 8019bfa:	4283      	cmp	r3, r0
 8019bfc:	d300      	bcc.n	8019c00 <udelay(unsigned int, unsigned int)+0x28>
 8019bfe:	bd30      	pop	{r4, r5, pc}
 8019c00:	4611      	mov	r1, r2
 8019c02:	e7f1      	b.n	8019be8 <udelay(unsigned int, unsigned int)+0x10>
 8019c04:	e0001000 	and	r1, r0, r0

08019c08 <emac_start(unsigned char*)>:
 8019c08:	b570      	push	{r4, r5, r6, lr}
 8019c0a:	4605      	mov	r5, r0
 8019c0c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8019c10:	f7fe ffdc 	bl	8018bcc <rcu_periph_clock_enable>
 8019c14:	f640 4001 	movw	r0, #3073	; 0xc01
 8019c18:	f7fe ffd8 	bl	8018bcc <rcu_periph_clock_enable>
 8019c1c:	f640 4002 	movw	r0, #3074	; 0xc02
 8019c20:	f7fe ffd4 	bl	8018bcc <rcu_periph_clock_enable>
 8019c24:	f241 100e 	movw	r0, #4366	; 0x110e
 8019c28:	f7fe ffd0 	bl	8018bcc <rcu_periph_clock_enable>
 8019c2c:	487d      	ldr	r0, [pc, #500]	; (8019e24 <emac_start(unsigned char*)+0x21c>)
 8019c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019c32:	2100      	movs	r1, #0
 8019c34:	f7fe ff89 	bl	8018b4a <gpio_af_set>
 8019c38:	487a      	ldr	r0, [pc, #488]	; (8019e24 <emac_start(unsigned char*)+0x21c>)
 8019c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019c3e:	2200      	movs	r2, #0
 8019c40:	2102      	movs	r1, #2
 8019c42:	f7fe ff47 	bl	8018ad4 <gpio_mode_set>
 8019c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019c4a:	2203      	movs	r2, #3
 8019c4c:	4875      	ldr	r0, [pc, #468]	; (8019e24 <emac_start(unsigned char*)+0x21c>)
 8019c4e:	2100      	movs	r1, #0
 8019c50:	f7fe ff60 	bl	8018b14 <gpio_output_options_set>
 8019c54:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8019c58:	f44f 00c0 	mov.w	r0, #6291456	; 0x600000
 8019c5c:	f7fe ffd6 	bl	8018c0c <rcu_ckout0_config>
 8019c60:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8019c64:	f000 fe82 	bl	801a96c <syscfg_enet_phy_interface_config>
 8019c68:	2302      	movs	r3, #2
 8019c6a:	4619      	mov	r1, r3
 8019c6c:	486d      	ldr	r0, [pc, #436]	; (8019e24 <emac_start(unsigned char*)+0x21c>)
 8019c6e:	2200      	movs	r2, #0
 8019c70:	f7fe ff30 	bl	8018ad4 <gpio_mode_set>
 8019c74:	486b      	ldr	r0, [pc, #428]	; (8019e24 <emac_start(unsigned char*)+0x21c>)
 8019c76:	2302      	movs	r3, #2
 8019c78:	2203      	movs	r2, #3
 8019c7a:	2100      	movs	r1, #0
 8019c7c:	f7fe ff4a 	bl	8018b14 <gpio_output_options_set>
 8019c80:	4868      	ldr	r0, [pc, #416]	; (8019e24 <emac_start(unsigned char*)+0x21c>)
 8019c82:	2304      	movs	r3, #4
 8019c84:	2200      	movs	r2, #0
 8019c86:	2102      	movs	r1, #2
 8019c88:	f7fe ff24 	bl	8018ad4 <gpio_mode_set>
 8019c8c:	4865      	ldr	r0, [pc, #404]	; (8019e24 <emac_start(unsigned char*)+0x21c>)
 8019c8e:	2304      	movs	r3, #4
 8019c90:	2203      	movs	r2, #3
 8019c92:	2100      	movs	r1, #0
 8019c94:	f7fe ff3e 	bl	8018b14 <gpio_output_options_set>
 8019c98:	4862      	ldr	r0, [pc, #392]	; (8019e24 <emac_start(unsigned char*)+0x21c>)
 8019c9a:	2380      	movs	r3, #128	; 0x80
 8019c9c:	2200      	movs	r2, #0
 8019c9e:	2102      	movs	r1, #2
 8019ca0:	f7fe ff18 	bl	8018ad4 <gpio_mode_set>
 8019ca4:	2380      	movs	r3, #128	; 0x80
 8019ca6:	485f      	ldr	r0, [pc, #380]	; (8019e24 <emac_start(unsigned char*)+0x21c>)
 8019ca8:	2203      	movs	r2, #3
 8019caa:	2100      	movs	r1, #0
 8019cac:	f7fe ff32 	bl	8018b14 <gpio_output_options_set>
 8019cb0:	485c      	ldr	r0, [pc, #368]	; (8019e24 <emac_start(unsigned char*)+0x21c>)
 8019cb2:	2202      	movs	r2, #2
 8019cb4:	210b      	movs	r1, #11
 8019cb6:	f7fe ff48 	bl	8018b4a <gpio_af_set>
 8019cba:	485a      	ldr	r0, [pc, #360]	; (8019e24 <emac_start(unsigned char*)+0x21c>)
 8019cbc:	2204      	movs	r2, #4
 8019cbe:	210b      	movs	r1, #11
 8019cc0:	f7fe ff43 	bl	8018b4a <gpio_af_set>
 8019cc4:	4857      	ldr	r0, [pc, #348]	; (8019e24 <emac_start(unsigned char*)+0x21c>)
 8019cc6:	2280      	movs	r2, #128	; 0x80
 8019cc8:	210b      	movs	r1, #11
 8019cca:	f7fe ff3e 	bl	8018b4a <gpio_af_set>
 8019cce:	4856      	ldr	r0, [pc, #344]	; (8019e28 <emac_start(unsigned char*)+0x220>)
 8019cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019cd4:	2200      	movs	r2, #0
 8019cd6:	2102      	movs	r1, #2
 8019cd8:	f7fe fefc 	bl	8018ad4 <gpio_mode_set>
 8019cdc:	4852      	ldr	r0, [pc, #328]	; (8019e28 <emac_start(unsigned char*)+0x220>)
 8019cde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019ce2:	2203      	movs	r2, #3
 8019ce4:	2100      	movs	r1, #0
 8019ce6:	f7fe ff15 	bl	8018b14 <gpio_output_options_set>
 8019cea:	484f      	ldr	r0, [pc, #316]	; (8019e28 <emac_start(unsigned char*)+0x220>)
 8019cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019cf0:	2200      	movs	r2, #0
 8019cf2:	2102      	movs	r1, #2
 8019cf4:	f7fe feee 	bl	8018ad4 <gpio_mode_set>
 8019cf8:	484b      	ldr	r0, [pc, #300]	; (8019e28 <emac_start(unsigned char*)+0x220>)
 8019cfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019cfe:	2203      	movs	r2, #3
 8019d00:	2100      	movs	r1, #0
 8019d02:	f7fe ff07 	bl	8018b14 <gpio_output_options_set>
 8019d06:	4848      	ldr	r0, [pc, #288]	; (8019e28 <emac_start(unsigned char*)+0x220>)
 8019d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019d0c:	2200      	movs	r2, #0
 8019d0e:	2102      	movs	r1, #2
 8019d10:	f7fe fee0 	bl	8018ad4 <gpio_mode_set>
 8019d14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8019d18:	4843      	ldr	r0, [pc, #268]	; (8019e28 <emac_start(unsigned char*)+0x220>)
 8019d1a:	2203      	movs	r2, #3
 8019d1c:	2100      	movs	r1, #0
 8019d1e:	f7fe fef9 	bl	8018b14 <gpio_output_options_set>
 8019d22:	4841      	ldr	r0, [pc, #260]	; (8019e28 <emac_start(unsigned char*)+0x220>)
 8019d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019d28:	210b      	movs	r1, #11
 8019d2a:	f7fe ff0e 	bl	8018b4a <gpio_af_set>
 8019d2e:	483e      	ldr	r0, [pc, #248]	; (8019e28 <emac_start(unsigned char*)+0x220>)
 8019d30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019d34:	210b      	movs	r1, #11
 8019d36:	f7fe ff08 	bl	8018b4a <gpio_af_set>
 8019d3a:	483b      	ldr	r0, [pc, #236]	; (8019e28 <emac_start(unsigned char*)+0x220>)
 8019d3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8019d40:	210b      	movs	r1, #11
 8019d42:	f7fe ff02 	bl	8018b4a <gpio_af_set>
 8019d46:	2302      	movs	r3, #2
 8019d48:	4619      	mov	r1, r3
 8019d4a:	4838      	ldr	r0, [pc, #224]	; (8019e2c <emac_start(unsigned char*)+0x224>)
 8019d4c:	2200      	movs	r2, #0
 8019d4e:	f7fe fec1 	bl	8018ad4 <gpio_mode_set>
 8019d52:	4836      	ldr	r0, [pc, #216]	; (8019e2c <emac_start(unsigned char*)+0x224>)
 8019d54:	2302      	movs	r3, #2
 8019d56:	2203      	movs	r2, #3
 8019d58:	2100      	movs	r1, #0
 8019d5a:	f7fe fedb 	bl	8018b14 <gpio_output_options_set>
 8019d5e:	4833      	ldr	r0, [pc, #204]	; (8019e2c <emac_start(unsigned char*)+0x224>)
 8019d60:	2310      	movs	r3, #16
 8019d62:	2200      	movs	r2, #0
 8019d64:	2102      	movs	r1, #2
 8019d66:	f7fe feb5 	bl	8018ad4 <gpio_mode_set>
 8019d6a:	4830      	ldr	r0, [pc, #192]	; (8019e2c <emac_start(unsigned char*)+0x224>)
 8019d6c:	2310      	movs	r3, #16
 8019d6e:	2203      	movs	r2, #3
 8019d70:	2100      	movs	r1, #0
 8019d72:	f7fe fecf 	bl	8018b14 <gpio_output_options_set>
 8019d76:	482d      	ldr	r0, [pc, #180]	; (8019e2c <emac_start(unsigned char*)+0x224>)
 8019d78:	2320      	movs	r3, #32
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	2102      	movs	r1, #2
 8019d7e:	f7fe fea9 	bl	8018ad4 <gpio_mode_set>
 8019d82:	2320      	movs	r3, #32
 8019d84:	4829      	ldr	r0, [pc, #164]	; (8019e2c <emac_start(unsigned char*)+0x224>)
 8019d86:	2203      	movs	r2, #3
 8019d88:	2100      	movs	r1, #0
 8019d8a:	f7fe fec3 	bl	8018b14 <gpio_output_options_set>
 8019d8e:	4827      	ldr	r0, [pc, #156]	; (8019e2c <emac_start(unsigned char*)+0x224>)
 8019d90:	2202      	movs	r2, #2
 8019d92:	210b      	movs	r1, #11
 8019d94:	f7fe fed9 	bl	8018b4a <gpio_af_set>
 8019d98:	4824      	ldr	r0, [pc, #144]	; (8019e2c <emac_start(unsigned char*)+0x224>)
 8019d9a:	2210      	movs	r2, #16
 8019d9c:	210b      	movs	r1, #11
 8019d9e:	f7fe fed4 	bl	8018b4a <gpio_af_set>
 8019da2:	2220      	movs	r2, #32
 8019da4:	210b      	movs	r1, #11
 8019da6:	4821      	ldr	r0, [pc, #132]	; (8019e2c <emac_start(unsigned char*)+0x224>)
 8019da8:	f7fe fecf 	bl	8018b4a <gpio_af_set>
 8019dac:	f640 4019 	movw	r0, #3097	; 0xc19
 8019db0:	f7fe ff0c 	bl	8018bcc <rcu_periph_clock_enable>
 8019db4:	f640 401a 	movw	r0, #3098	; 0xc1a
 8019db8:	f7fe ff08 	bl	8018bcc <rcu_periph_clock_enable>
 8019dbc:	f640 401b 	movw	r0, #3099	; 0xc1b
 8019dc0:	f7fe ff04 	bl	8018bcc <rcu_periph_clock_enable>
 8019dc4:	f000 fd1c 	bl	801a800 <enet_deinit>
 8019dc8:	f000 f944 	bl	801a054 <enet_software_reset>
 8019dcc:	4604      	mov	r4, r0
 8019dce:	b138      	cbz	r0, 8019de0 <emac_start(unsigned char*)+0x1d8>
 8019dd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019dd8:	2001      	movs	r0, #1
 8019dda:	f000 fad3 	bl	801a384 <enet_init>
 8019dde:	4604      	mov	r4, r0
 8019de0:	4628      	mov	r0, r5
 8019de2:	f000 fdcf 	bl	801a984 <mac_address_get(unsigned char*)>
 8019de6:	4629      	mov	r1, r5
 8019de8:	2000      	movs	r0, #0
 8019dea:	f000 fa23 	bl	801a234 <enet_mac_address_set>
 8019dee:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8019df2:	f000 f943 	bl	801a07c <enet_descriptors_chain_init>
 8019df6:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8019dfa:	f000 f93f 	bl	801a07c <enet_descriptors_chain_init>
 8019dfe:	4e0c      	ldr	r6, [pc, #48]	; (8019e30 <emac_start(unsigned char*)+0x228>)
 8019e00:	2500      	movs	r5, #0
 8019e02:	4630      	mov	r0, r6
 8019e04:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8019e08:	3501      	adds	r5, #1
 8019e0a:	f000 fa0d 	bl	801a228 <enet_transmit_checksum_config>
 8019e0e:	2d08      	cmp	r5, #8
 8019e10:	f106 0610 	add.w	r6, r6, #16
 8019e14:	d1f5      	bne.n	8019e02 <emac_start(unsigned char*)+0x1fa>
 8019e16:	f000 fc55 	bl	801a6c4 <enet_enable>
 8019e1a:	fab4 f084 	clz	r0, r4
 8019e1e:	0940      	lsrs	r0, r0, #5
 8019e20:	4240      	negs	r0, r0
 8019e22:	bd70      	pop	{r4, r5, r6, pc}
 8019e24:	40020000 	andmi	r0, r2, r0
 8019e28:	40020400 	andmi	r0, r2, r0, lsl #8
 8019e2c:	40020800 	andmi	r0, r2, r0, lsl #16
 8019e30:	2002d2e8 	andcs	sp, r2, r8, ror #5

08019e34 <net::link_register_read()>:
 8019e34:	b507      	push	{r0, r1, r2, lr}
 8019e36:	2201      	movs	r2, #1
 8019e38:	f10d 0306 	add.w	r3, sp, #6
 8019e3c:	4611      	mov	r1, r2
 8019e3e:	2000      	movs	r0, #0
 8019e40:	f000 fa10 	bl	801a264 <enet_phy_write_read>
 8019e44:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019e48:	f080 0004 	eor.w	r0, r0, #4
 8019e4c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8019e50:	b003      	add	sp, #12
 8019e52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08019e58 <adc_clock_config>:
 8019e58:	4b06      	ldr	r3, [pc, #24]	; (8019e74 <adc_clock_config+0x1c>)
 8019e5a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8019e5e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8019e62:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 8019e66:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8019e6a:	4310      	orrs	r0, r2
 8019e6c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
 8019e70:	4770      	bx	lr
 8019e72:	bf00      	nop
 8019e74:	40012000 	andmi	r2, r1, r0

08019e78 <adc_special_function_config>:
 8019e78:	b510      	push	{r4, lr}
 8019e7a:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8019e7e:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8019e82:	f001 0102 	and.w	r1, r1, #2
 8019e86:	b17a      	cbz	r2, 8019ea8 <adc_special_function_config+0x30>
 8019e88:	b11b      	cbz	r3, 8019e92 <adc_special_function_config+0x1a>
 8019e8a:	6843      	ldr	r3, [r0, #4]
 8019e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019e90:	6043      	str	r3, [r0, #4]
 8019e92:	b11c      	cbz	r4, 8019e9c <adc_special_function_config+0x24>
 8019e94:	6843      	ldr	r3, [r0, #4]
 8019e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019e9a:	6043      	str	r3, [r0, #4]
 8019e9c:	b119      	cbz	r1, 8019ea6 <adc_special_function_config+0x2e>
 8019e9e:	6883      	ldr	r3, [r0, #8]
 8019ea0:	f043 0302 	orr.w	r3, r3, #2
 8019ea4:	6083      	str	r3, [r0, #8]
 8019ea6:	bd10      	pop	{r4, pc}
 8019ea8:	b11b      	cbz	r3, 8019eb2 <adc_special_function_config+0x3a>
 8019eaa:	6843      	ldr	r3, [r0, #4]
 8019eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019eb0:	6043      	str	r3, [r0, #4]
 8019eb2:	b11c      	cbz	r4, 8019ebc <adc_special_function_config+0x44>
 8019eb4:	6843      	ldr	r3, [r0, #4]
 8019eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019eba:	6043      	str	r3, [r0, #4]
 8019ebc:	2900      	cmp	r1, #0
 8019ebe:	d0f2      	beq.n	8019ea6 <adc_special_function_config+0x2e>
 8019ec0:	6883      	ldr	r3, [r0, #8]
 8019ec2:	f023 0302 	bic.w	r3, r3, #2
 8019ec6:	e7ed      	b.n	8019ea4 <adc_special_function_config+0x2c>

08019ec8 <adc_data_alignment_config>:
 8019ec8:	6883      	ldr	r3, [r0, #8]
 8019eca:	b119      	cbz	r1, 8019ed4 <adc_data_alignment_config+0xc>
 8019ecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019ed0:	6083      	str	r3, [r0, #8]
 8019ed2:	4770      	bx	lr
 8019ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019ed8:	e7fa      	b.n	8019ed0 <adc_data_alignment_config+0x8>

08019eda <adc_enable>:
 8019eda:	6883      	ldr	r3, [r0, #8]
 8019edc:	07db      	lsls	r3, r3, #31
 8019ede:	bf5e      	ittt	pl
 8019ee0:	6883      	ldrpl	r3, [r0, #8]
 8019ee2:	f043 0301 	orrpl.w	r3, r3, #1
 8019ee6:	6083      	strpl	r3, [r0, #8]
 8019ee8:	4770      	bx	lr

08019eea <adc_calibration_enable>:
 8019eea:	6883      	ldr	r3, [r0, #8]
 8019eec:	f043 0308 	orr.w	r3, r3, #8
 8019ef0:	f100 0208 	add.w	r2, r0, #8
 8019ef4:	6083      	str	r3, [r0, #8]
 8019ef6:	6813      	ldr	r3, [r2, #0]
 8019ef8:	0719      	lsls	r1, r3, #28
 8019efa:	d4fc      	bmi.n	8019ef6 <adc_calibration_enable+0xc>
 8019efc:	6883      	ldr	r3, [r0, #8]
 8019efe:	f043 0304 	orr.w	r3, r3, #4
 8019f02:	6083      	str	r3, [r0, #8]
 8019f04:	6813      	ldr	r3, [r2, #0]
 8019f06:	075b      	lsls	r3, r3, #29
 8019f08:	d4fc      	bmi.n	8019f04 <adc_calibration_enable+0x1a>
 8019f0a:	4770      	bx	lr

08019f0c <adc_channel_16_to_18>:
 8019f0c:	f400 0380 	and.w	r3, r0, #4194304	; 0x400000
 8019f10:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000
 8019f14:	b181      	cbz	r1, 8019f38 <adc_channel_16_to_18+0x2c>
 8019f16:	b133      	cbz	r3, 8019f26 <adc_channel_16_to_18+0x1a>
 8019f18:	4a0f      	ldr	r2, [pc, #60]	; (8019f58 <adc_channel_16_to_18+0x4c>)
 8019f1a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8019f1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8019f22:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8019f26:	b130      	cbz	r0, 8019f36 <adc_channel_16_to_18+0x2a>
 8019f28:	4a0b      	ldr	r2, [pc, #44]	; (8019f58 <adc_channel_16_to_18+0x4c>)
 8019f2a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8019f2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8019f32:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8019f36:	4770      	bx	lr
 8019f38:	b133      	cbz	r3, 8019f48 <adc_channel_16_to_18+0x3c>
 8019f3a:	4a07      	ldr	r2, [pc, #28]	; (8019f58 <adc_channel_16_to_18+0x4c>)
 8019f3c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8019f40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8019f44:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8019f48:	2800      	cmp	r0, #0
 8019f4a:	d0f4      	beq.n	8019f36 <adc_channel_16_to_18+0x2a>
 8019f4c:	4a02      	ldr	r2, [pc, #8]	; (8019f58 <adc_channel_16_to_18+0x4c>)
 8019f4e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8019f52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8019f56:	e7ec      	b.n	8019f32 <adc_channel_16_to_18+0x26>
 8019f58:	40012000 	andmi	r2, r1, r0

08019f5c <adc_channel_length_config>:
 8019f5c:	2901      	cmp	r1, #1
 8019f5e:	d002      	beq.n	8019f66 <adc_channel_length_config+0xa>
 8019f60:	2902      	cmp	r1, #2
 8019f62:	d00c      	beq.n	8019f7e <adc_channel_length_config+0x22>
 8019f64:	4770      	bx	lr
 8019f66:	3a01      	subs	r2, #1
 8019f68:	2a0f      	cmp	r2, #15
 8019f6a:	d813      	bhi.n	8019f94 <adc_channel_length_config+0x38>
 8019f6c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8019f6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8019f72:	62c3      	str	r3, [r0, #44]	; 0x2c
 8019f74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8019f76:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8019f7a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8019f7c:	4770      	bx	lr
 8019f7e:	3a01      	subs	r2, #1
 8019f80:	2a03      	cmp	r2, #3
 8019f82:	d807      	bhi.n	8019f94 <adc_channel_length_config+0x38>
 8019f84:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019f86:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019f8a:	6383      	str	r3, [r0, #56]	; 0x38
 8019f8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019f8e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8019f92:	6383      	str	r3, [r0, #56]	; 0x38
 8019f94:	4770      	bx	lr

08019f96 <adc_inserted_channel_config>:
 8019f96:	2903      	cmp	r1, #3
 8019f98:	b530      	push	{r4, r5, lr}
 8019f9a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8019f9c:	d80f      	bhi.n	8019fbe <adc_inserted_channel_config+0x28>
 8019f9e:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8019fa2:	1a61      	subs	r1, r4, r1
 8019fa4:	f06f 0404 	mvn.w	r4, #4
 8019fa8:	4361      	muls	r1, r4
 8019faa:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8019fac:	310f      	adds	r1, #15
 8019fae:	241f      	movs	r4, #31
 8019fb0:	408c      	lsls	r4, r1
 8019fb2:	ea25 0404 	bic.w	r4, r5, r4
 8019fb6:	fa02 f101 	lsl.w	r1, r2, r1
 8019fba:	4321      	orrs	r1, r4
 8019fbc:	6381      	str	r1, [r0, #56]	; 0x38
 8019fbe:	2a09      	cmp	r2, #9
 8019fc0:	d80a      	bhi.n	8019fd8 <adc_inserted_channel_config+0x42>
 8019fc2:	6901      	ldr	r1, [r0, #16]
 8019fc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019fc8:	2407      	movs	r4, #7
 8019fca:	4094      	lsls	r4, r2
 8019fcc:	ea21 0104 	bic.w	r1, r1, r4
 8019fd0:	4093      	lsls	r3, r2
 8019fd2:	430b      	orrs	r3, r1
 8019fd4:	6103      	str	r3, [r0, #16]
 8019fd6:	bd30      	pop	{r4, r5, pc}
 8019fd8:	2a12      	cmp	r2, #18
 8019fda:	d8fc      	bhi.n	8019fd6 <adc_inserted_channel_config+0x40>
 8019fdc:	3a0a      	subs	r2, #10
 8019fde:	68c1      	ldr	r1, [r0, #12]
 8019fe0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019fe4:	2407      	movs	r4, #7
 8019fe6:	4094      	lsls	r4, r2
 8019fe8:	ea21 0104 	bic.w	r1, r1, r4
 8019fec:	4093      	lsls	r3, r2
 8019fee:	430b      	orrs	r3, r1
 8019ff0:	60c3      	str	r3, [r0, #12]
 8019ff2:	e7f0      	b.n	8019fd6 <adc_inserted_channel_config+0x40>

08019ff4 <adc_external_trigger_config>:
 8019ff4:	2901      	cmp	r1, #1
 8019ff6:	d002      	beq.n	8019ffe <adc_external_trigger_config+0xa>
 8019ff8:	2902      	cmp	r1, #2
 8019ffa:	d009      	beq.n	801a010 <adc_external_trigger_config+0x1c>
 8019ffc:	4770      	bx	lr
 8019ffe:	6883      	ldr	r3, [r0, #8]
 801a000:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 801a004:	6083      	str	r3, [r0, #8]
 801a006:	6883      	ldr	r3, [r0, #8]
 801a008:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 801a00c:	6083      	str	r3, [r0, #8]
 801a00e:	4770      	bx	lr
 801a010:	6883      	ldr	r3, [r0, #8]
 801a012:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a016:	6083      	str	r3, [r0, #8]
 801a018:	6883      	ldr	r3, [r0, #8]
 801a01a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801a01e:	e7f5      	b.n	801a00c <adc_external_trigger_config+0x18>

0801a020 <adc_software_trigger_enable>:
 801a020:	2901      	cmp	r1, #1
 801a022:	d002      	beq.n	801a02a <adc_software_trigger_enable+0xa>
 801a024:	2902      	cmp	r1, #2
 801a026:	d005      	beq.n	801a034 <adc_software_trigger_enable+0x14>
 801a028:	4770      	bx	lr
 801a02a:	6883      	ldr	r3, [r0, #8]
 801a02c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801a030:	6083      	str	r3, [r0, #8]
 801a032:	4770      	bx	lr
 801a034:	6883      	ldr	r3, [r0, #8]
 801a036:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801a03a:	e7f9      	b.n	801a030 <adc_software_trigger_enable+0x10>

0801a03c <enet_delay>:
 801a03c:	b082      	sub	sp, #8
 801a03e:	2300      	movs	r3, #0
 801a040:	9301      	str	r3, [sp, #4]
 801a042:	9001      	str	r0, [sp, #4]
 801a044:	9b01      	ldr	r3, [sp, #4]
 801a046:	b90b      	cbnz	r3, 801a04c <enet_delay+0x10>
 801a048:	b002      	add	sp, #8
 801a04a:	4770      	bx	lr
 801a04c:	9b01      	ldr	r3, [sp, #4]
 801a04e:	3b01      	subs	r3, #1
 801a050:	9301      	str	r3, [sp, #4]
 801a052:	e7f7      	b.n	801a044 <enet_delay+0x8>

0801a054 <enet_software_reset>:
 801a054:	4b07      	ldr	r3, [pc, #28]	; (801a074 <enet_software_reset+0x20>)
 801a056:	681a      	ldr	r2, [r3, #0]
 801a058:	f042 0201 	orr.w	r2, r2, #1
 801a05c:	601a      	str	r2, [r3, #0]
 801a05e:	4a06      	ldr	r2, [pc, #24]	; (801a078 <enet_software_reset+0x24>)
 801a060:	6819      	ldr	r1, [r3, #0]
 801a062:	07c9      	lsls	r1, r1, #31
 801a064:	d501      	bpl.n	801a06a <enet_software_reset+0x16>
 801a066:	3a01      	subs	r2, #1
 801a068:	d1fa      	bne.n	801a060 <enet_software_reset+0xc>
 801a06a:	6818      	ldr	r0, [r3, #0]
 801a06c:	43c0      	mvns	r0, r0
 801a06e:	f000 0001 	and.w	r0, r0, #1
 801a072:	4770      	bx	lr
 801a074:	40029000 	andmi	r9, r2, r0
 801a078:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

0801a07c <enet_descriptors_chain_init>:
 801a07c:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 801a080:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a082:	4a19      	ldr	r2, [pc, #100]	; (801a0e8 <enet_descriptors_chain_init+0x6c>)
 801a084:	d125      	bne.n	801a0d2 <enet_descriptors_chain_init+0x56>
 801a086:	4b19      	ldr	r3, [pc, #100]	; (801a0ec <enet_descriptors_chain_init+0x70>)
 801a088:	6113      	str	r3, [r2, #16]
 801a08a:	4a19      	ldr	r2, [pc, #100]	; (801a0f0 <enet_descriptors_chain_init+0x74>)
 801a08c:	4c19      	ldr	r4, [pc, #100]	; (801a0f4 <enet_descriptors_chain_init+0x78>)
 801a08e:	6013      	str	r3, [r2, #0]
 801a090:	2500      	movs	r5, #0
 801a092:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 801a096:	2008      	movs	r0, #8
 801a098:	4917      	ldr	r1, [pc, #92]	; (801a0f8 <enet_descriptors_chain_init+0x7c>)
 801a09a:	2200      	movs	r2, #0
 801a09c:	600a      	str	r2, [r1, #0]
 801a09e:	4917      	ldr	r1, [pc, #92]	; (801a0fc <enet_descriptors_chain_init+0x80>)
 801a0a0:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 801a0a4:	600a      	str	r2, [r1, #0]
 801a0a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801a0aa:	f103 0110 	add.w	r1, r3, #16
 801a0ae:	fb0e 4702 	mla	r7, lr, r2, r4
 801a0b2:	f841 7c08 	str.w	r7, [r1, #-8]
 801a0b6:	4594      	cmp	ip, r2
 801a0b8:	bf94      	ite	ls
 801a0ba:	461f      	movls	r7, r3
 801a0bc:	460f      	movhi	r7, r1
 801a0be:	3201      	adds	r2, #1
 801a0c0:	4290      	cmp	r0, r2
 801a0c2:	e941 6504 	strd	r6, r5, [r1, #-16]
 801a0c6:	f841 7c04 	str.w	r7, [r1, #-4]
 801a0ca:	f101 0110 	add.w	r1, r1, #16
 801a0ce:	d1ee      	bne.n	801a0ae <enet_descriptors_chain_init+0x32>
 801a0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0d2:	4b0b      	ldr	r3, [pc, #44]	; (801a100 <enet_descriptors_chain_init+0x84>)
 801a0d4:	60d3      	str	r3, [r2, #12]
 801a0d6:	4a0b      	ldr	r2, [pc, #44]	; (801a104 <enet_descriptors_chain_init+0x88>)
 801a0d8:	4c0b      	ldr	r4, [pc, #44]	; (801a108 <enet_descriptors_chain_init+0x8c>)
 801a0da:	6013      	str	r3, [r2, #0]
 801a0dc:	f244 55f4 	movw	r5, #17908	; 0x45f4
 801a0e0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a0e4:	2046      	movs	r0, #70	; 0x46
 801a0e6:	e7d7      	b.n	801a098 <enet_descriptors_chain_init+0x1c>
 801a0e8:	40029000 	andmi	r9, r2, r0
 801a0ec:	2002d2e8 	andcs	sp, r2, r8, ror #5
 801a0f0:	2000fdf0 	strdcs	pc, [r0], -r0
 801a0f4:	2002a348 	andcs	sl, r2, r8, asr #6
 801a0f8:	2000fde4 	andcs	pc, r0, r4, ror #27
 801a0fc:	2000fde8 	andcs	pc, r0, r8, ror #27
 801a100:	20029ee8 	andcs	r9, r2, r8, ror #29
 801a104:	2000fdec 	andcs	pc, r0, ip, ror #27
 801a108:	2000fe30 	andcs	pc, r0, r0, lsr lr	; <UNPREDICTABLE>

0801a10c <enet_frame_receive>:
 801a10c:	4b22      	ldr	r3, [pc, #136]	; (801a198 <enet_frame_receive+0x8c>)
 801a10e:	681a      	ldr	r2, [r3, #0]
 801a110:	6812      	ldr	r2, [r2, #0]
 801a112:	2a00      	cmp	r2, #0
 801a114:	b570      	push	{r4, r5, r6, lr}
 801a116:	db3c      	blt.n	801a192 <enet_frame_receive+0x86>
 801a118:	b970      	cbnz	r0, 801a138 <enet_frame_receive+0x2c>
 801a11a:	681a      	ldr	r2, [r3, #0]
 801a11c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a120:	6011      	str	r1, [r2, #0]
 801a122:	491e      	ldr	r1, [pc, #120]	; (801a19c <enet_frame_receive+0x90>)
 801a124:	6948      	ldr	r0, [r1, #20]
 801a126:	0600      	lsls	r0, r0, #24
 801a128:	d422      	bmi.n	801a170 <enet_frame_receive+0x64>
 801a12a:	6851      	ldr	r1, [r2, #4]
 801a12c:	0448      	lsls	r0, r1, #17
 801a12e:	d524      	bpl.n	801a17a <enet_frame_receive+0x6e>
 801a130:	68d2      	ldr	r2, [r2, #12]
 801a132:	601a      	str	r2, [r3, #0]
 801a134:	2001      	movs	r0, #1
 801a136:	bd70      	pop	{r4, r5, r6, pc}
 801a138:	f402 4403 	and.w	r4, r2, #33536	; 0x8300
 801a13c:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 801a140:	d127      	bne.n	801a192 <enet_frame_receive+0x86>
 801a142:	4e17      	ldr	r6, [pc, #92]	; (801a1a0 <enet_frame_receive+0x94>)
 801a144:	6836      	ldr	r6, [r6, #0]
 801a146:	f3c2 450d 	ubfx	r5, r2, #16, #14
 801a14a:	01b6      	lsls	r6, r6, #6
 801a14c:	f1a5 0404 	sub.w	r4, r5, #4
 801a150:	d503      	bpl.n	801a15a <enet_frame_receive+0x4e>
 801a152:	f012 0f20 	tst.w	r2, #32
 801a156:	bf18      	it	ne
 801a158:	462c      	movne	r4, r5
 801a15a:	428c      	cmp	r4, r1
 801a15c:	d819      	bhi.n	801a192 <enet_frame_receive+0x86>
 801a15e:	2200      	movs	r2, #0
 801a160:	42a2      	cmp	r2, r4
 801a162:	6819      	ldr	r1, [r3, #0]
 801a164:	d0d9      	beq.n	801a11a <enet_frame_receive+0xe>
 801a166:	6889      	ldr	r1, [r1, #8]
 801a168:	5c51      	ldrb	r1, [r2, r1]
 801a16a:	5481      	strb	r1, [r0, r2]
 801a16c:	3201      	adds	r2, #1
 801a16e:	e7f7      	b.n	801a160 <enet_frame_receive+0x54>
 801a170:	2080      	movs	r0, #128	; 0x80
 801a172:	6148      	str	r0, [r1, #20]
 801a174:	2000      	movs	r0, #0
 801a176:	6088      	str	r0, [r1, #8]
 801a178:	e7d7      	b.n	801a12a <enet_frame_receive+0x1e>
 801a17a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 801a17e:	4907      	ldr	r1, [pc, #28]	; (801a19c <enet_frame_receive+0x90>)
 801a180:	bf09      	itett	eq
 801a182:	6809      	ldreq	r1, [r1, #0]
 801a184:	68ca      	ldrne	r2, [r1, #12]
 801a186:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 801a18a:	3210      	addeq	r2, #16
 801a18c:	bf08      	it	eq
 801a18e:	1852      	addeq	r2, r2, r1
 801a190:	e7cf      	b.n	801a132 <enet_frame_receive+0x26>
 801a192:	2000      	movs	r0, #0
 801a194:	e7cf      	b.n	801a136 <enet_frame_receive+0x2a>
 801a196:	bf00      	nop
 801a198:	2000fdec 	andcs	pc, r0, ip, ror #27
 801a19c:	40029000 	andmi	r9, r2, r0
 801a1a0:	40028000 	andmi	r8, r2, r0

0801a1a4 <enet_frame_transmit>:
 801a1a4:	4a1e      	ldr	r2, [pc, #120]	; (801a220 <enet_frame_transmit+0x7c>)
 801a1a6:	6813      	ldr	r3, [r2, #0]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	b530      	push	{r4, r5, lr}
 801a1ae:	db34      	blt.n	801a21a <enet_frame_transmit+0x76>
 801a1b0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801a1b4:	4299      	cmp	r1, r3
 801a1b6:	d830      	bhi.n	801a21a <enet_frame_transmit+0x76>
 801a1b8:	b9e8      	cbnz	r0, 801a1f6 <enet_frame_transmit+0x52>
 801a1ba:	6813      	ldr	r3, [r2, #0]
 801a1bc:	4819      	ldr	r0, [pc, #100]	; (801a224 <enet_frame_transmit+0x80>)
 801a1be:	6059      	str	r1, [r3, #4]
 801a1c0:	6819      	ldr	r1, [r3, #0]
 801a1c2:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 801a1c6:	6019      	str	r1, [r3, #0]
 801a1c8:	6941      	ldr	r1, [r0, #20]
 801a1ca:	6944      	ldr	r4, [r0, #20]
 801a1cc:	f001 0104 	and.w	r1, r1, #4
 801a1d0:	f004 0420 	and.w	r4, r4, #32
 801a1d4:	4321      	orrs	r1, r4
 801a1d6:	d110      	bne.n	801a1fa <enet_frame_transmit+0x56>
 801a1d8:	6819      	ldr	r1, [r3, #0]
 801a1da:	02c8      	lsls	r0, r1, #11
 801a1dc:	d511      	bpl.n	801a202 <enet_frame_transmit+0x5e>
 801a1de:	68db      	ldr	r3, [r3, #12]
 801a1e0:	6013      	str	r3, [r2, #0]
 801a1e2:	2001      	movs	r0, #1
 801a1e4:	bd30      	pop	{r4, r5, pc}
 801a1e6:	68a4      	ldr	r4, [r4, #8]
 801a1e8:	5cc5      	ldrb	r5, [r0, r3]
 801a1ea:	551d      	strb	r5, [r3, r4]
 801a1ec:	3301      	adds	r3, #1
 801a1ee:	428b      	cmp	r3, r1
 801a1f0:	6814      	ldr	r4, [r2, #0]
 801a1f2:	d1f8      	bne.n	801a1e6 <enet_frame_transmit+0x42>
 801a1f4:	e7e1      	b.n	801a1ba <enet_frame_transmit+0x16>
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	e7f9      	b.n	801a1ee <enet_frame_transmit+0x4a>
 801a1fa:	6141      	str	r1, [r0, #20]
 801a1fc:	2100      	movs	r1, #0
 801a1fe:	6041      	str	r1, [r0, #4]
 801a200:	e7ea      	b.n	801a1d8 <enet_frame_transmit+0x34>
 801a202:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 801a206:	4907      	ldr	r1, [pc, #28]	; (801a224 <enet_frame_transmit+0x80>)
 801a208:	bf09      	itett	eq
 801a20a:	6809      	ldreq	r1, [r1, #0]
 801a20c:	690b      	ldrne	r3, [r1, #16]
 801a20e:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 801a212:	3310      	addeq	r3, #16
 801a214:	bf08      	it	eq
 801a216:	185b      	addeq	r3, r3, r1
 801a218:	e7e2      	b.n	801a1e0 <enet_frame_transmit+0x3c>
 801a21a:	2000      	movs	r0, #0
 801a21c:	e7e2      	b.n	801a1e4 <enet_frame_transmit+0x40>
 801a21e:	bf00      	nop
 801a220:	2000fdf0 	strdcs	pc, [r0], -r0
 801a224:	40029000 	andmi	r9, r2, r0

0801a228 <enet_transmit_checksum_config>:
 801a228:	6803      	ldr	r3, [r0, #0]
 801a22a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 801a22e:	430b      	orrs	r3, r1
 801a230:	6003      	str	r3, [r0, #0]
 801a232:	4770      	bx	lr

0801a234 <enet_mac_address_set>:
 801a234:	4b03      	ldr	r3, [pc, #12]	; (801a244 <enet_mac_address_set+0x10>)
 801a236:	888a      	ldrh	r2, [r1, #4]
 801a238:	50c2      	str	r2, [r0, r3]
 801a23a:	3304      	adds	r3, #4
 801a23c:	680a      	ldr	r2, [r1, #0]
 801a23e:	50c2      	str	r2, [r0, r3]
 801a240:	4770      	bx	lr
 801a242:	bf00      	nop
 801a244:	40028040 	andmi	r8, r2, r0, asr #32

0801a248 <enet_rx_enable>:
 801a248:	4a05      	ldr	r2, [pc, #20]	; (801a260 <enet_rx_enable+0x18>)
 801a24a:	6813      	ldr	r3, [r2, #0]
 801a24c:	f043 0304 	orr.w	r3, r3, #4
 801a250:	6013      	str	r3, [r2, #0]
 801a252:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a256:	6993      	ldr	r3, [r2, #24]
 801a258:	f043 0302 	orr.w	r3, r3, #2
 801a25c:	6193      	str	r3, [r2, #24]
 801a25e:	4770      	bx	lr
 801a260:	40028000 	andmi	r8, r2, r0

0801a264 <enet_phy_write_read>:
 801a264:	b530      	push	{r4, r5, lr}
 801a266:	4d12      	ldr	r5, [pc, #72]	; (801a2b0 <enet_phy_write_read+0x4c>)
 801a268:	4604      	mov	r4, r0
 801a26a:	6928      	ldr	r0, [r5, #16]
 801a26c:	0192      	lsls	r2, r2, #6
 801a26e:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 801a272:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 801a276:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 801a27a:	4302      	orrs	r2, r0
 801a27c:	02c9      	lsls	r1, r1, #11
 801a27e:	b289      	uxth	r1, r1
 801a280:	4322      	orrs	r2, r4
 801a282:	430a      	orrs	r2, r1
 801a284:	2c02      	cmp	r4, #2
 801a286:	bf04      	itt	eq
 801a288:	8819      	ldrheq	r1, [r3, #0]
 801a28a:	6169      	streq	r1, [r5, #20]
 801a28c:	f042 0201 	orr.w	r2, r2, #1
 801a290:	612a      	str	r2, [r5, #16]
 801a292:	4907      	ldr	r1, [pc, #28]	; (801a2b0 <enet_phy_write_read+0x4c>)
 801a294:	4a07      	ldr	r2, [pc, #28]	; (801a2b4 <enet_phy_write_read+0x50>)
 801a296:	6908      	ldr	r0, [r1, #16]
 801a298:	07c0      	lsls	r0, r0, #31
 801a29a:	d501      	bpl.n	801a2a0 <enet_phy_write_read+0x3c>
 801a29c:	3a01      	subs	r2, #1
 801a29e:	d1fa      	bne.n	801a296 <enet_phy_write_read+0x32>
 801a2a0:	690a      	ldr	r2, [r1, #16]
 801a2a2:	43d2      	mvns	r2, r2
 801a2a4:	f002 0001 	and.w	r0, r2, #1
 801a2a8:	b90c      	cbnz	r4, 801a2ae <enet_phy_write_read+0x4a>
 801a2aa:	694a      	ldr	r2, [r1, #20]
 801a2ac:	801a      	strh	r2, [r3, #0]
 801a2ae:	bd30      	pop	{r4, r5, pc}
 801a2b0:	40028000 	andmi	r8, r2, r0
 801a2b4:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

0801a2b8 <enet_phy_config>:
 801a2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a2ba:	4d26      	ldr	r5, [pc, #152]	; (801a354 <enet_phy_config+0x9c>)
 801a2bc:	2001      	movs	r0, #1
 801a2be:	692c      	ldr	r4, [r5, #16]
 801a2c0:	f7fe fcc0 	bl	8018c44 <rcu_clock_freq_get>
 801a2c4:	4b24      	ldr	r3, [pc, #144]	; (801a358 <enet_phy_config+0xa0>)
 801a2c6:	4a25      	ldr	r2, [pc, #148]	; (801a35c <enet_phy_config+0xa4>)
 801a2c8:	4403      	add	r3, r0
 801a2ca:	4293      	cmp	r3, r2
 801a2cc:	f024 041c 	bic.w	r4, r4, #28
 801a2d0:	d21f      	bcs.n	801a312 <enet_phy_config+0x5a>
 801a2d2:	f044 0408 	orr.w	r4, r4, #8
 801a2d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a2da:	612c      	str	r4, [r5, #16]
 801a2dc:	2200      	movs	r2, #0
 801a2de:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a2e2:	2101      	movs	r1, #1
 801a2e4:	f10d 0306 	add.w	r3, sp, #6
 801a2e8:	2002      	movs	r0, #2
 801a2ea:	f7ff ffbb 	bl	801a264 <enet_phy_write_read>
 801a2ee:	b350      	cbz	r0, 801a346 <enet_phy_config+0x8e>
 801a2f0:	481b      	ldr	r0, [pc, #108]	; (801a360 <enet_phy_config+0xa8>)
 801a2f2:	2200      	movs	r2, #0
 801a2f4:	f7ff fea2 	bl	801a03c <enet_delay>
 801a2f8:	2101      	movs	r1, #1
 801a2fa:	f10d 0306 	add.w	r3, sp, #6
 801a2fe:	4610      	mov	r0, r2
 801a300:	f7ff ffb0 	bl	801a264 <enet_phy_write_read>
 801a304:	b1f8      	cbz	r0, 801a346 <enet_phy_config+0x8e>
 801a306:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a30a:	43c0      	mvns	r0, r0
 801a30c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 801a310:	e01a      	b.n	801a348 <enet_phy_config+0x90>
 801a312:	4b14      	ldr	r3, [pc, #80]	; (801a364 <enet_phy_config+0xac>)
 801a314:	4a14      	ldr	r2, [pc, #80]	; (801a368 <enet_phy_config+0xb0>)
 801a316:	4403      	add	r3, r0
 801a318:	4293      	cmp	r3, r2
 801a31a:	d802      	bhi.n	801a322 <enet_phy_config+0x6a>
 801a31c:	f044 040c 	orr.w	r4, r4, #12
 801a320:	e7d9      	b.n	801a2d6 <enet_phy_config+0x1e>
 801a322:	4b12      	ldr	r3, [pc, #72]	; (801a36c <enet_phy_config+0xb4>)
 801a324:	4a12      	ldr	r2, [pc, #72]	; (801a370 <enet_phy_config+0xb8>)
 801a326:	4403      	add	r3, r0
 801a328:	4293      	cmp	r3, r2
 801a32a:	d3d4      	bcc.n	801a2d6 <enet_phy_config+0x1e>
 801a32c:	4b11      	ldr	r3, [pc, #68]	; (801a374 <enet_phy_config+0xbc>)
 801a32e:	4a12      	ldr	r2, [pc, #72]	; (801a378 <enet_phy_config+0xc0>)
 801a330:	4403      	add	r3, r0
 801a332:	4293      	cmp	r3, r2
 801a334:	d802      	bhi.n	801a33c <enet_phy_config+0x84>
 801a336:	f044 0404 	orr.w	r4, r4, #4
 801a33a:	e7cc      	b.n	801a2d6 <enet_phy_config+0x1e>
 801a33c:	4b0f      	ldr	r3, [pc, #60]	; (801a37c <enet_phy_config+0xc4>)
 801a33e:	4a10      	ldr	r2, [pc, #64]	; (801a380 <enet_phy_config+0xc8>)
 801a340:	4403      	add	r3, r0
 801a342:	4293      	cmp	r3, r2
 801a344:	d902      	bls.n	801a34c <enet_phy_config+0x94>
 801a346:	2000      	movs	r0, #0
 801a348:	b003      	add	sp, #12
 801a34a:	bd30      	pop	{r4, r5, pc}
 801a34c:	f044 0410 	orr.w	r4, r4, #16
 801a350:	e7c1      	b.n	801a2d6 <enet_phy_config+0x1e>
 801a352:	bf00      	nop
 801a354:	40028000 	andmi	r8, r2, r0
 801a358:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 801a35c:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 801a360:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 801a364:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 801a368:	017d783f 	cmneq	sp, pc, lsr r8
 801a36c:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 801a370:	02625a00 	rsbeq	r5, r2, #0, 20
 801a374:	fa0a1f00 	blx	82a1f7c <__exidx_end+0x283f50>
 801a378:	02faf07f 	rscseq	pc, sl, #127	; 0x7f
 801a37c:	f70f2e80 			; <UNDEFINED> instruction: 0xf70f2e80
 801a380:	02faf080 	rscseq	pc, sl, #128	; 0x80

0801a384 <enet_init>:
 801a384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a386:	2300      	movs	r3, #0
 801a388:	4604      	mov	r4, r0
 801a38a:	460d      	mov	r5, r1
 801a38c:	4616      	mov	r6, r2
 801a38e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a392:	f7ff ff91 	bl	801a2b8 <enet_phy_config>
 801a396:	2800      	cmp	r0, #0
 801a398:	d032      	beq.n	801a400 <enet_init+0x7c>
 801a39a:	4b39      	ldr	r3, [pc, #228]	; (801a480 <enet_init+0xfc>)
 801a39c:	4a39      	ldr	r2, [pc, #228]	; (801a484 <enet_init+0x100>)
 801a39e:	6819      	ldr	r1, [r3, #0]
 801a3a0:	400a      	ands	r2, r1
 801a3a2:	601a      	str	r2, [r3, #0]
 801a3a4:	2200      	movs	r2, #0
 801a3a6:	605a      	str	r2, [r3, #4]
 801a3a8:	609a      	str	r2, [r3, #8]
 801a3aa:	60da      	str	r2, [r3, #12]
 801a3ac:	6999      	ldr	r1, [r3, #24]
 801a3ae:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 801a3b2:	0409      	lsls	r1, r1, #16
 801a3b4:	0c09      	lsrs	r1, r1, #16
 801a3b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 801a3ba:	6199      	str	r1, [r3, #24]
 801a3bc:	4932      	ldr	r1, [pc, #200]	; (801a488 <enet_init+0x104>)
 801a3be:	61da      	str	r2, [r3, #28]
 801a3c0:	6988      	ldr	r0, [r1, #24]
 801a3c2:	4b32      	ldr	r3, [pc, #200]	; (801a48c <enet_init+0x108>)
 801a3c4:	4003      	ands	r3, r0
 801a3c6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 801a3ca:	618b      	str	r3, [r1, #24]
 801a3cc:	680b      	ldr	r3, [r1, #0]
 801a3ce:	4b30      	ldr	r3, [pc, #192]	; (801a490 <enet_init+0x10c>)
 801a3d0:	600b      	str	r3, [r1, #0]
 801a3d2:	2c01      	cmp	r4, #1
 801a3d4:	d01e      	beq.n	801a414 <enet_init+0x90>
 801a3d6:	08e3      	lsrs	r3, r4, #3
 801a3d8:	0861      	lsrs	r1, r4, #1
 801a3da:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 801a3de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a3e2:	430b      	orrs	r3, r1
 801a3e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a3e8:	2101      	movs	r1, #1
 801a3ea:	f10d 0306 	add.w	r3, sp, #6
 801a3ee:	2002      	movs	r0, #2
 801a3f0:	f7ff ff38 	bl	801a264 <enet_phy_write_read>
 801a3f4:	b158      	cbz	r0, 801a40e <enet_init+0x8a>
 801a3f6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a3fa:	f7ff fe1f 	bl	801a03c <enet_delay>
 801a3fe:	e05e      	b.n	801a4be <enet_init+0x13a>
 801a400:	4824      	ldr	r0, [pc, #144]	; (801a494 <enet_init+0x110>)
 801a402:	f7ff fe1b 	bl	801a03c <enet_delay>
 801a406:	f7ff ff57 	bl	801a2b8 <enet_phy_config>
 801a40a:	2800      	cmp	r0, #0
 801a40c:	d1c5      	bne.n	801a39a <enet_init+0x16>
 801a40e:	2000      	movs	r0, #0
 801a410:	b003      	add	sp, #12
 801a412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a414:	4f20      	ldr	r7, [pc, #128]	; (801a498 <enet_init+0x114>)
 801a416:	4614      	mov	r4, r2
 801a418:	2201      	movs	r2, #1
 801a41a:	4611      	mov	r1, r2
 801a41c:	f10d 0306 	add.w	r3, sp, #6
 801a420:	2000      	movs	r0, #0
 801a422:	f7ff ff1f 	bl	801a264 <enet_phy_write_read>
 801a426:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a42a:	f002 0204 	and.w	r2, r2, #4
 801a42e:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a432:	3401      	adds	r4, #1
 801a434:	b912      	cbnz	r2, 801a43c <enet_init+0xb8>
 801a436:	42bc      	cmp	r4, r7
 801a438:	d1ee      	bne.n	801a418 <enet_init+0x94>
 801a43a:	e7e8      	b.n	801a40e <enet_init+0x8a>
 801a43c:	42bc      	cmp	r4, r7
 801a43e:	d0e6      	beq.n	801a40e <enet_init+0x8a>
 801a440:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a444:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a448:	2101      	movs	r1, #1
 801a44a:	2200      	movs	r2, #0
 801a44c:	2002      	movs	r0, #2
 801a44e:	f7ff ff09 	bl	801a264 <enet_phy_write_read>
 801a452:	2800      	cmp	r0, #0
 801a454:	d0db      	beq.n	801a40e <enet_init+0x8a>
 801a456:	4f10      	ldr	r7, [pc, #64]	; (801a498 <enet_init+0x114>)
 801a458:	2400      	movs	r4, #0
 801a45a:	2201      	movs	r2, #1
 801a45c:	4611      	mov	r1, r2
 801a45e:	f10d 0306 	add.w	r3, sp, #6
 801a462:	2000      	movs	r0, #0
 801a464:	f7ff fefe 	bl	801a264 <enet_phy_write_read>
 801a468:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a46c:	f002 0220 	and.w	r2, r2, #32
 801a470:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a474:	3401      	adds	r4, #1
 801a476:	b98a      	cbnz	r2, 801a49c <enet_init+0x118>
 801a478:	42bc      	cmp	r4, r7
 801a47a:	d1ee      	bne.n	801a45a <enet_init+0xd6>
 801a47c:	e7c7      	b.n	801a40e <enet_init+0x8a>
 801a47e:	bf00      	nop
 801a480:	40028000 	andmi	r8, r2, r0
 801a484:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 801a488:	40029000 	andmi	r9, r2, r0
 801a48c:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 801a490:	02c16000 	sbceq	r6, r1, #0
 801a494:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 801a498:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 801a49c:	42bc      	cmp	r4, r7
 801a49e:	d0b6      	beq.n	801a40e <enet_init+0x8a>
 801a4a0:	2101      	movs	r1, #1
 801a4a2:	2210      	movs	r2, #16
 801a4a4:	2000      	movs	r0, #0
 801a4a6:	f7ff fedd 	bl	801a264 <enet_phy_write_read>
 801a4aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a4ae:	f3c3 0480 	ubfx	r4, r3, #2, #1
 801a4b2:	0799      	lsls	r1, r3, #30
 801a4b4:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 801a4b8:	d401      	bmi.n	801a4be <enet_init+0x13a>
 801a4ba:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 801a4be:	4b69      	ldr	r3, [pc, #420]	; (801a664 <enet_init+0x2e0>)
 801a4c0:	681a      	ldr	r2, [r3, #0]
 801a4c2:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 801a4c6:	4314      	orrs	r4, r2
 801a4c8:	056a      	lsls	r2, r5, #21
 801a4ca:	601c      	str	r4, [r3, #0]
 801a4cc:	d50b      	bpl.n	801a4e6 <enet_init+0x162>
 801a4ce:	681a      	ldr	r2, [r3, #0]
 801a4d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a4d4:	601a      	str	r2, [r3, #0]
 801a4d6:	4a64      	ldr	r2, [pc, #400]	; (801a668 <enet_init+0x2e4>)
 801a4d8:	6993      	ldr	r3, [r2, #24]
 801a4da:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 801a4de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801a4e2:	431d      	orrs	r5, r3
 801a4e4:	6195      	str	r5, [r2, #24]
 801a4e6:	485f      	ldr	r0, [pc, #380]	; (801a664 <enet_init+0x2e0>)
 801a4e8:	6843      	ldr	r3, [r0, #4]
 801a4ea:	431e      	orrs	r6, r3
 801a4ec:	4b5f      	ldr	r3, [pc, #380]	; (801a66c <enet_init+0x2e8>)
 801a4ee:	6046      	str	r6, [r0, #4]
 801a4f0:	681a      	ldr	r2, [r3, #0]
 801a4f2:	07d7      	lsls	r7, r2, #31
 801a4f4:	d513      	bpl.n	801a51e <enet_init+0x19a>
 801a4f6:	6801      	ldr	r1, [r0, #0]
 801a4f8:	685a      	ldr	r2, [r3, #4]
 801a4fa:	4c5d      	ldr	r4, [pc, #372]	; (801a670 <enet_init+0x2ec>)
 801a4fc:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 801a500:	4014      	ands	r4, r2
 801a502:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a506:	4321      	orrs	r1, r4
 801a508:	6001      	str	r1, [r0, #0]
 801a50a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 801a50e:	0892      	lsrs	r2, r2, #2
 801a510:	6981      	ldr	r1, [r0, #24]
 801a512:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 801a516:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 801a51a:	430a      	orrs	r2, r1
 801a51c:	6182      	str	r2, [r0, #24]
 801a51e:	681a      	ldr	r2, [r3, #0]
 801a520:	0796      	lsls	r6, r2, #30
 801a522:	d508      	bpl.n	801a536 <enet_init+0x1b2>
 801a524:	4950      	ldr	r1, [pc, #320]	; (801a668 <enet_init+0x2e4>)
 801a526:	6898      	ldr	r0, [r3, #8]
 801a528:	680a      	ldr	r2, [r1, #0]
 801a52a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 801a52e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801a532:	4302      	orrs	r2, r0
 801a534:	600a      	str	r2, [r1, #0]
 801a536:	681a      	ldr	r2, [r3, #0]
 801a538:	0755      	lsls	r5, r2, #29
 801a53a:	d508      	bpl.n	801a54e <enet_init+0x1ca>
 801a53c:	494a      	ldr	r1, [pc, #296]	; (801a668 <enet_init+0x2e4>)
 801a53e:	68d8      	ldr	r0, [r3, #12]
 801a540:	680a      	ldr	r2, [r1, #0]
 801a542:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 801a546:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 801a54a:	4302      	orrs	r2, r0
 801a54c:	600a      	str	r2, [r1, #0]
 801a54e:	681a      	ldr	r2, [r3, #0]
 801a550:	0714      	lsls	r4, r2, #28
 801a552:	d508      	bpl.n	801a566 <enet_init+0x1e2>
 801a554:	4944      	ldr	r1, [pc, #272]	; (801a668 <enet_init+0x2e4>)
 801a556:	6918      	ldr	r0, [r3, #16]
 801a558:	680a      	ldr	r2, [r1, #0]
 801a55a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801a55e:	f022 0202 	bic.w	r2, r2, #2
 801a562:	4302      	orrs	r2, r0
 801a564:	600a      	str	r2, [r1, #0]
 801a566:	681a      	ldr	r2, [r3, #0]
 801a568:	06d0      	lsls	r0, r2, #27
 801a56a:	d506      	bpl.n	801a57a <enet_init+0x1f6>
 801a56c:	493e      	ldr	r1, [pc, #248]	; (801a668 <enet_init+0x2e4>)
 801a56e:	4a41      	ldr	r2, [pc, #260]	; (801a674 <enet_init+0x2f0>)
 801a570:	6988      	ldr	r0, [r1, #24]
 801a572:	4002      	ands	r2, r0
 801a574:	6958      	ldr	r0, [r3, #20]
 801a576:	4302      	orrs	r2, r0
 801a578:	618a      	str	r2, [r1, #24]
 801a57a:	681a      	ldr	r2, [r3, #0]
 801a57c:	0691      	lsls	r1, r2, #26
 801a57e:	d511      	bpl.n	801a5a4 <enet_init+0x220>
 801a580:	4839      	ldr	r0, [pc, #228]	; (801a668 <enet_init+0x2e4>)
 801a582:	699a      	ldr	r2, [r3, #24]
 801a584:	6981      	ldr	r1, [r0, #24]
 801a586:	4c3c      	ldr	r4, [pc, #240]	; (801a678 <enet_init+0x2f4>)
 801a588:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 801a58c:	4014      	ands	r4, r2
 801a58e:	f021 0104 	bic.w	r1, r1, #4
 801a592:	4321      	orrs	r1, r4
 801a594:	6181      	str	r1, [r0, #24]
 801a596:	6801      	ldr	r1, [r0, #0]
 801a598:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801a59c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a5a0:	430a      	orrs	r2, r1
 801a5a2:	6002      	str	r2, [r0, #0]
 801a5a4:	681a      	ldr	r2, [r3, #0]
 801a5a6:	0652      	lsls	r2, r2, #25
 801a5a8:	d506      	bpl.n	801a5b8 <enet_init+0x234>
 801a5aa:	492e      	ldr	r1, [pc, #184]	; (801a664 <enet_init+0x2e0>)
 801a5ac:	69d8      	ldr	r0, [r3, #28]
 801a5ae:	69ca      	ldr	r2, [r1, #28]
 801a5b0:	0c52      	lsrs	r2, r2, #17
 801a5b2:	0452      	lsls	r2, r2, #17
 801a5b4:	4302      	orrs	r2, r0
 801a5b6:	61ca      	str	r2, [r1, #28]
 801a5b8:	681a      	ldr	r2, [r3, #0]
 801a5ba:	0617      	lsls	r7, r2, #24
 801a5bc:	d517      	bpl.n	801a5ee <enet_init+0x26a>
 801a5be:	4c29      	ldr	r4, [pc, #164]	; (801a664 <enet_init+0x2e0>)
 801a5c0:	6a1a      	ldr	r2, [r3, #32]
 801a5c2:	69a0      	ldr	r0, [r4, #24]
 801a5c4:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 801a5c8:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 801a5cc:	0400      	lsls	r0, r0, #16
 801a5ce:	0c00      	lsrs	r0, r0, #16
 801a5d0:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 801a5d4:	4301      	orrs	r1, r0
 801a5d6:	4824      	ldr	r0, [pc, #144]	; (801a668 <enet_init+0x2e4>)
 801a5d8:	61a1      	str	r1, [r4, #24]
 801a5da:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 801a5de:	0a12      	lsrs	r2, r2, #8
 801a5e0:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 801a5e4:	f002 0277 	and.w	r2, r2, #119	; 0x77
 801a5e8:	430a      	orrs	r2, r1
 801a5ea:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 801a5ee:	681a      	ldr	r2, [r3, #0]
 801a5f0:	05d6      	lsls	r6, r2, #23
 801a5f2:	bf42      	ittt	mi
 801a5f4:	4a1b      	ldrmi	r2, [pc, #108]	; (801a664 <enet_init+0x2e0>)
 801a5f6:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 801a5f8:	6091      	strmi	r1, [r2, #8]
 801a5fa:	681a      	ldr	r2, [r3, #0]
 801a5fc:	0595      	lsls	r5, r2, #22
 801a5fe:	bf42      	ittt	mi
 801a600:	4a18      	ldrmi	r2, [pc, #96]	; (801a664 <enet_init+0x2e0>)
 801a602:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 801a604:	60d1      	strmi	r1, [r2, #12]
 801a606:	681a      	ldr	r2, [r3, #0]
 801a608:	0554      	lsls	r4, r2, #21
 801a60a:	d508      	bpl.n	801a61e <enet_init+0x29a>
 801a60c:	4915      	ldr	r1, [pc, #84]	; (801a664 <enet_init+0x2e0>)
 801a60e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801a610:	684a      	ldr	r2, [r1, #4]
 801a612:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 801a616:	f022 0206 	bic.w	r2, r2, #6
 801a61a:	4302      	orrs	r2, r0
 801a61c:	604a      	str	r2, [r1, #4]
 801a61e:	681a      	ldr	r2, [r3, #0]
 801a620:	0510      	lsls	r0, r2, #20
 801a622:	d508      	bpl.n	801a636 <enet_init+0x2b2>
 801a624:	490f      	ldr	r1, [pc, #60]	; (801a664 <enet_init+0x2e0>)
 801a626:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801a628:	680a      	ldr	r2, [r1, #0]
 801a62a:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 801a62e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801a632:	4302      	orrs	r2, r0
 801a634:	600a      	str	r2, [r1, #0]
 801a636:	681a      	ldr	r2, [r3, #0]
 801a638:	04d1      	lsls	r1, r2, #19
 801a63a:	d506      	bpl.n	801a64a <enet_init+0x2c6>
 801a63c:	4909      	ldr	r1, [pc, #36]	; (801a664 <enet_init+0x2e0>)
 801a63e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801a640:	680a      	ldr	r2, [r1, #0]
 801a642:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 801a646:	4302      	orrs	r2, r0
 801a648:	600a      	str	r2, [r1, #0]
 801a64a:	681a      	ldr	r2, [r3, #0]
 801a64c:	0492      	lsls	r2, r2, #18
 801a64e:	d506      	bpl.n	801a65e <enet_init+0x2da>
 801a650:	4904      	ldr	r1, [pc, #16]	; (801a664 <enet_init+0x2e0>)
 801a652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a654:	680a      	ldr	r2, [r1, #0]
 801a656:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 801a65a:	4313      	orrs	r3, r2
 801a65c:	600b      	str	r3, [r1, #0]
 801a65e:	2001      	movs	r0, #1
 801a660:	e6d6      	b.n	801a410 <enet_init+0x8c>
 801a662:	bf00      	nop
 801a664:	40028000 	andmi	r8, r2, r0
 801a668:	40029000 	andmi	r9, r2, r0
 801a66c:	2000fdf4 	strdcs	pc, [r0], -r4
 801a670:	02000080 	andeq	r0, r0, #128	; 0x80
 801a674:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c
 801a678:	01000004 	tsteq	r0, r4

0801a67c <enet_txfifo_flush>:
 801a67c:	4b06      	ldr	r3, [pc, #24]	; (801a698 <enet_txfifo_flush+0x1c>)
 801a67e:	4807      	ldr	r0, [pc, #28]	; (801a69c <enet_txfifo_flush+0x20>)
 801a680:	699a      	ldr	r2, [r3, #24]
 801a682:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801a686:	619a      	str	r2, [r3, #24]
 801a688:	699a      	ldr	r2, [r3, #24]
 801a68a:	02d2      	lsls	r2, r2, #11
 801a68c:	d502      	bpl.n	801a694 <enet_txfifo_flush+0x18>
 801a68e:	3801      	subs	r0, #1
 801a690:	d1fa      	bne.n	801a688 <enet_txfifo_flush+0xc>
 801a692:	4770      	bx	lr
 801a694:	2001      	movs	r0, #1
 801a696:	4770      	bx	lr
 801a698:	40029000 	andmi	r9, r2, r0
 801a69c:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

0801a6a0 <enet_tx_enable>:
 801a6a0:	4a06      	ldr	r2, [pc, #24]	; (801a6bc <enet_tx_enable+0x1c>)
 801a6a2:	b508      	push	{r3, lr}
 801a6a4:	6813      	ldr	r3, [r2, #0]
 801a6a6:	f043 0308 	orr.w	r3, r3, #8
 801a6aa:	6013      	str	r3, [r2, #0]
 801a6ac:	f7ff ffe6 	bl	801a67c <enet_txfifo_flush>
 801a6b0:	4a03      	ldr	r2, [pc, #12]	; (801a6c0 <enet_tx_enable+0x20>)
 801a6b2:	6993      	ldr	r3, [r2, #24]
 801a6b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a6b8:	6193      	str	r3, [r2, #24]
 801a6ba:	bd08      	pop	{r3, pc}
 801a6bc:	40028000 	andmi	r8, r2, r0
 801a6c0:	40029000 	andmi	r9, r2, r0

0801a6c4 <enet_enable>:
 801a6c4:	b508      	push	{r3, lr}
 801a6c6:	f7ff ffeb 	bl	801a6a0 <enet_tx_enable>
 801a6ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a6ce:	f7ff bdbb 	b.w	801a248 <enet_rx_enable>
	...

0801a6d4 <enet_desc_information_get>:
 801a6d4:	2905      	cmp	r1, #5
 801a6d6:	d820      	bhi.n	801a71a <enet_desc_information_get+0x46>
 801a6d8:	e8df f001 	tbb	[pc, r1]
 801a6dc:	0309191b 	movweq	r1, #39195	; 0x991b
 801a6e0:	68401907 	stmdavs	r0, {r0, r1, r2, r8, fp, ip}^
 801a6e4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801a6e8:	4770      	bx	lr
 801a6ea:	88c0      	ldrh	r0, [r0, #6]
 801a6ec:	e7fa      	b.n	801a6e4 <enet_desc_information_get+0x10>
 801a6ee:	6802      	ldr	r2, [r0, #0]
 801a6f0:	f3c2 430d 	ubfx	r3, r2, #16, #14
 801a6f4:	2b04      	cmp	r3, #4
 801a6f6:	d913      	bls.n	801a720 <enet_desc_information_get+0x4c>
 801a6f8:	490a      	ldr	r1, [pc, #40]	; (801a724 <enet_desc_information_get+0x50>)
 801a6fa:	6809      	ldr	r1, [r1, #0]
 801a6fc:	0189      	lsls	r1, r1, #6
 801a6fe:	f1a3 0004 	sub.w	r0, r3, #4
 801a702:	d50e      	bpl.n	801a722 <enet_desc_information_get+0x4e>
 801a704:	f012 0f20 	tst.w	r2, #32
 801a708:	bf18      	it	ne
 801a70a:	4618      	movne	r0, r3
 801a70c:	4770      	bx	lr
 801a70e:	6880      	ldr	r0, [r0, #8]
 801a710:	4770      	bx	lr
 801a712:	6800      	ldr	r0, [r0, #0]
 801a714:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 801a718:	4770      	bx	lr
 801a71a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a71e:	4770      	bx	lr
 801a720:	2000      	movs	r0, #0
 801a722:	4770      	bx	lr
 801a724:	40028000 	andmi	r8, r2, r0

0801a728 <enet_rxframe_drop>:
 801a728:	4815      	ldr	r0, [pc, #84]	; (801a780 <enet_rxframe_drop+0x58>)
 801a72a:	4916      	ldr	r1, [pc, #88]	; (801a784 <enet_rxframe_drop+0x5c>)
 801a72c:	6802      	ldr	r2, [r0, #0]
 801a72e:	b510      	push	{r4, lr}
 801a730:	6854      	ldr	r4, [r2, #4]
 801a732:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801a736:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 801a73a:	6013      	str	r3, [r2, #0]
 801a73c:	680b      	ldr	r3, [r1, #0]
 801a73e:	d009      	beq.n	801a754 <enet_rxframe_drop+0x2c>
 801a740:	b12b      	cbz	r3, 801a74e <enet_rxframe_drop+0x26>
 801a742:	68da      	ldr	r2, [r3, #12]
 801a744:	6002      	str	r2, [r0, #0]
 801a746:	681a      	ldr	r2, [r3, #0]
 801a748:	b1ba      	cbz	r2, 801a77a <enet_rxframe_drop+0x52>
 801a74a:	600a      	str	r2, [r1, #0]
 801a74c:	bd10      	pop	{r4, pc}
 801a74e:	68d3      	ldr	r3, [r2, #12]
 801a750:	6003      	str	r3, [r0, #0]
 801a752:	e7fb      	b.n	801a74c <enet_rxframe_drop+0x24>
 801a754:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 801a758:	4c0b      	ldr	r4, [pc, #44]	; (801a788 <enet_rxframe_drop+0x60>)
 801a75a:	d006      	beq.n	801a76a <enet_rxframe_drop+0x42>
 801a75c:	68e2      	ldr	r2, [r4, #12]
 801a75e:	6002      	str	r2, [r0, #0]
 801a760:	2b00      	cmp	r3, #0
 801a762:	d0f3      	beq.n	801a74c <enet_rxframe_drop+0x24>
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	600b      	str	r3, [r1, #0]
 801a768:	e7f0      	b.n	801a74c <enet_rxframe_drop+0x24>
 801a76a:	6824      	ldr	r4, [r4, #0]
 801a76c:	3210      	adds	r2, #16
 801a76e:	f3c4 0484 	ubfx	r4, r4, #2, #5
 801a772:	4422      	add	r2, r4
 801a774:	6002      	str	r2, [r0, #0]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d0e8      	beq.n	801a74c <enet_rxframe_drop+0x24>
 801a77a:	3310      	adds	r3, #16
 801a77c:	e7f3      	b.n	801a766 <enet_rxframe_drop+0x3e>
 801a77e:	bf00      	nop
 801a780:	2000fdec 	andcs	pc, r0, ip, ror #27
 801a784:	2000fde4 	andcs	pc, r0, r4, ror #27
 801a788:	40029000 	andmi	r9, r2, r0

0801a78c <enet_rxframe_size_get>:
 801a78c:	b508      	push	{r3, lr}
 801a78e:	4b10      	ldr	r3, [pc, #64]	; (801a7d0 <enet_rxframe_size_get+0x44>)
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	2b00      	cmp	r3, #0
 801a796:	db19      	blt.n	801a7cc <enet_rxframe_size_get+0x40>
 801a798:	f403 4203 	and.w	r2, r3, #33536	; 0x8300
 801a79c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 801a7a0:	d003      	beq.n	801a7aa <enet_rxframe_size_get+0x1e>
 801a7a2:	f7ff ffc1 	bl	801a728 <enet_rxframe_drop>
 801a7a6:	2001      	movs	r0, #1
 801a7a8:	bd08      	pop	{r3, pc}
 801a7aa:	f003 0221 	and.w	r2, r3, #33	; 0x21
 801a7ae:	2a21      	cmp	r2, #33	; 0x21
 801a7b0:	d0f7      	beq.n	801a7a2 <enet_rxframe_size_get+0x16>
 801a7b2:	4908      	ldr	r1, [pc, #32]	; (801a7d4 <enet_rxframe_size_get+0x48>)
 801a7b4:	6809      	ldr	r1, [r1, #0]
 801a7b6:	f3c3 420d 	ubfx	r2, r3, #16, #14
 801a7ba:	0189      	lsls	r1, r1, #6
 801a7bc:	f1a2 0004 	sub.w	r0, r2, #4
 801a7c0:	d5f2      	bpl.n	801a7a8 <enet_rxframe_size_get+0x1c>
 801a7c2:	f013 0f20 	tst.w	r3, #32
 801a7c6:	bf18      	it	ne
 801a7c8:	4610      	movne	r0, r2
 801a7ca:	e7ed      	b.n	801a7a8 <enet_rxframe_size_get+0x1c>
 801a7cc:	2000      	movs	r0, #0
 801a7ce:	e7eb      	b.n	801a7a8 <enet_rxframe_size_get+0x1c>
 801a7d0:	2000fdec 	andcs	pc, r0, ip, ror #27
 801a7d4:	40028000 	andmi	r8, r2, r0

0801a7d8 <enet_initpara_reset>:
 801a7d8:	4b08      	ldr	r3, [pc, #32]	; (801a7fc <enet_initpara_reset+0x24>)
 801a7da:	2200      	movs	r2, #0
 801a7dc:	e9c3 2200 	strd	r2, r2, [r3]
 801a7e0:	e9c3 2202 	strd	r2, r2, [r3, #8]
 801a7e4:	e9c3 2204 	strd	r2, r2, [r3, #16]
 801a7e8:	e9c3 2206 	strd	r2, r2, [r3, #24]
 801a7ec:	e9c3 2208 	strd	r2, r2, [r3, #32]
 801a7f0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 801a7f4:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 801a7f8:	639a      	str	r2, [r3, #56]	; 0x38
 801a7fa:	4770      	bx	lr
 801a7fc:	2000fdf4 	strdcs	pc, [r0], -r4

0801a800 <enet_deinit>:
 801a800:	b508      	push	{r3, lr}
 801a802:	f240 4019 	movw	r0, #1049	; 0x419
 801a806:	f7fe f9fc 	bl	8018c02 <rcu_periph_reset_enable>
 801a80a:	f240 4019 	movw	r0, #1049	; 0x419
 801a80e:	f7fe f9fa 	bl	8018c06 <rcu_periph_reset_disable>
 801a812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a816:	f7ff bfdf 	b.w	801a7d8 <enet_initpara_reset>
	...

0801a81c <i2c_clock_config>:
 801a81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a81e:	4605      	mov	r5, r0
 801a820:	2002      	movs	r0, #2
 801a822:	460c      	mov	r4, r1
 801a824:	4617      	mov	r7, r2
 801a826:	f7fe fa0d 	bl	8018c44 <rcu_clock_freq_get>
 801a82a:	4a26      	ldr	r2, [pc, #152]	; (801a8c4 <i2c_clock_config+0xa8>)
 801a82c:	686e      	ldr	r6, [r5, #4]
 801a82e:	4603      	mov	r3, r0
 801a830:	4825      	ldr	r0, [pc, #148]	; (801a8c8 <i2c_clock_config+0xac>)
 801a832:	fbb3 f0f0 	udiv	r0, r3, r0
 801a836:	4293      	cmp	r3, r2
 801a838:	bf94      	ite	ls
 801a83a:	4601      	movls	r1, r0
 801a83c:	2132      	movhi	r1, #50	; 0x32
 801a83e:	4a23      	ldr	r2, [pc, #140]	; (801a8cc <i2c_clock_config+0xb0>)
 801a840:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 801a844:	430e      	orrs	r6, r1
 801a846:	4294      	cmp	r4, r2
 801a848:	606e      	str	r6, [r5, #4]
 801a84a:	d811      	bhi.n	801a870 <i2c_clock_config+0x54>
 801a84c:	3001      	adds	r0, #1
 801a84e:	2831      	cmp	r0, #49	; 0x31
 801a850:	bf86      	itte	hi
 801a852:	2232      	movhi	r2, #50	; 0x32
 801a854:	622a      	strhi	r2, [r5, #32]
 801a856:	6228      	strls	r0, [r5, #32]
 801a858:	0064      	lsls	r4, r4, #1
 801a85a:	fbb3 f4f4 	udiv	r4, r3, r4
 801a85e:	2c04      	cmp	r4, #4
 801a860:	69ea      	ldr	r2, [r5, #28]
 801a862:	bf38      	it	cc
 801a864:	2404      	movcc	r4, #4
 801a866:	f3c4 040b 	ubfx	r4, r4, #0, #12
 801a86a:	4314      	orrs	r4, r2
 801a86c:	61ec      	str	r4, [r5, #28]
 801a86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a870:	4a17      	ldr	r2, [pc, #92]	; (801a8d0 <i2c_clock_config+0xb4>)
 801a872:	4294      	cmp	r4, r2
 801a874:	d8fb      	bhi.n	801a86e <i2c_clock_config+0x52>
 801a876:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801a87a:	4351      	muls	r1, r2
 801a87c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a880:	fbb1 f1f2 	udiv	r1, r1, r2
 801a884:	3101      	adds	r1, #1
 801a886:	6229      	str	r1, [r5, #32]
 801a888:	b9a7      	cbnz	r7, 801a8b4 <i2c_clock_config+0x98>
 801a88a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a88e:	fbb3 f4f4 	udiv	r4, r3, r4
 801a892:	69eb      	ldr	r3, [r5, #28]
 801a894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801a898:	61eb      	str	r3, [r5, #28]
 801a89a:	f3c4 030b 	ubfx	r3, r4, #0, #12
 801a89e:	b90b      	cbnz	r3, 801a8a4 <i2c_clock_config+0x88>
 801a8a0:	f044 0401 	orr.w	r4, r4, #1
 801a8a4:	69eb      	ldr	r3, [r5, #28]
 801a8a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a8aa:	61eb      	str	r3, [r5, #28]
 801a8ac:	69eb      	ldr	r3, [r5, #28]
 801a8ae:	4323      	orrs	r3, r4
 801a8b0:	61eb      	str	r3, [r5, #28]
 801a8b2:	e7dc      	b.n	801a86e <i2c_clock_config+0x52>
 801a8b4:	2219      	movs	r2, #25
 801a8b6:	4354      	muls	r4, r2
 801a8b8:	fbb3 f4f4 	udiv	r4, r3, r4
 801a8bc:	69eb      	ldr	r3, [r5, #28]
 801a8be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a8c2:	e7e9      	b.n	801a898 <i2c_clock_config+0x7c>
 801a8c4:	02faf07f 	rscseq	pc, sl, #127	; 0x7f
 801a8c8:	000f4240 	andeq	r4, pc, r0, asr #4
 801a8cc:	000186a0 	andeq	r8, r1, r0, lsr #13
 801a8d0:	00061a80 	andeq	r1, r6, r0, lsl #21

0801a8d4 <i2c_ack_config>:
 801a8d4:	6803      	ldr	r3, [r0, #0]
 801a8d6:	2901      	cmp	r1, #1
 801a8d8:	bf0c      	ite	eq
 801a8da:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 801a8de:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 801a8e2:	6003      	str	r3, [r0, #0]
 801a8e4:	4770      	bx	lr

0801a8e6 <i2c_ackpos_config>:
 801a8e6:	6803      	ldr	r3, [r0, #0]
 801a8e8:	b919      	cbnz	r1, 801a8f2 <i2c_ackpos_config+0xc>
 801a8ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a8ee:	6003      	str	r3, [r0, #0]
 801a8f0:	4770      	bx	lr
 801a8f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a8f6:	e7fa      	b.n	801a8ee <i2c_ackpos_config+0x8>

0801a8f8 <i2c_master_addressing>:
 801a8f8:	3202      	adds	r2, #2
 801a8fa:	bf0c      	ite	eq
 801a8fc:	f021 0101 	biceq.w	r1, r1, #1
 801a900:	f041 0101 	orrne.w	r1, r1, #1
 801a904:	6101      	str	r1, [r0, #16]
 801a906:	4770      	bx	lr

0801a908 <i2c_enable>:
 801a908:	6803      	ldr	r3, [r0, #0]
 801a90a:	f043 0301 	orr.w	r3, r3, #1
 801a90e:	6003      	str	r3, [r0, #0]
 801a910:	4770      	bx	lr

0801a912 <i2c_start_on_bus>:
 801a912:	6803      	ldr	r3, [r0, #0]
 801a914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a918:	6003      	str	r3, [r0, #0]
 801a91a:	4770      	bx	lr

0801a91c <i2c_stop_on_bus>:
 801a91c:	6803      	ldr	r3, [r0, #0]
 801a91e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801a922:	6003      	str	r3, [r0, #0]
 801a924:	4770      	bx	lr

0801a926 <i2c_data_transmit>:
 801a926:	6101      	str	r1, [r0, #16]
 801a928:	4770      	bx	lr

0801a92a <i2c_data_receive>:
 801a92a:	6900      	ldr	r0, [r0, #16]
 801a92c:	b2c0      	uxtb	r0, r0
 801a92e:	4770      	bx	lr

0801a930 <i2c_flag_get>:
 801a930:	098b      	lsrs	r3, r1, #6
 801a932:	f001 011f 	and.w	r1, r1, #31
 801a936:	581a      	ldr	r2, [r3, r0]
 801a938:	2301      	movs	r3, #1
 801a93a:	408b      	lsls	r3, r1
 801a93c:	4213      	tst	r3, r2
 801a93e:	bf14      	ite	ne
 801a940:	2001      	movne	r0, #1
 801a942:	2000      	moveq	r0, #0
 801a944:	4770      	bx	lr

0801a946 <i2c_flag_clear>:
 801a946:	f240 5301 	movw	r3, #1281	; 0x501
 801a94a:	4299      	cmp	r1, r3
 801a94c:	b510      	push	{r4, lr}
 801a94e:	d102      	bne.n	801a956 <i2c_flag_clear+0x10>
 801a950:	6943      	ldr	r3, [r0, #20]
 801a952:	6983      	ldr	r3, [r0, #24]
 801a954:	bd10      	pop	{r4, pc}
 801a956:	098c      	lsrs	r4, r1, #6
 801a958:	2201      	movs	r2, #1
 801a95a:	5823      	ldr	r3, [r4, r0]
 801a95c:	f001 011f 	and.w	r1, r1, #31
 801a960:	408a      	lsls	r2, r1
 801a962:	ea23 0302 	bic.w	r3, r3, r2
 801a966:	5023      	str	r3, [r4, r0]
 801a968:	e7f4      	b.n	801a954 <i2c_flag_clear+0xe>
	...

0801a96c <syscfg_enet_phy_interface_config>:
 801a96c:	4a04      	ldr	r2, [pc, #16]	; (801a980 <syscfg_enet_phy_interface_config+0x14>)
 801a96e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 801a972:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801a976:	4318      	orrs	r0, r3
 801a978:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
 801a97c:	4770      	bx	lr
 801a97e:	bf00      	nop
 801a980:	40013000 	andmi	r3, r1, r0

0801a984 <mac_address_get(unsigned char*)>:
 801a984:	4a07      	ldr	r2, [pc, #28]	; (801a9a4 <mac_address_get(unsigned char*)+0x20>)
 801a986:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	; 0xa10
 801a98a:	f8d2 2a14 	ldr.w	r2, [r2, #2580]	; 0xa14
 801a98e:	7042      	strb	r2, [r0, #1]
 801a990:	0e1a      	lsrs	r2, r3, #24
 801a992:	7082      	strb	r2, [r0, #2]
 801a994:	0c1a      	lsrs	r2, r3, #16
 801a996:	2102      	movs	r1, #2
 801a998:	70c2      	strb	r2, [r0, #3]
 801a99a:	0a1a      	lsrs	r2, r3, #8
 801a99c:	7001      	strb	r1, [r0, #0]
 801a99e:	7102      	strb	r2, [r0, #4]
 801a9a0:	7143      	strb	r3, [r0, #5]
 801a9a2:	4770      	bx	lr
 801a9a4:	1fff7000 	svcne	0x00ff7000

0801a9a8 <__popcountsi2>:
 801a9a8:	0843      	lsrs	r3, r0, #1
 801a9aa:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 801a9ae:	1ac0      	subs	r0, r0, r3
 801a9b0:	0883      	lsrs	r3, r0, #2
 801a9b2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 801a9b6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 801a9ba:	4418      	add	r0, r3
 801a9bc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 801a9c0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 801a9c4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 801a9c8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 801a9cc:	0e00      	lsrs	r0, r0, #24
 801a9ce:	4770      	bx	lr

Disassembly of section .rodata:

0801a9d0 <vtable for DisplayHandler-0x11c>:
 801a9d0:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801a9d4:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801a9e0:	03020100 	movweq	r0, #8448	; 0x2100
 801a9e4:	08070604 	stmdaeq	r7, {r2, r9, sl}
 801a9e8:	00000009 	andeq	r0, r0, r9
 801a9ec:	03020100 	movweq	r0, #8448	; 0x2100
 801a9f0:	3a732504 	bcc	9ce3e08 <__exidx_end+0x1cc5ddc>
 801a9f4:	31007525 	tstcc	r0, r5, lsr #10
 801a9f8:	32313a32 	eorscc	r3, r1, #204800	; 0x32000
 801a9fc:	0038323a 	eorseq	r3, r8, sl, lsr r2
 801aa00:	2074634f 	rsbscs	r6, r4, pc, asr #6
 801aa04:	32203131 	eorcc	r3, r0, #1073741836	; 0x4000000c
 801aa08:	00323230 	eorseq	r3, r2, r0, lsr r2
 801aa0c:	32335b1b 	eorscc	r5, r3, #27648	; 0x6c00
 801aa10:	7472416d 	ldrbtvc	r4, [r2], #-365	; 0xfffffe93
 801aa14:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 801aa18:	50203420 	eorpl	r3, r0, r0, lsr #8
 801aa1c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 801aa20:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801aa24:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 801a85c <i2c_clock_config+0x40>
 801aa28:	2072656c 	rsbscs	r6, r2, ip, ror #10
 801aa2c:	7836317b 	ldmdavc	r6!, {r0, r1, r3, r4, r5, r6, r8, ip, sp}
 801aa30:	55203420 	strpl	r3, [r0, #-1056]!	; 0xfffffbe0
 801aa34:	6576696e 	ldrbvs	r6, [r6, #-2414]!	; 0xfffff692
 801aa38:	73657372 	cmnvc	r5, #-939524095	; 0xc8000001
 801aa3c:	202f207d 	eorcs	r2, pc, sp, ror r0	; <UNPREDICTABLE>
 801aa40:	44207832 	strtmi	r7, [r0], #-2098	; 0xfffff7ce
 801aa44:	5b1b584d 	blpl	86f0b80 <__exidx_end+0x6d2b54>
 801aa48:	006d3733 	rsbeq	r3, sp, r3, lsr r7
 801aa4c:	6f635f2e 	svcvs	0x00635f2e
 801aa50:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801aa54:	685f2e00 	ldmdavs	pc, {r9, sl, fp, sp}^	; <UNPREDICTABLE>
 801aa58:	00707474 	rsbseq	r7, r0, r4, ror r4
 801aa5c:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 801aa60:	7472413d 	ldrbtvc	r4, [r2], #-317	; 0xfffffec3
 801aa64:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 801aa68:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 801aa6c:	44206c65 	strtmi	r6, [r0], #-3173	; 0xfffff39b
 801aa70:	4100584d 	tstmi	r0, sp, asr #16
 801aa74:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 801aa78:	50207465 	eorpl	r7, r0, r5, ror #8
 801aa7c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 801aa80:	2d752520 	cfldr64cs	mvdx2, [r5, #-128]!	; 0xffffff80
 801aa84:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 801aa88:	4d442064 	stclmi	0, cr2, [r4, #-400]	; 0xfffffe70
 801aa8c:	75252058 	strvc	r2, [r5, #-88]!	; 0xffffffa8
 801aa90:	33444700 	movtcc	r4, #18176	; 0x4700
 801aa94:	35344632 	ldrcc	r4, [r4, #-1586]!	; 0xfffff9ce
 801aa98:	20495630 	subcs	r5, r9, r0, lsr r6
 801aa9c:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 801aaa0:	4d442d6c 	stclmi	13, cr2, [r4, #-432]	; 0xfffffe50
 801aaa4:	72410058 	subvc	r0, r1, #88	; 0x58
 801aaa8:	74654e74 	strbtvc	r4, [r5], #-3700	; 0xfffff18c
 801aaac:	50203420 	eorpl	r3, r0, r0, lsr #8
 801aab0:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 801aab4:	78752520 	ldmdavc	r5!, {r5, r8, sl, sp}^
 801aab8:	25007525 	strcs	r7, [r0, #-1317]	; 0xfffffadb
 801aabc:	64253a73 	strtvs	r3, [r5], #-2675	; 0xfffff58d
 801aac0:	64254720 	strtvs	r4, [r5], #-1824	; 0xfffff8e0
 801aac4:	00732520 	rsbseq	r2, r3, r0, lsr #10
 801aac8:	21786d64 	cmncs	r8, r4, ror #26
 801aacc:	65726200 	ldrbvs	r6, [r2, #-512]!	; 0xfffffe00
 801aad0:	00236b61 	eoreq	r6, r3, r1, ror #22
 801aad4:	2362616d 	cmncs	r2, #1073741851	; 0x4000001b
 801aad8:	66657200 	strbtvs	r7, [r5], -r0, lsl #4
 801aadc:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801aae0:	6c730023 	ldclvs	0, cr0, [r3], #-140	; 0xffffff74
 801aae4:	2373746f 	cmncs	r3, #1862270976	; 0x6f000000
 801aae8:	00000000 	andeq	r0, r0, r0

0801aaec <vtable for DisplayHandler>:
	...
 801aaf4:	0800907f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, ip, pc}
 801aaf8:	080091cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, ip, pc}
 801aafc:	080092bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, ip, pc}

0801ab00 <vtable for DisplayUdfHandler>:
	...
 801ab08:	08009081 	stmdaeq	r0, {r0, r7, ip, pc}
 801ab0c:	080091e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, ip, pc}
 801ab10:	08009279 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, ip, pc}
 801ab14:	08009083 	stmdaeq	r0, {r0, r1, r7, ip, pc}
 801ab18:	08009265 	stmdaeq	r0, {r0, r2, r5, r6, r9, ip, pc}
 801ab1c:	08009251 	stmdaeq	r0, {r0, r4, r6, r9, ip, pc}
 801ab20:	0800923d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, ip, pc}
 801ab24:	08009229 	stmdaeq	r0, {r0, r3, r5, r9, ip, pc}
 801ab28:	08009215 	stmdaeq	r0, {r0, r2, r4, r9, ip, pc}
 801ab2c:	08009085 	stmdaeq	r0, {r0, r2, r7, ip, pc}
 801ab30:	08009087 	stmdaeq	r0, {r0, r1, r2, r7, ip, pc}

0801ab34 <vtable for LightSet64with4>:
	...
 801ab3c:	08009089 	stmdaeq	r0, {r0, r3, r7, ip, pc}
 801ab40:	080091d7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, r8, ip, pc}
 801ab44:	0800908b 	stmdaeq	r0, {r0, r1, r3, r7, ip, pc}
 801ab48:	080090ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, ip, pc}
 801ab4c:	080090cf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, ip, pc}
 801ab50:	08009103 	stmdaeq	r0, {r0, r1, r8, ip, pc}
 801ab54:	0800907d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, ip, pc}
 801ab58:	08009125 	stmdaeq	r0, {r0, r2, r5, r8, ip, pc}
 801ab5c:	08009143 	stmdaeq	r0, {r0, r1, r6, r8, ip, pc}
 801ab60:	08009147 	stmdaeq	r0, {r0, r1, r2, r6, r8, ip, pc}
 801ab64:	0800914d 	stmdaeq	r0, {r0, r2, r3, r6, r8, ip, pc}
 801ab68:	08009151 	stmdaeq	r0, {r0, r4, r6, r8, ip, pc}

0801ab6c <vtable for ArtNetTriggerHandler>:
	...
 801ab74:	08009155 	stmdaeq	r0, {r0, r2, r4, r6, r8, ip, pc}
 801ab78:	080091ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, ip, pc}
 801ab7c:	080095a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, sl, ip, pc}

0801ab80 <vtable for PixelDmxStartStop>:
	...
 801ab88:	08009157 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, ip, pc}
 801ab8c:	080091fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, ip, pc}
 801ab90:	08009159 	stmdaeq	r0, {r0, r3, r4, r6, r8, ip, pc}
 801ab94:	08009169 	stmdaeq	r0, {r0, r3, r5, r6, r8, ip, pc}

0801ab98 <vtable for RDMNetDevice>:
	...
 801aba0:	0800930d 	stmdaeq	r0, {r0, r2, r3, r8, r9, ip, pc}
 801aba4:	08009335 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, ip, pc}
 801aba8:	0800ff1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, sl, fp, ip, sp, lr, pc}
 801abac:	0800ff1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, r9, sl, fp, ip, sp, lr, pc}
 801abb0:	0800919d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, ip, pc}
 801abb4:	080091b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, ip, pc}
 801abb8:	0800928d 	stmdaeq	r0, {r0, r2, r3, r7, r9, ip, pc}
 801abbc:	ffffff34 			; <UNDEFINED> instruction: 0xffffff34
 801abc0:	00000000 	andeq	r0, r0, r0
 801abc4:	0800932d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, ip, pc}
 801abc8:	08009347 	stmdaeq	r0, {r0, r1, r2, r6, r8, r9, ip, pc}
 801abcc:	080091a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, ip, pc}
 801abd0:	080091c1 	stmdaeq	r0, {r0, r6, r7, r8, ip, pc}
 801abd4:	080092a1 	stmdaeq	r0, {r0, r5, r7, r9, ip, pc}

0801abd8 <vtable for FactoryDefaults>:
	...
 801abe0:	080091c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, ip, pc}
 801abe4:	08009207 	stmdaeq	r0, {r0, r1, r2, r9, ip, pc}
 801abe8:	08009655 	stmdaeq	r0, {r0, r2, r4, r6, r9, sl, ip, pc}

0801abec <CSWTCH.136>:
 801abec:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 801abf0:	 	eorcc	r3, lr, r6, asr #2

0801abf1 <SOFTWARE_VERSION>:
 801abf1:	00302e31 	eorseq	r2, r0, r1, lsr lr

0801abf5 <gamma10_0>:
 801abf5:	03020100 	movweq	r0, #8448	; 0x2100
 801abf9:	07060504 	streq	r0, [r6, -r4, lsl #10]
 801abfd:	0b0a0908 	bleq	829d025 <__exidx_end+0x27eff9>
 801ac01:	0f0e0d0c 	svceq	0x000e0d0c
 801ac05:	13121110 	tstne	r2, #16, 2
 801ac09:	17161514 			; <UNDEFINED> instruction: 0x17161514
 801ac0d:	1b1a1918 	blne	86a1075 <__exidx_end+0x683049>
 801ac11:	1f1e1d1c 	svcne	0x001e1d1c
 801ac15:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801ac19:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 801ac1d:	2b2a2928 	blcs	8aa50c5 <__exidx_end+0xa87099>
 801ac21:	2f2e2d2c 	svccs	0x002e2d2c
 801ac25:	33323130 	teqcc	r2, #48, 2
 801ac29:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801ac2d:	3b3a3938 	blcc	8ea9115 <__exidx_end+0xe8b0e9>
 801ac31:	3f3e3d3c 	svccc	0x003e3d3c
 801ac35:	43424140 	movtmi	r4, #8512	; 0x2140
 801ac39:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801ac3d:	4b4a4948 	blmi	92ad165 <__exidx_end+0x128f139>
 801ac41:	4f4e4d4c 	svcmi	0x004e4d4c
 801ac45:	53525150 	cmppl	r2, #80, 2
 801ac49:	57565554 			; <UNDEFINED> instruction: 0x57565554
 801ac4d:	5b5a5958 	blpl	96b11b5 <__exidx_end+0x1693189>
 801ac51:	5f5e5d5c 	svcpl	0x005e5d5c
 801ac55:	63626160 	cmnvs	r2, #96, 2
 801ac59:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 801ac5d:	6b6a6968 	blvs	9ab5205 <__exidx_end+0x1a971d9>
 801ac61:	6f6e6d6c 	svcvs	0x006e6d6c
 801ac65:	73727170 	cmnvc	r2, #112, 2
 801ac69:	77767574 			; <UNDEFINED> instruction: 0x77767574
 801ac6d:	7b7a7978 	blvc	9eb9255 <__exidx_end+0x1e9b229>
 801ac71:	7f7e7d7c 	svcvc	0x007e7d7c
 801ac75:	83828180 	orrhi	r8, r2, #128, 2
 801ac79:	87868584 	strhi	r8, [r6, r4, lsl #11]
 801ac7d:	8b8a8988 	blhi	62bd2a5 <__stack_size+0x62b92a5>
 801ac81:	8f8e8d8c 	svchi	0x008e8d8c
 801ac85:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 801ac89:	97969594 			; <UNDEFINED> instruction: 0x97969594
 801ac8d:	9b9a9998 	blls	66c12f5 <__stack_size+0x66bd2f5>
 801ac91:	9f9e9d9c 	svcls	0x009e9d9c
 801ac95:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 801ac99:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 801ac9d:	abaaa9a8 	blge	6ac5345 <__stack_size+0x6ac1345>
 801aca1:	afaeadac 	svcge	0x00aeadac
 801aca5:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 801aca9:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 801acad:	bbbab9b8 	bllt	6ec9395 <__stack_size+0x6ec5395>
 801acb1:	bfbebdbc 	svclt	0x00bebdbc
 801acb5:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 801acb9:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 801acbd:	cbcac9c8 	blgt	72cd3e5 <__stack_size+0x72c93e5>
 801acc1:	cfcecdcc 	svcgt	0x00cecdcc
 801acc5:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 801acc9:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 801accd:	dbdad9d8 	blle	76d1435 <__stack_size+0x76cd435>
 801acd1:	dfdedddc 	svcle	0x00dedddc
 801acd5:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 801acd9:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 801acdd:	ebeae9e8 	bl	7ad5485 <__stack_size+0x7ad1485>
 801ace1:	efeeedec 	svc	0x00eeedec
 801ace5:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 801ace9:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 801aced:	fbfaf9f8 	blx	7ed94d7 <__stack_size+0x7ed54d7>
 801acf1:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

0801acf5 <SOFTWARE_VERSION>:
 801acf5:	00302e31 	eorseq	r2, r0, r1, lsr lr
 801acf9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801acfd:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801ad01:	2c64252e 	cfstr64cs	mvdx2, [r4], #-184	; 0xffffff48
 801ad05:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 801ad09:	64252c73 	strtvs	r2, [r5], #-3187	; 0xfffff38d
 801ad0d:	0a73252c 	beq	9ce41c5 <__exidx_end+0x1cc6199>
 801ad11:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 801ad15:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801ad19:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801ad1d:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 801ad21:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 801ad25:	4f000a64 	svcmi	0x00000a64
 801ad29:	664f006e 	strbvs	r0, [pc], -lr, rrx
 801ad2d:	69640066 	stmdbvs	r4!, {r1, r2, r5, r6}^
 801ad31:	616c7073 	smcvs	50947	; 0xc703
 801ad35:	73253a79 			; <UNDEFINED> instruction: 0x73253a79
 801ad39:	6674000a 	ldrbtvs	r0, [r4], -sl
 801ad3d:	253a7074 	ldrcs	r7, [sl, #-116]!	; 0xffffff8c
 801ad41:	76000a73 			; <UNDEFINED> instruction: 0x76000a73
 801ad45:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801ad49:	253a6e6f 	ldrcs	r6, [sl, #-3695]!	; 0xfffff191
 801ad4d:	70750073 	rsbsvc	r0, r5, r3, ror r0
 801ad51:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 801ad55:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 801ad59:	54000a73 	strpl	r0, [r0], #-2675	; 0xfffff58d
 801ad5d:	20505446 	subscs	r5, r0, r6, asr #8
 801ad61:	20206e4f 	eorcs	r6, r0, pc, asr #28
 801ad65:	6265525b 	rsbvs	r5, r5, #-1342177275	; 0xb0000005
 801ad69:	5d746f6f 	ldclpl	15, cr6, [r4, #-444]!	; 0xfffffe44
 801ad6d:	54465400 	strbpl	r5, [r6], #-1024	; 0xfffffc00
 801ad71:	664f2050 			; <UNDEFINED> instruction: 0x664f2050
 801ad75:	525b2066 	subspl	r2, fp, #102	; 0x66
 801ad79:	6f6f6265 	svcvs	0x006f6265
 801ad7d:	00205d74 	eoreq	r5, r0, r4, ror sp
 801ad81:	4f525245 	svcmi	0x00525245
 801ad85:	673f2352 			; <UNDEFINED> instruction: 0x673f2352
 801ad89:	000a7465 	andeq	r7, sl, r5, ror #8
 801ad8d:	70746674 	rsbsvc	r6, r4, r4, ror r6
 801ad91:	69640023 	stmdbvs	r4!, {r0, r1, r5}^
 801ad95:	616c7073 	smcvs	50947	; 0xc703
 801ad99:	45002379 	strmi	r2, [r0, #-889]	; 0xfffffc87
 801ad9d:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 801ada1:	000a2123 	andeq	r2, sl, r3, lsr #2
 801ada5:	4f525245 	svcmi	0x00525245
 801ada9:	0a3f2352 	beq	8fe3af9 <__exidx_end+0xfc5acd>
 801adad:	62657200 	rsbvs	r7, r5, #0, 4
 801adb1:	23746f6f 	cmncs	r4, #444	; 0x1bc
 801adb5:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 801adb9:	00237473 	eoreq	r7, r3, r3, ror r4
 801adbd:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801adc1:	75002a23 	strvc	r2, [r0, #-2595]	; 0xfffff5dd
 801adc5:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 801adc9:	76002365 	strvc	r2, [r0], -r5, ror #6
 801adcd:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801add1:	00236e6f 	eoreq	r6, r3, pc, ror #28
 801add5:	23746567 	cmncs	r4, #432013312	; 0x19c00000
 801add9:	63616600 	cmnvs	r1, #0, 12
 801addd:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801ade1:	 	tstmi	r0, r3, lsr #6

0801ade4 <s_Node>:
 801ade4:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801ade8:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801adf4:	41730000 	cmnmi	r3, r0
 801adf8:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 801adfc:	31332e31 	teqcc	r3, r1, lsr lr
	...
 801ae08:	2043534f 	subcs	r5, r3, pc, asr #6
 801ae0c:	76726553 			; <UNDEFINED> instruction: 0x76726553
 801ae10:	00007265 	andeq	r7, r0, r5, ror #4
 801ae14:	00000000 	andeq	r0, r0, r0
 801ae18:	544c0000 	strbpl	r0, [ip], #-0
 801ae1c:	00000043 	andeq	r0, r0, r3, asr #32
	...
 801ae2c:	2043534f 	subcs	r5, r3, pc, asr #6
 801ae30:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 801ae34:	0000746e 	andeq	r7, r0, lr, ror #8
 801ae38:	00000000 	andeq	r0, r0, r0
 801ae3c:	44520000 	ldrbmi	r0, [r2], #-0
 801ae40:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 801ae44:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 801ae48:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 801ae4c:	0000796c 	andeq	r7, r0, ip, ror #18
 801ae50:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 801ae54:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 801ae60:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 801ae64:	00004944 	andeq	r4, r0, r4, asr #18
	...
 801ae74:	00504444 	subseq	r4, r0, r4, asr #8
	...
 801ae84:	69500000 	ldmdbvs	r0, {}^	; <UNPREDICTABLE>
 801ae88:	506c6578 	rsbpl	r6, ip, r8, ror r5
 801ae8c:	65687375 	strbvs	r7, [r8, #-885]!	; 0xfffffc8b
 801ae90:	00000072 	andeq	r0, r0, r2, ror r0
 801ae94:	00000000 	andeq	r0, r0, r0
 801ae98:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

0801aeaa <s_Output>:
 801aeaa:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 801aeb6:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 801aec2:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 801aec6:	00726f74 	rsbseq	r6, r2, r4, ror pc
 801aeca:	00000000 	andeq	r0, r0, r0
 801aece:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 801aed2:	0000006c 	andeq	r0, r0, ip, rrx
 801aed6:	00000000 	andeq	r0, r0, r0
 801aeda:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 801aede:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 801aee2:	00000000 	andeq	r0, r0, r0
 801aee6:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 801aef2:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801aef6:	00006769 	andeq	r6, r0, r9, ror #14
 801aefa:	00000000 	andeq	r0, r0, r0
 801aefe:	70657453 	rsbvc	r7, r5, r3, asr r4
 801af02:	00726570 	rsbseq	r6, r2, r0, ror r5
 801af06:	00000000 	andeq	r0, r0, r0
 801af0a:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 801af0e:	00007265 	andeq	r7, r0, r5, ror #4
 801af12:	00000000 	andeq	r0, r0, r0
 801af16:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801af1a:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801af1e:	00000000 	andeq	r0, r0, r0
 801af22:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 801af26:	00006c61 	andeq	r6, r0, r1, ror #24
 801af2a:	00000000 	andeq	r0, r0, r0
 801af2e:	20424752 	subcs	r4, r2, r2, asr r7
 801af32:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 801af36:	0000006c 	andeq	r0, r0, ip, rrx
	...

0801af3c <RemoteConfig::s_GET>:
 801af3c:	0800b4a1 	stmdaeq	r0, {r0, r5, r7, sl, ip, sp, pc}
 801af40:	00000000 	andeq	r0, r0, r0
 801af44:	0801adae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, sl, fp, sp, pc}
 801af48:	00000008 	andeq	r0, r0, r8
 801af4c:	0800a8d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, sp, pc}
 801af50:	00000000 	andeq	r0, r0, r0
 801af54:	0801adb7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, sl, fp, sp, pc}
 801af58:	00000005 	andeq	r0, r0, r5
 801af5c:	0800a8d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, sp, pc}
 801af60:	00000000 	andeq	r0, r0, r0
 801af64:	0801adbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sl, fp, sp, pc}
 801af68:	00000006 	andeq	r0, r0, r6
 801af6c:	0800aa89 	stmdaeq	r0, {r0, r3, r7, r9, fp, sp, pc}
 801af70:	00000000 	andeq	r0, r0, r0
 801af74:	0801adc4 	stmdaeq	r1, {r2, r6, r7, r8, sl, fp, sp, pc}
 801af78:	00000007 	andeq	r0, r0, r7
 801af7c:	0800aa49 	stmdaeq	r0, {r0, r3, r6, r9, fp, sp, pc}
 801af80:	00000000 	andeq	r0, r0, r0
 801af84:	0801adcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, fp, sp, pc}
 801af88:	00000008 	andeq	r0, r0, r8
 801af8c:	0800a9a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, fp, sp, pc}
 801af90:	00000000 	andeq	r0, r0, r0
 801af94:	0801ad93 	stmdaeq	r1, {r0, r1, r4, r7, r8, sl, fp, sp, pc}
 801af98:	00000008 	andeq	r0, r0, r8
 801af9c:	0800ad5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, sl, fp, sp, pc}
 801afa0:	00000000 	andeq	r0, r0, r0
 801afa4:	0801add5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, sl, fp, sp, pc}
 801afa8:	00010004 	andeq	r0, r1, r4
 801afac:	0800a9f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, fp, sp, pc}
 801afb0:	00000000 	andeq	r0, r0, r0
 801afb4:	0801ad8d 	stmdaeq	r1, {r0, r2, r3, r7, r8, sl, fp, sp, pc}
 801afb8:	00000005 	andeq	r0, r0, r5
 801afbc:	0800b191 	stmdaeq	r0, {r0, r4, r7, r8, ip, sp, pc}
 801afc0:	00000000 	andeq	r0, r0, r0
 801afc4:	0801adda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, sl, fp, sp, pc}
 801afc8:	00000009 	andeq	r0, r0, r9

0801afcc <RemoteConfig::s_SET>:
 801afcc:	0800ab35 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, fp, sp, pc}
 801afd0:	00000000 	andeq	r0, r0, r0
 801afd4:	0801ad8d 	stmdaeq	r1, {r0, r2, r3, r7, r8, sl, fp, sp, pc}
 801afd8:	00010005 	andeq	r0, r1, r5
 801afdc:	0800ab0d 	stmdaeq	r0, {r0, r2, r3, r8, r9, fp, sp, pc}
 801afe0:	00000000 	andeq	r0, r0, r0
 801afe4:	0801ad93 	stmdaeq	r1, {r0, r1, r4, r7, r8, sl, fp, sp, pc}
 801afe8:	00010008 	andeq	r0, r1, r8
 801afec:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801aff0:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 801aff4:	73252300 			; <UNDEFINED> instruction: 0x73252300
 801aff8:	0a64253d 	beq	99244f4 <__exidx_end+0x19064c8>
 801affc:	73252200 			; <UNDEFINED> instruction: 0x73252200
 801b000:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801b004:	002c2273 	eoreq	r2, ip, r3, ror r2
 801b008:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 801b00c:	000a7325 	andeq	r7, sl, r5, lsr #6
 801b010:	6f626552 	svcvs	0x00626552
 801b014:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 801b018:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 801b01c:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 801b020:	6f6f6265 	svcvs	0x006f6265
 801b024:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 801b028:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 801b02c:	6f637200 	svcvs	0x00637200
 801b030:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801b034:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801b038:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 801b03c:	6b726f77 	blvs	9cb6e20 <__exidx_end+0x1c98df4>
 801b040:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801b044:	73696400 	cmnvc	r9, #0, 8
 801b048:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801b04c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801b050:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 801b054:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 801b058:	00747874 	rsbseq	r7, r4, r4, ror r8
 801b05c:	31333165 	teqcc	r3, r5, ror #2
 801b060:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801b064:	72617000 	rsbvc	r7, r1, #0
 801b068:	2e736d61 	cdpcs	13, 7, cr6, cr3, cr1, {3}
 801b06c:	00747874 	rsbseq	r7, r4, r4, ror r8
 801b070:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801b074:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801b078:	00747874 	rsbseq	r7, r4, r4, ror r8

0801b07c <RemoteConfig::s_TXT>:
 801b07c:	0800ad65 	stmdaeq	r0, {r0, r2, r5, r6, r8, sl, fp, sp, pc}
 801b080:	00000000 	andeq	r0, r0, r0
 801b084:	0800b071 	stmdaeq	r0, {r0, r4, r5, r6, ip, sp, pc}
 801b088:	00000000 	andeq	r0, r0, r0
 801b08c:	0801b02d 	stmdaeq	r1, {r0, r2, r3, r5, ip, sp, pc}
 801b090:	0000000b 	andeq	r0, r0, fp
 801b094:	0000000c 	andeq	r0, r0, ip
 801b098:	0800ad95 	stmdaeq	r0, {r0, r2, r4, r7, r8, sl, fp, sp, pc}
 801b09c:	00000000 	andeq	r0, r0, r0
 801b0a0:	0800b0a1 	stmdaeq	r0, {r0, r5, r7, ip, sp, pc}
 801b0a4:	00000000 	andeq	r0, r0, r0
 801b0a8:	0801b039 	stmdaeq	r1, {r0, r3, r4, r5, ip, sp, pc}
 801b0ac:	0000000b 	andeq	r0, r0, fp
 801b0b0:	00000000 	andeq	r0, r0, r0
 801b0b4:	0800ae81 	stmdaeq	r0, {r0, r7, r9, sl, fp, sp, pc}
 801b0b8:	00000000 	andeq	r0, r0, r0
 801b0bc:	0800b169 	stmdaeq	r0, {r0, r3, r5, r6, r8, ip, sp, pc}
 801b0c0:	00000000 	andeq	r0, r0, r0
 801b0c4:	0801b045 	stmdaeq	r1, {r0, r2, r6, ip, sp, pc}
 801b0c8:	0000000b 	andeq	r0, r0, fp
 801b0cc:	0000000f 	andeq	r0, r0, pc
 801b0d0:	0800adc5 	stmdaeq	r0, {r0, r2, r6, r7, r8, sl, fp, sp, pc}
 801b0d4:	00000000 	andeq	r0, r0, r0
 801b0d8:	0800b0c9 	stmdaeq	r0, {r0, r3, r6, r7, ip, sp, pc}
 801b0dc:	00000000 	andeq	r0, r0, r0
 801b0e0:	0801b051 	stmdaeq	r1, {r0, r4, r6, ip, sp, pc}
 801b0e4:	0000000a 	andeq	r0, r0, sl
 801b0e8:	00000001 	andeq	r0, r0, r1
 801b0ec:	0800adf5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl, fp, sp, pc}
 801b0f0:	00000000 	andeq	r0, r0, r0
 801b0f4:	0800b0f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, ip, sp, pc}
 801b0f8:	00000000 	andeq	r0, r0, r0
 801b0fc:	0801b05c 	stmdaeq	r1, {r2, r3, r4, r6, ip, sp, pc}
 801b100:	00000008 	andeq	r0, r0, r8
 801b104:	00000004 	andeq	r0, r0, r4
 801b108:	0800ae25 	stmdaeq	r0, {r0, r2, r5, r9, sl, fp, sp, pc}
 801b10c:	00000000 	andeq	r0, r0, r0
 801b110:	0800b119 	stmdaeq	r0, {r0, r3, r4, r8, ip, sp, pc}
 801b114:	00000000 	andeq	r0, r0, r0
 801b118:	0801b065 	stmdaeq	r1, {r0, r2, r5, r6, ip, sp, pc}
 801b11c:	0000000a 	andeq	r0, r0, sl
 801b120:	00000002 	andeq	r0, r0, r2
 801b124:	0800ae51 	stmdaeq	r0, {r0, r4, r6, r9, sl, fp, sp, pc}
 801b128:	00000000 	andeq	r0, r0, r0
 801b12c:	0800b141 	stmdaeq	r0, {r0, r6, r8, ip, sp, pc}
 801b130:	00000000 	andeq	r0, r0, r0
 801b134:	0801b070 	stmdaeq	r1, {r4, r5, r6, ip, sp, pc}
 801b138:	0000000b 	andeq	r0, r0, fp
 801b13c:	00000003 	andeq	r0, r0, r3
 801b140:	00544547 	subseq	r4, r4, r7, asr #10
 801b144:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 801b148:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 801b14c:	0a200050 	beq	881b294 <__exidx_end+0x7fd268>
 801b150:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 801b154:	43003a00 	movwmi	r3, #2560	; 0xa00
 801b158:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 801b15c:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 801b160:	00657079 	rsbeq	r7, r5, r9, ror r0
 801b164:	61003b20 	tstvs	r0, r0, lsr #22
 801b168:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 801b16c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 801b170:	6a2f6e6f 	bvs	8bf6b34 <__exidx_end+0xbd8b08>
 801b174:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 801b178:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 801b17c:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 801b180:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 801b184:	2f006874 	svccs	0x00006874
 801b188:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 801b18c:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 801b190:	2f006c6d 	svccs	0x00006c6d
 801b194:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 801b198:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 801b19c:	2f007373 	svccs	0x00007373
 801b1a0:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 801b1a4:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 801b1a8:	736a2f00 	cmnvc	sl, #0, 30
 801b1ac:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 801b1b0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801b1b4:	72657600 	rsbvc	r7, r5, #0, 12
 801b1b8:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 801b1bc:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 801b1c0:	00656d69 	rsbeq	r6, r5, r9, ror #26
 801b1c4:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801b1c8:	0079616c 	rsbseq	r6, r9, ip, ror #2
 801b1cc:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801b1d0:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801b1d4:	6a2f0079 	bvs	8bdb3c0 <__exidx_end+0xbbd394>
 801b1d8:	2f6e6f73 	svccs	0x006e6f73
 801b1dc:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801b1e0:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 801b1e4:	6f6f6265 	svcvs	0x006f6265
 801b1e8:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 801b1ec:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 801b1f0:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 801b1f4:	434f4421 	movtmi	r4, #62497	; 0xf421
 801b1f8:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 801b1fc:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 801b200:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 801b204:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801b208:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 801b20c:	3e646165 	powccsz	f6, f4, f5
 801b210:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 801b214:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 801b218:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 801b21c:	742f3c74 	strtvc	r3, [pc], #-3188	; 801b224 <RemoteConfig::s_TXT+0x1a8>
 801b220:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 801b224:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801b228:	3e646165 	powccsz	f6, f4, f5
 801b22c:	6f623c0a 	svcvs	0x00623c0a
 801b230:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 801b234:	4f3e3168 	svcmi	0x003e3168
 801b238:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801b23c:	2f3c3e31 	svccs	0x003c3e31
 801b240:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b244:	2f3c0a3e 	svccs	0x003c0a3e
 801b248:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801b24c:	42000a3e 	andmi	r0, r0, #253952	; 0x3e000
 801b250:	52206461 	eorpl	r6, r0, #1627389952	; 0x61000000
 801b254:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 801b258:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
 801b25c:	4620746f 	strtmi	r7, [r0], -pc, ror #8
 801b260:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 801b264:	71655200 	cmnvc	r5, r0, lsl #4
 801b268:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 801b26c:	746e4520 	strbtvc	r4, [lr], #-1312	; 0xfffffae0
 801b270:	20797469 	rsbscs	r7, r9, r9, ror #8
 801b274:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 801b278:	6772614c 	ldrbvs	r6, [r2, -ip, asr #2]!
 801b27c:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
 801b280:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 801b284:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 801b288:	6f542049 	svcvs	0x00542049
 801b28c:	6f4c206f 	svcvs	0x004c206f
 801b290:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 801b294:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 801b298:	206c616e 	rsbcs	r6, ip, lr, ror #2
 801b29c:	76726553 			; <UNDEFINED> instruction: 0x76726553
 801b2a0:	45207265 	strmi	r7, [r0, #-613]!	; 0xfffffd9b
 801b2a4:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 801b2a8:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 801b2ac:	20646f68 	rsbcs	r6, r4, r8, ror #30
 801b2b0:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801b2b4:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 801b2b8:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 801b2bc:	00646574 	rsbeq	r6, r4, r4, ror r5
 801b2c0:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 801b2c4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801b2c8:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801b2cc:	70707553 	rsbsvc	r7, r0, r3, asr r5
 801b2d0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
 801b2d4:	6e550064 	cdpvs	0, 5, cr0, cr5, cr4, {3}
 801b2d8:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 801b2dc:	7245206e 	subvc	r2, r5, #110	; 0x6e
 801b2e0:	00726f72 	rsbseq	r6, r2, r2, ror pc
 801b2e4:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 801b2e8:	434f4421 	movtmi	r4, #62497	; 0xf421
 801b2ec:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 801b2f0:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 801b2f4:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 801b2f8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801b2fc:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 801b300:	3e646165 	powccsz	f6, f4, f5
 801b304:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 801b308:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 801b30c:	73252075 			; <UNDEFINED> instruction: 0x73252075
 801b310:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801b314:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 801b318:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 801b31c:	0a3e6461 	beq	8fb44a8 <__exidx_end+0xf9647c>
 801b320:	646f623c 	strbtvs	r6, [pc], #-572	; 801b328 <RemoteConfig::s_TXT+0x2ac>
 801b324:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 801b328:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 801b32c:	31682f3c 	cmncc	r8, ip, lsr pc
 801b330:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 801b334:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801b338:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801b33c:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801b340:	5448000a 	strbpl	r0, [r8], #-10
 801b344:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 801b348:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 801b34c:	73252075 			; <UNDEFINED> instruction: 0x73252075
 801b350:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 801b354:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 801b358:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801b35c:	6f430a0d 	svcvs	0x00430a0d
 801b360:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 801b364:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 801b368:	203a6570 	eorscs	r6, sl, r0, ror r5
 801b36c:	0a0d7325 	beq	8378008 <__exidx_end+0x359fdc>
 801b370:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 801b374:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 801b378:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 801b37c:	203a6874 	eorscs	r6, sl, r4, ror r8
 801b380:	0a0d7525 	beq	837881c <__exidx_end+0x35a7f0>
 801b384:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 801b388:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801b38c:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 801b390:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 801b394:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 801b398:	4447000a 	strbmi	r0, [r7], #-10
 801b39c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 801b3a0:	49563035 	ldmdbmi	r6, {r0, r2, r4, r5, ip, sp}^
	...

0801b3a5 <contentType>:
 801b3a5:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801b3a9:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 801b3ad:	0000006c 	andeq	r0, r0, ip, rrx
	...
 801b3c5:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801b3c9:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 801b3e5:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801b3e9:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 801b3ed:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 801b3f1:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 801b405:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 801b409:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 801b40d:	2f6e6f69 	svccs	0x006e6f69
 801b411:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

0801b425 <RemoteConfigConst::PARAMS_DISABLE>:
 801b425:	61736964 	cmnvs	r3, r4, ror #18
 801b429:	00656c62 	rsbeq	r6, r5, r2, ror #24

0801b42d <RemoteConfigConst::PARAMS_FILE_NAME>:
 801b42d:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 801b431:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 801b435:	00747874 	rsbseq	r7, r4, r4, ror r8

0801b439 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 801b439:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801b43d:	5f79616c 	svcpl	0x0079616c
 801b441:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

0801b446 <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 801b446:	61736964 	cmnvs	r3, r4, ror #18
 801b44a:	5f656c62 	svcpl	0x00656c62
 801b44e:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 801b452:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

0801b454 <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 801b454:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801b458:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 801b45c:	6f6f6265 	svcvs	0x006f6265
 801b460:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

0801b462 <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 801b462:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801b466:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 801af02 <s_Output+0x58>
 801b46a:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 801b46e:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

0801b470 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 801b470:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801b474:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 801b478:	6f746361 	svcvs	0x00746361
 801b47c:	7b007972 	blvc	8039a4c <__exidx_end+0x1ba20>
 801b480:	73696c22 	cmnvc	r9, #8704	; 0x2200
 801b484:	7b3a2274 	blvc	8ea3e5c <__exidx_end+0xe85e30>
 801b488:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 801b48c:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 801b490:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801b494:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801b498:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 801b49c:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801b4a0:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801b4a4:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 801b4a8:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 801b4ac:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 801b4b0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801b4b4:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801b4b8:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 801b4bc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801b4c0:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 801b4c4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801b4c8:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801b4cc:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 801b4d0:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801b4d4:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 801b4d8:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 801b4dc:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 801b4e0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801b4e4:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 801b4e8:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 801b4ec:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 801b4f0:	616f6222 	cmnvs	pc, r2, lsr #4
 801b4f4:	3a226472 	bcc	88b46c4 <__exidx_end+0x896698>
 801b4f8:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801b4fc:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 801b500:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 801b504:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 801b508:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 801b50c:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 801b510:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 801b514:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 801b518:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 801b51c:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 801b520:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 801b524:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 801b528:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 801b52c:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 801b530:	7b000a7d 	blvc	801df2c <vtable for Ssd1306+0x3c>
 801b534:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 801b538:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801b53c:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 801b540:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 801b544:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801b548:	7b3a2273 	blvc	8ea3f1c <__exidx_end+0xe85ef0>
 801b54c:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 801b550:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 801b554:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 801b558:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 801b55c:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 801b560:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 801b564:	61726170 	cmnvs	r2, r0, ror r1
 801b568:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 801b56c:	3a227478 	bcc	88b8754 <__exidx_end+0x89a728>
 801b570:	584d4422 	stmdapl	sp, {r1, r5, sl, lr}^
 801b574:	61725420 	cmnvs	r2, r0, lsr #8
 801b578:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 801b57c:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 801b580:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801b584:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801b588:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 801b58c:	4d44223a 	sfmmi	f2, 2, [r4, #-232]	; 0xffffff18
 801b590:	69502058 	ldmdbvs	r0, {r3, r4, r6, sp}^
 801b594:	226c6578 	rsbcs	r6, ip, #120, 10	; 0x1e000000
 801b598:	6964222c 	stmdbvs	r4!, {r2, r3, r5, r9, sp}^
 801b59c:	616c7073 	smcvs	50947	; 0xc703
 801b5a0:	78742e79 	ldmdavc	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp}^
 801b5a4:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 801b5a8:	70736944 	rsbsvc	r6, r3, r4, asr #18
 801b5ac:	2079616c 	rsbscs	r6, r9, ip, ror #2
 801b5b0:	22464455 	subcs	r4, r6, #1426063360	; 0x55000000
 801b5b4:	656e222c 	strbvs	r2, [lr, #-556]!	; 0xfffffdd4
 801b5b8:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 801b5bc:	78742e6b 	ldmdavc	r4!, {r0, r1, r3, r5, r6, r9, sl, fp, sp}^
 801b5c0:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 801b5c4:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 801b5c8:	226b726f 	rsbcs	r7, fp, #-268435450	; 0xf0000006
 801b5cc:	6372222c 	cmnvs	r2, #44, 4	; 0xc0000002
 801b5d0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801b5d4:	78742e67 	ldmdavc	r4!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}^
 801b5d8:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 801b5dc:	6f6d6552 	svcvs	0x006d6552
 801b5e0:	63206574 			; <UNDEFINED> instruction: 0x63206574
 801b5e4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801b5e8:	61727567 	cmnvs	r2, r7, ror #10
 801b5ec:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801b5f0:	007d7d22 	rsbseq	r7, sp, r2, lsr #26

0801b5f4 <index_html>:
 801b5f4:	4f44213c 	svcmi	0x0044213c
 801b5f8:	50595443 	subspl	r5, r9, r3, asr #8
 801b5fc:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 801b600:	0a3e6c6d 	beq	8fb67bc <__exidx_end+0xf98790>
 801b604:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 801b608:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 801b60c:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 801b610:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 801b614:	6b6e696c 	blvs	9bb5bcc <__exidx_end+0x1b97ba0>
 801b618:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 801b61c:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 801b620:	73656c79 	cmnvc	r5, #30976	; 0x7900
 801b624:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 801b628:	72682022 	rsbvc	r2, r8, #34	; 0x22
 801b62c:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 801b630:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 801b634:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 801b638:	20227373 	eorcs	r7, r2, r3, ror r3
 801b63c:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 801b640:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 801b644:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 801b648:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 801b64c:	0a3e656c 	beq	8fb4c04 <__exidx_end+0xf96bd8>
 801b650:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 801b654:	0a3e6461 	beq	8fb47e0 <__exidx_end+0xf967b4>
 801b658:	646f623c 	strbtvs	r6, [pc], #-572	; 801b660 <index_html+0x6c>
 801b65c:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 801b660:	6165683c 	cmnvs	r5, ip, lsr r8
 801b664:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 801b668:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 801b66c:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 801b670:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 801b674:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 801b678:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 801b67c:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801b680:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 801b684:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 801b688:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 801b68c:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 801b690:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 801b694:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801b698:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 801b69c:	6f746365 	svcvs	0x00746365
 801b6a0:	20227972 	eorcs	r7, r2, r2, ror r9
 801b6a4:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801b6a8:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 801b6ac:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 801b6b0:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801b6b4:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 801b6b8:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 801b6bc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 801b6c0:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 801b6c4:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 801b6c8:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 801b6cc:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 801b6d0:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 801b6d4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801b6d8:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 801b6dc:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 801b6e0:	20227478 	eorcs	r7, r2, r8, ror r4
 801b6e4:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801b6e8:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 801b6ec:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 801b6f0:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 801b6f4:	0a3e656c 	beq	8fb4cac <__exidx_end+0xf96c80>
 801b6f8:	6f663c09 	svcvs	0x00663c09
 801b6fc:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 801b700:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 801b704:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 801b708:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 801b70c:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801b710:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 801b714:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 801b718:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 801b71c:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 801b720:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 801b724:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 801b728:	20747069 	rsbscs	r7, r4, r9, rrx
 801b72c:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 801b730:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 801b734:	6a2e7865 	bvs	8bb98d0 <__exidx_end+0xb9b8a4>
 801b738:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 801b73c:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 801b740:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801b744:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 801b748:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801b74c:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801b750:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801b754:	 	svcvs	0x0062000a

0801b756 <styles_css>:
 801b756:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b75a:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801b75e:	63616220 	cmnvs	r1, #32, 4
 801b762:	6f72676b 	svcvs	0x0072676b
 801b766:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 801b76a:	6f6c6f63 	svcvs	0x006c6f63
 801b76e:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801b772:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 801b776:	30322c30 	eorscc	r2, r2, r0, lsr ip
 801b77a:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 801b77e:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801b782:	6f6c6f63 	svcvs	0x006c6f63
 801b786:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801b78a:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 801b78e:	202c3535 	eorcs	r3, ip, r5, lsr r5
 801b792:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 801b796:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 801b79a:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 801b79e:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 801b7a2:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801b7a6:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801b7aa:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801b7ae:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 801b7b2:	0a3b7865 	beq	8ef994e <__exidx_end+0xedb922>
 801b7b6:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 801b7ba:	0a7b2069 	beq	9ee3966 <__exidx_end+0x1ec593a>
 801b7be:	696c2020 	stmdbvs	ip!, {r5, sp}^
 801b7c2:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 801b7c6:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 801b7ca:	6f6e203a 	svcvs	0x006e203a
 801b7ce:	0a3b656e 	beq	8ef4d8e <__exidx_end+0xed6d62>
 801b7d2:	616d2020 	cmnvs	sp, r0, lsr #32
 801b7d6:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 801b7da:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 801b7de:	70352078 	eorsvc	r2, r5, r8, ror r0
 801b7e2:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 801b7e6:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 801b7ea:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 801b7ee:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801b7f2:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801b7f6:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801b7fa:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 801b7fe:	0a3b7865 	beq	8ef999a <__exidx_end+0xedb96e>
 801b802:	6f622020 	svcvs	0x00622020
 801b806:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 801b80a:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 801b80e:	3a737569 	bcc	9cf8dba <__exidx_end+0x1cdad8e>
 801b812:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 801b816:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801b81a:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801b81e:	203a7265 	eorscs	r7, sl, r5, ror #4
 801b822:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b826:	72672064 	rsbvc	r2, r7, #100	; 0x64
 801b82a:	31207965 			; <UNDEFINED> instruction: 0x31207965
 801b82e:	0a3b7870 	beq	8ef99f6 <__exidx_end+0xedb9ca>
 801b832:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 801b836:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 801b83a:	0a7b2072 	beq	9ee3a0a <__exidx_end+0x1ec59de>
 801b83e:	69642020 	stmdbvs	r4!, {r5, sp}^
 801b842:	616c7073 	smcvs	50947	; 0xc703
 801b846:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 801b84a:	3b78656c 	blcc	9e34e02 <__exidx_end+0x1e16dd6>
 801b84e:	6a20200a 	bvs	882387e <__exidx_end+0x805852>
 801b852:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 801b856:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 801b85a:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 801b85e:	203a746e 	eorscs	r7, sl, lr, ror #8
 801b862:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 801b866:	0a3b7265 	beq	8ef8202 <__exidx_end+0xeda1d6>
 801b86a:	6f622020 	svcvs	0x00622020
 801b86e:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 801b872:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 801b876:	3a737569 	bcc	9cf8e22 <__exidx_end+0x1cdadf6>
 801b87a:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 801b87e:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801b882:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801b886:	203a7265 	eorscs	r7, sl, r5, ror #4
 801b88a:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b88e:	72672064 	rsbvc	r2, r7, #100	; 0x64
 801b892:	31207965 			; <UNDEFINED> instruction: 0x31207965
 801b896:	0a3b7870 	beq	8ef9a5e <__exidx_end+0xedba32>
 801b89a:	00000a7d 	andeq	r0, r0, sp, ror sl
	...

0801b8a0 <HttpContent>:
 801b8a0:	0801b194 	stmdaeq	r1, {r2, r4, r7, r8, ip, sp, pc}
 801b8a4:	0801b756 	stmdaeq	r1, {r1, r2, r4, r6, r8, r9, sl, ip, sp, pc}
 801b8a8:	0801b1a0 	stmdaeq	r1, {r5, r7, r8, ip, sp, pc}
 801b8ac:	0801b8b8 	stmdaeq	r1, {r3, r4, r5, r7, fp, ip, sp, pc}
 801b8b0:	0801b188 	stmdaeq	r1, {r3, r7, r8, ip, sp, pc}
 801b8b4:	0801b5f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, sl, ip, sp, pc}

0801b8b8 <index_js>:
 801b8b8:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801b8bc:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 801b8c0:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801b8c4:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 801b8c8:	534a7465 	movtpl	r7, #42085	; 0xa465
 801b8cc:	6a284e4f 	bvs	8a2f210 <__exidx_end+0xa111e4>
 801b8d0:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b8d4:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801b8d8:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 801b8dc:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 801b8e0:	6a2f273d 	bvs	8be55dc <__exidx_end+0xbc75b0>
 801b8e4:	2f6e6f73 	svccs	0x006e6f73
 801b8e8:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801b8ec:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801b8f0:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 801b8f4:	20797274 	rsbscs	r7, r9, r4, ror r2
 801b8f8:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 801b8fc:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 801b900:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 801b904:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 801b908:	20746961 	rsbscs	r6, r4, r1, ror #18
 801b90c:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 801b910:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 801b914:	0a3b296c 	beq	8ee5ecc <__exidx_end+0xec7ea0>
 801b918:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 801b91c:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 801b920:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 801b924:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 801b928:	73657220 	cmnvc	r5, #32, 4
 801b92c:	6f736a2e 	svcvs	0x00736a2e
 801b930:	3b29286e 	blcc	8a65af0 <__exidx_end+0xa47ac4>
 801b934:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 801b938:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 801b93c:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 801b940:	6f727265 	svcvs	0x00727265
 801b944:	7b202972 	blvc	8825f14 <__exidx_end+0x807ee8>
 801b948:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801b94c:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 801b950:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 801b954:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 801b958:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 801b95c:	3b29726f 	blcc	8a78320 <__exidx_end+0xa5a2f4>
 801b960:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 801b964:	0a0a7d0a 	beq	82bad94 <__exidx_end+0x29cd68>
 801b968:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801b96c:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 801b970:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801b974:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 801b978:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 801b97c:	73694c72 	cmnvc	r9, #29184	; 0x7200
 801b980:	20292874 	eorcs	r2, r9, r4, ror r8
 801b984:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 801b988:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801b98c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801b990:	6177613d 	cmnvs	r7, sp, lsr r1
 801b994:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801b998:	534a7465 	movtpl	r7, #42085	; 0xa465
 801b99c:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801b9a0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801b9a4:	0a3b2927 	beq	8ee5e48 <__exidx_end+0xec7e1c>
 801b9a8:	6f640909 	svcvs	0x00640909
 801b9ac:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 801b9b0:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 801b9b4:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 801b9b8:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 801b9bc:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 801b9c0:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 801b9c4:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 801b9c8:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 801b9cc:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 801b9d0:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 801b9d4:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 801b9d8:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 801b9dc:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 801b9e0:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 801b9e4:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 801b9e8:	2b656d61 	blcs	9976f74 <__exidx_end+0x1958f48>
 801b9ec:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801b96c <index_js+0xb4>
 801b9f0:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801b9f4:	2b223e69 	blcs	88ab3a0 <__exidx_end+0x88d374>
 801b9f8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801b9fc:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 801ba00:	6f6e2e74 	svcvs	0x006e2e74
 801ba04:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 801ba08:	2b657079 	blcs	9977bf4 <__exidx_end+0x1959bc8>
 801ba0c:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801b98c <index_js+0xd4>
 801ba10:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801ba14:	2b223e69 	blcs	88ab3c0 <__exidx_end+0x88d394>
 801ba18:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801ba1c:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 801ba20:	6f6e2e74 	svcvs	0x006e2e74
 801ba24:	702e6564 	eorvc	r6, lr, r4, ror #10
 801ba28:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 801ba2c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801ba30:	2f3c222b 	svccs	0x003c222b
 801ba34:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 801ba38:	0a7d0a3b 	beq	9f5e32c <__exidx_end+0x1f40300>
 801ba3c:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 801ba40:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 801ba44:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 801ba48:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801ba4c:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 801ba50:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801ba54:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801ba58:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 801ba5c:	0a7b2029 	beq	9ee3b08 <__exidx_end+0x1ec5adc>
 801ba60:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 801ba64:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 801ba68:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 801ba6c:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801ba70:	6177613d 	cmnvs	r7, sp, lsr r1
 801ba74:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801ba78:	534a7465 	movtpl	r7, #42085	; 0xa465
 801ba7c:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801ba80:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801ba84:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801ba88:	3b292779 	blcc	8a65874 <__exidx_end+0xa47848>
 801ba8c:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801ba90:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801ba94:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801ba98:	0a22223d 	beq	88a4394 <__exidx_end+0x886368>
 801ba9c:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 801baa0:	66207465 	strtvs	r7, [r0], -r5, ror #8
 801baa4:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 801baa8:	73656d61 	cmnvc	r5, #6208	; 0x1840
 801baac:	6a624f3d 	bvs	98af7a8 <__exidx_end+0x189177c>
 801bab0:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 801bab4:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 801bab8:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 801babc:	6f746365 	svcvs	0x00746365
 801bac0:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 801bac4:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801bac8:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 801bacc:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 801bad0:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 801bad4:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 801bad8:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 801badc:	6145726f 	cmpvs	r5, pc, ror #4
 801bae0:	66286863 	strtvs	r6, [r8], -r3, ror #16
 801bae4:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 801bae8:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801baec:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 801baf0:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801baf4:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 801baf8:	20726176 	rsbscs	r6, r2, r6, ror r1
 801bafc:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 801bb00:	203d2065 	eorscs	r2, sp, r5, rrx
 801bb04:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801bb08:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801bb0c:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 801bb10:	73656c69 	cmnvc	r5, #26880	; 0x6900
 801bb14:	6b5b5d22 	blvs	96f2fa4 <__exidx_end+0x16d4f78>
 801bb18:	3b5d7965 	blcc	977a0b4 <__exidx_end+0x175c088>
 801bb1c:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801bb20:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 801bb24:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 801bb28:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 801bb2c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801bb30:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 801bb34:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 801bb38:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 801bb3c:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 801bb40:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 801bb44:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 801bb48:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 801bb4c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801bb50:	0a3b223e 	beq	8ee4450 <__exidx_end+0xec6424>
 801bb54:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 801bb58:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801bb5c:	6f640909 	svcvs	0x00640909
 801bb60:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 801bb64:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 801bb68:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 801bb6c:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 801bb70:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 801bb74:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 801bb78:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 801bb7c:	6f746365 	svcvs	0x00746365
 801bb80:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 801bb84:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 801bb88:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 801bb8c:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 801bb90:	3b6c6d74 	blcc	9b37168 <__exidx_end+0x1b1913c>
 801bb94:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801bb98:	5f746567 	svcpl	0x00746567
 801bb9c:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 801bba0:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801bba4:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801bba8:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 801bbac:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 801bbb0:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 801bbb4:	20636e79 	rsbcs	r6, r3, r9, ror lr
 801bbb8:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 801bbbc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801bbc0:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 801bbc4:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 801bbc8:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801bbcc:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801bbd0:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801bbd4:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 801bbd8:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 801bbdc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 801bbe0:	6177613d 	cmnvs	r7, sp, lsr r1
 801bbe4:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801bbe8:	534a7465 	movtpl	r7, #42085	; 0xa465
 801bbec:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801bbf0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801bbf4:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 801bbf8:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801bbfc:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 801bc00:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801bc04:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 801bc08:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 801bc0c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 801bc10:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 801bc14:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 801bc18:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 801bc1c:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 801bc20:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 801bc24:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 801bc28:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 801bc2c:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 801bc30:	2b22563e 	blcs	88b1530 <__exidx_end+0x893504>
 801bc34:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801bc38:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801bc3c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801bc40:	2b6e6f69 	blcs	9bb79ec <__exidx_end+0x1b999c0>
 801bc44:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801bbc4 <index_js+0x30c>
 801bc48:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801bc4c:	2b223e69 	blcs	88ab5f8 <__exidx_end+0x88d5cc>
 801bc50:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801bc54:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801bc58:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 801bc5c:	61642e64 	cmnvs	r4, r4, ror #28
 801bc60:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 801bc64:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801bc68:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801bc6c:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 801bc70:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801bc74:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 801bc78:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 801bc7c:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 801bc80:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 801bc84:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 801bc88:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 801bc8c:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 801bc90:	6f697372 	svcvs	0x00697372
 801bc94:	6f622e6e 	svcvs	0x00622e6e
 801bc98:	2b647261 	blcs	9938624 <__exidx_end+0x191a5f8>
 801bc9c:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801bc1c <index_js+0x364>
 801bca0:	3b223e69 	blcc	88ab64c <__exidx_end+0x88d620>
 801bca4:	0a0a7d0a 	beq	82bb0d4 <__exidx_end+0x29d0a8>
 801bca8:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801bcac:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 801bcb0:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801bcb4:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 801bcb8:	745f7465 	ldrbvc	r7, [pc], #-1125	; 801bcc0 <index_js+0x408>
 801bcbc:	73287478 			; <UNDEFINED> instruction: 0x73287478
 801bcc0:	20296c65 	eorcs	r6, r9, r5, ror #24
 801bcc4:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 801bcc8:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 801bccc:	613d7478 	teqvs	sp, r8, ror r4
 801bcd0:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 801bcd4:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 801bcd8:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 801bcdc:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 801bce0:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801bce4:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801bce8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801bcec:	3b22223d 	blcc	88a45e8 <__exidx_end+0x8865bc>
 801bcf0:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 801bcf4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 801bcf8:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 801bcfc:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 801bd00:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 801bd04:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 801bd08:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 801bd0c:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 801bd10:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 801bd14:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801bd18:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 801bd1c:	0a7b2029 	beq	9ee3dc8 <__exidx_end+0x1ec5d9c>
 801bd20:	61760909 	cmnvs	r6, r9, lsl #18
 801bd24:	61762072 	cmnvs	r6, r2, ror r0
 801bd28:	2065756c 	rsbcs	r7, r5, ip, ror #10
 801bd2c:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 801bd30:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 801bd34:	6b5b5d6c 	blvs	96f32ec <__exidx_end+0x16d52c0>
 801bd38:	3b5d7965 	blcc	977a2d4 <__exidx_end+0x175c2a8>
 801bd3c:	2009090a 	andcs	r0, r9, sl, lsl #18
 801bd40:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801bd44:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 801bd48:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 801bd4c:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 801bd50:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 801bd54:	2f3c222b 	svccs	0x003c222b
 801bd58:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 801bd5c:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 801bd60:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 801bd64:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 801bd68:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 801bd6c:	742f3c3e 	strtvc	r3, [pc], #-3134	; 801bd74 <index_js+0x4bc>
 801bd70:	3b223e72 	blcc	88ab740 <__exidx_end+0x88d714>
 801bd74:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 801bd78:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 801bd7c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 801bd80:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801bd84:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 801bd88:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 801bd8c:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801bd90:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 801bd94:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 801bd98:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 801bd9c:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 801bda0:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 801bda4:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 801bda8:	0a3b6c6d 	beq	8ef6f64 <__exidx_end+0xed8f38>
 801bdac:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 801bdb0:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 801bdb4:	73694c72 	cmnvc	r9, #29184	; 0x7200
 801bdb8:	3b292874 	blcc	8a65f90 <__exidx_end+0xa47f64>
 801bdbc:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 801bdc0:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 801bdc4:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 801bdc8:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801bdcc:	0a3b2928 	beq	8ee6274 <__exidx_end+0xec8248>
 801bdd0:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 801bdd4:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 801bdd8:	6f697372 	svcvs	0x00697372
 801bddc:	3b29286e 	blcc	8a65f9c <__exidx_end+0xa47f70>
 801bde0:	2020000a 	eorcs	r0, r0, sl
 801bde4:	76696e55 			; <UNDEFINED> instruction: 0x76696e55
 801bde8:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801bdec:	72612073 	rsbvc	r2, r1, #115	; 0x73
 801bdf0:	616d2065 	cmnvs	sp, r5, rrx
 801bdf4:	65707070 	ldrbvs	r7, [r0, #-112]!	; 0xffffff90
 801bdf8:	312b2064 			; <UNDEFINED> instruction: 0x312b2064
 801bdfc:	0000000a 	andeq	r0, r0, sl

0801be00 <vtable for ArtNet4Node>:
	...
 801be08:	0800be49 	stmdaeq	r0, {r0, r3, r6, r9, sl, fp, ip, sp, pc}
 801be0c:	0800be69 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, fp, ip, sp, pc}
 801be10:	0800bdcb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, sl, fp, ip, sp, pc}
 801be14:	0800beb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, sl, fp, ip, sp, pc}
 801be18:	0800be7b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r9, sl, fp, ip, sp, pc}
 801be1c:	0800bdb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, sl, fp, ip, sp, pc}
 801be20:	0800be2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, sl, fp, ip, sp, pc}

0801be24 <ArtNetMsgConst::START>:
 801be24:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 801be28:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 801be2c:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 801be30:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

0801be35 <ArtNetMsgConst::PARAMS>:
 801be35:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801be39:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801be3d:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801be41:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801be45:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801be49 <ArtNetMsgConst::STARTED>:
 801be49:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801be4d:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801be51:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801be55:	00646574 	rsbeq	r6, r4, r4, ror r5
 801be59:	25207325 	strcs	r7, [r0, #-805]!	; 0xfffffcdb
 801be5d:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
 801be61:	00732520 	rsbseq	r2, r3, r0, lsr #10
 801be65:	70747468 	rsbsvc	r7, r4, r8, ror #8
 801be69:	2f2f3a73 	svccs	0x002f3a73
 801be6d:	32336467 	eorscc	r6, r3, #1728053248	; 0x67000000
 801be71:	786d642d 	stmdavc	sp!, {r0, r2, r3, r5, sl, sp, lr}^
 801be75:	67726f2e 	ldrbvs	r6, [r2, -lr, lsr #30]!
 801be79:	626d4500 	rsbvs	r4, sp, #0, 10
 801be7d:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
 801be81:	 	subvc	r0, r1, #100	; 0x64

0801be83 <artnet::NODE_ID>:
 801be83:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801be87:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801be8b <defaults::SHORT_NAME>:
 801be8b:	20567641 	subscs	r7, r6, r1, asr #12
 801be8f:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801be93:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801be97:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
 801be9b:	34302500 	ldrtcc	r2, [r0], #-1280	; 0xfffffb00
 801be9f:	255b2078 	ldrbcs	r2, [fp, #-120]	; 0xffffff88
 801bea3:	5d643430 	cfstrdpl	mvd3, [r4, #-192]!	; 0xffffff40
 801bea7:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801beab:	00567641 	subseq	r7, r6, r1, asr #12

0801beaf <artnet::NODE_ID>:
 801beaf:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801beb3:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801beb7:	00505448 	subseq	r5, r0, r8, asr #8
 801bebb:	0050544c 	subseq	r5, r0, ip, asr #8
 801bebf:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801bec3:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801bec7:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 801becb:	646f4e00 	strbtvs	r4, [pc], #-3584	; 801bed3 <artnet::NODE_ID+0x24>
 801becf:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 801bed3:	75255b20 	strvc	r5, [r5, #-2848]!	; 0xfffff4e0
 801bed7:	20000a5d 	andcs	r0, r0, sp, asr sl
 801bedb:	6d726946 			; <UNDEFINED> instruction: 0x6d726946
 801bedf:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
 801bee3:	3a202020 	bcc	8823f6b <__exidx_end+0x805f3f>
 801bee7:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801beeb:	000a6425 	andeq	r6, sl, r5, lsr #8
 801beef:	6f685320 	svcvs	0x00685320
 801bef3:	6e207472 	mcrvs	4, 1, r7, cr0, cr2, {3}
 801bef7:	20656d61 	rsbcs	r6, r5, r1, ror #26
 801befb:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801beff:	4c20000a 	stcmi	0, cr0, [r0], #-40	; 0xffffffd8
 801bf03:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 801bf07:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801bf0b:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801bf0f:	000a7325 	andeq	r7, sl, r5, lsr #6
 801bf13:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 801bf17:	0a747570 	beq	9d394df <__exidx_end+0x1d1b4b3>
 801bf1b:	50202000 	eorpl	r2, r0, r0
 801bf1f:	2074726f 	rsbscs	r7, r4, pc, ror #4
 801bf23:	20643225 	rsbcs	r3, r4, r5, lsr #4
 801bf27:	20753425 	rsbscs	r3, r5, r5, lsr #8
 801bf2b:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 801bf2f:	257b2000 	ldrbcs	r2, [fp, #-0]!
 801bf33:	000a7d73 	andeq	r7, sl, r3, ror sp
 801bf37:	706e4920 	rsbvc	r4, lr, r0, lsr #18
 801bf3b:	000a7475 	andeq	r7, sl, r5, ror r4
 801bf3f:	6f502020 	svcvs	0x00502020
 801bf43:	25207472 	strcs	r7, [r0, #-1138]!	; 0xfffffb8e
 801bf47:	25206432 	strcs	r6, [r0, #-1074]!	; 0xfffffbce
 801bf4b:	2d207534 	cfstr32cs	mvfx7, [r0, #-208]!	; 0xffffff30
 801bf4f:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 801bf53:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801bf57:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801bf5b:	68000a64 	stmdavs	r0, {r2, r5, r6, r9, fp}
 801bf5f:	00646c6f 	rsbeq	r6, r4, pc, ror #24
 801bf63:	0066666f 	rsbeq	r6, r6, pc, ror #12
 801bf67:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801bf6b:	6b636162 	blvs	98f44fb <__exidx_end+0x18d64cf>
 801bf6f:	63617300 	cmnvs	r1, #0, 6
 801bf73:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 801bf77:	00747570 	rsbseq	r7, r4, r0, ror r5
 801bf7b:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 801bf7f:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
 801bf83:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
 801bf87:	6c00656c 	cfstr32vs	mvfx6, [r0], {108}	; 0x6c
 801bf8b:	68007074 	stmdavs	r0, {r2, r4, r5, r6, ip, sp, lr}
 801bf8f:	61007074 	tstvs	r0, r4, ror r0
 801bf93:	656e7472 	strbvs	r7, [lr, #-1138]!	; 0xfffffb8e
 801bf97:	72410074 	subvc	r0, r1, #116	; 0x74
 801bf9b:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 801bf9f:	00342074 	eorseq	r2, r4, r4, ror r0
	...

0801bfa4 <CSWTCH.93>:
 801bfa4:	0801bf5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, sp, pc}
 801bfa8:	0801bf63 	stmdaeq	r1, {r0, r1, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 801bfac:	0801b1ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, ip, sp, pc}
 801bfb0:	0801bf67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, sp, pc}

0801bfb4 <ArtNetParamsConst::ENABLE_RDM>:
 801bfb4:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801bfb8:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 801bfbc:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

0801bfbf <ArtNetParamsConst::MAP_UNIVERSE0>:
 801bfbf:	5f70616d 	svcpl	0x0070616d
 801bfc3:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801bfc7:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801bfcb:	 	rsbsvc	r0, r0, #48	; 0x30

0801bfcd <ArtNetParamsConst::PROTOCOL_PORT>:
 801bfcd:	746f7270 	strbtvc	r7, [pc], #-624	; 801bfd5 <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 801bfd1:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801be1c <vtable for ArtNet4Node+0x1c>
 801bfd5:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801bfd9:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801bfdd:	746f7270 	strbtvc	r7, [pc], #-624	; 801bfe5 <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 801bfe1:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801be2c <ArtNetMsgConst::START+0x8>
 801bfe5:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801bfe9:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801bfed:	746f7270 	strbtvc	r7, [pc], #-624	; 801bff5 <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 801bff1:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801be3c <ArtNetMsgConst::PARAMS+0x7>
 801bff5:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801bff9:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801bffd:	746f7270 	strbtvc	r7, [pc], #-624	; 801c005 <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 801c001:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801be4c <ArtNetMsgConst::STARTED+0x3>
 801c005:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801c009:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801c00d <ArtNetParamsConst::NODE_LONG_NAME>:
 801c00d:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 801c011:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 801c015:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

0801c017 <ArtNetParamsConst::NODE_SHORT_NAME>:
 801c017:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 801c01b:	616e5f74 	smcvs	58868	; 0xe5f4
 801c01f:	 	andvc	r6, r0, #457179136	; 0x1b400000

0801c022 <ArtNetParamsConst::RDM_ENABLE_PORT>:
 801c022:	5f6d6472 	svcpl	0x006d6472
 801c026:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801c02a:	705f656c 	subsvc	r6, pc, ip, ror #10
 801c02e:	5f74726f 	svcpl	0x0074726f
 801c032:	64720061 	ldrbtvs	r0, [r2], #-97	; 0xffffff9f
 801c036:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 801c03a:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801c03e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801c042:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801c046:	5f6d6472 	svcpl	0x006d6472
 801c04a:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801c04e:	705f656c 	subsvc	r6, pc, ip, ror #10
 801c052:	5f74726f 	svcpl	0x0074726f
 801c056:	64720063 	ldrbtvs	r0, [r2], #-99	; 0xffffff9d
 801c05a:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 801c05e:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801c062:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801c066:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801c06a <ArtNetParamsConst::DESTINATION_IP_PORT>:
 801c06a:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801c06e:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801c072:	5f6e6f69 	svcpl	0x006e6f69
 801c076:	705f7069 	subsvc	r7, pc, r9, rrx
 801c07a:	5f74726f 	svcpl	0x0074726f
 801c07e:	00000061 	andeq	r0, r0, r1, rrx
 801c082:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801c086:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801c08a:	5f6e6f69 	svcpl	0x006e6f69
 801c08e:	705f7069 	subsvc	r7, pc, r9, rrx
 801c092:	5f74726f 	svcpl	0x0074726f
 801c096:	00000062 	andeq	r0, r0, r2, rrx
 801c09a:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801c09e:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801c0a2:	5f6e6f69 	svcpl	0x006e6f69
 801c0a6:	705f7069 	subsvc	r7, pc, r9, rrx
 801c0aa:	5f74726f 	svcpl	0x0074726f
 801c0ae:	00000063 	andeq	r0, r0, r3, rrx
 801c0b2:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801c0b6:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801c0ba:	5f6e6f69 	svcpl	0x006e6f69
 801c0be:	705f7069 	subsvc	r7, pc, r9, rrx
 801c0c2:	5f74726f 	svcpl	0x0074726f
 801c0c6:	00000064 	andeq	r0, r0, r4, rrx

0801c0ca <ArtNetParamsConst::NET>:
 801c0ca:	0074656e 	rsbseq	r6, r4, lr, ror #10

0801c0ce <ArtNetParamsConst::SUBNET>:
 801c0ce:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 801c0d2:	 	tstvs	r0, r5, ror #8

0801c0d5 <ArtNetParamsConst::FILE_NAME>:
 801c0d5:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 801c0d9:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 801c0dd:	 			; <UNDEFINED> instruction: 0xff007478

0801c0e0 <ArtNetConst::OEM_ID>:
 801c0e0:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

0801c0e2 <ArtNetConst::ESTA_ID>:
 801c0e2:	 	smlsdcc	r1, r0, r0, r0

0801c0e4 <ArtNetConst::VERSION>:
 801c0e4:	33323701 	teqcc	r2, #262144	; 0x40000
 801c0e8:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801c0ec:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 801c0f0:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 801c0f4:	20733834 	rsbscs	r3, r3, r4, lsr r8
 801c0f8:	30007325 	andcc	r7, r0, r5, lsr #6
 801c0fc:	6f4e202e 	svcvs	0x004e202e
 801c100:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 801c104:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 801c108:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 801c10c:	202c6465 	eorcs	r6, ip, r5, ror #8
 801c110:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 801c114:	6f687320 	svcvs	0x00687320
 801c118:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 801c11c:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 801c120:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 801c124:	000a216e 	andeq	r2, sl, lr, ror #2
 801c128:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 801c12c:	000a6567 	andeq	r6, sl, r7, ror #10
 801c130:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 801c134:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 801c138:	203a2065 	eorscs	r2, sl, r5, rrx
 801c13c:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801c140:	20000a64 	andcs	r0, r0, r4, ror #20
 801c144:	20444943 	subcs	r4, r4, r3, asr #18
 801c148:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c14c:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c150:	20000a73 	andcs	r0, r0, r3, ror sl
 801c154:	726f5020 	rsbvc	r5, pc, #32
 801c158:	32252074 	eorcc	r2, r5, #116	; 0x74
 801c15c:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 801c160:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 801c164:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 801c168:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 801c16c:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 801c170:	2020000a 	eorcs	r0, r0, sl
 801c174:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 801c178:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 801c17c:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 801c180:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801c184:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 801c188:	5b206433 	blpl	883525c <__exidx_end+0x817230>
 801c18c:	0a5d6425 	beq	9775228 <__exidx_end+0x17571fc>
 801c190:	79532000 	ldmdbvc	r3, {sp}^
 801c194:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 801c198:	7a696e6f 	bvc	9a77b5c <__exidx_end+0x1a59b30>
 801c19c:	73692065 	cmnvc	r9, #101	; 0x65
 801c1a0:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801c1a4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801c1a8:	44000a64 	strmi	r0, [r0], #-2660	; 0xfffff59c
 801c1ac:	4f20584d 	svcmi	0x0020584d
 801c1b0:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 801c1b4:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
 801c1b8:	6e492058 	mcrvs	0, 2, r2, cr9, cr8, {2}
 801c1bc:	00747570 	rsbseq	r7, r4, r0, ror r5

0801c1c0 <CSWTCH.56>:
 801c1c0:	0801bf5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, sp, pc}
 801c1c4:	0801bf63 	stmdaeq	r1, {r0, r1, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 801c1c8:	0801b1ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, ip, sp, pc}
 801c1cc:	0801bf67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, sp, pc}

0801c1d0 <E131ParamsConst::PRIORITY>:
 801c1d0:	6f697270 	svcvs	0x00697270
 801c1d4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801c1d8:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801c1dc:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801c1e0:	72700000 	rsbsvc	r0, r0, #0
 801c1e4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801c1e8:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 801c1ec:	5f74726f 	svcpl	0x0074726f
 801c1f0:	00000062 	andeq	r0, r0, r2, rrx
 801c1f4:	6f697270 	svcvs	0x00697270
 801c1f8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801c1fc:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801c200:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801c204:	72700000 	rsbsvc	r0, r0, #0
 801c208:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801c20c:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 801c210:	5f74726f 	svcpl	0x0074726f
 801c214:	00000064 	andeq	r0, r0, r4, rrx

0801c218 <E131ParamsConst::FILE_NAME>:
 801c218:	31333165 	teqcc	r3, r5, ror #2
 801c21c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
	...

0801c221 <E117Const::ACN_PACKET_IDENTIFIER>:
 801c221:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 801c225:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 801c229:	00000037 	andeq	r0, r0, r7, lsr r0

0801c22d <E131BridgeConst::VERSION>:
 801c22d:	33321901 	teqcc	r2, #16384	; 0x4000
 801c231:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801c235:	35322e35 	ldrcc	r2, [r2, #-3637]!	; 0xfffff1cb
 801c239:	33312e30 	teqcc	r1, #48, 28	; 0x300
 801c23d:	33320033 	teqcc	r2, #51	; 0x33
 801c241:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801c245:	35322e35 	ldrcc	r2, [r2, #-3637]!	; 0xfffff1cb
 801c249:	33312e30 	teqcc	r1, #48, 28	; 0x300
 801c24d:	4c4c0034 	mcrrmi	0, 3, r0, ip, cr4
 801c251:	44205052 	strtmi	r5, [r0], #-82	; 0xffffffae
 801c255:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 801c259:	6f632065 	svcvs	0x00632065
 801c25d:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801c261:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 801c265:	0a6e6f69 	beq	9bb8011 <__exidx_end+0x1b99fe5>
 801c269:	6f502000 	svcvs	0x00502000
 801c26d:	55207472 	strpl	r7, [r0, #-1138]!	; 0xfffffb8e
 801c271:	20205044 	eorcs	r5, r0, r4, asr #32
 801c275:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c279:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c27d:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c281:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c285:	20000a64 	andcs	r0, r0, r4, ror #20
 801c289:	746c754d 	strbtvc	r7, [ip], #-1357	; 0xfffffab3
 801c28d:	73616369 	cmnvc	r1, #-1543503871	; 0xa4000001
 801c291:	6f6a2074 	svcvs	0x006a2074
 801c295:	52206e69 	eorpl	r6, r0, #1680	; 0x690
 801c299:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 801c29d:	3a207473 	bcc	8839471 <__exidx_end+0x81b445>
 801c2a1:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801c2a5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801c2a9:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801c2ad:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 801c2b1:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
 801c2b5:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
 801c2b9:	73655220 	cmnvc	r5, #32, 4
 801c2bd:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
 801c2c1:	20202065 	eorcs	r2, r0, r5, rrx
 801c2c5:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801c2c9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801c2cd:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801c2d1:	0a64252e 	beq	9925791 <__exidx_end+0x1907765>
 801c2d5:	 	andeq	r0, r0, r0

0801c2d8 <vtable for LLRPDevice>:
	...
 801c2e0:	0800fa23 	stmdaeq	r0, {r0, r1, r5, r9, fp, ip, sp, lr, pc}
 801c2e4:	0800fa2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, fp, ip, sp, lr, pc}
 801c2e8:	0800fa25 	stmdaeq	r0, {r0, r2, r5, r9, fp, ip, sp, lr, pc}
 801c2ec:	0800fa27 	stmdaeq	r0, {r0, r1, r2, r5, r9, fp, ip, sp, lr, pc}
 801c2f0:	0800fa29 	stmdaeq	r0, {r0, r3, r5, r9, fp, ip, sp, lr, pc}

0801c2f4 <RDMNetConst::MSG_CONFIG>:
 801c2f4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801c2f8:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801c2fc:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801c300:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801c304:	 	andpl	r7, r0, #1694498816	; 0x65000000

0801c307 <RDMNetConst::MSG_STARTED>:
 801c307:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801c30b:	73207465 			; <UNDEFINED> instruction: 0x73207465
 801c30f:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 801c313:	 	movwpl	r6, #1125	; 0x465

0801c316 <RDMNetConst::MSG_START>:
 801c316:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 801c31a:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 801c31e:	4d445220 	sfmmi	f5, 2, [r4, #-128]	; 0xffffff80
 801c322:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801c326:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801c32a:	000a7465 	andeq	r7, sl, r5, ror #8
 801c32e:	44494320 	strbmi	r4, [r9], #-800	; 0xfffffce0
 801c332:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c336:	52000a73 	andpl	r0, r0, #471040	; 0x73000
 801c33a:	52204d44 	eorpl	r4, r0, #68, 26	; 0x1100
 801c33e:	6f707365 	svcvs	0x00707365
 801c342:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
 801c346:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801c34a:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 801c34e:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801c352:	000a6e6f 	andeq	r6, sl, pc, ror #28
 801c356:	6f725020 	svcvs	0x00725020
 801c35a:	6f636f74 	svcvs	0x00636f74
 801c35e:	6556206c 	ldrbvs	r2, [r6, #-108]	; 0xffffff94
 801c362:	6f697372 	svcvs	0x00697372
 801c366:	6425206e 	strtvs	r2, [r5], #-110	; 0xffffff92
 801c36a:	0a64252e 	beq	992582a <__exidx_end+0x19077fe>
 801c36e:	4d442000 	stclmi	0, cr2, [r4, #-0]
 801c372:	64412058 	strbvs	r2, [r1], #-88	; 0xffffffa8
 801c376:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 801c37a:	20202073 	eorcs	r2, r0, r3, ror r0
 801c37e:	3a202020 	bcc	8824406 <__exidx_end+0x8063da>
 801c382:	0a642520 	beq	992580a <__exidx_end+0x19077de>
 801c386:	4d442000 	stclmi	0, cr2, [r4, #-0]
 801c38a:	6f462058 	svcvs	0x00462058
 801c38e:	7270746f 	rsbsvc	r7, r0, #1862270976	; 0x6f000000
 801c392:	20746e69 	rsbscs	r6, r4, r9, ror #28
 801c396:	3a202020 	bcc	882441e <__exidx_end+0x8063f2>
 801c39a:	0a642520 	beq	9925822 <__exidx_end+0x19077f6>
 801c39e:	65502000 	ldrbvs	r2, [r0, #-0]
 801c3a2:	6e6f7372 	mcrvs	3, 3, r7, cr15, cr2, {3}
 801c3a6:	74696c61 	strbtvc	r6, [r9], #-3169	; 0xfffff39f
 801c3aa:	64252079 	strtvs	r2, [r5], #-121	; 0xffffff87
 801c3ae:	20666f20 	rsbcs	r6, r6, r0, lsr #30
 801c3b2:	5b206425 	blpl	883544e <__exidx_end+0x817422>
 801c3b6:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 801c3ba:	20000a5d 	andcs	r0, r0, sp, asr sl
 801c3be:	20627553 	rsbcs	r7, r2, r3, asr r5
 801c3c2:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801c3c6:	20736563 	rsbscs	r6, r3, r3, ror #10
 801c3ca:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c3ce:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c3d2:	20000a64 	andcs	r0, r0, r4, ror #20
 801c3d6:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
 801c3da:	2073726f 	rsbscs	r7, r3, pc, ror #4
 801c3de:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c3e2:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c3e6:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c3ea:	00000a64 	andeq	r0, r0, r4, ror #20
	...

0801c3f0 <vtable for RDMDeviceResponder>:
	...
 801c3f8:	0800ff21 	stmdaeq	r0, {r0, r5, r8, r9, sl, fp, ip, sp, lr, pc}
 801c3fc:	0800ff41 	stmdaeq	r0, {r0, r6, r8, r9, sl, fp, ip, sp, lr, pc}
 801c400:	0800ff1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, sl, fp, ip, sp, lr, pc}
 801c404:	0800ff1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, r9, sl, fp, ip, sp, lr, pc}

0801c408 <UID_ALL>:
 801c408:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 801c40c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

0801c410 <RDMHandler::PID_DEFINITIONS>:
 801c410:	00000060 	andeq	r0, r0, r0, rrx
 801c414:	08010415 	stmdaeq	r1, {r0, r2, r4, sl}
	...
 801c424:	01010000 	mrseq	r0, (UNDEF: 1)
 801c428:	00000080 	andeq	r0, r0, r0, lsl #1
 801c42c:	080104fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, sl}
	...
 801c43c:	01010100 	mrseq	r0, (UNDEF: 17)
 801c440:	00000081 	andeq	r0, r0, r1, lsl #1
 801c444:	08010519 	stmdaeq	r1, {r0, r3, r4, r8, sl}
	...
 801c454:	01010100 	mrseq	r0, (UNDEF: 17)
 801c458:	00000082 	andeq	r0, r0, r2, lsl #1
 801c45c:	08010539 	stmdaeq	r1, {r0, r3, r4, r5, r8, sl}
 801c460:	00000000 	andeq	r0, r0, r0
 801c464:	08010689 	stmdaeq	r1, {r0, r3, r7, r9, sl}
 801c468:	00000000 	andeq	r0, r0, r0
 801c46c:	01010100 	mrseq	r0, (UNDEF: 17)
 801c470:	00000090 	muleq	r0, r0, r0
 801c474:	0801047d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sl}
 801c478:	00000000 	andeq	r0, r0, r0
 801c47c:	08010655 	stmdaeq	r1, {r0, r2, r4, r6, r9, sl}
 801c480:	00000000 	andeq	r0, r0, r0
 801c484:	01010100 	mrseq	r0, (UNDEF: 17)
 801c488:	00001000 	andeq	r1, r0, r0
 801c48c:	08010575 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, sl}
 801c490:	00000000 	andeq	r0, r0, r0
 801c494:	080105d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, sl}
 801c498:	00000000 	andeq	r0, r0, r0
 801c49c:	01010000 	mrseq	r0, (UNDEF: 1)
 801c4a0:	00001001 	andeq	r1, r0, r1
	...
 801c4ac:	08010591 	stmdaeq	r1, {r0, r4, r7, r8, sl}
 801c4b0:	00000000 	andeq	r0, r0, r0
 801c4b4:	01010100 	mrseq	r0, (UNDEF: 17)
 801c4b8:	00000700 	andeq	r0, r0, r0, lsl #14
 801c4bc:	08010981 	stmdaeq	r1, {r0, r7, r8, fp}
	...
 801c4cc:	01000000 	mrseq	r0, (UNDEF: 0)
 801c4d0:	00000701 	andeq	r0, r0, r1, lsl #14
 801c4d4:	080109a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, fp}
	...
 801c4e4:	01000004 	tsteq	r0, r4
 801c4e8:	00000702 	andeq	r0, r0, r2, lsl #14
 801c4ec:	080109f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, fp}
	...
 801c4fc:	01000004 	tsteq	r0, r4
 801c500:	00000703 	andeq	r0, r0, r3, lsl #14
 801c504:	08010a25 	stmdaeq	r1, {r0, r2, r5, r9, fp}
 801c508:	00000000 	andeq	r0, r0, r0
 801c50c:	08010a51 	stmdaeq	r1, {r0, r4, r6, r9, fp}
 801c510:	00000000 	andeq	r0, r0, r0
 801c514:	01000004 	tsteq	r0, r4
 801c518:	00000704 	andeq	r0, r0, r4, lsl #14
 801c51c:	08010abd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, fp}
 801c520:	00000000 	andeq	r0, r0, r0
 801c524:	08010aed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r9, fp}
 801c528:	00000000 	andeq	r0, r0, r0
 801c52c:	01000004 	tsteq	r0, r4
 801c530:	00000705 	andeq	r0, r0, r5, lsl #14
 801c534:	08010b61 	stmdaeq	r1, {r0, r5, r6, r8, r9, fp}
	...
 801c544:	01000004 	tsteq	r0, r4
 801c548:	00000707 	andeq	r0, r0, r7, lsl #14
	...
 801c554:	08010b35 	stmdaeq	r1, {r0, r2, r4, r5, r8, r9, fp}
 801c558:	00000000 	andeq	r0, r0, r0
 801c55c:	01000004 	tsteq	r0, r4
 801c560:	00000706 	andeq	r0, r0, r6, lsl #14
 801c564:	08010ba9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, fp}
 801c568:	00000000 	andeq	r0, r0, r0
 801c56c:	08010bed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, fp}
 801c570:	00000000 	andeq	r0, r0, r0
 801c574:	01000004 	tsteq	r0, r4
 801c578:	00000709 	andeq	r0, r0, r9, lsl #14
	...
 801c584:	08010c39 	stmdaeq	r1, {r0, r3, r4, r5, sl, fp}
 801c588:	00000000 	andeq	r0, r0, r0
 801c58c:	01000004 	tsteq	r0, r4
 801c590:	0000070b 	andeq	r0, r0, fp, lsl #14
 801c594:	08010a99 	stmdaeq	r1, {r0, r3, r4, r7, r9, fp}
	...
 801c5a4:	01000001 	tsteq	r0, r1
 801c5a8:	0000070a 	andeq	r0, r0, sl, lsl #14
 801c5ac:	08010c61 	stmdaeq	r1, {r0, r5, r6, sl, fp}
 801c5b0:	00000000 	andeq	r0, r0, r0
 801c5b4:	08010c99 	stmdaeq	r1, {r0, r3, r4, r7, sl, fp}
 801c5b8:	00000000 	andeq	r0, r0, r0
 801c5bc:	01000004 	tsteq	r0, r4
 801c5c0:	0000070c 	andeq	r0, r0, ip, lsl #14
 801c5c4:	08010ca1 	stmdaeq	r1, {r0, r5, r7, sl, fp}
 801c5c8:	00000000 	andeq	r0, r0, r0
 801c5cc:	08010cd1 	stmdaeq	r1, {r0, r4, r6, r7, sl, fp}
 801c5d0:	00000000 	andeq	r0, r0, r0
 801c5d4:	01000000 	mrseq	r0, (UNDEF: 0)
 801c5d8:	0000070d 	andeq	r0, r0, sp, lsl #14
 801c5dc:	08010d05 	stmdaeq	r1, {r0, r2, r8, sl, fp}
 801c5e0:	00000000 	andeq	r0, r0, r0
 801c5e4:	08010d35 	stmdaeq	r1, {r0, r2, r4, r5, r8, sl, fp}
 801c5e8:	00000000 	andeq	r0, r0, r0
 801c5ec:	01000000 	mrseq	r0, (UNDEF: 0)
 801c5f0:	204d4452 	subcs	r4, sp, r2, asr r4
 801c5f4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801c5f8:	63206563 			; <UNDEFINED> instruction: 0x63206563
 801c5fc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801c600:	61727567 	cmnvs	r2, r7, ror #10
 801c604:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801c608:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 801c60c:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 801c610:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 801c614:	20726572 	rsbscs	r6, r2, r2, ror r5
 801c618:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 801c61c:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c620:	0a732a2e 	beq	9ce6ee0 <__exidx_end+0x1cc8eb4>
 801c624:	614d2000 	mrsvs	r2, (UNDEF: 77)
 801c628:	6166756e 	cmnvs	r6, lr, ror #10
 801c62c:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
 801c630:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 801c634:	20202044 	eorcs	r2, r0, r4, asr #32
 801c638:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801c63c:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 801c640:	000a5832 	andeq	r5, sl, r2, lsr r8
 801c644:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 801c648:	206c6169 	rsbcs	r6, ip, r9, ror #2
 801c64c:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
 801c650:	20207265 	eorcs	r7, r0, r5, ror #4
 801c654:	3a202020 	bcc	88246dc <__exidx_end+0x8066b0>
 801c658:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 801c65c:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 801c660:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 801c664:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 801c668:	20000a58 	andcs	r0, r0, r8, asr sl
 801c66c:	746f6f52 	strbtvc	r6, [pc], #-3922	; 801c674 <RDMHandler::PID_DEFINITIONS+0x264>
 801c670:	62616c20 	rsbvs	r6, r1, #32, 24	; 0x2000
 801c674:	20206c65 	eorcs	r6, r0, r5, ror #24
 801c678:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c67c:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801c680:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 801c684:	5020000a 	eorpl	r0, r0, sl
 801c688:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 801c68c:	43207463 			; <UNDEFINED> instruction: 0x43207463
 801c690:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
 801c694:	2079726f 	rsbscs	r7, r9, pc, ror #4
 801c698:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c69c:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 801c6a0:	0a58322e 	beq	9628f60 <__exidx_end+0x160af34>
 801c6a4:	72502000 	subsvc	r2, r0, #0
 801c6a8:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
 801c6ac:	65442074 	strbvs	r2, [r4, #-116]	; 0xffffff8c
 801c6b0:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 801c6b4:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c6b8:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801c6bc:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 801c6c0:	000a5832 	andeq	r5, sl, r2, lsr r8

0801c6c4 <DEVICE_LABEL>:
 801c6c4:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 801c6c8:	30353446 	eorscc	r3, r5, r6, asr #8
 801c6cc:	52204956 	eorpl	r4, r0, #1409024	; 0x158000
 801c6d0:	44204d44 	strtmi	r4, [r0], #-3396	; 0xfffff2bc
 801c6d4:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 801c6d8:	 	subseq	r0, r0, r5, rrx

0801c6da <RDMConst::MANUFACTURER_ID>:
 801c6da:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0801c6dc <RDMConst::MANUFACTURER_NAME>:
 801c6dc:	70747468 	rsbsvc	r7, r4, r8, ror #8
 801c6e0:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 801c6e4:	6f2e7777 	svcvs	0x002e7777
 801c6e8:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 801c6ec:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 801c6f0:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 801c6f4:	0067726f 	rsbeq	r7, r7, pc, ror #4
 801c6f8:	78383025 	ldmdavc	r8!, {r0, r2, r5, ip, sp}
 801c6fc:	3430252d 	ldrtcc	r2, [r0], #-1325	; 0xfffffad3
 801c700:	30252d78 	eorcc	r2, r5, r8, ror sp
 801c704:	252d7834 	strcs	r7, [sp, #-2100]!	; 0xfffff7cc
 801c708:	25783230 	ldrbcs	r3, [r8, #-560]!	; 0xfffffdd0
 801c70c:	2d783230 	lfmcs	f3, 2, [r8, #-192]!	; 0xffffff40
 801c710:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c714:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c718:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c71c:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c720:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c724:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c728:	584d4400 	stmdapl	sp, {sl, lr}^
 801c72c:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 801c730:	20000a64 	andcs	r0, r0, r4, ror #20
 801c734:	61657242 	cmnvs	r5, r2, asr #4
 801c738:	6974206b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, sp}^
 801c73c:	2020656d 	eorcs	r6, r0, sp, ror #10
 801c740:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c744:	20000a75 	andcs	r0, r0, r5, ror sl
 801c748:	2042414d 	subcs	r4, r2, sp, asr #2
 801c74c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 801c750:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c754:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c758:	20000a75 	andcs	r0, r0, r5, ror sl
 801c75c:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
 801c760:	20687365 	rsbcs	r7, r8, r5, ror #6
 801c764:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
 801c768:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c76c:	20000a75 	andcs	r0, r0, r5, ror sl
 801c770:	746f6c53 	strbtvc	r6, [pc], #-3155	; 801c778 <RDMConst::MANUFACTURER_NAME+0x9c>
 801c774:	20202073 	eorcs	r2, r0, r3, ror r0
 801c778:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c77c:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c780:	00000a75 	andeq	r0, r0, r5, ror sl

0801c784 <vtable for DmxSend>:
	...
 801c78c:	08010f39 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, sl, fp}
 801c790:	08011025 	stmdaeq	r1, {r0, r2, r5, ip}
 801c794:	08010f3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, r9, sl, fp}
 801c798:	08010f6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, sl, fp}
 801c79c:	08010fa5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, sl, fp}
 801c7a0:	08010fb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, fp}
 801c7a4:	08010fc1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, fp}
 801c7a8:	08010fcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, sl, fp}
 801c7ac:	08017a47 	stmdaeq	r1, {r0, r1, r2, r6, r9, fp, ip, sp, lr}
 801c7b0:	08017a3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, fp, ip, sp, lr}
 801c7b4:	08017a41 	stmdaeq	r1, {r0, r6, r9, fp, ip, sp, lr}
 801c7b8:	08017a4b 	stmdaeq	r1, {r0, r1, r3, r6, r9, fp, ip, sp, lr}

0801c7bc <DmxParamsConst::BREAK_TIME>:
 801c7bc:	61657262 	cmnvs	r5, r2, ror #4
 801c7c0:	69745f6b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 801c7c4:	 	movwvc	r6, #1389	; 0x56d

0801c7c7 <DmxParamsConst::SLOTS_COUNT>:
 801c7c7:	746f6c73 	strbtvc	r6, [pc], #-3187	; 801c7cf <DmxParamsConst::SLOTS_COUNT+0x8>
 801c7cb:	6f635f73 	svcvs	0x00635f73
 801c7cf:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801c7d3 <DmxParamsConst::REFRESH_RATE>:
 801c7d3:	72666572 	rsbvc	r6, r6, #478150656	; 0x1c800000
 801c7d7:	5f687365 	svcpl	0x00687365
 801c7db:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
	...

0801c7e0 <DmxParamsConst::MAB_TIME>:
 801c7e0:	5f62616d 	svcpl	0x0062616d
 801c7e4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	...

0801c7e9 <DmxParamsConst::FILE_NAME>:
 801c7e9:	61726170 	cmnvs	r2, r0, ror r1
 801c7ed:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 801c7f1:	 	andeq	r7, r0, r8, ror r4

0801c7f4 <s_DirGpio>:
 801c7f4:	40020c00 	andmi	r0, r2, r0, lsl #24
 801c7f8:	00000001 	andeq	r0, r0, r1
 801c7fc:	40020c00 	andmi	r0, r2, r0, lsl #24
 801c800:	00000002 	andeq	r0, r0, r2

0801c804 <vtable for WS28xxDmxMulti>:
	...
 801c80c:	08011d89 	stmdaeq	r1, {r0, r3, r7, r8, sl, fp, ip}
 801c810:	08011da9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, fp, ip}
 801c814:	08011d67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, sl, fp, ip}
 801c818:	08011f1b 	stmdaeq	r1, {r0, r1, r3, r4, r8, r9, sl, fp, ip}
 801c81c:	08011de3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, sl, fp, ip}
 801c820:	08011dbb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, sl, fp, ip}
 801c824:	08011efd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 801c828:	08011f15 	stmdaeq	r1, {r0, r2, r4, r8, r9, sl, fp, ip}
 801c82c:	08011d59 	stmdaeq	r1, {r0, r3, r4, r6, r8, sl, fp, ip}
 801c830:	08011d5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, fp, ip}
 801c834:	08011d63 	stmdaeq	r1, {r0, r1, r5, r6, r8, sl, fp, ip}
 801c838:	08017a4b 	stmdaeq	r1, {r0, r1, r3, r6, r9, fp, ip, sp, lr}
 801c83c:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801c840:	2a2e253a 	bcs	8ba5d30 <__exidx_end+0xb87d04>
 801c844:	23002c66 	movwcs	r2, #3174	; 0xc66
 801c848:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 801c84c:	0a662a2e 	beq	99a710c <__exidx_end+0x19890e0>
 801c850:	65643c00 	strbvs	r3, [r4, #-3072]!	; 0xfffff400
 801c854:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 801c858:	4f003e74 	svcmi	0x00003e74
 801c85c:	77726576 			; <UNDEFINED> instruction: 0x77726576
 801c860:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 801c864:	74616420 	strbtvc	r6, [r1], #-1056	; 0xfffffbe0
 801c868:	65687361 	strbvs	r7, [r8, #-865]!	; 0xfffffc9f
 801c86c:	4f007465 	svcmi	0x00007465
 801c870:	77726576 			; <UNDEFINED> instruction: 0x77726576
 801c874:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 801c878:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 801c87c:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801c880:	29737528 	ldmdbcs	r3!, {r3, r5, r8, sl, ip, sp, lr}^
 801c884:	6f724700 	svcvs	0x00724700
 801c888:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
 801c88c:	6c430067 	mcrrvs	0, 6, r0, r3, cr7
 801c890:	206b636f 	rsbcs	r6, fp, pc, ror #6
 801c894:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
 801c898:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 801c89c:	00737069 	rsbseq	r7, r3, r9, rrx
 801c8a0:	31415041 	cmpcc	r1, r1, asr #32
 801c8a4:	532f3230 			; <UNDEFINED> instruction: 0x532f3230
 801c8a8:	3238394b 	eorscc	r3, r8, #1228800	; 0x12c000
 801c8ac:	65540032 	ldrbvs	r0, [r4, #-50]	; 0xffffffce
 801c8b0:	70207473 	eorvc	r7, r0, r3, ror r4
 801c8b4:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 801c8b8:	50006e72 	andpl	r6, r0, r2, ror lr
 801c8bc:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 801c8c0:	584d4420 	stmdapl	sp, {r5, sl, lr}^
 801c8c4:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801c8c8:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 801c8cc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801c8d0:	000a6e6f 	andeq	r6, sl, pc, ror #28
 801c8d4:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 801c8d8:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
 801c8dc:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c8e0:	20000a64 	andcs	r0, r0, r4, ror #20
 801c8e4:	756f7247 	strbvc	r7, [pc, #-583]!	; 801c6a5 <RDMHandler::PID_DEFINITIONS+0x295>
 801c8e8:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 801c8ec:	756f6320 	strbvc	r6, [pc, #-800]!	; 801c5d4 <RDMHandler::PID_DEFINITIONS+0x1c4>
 801c8f0:	3a20746e 	bcc	8839ab0 <__exidx_end+0x81ba84>
 801c8f4:	20642520 	rsbcs	r2, r4, r0, lsr #10
 801c8f8:	6f72475b 	svcvs	0x0072475b
 801c8fc:	20737075 	rsbscs	r7, r3, r5, ror r0
 801c900:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801c904:	59000a5d 	stmdbpl	r0, {r0, r2, r3, r4, r6, r9, fp}
 801c908:	4e007365 	cdpmi	3, 0, cr7, cr0, cr5, {3}
 801c90c:	6950006f 	ldmdbvs	r0, {r0, r1, r2, r3, r5, r6}^
 801c910:	206c6578 	rsbcs	r6, ip, r8, ror r5
 801c914:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801c918:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801c91c:	6f697461 	svcvs	0x00697461
 801c920:	20000a6e 	andcs	r0, r0, lr, ror #20
 801c924:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 801c928:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c92c:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801c930:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 801c934:	20000a5d 	andcs	r0, r0, sp, asr sl
 801c938:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 801c93c:	20202074 	eorcs	r2, r0, r4, ror r0
 801c940:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801c944:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 801c948:	69707061 	ldmdbvs	r0!, {r0, r5, r6, ip, sp, lr}^
 801c94c:	3a20676e 	bcc	883670c <__exidx_end+0x8186e0>
 801c950:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801c954:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 801c958:	5420000a 	strtpl	r0, [r0], #-10
 801c95c:	20204830 	eorcs	r4, r0, r0, lsr r8
 801c960:	3a202020 	bcc	88249e8 <__exidx_end+0x8069bc>
 801c964:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 801c968:	305b2066 	subscc	r2, fp, r6, rrx
 801c96c:	5d582578 	cfldr64pl	mvdx2, [r8, #-480]	; 0xfffffe20
 801c970:	5420000a 	strtpl	r0, [r0], #-10
 801c974:	20204831 	eorcs	r4, r0, r1, lsr r8
 801c978:	3a202020 	bcc	8824a00 <__exidx_end+0x8069d4>
 801c97c:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 801c980:	305b2066 	subscc	r2, fp, r6, rrx
 801c984:	5d582578 	cfldr64pl	mvdx2, [r8, #-480]	; 0xfffffe20
 801c988:	4720000a 	strmi	r0, [r0, -sl]!
 801c98c:	61626f6c 	cmnvs	r2, ip, ror #30
 801c990:	6972426c 	ldmdbvs	r2!, {r2, r3, r5, r6, r9, lr}^
 801c994:	6e746867 	cdpvs	8, 7, cr6, cr4, cr7, {3}
 801c998:	3a737365 	bcc	9cf9734 <__exidx_end+0x1cdb708>
 801c99c:	0a752520 	beq	9d65e24 <__exidx_end+0x1d47df8>
 801c9a0:	61472000 	mrsvs	r2, (UNDEF: 71)
 801c9a4:	20616d6d 	rsbcs	r6, r1, sp, ror #26
 801c9a8:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
 801c9ac:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801c9b0:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 801c9b4:	20000a73 	andcs	r0, r0, r3, ror sl
 801c9b8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 801c9bc:	25203a6b 	strcs	r3, [r0, #-2667]!	; 0xfffff595
 801c9c0:	7a482075 	bvc	9224b9c <__exidx_end+0x1206b70>
 801c9c4:	0000000a 	andeq	r0, r0, sl

0801c9c8 <CSWTCH.9>:
 801c9c8:	0801cbdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, fp, lr, pc}
 801c9cc:	0801ccdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, sl, fp, lr, pc}
 801c9d0:	0801cddc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, sl, fp, lr, pc}
 801c9d4:	0801cedc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, sl, fp, lr, pc}
 801c9d8:	0801cfdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, sl, fp, lr, pc}

0801c9dc <gamma10_0>:
 801c9dc:	03020100 	movweq	r0, #8448	; 0x2100
 801c9e0:	07060504 	streq	r0, [r6, -r4, lsl #10]
 801c9e4:	0b0a0908 	bleq	829ee0c <__exidx_end+0x280de0>
 801c9e8:	0f0e0d0c 	svceq	0x000e0d0c
 801c9ec:	13121110 	tstne	r2, #16, 2
 801c9f0:	17161514 			; <UNDEFINED> instruction: 0x17161514
 801c9f4:	1b1a1918 	blne	86a2e5c <__exidx_end+0x684e30>
 801c9f8:	1f1e1d1c 	svcne	0x001e1d1c
 801c9fc:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801ca00:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 801ca04:	2b2a2928 	blcs	8aa6eac <__exidx_end+0xa88e80>
 801ca08:	2f2e2d2c 	svccs	0x002e2d2c
 801ca0c:	33323130 	teqcc	r2, #48, 2
 801ca10:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801ca14:	3b3a3938 	blcc	8eaaefc <__exidx_end+0xe8ced0>
 801ca18:	3f3e3d3c 	svccc	0x003e3d3c
 801ca1c:	43424140 	movtmi	r4, #8512	; 0x2140
 801ca20:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801ca24:	4b4a4948 	blmi	92aef4c <__exidx_end+0x1290f20>
 801ca28:	4f4e4d4c 	svcmi	0x004e4d4c
 801ca2c:	53525150 	cmppl	r2, #80, 2
 801ca30:	57565554 			; <UNDEFINED> instruction: 0x57565554
 801ca34:	5b5a5958 	blpl	96b2f9c <__exidx_end+0x1694f70>
 801ca38:	5f5e5d5c 	svcpl	0x005e5d5c
 801ca3c:	63626160 	cmnvs	r2, #96, 2
 801ca40:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 801ca44:	6b6a6968 	blvs	9ab6fec <__exidx_end+0x1a98fc0>
 801ca48:	6f6e6d6c 	svcvs	0x006e6d6c
 801ca4c:	73727170 	cmnvc	r2, #112, 2
 801ca50:	77767574 			; <UNDEFINED> instruction: 0x77767574
 801ca54:	7b7a7978 	blvc	9ebb03c <__exidx_end+0x1e9d010>
 801ca58:	7f7e7d7c 	svcvc	0x007e7d7c
 801ca5c:	83828180 	orrhi	r8, r2, #128, 2
 801ca60:	87868584 	strhi	r8, [r6, r4, lsl #11]
 801ca64:	8b8a8988 	blhi	62bf08c <__stack_size+0x62bb08c>
 801ca68:	8f8e8d8c 	svchi	0x008e8d8c
 801ca6c:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 801ca70:	97969594 			; <UNDEFINED> instruction: 0x97969594
 801ca74:	9b9a9998 	blls	66c30dc <__stack_size+0x66bf0dc>
 801ca78:	9f9e9d9c 	svcls	0x009e9d9c
 801ca7c:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 801ca80:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 801ca84:	abaaa9a8 	blge	6ac712c <__stack_size+0x6ac312c>
 801ca88:	afaeadac 	svcge	0x00aeadac
 801ca8c:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 801ca90:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 801ca94:	bbbab9b8 	bllt	6ecb17c <__stack_size+0x6ec717c>
 801ca98:	bfbebdbc 	svclt	0x00bebdbc
 801ca9c:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 801caa0:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 801caa4:	cbcac9c8 	blgt	72cf1cc <__stack_size+0x72cb1cc>
 801caa8:	cfcecdcc 	svcgt	0x00cecdcc
 801caac:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 801cab0:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 801cab4:	dbdad9d8 	blle	76d321c <__stack_size+0x76cf21c>
 801cab8:	dfdedddc 	svcle	0x00dedddc
 801cabc:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 801cac0:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 801cac4:	ebeae9e8 	bl	7ad726c <__stack_size+0x7ad326c>
 801cac8:	efeeedec 	svc	0x00eeedec
 801cacc:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 801cad0:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 801cad4:	fbfaf9f8 	blx	7edb2be <__stack_size+0x7ed72be>
 801cad8:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

0801cadc <gamma20_0>:
	...
 801cae8:	01010101 	tsteq	r1, r1, lsl #2
 801caec:	01010101 	tsteq	r1, r1, lsl #2
 801caf0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801caf4:	03030202 	movweq	r0, #12802	; 0x3202
 801caf8:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 801cafc:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 801cb00:	06060505 	streq	r0, [r6], -r5, lsl #10
 801cb04:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801cb08:	09080808 	stmdbeq	r8, {r3, fp}
 801cb0c:	0a0a0909 	beq	829ef38 <__exidx_end+0x280f0c>
 801cb10:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801cb14:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801cb18:	100f0f0e 	andne	r0, pc, lr, lsl #30
 801cb1c:	12111110 	andsne	r1, r1, #16, 2
 801cb20:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 801cb24:	16151514 			; <UNDEFINED> instruction: 0x16151514
 801cb28:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 801cb2c:	1b1a1a19 	blne	86a3398 <__exidx_end+0x68536c>
 801cb30:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 801cb34:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 801cb38:	23232221 			; <UNDEFINED> instruction: 0x23232221
 801cb3c:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 801cb40:	2a292827 	bcs	8a66be4 <__exidx_end+0xa48bb8>
 801cb44:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 801cb48:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
 801cb4c:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 801cb50:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 801cb54:	3b3a3938 	blcc	8eab03c <__exidx_end+0xe8d010>
 801cb58:	3f3e3d3c 	svccc	0x003e3d3c
 801cb5c:	43424140 	movtmi	r4, #8512	; 0x2140
 801cb60:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801cb64:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 801cb68:	504f4e4d 	subpl	r4, pc, sp, asr #28
 801cb6c:	55545251 	ldrbpl	r5, [r4, #-593]	; 0xfffffdaf
 801cb70:	59585756 	ldmdbpl	r8, {r1, r2, r4, r6, r8, r9, sl, ip, lr}^
 801cb74:	5e5d5c5b 	mrcpl	12, 2, r5, cr13, cr11, {2}
 801cb78:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 801cb7c:	68676664 	stmdavs	r7!, {r2, r5, r6, r9, sl, sp, lr}^
 801cb80:	6d6c6b69 	fstmdbxvs	ip!, {d22-d73}	;@ Deprecated
 801cb84:	7371706f 	cmnvc	r1, #111	; 0x6f
 801cb88:	78777574 	ldmdavc	r7!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 801cb8c:	7e7c7b79 	vmovvc.s8	r7, d12[7]
 801cb90:	8382807f 	orrhi	r8, r2, #127	; 0x7f
 801cb94:	89888685 	stmibhi	r8, {r0, r2, r7, r9, sl, pc}
 801cb98:	8f8e8c8b 	svchi	0x008e8c8b
 801cb9c:	95949291 	ldrls	r9, [r4, #657]	; 0x291
 801cba0:	9b9a9897 	blls	66c2e04 <__stack_size+0x66bee04>
 801cba4:	a2a09e9d 	adcge	r9, r0, #2512	; 0x9d0
 801cba8:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 801cbac:	afadabaa 	svcge	0x00adabaa
 801cbb0:	b5b4b2b0 	ldrlt	fp, [r4, #688]!	; 0x2b0
 801cbb4:	bcbab9b7 			; <UNDEFINED> instruction: 0xbcbab9b7
 801cbb8:	c3c1c0be 	bicgt	ip, r1, #190	; 0xbe
 801cbbc:	cac8c7c5 	bgt	724ead8 <__stack_size+0x724aad8>
 801cbc0:	d1cfcecc 	bicle	ip, pc, ip, asr #29
 801cbc4:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 801cbc8:	e0dedcda 	ldrsb	sp, [lr], #202	; 0xca
 801cbcc:	e8e6e4e2 	stmia	r6!, {r1, r5, r6, r7, sl, sp, lr, pc}^
 801cbd0:	efedebe9 	svc	0x00edebe9
 801cbd4:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 801cbd8:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0801cbdc <gamma21_0>:
	...
 801cbe8:	01010000 	mrseq	r0, (UNDEF: 1)
 801cbec:	01010101 	tsteq	r1, r1, lsl #2
 801cbf0:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 801cbf4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801cbf8:	03030302 	movweq	r0, #13058	; 0x3302
 801cbfc:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 801cc00:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 801cc04:	06060505 	streq	r0, [r6], -r5, lsl #10
 801cc08:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801cc0c:	09080808 	stmdbeq	r8, {r3, fp}
 801cc10:	0a0a0909 	beq	829f03c <__exidx_end+0x281010>
 801cc14:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801cc18:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801cc1c:	0f0f0e0e 	svceq	0x000f0e0e
 801cc20:	11111010 	tstne	r1, r0, lsl r0
 801cc24:	14131212 	ldrne	r1, [r3], #-530	; 0xfffffdee
 801cc28:	16151514 			; <UNDEFINED> instruction: 0x16151514
 801cc2c:	18181716 	ldmdane	r8, {r1, r2, r4, r8, r9, sl, ip}
 801cc30:	1b1a1919 	blne	86a309c <__exidx_end+0x685070>
 801cc34:	1d1d1c1b 	ldcne	12, cr1, [sp, #-108]	; 0xffffff94
 801cc38:	201f1f1e 	andscs	r1, pc, lr, lsl pc	; <UNPREDICTABLE>
 801cc3c:	23222121 			; <UNDEFINED> instruction: 0x23222121
 801cc40:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 801cc44:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 801cc48:	2c2c2b2a 			; <UNDEFINED> instruction: 0x2c2c2b2a
 801cc4c:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801cc50:	33333231 	teqcc	r3, #268435459	; 0x10000003
 801cc54:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801cc58:	3b3a3938 	blcc	8eab140 <__exidx_end+0xe8d114>
 801cc5c:	3f3e3d3c 	svccc	0x003e3d3c
 801cc60:	43424140 	movtmi	r4, #8512	; 0x2140
 801cc64:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801cc68:	4c4b4948 	mcrrmi	9, 4, r4, fp, cr8	; <UNPREDICTABLE>
 801cc6c:	504f4e4d 	subpl	r4, pc, sp, asr #28
 801cc70:	55545351 	ldrbpl	r5, [r4, #-849]	; 0xfffffcaf
 801cc74:	5a585756 	bpl	96329d4 <__exidx_end+0x16149a8>
 801cc78:	5f5d5c5b 	svcpl	0x005d5c5b
 801cc7c:	64626160 	strbtvs	r6, [r2], #-352	; 0xfffffea0
 801cc80:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 801cc84:	6e6d6b6a 	vnmulvs.f64	d22, d13, d26
 801cc88:	74727170 	ldrbtvc	r7, [r2], #-368	; 0xfffffe90
 801cc8c:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 801cc90:	7f7e7c7b 	svcvc	0x007e7c7b
 801cc94:	85838281 	strhi	r8, [r3, #641]	; 0x281
 801cc98:	8b898886 	blhi	627eeb8 <__stack_size+0x627aeb8>
 801cc9c:	91908e8d 	orrsls	r8, r0, sp, lsl #29
 801cca0:	97969493 			; <UNDEFINED> instruction: 0x97969493
 801cca4:	9e9c9b99 	vmovls.32	r9, d28[0]
 801cca8:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 801ccac:	abaaa8a6 	blge	6ac6f4c <__stack_size+0x6ac2f4c>
 801ccb0:	b2b0afad 	adcslt	sl, r0, #692	; 0x2b4
 801ccb4:	b9b7b6b4 	ldmiblt	r7!, {r2, r4, r5, r7, r9, sl, ip, sp, pc}
 801ccb8:	c0bfbdbb 	ldrhtgt	fp, [pc], fp
 801ccbc:	c8c6c4c2 	stmiagt	r6, {r1, r6, r7, sl, lr, pc}^
 801ccc0:	cfcdcbca 	svcgt	0x00cdcbca
 801ccc4:	d7d5d3d1 			; <UNDEFINED> instruction: 0xd7d5d3d1
 801ccc8:	dfdddbd9 	svcle	0x00dddbd9
 801cccc:	e6e4e2e1 	strbt	lr, [r4], r1, ror #5
 801ccd0:	eeeceae8 	vfms.f32	s29, s25, s17
 801ccd4:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 801ccd8:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0801ccdc <gamma22_0>:
	...
 801cce8:	01000000 	mrseq	r0, (UNDEF: 0)
 801ccec:	01010101 	tsteq	r1, r1, lsl #2
 801ccf0:	01010101 	tsteq	r1, r1, lsl #2
 801ccf4:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 801ccf8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801ccfc:	03030303 	movweq	r0, #13059	; 0x3303
 801cd00:	04040403 	streq	r0, [r4], #-1027	; 0xfffffbfd
 801cd04:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 801cd08:	06060605 	streq	r0, [r6], -r5, lsl #12
 801cd0c:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801cd10:	09080808 	stmdbeq	r8, {r3, fp}
 801cd14:	0a0a0909 	beq	829f140 <__exidx_end+0x281114>
 801cd18:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801cd1c:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 801cd20:	0f0f0e0e 	svceq	0x000f0e0e
 801cd24:	11111010 	tstne	r1, r0, lsl r0
 801cd28:	13131212 	tstne	r3, #536870913	; 0x20000001
 801cd2c:	16151414 			; <UNDEFINED> instruction: 0x16151414
 801cd30:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801cd34:	1a1a1919 	bne	86a31a0 <__exidx_end+0x685174>
 801cd38:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801cd3c:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801cd40:	23222121 			; <UNDEFINED> instruction: 0x23222121
 801cd44:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 801cd48:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 801cd4c:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 801cd50:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801cd54:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 801cd58:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801cd5c:	3b3a3938 	blcc	8eab244 <__exidx_end+0xe8d218>
 801cd60:	3f3e3d3c 	svccc	0x003e3d3c
 801cd64:	43424140 	movtmi	r4, #8512	; 0x2140
 801cd68:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801cd6c:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 801cd70:	514f4e4d 	cmppl	pc, sp, asr #28
 801cd74:	55545352 	ldrbpl	r5, [r4, #-850]	; 0xfffffcae
 801cd78:	5a595857 	bpl	9672edc <__exidx_end+0x1654eb0>
 801cd7c:	5f5e5d5b 	svcpl	0x005e5d5b
 801cd80:	64636261 	strbtvs	r6, [r3], #-609	; 0xfffffd9f
 801cd84:	6a696766 	bvs	9a76b24 <__exidx_end+0x1a58af8>
 801cd88:	6f6e6d6b 	svcvs	0x006e6d6b
 801cd8c:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 801cd90:	7b797877 	blvc	9e7af74 <__exidx_end+0x1e5cf48>
 801cd94:	817f7e7c 	cmnhi	pc, ip, ror lr	; <UNPREDICTABLE>
 801cd98:	87858482 	strhi	r8, [r5, r2, lsl #9]
 801cd9c:	8d8c8a89 	vstrhi	s16, [ip, #548]	; 0x224
 801cda0:	9492918f 	ldrls	r9, [r2], #399	; 0x18f
 801cda4:	9a999795 	bls	6682c00 <__stack_size+0x667ec00>
 801cda8:	a19f9e9c 			; <UNDEFINED> instruction: 0xa19f9e9c
 801cdac:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 801cdb0:	afadacaa 	svcge	0x00adacaa
 801cdb4:	b6b5b3b1 			; <UNDEFINED> instruction: 0xb6b5b3b1
 801cdb8:	bebcbab8 			; <UNDEFINED> instruction: 0xbebcbab8
 801cdbc:	c5c4c2c0 	strbgt	ip, [r4, #704]	; 0x2c0
 801cdc0:	cdcbc9c7 	vstrgt.16	s25, [fp, #398]	; 0x18e	; <UNPREDICTABLE>
 801cdc4:	d5d3d1cf 	ldrble	sp, [r3, #463]	; 0x1cf
 801cdc8:	dddbd9d7 	vldrle.16	s27, [fp, #430]	; 0x1ae	; <UNPREDICTABLE>
 801cdcc:	e5e3e1df 	strb	lr, [r3, #479]!	; 0x1df
 801cdd0:	eeeceae7 	vfms.f32	s29, s25, s15
 801cdd4:	f6f4f2f0 			; <UNDEFINED> instruction: 0xf6f4f2f0
 801cdd8:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8

0801cddc <gamma23_0>:
	...
 801cdec:	01010100 	mrseq	r0, (UNDEF: 17)
 801cdf0:	01010101 	tsteq	r1, r1, lsl #2
 801cdf4:	01010101 	tsteq	r1, r1, lsl #2
 801cdf8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801cdfc:	03020202 	movweq	r0, #8706	; 0x2202
 801ce00:	03030303 	movweq	r0, #13059	; 0x3303
 801ce04:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 801ce08:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 801ce0c:	06060605 	streq	r0, [r6], -r5, lsl #12
 801ce10:	07070707 	streq	r0, [r7, -r7, lsl #14]
 801ce14:	09080808 	stmdbeq	r8, {r3, fp}
 801ce18:	0a0a0a09 	beq	829f644 <__exidx_end+0x281618>
 801ce1c:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801ce20:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 801ce24:	0f0f0e0e 	svceq	0x000f0e0e
 801ce28:	11111010 	tstne	r1, r0, lsl r0
 801ce2c:	13131212 	tstne	r3, #536870913	; 0x20000001
 801ce30:	15151414 	ldrne	r1, [r5, #-1044]	; 0xfffffbec
 801ce34:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801ce38:	1a1a1918 	bne	86a32a0 <__exidx_end+0x685274>
 801ce3c:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801ce40:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801ce44:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801ce48:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 801ce4c:	29282726 	stmdbcs	r8!, {r1, r2, r5, r8, r9, sl, sp}
 801ce50:	2c2b2a2a 			; <UNDEFINED> instruction: 0x2c2b2a2a
 801ce54:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801ce58:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 801ce5c:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801ce60:	3b3a3938 	blcc	8eab348 <__exidx_end+0xe8d31c>
 801ce64:	3f3e3d3c 	svccc	0x003e3d3c
 801ce68:	43424140 	movtmi	r4, #8512	; 0x2140
 801ce6c:	48474645 	stmdami	r7, {r0, r2, r6, r9, sl, lr}^
 801ce70:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 801ce74:	51504f4e 	cmppl	r0, lr, asr #30
 801ce78:	56555452 			; <UNDEFINED> instruction: 0x56555452
 801ce7c:	5b5a5957 	blpl	96b33e0 <__exidx_end+0x16953b4>
 801ce80:	605f5e5c 	subsvs	r5, pc, ip, asr lr	; <UNPREDICTABLE>
 801ce84:	66646362 	strbtvs	r6, [r4], -r2, ror #6
 801ce88:	6b6a6867 	blvs	9ab702c <__exidx_end+0x1a99000>
 801ce8c:	71706e6d 	cmnvc	r0, sp, ror #28
 801ce90:	77757472 			; <UNDEFINED> instruction: 0x77757472
 801ce94:	7d7b7a78 	vldmdbvc	fp!, {s15-s134}
 801ce98:	8382807e 	orrhi	r8, r2, #126	; 0x7e
 801ce9c:	8a888685 	bhi	623e8b8 <__stack_size+0x623a8b8>
 801cea0:	908f8d8b 	addls	r8, pc, fp, lsl #27
 801cea4:	97959492 			; <UNDEFINED> instruction: 0x97959492
 801cea8:	9e9c9a99 			; <UNDEFINED> instruction: 0x9e9c9a99
 801ceac:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 801ceb0:	acaaa9a7 			; <UNDEFINED> instruction: 0xacaaa9a7
 801ceb4:	b4b2b0ae 	ldrtlt	fp, [r2], #174	; 0xae
 801ceb8:	bbb9b7b6 	bllt	6e8ad98 <__stack_size+0x6e86d98>
 801cebc:	c3c1bfbd 	bicgt	fp, r1, #756	; 0x2f4
 801cec0:	cbc9c7c5 	blgt	728eddc <__stack_size+0x728addc>
 801cec4:	d3d1cfcd 	bicsle	ip, r1, #820	; 0x334
 801cec8:	dcdad7d5 	ldclle	7, cr13, [sl], {213}	; 0xd5
 801cecc:	e4e2e0de 	strbt	lr, [r2], #222	; 0xde
 801ced0:	edebe9e6 			; <UNDEFINED> instruction: 0xedebe9e6
 801ced4:	f6f4f1ef 			; <UNDEFINED> instruction: 0xf6f4f1ef
 801ced8:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801cedc <gamma24_0>:
	...
 801ceec:	01000000 	mrseq	r0, (UNDEF: 0)
 801cef0:	01010101 	tsteq	r1, r1, lsl #2
 801cef4:	01010101 	tsteq	r1, r1, lsl #2
 801cef8:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 801cefc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801cf00:	03030202 	movweq	r0, #12802	; 0x3202
 801cf04:	04030303 	streq	r0, [r3], #-771	; 0xfffffcfd
 801cf08:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 801cf0c:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
 801cf10:	06060606 	streq	r0, [r6], -r6, lsl #12
 801cf14:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 801cf18:	09090808 	stmdbeq	r9, {r3, fp}
 801cf1c:	0a0a0a09 	beq	829f748 <__exidx_end+0x28171c>
 801cf20:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801cf24:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801cf28:	0f0f0e0e 	svceq	0x000f0e0e
 801cf2c:	11111010 	tstne	r1, r0, lsl r0
 801cf30:	13131212 	tstne	r3, #536870913	; 0x20000001
 801cf34:	16151414 			; <UNDEFINED> instruction: 0x16151414
 801cf38:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801cf3c:	1a1a1918 	bne	86a33a4 <__exidx_end+0x685378>
 801cf40:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801cf44:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801cf48:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801cf4c:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 801cf50:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 801cf54:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 801cf58:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801cf5c:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 801cf60:	37363535 			; <UNDEFINED> instruction: 0x37363535
 801cf64:	3b3a3938 	blcc	8eab44c <__exidx_end+0xe8d420>
 801cf68:	403f3e3c 	eorsmi	r3, pc, ip, lsr lr	; <UNPREDICTABLE>
 801cf6c:	44434241 	strbmi	r4, [r3], #-577	; 0xfffffdbf
 801cf70:	49474645 	stmdbmi	r7, {r0, r2, r6, r9, sl, lr}^
 801cf74:	4d4c4b4a 	vstrmi	d20, [ip, #-296]	; 0xfffffed8
 801cf78:	5251504e 	subspl	r5, r1, #78	; 0x4e
 801cf7c:	57565553 			; <UNDEFINED> instruction: 0x57565553
 801cf80:	5c5b5a58 	mrrcpl	10, 5, r5, fp, cr8
 801cf84:	62605f5e 	rsbvs	r5, r0, #376	; 0x178
 801cf88:	67666463 	strbvs	r6, [r6, -r3, ror #8]!
 801cf8c:	6d6c6a69 	vstmdbvs	ip!, {s13-s117}
 801cf90:	7372706f 	cmnvc	r2, #111	; 0x6f
 801cf94:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 801cf98:	7f7e7c7b 	svcvc	0x007e7c7b
 801cf9c:	86848381 	strhi	r8, [r4], r1, lsl #7
 801cfa0:	8d8b8988 	vstrhi.16	s16, [fp, #272]	; 0x110	; <UNPREDICTABLE>
 801cfa4:	9492908e 	ldrls	r9, [r2], #142	; 0x8e
 801cfa8:	9b999795 	blls	6682e04 <__stack_size+0x667ee04>
 801cfac:	a2a09e9c 	adcge	r9, r0, #156, 28	; 0x9c0
 801cfb0:	a9a7a6a4 	stmibge	r7!, {r2, r5, r7, r9, sl, sp, pc}
 801cfb4:	b1afadab 			; <UNDEFINED> instruction: 0xb1afadab
 801cfb8:	b9b7b5b3 	ldmiblt	r7!, {r0, r1, r4, r5, r7, r8, sl, ip, sp, pc}
 801cfbc:	c1bfbdbb 			; <UNDEFINED> instruction: 0xc1bfbdbb
 801cfc0:	c9c7c5c3 	stmibgt	r7, {r0, r1, r6, r7, r8, sl, lr, pc}^
 801cfc4:	d2cfcdcb 	sbcle	ip, pc, #12992	; 0x32c0
 801cfc8:	dad8d6d4 	ble	7652b20 <__stack_size+0x764eb20>
 801cfcc:	e3e1dfdc 	mvn	sp, #220, 30	; 0x370
 801cfd0:	eceae8e5 	stcl	8, cr14, [sl], #916	; 0x394
 801cfd4:	f6f3f1ef 			; <UNDEFINED> instruction: 0xf6f3f1ef
 801cfd8:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801cfdc <gamma25_0>:
	...
 801cff0:	01010000 	mrseq	r0, (UNDEF: 1)
 801cff4:	01010101 	tsteq	r1, r1, lsl #2
 801cff8:	01010101 	tsteq	r1, r1, lsl #2
 801cffc:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 801d000:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801d004:	03030302 	movweq	r0, #13058	; 0x3302
 801d008:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 801d00c:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
 801d010:	06050505 	streq	r0, [r5], -r5, lsl #10
 801d014:	07060606 	streq	r0, [r6, -r6, lsl #12]
 801d018:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 801d01c:	09090808 	stmdbeq	r9, {r3, fp}
 801d020:	0a0a0a09 	beq	829f84c <__exidx_end+0x281820>
 801d024:	0c0c0b0b 			; <UNDEFINED> instruction: 0x0c0c0b0b
 801d028:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801d02c:	0f0f0f0e 	svceq	0x000f0f0e
 801d030:	11111010 	tstne	r1, r0, lsl r0
 801d034:	13131212 	tstne	r3, #536870913	; 0x20000001
 801d038:	16151414 			; <UNDEFINED> instruction: 0x16151414
 801d03c:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801d040:	1a1a1919 	bne	86a34ac <__exidx_end+0x685480>
 801d044:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801d048:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801d04c:	23222121 			; <UNDEFINED> instruction: 0x23222121
 801d050:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 801d054:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 801d058:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 801d05c:	302f2e2e 	eorcc	r2, pc, lr, lsr #28
 801d060:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 801d064:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 801d068:	3c3b3a39 			; <UNDEFINED> instruction: 0x3c3b3a39
 801d06c:	403f3e3d 	eorsmi	r3, pc, sp, lsr lr	; <UNPREDICTABLE>
 801d070:	45444341 	strbmi	r4, [r4, #-833]	; 0xfffffcbf
 801d074:	49484746 	stmdbmi	r8, {r1, r2, r6, r8, r9, sl, lr}^
 801d078:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
 801d07c:	53525150 	cmppl	r2, #80, 2
 801d080:	59575655 	ldmdbpl	r7, {r0, r2, r4, r6, r9, sl, ip, lr}^
 801d084:	5e5d5b5a 	vmovpl.s8	r5, d13[2]
 801d088:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 801d08c:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 801d090:	6f6e6c6b 	svcvs	0x006e6c6b
 801d094:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 801d098:	7c7a7977 			; <UNDEFINED> instruction: 0x7c7a7977
 801d09c:	82817f7d 	addhi	r7, r1, #500	; 0x1f4
 801d0a0:	89878684 	stmibhi	r7, {r2, r7, r9, sl, pc}
 801d0a4:	908e8d8b 	addls	r8, lr, fp, lsl #27
 801d0a8:	97969492 			; <UNDEFINED> instruction: 0x97969492
 801d0ac:	9f9d9b99 	svcls	0x009d9b99
 801d0b0:	a6a5a3a1 	strtge	sl, [r5], r1, lsr #7
 801d0b4:	aeacaaa8 	vfmage.f32	s20, s25, s17
 801d0b8:	b6b4b2b0 			; <UNDEFINED> instruction: 0xb6b4b2b0
 801d0bc:	bfbdbab8 	svclt	0x00bdbab8
 801d0c0:	c7c5c3c1 	strbgt	ip, [r5, r1, asr #7]
 801d0c4:	d0ceccc9 	sbcle	ip, lr, r9, asr #25
 801d0c8:	d9d7d4d2 	ldmible	r7, {r1, r4, r6, r7, sl, ip, lr, pc}^
 801d0cc:	e2e0dddb 	rsc	sp, r0, #14016	; 0x36c0
 801d0d0:	ebe9e7e4 	bl	7a97068 <__stack_size+0x7a93068>
 801d0d4:	f5f3f0ee 			; <UNDEFINED> instruction: 0xf5f3f0ee
 801d0d8:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801d0dc <gamma25_5>:
 801d0dc:	01010100 	mrseq	r0, (UNDEF: 17)
 801d0e0:	01010101 	tsteq	r1, r1, lsl #2
 801d0e4:	01010101 	tsteq	r1, r1, lsl #2
 801d0e8:	01010101 	tsteq	r1, r1, lsl #2
 801d0ec:	01010101 	tsteq	r1, r1, lsl #2
 801d0f0:	01010101 	tsteq	r1, r1, lsl #2
 801d0f4:	01010101 	tsteq	r1, r1, lsl #2
 801d0f8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801d0fc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801d100:	03030302 	movweq	r0, #13058	; 0x3302
 801d104:	03030303 	movweq	r0, #13059	; 0x3303
 801d108:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 801d10c:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 801d110:	06060605 	streq	r0, [r6], -r5, lsl #12
 801d114:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801d118:	08080807 	stmdaeq	r8, {r0, r1, r2, fp}
 801d11c:	0a090909 	beq	825f548 <__exidx_end+0x24151c>
 801d120:	0b0b0a0a 	bleq	82df950 <__exidx_end+0x2c1924>
 801d124:	0c0c0c0b 	stceq	12, cr0, [ip], {11}
 801d128:	0e0e0d0d 	cdpeq	13, 0, cr0, cr14, cr13, {0}
 801d12c:	100f0f0f 	andne	r0, pc, pc, lsl #30
 801d130:	12111110 	andsne	r1, r1, #16, 2
 801d134:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 801d138:	16161514 			; <UNDEFINED> instruction: 0x16161514
 801d13c:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 801d140:	1b1a1a19 	blne	86a39ac <__exidx_end+0x685980>
 801d144:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 801d148:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 801d14c:	23232221 			; <UNDEFINED> instruction: 0x23232221
 801d150:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 801d154:	2a292827 	bcs	8a671f8 <__exidx_end+0xa491cc>
 801d158:	2d2c2b2b 	fstmdbxcs	ip!, {d2-d22}	;@ Deprecated
 801d15c:	31302f2e 	teqcc	r0, lr, lsr #30
 801d160:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 801d164:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 801d168:	3d3c3a39 	vldmdbcc	ip!, {s6-s62}
 801d16c:	41403f3e 	cmpmi	r0, lr, lsr pc
 801d170:	45444342 	strbmi	r4, [r4, #-834]	; 0xfffffcbe
 801d174:	4a494846 	bmi	926f294 <__exidx_end+0x1251268>
 801d178:	4f4e4c4b 	svcmi	0x004e4c4b
 801d17c:	54535150 	ldrbpl	r5, [r3], #-336	; 0xfffffeb0
 801d180:	59585655 	ldmdbpl	r8, {r0, r2, r4, r6, r9, sl, ip, lr}^
 801d184:	5e5d5c5a 	mrcpl	12, 2, r5, cr13, cr10, {2}
 801d188:	64636160 	strbtvs	r6, [r3], #-352	; 0xfffffea0
 801d18c:	6a686765 	bvs	9a36f28 <__exidx_end+0x1a18efc>
 801d190:	706e6d6b 	rsbvc	r6, lr, fp, ror #26
 801d194:	76747371 			; <UNDEFINED> instruction: 0x76747371
 801d198:	7c7b7978 			; <UNDEFINED> instruction: 0x7c7b7978
 801d19c:	8381807e 	orrhi	r8, r1, #126	; 0x7e
 801d1a0:	8a888685 	bhi	623ebbc <__stack_size+0x623abbc>
 801d1a4:	918f8d8b 	orrls	r8, pc, fp, lsl #27
 801d1a8:	98969492 	ldmls	r6, {r1, r4, r7, sl, ip, pc}
 801d1ac:	9f9d9c9a 	svcls	0x009d9c9a
 801d1b0:	a7a5a3a1 	strge	sl, [r5, r1, lsr #7]!
 801d1b4:	afadaba9 	svcge	0x00adaba9
 801d1b8:	b7b5b3b1 			; <UNDEFINED> instruction: 0xb7b5b3b1
 801d1bc:	bfbdbbb9 	svclt	0x00bdbbb9
 801d1c0:	c8c6c3c1 	stmiagt	r6, {r0, r6, r7, r8, r9, lr, pc}^
 801d1c4:	d0ceccca 	sbcle	ip, lr, sl, asr #25
 801d1c8:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 801d1cc:	e3e0dedc 	mvn	sp, #220, 28	; 0xdc0
 801d1d0:	eceae7e5 	stcl	7, cr14, [sl], #916	; 0x394
 801d1d4:	f6f3f1ee 			; <UNDEFINED> instruction: 0xf6f3f1ee
 801d1d8:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8
 801d1dc:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 801d1e0:	006e776f 	rsbeq	r7, lr, pc, ror #14
 801d1e4:	65646e55 	strbvs	r6, [r4, #-3669]!	; 0xfffff1ab
 801d1e8:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 801d1ec:	 	andeq	r0, r0, #100	; 0x64

0801d1ee <CSWTCH.18>:
 801d1ee:	02020200 	andeq	r0, r2, #0, 4
 801d1f2:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 801d1f6:	 	ldrbmi	r0, [r2, -r0, lsl #10]

0801d1f8 <PixelType::MAPS>:
 801d1f8:	00424752 	subeq	r4, r2, r2, asr r7
 801d1fc:	00474252 	subeq	r4, r7, r2, asr r2
 801d200:	00425247 	subeq	r5, r2, r7, asr #4
 801d204:	00524247 	subseq	r4, r2, r7, asr #4
 801d208:	00475242 	subeq	r5, r7, r2, asr #4
 801d20c:	00524742 	subseq	r4, r2, r2, asr #14

0801d210 <PixelType::TYPES>:
 801d210:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801d214:	00003130 	andeq	r3, r0, r0, lsr r1
 801d218:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801d21c:	00003131 	andeq	r3, r0, r1, lsr r1
 801d220:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801d224:	00003231 	andeq	r3, r0, r1, lsr r2
 801d228:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801d22c:	00423231 	subeq	r3, r2, r1, lsr r2
 801d230:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801d234:	00003331 	andeq	r3, r0, r1, lsr r3
 801d238:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801d23c:	00003531 	andeq	r3, r0, r1, lsr r5
 801d240:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801d244:	00003231 	andeq	r3, r0, r1, lsr r2
 801d248:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801d24c:	00573231 	subseq	r3, r7, r1, lsr r2
 801d250:	31534355 	cmpcc	r3, r5, asr r3
 801d254:	00333039 	eorseq	r3, r3, r9, lsr r0
 801d258:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 801d25c:	00333039 	eorseq	r3, r3, r9, lsr r0
 801d260:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 801d264:	00003231 	andeq	r3, r0, r1, lsr r2
 801d268:	31415041 	cmpcc	r1, r1, asr #32
 801d26c:	00003230 	andeq	r3, r0, r0, lsr r2
 801d270:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801d274:	00003232 	andeq	r3, r0, r2, lsr r2
 801d278:	31383950 	teqcc	r8, r0, asr r9
 801d27c:	00000033 	andeq	r0, r0, r3, lsr r0

0801d280 <s_patternName>:
 801d280:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 801d28c:	61520000 	cmpvs	r2, r0
 801d290:	6f626e69 	svcvs	0x00626e69
 801d294:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 801d298:	00656c63 	rsbeq	r6, r5, r3, ror #24
 801d29c:	61656854 	cmnvs	r5, r4, asr r8
 801d2a0:	20726574 	rsbscs	r6, r2, r4, ror r5
 801d2a4:	73616863 	cmnvc	r1, #6488064	; 0x630000
 801d2a8:	6f430065 	svcvs	0x00430065
 801d2ac:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 801d2b0:	70697720 	rsbvc	r7, r9, r0, lsr #14
 801d2b4:	00000065 	andeq	r0, r0, r5, rrx
 801d2b8:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 801d2bc:	0072656e 	rsbseq	r6, r2, lr, ror #10
 801d2c0:	00000000 	andeq	r0, r0, r0
 801d2c4:	61460000 	mrsvs	r0, (UNDEF: 70)
 801d2c8:	00006564 	andeq	r6, r0, r4, ror #10
	...

0801d2d4 <pixel::s_GPIO_PINs>:
 801d2d4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

0801d2d8 <s_aStorSize>:
 801d2d8:	00000060 	andeq	r0, r0, r0, rrx
 801d2dc:	00000090 	muleq	r0, r0, r0
 801d2e0:	00000020 	andeq	r0, r0, r0, lsr #32
 801d2e4:	00000040 	andeq	r0, r0, r0, asr #32
 801d2e8:	00000060 	andeq	r0, r0, r0, rrx
 801d2ec:	00000040 	andeq	r0, r0, r0, asr #32
 801d2f0:	00000020 	andeq	r0, r0, r0, lsr #32
 801d2f4:	00000020 	andeq	r0, r0, r0, lsr #32
 801d2f8:	000001e0 	andeq	r0, r0, r0, ror #3
 801d2fc:	00000040 	andeq	r0, r0, r0, asr #32
 801d300:	00000020 	andeq	r0, r0, r0, lsr #32
 801d304:	00000060 	andeq	r0, r0, r0, rrx
 801d308:	00000030 	andeq	r0, r0, r0, lsr r0
 801d30c:	00000020 	andeq	r0, r0, r0, lsr #32
 801d310:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 801d314:	00000030 	andeq	r0, r0, r0, lsr r0
 801d318:	00000040 	andeq	r0, r0, r0, asr #32
 801d31c:	00000020 	andeq	r0, r0, r0, lsr #32
 801d320:	00000060 	andeq	r0, r0, r0, rrx
 801d324:	00000020 	andeq	r0, r0, r0, lsr #32
 801d328:	00000400 	andeq	r0, r0, r0, lsl #8
 801d32c:	00000020 	andeq	r0, r0, r0, lsr #32
 801d330:	00000020 	andeq	r0, r0, r0, lsr #32
 801d334:	00000040 	andeq	r0, r0, r0, asr #32
 801d338:	00000060 	andeq	r0, r0, r0, rrx
 801d33c:	00000020 	andeq	r0, r0, r0, lsr #32
 801d340:	00000020 	andeq	r0, r0, r0, lsr #32
 801d344:	000000c0 	andeq	r0, r0, r0, asr #1

0801d348 <vtable for StoreDisplayUdf>:
	...
 801d350:	080140b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, lr}
 801d354:	08014101 	stmdaeq	r1, {r0, r8, lr}
 801d358:	080140dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, lr}
 801d35c:	080140b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, lr}

0801d360 <vtable for StoreDmxSend>:
	...
 801d368:	08014121 	stmdaeq	r1, {r0, r5, r8, lr}
 801d36c:	0801416d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, lr}
 801d370:	08014149 	stmdaeq	r1, {r0, r3, r6, r8, lr}
 801d374:	08014125 	stmdaeq	r1, {r0, r2, r5, r8, lr}

0801d378 <vtable for StoreNetwork>:
	...
 801d380:	0801418d 	stmdaeq	r1, {r0, r2, r3, r7, r8, lr}
 801d384:	08014275 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9, lr}
 801d388:	08014195 	stmdaeq	r1, {r0, r2, r4, r7, r8, lr}
 801d38c:	08014289 	stmdaeq	r1, {r0, r3, r7, r9, lr}
 801d390:	08014215 	stmdaeq	r1, {r0, r2, r4, r9, lr}
 801d394:	080141e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, lr}
 801d398:	080141b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, lr}
 801d39c:	08014241 	stmdaeq	r1, {r0, r6, r9, lr}
 801d3a0:	08009625 	stmdaeq	r0, {r0, r2, r5, r9, sl, ip, pc}
 801d3a4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801d3a8:	00000000 	andeq	r0, r0, r0
 801d3ac:	0801418f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, lr}
 801d3b0:	08014281 	stmdaeq	r1, {r0, r7, r9, lr}
 801d3b4:	08014239 	stmdaeq	r1, {r0, r3, r4, r5, r9, lr}
 801d3b8:	0801420d 	stmdaeq	r1, {r0, r2, r3, r9, lr}
 801d3bc:	080141e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, lr}
 801d3c0:	0801426d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r9, lr}
 801d3c4:	0800964d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, ip, pc}

0801d3c8 <vtable for StoreRDMDevice>:
	...
 801d3d0:	080142c1 	stmdaeq	r1, {r0, r6, r7, r9, lr}
 801d3d4:	08014331 	stmdaeq	r1, {r0, r4, r5, r8, r9, lr}
 801d3d8:	080142c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, lr}
 801d3dc:	08014345 	stmdaeq	r1, {r0, r2, r6, r8, r9, lr}
 801d3e0:	080142ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r9, lr}
 801d3e4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801d3e8:	00000000 	andeq	r0, r0, r0
 801d3ec:	080142c3 	stmdaeq	r1, {r0, r1, r6, r7, r9, lr}
 801d3f0:	0801433d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, r9, lr}
 801d3f4:	08014329 	stmdaeq	r1, {r0, r3, r5, r8, r9, lr}

0801d3f8 <vtable for StoreRemoteConfig>:
	...
 801d400:	08014381 	stmdaeq	r1, {r0, r7, r8, r9, lr}
 801d404:	080143cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, lr}
 801d408:	080143a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, lr}
 801d40c:	08014385 	stmdaeq	r1, {r0, r2, r7, r8, r9, lr}

0801d410 <vtable for StoreArtNet>:
	...
 801d418:	080143f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, lr}
 801d41c:	08014681 	stmdaeq	r1, {r0, r7, r9, sl, lr}
 801d420:	080143f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, lr}
 801d424:	08014661 	stmdaeq	r1, {r0, r5, r6, r9, sl, lr}
 801d428:	080145ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, sl, lr}
 801d42c:	0801457d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, sl, lr}
 801d430:	08014551 	stmdaeq	r1, {r0, r4, r6, r8, sl, lr}
 801d434:	0801441d 	stmdaeq	r1, {r0, r2, r3, r4, sl, lr}
 801d438:	08014465 	stmdaeq	r1, {r0, r2, r5, r6, sl, lr}
 801d43c:	08014495 	stmdaeq	r1, {r0, r2, r4, r7, sl, lr}
 801d440:	080144c9 	stmdaeq	r1, {r0, r3, r6, r7, sl, lr}
 801d444:	0801450d 	stmdaeq	r1, {r0, r2, r3, r8, sl, lr}
 801d448:	080145e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, sl, lr}
 801d44c:	080143ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, lr}
 801d450:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801d454:	00000000 	andeq	r0, r0, r0
 801d458:	080143f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, r9, lr}
 801d45c:	0801468d 	stmdaeq	r1, {r0, r2, r3, r7, r9, sl, lr}
 801d460:	080145d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, sl, lr}
 801d464:	080145a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, sl, lr}
 801d468:	08014575 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, sl, lr}
 801d46c:	0801445d 	stmdaeq	r1, {r0, r2, r3, r4, r6, sl, lr}
 801d470:	0801448d 	stmdaeq	r1, {r0, r2, r3, r7, sl, lr}
 801d474:	080144c1 	stmdaeq	r1, {r0, r6, r7, sl, lr}
 801d478:	080143ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, r9, lr}
 801d47c:	08014505 	stmdaeq	r1, {r0, r2, r8, sl, lr}
 801d480:	08014549 	stmdaeq	r1, {r0, r3, r6, r8, sl, lr}
 801d484:	08014659 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, lr}

0801d488 <vtable for StorePixelDmx>:
	...
 801d490:	080146b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, sl, lr}
 801d494:	08014825 	stmdaeq	r1, {r0, r2, r5, fp, lr}
 801d498:	080146c1 	stmdaeq	r1, {r0, r6, r7, r9, sl, lr}
 801d49c:	08014839 	stmdaeq	r1, {r0, r3, r4, r5, fp, lr}
 801d4a0:	080147f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, sl, lr}
 801d4a4:	080147bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, sl, lr}
 801d4a8:	08014785 	stmdaeq	r1, {r0, r2, r7, r8, r9, sl, lr}
 801d4ac:	0801474d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, sl, lr}
 801d4b0:	08014719 	stmdaeq	r1, {r0, r3, r4, r8, r9, sl, lr}
 801d4b4:	080146e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r9, sl, lr}
 801d4b8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801d4bc:	00000000 	andeq	r0, r0, r0
 801d4c0:	080146bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, lr}
 801d4c4:	08014831 	stmdaeq	r1, {r0, r4, r5, fp, lr}
 801d4c8:	0801481d 	stmdaeq	r1, {r0, r2, r3, r4, fp, lr}
 801d4cc:	080147e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, lr}
 801d4d0:	080147b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, lr}
 801d4d4:	0801477d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, sl, lr}
 801d4d8:	08014745 	stmdaeq	r1, {r0, r2, r6, r8, r9, sl, lr}
 801d4dc:	08014711 	stmdaeq	r1, {r0, r4, r8, r9, sl, lr}
 801d4e0:	34325441 	ldrtcc	r5, [r2], #-1089	; 0xfffffbbf
 801d4e4:	00323343 	eorseq	r3, r2, r3, asr #6
 801d4e8:	25206f4e 	strcs	r6, [r0, #-3918]!	; 0xfffff0b2
 801d4ec:	74612073 	strbtvc	r2, [r1], #-115	; 0xffffff8d
 801d4f0:	78322520 	ldmdavc	r2!, {r5, r8, sl, sp}
 801d4f4:	74654400 	strbtvc	r4, [r5], #-1024	; 0xfffffc00
 801d4f8:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 801d4fc:	73252064 			; <UNDEFINED> instruction: 0x73252064
 801d500:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 801d504:	6f742068 	svcvs	0x00742068
 801d508:	206c6174 	rsbcs	r6, ip, r4, ror r1
 801d50c:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 801d510:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 801d514:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 801d518:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 801d51c:	6374000a 	cmnvs	r4, #10
 801d520:	65625f70 	strbvs	r5, [r2, #-3952]!	; 0xfffff090
 801d524:	3a6e6967 	bcc	9bb7ac8 <__exidx_end+0x1b99a9c>
 801d528:	6f6f7420 	svcvs	0x006f7420
 801d52c:	6e616d20 	cdpvs	13, 6, cr6, cr1, cr0, {1}
 801d530:	6f632079 	svcvs	0x00632079
 801d534:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 801d538:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801d53c:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
 801d540:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 801d544:	6e69626e 	cdpvs	2, 6, cr6, cr9, cr14, {3}
 801d548:	41000a64 	tstmi	r0, r4, ror #20
 801d54c:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 801d550:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 801d554:	61662070 	smcvs	25088	; 0x6200
 801d558:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 801d55c:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 801d560:	61666564 	cmnvs	r6, r4, ror #10
 801d564:	20746c75 	rsbscs	r6, r4, r5, ror ip
 801d568:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 801d56c:	0a796177 	beq	9e75b50 <__exidx_end+0x1e57b24>
 801d570:	50524100 	subspl	r4, r2, r0, lsl #2
 801d574:	6f6f6c20 	svcvs	0x006f6c20
 801d578:	2070756b 	rsbscs	r7, r0, fp, ror #10
 801d57c:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 801d580:	000a6465 	andeq	r6, sl, r5, ror #8

0801d584 <NetworkConst::MSG_MDNS_CONFIG>:
 801d584:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801d588:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801d58c:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801d590:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

0801d595 <NetworkConst::MSG_NETWORK_INIT>:
 801d595:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 801d599:	206b726f 	rsbcs	r7, fp, pc, ror #4
 801d59d:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 801d5a1:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 801d5a5:	302e302e 	eorcc	r3, lr, lr, lsr #32
 801d5a9:	3135322e 	teqcc	r5, lr, lsr #4
 801d5ad:	63745f00 	cmnvs	r4, #0, 30
 801d5b1:	6f6c2e70 	svcvs	0x006c2e70
 801d5b5:	006c6163 	rsbeq	r6, ip, r3, ror #2
 801d5b9:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 801d5bd:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 801d5c1:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 801d5c9 <NetworkConst::MSG_NETWORK_INIT+0x34>
 801d5c5:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 801d5c9:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 801c76d <RDMConst::MANUFACTURER_NAME+0x91>
 801d5cd:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 801d5d1:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 801d5d5:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 801d5d9:	20000a53 	andcs	r0, r0, r3, asr sl
 801d5dd:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801d5e1:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 801d5e5:	0a676e69 	beq	99f8f91 <__exidx_end+0x19daf65>
 801d5e9:	614e2000 	mrsvs	r2, (UNDEF: 78)
 801d5ed:	3a20656d 	bcc	8836ba9 <__exidx_end+0x818b7d>
 801d5f1:	0a732520 	beq	9ce6a79 <__exidx_end+0x1cc8a4d>
 801d5f5:	73252000 			; <UNDEFINED> instruction: 0x73252000
 801d5f9:	20642520 	rsbcs	r2, r4, r0, lsr #10
 801d5fd:	000a7325 	andeq	r7, sl, r5, lsr #6
 801d601:	30687465 	rsbcc	r7, r8, r5, ror #8
 801d605:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 801d609:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 801d60d:	5f656369 	svcpl	0x00656369
 801d611:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 801d615:	6b726f77 	blvs	9cb93f9 <__exidx_end+0x1c9b3cd>
 801d619:	4820000a 	stmdami	r0!, {r1, r3}
 801d61d:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 801d621:	20656d61 	rsbcs	r6, r5, r1, ror #26
 801d625:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801d629:	20000a73 	andcs	r0, r0, r3, ror sl
 801d62d:	614e6649 	cmpvs	lr, r9, asr #12
 801d631:	2020656d 	eorcs	r6, r0, sp, ror #10
 801d635:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801d639:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801d63d:	000a7325 	andeq	r7, sl, r5, lsr #6
 801d641:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 801d645:	20202074 	eorcs	r2, r0, r4, ror r0
 801d649:	3a202020 	bcc	88256d1 <__exidx_end+0x8076a5>
 801d64d:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801d651:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d655:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d659:	0a64252f 	beq	9926b1d <__exidx_end+0x1908af1>
 801d65d:	654e2000 	strbvs	r2, [lr, #-0]
 801d661:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 801d665:	2020206b 	eorcs	r2, r0, fp, rrx
 801d669:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801d66d:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d671:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d675:	20000a64 	andcs	r0, r0, r4, ror #20
 801d679:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 801d67d:	20796177 	rsbscs	r6, r9, r7, ror r1
 801d681:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801d685:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d689:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d68d:	0a64252e 	beq	9926b4d <__exidx_end+0x1908b21>
 801d691:	72422000 	subvc	r2, r2, #0
 801d695:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 801d699:	20747361 	rsbscs	r7, r4, r1, ror #6
 801d69d:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801d6a1:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d6a5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d6a9:	20000a64 	andcs	r0, r0, r4, ror #20
 801d6ad:	2063614d 	rsbcs	r6, r3, sp, asr #2
 801d6b1:	20202020 	eorcs	r2, r0, r0, lsr #32
 801d6b5:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801d6b9:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801d6bd:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 801d6c1:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 801d6c5:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 801d6c9:	3a78322e 	bcc	9e29f89 <__exidx_end+0x1e0bf5d>
 801d6cd:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801d6d1:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 801d6d5:	20000a78 	andcs	r0, r0, r8, ror sl
 801d6d9:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 801d6dd:	20202020 	eorcs	r2, r0, r0, lsr #32
 801d6e1:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801d6e5:	000a6325 	andeq	r6, sl, r5, lsr #6
 801d6e9:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 801d6ed:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 801d6f1:	 	rsbvc	r0, r9, r0, asr r0

0801d6f3 <NetworkParamsConst::IP_ADDRESS>:
 801d6f3:	615f7069 	cmpvs	pc, r9, rrx
 801d6f7:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 801d6fb:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

0801d6fe <NetworkParamsConst::DEFAULT_GATEWAY>:
 801d6fe:	61666564 	cmnvs	r6, r4, ror #10
 801d702:	5f746c75 	svcpl	0x00746c75
 801d706:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 801d70a:	00796177 	rsbseq	r6, r9, r7, ror r1

0801d70e <NetworkParamsConst::DHCP_RETRY_TIME>:
 801d70e:	70636864 	rsbvc	r6, r3, r4, ror #16
 801d712:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 801d716:	745f7972 	ldrbvc	r7, [pc], #-2418	; 801d71e <NetworkParamsConst::HOSTNAME>
 801d71a:	00656d69 	rsbeq	r6, r5, r9, ror #26

0801d71e <NetworkParamsConst::HOSTNAME>:
 801d71e:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 801d722:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

0801d727 <NetworkParamsConst::NET_MASK>:
 801d727:	5f74656e 	svcpl	0x0074656e
 801d72b:	6b73616d 	blvs	9cf5ce7 <__exidx_end+0x1cd7cbb>
	...

0801d730 <NetworkParamsConst::USE_DHCP>:
 801d730:	5f657375 	svcpl	0x00657375
 801d734:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

0801d739 <NetworkParamsConst::FILE_NAME>:
 801d739:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 801d73d:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 801d741:	00747874 	rsbseq	r7, r4, r4, ror r8
 801d745:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 801d749:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 801d74d:	61747320 	cmnvs	r4, r0, lsr #6
 801d751:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 801d755:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d759:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d75d:	252f6425 	strcs	r6, [pc, #-1061]!	; 801d340 <s_aStorSize+0x68>
 801d761:	63252064 			; <UNDEFINED> instruction: 0x63252064
 801d765:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 801d769:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d76d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d771:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 801d775:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 801d779:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d77d:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d781:	46006425 	strmi	r6, [r0], -r5, lsr #8
 801d785:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 801d789:	20657261 	rsbcs	r7, r5, r1, ror #4
 801d78d:	2a2e2556 	bcs	8ba6ced <__exidx_end+0xb88cc1>
 801d791:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 801d795:	72205043 	eorvc	r5, r0, #67	; 0x43
 801d799:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 801d79d:	00676e69 	rsbeq	r6, r7, r9, ror #28
 801d7a1:	50434844 	subpl	r4, r3, r4, asr #16
 801d7a5:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 801d7a9:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 801d7ad:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 801d7b1:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 801d7b5:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 801d7b9:	6f647475 	svcvs	0x00647475
 801d7bd:	 	strpl	r6, [r0], #-3703	; 0xfffff189

0801d7c0 <pArray>:
 801d7c0:	0801d854 	stmdaeq	r1, {r2, r4, r6, fp, ip, lr, pc}
 801d7c4:	0801d810 	stmdaeq	r1, {r4, fp, ip, lr, pc}
 801d7c8:	0801d6f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, sl, ip, lr, pc}
 801d7cc:	0801d85a 	stmdaeq	r1, {r1, r3, r4, r6, fp, ip, lr, pc}
 801d7d0:	0801db9a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, fp, ip, lr, pc}
 801d7d4:	0801d81b 	stmdaeq	r1, {r0, r1, r3, r4, fp, ip, lr, pc}
 801d7d8:	0801c017 	stmdaeq	r1, {r0, r1, r2, r4, lr, pc}
 801d7dc:	0801d71e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, sl, ip, lr, pc}
 801d7e0:	0801d9a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, ip, lr, pc}
 801d7e4:	0801d9b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, fp, ip, lr, pc}
 801d7e8:	0801d9c1 	stmdaeq	r1, {r0, r6, r7, r8, fp, ip, lr, pc}
 801d7ec:	0801d9d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, fp, ip, lr, pc}
 801d7f0:	0801d727 	stmdaeq	r1, {r0, r1, r2, r5, r8, r9, sl, ip, lr, pc}
 801d7f4:	0801db69 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, fp, ip, lr, pc}
 801d7f8:	0801c06a 	stmdaeq	r1, {r1, r3, r5, r6, lr, pc}
 801d7fc:	0801c082 	stmdaeq	r1, {r1, r7, lr, pc}
 801d800:	0801c09a 	stmdaeq	r1, {r1, r3, r4, r7, lr, pc}
 801d804:	0801c0b2 	stmdaeq	r1, {r1, r4, r5, r7, lr, pc}
 801d808:	0801d6fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r9, sl, ip, lr, pc}
 801d80c:	0801d828 	stmdaeq	r1, {r3, r5, fp, ip, lr, pc}

0801d810 <DisplayUdfParamsConst::BOARD_NAME>:
 801d810:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 801d814:	616e5f64 	cmnvs	lr, r4, ror #30
 801d818:	 	tstvs	r0, sp, ror #10

0801d81b <DisplayUdfParamsConst::ACTIVE_PORTS>:
 801d81b:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801d81f:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 801d823:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

0801d828 <DisplayUdfParamsConst::DMX_DIRECTION>:
 801d828:	5f786d64 	svcpl	0x00786d64
 801d82c:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801d830:	6f697463 	svcvs	0x00697463
 801d834:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

0801d836 <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 801d836:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 801d83a:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801d83e:	756f656d 	strbvc	r6, [pc, #-1389]!	; 801d2d9 <s_aStorSize+0x1>
 801d842:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

0801d844 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 801d844:	70696c66 	rsbvc	r6, r9, r6, ror #24
 801d848:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 801d84c:	61636974 	smcvs	13972	; 0x3694
 801d850:	00796c6c 	rsbseq	r6, r9, ip, ror #24

0801d854 <DisplayUdfParamsConst::TITLE>:
 801d854:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 801d858:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

0801d85a <DisplayUdfParamsConst::VERSION>:
 801d85a:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801d85e:	006e6f69 	rsbeq	r6, lr, r9, ror #30

0801d862 <DisplayUdfParamsConst::FILE_NAME>:
 801d862:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801d866:	2e79616c 	rpwcsez	f6, f1, #4.0
 801d86a:	00747874 	rsbseq	r7, r4, r4, ror r8

0801d86e <DisplayUdfParamsConst::INTENSITY>:
 801d86e:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 801d872:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 801d876:	20200079 	eorcs	r0, r0, r9, ror r0
 801d87a:	4f002020 	svcmi	0x00002020
 801d87e:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801d882:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 801d886:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 801d88a:	20632520 	rsbcs	r2, r3, r0, lsr #10
 801d88e:	4f007325 	svcmi	0x00007325
 801d892:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801d896:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 801d89a:	3a64253a 	bcc	9926d8a <__exidx_end+0x1908d5e>
 801d89e:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 801d8a2:	73252063 			; <UNDEFINED> instruction: 0x73252063
 801d8a6:	3a632500 	bcc	98e6cae <__exidx_end+0x18c8c82>
 801d8aa:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801d8ae:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d8b2:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d8b6:	3a504100 	bcc	942dcbe <__exidx_end+0x140fc92>
 801d8ba:	00642520 	rsbeq	r2, r4, r0, lsr #10
 801d8be:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 801d8c2:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 801d8c6:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 801d8ca:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

0801d8cf <DevicesParamsConst::ACTIVE_OUT>:
 801d8cf:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801d8d3:	6f5f6576 	svcvs	0x005f6576
 801d8d7:	 	smlsdxvs	r0, r5, r4, r7

0801d8da <DevicesParamsConst::GAMMA_VALUE>:
 801d8da:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 801d8de:	61765f61 	cmnvs	r6, r1, ror #30
 801d8e2:	0065756c 	rsbeq	r7, r5, ip, ror #10

0801d8e6 <DevicesParamsConst::SPI_SPEED_HZ>:
 801d8e6:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 801d8ea:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 801d8ee:	5f646565 	svcpl	0x00646565
 801d8f2:	 	strvc	r7, [r0], #-2664	; 0xfffff598

0801d8f5 <DevicesParamsConst::TEST_PATTERN>:
 801d8f5:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 801d8f9:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 801d8fd:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

0801d902 <DevicesParamsConst::GROUPING_COUNT>:
 801d902:	5f64656c 	svcpl	0x0064656c
 801d906:	756f7267 	strbvc	r7, [pc, #-615]!	; 801d6a7 <NetworkConst::MSG_NETWORK_INIT+0x112>
 801d90a:	6f635f70 	svcvs	0x00635f70
 801d90e:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801d912 <DevicesParamsConst::GAMMA_CORRECTION>:
 801d912:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 801d916:	6f635f61 	svcvs	0x00635f61
 801d91a:	63657272 	cmnvs	r5, #536870919	; 0x20000007
 801d91e:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	...

0801d923 <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 801d923:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 801d927:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 801d92b:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801d92f:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 801d933:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

0801d935 <DevicesParamsConst::MAP>:
 801d935:	5f64656c 	svcpl	0x0064656c
 801d939:	5f626772 	svcpl	0x00626772
 801d93d:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 801d941:	00676e69 	rsbeq	r6, r7, r9, ror #28

0801d945 <DevicesParamsConst::TYPE>:
 801d945:	5f64656c 	svcpl	0x0064656c
 801d949:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

0801d94e <DevicesParamsConst::COUNT>:
 801d94e:	5f64656c 	svcpl	0x0064656c
 801d952:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801d956:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

0801d958 <DevicesParamsConst::LED_T0H>:
 801d958:	5f64656c 	svcpl	0x0064656c
 801d95c:	00683074 	rsbeq	r3, r8, r4, ror r0

0801d960 <DevicesParamsConst::LED_T1H>:
 801d960:	5f64656c 	svcpl	0x0064656c
 801d964:	00683174 	rsbeq	r3, r8, r4, ror r1

0801d968 <DevicesParamsConst::FILE_NAME>:
 801d968:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801d96c:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801d970:	00747874 	rsbseq	r7, r4, r4, ror r8
 801d974:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801d978:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 801d97c:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d980:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d984:	002c2264 	eoreq	r2, ip, r4, ror #4
 801d988:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 801d98c:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d990:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d994:	0a64252e 	beq	9926e54 <__exidx_end+0x1908e28>
 801d998:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 801d99c:	0a232073 	beq	88e5b70 <__exidx_end+0x8c7b44>
	...

0801d9a1 <LightSetParamsConst::UNIVERSE_PORT>:
 801d9a1:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801d9a5:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801d9a9:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801d9ad:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801d9b1:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801d9b5:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801d9b9:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801d9bd:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801d9c1:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801d9c5:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801d9c9:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801d9cd:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801d9d1:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801d9d5:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801d9d9:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801d9dd:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801d9e1 <LightSetParamsConst::START_UNI_PORT>:
 801d9e1:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d9e5:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d9e9:	6f705f69 	svcvs	0x00705f69
 801d9ed:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801d9f1:	00000000 	andeq	r0, r0, r0
 801d9f5:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d9f9:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d9fd:	6f705f69 	svcvs	0x00705f69
 801da01:	325f7472 	subscc	r7, pc, #1912602624	; 0x72000000
 801da05:	00000000 	andeq	r0, r0, r0
 801da09:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801da0d:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801da11:	6f705f69 	svcvs	0x00705f69
 801da15:	335f7472 	cmpcc	pc, #1912602624	; 0x72000000
 801da19:	00000000 	andeq	r0, r0, r0
 801da1d:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801da21:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801da25:	6f705f69 	svcvs	0x00705f69
 801da29:	345f7472 	ldrbcc	r7, [pc], #-1138	; 801da31 <LightSetParamsConst::START_UNI_PORT+0x50>
 801da2d:	00000000 	andeq	r0, r0, r0
 801da31:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801da35:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801da39:	6f705f69 	svcvs	0x00705f69
 801da3d:	355f7472 	ldrbcc	r7, [pc, #-1138]	; 801d5d3 <NetworkConst::MSG_NETWORK_INIT+0x3e>
 801da41:	00000000 	andeq	r0, r0, r0
 801da45:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801da49:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801da4d:	6f705f69 	svcvs	0x00705f69
 801da51:	365f7472 			; <UNDEFINED> instruction: 0x365f7472
 801da55:	00000000 	andeq	r0, r0, r0
 801da59:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801da5d:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801da61:	6f705f69 	svcvs	0x00705f69
 801da65:	375f7472 			; <UNDEFINED> instruction: 0x375f7472
 801da69:	00000000 	andeq	r0, r0, r0
 801da6d:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801da71:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801da75:	6f705f69 	svcvs	0x00705f69
 801da79:	385f7472 	ldmdacc	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 801da7d:	00000000 	andeq	r0, r0, r0
 801da81:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801da85:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801da89:	6f705f69 	svcvs	0x00705f69
 801da8d:	395f7472 	ldmdbcc	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 801da91:	00000000 	andeq	r0, r0, r0
 801da95:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801da99:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801da9d:	6f705f69 	svcvs	0x00705f69
 801daa1:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801daa5:	00000030 	andeq	r0, r0, r0, lsr r0
 801daa9:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801daad:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dab1:	6f705f69 	svcvs	0x00705f69
 801dab5:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801dab9:	00000031 	andeq	r0, r0, r1, lsr r0
 801dabd:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dac1:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dac5:	6f705f69 	svcvs	0x00705f69
 801dac9:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801dacd:	00000032 	andeq	r0, r0, r2, lsr r0
 801dad1:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dad5:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dad9:	6f705f69 	svcvs	0x00705f69
 801dadd:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801dae1:	00000033 	andeq	r0, r0, r3, lsr r0
 801dae5:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dae9:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801daed:	6f705f69 	svcvs	0x00705f69
 801daf1:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801daf5:	00000034 	andeq	r0, r0, r4, lsr r0
 801daf9:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dafd:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801db01:	6f705f69 	svcvs	0x00705f69
 801db05:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801db09:	00000035 	andeq	r0, r0, r5, lsr r0
 801db0d:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801db11:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801db15:	6f705f69 	svcvs	0x00705f69
 801db19:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801db1d:	00000036 	andeq	r0, r0, r6, lsr r0

0801db21 <LightSetParamsConst::MERGE_MODE_PORT>:
 801db21:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801db25:	6f6d5f65 	svcvs	0x006d5f65
 801db29:	705f6564 	subsvc	r6, pc, r4, ror #10
 801db2d:	5f74726f 	svcpl	0x0074726f
 801db31:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 801db35:	5f656772 	svcpl	0x00656772
 801db39:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 801db3d:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801db41:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801db45:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801db49:	6f6d5f65 	svcvs	0x006d5f65
 801db4d:	705f6564 	subsvc	r6, pc, r4, ror #10
 801db51:	5f74726f 	svcpl	0x0074726f
 801db55:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 801db59:	5f656772 	svcpl	0x00656772
 801db5d:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 801db61:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801db65:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801db69 <LightSetParamsConst::DMX_START_ADDRESS>:
 801db69:	5f786d64 	svcpl	0x00786d64
 801db6d:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801db71:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 801db75:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 801db79:	 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^

0801db7b <LightSetParamsConst::DISABLE_MERGE_TIMEOUT>:
 801db7b:	61736964 	cmnvs	r3, r4, ror #18
 801db7f:	5f656c62 	svcpl	0x00656c62
 801db83:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801db87:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 801db8b:	756f656d 	strbvc	r6, [pc, #-1389]!	; 801d626 <NetworkConst::MSG_NETWORK_INIT+0x91>
 801db8f:	 	smcvs	24580	; 0x6004

0801db91 <LightSetParamsConst::FAILSAFE>:
 801db91:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 801db95:	65666173 	strbvs	r6, [r6, #-371]!	; 0xfffffe8d
	...

0801db9a <LightSetParamsConst::UNIVERSE>:
 801db9a:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801db9e:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

0801dba3 <LightSetParamsConst::DIRECTION>:
 801dba3:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801dba7:	6f697463 	svcvs	0x00697463
 801dbab:	6f705f6e 	svcvs	0x00705f6e
 801dbaf:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 801dbb3:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 801dbb7:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801dbbb:	5f6e6f69 	svcpl	0x006e6f69
 801dbbf:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801dbc3:	0000625f 	andeq	r6, r0, pc, asr r2
 801dbc7:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801dbcb:	6f697463 	svcvs	0x00697463
 801dbcf:	6f705f6e 	svcvs	0x00705f6e
 801dbd3:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 801dbd7:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 801dbdb:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801dbdf:	5f6e6f69 	svcpl	0x006e6f69
 801dbe3:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801dbe7:	0000645f 	andeq	r6, r0, pc, asr r4
 801dbeb:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 801dbef:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 801dbf3:	66207961 	strtvs	r7, [r0], -r1, ror #18
 801dbf7:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 801dbfb:	31485300 	mrscc	r5, (UNDEF: 120)
 801dbff:	00363031 	eorseq	r3, r6, r1, lsr r0
 801dc03:	31445353 	cmpcc	r4, r3, asr r3
 801dc07:	00363033 	eorseq	r3, r6, r3, lsr r0
 801dc0b:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801dc0f:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 801dc13:	000a2964 	andeq	r2, sl, r4, ror #18
 801dc17:	aaeeaa40 	bge	7bc851f <__stack_size+0x7bc451f>
 801dc1b:	000000ee 	andeq	r0, r0, lr, ror #1
	...

0801dc20 <_OledFont8x6>:
 801dc20:	00000040 	andeq	r0, r0, r0, asr #32
 801dc24:	40000000 	andmi	r0, r0, r0
 801dc28:	005f0000 	subseq	r0, pc, r0
 801dc2c:	00400000 	subeq	r0, r0, r0
 801dc30:	00070007 	andeq	r0, r7, r7
 801dc34:	7f144000 	svcvc	0x00144000
 801dc38:	00147f14 	andseq	r7, r4, r4, lsl pc
 801dc3c:	7f2a2440 	svcvc	0x002a2440
 801dc40:	4000122a 	andmi	r1, r0, sl, lsr #4
 801dc44:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 801dc48:	36400062 	strbcc	r0, [r0], -r2, rrx
 801dc4c:	50205649 	eorpl	r5, r0, r9, asr #12
 801dc50:	08004000 	stmdaeq	r0, {lr}
 801dc54:	00000307 	andeq	r0, r0, r7, lsl #6
 801dc58:	221c0040 	andscs	r0, ip, #64	; 0x40
 801dc5c:	40000041 	andmi	r0, r0, r1, asr #32
 801dc60:	1c224100 	stfnes	f4, [r2], #-0
 801dc64:	2a400000 	bcs	901dc6c <__exidx_end+0xfffc40>
 801dc68:	2a1c7f1c 	bcs	873d8e0 <__exidx_end+0x71f8b4>
 801dc6c:	08084000 	stmdaeq	r8, {lr}
 801dc70:	0008083e 	andeq	r0, r8, lr, lsr r8
 801dc74:	70800040 	addvc	r0, r0, r0, asr #32
 801dc78:	40000030 	andmi	r0, r0, r0, lsr r0
 801dc7c:	08080808 	stmdaeq	r8, {r3, fp}
 801dc80:	00400008 	subeq	r0, r0, r8
 801dc84:	00606000 	rsbeq	r6, r0, r0
 801dc88:	10204000 	eorne	r4, r0, r0
 801dc8c:	00020408 	andeq	r0, r2, r8, lsl #8
 801dc90:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 801dc94:	40003e45 	andmi	r3, r0, r5, asr #28
 801dc98:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 801dc9c:	72400000 	subvc	r0, r0, #0
 801dca0:	46494949 	strbmi	r4, [r9], -r9, asr #18
 801dca4:	41214000 			; <UNDEFINED> instruction: 0x41214000
 801dca8:	00334d49 	eorseq	r4, r3, r9, asr #26
 801dcac:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 801dcb0:	4000107f 	andmi	r1, r0, pc, ror r0
 801dcb4:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 801dcb8:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 801dcbc:	3149494a 	cmpcc	r9, sl, asr #18
 801dcc0:	21414000 	mrscs	r4, (UNDEF: 65)
 801dcc4:	00070911 	andeq	r0, r7, r1, lsl r9
 801dcc8:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 801dccc:	40003649 	andmi	r3, r0, r9, asr #12
 801dcd0:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 801dcd4:	0040001e 	subeq	r0, r0, lr, lsl r0
 801dcd8:	00001400 	andeq	r1, r0, r0, lsl #8
 801dcdc:	40004000 	andmi	r4, r0, r0
 801dce0:	00000034 	andeq	r0, r0, r4, lsr r0
 801dce4:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 801dce8:	40004122 	andmi	r4, r0, r2, lsr #2
 801dcec:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 801dcf0:	00400014 	subeq	r0, r0, r4, lsl r0
 801dcf4:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 801dcf8:	01024000 	mrseq	r4, (UNDEF: 2)
 801dcfc:	00060959 	andeq	r0, r6, r9, asr r9
 801dd00:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 801dd04:	40004e59 	andmi	r4, r0, r9, asr lr
 801dd08:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 801dd0c:	7f40007c 	svcvc	0x0040007c
 801dd10:	36494949 	strbcc	r4, [r9], -r9, asr #18
 801dd14:	413e4000 	teqmi	lr, r0
 801dd18:	00224141 	eoreq	r4, r2, r1, asr #2
 801dd1c:	41417f40 	cmpmi	r1, r0, asr #30
 801dd20:	40003e41 	andmi	r3, r0, r1, asr #28
 801dd24:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 801dd28:	7f400041 	svcvc	0x00400041
 801dd2c:	01090909 	tsteq	r9, r9, lsl #18
 801dd30:	413e4000 	teqmi	lr, r0
 801dd34:	00735141 	rsbseq	r5, r3, r1, asr #2
 801dd38:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 801dd3c:	40007f08 	andmi	r7, r0, r8, lsl #30
 801dd40:	417f4100 	cmnmi	pc, r0, lsl #2
 801dd44:	20400000 	subcs	r0, r0, r0
 801dd48:	013f4140 	teqeq	pc, r0, asr #2
 801dd4c:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 801dd50:	00412214 	subeq	r2, r1, r4, lsl r2
 801dd54:	40407f40 	submi	r7, r0, r0, asr #30
 801dd58:	40004040 	andmi	r4, r0, r0, asr #32
 801dd5c:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 801dd60:	7f40007f 	svcvc	0x0040007f
 801dd64:	7f100804 	svcvc	0x00100804
 801dd68:	413e4000 	teqmi	lr, r0
 801dd6c:	003e4141 	eorseq	r4, lr, r1, asr #2
 801dd70:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 801dd74:	40000609 	andmi	r0, r0, r9, lsl #12
 801dd78:	2151413e 	cmpcs	r1, lr, lsr r1
 801dd7c:	7f40005e 	svcvc	0x0040005e
 801dd80:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 801dd84:	49264000 	stmdbmi	r6!, {lr}
 801dd88:	00324949 	eorseq	r4, r2, r9, asr #18
 801dd8c:	7f010340 	svcvc	0x00010340
 801dd90:	40000301 	andmi	r0, r0, r1, lsl #6
 801dd94:	4040403f 	submi	r4, r0, pc, lsr r0
 801dd98:	1f40003f 	svcne	0x0040003f
 801dd9c:	1f204020 	svcne	0x00204020
 801dda0:	403f4000 	eorsmi	r4, pc, r0
 801dda4:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 801dda8:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 801ddac:	40006314 	andmi	r6, r0, r4, lsl r3
 801ddb0:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 801ddb4:	61400003 	cmpvs	r0, r3
 801ddb8:	434d4959 	movtmi	r4, #55641	; 0xd959
 801ddbc:	7f004000 	svcvc	0x00004000
 801ddc0:	00414141 	subeq	r4, r1, r1, asr #2
 801ddc4:	08040240 	stmdaeq	r4, {r6, r9}
 801ddc8:	40002010 	andmi	r2, r0, r0, lsl r0
 801ddcc:	41414100 	mrsmi	r4, (UNDEF: 81)
 801ddd0:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 801ddd4:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 801ddd8:	40404000 	submi	r4, r0, r0
 801dddc:	00404040 	subeq	r4, r0, r0, asr #32
 801dde0:	07030040 	streq	r0, [r3, -r0, asr #32]
 801dde4:	40000008 	andmi	r0, r0, r8
 801dde8:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 801ddec:	7f400040 	svcvc	0x00400040
 801ddf0:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 801ddf4:	44384000 	ldrtmi	r4, [r8], #-0
 801ddf8:	00284444 	eoreq	r4, r8, r4, asr #8
 801ddfc:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 801de00:	40007f28 	andmi	r7, r0, r8, lsr #30
 801de04:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 801de08:	00400018 	subeq	r0, r0, r8, lsl r0
 801de0c:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 801de10:	a4184000 	ldrge	r4, [r8], #-0
 801de14:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 801de18:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 801de1c:	40007804 	andmi	r7, r0, r4, lsl #16
 801de20:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 801de24:	20400000 	subcs	r0, r0, r0
 801de28:	003d4040 	eorseq	r4, sp, r0, asr #32
 801de2c:	107f4000 	rsbsne	r4, pc, r0
 801de30:	00004428 	andeq	r4, r0, r8, lsr #8
 801de34:	7f410040 	svcvc	0x00410040
 801de38:	40000040 	andmi	r0, r0, r0, asr #32
 801de3c:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 801de40:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 801de44:	78040408 	stmdavc	r4, {r3, sl}
 801de48:	44384000 	ldrtmi	r4, [r8], #-0
 801de4c:	00384444 	eorseq	r4, r8, r4, asr #8
 801de50:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 801de54:	40001824 	andmi	r1, r0, r4, lsr #16
 801de58:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 801de5c:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 801de60:	08040408 	stmdaeq	r4, {r3, sl}
 801de64:	54484000 	strbpl	r4, [r8], #-0
 801de68:	00245454 	eoreq	r5, r4, r4, asr r4
 801de6c:	3f040440 	svccc	0x00040440
 801de70:	40002444 	andmi	r2, r0, r4, asr #8
 801de74:	2040403c 	subcs	r4, r0, ip, lsr r0
 801de78:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 801de7c:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 801de80:	403c4000 	eorsmi	r4, ip, r0
 801de84:	003c4030 	eorseq	r4, ip, r0, lsr r0
 801de88:	10284440 	eorne	r4, r8, r0, asr #8
 801de8c:	40004428 	andmi	r4, r0, r8, lsr #8
 801de90:	9090904c 	addsls	r9, r0, ip, asr #32
 801de94:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 801de98:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 801de9c:	08004000 	stmdaeq	r0, {lr}
 801dea0:	00004136 	andeq	r4, r0, r6, lsr r1
 801dea4:	77000040 	strvc	r0, [r0, -r0, asr #32]
 801dea8:	40000000 	andmi	r0, r0, r0
 801deac:	08364100 	ldmdaeq	r6!, {r8, lr}
 801deb0:	02400000 	subeq	r0, r0, #0
 801deb4:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 801deb8:	263c4000 	ldrtcs	r4, [ip], -r0
 801debc:	003c2623 	eorseq	r2, ip, r3, lsr #12

0801dec0 <oled_128x32_init>:
 801dec0:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801dec4:	4000d31f 	andmi	sp, r0, pc, lsl r3
 801dec8:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801decc:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 801ded0:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 801ded4:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801ded8 <oled_128x64_init>:
 801ded8:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801dedc:	4000d33f 	andmi	sp, r0, pc, lsr r3
 801dee0:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801dee4:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 801dee8:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 801deec:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801def0 <vtable for Ssd1306>:
	...
 801def8:	08017bad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, r9, fp, ip, sp, lr}
 801defc:	08017bd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, fp, ip, sp, lr}
 801df00:	08017edd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 801df04:	08017e65 	stmdaeq	r1, {r0, r2, r5, r6, r9, sl, fp, ip, sp, lr}
 801df08:	08017d2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, sl, fp, ip, sp, lr}
 801df0c:	08017be5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 801df10:	08017c11 	stmdaeq	r1, {r0, r4, sl, fp, ip, sp, lr}
 801df14:	08017d05 	stmdaeq	r1, {r0, r2, r8, sl, fp, ip, sp, lr}
 801df18:	08017cbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, sl, fp, ip, sp, lr}
 801df1c:	08017baf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, r9, fp, ip, sp, lr}
 801df20:	08017d6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, sl, fp, ip, sp, lr}
 801df24:	08017d79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, sl, fp, ip, sp, lr}
 801df28:	08017d93 	stmdaeq	r1, {r0, r1, r4, r7, r8, sl, fp, ip, sp, lr}
 801df2c:	08017bb1 	stmdaeq	r1, {r0, r4, r5, r7, r8, r9, fp, ip, sp, lr}
 801df30:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 801df34:	5b1b006d 	blpl	86de0f0 <__exidx_end+0x6c00c4>
 801df38:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 801df3c:	31335b1b 	teqcc	r3, fp, lsl fp
 801df40:	5b1b006d 	blpl	86de0fc <__exidx_end+0x6c00d0>
 801df44:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 801df48:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 801df4c:	5b1b006d 	blpl	86de108 <__exidx_end+0x6c00dc>
 801df50:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 801df54:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 801df58:	205d732a 	subscs	r7, sp, sl, lsr #6
 801df5c:	43207325 			; <UNDEFINED> instruction: 0x43207325
 801df60:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 801df64:	2064656c 	rsbcs	r6, r4, ip, ror #10
 801df68:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 801df6c:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 801df70:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 801df74:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 801df78:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801df7c:	203a636f 	eorscs	r6, sl, pc, ror #6
 801df80:	000a7525 	andeq	r7, sl, r5, lsr #10
 801df84:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801df88:	203a636f 	eorscs	r6, sl, pc, ror #6
 801df8c:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 801df90:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 801df94:	6b636f6c 	blvs	98f9d4c <__exidx_end+0x18dbd20>
 801df98:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 801df9c:	000a7469 	andeq	r7, sl, r9, ror #8
 801dfa0:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801dfa4:	203a636f 	eorscs	r6, sl, pc, ror #6
 801dfa8:	6f6c4270 	svcvs	0x006c4270
 801dfac:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 801dfb0:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 801dfb4:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 801dfb8:	7a697320 	bvc	9a7ac40 <__exidx_end+0x1a5cc14>
 801dfbc:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 801dfc0:	6164202c 	cmnvs	r4, ip, lsr #32
 801dfc4:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 801dfc8:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 801dfcc:	3a656572 	bcc	997759c <__exidx_end+0x1959570>
 801dfd0:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 801dfd4:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801dfd8:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 801dfdc:	203d2072 	eorscs	r2, sp, r2, ror r0
 801dfe0:	202c7025 	eorcs	r7, ip, r5, lsr #32
 801dfe4:	6f6c4270 	svcvs	0x006c4270
 801dfe8:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 801dfec:	0a702520 	beq	9c27474 <__exidx_end+0x1c09448>
 801dff0:	00000000 	andeq	r0, r0, r0

0801dff4 <days_of_month>:
 801dff4:	0000001f 	andeq	r0, r0, pc, lsl r0
 801dff8:	0000001c 	andeq	r0, r0, ip, lsl r0
 801dffc:	0000001f 	andeq	r0, r0, pc, lsl r0
 801e000:	0000001e 	andeq	r0, r0, lr, lsl r0
 801e004:	0000001f 	andeq	r0, r0, pc, lsl r0
 801e008:	0000001e 	andeq	r0, r0, lr, lsl r0
 801e00c:	0000001f 	andeq	r0, r0, pc, lsl r0
 801e010:	0000001f 	andeq	r0, r0, pc, lsl r0
 801e014:	0000001e 	andeq	r0, r0, lr, lsl r0
 801e018:	0000001f 	andeq	r0, r0, pc, lsl r0
 801e01c:	0000001e 	andeq	r0, r0, lr, lsl r0
 801e020:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0801e024 <__exidx_start>:
 801e024:	7ffec5e8 	svcvc	0x00fec5e8
 801e028:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

0801e02c <.ARM.attributes>:
 801e02c:	00003441 	andeq	r3, r0, r1, asr #8
 801e030:	61656100 	cmnvs	r5, r0, lsl #2
 801e034:	01006962 	tsteq	r0, r2, ror #18
 801e038:	0000002a 	andeq	r0, r0, sl, lsr #32
 801e03c:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 801e040:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 801e044:	0600344d 	streq	r3, [r0], -sp, asr #8
 801e048:	094d070d 	stmdbeq	sp, {r0, r2, r3, r8, r9, sl}^
 801e04c:	12060a02 	andne	r0, r6, #8192	; 0x2000
 801e050:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
 801e054:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
 801e058:	1b011a01 	blne	8064864 <__exidx_end+0x46838>
 801e05c:	22011c01 	andcs	r1, r1, #256	; 0x100
 801e060:	Address 0x000000000801e060 is out of bounds.


Disassembly of section .data:

20000000 <LLRPDevice::m_nHandleLLRP>:
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <s_nDmxTransmitPeriod>:
20000004:	000061a8 	andeq	r6, r0, r8, lsr #3

20000008 <s_nDmxTransmitMabTime>:
20000008:	0000000c 	andeq	r0, r0, ip

2000000c <s_nDmxTransmitBreakTime>:
2000000c:	0000005c 	andeq	r0, r0, ip, asr r0

20000010 <DmxConfigUdp::s_nHandle>:
20000010:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000014 <s_multicast_mac>:
20000014:	005e0001 	subseq	r0, lr, r1
20000018:	00000000 	andeq	r0, r0, r0

2000001c <MDNS::s_nHandle>:
2000001c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000020 <next_block>:
20000020:	1000a000 	andne	sl, r0, r0

20000024 <s_block_bucket>:
20000024:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000034:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000044:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000054:	00000060 	andeq	r0, r0, r0, rrx
	...
20000064:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000074:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000084:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000094:	00000180 	andeq	r0, r0, r0, lsl #3
	...
200000a4:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000b4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000c4:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000d4:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000f4 <SystemCoreClock>:
200000f4:	0bebc200 	bleq	1faf08fc <_sp+0xfae08fc>

Disassembly of section .bss:

200000f8 <outptr>:
200000f8:	00000000 	andeq	r0, r0, r0

200000fc <RemoteConfig::s_pUdpBuffer>:
200000fc:	00000000 	andeq	r0, r0, r0

20000100 <RemoteConfig::s_RemoteConfigListBin>:
	...

20000124 <RemoteConfig::s_pThis>:
20000124:	00000000 	andeq	r0, r0, r0

20000128 <HttpDaemon::m_Content>:
	...

200006c8 <guard variable for lightset::Data::Get()::instance>:
200006c8:	00000000 	andeq	r0, r0, r0

200006cc <ArtNetNode::s_pThis>:
200006cc:	00000000 	andeq	r0, r0, r0

200006d0 <s_ReceivingMask>:
200006d0:	00000000 	andeq	r0, r0, r0

200006d4 <ip>:
200006d4:	00000000 	andeq	r0, r0, r0

200006d8 <ip>:
200006d8:	00000000 	andeq	r0, r0, r0

200006dc <s_nPortsMax>:
200006dc:	00000000 	andeq	r0, r0, r0

200006e0 <E131Bridge::s_pThis>:
200006e0:	00000000 	andeq	r0, r0, r0

200006e4 <s_ReceivingMask>:
200006e4:	00000000 	andeq	r0, r0, r0

200006e8 <s_nPortsMax>:
200006e8:	00000000 	andeq	r0, r0, r0

200006ec <LLRPDevice::s_nIpAddressFrom>:
200006ec:	00000000 	andeq	r0, r0, r0

200006f0 <LLRPDevice::m_nIpAddresLLRPRequest>:
200006f0:	00000000 	andeq	r0, r0, r0

200006f4 <LLRPDevice::m_nIpAddressLLRPResponse>:
200006f4:	00000000 	andeq	r0, r0, r0

200006f8 <LLRPDevice::m_pLLRP>:
200006f8:	00000000 	andeq	r0, r0, r0

200006fc <RDMNetDevice::s_RdmCommand>:
	...

200007fb <RDMNetDevice::s_Cid>:
	...

2000080c <RDMSensors::s_pThis>:
2000080c:	00000000 	andeq	r0, r0, r0

20000810 <RDMSubDevices::s_pThis>:
20000810:	00000000 	andeq	r0, r0, r0

20000814 <RDMDeviceResponder::s_pThis>:
20000814:	00000000 	andeq	r0, r0, r0

20000818 <RDMIdentify::m_bIsEnabled>:
	...

20000819 <RDMIdentify::m_nMode>:
20000819:	 	andeq	r0, r0, r0

2000081c <RDMIdentify::s_pThis>:
2000081c:	00000000 	andeq	r0, r0, r0

20000820 <DmxSend::s_nStarted>:
20000820:	00000000 	andeq	r0, r0, r0

20000824 <s_RxBuffer>:
	...

20000c44 <s_TxBuffer>:
	...

2000104c <sv_PortState>:
	...

20001054 <sv_nRxDmxPackets>:
	...

20001074 <sv_nUartsSending>:
20001074:	00000000 	andeq	r0, r0, r0

20001078 <Dmx::s_pThis>:
20001078:	00000000 	andeq	r0, r0, r0

2000107c <gv_RdmDataReceiveEnd>:
2000107c:	00000000 	andeq	r0, r0, r0

20001080 <DmxConfigUdp::s_pUdpBuffer>:
20001080:	00000000 	andeq	r0, r0, r0

20001084 <PixelPatterns::m_PortConfig>:
	...

20001284 <PixelPatterns::m_nActivePorts>:
20001284:	00000000 	andeq	r0, r0, r0

20001288 <PixelPatterns::m_pScannerColours>:
20001288:	00000000 	andeq	r0, r0, r0

2000128c <PixelPatterns::m_nCount>:
2000128c:	00000000 	andeq	r0, r0, r0

20001290 <PixelPatterns::m_pOutput>:
20001290:	00000000 	andeq	r0, r0, r0

20001294 <PixelTestPattern::s_pThis>:
20001294:	00000000 	andeq	r0, r0, r0

20001298 <PixelTestPattern::s_Pattern>:
20001298:	00000000 	andeq	r0, r0, r0

2000129c <sv_isRunning>:
2000129c:	00000000 	andeq	r0, r0, r0

200012a0 <WS28xxMulti::s_pThis>:
200012a0:	00000000 	andeq	r0, r0, r0

200012a4 <pixel::s_DmaBuffer>:
	...

200092a4 <SpiFlashStore::s_nWaitMillis>:
200092a4:	00000000 	andeq	r0, r0, r0

200092a8 <SpiFlashStore::s_nStartAddress>:
200092a8:	00000000 	andeq	r0, r0, r0

200092ac <SpiFlashStore::s_bHaveFlashChip>:
200092ac:	00000000 	andeq	r0, r0, r0

200092b0 <SpiFlashStore::s_nSpiFlashStoreSize>:
200092b0:	00000000 	andeq	r0, r0, r0

200092b4 <SpiFlashStore::s_State>:
200092b4:	00000000 	andeq	r0, r0, r0

200092b8 <SpiFlashStore::s_pThis>:
200092b8:	00000000 	andeq	r0, r0, r0

200092bc <SpiFlashStore::s_bIsNew>:
200092bc:	00000000 	andeq	r0, r0, r0

200092c0 <StoreDisplayUdf::s_pThis>:
200092c0:	00000000 	andeq	r0, r0, r0

200092c4 <StoreDmxSend::s_pThis>:
200092c4:	00000000 	andeq	r0, r0, r0

200092c8 <StoreNetwork::s_pThis>:
200092c8:	00000000 	andeq	r0, r0, r0

200092cc <StoreRDMDevice::s_pThis>:
200092cc:	00000000 	andeq	r0, r0, r0

200092d0 <StoreRemoteConfig::s_pThis>:
200092d0:	00000000 	andeq	r0, r0, r0

200092d4 <StoreArtNet::s_nPortIndexOffset>:
200092d4:	00000000 	andeq	r0, r0, r0

200092d8 <StoreArtNet::s_pThis>:
200092d8:	00000000 	andeq	r0, r0, r0

200092dc <StoreE131::s_pThis>:
200092dc:	00000000 	andeq	r0, r0, r0

200092e0 <StorePixelDmx::s_pThis>:
200092e0:	00000000 	andeq	r0, r0, r0

200092e4 <FlashRom::s_pThis>:
200092e4:	00000000 	andeq	r0, r0, r0

200092e8 <g_ip_info>:
	...

200092f4 <g_mac_address>:
200092f4:	00000000 	andeq	r0, r0, r0
	...

200092fa <s_is_dhcp>:
	...

200092fc <s_p>:
200092fc:	00000000 	andeq	r0, r0, r0

20009300 <s_ticker>:
20009300:	00000000 	andeq	r0, r0, r0

20009304 <s_mac_address>:
	...

2000930c <s_mac_address_arp_reply>:
	...

20009314 <broadcast_mask>:
20009314:	00000000 	andeq	r0, r0, r0

20009318 <gw_ip>:
20009318:	00000000 	andeq	r0, r0, r0

2000931c <on_network_mask>:
2000931c:	00000000 	andeq	r0, r0, r0

20009320 <s_id>:
20009320:	00000000 	andeq	r0, r0, r0

20009324 <s_ports_allowed>:
	...

20009344 <s_recv_queue>:
	...

2000efe4 <s_send_packet>:
	...

2000f5d0 <MDNS::s_nRemoteIp>:
2000f5d0:	00000000 	andeq	r0, r0, r0

2000f5d4 <MDNS::s_nRemotePort>:
2000f5d4:	00000000 	andeq	r0, r0, r0

2000f5d8 <MDNS::s_nMulticastIp>:
2000f5d8:	00000000 	andeq	r0, r0, r0

2000f5dc <MDNS::s_AnswerLocalIp>:
	...

2000f7e0 <MDNS::s_ServiceRecords>:
	...

2000f800 <MDNS::s_nBytesReceived>:
2000f800:	00000000 	andeq	r0, r0, r0

2000f804 <MDNS::s_ServiceRecordsData>:
	...

2000fa08 <MDNS::s_pName>:
2000fa08:	00000000 	andeq	r0, r0, r0

2000fa0c <MDNS::s_pBuffer>:
2000fa0c:	00000000 	andeq	r0, r0, r0

2000fa10 <Network::s_pThis>:
2000fa10:	00000000 	andeq	r0, r0, r0

2000fa14 <s_arp_announce>:
	...

2000fa40 <s_arp_reply>:
	...

2000fa6c <s_arp_request>:
	...

2000fa98 <s_dhcp_allocated_gw>:
2000fa98:	00000000 	andeq	r0, r0, r0

2000fa9c <s_dhcp_allocated_ip>:
2000fa9c:	00000000 	andeq	r0, r0, r0

2000faa0 <s_dhcp_allocated_netmask>:
2000faa0:	00000000 	andeq	r0, r0, r0

2000faa4 <s_dhcp_message>:
	...

2000fcc8 <s_dhcp_server_ip>:
2000fcc8:	00000000 	andeq	r0, r0, r0

2000fccc <DisplayUdf::s_pThis>:
2000fccc:	00000000 	andeq	r0, r0, r0

2000fcd0 <PropertiesConfig::s_Config>:
2000fcd0:	00000000 	andeq	r0, r0, r0

2000fcd4 <Display::s_pThis>:
2000fcd4:	00000000 	andeq	r0, r0, r0

2000fcd8 <_ClearBuffer>:
	...

2000fd60 <Ssd1306::s_pThis>:
2000fd60:	00000000 	andeq	r0, r0, r0

2000fd64 <FirmwareVersion::s_FirmwareVersion>:
	...

2000fd7a <FirmwareVersion::s_Print>:
	...

2000fdbc <FirmwareVersion::s_pThis>:
2000fdbc:	00000000 	andeq	r0, r0, r0

2000fdc0 <LedBlink::s_pThis>:
2000fdc0:	00000000 	andeq	r0, r0, r0

2000fdc4 <Hardware::s_pThis>:
2000fdc4:	00000000 	andeq	r0, r0, r0

2000fdc8 <last.0>:
	...

2000fdd0 <s_micros>:
	...

2000fdd8 <set_timer>:
2000fdd8:	00000000 	andeq	r0, r0, r0

2000fddc <s_nSysTickMillis>:
2000fddc:	00000000 	andeq	r0, r0, r0

2000fde0 <s_nAddress>:
2000fde0:	00000000 	andeq	r0, r0, r0

2000fde4 <dma_current_ptp_rxdesc>:
2000fde4:	00000000 	andeq	r0, r0, r0

2000fde8 <dma_current_ptp_txdesc>:
2000fde8:	00000000 	andeq	r0, r0, r0

2000fdec <dma_current_rxdesc>:
2000fdec:	00000000 	andeq	r0, r0, r0

2000fdf0 <dma_current_txdesc>:
2000fdf0:	00000000 	andeq	r0, r0, r0

2000fdf4 <enet_initpara>:
	...

2000fe30 <rx_buff>:
	...

20029ee8 <rxdesc_tab>:
	...

2002a348 <tx_buff>:
	...

2002d2e8 <txdesc_tab>:
	...

Disassembly of section .tcmsram:

10000000 <s_tcp>:
	...

100005ec <s_id>:
100005ec:	00000000 	andeq	r0, r0, r0

100005f0 <s_tcb>:
	...

10000634 <s_recv_queue>:
	...

100011a4 <s_entry_current>:
100011a4:	00000000 	andeq	r0, r0, r0

100011a8 <s_arp_records>:
	...

10001328 <s_multicast_mac>:
	...

10001330 <s_report>:
	...

10001360 <s_id>:
10001360:	00000000 	andeq	r0, r0, r0

10001364 <s_leave>:
	...

10001394 <s_groups>:
	...

100014b4 <s_joins_allowed_index>:
100014b4:	00000000 	andeq	r0, r0, r0

Disassembly of section .heap:

1000a000 <heap_low>:
	...

Disassembly of section .stack:

1000c000 <_sp-0x4000>:
	...

Disassembly of section .ramadd:

20030000 <lightset::Data::Get()::instance>:
	...

Disassembly of section .bkpsram:

40024000 <SpiFlashStore::s_SpiFlashData>:
	...
