
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08008000 <__gVectors>:
 8008000:	10010000 	andne	r0, r1, r0
 8008004:	08008bb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, fp, pc}
 8008008:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800800c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008010:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008014:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008018:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
	...
 800802c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008030:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008034:	00000000 	andeq	r0, r0, r0
 8008038:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800803c:	080185b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, sl, pc}
 8008040:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008044:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008048:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800804c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008050:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008054:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008058:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800805c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008060:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008064:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008068:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800806c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008070:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008074:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008078:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800807c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008080:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008084:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008088:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800808c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008090:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008094:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008098:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800809c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080a0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080a4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080a8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080ac:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080b0:	08011459 	stmdaeq	r1, {r0, r3, r4, r6, sl, ip}
 80080b4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080b8:	080130c1 	stmdaeq	r1, {r0, r6, r7, ip, sp}
 80080bc:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080c0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080c4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080c8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080cc:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080d0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080d4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080d8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080dc:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080e0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080e4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080e8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080ec:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080f0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080f4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080f8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080fc:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008100:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008104:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008108:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800810c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008110:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008114:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008118:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800811c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008120:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008124:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008128:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800812c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008130:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008134:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008138:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800813c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008140:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008144:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008148:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800814c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008150:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008154:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008158:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800815c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008160:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008164:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008168:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800816c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008170:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008174:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008178:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800817c:	00000000 	andeq	r0, r0, r0
 8008180:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008184:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008188:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800818c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008190:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008194:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008198:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800819c:	00000000 	andeq	r0, r0, r0
 80081a0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80081a4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80081a8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}

Disassembly of section .text:

080081ac <net_init>:
 80081ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ae:	9e08      	ldr	r6, [sp, #32]
 80081b0:	460c      	mov	r4, r1
 80081b2:	4921      	ldr	r1, [pc, #132]	; (8008238 <net_init+0x8c>)
 80081b4:	461d      	mov	r5, r3
 80081b6:	1e43      	subs	r3, r0, #1
 80081b8:	3005      	adds	r0, #5
 80081ba:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80081be:	f801 7b01 	strb.w	r7, [r1], #1
 80081c2:	4283      	cmp	r3, r0
 80081c4:	d1f9      	bne.n	80081ba <net_init+0xe>
 80081c6:	491d      	ldr	r1, [pc, #116]	; (800823c <net_init+0x90>)
 80081c8:	f104 000c 	add.w	r0, r4, #12
 80081cc:	4623      	mov	r3, r4
 80081ce:	f813 7b01 	ldrb.w	r7, [r3], #1
 80081d2:	f801 7b01 	strb.w	r7, [r1], #1
 80081d6:	4283      	cmp	r3, r0
 80081d8:	d1f9      	bne.n	80081ce <net_init+0x22>
 80081da:	4918      	ldr	r1, [pc, #96]	; (800823c <net_init+0x90>)
 80081dc:	4816      	ldr	r0, [pc, #88]	; (8008238 <net_init+0x8c>)
 80081de:	9201      	str	r2, [sp, #4]
 80081e0:	2700      	movs	r7, #0
 80081e2:	f000 f99d 	bl	8008520 <ip_init>
 80081e6:	4814      	ldr	r0, [pc, #80]	; (8008238 <net_init+0x8c>)
 80081e8:	f000 f83a 	bl	8008260 <rfc3927_init>
 80081ec:	7037      	strb	r7, [r6, #0]
 80081ee:	782b      	ldrb	r3, [r5, #0]
 80081f0:	9a01      	ldr	r2, [sp, #4]
 80081f2:	b153      	cbz	r3, 800820a <net_init+0x5e>
 80081f4:	4911      	ldr	r1, [pc, #68]	; (800823c <net_init+0x90>)
 80081f6:	4810      	ldr	r0, [pc, #64]	; (8008238 <net_init+0x8c>)
 80081f8:	f00d fb5a 	bl	80158b0 <dhcp_client>
 80081fc:	42b8      	cmp	r0, r7
 80081fe:	da04      	bge.n	800820a <net_init+0x5e>
 8008200:	480e      	ldr	r0, [pc, #56]	; (800823c <net_init+0x90>)
 8008202:	702f      	strb	r7, [r5, #0]
 8008204:	f00b fd3c 	bl	8013c80 <rfc3927>
 8008208:	7030      	strb	r0, [r6, #0]
 800820a:	490c      	ldr	r1, [pc, #48]	; (800823c <net_init+0x90>)
 800820c:	480a      	ldr	r0, [pc, #40]	; (8008238 <net_init+0x8c>)
 800820e:	f000 f883 	bl	8008318 <arp_init>
 8008212:	480a      	ldr	r0, [pc, #40]	; (800823c <net_init+0x90>)
 8008214:	f00d fd66 	bl	8015ce4 <ip_set_ip>
 8008218:	f000 f82e 	bl	8008278 <tcp_init>
 800821c:	4a07      	ldr	r2, [pc, #28]	; (800823c <net_init+0x90>)
 800821e:	1e63      	subs	r3, r4, #1
 8008220:	340b      	adds	r4, #11
 8008222:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008226:	f803 1f01 	strb.w	r1, [r3, #1]!
 800822a:	429c      	cmp	r4, r3
 800822c:	d1f9      	bne.n	8008222 <net_init+0x76>
 800822e:	782a      	ldrb	r2, [r5, #0]
 8008230:	4b03      	ldr	r3, [pc, #12]	; (8008240 <net_init+0x94>)
 8008232:	701a      	strb	r2, [r3, #0]
 8008234:	b003      	add	sp, #12
 8008236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008238:	20009290 	mulcs	r0, r0, r2
 800823c:	20009284 	andcs	r9, r0, r4, lsl #5
 8008240:	20009296 	mulcs	r0, r6, r2

08008244 <net_shutdown>:
 8008244:	b508      	push	{r3, lr}
 8008246:	f000 f976 	bl	8008536 <ip_shutdown>
 800824a:	4b04      	ldr	r3, [pc, #16]	; (800825c <net_shutdown+0x18>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	b11b      	cbz	r3, 8008258 <net_shutdown+0x14>
 8008250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008254:	f00d bc34 	b.w	8015ac0 <dhcp_client_release>
 8008258:	bd08      	pop	{r3, pc}
 800825a:	bf00      	nop
 800825c:	20009296 	mulcs	r0, r6, r2

08008260 <rfc3927_init>:
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <rfc3927_init+0x14>)
 8008262:	1d82      	adds	r2, r0, #6
 8008264:	4290      	cmp	r0, r2
 8008266:	d100      	bne.n	800826a <rfc3927_init+0xa>
 8008268:	4770      	bx	lr
 800826a:	f810 1b01 	ldrb.w	r1, [r0], #1
 800826e:	f803 1b01 	strb.w	r1, [r3], #1
 8008272:	e7f7      	b.n	8008264 <rfc3927_init+0x4>
 8008274:	200092a0 	andcs	r9, r0, r0, lsr #5

08008278 <tcp_init>:
 8008278:	b513      	push	{r0, r1, r4, lr}
 800827a:	4c0c      	ldr	r4, [pc, #48]	; (80082ac <tcp_init+0x34>)
 800827c:	490c      	ldr	r1, [pc, #48]	; (80082b0 <tcp_init+0x38>)
 800827e:	2206      	movs	r2, #6
 8008280:	18a0      	adds	r0, r4, r2
 8008282:	f00b fd57 	bl	8013d34 <memcpy.isra.0>
 8008286:	2308      	movs	r3, #8
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <tcp_init+0x3c>)
 800828c:	2204      	movs	r2, #4
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	eb0d 0102 	add.w	r1, sp, r2
 8008296:	f104 001a 	add.w	r0, r4, #26
 800829a:	f00b fd4b 	bl	8013d34 <memcpy.isra.0>
 800829e:	2345      	movs	r3, #69	; 0x45
 80082a0:	81e3      	strh	r3, [r4, #14]
 80082a2:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <tcp_init+0x40>)
 80082a4:	6163      	str	r3, [r4, #20]
 80082a6:	b002      	add	sp, #8
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	bf00      	nop
 80082ac:	10000000 	andne	r0, r0, r0
 80082b0:	20009290 	mulcs	r0, r0, r2
 80082b4:	20009284 	andcs	r9, r0, r4, lsl #5
 80082b8:	06400040 	strbeq	r0, [r0], -r0, asr #32

080082bc <udp_init>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <udp_init+0x40>)
 80082c0:	460e      	mov	r6, r1
 80082c2:	490f      	ldr	r1, [pc, #60]	; (8008300 <udp_init+0x44>)
 80082c4:	2408      	movs	r4, #8
 80082c6:	2200      	movs	r2, #0
 80082c8:	3c01      	subs	r4, #1
 80082ca:	801a      	strh	r2, [r3, #0]
 80082cc:	805a      	strh	r2, [r3, #2]
 80082ce:	f841 2b04 	str.w	r2, [r1], #4
 80082d2:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 80082d6:	d1f7      	bne.n	80082c8 <udp_init+0xc>
 80082d8:	4d0a      	ldr	r5, [pc, #40]	; (8008304 <udp_init+0x48>)
 80082da:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <udp_init+0x4c>)
 80082dc:	2206      	movs	r2, #6
 80082de:	4601      	mov	r1, r0
 80082e0:	18a8      	adds	r0, r5, r2
 80082e2:	801c      	strh	r4, [r3, #0]
 80082e4:	f00b fec0 	bl	8014068 <memcpy.isra.0>
 80082e8:	4b08      	ldr	r3, [pc, #32]	; (800830c <udp_init+0x50>)
 80082ea:	60eb      	str	r3, [r5, #12]
 80082ec:	4630      	mov	r0, r6
 80082ee:	4b08      	ldr	r3, [pc, #32]	; (8008310 <udp_init+0x54>)
 80082f0:	616b      	str	r3, [r5, #20]
 80082f2:	f00b fee1 	bl	80140b8 <udp_set_ip>
 80082f6:	852c      	strh	r4, [r5, #40]	; 0x28
 80082f8:	bd70      	pop	{r4, r5, r6, pc}
 80082fa:	bf00      	nop
 80082fc:	200092e0 	andcs	r9, r0, r0, ror #5
 8008300:	200092c0 	andcs	r9, r0, r0, asr #5
 8008304:	2000ef80 	andcs	lr, r0, r0, lsl #31
 8008308:	200092bc 			; <UNDEFINED> instruction: 0x200092bc
 800830c:	00450008 	subeq	r0, r5, r8
 8008310:	11400040 	cmpne	r0, r0, asr #32

08008314 <udp_shutdown>:
 8008314:	4770      	bx	lr
	...

08008318 <arp_init>:
 8008318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800831c:	460d      	mov	r5, r1
 800831e:	4604      	mov	r4, r0
 8008320:	f000 f876 	bl	8008410 <arp_cache_init>
 8008324:	2206      	movs	r2, #6
 8008326:	482f      	ldr	r0, [pc, #188]	; (80083e4 <arp_init+0xcc>)
 8008328:	682f      	ldr	r7, [r5, #0]
 800832a:	4621      	mov	r1, r4
 800832c:	f00d f942 	bl	80155b4 <memcpy.isra.0>
 8008330:	4b2d      	ldr	r3, [pc, #180]	; (80083e8 <arp_init+0xd0>)
 8008332:	2507      	movs	r5, #7
 8008334:	461e      	mov	r6, r3
 8008336:	22ff      	movs	r2, #255	; 0xff
 8008338:	3d01      	subs	r5, #1
 800833a:	d146      	bne.n	80083ca <arp_init+0xb2>
 800833c:	4b2b      	ldr	r3, [pc, #172]	; (80083ec <arp_init+0xd4>)
 800833e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800840c <arp_init+0xf4>
 8008342:	482b      	ldr	r0, [pc, #172]	; (80083f0 <arp_init+0xd8>)
 8008344:	e9c6 3803 	strd	r3, r8, [r6, #12]
 8008348:	2206      	movs	r2, #6
 800834a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800834e:	4621      	mov	r1, r4
 8008350:	82b3      	strh	r3, [r6, #20]
 8008352:	f00d f92f 	bl	80155b4 <memcpy.isra.0>
 8008356:	4a27      	ldr	r2, [pc, #156]	; (80083f4 <arp_init+0xdc>)
 8008358:	61f7      	str	r7, [r6, #28]
 800835a:	2307      	movs	r3, #7
 800835c:	3b01      	subs	r3, #1
 800835e:	d137      	bne.n	80083d0 <arp_init+0xb8>
 8008360:	2206      	movs	r2, #6
 8008362:	4621      	mov	r1, r4
 8008364:	4824      	ldr	r0, [pc, #144]	; (80083f8 <arp_init+0xe0>)
 8008366:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 800836a:	f00d f923 	bl	80155b4 <memcpy.isra.0>
 800836e:	4a23      	ldr	r2, [pc, #140]	; (80083fc <arp_init+0xe4>)
 8008370:	2306      	movs	r3, #6
 8008372:	4615      	mov	r5, r2
 8008374:	21ff      	movs	r1, #255	; 0xff
 8008376:	3b01      	subs	r3, #1
 8008378:	d22d      	bcs.n	80083d6 <arp_init+0xbe>
 800837a:	4b1c      	ldr	r3, [pc, #112]	; (80083ec <arp_init+0xd4>)
 800837c:	4820      	ldr	r0, [pc, #128]	; (8008400 <arp_init+0xe8>)
 800837e:	e9c5 3803 	strd	r3, r8, [r5, #12]
 8008382:	2206      	movs	r2, #6
 8008384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008388:	4621      	mov	r1, r4
 800838a:	82ab      	strh	r3, [r5, #20]
 800838c:	f00d f912 	bl	80155b4 <memcpy.isra.0>
 8008390:	4a1c      	ldr	r2, [pc, #112]	; (8008404 <arp_init+0xec>)
 8008392:	61ef      	str	r7, [r5, #28]
 8008394:	2307      	movs	r3, #7
 8008396:	2100      	movs	r1, #0
 8008398:	3b01      	subs	r3, #1
 800839a:	d11f      	bne.n	80083dc <arp_init+0xc4>
 800839c:	4d1a      	ldr	r5, [pc, #104]	; (8008408 <arp_init+0xf0>)
 800839e:	2206      	movs	r2, #6
 80083a0:	18a8      	adds	r0, r5, r2
 80083a2:	4621      	mov	r1, r4
 80083a4:	f00d f906 	bl	80155b4 <memcpy.isra.0>
 80083a8:	4b10      	ldr	r3, [pc, #64]	; (80083ec <arp_init+0xd4>)
 80083aa:	4621      	mov	r1, r4
 80083ac:	e9c5 3803 	strd	r3, r8, [r5, #12]
 80083b0:	f105 0016 	add.w	r0, r5, #22
 80083b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083b8:	2206      	movs	r2, #6
 80083ba:	82ab      	strh	r3, [r5, #20]
 80083bc:	f00d f8fa 	bl	80155b4 <memcpy.isra.0>
 80083c0:	61ef      	str	r7, [r5, #28]
 80083c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083c6:	f00d b8ff 	b.w	80155c8 <arp_announce>
 80083ca:	f803 2b01 	strb.w	r2, [r3], #1
 80083ce:	e7b3      	b.n	8008338 <arp_init+0x20>
 80083d0:	f802 5b01 	strb.w	r5, [r2], #1
 80083d4:	e7c2      	b.n	800835c <arp_init+0x44>
 80083d6:	f802 1b01 	strb.w	r1, [r2], #1
 80083da:	e7cc      	b.n	8008376 <arp_init+0x5e>
 80083dc:	f802 1b01 	strb.w	r1, [r2], #1
 80083e0:	e7da      	b.n	8008398 <arp_init+0x80>
 80083e2:	bf00      	nop
 80083e4:	2000f9b6 			; <UNDEFINED> instruction: 0x2000f9b6
 80083e8:	2000f9b0 			; <UNDEFINED> instruction: 0x2000f9b0
 80083ec:	01000608 	tsteq	r0, r8, lsl #12
 80083f0:	2000f9c6 	andcs	pc, r0, r6, asr #19
 80083f4:	2000f9d0 	ldrdcs	pc, [r0], -r0
 80083f8:	2000fa0e 	andcs	pc, r0, lr, lsl #20
 80083fc:	2000fa08 	andcs	pc, r0, r8, lsl #20
 8008400:	2000fa1e 	andcs	pc, r0, lr, lsl sl	; <UNPREDICTABLE>
 8008404:	2000fa28 	andcs	pc, r0, r8, lsr #20
 8008408:	2000f9dc 	ldrdcs	pc, [r0], -ip
 800840c:	04060008 	streq	r0, [r6], #-8

08008410 <arp_cache_init>:
 8008410:	4a0a      	ldr	r2, [pc, #40]	; (800843c <arp_cache_init+0x2c>)
 8008412:	2300      	movs	r3, #0
 8008414:	b510      	push	{r4, lr}
 8008416:	f822 3b08 	strh.w	r3, [r2], #8
 800841a:	4618      	mov	r0, r3
 800841c:	4611      	mov	r1, r2
 800841e:	f842 0c04 	str.w	r0, [r2, #-4]
 8008422:	1d94      	adds	r4, r2, #6
 8008424:	42a1      	cmp	r1, r4
 8008426:	d105      	bne.n	8008434 <arp_cache_init+0x24>
 8008428:	3303      	adds	r3, #3
 800842a:	2b60      	cmp	r3, #96	; 0x60
 800842c:	f102 020c 	add.w	r2, r2, #12
 8008430:	d1f4      	bne.n	800841c <arp_cache_init+0xc>
 8008432:	bd10      	pop	{r4, pc}
 8008434:	f801 0b01 	strb.w	r0, [r1], #1
 8008438:	e7f4      	b.n	8008424 <arp_cache_init+0x14>
 800843a:	bf00      	nop
 800843c:	100011a4 	andne	r1, r0, r4, lsr #3

08008440 <igmp_init>:
 8008440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008444:	2200      	movs	r2, #0
 8008446:	4b26      	ldr	r3, [pc, #152]	; (80084e0 <igmp_init+0xa0>)
 8008448:	4605      	mov	r5, r0
 800844a:	4608      	mov	r0, r1
 800844c:	4611      	mov	r1, r2
 800844e:	f103 0408 	add.w	r4, r3, #8
 8008452:	42a3      	cmp	r3, r4
 8008454:	d140      	bne.n	80084d8 <igmp_init+0x98>
 8008456:	3201      	adds	r2, #1
 8008458:	2a24      	cmp	r2, #36	; 0x24
 800845a:	d1f8      	bne.n	800844e <igmp_init+0xe>
 800845c:	4c21      	ldr	r4, [pc, #132]	; (80084e4 <igmp_init+0xa4>)
 800845e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80084f0 <igmp_init+0xb0>
 8008462:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80084f4 <igmp_init+0xb4>
 8008466:	2600      	movs	r6, #0
 8008468:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
 800846c:	8726      	strh	r6, [r4, #56]	; 0x38
 800846e:	f00d fb9d 	bl	8015bac <igmp_set_ip>
 8008472:	2301      	movs	r3, #1
 8008474:	8023      	strh	r3, [r4, #0]
 8008476:	235e      	movs	r3, #94	; 0x5e
 8008478:	70a3      	strb	r3, [r4, #2]
 800847a:	2206      	movs	r2, #6
 800847c:	4629      	mov	r1, r5
 800847e:	f104 000e 	add.w	r0, r4, #14
 8008482:	f00d fb4b 	bl	8015b1c <memcpy.isra.0>
 8008486:	f240 4394 	movw	r3, #1172	; 0x494
 800848a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800848c:	2316      	movs	r3, #22
 800848e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8008490:	4b15      	ldr	r3, [pc, #84]	; (80084e8 <igmp_init+0xa8>)
 8008492:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008498:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800849c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80084a0:	2206      	movs	r2, #6
 80084a2:	f8c4 901c 	str.w	r9, [r4, #28]
 80084a6:	f8c4 8014 	str.w	r8, [r4, #20]
 80084aa:	4629      	mov	r1, r5
 80084ac:	f104 0042 	add.w	r0, r4, #66	; 0x42
 80084b0:	8327      	strh	r7, [r4, #24]
 80084b2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80084b4:	f00d fb32 	bl	8015b1c <memcpy.isra.0>
 80084b8:	23e0      	movs	r3, #224	; 0xe0
 80084ba:	4a0c      	ldr	r2, [pc, #48]	; (80084ec <igmp_init+0xac>)
 80084bc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80084c0:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 80084c4:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
 80084c8:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
 80084cc:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
 80084d0:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
 80084d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084d8:	f803 1b01 	strb.w	r1, [r3], #1
 80084dc:	e7b9      	b.n	8008452 <igmp_init+0x12>
 80084de:	bf00      	nop
 80084e0:	10001394 	mulne	r0, r4, r3
 80084e4:	10001328 	andne	r1, r0, r8, lsr #6
 80084e8:	005e0001 	subseq	r0, lr, r1
 80084ec:	04940200 	ldreq	r0, [r4], #512	; 0x200
 80084f0:	02010040 	andeq	r0, r1, #64	; 0x40
 80084f4:	00460008 	subeq	r0, r6, r8

080084f8 <igmp_shutdown>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	2500      	movs	r5, #0
 80084fc:	4c07      	ldr	r4, [pc, #28]	; (800851c <igmp_shutdown+0x24>)
 80084fe:	462e      	mov	r6, r5
 8008500:	6820      	ldr	r0, [r4, #0]
 8008502:	b120      	cbz	r0, 800850e <igmp_shutdown+0x16>
 8008504:	f00d fbae 	bl	8015c64 <igmp_leave>
 8008508:	6026      	str	r6, [r4, #0]
 800850a:	7166      	strb	r6, [r4, #5]
 800850c:	7126      	strb	r6, [r4, #4]
 800850e:	3501      	adds	r5, #1
 8008510:	2d24      	cmp	r5, #36	; 0x24
 8008512:	f104 0408 	add.w	r4, r4, #8
 8008516:	d1f3      	bne.n	8008500 <igmp_shutdown+0x8>
 8008518:	bd70      	pop	{r4, r5, r6, pc}
 800851a:	bf00      	nop
 800851c:	10001394 	mulne	r0, r4, r3

08008520 <ip_init>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4604      	mov	r4, r0
 8008524:	460d      	mov	r5, r1
 8008526:	f7ff fec9 	bl	80082bc <udp_init>
 800852a:	4629      	mov	r1, r5
 800852c:	4620      	mov	r0, r4
 800852e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008532:	f7ff bf85 	b.w	8008440 <igmp_init>

08008536 <ip_shutdown>:
 8008536:	b508      	push	{r3, lr}
 8008538:	f7ff ffde 	bl	80084f8 <igmp_shutdown>
 800853c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008540:	f7ff bee8 	b.w	8008314 <udp_shutdown>

08008544 <console_init>:
 8008544:	b508      	push	{r3, lr}
 8008546:	f00f ffdd 	bl	8018504 <uart0_init>
 800854a:	4804      	ldr	r0, [pc, #16]	; (800855c <console_init+0x18>)
 800854c:	f010 f804 	bl	8018558 <uart0_puts>
 8008550:	4803      	ldr	r0, [pc, #12]	; (8008560 <console_init+0x1c>)
 8008552:	f010 f801 	bl	8018558 <uart0_puts>
 8008556:	2000      	movs	r0, #0
 8008558:	bd08      	pop	{r3, pc}
 800855a:	bf00      	nop
 800855c:	0801a83e 	stmdaeq	r1, {r1, r2, r3, r4, r5, fp, sp, pc}
 8008560:	0801dd08 	stmdaeq	r1, {r3, r8, sl, fp, ip, lr, pc}

08008564 <net_handle>:
 8008564:	b510      	push	{r4, lr}
 8008566:	4c0c      	ldr	r4, [pc, #48]	; (8008598 <net_handle+0x34>)
 8008568:	4620      	mov	r0, r4
 800856a:	f011 fa51 	bl	8019a10 <emac_eth_recv>
 800856e:	2800      	cmp	r0, #0
 8008570:	dd07      	ble.n	8008582 <net_handle+0x1e>
 8008572:	6820      	ldr	r0, [r4, #0]
 8008574:	8983      	ldrh	r3, [r0, #12]
 8008576:	2b08      	cmp	r3, #8
 8008578:	d107      	bne.n	800858a <net_handle+0x26>
 800857a:	f000 faab 	bl	8008ad4 <ip_handle>
 800857e:	f011 fa5b 	bl	8019a38 <emac_free_pkt>
 8008582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008586:	f00b bb6b 	b.w	8013c60 <net_timers_run>
 800858a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800858e:	d1f6      	bne.n	800857e <net_handle+0x1a>
 8008590:	f000 fa44 	bl	8008a1c <arp_handle>
 8008594:	e7f3      	b.n	800857e <net_handle+0x1a>
 8008596:	bf00      	nop
 8008598:	20009298 	mulcs	r0, r8, r2

0800859c <tcp_handle>:
 800859c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80085a2:	f8b0 8010 	ldrh.w	r8, [r0, #16]
 80085a6:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 80085aa:	4cbd      	ldr	r4, [pc, #756]	; (80088a0 <tcp_handle+0x304>)
 80085ac:	ba5b      	rev16	r3, r3
 80085ae:	8443      	strh	r3, [r0, #34]	; 0x22
 80085b0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80085b2:	4605      	mov	r5, r0
 80085b4:	ba5b      	rev16	r3, r3
 80085b6:	8483      	strh	r3, [r0, #36]	; 0x24
 80085b8:	f00b fbc6 	bl	8013d48 <_bswap32>
 80085bc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80085be:	f8b4 25f0 	ldrh.w	r2, [r4, #1520]	; 0x5f0
 80085c2:	ba5b      	rev16	r3, r3
 80085c4:	862b      	strh	r3, [r5, #48]	; 0x30
 80085c6:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80085c8:	ba5b      	rev16	r3, r3
 80085ca:	86ab      	strh	r3, [r5, #52]	; 0x34
 80085cc:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d152      	bne.n	8008678 <tcp_handle+0xdc>
 80085d2:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d00f      	beq.n	80085fa <tcp_handle+0x5e>
 80085da:	2204      	movs	r2, #4
 80085dc:	f105 011a 	add.w	r1, r5, #26
 80085e0:	4668      	mov	r0, sp
 80085e2:	f00b fba7 	bl	8013d34 <memcpy.isra.0>
 80085e6:	f8b4 25f2 	ldrh.w	r2, [r4, #1522]	; 0x5f2
 80085ea:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d143      	bne.n	8008678 <tcp_handle+0xdc>
 80085f0:	f8d4 25f4 	ldr.w	r2, [r4, #1524]	; 0x5f4
 80085f4:	9b00      	ldr	r3, [sp, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d13e      	bne.n	8008678 <tcp_handle+0xdc>
 80085fa:	2204      	movs	r2, #4
 80085fc:	eb0d 0002 	add.w	r0, sp, r2
 8008600:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8008604:	f00b fb96 	bl	8013d34 <memcpy.isra.0>
 8008608:	2204      	movs	r2, #4
 800860a:	eb0d 0002 	add.w	r0, sp, r2
 800860e:	f105 0126 	add.w	r1, r5, #38	; 0x26
 8008612:	9e01      	ldr	r6, [sp, #4]
 8008614:	f00b fb8e 	bl	8013d34 <memcpy.isra.0>
 8008618:	f894 2630 	ldrb.w	r2, [r4, #1584]	; 0x630
 800861c:	9f01      	ldr	r7, [sp, #4]
 800861e:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 8008622:	2a01      	cmp	r2, #1
 8008624:	d01e      	beq.n	8008664 <tcp_handle+0xc8>
 8008626:	1ed3      	subs	r3, r2, #3
 8008628:	2b07      	cmp	r3, #7
 800862a:	d825      	bhi.n	8008678 <tcp_handle+0xdc>
 800862c:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8008630:	f64f 71ec 	movw	r1, #65516	; 0xffec
 8008634:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8008638:	fa98 f898 	rev16.w	r8, r8
 800863c:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
 8008640:	f8b4 1628 	ldrh.w	r1, [r4, #1576]	; 0x628
 8008644:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 8008648:	fa13 f888 	uxtah	r8, r3, r8
 800864c:	fa1f f888 	uxth.w	r8, r8
 8008650:	2900      	cmp	r1, #0
 8008652:	d14d      	bne.n	80086f0 <tcp_handle+0x154>
 8008654:	f1b8 0f00 	cmp.w	r8, #0
 8008658:	d178      	bne.n	800874c <tcp_handle+0x1b0>
 800865a:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 800865e:	42bb      	cmp	r3, r7
 8008660:	d174      	bne.n	800874c <tcp_handle+0x1b0>
 8008662:	e053      	b.n	800870c <tcp_handle+0x170>
 8008664:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8008668:	075a      	lsls	r2, r3, #29
 800866a:	d405      	bmi.n	8008678 <tcp_handle+0xdc>
 800866c:	06d8      	lsls	r0, r3, #27
 800866e:	d506      	bpl.n	800867e <tcp_handle+0xe2>
 8008670:	498c      	ldr	r1, [pc, #560]	; (80088a4 <tcp_handle+0x308>)
 8008672:	4628      	mov	r0, r5
 8008674:	f00b fc32 	bl	8013edc <_send_reset>
 8008678:	b004      	add	sp, #16
 800867a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867e:	0799      	lsls	r1, r3, #30
 8008680:	d5fa      	bpl.n	8008678 <tcp_handle+0xdc>
 8008682:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8008686:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800868a:	f105 011a 	add.w	r1, r5, #26
 800868e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008692:	4668      	mov	r0, sp
 8008694:	2204      	movs	r2, #4
 8008696:	f8a4 35f2 	strh.w	r3, [r4, #1522]	; 0x5f2
 800869a:	f00b fb4b 	bl	8013d34 <memcpy.isra.0>
 800869e:	2206      	movs	r2, #6
 80086a0:	9b00      	ldr	r3, [sp, #0]
 80086a2:	4881      	ldr	r0, [pc, #516]	; (80088a8 <tcp_handle+0x30c>)
 80086a4:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
 80086a8:	18a9      	adds	r1, r5, r2
 80086aa:	f00b fb43 	bl	8013d34 <memcpy.isra.0>
 80086ae:	f8d4 2618 	ldr.w	r2, [r4, #1560]	; 0x618
 80086b2:	487c      	ldr	r0, [pc, #496]	; (80088a4 <tcp_handle+0x308>)
 80086b4:	f8c4 762c 	str.w	r7, [r4, #1580]	; 0x62c
 80086b8:	1c7b      	adds	r3, r7, #1
 80086ba:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80086be:	f8c4 3624 	str.w	r3, [r4, #1572]	; 0x624
 80086c2:	a901      	add	r1, sp, #4
 80086c4:	2312      	movs	r3, #18
 80086c6:	f88d 300c 	strb.w	r3, [sp, #12]
 80086ca:	f8c4 a608 	str.w	sl, [r4, #1544]	; 0x608
 80086ce:	f8c4 7610 	str.w	r7, [r4, #1552]	; 0x610
 80086d2:	f8c4 6614 	str.w	r6, [r4, #1556]	; 0x614
 80086d6:	f00b fb5d 	bl	8013d94 <_tcp_send_package>
 80086da:	f8d4 3618 	ldr.w	r3, [r4, #1560]	; 0x618
 80086de:	f8c4 3600 	str.w	r3, [r4, #1536]	; 0x600
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	f8c4 2604 	str.w	r2, [r4, #1540]	; 0x604
 80086e8:	2303      	movs	r3, #3
 80086ea:	f884 3630 	strb.w	r3, [r4, #1584]	; 0x630
 80086ee:	e7c3      	b.n	8008678 <tcp_handle+0xdc>
 80086f0:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 80086f4:	eba3 0c07 	sub.w	ip, r3, r7
 80086f8:	f1b8 0f00 	cmp.w	r8, #0
 80086fc:	d10e      	bne.n	800871c <tcp_handle+0x180>
 80086fe:	f1bc 0f00 	cmp.w	ip, #0
 8008702:	dc23      	bgt.n	800874c <tcp_handle+0x1b0>
 8008704:	1afb      	subs	r3, r7, r3
 8008706:	1a5b      	subs	r3, r3, r1
 8008708:	2b00      	cmp	r3, #0
 800870a:	da1f      	bge.n	800874c <tcp_handle+0x1b0>
 800870c:	0743      	lsls	r3, r0, #29
 800870e:	d534      	bpl.n	800877a <tcp_handle+0x1de>
 8008710:	f8b4 15f0 	ldrh.w	r1, [r4, #1520]	; 0x5f0
 8008714:	4863      	ldr	r0, [pc, #396]	; (80088a4 <tcp_handle+0x308>)
 8008716:	f00b faf3 	bl	8013d00 <_init_tcb>
 800871a:	e7ad      	b.n	8008678 <tcp_handle+0xdc>
 800871c:	f1bc 0f00 	cmp.w	ip, #0
 8008720:	dc06      	bgt.n	8008730 <tcp_handle+0x194>
 8008722:	eba7 0c03 	sub.w	ip, r7, r3
 8008726:	ebac 0c01 	sub.w	ip, ip, r1
 800872a:	f1bc 0f00 	cmp.w	ip, #0
 800872e:	dbed      	blt.n	800870c <tcp_handle+0x170>
 8008730:	eb08 0c07 	add.w	ip, r8, r7
 8008734:	f103 0e01 	add.w	lr, r3, #1
 8008738:	ebae 0e0c 	sub.w	lr, lr, ip
 800873c:	f1be 0f00 	cmp.w	lr, #0
 8008740:	dc04      	bgt.n	800874c <tcp_handle+0x1b0>
 8008742:	43db      	mvns	r3, r3
 8008744:	1a5b      	subs	r3, r3, r1
 8008746:	eb13 0f0c 	cmn.w	r3, ip
 800874a:	d4df      	bmi.n	800870c <tcp_handle+0x170>
 800874c:	0742      	lsls	r2, r0, #29
 800874e:	d506      	bpl.n	800875e <tcp_handle+0x1c2>
 8008750:	f8b4 15f0 	ldrh.w	r1, [r4, #1520]	; 0x5f0
 8008754:	4853      	ldr	r0, [pc, #332]	; (80088a4 <tcp_handle+0x308>)
 8008756:	f00b fad3 	bl	8013d00 <_init_tcb>
 800875a:	2301      	movs	r3, #1
 800875c:	e7c5      	b.n	80086ea <tcp_handle+0x14e>
 800875e:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8008762:	9301      	str	r3, [sp, #4]
 8008764:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 8008768:	9302      	str	r3, [sp, #8]
 800876a:	484e      	ldr	r0, [pc, #312]	; (80088a4 <tcp_handle+0x308>)
 800876c:	2310      	movs	r3, #16
 800876e:	a901      	add	r1, sp, #4
 8008770:	f88d 300c 	strb.w	r3, [sp, #12]
 8008774:	f00b fb0e 	bl	8013d94 <_tcp_send_package>
 8008778:	e77e      	b.n	8008678 <tcp_handle+0xdc>
 800877a:	0781      	lsls	r1, r0, #30
 800877c:	d505      	bpl.n	800878a <tcp_handle+0x1ee>
 800877e:	2a03      	cmp	r2, #3
 8008780:	d0eb      	beq.n	800875a <tcp_handle+0x1be>
 8008782:	4948      	ldr	r1, [pc, #288]	; (80088a4 <tcp_handle+0x308>)
 8008784:	4628      	mov	r0, r5
 8008786:	f00b fba9 	bl	8013edc <_send_reset>
 800878a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800878e:	06da      	lsls	r2, r3, #27
 8008790:	f57f af72 	bpl.w	8008678 <tcp_handle+0xdc>
 8008794:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 8008798:	3b03      	subs	r3, #3
 800879a:	2b07      	cmp	r3, #7
 800879c:	d81d      	bhi.n	80087da <tcp_handle+0x23e>
 800879e:	e8df f003 	tbb	[pc, r3]
 80087a2:	87878704 	strhi	r8, [r7, r4, lsl #14]
 80087a6:	c5ba8787 	ldrgt	r8, [sl, #1927]!	; 0x787
 80087aa:	f8d4 3600 	ldr.w	r3, [r4, #1536]	; 0x600
 80087ae:	1b9b      	subs	r3, r3, r6
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dc0e      	bgt.n	80087d2 <tcp_handle+0x236>
 80087b4:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 80087b8:	1af3      	subs	r3, r6, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	dc09      	bgt.n	80087d2 <tcp_handle+0x236>
 80087be:	f8c4 a608 	str.w	sl, [r4, #1544]	; 0x608
 80087c2:	f8c4 7610 	str.w	r7, [r4, #1552]	; 0x610
 80087c6:	f8c4 6614 	str.w	r6, [r4, #1556]	; 0x614
 80087ca:	f8c4 6600 	str.w	r6, [r4, #1536]	; 0x600
 80087ce:	2304      	movs	r3, #4
 80087d0:	e78b      	b.n	80086ea <tcp_handle+0x14e>
 80087d2:	4934      	ldr	r1, [pc, #208]	; (80088a4 <tcp_handle+0x308>)
 80087d4:	4628      	mov	r0, r5
 80087d6:	f00b fb81 	bl	8013edc <_send_reset>
 80087da:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 80087de:	3b04      	subs	r3, #4
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d837      	bhi.n	8008854 <tcp_handle+0x2b8>
 80087e4:	f1b8 0f00 	cmp.w	r8, #0
 80087e8:	d034      	beq.n	8008854 <tcp_handle+0x2b8>
 80087ea:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 80087ee:	42bb      	cmp	r3, r7
 80087f0:	f040 80ad 	bne.w	800894e <tcp_handle+0x3b2>
 80087f4:	f8b4 7634 	ldrh.w	r7, [r4, #1588]	; 0x634
 80087f8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80088ac <tcp_handle+0x310>
 80087fc:	f240 53b6 	movw	r3, #1462	; 0x5b6
 8008800:	435f      	muls	r7, r3
 8008802:	1d38      	adds	r0, r7, #4
 8008804:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8008808:	4642      	mov	r2, r8
 800880a:	4449      	add	r1, r9
 800880c:	4450      	add	r0, sl
 800880e:	f00b fa91 	bl	8013d34 <memcpy.isra.0>
 8008812:	f8b4 2628 	ldrh.w	r2, [r4, #1576]	; 0x628
 8008816:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 800881a:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800881e:	f8a4 2628 	strh.w	r2, [r4, #1576]	; 0x628
 8008822:	4427      	add	r7, r4
 8008824:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 8008828:	f8a7 8bec 	strh.w	r8, [r7, #3052]	; 0xbec
 800882c:	4443      	add	r3, r8
 800882e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008832:	f8c4 3624 	str.w	r3, [r4, #1572]	; 0x624
 8008836:	a901      	add	r1, sp, #4
 8008838:	2310      	movs	r3, #16
 800883a:	f1aa 0044 	sub.w	r0, sl, #68	; 0x44
 800883e:	f88d 300c 	strb.w	r3, [sp, #12]
 8008842:	f00b faa7 	bl	8013d94 <_tcp_send_package>
 8008846:	f8b4 3634 	ldrh.w	r3, [r4, #1588]	; 0x634
 800884a:	3301      	adds	r3, #1
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	f8a4 3634 	strh.w	r3, [r4, #1588]	; 0x634
 8008854:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 8008858:	2b02      	cmp	r3, #2
 800885a:	f67f af0d 	bls.w	8008678 <tcp_handle+0xdc>
 800885e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8008862:	07db      	lsls	r3, r3, #31
 8008864:	f57f af08 	bpl.w	8008678 <tcp_handle+0xdc>
 8008868:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 800886c:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 8008870:	480c      	ldr	r0, [pc, #48]	; (80088a4 <tcp_handle+0x308>)
 8008872:	3301      	adds	r3, #1
 8008874:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008878:	f8c4 3624 	str.w	r3, [r4, #1572]	; 0x624
 800887c:	a901      	add	r1, sp, #4
 800887e:	2310      	movs	r3, #16
 8008880:	f88d 300c 	strb.w	r3, [sp, #12]
 8008884:	f00b fa86 	bl	8013d94 <_tcp_send_package>
 8008888:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 800888c:	2b05      	cmp	r3, #5
 800888e:	d067      	beq.n	8008960 <tcp_handle+0x3c4>
 8008890:	d861      	bhi.n	8008956 <tcp_handle+0x3ba>
 8008892:	3b03      	subs	r3, #3
 8008894:	2b01      	cmp	r3, #1
 8008896:	f63f aeef 	bhi.w	8008678 <tcp_handle+0xdc>
 800889a:	2307      	movs	r3, #7
 800889c:	e725      	b.n	80086ea <tcp_handle+0x14e>
 800889e:	bf00      	nop
 80088a0:	10000000 	andne	r0, r0, r0
 80088a4:	100005f0 	strdne	r0, [r0], -r0	; <UNPREDICTABLE>
 80088a8:	100005f8 	strdne	r0, [r0], -r8
 80088ac:	10000634 	andne	r0, r0, r4, lsr r6
 80088b0:	f8d4 3600 	ldr.w	r3, [r4, #1536]	; 0x600
 80088b4:	1b99      	subs	r1, r3, r6
 80088b6:	d51a      	bpl.n	80088ee <tcp_handle+0x352>
 80088b8:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 80088bc:	1ab2      	subs	r2, r6, r2
 80088be:	2a00      	cmp	r2, #0
 80088c0:	dc15      	bgt.n	80088ee <tcp_handle+0x352>
 80088c2:	f8c4 6600 	str.w	r6, [r4, #1536]	; 0x600
 80088c6:	f8d4 3610 	ldr.w	r3, [r4, #1552]	; 0x610
 80088ca:	1bda      	subs	r2, r3, r7
 80088cc:	2a00      	cmp	r2, #0
 80088ce:	db07      	blt.n	80088e0 <tcp_handle+0x344>
 80088d0:	42bb      	cmp	r3, r7
 80088d2:	d182      	bne.n	80087da <tcp_handle+0x23e>
 80088d4:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
 80088d8:	1b9b      	subs	r3, r3, r6
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f73f af7d 	bgt.w	80087da <tcp_handle+0x23e>
 80088e0:	f8c4 a608 	str.w	sl, [r4, #1544]	; 0x608
 80088e4:	f8c4 7610 	str.w	r7, [r4, #1552]	; 0x610
 80088e8:	f8c4 6614 	str.w	r6, [r4, #1556]	; 0x614
 80088ec:	e775      	b.n	80087da <tcp_handle+0x23e>
 80088ee:	1af3      	subs	r3, r6, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dc09      	bgt.n	8008908 <tcp_handle+0x36c>
 80088f4:	2900      	cmp	r1, #0
 80088f6:	f73f af70 	bgt.w	80087da <tcp_handle+0x23e>
 80088fa:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 80088fe:	1af3      	subs	r3, r6, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	f73f af6a 	bgt.w	80087da <tcp_handle+0x23e>
 8008906:	e7de      	b.n	80088c6 <tcp_handle+0x32a>
 8008908:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 800890c:	1b9a      	subs	r2, r3, r6
 800890e:	2a00      	cmp	r2, #0
 8008910:	f6bf af63 	bge.w	80087da <tcp_handle+0x23e>
 8008914:	e725      	b.n	8008762 <tcp_handle+0x1c6>
 8008916:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 800891a:	42b3      	cmp	r3, r6
 800891c:	f47f af5d 	bne.w	80087da <tcp_handle+0x23e>
 8008920:	f8b4 15f0 	ldrh.w	r1, [r4, #1520]	; 0x5f0
 8008924:	4811      	ldr	r0, [pc, #68]	; (800896c <tcp_handle+0x3d0>)
 8008926:	f00b f9eb 	bl	8013d00 <_init_tcb>
 800892a:	e756      	b.n	80087da <tcp_handle+0x23e>
 800892c:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8008930:	42b3      	cmp	r3, r6
 8008932:	f47f af52 	bne.w	80087da <tcp_handle+0x23e>
 8008936:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 800893a:	9302      	str	r3, [sp, #8]
 800893c:	480b      	ldr	r0, [pc, #44]	; (800896c <tcp_handle+0x3d0>)
 800893e:	9601      	str	r6, [sp, #4]
 8008940:	2310      	movs	r3, #16
 8008942:	a901      	add	r1, sp, #4
 8008944:	f88d 300c 	strb.w	r3, [sp, #12]
 8008948:	f00b fa24 	bl	8013d94 <_tcp_send_package>
 800894c:	e745      	b.n	80087da <tcp_handle+0x23e>
 800894e:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 8008952:	9201      	str	r2, [sp, #4]
 8008954:	e708      	b.n	8008768 <tcp_handle+0x1cc>
 8008956:	2b06      	cmp	r3, #6
 8008958:	f47f ae8e 	bne.w	8008678 <tcp_handle+0xdc>
 800895c:	230a      	movs	r3, #10
 800895e:	e6c4      	b.n	80086ea <tcp_handle+0x14e>
 8008960:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8008964:	42b3      	cmp	r3, r6
 8008966:	d0f9      	beq.n	800895c <tcp_handle+0x3c0>
 8008968:	2308      	movs	r3, #8
 800896a:	e6be      	b.n	80086ea <tcp_handle+0x14e>
 800896c:	100005f0 	strdne	r0, [r0], -r0	; <UNPREDICTABLE>

08008970 <udp_handle>:
 8008970:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008974:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8008976:	ba5b      	rev16	r3, r3
 8008978:	b29b      	uxth	r3, r3
 800897a:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 800897e:	2a01      	cmp	r2, #1
 8008980:	4607      	mov	r7, r0
 8008982:	d904      	bls.n	800898e <udp_handle+0x1e>
 8008984:	2b7b      	cmp	r3, #123	; 0x7b
 8008986:	d002      	beq.n	800898e <udp_handle+0x1e>
 8008988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800898c:	d308      	bcc.n	80089a0 <udp_handle+0x30>
 800898e:	4a21      	ldr	r2, [pc, #132]	; (8008a14 <udp_handle+0xa4>)
 8008990:	2400      	movs	r4, #0
 8008992:	f852 1b04 	ldr.w	r1, [r2], #4
 8008996:	4299      	cmp	r1, r3
 8008998:	d005      	beq.n	80089a6 <udp_handle+0x36>
 800899a:	3401      	adds	r4, #1
 800899c:	2c08      	cmp	r4, #8
 800899e:	d1f8      	bne.n	8008992 <udp_handle+0x22>
 80089a0:	b002      	add	sp, #8
 80089a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a6:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 80089a8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8008a18 <udp_handle+0xa8>
 80089ac:	f640 3394 	movw	r3, #2964	; 0xb94
 80089b0:	435c      	muls	r4, r3
 80089b2:	ba76      	rev16	r6, r6
 80089b4:	f838 5004 	ldrh.w	r5, [r8, r4]
 80089b8:	3e08      	subs	r6, #8
 80089ba:	b2b6      	uxth	r6, r6
 80089bc:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 80089c0:	435d      	muls	r5, r3
 80089c2:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 80089c6:	f104 0004 	add.w	r0, r4, #4
 80089ca:	bf28      	it	cs
 80089cc:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 80089d0:	4428      	add	r0, r5
 80089d2:	4632      	mov	r2, r6
 80089d4:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 80089d8:	4440      	add	r0, r8
 80089da:	f00b fb45 	bl	8014068 <memcpy.isra.0>
 80089de:	2204      	movs	r2, #4
 80089e0:	eb0d 0002 	add.w	r0, sp, r2
 80089e4:	f107 011a 	add.w	r1, r7, #26
 80089e8:	f00b fb3e 	bl	8014068 <memcpy.isra.0>
 80089ec:	192b      	adds	r3, r5, r4
 80089ee:	4443      	add	r3, r8
 80089f0:	9a01      	ldr	r2, [sp, #4]
 80089f2:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 80089f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80089f8:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 80089fc:	ba52      	rev16	r2, r2
 80089fe:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 8008a02:	f838 3004 	ldrh.w	r3, [r8, r4]
 8008a06:	3301      	adds	r3, #1
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	f828 3004 	strh.w	r3, [r8, r4]
 8008a10:	e7c6      	b.n	80089a0 <udp_handle+0x30>
 8008a12:	bf00      	nop
 8008a14:	200092c0 	andcs	r9, r0, r0, asr #5
 8008a18:	200092e0 	andcs	r9, r0, r0, ror #5

08008a1c <arp_handle>:
 8008a1c:	8a83      	ldrh	r3, [r0, #20]
 8008a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a22:	d003      	beq.n	8008a2c <arp_handle+0x10>
 8008a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a28:	d002      	beq.n	8008a30 <arp_handle+0x14>
 8008a2a:	4770      	bx	lr
 8008a2c:	f00c bdd6 	b.w	80155dc <arp_handle_request>
 8008a30:	f00c bdfc 	b.w	801562c <arp_handle_reply>

08008a34 <igmp_handle>:
 8008a34:	7b83      	ldrb	r3, [r0, #14]
 8008a36:	2b45      	cmp	r3, #69	; 0x45
 8008a38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	d117      	bne.n	8008a6e <igmp_handle+0x3a>
 8008a3e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8008a42:	2b11      	cmp	r3, #17
 8008a44:	d113      	bne.n	8008a6e <igmp_handle+0x3a>
 8008a46:	4b21      	ldr	r3, [pc, #132]	; (8008acc <igmp_handle+0x98>)
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	f100 051d 	add.w	r5, r0, #29
 8008a4e:	466a      	mov	r2, sp
 8008a50:	f100 0621 	add.w	r6, r0, #33	; 0x21
 8008a54:	462b      	mov	r3, r5
 8008a56:	42b3      	cmp	r3, r6
 8008a58:	d10c      	bne.n	8008a74 <igmp_handle+0x40>
 8008a5a:	2401      	movs	r4, #1
 8008a5c:	4b1c      	ldr	r3, [pc, #112]	; (8008ad0 <igmp_handle+0x9c>)
 8008a5e:	2100      	movs	r1, #0
 8008a60:	f8d3 718c 	ldr.w	r7, [r3, #396]	; 0x18c
 8008a64:	f04f 0c01 	mov.w	ip, #1
 8008a68:	336c      	adds	r3, #108	; 0x6c
 8008a6a:	428f      	cmp	r7, r1
 8008a6c:	d10a      	bne.n	8008a84 <igmp_handle+0x50>
 8008a6e:	b003      	add	sp, #12
 8008a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a74:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008a78:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8008a7c:	428c      	cmp	r4, r1
 8008a7e:	d0ea      	beq.n	8008a56 <igmp_handle+0x22>
 8008a80:	2400      	movs	r4, #0
 8008a82:	e7eb      	b.n	8008a5c <igmp_handle+0x28>
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	9201      	str	r2, [sp, #4]
 8008a88:	b924      	cbnz	r4, 8008a94 <igmp_handle+0x60>
 8008a8a:	f10d 0e04 	add.w	lr, sp, #4
 8008a8e:	462a      	mov	r2, r5
 8008a90:	42b2      	cmp	r2, r6
 8008a92:	d10e      	bne.n	8008ab2 <igmp_handle+0x7e>
 8008a94:	f893 e005 	ldrb.w	lr, [r3, #5]
 8008a98:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
 8008a9c:	f1be 0f01 	cmp.w	lr, #1
 8008aa0:	d110      	bne.n	8008ac4 <igmp_handle+0x90>
 8008aa2:	f893 e004 	ldrb.w	lr, [r3, #4]
 8008aa6:	4596      	cmp	lr, r2
 8008aa8:	d909      	bls.n	8008abe <igmp_handle+0x8a>
 8008aaa:	0852      	lsrs	r2, r2, #1
 8008aac:	3201      	adds	r2, #1
 8008aae:	711a      	strb	r2, [r3, #4]
 8008ab0:	e005      	b.n	8008abe <igmp_handle+0x8a>
 8008ab2:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8008ab6:	f812 9f01 	ldrb.w	r9, [r2, #1]!
 8008aba:	45c1      	cmp	r9, r8
 8008abc:	d0e8      	beq.n	8008a90 <igmp_handle+0x5c>
 8008abe:	3101      	adds	r1, #1
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	e7d2      	b.n	8008a6a <igmp_handle+0x36>
 8008ac4:	f883 c005 	strb.w	ip, [r3, #5]
 8008ac8:	e7ef      	b.n	8008aaa <igmp_handle+0x76>
 8008aca:	bf00      	nop
 8008acc:	010000e0 	smlatteq	r0, r0, r0, r0
 8008ad0:	10001328 	andne	r1, r0, r8, lsr #6

08008ad4 <ip_handle>:
 8008ad4:	7b82      	ldrb	r2, [r0, #14]
 8008ad6:	7dc3      	ldrb	r3, [r0, #23]
 8008ad8:	2a45      	cmp	r2, #69	; 0x45
 8008ada:	d003      	beq.n	8008ae4 <ip_handle+0x10>
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d111      	bne.n	8008b04 <ip_handle+0x30>
 8008ae0:	f7ff bfa8 	b.w	8008a34 <igmp_handle>
 8008ae4:	2b06      	cmp	r3, #6
 8008ae6:	d00b      	beq.n	8008b00 <ip_handle+0x2c>
 8008ae8:	d804      	bhi.n	8008af4 <ip_handle+0x20>
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d006      	beq.n	8008afc <ip_handle+0x28>
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d0f6      	beq.n	8008ae0 <ip_handle+0xc>
 8008af2:	4770      	bx	lr
 8008af4:	2b11      	cmp	r3, #17
 8008af6:	d105      	bne.n	8008b04 <ip_handle+0x30>
 8008af8:	f7ff bf3a 	b.w	8008970 <udp_handle>
 8008afc:	f000 b804 	b.w	8008b08 <icmp_handle>
 8008b00:	f7ff bd4c 	b.w	800859c <tcp_handle>
 8008b04:	4770      	bx	lr
	...

08008b08 <icmp_handle>:
 8008b08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b0a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8008b0e:	2b08      	cmp	r3, #8
 8008b10:	4604      	mov	r4, r0
 8008b12:	d13e      	bne.n	8008b92 <icmp_handle+0x8a>
 8008b14:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8008b18:	2d00      	cmp	r5, #0
 8008b1a:	d13a      	bne.n	8008b92 <icmp_handle+0x8a>
 8008b1c:	1d86      	adds	r6, r0, #6
 8008b1e:	4631      	mov	r1, r6
 8008b20:	2206      	movs	r2, #6
 8008b22:	f00d f913 	bl	8015d4c <memcpy.isra.0>
 8008b26:	4630      	mov	r0, r6
 8008b28:	491b      	ldr	r1, [pc, #108]	; (8008b98 <icmp_handle+0x90>)
 8008b2a:	2206      	movs	r2, #6
 8008b2c:	f00d f90e 	bl	8015d4c <memcpy.isra.0>
 8008b30:	8a63      	ldrh	r3, [r4, #18]
 8008b32:	f104 061a 	add.w	r6, r4, #26
 8008b36:	43db      	mvns	r3, r3
 8008b38:	4631      	mov	r1, r6
 8008b3a:	8263      	strh	r3, [r4, #18]
 8008b3c:	2204      	movs	r2, #4
 8008b3e:	f104 001e 	add.w	r0, r4, #30
 8008b42:	f00d f903 	bl	8015d4c <memcpy.isra.0>
 8008b46:	4b15      	ldr	r3, [pc, #84]	; (8008b9c <icmp_handle+0x94>)
 8008b48:	2204      	movs	r2, #4
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	9301      	str	r3, [sp, #4]
 8008b4e:	eb0d 0102 	add.w	r1, sp, r2
 8008b52:	4630      	mov	r0, r6
 8008b54:	f104 060e 	add.w	r6, r4, #14
 8008b58:	f00d f8f8 	bl	8015d4c <memcpy.isra.0>
 8008b5c:	2114      	movs	r1, #20
 8008b5e:	7625      	strb	r5, [r4, #24]
 8008b60:	7665      	strb	r5, [r4, #25]
 8008b62:	4630      	mov	r0, r6
 8008b64:	f00d f8c7 	bl	8015cf6 <net_chksum>
 8008b68:	8a21      	ldrh	r1, [r4, #16]
 8008b6a:	8320      	strh	r0, [r4, #24]
 8008b6c:	ba49      	rev16	r1, r1
 8008b6e:	b289      	uxth	r1, r1
 8008b70:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8008b74:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8008b78:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f00d f8ba 	bl	8015cf6 <net_chksum>
 8008b82:	8a21      	ldrh	r1, [r4, #16]
 8008b84:	84a0      	strh	r0, [r4, #36]	; 0x24
 8008b86:	ba49      	rev16	r1, r1
 8008b88:	b289      	uxth	r1, r1
 8008b8a:	310e      	adds	r1, #14
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f010 ff57 	bl	8019a40 <emac_eth_send>
 8008b92:	b002      	add	sp, #8
 8008b94:	bd70      	pop	{r4, r5, r6, pc}
 8008b96:	bf00      	nop
 8008b98:	20009290 	mulcs	r0, r0, r2
 8008b9c:	20009284 	andcs	r9, r0, r4, lsl #5
 8008ba0:	0801de04 	stmdaeq	r1, {r2, r9, sl, fp, ip, lr, pc}
 8008ba4:	20000000 	andcs	r0, r0, r0
 8008ba8:	200000f8 	strdcs	r0, [r0], -r8
 8008bac:	200000f8 	strdcs	r0, [r0], -r8
 8008bb0:	2002d340 	andcs	sp, r2, r0, asr #6

08008bb4 <Reset_Handler>:
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	e003      	b.n	8008bc0 <DataInit>

08008bb8 <CopyData>:
 8008bb8:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <Zerobss+0x10>)
 8008bba:	585b      	ldr	r3, [r3, r1]
 8008bbc:	5043      	str	r3, [r0, r1]
 8008bbe:	3104      	adds	r1, #4

08008bc0 <DataInit>:
 8008bc0:	4809      	ldr	r0, [pc, #36]	; (8008be8 <Zerobss+0x14>)
 8008bc2:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <Zerobss+0x18>)
 8008bc4:	1842      	adds	r2, r0, r1
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d3f6      	bcc.n	8008bb8 <CopyData>
 8008bca:	4a09      	ldr	r2, [pc, #36]	; (8008bf0 <Zerobss+0x1c>)
 8008bcc:	e002      	b.n	8008bd4 <Zerobss>

08008bce <FillZerobss>:
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f842 3b04 	str.w	r3, [r2], #4

08008bd4 <Zerobss>:
 8008bd4:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <Zerobss+0x20>)
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d3f9      	bcc.n	8008bce <FillZerobss>
 8008bda:	f00f fcf3 	bl	80185c4 <SystemInit>
 8008bde:	f000 fce9 	bl	80095b4 <main>
 8008be2:	4770      	bx	lr
 8008be4:	0801de04 	stmdaeq	r1, {r2, r9, sl, fp, ip, lr, pc}
 8008be8:	20000000 	andcs	r0, r0, r0
 8008bec:	200000f8 	strdcs	r0, [r0], -r8
 8008bf0:	200000f8 	strdcs	r0, [r0], -r8
 8008bf4:	2002d340 	andcs	sp, r2, r0, asr #6

08008bf8 <__aeabi_d2f>:
 8008bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008c00:	bf24      	itt	cs
 8008c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008c0a:	d90d      	bls.n	8008c28 <__aeabi_d2f+0x30>
 8008c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008c20:	bf08      	it	eq
 8008c22:	f020 0001 	biceq.w	r0, r0, #1
 8008c26:	4770      	bx	lr
 8008c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008c2c:	d121      	bne.n	8008c72 <__aeabi_d2f+0x7a>
 8008c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008c32:	bfbc      	itt	lt
 8008c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008c38:	4770      	bxlt	lr
 8008c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008c42:	f1c2 0218 	rsb	r2, r2, #24
 8008c46:	f1c2 0c20 	rsb	ip, r2, #32
 8008c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8008c52:	bf18      	it	ne
 8008c54:	f040 0001 	orrne.w	r0, r0, #1
 8008c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008c64:	ea40 000c 	orr.w	r0, r0, ip
 8008c68:	fa23 f302 	lsr.w	r3, r3, r2
 8008c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c70:	e7cc      	b.n	8008c0c <__aeabi_d2f+0x14>
 8008c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008c76:	d107      	bne.n	8008c88 <__aeabi_d2f+0x90>
 8008c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008c7c:	bf1e      	ittt	ne
 8008c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008c86:	4770      	bxne	lr
 8008c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop

08008c98 <__aeabi_uldivmod>:
 8008c98:	b953      	cbnz	r3, 8008cb0 <__aeabi_uldivmod+0x18>
 8008c9a:	b94a      	cbnz	r2, 8008cb0 <__aeabi_uldivmod+0x18>
 8008c9c:	2900      	cmp	r1, #0
 8008c9e:	bf08      	it	eq
 8008ca0:	2800      	cmpeq	r0, #0
 8008ca2:	bf1c      	itt	ne
 8008ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008cac:	f000 b80c 	b.w	8008cc8 <__aeabi_idiv0>
 8008cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008cb8:	f001 fc4a 	bl	800a550 <__udivmoddi4>
 8008cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cc4:	b004      	add	sp, #16
 8008cc6:	4770      	bx	lr

08008cc8 <__aeabi_idiv0>:
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop

08008ccc <__aeabi_drsub>:
 8008ccc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008cd0:	e002      	b.n	8008cd8 <__adddf3>
 8008cd2:	bf00      	nop

08008cd4 <__aeabi_dsub>:
 8008cd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008cd8 <__adddf3>:
 8008cd8:	b530      	push	{r4, r5, lr}
 8008cda:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008cde:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008ce2:	ea94 0f05 	teq	r4, r5
 8008ce6:	bf08      	it	eq
 8008ce8:	ea90 0f02 	teqeq	r0, r2
 8008cec:	bf1f      	itttt	ne
 8008cee:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008cf2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008cf6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008cfa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008cfe:	f000 80e2 	beq.w	8008ec6 <__adddf3+0x1ee>
 8008d02:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008d06:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008d0a:	bfb8      	it	lt
 8008d0c:	426d      	neglt	r5, r5
 8008d0e:	dd0c      	ble.n	8008d2a <__adddf3+0x52>
 8008d10:	442c      	add	r4, r5
 8008d12:	ea80 0202 	eor.w	r2, r0, r2
 8008d16:	ea81 0303 	eor.w	r3, r1, r3
 8008d1a:	ea82 0000 	eor.w	r0, r2, r0
 8008d1e:	ea83 0101 	eor.w	r1, r3, r1
 8008d22:	ea80 0202 	eor.w	r2, r0, r2
 8008d26:	ea81 0303 	eor.w	r3, r1, r3
 8008d2a:	2d36      	cmp	r5, #54	; 0x36
 8008d2c:	bf88      	it	hi
 8008d2e:	bd30      	pophi	{r4, r5, pc}
 8008d30:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008d34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008d38:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008d3c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008d40:	d002      	beq.n	8008d48 <__adddf3+0x70>
 8008d42:	4240      	negs	r0, r0
 8008d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008d48:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008d4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008d50:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008d54:	d002      	beq.n	8008d5c <__adddf3+0x84>
 8008d56:	4252      	negs	r2, r2
 8008d58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008d5c:	ea94 0f05 	teq	r4, r5
 8008d60:	f000 80a7 	beq.w	8008eb2 <__adddf3+0x1da>
 8008d64:	f1a4 0401 	sub.w	r4, r4, #1
 8008d68:	f1d5 0e20 	rsbs	lr, r5, #32
 8008d6c:	db0d      	blt.n	8008d8a <__adddf3+0xb2>
 8008d6e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008d72:	fa22 f205 	lsr.w	r2, r2, r5
 8008d76:	1880      	adds	r0, r0, r2
 8008d78:	f141 0100 	adc.w	r1, r1, #0
 8008d7c:	fa03 f20e 	lsl.w	r2, r3, lr
 8008d80:	1880      	adds	r0, r0, r2
 8008d82:	fa43 f305 	asr.w	r3, r3, r5
 8008d86:	4159      	adcs	r1, r3
 8008d88:	e00e      	b.n	8008da8 <__adddf3+0xd0>
 8008d8a:	f1a5 0520 	sub.w	r5, r5, #32
 8008d8e:	f10e 0e20 	add.w	lr, lr, #32
 8008d92:	2a01      	cmp	r2, #1
 8008d94:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008d98:	bf28      	it	cs
 8008d9a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008d9e:	fa43 f305 	asr.w	r3, r3, r5
 8008da2:	18c0      	adds	r0, r0, r3
 8008da4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008da8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008dac:	d507      	bpl.n	8008dbe <__adddf3+0xe6>
 8008dae:	f04f 0e00 	mov.w	lr, #0
 8008db2:	f1dc 0c00 	rsbs	ip, ip, #0
 8008db6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008dba:	eb6e 0101 	sbc.w	r1, lr, r1
 8008dbe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008dc2:	d31b      	bcc.n	8008dfc <__adddf3+0x124>
 8008dc4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008dc8:	d30c      	bcc.n	8008de4 <__adddf3+0x10c>
 8008dca:	0849      	lsrs	r1, r1, #1
 8008dcc:	ea5f 0030 	movs.w	r0, r0, rrx
 8008dd0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008dd4:	f104 0401 	add.w	r4, r4, #1
 8008dd8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008ddc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008de0:	f080 809a 	bcs.w	8008f18 <__adddf3+0x240>
 8008de4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008de8:	bf08      	it	eq
 8008dea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008dee:	f150 0000 	adcs.w	r0, r0, #0
 8008df2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008df6:	ea41 0105 	orr.w	r1, r1, r5
 8008dfa:	bd30      	pop	{r4, r5, pc}
 8008dfc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008e00:	4140      	adcs	r0, r0
 8008e02:	eb41 0101 	adc.w	r1, r1, r1
 8008e06:	3c01      	subs	r4, #1
 8008e08:	bf28      	it	cs
 8008e0a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008e0e:	d2e9      	bcs.n	8008de4 <__adddf3+0x10c>
 8008e10:	f091 0f00 	teq	r1, #0
 8008e14:	bf04      	itt	eq
 8008e16:	4601      	moveq	r1, r0
 8008e18:	2000      	moveq	r0, #0
 8008e1a:	fab1 f381 	clz	r3, r1
 8008e1e:	bf08      	it	eq
 8008e20:	3320      	addeq	r3, #32
 8008e22:	f1a3 030b 	sub.w	r3, r3, #11
 8008e26:	f1b3 0220 	subs.w	r2, r3, #32
 8008e2a:	da0c      	bge.n	8008e46 <__adddf3+0x16e>
 8008e2c:	320c      	adds	r2, #12
 8008e2e:	dd08      	ble.n	8008e42 <__adddf3+0x16a>
 8008e30:	f102 0c14 	add.w	ip, r2, #20
 8008e34:	f1c2 020c 	rsb	r2, r2, #12
 8008e38:	fa01 f00c 	lsl.w	r0, r1, ip
 8008e3c:	fa21 f102 	lsr.w	r1, r1, r2
 8008e40:	e00c      	b.n	8008e5c <__adddf3+0x184>
 8008e42:	f102 0214 	add.w	r2, r2, #20
 8008e46:	bfd8      	it	le
 8008e48:	f1c2 0c20 	rsble	ip, r2, #32
 8008e4c:	fa01 f102 	lsl.w	r1, r1, r2
 8008e50:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008e54:	bfdc      	itt	le
 8008e56:	ea41 010c 	orrle.w	r1, r1, ip
 8008e5a:	4090      	lslle	r0, r2
 8008e5c:	1ae4      	subs	r4, r4, r3
 8008e5e:	bfa2      	ittt	ge
 8008e60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008e64:	4329      	orrge	r1, r5
 8008e66:	bd30      	popge	{r4, r5, pc}
 8008e68:	ea6f 0404 	mvn.w	r4, r4
 8008e6c:	3c1f      	subs	r4, #31
 8008e6e:	da1c      	bge.n	8008eaa <__adddf3+0x1d2>
 8008e70:	340c      	adds	r4, #12
 8008e72:	dc0e      	bgt.n	8008e92 <__adddf3+0x1ba>
 8008e74:	f104 0414 	add.w	r4, r4, #20
 8008e78:	f1c4 0220 	rsb	r2, r4, #32
 8008e7c:	fa20 f004 	lsr.w	r0, r0, r4
 8008e80:	fa01 f302 	lsl.w	r3, r1, r2
 8008e84:	ea40 0003 	orr.w	r0, r0, r3
 8008e88:	fa21 f304 	lsr.w	r3, r1, r4
 8008e8c:	ea45 0103 	orr.w	r1, r5, r3
 8008e90:	bd30      	pop	{r4, r5, pc}
 8008e92:	f1c4 040c 	rsb	r4, r4, #12
 8008e96:	f1c4 0220 	rsb	r2, r4, #32
 8008e9a:	fa20 f002 	lsr.w	r0, r0, r2
 8008e9e:	fa01 f304 	lsl.w	r3, r1, r4
 8008ea2:	ea40 0003 	orr.w	r0, r0, r3
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	bd30      	pop	{r4, r5, pc}
 8008eaa:	fa21 f004 	lsr.w	r0, r1, r4
 8008eae:	4629      	mov	r1, r5
 8008eb0:	bd30      	pop	{r4, r5, pc}
 8008eb2:	f094 0f00 	teq	r4, #0
 8008eb6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008eba:	bf06      	itte	eq
 8008ebc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008ec0:	3401      	addeq	r4, #1
 8008ec2:	3d01      	subne	r5, #1
 8008ec4:	e74e      	b.n	8008d64 <__adddf3+0x8c>
 8008ec6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008eca:	bf18      	it	ne
 8008ecc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008ed0:	d029      	beq.n	8008f26 <__adddf3+0x24e>
 8008ed2:	ea94 0f05 	teq	r4, r5
 8008ed6:	bf08      	it	eq
 8008ed8:	ea90 0f02 	teqeq	r0, r2
 8008edc:	d005      	beq.n	8008eea <__adddf3+0x212>
 8008ede:	ea54 0c00 	orrs.w	ip, r4, r0
 8008ee2:	bf04      	itt	eq
 8008ee4:	4619      	moveq	r1, r3
 8008ee6:	4610      	moveq	r0, r2
 8008ee8:	bd30      	pop	{r4, r5, pc}
 8008eea:	ea91 0f03 	teq	r1, r3
 8008eee:	bf1e      	ittt	ne
 8008ef0:	2100      	movne	r1, #0
 8008ef2:	2000      	movne	r0, #0
 8008ef4:	bd30      	popne	{r4, r5, pc}
 8008ef6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008efa:	d105      	bne.n	8008f08 <__adddf3+0x230>
 8008efc:	0040      	lsls	r0, r0, #1
 8008efe:	4149      	adcs	r1, r1
 8008f00:	bf28      	it	cs
 8008f02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008f06:	bd30      	pop	{r4, r5, pc}
 8008f08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008f0c:	bf3c      	itt	cc
 8008f0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008f12:	bd30      	popcc	{r4, r5, pc}
 8008f14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008f18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008f1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f20:	f04f 0000 	mov.w	r0, #0
 8008f24:	bd30      	pop	{r4, r5, pc}
 8008f26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008f2a:	bf1a      	itte	ne
 8008f2c:	4619      	movne	r1, r3
 8008f2e:	4610      	movne	r0, r2
 8008f30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008f34:	bf1c      	itt	ne
 8008f36:	460b      	movne	r3, r1
 8008f38:	4602      	movne	r2, r0
 8008f3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008f3e:	bf06      	itte	eq
 8008f40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008f44:	ea91 0f03 	teqeq	r1, r3
 8008f48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008f4c:	bd30      	pop	{r4, r5, pc}
 8008f4e:	bf00      	nop

08008f50 <__aeabi_ui2d>:
 8008f50:	f090 0f00 	teq	r0, #0
 8008f54:	bf04      	itt	eq
 8008f56:	2100      	moveq	r1, #0
 8008f58:	4770      	bxeq	lr
 8008f5a:	b530      	push	{r4, r5, lr}
 8008f5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008f60:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008f64:	f04f 0500 	mov.w	r5, #0
 8008f68:	f04f 0100 	mov.w	r1, #0
 8008f6c:	e750      	b.n	8008e10 <__adddf3+0x138>
 8008f6e:	bf00      	nop

08008f70 <__aeabi_i2d>:
 8008f70:	f090 0f00 	teq	r0, #0
 8008f74:	bf04      	itt	eq
 8008f76:	2100      	moveq	r1, #0
 8008f78:	4770      	bxeq	lr
 8008f7a:	b530      	push	{r4, r5, lr}
 8008f7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008f80:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008f84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008f88:	bf48      	it	mi
 8008f8a:	4240      	negmi	r0, r0
 8008f8c:	f04f 0100 	mov.w	r1, #0
 8008f90:	e73e      	b.n	8008e10 <__adddf3+0x138>
 8008f92:	bf00      	nop

08008f94 <__aeabi_f2d>:
 8008f94:	0042      	lsls	r2, r0, #1
 8008f96:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008f9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8008f9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008fa2:	bf1f      	itttt	ne
 8008fa4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008fa8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008fac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008fb0:	4770      	bxne	lr
 8008fb2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8008fb6:	bf08      	it	eq
 8008fb8:	4770      	bxeq	lr
 8008fba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008fbe:	bf04      	itt	eq
 8008fc0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008fc4:	4770      	bxeq	lr
 8008fc6:	b530      	push	{r4, r5, lr}
 8008fc8:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008fcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008fd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008fd4:	e71c      	b.n	8008e10 <__adddf3+0x138>
 8008fd6:	bf00      	nop

08008fd8 <__aeabi_ul2d>:
 8008fd8:	ea50 0201 	orrs.w	r2, r0, r1
 8008fdc:	bf08      	it	eq
 8008fde:	4770      	bxeq	lr
 8008fe0:	b530      	push	{r4, r5, lr}
 8008fe2:	f04f 0500 	mov.w	r5, #0
 8008fe6:	e00a      	b.n	8008ffe <__aeabi_l2d+0x16>

08008fe8 <__aeabi_l2d>:
 8008fe8:	ea50 0201 	orrs.w	r2, r0, r1
 8008fec:	bf08      	it	eq
 8008fee:	4770      	bxeq	lr
 8008ff0:	b530      	push	{r4, r5, lr}
 8008ff2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008ff6:	d502      	bpl.n	8008ffe <__aeabi_l2d+0x16>
 8008ff8:	4240      	negs	r0, r0
 8008ffa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ffe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009002:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009006:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800900a:	f43f aed8 	beq.w	8008dbe <__adddf3+0xe6>
 800900e:	f04f 0203 	mov.w	r2, #3
 8009012:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009016:	bf18      	it	ne
 8009018:	3203      	addne	r2, #3
 800901a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800901e:	bf18      	it	ne
 8009020:	3203      	addne	r2, #3
 8009022:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8009026:	f1c2 0320 	rsb	r3, r2, #32
 800902a:	fa00 fc03 	lsl.w	ip, r0, r3
 800902e:	fa20 f002 	lsr.w	r0, r0, r2
 8009032:	fa01 fe03 	lsl.w	lr, r1, r3
 8009036:	ea40 000e 	orr.w	r0, r0, lr
 800903a:	fa21 f102 	lsr.w	r1, r1, r2
 800903e:	4414      	add	r4, r2
 8009040:	e6bd      	b.n	8008dbe <__adddf3+0xe6>
 8009042:	bf00      	nop

08009044 <ADC_IRQHandler>:
 8009044:	e7fe      	b.n	8009044 <ADC_IRQHandler>

08009046 <memcmp>:
 8009046:	b510      	push	{r4, lr}
 8009048:	3901      	subs	r1, #1
 800904a:	4402      	add	r2, r0
 800904c:	4290      	cmp	r0, r2
 800904e:	d101      	bne.n	8009054 <memcmp+0xe>
 8009050:	2000      	movs	r0, #0
 8009052:	e005      	b.n	8009060 <memcmp+0x1a>
 8009054:	7803      	ldrb	r3, [r0, #0]
 8009056:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800905a:	42a3      	cmp	r3, r4
 800905c:	d001      	beq.n	8009062 <memcmp+0x1c>
 800905e:	1b18      	subs	r0, r3, r4
 8009060:	bd10      	pop	{r4, pc}
 8009062:	3001      	adds	r0, #1
 8009064:	e7f2      	b.n	800904c <memcmp+0x6>

08009066 <memcpy>:
 8009066:	b510      	push	{r4, lr}
 8009068:	1e43      	subs	r3, r0, #1
 800906a:	440a      	add	r2, r1
 800906c:	4291      	cmp	r1, r2
 800906e:	d100      	bne.n	8009072 <memcpy+0xc>
 8009070:	bd10      	pop	{r4, pc}
 8009072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800907a:	e7f7      	b.n	800906c <memcpy+0x6>

0800907c <LightSet::FullOn()>:
 800907c:	4770      	bx	lr

0800907e <DisplayHandler::~DisplayHandler()>:
 800907e:	4770      	bx	lr

08009080 <LightSet64with4::~LightSet64with4()>:
 8009080:	4770      	bx	lr

08009082 <LightSet64with4::Start(unsigned int)>:
 8009082:	291f      	cmp	r1, #31
 8009084:	460b      	mov	r3, r1
 8009086:	d805      	bhi.n	8009094 <LightSet64with4::Start(unsigned int)+0x12>
 8009088:	6842      	ldr	r2, [r0, #4]
 800908a:	b11a      	cbz	r2, 8009094 <LightSet64with4::Start(unsigned int)+0x12>
 800908c:	6813      	ldr	r3, [r2, #0]
 800908e:	4610      	mov	r0, r2
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	4718      	bx	r3
 8009094:	6880      	ldr	r0, [r0, #8]
 8009096:	b120      	cbz	r0, 80090a2 <LightSet64with4::Start(unsigned int)+0x20>
 8009098:	6802      	ldr	r2, [r0, #0]
 800909a:	f003 0103 	and.w	r1, r3, #3
 800909e:	6892      	ldr	r2, [r2, #8]
 80090a0:	4710      	bx	r2
 80090a2:	4770      	bx	lr

080090a4 <LightSet64with4::Stop(unsigned int)>:
 80090a4:	293f      	cmp	r1, #63	; 0x3f
 80090a6:	460b      	mov	r3, r1
 80090a8:	d805      	bhi.n	80090b6 <LightSet64with4::Stop(unsigned int)+0x12>
 80090aa:	6842      	ldr	r2, [r0, #4]
 80090ac:	b11a      	cbz	r2, 80090b6 <LightSet64with4::Stop(unsigned int)+0x12>
 80090ae:	6813      	ldr	r3, [r2, #0]
 80090b0:	4610      	mov	r0, r2
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	4718      	bx	r3
 80090b6:	6880      	ldr	r0, [r0, #8]
 80090b8:	b120      	cbz	r0, 80090c4 <LightSet64with4::Stop(unsigned int)+0x20>
 80090ba:	6802      	ldr	r2, [r0, #0]
 80090bc:	f003 0103 	and.w	r1, r3, #3
 80090c0:	68d2      	ldr	r2, [r2, #12]
 80090c2:	4710      	bx	r2
 80090c4:	4770      	bx	lr

080090c6 <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)>:
 80090c6:	293f      	cmp	r1, #63	; 0x3f
 80090c8:	b4f0      	push	{r4, r5, r6, r7}
 80090ca:	460c      	mov	r4, r1
 80090cc:	4615      	mov	r5, r2
 80090ce:	461e      	mov	r6, r3
 80090d0:	d807      	bhi.n	80090e2 <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 80090d2:	6847      	ldr	r7, [r0, #4]
 80090d4:	b12f      	cbz	r7, 80090e2 <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 80090d6:	6838      	ldr	r0, [r7, #0]
 80090d8:	6904      	ldr	r4, [r0, #16]
 80090da:	4638      	mov	r0, r7
 80090dc:	46a4      	mov	ip, r4
 80090de:	bcf0      	pop	{r4, r5, r6, r7}
 80090e0:	4760      	bx	ip
 80090e2:	6880      	ldr	r0, [r0, #8]
 80090e4:	b138      	cbz	r0, 80090f6 <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)+0x30>
 80090e6:	6803      	ldr	r3, [r0, #0]
 80090e8:	691f      	ldr	r7, [r3, #16]
 80090ea:	462a      	mov	r2, r5
 80090ec:	4633      	mov	r3, r6
 80090ee:	f004 0103 	and.w	r1, r4, #3
 80090f2:	46bc      	mov	ip, r7
 80090f4:	e7f3      	b.n	80090de <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)+0x18>
 80090f6:	bcf0      	pop	{r4, r5, r6, r7}
 80090f8:	4770      	bx	lr

080090fa <LightSet64with4::Blackout(bool)>:
 80090fa:	b570      	push	{r4, r5, r6, lr}
 80090fc:	4604      	mov	r4, r0
 80090fe:	6840      	ldr	r0, [r0, #4]
 8009100:	460d      	mov	r5, r1
 8009102:	b110      	cbz	r0, 800910a <LightSet64with4::Blackout(bool)+0x10>
 8009104:	6803      	ldr	r3, [r0, #0]
 8009106:	695b      	ldr	r3, [r3, #20]
 8009108:	4798      	blx	r3
 800910a:	68a0      	ldr	r0, [r4, #8]
 800910c:	b128      	cbz	r0, 800911a <LightSet64with4::Blackout(bool)+0x20>
 800910e:	6803      	ldr	r3, [r0, #0]
 8009110:	4629      	mov	r1, r5
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009118:	4718      	bx	r3
 800911a:	bd70      	pop	{r4, r5, r6, pc}

0800911c <LightSet64with4::Print()>:
 800911c:	b510      	push	{r4, lr}
 800911e:	4604      	mov	r4, r0
 8009120:	6840      	ldr	r0, [r0, #4]
 8009122:	b110      	cbz	r0, 800912a <LightSet64with4::Print()+0xe>
 8009124:	6803      	ldr	r3, [r0, #0]
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	4798      	blx	r3
 800912a:	68a0      	ldr	r0, [r4, #8]
 800912c:	b120      	cbz	r0, 8009138 <LightSet64with4::Print()+0x1c>
 800912e:	6803      	ldr	r3, [r0, #0]
 8009130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009134:	69db      	ldr	r3, [r3, #28]
 8009136:	4718      	bx	r3
 8009138:	bd10      	pop	{r4, pc}

0800913a <LightSet64with4::SetDmxStartAddress(unsigned short)>:
 800913a:	2000      	movs	r0, #0
 800913c:	4770      	bx	lr

0800913e <LightSet64with4::GetDmxStartAddress()>:
 800913e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009142:	4770      	bx	lr

08009144 <LightSet64with4::GetDmxFootprint()>:
 8009144:	2000      	movs	r0, #0
 8009146:	4770      	bx	lr

08009148 <LightSet64with4::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8009148:	2000      	movs	r0, #0
 800914a:	4770      	bx	lr

0800914c <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 800914c:	4770      	bx	lr

0800914e <PixelDmxStartStop::~PixelDmxStartStop()>:
 800914e:	4770      	bx	lr

08009150 <PixelDmxStartStop::Start()>:
 8009150:	4b02      	ldr	r3, [pc, #8]	; (800915c <PixelDmxStartStop::Start()+0xc>)
 8009152:	2204      	movs	r2, #4
 8009154:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40020000 	andmi	r0, r2, r0

08009160 <PixelDmxStartStop::Stop()>:
 8009160:	4b02      	ldr	r3, [pc, #8]	; (800916c <PixelDmxStartStop::Stop()+0xc>)
 8009162:	2204      	movs	r2, #4
 8009164:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	40020000 	andmi	r0, r2, r0

08009170 <dmxconfigudp::atoi(char const*, unsigned int)>:
 8009170:	b530      	push	{r4, r5, lr}
 8009172:	4401      	add	r1, r0
 8009174:	2300      	movs	r3, #0
 8009176:	250a      	movs	r5, #10
 8009178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800917c:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8009180:	2c09      	cmp	r4, #9
 8009182:	d805      	bhi.n	8009190 <dmxconfigudp::atoi(char const*, unsigned int)+0x20>
 8009184:	fb05 2303 	mla	r3, r5, r3, r2
 8009188:	4281      	cmp	r1, r0
 800918a:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 800918e:	d1f3      	bne.n	8009178 <dmxconfigudp::atoi(char const*, unsigned int)+0x8>
 8009190:	4618      	mov	r0, r3
 8009192:	bd30      	pop	{r4, r5, pc}

08009194 <RDMNetDevice::CopyUID(unsigned char*)>:
 8009194:	460b      	mov	r3, r1
 8009196:	2206      	movs	r2, #6
 8009198:	1d41      	adds	r1, r0, #5
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff bf63 	b.w	8009066 <memcpy>

080091a0 <non-virtual thunk to RDMNetDevice::CopyUID(unsigned char*)>:
 80091a0:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 80091a4:	e7f6      	b.n	8009194 <RDMNetDevice::CopyUID(unsigned char*)>
	...

080091a8 <RDMNetDevice::CopyCID(unsigned char*)>:
 80091a8:	4608      	mov	r0, r1
 80091aa:	2210      	movs	r2, #16
 80091ac:	4901      	ldr	r1, [pc, #4]	; (80091b4 <RDMNetDevice::CopyCID(unsigned char*)+0xc>)
 80091ae:	f7ff bf5a 	b.w	8009066 <memcpy>
 80091b2:	bf00      	nop
 80091b4:	200007fd 	strdcs	r0, [r0], -sp

080091b8 <non-virtual thunk to RDMNetDevice::CopyCID(unsigned char*)>:
 80091b8:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 80091bc:	e7f4      	b.n	80091a8 <RDMNetDevice::CopyCID(unsigned char*)>
 80091be:	bf00      	nop

080091c0 <DisplayHandler::~DisplayHandler()>:
 80091c0:	b510      	push	{r4, lr}
 80091c2:	4604      	mov	r4, r0
 80091c4:	f00e ffb0 	bl	8018128 <operator delete(void*)>
 80091c8:	4620      	mov	r0, r4
 80091ca:	bd10      	pop	{r4, pc}

080091cc <LightSet64with4::~LightSet64with4()>:
 80091cc:	b510      	push	{r4, lr}
 80091ce:	4604      	mov	r4, r0
 80091d0:	f00e ffaa 	bl	8018128 <operator delete(void*)>
 80091d4:	4620      	mov	r0, r4
 80091d6:	bd10      	pop	{r4, pc}

080091d8 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 80091d8:	b510      	push	{r4, lr}
 80091da:	4604      	mov	r4, r0
 80091dc:	f00e ffa4 	bl	8018128 <operator delete(void*)>
 80091e0:	4620      	mov	r0, r4
 80091e2:	bd10      	pop	{r4, pc}

080091e4 <PixelDmxStartStop::~PixelDmxStartStop()>:
 80091e4:	b510      	push	{r4, lr}
 80091e6:	4604      	mov	r4, r0
 80091e8:	f00e ff9e 	bl	8018128 <operator delete(void*)>
 80091ec:	4620      	mov	r0, r4
 80091ee:	bd10      	pop	{r4, pc}

080091f0 <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 80091f0:	b510      	push	{r4, lr}
 80091f2:	4c03      	ldr	r4, [pc, #12]	; (8009200 <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)+0x10>)
 80091f4:	30d0      	adds	r0, #208	; 0xd0
 80091f6:	4622      	mov	r2, r4
 80091f8:	f007 fb50 	bl	801089c <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 80091fc:	4620      	mov	r0, r4
 80091fe:	bd10      	pop	{r4, pc}
 8009200:	200006fc 	strdcs	r0, [r0], -ip

08009204 <non-virtual thunk to RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 8009204:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 8009208:	e7f2      	b.n	80091f0 <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>
 800920a:	bf00      	nop

0800920c <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 800920c:	b110      	cbz	r0, 8009214 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 800920e:	6803      	ldr	r3, [r0, #0]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	4718      	bx	r3
 8009214:	4770      	bx	lr

08009216 <Display::PutChar(int) [clone .isra.0]>:
 8009216:	b110      	cbz	r0, 800921e <Display::PutChar(int) [clone .isra.0]+0x8>
 8009218:	6803      	ldr	r3, [r0, #0]
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	4718      	bx	r3
 800921e:	4770      	bx	lr

08009220 <DisplayHandler::Print(unsigned int)>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	7903      	ldrb	r3, [r0, #4]
 8009224:	b1f3      	cbz	r3, 8009264 <DisplayHandler::Print(unsigned int)+0x44>
 8009226:	2904      	cmp	r1, #4
 8009228:	bf98      	it	ls
 800922a:	4b0f      	ldrls	r3, [pc, #60]	; (8009268 <DisplayHandler::Print(unsigned int)+0x48>)
 800922c:	4d0f      	ldr	r5, [pc, #60]	; (800926c <DisplayHandler::Print(unsigned int)+0x4c>)
 800922e:	bf98      	it	ls
 8009230:	5c5c      	ldrbls	r4, [r3, r1]
 8009232:	682b      	ldr	r3, [r5, #0]
 8009234:	6998      	ldr	r0, [r3, #24]
 8009236:	bf88      	it	hi
 8009238:	2455      	movhi	r4, #85	; 0x55
 800923a:	b178      	cbz	r0, 800925c <DisplayHandler::Print(unsigned int)+0x3c>
 800923c:	7901      	ldrb	r1, [r0, #4]
 800923e:	3901      	subs	r1, #1
 8009240:	b2c9      	uxtb	r1, r1
 8009242:	b168      	cbz	r0, 8009260 <DisplayHandler::Print(unsigned int)+0x40>
 8009244:	7942      	ldrb	r2, [r0, #5]
 8009246:	3a01      	subs	r2, #1
 8009248:	b2d2      	uxtb	r2, r2
 800924a:	f7ff ffdf 	bl	800920c <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 800924e:	682b      	ldr	r3, [r5, #0]
 8009250:	4621      	mov	r1, r4
 8009252:	6998      	ldr	r0, [r3, #24]
 8009254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009258:	f7ff bfdd 	b.w	8009216 <Display::PutChar(int) [clone .isra.0]>
 800925c:	4601      	mov	r1, r0
 800925e:	e7ee      	b.n	800923e <DisplayHandler::Print(unsigned int)+0x1e>
 8009260:	4602      	mov	r2, r0
 8009262:	e7f0      	b.n	8009246 <DisplayHandler::Print(unsigned int)+0x26>
 8009264:	bd38      	pop	{r3, r4, r5, pc}
 8009266:	bf00      	nop
 8009268:	0801a998 	stmdaeq	r1, {r3, r4, r7, r8, fp, sp, pc}
 800926c:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0

08009270 <RDMNetDevice::~RDMNetDevice()>:
 8009270:	b510      	push	{r4, lr}
 8009272:	4b06      	ldr	r3, [pc, #24]	; (800928c <RDMNetDevice::~RDMNetDevice()+0x1c>)
 8009274:	4604      	mov	r4, r0
 8009276:	f840 3b8c 	str.w	r3, [r0], #140
 800927a:	f006 fdc1 	bl	800fe00 <RDMSubDevices::~RDMSubDevices()>
 800927e:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8009282:	f006 fd9d 	bl	800fdc0 <RDMSensors::~RDMSensors()>
 8009286:	4620      	mov	r0, r4
 8009288:	bd10      	pop	{r4, pc}
 800928a:	bf00      	nop
 800928c:	0801c1b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, lr, pc}

08009290 <non-virtual thunk to RDMNetDevice::~RDMNetDevice()>:
 8009290:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 8009294:	e7ec      	b.n	8009270 <RDMNetDevice::~RDMNetDevice()>
 8009296:	bf00      	nop

08009298 <RDMNetDevice::~RDMNetDevice()>:
 8009298:	b510      	push	{r4, lr}
 800929a:	4604      	mov	r4, r0
 800929c:	f7ff ffe8 	bl	8009270 <RDMNetDevice::~RDMNetDevice()>
 80092a0:	4620      	mov	r0, r4
 80092a2:	f00e ff41 	bl	8018128 <operator delete(void*)>
 80092a6:	4620      	mov	r0, r4
 80092a8:	bd10      	pop	{r4, pc}

080092aa <non-virtual thunk to RDMNetDevice::~RDMNetDevice()>:
 80092aa:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 80092ae:	e7f3      	b.n	8009298 <RDMNetDevice::~RDMNetDevice()>

080092b0 <Display::ClearLine(unsigned char)>:
 80092b0:	6980      	ldr	r0, [r0, #24]
 80092b2:	b110      	cbz	r0, 80092ba <Display::ClearLine(unsigned char)+0xa>
 80092b4:	6803      	ldr	r3, [r0, #0]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	4718      	bx	r3
 80092ba:	4770      	bx	lr

080092bc <Display::Printf(unsigned char, char const*, ...)>:
 80092bc:	b40c      	push	{r2, r3}
 80092be:	b570      	push	{r4, r5, r6, lr}
 80092c0:	6984      	ldr	r4, [r0, #24]
 80092c2:	b08a      	sub	sp, #40	; 0x28
 80092c4:	4605      	mov	r5, r0
 80092c6:	460e      	mov	r6, r1
 80092c8:	b174      	cbz	r4, 80092e8 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 80092ca:	ab0f      	add	r3, sp, #60	; 0x3c
 80092cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	2120      	movs	r1, #32
 80092d2:	a802      	add	r0, sp, #8
 80092d4:	f001 f92c 	bl	800a530 <vsnprintf>
 80092d8:	4604      	mov	r4, r0
 80092da:	69a8      	ldr	r0, [r5, #24]
 80092dc:	6803      	ldr	r3, [r0, #0]
 80092de:	aa02      	add	r2, sp, #8
 80092e0:	69dd      	ldr	r5, [r3, #28]
 80092e2:	4631      	mov	r1, r6
 80092e4:	b2a3      	uxth	r3, r4
 80092e6:	47a8      	blx	r5
 80092e8:	4620      	mov	r0, r4
 80092ea:	b00a      	add	sp, #40	; 0x28
 80092ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092f0:	b002      	add	sp, #8
 80092f2:	4770      	bx	lr

080092f4 <Display::TextStatus(char const*)>:
 80092f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80092f8:	4604      	mov	r4, r0
 80092fa:	6980      	ldr	r0, [r0, #24]
 80092fc:	460d      	mov	r5, r1
 80092fe:	b360      	cbz	r0, 800935a <Display::TextStatus(char const*)+0x66>
 8009300:	7946      	ldrb	r6, [r0, #5]
 8009302:	f890 8004 	ldrb.w	r8, [r0, #4]
 8009306:	1e72      	subs	r2, r6, #1
 8009308:	b2d2      	uxtb	r2, r2
 800930a:	2100      	movs	r1, #0
 800930c:	9201      	str	r2, [sp, #4]
 800930e:	f7ff ff7d 	bl	800920c <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8009312:	2700      	movs	r7, #0
 8009314:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009318:	45b8      	cmp	r8, r7
 800931a:	9a01      	ldr	r2, [sp, #4]
 800931c:	69a0      	ldr	r0, [r4, #24]
 800931e:	d816      	bhi.n	800934e <Display::TextStatus(char const*)+0x5a>
 8009320:	2100      	movs	r1, #0
 8009322:	f7ff ff73 	bl	800920c <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8009326:	69a0      	ldr	r0, [r4, #24]
 8009328:	b1b8      	cbz	r0, 800935a <Display::TextStatus(char const*)+0x66>
 800932a:	7901      	ldrb	r1, [r0, #4]
 800932c:	2300      	movs	r3, #0
 800932e:	5cea      	ldrb	r2, [r5, r3]
 8009330:	b11a      	cbz	r2, 800933a <Display::TextStatus(char const*)+0x46>
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	4299      	cmp	r1, r3
 8009336:	4613      	mov	r3, r2
 8009338:	dcf9      	bgt.n	800932e <Display::TextStatus(char const*)+0x3a>
 800933a:	6802      	ldr	r2, [r0, #0]
 800933c:	69d4      	ldr	r4, [r2, #28]
 800933e:	b2db      	uxtb	r3, r3
 8009340:	462a      	mov	r2, r5
 8009342:	4631      	mov	r1, r6
 8009344:	46a4      	mov	ip, r4
 8009346:	b002      	add	sp, #8
 8009348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800934c:	4760      	bx	ip
 800934e:	2120      	movs	r1, #32
 8009350:	9201      	str	r2, [sp, #4]
 8009352:	3701      	adds	r7, #1
 8009354:	f7ff ff5f 	bl	8009216 <Display::PutChar(int) [clone .isra.0]>
 8009358:	e7de      	b.n	8009318 <Display::TextStatus(char const*)+0x24>
 800935a:	b002      	add	sp, #8
 800935c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009360 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 8009360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009362:	4605      	mov	r5, r0
 8009364:	461e      	mov	r6, r3
 8009366:	460f      	mov	r7, r1
 8009368:	4614      	mov	r4, r2
 800936a:	f7ff ffc3 	bl	80092f4 <Display::TextStatus(char const*)>
 800936e:	7c6b      	ldrb	r3, [r5, #17]
 8009370:	b19b      	cbz	r3, 800939a <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 8009372:	43e2      	mvns	r2, r4
 8009374:	2312      	movs	r3, #18
 8009376:	7a28      	ldrb	r0, [r5, #8]
 8009378:	f88d 3004 	strb.w	r3, [sp, #4]
 800937c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8009380:	f88d 3005 	strb.w	r3, [sp, #5]
 8009384:	f88d 2006 	strb.w	r2, [sp, #6]
 8009388:	f010 fc20 	bl	8019bcc <gd32_i2c_set_address>
 800938c:	68e8      	ldr	r0, [r5, #12]
 800938e:	f010 fc15 	bl	8019bbc <gd32_i2c_set_baudrate>
 8009392:	2103      	movs	r1, #3
 8009394:	a801      	add	r0, sp, #4
 8009396:	f010 fc1f 	bl	8019bd8 <gd32_i2c_write>
 800939a:	1c73      	adds	r3, r6, #1
 800939c:	d006      	beq.n	80093ac <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 800939e:	4639      	mov	r1, r7
 80093a0:	4630      	mov	r0, r6
 80093a2:	b003      	add	sp, #12
 80093a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80093a8:	f00e bd38 	b.w	8017e1c <console_status>
 80093ac:	b003      	add	sp, #12
 80093ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093b0 <Display::SetSleep(bool)>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	4604      	mov	r4, r0
 80093b4:	6980      	ldr	r0, [r0, #24]
 80093b6:	460d      	mov	r5, r1
 80093b8:	b138      	cbz	r0, 80093ca <Display::SetSleep(bool)+0x1a>
 80093ba:	6803      	ldr	r3, [r0, #0]
 80093bc:	7421      	strb	r1, [r4, #16]
 80093be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c0:	4798      	blx	r3
 80093c2:	b915      	cbnz	r5, 80093ca <Display::SetSleep(bool)+0x1a>
 80093c4:	4b01      	ldr	r3, [pc, #4]	; (80093cc <Display::SetSleep(bool)+0x1c>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6063      	str	r3, [r4, #4]
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4

080093d0 <display::timeout::gpio_init()>:
 80093d0:	b510      	push	{r4, lr}
 80093d2:	f640 4002 	movw	r0, #3074	; 0xc02
 80093d6:	f00f fef7 	bl	80191c8 <rcu_periph_clock_enable>
 80093da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093de:	4803      	ldr	r0, [pc, #12]	; (80093ec <display::timeout::gpio_init()+0x1c>)
 80093e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093e4:	2201      	movs	r2, #1
 80093e6:	2100      	movs	r1, #0
 80093e8:	f00f be72 	b.w	80190d0 <gpio_mode_set>
 80093ec:	40020800 	andmi	r0, r2, r0, lsl #16

080093f0 <display::timeout::gpio_renew()>:
 80093f0:	4b03      	ldr	r3, [pc, #12]	; (8009400 <display::timeout::gpio_renew()+0x10>)
 80093f2:	f8d3 0810 	ldr.w	r0, [r3, #2064]	; 0x810
 80093f6:	f480 5000 	eor.w	r0, r0, #8192	; 0x2000
 80093fa:	f3c0 3040 	ubfx	r0, r0, #13, #1
 80093fe:	4770      	bx	lr
 8009400:	40020000 	andmi	r0, r2, r0

08009404 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8009404:	2905      	cmp	r1, #5
 8009406:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800940a:	4606      	mov	r6, r0
 800940c:	460f      	mov	r7, r1
 800940e:	dc6e      	bgt.n	80094ee <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xea>
 8009410:	4b38      	ldr	r3, [pc, #224]	; (80094f4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf0>)
 8009412:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80094fc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf8>
 8009416:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8009500 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xfc>
 800941a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8009504 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x100>
 800941e:	6019      	str	r1, [r3, #0]
 8009420:	2400      	movs	r4, #0
 8009422:	2f05      	cmp	r7, #5
 8009424:	d80a      	bhi.n	800943c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8009426:	e8df f007 	tbb	[pc, r7]
 800942a:	1c120339 	ldcne	3, cr0, [r2], {57}	; 0x39
 800942e:	23002d25 	movwcs	r2, #3365	; 0xd25
 8009432:	2264      	movs	r2, #100	; 0x64
 8009434:	4621      	mov	r1, r4
 8009436:	4630      	mov	r0, r6
 8009438:	f009 fbb8 	bl	8012bac <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 800943c:	3401      	adds	r4, #1
 800943e:	2c10      	cmp	r4, #16
 8009440:	f108 0820 	add.w	r8, r8, #32
 8009444:	d1ed      	bne.n	8009422 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x1e>
 8009446:	2001      	movs	r0, #1
 8009448:	b004      	add	sp, #16
 800944a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800944e:	2364      	movs	r3, #100	; 0x64
 8009450:	2200      	movs	r2, #0
 8009452:	e9cd 3200 	strd	r3, r2, [sp]
 8009456:	4621      	mov	r1, r4
 8009458:	4b27      	ldr	r3, [pc, #156]	; (80094f8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf4>)
 800945a:	4630      	mov	r0, r6
 800945c:	f009 fbbc 	bl	8012bd8 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8009460:	e7ec      	b.n	800943c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8009462:	2300      	movs	r3, #0
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	4a24      	ldr	r2, [pc, #144]	; (80094f8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf4>)
 8009468:	2364      	movs	r3, #100	; 0x64
 800946a:	4621      	mov	r1, r4
 800946c:	4630      	mov	r0, r6
 800946e:	f009 fbcf 	bl	8012c10 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8009472:	e7e3      	b.n	800943c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8009474:	2364      	movs	r3, #100	; 0x64
 8009476:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800947a:	4621      	mov	r1, r4
 800947c:	4630      	mov	r0, r6
 800947e:	f009 fbe1 	bl	8012c44 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8009482:	e7db      	b.n	800943c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8009484:	2364      	movs	r3, #100	; 0x64
 8009486:	2200      	movs	r2, #0
 8009488:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800948c:	230a      	movs	r3, #10
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	4621      	mov	r1, r4
 8009492:	4b19      	ldr	r3, [pc, #100]	; (80094f8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf4>)
 8009494:	4630      	mov	r0, r6
 8009496:	f009 fc09 	bl	8012cac <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 800949a:	e7cf      	b.n	800943c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 800949c:	2500      	movs	r5, #0
 800949e:	f8c8 501c 	str.w	r5, [r8, #28]
 80094a2:	f8da 3000 	ldr.w	r3, [sl]
 80094a6:	f8d9 0000 	ldr.w	r0, [r9]
 80094aa:	429d      	cmp	r5, r3
 80094ac:	d30a      	bcc.n	80094c4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc0>
 80094ae:	f8d9 0000 	ldr.w	r0, [r9]
 80094b2:	f00a fa1f 	bl	80138f4 <WS28xxMulti::IsUpdating()>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d1f9      	bne.n	80094ae <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xaa>
 80094ba:	f8d9 0000 	ldr.w	r0, [r9]
 80094be:	f00a f8b3 	bl	8013628 <WS28xxMulti::Update()>
 80094c2:	e7bb      	b.n	800943c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 80094c4:	6803      	ldr	r3, [r0, #0]
 80094c6:	2b07      	cmp	r3, #7
 80094c8:	f04f 0300 	mov.w	r3, #0
 80094cc:	d007      	beq.n	80094de <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xda>
 80094ce:	e9cd 3300 	strd	r3, r3, [sp]
 80094d2:	462a      	mov	r2, r5
 80094d4:	4621      	mov	r1, r4
 80094d6:	f00a fa8d 	bl	80139f4 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 80094da:	3501      	adds	r5, #1
 80094dc:	e7e1      	b.n	80094a2 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x9e>
 80094de:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	462a      	mov	r2, r5
 80094e6:	4621      	mov	r1, r4
 80094e8:	f00a fb06 	bl	8013af8 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 80094ec:	e7f5      	b.n	80094da <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd6>
 80094ee:	2000      	movs	r0, #0
 80094f0:	e7aa      	b.n	8009448 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x44>
 80094f2:	bf00      	nop
 80094f4:	20001278 	andcs	r1, r0, r8, ror r2
 80094f8:	00646464 	rsbeq	r6, r4, r4, ror #8
 80094fc:	20001064 	andcs	r1, r0, r4, rrx
 8009500:	20001270 	andcs	r1, r0, r0, ror r2
 8009504:	2000126c 	andcs	r1, r0, ip, ror #4

08009508 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)>:
 8009508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800950a:	780b      	ldrb	r3, [r1, #0]
 800950c:	2b03      	cmp	r3, #3
 800950e:	4604      	mov	r4, r0
 8009510:	d11e      	bne.n	8009550 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x48>
 8009512:	4b18      	ldr	r3, [pc, #96]	; (8009574 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x6c>)
 8009514:	784d      	ldrb	r5, [r1, #1]
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	4b17      	ldr	r3, [pc, #92]	; (8009578 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x70>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	429d      	cmp	r5, r3
 800951e:	d017      	beq.n	8009550 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x48>
 8009520:	4629      	mov	r1, r5
 8009522:	f7ff ff6f 	bl	8009404 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8009526:	b198      	cbz	r0, 8009550 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x48>
 8009528:	b1a5      	cbz	r5, 8009554 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4c>
 800952a:	6863      	ldr	r3, [r4, #4]
 800952c:	4c13      	ldr	r4, [pc, #76]	; (800957c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x74>)
 800952e:	2200      	movs	r2, #0
 8009530:	605a      	str	r2, [r3, #4]
 8009532:	6820      	ldr	r0, [r4, #0]
 8009534:	2106      	movs	r1, #6
 8009536:	f7ff febb 	bl	80092b0 <Display::ClearLine(unsigned char)>
 800953a:	4628      	mov	r0, r5
 800953c:	6824      	ldr	r4, [r4, #0]
 800953e:	f009 fb29 	bl	8012b94 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8009542:	4a0f      	ldr	r2, [pc, #60]	; (8009580 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x78>)
 8009544:	9500      	str	r5, [sp, #0]
 8009546:	4603      	mov	r3, r0
 8009548:	2106      	movs	r1, #6
 800954a:	4620      	mov	r0, r4
 800954c:	f7ff feb6 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 8009550:	b003      	add	sp, #12
 8009552:	bd30      	pop	{r4, r5, pc}
 8009554:	68a0      	ldr	r0, [r4, #8]
 8009556:	6803      	ldr	r3, [r0, #0]
 8009558:	2101      	movs	r1, #1
 800955a:	695b      	ldr	r3, [r3, #20]
 800955c:	4798      	blx	r3
 800955e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8009562:	605a      	str	r2, [r3, #4]
 8009564:	4b07      	ldr	r3, [pc, #28]	; (8009584 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x7c>)
 8009566:	6818      	ldr	r0, [r3, #0]
 8009568:	b003      	add	sp, #12
 800956a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800956e:	f00c bce7 	b.w	8015f40 <DisplayUdf::Show()>
 8009572:	bf00      	nop
 8009574:	20001274 	andcs	r1, r0, r4, ror r2
 8009578:	20001278 	andcs	r1, r0, r8, ror r2
 800957c:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0
 8009580:	0801a7e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, sp, pc}
 8009584:	2000fc68 	andcs	pc, r0, r8, ror #24

08009588 <Hardware::RebootHandler()>:
 8009588:	b508      	push	{r3, lr}
 800958a:	4b07      	ldr	r3, [pc, #28]	; (80095a8 <Hardware::RebootHandler()+0x20>)
 800958c:	6818      	ldr	r0, [r3, #0]
 800958e:	f00a f8ef 	bl	8013770 <WS28xxMulti::Blackout()>
 8009592:	4b06      	ldr	r3, [pc, #24]	; (80095ac <Hardware::RebootHandler()+0x24>)
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	f008 fa65 	bl	8011a64 <Dmx::Blackout()>
 800959a:	4b05      	ldr	r3, [pc, #20]	; (80095b0 <Hardware::RebootHandler()+0x28>)
 800959c:	6818      	ldr	r0, [r3, #0]
 800959e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80095a2:	f002 bdb1 	b.w	800c108 <ArtNetNode::Stop()>
 80095a6:	bf00      	nop
 80095a8:	20001280 	andcs	r1, r0, r0, lsl #5
 80095ac:	2000105c 	andcs	r1, r0, ip, asr r0
 80095b0:	200006cc 	andcs	r0, r0, ip, asr #13

080095b4 <main>:
 80095b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b8:	f5ad 5d5d 	sub.w	sp, sp, #14144	; 0x3740
 80095bc:	b08f      	sub	sp, #60	; 0x3c
 80095be:	a807      	add	r0, sp, #28
 80095c0:	f00e fce6 	bl	8017f90 <Hardware::Hardware()>
 80095c4:	a8e3      	add	r0, sp, #908	; 0x38c
 80095c6:	f00b facb 	bl	8014b60 <Network::Network()>
 80095ca:	a826      	add	r0, sp, #152	; 0x98
 80095cc:	f00e fc84 	bl	8017ed8 <LedBlink::LedBlink()>
 80095d0:	a894      	add	r0, sp, #592	; 0x250
 80095d2:	f00c fbdd 	bl	8015d90 <DisplayUdf::DisplayUdf()>
 80095d6:	4bbb      	ldr	r3, [pc, #748]	; (80098c4 <main+0x310>)
 80095d8:	4abb      	ldr	r2, [pc, #748]	; (80098c8 <main+0x314>)
 80095da:	49bc      	ldr	r1, [pc, #752]	; (80098cc <main+0x318>)
 80095dc:	a808      	add	r0, sp, #32
 80095de:	f00e fc35 	bl	8017e4c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 80095e2:	a819      	add	r0, sp, #100	; 0x64
 80095e4:	f00d f8e2 	bl	80167ac <ConfigStore::ConfigStore()>
 80095e8:	49b9      	ldr	r1, [pc, #740]	; (80098d0 <main+0x31c>)
 80095ea:	a808      	add	r0, sp, #32
 80095ec:	f00e fc66 	bl	8017ebc <FirmwareVersion::Print(char const*)>
 80095f0:	4bb8      	ldr	r3, [pc, #736]	; (80098d4 <main+0x320>)
 80095f2:	2201      	movs	r2, #1
 80095f4:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 80095f8:	2008      	movs	r0, #8
 80095fa:	f00e fd99 	bl	8018130 <operator new(unsigned int)>
 80095fe:	4bb6      	ldr	r3, [pc, #728]	; (80098d8 <main+0x324>)
 8009600:	6003      	str	r3, [r0, #0]
 8009602:	4bb6      	ldr	r3, [pc, #728]	; (80098dc <main+0x328>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	bf14      	ite	ne
 800960a:	2201      	movne	r2, #1
 800960c:	2200      	moveq	r2, #0
 800960e:	7102      	strb	r2, [r0, #4]
 8009610:	d004      	beq.n	800961c <main+0x68>
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	3b00      	subs	r3, #0
 8009616:	bf18      	it	ne
 8009618:	2301      	movne	r3, #1
 800961a:	7103      	strb	r3, [r0, #4]
 800961c:	49b0      	ldr	r1, [pc, #704]	; (80098e0 <main+0x32c>)
 800961e:	9028      	str	r0, [sp, #160]	; 0xa0
 8009620:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009624:	ab26      	add	r3, sp, #152	; 0x98
 8009626:	a894      	add	r0, sp, #592	; 0x250
 8009628:	2303      	movs	r3, #3
 800962a:	f7ff fe99 	bl	8009360 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800962e:	a811      	add	r0, sp, #68	; 0x44
 8009630:	f00d fab4 	bl	8016b9c <StoreNetwork::StoreNetwork()>
 8009634:	abe3      	add	r3, sp, #908	; 0x38c
 8009636:	aa12      	add	r2, sp, #72	; 0x48
 8009638:	4618      	mov	r0, r3
 800963a:	a911      	add	r1, sp, #68	; 0x44
 800963c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8009640:	f00b fae6 	bl	8014c10 <Network::Init(NetworkParamsStore*)>
 8009644:	a8e3      	add	r0, sp, #908	; 0x38c
 8009646:	f00b fd45 	bl	80150d4 <Network::Print()>
 800964a:	49a6      	ldr	r1, [pc, #664]	; (80098e4 <main+0x330>)
 800964c:	2303      	movs	r3, #3
 800964e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009652:	a894      	add	r0, sp, #592	; 0x250
 8009654:	f7ff fe84 	bl	8009360 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009658:	a809      	add	r0, sp, #36	; 0x24
 800965a:	f00a febd 	bl	80143d8 <MDNS::MDNS()>
 800965e:	2400      	movs	r4, #0
 8009660:	a809      	add	r0, sp, #36	; 0x24
 8009662:	f00a ff79 	bl	8014558 <MDNS::Start()>
 8009666:	4aa0      	ldr	r2, [pc, #640]	; (80098e8 <main+0x334>)
 8009668:	f642 1305 	movw	r3, #10501	; 0x2905
 800966c:	4621      	mov	r1, r4
 800966e:	e9cd 4400 	strd	r4, r4, [sp]
 8009672:	a809      	add	r0, sp, #36	; 0x24
 8009674:	f00b f8de 	bl	8014834 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8009678:	4b9c      	ldr	r3, [pc, #624]	; (80098ec <main+0x338>)
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	2301      	movs	r3, #1
 800967e:	4a9c      	ldr	r2, [pc, #624]	; (80098f0 <main+0x33c>)
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	4621      	mov	r1, r4
 8009684:	2350      	movs	r3, #80	; 0x50
 8009686:	a809      	add	r0, sp, #36	; 0x24
 8009688:	f00b f8d4 	bl	8014834 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 800968c:	a809      	add	r0, sp, #36	; 0x24
 800968e:	f00b fa19 	bl	8014ac4 <MDNS::Print()>
 8009692:	a859      	add	r0, sp, #356	; 0x164
 8009694:	f001 ff6a 	bl	800b56c <HttpDaemon::HttpDaemon()>
 8009698:	a859      	add	r0, sp, #356	; 0x164
 800969a:	f001 ff7b 	bl	800b594 <HttpDaemon::Start()>
 800969e:	2303      	movs	r3, #3
 80096a0:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 80096a4:	4993      	ldr	r1, [pc, #588]	; (80098f4 <main+0x340>)
 80096a6:	a894      	add	r0, sp, #592	; 0x250
 80096a8:	f7ff fe5a 	bl	8009360 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80096ac:	2140      	movs	r1, #64	; 0x40
 80096ae:	a813      	add	r0, sp, #76	; 0x4c
 80096b0:	f00d fcc8 	bl	8017044 <StoreArtNet::StoreArtNet(unsigned int)>
 80096b4:	a913      	add	r1, sp, #76	; 0x4c
 80096b6:	a8c0      	add	r0, sp, #768	; 0x300
 80096b8:	f004 fb3e 	bl	800dd38 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 80096bc:	f50d 60a6 	add.w	r0, sp, #1328	; 0x530
 80096c0:	f002 fc3a 	bl	800bf38 <ArtNet4Node::ArtNet4Node()>
 80096c4:	a8c0      	add	r0, sp, #768	; 0x300
 80096c6:	f004 fb57 	bl	800dd78 <ArtNetParams::Load()>
 80096ca:	b130      	cbz	r0, 80096da <main+0x126>
 80096cc:	a8c0      	add	r0, sp, #768	; 0x300
 80096ce:	f004 ff89 	bl	800e5e4 <ArtNetParams::Dump()>
 80096d2:	2140      	movs	r1, #64	; 0x40
 80096d4:	a8c0      	add	r0, sp, #768	; 0x300
 80096d6:	f004 feef 	bl	800e4b8 <ArtNetParams::Set(unsigned int)>
 80096da:	ab6d      	add	r3, sp, #436	; 0x1b4
 80096dc:	21aa      	movs	r1, #170	; 0xaa
 80096de:	2203      	movs	r2, #3
 80096e0:	e9c3 2100 	strd	r2, r1, [r3]
 80096e4:	2006      	movs	r0, #6
 80096e6:	2200      	movs	r2, #0
 80096e8:	e9c3 0202 	strd	r0, r2, [r3, #8]
 80096ec:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80096f0:	611a      	str	r2, [r3, #16]
 80096f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096f6:	829a      	strh	r2, [r3, #20]
 80096f8:	4a7f      	ldr	r2, [pc, #508]	; (80098f8 <main+0x344>)
 80096fa:	619a      	str	r2, [r3, #24]
 80096fc:	2201      	movs	r2, #1
 80096fe:	6259      	str	r1, [r3, #36]	; 0x24
 8009700:	e9c3 2207 	strd	r2, r2, [r3, #28]
 8009704:	859a      	strh	r2, [r3, #44]	; 0x2c
 8009706:	a815      	add	r0, sp, #84	; 0x54
 8009708:	f00d fde0 	bl	80172cc <StorePixelDmx::StorePixelDmx()>
 800970c:	a915      	add	r1, sp, #84	; 0x54
 800970e:	a885      	add	r0, sp, #532	; 0x214
 8009710:	f008 fc0a 	bl	8011f28 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 8009714:	a885      	add	r0, sp, #532	; 0x214
 8009716:	f008 fc37 	bl	8011f88 <PixelDmxParams::Load()>
 800971a:	b130      	cbz	r0, 800972a <main+0x176>
 800971c:	a885      	add	r0, sp, #532	; 0x214
 800971e:	f008 ff7d 	bl	801261c <PixelDmxParams::Dump()>
 8009722:	a96d      	add	r1, sp, #436	; 0x1b4
 8009724:	a885      	add	r0, sp, #532	; 0x214
 8009726:	f008 ff34 	bl	8012592 <PixelDmxParams::Set(PixelDmxConfiguration*)>
 800972a:	f50d 782a 	add.w	r8, sp, #680	; 0x2a8
 800972e:	a96d      	add	r1, sp, #436	; 0x1b4
 8009730:	4640      	mov	r0, r8
 8009732:	f008 fb11 	bl	8011d58 <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)>
 8009736:	2004      	movs	r0, #4
 8009738:	f00e fcfa 	bl	8018130 <operator new(unsigned int)>
 800973c:	4b6f      	ldr	r3, [pc, #444]	; (80098fc <main+0x348>)
 800973e:	6003      	str	r3, [r0, #0]
 8009740:	4604      	mov	r4, r0
 8009742:	2304      	movs	r3, #4
 8009744:	486e      	ldr	r0, [pc, #440]	; (8009900 <main+0x34c>)
 8009746:	2200      	movs	r2, #0
 8009748:	2101      	movs	r1, #1
 800974a:	f00f fcc1 	bl	80190d0 <gpio_mode_set>
 800974e:	2304      	movs	r3, #4
 8009750:	2202      	movs	r2, #2
 8009752:	486b      	ldr	r0, [pc, #428]	; (8009900 <main+0x34c>)
 8009754:	2100      	movs	r1, #0
 8009756:	f00f fcdb 	bl	8019110 <gpio_output_options_set>
 800975a:	4b5e      	ldr	r3, [pc, #376]	; (80098d4 <main+0x320>)
 800975c:	2204      	movs	r2, #4
 800975e:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 8009762:	f8d8 7020 	ldr.w	r7, [r8, #32]
 8009766:	f8c8 404c 	str.w	r4, [r8, #76]	; 0x4c
 800976a:	f8d8 902c 	ldr.w	r9, [r8, #44]	; 0x2c
 800976e:	2400      	movs	r4, #0
 8009770:	4625      	mov	r5, r4
 8009772:	f20d 5a34 	addw	sl, sp, #1332	; 0x534
 8009776:	42bc      	cmp	r4, r7
 8009778:	f040 82cc 	bne.w	8009d14 <main+0x760>
 800977c:	f89d 9228 	ldrb.w	r9, [sp, #552]	; 0x228
 8009780:	4e60      	ldr	r6, [pc, #384]	; (8009904 <main+0x350>)
 8009782:	4639      	mov	r1, r7
 8009784:	a80a      	add	r0, sp, #40	; 0x28
 8009786:	ab85      	add	r3, sp, #532	; 0x214
 8009788:	f009 f9de 	bl	8012b48 <PixelPatterns::PixelPatterns(unsigned int)>
 800978c:	4649      	mov	r1, r9
 800978e:	a80a      	add	r0, sp, #40	; 0x28
 8009790:	f8c6 9000 	str.w	r9, [r6]
 8009794:	f7ff fe36 	bl	8009404 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8009798:	f89d 5308 	ldrb.w	r5, [sp, #776]	; 0x308
 800979c:	f89d 3309 	ldrb.w	r3, [sp, #777]	; 0x309
 80097a0:	f8bd 4379 	ldrh.w	r4, [sp, #889]	; 0x379
 80097a4:	022d      	lsls	r5, r5, #8
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	f004 0403 	and.w	r4, r4, #3
 80097ac:	f405 45fe 	and.w	r5, r5, #32512	; 0x7f00
 80097b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097b4:	2c01      	cmp	r4, #1
 80097b6:	aac0      	add	r2, sp, #768	; 0x300
 80097b8:	ea45 0503 	orr.w	r5, r5, r3
 80097bc:	f040 82cd 	bne.w	8009d5a <main+0x7a6>
 80097c0:	f892 306b 	ldrb.w	r3, [r2, #107]	; 0x6b
 80097c4:	2140      	movs	r1, #64	; 0x40
 80097c6:	432b      	orrs	r3, r5
 80097c8:	4622      	mov	r2, r4
 80097ca:	f20d 5034 	addw	r0, sp, #1332	; 0x534
 80097ce:	f003 f806 	bl	800c7de <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 80097d2:	f8bd 2379 	ldrh.w	r2, [sp, #889]	; 0x379
 80097d6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80097da:	2a01      	cmp	r2, #1
 80097dc:	abc0      	add	r3, sp, #768	; 0x300
 80097de:	d108      	bne.n	80097f2 <main+0x23e>
 80097e0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80097e4:	2141      	movs	r1, #65	; 0x41
 80097e6:	432b      	orrs	r3, r5
 80097e8:	f20d 5034 	addw	r0, sp, #1332	; 0x534
 80097ec:	f002 fff7 	bl	800c7de <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 80097f0:	3401      	adds	r4, #1
 80097f2:	a80b      	add	r0, sp, #44	; 0x2c
 80097f4:	f00d f93a 	bl	8016a6c <StoreDmxSend::StoreDmxSend()>
 80097f8:	a90b      	add	r1, sp, #44	; 0x2c
 80097fa:	a822      	add	r0, sp, #136	; 0x88
 80097fc:	f007 fcb0 	bl	8011160 <DmxParams::DmxParams(DmxParamsStore*)>
 8009800:	a83e      	add	r0, sp, #248	; 0xf8
 8009802:	f008 f803 	bl	801180c <Dmx::Dmx()>
 8009806:	a822      	add	r0, sp, #136	; 0x88
 8009808:	f007 fcb6 	bl	8011178 <DmxParams::Load()>
 800980c:	b130      	cbz	r0, 800981c <main+0x268>
 800980e:	a822      	add	r0, sp, #136	; 0x88
 8009810:	f007 fe04 	bl	801141c <DmxParams::Dump()>
 8009814:	a93e      	add	r1, sp, #248	; 0xf8
 8009816:	a822      	add	r0, sp, #136	; 0x88
 8009818:	f007 fdd2 	bl	80113c0 <DmxParams::Set(Dmx*)>
 800981c:	ab0c      	add	r3, sp, #48	; 0x30
 800981e:	4a3a      	ldr	r2, [pc, #232]	; (8009908 <main+0x354>)
 8009820:	601a      	str	r2, [r3, #0]
 8009822:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009826:	4658      	mov	r0, fp
 8009828:	f007 fc40 	bl	80110ac <DmxSend::Print()>
 800982c:	2c00      	cmp	r4, #0
 800982e:	f000 8296 	beq.w	8009d5e <main+0x7aa>
 8009832:	2001      	movs	r0, #1
 8009834:	f00e fc7c 	bl	8018130 <operator new(unsigned int)>
 8009838:	4b34      	ldr	r3, [pc, #208]	; (800990c <main+0x358>)
 800983a:	4605      	mov	r5, r0
 800983c:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8009840:	6818      	ldr	r0, [r3, #0]
 8009842:	f00b f9bc 	bl	8014bbe <Network::Begin(unsigned short)>
 8009846:	4b32      	ldr	r3, [pc, #200]	; (8009910 <main+0x35c>)
 8009848:	6018      	str	r0, [r3, #0]
 800984a:	2201      	movs	r2, #1
 800984c:	f50d 6aa6 	add.w	sl, sp, #1328	; 0x530
 8009850:	ab94      	add	r3, sp, #592	; 0x250
 8009852:	e9c3 2414 	strd	r2, r4, [r3, #80]	; 0x50
 8009856:	ab14      	add	r3, sp, #80	; 0x50
 8009858:	f8ca 3020 	str.w	r3, [sl, #32]
 800985c:	6833      	ldr	r3, [r6, #0]
 800985e:	482d      	ldr	r0, [pc, #180]	; (8009914 <main+0x360>)
 8009860:	2b00      	cmp	r3, #0
 8009862:	bf0c      	ite	eq
 8009864:	4641      	moveq	r1, r8
 8009866:	2100      	movne	r1, #0
 8009868:	ab1c      	add	r3, sp, #112	; 0x70
 800986a:	2c00      	cmp	r4, #0
 800986c:	bf14      	ite	ne
 800986e:	465a      	movne	r2, fp
 8009870:	2200      	moveq	r2, #0
 8009872:	e9c3 0100 	strd	r0, r1, [r3]
 8009876:	609a      	str	r2, [r3, #8]
 8009878:	a81c      	add	r0, sp, #112	; 0x70
 800987a:	f7ff fc4f 	bl	800911c <LightSet64with4::Print()>
 800987e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009880:	a81c      	add	r0, sp, #112	; 0x70
 8009882:	4a25      	ldr	r2, [pc, #148]	; (8009918 <main+0x364>)
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	e9c3 0801 	strd	r0, r8, [r3, #4]
 800988a:	4b24      	ldr	r3, [pc, #144]	; (800991c <main+0x368>)
 800988c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8009924 <main+0x370>
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f8ca 0008 	str.w	r0, [sl, #8]
 8009896:	aa1f      	add	r2, sp, #124	; 0x7c
 8009898:	615a      	str	r2, [r3, #20]
 800989a:	4650      	mov	r0, sl
 800989c:	f002 fba4 	bl	800bfe8 <ArtNet4Node::Print()>
 80098a0:	491f      	ldr	r1, [pc, #124]	; (8009920 <main+0x36c>)
 80098a2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80098a6:	2303      	movs	r3, #3
 80098a8:	a894      	add	r0, sp, #592	; 0x250
 80098aa:	f7ff fd59 	bl	8009360 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80098ae:	f8d8 3000 	ldr.w	r3, [r8]
 80098b2:	6818      	ldr	r0, [r3, #0]
 80098b4:	f009 f81a 	bl	80128ec <PixelType::GetType(pixel::Type)>
 80098b8:	9402      	str	r4, [sp, #8]
 80098ba:	ab2c      	add	r3, sp, #176	; 0xb0
 80098bc:	9305      	str	r3, [sp, #20]
 80098be:	f8d8 3000 	ldr.w	r3, [r8]
 80098c2:	e031      	b.n	8009928 <main+0x374>
 80098c4:	0801a7ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, pc}
 80098c8:	0801a7f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, sl, sp, pc}
 80098cc:	0801a99d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, fp, sp, pc}
 80098d0:	0801a804 	stmdaeq	r1, {r2, fp, sp, pc}
 80098d4:	40020000 	andmi	r0, r2, r0
 80098d8:	0801a8e8 	stmdaeq	r1, {r3, r5, r6, r7, fp, sp, pc}
 80098dc:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0
 80098e0:	0801d109 	stmdaeq	r1, {r0, r3, r8, ip, lr, pc}
 80098e4:	0801d0f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, ip, lr, pc}
 80098e8:	0801a844 	stmdaeq	r1, {r2, r6, fp, sp, pc}
 80098ec:	0801a854 	stmdaeq	r1, {r2, r4, r6, fp, sp, pc}
 80098f0:	0801a84d 	stmdaeq	r1, {r0, r2, r3, r6, fp, sp, pc}
 80098f4:	0801bbe1 	stmdaeq	r1, {r0, r5, r6, r7, r8, r9, fp, ip, sp, pc}
 80098f8:	0801a9a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, sp, pc}
 80098fc:	0801a948 	stmdaeq	r1, {r3, r6, r8, fp, sp, pc}
 8009900:	40020800 	andmi	r0, r2, r0, lsl #16
 8009904:	20001278 	andcs	r1, r0, r8, ror r2
 8009908:	0801c548 	stmdaeq	r1, {r3, r6, r8, sl, lr, pc}
 800990c:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 8009910:	20000010 	andcs	r0, r0, r0, lsl r0
 8009914:	0801a8fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, fp, sp, pc}
 8009918:	0801a934 	stmdaeq	r1, {r2, r4, r5, r8, fp, sp, pc}
 800991c:	200006cc 	andcs	r0, r0, ip, asr #13
 8009920:	0801c0b0 	stmdaeq	r1, {r4, r5, r7, lr, pc}
 8009924:	20001280 	andcs	r1, r0, r0, lsl #5
 8009928:	4abb      	ldr	r2, [pc, #748]	; (8009c18 <main+0x664>)
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	2120      	movs	r1, #32
 800992e:	e9cd 0300 	strd	r0, r3, [sp]
 8009932:	463b      	mov	r3, r7
 8009934:	9805      	ldr	r0, [sp, #20]
 8009936:	f000 fde3 	bl	800a500 <snprintf>
 800993a:	ab35      	add	r3, sp, #212	; 0xd4
 800993c:	4ab7      	ldr	r2, [pc, #732]	; (8009c1c <main+0x668>)
 800993e:	9304      	str	r3, [sp, #16]
 8009940:	4618      	mov	r0, r3
 8009942:	2120      	movs	r1, #32
 8009944:	f000 fddc 	bl	800a500 <snprintf>
 8009948:	4604      	mov	r4, r0
 800994a:	202c      	movs	r0, #44	; 0x2c
 800994c:	f00e fbf0 	bl	8018130 <operator new(unsigned int)>
 8009950:	4603      	mov	r3, r0
 8009952:	2200      	movs	r2, #0
 8009954:	6042      	str	r2, [r0, #4]
 8009956:	6282      	str	r2, [r0, #40]	; 0x28
 8009958:	f823 2b08 	strh.w	r2, [r3], #8
 800995c:	9a05      	ldr	r2, [sp, #20]
 800995e:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 8009962:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009966:	b111      	cbz	r1, 800996e <main+0x3ba>
 8009968:	4563      	cmp	r3, ip
 800996a:	f040 81fa 	bne.w	8009d62 <main+0x7ae>
 800996e:	2201      	movs	r2, #1
 8009970:	900d      	str	r0, [sp, #52]	; 0x34
 8009972:	a90d      	add	r1, sp, #52	; 0x34
 8009974:	f20d 4054 	addw	r0, sp, #1108	; 0x454
 8009978:	ab0d      	add	r3, sp, #52	; 0x34
 800997a:	f006 fb65 	bl	8010048 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
 800997e:	f50d 60a4 	add.w	r0, sp, #1312	; 0x520
 8009982:	f006 f8dd 	bl	800fb40 <LLRPDevice::LLRPDevice()>
 8009986:	f20d 4a54 	addw	sl, sp, #1108	; 0x454
 800998a:	4ba5      	ldr	r3, [pc, #660]	; (8009c20 <main+0x66c>)
 800998c:	f8ca 3000 	str.w	r3, [sl]
 8009990:	3324      	adds	r3, #36	; 0x24
 8009992:	f8ca 30cc 	str.w	r3, [sl, #204]	; 0xcc
 8009996:	2100      	movs	r1, #0
 8009998:	f20d 5024 	addw	r0, sp, #1316	; 0x524
 800999c:	f006 fd40 	bl	8010420 <RDMHandler::RDMHandler(bool)>
 80099a0:	4ba0      	ldr	r3, [pc, #640]	; (8009c24 <main+0x670>)
 80099a2:	49a1      	ldr	r1, [pc, #644]	; (8009c28 <main+0x674>)
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	f00e fb63 	bl	8018070 <Hardware::GetUuid(unsigned char*)>
 80099aa:	b2e4      	uxtb	r4, r4
 80099ac:	f89a 3004 	ldrb.w	r3, [sl, #4]
 80099b0:	2c20      	cmp	r4, #32
 80099b2:	bf28      	it	cs
 80099b4:	2420      	movcs	r4, #32
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f000 81d9 	beq.w	8009d6e <main+0x7ba>
 80099bc:	f20d 4b63 	addw	fp, sp, #1123	; 0x463
 80099c0:	9904      	ldr	r1, [sp, #16]
 80099c2:	4622      	mov	r2, r4
 80099c4:	4658      	mov	r0, fp
 80099c6:	f7ff fb4e 	bl	8009066 <memcpy>
 80099ca:	f8da 007c 	ldr.w	r0, [sl, #124]	; 0x7c
 80099ce:	f88a 402f 	strb.w	r4, [sl, #47]	; 0x2f
 80099d2:	b120      	cbz	r0, 80099de <main+0x42a>
 80099d4:	6803      	ldr	r3, [r0, #0]
 80099d6:	4622      	mov	r2, r4
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	4659      	mov	r1, fp
 80099dc:	4798      	blx	r3
 80099de:	f20d 4354 	addw	r3, sp, #1108	; 0x454
 80099e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80099ea:	f240 6201 	movw	r2, #1537	; 0x601
 80099ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80099f2:	f20d 4159 	addw	r1, sp, #1113	; 0x459
 80099f6:	2201      	movs	r2, #1
 80099f8:	f20d 5034 	addw	r0, sp, #1332	; 0x534
 80099fc:	f003 ff95 	bl	800d92a <ArtNetNode::SetRdmUID(unsigned char const*, bool)>
 8009a00:	f20d 4054 	addw	r0, sp, #1108	; 0x454
 8009a04:	f006 fb6e 	bl	80100e4 <RDMDeviceResponder::Init()>
 8009a08:	a817      	add	r0, sp, #92	; 0x5c
 8009a0a:	f00d fb81 	bl	8017110 <StoreRDMDevice::StoreRDMDevice()>
 8009a0e:	a917      	add	r1, sp, #92	; 0x5c
 8009a10:	a879      	add	r0, sp, #484	; 0x1e4
 8009a12:	f006 faa7 	bl	800ff64 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 8009a16:	a879      	add	r0, sp, #484	; 0x1e4
 8009a18:	f006 fab6 	bl	800ff88 <RDMDeviceParams::Load()>
 8009a1c:	b138      	cbz	r0, 8009a2e <main+0x47a>
 8009a1e:	a879      	add	r0, sp, #484	; 0x1e4
 8009a20:	f006 faf4 	bl	801000c <RDMDeviceParams::Dump()>
 8009a24:	f50d 618b 	add.w	r1, sp, #1112	; 0x458
 8009a28:	a879      	add	r0, sp, #484	; 0x1e4
 8009a2a:	f006 fab8 	bl	800ff9e <RDMDeviceParams::Set(RDMDevice*)>
 8009a2e:	f20d 4354 	addw	r3, sp, #1108	; 0x454
 8009a32:	aa18      	add	r2, sp, #96	; 0x60
 8009a34:	67da      	str	r2, [r3, #124]	; 0x7c
 8009a36:	4618      	mov	r0, r3
 8009a38:	f006 f99a 	bl	800fd70 <RDMNetDevice::Print()>
 8009a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a40:	497a      	ldr	r1, [pc, #488]	; (8009c2c <main+0x678>)
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	463a      	mov	r2, r7
 8009a46:	a894      	add	r0, sp, #592	; 0x250
 8009a48:	f00c f9b8 	bl	8015dbc <DisplayUdf::SetTitle(char const*, ...)>
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	4611      	mov	r1, r2
 8009a50:	a894      	add	r0, sp, #592	; 0x250
 8009a52:	f00c f9c6 	bl	8015de2 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009a56:	2206      	movs	r2, #6
 8009a58:	2103      	movs	r1, #3
 8009a5a:	a894      	add	r0, sp, #592	; 0x250
 8009a5c:	f00c f9c1 	bl	8015de2 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009a60:	2203      	movs	r2, #3
 8009a62:	2104      	movs	r1, #4
 8009a64:	a894      	add	r0, sp, #592	; 0x250
 8009a66:	f00c f9bc 	bl	8015de2 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009a6a:	ac6d      	add	r4, sp, #436	; 0x1b4
 8009a6c:	2208      	movs	r2, #8
 8009a6e:	2105      	movs	r1, #5
 8009a70:	a894      	add	r0, sp, #592	; 0x250
 8009a72:	f00c f9b6 	bl	8015de2 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009a76:	2213      	movs	r2, #19
 8009a78:	2106      	movs	r1, #6
 8009a7a:	a894      	add	r0, sp, #592	; 0x250
 8009a7c:	f00c f9b1 	bl	8015de2 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009a80:	6820      	ldr	r0, [r4, #0]
 8009a82:	f008 ff33 	bl	80128ec <PixelType::GetType(pixel::Type)>
 8009a86:	9004      	str	r0, [sp, #16]
 8009a88:	68a0      	ldr	r0, [r4, #8]
 8009a8a:	6867      	ldr	r7, [r4, #4]
 8009a8c:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8009a90:	f008 ff84 	bl	801299c <PixelType::GetMap(pixel::Map)>
 8009a94:	9b04      	ldr	r3, [sp, #16]
 8009a96:	4a66      	ldr	r2, [pc, #408]	; (8009c30 <main+0x67c>)
 8009a98:	9700      	str	r7, [sp, #0]
 8009a9a:	2107      	movs	r1, #7
 8009a9c:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8009aa0:	a894      	add	r0, sp, #592	; 0x250
 8009aa2:	f7ff fc0b 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 8009aa6:	a80e      	add	r0, sp, #56	; 0x38
 8009aa8:	f00c ffaa 	bl	8016a00 <StoreDisplayUdf::StoreDisplayUdf()>
 8009aac:	ab63      	add	r3, sp, #396	; 0x18c
 8009aae:	a90e      	add	r1, sp, #56	; 0x38
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	f00c fb16 	bl	80160e4 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8009ab8:	9804      	ldr	r0, [sp, #16]
 8009aba:	f00c fb20 	bl	80160fe <DisplayUdfParams::Load()>
 8009abe:	b130      	cbz	r0, 8009ace <main+0x51a>
 8009ac0:	9804      	ldr	r0, [sp, #16]
 8009ac2:	a994      	add	r1, sp, #592	; 0x250
 8009ac4:	f00c fc55 	bl	8016372 <DisplayUdfParams::Set(DisplayUdf*)>
 8009ac8:	9804      	ldr	r0, [sp, #16]
 8009aca:	f00c fc85 	bl	80163d8 <DisplayUdfParams::Dump()>
 8009ace:	f20d 5134 	addw	r1, sp, #1332	; 0x534
 8009ad2:	a894      	add	r0, sp, #592	; 0x250
 8009ad4:	f00c fd60 	bl	8016598 <DisplayUdf::Show(ArtNetNode*)>
 8009ad8:	f1b9 0f00 	cmp.w	r9, #0
 8009adc:	d00e      	beq.n	8009afc <main+0x548>
 8009ade:	2106      	movs	r1, #6
 8009ae0:	a894      	add	r0, sp, #592	; 0x250
 8009ae2:	f7ff fbe5 	bl	80092b0 <Display::ClearLine(unsigned char)>
 8009ae6:	4648      	mov	r0, r9
 8009ae8:	f009 f854 	bl	8012b94 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8009aec:	4a51      	ldr	r2, [pc, #324]	; (8009c34 <main+0x680>)
 8009aee:	f8cd 9000 	str.w	r9, [sp]
 8009af2:	4603      	mov	r3, r0
 8009af4:	2106      	movs	r1, #6
 8009af6:	a894      	add	r0, sp, #592	; 0x250
 8009af8:	f7ff fbe0 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 8009afc:	f89d 3f4e 	ldrb.w	r3, [sp, #3918]	; 0xf4e
 8009b00:	2203      	movs	r2, #3
 8009b02:	2100      	movs	r1, #0
 8009b04:	a847      	add	r0, sp, #284	; 0x11c
 8009b06:	f000 ffeb 	bl	800aae0 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8009b0a:	a80f      	add	r0, sp, #60	; 0x3c
 8009b0c:	f00d f87e 	bl	8016c0c <StoreRemoteConfig::StoreRemoteConfig()>
 8009b10:	ab50      	add	r3, sp, #320	; 0x140
 8009b12:	a90f      	add	r1, sp, #60	; 0x3c
 8009b14:	4618      	mov	r0, r3
 8009b16:	9304      	str	r3, [sp, #16]
 8009b18:	f001 fb12 	bl	800b140 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8009b1c:	9804      	ldr	r0, [sp, #16]
 8009b1e:	f001 fb19 	bl	800b154 <RemoteConfigParams::Load()>
 8009b22:	b130      	cbz	r0, 8009b32 <main+0x57e>
 8009b24:	9804      	ldr	r0, [sp, #16]
 8009b26:	f001 fc5c 	bl	800b3e2 <RemoteConfigParams::Dump()>
 8009b2a:	9804      	ldr	r0, [sp, #16]
 8009b2c:	a947      	add	r1, sp, #284	; 0x11c
 8009b2e:	f001 fc38 	bl	800b3a2 <RemoteConfigParams::Set(RemoteConfig*)>
 8009b32:	a819      	add	r0, sp, #100	; 0x64
 8009b34:	f00c fee2 	bl	80168fc <ConfigStore::Flash()>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d1fa      	bne.n	8009b32 <main+0x57e>
 8009b3c:	4c3e      	ldr	r4, [pc, #248]	; (8009c38 <main+0x684>)
 8009b3e:	493f      	ldr	r1, [pc, #252]	; (8009c3c <main+0x688>)
 8009b40:	2303      	movs	r3, #3
 8009b42:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8009b46:	a894      	add	r0, sp, #592	; 0x250
 8009b48:	f7ff fc0a 	bl	8009360 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009b4c:	f241 51c1 	movw	r1, #5569	; 0x15c1
 8009b50:	6820      	ldr	r0, [r4, #0]
 8009b52:	f00b f834 	bl	8014bbe <Network::Begin(unsigned short)>
 8009b56:	4b3a      	ldr	r3, [pc, #232]	; (8009c40 <main+0x68c>)
 8009b58:	6018      	str	r0, [r3, #0]
 8009b5a:	4b3a      	ldr	r3, [pc, #232]	; (8009c44 <main+0x690>)
 8009b5c:	4601      	mov	r1, r0
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	6820      	ldr	r0, [r4, #0]
 8009b62:	f00b f83d 	bl	8014be0 <Network::JoinGroup(int, unsigned int)>
 8009b66:	4938      	ldr	r1, [pc, #224]	; (8009c48 <main+0x694>)
 8009b68:	2302      	movs	r3, #2
 8009b6a:	f248 0280 	movw	r2, #32896	; 0x8080
 8009b6e:	a894      	add	r0, sp, #592	; 0x250
 8009b70:	f7ff fbf6 	bl	8009360 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009b74:	4935      	ldr	r1, [pc, #212]	; (8009c4c <main+0x698>)
 8009b76:	2303      	movs	r3, #3
 8009b78:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8009b7c:	a894      	add	r0, sp, #592	; 0x250
 8009b7e:	f7ff fbef 	bl	8009360 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009b82:	f50d 60a6 	add.w	r0, sp, #1328	; 0x530
 8009b86:	f002 f9e9 	bl	800bf5c <ArtNet4Node::Start()>
 8009b8a:	f248 0280 	movw	r2, #32896	; 0x8080
 8009b8e:	2302      	movs	r3, #2
 8009b90:	492f      	ldr	r1, [pc, #188]	; (8009c50 <main+0x69c>)
 8009b92:	a894      	add	r0, sp, #592	; 0x250
 8009b94:	f7ff fbe4 	bl	8009360 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009b98:	2102      	movs	r1, #2
 8009b9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009b9e:	f00f fa6d 	bl	801907c <fwdgt_config>
 8009ba2:	ab07      	add	r3, sp, #28
 8009ba4:	2801      	cmp	r0, #1
 8009ba6:	bf0c      	ite	eq
 8009ba8:	2201      	moveq	r2, #1
 8009baa:	2200      	movne	r2, #0
 8009bac:	701a      	strb	r2, [r3, #0]
 8009bae:	d101      	bne.n	8009bb4 <main+0x600>
 8009bb0:	f00f fa54 	bl	801905c <fwdgt_enable>
 8009bb4:	4f27      	ldr	r7, [pc, #156]	; (8009c54 <main+0x6a0>)
 8009bb6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8009c58 <main+0x6a4>
 8009bba:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8009c5c <main+0x6a8>
 8009bbe:	f00f fa55 	bl	801906c <fwdgt_counter_reload>
 8009bc2:	f7fe fccf 	bl	8008564 <net_handle>
 8009bc6:	f50d 60a6 	add.w	r0, sp, #1328	; 0x530
 8009bca:	f002 f9fb 	bl	800bfc4 <ArtNet4Node::Run()>
 8009bce:	a847      	add	r0, sp, #284	; 0x11c
 8009bd0:	f001 f952 	bl	800ae78 <RemoteConfig::Run()>
 8009bd4:	a819      	add	r0, sp, #100	; 0x64
 8009bd6:	f00c fe91 	bl	80168fc <ConfigStore::Flash()>
 8009bda:	6833      	ldr	r3, [r6, #0]
 8009bdc:	b113      	cbz	r3, 8009be4 <main+0x630>
 8009bde:	a80a      	add	r0, sp, #40	; 0x28
 8009be0:	f009 f9fc 	bl	8012fdc <PixelPatterns::Run()>
 8009be4:	2d00      	cmp	r5, #0
 8009be6:	d05f      	beq.n	8009ca8 <main+0x6f4>
 8009be8:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8009bec:	4919      	ldr	r1, [pc, #100]	; (8009c54 <main+0x6a0>)
 8009bee:	f898 0000 	ldrb.w	r0, [r8]
 8009bf2:	aa10      	add	r2, sp, #64	; 0x40
 8009bf4:	f00a faf0 	bl	80141d8 <udp_recv2>
 8009bf8:	f1a0 030b 	sub.w	r3, r0, #11
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	2b05      	cmp	r3, #5
 8009c00:	4604      	mov	r4, r0
 8009c02:	d851      	bhi.n	8009ca8 <main+0x6f4>
 8009c04:	f8d7 a000 	ldr.w	sl, [r7]
 8009c08:	2204      	movs	r2, #4
 8009c0a:	4651      	mov	r1, sl
 8009c0c:	4648      	mov	r0, r9
 8009c0e:	f7ff fa1a 	bl	8009046 <memcmp>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	d148      	bne.n	8009ca8 <main+0x6f4>
 8009c16:	e023      	b.n	8009c60 <main+0x6ac>
 8009c18:	0801a86b 	stmdaeq	r1, {r0, r1, r3, r5, r6, fp, sp, pc}
 8009c1c:	0801a885 	stmdaeq	r1, {r0, r2, r7, fp, sp, pc}
 8009c20:	0801a960 	stmdaeq	r1, {r5, r6, r8, fp, sp, pc}
 8009c24:	2000fda0 	andcs	pc, r0, r0, lsr #27
 8009c28:	200007fd 	strdcs	r0, [r0], -sp
 8009c2c:	0801a89a 	stmdaeq	r1, {r1, r3, r4, r7, fp, sp, pc}
 8009c30:	0801a8af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, fp, sp, pc}
 8009c34:	0801a7e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, sp, pc}
 8009c38:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 8009c3c:	0801c0d2 	stmdaeq	r1, {r1, r4, r6, r7, lr, pc}
 8009c40:	20000000 	andcs	r0, r0, r0
 8009c44:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009c48:	0801c0c3 	stmdaeq	r1, {r0, r1, r6, r7, lr, pc}
 8009c4c:	0801bbd0 	stmdaeq	r1, {r4, r6, r7, r8, r9, fp, ip, sp, pc}
 8009c50:	0801bbf5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, fp, ip, sp, pc}
 8009c54:	20001060 	andcs	r1, r0, r0, rrx
 8009c58:	20000010 	andcs	r0, r0, r0, lsl r0
 8009c5c:	0801a8bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, fp, sp, pc}
 8009c60:	eb0a 0304 	add.w	r3, sl, r4
 8009c64:	f10a 0104 	add.w	r1, sl, #4
 8009c68:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009c6c:	2b0a      	cmp	r3, #10
 8009c6e:	bf04      	itt	eq
 8009c70:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8009c74:	b2a4      	uxtheq	r4, r4
 8009c76:	2c0a      	cmp	r4, #10
 8009c78:	f000 8082 	beq.w	8009d80 <main+0x7cc>
 8009c7c:	2c0e      	cmp	r4, #14
 8009c7e:	d87f      	bhi.n	8009d80 <main+0x7cc>
 8009c80:	486a      	ldr	r0, [pc, #424]	; (8009e2c <main+0x878>)
 8009c82:	9104      	str	r1, [sp, #16]
 8009c84:	2206      	movs	r2, #6
 8009c86:	f7ff f9de 	bl	8009046 <memcmp>
 8009c8a:	9904      	ldr	r1, [sp, #16]
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d177      	bne.n	8009d80 <main+0x7cc>
 8009c90:	2104      	movs	r1, #4
 8009c92:	f10a 000a 	add.w	r0, sl, #10
 8009c96:	f7ff fa6b 	bl	8009170 <dmxconfigudp::atoi(char const*, unsigned int)>
 8009c9a:	285b      	cmp	r0, #91	; 0x5b
 8009c9c:	4601      	mov	r1, r0
 8009c9e:	d903      	bls.n	8009ca8 <main+0x6f4>
 8009ca0:	4b63      	ldr	r3, [pc, #396]	; (8009e30 <main+0x87c>)
 8009ca2:	6818      	ldr	r0, [r3, #0]
 8009ca4:	f007 fe8e 	bl	80119c4 <Dmx::SetDmxBreakTime(unsigned int)>
 8009ca8:	a809      	add	r0, sp, #36	; 0x24
 8009caa:	f00a fee7 	bl	8014a7c <MDNS::Run()>
 8009cae:	f50d 60a4 	add.w	r0, sp, #1312	; 0x520
 8009cb2:	f006 f807 	bl	800fcc4 <LLRPDevice::Run()>
 8009cb6:	a859      	add	r0, sp, #356	; 0x164
 8009cb8:	f001 feda 	bl	800ba70 <HttpDaemon::Run()>
 8009cbc:	9999      	ldr	r1, [sp, #612]	; 0x264
 8009cbe:	aa94      	add	r2, sp, #592	; 0x250
 8009cc0:	b169      	cbz	r1, 8009cde <main+0x72a>
 8009cc2:	7c13      	ldrb	r3, [r2, #16]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f040 80aa 	bne.w	8009e1e <main+0x86a>
 8009cca:	4b5a      	ldr	r3, [pc, #360]	; (8009e34 <main+0x880>)
 8009ccc:	6852      	ldr	r2, [r2, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	1a9b      	subs	r3, r3, r2
 8009cd2:	4299      	cmp	r1, r3
 8009cd4:	d203      	bcs.n	8009cde <main+0x72a>
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	a894      	add	r0, sp, #592	; 0x250
 8009cda:	f7ff fb69 	bl	80093b0 <Display::SetSleep(bool)>
 8009cde:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8009ce0:	ab26      	add	r3, sp, #152	; 0x98
 8009ce2:	2c00      	cmp	r4, #0
 8009ce4:	f43f af6b 	beq.w	8009bbe <main+0x60a>
 8009ce8:	4952      	ldr	r1, [pc, #328]	; (8009e34 <main+0x880>)
 8009cea:	6958      	ldr	r0, [r3, #20]
 8009cec:	680a      	ldr	r2, [r1, #0]
 8009cee:	1a12      	subs	r2, r2, r0
 8009cf0:	4294      	cmp	r4, r2
 8009cf2:	f63f af64 	bhi.w	8009bbe <main+0x60a>
 8009cf6:	680a      	ldr	r2, [r1, #0]
 8009cf8:	615a      	str	r2, [r3, #20]
 8009cfa:	691a      	ldr	r2, [r3, #16]
 8009cfc:	f082 0101 	eor.w	r1, r2, #1
 8009d00:	2a01      	cmp	r2, #1
 8009d02:	6119      	str	r1, [r3, #16]
 8009d04:	4b4c      	ldr	r3, [pc, #304]	; (8009e38 <main+0x884>)
 8009d06:	bf1a      	itte	ne
 8009d08:	2201      	movne	r2, #1
 8009d0a:	f8c3 2818 	strne.w	r2, [r3, #2072]	; 0x818
 8009d0e:	f8c3 2828 	streq.w	r2, [r3, #2088]	; 0x828
 8009d12:	e754      	b.n	8009bbe <main+0x60a>
 8009d14:	2c0f      	cmp	r4, #15
 8009d16:	d81e      	bhi.n	8009d56 <main+0x7a2>
 8009d18:	aa85      	add	r2, sp, #532	; 0x214
 8009d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d1e:	6852      	ldr	r2, [r2, #4]
 8009d20:	40a3      	lsls	r3, r4
 8009d22:	4393      	bics	r3, r2
 8009d24:	d117      	bne.n	8009d56 <main+0x7a2>
 8009d26:	ab85      	add	r3, sp, #532	; 0x214
 8009d28:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8009d2c:	2600      	movs	r6, #0
 8009d2e:	f8b3 b01a 	ldrh.w	fp, [r3, #26]
 8009d32:	b2b3      	uxth	r3, r6
 8009d34:	4599      	cmp	r9, r3
 8009d36:	eb05 0106 	add.w	r1, r5, r6
 8009d3a:	d804      	bhi.n	8009d46 <main+0x792>
 8009d3c:	f1c9 0504 	rsb	r5, r9, #4
 8009d40:	440d      	add	r5, r1
 8009d42:	3401      	adds	r4, #1
 8009d44:	e517      	b.n	8009776 <main+0x1c2>
 8009d46:	445b      	add	r3, fp
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	4650      	mov	r0, sl
 8009d4e:	f002 fd46 	bl	800c7de <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8009d52:	3601      	adds	r6, #1
 8009d54:	e7ed      	b.n	8009d32 <main+0x77e>
 8009d56:	3504      	adds	r5, #4
 8009d58:	e7f3      	b.n	8009d42 <main+0x78e>
 8009d5a:	2400      	movs	r4, #0
 8009d5c:	e539      	b.n	80097d2 <main+0x21e>
 8009d5e:	4625      	mov	r5, r4
 8009d60:	e573      	b.n	800984a <main+0x296>
 8009d62:	f803 1b01 	strb.w	r1, [r3], #1
 8009d66:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009d68:	3101      	adds	r1, #1
 8009d6a:	6281      	str	r1, [r0, #40]	; 0x28
 8009d6c:	e5f9      	b.n	8009962 <main+0x3ae>
 8009d6e:	9904      	ldr	r1, [sp, #16]
 8009d70:	4622      	mov	r2, r4
 8009d72:	f20d 40aa 	addw	r0, sp, #1194	; 0x4aa
 8009d76:	f7ff f976 	bl	8009066 <memcpy>
 8009d7a:	f88a 4076 	strb.w	r4, [sl, #118]	; 0x76
 8009d7e:	e62e      	b.n	80099de <main+0x42a>
 8009d80:	482e      	ldr	r0, [pc, #184]	; (8009e3c <main+0x888>)
 8009d82:	9104      	str	r1, [sp, #16]
 8009d84:	2204      	movs	r2, #4
 8009d86:	f7ff f95e 	bl	8009046 <memcmp>
 8009d8a:	9904      	ldr	r1, [sp, #16]
 8009d8c:	b978      	cbnz	r0, 8009dae <main+0x7fa>
 8009d8e:	2107      	movs	r1, #7
 8009d90:	f10a 0008 	add.w	r0, sl, #8
 8009d94:	f7ff f9ec 	bl	8009170 <dmxconfigudp::atoi(char const*, unsigned int)>
 8009d98:	4b29      	ldr	r3, [pc, #164]	; (8009e40 <main+0x88c>)
 8009d9a:	f1a0 020c 	sub.w	r2, r0, #12
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	4601      	mov	r1, r0
 8009da2:	d881      	bhi.n	8009ca8 <main+0x6f4>
 8009da4:	4b22      	ldr	r3, [pc, #136]	; (8009e30 <main+0x87c>)
 8009da6:	6818      	ldr	r0, [r3, #0]
 8009da8:	f007 fe16 	bl	80119d8 <Dmx::SetDmxMabTime(unsigned int)>
 8009dac:	e77c      	b.n	8009ca8 <main+0x6f4>
 8009dae:	2c0c      	cmp	r4, #12
 8009db0:	d917      	bls.n	8009de2 <main+0x82e>
 8009db2:	2c0e      	cmp	r4, #14
 8009db4:	d82f      	bhi.n	8009e16 <main+0x862>
 8009db6:	4823      	ldr	r0, [pc, #140]	; (8009e44 <main+0x890>)
 8009db8:	9104      	str	r1, [sp, #16]
 8009dba:	2208      	movs	r2, #8
 8009dbc:	f7ff f943 	bl	8009046 <memcmp>
 8009dc0:	9904      	ldr	r1, [sp, #16]
 8009dc2:	bb40      	cbnz	r0, 8009e16 <main+0x862>
 8009dc4:	2102      	movs	r1, #2
 8009dc6:	f10a 000c 	add.w	r0, sl, #12
 8009dca:	f7ff f9d1 	bl	8009170 <dmxconfigudp::atoi(char const*, unsigned int)>
 8009dce:	4601      	mov	r1, r0
 8009dd0:	b110      	cbz	r0, 8009dd8 <main+0x824>
 8009dd2:	4b1d      	ldr	r3, [pc, #116]	; (8009e48 <main+0x894>)
 8009dd4:	fbb3 f1f0 	udiv	r1, r3, r0
 8009dd8:	4b15      	ldr	r3, [pc, #84]	; (8009e30 <main+0x87c>)
 8009dda:	6818      	ldr	r0, [r3, #0]
 8009ddc:	f007 fdca 	bl	8011974 <Dmx::SetDmxPeriodTime(unsigned int)>
 8009de0:	e762      	b.n	8009ca8 <main+0x6f4>
 8009de2:	2c0a      	cmp	r4, #10
 8009de4:	f43f af60 	beq.w	8009ca8 <main+0x6f4>
 8009de8:	4818      	ldr	r0, [pc, #96]	; (8009e4c <main+0x898>)
 8009dea:	2206      	movs	r2, #6
 8009dec:	f7ff f92b 	bl	8009046 <memcmp>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	f47f af59 	bne.w	8009ca8 <main+0x6f4>
 8009df6:	2103      	movs	r1, #3
 8009df8:	f10a 000a 	add.w	r0, sl, #10
 8009dfc:	f7ff f9b8 	bl	8009170 <dmxconfigudp::atoi(char const*, unsigned int)>
 8009e00:	1e83      	subs	r3, r0, #2
 8009e02:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009e06:	f63f af4f 	bhi.w	8009ca8 <main+0x6f4>
 8009e0a:	4b09      	ldr	r3, [pc, #36]	; (8009e30 <main+0x87c>)
 8009e0c:	b281      	uxth	r1, r0
 8009e0e:	6818      	ldr	r0, [r3, #0]
 8009e10:	f007 fdec 	bl	80119ec <Dmx::SetDmxSlots(unsigned short)>
 8009e14:	e748      	b.n	8009ca8 <main+0x6f4>
 8009e16:	2c0d      	cmp	r4, #13
 8009e18:	f47f af46 	bne.w	8009ca8 <main+0x6f4>
 8009e1c:	e7e4      	b.n	8009de8 <main+0x834>
 8009e1e:	f7ff fae7 	bl	80093f0 <display::timeout::gpio_renew()>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	f43f af5b 	beq.w	8009cde <main+0x72a>
 8009e28:	2100      	movs	r1, #0
 8009e2a:	e755      	b.n	8009cd8 <main+0x724>
 8009e2c:	0801a8c1 	stmdaeq	r1, {r0, r6, r7, fp, sp, pc}
 8009e30:	2000105c 	andcs	r1, r0, ip, asr r0
 8009e34:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 8009e38:	40020000 	andmi	r0, r2, r0
 8009e3c:	0801a8c8 	stmdaeq	r1, {r3, r6, r7, fp, sp, pc}
 8009e40:	000f4234 	andeq	r4, pc, r4, lsr r2	; <UNPREDICTABLE>
 8009e44:	0801a8cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, fp, sp, pc}
 8009e48:	000f4240 	andeq	r4, pc, r0, asr #4
 8009e4c:	0801a8d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, fp, sp, pc}

08009e50 <StoreNetwork::SaveDhcp(bool)>:
 8009e50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009e52:	2301      	movs	r3, #1
 8009e54:	f88d 1017 	strb.w	r1, [sp, #23]
 8009e58:	2100      	movs	r1, #0
 8009e5a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009e5e:	4805      	ldr	r0, [pc, #20]	; (8009e74 <StoreNetwork::SaveDhcp(bool)+0x24>)
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	6800      	ldr	r0, [r0, #0]
 8009e64:	f10d 0317 	add.w	r3, sp, #23
 8009e68:	2214      	movs	r2, #20
 8009e6a:	f00c fcd5 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8009e6e:	b007      	add	sp, #28
 8009e70:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e74:	2000fc80 	andcs	pc, r0, r0, lsl #25

08009e78 <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 8009e78:	f1a0 0004 	sub.w	r0, r0, #4
 8009e7c:	e7e8      	b.n	8009e50 <StoreNetwork::SaveDhcp(bool)>
 8009e7e:	bf00      	nop

08009e80 <rdm::device::responder::factorydefaults()>:
 8009e80:	b508      	push	{r3, lr}
 8009e82:	4b08      	ldr	r3, [pc, #32]	; (8009ea4 <rdm::device::responder::factorydefaults()+0x24>)
 8009e84:	2100      	movs	r1, #0
 8009e86:	6818      	ldr	r0, [r3, #0]
 8009e88:	f000 fe76 	bl	800ab78 <RemoteConfig::SetDisable(bool)>
 8009e8c:	4b06      	ldr	r3, [pc, #24]	; (8009ea8 <rdm::device::responder::factorydefaults()+0x28>)
 8009e8e:	210b      	movs	r1, #11
 8009e90:	6818      	ldr	r0, [r3, #0]
 8009e92:	f00c fcaf 	bl	80167f4 <ConfigStore::ResetSetList(configstore::Store)>
 8009e96:	4b05      	ldr	r3, [pc, #20]	; (8009eac <rdm::device::responder::factorydefaults()+0x2c>)
 8009e98:	2101      	movs	r1, #1
 8009e9a:	6818      	ldr	r0, [r3, #0]
 8009e9c:	f7ff ffd8 	bl	8009e50 <StoreNetwork::SaveDhcp(bool)>
 8009ea0:	bd08      	pop	{r3, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20000124 	andcs	r0, r0, r4, lsr #2
 8009ea8:	2000fc80 	andcs	pc, r0, r0, lsl #25
 8009eac:	2000fc90 	mulcs	r0, r0, ip

08009eb0 <RDMSoftwareVersion::GetVersion()>:
 8009eb0:	4800      	ldr	r0, [pc, #0]	; (8009eb4 <RDMSoftwareVersion::GetVersion()+0x4>)
 8009eb2:	4770      	bx	lr
 8009eb4:	0801aaa1 	stmdaeq	r1, {r0, r5, r7, r9, fp, sp, pc}

08009eb8 <RDMSoftwareVersion::GetVersionLength()>:
 8009eb8:	2003      	movs	r0, #3
 8009eba:	4770      	bx	lr

08009ebc <RDMSoftwareVersion::GetVersionId()>:
 8009ebc:	4800      	ldr	r0, [pc, #0]	; (8009ec0 <RDMSoftwareVersion::GetVersionId()+0x4>)
 8009ebe:	4770      	bx	lr
 8009ec0:	63a8489e 			; <UNDEFINED> instruction: 0x63a8489e

08009ec4 <_itostr>:
 8009ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec6:	0fc7      	lsrs	r7, r0, #31
 8009ec8:	b091      	sub	sp, #68	; 0x44
 8009eca:	bf18      	it	ne
 8009ecc:	4240      	negne	r0, r0
 8009ece:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8009ed2:	b9c8      	cbnz	r0, 8009f08 <_itostr+0x44>
 8009ed4:	2330      	movs	r3, #48	; 0x30
 8009ed6:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8009eda:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8009ede:	b132      	cbz	r2, 8009eee <_itostr+0x2a>
 8009ee0:	4668      	mov	r0, sp
 8009ee2:	2530      	movs	r5, #48	; 0x30
 8009ee4:	1ae6      	subs	r6, r4, r3
 8009ee6:	4296      	cmp	r6, r2
 8009ee8:	da01      	bge.n	8009eee <_itostr+0x2a>
 8009eea:	4283      	cmp	r3, r0
 8009eec:	d81c      	bhi.n	8009f28 <_itostr+0x64>
 8009eee:	b117      	cbz	r7, 8009ef6 <_itostr+0x32>
 8009ef0:	222d      	movs	r2, #45	; 0x2d
 8009ef2:	f803 2901 	strb.w	r2, [r3], #-1
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	1ae0      	subs	r0, r4, r3
 8009efa:	3901      	subs	r1, #1
 8009efc:	aa10      	add	r2, sp, #64	; 0x40
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d315      	bcc.n	8009f2e <_itostr+0x6a>
 8009f02:	3001      	adds	r0, #1
 8009f04:	b011      	add	sp, #68	; 0x44
 8009f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f08:	4623      	mov	r3, r4
 8009f0a:	250a      	movs	r5, #10
 8009f0c:	46ec      	mov	ip, sp
 8009f0e:	fb90 f6f5 	sdiv	r6, r0, r5
 8009f12:	fb05 0016 	mls	r0, r5, r6, r0
 8009f16:	3030      	adds	r0, #48	; 0x30
 8009f18:	f803 0901 	strb.w	r0, [r3], #-1
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	2e00      	cmp	r6, #0
 8009f20:	d0dd      	beq.n	8009ede <_itostr+0x1a>
 8009f22:	4563      	cmp	r3, ip
 8009f24:	d1f3      	bne.n	8009f0e <_itostr+0x4a>
 8009f26:	e7da      	b.n	8009ede <_itostr+0x1a>
 8009f28:	f803 5901 	strb.w	r5, [r3], #-1
 8009f2c:	e7da      	b.n	8009ee4 <_itostr+0x20>
 8009f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f32:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009f36:	e7e1      	b.n	8009efc <_itostr+0x38>

08009f38 <_xputch>:
 8009f38:	4603      	mov	r3, r0
 8009f3a:	b410      	push	{r4}
 8009f3c:	4c09      	ldr	r4, [pc, #36]	; (8009f64 <_xputch+0x2c>)
 8009f3e:	68da      	ldr	r2, [r3, #12]
 8009f40:	4608      	mov	r0, r1
 8009f42:	6821      	ldr	r1, [r4, #0]
 8009f44:	3201      	adds	r2, #1
 8009f46:	60da      	str	r2, [r3, #12]
 8009f48:	b141      	cbz	r1, 8009f5c <_xputch+0x24>
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	da02      	bge.n	8009f56 <_xputch+0x1e>
 8009f50:	1c4b      	adds	r3, r1, #1
 8009f52:	6023      	str	r3, [r4, #0]
 8009f54:	7008      	strb	r0, [r1, #0]
 8009f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f60:	f00d bf24 	b.w	8017dac <console_putc>
 8009f64:	200000f8 	strdcs	r0, [r0], -r8

08009f68 <_format_int>:
 8009f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f6c:	4698      	mov	r8, r3
 8009f6e:	b091      	sub	sp, #68	; 0x44
 8009f70:	ea52 0308 	orrs.w	r3, r2, r8
 8009f74:	4606      	mov	r6, r0
 8009f76:	4617      	mov	r7, r2
 8009f78:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8009f7c:	d133      	bne.n	8009fe6 <_format_int+0x7e>
 8009f7e:	2330      	movs	r3, #48	; 0x30
 8009f80:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8009f84:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8009f88:	6833      	ldr	r3, [r6, #0]
 8009f8a:	07d8      	lsls	r0, r3, #31
 8009f8c:	d507      	bpl.n	8009f9e <_format_int+0x36>
 8009f8e:	6871      	ldr	r1, [r6, #4]
 8009f90:	466a      	mov	r2, sp
 8009f92:	2030      	movs	r0, #48	; 0x30
 8009f94:	1b2f      	subs	r7, r5, r4
 8009f96:	428f      	cmp	r7, r1
 8009f98:	da01      	bge.n	8009f9e <_format_int+0x36>
 8009f9a:	4294      	cmp	r4, r2
 8009f9c:	d839      	bhi.n	800a012 <_format_int+0xaa>
 8009f9e:	0699      	lsls	r1, r3, #26
 8009fa0:	d507      	bpl.n	8009fb2 <_format_int+0x4a>
 8009fa2:	68b1      	ldr	r1, [r6, #8]
 8009fa4:	466a      	mov	r2, sp
 8009fa6:	2030      	movs	r0, #48	; 0x30
 8009fa8:	1b2f      	subs	r7, r5, r4
 8009faa:	428f      	cmp	r7, r1
 8009fac:	da01      	bge.n	8009fb2 <_format_int+0x4a>
 8009fae:	4294      	cmp	r4, r2
 8009fb0:	d832      	bhi.n	800a018 <_format_int+0xb0>
 8009fb2:	071a      	lsls	r2, r3, #28
 8009fb4:	bf44      	itt	mi
 8009fb6:	222d      	movmi	r2, #45	; 0x2d
 8009fb8:	f804 2901 	strbmi.w	r2, [r4], #-1
 8009fbc:	065b      	lsls	r3, r3, #25
 8009fbe:	d407      	bmi.n	8009fd0 <_format_int+0x68>
 8009fc0:	68b2      	ldr	r2, [r6, #8]
 8009fc2:	466b      	mov	r3, sp
 8009fc4:	2120      	movs	r1, #32
 8009fc6:	1b28      	subs	r0, r5, r4
 8009fc8:	4290      	cmp	r0, r2
 8009fca:	da01      	bge.n	8009fd0 <_format_int+0x68>
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	d826      	bhi.n	800a01e <_format_int+0xb6>
 8009fd0:	1b2d      	subs	r5, r5, r4
 8009fd2:	3401      	adds	r4, #1
 8009fd4:	ab10      	add	r3, sp, #64	; 0x40
 8009fd6:	429c      	cmp	r4, r3
 8009fd8:	d324      	bcc.n	800a024 <_format_int+0xbc>
 8009fda:	68b3      	ldr	r3, [r6, #8]
 8009fdc:	42ab      	cmp	r3, r5
 8009fde:	dc27      	bgt.n	800a030 <_format_int+0xc8>
 8009fe0:	b011      	add	sp, #68	; 0x44
 8009fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fe6:	462c      	mov	r4, r5
 8009fe8:	46e9      	mov	r9, sp
 8009fea:	4638      	mov	r0, r7
 8009fec:	4641      	mov	r1, r8
 8009fee:	220a      	movs	r2, #10
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f7fe fe51 	bl	8008c98 <__aeabi_uldivmod>
 8009ff6:	3230      	adds	r2, #48	; 0x30
 8009ff8:	f804 2901 	strb.w	r2, [r4], #-1
 8009ffc:	463a      	mov	r2, r7
 8009ffe:	4643      	mov	r3, r8
 800a000:	2a0a      	cmp	r2, #10
 800a002:	f173 0300 	sbcs.w	r3, r3, #0
 800a006:	4607      	mov	r7, r0
 800a008:	4688      	mov	r8, r1
 800a00a:	d3bd      	bcc.n	8009f88 <_format_int+0x20>
 800a00c:	454c      	cmp	r4, r9
 800a00e:	d1ec      	bne.n	8009fea <_format_int+0x82>
 800a010:	e7ba      	b.n	8009f88 <_format_int+0x20>
 800a012:	f804 0901 	strb.w	r0, [r4], #-1
 800a016:	e7bd      	b.n	8009f94 <_format_int+0x2c>
 800a018:	f804 0901 	strb.w	r0, [r4], #-1
 800a01c:	e7c4      	b.n	8009fa8 <_format_int+0x40>
 800a01e:	f804 1901 	strb.w	r1, [r4], #-1
 800a022:	e7d0      	b.n	8009fc6 <_format_int+0x5e>
 800a024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a028:	4630      	mov	r0, r6
 800a02a:	f7ff ff85 	bl	8009f38 <_xputch>
 800a02e:	e7d1      	b.n	8009fd4 <_format_int+0x6c>
 800a030:	2120      	movs	r1, #32
 800a032:	4630      	mov	r0, r6
 800a034:	f7ff ff80 	bl	8009f38 <_xputch>
 800a038:	3501      	adds	r5, #1
 800a03a:	e7ce      	b.n	8009fda <_format_int+0x72>

0800a03c <_format_hex>:
 800a03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a03e:	b091      	sub	sp, #68	; 0x44
 800a040:	6804      	ldr	r4, [r0, #0]
 800a042:	4606      	mov	r6, r0
 800a044:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800a048:	bb61      	cbnz	r1, 800a0a4 <_format_hex+0x68>
 800a04a:	2330      	movs	r3, #48	; 0x30
 800a04c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800a050:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800a054:	07e5      	lsls	r5, r4, #31
 800a056:	d507      	bpl.n	800a068 <_format_hex+0x2c>
 800a058:	6870      	ldr	r0, [r6, #4]
 800a05a:	4669      	mov	r1, sp
 800a05c:	2530      	movs	r5, #48	; 0x30
 800a05e:	1ad7      	subs	r7, r2, r3
 800a060:	4287      	cmp	r7, r0
 800a062:	da01      	bge.n	800a068 <_format_hex+0x2c>
 800a064:	428b      	cmp	r3, r1
 800a066:	d831      	bhi.n	800a0cc <_format_hex+0x90>
 800a068:	06a0      	lsls	r0, r4, #26
 800a06a:	d507      	bpl.n	800a07c <_format_hex+0x40>
 800a06c:	68b0      	ldr	r0, [r6, #8]
 800a06e:	4669      	mov	r1, sp
 800a070:	2530      	movs	r5, #48	; 0x30
 800a072:	1ad7      	subs	r7, r2, r3
 800a074:	4287      	cmp	r7, r0
 800a076:	da01      	bge.n	800a07c <_format_hex+0x40>
 800a078:	428b      	cmp	r3, r1
 800a07a:	d82a      	bhi.n	800a0d2 <_format_hex+0x96>
 800a07c:	0661      	lsls	r1, r4, #25
 800a07e:	d407      	bmi.n	800a090 <_format_hex+0x54>
 800a080:	68b0      	ldr	r0, [r6, #8]
 800a082:	4669      	mov	r1, sp
 800a084:	2420      	movs	r4, #32
 800a086:	1ad5      	subs	r5, r2, r3
 800a088:	4285      	cmp	r5, r0
 800a08a:	da01      	bge.n	800a090 <_format_hex+0x54>
 800a08c:	428b      	cmp	r3, r1
 800a08e:	d823      	bhi.n	800a0d8 <_format_hex+0x9c>
 800a090:	1ad5      	subs	r5, r2, r3
 800a092:	1c5c      	adds	r4, r3, #1
 800a094:	ab10      	add	r3, sp, #64	; 0x40
 800a096:	429c      	cmp	r4, r3
 800a098:	d321      	bcc.n	800a0de <_format_hex+0xa2>
 800a09a:	68b3      	ldr	r3, [r6, #8]
 800a09c:	429d      	cmp	r5, r3
 800a09e:	db24      	blt.n	800a0ea <_format_hex+0xae>
 800a0a0:	b011      	add	sp, #68	; 0x44
 800a0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0a4:	f014 0f02 	tst.w	r4, #2
 800a0a8:	bf0c      	ite	eq
 800a0aa:	2757      	moveq	r7, #87	; 0x57
 800a0ac:	2737      	movne	r7, #55	; 0x37
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	466d      	mov	r5, sp
 800a0b2:	f001 000f 	and.w	r0, r1, #15
 800a0b6:	2809      	cmp	r0, #9
 800a0b8:	bf94      	ite	ls
 800a0ba:	3030      	addls	r0, #48	; 0x30
 800a0bc:	19c0      	addhi	r0, r0, r7
 800a0be:	0909      	lsrs	r1, r1, #4
 800a0c0:	f803 0901 	strb.w	r0, [r3], #-1
 800a0c4:	d0c6      	beq.n	800a054 <_format_hex+0x18>
 800a0c6:	42ab      	cmp	r3, r5
 800a0c8:	d1f3      	bne.n	800a0b2 <_format_hex+0x76>
 800a0ca:	e7c3      	b.n	800a054 <_format_hex+0x18>
 800a0cc:	f803 5901 	strb.w	r5, [r3], #-1
 800a0d0:	e7c5      	b.n	800a05e <_format_hex+0x22>
 800a0d2:	f803 5901 	strb.w	r5, [r3], #-1
 800a0d6:	e7cc      	b.n	800a072 <_format_hex+0x36>
 800a0d8:	f803 4901 	strb.w	r4, [r3], #-1
 800a0dc:	e7d3      	b.n	800a086 <_format_hex+0x4a>
 800a0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f7ff ff28 	bl	8009f38 <_xputch>
 800a0e8:	e7d4      	b.n	800a094 <_format_hex+0x58>
 800a0ea:	2120      	movs	r1, #32
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f7ff ff23 	bl	8009f38 <_xputch>
 800a0f2:	3501      	adds	r5, #1
 800a0f4:	e7d1      	b.n	800a09a <_format_hex+0x5e>
	...

0800a0f8 <_vprintf>:
 800a0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0fc:	f04f 0800 	mov.w	r8, #0
 800a100:	b096      	sub	sp, #88	; 0x58
 800a102:	e9cd 8004 	strd	r8, r0, [sp, #16]
 800a106:	4614      	mov	r4, r2
 800a108:	af06      	add	r7, sp, #24
 800a10a:	780b      	ldrb	r3, [r1, #0]
 800a10c:	b91b      	cbnz	r3, 800a116 <_vprintf+0x1e>
 800a10e:	9804      	ldr	r0, [sp, #16]
 800a110:	b016      	add	sp, #88	; 0x58
 800a112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a116:	2b25      	cmp	r3, #37	; 0x25
 800a118:	f101 0601 	add.w	r6, r1, #1
 800a11c:	d005      	beq.n	800a12a <_vprintf+0x32>
 800a11e:	4619      	mov	r1, r3
 800a120:	a801      	add	r0, sp, #4
 800a122:	f7ff ff09 	bl	8009f38 <_xputch>
 800a126:	4631      	mov	r1, r6
 800a128:	e7ef      	b.n	800a10a <_vprintf+0x12>
 800a12a:	784b      	ldrb	r3, [r1, #1]
 800a12c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a130:	2b30      	cmp	r3, #48	; 0x30
 800a132:	e9cd 8801 	strd	r8, r8, [sp, #4]
 800a136:	d129      	bne.n	800a18c <_vprintf+0x94>
 800a138:	2320      	movs	r3, #32
 800a13a:	9301      	str	r3, [sp, #4]
 800a13c:	1c8e      	adds	r6, r1, #2
 800a13e:	2200      	movs	r2, #0
 800a140:	4635      	mov	r5, r6
 800a142:	4613      	mov	r3, r2
 800a144:	f04f 0c0a 	mov.w	ip, #10
 800a148:	7829      	ldrb	r1, [r5, #0]
 800a14a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 800a14e:	2809      	cmp	r0, #9
 800a150:	462e      	mov	r6, r5
 800a152:	f105 0501 	add.w	r5, r5, #1
 800a156:	d91d      	bls.n	800a194 <_vprintf+0x9c>
 800a158:	b12a      	cbz	r2, 800a166 <_vprintf+0x6e>
 800a15a:	9303      	str	r3, [sp, #12]
 800a15c:	b11b      	cbz	r3, 800a166 <_vprintf+0x6e>
 800a15e:	9b01      	ldr	r3, [sp, #4]
 800a160:	f043 0310 	orr.w	r3, r3, #16
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	292e      	cmp	r1, #46	; 0x2e
 800a168:	d123      	bne.n	800a1b2 <_vprintf+0xba>
 800a16a:	7873      	ldrb	r3, [r6, #1]
 800a16c:	2b2a      	cmp	r3, #42	; 0x2a
 800a16e:	d015      	beq.n	800a19c <_vprintf+0xa4>
 800a170:	2100      	movs	r1, #0
 800a172:	1c70      	adds	r0, r6, #1
 800a174:	460a      	mov	r2, r1
 800a176:	250a      	movs	r5, #10
 800a178:	7803      	ldrb	r3, [r0, #0]
 800a17a:	3b30      	subs	r3, #48	; 0x30
 800a17c:	2b09      	cmp	r3, #9
 800a17e:	4606      	mov	r6, r0
 800a180:	f100 0001 	add.w	r0, r0, #1
 800a184:	d958      	bls.n	800a238 <_vprintf+0x140>
 800a186:	b181      	cbz	r1, 800a1aa <_vprintf+0xb2>
 800a188:	9202      	str	r2, [sp, #8]
 800a18a:	e00e      	b.n	800a1aa <_vprintf+0xb2>
 800a18c:	2b2d      	cmp	r3, #45	; 0x2d
 800a18e:	d1d6      	bne.n	800a13e <_vprintf+0x46>
 800a190:	2340      	movs	r3, #64	; 0x40
 800a192:	e7d2      	b.n	800a13a <_vprintf+0x42>
 800a194:	fb0c 0303 	mla	r3, ip, r3, r0
 800a198:	2201      	movs	r2, #1
 800a19a:	e7d5      	b.n	800a148 <_vprintf+0x50>
 800a19c:	f854 3b04 	ldr.w	r3, [r4], #4
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	bfb8      	it	lt
 800a1a4:	425b      	neglt	r3, r3
 800a1a6:	3602      	adds	r6, #2
 800a1a8:	9302      	str	r3, [sp, #8]
 800a1aa:	9b01      	ldr	r3, [sp, #4]
 800a1ac:	f043 0301 	orr.w	r3, r3, #1
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	7833      	ldrb	r3, [r6, #0]
 800a1b4:	2b6c      	cmp	r3, #108	; 0x6c
 800a1b6:	bf04      	itt	eq
 800a1b8:	3601      	addeq	r6, #1
 800a1ba:	9b01      	ldreq	r3, [sp, #4]
 800a1bc:	7831      	ldrb	r1, [r6, #0]
 800a1be:	bf04      	itt	eq
 800a1c0:	f043 0304 	orreq.w	r3, r3, #4
 800a1c4:	9301      	streq	r3, [sp, #4]
 800a1c6:	2958      	cmp	r1, #88	; 0x58
 800a1c8:	f000 8169 	beq.w	800a49e <_vprintf+0x3a6>
 800a1cc:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	2a15      	cmp	r2, #21
 800a1d4:	d8a4      	bhi.n	800a120 <_vprintf+0x28>
 800a1d6:	2b15      	cmp	r3, #21
 800a1d8:	d8a2      	bhi.n	800a120 <_vprintf+0x28>
 800a1da:	a201      	add	r2, pc, #4	; (adr r2, 800a1e0 <_vprintf+0xe8>)
 800a1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e0:	0800a241 	stmdaeq	r0, {r0, r6, r9, sp, pc}
 800a1e4:	0800a253 	stmdaeq	r0, {r0, r1, r4, r6, r9, sp, pc}
 800a1e8:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a1ec:	0800a289 	stmdaeq	r0, {r0, r3, r7, r9, sp, pc}
 800a1f0:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a1f4:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a1f8:	0800a253 	stmdaeq	r0, {r0, r1, r4, r6, r9, sp, pc}
 800a1fc:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a200:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a204:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a208:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a20c:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a210:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a214:	0800a3e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, sp, pc}
 800a218:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a21c:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a220:	0800a409 	stmdaeq	r0, {r0, r3, sl, sp, pc}
 800a224:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a228:	0800a47f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, sl, sp, pc}
 800a22c:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a230:	0800a121 	stmdaeq	r0, {r0, r5, r8, sp, pc}
 800a234:	0800a4a7 	stmdaeq	r0, {r0, r1, r2, r5, r7, sl, sp, pc}
 800a238:	fb05 3202 	mla	r2, r5, r2, r3
 800a23c:	2101      	movs	r1, #1
 800a23e:	e79b      	b.n	800a178 <_vprintf+0x80>
 800a240:	4625      	mov	r5, r4
 800a242:	a801      	add	r0, sp, #4
 800a244:	f855 1b04 	ldr.w	r1, [r5], #4
 800a248:	f7ff fe76 	bl	8009f38 <_xputch>
 800a24c:	3601      	adds	r6, #1
 800a24e:	462c      	mov	r4, r5
 800a250:	e769      	b.n	800a126 <_vprintf+0x2e>
 800a252:	9901      	ldr	r1, [sp, #4]
 800a254:	074d      	lsls	r5, r1, #29
 800a256:	bf4b      	itete	mi
 800a258:	3407      	addmi	r4, #7
 800a25a:	4625      	movpl	r5, r4
 800a25c:	f024 0407 	bicmi.w	r4, r4, #7
 800a260:	f855 2b04 	ldrpl.w	r2, [r5], #4
 800a264:	bf45      	ittet	mi
 800a266:	6863      	ldrmi	r3, [r4, #4]
 800a268:	4625      	movmi	r5, r4
 800a26a:	17d3      	asrpl	r3, r2, #31
 800a26c:	f855 2b08 	ldrmi.w	r2, [r5], #8
 800a270:	2b00      	cmp	r3, #0
 800a272:	da05      	bge.n	800a280 <_vprintf+0x188>
 800a274:	f041 0108 	orr.w	r1, r1, #8
 800a278:	4252      	negs	r2, r2
 800a27a:	9101      	str	r1, [sp, #4]
 800a27c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800a280:	a801      	add	r0, sp, #4
 800a282:	f7ff fe71 	bl	8009f68 <_format_int>
 800a286:	e7e1      	b.n	800a24c <_vprintf+0x154>
 800a288:	3407      	adds	r4, #7
 800a28a:	f024 0507 	bic.w	r5, r4, #7
 800a28e:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a292:	f7fe fcb1 	bl	8008bf8 <__aeabi_d2f>
 800a296:	9b01      	ldr	r3, [sp, #4]
 800a298:	ee07 0a90 	vmov	s15, r0
 800a29c:	07dc      	lsls	r4, r3, #31
 800a29e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a2a2:	bf4c      	ite	mi
 800a2a4:	9c02      	ldrmi	r4, [sp, #8]
 800a2a6:	2406      	movpl	r4, #6
 800a2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ac:	bf48      	it	mi
 800a2ae:	eef1 7a67 	vnegmi.f32	s15, s15
 800a2b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a2b6:	bf4a      	itet	mi
 800a2b8:	f10d 0a19 	addmi.w	sl, sp, #25
 800a2bc:	46ba      	movpl	sl, r7
 800a2be:	232d      	movmi	r3, #45	; 0x2d
 800a2c0:	ee17 0a10 	vmov	r0, s14
 800a2c4:	f04f 0200 	mov.w	r2, #0
 800a2c8:	4651      	mov	r1, sl
 800a2ca:	bf48      	it	mi
 800a2cc:	f88d 3018 	strbmi.w	r3, [sp, #24]
 800a2d0:	f7ff fdf8 	bl	8009ec4 <_itostr>
 800a2d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a2d8:	232e      	movs	r3, #46	; 0x2e
 800a2da:	f80a 3000 	strb.w	r3, [sl, r0]
 800a2de:	eb0a 0900 	add.w	r9, sl, r0
 800a2e2:	230a      	movs	r3, #10
 800a2e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2e8:	1c62      	adds	r2, r4, #1
 800a2ea:	f109 0901 	add.w	r9, r9, #1
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	2c00      	cmp	r4, #0
 800a2f2:	dc3d      	bgt.n	800a370 <_vprintf+0x278>
 800a2f4:	ee07 3a10 	vmov	s14, r3
 800a2f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a2fc:	4649      	mov	r1, r9
 800a2fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a306:	ee17 0a90 	vmov	r0, s15
 800a30a:	f7ff fddb 	bl	8009ec4 <_itostr>
 800a30e:	4448      	add	r0, r9
 800a310:	1bc0      	subs	r0, r0, r7
 800a312:	1e44      	subs	r4, r0, #1
 800a314:	193a      	adds	r2, r7, r4
 800a316:	5d3b      	ldrb	r3, [r7, r4]
 800a318:	2b34      	cmp	r3, #52	; 0x34
 800a31a:	d911      	bls.n	800a340 <_vprintf+0x248>
 800a31c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a320:	292e      	cmp	r1, #46	; 0x2e
 800a322:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 800a326:	d029      	beq.n	800a37c <_vprintf+0x284>
 800a328:	469c      	mov	ip, r3
 800a32a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800a32e:	4663      	mov	r3, ip
 800a330:	f81c 1901 	ldrb.w	r1, [ip], #-1
 800a334:	2939      	cmp	r1, #57	; 0x39
 800a336:	d01e      	beq.n	800a376 <_vprintf+0x27e>
 800a338:	292e      	cmp	r1, #46	; 0x2e
 800a33a:	d01f      	beq.n	800a37c <_vprintf+0x284>
 800a33c:	3101      	adds	r1, #1
 800a33e:	7019      	strb	r1, [r3, #0]
 800a340:	f104 0358 	add.w	r3, r4, #88	; 0x58
 800a344:	446b      	add	r3, sp
 800a346:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 800a34a:	2b2e      	cmp	r3, #46	; 0x2e
 800a34c:	bf08      	it	eq
 800a34e:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 800a352:	46a1      	mov	r9, r4
 800a354:	9b03      	ldr	r3, [sp, #12]
 800a356:	4599      	cmp	r9, r3
 800a358:	db3b      	blt.n	800a3d2 <_vprintf+0x2da>
 800a35a:	46b9      	mov	r9, r7
 800a35c:	2c00      	cmp	r4, #0
 800a35e:	f77f af75 	ble.w	800a24c <_vprintf+0x154>
 800a362:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a366:	a801      	add	r0, sp, #4
 800a368:	f7ff fde6 	bl	8009f38 <_xputch>
 800a36c:	3c01      	subs	r4, #1
 800a36e:	e7f5      	b.n	800a35c <_vprintf+0x264>
 800a370:	434b      	muls	r3, r1
 800a372:	3c01      	subs	r4, #1
 800a374:	e7bc      	b.n	800a2f0 <_vprintf+0x1f8>
 800a376:	f88c e001 	strb.w	lr, [ip, #1]
 800a37a:	e7d8      	b.n	800a32e <_vprintf+0x236>
 800a37c:	3b01      	subs	r3, #1
 800a37e:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800a382:	7819      	ldrb	r1, [r3, #0]
 800a384:	2939      	cmp	r1, #57	; 0x39
 800a386:	d112      	bne.n	800a3ae <_vprintf+0x2b6>
 800a388:	42bb      	cmp	r3, r7
 800a38a:	d20d      	bcs.n	800a3a8 <_vprintf+0x2b0>
 800a38c:	1c5c      	adds	r4, r3, #1
 800a38e:	1c99      	adds	r1, r3, #2
 800a390:	428c      	cmp	r4, r1
 800a392:	eba2 0203 	sub.w	r2, r2, r3
 800a396:	d913      	bls.n	800a3c0 <_vprintf+0x2c8>
 800a398:	4619      	mov	r1, r3
 800a39a:	441a      	add	r2, r3
 800a39c:	428a      	cmp	r2, r1
 800a39e:	d10b      	bne.n	800a3b8 <_vprintf+0x2c0>
 800a3a0:	2231      	movs	r2, #49	; 0x31
 800a3a2:	705a      	strb	r2, [r3, #1]
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	e7cb      	b.n	800a340 <_vprintf+0x248>
 800a3a8:	f803 c901 	strb.w	ip, [r3], #-1
 800a3ac:	e7e9      	b.n	800a382 <_vprintf+0x28a>
 800a3ae:	42bb      	cmp	r3, r7
 800a3b0:	d3ec      	bcc.n	800a38c <_vprintf+0x294>
 800a3b2:	292d      	cmp	r1, #45	; 0x2d
 800a3b4:	d0ea      	beq.n	800a38c <_vprintf+0x294>
 800a3b6:	e7c1      	b.n	800a33c <_vprintf+0x244>
 800a3b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a3bc:	704c      	strb	r4, [r1, #1]
 800a3be:	e7ed      	b.n	800a39c <_vprintf+0x2a4>
 800a3c0:	4414      	add	r4, r2
 800a3c2:	440a      	add	r2, r1
 800a3c4:	428a      	cmp	r2, r1
 800a3c6:	d0eb      	beq.n	800a3a0 <_vprintf+0x2a8>
 800a3c8:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 800a3cc:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800a3d0:	e7f8      	b.n	800a3c4 <_vprintf+0x2cc>
 800a3d2:	2120      	movs	r1, #32
 800a3d4:	a801      	add	r0, sp, #4
 800a3d6:	f7ff fdaf 	bl	8009f38 <_xputch>
 800a3da:	f109 0901 	add.w	r9, r9, #1
 800a3de:	e7b9      	b.n	800a354 <_vprintf+0x25c>
 800a3e0:	4625      	mov	r5, r4
 800a3e2:	2308      	movs	r3, #8
 800a3e4:	f855 4b04 	ldr.w	r4, [r5], #4
 800a3e8:	9303      	str	r3, [sp, #12]
 800a3ea:	2130      	movs	r1, #48	; 0x30
 800a3ec:	2320      	movs	r3, #32
 800a3ee:	a801      	add	r0, sp, #4
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	f7ff fda1 	bl	8009f38 <_xputch>
 800a3f6:	2178      	movs	r1, #120	; 0x78
 800a3f8:	a801      	add	r0, sp, #4
 800a3fa:	f7ff fd9d 	bl	8009f38 <_xputch>
 800a3fe:	4621      	mov	r1, r4
 800a400:	a801      	add	r0, sp, #4
 800a402:	f7ff fe1b 	bl	800a03c <_format_hex>
 800a406:	e721      	b.n	800a24c <_vprintf+0x154>
 800a408:	4625      	mov	r5, r4
 800a40a:	2400      	movs	r4, #0
 800a40c:	f855 9b04 	ldr.w	r9, [r5], #4
 800a410:	f819 3004 	ldrb.w	r3, [r9, r4]
 800a414:	b993      	cbnz	r3, 800a43c <_vprintf+0x344>
 800a416:	9b01      	ldr	r3, [sp, #4]
 800a418:	07d9      	lsls	r1, r3, #31
 800a41a:	d503      	bpl.n	800a424 <_vprintf+0x32c>
 800a41c:	9b02      	ldr	r3, [sp, #8]
 800a41e:	429c      	cmp	r4, r3
 800a420:	bfa8      	it	ge
 800a422:	461c      	movge	r4, r3
 800a424:	9b01      	ldr	r3, [sp, #4]
 800a426:	065a      	lsls	r2, r3, #25
 800a428:	f104 0a01 	add.w	sl, r4, #1
 800a42c:	d403      	bmi.n	800a436 <_vprintf+0x33e>
 800a42e:	9b03      	ldr	r3, [sp, #12]
 800a430:	429c      	cmp	r4, r3
 800a432:	db05      	blt.n	800a440 <_vprintf+0x348>
 800a434:	4654      	mov	r4, sl
 800a436:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a43a:	e00d      	b.n	800a458 <_vprintf+0x360>
 800a43c:	3401      	adds	r4, #1
 800a43e:	e7e7      	b.n	800a410 <_vprintf+0x318>
 800a440:	2120      	movs	r1, #32
 800a442:	a801      	add	r0, sp, #4
 800a444:	f7ff fd78 	bl	8009f38 <_xputch>
 800a448:	4654      	mov	r4, sl
 800a44a:	e7eb      	b.n	800a424 <_vprintf+0x32c>
 800a44c:	a801      	add	r0, sp, #4
 800a44e:	f7ff fd73 	bl	8009f38 <_xputch>
 800a452:	9b02      	ldr	r3, [sp, #8]
 800a454:	3b01      	subs	r3, #1
 800a456:	9302      	str	r3, [sp, #8]
 800a458:	9b01      	ldr	r3, [sp, #4]
 800a45a:	07db      	lsls	r3, r3, #31
 800a45c:	d501      	bpl.n	800a462 <_vprintf+0x36a>
 800a45e:	9b02      	ldr	r3, [sp, #8]
 800a460:	b11b      	cbz	r3, 800a46a <_vprintf+0x372>
 800a462:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 800a466:	2900      	cmp	r1, #0
 800a468:	d1f0      	bne.n	800a44c <_vprintf+0x354>
 800a46a:	9b03      	ldr	r3, [sp, #12]
 800a46c:	429c      	cmp	r4, r3
 800a46e:	f6bf aeed 	bge.w	800a24c <_vprintf+0x154>
 800a472:	2120      	movs	r1, #32
 800a474:	a801      	add	r0, sp, #4
 800a476:	f7ff fd5f 	bl	8009f38 <_xputch>
 800a47a:	3401      	adds	r4, #1
 800a47c:	e7f5      	b.n	800a46a <_vprintf+0x372>
 800a47e:	9b01      	ldr	r3, [sp, #4]
 800a480:	f013 0304 	ands.w	r3, r3, #4
 800a484:	bf1d      	ittte	ne
 800a486:	3407      	addne	r4, #7
 800a488:	f024 0407 	bicne.w	r4, r4, #7
 800a48c:	4625      	movne	r5, r4
 800a48e:	4625      	moveq	r5, r4
 800a490:	bf1a      	itte	ne
 800a492:	f855 2b08 	ldrne.w	r2, [r5], #8
 800a496:	6863      	ldrne	r3, [r4, #4]
 800a498:	f855 2b04 	ldreq.w	r2, [r5], #4
 800a49c:	e6f0      	b.n	800a280 <_vprintf+0x188>
 800a49e:	9b01      	ldr	r3, [sp, #4]
 800a4a0:	f043 0302 	orr.w	r3, r3, #2
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	4625      	mov	r5, r4
 800a4a8:	f855 1b04 	ldr.w	r1, [r5], #4
 800a4ac:	e7a8      	b.n	800a400 <_vprintf+0x308>
 800a4ae:	bf00      	nop

0800a4b0 <printf>:
 800a4b0:	b40f      	push	{r0, r1, r2, r3}
 800a4b2:	b507      	push	{r0, r1, r2, lr}
 800a4b4:	aa04      	add	r2, sp, #16
 800a4b6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800a4ba:	f852 1b04 	ldr.w	r1, [r2], #4
 800a4be:	9201      	str	r2, [sp, #4]
 800a4c0:	f7ff fe1a 	bl	800a0f8 <_vprintf>
 800a4c4:	b003      	add	sp, #12
 800a4c6:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4ca:	b004      	add	sp, #16
 800a4cc:	4770      	bx	lr
	...

0800a4d0 <sprintf>:
 800a4d0:	b40e      	push	{r1, r2, r3}
 800a4d2:	b517      	push	{r0, r1, r2, r4, lr}
 800a4d4:	4c09      	ldr	r4, [pc, #36]	; (800a4fc <sprintf+0x2c>)
 800a4d6:	aa05      	add	r2, sp, #20
 800a4d8:	6020      	str	r0, [r4, #0]
 800a4da:	f852 1b04 	ldr.w	r1, [r2], #4
 800a4de:	9201      	str	r2, [sp, #4]
 800a4e0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800a4e4:	f7ff fe08 	bl	800a0f8 <_vprintf>
 800a4e8:	6822      	ldr	r2, [r4, #0]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	7013      	strb	r3, [r2, #0]
 800a4ee:	6023      	str	r3, [r4, #0]
 800a4f0:	b003      	add	sp, #12
 800a4f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4f6:	b003      	add	sp, #12
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	200000f8 	strdcs	r0, [r0], -r8

0800a500 <snprintf>:
 800a500:	b40c      	push	{r2, r3}
 800a502:	b513      	push	{r0, r1, r4, lr}
 800a504:	4c09      	ldr	r4, [pc, #36]	; (800a52c <snprintf+0x2c>)
 800a506:	aa04      	add	r2, sp, #16
 800a508:	460b      	mov	r3, r1
 800a50a:	6020      	str	r0, [r4, #0]
 800a50c:	f852 1b04 	ldr.w	r1, [r2], #4
 800a510:	9201      	str	r2, [sp, #4]
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff fdf0 	bl	800a0f8 <_vprintf>
 800a518:	6822      	ldr	r2, [r4, #0]
 800a51a:	2300      	movs	r3, #0
 800a51c:	7013      	strb	r3, [r2, #0]
 800a51e:	6023      	str	r3, [r4, #0]
 800a520:	b002      	add	sp, #8
 800a522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a526:	b002      	add	sp, #8
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	200000f8 	strdcs	r0, [r0], -r8

0800a530 <vsnprintf>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4c06      	ldr	r4, [pc, #24]	; (800a54c <vsnprintf+0x1c>)
 800a534:	4605      	mov	r5, r0
 800a536:	4608      	mov	r0, r1
 800a538:	4611      	mov	r1, r2
 800a53a:	461a      	mov	r2, r3
 800a53c:	6025      	str	r5, [r4, #0]
 800a53e:	f7ff fddb 	bl	800a0f8 <_vprintf>
 800a542:	6822      	ldr	r2, [r4, #0]
 800a544:	2300      	movs	r3, #0
 800a546:	7013      	strb	r3, [r2, #0]
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	200000f8 	strdcs	r0, [r0], -r8

0800a550 <__udivmoddi4>:
 800a550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a554:	9e08      	ldr	r6, [sp, #32]
 800a556:	460d      	mov	r5, r1
 800a558:	4604      	mov	r4, r0
 800a55a:	460f      	mov	r7, r1
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d14a      	bne.n	800a5f6 <__udivmoddi4+0xa6>
 800a560:	428a      	cmp	r2, r1
 800a562:	4694      	mov	ip, r2
 800a564:	d965      	bls.n	800a632 <__udivmoddi4+0xe2>
 800a566:	fab2 f382 	clz	r3, r2
 800a56a:	b143      	cbz	r3, 800a57e <__udivmoddi4+0x2e>
 800a56c:	fa02 fc03 	lsl.w	ip, r2, r3
 800a570:	f1c3 0220 	rsb	r2, r3, #32
 800a574:	409f      	lsls	r7, r3
 800a576:	fa20 f202 	lsr.w	r2, r0, r2
 800a57a:	4317      	orrs	r7, r2
 800a57c:	409c      	lsls	r4, r3
 800a57e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800a582:	fa1f f58c 	uxth.w	r5, ip
 800a586:	fbb7 f1fe 	udiv	r1, r7, lr
 800a58a:	0c22      	lsrs	r2, r4, #16
 800a58c:	fb0e 7711 	mls	r7, lr, r1, r7
 800a590:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800a594:	fb01 f005 	mul.w	r0, r1, r5
 800a598:	4290      	cmp	r0, r2
 800a59a:	d90a      	bls.n	800a5b2 <__udivmoddi4+0x62>
 800a59c:	eb1c 0202 	adds.w	r2, ip, r2
 800a5a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800a5a4:	f080 811c 	bcs.w	800a7e0 <__udivmoddi4+0x290>
 800a5a8:	4290      	cmp	r0, r2
 800a5aa:	f240 8119 	bls.w	800a7e0 <__udivmoddi4+0x290>
 800a5ae:	3902      	subs	r1, #2
 800a5b0:	4462      	add	r2, ip
 800a5b2:	1a12      	subs	r2, r2, r0
 800a5b4:	b2a4      	uxth	r4, r4
 800a5b6:	fbb2 f0fe 	udiv	r0, r2, lr
 800a5ba:	fb0e 2210 	mls	r2, lr, r0, r2
 800a5be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a5c2:	fb00 f505 	mul.w	r5, r0, r5
 800a5c6:	42a5      	cmp	r5, r4
 800a5c8:	d90a      	bls.n	800a5e0 <__udivmoddi4+0x90>
 800a5ca:	eb1c 0404 	adds.w	r4, ip, r4
 800a5ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a5d2:	f080 8107 	bcs.w	800a7e4 <__udivmoddi4+0x294>
 800a5d6:	42a5      	cmp	r5, r4
 800a5d8:	f240 8104 	bls.w	800a7e4 <__udivmoddi4+0x294>
 800a5dc:	4464      	add	r4, ip
 800a5de:	3802      	subs	r0, #2
 800a5e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800a5e4:	1b64      	subs	r4, r4, r5
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	b11e      	cbz	r6, 800a5f2 <__udivmoddi4+0xa2>
 800a5ea:	40dc      	lsrs	r4, r3
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	e9c6 4300 	strd	r4, r3, [r6]
 800a5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f6:	428b      	cmp	r3, r1
 800a5f8:	d908      	bls.n	800a60c <__udivmoddi4+0xbc>
 800a5fa:	2e00      	cmp	r6, #0
 800a5fc:	f000 80ed 	beq.w	800a7da <__udivmoddi4+0x28a>
 800a600:	2100      	movs	r1, #0
 800a602:	e9c6 0500 	strd	r0, r5, [r6]
 800a606:	4608      	mov	r0, r1
 800a608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a60c:	fab3 f183 	clz	r1, r3
 800a610:	2900      	cmp	r1, #0
 800a612:	d149      	bne.n	800a6a8 <__udivmoddi4+0x158>
 800a614:	42ab      	cmp	r3, r5
 800a616:	d302      	bcc.n	800a61e <__udivmoddi4+0xce>
 800a618:	4282      	cmp	r2, r0
 800a61a:	f200 80f8 	bhi.w	800a80e <__udivmoddi4+0x2be>
 800a61e:	1a84      	subs	r4, r0, r2
 800a620:	eb65 0203 	sbc.w	r2, r5, r3
 800a624:	2001      	movs	r0, #1
 800a626:	4617      	mov	r7, r2
 800a628:	2e00      	cmp	r6, #0
 800a62a:	d0e2      	beq.n	800a5f2 <__udivmoddi4+0xa2>
 800a62c:	e9c6 4700 	strd	r4, r7, [r6]
 800a630:	e7df      	b.n	800a5f2 <__udivmoddi4+0xa2>
 800a632:	b902      	cbnz	r2, 800a636 <__udivmoddi4+0xe6>
 800a634:	deff      	udf	#255	; 0xff
 800a636:	fab2 f382 	clz	r3, r2
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f040 8090 	bne.w	800a760 <__udivmoddi4+0x210>
 800a640:	1a8a      	subs	r2, r1, r2
 800a642:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800a646:	fa1f fe8c 	uxth.w	lr, ip
 800a64a:	2101      	movs	r1, #1
 800a64c:	fbb2 f5f7 	udiv	r5, r2, r7
 800a650:	fb07 2015 	mls	r0, r7, r5, r2
 800a654:	0c22      	lsrs	r2, r4, #16
 800a656:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800a65a:	fb0e f005 	mul.w	r0, lr, r5
 800a65e:	4290      	cmp	r0, r2
 800a660:	d908      	bls.n	800a674 <__udivmoddi4+0x124>
 800a662:	eb1c 0202 	adds.w	r2, ip, r2
 800a666:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800a66a:	d202      	bcs.n	800a672 <__udivmoddi4+0x122>
 800a66c:	4290      	cmp	r0, r2
 800a66e:	f200 80cb 	bhi.w	800a808 <__udivmoddi4+0x2b8>
 800a672:	4645      	mov	r5, r8
 800a674:	1a12      	subs	r2, r2, r0
 800a676:	b2a4      	uxth	r4, r4
 800a678:	fbb2 f0f7 	udiv	r0, r2, r7
 800a67c:	fb07 2210 	mls	r2, r7, r0, r2
 800a680:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a684:	fb0e fe00 	mul.w	lr, lr, r0
 800a688:	45a6      	cmp	lr, r4
 800a68a:	d908      	bls.n	800a69e <__udivmoddi4+0x14e>
 800a68c:	eb1c 0404 	adds.w	r4, ip, r4
 800a690:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a694:	d202      	bcs.n	800a69c <__udivmoddi4+0x14c>
 800a696:	45a6      	cmp	lr, r4
 800a698:	f200 80bb 	bhi.w	800a812 <__udivmoddi4+0x2c2>
 800a69c:	4610      	mov	r0, r2
 800a69e:	eba4 040e 	sub.w	r4, r4, lr
 800a6a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800a6a6:	e79f      	b.n	800a5e8 <__udivmoddi4+0x98>
 800a6a8:	f1c1 0720 	rsb	r7, r1, #32
 800a6ac:	408b      	lsls	r3, r1
 800a6ae:	fa22 fc07 	lsr.w	ip, r2, r7
 800a6b2:	ea4c 0c03 	orr.w	ip, ip, r3
 800a6b6:	fa05 f401 	lsl.w	r4, r5, r1
 800a6ba:	fa20 f307 	lsr.w	r3, r0, r7
 800a6be:	40fd      	lsrs	r5, r7
 800a6c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800a6c4:	4323      	orrs	r3, r4
 800a6c6:	fbb5 f8f9 	udiv	r8, r5, r9
 800a6ca:	fa1f fe8c 	uxth.w	lr, ip
 800a6ce:	fb09 5518 	mls	r5, r9, r8, r5
 800a6d2:	0c1c      	lsrs	r4, r3, #16
 800a6d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800a6d8:	fb08 f50e 	mul.w	r5, r8, lr
 800a6dc:	42a5      	cmp	r5, r4
 800a6de:	fa02 f201 	lsl.w	r2, r2, r1
 800a6e2:	fa00 f001 	lsl.w	r0, r0, r1
 800a6e6:	d90b      	bls.n	800a700 <__udivmoddi4+0x1b0>
 800a6e8:	eb1c 0404 	adds.w	r4, ip, r4
 800a6ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800a6f0:	f080 8088 	bcs.w	800a804 <__udivmoddi4+0x2b4>
 800a6f4:	42a5      	cmp	r5, r4
 800a6f6:	f240 8085 	bls.w	800a804 <__udivmoddi4+0x2b4>
 800a6fa:	f1a8 0802 	sub.w	r8, r8, #2
 800a6fe:	4464      	add	r4, ip
 800a700:	1b64      	subs	r4, r4, r5
 800a702:	b29d      	uxth	r5, r3
 800a704:	fbb4 f3f9 	udiv	r3, r4, r9
 800a708:	fb09 4413 	mls	r4, r9, r3, r4
 800a70c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800a710:	fb03 fe0e 	mul.w	lr, r3, lr
 800a714:	45a6      	cmp	lr, r4
 800a716:	d908      	bls.n	800a72a <__udivmoddi4+0x1da>
 800a718:	eb1c 0404 	adds.w	r4, ip, r4
 800a71c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800a720:	d26c      	bcs.n	800a7fc <__udivmoddi4+0x2ac>
 800a722:	45a6      	cmp	lr, r4
 800a724:	d96a      	bls.n	800a7fc <__udivmoddi4+0x2ac>
 800a726:	3b02      	subs	r3, #2
 800a728:	4464      	add	r4, ip
 800a72a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800a72e:	fba3 9502 	umull	r9, r5, r3, r2
 800a732:	eba4 040e 	sub.w	r4, r4, lr
 800a736:	42ac      	cmp	r4, r5
 800a738:	46c8      	mov	r8, r9
 800a73a:	46ae      	mov	lr, r5
 800a73c:	d356      	bcc.n	800a7ec <__udivmoddi4+0x29c>
 800a73e:	d053      	beq.n	800a7e8 <__udivmoddi4+0x298>
 800a740:	b156      	cbz	r6, 800a758 <__udivmoddi4+0x208>
 800a742:	ebb0 0208 	subs.w	r2, r0, r8
 800a746:	eb64 040e 	sbc.w	r4, r4, lr
 800a74a:	fa04 f707 	lsl.w	r7, r4, r7
 800a74e:	40ca      	lsrs	r2, r1
 800a750:	40cc      	lsrs	r4, r1
 800a752:	4317      	orrs	r7, r2
 800a754:	e9c6 7400 	strd	r7, r4, [r6]
 800a758:	4618      	mov	r0, r3
 800a75a:	2100      	movs	r1, #0
 800a75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a760:	f1c3 0120 	rsb	r1, r3, #32
 800a764:	fa02 fc03 	lsl.w	ip, r2, r3
 800a768:	fa20 f201 	lsr.w	r2, r0, r1
 800a76c:	fa25 f101 	lsr.w	r1, r5, r1
 800a770:	409d      	lsls	r5, r3
 800a772:	432a      	orrs	r2, r5
 800a774:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800a778:	fa1f fe8c 	uxth.w	lr, ip
 800a77c:	fbb1 f0f7 	udiv	r0, r1, r7
 800a780:	fb07 1510 	mls	r5, r7, r0, r1
 800a784:	0c11      	lsrs	r1, r2, #16
 800a786:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800a78a:	fb00 f50e 	mul.w	r5, r0, lr
 800a78e:	428d      	cmp	r5, r1
 800a790:	fa04 f403 	lsl.w	r4, r4, r3
 800a794:	d908      	bls.n	800a7a8 <__udivmoddi4+0x258>
 800a796:	eb1c 0101 	adds.w	r1, ip, r1
 800a79a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800a79e:	d22f      	bcs.n	800a800 <__udivmoddi4+0x2b0>
 800a7a0:	428d      	cmp	r5, r1
 800a7a2:	d92d      	bls.n	800a800 <__udivmoddi4+0x2b0>
 800a7a4:	3802      	subs	r0, #2
 800a7a6:	4461      	add	r1, ip
 800a7a8:	1b49      	subs	r1, r1, r5
 800a7aa:	b292      	uxth	r2, r2
 800a7ac:	fbb1 f5f7 	udiv	r5, r1, r7
 800a7b0:	fb07 1115 	mls	r1, r7, r5, r1
 800a7b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a7b8:	fb05 f10e 	mul.w	r1, r5, lr
 800a7bc:	4291      	cmp	r1, r2
 800a7be:	d908      	bls.n	800a7d2 <__udivmoddi4+0x282>
 800a7c0:	eb1c 0202 	adds.w	r2, ip, r2
 800a7c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800a7c8:	d216      	bcs.n	800a7f8 <__udivmoddi4+0x2a8>
 800a7ca:	4291      	cmp	r1, r2
 800a7cc:	d914      	bls.n	800a7f8 <__udivmoddi4+0x2a8>
 800a7ce:	3d02      	subs	r5, #2
 800a7d0:	4462      	add	r2, ip
 800a7d2:	1a52      	subs	r2, r2, r1
 800a7d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800a7d8:	e738      	b.n	800a64c <__udivmoddi4+0xfc>
 800a7da:	4631      	mov	r1, r6
 800a7dc:	4630      	mov	r0, r6
 800a7de:	e708      	b.n	800a5f2 <__udivmoddi4+0xa2>
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	e6e6      	b.n	800a5b2 <__udivmoddi4+0x62>
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	e6fb      	b.n	800a5e0 <__udivmoddi4+0x90>
 800a7e8:	4548      	cmp	r0, r9
 800a7ea:	d2a9      	bcs.n	800a740 <__udivmoddi4+0x1f0>
 800a7ec:	ebb9 0802 	subs.w	r8, r9, r2
 800a7f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	e7a3      	b.n	800a740 <__udivmoddi4+0x1f0>
 800a7f8:	4645      	mov	r5, r8
 800a7fa:	e7ea      	b.n	800a7d2 <__udivmoddi4+0x282>
 800a7fc:	462b      	mov	r3, r5
 800a7fe:	e794      	b.n	800a72a <__udivmoddi4+0x1da>
 800a800:	4640      	mov	r0, r8
 800a802:	e7d1      	b.n	800a7a8 <__udivmoddi4+0x258>
 800a804:	46d0      	mov	r8, sl
 800a806:	e77b      	b.n	800a700 <__udivmoddi4+0x1b0>
 800a808:	3d02      	subs	r5, #2
 800a80a:	4462      	add	r2, ip
 800a80c:	e732      	b.n	800a674 <__udivmoddi4+0x124>
 800a80e:	4608      	mov	r0, r1
 800a810:	e70a      	b.n	800a628 <__udivmoddi4+0xd8>
 800a812:	4464      	add	r4, ip
 800a814:	3802      	subs	r0, #2
 800a816:	e742      	b.n	800a69e <__udivmoddi4+0x14e>

0800a818 <RemoteConfig::HandleList()>:
 800a818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a81c:	6801      	ldr	r1, [r0, #0]
 800a81e:	4a2b      	ldr	r2, [pc, #172]	; (800a8cc <RemoteConfig::HandleList()+0xb4>)
 800a820:	4b2b      	ldr	r3, [pc, #172]	; (800a8d0 <RemoteConfig::HandleList()+0xb8>)
 800a822:	4e2c      	ldr	r6, [pc, #176]	; (800a8d4 <RemoteConfig::HandleList()+0xbc>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	6835      	ldr	r5, [r6, #0]
 800a828:	695f      	ldr	r7, [r3, #20]
 800a82a:	4604      	mov	r4, r0
 800a82c:	2012      	movs	r0, #18
 800a82e:	fb00 2201 	mla	r2, r0, r1, r2
 800a832:	6860      	ldr	r0, [r4, #4]
 800a834:	4928      	ldr	r1, [pc, #160]	; (800a8d8 <RemoteConfig::HandleList()+0xc0>)
 800a836:	f04f 080c 	mov.w	r8, #12
 800a83a:	fb08 1100 	mla	r1, r8, r0, r1
 800a83e:	4827      	ldr	r0, [pc, #156]	; (800a8dc <RemoteConfig::HandleList()+0xc4>)
 800a840:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800a844:	f890 9009 	ldrb.w	r9, [r0, #9]
 800a848:	b2fb      	uxtb	r3, r7
 800a84a:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 800a84e:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800a852:	b089      	sub	sp, #36	; 0x24
 800a854:	3507      	adds	r5, #7
 800a856:	0e3f      	lsrs	r7, r7, #24
 800a858:	f1b9 0f00 	cmp.w	r9, #0
 800a85c:	d01d      	beq.n	800a89a <RemoteConfig::HandleList()+0x82>
 800a85e:	3009      	adds	r0, #9
 800a860:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800a864:	e9cd 8005 	strd	r8, r0, [sp, #20]
 800a868:	e9cd e701 	strd	lr, r7, [sp, #4]
 800a86c:	4a1c      	ldr	r2, [pc, #112]	; (800a8e0 <RemoteConfig::HandleList()+0xc8>)
 800a86e:	f8cd c000 	str.w	ip, [sp]
 800a872:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800a876:	4628      	mov	r0, r5
 800a878:	f7ff fe42 	bl	800a500 <snprintf>
 800a87c:	69e3      	ldr	r3, [r4, #28]
 800a87e:	2b05      	cmp	r3, #5
 800a880:	d118      	bne.n	800a8b4 <RemoteConfig::HandleList()+0x9c>
 800a882:	f642 1305 	movw	r3, #10501	; 0x2905
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	69a3      	ldr	r3, [r4, #24]
 800a88a:	b282      	uxth	r2, r0
 800a88c:	4629      	mov	r1, r5
 800a88e:	7d20      	ldrb	r0, [r4, #20]
 800a890:	f009 fcc8 	bl	8014224 <udp_send>
 800a894:	b009      	add	sp, #36	; 0x24
 800a896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a89a:	e9cd 1804 	strd	r1, r8, [sp, #16]
 800a89e:	e9cd 7202 	strd	r7, r2, [sp, #8]
 800a8a2:	e9cd ce00 	strd	ip, lr, [sp]
 800a8a6:	4a0f      	ldr	r2, [pc, #60]	; (800a8e4 <RemoteConfig::HandleList()+0xcc>)
 800a8a8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	f7ff fe27 	bl	800a500 <snprintf>
 800a8b2:	e7e3      	b.n	800a87c <RemoteConfig::HandleList()+0x64>
 800a8b4:	2b06      	cmp	r3, #6
 800a8b6:	d1ed      	bne.n	800a894 <RemoteConfig::HandleList()+0x7c>
 800a8b8:	6833      	ldr	r3, [r6, #0]
 800a8ba:	799b      	ldrb	r3, [r3, #6]
 800a8bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a8be:	d1e9      	bne.n	800a894 <RemoteConfig::HandleList()+0x7c>
 800a8c0:	f642 1305 	movw	r3, #10501	; 0x2905
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8ca:	e7de      	b.n	800a88a <RemoteConfig::HandleList()+0x72>
 800a8cc:	0801ab90 	stmdaeq	r1, {r4, r7, r8, r9, fp, sp, pc}
 800a8d0:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 800a8d4:	200000fc 	strdcs	r0, [r0], -ip
 800a8d8:	0801ac56 	stmdaeq	r1, {r1, r2, r4, r6, sl, fp, sp, pc}
 800a8dc:	20000100 	andcs	r0, r0, r0, lsl #2
 800a8e0:	0801aaa5 	stmdaeq	r1, {r0, r2, r5, r7, r9, fp, sp, pc}
 800a8e4:	0801aabe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r9, fp, sp, pc}

0800a8e8 <RemoteConfig::HandleDisplayGet()>:
 800a8e8:	69c3      	ldr	r3, [r0, #28]
 800a8ea:	2b08      	cmp	r3, #8
 800a8ec:	d11b      	bne.n	800a926 <RemoteConfig::HandleDisplayGet()+0x3e>
 800a8ee:	4b0e      	ldr	r3, [pc, #56]	; (800a928 <RemoteConfig::HandleDisplayGet()+0x40>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8f4:	7c19      	ldrb	r1, [r3, #16]
 800a8f6:	4d0d      	ldr	r5, [pc, #52]	; (800a92c <RemoteConfig::HandleDisplayGet()+0x44>)
 800a8f8:	4a0d      	ldr	r2, [pc, #52]	; (800a930 <RemoteConfig::HandleDisplayGet()+0x48>)
 800a8fa:	4b0e      	ldr	r3, [pc, #56]	; (800a934 <RemoteConfig::HandleDisplayGet()+0x4c>)
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	2900      	cmp	r1, #0
 800a900:	bf18      	it	ne
 800a902:	4613      	movne	r3, r2
 800a904:	6828      	ldr	r0, [r5, #0]
 800a906:	4a0c      	ldr	r2, [pc, #48]	; (800a938 <RemoteConfig::HandleDisplayGet()+0x50>)
 800a908:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a90c:	f7ff fdf8 	bl	800a500 <snprintf>
 800a910:	f642 1305 	movw	r3, #10501	; 0x2905
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	b282      	uxth	r2, r0
 800a918:	69a3      	ldr	r3, [r4, #24]
 800a91a:	6829      	ldr	r1, [r5, #0]
 800a91c:	7d20      	ldrb	r0, [r4, #20]
 800a91e:	f009 fc81 	bl	8014224 <udp_send>
 800a922:	b003      	add	sp, #12
 800a924:	bd30      	pop	{r4, r5, pc}
 800a926:	4770      	bx	lr
 800a928:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0
 800a92c:	200000fc 	strdcs	r0, [r0], -ip
 800a930:	0801aad7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, fp, sp, pc}
 800a934:	0801aad4 	stmdaeq	r1, {r2, r4, r6, r7, r9, fp, sp, pc}
 800a938:	0801aadb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r9, fp, sp, pc}

0800a93c <RemoteConfig::HandleTftpGet()>:
 800a93c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a93e:	4604      	mov	r4, r0
 800a940:	f000 fdd4 	bl	800b4ec <RemoteConfig::PlatformHandleTftpGet()>
 800a944:	69e3      	ldr	r3, [r4, #28]
 800a946:	2b05      	cmp	r3, #5
 800a948:	d116      	bne.n	800a978 <RemoteConfig::HandleTftpGet()+0x3c>
 800a94a:	f894 1020 	ldrb.w	r1, [r4, #32]
 800a94e:	4d0b      	ldr	r5, [pc, #44]	; (800a97c <RemoteConfig::HandleTftpGet()+0x40>)
 800a950:	4a0b      	ldr	r2, [pc, #44]	; (800a980 <RemoteConfig::HandleTftpGet()+0x44>)
 800a952:	4b0c      	ldr	r3, [pc, #48]	; (800a984 <RemoteConfig::HandleTftpGet()+0x48>)
 800a954:	6828      	ldr	r0, [r5, #0]
 800a956:	2900      	cmp	r1, #0
 800a958:	bf08      	it	eq
 800a95a:	4613      	moveq	r3, r2
 800a95c:	4a0a      	ldr	r2, [pc, #40]	; (800a988 <RemoteConfig::HandleTftpGet()+0x4c>)
 800a95e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a962:	f7ff fdcd 	bl	800a500 <snprintf>
 800a966:	f642 1305 	movw	r3, #10501	; 0x2905
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	b282      	uxth	r2, r0
 800a96e:	69a3      	ldr	r3, [r4, #24]
 800a970:	6829      	ldr	r1, [r5, #0]
 800a972:	7d20      	ldrb	r0, [r4, #20]
 800a974:	f009 fc56 	bl	8014224 <udp_send>
 800a978:	b003      	add	sp, #12
 800a97a:	bd30      	pop	{r4, r5, pc}
 800a97c:	200000fc 	strdcs	r0, [r0], -ip
 800a980:	0801aad7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, fp, sp, pc}
 800a984:	0801aad4 	stmdaeq	r1, {r2, r4, r6, r7, r9, fp, sp, pc}
 800a988:	0801aae7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, fp, sp, pc}

0800a98c <RemoteConfig::HandleVersion()>:
 800a98c:	69c3      	ldr	r3, [r0, #28]
 800a98e:	2b08      	cmp	r3, #8
 800a990:	d114      	bne.n	800a9bc <RemoteConfig::HandleVersion()+0x30>
 800a992:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a994:	4d0a      	ldr	r5, [pc, #40]	; (800a9c0 <RemoteConfig::HandleVersion()+0x34>)
 800a996:	4b0b      	ldr	r3, [pc, #44]	; (800a9c4 <RemoteConfig::HandleVersion()+0x38>)
 800a998:	4a0b      	ldr	r2, [pc, #44]	; (800a9c8 <RemoteConfig::HandleVersion()+0x3c>)
 800a99a:	4604      	mov	r4, r0
 800a99c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a9a0:	6828      	ldr	r0, [r5, #0]
 800a9a2:	f7ff fdad 	bl	800a500 <snprintf>
 800a9a6:	f642 1305 	movw	r3, #10501	; 0x2905
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	b282      	uxth	r2, r0
 800a9ae:	69a3      	ldr	r3, [r4, #24]
 800a9b0:	6829      	ldr	r1, [r5, #0]
 800a9b2:	7d20      	ldrb	r0, [r4, #20]
 800a9b4:	f009 fc36 	bl	8014224 <udp_send>
 800a9b8:	b003      	add	sp, #12
 800a9ba:	bd30      	pop	{r4, r5, pc}
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	200000fc 	strdcs	r0, [r0], -ip
 800a9c4:	2000fd56 	andcs	pc, r0, r6, asr sp	; <UNPREDICTABLE>
 800a9c8:	0801aaf0 	stmdaeq	r1, {r4, r5, r6, r7, r9, fp, sp, pc}

0800a9cc <RemoteConfig::HandleUptime()>:
 800a9cc:	7bc3      	ldrb	r3, [r0, #15]
 800a9ce:	b1e3      	cbz	r3, 800aa0a <RemoteConfig::HandleUptime()+0x3e>
 800a9d0:	4b0e      	ldr	r3, [pc, #56]	; (800aa0c <RemoteConfig::HandleUptime()+0x40>)
 800a9d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	69c3      	ldr	r3, [r0, #28]
 800a9d8:	2b07      	cmp	r3, #7
 800a9da:	4604      	mov	r4, r0
 800a9dc:	d113      	bne.n	800aa06 <RemoteConfig::HandleUptime()+0x3a>
 800a9de:	4d0c      	ldr	r5, [pc, #48]	; (800aa10 <RemoteConfig::HandleUptime()+0x44>)
 800a9e0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a9e4:	6828      	ldr	r0, [r5, #0]
 800a9e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ee:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <RemoteConfig::HandleUptime()+0x48>)
 800a9f0:	f7ff fd86 	bl	800a500 <snprintf>
 800a9f4:	f642 1305 	movw	r3, #10501	; 0x2905
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	b282      	uxth	r2, r0
 800a9fc:	69a3      	ldr	r3, [r4, #24]
 800a9fe:	6829      	ldr	r1, [r5, #0]
 800aa00:	7d20      	ldrb	r0, [r4, #20]
 800aa02:	f009 fc0f 	bl	8014224 <udp_send>
 800aa06:	b003      	add	sp, #12
 800aa08:	bd30      	pop	{r4, r5, pc}
 800aa0a:	4770      	bx	lr
 800aa0c:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 800aa10:	200000fc 	strdcs	r0, [r0], -ip
 800aa14:	0801aafb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r9, fp, sp, pc}

0800aa18 <Display::Status(Display7SegmentMessage)>:
 800aa18:	7c43      	ldrb	r3, [r0, #17]
 800aa1a:	b1bb      	cbz	r3, 800aa4c <Display::Status(Display7SegmentMessage)+0x34>
 800aa1c:	b513      	push	{r0, r1, r4, lr}
 800aa1e:	2312      	movs	r3, #18
 800aa20:	43c9      	mvns	r1, r1
 800aa22:	4604      	mov	r4, r0
 800aa24:	f88d 3004 	strb.w	r3, [sp, #4]
 800aa28:	7a00      	ldrb	r0, [r0, #8]
 800aa2a:	f88d 1006 	strb.w	r1, [sp, #6]
 800aa2e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800aa32:	f88d 3005 	strb.w	r3, [sp, #5]
 800aa36:	f00f f8c9 	bl	8019bcc <gd32_i2c_set_address>
 800aa3a:	68e0      	ldr	r0, [r4, #12]
 800aa3c:	f00f f8be 	bl	8019bbc <gd32_i2c_set_baudrate>
 800aa40:	2103      	movs	r1, #3
 800aa42:	a801      	add	r0, sp, #4
 800aa44:	f00f f8c8 	bl	8019bd8 <gd32_i2c_write>
 800aa48:	b002      	add	sp, #8
 800aa4a:	bd10      	pop	{r4, pc}
 800aa4c:	4770      	bx	lr
	...

0800aa50 <RemoteConfig::HandleDisplaySet()>:
 800aa50:	b508      	push	{r3, lr}
 800aa52:	69c3      	ldr	r3, [r0, #28]
 800aa54:	2b09      	cmp	r3, #9
 800aa56:	d10a      	bne.n	800aa6e <RemoteConfig::HandleDisplaySet()+0x1e>
 800aa58:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <RemoteConfig::HandleDisplaySet()+0x20>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	7a59      	ldrb	r1, [r3, #9]
 800aa5e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800aa62:	4259      	negs	r1, r3
 800aa64:	4159      	adcs	r1, r3
 800aa66:	4b03      	ldr	r3, [pc, #12]	; (800aa74 <RemoteConfig::HandleDisplaySet()+0x24>)
 800aa68:	6818      	ldr	r0, [r3, #0]
 800aa6a:	f7fe fca1 	bl	80093b0 <Display::SetSleep(bool)>
 800aa6e:	bd08      	pop	{r3, pc}
 800aa70:	200000fc 	strdcs	r0, [r0], -ip
 800aa74:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0

0800aa78 <RemoteConfig::HandleTftpSet()>:
 800aa78:	69c3      	ldr	r3, [r0, #28]
 800aa7a:	2b06      	cmp	r3, #6
 800aa7c:	d127      	bne.n	800aace <RemoteConfig::HandleTftpSet()+0x56>
 800aa7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa80:	4b13      	ldr	r3, [pc, #76]	; (800aad0 <RemoteConfig::HandleTftpSet()+0x58>)
 800aa82:	4d14      	ldr	r5, [pc, #80]	; (800aad4 <RemoteConfig::HandleTftpSet()+0x5c>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	799b      	ldrb	r3, [r3, #6]
 800aa88:	2b30      	cmp	r3, #48	; 0x30
 800aa8a:	bf14      	ite	ne
 800aa8c:	2301      	movne	r3, #1
 800aa8e:	2300      	moveq	r3, #0
 800aa90:	4604      	mov	r4, r0
 800aa92:	f880 3020 	strb.w	r3, [r0, #32]
 800aa96:	6828      	ldr	r0, [r5, #0]
 800aa98:	d012      	beq.n	800aac0 <RemoteConfig::HandleTftpSet()+0x48>
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	f7fe fc88 	bl	80093b0 <Display::SetSleep(bool)>
 800aaa0:	6828      	ldr	r0, [r5, #0]
 800aaa2:	490d      	ldr	r1, [pc, #52]	; (800aad8 <RemoteConfig::HandleTftpSet()+0x60>)
 800aaa4:	9001      	str	r0, [sp, #4]
 800aaa6:	f7fe fc25 	bl	80092f4 <Display::TextStatus(char const*)>
 800aaaa:	f244 0171 	movw	r1, #16497	; 0x4071
 800aaae:	9801      	ldr	r0, [sp, #4]
 800aab0:	f7ff ffb2 	bl	800aa18 <Display::Status(Display7SegmentMessage)>
 800aab4:	4620      	mov	r0, r4
 800aab6:	b003      	add	sp, #12
 800aab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aabc:	f000 bd0e 	b.w	800b4dc <RemoteConfig::PlatformHandleTftpSet()>
 800aac0:	4906      	ldr	r1, [pc, #24]	; (800aadc <RemoteConfig::HandleTftpSet()+0x64>)
 800aac2:	9001      	str	r0, [sp, #4]
 800aac4:	f7fe fc16 	bl	80092f4 <Display::TextStatus(char const*)>
 800aac8:	f248 0171 	movw	r1, #32881	; 0x8071
 800aacc:	e7ef      	b.n	800aaae <RemoteConfig::HandleTftpSet()+0x36>
 800aace:	4770      	bx	lr
 800aad0:	200000fc 	strdcs	r0, [r0], -ip
 800aad4:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0
 800aad8:	0801ab08 	stmdaeq	r1, {r3, r8, r9, fp, sp, pc}
 800aadc:	0801ab1a 	stmdaeq	r1, {r1, r3, r4, r8, r9, fp, sp, pc}

0800aae0 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800aae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae4:	2500      	movs	r5, #0
 800aae6:	461f      	mov	r7, r3
 800aae8:	6083      	str	r3, [r0, #8]
 800aaea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aaee:	4e13      	ldr	r6, [pc, #76]	; (800ab3c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x5c>)
 800aaf0:	f8df a050 	ldr.w	sl, [pc, #80]	; 800ab44 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x64>
 800aaf4:	60c5      	str	r5, [r0, #12]
 800aaf6:	e9c0 3505 	strd	r3, r5, [r0, #20]
 800aafa:	4b11      	ldr	r3, [pc, #68]	; (800ab40 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x60>)
 800aafc:	8205      	strh	r5, [r0, #16]
 800aafe:	e9c0 1200 	strd	r1, r2, [r0]
 800ab02:	4604      	mov	r4, r0
 800ab04:	6018      	str	r0, [r3, #0]
 800ab06:	4689      	mov	r9, r1
 800ab08:	61c5      	str	r5, [r0, #28]
 800ab0a:	f880 5020 	strb.w	r5, [r0, #32]
 800ab0e:	4631      	mov	r1, r6
 800ab10:	f8da 0000 	ldr.w	r0, [sl]
 800ab14:	4690      	mov	r8, r2
 800ab16:	f00a f858 	bl	8014bca <Network::MacAddressCopyTo(unsigned char*)>
 800ab1a:	f8da 0000 	ldr.w	r0, [sl]
 800ab1e:	f886 9006 	strb.w	r9, [r6, #6]
 800ab22:	f642 1105 	movw	r1, #10501	; 0x2905
 800ab26:	f886 8007 	strb.w	r8, [r6, #7]
 800ab2a:	7237      	strb	r7, [r6, #8]
 800ab2c:	7275      	strb	r5, [r6, #9]
 800ab2e:	f00a f846 	bl	8014bbe <Network::Begin(unsigned short)>
 800ab32:	6160      	str	r0, [r4, #20]
 800ab34:	4620      	mov	r0, r4
 800ab36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab3a:	bf00      	nop
 800ab3c:	20000100 	andcs	r0, r0, r0, lsl #2
 800ab40:	20000124 	andcs	r0, r0, r4, lsr #2
 800ab44:	2000f9ac 	andcs	pc, r0, ip, lsr #19

0800ab48 <RemoteConfig::GetStringNode() const>:
 800ab48:	4b03      	ldr	r3, [pc, #12]	; (800ab58 <RemoteConfig::GetStringNode() const+0x10>)
 800ab4a:	7998      	ldrb	r0, [r3, #6]
 800ab4c:	4b03      	ldr	r3, [pc, #12]	; (800ab5c <RemoteConfig::GetStringNode() const+0x14>)
 800ab4e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800ab52:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ab56:	4770      	bx	lr
 800ab58:	20000100 	andcs	r0, r0, r0, lsl #2
 800ab5c:	0801ab90 	stmdaeq	r1, {r4, r7, r8, r9, fp, sp, pc}

0800ab60 <RemoteConfig::GetStringOutput() const>:
 800ab60:	4b03      	ldr	r3, [pc, #12]	; (800ab70 <RemoteConfig::GetStringOutput() const+0x10>)
 800ab62:	79d8      	ldrb	r0, [r3, #7]
 800ab64:	4b03      	ldr	r3, [pc, #12]	; (800ab74 <RemoteConfig::GetStringOutput() const+0x14>)
 800ab66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ab6a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ab6e:	4770      	bx	lr
 800ab70:	20000100 	andcs	r0, r0, r0, lsl #2
 800ab74:	0801ac56 	stmdaeq	r1, {r1, r2, r4, r6, sl, fp, sp, pc}

0800ab78 <RemoteConfig::SetDisable(bool)>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	7b03      	ldrb	r3, [r0, #12]
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	b161      	cbz	r1, 800ab9a <RemoteConfig::SetDisable(bool)+0x22>
 800ab80:	b953      	cbnz	r3, 800ab98 <RemoteConfig::SetDisable(bool)+0x20>
 800ab82:	4b0c      	ldr	r3, [pc, #48]	; (800abb4 <RemoteConfig::SetDisable(bool)+0x3c>)
 800ab84:	f642 1105 	movw	r1, #10501	; 0x2905
 800ab88:	6818      	ldr	r0, [r3, #0]
 800ab8a:	f00a f81b 	bl	8014bc4 <Network::End(unsigned short)>
 800ab8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab92:	6163      	str	r3, [r4, #20]
 800ab94:	2301      	movs	r3, #1
 800ab96:	7323      	strb	r3, [r4, #12]
 800ab98:	bd38      	pop	{r3, r4, r5, pc}
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d0fc      	beq.n	800ab98 <RemoteConfig::SetDisable(bool)+0x20>
 800ab9e:	4b05      	ldr	r3, [pc, #20]	; (800abb4 <RemoteConfig::SetDisable(bool)+0x3c>)
 800aba0:	460d      	mov	r5, r1
 800aba2:	6818      	ldr	r0, [r3, #0]
 800aba4:	f642 1105 	movw	r1, #10501	; 0x2905
 800aba8:	f00a f809 	bl	8014bbe <Network::Begin(unsigned short)>
 800abac:	7325      	strb	r5, [r4, #12]
 800abae:	6160      	str	r0, [r4, #20]
 800abb0:	e7f2      	b.n	800ab98 <RemoteConfig::SetDisable(bool)+0x20>
 800abb2:	bf00      	nop
 800abb4:	2000f9ac 	andcs	pc, r0, ip, lsr #19

0800abb8 <RemoteConfig::SetDisplayName(char const*)>:
 800abb8:	4809      	ldr	r0, [pc, #36]	; (800abe0 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800abba:	b508      	push	{r3, lr}
 800abbc:	2217      	movs	r2, #23
 800abbe:	1e4b      	subs	r3, r1, #1
 800abc0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800abc4:	b911      	cbnz	r1, 800abcc <RemoteConfig::SetDisplayName(char const*)+0x14>
 800abc6:	f00d fb89 	bl	80182dc <memset>
 800abca:	e003      	b.n	800abd4 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800abcc:	3a01      	subs	r2, #1
 800abce:	f800 1b01 	strb.w	r1, [r0], #1
 800abd2:	d1f5      	bne.n	800abc0 <RemoteConfig::SetDisplayName(char const*)+0x8>
 800abd4:	4b03      	ldr	r3, [pc, #12]	; (800abe4 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 2020 	strb.w	r2, [r3, #32]
 800abdc:	bd08      	pop	{r3, pc}
 800abde:	bf00      	nop
 800abe0:	20000109 	andcs	r0, r0, r9, lsl #2
 800abe4:	20000100 	andcs	r0, r0, r0, lsl #2

0800abe8 <RemoteConfig::HandleGet(void*, unsigned int)>:
 800abe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abea:	4f2a      	ldr	r7, [pc, #168]	; (800ac94 <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 800abec:	b085      	sub	sp, #20
 800abee:	4604      	mov	r4, r0
 800abf0:	4616      	mov	r6, r2
 800abf2:	460d      	mov	r5, r1
 800abf4:	b9a9      	cbnz	r1, 800ac22 <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800abf6:	6839      	ldr	r1, [r7, #0]
 800abf8:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800abfc:	aa03      	add	r2, sp, #12
 800abfe:	3105      	adds	r1, #5
 800ac00:	9303      	str	r3, [sp, #12]
 800ac02:	f000 fc41 	bl	800b488 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800ac06:	1e03      	subs	r3, r0, #0
 800ac08:	da1b      	bge.n	800ac42 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800ac0a:	f642 1305 	movw	r3, #10501	; 0x2905
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	4921      	ldr	r1, [pc, #132]	; (800ac98 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800ac12:	69a3      	ldr	r3, [r4, #24]
 800ac14:	7d20      	ldrb	r0, [r4, #20]
 800ac16:	220b      	movs	r2, #11
 800ac18:	f009 fb04 	bl	8014224 <udp_send>
 800ac1c:	200c      	movs	r0, #12
 800ac1e:	b005      	add	sp, #20
 800ac20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac22:	9203      	str	r2, [sp, #12]
 800ac24:	aa03      	add	r2, sp, #12
 800ac26:	6039      	str	r1, [r7, #0]
 800ac28:	f000 fc2e 	bl	800b488 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800ac2c:	1e03      	subs	r3, r0, #0
 800ac2e:	da08      	bge.n	800ac42 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800ac30:	2e0b      	cmp	r6, #11
 800ac32:	4632      	mov	r2, r6
 800ac34:	4918      	ldr	r1, [pc, #96]	; (800ac98 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800ac36:	bf28      	it	cs
 800ac38:	220b      	movcs	r2, #11
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	f00d fb2c 	bl	8018298 <memcpy>
 800ac40:	e7ec      	b.n	800ac1c <RemoteConfig::HandleGet(void*, unsigned int)+0x34>
 800ac42:	4916      	ldr	r1, [pc, #88]	; (800ac9c <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 800ac44:	221c      	movs	r2, #28
 800ac46:	4353      	muls	r3, r2
 800ac48:	18ca      	adds	r2, r1, r3
 800ac4a:	58cb      	ldr	r3, [r1, r3]
 800ac4c:	6852      	ldr	r2, [r2, #4]
 800ac4e:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800ac52:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800ac56:	07d2      	lsls	r2, r2, #31
 800ac58:	bf48      	it	mi
 800ac5a:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800ac5e:	a903      	add	r1, sp, #12
 800ac60:	bf48      	it	mi
 800ac62:	58d3      	ldrmi	r3, [r2, r3]
 800ac64:	4798      	blx	r3
 800ac66:	b95d      	cbnz	r5, 800ac80 <RemoteConfig::HandleGet(void*, unsigned int)+0x98>
 800ac68:	f642 1305 	movw	r3, #10501	; 0x2905
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800ac72:	69a3      	ldr	r3, [r4, #24]
 800ac74:	6839      	ldr	r1, [r7, #0]
 800ac76:	7d20      	ldrb	r0, [r4, #20]
 800ac78:	f009 fad4 	bl	8014224 <udp_send>
 800ac7c:	9803      	ldr	r0, [sp, #12]
 800ac7e:	e7ce      	b.n	800ac1e <RemoteConfig::HandleGet(void*, unsigned int)+0x36>
 800ac80:	9a03      	ldr	r2, [sp, #12]
 800ac82:	6839      	ldr	r1, [r7, #0]
 800ac84:	42b2      	cmp	r2, r6
 800ac86:	bf28      	it	cs
 800ac88:	4632      	movcs	r2, r6
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	f00d fb0f 	bl	80182ae <memmove>
 800ac90:	e7f4      	b.n	800ac7c <RemoteConfig::HandleGet(void*, unsigned int)+0x94>
 800ac92:	bf00      	nop
 800ac94:	200000fc 	strdcs	r0, [r0], -ip
 800ac98:	0801ab2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, fp, sp, pc}
 800ac9c:	0801ae28 	stmdaeq	r1, {r3, r5, r9, sl, fp, sp, pc}

0800aca0 <RemoteConfig::HandleGetNoParams()>:
 800aca0:	2200      	movs	r2, #0
 800aca2:	4611      	mov	r1, r2
 800aca4:	f7ff bfa0 	b.w	800abe8 <RemoteConfig::HandleGet(void*, unsigned int)>

0800aca8 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800aca8:	b500      	push	{lr}
 800acaa:	4a09      	ldr	r2, [pc, #36]	; (800acd0 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800acac:	b08d      	sub	sp, #52	; 0x34
 800acae:	a803      	add	r0, sp, #12
 800acb0:	9101      	str	r1, [sp, #4]
 800acb2:	6811      	ldr	r1, [r2, #0]
 800acb4:	f000 fa44 	bl	800b140 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800acb8:	4906      	ldr	r1, [pc, #24]	; (800acd4 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x2c>)
 800acba:	9b01      	ldr	r3, [sp, #4]
 800acbc:	6809      	ldr	r1, [r1, #0]
 800acbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800acc2:	a803      	add	r0, sp, #12
 800acc4:	f000 fb60 	bl	800b388 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800acc8:	b00d      	add	sp, #52	; 0x34
 800acca:	f85d fb04 	ldr.w	pc, [sp], #4
 800acce:	bf00      	nop
 800acd0:	2000fc94 	mulcs	r0, r4, ip
 800acd4:	200000fc 	strdcs	r0, [r0], -ip

0800acd8 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800acd8:	b500      	push	{lr}
 800acda:	4a09      	ldr	r2, [pc, #36]	; (800ad00 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800acdc:	b09d      	sub	sp, #116	; 0x74
 800acde:	a803      	add	r0, sp, #12
 800ace0:	9101      	str	r1, [sp, #4]
 800ace2:	6811      	ldr	r1, [r2, #0]
 800ace4:	f00a fa7e 	bl	80151e4 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800ace8:	4906      	ldr	r1, [pc, #24]	; (800ad04 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x2c>)
 800acea:	9b01      	ldr	r3, [sp, #4]
 800acec:	6809      	ldr	r1, [r1, #0]
 800acee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800acf2:	a803      	add	r0, sp, #12
 800acf4:	f00a fc50 	bl	8015598 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800acf8:	b01d      	add	sp, #116	; 0x74
 800acfa:	f85d fb04 	ldr.w	pc, [sp], #4
 800acfe:	bf00      	nop
 800ad00:	2000fc90 	mulcs	r0, r0, ip
 800ad04:	200000fc 	strdcs	r0, [r0], -ip

0800ad08 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 800ad08:	b500      	push	{lr}
 800ad0a:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 800ad0c:	b0a7      	sub	sp, #156	; 0x9c
 800ad0e:	a803      	add	r0, sp, #12
 800ad10:	9101      	str	r1, [sp, #4]
 800ad12:	6811      	ldr	r1, [r2, #0]
 800ad14:	f003 f810 	bl	800dd38 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800ad18:	4906      	ldr	r1, [pc, #24]	; (800ad34 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x2c>)
 800ad1a:	9b01      	ldr	r3, [sp, #4]
 800ad1c:	6809      	ldr	r1, [r1, #0]
 800ad1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad22:	a803      	add	r0, sp, #12
 800ad24:	f003 fbba 	bl	800e49c <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 800ad28:	b027      	add	sp, #156	; 0x9c
 800ad2a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad2e:	bf00      	nop
 800ad30:	2000fc9c 	mulcs	r0, ip, ip
 800ad34:	200000fc 	strdcs	r0, [r0], -ip

0800ad38 <RemoteConfig::HandleGetE131Txt(unsigned int&)>:
 800ad38:	b500      	push	{lr}
 800ad3a:	4a09      	ldr	r2, [pc, #36]	; (800ad60 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x28>)
 800ad3c:	b08d      	sub	sp, #52	; 0x34
 800ad3e:	a803      	add	r0, sp, #12
 800ad40:	9101      	str	r1, [sp, #4]
 800ad42:	6811      	ldr	r1, [r2, #0]
 800ad44:	f004 fbf0 	bl	800f528 <E131Params::E131Params(E131ParamsStore*)>
 800ad48:	4906      	ldr	r1, [pc, #24]	; (800ad64 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x2c>)
 800ad4a:	9b01      	ldr	r3, [sp, #4]
 800ad4c:	6809      	ldr	r1, [r1, #0]
 800ad4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad52:	a803      	add	r0, sp, #12
 800ad54:	f004 fed2 	bl	800fafc <E131Params::Save(char*, unsigned int, unsigned int&)>
 800ad58:	b00d      	add	sp, #52	; 0x34
 800ad5a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad5e:	bf00      	nop
 800ad60:	2000fca4 	andcs	pc, r0, r4, lsr #25
 800ad64:	200000fc 	strdcs	r0, [r0], -ip

0800ad68 <RemoteConfig::HandleGetParamsTxt(unsigned int&)>:
 800ad68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ad6a:	4a08      	ldr	r2, [pc, #32]	; (800ad8c <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x24>)
 800ad6c:	9101      	str	r1, [sp, #4]
 800ad6e:	a802      	add	r0, sp, #8
 800ad70:	6811      	ldr	r1, [r2, #0]
 800ad72:	f006 f9f5 	bl	8011160 <DmxParams::DmxParams(DmxParamsStore*)>
 800ad76:	4906      	ldr	r1, [pc, #24]	; (800ad90 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x28>)
 800ad78:	9b01      	ldr	r3, [sp, #4]
 800ad7a:	6809      	ldr	r1, [r1, #0]
 800ad7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad80:	a802      	add	r0, sp, #8
 800ad82:	f006 fb0f 	bl	80113a4 <DmxParams::Save(char*, unsigned int, unsigned int&)>
 800ad86:	b007      	add	sp, #28
 800ad88:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad8c:	2000fc8c 	andcs	pc, r0, ip, lsl #25
 800ad90:	200000fc 	strdcs	r0, [r0], -ip

0800ad94 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 800ad94:	b500      	push	{lr}
 800ad96:	4a09      	ldr	r2, [pc, #36]	; (800adbc <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 800ad98:	b093      	sub	sp, #76	; 0x4c
 800ad9a:	a803      	add	r0, sp, #12
 800ad9c:	9101      	str	r1, [sp, #4]
 800ad9e:	6811      	ldr	r1, [r2, #0]
 800ada0:	f007 f8c2 	bl	8011f28 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 800ada4:	4906      	ldr	r1, [pc, #24]	; (800adc0 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x2c>)
 800ada6:	9b01      	ldr	r3, [sp, #4]
 800ada8:	6809      	ldr	r1, [r1, #0]
 800adaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800adae:	a803      	add	r0, sp, #12
 800adb0:	f007 fbe2 	bl	8012578 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)>
 800adb4:	b013      	add	sp, #76	; 0x4c
 800adb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800adba:	bf00      	nop
 800adbc:	2000fca8 	andcs	pc, r0, r8, lsr #25
 800adc0:	200000fc 	strdcs	r0, [r0], -ip

0800adc4 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800adc4:	b500      	push	{lr}
 800adc6:	4a09      	ldr	r2, [pc, #36]	; (800adec <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800adc8:	b08d      	sub	sp, #52	; 0x34
 800adca:	a802      	add	r0, sp, #8
 800adcc:	9101      	str	r1, [sp, #4]
 800adce:	6811      	ldr	r1, [r2, #0]
 800add0:	f00b f988 	bl	80160e4 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800add4:	4906      	ldr	r1, [pc, #24]	; (800adf0 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x2c>)
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	6809      	ldr	r1, [r1, #0]
 800adda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800adde:	a802      	add	r0, sp, #8
 800ade0:	f00b faba 	bl	8016358 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800ade4:	b00d      	add	sp, #52	; 0x34
 800ade6:	f85d fb04 	ldr.w	pc, [sp], #4
 800adea:	bf00      	nop
 800adec:	2000fc88 	andcs	pc, r0, r8, lsl #25
 800adf0:	200000fc 	strdcs	r0, [r0], -ip

0800adf4 <RemoteConfig::HandleSet(void*, unsigned int)>:
 800adf4:	b530      	push	{r4, r5, lr}
 800adf6:	b085      	sub	sp, #20
 800adf8:	4604      	mov	r4, r0
 800adfa:	9201      	str	r2, [sp, #4]
 800adfc:	b9d1      	cbnz	r1, 800ae34 <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 800adfe:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800ae02:	9303      	str	r3, [sp, #12]
 800ae04:	4b19      	ldr	r3, [pc, #100]	; (800ae6c <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 800ae06:	6819      	ldr	r1, [r3, #0]
 800ae08:	aa03      	add	r2, sp, #12
 800ae0a:	3101      	adds	r1, #1
 800ae0c:	f000 fb3c 	bl	800b488 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800ae10:	2800      	cmp	r0, #0
 800ae12:	db0d      	blt.n	800ae30 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800ae14:	4b16      	ldr	r3, [pc, #88]	; (800ae70 <RemoteConfig::HandleSet(void*, unsigned int)+0x7c>)
 800ae16:	221c      	movs	r2, #28
 800ae18:	fb02 3300 	mla	r3, r2, r0, r3
 800ae1c:	68da      	ldr	r2, [r3, #12]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	1051      	asrs	r1, r2, #1
 800ae22:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800ae26:	07d2      	lsls	r2, r2, #31
 800ae28:	bf44      	itt	mi
 800ae2a:	5862      	ldrmi	r2, [r4, r1]
 800ae2c:	58d3      	ldrmi	r3, [r2, r3]
 800ae2e:	4798      	blx	r3
 800ae30:	b005      	add	sp, #20
 800ae32:	bd30      	pop	{r4, r5, pc}
 800ae34:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ae38:	d8fa      	bhi.n	800ae30 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800ae3a:	4b0e      	ldr	r3, [pc, #56]	; (800ae74 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	460d      	mov	r5, r1
 800ae40:	07d9      	lsls	r1, r3, #31
 800ae42:	d50b      	bpl.n	800ae5c <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 800ae44:	782b      	ldrb	r3, [r5, #0]
 800ae46:	2b7b      	cmp	r3, #123	; 0x7b
 800ae48:	d108      	bne.n	800ae5c <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 800ae4a:	1e51      	subs	r1, r2, #1
 800ae4c:	b289      	uxth	r1, r1
 800ae4e:	2200      	movs	r2, #0
 800ae50:	4628      	mov	r0, r5
 800ae52:	f00c fa47 	bl	80172e4 <properties::convert_json_file(char*, unsigned short, bool)>
 800ae56:	1e02      	subs	r2, r0, #0
 800ae58:	ddea      	ble.n	800ae30 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800ae5a:	b292      	uxth	r2, r2
 800ae5c:	4b03      	ldr	r3, [pc, #12]	; (800ae6c <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 800ae5e:	61e2      	str	r2, [r4, #28]
 800ae60:	601d      	str	r5, [r3, #0]
 800ae62:	aa01      	add	r2, sp, #4
 800ae64:	1c69      	adds	r1, r5, #1
 800ae66:	4620      	mov	r0, r4
 800ae68:	e7d0      	b.n	800ae0c <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800ae6a:	bf00      	nop
 800ae6c:	200000fc 	strdcs	r0, [r0], -ip
 800ae70:	0801ae28 	stmdaeq	r1, {r3, r5, r9, sl, fp, sp, pc}
 800ae74:	2000fcac 	andcs	pc, r0, ip, lsr #25

0800ae78 <RemoteConfig::Run()>:
 800ae78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ae7c:	7b05      	ldrb	r5, [r0, #12]
 800ae7e:	2d00      	cmp	r5, #0
 800ae80:	d156      	bne.n	800af30 <RemoteConfig::Run()+0xb8>
 800ae82:	4e45      	ldr	r6, [pc, #276]	; (800af98 <RemoteConfig::Run()+0x120>)
 800ae84:	4604      	mov	r4, r0
 800ae86:	f100 0218 	add.w	r2, r0, #24
 800ae8a:	f10d 030e 	add.w	r3, sp, #14
 800ae8e:	7d00      	ldrb	r0, [r0, #20]
 800ae90:	4631      	mov	r1, r6
 800ae92:	f009 f9a1 	bl	80141d8 <udp_recv2>
 800ae96:	2803      	cmp	r0, #3
 800ae98:	61e0      	str	r0, [r4, #28]
 800ae9a:	d949      	bls.n	800af30 <RemoteConfig::Run()+0xb8>
 800ae9c:	1e43      	subs	r3, r0, #1
 800ae9e:	6831      	ldr	r1, [r6, #0]
 800aea0:	5cca      	ldrb	r2, [r1, r3]
 800aea2:	2a0a      	cmp	r2, #10
 800aea4:	bf18      	it	ne
 800aea6:	4603      	movne	r3, r0
 800aea8:	61e3      	str	r3, [r4, #28]
 800aeaa:	7808      	ldrb	r0, [r1, #0]
 800aeac:	283f      	cmp	r0, #63	; 0x3f
 800aeae:	d137      	bne.n	800af20 <RemoteConfig::Run()+0xa8>
 800aeb0:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 800afb0 <RemoteConfig::Run()+0x138>
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	61e3      	str	r3, [r4, #28]
 800aeb8:	462a      	mov	r2, r5
 800aeba:	4667      	mov	r7, ip
 800aebc:	f89c 500e 	ldrb.w	r5, [ip, #14]
 800aec0:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 800aec4:	b16d      	cbz	r5, 800aee2 <RemoteConfig::Run()+0x6a>
 800aec6:	4283      	cmp	r3, r0
 800aec8:	d80d      	bhi.n	800aee6 <RemoteConfig::Run()+0x6e>
 800aeca:	3201      	adds	r2, #1
 800aecc:	2a09      	cmp	r2, #9
 800aece:	f10c 0c10 	add.w	ip, ip, #16
 800aed2:	d1f3      	bne.n	800aebc <RemoteConfig::Run()+0x44>
 800aed4:	f642 1305 	movw	r3, #10501	; 0x2905
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	69a3      	ldr	r3, [r4, #24]
 800aedc:	492f      	ldr	r1, [pc, #188]	; (800af9c <RemoteConfig::Run()+0x124>)
 800aede:	2208      	movs	r2, #8
 800aee0:	e04e      	b.n	800af80 <RemoteConfig::Run()+0x108>
 800aee2:	4283      	cmp	r3, r0
 800aee4:	d1f1      	bne.n	800aeca <RemoteConfig::Run()+0x52>
 800aee6:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800aeea:	460e      	mov	r6, r1
 800aeec:	3d01      	subs	r5, #1
 800aeee:	4408      	add	r0, r1
 800aef0:	4286      	cmp	r6, r0
 800aef2:	d10b      	bne.n	800af0c <RemoteConfig::Run()+0x94>
 800aef4:	0113      	lsls	r3, r2, #4
 800aef6:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800aefa:	58fb      	ldr	r3, [r7, r3]
 800aefc:	6852      	ldr	r2, [r2, #4]
 800aefe:	1051      	asrs	r1, r2, #1
 800af00:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800af04:	07d2      	lsls	r2, r2, #31
 800af06:	d408      	bmi.n	800af1a <RemoteConfig::Run()+0xa2>
 800af08:	4798      	blx	r3
 800af0a:	e011      	b.n	800af30 <RemoteConfig::Run()+0xb8>
 800af0c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800af10:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 800af14:	45f0      	cmp	r8, lr
 800af16:	d0eb      	beq.n	800aef0 <RemoteConfig::Run()+0x78>
 800af18:	e7d7      	b.n	800aeca <RemoteConfig::Run()+0x52>
 800af1a:	5862      	ldr	r2, [r4, r1]
 800af1c:	58d3      	ldr	r3, [r2, r3]
 800af1e:	e7f3      	b.n	800af08 <RemoteConfig::Run()+0x90>
 800af20:	7b62      	ldrb	r2, [r4, #13]
 800af22:	b92a      	cbnz	r2, 800af30 <RemoteConfig::Run()+0xb8>
 800af24:	2823      	cmp	r0, #35	; 0x23
 800af26:	d106      	bne.n	800af36 <RemoteConfig::Run()+0xbe>
 800af28:	4611      	mov	r1, r2
 800af2a:	4620      	mov	r0, r4
 800af2c:	f7ff ff62 	bl	800adf4 <RemoteConfig::HandleSet(void*, unsigned int)>
 800af30:	b004      	add	sp, #16
 800af32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af36:	2821      	cmp	r0, #33	; 0x21
 800af38:	d1fa      	bne.n	800af30 <RemoteConfig::Run()+0xb8>
 800af3a:	3b01      	subs	r3, #1
 800af3c:	2b05      	cmp	r3, #5
 800af3e:	61e3      	str	r3, [r4, #28]
 800af40:	d918      	bls.n	800af74 <RemoteConfig::Run()+0xfc>
 800af42:	4d17      	ldr	r5, [pc, #92]	; (800afa0 <RemoteConfig::Run()+0x128>)
 800af44:	460a      	mov	r2, r1
 800af46:	f101 0c05 	add.w	ip, r1, #5
 800af4a:	4608      	mov	r0, r1
 800af4c:	4560      	cmp	r0, ip
 800af4e:	d01b      	beq.n	800af88 <RemoteConfig::Run()+0x110>
 800af50:	f815 6b01 	ldrb.w	r6, [r5], #1
 800af54:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800af58:	42b7      	cmp	r7, r6
 800af5a:	d0f7      	beq.n	800af4c <RemoteConfig::Run()+0xd4>
 800af5c:	2b08      	cmp	r3, #8
 800af5e:	d909      	bls.n	800af74 <RemoteConfig::Run()+0xfc>
 800af60:	4b10      	ldr	r3, [pc, #64]	; (800afa4 <RemoteConfig::Run()+0x12c>)
 800af62:	3108      	adds	r1, #8
 800af64:	428a      	cmp	r2, r1
 800af66:	d015      	beq.n	800af94 <RemoteConfig::Run()+0x11c>
 800af68:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af6c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800af70:	4285      	cmp	r5, r0
 800af72:	d0f7      	beq.n	800af64 <RemoteConfig::Run()+0xec>
 800af74:	f642 1305 	movw	r3, #10501	; 0x2905
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	69a3      	ldr	r3, [r4, #24]
 800af7c:	490a      	ldr	r1, [pc, #40]	; (800afa8 <RemoteConfig::Run()+0x130>)
 800af7e:	2208      	movs	r2, #8
 800af80:	7d20      	ldrb	r0, [r4, #20]
 800af82:	f009 f94f 	bl	8014224 <udp_send>
 800af86:	e7d3      	b.n	800af30 <RemoteConfig::Run()+0xb8>
 800af88:	2300      	movs	r3, #0
 800af8a:	4a08      	ldr	r2, [pc, #32]	; (800afac <RemoteConfig::Run()+0x134>)
 800af8c:	011b      	lsls	r3, r3, #4
 800af8e:	4620      	mov	r0, r4
 800af90:	58d3      	ldr	r3, [r2, r3]
 800af92:	e7b9      	b.n	800af08 <RemoteConfig::Run()+0x90>
 800af94:	2301      	movs	r3, #1
 800af96:	e7f8      	b.n	800af8a <RemoteConfig::Run()+0x112>
 800af98:	200000fc 	strdcs	r0, [r0], -ip
 800af9c:	0801ab51 	stmdaeq	r1, {r0, r4, r6, r8, r9, fp, sp, pc}
 800afa0:	0801ab39 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, fp, sp, pc}
 800afa4:	0801ab3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, r9, fp, sp, pc}
 800afa8:	0801ab48 	stmdaeq	r1, {r3, r6, r8, r9, fp, sp, pc}
 800afac:	0801ad78 	stmdaeq	r1, {r3, r4, r5, r6, r8, sl, fp, sp, pc}
 800afb0:	0801ace8 	stmdaeq	r1, {r3, r5, r6, r7, sl, fp, sp, pc}

0800afb4 <RemoteConfig::HandleSetRconfig()>:
 800afb4:	b510      	push	{r4, lr}
 800afb6:	4b09      	ldr	r3, [pc, #36]	; (800afdc <RemoteConfig::HandleSetRconfig()+0x28>)
 800afb8:	b08a      	sub	sp, #40	; 0x28
 800afba:	4604      	mov	r4, r0
 800afbc:	6819      	ldr	r1, [r3, #0]
 800afbe:	a801      	add	r0, sp, #4
 800afc0:	f000 f8be 	bl	800b140 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800afc4:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <RemoteConfig::HandleSetRconfig()+0x2c>)
 800afc6:	69e2      	ldr	r2, [r4, #28]
 800afc8:	6819      	ldr	r1, [r3, #0]
 800afca:	a801      	add	r0, sp, #4
 800afcc:	f000 f8ce 	bl	800b16c <RemoteConfigParams::Load(char const*, unsigned int)>
 800afd0:	4621      	mov	r1, r4
 800afd2:	a801      	add	r0, sp, #4
 800afd4:	f000 f9e5 	bl	800b3a2 <RemoteConfigParams::Set(RemoteConfig*)>
 800afd8:	b00a      	add	sp, #40	; 0x28
 800afda:	bd10      	pop	{r4, pc}
 800afdc:	2000fc94 	mulcs	r0, r4, ip
 800afe0:	200000fc 	strdcs	r0, [r0], -ip

0800afe4 <RemoteConfig::HandleSetNetworkTxt()>:
 800afe4:	b510      	push	{r4, lr}
 800afe6:	4b07      	ldr	r3, [pc, #28]	; (800b004 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800afe8:	b09a      	sub	sp, #104	; 0x68
 800afea:	6819      	ldr	r1, [r3, #0]
 800afec:	4604      	mov	r4, r0
 800afee:	a801      	add	r0, sp, #4
 800aff0:	f00a f8f8 	bl	80151e4 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800aff4:	4b04      	ldr	r3, [pc, #16]	; (800b008 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800aff6:	69e2      	ldr	r2, [r4, #28]
 800aff8:	6819      	ldr	r1, [r3, #0]
 800affa:	a801      	add	r0, sp, #4
 800affc:	f00a f90a 	bl	8015214 <NetworkParams::Load(char const*, unsigned int)>
 800b000:	b01a      	add	sp, #104	; 0x68
 800b002:	bd10      	pop	{r4, pc}
 800b004:	2000fc90 	mulcs	r0, r0, ip
 800b008:	200000fc 	strdcs	r0, [r0], -ip

0800b00c <RemoteConfig::HandleSetArtnetTxt()>:
 800b00c:	b510      	push	{r4, lr}
 800b00e:	4b07      	ldr	r3, [pc, #28]	; (800b02c <RemoteConfig::HandleSetArtnetTxt()+0x20>)
 800b010:	b0a4      	sub	sp, #144	; 0x90
 800b012:	6819      	ldr	r1, [r3, #0]
 800b014:	4604      	mov	r4, r0
 800b016:	a801      	add	r0, sp, #4
 800b018:	f002 fe8e 	bl	800dd38 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800b01c:	4b04      	ldr	r3, [pc, #16]	; (800b030 <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 800b01e:	69e2      	ldr	r2, [r4, #28]
 800b020:	6819      	ldr	r1, [r3, #0]
 800b022:	a801      	add	r0, sp, #4
 800b024:	f002 feb6 	bl	800dd94 <ArtNetParams::Load(char const*, unsigned int)>
 800b028:	b024      	add	sp, #144	; 0x90
 800b02a:	bd10      	pop	{r4, pc}
 800b02c:	2000fc9c 	mulcs	r0, ip, ip
 800b030:	200000fc 	strdcs	r0, [r0], -ip

0800b034 <RemoteConfig::HandleSetE131Txt()>:
 800b034:	b510      	push	{r4, lr}
 800b036:	4b07      	ldr	r3, [pc, #28]	; (800b054 <RemoteConfig::HandleSetE131Txt()+0x20>)
 800b038:	b08a      	sub	sp, #40	; 0x28
 800b03a:	6819      	ldr	r1, [r3, #0]
 800b03c:	4604      	mov	r4, r0
 800b03e:	a801      	add	r0, sp, #4
 800b040:	f004 fa72 	bl	800f528 <E131Params::E131Params(E131ParamsStore*)>
 800b044:	4b04      	ldr	r3, [pc, #16]	; (800b058 <RemoteConfig::HandleSetE131Txt()+0x24>)
 800b046:	69e2      	ldr	r2, [r4, #28]
 800b048:	6819      	ldr	r1, [r3, #0]
 800b04a:	a801      	add	r0, sp, #4
 800b04c:	f004 fa90 	bl	800f570 <E131Params::Load(char const*, unsigned int)>
 800b050:	b00a      	add	sp, #40	; 0x28
 800b052:	bd10      	pop	{r4, pc}
 800b054:	2000fca4 	andcs	pc, r0, r4, lsr #25
 800b058:	200000fc 	strdcs	r0, [r0], -ip

0800b05c <RemoteConfig::HandleSetParamsTxt()>:
 800b05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b05e:	4b07      	ldr	r3, [pc, #28]	; (800b07c <RemoteConfig::HandleSetParamsTxt()+0x20>)
 800b060:	4604      	mov	r4, r0
 800b062:	6819      	ldr	r1, [r3, #0]
 800b064:	4668      	mov	r0, sp
 800b066:	f006 f87b 	bl	8011160 <DmxParams::DmxParams(DmxParamsStore*)>
 800b06a:	4b05      	ldr	r3, [pc, #20]	; (800b080 <RemoteConfig::HandleSetParamsTxt()+0x24>)
 800b06c:	69e2      	ldr	r2, [r4, #28]
 800b06e:	6819      	ldr	r1, [r3, #0]
 800b070:	4668      	mov	r0, sp
 800b072:	f006 f88d 	bl	8011190 <DmxParams::Load(char const*, unsigned int)>
 800b076:	b004      	add	sp, #16
 800b078:	bd10      	pop	{r4, pc}
 800b07a:	bf00      	nop
 800b07c:	2000fc8c 	andcs	pc, r0, ip, lsl #25
 800b080:	200000fc 	strdcs	r0, [r0], -ip

0800b084 <RemoteConfig::HandleSetDevicesTxt()>:
 800b084:	b510      	push	{r4, lr}
 800b086:	4b07      	ldr	r3, [pc, #28]	; (800b0a4 <RemoteConfig::HandleSetDevicesTxt()+0x20>)
 800b088:	b090      	sub	sp, #64	; 0x40
 800b08a:	6819      	ldr	r1, [r3, #0]
 800b08c:	4604      	mov	r4, r0
 800b08e:	a801      	add	r0, sp, #4
 800b090:	f006 ff4a 	bl	8011f28 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 800b094:	4b04      	ldr	r3, [pc, #16]	; (800b0a8 <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 800b096:	69e2      	ldr	r2, [r4, #28]
 800b098:	6819      	ldr	r1, [r3, #0]
 800b09a:	a801      	add	r0, sp, #4
 800b09c:	f006 ff80 	bl	8011fa0 <PixelDmxParams::Load(char const*, unsigned int)>
 800b0a0:	b010      	add	sp, #64	; 0x40
 800b0a2:	bd10      	pop	{r4, pc}
 800b0a4:	2000fca8 	andcs	pc, r0, r8, lsr #25
 800b0a8:	200000fc 	strdcs	r0, [r0], -ip

0800b0ac <RemoteConfig::HandleSetDisplayTxt()>:
 800b0ac:	b510      	push	{r4, lr}
 800b0ae:	4b07      	ldr	r3, [pc, #28]	; (800b0cc <RemoteConfig::HandleSetDisplayTxt()+0x20>)
 800b0b0:	b08a      	sub	sp, #40	; 0x28
 800b0b2:	6819      	ldr	r1, [r3, #0]
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	4668      	mov	r0, sp
 800b0b8:	f00b f814 	bl	80160e4 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800b0bc:	4b04      	ldr	r3, [pc, #16]	; (800b0d0 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800b0be:	69e2      	ldr	r2, [r4, #28]
 800b0c0:	6819      	ldr	r1, [r3, #0]
 800b0c2:	4668      	mov	r0, sp
 800b0c4:	f00b f828 	bl	8016118 <DisplayUdfParams::Load(char const*, unsigned int)>
 800b0c8:	b00a      	add	sp, #40	; 0x28
 800b0ca:	bd10      	pop	{r4, pc}
 800b0cc:	2000fc88 	andcs	pc, r0, r8, lsl #25
 800b0d0:	200000fc 	strdcs	r0, [r0], -ip

0800b0d4 <RemoteConfig::HandleFactory()>:
 800b0d4:	b538      	push	{r3, r4, r5, lr}
 800b0d6:	4d05      	ldr	r5, [pc, #20]	; (800b0ec <RemoteConfig::HandleFactory()+0x18>)
 800b0d8:	2400      	movs	r4, #0
 800b0da:	4621      	mov	r1, r4
 800b0dc:	6828      	ldr	r0, [r5, #0]
 800b0de:	3401      	adds	r4, #1
 800b0e0:	f00b fb88 	bl	80167f4 <ConfigStore::ResetSetList(configstore::Store)>
 800b0e4:	2c1c      	cmp	r4, #28
 800b0e6:	d1f8      	bne.n	800b0da <RemoteConfig::HandleFactory()+0x6>
 800b0e8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ea:	bf00      	nop
 800b0ec:	2000fc80 	andcs	pc, r0, r0, lsl #25

0800b0f0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800b0f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	8885      	ldrh	r5, [r0, #4]
 800b0f6:	88c1      	ldrh	r1, [r0, #6]
 800b0f8:	42a9      	cmp	r1, r5
 800b0fa:	d214      	bcs.n	800b126 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	6800      	ldr	r0, [r0, #0]
 800b100:	1a6d      	subs	r5, r5, r1
 800b102:	4408      	add	r0, r1
 800b104:	7a21      	ldrb	r1, [r4, #8]
 800b106:	b91a      	cbnz	r2, 800b110 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800b108:	b919      	cbnz	r1, 800b112 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800b10a:	4a0a      	ldr	r2, [pc, #40]	; (800b134 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800b10c:	9100      	str	r1, [sp, #0]
 800b10e:	e002      	b.n	800b116 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b110:	b159      	cbz	r1, 800b12a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800b112:	9200      	str	r2, [sp, #0]
 800b114:	4a08      	ldr	r2, [pc, #32]	; (800b138 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800b116:	4629      	mov	r1, r5
 800b118:	f7ff f9f2 	bl	800a500 <snprintf>
 800b11c:	4285      	cmp	r5, r0
 800b11e:	bfa2      	ittt	ge
 800b120:	88e3      	ldrhge	r3, [r4, #6]
 800b122:	181b      	addge	r3, r3, r0
 800b124:	80e3      	strhge	r3, [r4, #6]
 800b126:	b003      	add	sp, #12
 800b128:	bd30      	pop	{r4, r5, pc}
 800b12a:	2201      	movs	r2, #1
 800b12c:	9200      	str	r2, [sp, #0]
 800b12e:	4a03      	ldr	r2, [pc, #12]	; (800b13c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800b130:	e7f1      	b.n	800b116 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b132:	bf00      	nop
 800b134:	0801ada1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, sp, pc}
 800b138:	0801ad98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, sp, pc}
 800b13c:	0801ada2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, sp, pc}

0800b140 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800b140:	b510      	push	{r4, lr}
 800b142:	2220      	movs	r2, #32
 800b144:	4604      	mov	r4, r0
 800b146:	f840 1b04 	str.w	r1, [r0], #4
 800b14a:	2100      	movs	r1, #0
 800b14c:	f00d f8c6 	bl	80182dc <memset>
 800b150:	4620      	mov	r0, r4
 800b152:	bd10      	pop	{r4, pc}

0800b154 <RemoteConfigParams::Load()>:
 800b154:	b508      	push	{r3, lr}
 800b156:	2300      	movs	r3, #0
 800b158:	4601      	mov	r1, r0
 800b15a:	6043      	str	r3, [r0, #4]
 800b15c:	6800      	ldr	r0, [r0, #0]
 800b15e:	b120      	cbz	r0, 800b16a <RemoteConfigParams::Load()+0x16>
 800b160:	6803      	ldr	r3, [r0, #0]
 800b162:	3104      	adds	r1, #4
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	4798      	blx	r3
 800b168:	2001      	movs	r0, #1
 800b16a:	bd08      	pop	{r3, pc}

0800b16c <RemoteConfigParams::Load(char const*, unsigned int)>:
 800b16c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b16e:	2300      	movs	r3, #0
 800b170:	6043      	str	r3, [r0, #4]
 800b172:	4604      	mov	r4, r0
 800b174:	460d      	mov	r5, r1
 800b176:	4616      	mov	r6, r2
 800b178:	490a      	ldr	r1, [pc, #40]	; (800b1a4 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800b17a:	4602      	mov	r2, r0
 800b17c:	4668      	mov	r0, sp
 800b17e:	f00c fa03 	bl	8017588 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800b182:	4632      	mov	r2, r6
 800b184:	4629      	mov	r1, r5
 800b186:	4668      	mov	r0, sp
 800b188:	f00c fa02 	bl	8017590 <ReadConfigFile::Read(char const*, unsigned int)>
 800b18c:	4621      	mov	r1, r4
 800b18e:	f851 0b04 	ldr.w	r0, [r1], #4
 800b192:	6803      	ldr	r3, [r0, #0]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	4798      	blx	r3
 800b198:	4668      	mov	r0, sp
 800b19a:	f00c f9f8 	bl	801758e <ReadConfigFile::~ReadConfigFile()>
 800b19e:	b002      	add	sp, #8
 800b1a0:	bd70      	pop	{r4, r5, r6, pc}
 800b1a2:	bf00      	nop
 800b1a4:	0800b265 	stmdaeq	r0, {r0, r2, r5, r6, r9, ip, sp, pc}

0800b1a8 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800b1a8:	6843      	ldr	r3, [r0, #4]
 800b1aa:	b111      	cbz	r1, 800b1b2 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800b1ac:	431a      	orrs	r2, r3
 800b1ae:	6042      	str	r2, [r0, #4]
 800b1b0:	4770      	bx	lr
 800b1b2:	ea23 0202 	bic.w	r2, r3, r2
 800b1b6:	e7fa      	b.n	800b1ae <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800b1b8 <RemoteConfigParams::callbackFunction(char const*)>:
 800b1b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ba:	460d      	mov	r5, r1
 800b1bc:	4604      	mov	r4, r0
 800b1be:	4923      	ldr	r1, [pc, #140]	; (800b24c <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800b1c0:	f10d 0203 	add.w	r2, sp, #3
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	f00c fb14 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b1ca:	b940      	cbnz	r0, 800b1de <RemoteConfigParams::callbackFunction(char const*)+0x26>
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	b003      	add	sp, #12
 800b1d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1da:	f7ff bfe5 	b.w	800b1a8 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800b1de:	491c      	ldr	r1, [pc, #112]	; (800b250 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800b1e0:	f10d 0203 	add.w	r2, sp, #3
 800b1e4:	4628      	mov	r0, r5
 800b1e6:	f00c fb04 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b1ea:	b908      	cbnz	r0, 800b1f0 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 800b1ec:	2202      	movs	r2, #2
 800b1ee:	e7ee      	b.n	800b1ce <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800b1f0:	4918      	ldr	r1, [pc, #96]	; (800b254 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800b1f2:	f10d 0203 	add.w	r2, sp, #3
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	f00c fafb 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b1fc:	b908      	cbnz	r0, 800b202 <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 800b1fe:	2204      	movs	r2, #4
 800b200:	e7e5      	b.n	800b1ce <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800b202:	4915      	ldr	r1, [pc, #84]	; (800b258 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800b204:	f10d 0203 	add.w	r2, sp, #3
 800b208:	4628      	mov	r0, r5
 800b20a:	f00c faf2 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b20e:	b908      	cbnz	r0, 800b214 <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 800b210:	2208      	movs	r2, #8
 800b212:	e7dc      	b.n	800b1ce <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800b214:	4911      	ldr	r1, [pc, #68]	; (800b25c <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800b216:	f10d 0203 	add.w	r2, sp, #3
 800b21a:	4628      	mov	r0, r5
 800b21c:	f00c fae9 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b220:	b908      	cbnz	r0, 800b226 <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 800b222:	2220      	movs	r2, #32
 800b224:	e7d3      	b.n	800b1ce <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800b226:	2317      	movs	r3, #23
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	490d      	ldr	r1, [pc, #52]	; (800b260 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800b22c:	ab01      	add	r3, sp, #4
 800b22e:	f104 020c 	add.w	r2, r4, #12
 800b232:	4628      	mov	r0, r5
 800b234:	f00c f9e0 	bl	80175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b238:	b930      	cbnz	r0, 800b248 <RemoteConfigParams::callbackFunction(char const*)+0x90>
 800b23a:	9b01      	ldr	r3, [sp, #4]
 800b23c:	4423      	add	r3, r4
 800b23e:	7318      	strb	r0, [r3, #12]
 800b240:	6863      	ldr	r3, [r4, #4]
 800b242:	f043 0310 	orr.w	r3, r3, #16
 800b246:	6063      	str	r3, [r4, #4]
 800b248:	b003      	add	sp, #12
 800b24a:	bd30      	pop	{r4, r5, pc}
 800b24c:	0801b1d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, ip, sp, pc}
 800b250:	0801b1f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r8, ip, sp, pc}
 800b254:	0801b200 	stmdaeq	r1, {r9, ip, sp, pc}
 800b258:	0801b20e 	stmdaeq	r1, {r1, r2, r3, r9, ip, sp, pc}
 800b25c:	0801b21c 	stmdaeq	r1, {r2, r3, r4, r9, ip, sp, pc}
 800b260:	0801b1e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, ip, sp, pc}

0800b264 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800b264:	f7ff bfa8 	b.w	800b1b8 <RemoteConfigParams::callbackFunction(char const*)>

0800b268 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800b268:	b570      	push	{r4, r5, r6, lr}
 800b26a:	4604      	mov	r4, r0
 800b26c:	b086      	sub	sp, #24
 800b26e:	4615      	mov	r5, r2
 800b270:	461e      	mov	r6, r3
 800b272:	3004      	adds	r0, #4
 800b274:	2900      	cmp	r1, #0
 800b276:	d041      	beq.n	800b2fc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 800b278:	2220      	movs	r2, #32
 800b27a:	f00d f818 	bl	80182ae <memmove>
 800b27e:	4633      	mov	r3, r6
 800b280:	462a      	mov	r2, r5
 800b282:	4937      	ldr	r1, [pc, #220]	; (800b360 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800b284:	a803      	add	r0, sp, #12
 800b286:	f00c f8df 	bl	8017448 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800b28a:	6862      	ldr	r2, [r4, #4]
 800b28c:	4935      	ldr	r1, [pc, #212]	; (800b364 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800b28e:	f002 0201 	and.w	r2, r2, #1
 800b292:	a803      	add	r0, sp, #12
 800b294:	f7ff ff2c 	bl	800b0f0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b298:	6862      	ldr	r2, [r4, #4]
 800b29a:	4933      	ldr	r1, [pc, #204]	; (800b368 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800b29c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800b2a0:	a803      	add	r0, sp, #12
 800b2a2:	f7ff ff25 	bl	800b0f0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b2a6:	6862      	ldr	r2, [r4, #4]
 800b2a8:	4930      	ldr	r1, [pc, #192]	; (800b36c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800b2aa:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800b2ae:	a803      	add	r0, sp, #12
 800b2b0:	f7ff ff1e 	bl	800b0f0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b2b4:	6862      	ldr	r2, [r4, #4]
 800b2b6:	492e      	ldr	r1, [pc, #184]	; (800b370 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800b2b8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800b2bc:	a803      	add	r0, sp, #12
 800b2be:	f7ff ff17 	bl	800b0f0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b2c2:	6862      	ldr	r2, [r4, #4]
 800b2c4:	492b      	ldr	r1, [pc, #172]	; (800b374 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800b2c6:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800b2ca:	a803      	add	r0, sp, #12
 800b2cc:	f7ff ff10 	bl	800b0f0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b2d0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b2d4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800b2d8:	6862      	ldr	r2, [r4, #4]
 800b2da:	42ab      	cmp	r3, r5
 800b2dc:	d223      	bcs.n	800b326 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 800b2de:	9803      	ldr	r0, [sp, #12]
 800b2e0:	06d2      	lsls	r2, r2, #27
 800b2e2:	4418      	add	r0, r3
 800b2e4:	eba5 0503 	sub.w	r5, r5, r3
 800b2e8:	f104 040c 	add.w	r4, r4, #12
 800b2ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b2f0:	d40b      	bmi.n	800b30a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800b2f2:	b95b      	cbnz	r3, 800b30c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 800b2f4:	4b20      	ldr	r3, [pc, #128]	; (800b378 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800b2f6:	4a21      	ldr	r2, [pc, #132]	; (800b37c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800b2f8:	9400      	str	r4, [sp, #0]
 800b2fa:	e00a      	b.n	800b312 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800b2fc:	6823      	ldr	r3, [r4, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	4601      	mov	r1, r0
 800b302:	68d2      	ldr	r2, [r2, #12]
 800b304:	4618      	mov	r0, r3
 800b306:	4790      	blx	r2
 800b308:	e7b9      	b.n	800b27e <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800b30a:	b32b      	cbz	r3, 800b358 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 800b30c:	4b1a      	ldr	r3, [pc, #104]	; (800b378 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800b30e:	4a1c      	ldr	r2, [pc, #112]	; (800b380 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800b310:	9400      	str	r4, [sp, #0]
 800b312:	4629      	mov	r1, r5
 800b314:	f7ff f8f4 	bl	800a500 <snprintf>
 800b318:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b31c:	4285      	cmp	r5, r0
 800b31e:	bfa4      	itt	ge
 800b320:	181b      	addge	r3, r3, r0
 800b322:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800b326:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b32a:	b17b      	cbz	r3, 800b34c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 800b32c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b330:	9b03      	ldr	r3, [sp, #12]
 800b332:	4413      	add	r3, r2
 800b334:	227d      	movs	r2, #125	; 0x7d
 800b336:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b33a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b33e:	9903      	ldr	r1, [sp, #12]
 800b340:	54ca      	strb	r2, [r1, r3]
 800b342:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b346:	3301      	adds	r3, #1
 800b348:	f8ad 3012 	strh.w	r3, [sp, #18]
 800b34c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b352:	601a      	str	r2, [r3, #0]
 800b354:	b006      	add	sp, #24
 800b356:	bd70      	pop	{r4, r5, r6, pc}
 800b358:	4b07      	ldr	r3, [pc, #28]	; (800b378 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800b35a:	4a0a      	ldr	r2, [pc, #40]	; (800b384 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800b35c:	9400      	str	r4, [sp, #0]
 800b35e:	e7d8      	b.n	800b312 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800b360:	0801b1d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, ip, sp, pc}
 800b364:	0801b1d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, ip, sp, pc}
 800b368:	0801b1f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r8, ip, sp, pc}
 800b36c:	0801b200 	stmdaeq	r1, {r9, ip, sp, pc}
 800b370:	0801b20e 	stmdaeq	r1, {r1, r2, r3, r9, ip, sp, pc}
 800b374:	0801b21c 	stmdaeq	r1, {r2, r3, r4, r9, ip, sp, pc}
 800b378:	0801b1e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, ip, sp, pc}
 800b37c:	0801adb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, fp, sp, pc}
 800b380:	0801ada9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, fp, sp, pc}
 800b384:	0801adb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, sl, fp, sp, pc}

0800b388 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800b388:	b513      	push	{r0, r1, r4, lr}
 800b38a:	6804      	ldr	r4, [r0, #0]
 800b38c:	b914      	cbnz	r4, 800b394 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800b38e:	601c      	str	r4, [r3, #0]
 800b390:	b002      	add	sp, #8
 800b392:	bd10      	pop	{r4, pc}
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	4613      	mov	r3, r2
 800b398:	460a      	mov	r2, r1
 800b39a:	2100      	movs	r1, #0
 800b39c:	f7ff ff64 	bl	800b268 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800b3a0:	e7f6      	b.n	800b390 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800b3a2 <RemoteConfigParams::Set(RemoteConfig*)>:
 800b3a2:	b538      	push	{r3, r4, r5, lr}
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	6841      	ldr	r1, [r0, #4]
 800b3a8:	4605      	mov	r5, r0
 800b3aa:	f001 0101 	and.w	r1, r1, #1
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7ff fbe2 	bl	800ab78 <RemoteConfig::SetDisable(bool)>
 800b3b4:	686b      	ldr	r3, [r5, #4]
 800b3b6:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800b3ba:	7362      	strb	r2, [r4, #13]
 800b3bc:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800b3c0:	73a2      	strb	r2, [r4, #14]
 800b3c2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800b3c6:	73e2      	strb	r2, [r4, #15]
 800b3c8:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800b3cc:	06db      	lsls	r3, r3, #27
 800b3ce:	7422      	strb	r2, [r4, #16]
 800b3d0:	d506      	bpl.n	800b3e0 <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 800b3d2:	f105 010c 	add.w	r1, r5, #12
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3dc:	f7ff bbec 	b.w	800abb8 <RemoteConfig::SetDisplayName(char const*)>
 800b3e0:	bd38      	pop	{r3, r4, r5, pc}

0800b3e2 <RemoteConfigParams::Dump()>:
 800b3e2:	4770      	bx	lr

0800b3e4 <RemoteConfig::HandleReboot()>:
 800b3e4:	7b83      	ldrb	r3, [r0, #14]
 800b3e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d03c      	beq.n	800b466 <RemoteConfig::HandleReboot()+0x82>
 800b3ec:	4c1f      	ldr	r4, [pc, #124]	; (800b46c <RemoteConfig::HandleReboot()+0x88>)
 800b3ee:	6825      	ldr	r5, [r4, #0]
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	7443      	strb	r3, [r0, #17]
 800b3f4:	69a8      	ldr	r0, [r5, #24]
 800b3f6:	b138      	cbz	r0, 800b408 <RemoteConfig::HandleReboot()+0x24>
 800b3f8:	6803      	ldr	r3, [r0, #0]
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fe:	7429      	strb	r1, [r5, #16]
 800b400:	4798      	blx	r3
 800b402:	4b1b      	ldr	r3, [pc, #108]	; (800b470 <RemoteConfig::HandleReboot()+0x8c>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	606b      	str	r3, [r5, #4]
 800b408:	4d1a      	ldr	r5, [pc, #104]	; (800b474 <RemoteConfig::HandleReboot()+0x90>)
 800b40a:	6828      	ldr	r0, [r5, #0]
 800b40c:	f00b fa76 	bl	80168fc <ConfigStore::Flash()>
 800b410:	2800      	cmp	r0, #0
 800b412:	d1fa      	bne.n	800b40a <RemoteConfig::HandleReboot()+0x26>
 800b414:	4b18      	ldr	r3, [pc, #96]	; (800b478 <RemoteConfig::HandleReboot()+0x94>)
 800b416:	6818      	ldr	r0, [r3, #0]
 800b418:	f009 fbca 	bl	8014bb0 <Network::Shutdown()>
 800b41c:	4817      	ldr	r0, [pc, #92]	; (800b47c <RemoteConfig::HandleReboot()+0x98>)
 800b41e:	f7ff f847 	bl	800a4b0 <printf>
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	6998      	ldr	r0, [r3, #24]
 800b426:	b110      	cbz	r0, 800b42e <RemoteConfig::HandleReboot()+0x4a>
 800b428:	6803      	ldr	r3, [r0, #0]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	4798      	blx	r3
 800b42e:	6824      	ldr	r4, [r4, #0]
 800b430:	4913      	ldr	r1, [pc, #76]	; (800b480 <RemoteConfig::HandleReboot()+0x9c>)
 800b432:	4620      	mov	r0, r4
 800b434:	f7fd ff5e 	bl	80092f4 <Display::TextStatus(char const*)>
 800b438:	7c63      	ldrb	r3, [r4, #17]
 800b43a:	b183      	cbz	r3, 800b45e <RemoteConfig::HandleReboot()+0x7a>
 800b43c:	f64b 7312 	movw	r3, #48914	; 0xbf12
 800b440:	7a20      	ldrb	r0, [r4, #8]
 800b442:	f8ad 3004 	strh.w	r3, [sp, #4]
 800b446:	23bf      	movs	r3, #191	; 0xbf
 800b448:	f88d 3006 	strb.w	r3, [sp, #6]
 800b44c:	f00e fbbe 	bl	8019bcc <gd32_i2c_set_address>
 800b450:	68e0      	ldr	r0, [r4, #12]
 800b452:	f00e fbb3 	bl	8019bbc <gd32_i2c_set_baudrate>
 800b456:	2103      	movs	r1, #3
 800b458:	a801      	add	r0, sp, #4
 800b45a:	f00e fbbd 	bl	8019bd8 <gd32_i2c_write>
 800b45e:	4b09      	ldr	r3, [pc, #36]	; (800b484 <RemoteConfig::HandleReboot()+0xa0>)
 800b460:	6818      	ldr	r0, [r3, #0]
 800b462:	f00c fe23 	bl	80180ac <Hardware::Reboot()>
 800b466:	b003      	add	sp, #12
 800b468:	bd30      	pop	{r4, r5, pc}
 800b46a:	bf00      	nop
 800b46c:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0
 800b470:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 800b474:	2000fc80 	andcs	pc, r0, r0, lsl #25
 800b478:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 800b47c:	0801adbc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, fp, sp, pc}
 800b480:	0801adcb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, sl, fp, sp, pc}
 800b484:	2000fda0 	andcs	pc, r0, r0, lsr #27

0800b488 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800b488:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b48c:	4d12      	ldr	r5, [pc, #72]	; (800b4d8 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800b48e:	2000      	movs	r0, #0
 800b490:	f10d 0c04 	add.w	ip, sp, #4
 800b494:	6814      	ldr	r4, [r2, #0]
 800b496:	7d2b      	ldrb	r3, [r5, #20]
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	42a3      	cmp	r3, r4
 800b49c:	bf34      	ite	cc
 800b49e:	4664      	movcc	r4, ip
 800b4a0:	4614      	movcs	r4, r2
 800b4a2:	692e      	ldr	r6, [r5, #16]
 800b4a4:	6827      	ldr	r7, [r4, #0]
 800b4a6:	3e01      	subs	r6, #1
 800b4a8:	440f      	add	r7, r1
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	42bc      	cmp	r4, r7
 800b4ae:	d101      	bne.n	800b4b4 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 800b4b0:	6013      	str	r3, [r2, #0]
 800b4b2:	e00c      	b.n	800b4ce <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 800b4b4:	f894 8000 	ldrb.w	r8, [r4]
 800b4b8:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800b4bc:	45f0      	cmp	r8, lr
 800b4be:	d009      	beq.n	800b4d4 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	2807      	cmp	r0, #7
 800b4c4:	f105 051c 	add.w	r5, r5, #28
 800b4c8:	d1e4      	bne.n	800b494 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800b4ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4ce:	b002      	add	sp, #8
 800b4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d4:	3401      	adds	r4, #1
 800b4d6:	e7e9      	b.n	800b4ac <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800b4d8:	0801ae28 	stmdaeq	r1, {r3, r5, r9, sl, fp, sp, pc}

0800b4dc <RemoteConfig::PlatformHandleTftpSet()>:
 800b4dc:	f890 1020 	ldrb.w	r1, [r0, #32]
 800b4e0:	b109      	cbz	r1, 800b4e6 <RemoteConfig::PlatformHandleTftpSet()+0xa>
 800b4e2:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 800b4e6:	2001      	movs	r0, #1
 800b4e8:	f00e baac 	b.w	8019a44 <bkp_data_write(bkp_data_register_enum, unsigned short)>

0800b4ec <RemoteConfig::PlatformHandleTftpGet()>:
 800b4ec:	b510      	push	{r4, lr}
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	f00e faaf 	bl	8019a54 <bkp_data_read(bkp_data_register_enum)>
 800b4f6:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 800b4fa:	1ac3      	subs	r3, r0, r3
 800b4fc:	4258      	negs	r0, r3
 800b4fe:	4158      	adcs	r0, r3
 800b500:	f884 0020 	strb.w	r0, [r4, #32]
 800b504:	bd10      	pop	{r4, pc}

0800b506 <strcmp>:
 800b506:	1e43      	subs	r3, r0, #1
 800b508:	3901      	subs	r1, #1
 800b50a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800b50e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b512:	4290      	cmp	r0, r2
 800b514:	d001      	beq.n	800b51a <strcmp+0x14>
 800b516:	1a80      	subs	r0, r0, r2
 800b518:	e001      	b.n	800b51e <strcmp+0x18>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d1f5      	bne.n	800b50a <strcmp+0x4>
 800b51e:	4770      	bx	lr

0800b520 <strcasecmp>:
 800b520:	b530      	push	{r4, r5, lr}
 800b522:	1e42      	subs	r2, r0, #1
 800b524:	3901      	subs	r1, #1
 800b526:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b52a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b52e:	2b19      	cmp	r3, #25
 800b530:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b534:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800b538:	4604      	mov	r4, r0
 800b53a:	bf98      	it	ls
 800b53c:	f100 0420 	addls.w	r4, r0, #32
 800b540:	2d19      	cmp	r5, #25
 800b542:	bf98      	it	ls
 800b544:	3320      	addls	r3, #32
 800b546:	42a3      	cmp	r3, r4
 800b548:	d001      	beq.n	800b54e <strcasecmp+0x2e>
 800b54a:	1ae0      	subs	r0, r4, r3
 800b54c:	e001      	b.n	800b552 <strcasecmp+0x32>
 800b54e:	2800      	cmp	r0, #0
 800b550:	d1e9      	bne.n	800b526 <strcasecmp+0x6>
 800b552:	bd30      	pop	{r4, r5, pc}

0800b554 <PropertiesConfig::EnableJSON(bool)>:
 800b554:	4a04      	ldr	r2, [pc, #16]	; (800b568 <PropertiesConfig::EnableJSON(bool)+0x14>)
 800b556:	7813      	ldrb	r3, [r2, #0]
 800b558:	b118      	cbz	r0, 800b562 <PropertiesConfig::EnableJSON(bool)+0xe>
 800b55a:	f043 0301 	orr.w	r3, r3, #1
 800b55e:	7013      	strb	r3, [r2, #0]
 800b560:	4770      	bx	lr
 800b562:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b566:	e7fa      	b.n	800b55e <PropertiesConfig::EnableJSON(bool)+0xa>
 800b568:	2000fcac 	andcs	pc, r0, ip, lsr #25

0800b56c <HttpDaemon::HttpDaemon()>:
 800b56c:	4a08      	ldr	r2, [pc, #32]	; (800b590 <HttpDaemon::HttpDaemon()+0x24>)
 800b56e:	6002      	str	r2, [r0, #0]
 800b570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b574:	2200      	movs	r2, #0
 800b576:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800b57a:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800b57e:	2102      	movs	r1, #2
 800b580:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800b584:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800b588:	e9c0 2208 	strd	r2, r2, [r0, #32]
 800b58c:	60c2      	str	r2, [r0, #12]
 800b58e:	4770      	bx	lr
 800b590:	0801b151 	stmdaeq	r1, {r0, r4, r6, r8, ip, sp, pc}

0800b594 <HttpDaemon::Start()>:
 800b594:	4b04      	ldr	r3, [pc, #16]	; (800b5a8 <HttpDaemon::Start()+0x14>)
 800b596:	b510      	push	{r4, lr}
 800b598:	2150      	movs	r1, #80	; 0x50
 800b59a:	4604      	mov	r4, r0
 800b59c:	6818      	ldr	r0, [r3, #0]
 800b59e:	f009 fe15 	bl	80151cc <Network::TcpBegin(unsigned short)>
 800b5a2:	6120      	str	r0, [r4, #16]
 800b5a4:	bd10      	pop	{r4, pc}
 800b5a6:	bf00      	nop
 800b5a8:	2000f9ac 	andcs	pc, r0, ip, lsr #19

0800b5ac <HttpDaemon::ParseMethod(char*)>:
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	491a      	ldr	r1, [pc, #104]	; (800b61c <HttpDaemon::ParseMethod(char*)+0x70>)
 800b5b4:	f00c febc 	bl	8018330 <strtok>
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	b360      	cbz	r0, 800b616 <HttpDaemon::ParseMethod(char*)+0x6a>
 800b5bc:	4918      	ldr	r1, [pc, #96]	; (800b620 <HttpDaemon::ParseMethod(char*)+0x74>)
 800b5be:	f7ff ffa2 	bl	800b506 <strcmp>
 800b5c2:	b128      	cbz	r0, 800b5d0 <HttpDaemon::ParseMethod(char*)+0x24>
 800b5c4:	4917      	ldr	r1, [pc, #92]	; (800b624 <HttpDaemon::ParseMethod(char*)+0x78>)
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f7ff ff9d 	bl	800b506 <strcmp>
 800b5cc:	bb18      	cbnz	r0, 800b616 <HttpDaemon::ParseMethod(char*)+0x6a>
 800b5ce:	2001      	movs	r0, #1
 800b5d0:	61e0      	str	r0, [r4, #28]
 800b5d2:	4912      	ldr	r1, [pc, #72]	; (800b61c <HttpDaemon::ParseMethod(char*)+0x70>)
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	f00c feab 	bl	8018330 <strtok>
 800b5da:	b910      	cbnz	r0, 800b5e2 <HttpDaemon::ParseMethod(char*)+0x36>
 800b5dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b5e0:	bd38      	pop	{r3, r4, r5, pc}
 800b5e2:	6060      	str	r0, [r4, #4]
 800b5e4:	4910      	ldr	r1, [pc, #64]	; (800b628 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	f00c fea2 	bl	8018330 <strtok>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	d0f5      	beq.n	800b5dc <HttpDaemon::ParseMethod(char*)+0x30>
 800b5f0:	490e      	ldr	r1, [pc, #56]	; (800b62c <HttpDaemon::ParseMethod(char*)+0x80>)
 800b5f2:	f7ff ff88 	bl	800b506 <strcmp>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d1f0      	bne.n	800b5dc <HttpDaemon::ParseMethod(char*)+0x30>
 800b5fa:	490d      	ldr	r1, [pc, #52]	; (800b630 <HttpDaemon::ParseMethod(char*)+0x84>)
 800b5fc:	f00c fe98 	bl	8018330 <strtok>
 800b600:	2800      	cmp	r0, #0
 800b602:	d0eb      	beq.n	800b5dc <HttpDaemon::ParseMethod(char*)+0x30>
 800b604:	490b      	ldr	r1, [pc, #44]	; (800b634 <HttpDaemon::ParseMethod(char*)+0x88>)
 800b606:	f7ff ff7e 	bl	800b506 <strcmp>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	f240 10f9 	movw	r0, #505	; 0x1f9
 800b610:	bf08      	it	eq
 800b612:	20c8      	moveq	r0, #200	; 0xc8
 800b614:	e7e4      	b.n	800b5e0 <HttpDaemon::ParseMethod(char*)+0x34>
 800b616:	f240 10f5 	movw	r0, #501	; 0x1f5
 800b61a:	e7e1      	b.n	800b5e0 <HttpDaemon::ParseMethod(char*)+0x34>
 800b61c:	0801d3ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, r9, ip, lr, pc}
 800b620:	0801aeec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, sl, fp, sp, pc}
 800b624:	0801aef0 	stmdaeq	r1, {r4, r5, r6, r7, r9, sl, fp, sp, pc}
 800b628:	0801af5a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, sl, fp, sp, pc}
 800b62c:	0801aef5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, sl, fp, sp, pc}
 800b630:	0801aefa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
 800b634:	0801aefd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}

0800b638 <HttpDaemon::ParseHeaderField(char*)>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	4605      	mov	r5, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	491d      	ldr	r1, [pc, #116]	; (800b6b4 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800b640:	f00c fe76 	bl	8018330 <strtok>
 800b644:	4604      	mov	r4, r0
 800b646:	b910      	cbnz	r0, 800b64e <HttpDaemon::ParseHeaderField(char*)+0x16>
 800b648:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b64c:	bd38      	pop	{r3, r4, r5, pc}
 800b64e:	491a      	ldr	r1, [pc, #104]	; (800b6b8 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800b650:	f7ff ff66 	bl	800b520 <strcasecmp>
 800b654:	b970      	cbnz	r0, 800b674 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800b656:	4919      	ldr	r1, [pc, #100]	; (800b6bc <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800b658:	f00c fe6a 	bl	8018330 <strtok>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d0f3      	beq.n	800b648 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800b660:	4917      	ldr	r1, [pc, #92]	; (800b6c0 <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800b662:	f7ff ff50 	bl	800b506 <strcmp>
 800b666:	b108      	cbz	r0, 800b66c <HttpDaemon::ParseHeaderField(char*)+0x34>
 800b668:	20c8      	movs	r0, #200	; 0xc8
 800b66a:	e7ef      	b.n	800b64c <HttpDaemon::ParseHeaderField(char*)+0x14>
 800b66c:	2301      	movs	r3, #1
 800b66e:	f885 3020 	strb.w	r3, [r5, #32]
 800b672:	e7f9      	b.n	800b668 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800b674:	4620      	mov	r0, r4
 800b676:	4913      	ldr	r1, [pc, #76]	; (800b6c4 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800b678:	f7ff ff52 	bl	800b520 <strcasecmp>
 800b67c:	4604      	mov	r4, r0
 800b67e:	2800      	cmp	r0, #0
 800b680:	d1f2      	bne.n	800b668 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800b682:	4911      	ldr	r1, [pc, #68]	; (800b6c8 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800b684:	f00c fe54 	bl	8018330 <strtok>
 800b688:	2800      	cmp	r0, #0
 800b68a:	d0dd      	beq.n	800b648 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800b68c:	1e42      	subs	r2, r0, #1
 800b68e:	4623      	mov	r3, r4
 800b690:	200a      	movs	r0, #10
 800b692:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b696:	b909      	cbnz	r1, 800b69c <HttpDaemon::ParseHeaderField(char*)+0x64>
 800b698:	84eb      	strh	r3, [r5, #38]	; 0x26
 800b69a:	e7e5      	b.n	800b668 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800b69c:	3930      	subs	r1, #48	; 0x30
 800b69e:	2909      	cmp	r1, #9
 800b6a0:	d8d2      	bhi.n	800b648 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800b6a2:	fb00 1303 	mla	r3, r0, r3, r1
 800b6a6:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800b6aa:	d9f2      	bls.n	800b692 <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800b6ac:	f240 109d 	movw	r0, #413	; 0x19d
 800b6b0:	e7cc      	b.n	800b64c <HttpDaemon::ParseHeaderField(char*)+0x14>
 800b6b2:	bf00      	nop
 800b6b4:	0801af01 	stmdaeq	r1, {r0, r8, r9, sl, fp, sp, pc}
 800b6b8:	0801af03 	stmdaeq	r1, {r0, r1, r8, r9, sl, fp, sp, pc}
 800b6bc:	0801af10 	stmdaeq	r1, {r4, r8, r9, sl, fp, sp, pc}
 800b6c0:	0801af13 	stmdaeq	r1, {r0, r1, r4, r8, r9, sl, fp, sp, pc}
 800b6c4:	0801af24 	stmdaeq	r1, {r2, r5, r8, r9, sl, fp, sp, pc}
 800b6c8:	0801d3ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, r9, ip, lr, pc}

0800b6cc <HttpDaemon::ParseRequest()>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	68c1      	ldr	r1, [r0, #12]
 800b6d0:	2400      	movs	r4, #0
 800b6d2:	4605      	mov	r5, r0
 800b6d4:	f880 4020 	strb.w	r4, [r0, #32]
 800b6d8:	6244      	str	r4, [r0, #36]	; 0x24
 800b6da:	4622      	mov	r2, r4
 800b6dc:	4626      	mov	r6, r4
 800b6de:	8aab      	ldrh	r3, [r5, #20]
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	d91e      	bls.n	800b722 <HttpDaemon::ParseRequest()+0x56>
 800b6e4:	68eb      	ldr	r3, [r5, #12]
 800b6e6:	5d18      	ldrb	r0, [r3, r4]
 800b6e8:	280a      	cmp	r0, #10
 800b6ea:	d10f      	bne.n	800b70c <HttpDaemon::ParseRequest()+0x40>
 800b6ec:	4423      	add	r3, r4
 800b6ee:	1c57      	adds	r7, r2, #1
 800b6f0:	f803 6c01 	strb.w	r6, [r3, #-1]
 800b6f4:	b96a      	cbnz	r2, 800b712 <HttpDaemon::ParseRequest()+0x46>
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	f7ff ff58 	bl	800b5ac <HttpDaemon::ParseMethod(char*)>
 800b6fc:	28c8      	cmp	r0, #200	; 0xc8
 800b6fe:	d111      	bne.n	800b724 <HttpDaemon::ParseRequest()+0x58>
 800b700:	68eb      	ldr	r3, [r5, #12]
 800b702:	1c61      	adds	r1, r4, #1
 800b704:	b28c      	uxth	r4, r1
 800b706:	463a      	mov	r2, r7
 800b708:	fa13 f181 	uxtah	r1, r3, r1
 800b70c:	3401      	adds	r4, #1
 800b70e:	b2a4      	uxth	r4, r4
 800b710:	e7e5      	b.n	800b6de <HttpDaemon::ParseRequest()+0x12>
 800b712:	7808      	ldrb	r0, [r1, #0]
 800b714:	b968      	cbnz	r0, 800b732 <HttpDaemon::ParseRequest()+0x66>
 800b716:	696b      	ldr	r3, [r5, #20]
 800b718:	3b01      	subs	r3, #1
 800b71a:	1b1b      	subs	r3, r3, r4
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	84ab      	strh	r3, [r5, #36]	; 0x24
 800b720:	b90b      	cbnz	r3, 800b726 <HttpDaemon::ParseRequest()+0x5a>
 800b722:	20c8      	movs	r0, #200	; 0xc8
 800b724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b726:	68ea      	ldr	r2, [r5, #12]
 800b728:	3401      	adds	r4, #1
 800b72a:	4414      	add	r4, r2
 800b72c:	60ac      	str	r4, [r5, #8]
 800b72e:	54e0      	strb	r0, [r4, r3]
 800b730:	e7f7      	b.n	800b722 <HttpDaemon::ParseRequest()+0x56>
 800b732:	4628      	mov	r0, r5
 800b734:	f7ff ff80 	bl	800b638 <HttpDaemon::ParseHeaderField(char*)>
 800b738:	e7e0      	b.n	800b6fc <HttpDaemon::ParseRequest()+0x30>
	...

0800b73c <HttpDaemon::HandleGetTxt()>:
 800b73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b740:	6846      	ldr	r6, [r0, #4]
 800b742:	1db4      	adds	r4, r6, #6
 800b744:	4607      	mov	r7, r0
 800b746:	4622      	mov	r2, r4
 800b748:	4613      	mov	r3, r2
 800b74a:	3201      	adds	r2, #1
 800b74c:	7819      	ldrb	r1, [r3, #0]
 800b74e:	2900      	cmp	r1, #0
 800b750:	d1fa      	bne.n	800b748 <HttpDaemon::HandleGetTxt()+0xc>
 800b752:	1b1b      	subs	r3, r3, r4
 800b754:	2b04      	cmp	r3, #4
 800b756:	d803      	bhi.n	800b760 <HttpDaemon::HandleGetTxt()+0x24>
 800b758:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b760:	3b04      	subs	r3, #4
 800b762:	4914      	ldr	r1, [pc, #80]	; (800b7b4 <HttpDaemon::HandleGetTxt()+0x78>)
 800b764:	18e0      	adds	r0, r4, r3
 800b766:	f7ff fece 	bl	800b506 <strcmp>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d1f4      	bne.n	800b758 <HttpDaemon::HandleGetTxt()+0x1c>
 800b76e:	4b12      	ldr	r3, [pc, #72]	; (800b7b8 <HttpDaemon::HandleGetTxt()+0x7c>)
 800b770:	2001      	movs	r0, #1
 800b772:	f893 8000 	ldrb.w	r8, [r3]
 800b776:	f7ff feed 	bl	800b554 <PropertiesConfig::EnableJSON(bool)>
 800b77a:	4b10      	ldr	r3, [pc, #64]	; (800b7bc <HttpDaemon::HandleGetTxt()+0x80>)
 800b77c:	f240 529b 	movw	r2, #1435	; 0x59b
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	4621      	mov	r1, r4
 800b784:	f7ff fa30 	bl	800abe8 <RemoteConfig::HandleGet(void*, unsigned int)>
 800b788:	f008 0801 	and.w	r8, r8, #1
 800b78c:	4605      	mov	r5, r0
 800b78e:	4640      	mov	r0, r8
 800b790:	f7ff fee0 	bl	800b554 <PropertiesConfig::EnableJSON(bool)>
 800b794:	2d00      	cmp	r5, #0
 800b796:	d0df      	beq.n	800b758 <HttpDaemon::HandleGetTxt()+0x1c>
 800b798:	847d      	strh	r5, [r7, #34]	; 0x22
 800b79a:	4b09      	ldr	r3, [pc, #36]	; (800b7c0 <HttpDaemon::HandleGetTxt()+0x84>)
 800b79c:	3506      	adds	r5, #6
 800b79e:	442e      	add	r6, r5
 800b7a0:	42b4      	cmp	r4, r6
 800b7a2:	d101      	bne.n	800b7a8 <HttpDaemon::HandleGetTxt()+0x6c>
 800b7a4:	20c8      	movs	r0, #200	; 0xc8
 800b7a6:	e7d9      	b.n	800b75c <HttpDaemon::HandleGetTxt()+0x20>
 800b7a8:	f814 2b01 	ldrb.w	r2, [r4], #1
 800b7ac:	f803 2b01 	strb.w	r2, [r3], #1
 800b7b0:	e7f6      	b.n	800b7a0 <HttpDaemon::HandleGetTxt()+0x64>
 800b7b2:	bf00      	nop
 800b7b4:	0801ae0c 	stmdaeq	r1, {r2, r3, r9, sl, fp, sp, pc}
 800b7b8:	2000fcac 	andcs	pc, r0, ip, lsr #25
 800b7bc:	20000124 	andcs	r0, r0, r4, lsr #2
 800b7c0:	20000128 	andcs	r0, r0, r8, lsr #2

0800b7c4 <HttpDaemon::HandleGet()>:
 800b7c4:	b570      	push	{r4, r5, r6, lr}
 800b7c6:	6845      	ldr	r5, [r0, #4]
 800b7c8:	493e      	ldr	r1, [pc, #248]	; (800b8c4 <HttpDaemon::HandleGet()+0x100>)
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	f7ff fe9a 	bl	800b506 <strcmp>
 800b7d2:	b120      	cbz	r0, 800b7de <HttpDaemon::HandleGet()+0x1a>
 800b7d4:	493c      	ldr	r1, [pc, #240]	; (800b8c8 <HttpDaemon::HandleGet()+0x104>)
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	f7ff fe95 	bl	800b506 <strcmp>
 800b7dc:	b950      	cbnz	r0, 800b7f4 <HttpDaemon::HandleGet()+0x30>
 800b7de:	4b3b      	ldr	r3, [pc, #236]	; (800b8cc <HttpDaemon::HandleGet()+0x108>)
 800b7e0:	493b      	ldr	r1, [pc, #236]	; (800b8d0 <HttpDaemon::HandleGet()+0x10c>)
 800b7e2:	483c      	ldr	r0, [pc, #240]	; (800b8d4 <HttpDaemon::HandleGet()+0x110>)
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	f000 fa63 	bl	800bcb0 <get_file_content(char const*, char*)>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	dd2f      	ble.n	800b84e <HttpDaemon::HandleGet()+0x8a>
 800b7ee:	8460      	strh	r0, [r4, #34]	; 0x22
 800b7f0:	20c8      	movs	r0, #200	; 0xc8
 800b7f2:	bd70      	pop	{r4, r5, r6, pc}
 800b7f4:	4938      	ldr	r1, [pc, #224]	; (800b8d8 <HttpDaemon::HandleGet()+0x114>)
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f7ff fe85 	bl	800b506 <strcmp>
 800b7fc:	b920      	cbnz	r0, 800b808 <HttpDaemon::HandleGet()+0x44>
 800b7fe:	4b37      	ldr	r3, [pc, #220]	; (800b8dc <HttpDaemon::HandleGet()+0x118>)
 800b800:	4933      	ldr	r1, [pc, #204]	; (800b8d0 <HttpDaemon::HandleGet()+0x10c>)
 800b802:	4837      	ldr	r0, [pc, #220]	; (800b8e0 <HttpDaemon::HandleGet()+0x11c>)
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	e7ee      	b.n	800b7e6 <HttpDaemon::HandleGet()+0x22>
 800b808:	4936      	ldr	r1, [pc, #216]	; (800b8e4 <HttpDaemon::HandleGet()+0x120>)
 800b80a:	4628      	mov	r0, r5
 800b80c:	f7ff fe7b 	bl	800b506 <strcmp>
 800b810:	b190      	cbz	r0, 800b838 <HttpDaemon::HandleGet()+0x74>
 800b812:	4a35      	ldr	r2, [pc, #212]	; (800b8e8 <HttpDaemon::HandleGet()+0x124>)
 800b814:	1e6b      	subs	r3, r5, #1
 800b816:	1d69      	adds	r1, r5, #5
 800b818:	428b      	cmp	r3, r1
 800b81a:	d112      	bne.n	800b842 <HttpDaemon::HandleGet()+0x7e>
 800b81c:	4b33      	ldr	r3, [pc, #204]	; (800b8ec <HttpDaemon::HandleGet()+0x128>)
 800b81e:	4934      	ldr	r1, [pc, #208]	; (800b8f0 <HttpDaemon::HandleGet()+0x12c>)
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	3506      	adds	r5, #6
 800b824:	4628      	mov	r0, r5
 800b826:	f7ff fe6e 	bl	800b506 <strcmp>
 800b82a:	b998      	cbnz	r0, 800b854 <HttpDaemon::HandleGet()+0x90>
 800b82c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b830:	4827      	ldr	r0, [pc, #156]	; (800b8d0 <HttpDaemon::HandleGet()+0x10c>)
 800b832:	f000 f9c9 	bl	800bbc8 <remoteconfig::json_get_list(char*, unsigned short)>
 800b836:	e7d8      	b.n	800b7ea <HttpDaemon::HandleGet()+0x26>
 800b838:	4b2e      	ldr	r3, [pc, #184]	; (800b8f4 <HttpDaemon::HandleGet()+0x130>)
 800b83a:	4925      	ldr	r1, [pc, #148]	; (800b8d0 <HttpDaemon::HandleGet()+0x10c>)
 800b83c:	482e      	ldr	r0, [pc, #184]	; (800b8f8 <HttpDaemon::HandleGet()+0x134>)
 800b83e:	6023      	str	r3, [r4, #0]
 800b840:	e7d1      	b.n	800b7e6 <HttpDaemon::HandleGet()+0x22>
 800b842:	f812 0b01 	ldrb.w	r0, [r2], #1
 800b846:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800b84a:	4286      	cmp	r6, r0
 800b84c:	d0e4      	beq.n	800b818 <HttpDaemon::HandleGet()+0x54>
 800b84e:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800b852:	e7ce      	b.n	800b7f2 <HttpDaemon::HandleGet()+0x2e>
 800b854:	4929      	ldr	r1, [pc, #164]	; (800b8fc <HttpDaemon::HandleGet()+0x138>)
 800b856:	4628      	mov	r0, r5
 800b858:	f7ff fe55 	bl	800b506 <strcmp>
 800b85c:	b928      	cbnz	r0, 800b86a <HttpDaemon::HandleGet()+0xa6>
 800b85e:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b862:	481b      	ldr	r0, [pc, #108]	; (800b8d0 <HttpDaemon::HandleGet()+0x10c>)
 800b864:	f000 f9e0 	bl	800bc28 <remoteconfig::json_get_version(char*, unsigned short)>
 800b868:	e7bf      	b.n	800b7ea <HttpDaemon::HandleGet()+0x26>
 800b86a:	4925      	ldr	r1, [pc, #148]	; (800b900 <HttpDaemon::HandleGet()+0x13c>)
 800b86c:	4628      	mov	r0, r5
 800b86e:	f7ff fe4a 	bl	800b506 <strcmp>
 800b872:	b948      	cbnz	r0, 800b888 <HttpDaemon::HandleGet()+0xc4>
 800b874:	4b23      	ldr	r3, [pc, #140]	; (800b904 <HttpDaemon::HandleGet()+0x140>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	7bdb      	ldrb	r3, [r3, #15]
 800b87a:	b303      	cbz	r3, 800b8be <HttpDaemon::HandleGet()+0xfa>
 800b87c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b880:	4813      	ldr	r0, [pc, #76]	; (800b8d0 <HttpDaemon::HandleGet()+0x10c>)
 800b882:	f000 f9ed 	bl	800bc60 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800b886:	e7b0      	b.n	800b7ea <HttpDaemon::HandleGet()+0x26>
 800b888:	491f      	ldr	r1, [pc, #124]	; (800b908 <HttpDaemon::HandleGet()+0x144>)
 800b88a:	4628      	mov	r0, r5
 800b88c:	f7ff fe3b 	bl	800b506 <strcmp>
 800b890:	b928      	cbnz	r0, 800b89e <HttpDaemon::HandleGet()+0xda>
 800b892:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b896:	480e      	ldr	r0, [pc, #56]	; (800b8d0 <HttpDaemon::HandleGet()+0x10c>)
 800b898:	f000 f9f2 	bl	800bc80 <remoteconfig::json_get_display(char*, unsigned short)>
 800b89c:	e7a5      	b.n	800b7ea <HttpDaemon::HandleGet()+0x26>
 800b89e:	491b      	ldr	r1, [pc, #108]	; (800b90c <HttpDaemon::HandleGet()+0x148>)
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	f7ff fe30 	bl	800b506 <strcmp>
 800b8a6:	b928      	cbnz	r0, 800b8b4 <HttpDaemon::HandleGet()+0xf0>
 800b8a8:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b8ac:	4808      	ldr	r0, [pc, #32]	; (800b8d0 <HttpDaemon::HandleGet()+0x10c>)
 800b8ae:	f000 f9f7 	bl	800bca0 <remoteconfig::json_get_directory(char*, unsigned short)>
 800b8b2:	e79a      	b.n	800b7ea <HttpDaemon::HandleGet()+0x26>
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8ba:	f7ff bf3f 	b.w	800b73c <HttpDaemon::HandleGetTxt()>
 800b8be:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b8c2:	e796      	b.n	800b7f2 <HttpDaemon::HandleGet()+0x2e>
 800b8c4:	0801af5a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, sl, fp, sp, pc}
 800b8c8:	0801af33 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, sl, fp, sp, pc}
 800b8cc:	0801b151 	stmdaeq	r1, {r0, r4, r6, r8, ip, sp, pc}
 800b8d0:	20000128 	andcs	r0, r0, r8, lsr #2
 800b8d4:	0801af34 	stmdaeq	r1, {r2, r4, r5, r8, r9, sl, fp, sp, pc}
 800b8d8:	0801af3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, sp, pc}
 800b8dc:	0801b171 	stmdaeq	r1, {r0, r4, r5, r6, r8, ip, sp, pc}
 800b8e0:	0801af40 	stmdaeq	r1, {r6, r8, r9, sl, fp, sp, pc}
 800b8e4:	0801af4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, sl, fp, sp, pc}
 800b8e8:	0801af55 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, sl, fp, sp, pc}
 800b8ec:	0801b1b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, ip, sp, pc}
 800b8f0:	0801af5c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, sl, fp, sp, pc}
 800b8f4:	0801b191 	stmdaeq	r1, {r0, r4, r7, r8, ip, sp, pc}
 800b8f8:	0801af4c 	stmdaeq	r1, {r2, r3, r6, r8, r9, sl, fp, sp, pc}
 800b8fc:	0801af61 	stmdaeq	r1, {r0, r5, r6, r8, r9, sl, fp, sp, pc}
 800b900:	0801af69 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, sl, fp, sp, pc}
 800b904:	20000124 	andcs	r0, r0, r4, lsr #2
 800b908:	0801af70 	stmdaeq	r1, {r4, r5, r6, r8, r9, sl, fp, sp, pc}
 800b90c:	0801af78 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, sl, fp, sp, pc}

0800b910 <HttpDaemon::HandlePost(bool)>:
 800b910:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b912:	4604      	mov	r4, r0
 800b914:	2900      	cmp	r1, #0
 800b916:	f040 808a 	bne.w	800ba2e <HttpDaemon::HandlePost(bool)+0x11e>
 800b91a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d05a      	beq.n	800b9d8 <HttpDaemon::HandlePost(bool)+0xc8>
 800b922:	6845      	ldr	r5, [r0, #4]
 800b924:	4944      	ldr	r1, [pc, #272]	; (800ba38 <HttpDaemon::HandlePost(bool)+0x128>)
 800b926:	4628      	mov	r0, r5
 800b928:	f7ff fded 	bl	800b506 <strcmp>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	bf0c      	ite	eq
 800b930:	2301      	moveq	r3, #1
 800b932:	2300      	movne	r3, #0
 800b934:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800b938:	d052      	beq.n	800b9e0 <HttpDaemon::HandlePost(bool)+0xd0>
 800b93a:	4940      	ldr	r1, [pc, #256]	; (800ba3c <HttpDaemon::HandlePost(bool)+0x12c>)
 800b93c:	4628      	mov	r0, r5
 800b93e:	f7ff fde2 	bl	800b506 <strcmp>
 800b942:	2800      	cmp	r0, #0
 800b944:	d04c      	beq.n	800b9e0 <HttpDaemon::HandlePost(bool)+0xd0>
 800b946:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800b94a:	e047      	b.n	800b9dc <HttpDaemon::HandlePost(bool)+0xcc>
 800b94c:	493c      	ldr	r1, [pc, #240]	; (800ba40 <HttpDaemon::HandlePost(bool)+0x130>)
 800b94e:	68a0      	ldr	r0, [r4, #8]
 800b950:	f10d 0207 	add.w	r2, sp, #7
 800b954:	f00b ff4d 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b958:	b9d8      	cbnz	r0, 800b992 <HttpDaemon::HandlePost(bool)+0x82>
 800b95a:	4b3a      	ldr	r3, [pc, #232]	; (800ba44 <HttpDaemon::HandlePost(bool)+0x134>)
 800b95c:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800b960:	681d      	ldr	r5, [r3, #0]
 800b962:	69a8      	ldr	r0, [r5, #24]
 800b964:	fab6 f186 	clz	r1, r6
 800b968:	0949      	lsrs	r1, r1, #5
 800b96a:	b138      	cbz	r0, 800b97c <HttpDaemon::HandlePost(bool)+0x6c>
 800b96c:	6803      	ldr	r3, [r0, #0]
 800b96e:	7429      	strb	r1, [r5, #16]
 800b970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b972:	4798      	blx	r3
 800b974:	b116      	cbz	r6, 800b97c <HttpDaemon::HandlePost(bool)+0x6c>
 800b976:	4b34      	ldr	r3, [pc, #208]	; (800ba48 <HttpDaemon::HandlePost(bool)+0x138>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	606b      	str	r3, [r5, #4]
 800b97c:	4b33      	ldr	r3, [pc, #204]	; (800ba4c <HttpDaemon::HandlePost(bool)+0x13c>)
 800b97e:	4a34      	ldr	r2, [pc, #208]	; (800ba50 <HttpDaemon::HandlePost(bool)+0x140>)
 800b980:	4834      	ldr	r0, [pc, #208]	; (800ba54 <HttpDaemon::HandlePost(bool)+0x144>)
 800b982:	6023      	str	r3, [r4, #0]
 800b984:	f240 519f 	movw	r1, #1439	; 0x59f
 800b988:	f7fe fdba 	bl	800a500 <snprintf>
 800b98c:	8460      	strh	r0, [r4, #34]	; 0x22
 800b98e:	20c8      	movs	r0, #200	; 0xc8
 800b990:	e024      	b.n	800b9dc <HttpDaemon::HandlePost(bool)+0xcc>
 800b992:	4931      	ldr	r1, [pc, #196]	; (800ba58 <HttpDaemon::HandlePost(bool)+0x148>)
 800b994:	68a0      	ldr	r0, [r4, #8]
 800b996:	f10d 0207 	add.w	r2, sp, #7
 800b99a:	f00b ff2a 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b99e:	b9d8      	cbnz	r0, 800b9d8 <HttpDaemon::HandlePost(bool)+0xc8>
 800b9a0:	4b2e      	ldr	r3, [pc, #184]	; (800ba5c <HttpDaemon::HandlePost(bool)+0x14c>)
 800b9a2:	6818      	ldr	r0, [r3, #0]
 800b9a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b9a8:	b11b      	cbz	r3, 800b9b2 <HttpDaemon::HandlePost(bool)+0xa2>
 800b9aa:	2104      	movs	r1, #4
 800b9ac:	f00c fabe 	bl	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 800b9b0:	e7e4      	b.n	800b97c <HttpDaemon::HandlePost(bool)+0x6c>
 800b9b2:	2102      	movs	r1, #2
 800b9b4:	e7fa      	b.n	800b9ac <HttpDaemon::HandlePost(bool)+0x9c>
 800b9b6:	4b2a      	ldr	r3, [pc, #168]	; (800ba60 <HttpDaemon::HandlePost(bool)+0x150>)
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	781d      	ldrb	r5, [r3, #0]
 800b9bc:	f7ff fdca 	bl	800b554 <PropertiesConfig::EnableJSON(bool)>
 800b9c0:	4b28      	ldr	r3, [pc, #160]	; (800ba64 <HttpDaemon::HandlePost(bool)+0x154>)
 800b9c2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800b9c4:	6818      	ldr	r0, [r3, #0]
 800b9c6:	68a1      	ldr	r1, [r4, #8]
 800b9c8:	f005 0501 	and.w	r5, r5, #1
 800b9cc:	f7ff fa12 	bl	800adf4 <RemoteConfig::HandleSet(void*, unsigned int)>
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	f7ff fdbf 	bl	800b554 <PropertiesConfig::EnableJSON(bool)>
 800b9d6:	e7d1      	b.n	800b97c <HttpDaemon::HandlePost(bool)+0x6c>
 800b9d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b9dc:	b002      	add	sp, #8
 800b9de:	bd70      	pop	{r4, r5, r6, pc}
 800b9e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800b9e2:	6962      	ldr	r2, [r4, #20]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	dbd2      	blt.n	800b98e <HttpDaemon::HandlePost(bool)+0x7e>
 800b9e8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d0cf      	beq.n	800b98e <HttpDaemon::HandlePost(bool)+0x7e>
 800b9ee:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d0df      	beq.n	800b9b6 <HttpDaemon::HandlePost(bool)+0xa6>
 800b9f6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800b9f8:	68a0      	ldr	r0, [r4, #8]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f00b fc72 	bl	80172e4 <properties::convert_json_file(char*, unsigned short, bool)>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	dde9      	ble.n	800b9d8 <HttpDaemon::HandlePost(bool)+0xc8>
 800ba04:	4918      	ldr	r1, [pc, #96]	; (800ba68 <HttpDaemon::HandlePost(bool)+0x158>)
 800ba06:	68a0      	ldr	r0, [r4, #8]
 800ba08:	f10d 0207 	add.w	r2, sp, #7
 800ba0c:	f00b fef1 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d19b      	bne.n	800b94c <HttpDaemon::HandlePost(bool)+0x3c>
 800ba14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d0af      	beq.n	800b97c <HttpDaemon::HandlePost(bool)+0x6c>
 800ba1c:	4b11      	ldr	r3, [pc, #68]	; (800ba64 <HttpDaemon::HandlePost(bool)+0x154>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	7b9b      	ldrb	r3, [r3, #14]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d0d8      	beq.n	800b9d8 <HttpDaemon::HandlePost(bool)+0xc8>
 800ba26:	4b11      	ldr	r3, [pc, #68]	; (800ba6c <HttpDaemon::HandlePost(bool)+0x15c>)
 800ba28:	6818      	ldr	r0, [r3, #0]
 800ba2a:	f00c fb3f 	bl	80180ac <Hardware::Reboot()>
 800ba2e:	68c3      	ldr	r3, [r0, #12]
 800ba30:	6083      	str	r3, [r0, #8]
 800ba32:	6943      	ldr	r3, [r0, #20]
 800ba34:	8483      	strh	r3, [r0, #36]	; 0x24
 800ba36:	e7da      	b.n	800b9ee <HttpDaemon::HandlePost(bool)+0xde>
 800ba38:	0801af82 	stmdaeq	r1, {r1, r7, r8, r9, sl, fp, sp, pc}
 800ba3c:	0801af1e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, sl, fp, sp, pc}
 800ba40:	0801af70 	stmdaeq	r1, {r4, r5, r6, r8, r9, sl, fp, sp, pc}
 800ba44:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0
 800ba48:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 800ba4c:	0801b151 	stmdaeq	r1, {r0, r4, r6, r8, ip, sp, pc}
 800ba50:	0801af9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, sl, fp, sp, pc}
 800ba54:	20000128 	andcs	r0, r0, r8, lsr #2
 800ba58:	0801af96 	stmdaeq	r1, {r1, r2, r4, r7, r8, r9, sl, fp, sp, pc}
 800ba5c:	2000fd9c 	mulcs	r0, ip, sp
 800ba60:	2000fcac 	andcs	pc, r0, ip, lsr #25
 800ba64:	20000124 	andcs	r0, r0, r4, lsr #2
 800ba68:	0801af8f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, r9, sl, fp, sp, pc}
 800ba6c:	2000fda0 	andcs	pc, r0, r0, lsr #27

0800ba70 <HttpDaemon::Run()>:
 800ba70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ba72:	4e46      	ldr	r6, [pc, #280]	; (800bb8c <HttpDaemon::Run()+0x11c>)
 800ba74:	6901      	ldr	r1, [r0, #16]
 800ba76:	4604      	mov	r4, r0
 800ba78:	f100 020c 	add.w	r2, r0, #12
 800ba7c:	6830      	ldr	r0, [r6, #0]
 800ba7e:	f009 fba8 	bl	80151d2 <Network::TcpRead(int, unsigned char const**)>
 800ba82:	6160      	str	r0, [r4, #20]
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d05b      	beq.n	800bb40 <HttpDaemon::Run()+0xd0>
 800ba88:	69a3      	ldr	r3, [r4, #24]
 800ba8a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800ba8e:	d159      	bne.n	800bb44 <HttpDaemon::Run()+0xd4>
 800ba90:	4620      	mov	r0, r4
 800ba92:	f7ff fe1b 	bl	800b6cc <HttpDaemon::ParseRequest()>
 800ba96:	28c8      	cmp	r0, #200	; 0xc8
 800ba98:	61a0      	str	r0, [r4, #24]
 800ba9a:	d106      	bne.n	800baaa <HttpDaemon::Run()+0x3a>
 800ba9c:	69e3      	ldr	r3, [r4, #28]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d142      	bne.n	800bb28 <HttpDaemon::Run()+0xb8>
 800baa2:	4620      	mov	r0, r4
 800baa4:	f7ff fe8e 	bl	800b7c4 <HttpDaemon::HandleGet()>
 800baa8:	61a0      	str	r0, [r4, #24]
 800baaa:	69a3      	ldr	r3, [r4, #24]
 800baac:	2bc8      	cmp	r3, #200	; 0xc8
 800baae:	d06b      	beq.n	800bb88 <HttpDaemon::Run()+0x118>
 800bab0:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800bab4:	d05e      	beq.n	800bb74 <HttpDaemon::Run()+0x104>
 800bab6:	dc4e      	bgt.n	800bb56 <HttpDaemon::Run()+0xe6>
 800bab8:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800babc:	d05c      	beq.n	800bb78 <HttpDaemon::Run()+0x108>
 800babe:	f240 129d 	movw	r2, #413	; 0x19d
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d05a      	beq.n	800bb7c <HttpDaemon::Run()+0x10c>
 800bac6:	4d32      	ldr	r5, [pc, #200]	; (800bb90 <HttpDaemon::Run()+0x120>)
 800bac8:	4a32      	ldr	r2, [pc, #200]	; (800bb94 <HttpDaemon::Run()+0x124>)
 800baca:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bace:	bf18      	it	ne
 800bad0:	4615      	movne	r5, r2
 800bad2:	4a31      	ldr	r2, [pc, #196]	; (800bb98 <HttpDaemon::Run()+0x128>)
 800bad4:	6022      	str	r2, [r4, #0]
 800bad6:	e9cd 5500 	strd	r5, r5, [sp]
 800bada:	4a30      	ldr	r2, [pc, #192]	; (800bb9c <HttpDaemon::Run()+0x12c>)
 800badc:	4830      	ldr	r0, [pc, #192]	; (800bba0 <HttpDaemon::Run()+0x130>)
 800bade:	f240 519f 	movw	r1, #1439	; 0x59f
 800bae2:	f7fe fd0d 	bl	800a500 <snprintf>
 800bae6:	8460      	strh	r0, [r4, #34]	; 0x22
 800bae8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800baea:	9303      	str	r3, [sp, #12]
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	9302      	str	r3, [sp, #8]
 800baf0:	4b2c      	ldr	r3, [pc, #176]	; (800bba4 <HttpDaemon::Run()+0x134>)
 800baf2:	4a2d      	ldr	r2, [pc, #180]	; (800bba8 <HttpDaemon::Run()+0x138>)
 800baf4:	68e0      	ldr	r0, [r4, #12]
 800baf6:	e9cd 5300 	strd	r5, r3, [sp]
 800bafa:	f240 519f 	movw	r1, #1439	; 0x59f
 800bafe:	69a3      	ldr	r3, [r4, #24]
 800bb00:	f7fe fcfe 	bl	800a500 <snprintf>
 800bb04:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800bb08:	b283      	uxth	r3, r0
 800bb0a:	6830      	ldr	r0, [r6, #0]
 800bb0c:	f009 fb65 	bl	80151da <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800bb10:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800bb12:	4a23      	ldr	r2, [pc, #140]	; (800bba0 <HttpDaemon::Run()+0x130>)
 800bb14:	6921      	ldr	r1, [r4, #16]
 800bb16:	6830      	ldr	r0, [r6, #0]
 800bb18:	f009 fb5f 	bl	80151da <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800bb1c:	f44f 7202 	mov.w	r2, #520	; 0x208
 800bb20:	2302      	movs	r3, #2
 800bb22:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800bb26:	e00b      	b.n	800bb40 <HttpDaemon::Run()+0xd0>
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d1be      	bne.n	800baaa <HttpDaemon::Run()+0x3a>
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f7ff feee 	bl	800b910 <HttpDaemon::HandlePost(bool)>
 800bb34:	28c8      	cmp	r0, #200	; 0xc8
 800bb36:	61a0      	str	r0, [r4, #24]
 800bb38:	d1b7      	bne.n	800baaa <HttpDaemon::Run()+0x3a>
 800bb3a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1b4      	bne.n	800baaa <HttpDaemon::Run()+0x3a>
 800bb40:	b004      	add	sp, #16
 800bb42:	bd70      	pop	{r4, r5, r6, pc}
 800bb44:	2bc8      	cmp	r3, #200	; 0xc8
 800bb46:	d1b0      	bne.n	800baaa <HttpDaemon::Run()+0x3a>
 800bb48:	69e1      	ldr	r1, [r4, #28]
 800bb4a:	2901      	cmp	r1, #1
 800bb4c:	d1ad      	bne.n	800baaa <HttpDaemon::Run()+0x3a>
 800bb4e:	4620      	mov	r0, r4
 800bb50:	f7ff fede 	bl	800b910 <HttpDaemon::HandlePost(bool)>
 800bb54:	e7a8      	b.n	800baa8 <HttpDaemon::Run()+0x38>
 800bb56:	f240 12f5 	movw	r2, #501	; 0x1f5
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d010      	beq.n	800bb80 <HttpDaemon::Run()+0x110>
 800bb5e:	f240 12f9 	movw	r2, #505	; 0x1f9
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d00e      	beq.n	800bb84 <HttpDaemon::Run()+0x114>
 800bb66:	4d11      	ldr	r5, [pc, #68]	; (800bbac <HttpDaemon::Run()+0x13c>)
 800bb68:	4a0a      	ldr	r2, [pc, #40]	; (800bb94 <HttpDaemon::Run()+0x124>)
 800bb6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800bb6e:	bf18      	it	ne
 800bb70:	4615      	movne	r5, r2
 800bb72:	e7ae      	b.n	800bad2 <HttpDaemon::Run()+0x62>
 800bb74:	4d0e      	ldr	r5, [pc, #56]	; (800bbb0 <HttpDaemon::Run()+0x140>)
 800bb76:	e7ac      	b.n	800bad2 <HttpDaemon::Run()+0x62>
 800bb78:	4d0e      	ldr	r5, [pc, #56]	; (800bbb4 <HttpDaemon::Run()+0x144>)
 800bb7a:	e7aa      	b.n	800bad2 <HttpDaemon::Run()+0x62>
 800bb7c:	4d0e      	ldr	r5, [pc, #56]	; (800bbb8 <HttpDaemon::Run()+0x148>)
 800bb7e:	e7a8      	b.n	800bad2 <HttpDaemon::Run()+0x62>
 800bb80:	4d0e      	ldr	r5, [pc, #56]	; (800bbbc <HttpDaemon::Run()+0x14c>)
 800bb82:	e7a6      	b.n	800bad2 <HttpDaemon::Run()+0x62>
 800bb84:	4d0e      	ldr	r5, [pc, #56]	; (800bbc0 <HttpDaemon::Run()+0x150>)
 800bb86:	e7a4      	b.n	800bad2 <HttpDaemon::Run()+0x62>
 800bb88:	4d0e      	ldr	r5, [pc, #56]	; (800bbc4 <HttpDaemon::Run()+0x154>)
 800bb8a:	e7ad      	b.n	800bae8 <HttpDaemon::Run()+0x78>
 800bb8c:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 800bb90:	0801affb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 800bb94:	0801b082 	stmdaeq	r1, {r1, r7, ip, sp, pc}
 800bb98:	0801b151 	stmdaeq	r1, {r0, r4, r6, r8, ip, sp, pc}
 800bb9c:	0801b093 	stmdaeq	r1, {r0, r1, r4, r7, ip, sp, pc}
 800bba0:	20000128 	andcs	r0, r0, r8, lsr #2
 800bba4:	0801b146 	stmdaeq	r1, {r1, r2, r6, r8, ip, sp, pc}
 800bba8:	0801b0ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, ip, sp, pc}
 800bbac:	0801b03f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, ip, sp, pc}
 800bbb0:	0801b02a 	stmdaeq	r1, {r1, r3, r5, ip, sp, pc}
 800bbb4:	0801b007 	stmdaeq	r1, {r0, r1, r2, ip, sp, pc}
 800bbb8:	0801b011 	stmdaeq	r1, {r0, r4, ip, sp, pc}
 800bbbc:	0801b055 	stmdaeq	r1, {r0, r2, r4, r6, ip, sp, pc}
 800bbc0:	0801b06c 	stmdaeq	r1, {r2, r3, r5, r6, ip, sp, pc}
 800bbc4:	0801b090 	stmdaeq	r1, {r4, r7, ip, sp, pc}

0800bbc8 <remoteconfig::json_get_list(char*, unsigned short)>:
 800bbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbca:	4b13      	ldr	r3, [pc, #76]	; (800bc18 <remoteconfig::json_get_list(char*, unsigned short)+0x50>)
 800bbcc:	4f13      	ldr	r7, [pc, #76]	; (800bc1c <remoteconfig::json_get_list(char*, unsigned short)+0x54>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	b08b      	sub	sp, #44	; 0x2c
 800bbd2:	4605      	mov	r5, r0
 800bbd4:	6838      	ldr	r0, [r7, #0]
 800bbd6:	695c      	ldr	r4, [r3, #20]
 800bbd8:	9109      	str	r1, [sp, #36]	; 0x24
 800bbda:	f7fe ffb5 	bl	800ab48 <RemoteConfig::GetStringNode() const>
 800bbde:	4606      	mov	r6, r0
 800bbe0:	6838      	ldr	r0, [r7, #0]
 800bbe2:	f7fe ffbd 	bl	800ab60 <RemoteConfig::GetStringOutput() const>
 800bbe6:	4b0e      	ldr	r3, [pc, #56]	; (800bc20 <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 800bbe8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbea:	7a1a      	ldrb	r2, [r3, #8]
 800bbec:	9604      	str	r6, [sp, #16]
 800bbee:	3309      	adds	r3, #9
 800bbf0:	9303      	str	r3, [sp, #12]
 800bbf2:	0e23      	lsrs	r3, r4, #24
 800bbf4:	9302      	str	r3, [sp, #8]
 800bbf6:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800bbfa:	9301      	str	r3, [sp, #4]
 800bbfc:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800bc00:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	4a07      	ldr	r2, [pc, #28]	; (800bc24 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>)
 800bc08:	b2e3      	uxtb	r3, r4
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f7fe fc78 	bl	800a500 <snprintf>
 800bc10:	b280      	uxth	r0, r0
 800bc12:	b00b      	add	sp, #44	; 0x2c
 800bc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc16:	bf00      	nop
 800bc18:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 800bc1c:	20000124 	andcs	r0, r0, r4, lsr #2
 800bc20:	20000100 	andcs	r0, r0, r0, lsl #2
 800bc24:	0801b22b 	stmdaeq	r1, {r0, r1, r3, r5, r9, ip, sp, pc}

0800bc28 <remoteconfig::json_get_version(char*, unsigned short)>:
 800bc28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bc2a:	4b0a      	ldr	r3, [pc, #40]	; (800bc54 <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 800bc2c:	9305      	str	r3, [sp, #20]
 800bc2e:	2208      	movs	r2, #8
 800bc30:	9204      	str	r2, [sp, #16]
 800bc32:	f1a3 020b 	sub.w	r2, r3, #11
 800bc36:	9203      	str	r2, [sp, #12]
 800bc38:	220b      	movs	r2, #11
 800bc3a:	9202      	str	r2, [sp, #8]
 800bc3c:	3b0e      	subs	r3, #14
 800bc3e:	4a06      	ldr	r2, [pc, #24]	; (800bc58 <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 800bc40:	9201      	str	r2, [sp, #4]
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	4a05      	ldr	r2, [pc, #20]	; (800bc5c <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800bc46:	2303      	movs	r3, #3
 800bc48:	f7fe fc5a 	bl	800a500 <snprintf>
 800bc4c:	b280      	uxth	r0, r0
 800bc4e:	b007      	add	sp, #28
 800bc50:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc54:	2000fd4e 	andcs	pc, r0, lr, asr #26
 800bc58:	0801b146 	stmdaeq	r1, {r1, r2, r6, r8, ip, sp, pc}
 800bc5c:	0801b28a 	stmdaeq	r1, {r1, r3, r7, r9, ip, sp, pc}

0800bc60 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 800bc60:	b508      	push	{r3, lr}
 800bc62:	4b05      	ldr	r3, [pc, #20]	; (800bc78 <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc6e:	4a03      	ldr	r2, [pc, #12]	; (800bc7c <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 800bc70:	f7fe fc46 	bl	800a500 <snprintf>
 800bc74:	b280      	uxth	r0, r0
 800bc76:	bd08      	pop	{r3, pc}
 800bc78:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 800bc7c:	0801b2d0 	stmdaeq	r1, {r4, r6, r7, r9, ip, sp, pc}

0800bc80 <remoteconfig::json_get_display(char*, unsigned short)>:
 800bc80:	b508      	push	{r3, lr}
 800bc82:	4b05      	ldr	r3, [pc, #20]	; (800bc98 <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 800bc84:	4a05      	ldr	r2, [pc, #20]	; (800bc9c <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	7c1b      	ldrb	r3, [r3, #16]
 800bc8a:	f083 0301 	eor.w	r3, r3, #1
 800bc8e:	f7fe fc37 	bl	800a500 <snprintf>
 800bc92:	b280      	uxth	r0, r0
 800bc94:	bd08      	pop	{r3, pc}
 800bc96:	bf00      	nop
 800bc98:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0
 800bc9c:	0801b2df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r9, ip, sp, pc}

0800bca0 <remoteconfig::json_get_directory(char*, unsigned short)>:
 800bca0:	b508      	push	{r3, lr}
 800bca2:	4a02      	ldr	r2, [pc, #8]	; (800bcac <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 800bca4:	f7fe fc2c 	bl	800a500 <snprintf>
 800bca8:	b280      	uxth	r0, r0
 800bcaa:	bd08      	pop	{r3, pc}
 800bcac:	0801b2ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r9, ip, sp, pc}

0800bcb0 <get_file_content(char const*, char*)>:
 800bcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcb2:	4a11      	ldr	r2, [pc, #68]	; (800bcf8 <get_file_content(char const*, char*)+0x48>)
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800bcba:	1e46      	subs	r6, r0, #1
 800bcbc:	3c01      	subs	r4, #1
 800bcbe:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800bcc2:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800bcc6:	42bd      	cmp	r5, r7
 800bcc8:	d005      	beq.n	800bcd6 <get_file_content(char const*, char*)+0x26>
 800bcca:	3301      	adds	r3, #1
 800bccc:	2b03      	cmp	r3, #3
 800bcce:	d1f2      	bne.n	800bcb6 <get_file_content(char const*, char*)+0x6>
 800bcd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcd6:	2d00      	cmp	r5, #0
 800bcd8:	d1f1      	bne.n	800bcbe <get_file_content(char const*, char*)+0xe>
 800bcda:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bcde:	4608      	mov	r0, r1
 800bce0:	6853      	ldr	r3, [r2, #4]
 800bce2:	3b01      	subs	r3, #1
 800bce4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800bce8:	f800 2b01 	strb.w	r2, [r0], #1
 800bcec:	2a00      	cmp	r2, #0
 800bcee:	d1f9      	bne.n	800bce4 <get_file_content(char const*, char*)+0x34>
 800bcf0:	1a41      	subs	r1, r0, r1
 800bcf2:	1e48      	subs	r0, r1, #1
 800bcf4:	e7ee      	b.n	800bcd4 <get_file_content(char const*, char*)+0x24>
 800bcf6:	bf00      	nop
 800bcf8:	0801b64c 	stmdaeq	r1, {r2, r3, r6, r9, sl, ip, sp, pc}

0800bcfc <ArtNet4Node::IsStatusChanged()>:
 800bcfc:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800bd00:	f893 0d8c 	ldrb.w	r0, [r3, #3468]	; 0xd8c
 800bd04:	b110      	cbz	r0, 800bd0c <ArtNet4Node::IsStatusChanged()+0x10>
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 2d8c 	strb.w	r2, [r3, #3468]	; 0xd8c
 800bd0c:	4770      	bx	lr

0800bd0e <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 800bd0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd10:	1d07      	adds	r7, r0, #4
 800bd12:	4616      	mov	r6, r2
 800bd14:	4604      	mov	r4, r0
 800bd16:	4613      	mov	r3, r2
 800bd18:	4638      	mov	r0, r7
 800bd1a:	f10d 0206 	add.w	r2, sp, #6
 800bd1e:	460d      	mov	r5, r1
 800bd20:	f000 fc82 	bl	800c628 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800bd24:	b1be      	cbz	r6, 800bd56 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800bd26:	b1b0      	cbz	r0, 800bd56 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800bd28:	2328      	movs	r3, #40	; 0x28
 800bd2a:	fb03 4305 	mla	r3, r3, r5, r4
 800bd2e:	f8d3 3a44 	ldr.w	r3, [r3, #2628]	; 0xa44
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d10f      	bne.n	800bd56 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800bd36:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800bd3a:	b123      	cbz	r3, 800bd46 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x38>
 800bd3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bd40:	3301      	adds	r3, #1
 800bd42:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bd46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bd4a:	b933      	cbnz	r3, 800bd5a <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4c>
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	4629      	mov	r1, r5
 800bd50:	4638      	mov	r0, r7
 800bd52:	f000 fc91 	bl	800c678 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800bd56:	b003      	add	sp, #12
 800bd58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd5a:	1e71      	subs	r1, r6, #1
 800bd5c:	424a      	negs	r2, r1
 800bd5e:	f504 50c4 	add.w	r0, r4, #6272	; 0x1880
 800bd62:	414a      	adcs	r2, r1
 800bd64:	3014      	adds	r0, #20
 800bd66:	4629      	mov	r1, r5
 800bd68:	f002 fd72 	bl	800e850 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800bd6c:	e7f3      	b.n	800bd56 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
	...

0800bd70 <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)>:
 800bd70:	1e8a      	subs	r2, r1, #2
 800bd72:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800bd76:	4253      	negs	r3, r2
 800bd78:	4153      	adcs	r3, r2
 800bd7a:	f880 389c 	strb.w	r3, [r0, #2204]	; 0x89c
 800bd7e:	4b02      	ldr	r3, [pc, #8]	; (800bd88 <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)+0x18>)
 800bd80:	6818      	ldr	r0, [r3, #0]
 800bd82:	f00c b8d3 	b.w	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 800bd86:	bf00      	nop
 800bd88:	2000fd9c 	mulcs	r0, ip, sp

0800bd8c <ArtNet4Node::~ArtNet4Node()>:
 800bd8c:	b510      	push	{r4, lr}
 800bd8e:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 800bd90:	6003      	str	r3, [r0, #0]
 800bd92:	4604      	mov	r4, r0
 800bd94:	f500 50c4 	add.w	r0, r0, #6272	; 0x1880
 800bd98:	3014      	adds	r0, #20
 800bd9a:	f002 fccd 	bl	800e738 <E131Bridge::~E131Bridge()>
 800bd9e:	1d20      	adds	r0, r4, #4
 800bda0:	f000 f953 	bl	800c04a <ArtNetNode::~ArtNetNode()>
 800bda4:	4620      	mov	r0, r4
 800bda6:	bd10      	pop	{r4, pc}
 800bda8:	0801bbb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, fp, ip, sp, pc}

0800bdac <ArtNet4Node::~ArtNet4Node()>:
 800bdac:	b510      	push	{r4, lr}
 800bdae:	4604      	mov	r4, r0
 800bdb0:	f7ff ffec 	bl	800bd8c <ArtNet4Node::~ArtNet4Node()>
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f00c f9b7 	bl	8018128 <operator delete(void*)>
 800bdba:	4620      	mov	r0, r4
 800bdbc:	bd10      	pop	{r4, pc}

0800bdbe <ArtNet4Node::GetStatus(unsigned int)>:
 800bdbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	f500 50c4 	add.w	r0, r0, #6272	; 0x1880
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	f10d 0206 	add.w	r2, sp, #6
 800bdcc:	3014      	adds	r0, #20
 800bdce:	460d      	mov	r5, r1
 800bdd0:	f002 fdb8 	bl	800e944 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800bdd4:	b170      	cbz	r0, 800bdf4 <ArtNet4Node::GetStatus(unsigned int)+0x36>
 800bdd6:	2344      	movs	r3, #68	; 0x44
 800bdd8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800bddc:	fb03 4105 	mla	r1, r3, r5, r4
 800bde0:	f891 0dea 	ldrb.w	r0, [r1, #3562]	; 0xdea
 800bde4:	f891 3de9 	ldrb.w	r3, [r1, #3561]	; 0xde9
 800bde8:	01c0      	lsls	r0, r0, #7
 800bdea:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 800bdee:	f040 0001 	orr.w	r0, r0, #1
 800bdf2:	b2c0      	uxtb	r0, r0
 800bdf4:	b003      	add	sp, #12
 800bdf6:	bd30      	pop	{r4, r5, pc}

0800bdf8 <ArtNet4Node::HandleAddress(unsigned char)>:
 800bdf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdfa:	f500 57c4 	add.w	r7, r0, #6272	; 0x1880
 800bdfe:	4604      	mov	r4, r0
 800be00:	460d      	mov	r5, r1
 800be02:	2600      	movs	r6, #0
 800be04:	3714      	adds	r7, #20
 800be06:	2301      	movs	r3, #1
 800be08:	f10d 0206 	add.w	r2, sp, #6
 800be0c:	4631      	mov	r1, r6
 800be0e:	1d20      	adds	r0, r4, #4
 800be10:	f000 fc0a 	bl	800c628 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800be14:	b150      	cbz	r0, 800be2c <ArtNet4Node::HandleAddress(unsigned char)+0x34>
 800be16:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800be1a:	b123      	cbz	r3, 800be26 <ArtNet4Node::HandleAddress(unsigned char)+0x2e>
 800be1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800be20:	3301      	adds	r3, #1
 800be22:	f8ad 3006 	strh.w	r3, [sp, #6]
 800be26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800be2a:	b99b      	cbnz	r3, 800be54 <ArtNet4Node::HandleAddress(unsigned char)+0x5c>
 800be2c:	3601      	adds	r6, #1
 800be2e:	2e42      	cmp	r6, #66	; 0x42
 800be30:	d1e9      	bne.n	800be06 <ArtNet4Node::HandleAddress(unsigned char)+0xe>
 800be32:	2d13      	cmp	r5, #19
 800be34:	f005 0603 	and.w	r6, r5, #3
 800be38:	d819      	bhi.n	800be6e <ArtNet4Node::HandleAddress(unsigned char)+0x76>
 800be3a:	2d0f      	cmp	r5, #15
 800be3c:	d82c      	bhi.n	800be98 <ArtNet4Node::HandleAddress(unsigned char)+0xa0>
 800be3e:	2d02      	cmp	r5, #2
 800be40:	d026      	beq.n	800be90 <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 800be42:	3d03      	subs	r5, #3
 800be44:	2d01      	cmp	r5, #1
 800be46:	d821      	bhi.n	800be8c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800be48:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800be4c:	2300      	movs	r3, #0
 800be4e:	f884 389c 	strb.w	r3, [r4, #2204]	; 0x89c
 800be52:	e01b      	b.n	800be8c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800be54:	2228      	movs	r2, #40	; 0x28
 800be56:	f604 2144 	addw	r1, r4, #2628	; 0xa44
 800be5a:	4372      	muls	r2, r6
 800be5c:	4638      	mov	r0, r7
 800be5e:	588a      	ldr	r2, [r1, r2]
 800be60:	2a01      	cmp	r2, #1
 800be62:	bf18      	it	ne
 800be64:	2202      	movne	r2, #2
 800be66:	4631      	mov	r1, r6
 800be68:	f002 fcf2 	bl	800e850 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800be6c:	e7de      	b.n	800be2c <ArtNet4Node::HandleAddress(unsigned char)+0x34>
 800be6e:	2d53      	cmp	r5, #83	; 0x53
 800be70:	d808      	bhi.n	800be84 <ArtNet4Node::HandleAddress(unsigned char)+0x8c>
 800be72:	2d4f      	cmp	r5, #79	; 0x4f
 800be74:	d90a      	bls.n	800be8c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800be76:	2344      	movs	r3, #68	; 0x44
 800be78:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800be7c:	fb03 4406 	mla	r4, r3, r6, r4
 800be80:	2300      	movs	r3, #0
 800be82:	e00f      	b.n	800bea4 <ArtNet4Node::HandleAddress(unsigned char)+0xac>
 800be84:	3570      	adds	r5, #112	; 0x70
 800be86:	b2ed      	uxtb	r5, r5
 800be88:	2d03      	cmp	r5, #3
 800be8a:	d90e      	bls.n	800beaa <ArtNet4Node::HandleAddress(unsigned char)+0xb2>
 800be8c:	b003      	add	sp, #12
 800be8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be90:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800be94:	2301      	movs	r3, #1
 800be96:	e7da      	b.n	800be4e <ArtNet4Node::HandleAddress(unsigned char)+0x56>
 800be98:	2344      	movs	r3, #68	; 0x44
 800be9a:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800be9e:	fb03 4406 	mla	r4, r3, r6, r4
 800bea2:	2301      	movs	r3, #1
 800bea4:	f8c4 3de4 	str.w	r3, [r4, #3556]	; 0xde4
 800bea8:	e7f0      	b.n	800be8c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800beaa:	2328      	movs	r3, #40	; 0x28
 800beac:	fb03 4306 	mla	r3, r3, r6, r4
 800beb0:	f8d3 2a44 	ldr.w	r2, [r3, #2628]	; 0xa44
 800beb4:	2a01      	cmp	r2, #1
 800beb6:	d1e9      	bne.n	800be8c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800beb8:	4b1d      	ldr	r3, [pc, #116]	; (800bf30 <ArtNet4Node::HandleAddress(unsigned char)+0x138>)
 800beba:	6819      	ldr	r1, [r3, #0]
 800bebc:	07c9      	lsls	r1, r1, #31
 800bebe:	bf58      	it	pl
 800bec0:	601a      	strpl	r2, [r3, #0]
 800bec2:	f240 6204 	movw	r2, #1540	; 0x604
 800bec6:	4b1b      	ldr	r3, [pc, #108]	; (800bf34 <ArtNet4Node::HandleAddress(unsigned char)+0x13c>)
 800bec8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800becc:	4372      	muls	r2, r6
 800bece:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bed2:	441a      	add	r2, r3
 800bed4:	f8d4 0898 	ldr.w	r0, [r4, #2200]	; 0x898
 800bed8:	f502 7500 	add.w	r5, r2, #512	; 0x200
 800bedc:	4611      	mov	r1, r2
 800bede:	2700      	movs	r7, #0
 800bee0:	428d      	cmp	r5, r1
 800bee2:	d121      	bne.n	800bf28 <ArtNet4Node::HandleAddress(unsigned char)+0x130>
 800bee4:	f240 6104 	movw	r1, #1540	; 0x604
 800bee8:	fb01 3106 	mla	r1, r1, r6, r3
 800beec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bef0:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800bef4:	6801      	ldr	r1, [r0, #0]
 800bef6:	690d      	ldr	r5, [r1, #16]
 800bef8:	4631      	mov	r1, r6
 800befa:	47a8      	blx	r5
 800befc:	2544      	movs	r5, #68	; 0x44
 800befe:	fb05 4506 	mla	r5, r5, r6, r4
 800bf02:	f895 3daa 	ldrb.w	r3, [r5, #3498]	; 0xdaa
 800bf06:	b15b      	cbz	r3, 800bf20 <ArtNet4Node::HandleAddress(unsigned char)+0x128>
 800bf08:	f895 3dea 	ldrb.w	r3, [r5, #3562]	; 0xdea
 800bf0c:	b943      	cbnz	r3, 800bf20 <ArtNet4Node::HandleAddress(unsigned char)+0x128>
 800bf0e:	f8d4 0898 	ldr.w	r0, [r4, #2200]	; 0x898
 800bf12:	6803      	ldr	r3, [r0, #0]
 800bf14:	4631      	mov	r1, r6
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	4798      	blx	r3
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	f885 3dea 	strb.w	r3, [r5, #3562]	; 0xdea
 800bf20:	2300      	movs	r3, #0
 800bf22:	f884 3d88 	strb.w	r3, [r4, #3464]	; 0xd88
 800bf26:	e7b1      	b.n	800be8c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800bf28:	f801 7b01 	strb.w	r7, [r1], #1
 800bf2c:	e7d8      	b.n	800bee0 <ArtNet4Node::HandleAddress(unsigned char)+0xe8>
 800bf2e:	bf00      	nop
 800bf30:	200006c8 	andcs	r0, r0, r8, asr #13
 800bf34:	20030000 	andcs	r0, r3, r0

0800bf38 <ArtNet4Node::ArtNet4Node()>:
 800bf38:	b510      	push	{r4, lr}
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	3004      	adds	r0, #4
 800bf3e:	f000 f973 	bl	800c228 <ArtNetNode::ArtNetNode()>
 800bf42:	4b05      	ldr	r3, [pc, #20]	; (800bf58 <ArtNet4Node::ArtNet4Node()+0x20>)
 800bf44:	6023      	str	r3, [r4, #0]
 800bf46:	f504 50c4 	add.w	r0, r4, #6272	; 0x1880
 800bf4a:	3014      	adds	r0, #20
 800bf4c:	f002 fb8a 	bl	800e664 <E131Bridge::E131Bridge()>
 800bf50:	61e4      	str	r4, [r4, #28]
 800bf52:	4620      	mov	r0, r4
 800bf54:	bd10      	pop	{r4, pc}
 800bf56:	bf00      	nop
 800bf58:	0801bbb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, fp, ip, sp, pc}

0800bf5c <ArtNet4Node::Start()>:
 800bf5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bf60:	f500 57ef 	add.w	r7, r0, #7648	; 0x1de0
 800bf64:	4604      	mov	r4, r0
 800bf66:	4606      	mov	r6, r0
 800bf68:	2500      	movs	r5, #0
 800bf6a:	3704      	adds	r7, #4
 800bf6c:	f104 0804 	add.w	r8, r4, #4
 800bf70:	2301      	movs	r3, #1
 800bf72:	f10d 0206 	add.w	r2, sp, #6
 800bf76:	4629      	mov	r1, r5
 800bf78:	4640      	mov	r0, r8
 800bf7a:	f000 fb55 	bl	800c628 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800bf7e:	b140      	cbz	r0, 800bf92 <ArtNet4Node::Start()+0x36>
 800bf80:	f8d6 3a44 	ldr.w	r3, [r6, #2628]	; 0xa44
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	bf01      	itttt	eq
 800bf88:	2344      	moveq	r3, #68	; 0x44
 800bf8a:	436b      	muleq	r3, r5
 800bf8c:	f8d6 2a3c 	ldreq.w	r2, [r6, #2620]	; 0xa3c
 800bf90:	50fa      	streq	r2, [r7, r3]
 800bf92:	3501      	adds	r5, #1
 800bf94:	2d42      	cmp	r5, #66	; 0x42
 800bf96:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800bf9a:	d1e7      	bne.n	800bf6c <ArtNet4Node::Start()+0x10>
 800bf9c:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800bfa0:	f894 2a1c 	ldrb.w	r2, [r4, #2588]	; 0xa1c
 800bfa4:	f883 2d8d 	strb.w	r2, [r3, #3469]	; 0xd8d
 800bfa8:	68a2      	ldr	r2, [r4, #8]
 800bfaa:	f8c3 2898 	str.w	r2, [r3, #2200]	; 0x898
 800bfae:	4640      	mov	r0, r8
 800bfb0:	f000 f84c 	bl	800c04c <ArtNetNode::Start()>
 800bfb4:	f504 50c4 	add.w	r0, r4, #6272	; 0x1880
 800bfb8:	3014      	adds	r0, #20
 800bfba:	b002      	add	sp, #8
 800bfbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc0:	f002 bbbc 	b.w	800e73c <E131Bridge::Start()>

0800bfc4 <ArtNet4Node::Run()>:
 800bfc4:	b510      	push	{r4, lr}
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	3004      	adds	r0, #4
 800bfca:	f000 fa4f 	bl	800c46c <ArtNetNode::Run()>
 800bfce:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800bfd2:	f893 3d9f 	ldrb.w	r3, [r3, #3487]	; 0xd9f
 800bfd6:	b133      	cbz	r3, 800bfe6 <ArtNet4Node::Run()+0x22>
 800bfd8:	f504 50c4 	add.w	r0, r4, #6272	; 0x1880
 800bfdc:	3014      	adds	r0, #20
 800bfde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfe2:	f002 bf9b 	b.w	800ef1c <E131Bridge::Run()>
 800bfe6:	bd10      	pop	{r4, pc}

0800bfe8 <ArtNet4Node::Print()>:
 800bfe8:	b510      	push	{r4, lr}
 800bfea:	4604      	mov	r4, r0
 800bfec:	3004      	adds	r0, #4
 800bfee:	f001 fd71 	bl	800dad4 <ArtNetNode::Print()>
 800bff2:	f894 3a1e 	ldrb.w	r3, [r4, #2590]	; 0xa1e
 800bff6:	b163      	cbz	r3, 800c012 <ArtNet4Node::Print()+0x2a>
 800bff8:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800bffc:	b113      	cbz	r3, 800c004 <ArtNet4Node::Print()+0x1c>
 800bffe:	4805      	ldr	r0, [pc, #20]	; (800c014 <ArtNet4Node::Print()+0x2c>)
 800c000:	f7fe fa56 	bl	800a4b0 <printf>
 800c004:	f504 50c4 	add.w	r0, r4, #6272	; 0x1880
 800c008:	3014      	adds	r0, #20
 800c00a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c00e:	f003 b9d5 	b.w	800f3bc <E131Bridge::Print()>
 800c012:	bd10      	pop	{r4, pc}
 800c014:	0801bb8e 	stmdaeq	r1, {r1, r2, r3, r7, r8, r9, fp, ip, sp, pc}

0800c018 <strncpy.isra.0>:
 800c018:	3901      	subs	r1, #1
 800c01a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c01e:	b92b      	cbnz	r3, 800c02c <strncpy.isra.0+0x14>
 800c020:	4402      	add	r2, r0
 800c022:	4290      	cmp	r0, r2
 800c024:	d006      	beq.n	800c034 <strncpy.isra.0+0x1c>
 800c026:	f800 3b01 	strb.w	r3, [r0], #1
 800c02a:	e7fa      	b.n	800c022 <strncpy.isra.0+0xa>
 800c02c:	3a01      	subs	r2, #1
 800c02e:	f800 3b01 	strb.w	r3, [r0], #1
 800c032:	d1f2      	bne.n	800c01a <strncpy.isra.0+0x2>
 800c034:	4770      	bx	lr

0800c036 <memcpy.isra.0>:
 800c036:	3801      	subs	r0, #1
 800c038:	440a      	add	r2, r1
 800c03a:	4291      	cmp	r1, r2
 800c03c:	d100      	bne.n	800c040 <memcpy.isra.0+0xa>
 800c03e:	4770      	bx	lr
 800c040:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c044:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c048:	e7f7      	b.n	800c03a <memcpy.isra.0+0x4>

0800c04a <ArtNetNode::~ArtNetNode()>:
 800c04a:	4770      	bx	lr

0800c04c <ArtNetNode::Start()>:
 800c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04e:	4d2c      	ldr	r5, [pc, #176]	; (800c100 <ArtNetNode::Start()+0xb4>)
 800c050:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 800c054:	682a      	ldr	r2, [r5, #0]
 800c056:	7951      	ldrb	r1, [r2, #5]
 800c058:	f023 0302 	bic.w	r3, r3, #2
 800c05c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800c060:	b25b      	sxtb	r3, r3
 800c062:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
 800c066:	7912      	ldrb	r2, [r2, #4]
 800c068:	f023 0304 	bic.w	r3, r3, #4
 800c06c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800c070:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
 800c074:	4604      	mov	r4, r0
 800c076:	f001 f923 	bl	800d2c0 <ArtNetNode::FillPollReply()>
 800c07a:	6828      	ldr	r0, [r5, #0]
 800c07c:	f641 1136 	movw	r1, #6454	; 0x1936
 800c080:	f008 fd9d 	bl	8014bbe <Network::Begin(unsigned short)>
 800c084:	2302      	movs	r3, #2
 800c086:	f884 3a11 	strb.w	r3, [r4, #2577]	; 0xa11
 800c08a:	6923      	ldr	r3, [r4, #16]
 800c08c:	6020      	str	r0, [r4, #0]
 800c08e:	b173      	cbz	r3, 800c0ae <ArtNetNode::Start()+0x62>
 800c090:	f504 56a3 	add.w	r6, r4, #5216	; 0x1460
 800c094:	2500      	movs	r5, #0
 800c096:	3614      	adds	r6, #20
 800c098:	012b      	lsls	r3, r5, #4
 800c09a:	5cf3      	ldrb	r3, [r6, r3]
 800c09c:	b123      	cbz	r3, 800c0a8 <ArtNetNode::Start()+0x5c>
 800c09e:	6920      	ldr	r0, [r4, #16]
 800c0a0:	6803      	ldr	r3, [r0, #0]
 800c0a2:	4629      	mov	r1, r5
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	4798      	blx	r3
 800c0a8:	3501      	adds	r5, #1
 800c0aa:	2d42      	cmp	r5, #66	; 0x42
 800c0ac:	d1f4      	bne.n	800c098 <ArtNetNode::Start()+0x4c>
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f001 f9df 	bl	800d474 <ArtNetNode::SendPollRelply(bool)>
 800c0b6:	68e3      	ldr	r3, [r4, #12]
 800c0b8:	b1d3      	cbz	r3, 800c0f0 <ArtNetNode::Start()+0xa4>
 800c0ba:	f504 57a3 	add.w	r7, r4, #5216	; 0x1460
 800c0be:	4626      	mov	r6, r4
 800c0c0:	2500      	movs	r5, #0
 800c0c2:	3714      	adds	r7, #20
 800c0c4:	f896 3a3c 	ldrb.w	r3, [r6, #2620]	; 0xa3c
 800c0c8:	b133      	cbz	r3, 800c0d8 <ArtNetNode::Start()+0x8c>
 800c0ca:	f896 3a24 	ldrb.w	r3, [r6, #2596]	; 0xa24
 800c0ce:	b11b      	cbz	r3, 800c0d8 <ArtNetNode::Start()+0x8c>
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f001 face 	bl	800d674 <ArtNetNode::SendTod(unsigned int)>
 800c0d8:	012b      	lsls	r3, r5, #4
 800c0da:	5cfb      	ldrb	r3, [r7, r3]
 800c0dc:	b11b      	cbz	r3, 800c0e6 <ArtNetNode::Start()+0x9a>
 800c0de:	4629      	mov	r1, r5
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f001 fb99 	bl	800d818 <ArtNetNode::SendTodRequest(unsigned int)>
 800c0e6:	3501      	adds	r5, #1
 800c0e8:	2d42      	cmp	r5, #66	; 0x42
 800c0ea:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c0ee:	d1e9      	bne.n	800c0c4 <ArtNetNode::Start()+0x78>
 800c0f0:	4b04      	ldr	r3, [pc, #16]	; (800c104 <ArtNetNode::Start()+0xb8>)
 800c0f2:	2102      	movs	r1, #2
 800c0f4:	6818      	ldr	r0, [r3, #0]
 800c0f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c0fa:	f00b bf17 	b.w	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 800c0fe:	bf00      	nop
 800c100:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 800c104:	2000fd9c 	mulcs	r0, ip, sp

0800c108 <ArtNetNode::Stop()>:
 800c108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c10c:	2500      	movs	r5, #0
 800c10e:	4f22      	ldr	r7, [pc, #136]	; (800c198 <ArtNetNode::Stop()+0x90>)
 800c110:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800c1a0 <ArtNetNode::Stop()+0x98>
 800c114:	4604      	mov	r4, r0
 800c116:	4606      	mov	r6, r0
 800c118:	46a9      	mov	r9, r5
 800c11a:	f04f 0a01 	mov.w	sl, #1
 800c11e:	f8d6 3a40 	ldr.w	r3, [r6, #2624]	; 0xa40
 800c122:	b97b      	cbnz	r3, 800c144 <ArtNetNode::Stop()+0x3c>
 800c124:	6860      	ldr	r0, [r4, #4]
 800c126:	b118      	cbz	r0, 800c130 <ArtNetNode::Stop()+0x28>
 800c128:	6803      	ldr	r3, [r0, #0]
 800c12a:	4629      	mov	r1, r5
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	4798      	blx	r3
 800c130:	f8d8 3000 	ldr.w	r3, [r8]
 800c134:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800c138:	07db      	lsls	r3, r3, #31
 800c13a:	bf58      	it	pl
 800c13c:	f8c8 a000 	strpl.w	sl, [r8]
 800c140:	f886 9a45 	strb.w	r9, [r6, #2629]	; 0xa45
 800c144:	3501      	adds	r5, #1
 800c146:	2d42      	cmp	r5, #66	; 0x42
 800c148:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c14c:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800c150:	d1e5      	bne.n	800c11e <ArtNetNode::Stop()+0x16>
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	b173      	cbz	r3, 800c174 <ArtNetNode::Stop()+0x6c>
 800c156:	f504 56a3 	add.w	r6, r4, #5216	; 0x1460
 800c15a:	2500      	movs	r5, #0
 800c15c:	3614      	adds	r6, #20
 800c15e:	012b      	lsls	r3, r5, #4
 800c160:	5cf3      	ldrb	r3, [r6, r3]
 800c162:	b123      	cbz	r3, 800c16e <ArtNetNode::Stop()+0x66>
 800c164:	6920      	ldr	r0, [r4, #16]
 800c166:	6803      	ldr	r3, [r0, #0]
 800c168:	4629      	mov	r1, r5
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	4798      	blx	r3
 800c16e:	3501      	adds	r5, #1
 800c170:	2d04      	cmp	r5, #4
 800c172:	d1f4      	bne.n	800c15e <ArtNetNode::Stop()+0x56>
 800c174:	4b09      	ldr	r3, [pc, #36]	; (800c19c <ArtNetNode::Stop()+0x94>)
 800c176:	2100      	movs	r1, #0
 800c178:	6818      	ldr	r0, [r3, #0]
 800c17a:	f00b fed7 	bl	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 800c17e:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 800c182:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c186:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c18a:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 800c18e:	2301      	movs	r3, #1
 800c190:	f884 3a11 	strb.w	r3, [r4, #2577]	; 0xa11
 800c194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c198:	20030000 	andcs	r0, r3, r0
 800c19c:	2000fd9c 	mulcs	r0, ip, sp
 800c1a0:	200006c8 	andcs	r0, r0, r8, asr #13

0800c1a4 <ArtNetNode::SetShortName(char const*)>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	f100 0558 	add.w	r5, r0, #88	; 0x58
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	2211      	movs	r2, #17
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	f7ff ff32 	bl	800c018 <strncpy.isra.0>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800c1ba:	2212      	movs	r2, #18
 800c1bc:	4629      	mov	r1, r5
 800c1be:	f204 50a6 	addw	r0, r4, #1446	; 0x5a6
 800c1c2:	f7ff ff38 	bl	800c036 <memcpy.isra.0>
 800c1c6:	f894 3a11 	ldrb.w	r3, [r4, #2577]	; 0xa11
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	d10a      	bne.n	800c1e4 <ArtNetNode::SetShortName(char const*)+0x40>
 800c1ce:	69e0      	ldr	r0, [r4, #28]
 800c1d0:	b118      	cbz	r0, 800c1da <ArtNetNode::SetShortName(char const*)+0x36>
 800c1d2:	6803      	ldr	r3, [r0, #0]
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	4798      	blx	r3
 800c1da:	4628      	mov	r0, r5
 800c1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1e0:	f00a b8fc 	b.w	80163dc <artnet::display_shortname(char const*)>
 800c1e4:	bd38      	pop	{r3, r4, r5, pc}

0800c1e6 <ArtNetNode::SetLongName(char const*)>:
 800c1e6:	b538      	push	{r3, r4, r5, lr}
 800c1e8:	f100 056a 	add.w	r5, r0, #106	; 0x6a
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	223f      	movs	r2, #63	; 0x3f
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	f7ff ff11 	bl	800c018 <strncpy.isra.0>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800c1fc:	2240      	movs	r2, #64	; 0x40
 800c1fe:	4629      	mov	r1, r5
 800c200:	f504 60b7 	add.w	r0, r4, #1464	; 0x5b8
 800c204:	f7ff ff17 	bl	800c036 <memcpy.isra.0>
 800c208:	f894 3a11 	ldrb.w	r3, [r4, #2577]	; 0xa11
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d10a      	bne.n	800c226 <ArtNetNode::SetLongName(char const*)+0x40>
 800c210:	69e0      	ldr	r0, [r4, #28]
 800c212:	b118      	cbz	r0, 800c21c <ArtNetNode::SetLongName(char const*)+0x36>
 800c214:	6803      	ldr	r3, [r0, #0]
 800c216:	4629      	mov	r1, r5
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	4798      	blx	r3
 800c21c:	4628      	mov	r0, r5
 800c21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c222:	f00a b8e5 	b.w	80163f0 <artnet::display_longname(char const*)>
 800c226:	bd38      	pop	{r3, r4, r5, pc}

0800c228 <ArtNetNode::ArtNetNode()>:
 800c228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c22a:	2300      	movs	r3, #0
 800c22c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c230:	e9c0 2300 	strd	r2, r3, [r0]
 800c234:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800c238:	4a50      	ldr	r2, [pc, #320]	; (800c37c <ArtNetNode::ArtNetNode()+0x154>)
 800c23a:	f8c0 39a4 	str.w	r3, [r0, #2468]	; 0x9a4
 800c23e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c242:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800c246:	6010      	str	r0, [r2, #0]
 800c248:	b085      	sub	sp, #20
 800c24a:	4604      	mov	r4, r0
 800c24c:	f8c0 39a8 	str.w	r3, [r0, #2472]	; 0x9a8
 800c250:	f880 39ac 	strb.w	r3, [r0, #2476]	; 0x9ac
 800c254:	f100 0220 	add.w	r2, r0, #32
 800c258:	f100 01b8 	add.w	r1, r0, #184	; 0xb8
 800c25c:	428a      	cmp	r2, r1
 800c25e:	d17e      	bne.n	800c35e <ArtNetNode::ArtNetNode()+0x136>
 800c260:	4b47      	ldr	r3, [pc, #284]	; (800c380 <ArtNetNode::ArtNetNode()+0x158>)
 800c262:	6818      	ldr	r0, [r3, #0]
 800c264:	6943      	ldr	r3, [r0, #20]
 800c266:	6223      	str	r3, [r4, #32]
 800c268:	69c2      	ldr	r2, [r0, #28]
 800c26a:	ea63 0302 	orn	r3, r3, r2
 800c26e:	6263      	str	r3, [r4, #36]	; 0x24
 800c270:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c272:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800c276:	f008 fca8 	bl	8014bca <Network::MacAddressCopyTo(unsigned char*)>
 800c27a:	23d0      	movs	r3, #208	; 0xd0
 800c27c:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 800c280:	f642 0398 	movw	r3, #10392	; 0x2898
 800c284:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
 800c288:	f504 6222 	add.w	r2, r4, #2592	; 0xa20
 800c28c:	f504 6320 	add.w	r3, r4, #2560	; 0xa00
 800c290:	2100      	movs	r1, #0
 800c292:	4293      	cmp	r3, r2
 800c294:	d166      	bne.n	800c364 <ArtNetNode::ArtNetNode()+0x13c>
 800c296:	f240 1201 	movw	r2, #257	; 0x101
 800c29a:	f8a4 2a10 	strh.w	r2, [r4, #2576]	; 0xa10
 800c29e:	f504 50c4 	add.w	r0, r4, #6272	; 0x1880
 800c2a2:	f504 52a3 	add.w	r2, r4, #5216	; 0x1460
 800c2a6:	3210      	adds	r2, #16
 800c2a8:	3010      	adds	r0, #16
 800c2aa:	2600      	movs	r6, #0
 800c2ac:	2708      	movs	r7, #8
 800c2ae:	f103 0528 	add.w	r5, r3, #40	; 0x28
 800c2b2:	42ab      	cmp	r3, r5
 800c2b4:	d15c      	bne.n	800c370 <ArtNetNode::ArtNetNode()+0x148>
 800c2b6:	4611      	mov	r1, r2
 800c2b8:	f102 0310 	add.w	r3, r2, #16
 800c2bc:	4299      	cmp	r1, r3
 800c2be:	d15a      	bne.n	800c376 <ArtNetNode::ArtNetNode()+0x14e>
 800c2c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2c2:	6093      	str	r3, [r2, #8]
 800c2c4:	4288      	cmp	r0, r1
 800c2c6:	70d7      	strb	r7, [r2, #3]
 800c2c8:	d14f      	bne.n	800c36a <ArtNetNode::ArtNetNode()+0x142>
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	492d      	ldr	r1, [pc, #180]	; (800c384 <ArtNetNode::ArtNetNode()+0x15c>)
 800c2ce:	4e2e      	ldr	r6, [pc, #184]	; (800c388 <ArtNetNode::ArtNetNode()+0x160>)
 800c2d0:	f7ff ff68 	bl	800c1a4 <ArtNetNode::SetShortName(char const*)>
 800c2d4:	4b2d      	ldr	r3, [pc, #180]	; (800c38c <ArtNetNode::ArtNetNode()+0x164>)
 800c2d6:	9302      	str	r3, [sp, #8]
 800c2d8:	f604 15bd 	addw	r5, r4, #2493	; 0x9bd
 800c2dc:	2304      	movs	r3, #4
 800c2de:	4a2c      	ldr	r2, [pc, #176]	; (800c390 <ArtNetNode::ArtNetNode()+0x168>)
 800c2e0:	9301      	str	r3, [sp, #4]
 800c2e2:	9600      	str	r6, [sp, #0]
 800c2e4:	4b2b      	ldr	r3, [pc, #172]	; (800c394 <ArtNetNode::ArtNetNode()+0x16c>)
 800c2e6:	2140      	movs	r1, #64	; 0x40
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	f7fe f909 	bl	800a500 <snprintf>
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	2500      	movs	r5, #0
 800c2f4:	f7ff ff77 	bl	800c1e6 <ArtNetNode::SetLongName(char const*)>
 800c2f8:	f604 10ad 	addw	r0, r4, #2477	; 0x9ad
 800c2fc:	4926      	ldr	r1, [pc, #152]	; (800c398 <ArtNetNode::ArtNetNode()+0x170>)
 800c2fe:	220f      	movs	r2, #15
 800c300:	f7ff fe8a 	bl	800c018 <strncpy.isra.0>
 800c304:	4631      	mov	r1, r6
 800c306:	f204 607b 	addw	r0, r4, #1659	; 0x67b
 800c30a:	f884 59bc 	strb.w	r5, [r4, #2492]	; 0x9bc
 800c30e:	2208      	movs	r2, #8
 800c310:	f7ff fe91 	bl	800c036 <memcpy.isra.0>
 800c314:	2350      	movs	r3, #80	; 0x50
 800c316:	f884 3684 	strb.w	r3, [r4, #1668]	; 0x684
 800c31a:	230e      	movs	r3, #14
 800c31c:	f884 3686 	strb.w	r3, [r4, #1670]	; 0x686
 800c320:	f604 008d 	addw	r0, r4, #2189	; 0x88d
 800c324:	f884 5683 	strb.w	r5, [r4, #1667]	; 0x683
 800c328:	f884 5685 	strb.w	r5, [r4, #1669]	; 0x685
 800c32c:	2208      	movs	r2, #8
 800c32e:	4631      	mov	r1, r6
 800c330:	f7ff fe81 	bl	800c036 <memcpy.isra.0>
 800c334:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800c338:	f884 3896 	strb.w	r3, [r4, #2198]	; 0x896
 800c33c:	4620      	mov	r0, r4
 800c33e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800c342:	f884 5895 	strb.w	r5, [r4, #2197]	; 0x895
 800c346:	f884 5897 	strb.w	r5, [r4, #2199]	; 0x897
 800c34a:	f8a4 3898 	strh.w	r3, [r4, #2200]	; 0x898
 800c34e:	f884 589b 	strb.w	r5, [r4, #2203]	; 0x89b
 800c352:	f8c4 589c 	str.w	r5, [r4, #2204]	; 0x89c
 800c356:	f8a4 58a0 	strh.w	r5, [r4, #2208]	; 0x8a0
 800c35a:	b005      	add	sp, #20
 800c35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c35e:	f802 3b01 	strb.w	r3, [r2], #1
 800c362:	e77b      	b.n	800c25c <ArtNetNode::ArtNetNode()+0x34>
 800c364:	f803 1b01 	strb.w	r1, [r3], #1
 800c368:	e793      	b.n	800c292 <ArtNetNode::ArtNetNode()+0x6a>
 800c36a:	462b      	mov	r3, r5
 800c36c:	460a      	mov	r2, r1
 800c36e:	e79e      	b.n	800c2ae <ArtNetNode::ArtNetNode()+0x86>
 800c370:	f803 6b01 	strb.w	r6, [r3], #1
 800c374:	e79d      	b.n	800c2b2 <ArtNetNode::ArtNetNode()+0x8a>
 800c376:	f801 6b01 	strb.w	r6, [r1], #1
 800c37a:	e79f      	b.n	800c2bc <ArtNetNode::ArtNetNode()+0x94>
 800c37c:	200006cc 	andcs	r0, r0, ip, asr #13
 800c380:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 800c384:	0801bc37 	stmdaeq	r1, {r0, r1, r2, r4, r5, sl, fp, ip, sp, pc}
 800c388:	0801bc2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, sl, fp, ip, sp, pc}
 800c38c:	0801bc11 	stmdaeq	r1, {r0, r4, sl, fp, ip, sp, pc}
 800c390:	0801bc05 	stmdaeq	r1, {r0, r2, sl, fp, ip, sp, pc}
 800c394:	0801b146 	stmdaeq	r1, {r1, r2, r6, r8, ip, sp, pc}
 800c398:	0801bc26 	stmdaeq	r1, {r1, r2, r5, sl, fp, ip, sp, pc}

0800c39c <ArtNetNode::SetNetworkDataLossCondition()>:
 800c39c:	2300      	movs	r3, #0
 800c39e:	b570      	push	{r4, r5, r6, lr}
 800c3a0:	f880 3a16 	strb.w	r3, [r0, #2582]	; 0xa16
 800c3a4:	f880 3a15 	strb.w	r3, [r0, #2581]	; 0xa15
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	f500 6525 	add.w	r5, r0, #2640	; 0xa50
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	f8d3 2a2c 	ldr.w	r2, [r3, #2604]	; 0xa2c
 800c3b4:	f8d3 1a34 	ldr.w	r1, [r3, #2612]	; 0xa34
 800c3b8:	42ca      	cmn	r2, r1
 800c3ba:	d11d      	bne.n	800c3f8 <ArtNetNode::SetNetworkDataLossCondition()+0x5c>
 800c3bc:	3328      	adds	r3, #40	; 0x28
 800c3be:	42ab      	cmp	r3, r5
 800c3c0:	d1f6      	bne.n	800c3b0 <ArtNetNode::SetNetworkDataLossCondition()+0x14>
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
 800c3c4:	6840      	ldr	r0, [r0, #4]
 800c3c6:	6803      	ldr	r3, [r0, #0]
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	695b      	ldr	r3, [r3, #20]
 800c3cc:	4798      	blx	r3
 800c3ce:	4b11      	ldr	r3, [pc, #68]	; (800c414 <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 800c3d0:	4911      	ldr	r1, [pc, #68]	; (800c418 <ArtNetNode::SetNetworkDataLossCondition()+0x7c>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	2001      	movs	r0, #1
 800c3d6:	f8c4 2a2c 	str.w	r2, [r4, #2604]	; 0xa2c
 800c3da:	f8c4 2a34 	str.w	r2, [r4, #2612]	; 0xa34
 800c3de:	680e      	ldr	r6, [r1, #0]
 800c3e0:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
 800c3e4:	07f6      	lsls	r6, r6, #31
 800c3e6:	f104 0428 	add.w	r4, r4, #40	; 0x28
 800c3ea:	bf58      	it	pl
 800c3ec:	6008      	strpl	r0, [r1, #0]
 800c3ee:	42ac      	cmp	r4, r5
 800c3f0:	f203 6304 	addw	r3, r3, #1540	; 0x604
 800c3f4:	d1ef      	bne.n	800c3d6 <ArtNetNode::SetNetworkDataLossCondition()+0x3a>
 800c3f6:	e7e4      	b.n	800c3c2 <ArtNetNode::SetNetworkDataLossCondition()+0x26>
 800c3f8:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800c3fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c400:	2b40      	cmp	r3, #64	; 0x40
 800c402:	d0df      	beq.n	800c3c4 <ArtNetNode::SetNetworkDataLossCondition()+0x28>
 800c404:	d9e3      	bls.n	800c3ce <ArtNetNode::SetNetworkDataLossCondition()+0x32>
 800c406:	2b80      	cmp	r3, #128	; 0x80
 800c408:	d1e1      	bne.n	800c3ce <ArtNetNode::SetNetworkDataLossCondition()+0x32>
 800c40a:	6840      	ldr	r0, [r0, #4]
 800c40c:	6803      	ldr	r3, [r0, #0]
 800c40e:	699b      	ldr	r3, [r3, #24]
 800c410:	4798      	blx	r3
 800c412:	e7dc      	b.n	800c3ce <ArtNetNode::SetNetworkDataLossCondition()+0x32>
 800c414:	20030000 	andcs	r0, r3, r0
 800c418:	200006c8 	andcs	r0, r0, r8, asr #13

0800c41c <ArtNetNode::GetType()>:
 800c41c:	f8b0 3588 	ldrh.w	r3, [r0, #1416]	; 0x588
 800c420:	2b0b      	cmp	r3, #11
 800c422:	b530      	push	{r4, r5, lr}
 800c424:	d91d      	bls.n	800c462 <ArtNetNode::GetType()+0x46>
 800c426:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
 800c42a:	b9d3      	cbnz	r3, 800c462 <ArtNetNode::GetType()+0x46>
 800c42c:	f890 20c3 	ldrb.w	r2, [r0, #195]	; 0xc3
 800c430:	2a0e      	cmp	r2, #14
 800c432:	d10d      	bne.n	800c450 <ArtNetNode::GetType()+0x34>
 800c434:	4a0c      	ldr	r2, [pc, #48]	; (800c468 <ArtNetNode::GetType()+0x4c>)
 800c436:	f100 03b7 	add.w	r3, r0, #183	; 0xb7
 800c43a:	f100 01bf 	add.w	r1, r0, #191	; 0xbf
 800c43e:	428b      	cmp	r3, r1
 800c440:	d109      	bne.n	800c456 <ArtNetNode::GetType()+0x3a>
 800c442:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
 800c446:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
 800c44a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c44e:	b29b      	uxth	r3, r3
 800c450:	f8a0 358a 	strh.w	r3, [r0, #1418]	; 0x58a
 800c454:	bd30      	pop	{r4, r5, pc}
 800c456:	f812 4b01 	ldrb.w	r4, [r2], #1
 800c45a:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800c45e:	42a5      	cmp	r5, r4
 800c460:	d0ed      	beq.n	800c43e <ArtNetNode::GetType()+0x22>
 800c462:	2300      	movs	r3, #0
 800c464:	e7f4      	b.n	800c450 <ArtNetNode::GetType()+0x34>
 800c466:	bf00      	nop
 800c468:	0801a7c8 	stmdaeq	r1, {r3, r6, r7, r8, r9, sl, sp, pc}

0800c46c <ArtNetNode::Run()>:
 800c46c:	b530      	push	{r4, r5, lr}
 800c46e:	4601      	mov	r1, r0
 800c470:	b085      	sub	sp, #20
 800c472:	4604      	mov	r4, r0
 800c474:	f10d 030e 	add.w	r3, sp, #14
 800c478:	f811 0bb8 	ldrb.w	r0, [r1], #184
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800c482:	f204 5384 	addw	r3, r4, #1412	; 0x584
 800c486:	f007 fe71 	bl	801416c <udp_recv>
 800c48a:	4b65      	ldr	r3, [pc, #404]	; (800c620 <ArtNetNode::Run()+0x1b4>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f8c4 39a4 	str.w	r3, [r4, #2468]	; 0x9a4
 800c492:	2800      	cmp	r0, #0
 800c494:	d146      	bne.n	800c524 <ArtNetNode::Run()+0xb8>
 800c496:	f8d4 29a8 	ldr.w	r2, [r4, #2472]	; 0x9a8
 800c49a:	1a9b      	subs	r3, r3, r2
 800c49c:	f242 720f 	movw	r2, #9999	; 0x270f
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d902      	bls.n	800c4aa <ArtNetNode::Run()+0x3e>
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f7ff ff79 	bl	800c39c <ArtNetNode::SetNetworkDataLossCondition()>
 800c4aa:	f894 3a12 	ldrb.w	r3, [r4, #2578]	; 0xa12
 800c4ae:	b15b      	cbz	r3, 800c4c8 <ArtNetNode::Run()+0x5c>
 800c4b0:	69a0      	ldr	r0, [r4, #24]
 800c4b2:	f894 5a17 	ldrb.w	r5, [r4, #2583]	; 0xa17
 800c4b6:	6803      	ldr	r3, [r0, #0]
 800c4b8:	695b      	ldr	r3, [r3, #20]
 800c4ba:	4798      	blx	r3
 800c4bc:	b905      	cbnz	r5, 800c4c0 <ArtNetNode::Run()+0x54>
 800c4be:	b118      	cbz	r0, 800c4c8 <ArtNetNode::Run()+0x5c>
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 ffd6 	bl	800d474 <ArtNetNode::SendPollRelply(bool)>
 800c4c8:	f8d4 39a4 	ldr.w	r3, [r4, #2468]	; 0x9a4
 800c4cc:	f8d4 29a8 	ldr.w	r2, [r4, #2472]	; 0x9a8
 800c4d0:	1a9b      	subs	r3, r3, r2
 800c4d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4d6:	d305      	bcc.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c4d8:	f894 3a19 	ldrb.w	r3, [r4, #2585]	; 0xa19
 800c4dc:	f023 0302 	bic.w	r3, r3, #2
 800c4e0:	f884 3a19 	strb.w	r3, [r4, #2585]	; 0xa19
 800c4e4:	6923      	ldr	r3, [r4, #16]
 800c4e6:	b113      	cbz	r3, 800c4ee <ArtNetNode::Run()+0x82>
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f000 fd8b 	bl	800d004 <ArtNetNode::HandleDmxIn()>
 800c4ee:	68e3      	ldr	r3, [r4, #12]
 800c4f0:	b113      	cbz	r3, 800c4f8 <ArtNetNode::Run()+0x8c>
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f001 fa2c 	bl	800d950 <ArtNetNode::HandleRdmIn()>
 800c4f8:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 800c4fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c500:	2bc0      	cmp	r3, #192	; 0xc0
 800c502:	d10d      	bne.n	800c520 <ArtNetNode::Run()+0xb4>
 800c504:	4b47      	ldr	r3, [pc, #284]	; (800c624 <ArtNetNode::Run()+0x1b8>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	2b04      	cmp	r3, #4
 800c50c:	d008      	beq.n	800c520 <ArtNetNode::Run()+0xb4>
 800c50e:	69a0      	ldr	r0, [r4, #24]
 800c510:	f894 2a19 	ldrb.w	r2, [r4, #2585]	; 0xa19
 800c514:	6803      	ldr	r3, [r0, #0]
 800c516:	699b      	ldr	r3, [r3, #24]
 800c518:	2a00      	cmp	r2, #0
 800c51a:	d07f      	beq.n	800c61c <ArtNetNode::Run()+0x1b0>
 800c51c:	2103      	movs	r1, #3
 800c51e:	4798      	blx	r3
 800c520:	b005      	add	sp, #20
 800c522:	bd30      	pop	{r4, r5, pc}
 800c524:	f894 2a15 	ldrb.w	r2, [r4, #2581]	; 0xa15
 800c528:	f8a4 0588 	strh.w	r0, [r4, #1416]	; 0x588
 800c52c:	f8c4 39a8 	str.w	r3, [r4, #2472]	; 0x9a8
 800c530:	b142      	cbz	r2, 800c544 <ArtNetNode::Run()+0xd8>
 800c532:	f8d4 2a0c 	ldr.w	r2, [r4, #2572]	; 0xa0c
 800c536:	1a9b      	subs	r3, r3, r2
 800c538:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800c53c:	bf24      	itt	cs
 800c53e:	2300      	movcs	r3, #0
 800c540:	f884 3a15 	strbcs.w	r3, [r4, #2581]	; 0xa15
 800c544:	4620      	mov	r0, r4
 800c546:	f7ff ff69 	bl	800c41c <ArtNetNode::GetType()>
 800c54a:	f8b4 358a 	ldrh.w	r3, [r4, #1418]	; 0x58a
 800c54e:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 800c552:	d04e      	beq.n	800c5f2 <ArtNetNode::Run()+0x186>
 800c554:	d81b      	bhi.n	800c58e <ArtNetNode::Run()+0x122>
 800c556:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c55a:	d03d      	beq.n	800c5d8 <ArtNetNode::Run()+0x16c>
 800c55c:	d80b      	bhi.n	800c576 <ArtNetNode::Run()+0x10a>
 800c55e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c562:	d02d      	beq.n	800c5c0 <ArtNetNode::Run()+0x154>
 800c564:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 800c568:	d030      	beq.n	800c5cc <ArtNetNode::Run()+0x160>
 800c56a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c56e:	d1b9      	bne.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c570:	f000 ffec 	bl	800d54c <ArtNetNode::HandlePoll()>
 800c574:	e7b6      	b.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c57a:	d033      	beq.n	800c5e4 <ArtNetNode::Run()+0x178>
 800c57c:	f5b3 4f01 	cmp.w	r3, #33024	; 0x8100
 800c580:	d1b0      	bne.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c582:	68e3      	ldr	r3, [r4, #12]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d0ad      	beq.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c588:	f001 f843 	bl	800d612 <ArtNetNode::HandleTodData()>
 800c58c:	e7aa      	b.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c58e:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800c592:	d024      	beq.n	800c5de <ArtNetNode::Run()+0x172>
 800c594:	d80b      	bhi.n	800c5ae <ArtNetNode::Run()+0x142>
 800c596:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 800c59a:	d031      	beq.n	800c600 <ArtNetNode::Run()+0x194>
 800c59c:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 800c5a0:	d1a0      	bne.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c5a2:	68a3      	ldr	r3, [r4, #8]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d09d      	beq.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c5a8:	f001 fa6c 	bl	800da84 <ArtNetNode::HandleTimeCode()>
 800c5ac:	e79a      	b.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c5ae:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 800c5b2:	d02c      	beq.n	800c60e <ArtNetNode::Run()+0x1a2>
 800c5b4:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800c5b8:	d194      	bne.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c5ba:	f000 fdb5 	bl	800d128 <ArtNetNode::HandleIpProg()>
 800c5be:	e791      	b.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c5c0:	6863      	ldr	r3, [r4, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d08e      	beq.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c5c6:	f000 fc33 	bl	800ce30 <ArtNetNode::HandleDmx()>
 800c5ca:	e78b      	b.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c5cc:	6863      	ldr	r3, [r4, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d088      	beq.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c5d2:	f001 fa0d 	bl	800d9f0 <ArtNetNode::HandleSync()>
 800c5d6:	e785      	b.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c5d8:	f000 fa08 	bl	800c9ec <ArtNetNode::HandleAddress()>
 800c5dc:	e782      	b.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c5de:	f001 fa57 	bl	800da90 <ArtNetNode::HandleTimeSync()>
 800c5e2:	e77f      	b.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c5e4:	68e3      	ldr	r3, [r4, #12]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f43f af7c 	beq.w	800c4e4 <ArtNetNode::Run()+0x78>
 800c5ec:	f001 f8e5 	bl	800d7ba <ArtNetNode::HandleTodRequest()>
 800c5f0:	e778      	b.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c5f2:	68e3      	ldr	r3, [r4, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f43f af75 	beq.w	800c4e4 <ArtNetNode::Run()+0x78>
 800c5fa:	f001 f8a1 	bl	800d740 <ArtNetNode::HandleTodControl()>
 800c5fe:	e771      	b.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c600:	68e3      	ldr	r3, [r4, #12]
 800c602:	2b00      	cmp	r3, #0
 800c604:	f43f af6e 	beq.w	800c4e4 <ArtNetNode::Run()+0x78>
 800c608:	f001 f94e 	bl	800d8a8 <ArtNetNode::HandleRdm()>
 800c60c:	e76a      	b.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c60e:	6963      	ldr	r3, [r4, #20]
 800c610:	2b00      	cmp	r3, #0
 800c612:	f43f af67 	beq.w	800c4e4 <ArtNetNode::Run()+0x78>
 800c616:	f001 ffe7 	bl	800e5e8 <ArtNetNode::HandleTrigger()>
 800c61a:	e763      	b.n	800c4e4 <ArtNetNode::Run()+0x78>
 800c61c:	2102      	movs	r1, #2
 800c61e:	e77e      	b.n	800c51e <ArtNetNode::Run()+0xb2>
 800c620:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 800c624:	2000fd9c 	mulcs	r0, ip, sp

0800c628 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 800c628:	b94b      	cbnz	r3, 800c63e <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x16>
 800c62a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c62e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800c632:	f8b1 3470 	ldrh.w	r3, [r1, #1136]	; 0x470
 800c636:	8013      	strh	r3, [r2, #0]
 800c638:	f891 0474 	ldrb.w	r0, [r1, #1140]	; 0x474
 800c63c:	4770      	bx	lr
 800c63e:	2b01      	cmp	r3, #1
 800c640:	bf01      	itttt	eq
 800c642:	2328      	moveq	r3, #40	; 0x28
 800c644:	fb03 0101 	mlaeq	r1, r3, r1, r0
 800c648:	f8b1 3a20 	ldrheq.w	r3, [r1, #2592]	; 0xa20
 800c64c:	f891 0a24 	ldrbeq.w	r0, [r1, #2596]	; 0xa24
 800c650:	bf0c      	ite	eq
 800c652:	8013      	strheq	r3, [r2, #0]
 800c654:	2000      	movne	r0, #0
 800c656:	4770      	bx	lr

0800c658 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 800c658:	4402      	add	r2, r0
 800c65a:	f001 010f 	and.w	r1, r1, #15
 800c65e:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 800c662:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 800c666:	021b      	lsls	r3, r3, #8
 800c668:	0112      	lsls	r2, r2, #4
 800c66a:	b2d2      	uxtb	r2, r2
 800c66c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800c670:	4313      	orrs	r3, r2
 800c672:	ea43 0001 	orr.w	r0, r3, r1
 800c676:	4770      	bx	lr

0800c678 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 800c678:	2941      	cmp	r1, #65	; 0x41
 800c67a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c67e:	4604      	mov	r4, r0
 800c680:	460d      	mov	r5, r1
 800c682:	4690      	mov	r8, r2
 800c684:	461e      	mov	r6, r3
 800c686:	f200 80a7 	bhi.w	800c7d8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x160>
 800c68a:	f1b8 0f02 	cmp.w	r8, #2
 800c68e:	ea4f 0291 	mov.w	r2, r1, lsr #2
 800c692:	d123      	bne.n	800c6dc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x64>
 800c694:	2328      	movs	r3, #40	; 0x28
 800c696:	fb03 0301 	mla	r3, r3, r1, r0
 800c69a:	f893 2a24 	ldrb.w	r2, [r3, #2596]	; 0xa24
 800c69e:	b13a      	cbz	r2, 800c6b0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x38>
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 2a24 	strb.w	r2, [r3, #2596]	; 0xa24
 800c6a6:	f890 3a1a 	ldrb.w	r3, [r0, #2586]	; 0xa1a
 800c6aa:	3b01      	subs	r3, #1
 800c6ac:	f880 3a1a 	strb.w	r3, [r0, #2586]	; 0xa1a
 800c6b0:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800c6b4:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 800c6b8:	f895 3474 	ldrb.w	r3, [r5, #1140]	; 0x474
 800c6bc:	b90b      	cbnz	r3, 800c6c2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x4a>
 800c6be:	2000      	movs	r0, #0
 800c6c0:	e00a      	b.n	800c6d8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x60>
 800c6c2:	2308      	movs	r3, #8
 800c6c4:	2000      	movs	r0, #0
 800c6c6:	f885 0474 	strb.w	r0, [r5, #1140]	; 0x474
 800c6ca:	f885 3473 	strb.w	r3, [r5, #1139]	; 0x473
 800c6ce:	f894 3a1b 	ldrb.w	r3, [r4, #2587]	; 0xa1b
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	f884 3a1b 	strb.w	r3, [r4, #2587]	; 0xa1b
 800c6d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6dc:	f1b8 0f00 	cmp.w	r8, #0
 800c6e0:	d138      	bne.n	800c754 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xdc>
 800c6e2:	eb00 1701 	add.w	r7, r0, r1, lsl #4
 800c6e6:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800c6ea:	f897 3474 	ldrb.w	r3, [r7, #1140]	; 0x474
 800c6ee:	b923      	cbnz	r3, 800c6fa <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x82>
 800c6f0:	f890 3a1b 	ldrb.w	r3, [r0, #2587]	; 0xa1b
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	f880 3a1b 	strb.w	r3, [r0, #2587]	; 0xa1b
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	f887 3474 	strb.w	r3, [r7, #1140]	; 0x474
 800c700:	f04f 0900 	mov.w	r9, #0
 800c704:	f006 030f 	and.w	r3, r6, #15
 800c708:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
 800c70c:	f887 9473 	strb.w	r9, [r7, #1139]	; 0x473
 800c710:	4631      	mov	r1, r6
 800c712:	4620      	mov	r0, r4
 800c714:	f7ff ffa0 	bl	800c658 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800c718:	2328      	movs	r3, #40	; 0x28
 800c71a:	fb03 4305 	mla	r3, r3, r5, r4
 800c71e:	f8a7 0470 	strh.w	r0, [r7, #1136]	; 0x470
 800c722:	f893 2a24 	ldrb.w	r2, [r3, #2596]	; 0xa24
 800c726:	b132      	cbz	r2, 800c736 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800c728:	f883 9a24 	strb.w	r9, [r3, #2596]	; 0xa24
 800c72c:	f894 3a1a 	ldrb.w	r3, [r4, #2586]	; 0xa1a
 800c730:	3b01      	subs	r3, #1
 800c732:	f884 3a1a 	strb.w	r3, [r4, #2586]	; 0xa1a
 800c736:	69a0      	ldr	r0, [r4, #24]
 800c738:	f894 3a11 	ldrb.w	r3, [r4, #2577]	; 0xa11
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d03f      	beq.n	800c7c0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x148>
 800c740:	2b02      	cmp	r3, #2
 800c742:	d138      	bne.n	800c7b6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x13e>
 800c744:	69e0      	ldr	r0, [r4, #28]
 800c746:	2800      	cmp	r0, #0
 800c748:	d140      	bne.n	800c7cc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x154>
 800c74a:	4631      	mov	r1, r6
 800c74c:	4628      	mov	r0, r5
 800c74e:	f009 fe51 	bl	80163f4 <artnet::display_universe_switch(unsigned int, unsigned char)>
 800c752:	e7b4      	b.n	800c6be <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x46>
 800c754:	f1b8 0f01 	cmp.w	r8, #1
 800c758:	d1ed      	bne.n	800c736 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800c75a:	2728      	movs	r7, #40	; 0x28
 800c75c:	fb07 0301 	mla	r3, r7, r1, r0
 800c760:	f893 3a24 	ldrb.w	r3, [r3, #2596]	; 0xa24
 800c764:	b923      	cbnz	r3, 800c770 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf8>
 800c766:	f890 3a1a 	ldrb.w	r3, [r0, #2586]	; 0xa1a
 800c76a:	3301      	adds	r3, #1
 800c76c:	f880 3a1a 	strb.w	r3, [r0, #2586]	; 0xa1a
 800c770:	fb07 4705 	mla	r7, r7, r5, r4
 800c774:	2301      	movs	r3, #1
 800c776:	f887 3a24 	strb.w	r3, [r7, #2596]	; 0xa24
 800c77a:	f006 030f 	and.w	r3, r6, #15
 800c77e:	f887 3a22 	strb.w	r3, [r7, #2594]	; 0xa22
 800c782:	4631      	mov	r1, r6
 800c784:	4620      	mov	r0, r4
 800c786:	f7ff ff67 	bl	800c658 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800c78a:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800c78e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c792:	f8a7 0a20 	strh.w	r0, [r7, #2592]	; 0xa20
 800c796:	f893 2474 	ldrb.w	r2, [r3, #1140]	; 0x474
 800c79a:	2a00      	cmp	r2, #0
 800c79c:	d0cb      	beq.n	800c736 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
 800c7a4:	2208      	movs	r2, #8
 800c7a6:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
 800c7aa:	f894 3a1b 	ldrb.w	r3, [r4, #2587]	; 0xa1b
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	f884 3a1b 	strb.w	r3, [r4, #2587]	; 0xa1b
 800c7b4:	e7bf      	b.n	800c736 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800c7b6:	6803      	ldr	r3, [r0, #0]
 800c7b8:	4642      	mov	r2, r8
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	4629      	mov	r1, r5
 800c7be:	4798      	blx	r3
 800c7c0:	f894 3a11 	ldrb.w	r3, [r4, #2577]	; 0xa11
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	f47f af7a 	bne.w	800c6be <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x46>
 800c7ca:	e7bb      	b.n	800c744 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xcc>
 800c7cc:	6803      	ldr	r3, [r0, #0]
 800c7ce:	4632      	mov	r2, r6
 800c7d0:	695b      	ldr	r3, [r3, #20]
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	4798      	blx	r3
 800c7d6:	e7b8      	b.n	800c74a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd2>
 800c7d8:	f06f 0004 	mvn.w	r0, #4
 800c7dc:	e77c      	b.n	800c6d8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x60>

0800c7de <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800c7de:	b430      	push	{r4, r5}
 800c7e0:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 800c7e4:	f3c3 2506 	ubfx	r5, r3, #8, #7
 800c7e8:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
 800c7ec:	f3c3 1503 	ubfx	r5, r3, #4, #4
 800c7f0:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 800c7f4:	bc30      	pop	{r4, r5}
 800c7f6:	f003 030f 	and.w	r3, r3, #15
 800c7fa:	f7ff bf3d 	b.w	800c678 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>

0800c7fe <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 800c7fe:	2941      	cmp	r1, #65	; 0x41
 800c800:	d815      	bhi.n	800c82e <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x30>
 800c802:	b94b      	cbnz	r3, 800c818 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x1a>
 800c804:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c808:	f501 5080 	add.w	r0, r1, #4096	; 0x1000
 800c80c:	f890 3472 	ldrb.w	r3, [r0, #1138]	; 0x472
 800c810:	7013      	strb	r3, [r2, #0]
 800c812:	f890 0474 	ldrb.w	r0, [r0, #1140]	; 0x474
 800c816:	4770      	bx	lr
 800c818:	2b02      	cmp	r3, #2
 800c81a:	d008      	beq.n	800c82e <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x30>
 800c81c:	2328      	movs	r3, #40	; 0x28
 800c81e:	fb03 0101 	mla	r1, r3, r1, r0
 800c822:	f891 3a22 	ldrb.w	r3, [r1, #2594]	; 0xa22
 800c826:	7013      	strb	r3, [r2, #0]
 800c828:	f891 0a24 	ldrb.w	r0, [r1, #2596]	; 0xa24
 800c82c:	4770      	bx	lr
 800c82e:	2000      	movs	r0, #0
 800c830:	4770      	bx	lr

0800c832 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 800c832:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c836:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800c83a:	f108 0904 	add.w	r9, r8, #4
 800c83e:	1883      	adds	r3, r0, r2
 800c840:	f1b9 0f42 	cmp.w	r9, #66	; 0x42
 800c844:	f04f 06a0 	mov.w	r6, #160	; 0xa0
 800c848:	4605      	mov	r5, r0
 800c84a:	460f      	mov	r7, r1
 800c84c:	4614      	mov	r4, r2
 800c84e:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
 800c852:	bf28      	it	cs
 800c854:	f04f 0942 	movcs.w	r9, #66	; 0x42
 800c858:	fb06 0602 	mla	r6, r6, r2, r0
 800c85c:	45c8      	cmp	r8, r9
 800c85e:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c862:	d30c      	bcc.n	800c87e <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x4c>
 800c864:	69e8      	ldr	r0, [r5, #28]
 800c866:	b1a8      	cbz	r0, 800c894 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x62>
 800c868:	f895 3a11 	ldrb.w	r3, [r5, #2577]	; 0xa11
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d111      	bne.n	800c894 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x62>
 800c870:	6803      	ldr	r3, [r0, #0]
 800c872:	463a      	mov	r2, r7
 800c874:	4621      	mov	r1, r4
 800c876:	69db      	ldr	r3, [r3, #28]
 800c878:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c87c:	4718      	bx	r3
 800c87e:	f8b6 19f8 	ldrh.w	r1, [r6, #2552]	; 0x9f8
 800c882:	4622      	mov	r2, r4
 800c884:	4628      	mov	r0, r5
 800c886:	f7ff fee7 	bl	800c658 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800c88a:	f108 0801 	add.w	r8, r8, #1
 800c88e:	f8a6 09f8 	strh.w	r0, [r6, #2552]	; 0x9f8
 800c892:	e7e3      	b.n	800c85c <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x2a>
 800c894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c898 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 800c898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c89c:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800c8a0:	f108 0904 	add.w	r9, r8, #4
 800c8a4:	1883      	adds	r3, r0, r2
 800c8a6:	f1b9 0f42 	cmp.w	r9, #66	; 0x42
 800c8aa:	f04f 06a0 	mov.w	r6, #160	; 0xa0
 800c8ae:	4605      	mov	r5, r0
 800c8b0:	460f      	mov	r7, r1
 800c8b2:	4614      	mov	r4, r2
 800c8b4:	f883 1036 	strb.w	r1, [r3, #54]	; 0x36
 800c8b8:	bf28      	it	cs
 800c8ba:	f04f 0942 	movcs.w	r9, #66	; 0x42
 800c8be:	fb06 0602 	mla	r6, r6, r2, r0
 800c8c2:	45c8      	cmp	r8, r9
 800c8c4:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c8c8:	d30c      	bcc.n	800c8e4 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x4c>
 800c8ca:	69e8      	ldr	r0, [r5, #28]
 800c8cc:	b1a8      	cbz	r0, 800c8fa <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x62>
 800c8ce:	f895 3a11 	ldrb.w	r3, [r5, #2577]	; 0xa11
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d111      	bne.n	800c8fa <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x62>
 800c8d6:	6803      	ldr	r3, [r0, #0]
 800c8d8:	463a      	mov	r2, r7
 800c8da:	4621      	mov	r1, r4
 800c8dc:	699b      	ldr	r3, [r3, #24]
 800c8de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8e2:	4718      	bx	r3
 800c8e4:	f8b6 19f8 	ldrh.w	r1, [r6, #2552]	; 0x9f8
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f7ff feb4 	bl	800c658 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800c8f0:	f108 0801 	add.w	r8, r8, #1
 800c8f4:	f8a6 09f8 	strh.w	r0, [r6, #2552]	; 0x9f8
 800c8f8:	e7e3      	b.n	800c8c2 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x2a>
 800c8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c8fe <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800c8fe:	2941      	cmp	r1, #65	; 0x41
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	460c      	mov	r4, r1
 800c904:	4615      	mov	r5, r2
 800c906:	d820      	bhi.n	800c94a <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x4c>
 800c908:	2228      	movs	r2, #40	; 0x28
 800c90a:	fb02 0301 	mla	r3, r2, r1, r0
 800c90e:	2d01      	cmp	r5, #1
 800c910:	f8c3 5a40 	str.w	r5, [r3, #2624]	; 0xa40
 800c914:	f893 3a23 	ldrb.w	r3, [r3, #2595]	; 0xa23
 800c918:	fb02 0201 	mla	r2, r2, r1, r0
 800c91c:	bf0c      	ite	eq
 800c91e:	f043 0301 	orreq.w	r3, r3, #1
 800c922:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800c926:	f882 3a23 	strb.w	r3, [r2, #2595]	; 0xa23
 800c92a:	f890 3a11 	ldrb.w	r3, [r0, #2577]	; 0xa11
 800c92e:	2b02      	cmp	r3, #2
 800c930:	d10b      	bne.n	800c94a <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x4c>
 800c932:	69c0      	ldr	r0, [r0, #28]
 800c934:	b118      	cbz	r0, 800c93e <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x40>
 800c936:	6803      	ldr	r3, [r0, #0]
 800c938:	462a      	mov	r2, r5
 800c93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c93c:	4798      	blx	r3
 800c93e:	4629      	mov	r1, r5
 800c940:	4620      	mov	r0, r4
 800c942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c946:	f009 bd69 	b.w	801641c <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)>
 800c94a:	bd38      	pop	{r3, r4, r5, pc}

0800c94c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 800c94c:	2941      	cmp	r1, #65	; 0x41
 800c94e:	b538      	push	{r3, r4, r5, lr}
 800c950:	460c      	mov	r4, r1
 800c952:	4615      	mov	r5, r2
 800c954:	d820      	bhi.n	800c998 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x4c>
 800c956:	2228      	movs	r2, #40	; 0x28
 800c958:	fb02 0301 	mla	r3, r2, r1, r0
 800c95c:	2d01      	cmp	r5, #1
 800c95e:	f8c3 5a38 	str.w	r5, [r3, #2616]	; 0xa38
 800c962:	f893 3a23 	ldrb.w	r3, [r3, #2595]	; 0xa23
 800c966:	fb02 0201 	mla	r2, r2, r1, r0
 800c96a:	bf0c      	ite	eq
 800c96c:	f043 0302 	orreq.w	r3, r3, #2
 800c970:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 800c974:	f882 3a23 	strb.w	r3, [r2, #2595]	; 0xa23
 800c978:	f890 3a11 	ldrb.w	r3, [r0, #2577]	; 0xa11
 800c97c:	2b02      	cmp	r3, #2
 800c97e:	d10b      	bne.n	800c998 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x4c>
 800c980:	69c0      	ldr	r0, [r0, #28]
 800c982:	b118      	cbz	r0, 800c98c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x40>
 800c984:	6803      	ldr	r3, [r0, #0]
 800c986:	462a      	mov	r2, r5
 800c988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c98a:	4798      	blx	r3
 800c98c:	4629      	mov	r1, r5
 800c98e:	4620      	mov	r0, r4
 800c990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c994:	f009 bd38 	b.w	8016408 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>
 800c998:	bd38      	pop	{r3, r4, r5, pc}

0800c99a <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>:
 800c99a:	b510      	push	{r4, lr}
 800c99c:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800c9a0:	f1a1 0208 	sub.w	r2, r1, #8
 800c9a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9a8:	f880 30ad 	strb.w	r3, [r0, #173]	; 0xad
 800c9ac:	2a04      	cmp	r2, #4
 800c9ae:	d81c      	bhi.n	800c9ea <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x50>
 800c9b0:	e8df f002 	tbb	[pc, r2]
 800c9b4:	1b180307 	blne	860d5d8 <__exidx_end+0x5ef7d4>
 800c9b8:	f043001b 			; <UNDEFINED> instruction: 0xf043001b
 800c9bc:	0340      	lsls	r0, r0, #13
 800c9be:	f880 30ad 	strb.w	r3, [r0, #173]	; 0xad
 800c9c2:	f890 3a11 	ldrb.w	r3, [r0, #2577]	; 0xa11
 800c9c6:	2b02      	cmp	r3, #2
 800c9c8:	d10f      	bne.n	800c9ea <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x50>
 800c9ca:	69c0      	ldr	r0, [r0, #28]
 800c9cc:	f001 0403 	and.w	r4, r1, #3
 800c9d0:	b118      	cbz	r0, 800c9da <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x40>
 800c9d2:	6803      	ldr	r3, [r0, #0]
 800c9d4:	4621      	mov	r1, r4
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	4798      	blx	r3
 800c9da:	4620      	mov	r0, r4
 800c9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9e0:	f009 bd1f 	b.w	8016422 <artnet::display_failsafe(unsigned char)>
 800c9e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c9e8:	e7e9      	b.n	800c9be <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x24>
 800c9ea:	bd10      	pop	{r4, pc}

0800c9ec <ArtNetNode::HandleAddress()>:
 800c9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	f880 3a10 	strb.w	r3, [r0, #2576]	; 0xa10
 800c9f6:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	b133      	cbz	r3, 800ca0c <ArtNetNode::HandleAddress()+0x20>
 800c9fe:	f100 01c6 	add.w	r1, r0, #198	; 0xc6
 800ca02:	f7ff fbcf 	bl	800c1a4 <ArtNetNode::SetShortName(char const*)>
 800ca06:	2306      	movs	r3, #6
 800ca08:	f884 3a10 	strb.w	r3, [r4, #2576]	; 0xa10
 800ca0c:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
 800ca10:	b13b      	cbz	r3, 800ca22 <ArtNetNode::HandleAddress()+0x36>
 800ca12:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 800ca16:	4620      	mov	r0, r4
 800ca18:	f7ff fbe5 	bl	800c1e6 <ArtNetNode::SetLongName(char const*)>
 800ca1c:	2307      	movs	r3, #7
 800ca1e:	f884 3a10 	strb.w	r3, [r4, #2576]	; 0xa10
 800ca22:	f894 50c5 	ldrb.w	r5, [r4, #197]	; 0xc5
 800ca26:	b105      	cbz	r5, 800ca2a <ArtNetNode::HandleAddress()+0x3e>
 800ca28:	3d01      	subs	r5, #1
 800ca2a:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
 800ca2e:	2900      	cmp	r1, #0
 800ca30:	d148      	bne.n	800cac4 <ArtNetNode::HandleAddress()+0xd8>
 800ca32:	462a      	mov	r2, r5
 800ca34:	4620      	mov	r0, r4
 800ca36:	f7ff fefc 	bl	800c832 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800ca3a:	f894 10c4 	ldrb.w	r1, [r4, #196]	; 0xc4
 800ca3e:	2900      	cmp	r1, #0
 800ca40:	d146      	bne.n	800cad0 <ArtNetNode::HandleAddress()+0xe4>
 800ca42:	462a      	mov	r2, r5
 800ca44:	4620      	mov	r0, r4
 800ca46:	f7ff ff27 	bl	800c898 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800ca4a:	00ad      	lsls	r5, r5, #2
 800ca4c:	f204 1817 	addw	r8, r4, #279	; 0x117
 800ca50:	4627      	mov	r7, r4
 800ca52:	f204 191b 	addw	r9, r4, #283	; 0x11b
 800ca56:	462e      	mov	r6, r5
 800ca58:	f898 3005 	ldrb.w	r3, [r8, #5]
 800ca5c:	2b7f      	cmp	r3, #127	; 0x7f
 800ca5e:	d007      	beq.n	800ca70 <ArtNetNode::HandleAddress()+0x84>
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d13b      	bne.n	800cadc <ArtNetNode::HandleAddress()+0xf0>
 800ca64:	2301      	movs	r3, #1
 800ca66:	2201      	movs	r2, #1
 800ca68:	4631      	mov	r1, r6
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f7ff fe04 	bl	800c678 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800ca70:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800ca74:	2a7f      	cmp	r2, #127	; 0x7f
 800ca76:	d005      	beq.n	800ca84 <ArtNetNode::HandleAddress()+0x98>
 800ca78:	bbaa      	cbnz	r2, 800cae6 <ArtNetNode::HandleAddress()+0xfa>
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	4631      	mov	r1, r6
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f7ff fdfa 	bl	800c678 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800ca84:	45c8      	cmp	r8, r9
 800ca86:	f106 0601 	add.w	r6, r6, #1
 800ca8a:	d1e5      	bne.n	800ca58 <ArtNetNode::HandleAddress()+0x6c>
 800ca8c:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 800ca90:	f003 0103 	and.w	r1, r3, #3
 800ca94:	2b53      	cmp	r3, #83	; 0x53
 800ca96:	4429      	add	r1, r5
 800ca98:	d82b      	bhi.n	800caf2 <ArtNetNode::HandleAddress()+0x106>
 800ca9a:	2b4f      	cmp	r3, #79	; 0x4f
 800ca9c:	f200 8092 	bhi.w	800cbc4 <ArtNetNode::HandleAddress()+0x1d8>
 800caa0:	1e5a      	subs	r2, r3, #1
 800caa2:	b2d0      	uxtb	r0, r2
 800caa4:	2812      	cmp	r0, #18
 800caa6:	d834      	bhi.n	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800caa8:	2a12      	cmp	r2, #18
 800caaa:	d832      	bhi.n	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800caac:	e8df f002 	tbb	[pc, r2]
 800cab0:	74685c4d 	strbtvc	r5, [r8], #-3149	; 0xfffff3b3
 800cab4:	80313131 	eorshi	r3, r1, r1, lsr r1
 800cab8:	80808080 	addhi	r8, r0, r0, lsl #1
 800cabc:	85313131 	ldrhi	r3, [r1, #-305]!	; 0xfffffecf
 800cac0:	00858585 	addeq	r8, r5, r5, lsl #11
 800cac4:	060f      	lsls	r7, r1, #24
 800cac6:	d5b8      	bpl.n	800ca3a <ArtNetNode::HandleAddress()+0x4e>
 800cac8:	462a      	mov	r2, r5
 800caca:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800cace:	e7b1      	b.n	800ca34 <ArtNetNode::HandleAddress()+0x48>
 800cad0:	060e      	lsls	r6, r1, #24
 800cad2:	d5ba      	bpl.n	800ca4a <ArtNetNode::HandleAddress()+0x5e>
 800cad4:	462a      	mov	r2, r5
 800cad6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800cada:	e7b3      	b.n	800ca44 <ArtNetNode::HandleAddress()+0x58>
 800cadc:	0618      	lsls	r0, r3, #24
 800cade:	d5c7      	bpl.n	800ca70 <ArtNetNode::HandleAddress()+0x84>
 800cae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cae4:	e7bf      	b.n	800ca66 <ArtNetNode::HandleAddress()+0x7a>
 800cae6:	0611      	lsls	r1, r2, #24
 800cae8:	d5cc      	bpl.n	800ca84 <ArtNetNode::HandleAddress()+0x98>
 800caea:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800caee:	2200      	movs	r2, #0
 800caf0:	e7c4      	b.n	800ca7c <ArtNetNode::HandleAddress()+0x90>
 800caf2:	2b93      	cmp	r3, #147	; 0x93
 800caf4:	d81a      	bhi.n	800cb2c <ArtNetNode::HandleAddress()+0x140>
 800caf6:	2b8f      	cmp	r3, #143	; 0x8f
 800caf8:	d868      	bhi.n	800cbcc <ArtNetNode::HandleAddress()+0x1e0>
 800cafa:	2b63      	cmp	r3, #99	; 0x63
 800cafc:	d806      	bhi.n	800cb0c <ArtNetNode::HandleAddress()+0x120>
 800cafe:	2b5f      	cmp	r3, #95	; 0x5f
 800cb00:	d907      	bls.n	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800cb02:	2200      	movs	r2, #0
 800cb04:	4620      	mov	r0, r4
 800cb06:	f7ff fefa 	bl	800c8fe <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800cb0a:	e002      	b.n	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800cb0c:	3b70      	subs	r3, #112	; 0x70
 800cb0e:	2b03      	cmp	r3, #3
 800cb10:	d95a      	bls.n	800cbc8 <ArtNetNode::HandleAddress()+0x1dc>
 800cb12:	69a0      	ldr	r0, [r4, #24]
 800cb14:	b120      	cbz	r0, 800cb20 <ArtNetNode::HandleAddress()+0x134>
 800cb16:	6803      	ldr	r3, [r0, #0]
 800cb18:	f894 1122 	ldrb.w	r1, [r4, #290]	; 0x122
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	4798      	blx	r3
 800cb20:	4620      	mov	r0, r4
 800cb22:	2101      	movs	r1, #1
 800cb24:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb28:	f000 bca4 	b.w	800d474 <ArtNetNode::SendPollRelply(bool)>
 800cb2c:	2bc3      	cmp	r3, #195	; 0xc3
 800cb2e:	d806      	bhi.n	800cb3e <ArtNetNode::HandleAddress()+0x152>
 800cb30:	2bbf      	cmp	r3, #191	; 0xbf
 800cb32:	d9ee      	bls.n	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800cb34:	2201      	movs	r2, #1
 800cb36:	4620      	mov	r0, r4
 800cb38:	f000 fd4f 	bl	800d5da <ArtNetNode::SetRmd(unsigned int, bool)>
 800cb3c:	e7e9      	b.n	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800cb3e:	3330      	adds	r3, #48	; 0x30
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	d8e5      	bhi.n	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800cb46:	2200      	movs	r2, #0
 800cb48:	e7f5      	b.n	800cb36 <ArtNetNode::HandleAddress()+0x14a>
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	f884 3a16 	strb.w	r3, [r4, #2582]	; 0xa16
 800cb50:	f504 6225 	add.w	r2, r4, #2640	; 0xa50
 800cb54:	f897 3a23 	ldrb.w	r3, [r7, #2595]	; 0xa23
 800cb58:	f023 0308 	bic.w	r3, r3, #8
 800cb5c:	f887 3a23 	strb.w	r3, [r7, #2595]	; 0xa23
 800cb60:	3728      	adds	r7, #40	; 0x28
 800cb62:	42ba      	cmp	r2, r7
 800cb64:	d1f6      	bne.n	800cb54 <ArtNetNode::HandleAddress()+0x168>
 800cb66:	e7d4      	b.n	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800cb68:	4b3a      	ldr	r3, [pc, #232]	; (800cc54 <ArtNetNode::HandleAddress()+0x268>)
 800cb6a:	2102      	movs	r1, #2
 800cb6c:	6818      	ldr	r0, [r3, #0]
 800cb6e:	f00b f9dd 	bl	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 800cb72:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 800cb76:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800cb7a:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 800cb7e:	e7c8      	b.n	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800cb80:	4b34      	ldr	r3, [pc, #208]	; (800cc54 <ArtNetNode::HandleAddress()+0x268>)
 800cb82:	2100      	movs	r1, #0
 800cb84:	6818      	ldr	r0, [r3, #0]
 800cb86:	f00b f9d1 	bl	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 800cb8a:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 800cb8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb96:	e7f0      	b.n	800cb7a <ArtNetNode::HandleAddress()+0x18e>
 800cb98:	4b2e      	ldr	r3, [pc, #184]	; (800cc54 <ArtNetNode::HandleAddress()+0x268>)
 800cb9a:	2104      	movs	r1, #4
 800cb9c:	6818      	ldr	r0, [r3, #0]
 800cb9e:	f00b f9c5 	bl	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 800cba2:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 800cba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbae:	e7e4      	b.n	800cb7a <ArtNetNode::HandleAddress()+0x18e>
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f7ff fef1 	bl	800c99a <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800cbb8:	e7ab      	b.n	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800cbba:	2201      	movs	r2, #1
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f7ff fec5 	bl	800c94c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800cbc2:	e7a6      	b.n	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	e7f9      	b.n	800cbbc <ArtNetNode::HandleAddress()+0x1d0>
 800cbc8:	2201      	movs	r2, #1
 800cbca:	e79b      	b.n	800cb04 <ArtNetNode::HandleAddress()+0x118>
 800cbcc:	4b22      	ldr	r3, [pc, #136]	; (800cc58 <ArtNetNode::HandleAddress()+0x26c>)
 800cbce:	6860      	ldr	r0, [r4, #4]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	07d2      	lsls	r2, r2, #31
 800cbd4:	bf58      	it	pl
 800cbd6:	2201      	movpl	r2, #1
 800cbd8:	b2cd      	uxtb	r5, r1
 800cbda:	bf58      	it	pl
 800cbdc:	601a      	strpl	r2, [r3, #0]
 800cbde:	f240 6204 	movw	r2, #1540	; 0x604
 800cbe2:	4b1e      	ldr	r3, [pc, #120]	; (800cc5c <ArtNetNode::HandleAddress()+0x270>)
 800cbe4:	436a      	muls	r2, r5
 800cbe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cbea:	441a      	add	r2, r3
 800cbec:	f502 7600 	add.w	r6, r2, #512	; 0x200
 800cbf0:	4611      	mov	r1, r2
 800cbf2:	2700      	movs	r7, #0
 800cbf4:	428e      	cmp	r6, r1
 800cbf6:	d12a      	bne.n	800cc4e <ArtNetNode::HandleAddress()+0x262>
 800cbf8:	f240 6104 	movw	r1, #1540	; 0x604
 800cbfc:	fb01 3105 	mla	r1, r1, r5, r3
 800cc00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc04:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800cc08:	6801      	ldr	r1, [r0, #0]
 800cc0a:	690e      	ldr	r6, [r1, #16]
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	47b0      	blx	r6
 800cc10:	2d41      	cmp	r5, #65	; 0x41
 800cc12:	f63f af7e 	bhi.w	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800cc16:	2628      	movs	r6, #40	; 0x28
 800cc18:	fb06 4605 	mla	r6, r6, r5, r4
 800cc1c:	f8d6 3a40 	ldr.w	r3, [r6, #2624]	; 0xa40
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f47f af76 	bne.w	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800cc26:	f896 3a45 	ldrb.w	r3, [r6, #2629]	; 0xa45
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	f47f af71 	bne.w	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800cc30:	6860      	ldr	r0, [r4, #4]
 800cc32:	6803      	ldr	r3, [r0, #0]
 800cc34:	4629      	mov	r1, r5
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	4798      	blx	r3
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	f886 3a45 	strb.w	r3, [r6, #2629]	; 0xa45
 800cc40:	f896 3a23 	ldrb.w	r3, [r6, #2595]	; 0xa23
 800cc44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc48:	f886 3a23 	strb.w	r3, [r6, #2595]	; 0xa23
 800cc4c:	e761      	b.n	800cb12 <ArtNetNode::HandleAddress()+0x126>
 800cc4e:	f801 7b01 	strb.w	r7, [r1], #1
 800cc52:	e7cf      	b.n	800cbf4 <ArtNetNode::HandleAddress()+0x208>
 800cc54:	2000fd9c 	mulcs	r0, ip, sp
 800cc58:	200006c8 	andcs	r0, r0, r8, asr #13
 800cc5c:	20030000 	andcs	r0, r3, r0

0800cc60 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 800cc60:	b510      	push	{r4, lr}
 800cc62:	f240 6304 	movw	r3, #1540	; 0x604
 800cc66:	fb03 0001 	mla	r0, r3, r1, r0
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d100      	bne.n	800cc72 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 800cc70:	bd10      	pop	{r4, pc}
 800cc72:	f810 4b01 	ldrb.w	r4, [r0], #1
 800cc76:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 800cc7a:	42a1      	cmp	r1, r4
 800cc7c:	bf38      	it	cc
 800cc7e:	4621      	movcc	r1, r4
 800cc80:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 800cc84:	3301      	adds	r3, #1
 800cc86:	e7f1      	b.n	800cc6c <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

0800cc88 <memcpy.isra.0>:
 800cc88:	3801      	subs	r0, #1
 800cc8a:	440a      	add	r2, r1
 800cc8c:	4291      	cmp	r1, r2
 800cc8e:	d100      	bne.n	800cc92 <memcpy.isra.0+0xa>
 800cc90:	4770      	bx	lr
 800cc92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc96:	f800 3f01 	strb.w	r3, [r0, #1]!
 800cc9a:	e7f7      	b.n	800cc8c <memcpy.isra.0+0x4>

0800cc9c <lightset::Data::Get()>:
 800cc9c:	4b03      	ldr	r3, [pc, #12]	; (800ccac <lightset::Data::Get()+0x10>)
 800cc9e:	4804      	ldr	r0, [pc, #16]	; (800ccb0 <lightset::Data::Get()+0x14>)
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	07d2      	lsls	r2, r2, #31
 800cca4:	bf5c      	itt	pl
 800cca6:	2201      	movpl	r2, #1
 800cca8:	601a      	strpl	r2, [r3, #0]
 800ccaa:	4770      	bx	lr
 800ccac:	200006c8 	andcs	r0, r0, r8, asr #13
 800ccb0:	20030000 	andcs	r0, r3, r0

0800ccb4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 800ccb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	9103      	str	r1, [sp, #12]
 800ccba:	9201      	str	r2, [sp, #4]
 800ccbc:	f7ff ffee 	bl	800cc9c <lightset::Data::Get()>
 800ccc0:	f240 6304 	movw	r3, #1540	; 0x604
 800ccc4:	435c      	muls	r4, r3
 800ccc6:	1906      	adds	r6, r0, r4
 800ccc8:	9a01      	ldr	r2, [sp, #4]
 800ccca:	9903      	ldr	r1, [sp, #12]
 800cccc:	9202      	str	r2, [sp, #8]
 800ccce:	4605      	mov	r5, r0
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	9101      	str	r1, [sp, #4]
 800ccd4:	f7ff ffd8 	bl	800cc88 <memcpy.isra.0>
 800ccd8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ccdc:	9a02      	ldr	r2, [sp, #8]
 800ccde:	9901      	ldr	r1, [sp, #4]
 800cce0:	f8c6 2600 	str.w	r2, [r6, #1536]	; 0x600
 800cce4:	1928      	adds	r0, r5, r4
 800cce6:	b004      	add	sp, #16
 800cce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccec:	f7ff bfcc 	b.w	800cc88 <memcpy.isra.0>

0800ccf0 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800ccf0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	9103      	str	r1, [sp, #12]
 800ccf8:	9201      	str	r2, [sp, #4]
 800ccfa:	461f      	mov	r7, r3
 800ccfc:	f7ff ffce 	bl	800cc9c <lightset::Data::Get()>
 800cd00:	f240 6404 	movw	r4, #1540	; 0x604
 800cd04:	4374      	muls	r4, r6
 800cd06:	eb00 0804 	add.w	r8, r0, r4
 800cd0a:	9a01      	ldr	r2, [sp, #4]
 800cd0c:	9903      	ldr	r1, [sp, #12]
 800cd0e:	9202      	str	r2, [sp, #8]
 800cd10:	4605      	mov	r5, r0
 800cd12:	4640      	mov	r0, r8
 800cd14:	9101      	str	r1, [sp, #4]
 800cd16:	f7ff ffb7 	bl	800cc88 <memcpy.isra.0>
 800cd1a:	9a02      	ldr	r2, [sp, #8]
 800cd1c:	9901      	ldr	r1, [sp, #4]
 800cd1e:	f8c8 2600 	str.w	r2, [r8, #1536]	; 0x600
 800cd22:	b937      	cbnz	r7, 800cd32 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 800cd24:	4631      	mov	r1, r6
 800cd26:	4628      	mov	r0, r5
 800cd28:	b004      	add	sp, #16
 800cd2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd2e:	f7ff bf97 	b.w	800cc60 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800cd32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800cd36:	1928      	adds	r0, r5, r4
 800cd38:	b004      	add	sp, #16
 800cd3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd3e:	f7ff bfa3 	b.w	800cc88 <memcpy.isra.0>

0800cd42 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800cd42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd44:	b085      	sub	sp, #20
 800cd46:	461f      	mov	r7, r3
 800cd48:	4606      	mov	r6, r0
 800cd4a:	9103      	str	r1, [sp, #12]
 800cd4c:	9201      	str	r2, [sp, #4]
 800cd4e:	f7ff ffa5 	bl	800cc9c <lightset::Data::Get()>
 800cd52:	f240 6404 	movw	r4, #1540	; 0x604
 800cd56:	4374      	muls	r4, r6
 800cd58:	4605      	mov	r5, r0
 800cd5a:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800cd5e:	9a01      	ldr	r2, [sp, #4]
 800cd60:	9903      	ldr	r1, [sp, #12]
 800cd62:	9202      	str	r2, [sp, #8]
 800cd64:	4428      	add	r0, r5
 800cd66:	9101      	str	r1, [sp, #4]
 800cd68:	f7ff ff8e 	bl	800cc88 <memcpy.isra.0>
 800cd6c:	192b      	adds	r3, r5, r4
 800cd6e:	9a02      	ldr	r2, [sp, #8]
 800cd70:	9901      	ldr	r1, [sp, #4]
 800cd72:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
 800cd76:	b937      	cbnz	r7, 800cd86 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x44>
 800cd78:	4631      	mov	r1, r6
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	b005      	add	sp, #20
 800cd7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cd82:	f7ff bf6d 	b.w	800cc60 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800cd86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800cd8a:	1928      	adds	r0, r5, r4
 800cd8c:	b005      	add	sp, #20
 800cd8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cd92:	f7ff bf79 	b.w	800cc88 <memcpy.isra.0>

0800cd96 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 800cd96:	f890 3a16 	ldrb.w	r3, [r0, #2582]	; 0xa16
 800cd9a:	b91b      	cbnz	r3, 800cda4 <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 800cd9c:	f240 1301 	movw	r3, #257	; 0x101
 800cda0:	f8a0 3a16 	strh.w	r3, [r0, #2582]	; 0xa16
 800cda4:	2328      	movs	r3, #40	; 0x28
 800cda6:	fb03 0101 	mla	r1, r3, r1, r0
 800cdaa:	f891 3a23 	ldrb.w	r3, [r1, #2595]	; 0xa23
 800cdae:	f043 0308 	orr.w	r3, r3, #8
 800cdb2:	f881 3a23 	strb.w	r3, [r1, #2595]	; 0xa23
 800cdb6:	4770      	bx	lr

0800cdb8 <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 800cdb8:	2328      	movs	r3, #40	; 0x28
 800cdba:	fb03 0301 	mla	r3, r3, r1, r0
 800cdbe:	b530      	push	{r4, r5, lr}
 800cdc0:	f8d0 29a4 	ldr.w	r2, [r0, #2468]	; 0x9a4
 800cdc4:	f8d3 4a28 	ldr.w	r4, [r3, #2600]	; 0xa28
 800cdc8:	f242 7510 	movw	r5, #10000	; 0x2710
 800cdcc:	1b14      	subs	r4, r2, r4
 800cdce:	42ac      	cmp	r4, r5
 800cdd0:	d908      	bls.n	800cde4 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 800cdd2:	2400      	movs	r4, #0
 800cdd4:	f8c3 4a2c 	str.w	r4, [r3, #2604]	; 0xa2c
 800cdd8:	f893 4a23 	ldrb.w	r4, [r3, #2595]	; 0xa23
 800cddc:	f024 0408 	bic.w	r4, r4, #8
 800cde0:	f883 4a23 	strb.w	r4, [r3, #2595]	; 0xa23
 800cde4:	2328      	movs	r3, #40	; 0x28
 800cde6:	fb03 0101 	mla	r1, r3, r1, r0
 800cdea:	f8d1 3a30 	ldr.w	r3, [r1, #2608]	; 0xa30
 800cdee:	1ad2      	subs	r2, r2, r3
 800cdf0:	f242 7310 	movw	r3, #10000	; 0x2710
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d908      	bls.n	800ce0a <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	f8c1 3a34 	str.w	r3, [r1, #2612]	; 0xa34
 800cdfe:	f891 3a23 	ldrb.w	r3, [r1, #2595]	; 0xa23
 800ce02:	f023 0308 	bic.w	r3, r3, #8
 800ce06:	f881 3a23 	strb.w	r3, [r1, #2595]	; 0xa23
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	f500 6425 	add.w	r4, r0, #2640	; 0xa50
 800ce10:	2200      	movs	r2, #0
 800ce12:	f893 1a23 	ldrb.w	r1, [r3, #2595]	; 0xa23
 800ce16:	3328      	adds	r3, #40	; 0x28
 800ce18:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800ce1c:	429c      	cmp	r4, r3
 800ce1e:	ea42 0201 	orr.w	r2, r2, r1
 800ce22:	d1f6      	bne.n	800ce12 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x5a>
 800ce24:	b91a      	cbnz	r2, 800ce2e <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x76>
 800ce26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce2a:	f8a0 3a16 	strh.w	r3, [r0, #2582]	; 0xa16
 800ce2e:	bd30      	pop	{r4, r5, pc}

0800ce30 <ArtNetNode::HandleDmx()>:
 800ce30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce34:	f8b0 70c8 	ldrh.w	r7, [r0, #200]	; 0xc8
 800ce38:	ba7f      	rev16	r7, r7
 800ce3a:	b2bf      	uxth	r7, r7
 800ce3c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800ce40:	4604      	mov	r4, r0
 800ce42:	bf28      	it	cs
 800ce44:	f44f 7700 	movcs.w	r7, #512	; 0x200
 800ce48:	4605      	mov	r5, r0
 800ce4a:	2600      	movs	r6, #0
 800ce4c:	f04f 0901 	mov.w	r9, #1
 800ce50:	f100 08ca 	add.w	r8, r0, #202	; 0xca
 800ce54:	f895 3a24 	ldrb.w	r3, [r5, #2596]	; 0xa24
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d056      	beq.n	800cf0a <ArtNetNode::HandleDmx()+0xda>
 800ce5c:	f8d5 3a40 	ldr.w	r3, [r5, #2624]	; 0xa40
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d152      	bne.n	800cf0a <ArtNetNode::HandleDmx()+0xda>
 800ce64:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 800ce68:	f8b5 3a20 	ldrh.w	r3, [r5, #2592]	; 0xa20
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d14c      	bne.n	800cf0a <ArtNetNode::HandleDmx()+0xda>
 800ce70:	f895 3a23 	ldrb.w	r3, [r5, #2595]	; 0xa23
 800ce74:	f8d5 ba2c 	ldr.w	fp, [r5, #2604]	; 0xa2c
 800ce78:	f8d5 aa34 	ldr.w	sl, [r5, #2612]	; 0xa34
 800ce7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce80:	f885 3a23 	strb.w	r3, [r5, #2595]	; 0xa23
 800ce84:	f894 3a16 	ldrb.w	r3, [r4, #2582]	; 0xa16
 800ce88:	b133      	cbz	r3, 800ce98 <ArtNetNode::HandleDmx()+0x68>
 800ce8a:	f894 3a18 	ldrb.w	r3, [r4, #2584]	; 0xa18
 800ce8e:	b91b      	cbnz	r3, 800ce98 <ArtNetNode::HandleDmx()+0x68>
 800ce90:	4631      	mov	r1, r6
 800ce92:	4620      	mov	r0, r4
 800ce94:	f7ff ff90 	bl	800cdb8 <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 800ce98:	ea5b 020a 	orrs.w	r2, fp, sl
 800ce9c:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
 800cea0:	d139      	bne.n	800cf16 <ArtNetNode::HandleDmx()+0xe6>
 800cea2:	f8c5 3a2c 	str.w	r3, [r5, #2604]	; 0xa2c
 800cea6:	f8d4 39a4 	ldr.w	r3, [r4, #2468]	; 0x9a4
 800ceaa:	f8c5 3a28 	str.w	r3, [r5, #2600]	; 0xa28
 800ceae:	463a      	mov	r2, r7
 800ceb0:	4641      	mov	r1, r8
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f7ff fefe 	bl	800ccb4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800ceb8:	f894 3a15 	ldrb.w	r3, [r4, #2581]	; 0xa15
 800cebc:	b9fb      	cbnz	r3, 800cefe <ArtNetNode::HandleDmx()+0xce>
 800cebe:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800cec2:	f7ff feeb 	bl	800cc9c <lightset::Data::Get()>
 800cec6:	f240 6304 	movw	r3, #1540	; 0x604
 800ceca:	4373      	muls	r3, r6
 800cecc:	18c2      	adds	r2, r0, r3
 800cece:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 800ced2:	f8da 3000 	ldr.w	r3, [sl]
 800ced6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800ceda:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800cede:	1842      	adds	r2, r0, r1
 800cee0:	4631      	mov	r1, r6
 800cee2:	4650      	mov	r0, sl
 800cee4:	47d8      	blx	fp
 800cee6:	f895 3a45 	ldrb.w	r3, [r5, #2629]	; 0xa45
 800ceea:	b943      	cbnz	r3, 800cefe <ArtNetNode::HandleDmx()+0xce>
 800ceec:	6860      	ldr	r0, [r4, #4]
 800ceee:	6803      	ldr	r3, [r0, #0]
 800cef0:	4631      	mov	r1, r6
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	4798      	blx	r3
 800cef6:	f884 9a17 	strb.w	r9, [r4, #2583]	; 0xa17
 800cefa:	f885 9a45 	strb.w	r9, [r5, #2629]	; 0xa45
 800cefe:	f894 3a19 	ldrb.w	r3, [r4, #2585]	; 0xa19
 800cf02:	f043 0302 	orr.w	r3, r3, #2
 800cf06:	f884 3a19 	strb.w	r3, [r4, #2585]	; 0xa19
 800cf0a:	3601      	adds	r6, #1
 800cf0c:	2e42      	cmp	r6, #66	; 0x42
 800cf0e:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800cf12:	d19f      	bne.n	800ce54 <ArtNetNode::HandleDmx()+0x24>
 800cf14:	e040      	b.n	800cf98 <ArtNetNode::HandleDmx()+0x168>
 800cf16:	459b      	cmp	fp, r3
 800cf18:	d104      	bne.n	800cf24 <ArtNetNode::HandleDmx()+0xf4>
 800cf1a:	f1ba 0f00 	cmp.w	sl, #0
 800cf1e:	d0c2      	beq.n	800cea6 <ArtNetNode::HandleDmx()+0x76>
 800cf20:	b11b      	cbz	r3, 800cf2a <ArtNetNode::HandleDmx()+0xfa>
 800cf22:	e037      	b.n	800cf94 <ArtNetNode::HandleDmx()+0x164>
 800cf24:	f1bb 0f00 	cmp.w	fp, #0
 800cf28:	d132      	bne.n	800cf90 <ArtNetNode::HandleDmx()+0x160>
 800cf2a:	459a      	cmp	sl, r3
 800cf2c:	d11d      	bne.n	800cf6a <ArtNetNode::HandleDmx()+0x13a>
 800cf2e:	f8d4 39a4 	ldr.w	r3, [r4, #2468]	; 0x9a4
 800cf32:	f8c5 3a30 	str.w	r3, [r5, #2608]	; 0xa30
 800cf36:	f7ff feb1 	bl	800cc9c <lightset::Data::Get()>
 800cf3a:	f240 6304 	movw	r3, #1540	; 0x604
 800cf3e:	fb03 fa06 	mul.w	sl, r3, r6
 800cf42:	4683      	mov	fp, r0
 800cf44:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 800cf48:	463a      	mov	r2, r7
 800cf4a:	4641      	mov	r1, r8
 800cf4c:	4458      	add	r0, fp
 800cf4e:	f7ff fe9b 	bl	800cc88 <memcpy.isra.0>
 800cf52:	eb0b 030a 	add.w	r3, fp, sl
 800cf56:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 800cf5a:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800cf5e:	463a      	mov	r2, r7
 800cf60:	4641      	mov	r1, r8
 800cf62:	4458      	add	r0, fp
 800cf64:	f7ff fe90 	bl	800cc88 <memcpy.isra.0>
 800cf68:	e7a6      	b.n	800ceb8 <ArtNetNode::HandleDmx()+0x88>
 800cf6a:	b9bb      	cbnz	r3, 800cf9c <ArtNetNode::HandleDmx()+0x16c>
 800cf6c:	f8c5 3a2c 	str.w	r3, [r5, #2604]	; 0xa2c
 800cf70:	f8d4 39a4 	ldr.w	r3, [r4, #2468]	; 0x9a4
 800cf74:	f8c5 3a28 	str.w	r3, [r5, #2600]	; 0xa28
 800cf78:	4631      	mov	r1, r6
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f7ff ff0b 	bl	800cd96 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800cf80:	463a      	mov	r2, r7
 800cf82:	f8d5 3a38 	ldr.w	r3, [r5, #2616]	; 0xa38
 800cf86:	4641      	mov	r1, r8
 800cf88:	4630      	mov	r0, r6
 800cf8a:	f7ff feb1 	bl	800ccf0 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800cf8e:	e793      	b.n	800ceb8 <ArtNetNode::HandleDmx()+0x88>
 800cf90:	459b      	cmp	fp, r3
 800cf92:	d118      	bne.n	800cfc6 <ArtNetNode::HandleDmx()+0x196>
 800cf94:	459a      	cmp	sl, r3
 800cf96:	d1eb      	bne.n	800cf70 <ArtNetNode::HandleDmx()+0x140>
 800cf98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf9c:	f1ba 0f00 	cmp.w	sl, #0
 800cfa0:	d1e4      	bne.n	800cf6c <ArtNetNode::HandleDmx()+0x13c>
 800cfa2:	f8c5 3a34 	str.w	r3, [r5, #2612]	; 0xa34
 800cfa6:	f8d4 39a4 	ldr.w	r3, [r4, #2468]	; 0x9a4
 800cfaa:	f8c5 3a30 	str.w	r3, [r5, #2608]	; 0xa30
 800cfae:	4631      	mov	r1, r6
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f7ff fef0 	bl	800cd96 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800cfb6:	463a      	mov	r2, r7
 800cfb8:	f8d5 3a38 	ldr.w	r3, [r5, #2616]	; 0xa38
 800cfbc:	4641      	mov	r1, r8
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	f7ff febf 	bl	800cd42 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800cfc4:	e778      	b.n	800ceb8 <ArtNetNode::HandleDmx()+0x88>
 800cfc6:	f1ba 0f00 	cmp.w	sl, #0
 800cfca:	d0ea      	beq.n	800cfa2 <ArtNetNode::HandleDmx()+0x172>
 800cfcc:	459a      	cmp	sl, r3
 800cfce:	d0ea      	beq.n	800cfa6 <ArtNetNode::HandleDmx()+0x176>
 800cfd0:	e7e2      	b.n	800cf98 <ArtNetNode::HandleDmx()+0x168>
	...

0800cfd4 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 800cfd4:	2941      	cmp	r1, #65	; 0x41
 800cfd6:	b510      	push	{r4, lr}
 800cfd8:	d810      	bhi.n	800cffc <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x28>
 800cfda:	4b09      	ldr	r3, [pc, #36]	; (800d000 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x2c>)
 800cfdc:	681c      	ldr	r4, [r3, #0]
 800cfde:	6963      	ldr	r3, [r4, #20]
 800cfe0:	69e4      	ldr	r4, [r4, #28]
 800cfe2:	4053      	eors	r3, r2
 800cfe4:	4223      	tst	r3, r4
 800cfe6:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800cfea:	f241 4378 	movw	r3, #5240	; 0x1478
 800cfee:	bf0d      	iteet	eq
 800cff0:	1840      	addeq	r0, r0, r1
 800cff2:	1809      	addne	r1, r1, r0
 800cff4:	6a42      	ldrne	r2, [r0, #36]	; 0x24
 800cff6:	50c2      	streq	r2, [r0, r3]
 800cff8:	bf18      	it	ne
 800cffa:	50ca      	strne	r2, [r1, r3]
 800cffc:	bd10      	pop	{r4, pc}
 800cffe:	bf00      	nop
 800d000:	2000f9ac 	andcs	pc, r0, ip, lsr #19

0800d004 <ArtNetNode::HandleDmxIn()>:
 800d004:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d008:	f500 55a3 	add.w	r5, r0, #5216	; 0x1460
 800d00c:	4f37      	ldr	r7, [pc, #220]	; (800d0ec <ArtNetNode::HandleDmxIn()+0xe8>)
 800d00e:	4604      	mov	r4, r0
 800d010:	3510      	adds	r5, #16
 800d012:	2600      	movs	r6, #0
 800d014:	792b      	ldrb	r3, [r5, #4]
 800d016:	b93b      	cbnz	r3, 800d028 <ArtNetNode::HandleDmxIn()+0x24>
 800d018:	3601      	adds	r6, #1
 800d01a:	2e42      	cmp	r6, #66	; 0x42
 800d01c:	f105 0510 	add.w	r5, r5, #16
 800d020:	d1f8      	bne.n	800d014 <ArtNetNode::HandleDmxIn()+0x10>
 800d022:	b004      	add	sp, #16
 800d024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d028:	6920      	ldr	r0, [r4, #16]
 800d02a:	6803      	ldr	r3, [r0, #0]
 800d02c:	aa02      	add	r2, sp, #8
 800d02e:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800d032:	4631      	mov	r1, r6
 800d034:	ab03      	add	r3, sp, #12
 800d036:	47c0      	blx	r8
 800d038:	2800      	cmp	r0, #0
 800d03a:	d03f      	beq.n	800d0bc <ArtNetNode::HandleDmxIn()+0xb8>
 800d03c:	7b2b      	ldrb	r3, [r5, #12]
 800d03e:	3301      	adds	r3, #1
 800d040:	b2db      	uxtb	r3, r3
 800d042:	732b      	strb	r3, [r5, #12]
 800d044:	f884 3687 	strb.w	r3, [r4, #1671]	; 0x687
 800d048:	f884 6688 	strb.w	r6, [r4, #1672]	; 0x688
 800d04c:	882b      	ldrh	r3, [r5, #0]
 800d04e:	f8a4 3689 	strh.w	r3, [r4, #1673]	; 0x689
 800d052:	9b02      	ldr	r3, [sp, #8]
 800d054:	f204 628c 	addw	r2, r4, #1676	; 0x68c
 800d058:	18c1      	adds	r1, r0, r3
 800d05a:	4281      	cmp	r1, r0
 800d05c:	d129      	bne.n	800d0b2 <ArtNetNode::HandleDmxIn()+0xae>
 800d05e:	07da      	lsls	r2, r3, #31
 800d060:	d505      	bpl.n	800d06e <ArtNetNode::HandleDmxIn()+0x6a>
 800d062:	18e2      	adds	r2, r4, r3
 800d064:	2100      	movs	r1, #0
 800d066:	3301      	adds	r3, #1
 800d068:	f882 168d 	strb.w	r1, [r2, #1677]	; 0x68d
 800d06c:	9302      	str	r3, [sp, #8]
 800d06e:	9b02      	ldr	r3, [sp, #8]
 800d070:	f884 368c 	strb.w	r3, [r4, #1676]	; 0x68c
 800d074:	0a1a      	lsrs	r2, r3, #8
 800d076:	2380      	movs	r3, #128	; 0x80
 800d078:	f884 268b 	strb.w	r2, [r4, #1675]	; 0x68b
 800d07c:	70eb      	strb	r3, [r5, #3]
 800d07e:	f641 1336 	movw	r3, #6454	; 0x1936
 800d082:	9300      	str	r3, [sp, #0]
 800d084:	68ab      	ldr	r3, [r5, #8]
 800d086:	7820      	ldrb	r0, [r4, #0]
 800d088:	f240 2212 	movw	r2, #530	; 0x212
 800d08c:	f204 617b 	addw	r1, r4, #1659	; 0x67b
 800d090:	f007 f8c8 	bl	8014224 <udp_send>
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	2301      	movs	r3, #1
 800d098:	40b3      	lsls	r3, r6
 800d09a:	ea33 0102 	bics.w	r1, r3, r2
 800d09e:	d0bb      	beq.n	800d018 <ArtNetNode::HandleDmxIn()+0x14>
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	603b      	str	r3, [r7, #0]
 800d0a4:	f894 3a19 	ldrb.w	r3, [r4, #2585]	; 0xa19
 800d0a8:	f043 0301 	orr.w	r3, r3, #1
 800d0ac:	f884 3a19 	strb.w	r3, [r4, #2585]	; 0xa19
 800d0b0:	e7b2      	b.n	800d018 <ArtNetNode::HandleDmxIn()+0x14>
 800d0b2:	f810 cb01 	ldrb.w	ip, [r0], #1
 800d0b6:	f802 cf01 	strb.w	ip, [r2, #1]!
 800d0ba:	e7ce      	b.n	800d05a <ArtNetNode::HandleDmxIn()+0x56>
 800d0bc:	f995 2003 	ldrsb.w	r2, [r5, #3]
 800d0c0:	78eb      	ldrb	r3, [r5, #3]
 800d0c2:	2a00      	cmp	r2, #0
 800d0c4:	daa8      	bge.n	800d018 <ArtNetNode::HandleDmxIn()+0x14>
 800d0c6:	9a03      	ldr	r2, [sp, #12]
 800d0c8:	2a00      	cmp	r2, #0
 800d0ca:	d1a5      	bne.n	800d018 <ArtNetNode::HandleDmxIn()+0x14>
 800d0cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0d0:	70eb      	strb	r3, [r5, #3]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	40b2      	lsls	r2, r6
 800d0d8:	ea23 0302 	bic.w	r3, r3, r2
 800d0dc:	603b      	str	r3, [r7, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d19a      	bne.n	800d018 <ArtNetNode::HandleDmxIn()+0x14>
 800d0e2:	f894 3a19 	ldrb.w	r3, [r4, #2585]	; 0xa19
 800d0e6:	f023 0301 	bic.w	r3, r3, #1
 800d0ea:	e7df      	b.n	800d0ac <ArtNetNode::HandleDmxIn()+0xa8>
 800d0ec:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800d0f0 <memcmp.constprop.0>:
 800d0f0:	b510      	push	{r4, lr}
 800d0f2:	4907      	ldr	r1, [pc, #28]	; (800d110 <memcmp.constprop.0+0x20>)
 800d0f4:	1e42      	subs	r2, r0, #1
 800d0f6:	3003      	adds	r0, #3
 800d0f8:	4282      	cmp	r2, r0
 800d0fa:	d101      	bne.n	800d100 <memcmp.constprop.0+0x10>
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	e006      	b.n	800d10e <memcmp.constprop.0+0x1e>
 800d100:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800d104:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d108:	42a3      	cmp	r3, r4
 800d10a:	d0f5      	beq.n	800d0f8 <memcmp.constprop.0+0x8>
 800d10c:	1b18      	subs	r0, r3, r4
 800d10e:	bd10      	pop	{r4, pc}
 800d110:	200006d4 	ldrdcs	r0, [r0], -r4

0800d114 <memcpy.constprop.0.isra.0>:
 800d114:	3801      	subs	r0, #1
 800d116:	1d0b      	adds	r3, r1, #4
 800d118:	4299      	cmp	r1, r3
 800d11a:	d100      	bne.n	800d11e <memcpy.constprop.0.isra.0+0xa>
 800d11c:	4770      	bx	lr
 800d11e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d122:	f800 2f01 	strb.w	r2, [r0, #1]!
 800d126:	e7f7      	b.n	800d118 <memcpy.constprop.0.isra.0+0x4>

0800d128 <ArtNetNode::HandleIpProg()>:
 800d128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d12c:	ed2d 8b02 	vpush	{d8}
 800d130:	4d5c      	ldr	r5, [pc, #368]	; (800d2a4 <ArtNetNode::HandleIpProg()+0x17c>)
 800d132:	f890 70c6 	ldrb.w	r7, [r0, #198]	; 0xc6
 800d136:	4604      	mov	r4, r0
 800d138:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
 800d13c:	6828      	ldr	r0, [r5, #0]
 800d13e:	ee08 3a10 	vmov	s16, r3
 800d142:	2300      	movs	r3, #0
 800d144:	f890 b005 	ldrb.w	fp, [r0, #5]
 800d148:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 800d14c:	f06f 0306 	mvn.w	r3, #6
 800d150:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 800d154:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800d158:	2bc0      	cmp	r3, #192	; 0xc0
 800d15a:	b085      	sub	sp, #20
 800d15c:	d101      	bne.n	800d162 <ArtNetNode::HandleIpProg()+0x3a>
 800d15e:	f007 ff25 	bl	8014fac <Network::EnableDhcp()>
 800d162:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800d166:	2b88      	cmp	r3, #136	; 0x88
 800d168:	d103      	bne.n	800d172 <ArtNetNode::HandleIpProg()+0x4a>
 800d16a:	6828      	ldr	r0, [r5, #0]
 800d16c:	2100      	movs	r1, #0
 800d16e:	f007 fe8f 	bl	8014e90 <Network::SetIp(unsigned int)>
 800d172:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800d176:	2b84      	cmp	r3, #132	; 0x84
 800d178:	4e4b      	ldr	r6, [pc, #300]	; (800d2a8 <ArtNetNode::HandleIpProg()+0x180>)
 800d17a:	f104 08c8 	add.w	r8, r4, #200	; 0xc8
 800d17e:	d107      	bne.n	800d190 <ArtNetNode::HandleIpProg()+0x68>
 800d180:	4641      	mov	r1, r8
 800d182:	4630      	mov	r0, r6
 800d184:	f7ff ffc6 	bl	800d114 <memcpy.constprop.0.isra.0>
 800d188:	6831      	ldr	r1, [r6, #0]
 800d18a:	6828      	ldr	r0, [r5, #0]
 800d18c:	f007 fe80 	bl	8014e90 <Network::SetIp(unsigned int)>
 800d190:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800d194:	2b82      	cmp	r3, #130	; 0x82
 800d196:	f104 09cc 	add.w	r9, r4, #204	; 0xcc
 800d19a:	d107      	bne.n	800d1ac <ArtNetNode::HandleIpProg()+0x84>
 800d19c:	4842      	ldr	r0, [pc, #264]	; (800d2a8 <ArtNetNode::HandleIpProg()+0x180>)
 800d19e:	4649      	mov	r1, r9
 800d1a0:	f7ff ffb8 	bl	800d114 <memcpy.constprop.0.isra.0>
 800d1a4:	6831      	ldr	r1, [r6, #0]
 800d1a6:	6828      	ldr	r0, [r5, #0]
 800d1a8:	f007 fe9d 	bl	8014ee6 <Network::SetNetmask(unsigned int)>
 800d1ac:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800d1b0:	2f90      	cmp	r7, #144	; 0x90
 800d1b2:	f104 0ad2 	add.w	sl, r4, #210	; 0xd2
 800d1b6:	d107      	bne.n	800d1c8 <ArtNetNode::HandleIpProg()+0xa0>
 800d1b8:	483b      	ldr	r0, [pc, #236]	; (800d2a8 <ArtNetNode::HandleIpProg()+0x180>)
 800d1ba:	4651      	mov	r1, sl
 800d1bc:	f7ff ffaa 	bl	800d114 <memcpy.constprop.0.isra.0>
 800d1c0:	6831      	ldr	r1, [r6, #0]
 800d1c2:	6828      	ldr	r0, [r5, #0]
 800d1c4:	f007 fea1 	bl	8014f0a <Network::SetGatewayIp(unsigned int)>
 800d1c8:	6829      	ldr	r1, [r5, #0]
 800d1ca:	794a      	ldrb	r2, [r1, #5]
 800d1cc:	0192      	lsls	r2, r2, #6
 800d1ce:	f884 20d2 	strb.w	r2, [r4, #210]	; 0xd2
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f884 20d3 	strb.w	r2, [r4, #211]	; 0xd3
 800d1d8:	7948      	ldrb	r0, [r1, #5]
 800d1da:	6949      	ldr	r1, [r1, #20]
 800d1dc:	6031      	str	r1, [r6, #0]
 800d1de:	ea8b 0b00 	eor.w	fp, fp, r0
 800d1e2:	4640      	mov	r0, r8
 800d1e4:	f7ff ff84 	bl	800d0f0 <memcmp.constprop.0>
 800d1e8:	492f      	ldr	r1, [pc, #188]	; (800d2a8 <ArtNetNode::HandleIpProg()+0x180>)
 800d1ea:	4607      	mov	r7, r0
 800d1ec:	4640      	mov	r0, r8
 800d1ee:	f7ff ff91 	bl	800d114 <memcpy.constprop.0.isra.0>
 800d1f2:	6829      	ldr	r1, [r5, #0]
 800d1f4:	4648      	mov	r0, r9
 800d1f6:	69c9      	ldr	r1, [r1, #28]
 800d1f8:	6031      	str	r1, [r6, #0]
 800d1fa:	f7ff ff79 	bl	800d0f0 <memcmp.constprop.0>
 800d1fe:	492a      	ldr	r1, [pc, #168]	; (800d2a8 <ArtNetNode::HandleIpProg()+0x180>)
 800d200:	9003      	str	r0, [sp, #12]
 800d202:	4648      	mov	r0, r9
 800d204:	f7ff ff86 	bl	800d114 <memcpy.constprop.0.isra.0>
 800d208:	6829      	ldr	r1, [r5, #0]
 800d20a:	4650      	mov	r0, sl
 800d20c:	6989      	ldr	r1, [r1, #24]
 800d20e:	6031      	str	r1, [r6, #0]
 800d210:	f7ff ff6e 	bl	800d0f0 <memcmp.constprop.0>
 800d214:	9b03      	ldr	r3, [sp, #12]
 800d216:	4924      	ldr	r1, [pc, #144]	; (800d2a8 <ArtNetNode::HandleIpProg()+0x180>)
 800d218:	431f      	orrs	r7, r3
 800d21a:	4307      	orrs	r7, r0
 800d21c:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 800d220:	bf0c      	ite	eq
 800d222:	465e      	moveq	r6, fp
 800d224:	f04b 0601 	orrne.w	r6, fp, #1
 800d228:	f7ff ff74 	bl	800d114 <memcpy.constprop.0.isra.0>
 800d22c:	2200      	movs	r2, #0
 800d22e:	f641 1336 	movw	r3, #6454	; 0x1936
 800d232:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
 800d236:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
 800d23a:	9300      	str	r3, [sp, #0]
 800d23c:	ee18 1a10 	vmov	r1, s16
 800d240:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
 800d244:	7820      	ldrb	r0, [r4, #0]
 800d246:	2222      	movs	r2, #34	; 0x22
 800d248:	f006 ffec 	bl	8014224 <udp_send>
 800d24c:	b32e      	cbz	r6, 800d29a <ArtNetNode::HandleIpProg()+0x172>
 800d24e:	682a      	ldr	r2, [r5, #0]
 800d250:	6953      	ldr	r3, [r2, #20]
 800d252:	6223      	str	r3, [r4, #32]
 800d254:	69d1      	ldr	r1, [r2, #28]
 800d256:	7952      	ldrb	r2, [r2, #5]
 800d258:	ea63 0301 	orn	r3, r3, r1
 800d25c:	6263      	str	r3, [r4, #36]	; 0x24
 800d25e:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 800d262:	f023 0302 	bic.w	r3, r3, #2
 800d266:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800d26a:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
 800d26e:	4641      	mov	r1, r8
 800d270:	f204 5096 	addw	r0, r4, #1430	; 0x596
 800d274:	f7ff ff4e 	bl	800d114 <memcpy.constprop.0.isra.0>
 800d278:	4641      	mov	r1, r8
 800d27a:	f204 605b 	addw	r0, r4, #1627	; 0x65b
 800d27e:	f7ff ff49 	bl	800d114 <memcpy.constprop.0.isra.0>
 800d282:	f894 3a12 	ldrb.w	r3, [r4, #2578]	; 0xa12
 800d286:	b143      	cbz	r3, 800d29a <ArtNetNode::HandleIpProg()+0x172>
 800d288:	2101      	movs	r1, #1
 800d28a:	4620      	mov	r0, r4
 800d28c:	b005      	add	sp, #20
 800d28e:	ecbd 8b02 	vpop	{d8}
 800d292:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d296:	f000 b8ed 	b.w	800d474 <ArtNetNode::SendPollRelply(bool)>
 800d29a:	b005      	add	sp, #20
 800d29c:	ecbd 8b02 	vpop	{d8}
 800d2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a4:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 800d2a8:	200006d4 	ldrdcs	r0, [r0], -r4

0800d2ac <memcpy.isra.0>:
 800d2ac:	3801      	subs	r0, #1
 800d2ae:	440a      	add	r2, r1
 800d2b0:	4291      	cmp	r1, r2
 800d2b2:	d100      	bne.n	800d2b6 <memcpy.isra.0+0xa>
 800d2b4:	4770      	bx	lr
 800d2b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2ba:	f800 3f01 	strb.w	r3, [r0, #1]!
 800d2be:	e7f7      	b.n	800d2b0 <memcpy.isra.0+0x4>

0800d2c0 <ArtNetNode::FillPollReply()>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	f200 508c 	addw	r0, r0, #1420	; 0x58c
 800d2c8:	f204 627b 	addw	r2, r4, #1659	; 0x67b
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d153      	bne.n	800d37c <ArtNetNode::FillPollReply()+0xbc>
 800d2d4:	4d2b      	ldr	r5, [pc, #172]	; (800d384 <ArtNetNode::FillPollReply()+0xc4>)
 800d2d6:	492c      	ldr	r1, [pc, #176]	; (800d388 <ArtNetNode::FillPollReply()+0xc8>)
 800d2d8:	2208      	movs	r2, #8
 800d2da:	f7ff ffe7 	bl	800d2ac <memcpy.isra.0>
 800d2de:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800d2e2:	f8a4 3594 	strh.w	r3, [r4, #1428]	; 0x594
 800d2e6:	4629      	mov	r1, r5
 800d2e8:	6a23      	ldr	r3, [r4, #32]
 800d2ea:	602b      	str	r3, [r5, #0]
 800d2ec:	f204 5096 	addw	r0, r4, #1430	; 0x596
 800d2f0:	2204      	movs	r2, #4
 800d2f2:	f7ff ffdb 	bl	800d2ac <memcpy.isra.0>
 800d2f6:	f641 1336 	movw	r3, #6454	; 0x1936
 800d2fa:	f8a4 359a 	strh.w	r3, [r4, #1434]	; 0x59a
 800d2fe:	4b23      	ldr	r3, [pc, #140]	; (800d38c <ArtNetNode::FillPollReply()+0xcc>)
 800d300:	781a      	ldrb	r2, [r3, #0]
 800d302:	f884 259c 	strb.w	r2, [r4, #1436]	; 0x59c
 800d306:	785b      	ldrb	r3, [r3, #1]
 800d308:	f884 359d 	strb.w	r3, [r4, #1437]	; 0x59d
 800d30c:	4b20      	ldr	r3, [pc, #128]	; (800d390 <ArtNetNode::FillPollReply()+0xd0>)
 800d30e:	781a      	ldrb	r2, [r3, #0]
 800d310:	f884 25a0 	strb.w	r2, [r4, #1440]	; 0x5a0
 800d314:	785b      	ldrb	r3, [r3, #1]
 800d316:	f884 35a1 	strb.w	r3, [r4, #1441]	; 0x5a1
 800d31a:	4b1e      	ldr	r3, [pc, #120]	; (800d394 <ArtNetNode::FillPollReply()+0xd4>)
 800d31c:	785a      	ldrb	r2, [r3, #1]
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	f884 35a5 	strb.w	r3, [r4, #1445]	; 0x5a5
 800d324:	f884 25a4 	strb.w	r2, [r4, #1444]	; 0x5a4
 800d328:	f104 0158 	add.w	r1, r4, #88	; 0x58
 800d32c:	f204 50a6 	addw	r0, r4, #1446	; 0x5a6
 800d330:	2212      	movs	r2, #18
 800d332:	f7ff ffbb 	bl	800d2ac <memcpy.isra.0>
 800d336:	f104 016a 	add.w	r1, r4, #106	; 0x6a
 800d33a:	f504 60b7 	add.w	r0, r4, #1464	; 0x5b8
 800d33e:	2240      	movs	r2, #64	; 0x40
 800d340:	f7ff ffb4 	bl	800d2ac <memcpy.isra.0>
 800d344:	2300      	movs	r3, #0
 800d346:	f884 3654 	strb.w	r3, [r4, #1620]	; 0x654
 800d34a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d34e:	f204 6055 	addw	r0, r4, #1621	; 0x655
 800d352:	2206      	movs	r2, #6
 800d354:	f7ff ffaa 	bl	800d2ac <memcpy.isra.0>
 800d358:	4629      	mov	r1, r5
 800d35a:	f204 605b 	addw	r0, r4, #1627	; 0x65b
 800d35e:	2204      	movs	r2, #4
 800d360:	f7ff ffa4 	bl	800d2ac <memcpy.isra.0>
 800d364:	2304      	movs	r3, #4
 800d366:	f884 3639 	strb.w	r3, [r4, #1593]	; 0x639
 800d36a:	f104 01ae 	add.w	r1, r4, #174	; 0xae
 800d36e:	f204 6066 	addw	r0, r4, #1638	; 0x666
 800d372:	2206      	movs	r2, #6
 800d374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d378:	f7ff bf98 	b.w	800d2ac <memcpy.isra.0>
 800d37c:	f803 1b01 	strb.w	r1, [r3], #1
 800d380:	e7a6      	b.n	800d2d0 <ArtNetNode::FillPollReply()+0x10>
 800d382:	bf00      	nop
 800d384:	200006d8 	ldrdcs	r0, [r0], -r8
 800d388:	0801bc5b 	stmdaeq	r1, {r0, r1, r3, r4, r6, sl, fp, ip, sp, pc}
 800d38c:	0801bea0 	stmdaeq	r1, {r5, r7, r9, sl, fp, ip, sp, pc}
 800d390:	0801be9c 	stmdaeq	r1, {r2, r3, r4, r7, r9, sl, fp, ip, sp, pc}
 800d394:	0801be9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r9, sl, fp, ip, sp, pc}

0800d398 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>:
 800d398:	1a8a      	subs	r2, r1, r2
 800d39a:	2941      	cmp	r1, #65	; 0x41
 800d39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	460e      	mov	r6, r1
 800d3a4:	461f      	mov	r7, r3
 800d3a6:	eb00 0402 	add.w	r4, r0, r2
 800d3aa:	d90e      	bls.n	800d3ca <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x32>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	f884 363a 	strb.w	r3, [r4, #1594]	; 0x63a
 800d3b2:	f884 3642 	strb.w	r3, [r4, #1602]	; 0x642
 800d3b6:	f884 3661 	strb.w	r3, [r4, #1633]	; 0x661
 800d3ba:	f884 364a 	strb.w	r3, [r4, #1610]	; 0x64a
 800d3be:	f884 363e 	strb.w	r3, [r4, #1598]	; 0x63e
 800d3c2:	f884 3646 	strb.w	r3, [r4, #1606]	; 0x646
 800d3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3ca:	f04f 0928 	mov.w	r9, #40	; 0x28
 800d3ce:	fb09 0901 	mla	r9, r9, r1, r0
 800d3d2:	f8d9 3a40 	ldr.w	r3, [r9, #2624]	; 0xa40
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d115      	bne.n	800d406 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x6e>
 800d3da:	6980      	ldr	r0, [r0, #24]
 800d3dc:	f899 8a23 	ldrb.w	r8, [r9, #2595]	; 0xa23
 800d3e0:	6803      	ldr	r3, [r0, #0]
 800d3e2:	691b      	ldr	r3, [r3, #16]
 800d3e4:	4798      	blx	r3
 800d3e6:	2328      	movs	r3, #40	; 0x28
 800d3e8:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800d3ec:	f008 0876 	and.w	r8, r8, #118	; 0x76
 800d3f0:	fb03 5306 	mla	r3, r3, r6, r5
 800d3f4:	ea40 0808 	orr.w	r8, r0, r8
 800d3f8:	f010 0001 	ands.w	r0, r0, #1
 800d3fc:	bf08      	it	eq
 800d3fe:	f8c9 0a40 	streq.w	r0, [r9, #2624]	; 0xa40
 800d402:	f883 8a23 	strb.w	r8, [r3, #2595]	; 0xa23
 800d406:	2300      	movs	r3, #0
 800d408:	f884 363a 	strb.w	r3, [r4, #1594]	; 0x63a
 800d40c:	2328      	movs	r3, #40	; 0x28
 800d40e:	fb03 5306 	mla	r3, r3, r6, r5
 800d412:	f893 3a24 	ldrb.w	r3, [r3, #2596]	; 0xa24
 800d416:	b12b      	cbz	r3, 800d424 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x8c>
 800d418:	2380      	movs	r3, #128	; 0x80
 800d41a:	f884 363a 	strb.w	r3, [r4, #1594]	; 0x63a
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	3301      	adds	r3, #1
 800d422:	603b      	str	r3, [r7, #0]
 800d424:	2328      	movs	r3, #40	; 0x28
 800d426:	fb03 5306 	mla	r3, r3, r6, r5
 800d42a:	eb05 1106 	add.w	r1, r5, r6, lsl #4
 800d42e:	f893 2a23 	ldrb.w	r2, [r3, #2595]	; 0xa23
 800d432:	f884 2642 	strb.w	r2, [r4, #1602]	; 0x642
 800d436:	f893 2a3c 	ldrb.w	r2, [r3, #2620]	; 0xa3c
 800d43a:	2a00      	cmp	r2, #0
 800d43c:	bf14      	ite	ne
 800d43e:	2240      	movne	r2, #64	; 0x40
 800d440:	22c0      	moveq	r2, #192	; 0xc0
 800d442:	f884 2661 	strb.w	r2, [r4, #1633]	; 0x661
 800d446:	f893 3a22 	ldrb.w	r3, [r3, #2594]	; 0xa22
 800d44a:	f884 364a 	strb.w	r3, [r4, #1610]	; 0x64a
 800d44e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800d452:	f891 3474 	ldrb.w	r3, [r1, #1140]	; 0x474
 800d456:	b12b      	cbz	r3, 800d464 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0xcc>
 800d458:	2340      	movs	r3, #64	; 0x40
 800d45a:	f884 363a 	strb.w	r3, [r4, #1594]	; 0x63a
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	3301      	adds	r3, #1
 800d462:	603b      	str	r3, [r7, #0]
 800d464:	f891 3473 	ldrb.w	r3, [r1, #1139]	; 0x473
 800d468:	f884 363e 	strb.w	r3, [r4, #1598]	; 0x63e
 800d46c:	f891 3472 	ldrb.w	r3, [r1, #1138]	; 0x472
 800d470:	e7a7      	b.n	800d3c2 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x2a>
	...

0800d474 <ArtNetNode::SendPollRelply(bool)>:
 800d474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d478:	4604      	mov	r4, r0
 800d47a:	b087      	sub	sp, #28
 800d47c:	b941      	cbnz	r1, 800d490 <ArtNetNode::SendPollRelply(bool)+0x1c>
 800d47e:	f890 3a11 	ldrb.w	r3, [r0, #2577]	; 0xa11
 800d482:	2b02      	cmp	r3, #2
 800d484:	bf02      	ittt	eq
 800d486:	f8d0 3a00 	ldreq.w	r3, [r0, #2560]	; 0xa00
 800d48a:	3301      	addeq	r3, #1
 800d48c:	f8c0 3a00 	streq.w	r3, [r0, #2560]	; 0xa00
 800d490:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 800d494:	f884 35a3 	strb.w	r3, [r4, #1443]	; 0x5a3
 800d498:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 800d49c:	f884 3660 	strb.w	r3, [r4, #1632]	; 0x660
 800d4a0:	2601      	movs	r6, #1
 800d4a2:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
 800d4a6:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 800d548 <ArtNetNode::SendPollRelply(bool)+0xd4>
 800d4aa:	f884 3665 	strb.w	r3, [r4, #1637]	; 0x665
 800d4ae:	f104 0835 	add.w	r8, r4, #53	; 0x35
 800d4b2:	4635      	mov	r5, r6
 800d4b4:	f04f 0b00 	mov.w	fp, #0
 800d4b8:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800d4bc:	f884 359e 	strb.w	r3, [r4, #1438]	; 0x59e
 800d4c0:	ebb6 0f85 	cmp.w	r6, r5, lsl #2
 800d4c4:	f898 3011 	ldrb.w	r3, [r8, #17]
 800d4c8:	f884 359f 	strb.w	r3, [r4, #1439]	; 0x59f
 800d4cc:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800d4d0:	bf8c      	ite	hi
 800d4d2:	f04f 0901 	movhi.w	r9, #1
 800d4d6:	f04f 0904 	movls.w	r9, #4
 800d4da:	f884 565f 	strb.w	r5, [r4, #1631]	; 0x65f
 800d4de:	f8cd b014 	str.w	fp, [sp, #20]
 800d4e2:	4617      	mov	r7, r2
 800d4e4:	4491      	add	r9, r2
 800d4e6:	4639      	mov	r1, r7
 800d4e8:	ab05      	add	r3, sp, #20
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	3701      	adds	r7, #1
 800d4ee:	9203      	str	r2, [sp, #12]
 800d4f0:	f7ff ff52 	bl	800d398 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>
 800d4f4:	454f      	cmp	r7, r9
 800d4f6:	9a03      	ldr	r2, [sp, #12]
 800d4f8:	d1f5      	bne.n	800d4e6 <ArtNetNode::SendPollRelply(bool)+0x72>
 800d4fa:	9b05      	ldr	r3, [sp, #20]
 800d4fc:	f884 3639 	strb.w	r3, [r4, #1593]	; 0x639
 800d500:	f604 13ad 	addw	r3, r4, #2477	; 0x9ad
 800d504:	9301      	str	r3, [sp, #4]
 800d506:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
 800d50a:	9300      	str	r3, [sp, #0]
 800d50c:	4652      	mov	r2, sl
 800d50e:	f894 3a10 	ldrb.w	r3, [r4, #2576]	; 0xa10
 800d512:	2140      	movs	r1, #64	; 0x40
 800d514:	f504 60bf 	add.w	r0, r4, #1528	; 0x5f8
 800d518:	f7fc fff2 	bl	800a500 <snprintf>
 800d51c:	f641 1336 	movw	r3, #6454	; 0x1936
 800d520:	9300      	str	r3, [sp, #0]
 800d522:	7820      	ldrb	r0, [r4, #0]
 800d524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d526:	22ef      	movs	r2, #239	; 0xef
 800d528:	f204 518c 	addw	r1, r4, #1420	; 0x58c
 800d52c:	3501      	adds	r5, #1
 800d52e:	f006 fe79 	bl	8014224 <udp_send>
 800d532:	2d12      	cmp	r5, #18
 800d534:	f106 0604 	add.w	r6, r6, #4
 800d538:	d1be      	bne.n	800d4b8 <ArtNetNode::SendPollRelply(bool)+0x44>
 800d53a:	2300      	movs	r3, #0
 800d53c:	f884 3a17 	strb.w	r3, [r4, #2583]	; 0xa17
 800d540:	b007      	add	sp, #28
 800d542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d546:	bf00      	nop
 800d548:	0801bc48 	stmdaeq	r1, {r3, r6, sl, fp, ip, sp, pc}

0800d54c <ArtNetNode::HandlePoll()>:
 800d54c:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
 800d550:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800d554:	f880 3a12 	strb.w	r3, [r0, #2578]	; 0xa12
 800d558:	f012 0304 	ands.w	r3, r2, #4
 800d55c:	b410      	push	{r4}
 800d55e:	d02f      	beq.n	800d5c0 <ArtNetNode::HandlePoll()+0x74>
 800d560:	f8d0 1a08 	ldr.w	r1, [r0, #2568]	; 0xa08
 800d564:	f890 4a14 	ldrb.w	r4, [r0, #2580]	; 0xa14
 800d568:	2301      	movs	r3, #1
 800d56a:	f880 3a13 	strb.w	r3, [r0, #2579]	; 0xa13
 800d56e:	b979      	cbnz	r1, 800d590 <ArtNetNode::HandlePoll()+0x44>
 800d570:	f8d0 3584 	ldr.w	r3, [r0, #1412]	; 0x584
 800d574:	f8c0 3a08 	str.w	r3, [r0, #2568]	; 0xa08
 800d578:	b19c      	cbz	r4, 800d5a2 <ArtNetNode::HandlePoll()+0x56>
 800d57a:	f890 3a1c 	ldrb.w	r3, [r0, #2588]	; 0xa1c
 800d57e:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
 800d582:	4293      	cmp	r3, r2
 800d584:	bf28      	it	cs
 800d586:	4613      	movcs	r3, r2
 800d588:	f880 3a1c 	strb.w	r3, [r0, #2588]	; 0xa1c
 800d58c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d58e:	e010      	b.n	800d5b2 <ArtNetNode::HandlePoll()+0x66>
 800d590:	2c00      	cmp	r4, #0
 800d592:	d1f2      	bne.n	800d57a <ArtNetNode::HandlePoll()+0x2e>
 800d594:	f8d0 4584 	ldr.w	r4, [r0, #1412]	; 0x584
 800d598:	42a1      	cmp	r1, r4
 800d59a:	d002      	beq.n	800d5a2 <ArtNetNode::HandlePoll()+0x56>
 800d59c:	f880 3a14 	strb.w	r3, [r0, #2580]	; 0xa14
 800d5a0:	e7eb      	b.n	800d57a <ArtNetNode::HandlePoll()+0x2e>
 800d5a2:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 800d5a6:	f880 3a1c 	strb.w	r3, [r0, #2588]	; 0xa1c
 800d5aa:	0713      	lsls	r3, r2, #28
 800d5ac:	d5ee      	bpl.n	800d58c <ArtNetNode::HandlePoll()+0x40>
 800d5ae:	f8d0 3584 	ldr.w	r3, [r0, #1412]	; 0x584
 800d5b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5b6:	f8c0 3a04 	str.w	r3, [r0, #2564]	; 0xa04
 800d5ba:	2101      	movs	r1, #1
 800d5bc:	f7ff bf5a 	b.w	800d474 <ArtNetNode::SendPollRelply(bool)>
 800d5c0:	f880 3a13 	strb.w	r3, [r0, #2579]	; 0xa13
 800d5c4:	e7f5      	b.n	800d5b2 <ArtNetNode::HandlePoll()+0x66>

0800d5c6 <memcpy.isra.0>:
 800d5c6:	3801      	subs	r0, #1
 800d5c8:	440a      	add	r2, r1
 800d5ca:	4291      	cmp	r1, r2
 800d5cc:	d100      	bne.n	800d5d0 <memcpy.isra.0+0xa>
 800d5ce:	4770      	bx	lr
 800d5d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5d4:	f800 3f01 	strb.w	r3, [r0, #1]!
 800d5d8:	e7f7      	b.n	800d5ca <memcpy.isra.0+0x4>

0800d5da <ArtNetNode::SetRmd(unsigned int, bool)>:
 800d5da:	2328      	movs	r3, #40	; 0x28
 800d5dc:	fb03 0301 	mla	r3, r3, r1, r0
 800d5e0:	b570      	push	{r4, r5, r6, lr}
 800d5e2:	f893 6a3c 	ldrb.w	r6, [r3, #2620]	; 0xa3c
 800d5e6:	f883 2a3c 	strb.w	r2, [r3, #2620]	; 0xa3c
 800d5ea:	4296      	cmp	r6, r2
 800d5ec:	460d      	mov	r5, r1
 800d5ee:	4614      	mov	r4, r2
 800d5f0:	d00e      	beq.n	800d610 <ArtNetNode::SetRmd(unsigned int, bool)+0x36>
 800d5f2:	f890 3a11 	ldrb.w	r3, [r0, #2577]	; 0xa11
 800d5f6:	2b02      	cmp	r3, #2
 800d5f8:	d10a      	bne.n	800d610 <ArtNetNode::SetRmd(unsigned int, bool)+0x36>
 800d5fa:	69c0      	ldr	r0, [r0, #28]
 800d5fc:	b110      	cbz	r0, 800d604 <ArtNetNode::SetRmd(unsigned int, bool)+0x2a>
 800d5fe:	6803      	ldr	r3, [r0, #0]
 800d600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d602:	4798      	blx	r3
 800d604:	4621      	mov	r1, r4
 800d606:	4628      	mov	r0, r5
 800d608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d60c:	f008 bf08 	b.w	8016420 <artnet::display_rdm_enabled(unsigned int, bool)>
 800d610:	bd70      	pop	{r4, r5, r6, pc}

0800d612 <ArtNetNode::HandleTodData()>:
 800d612:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d616:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	4604      	mov	r4, r0
 800d61e:	d110      	bne.n	800d642 <ArtNetNode::HandleTodData()+0x30>
 800d620:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
 800d624:	f890 70cf 	ldrb.w	r7, [r0, #207]	; 0xcf
 800d628:	f500 55a3 	add.w	r5, r0, #5216	; 0x1460
 800d62c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800d630:	3510      	adds	r5, #16
 800d632:	2600      	movs	r6, #0
 800d634:	792b      	ldrb	r3, [r5, #4]
 800d636:	b933      	cbnz	r3, 800d646 <ArtNetNode::HandleTodData()+0x34>
 800d638:	3601      	adds	r6, #1
 800d63a:	2e42      	cmp	r6, #66	; 0x42
 800d63c:	f105 0510 	add.w	r5, r5, #16
 800d640:	d1f8      	bne.n	800d634 <ArtNetNode::HandleTodData()+0x22>
 800d642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d646:	882b      	ldrh	r3, [r5, #0]
 800d648:	42bb      	cmp	r3, r7
 800d64a:	d1f5      	bne.n	800d638 <ArtNetNode::HandleTodData()+0x26>
 800d64c:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
 800d650:	f04f 0800 	mov.w	r8, #0
 800d654:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
 800d658:	4543      	cmp	r3, r8
 800d65a:	d9ed      	bls.n	800d638 <ArtNetNode::HandleTodData()+0x26>
 800d65c:	68e0      	ldr	r0, [r4, #12]
 800d65e:	6803      	ldr	r3, [r0, #0]
 800d660:	464a      	mov	r2, r9
 800d662:	699b      	ldr	r3, [r3, #24]
 800d664:	4631      	mov	r1, r6
 800d666:	4798      	blx	r3
 800d668:	f108 0801 	add.w	r8, r8, #1
 800d66c:	f109 0906 	add.w	r9, r9, #6
 800d670:	e7f0      	b.n	800d654 <ArtNetNode::HandleTodData()+0x42>
	...

0800d674 <ArtNetNode::SendTod(unsigned int)>:
 800d674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d678:	f100 09b8 	add.w	r9, r0, #184	; 0xb8
 800d67c:	4604      	mov	r4, r0
 800d67e:	460f      	mov	r7, r1
 800d680:	ea4f 0891 	mov.w	r8, r1, lsr #2
 800d684:	2208      	movs	r2, #8
 800d686:	4648      	mov	r0, r9
 800d688:	492c      	ldr	r1, [pc, #176]	; (800d73c <ArtNetNode::SendTod(unsigned int)+0xc8>)
 800d68a:	f7ff ff9c 	bl	800d5c6 <memcpy.isra.0>
 800d68e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800d692:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 800d696:	230e      	movs	r3, #14
 800d698:	2500      	movs	r5, #0
 800d69a:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
 800d69e:	68e0      	ldr	r0, [r4, #12]
 800d6a0:	f884 50c2 	strb.w	r5, [r4, #194]	; 0xc2
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
 800d6aa:	6803      	ldr	r3, [r0, #0]
 800d6ac:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
 800d6b0:	4639      	mov	r1, r7
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	4798      	blx	r3
 800d6b6:	f007 0303 	and.w	r3, r7, #3
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 800d6c0:	f108 0301 	add.w	r3, r8, #1
 800d6c4:	44a0      	add	r8, r4
 800d6c6:	f884 50c6 	strb.w	r5, [r4, #198]	; 0xc6
 800d6ca:	f884 50c7 	strb.w	r5, [r4, #199]	; 0xc7
 800d6ce:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
 800d6d2:	f884 50c9 	strb.w	r5, [r4, #201]	; 0xc9
 800d6d6:	f884 50ca 	strb.w	r5, [r4, #202]	; 0xca
 800d6da:	f884 50cb 	strb.w	r5, [r4, #203]	; 0xcb
 800d6de:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 800d6e2:	f898 3036 	ldrb.w	r3, [r8, #54]	; 0x36
 800d6e6:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 800d6ea:	2328      	movs	r3, #40	; 0x28
 800d6ec:	fb03 4307 	mla	r3, r3, r7, r4
 800d6f0:	f884 50ce 	strb.w	r5, [r4, #206]	; 0xce
 800d6f4:	f893 3a22 	ldrb.w	r3, [r3, #2594]	; 0xa22
 800d6f8:	f884 30cf 	strb.w	r3, [r4, #207]	; 0xcf
 800d6fc:	b2c6      	uxtb	r6, r0
 800d6fe:	68e0      	ldr	r0, [r4, #12]
 800d700:	f884 50d0 	strb.w	r5, [r4, #208]	; 0xd0
 800d704:	f884 60d1 	strb.w	r6, [r4, #209]	; 0xd1
 800d708:	f884 50d2 	strb.w	r5, [r4, #210]	; 0xd2
 800d70c:	f884 60d3 	strb.w	r6, [r4, #211]	; 0xd3
 800d710:	6803      	ldr	r3, [r0, #0]
 800d712:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
 800d716:	4639      	mov	r1, r7
 800d718:	691b      	ldr	r3, [r3, #16]
 800d71a:	4798      	blx	r3
 800d71c:	2306      	movs	r3, #6
 800d71e:	fb03 f206 	mul.w	r2, r3, r6
 800d722:	f641 1336 	movw	r3, #6454	; 0x1936
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	7820      	ldrb	r0, [r4, #0]
 800d72a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d72c:	321c      	adds	r2, #28
 800d72e:	4649      	mov	r1, r9
 800d730:	f006 fd78 	bl	8014224 <udp_send>
 800d734:	b003      	add	sp, #12
 800d736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d73a:	bf00      	nop
 800d73c:	0801bc63 	stmdaeq	r1, {r0, r1, r5, r6, sl, fp, ip, sp, pc}

0800d740 <ArtNetNode::HandleTodControl()>:
 800d740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d742:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
 800d746:	f890 70cf 	ldrb.w	r7, [r0, #207]	; 0xcf
 800d74a:	4604      	mov	r4, r0
 800d74c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800d750:	4606      	mov	r6, r0
 800d752:	2500      	movs	r5, #0
 800d754:	f896 3a3c 	ldrb.w	r3, [r6, #2620]	; 0xa3c
 800d758:	b34b      	cbz	r3, 800d7ae <ArtNetNode::HandleTodControl()+0x6e>
 800d75a:	f8b6 3a20 	ldrh.w	r3, [r6, #2592]	; 0xa20
 800d75e:	42bb      	cmp	r3, r7
 800d760:	d125      	bne.n	800d7ae <ArtNetNode::HandleTodControl()+0x6e>
 800d762:	f896 3a24 	ldrb.w	r3, [r6, #2596]	; 0xa24
 800d766:	b313      	cbz	r3, 800d7ae <ArtNetNode::HandleTodControl()+0x6e>
 800d768:	f896 3a45 	ldrb.w	r3, [r6, #2629]	; 0xa45
 800d76c:	b13b      	cbz	r3, 800d77e <ArtNetNode::HandleTodControl()+0x3e>
 800d76e:	f894 39ac 	ldrb.w	r3, [r4, #2476]	; 0x9ac
 800d772:	b923      	cbnz	r3, 800d77e <ArtNetNode::HandleTodControl()+0x3e>
 800d774:	6860      	ldr	r0, [r4, #4]
 800d776:	6803      	ldr	r3, [r0, #0]
 800d778:	4629      	mov	r1, r5
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	4798      	blx	r3
 800d77e:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
 800d782:	2b01      	cmp	r3, #1
 800d784:	d104      	bne.n	800d790 <ArtNetNode::HandleTodControl()+0x50>
 800d786:	68e0      	ldr	r0, [r4, #12]
 800d788:	6803      	ldr	r3, [r0, #0]
 800d78a:	4629      	mov	r1, r5
 800d78c:	689b      	ldr	r3, [r3, #8]
 800d78e:	4798      	blx	r3
 800d790:	4629      	mov	r1, r5
 800d792:	4620      	mov	r0, r4
 800d794:	f7ff ff6e 	bl	800d674 <ArtNetNode::SendTod(unsigned int)>
 800d798:	f896 3a45 	ldrb.w	r3, [r6, #2629]	; 0xa45
 800d79c:	b13b      	cbz	r3, 800d7ae <ArtNetNode::HandleTodControl()+0x6e>
 800d79e:	f894 39ac 	ldrb.w	r3, [r4, #2476]	; 0x9ac
 800d7a2:	b923      	cbnz	r3, 800d7ae <ArtNetNode::HandleTodControl()+0x6e>
 800d7a4:	6860      	ldr	r0, [r4, #4]
 800d7a6:	6803      	ldr	r3, [r0, #0]
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	4798      	blx	r3
 800d7ae:	3501      	adds	r5, #1
 800d7b0:	2d42      	cmp	r5, #66	; 0x42
 800d7b2:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800d7b6:	d1cd      	bne.n	800d754 <ArtNetNode::HandleTodControl()+0x14>
 800d7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d7ba <ArtNetNode::HandleTodRequest()>:
 800d7ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7be:	4605      	mov	r5, r0
 800d7c0:	f06f 0ace 	mvn.w	sl, #206	; 0xce
 800d7c4:	f815 8fcf 	ldrb.w	r8, [r5, #207]!
 800d7c8:	4604      	mov	r4, r0
 800d7ca:	f008 081f 	and.w	r8, r8, #31
 800d7ce:	ebaa 0a00 	sub.w	sl, sl, r0
 800d7d2:	eb0a 0305 	add.w	r3, sl, r5
 800d7d6:	4598      	cmp	r8, r3
 800d7d8:	4626      	mov	r6, r4
 800d7da:	dc01      	bgt.n	800d7e0 <ArtNetNode::HandleTodRequest()+0x26>
 800d7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7e0:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
 800d7e4:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 800d7e8:	2700      	movs	r7, #0
 800d7ea:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
 800d7ee:	f896 3a3c 	ldrb.w	r3, [r6, #2620]	; 0xa3c
 800d7f2:	b153      	cbz	r3, 800d80a <ArtNetNode::HandleTodRequest()+0x50>
 800d7f4:	f8b6 3a20 	ldrh.w	r3, [r6, #2592]	; 0xa20
 800d7f8:	454b      	cmp	r3, r9
 800d7fa:	d106      	bne.n	800d80a <ArtNetNode::HandleTodRequest()+0x50>
 800d7fc:	f896 3a24 	ldrb.w	r3, [r6, #2596]	; 0xa24
 800d800:	b11b      	cbz	r3, 800d80a <ArtNetNode::HandleTodRequest()+0x50>
 800d802:	4639      	mov	r1, r7
 800d804:	4620      	mov	r0, r4
 800d806:	f7ff ff35 	bl	800d674 <ArtNetNode::SendTod(unsigned int)>
 800d80a:	3701      	adds	r7, #1
 800d80c:	2f42      	cmp	r7, #66	; 0x42
 800d80e:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800d812:	d1ec      	bne.n	800d7ee <ArtNetNode::HandleTodRequest()+0x34>
 800d814:	e7dd      	b.n	800d7d2 <ArtNetNode::HandleTodRequest()+0x18>
	...

0800d818 <ArtNetNode::SendTodRequest(unsigned int)>:
 800d818:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d81a:	4604      	mov	r4, r0
 800d81c:	68c0      	ldr	r0, [r0, #12]
 800d81e:	6803      	ldr	r3, [r0, #0]
 800d820:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 800d824:	695b      	ldr	r3, [r3, #20]
 800d826:	460d      	mov	r5, r1
 800d828:	4798      	blx	r3
 800d82a:	4630      	mov	r0, r6
 800d82c:	491d      	ldr	r1, [pc, #116]	; (800d8a4 <ArtNetNode::SendTodRequest(unsigned int)+0x8c>)
 800d82e:	2208      	movs	r2, #8
 800d830:	f7ff fec9 	bl	800d5c6 <memcpy.isra.0>
 800d834:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800d838:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 800d83c:	220e      	movs	r2, #14
 800d83e:	2300      	movs	r3, #0
 800d840:	f884 20c3 	strb.w	r2, [r4, #195]	; 0xc3
 800d844:	eb04 0295 	add.w	r2, r4, r5, lsr #2
 800d848:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 800d84c:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
 800d850:	f884 30c6 	strb.w	r3, [r4, #198]	; 0xc6
 800d854:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
 800d858:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
 800d85c:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
 800d860:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
 800d864:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 800d868:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 800d86c:	f205 1547 	addw	r5, r5, #327	; 0x147
 800d870:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800d874:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 800d878:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800d87c:	2301      	movs	r3, #1
 800d87e:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
 800d882:	f884 30cf 	strb.w	r3, [r4, #207]	; 0xcf
 800d886:	78ab      	ldrb	r3, [r5, #2]
 800d888:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
 800d88c:	f641 1336 	movw	r3, #6454	; 0x1936
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	7820      	ldrb	r0, [r4, #0]
 800d894:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d896:	2219      	movs	r2, #25
 800d898:	4631      	mov	r1, r6
 800d89a:	f006 fcc3 	bl	8014224 <udp_send>
 800d89e:	b002      	add	sp, #8
 800d8a0:	bd70      	pop	{r4, r5, r6, pc}
 800d8a2:	bf00      	nop
 800d8a4:	0801bc63 	stmdaeq	r1, {r0, r1, r5, r6, sl, fp, ip, sp, pc}

0800d8a8 <ArtNetNode::HandleRdm()>:
 800d8a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ac:	f890 70c4 	ldrb.w	r7, [r0, #196]	; 0xc4
 800d8b0:	2f01      	cmp	r7, #1
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	d136      	bne.n	800d924 <ArtNetNode::HandleRdm()+0x7c>
 800d8b6:	f890 20cd 	ldrb.w	r2, [r0, #205]	; 0xcd
 800d8ba:	f890 30cf 	ldrb.w	r3, [r0, #207]	; 0xcf
 800d8be:	f100 0ab8 	add.w	sl, r0, #184	; 0xb8
 800d8c2:	ea43 2b02 	orr.w	fp, r3, r2, lsl #8
 800d8c6:	4605      	mov	r5, r0
 800d8c8:	2600      	movs	r6, #0
 800d8ca:	f100 08d0 	add.w	r8, r0, #208	; 0xd0
 800d8ce:	f895 3a3c 	ldrb.w	r3, [r5, #2620]	; 0xa3c
 800d8d2:	b313      	cbz	r3, 800d91a <ArtNetNode::HandleRdm()+0x72>
 800d8d4:	f8b5 3a20 	ldrh.w	r3, [r5, #2592]	; 0xa20
 800d8d8:	455b      	cmp	r3, fp
 800d8da:	d11e      	bne.n	800d91a <ArtNetNode::HandleRdm()+0x72>
 800d8dc:	f895 3a24 	ldrb.w	r3, [r5, #2596]	; 0xa24
 800d8e0:	b1db      	cbz	r3, 800d91a <ArtNetNode::HandleRdm()+0x72>
 800d8e2:	68e0      	ldr	r0, [r4, #12]
 800d8e4:	6803      	ldr	r3, [r0, #0]
 800d8e6:	4642      	mov	r2, r8
 800d8e8:	69db      	ldr	r3, [r3, #28]
 800d8ea:	4631      	mov	r1, r6
 800d8ec:	4798      	blx	r3
 800d8ee:	b1a0      	cbz	r0, 800d91a <ArtNetNode::HandleRdm()+0x72>
 800d8f0:	f884 70c4 	strb.w	r7, [r4, #196]	; 0xc4
 800d8f4:	f890 9002 	ldrb.w	r9, [r0, #2]
 800d8f8:	1c41      	adds	r1, r0, #1
 800d8fa:	f109 0201 	add.w	r2, r9, #1
 800d8fe:	4640      	mov	r0, r8
 800d900:	f7ff fe61 	bl	800d5c6 <memcpy.isra.0>
 800d904:	f641 1336 	movw	r3, #6454	; 0x1936
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	7820      	ldrb	r0, [r4, #0]
 800d90c:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
 800d910:	f109 0219 	add.w	r2, r9, #25
 800d914:	4651      	mov	r1, sl
 800d916:	f006 fc85 	bl	8014224 <udp_send>
 800d91a:	3601      	adds	r6, #1
 800d91c:	2e42      	cmp	r6, #66	; 0x42
 800d91e:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800d922:	d1d4      	bne.n	800d8ce <ArtNetNode::HandleRdm()+0x26>
 800d924:	b003      	add	sp, #12
 800d926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d92a <ArtNetNode::SetRdmUID(unsigned char const*, bool)>:
 800d92a:	b538      	push	{r3, r4, r5, lr}
 800d92c:	4604      	mov	r4, r0
 800d92e:	4615      	mov	r5, r2
 800d930:	30ae      	adds	r0, #174	; 0xae
 800d932:	2206      	movs	r2, #6
 800d934:	f7ff fe47 	bl	800d5c6 <memcpy.isra.0>
 800d938:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
 800d93c:	b125      	cbz	r5, 800d948 <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x1e>
 800d93e:	f043 0310 	orr.w	r3, r3, #16
 800d942:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 800d946:	bd38      	pop	{r3, r4, r5, pc}
 800d948:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800d94c:	e7f9      	b.n	800d942 <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x18>
	...

0800d950 <ArtNetNode::HandleRdmIn()>:
 800d950:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800d954:	f500 55a3 	add.w	r5, r0, #5216	; 0x1460
 800d958:	2600      	movs	r6, #0
 800d95a:	4604      	mov	r4, r0
 800d95c:	f100 08b8 	add.w	r8, r0, #184	; 0xb8
 800d960:	3512      	adds	r5, #18
 800d962:	f100 09d0 	add.w	r9, r0, #208	; 0xd0
 800d966:	f100 0abf 	add.w	sl, r0, #191	; 0xbf
 800d96a:	4637      	mov	r7, r6
 800d96c:	78ab      	ldrb	r3, [r5, #2]
 800d96e:	b37b      	cbz	r3, 800d9d0 <ArtNetNode::HandleRdmIn()+0x80>
 800d970:	68e0      	ldr	r0, [r4, #12]
 800d972:	6803      	ldr	r3, [r0, #0]
 800d974:	464a      	mov	r2, r9
 800d976:	6a1b      	ldr	r3, [r3, #32]
 800d978:	4631      	mov	r1, r6
 800d97a:	4798      	blx	r3
 800d97c:	b340      	cbz	r0, 800d9d0 <ArtNetNode::HandleRdmIn()+0x80>
 800d97e:	4a1b      	ldr	r2, [pc, #108]	; (800d9ec <ArtNetNode::HandleRdmIn()+0x9c>)
 800d980:	f104 03b7 	add.w	r3, r4, #183	; 0xb7
 800d984:	4553      	cmp	r3, sl
 800d986:	d12b      	bne.n	800d9e0 <ArtNetNode::HandleRdmIn()+0x90>
 800d988:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800d98c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 800d990:	230e      	movs	r3, #14
 800d992:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
 800d996:	2301      	movs	r3, #1
 800d998:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
 800d99c:	eb04 0396 	add.w	r3, r4, r6, lsr #2
 800d9a0:	f884 70c2 	strb.w	r7, [r4, #194]	; 0xc2
 800d9a4:	f884 70c0 	strb.w	r7, [r4, #192]	; 0xc0
 800d9a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d9ac:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 800d9b0:	f884 70ce 	strb.w	r7, [r4, #206]	; 0xce
 800d9b4:	782b      	ldrb	r3, [r5, #0]
 800d9b6:	f884 30cf 	strb.w	r3, [r4, #207]	; 0xcf
 800d9ba:	f641 1336 	movw	r3, #6454	; 0x1936
 800d9be:	9300      	str	r3, [sp, #0]
 800d9c0:	f8d5 3006 	ldr.w	r3, [r5, #6]
 800d9c4:	7820      	ldrb	r0, [r4, #0]
 800d9c6:	f240 1217 	movw	r2, #279	; 0x117
 800d9ca:	4641      	mov	r1, r8
 800d9cc:	f006 fc2a 	bl	8014224 <udp_send>
 800d9d0:	3601      	adds	r6, #1
 800d9d2:	2e42      	cmp	r6, #66	; 0x42
 800d9d4:	f105 0510 	add.w	r5, r5, #16
 800d9d8:	d1c8      	bne.n	800d96c <ArtNetNode::HandleRdmIn()+0x1c>
 800d9da:	b002      	add	sp, #8
 800d9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9e0:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d9e4:	f803 1f01 	strb.w	r1, [r3, #1]!
 800d9e8:	e7cc      	b.n	800d984 <ArtNetNode::HandleRdmIn()+0x34>
 800d9ea:	bf00      	nop
 800d9ec:	0801bc6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, sl, fp, ip, sp, pc}

0800d9f0 <ArtNetNode::HandleSync()>:
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9f6:	f880 3a15 	strb.w	r3, [r0, #2581]	; 0xa15
 800d9fa:	4b1f      	ldr	r3, [pc, #124]	; (800da78 <ArtNetNode::HandleSync()+0x88>)
 800d9fc:	4f1f      	ldr	r7, [pc, #124]	; (800da7c <ArtNetNode::HandleSync()+0x8c>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800da80 <ArtNetNode::HandleSync()+0x90>
 800da04:	f8c0 3a0c 	str.w	r3, [r0, #2572]	; 0xa0c
 800da08:	2500      	movs	r5, #0
 800da0a:	4604      	mov	r4, r0
 800da0c:	4606      	mov	r6, r0
 800da0e:	46a9      	mov	r9, r5
 800da10:	f8d6 3a40 	ldr.w	r3, [r6, #2624]	; 0xa40
 800da14:	bb3b      	cbnz	r3, 800da66 <ArtNetNode::HandleSync()+0x76>
 800da16:	f896 3a24 	ldrb.w	r3, [r6, #2596]	; 0xa24
 800da1a:	b323      	cbz	r3, 800da66 <ArtNetNode::HandleSync()+0x76>
 800da1c:	f8d8 3000 	ldr.w	r3, [r8]
 800da20:	6860      	ldr	r0, [r4, #4]
 800da22:	07da      	lsls	r2, r3, #31
 800da24:	bf5c      	itt	pl
 800da26:	2301      	movpl	r3, #1
 800da28:	f8c8 3000 	strpl.w	r3, [r8]
 800da2c:	6803      	ldr	r3, [r0, #0]
 800da2e:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800da32:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800da36:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800da3a:	4629      	mov	r1, r5
 800da3c:	47d0      	blx	sl
 800da3e:	f896 3a45 	ldrb.w	r3, [r6, #2629]	; 0xa45
 800da42:	b93b      	cbnz	r3, 800da54 <ArtNetNode::HandleSync()+0x64>
 800da44:	6860      	ldr	r0, [r4, #4]
 800da46:	6803      	ldr	r3, [r0, #0]
 800da48:	4629      	mov	r1, r5
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	4798      	blx	r3
 800da4e:	2301      	movs	r3, #1
 800da50:	f886 3a45 	strb.w	r3, [r6, #2629]	; 0xa45
 800da54:	f8d8 3000 	ldr.w	r3, [r8]
 800da58:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800da5c:	07db      	lsls	r3, r3, #31
 800da5e:	bf5c      	itt	pl
 800da60:	2301      	movpl	r3, #1
 800da62:	f8c8 3000 	strpl.w	r3, [r8]
 800da66:	3501      	adds	r5, #1
 800da68:	2d42      	cmp	r5, #66	; 0x42
 800da6a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800da6e:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800da72:	d1cd      	bne.n	800da10 <ArtNetNode::HandleSync()+0x20>
 800da74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da78:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 800da7c:	20030000 	andcs	r0, r3, r0
 800da80:	200006c8 	andcs	r0, r0, r8, asr #13

0800da84 <ArtNetNode::HandleTimeCode()>:
 800da84:	4601      	mov	r1, r0
 800da86:	6880      	ldr	r0, [r0, #8]
 800da88:	6803      	ldr	r3, [r0, #0]
 800da8a:	31c6      	adds	r1, #198	; 0xc6
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	4718      	bx	r3

0800da90 <ArtNetNode::HandleTimeSync()>:
 800da90:	b500      	push	{lr}
 800da92:	b08b      	sub	sp, #44	; 0x2c
 800da94:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 800da98:	9301      	str	r3, [sp, #4]
 800da9a:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
 800da9e:	9302      	str	r3, [sp, #8]
 800daa0:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
 800daa4:	9303      	str	r3, [sp, #12]
 800daa6:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
 800daaa:	9304      	str	r3, [sp, #16]
 800daac:	f890 30cb 	ldrb.w	r3, [r0, #203]	; 0xcb
 800dab0:	f890 20cc 	ldrb.w	r2, [r0, #204]	; 0xcc
 800dab4:	9305      	str	r3, [sp, #20]
 800dab6:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
 800daba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800dabe:	9306      	str	r3, [sp, #24]
 800dac0:	4b03      	ldr	r3, [pc, #12]	; (800dad0 <ArtNetNode::HandleTimeSync()+0x40>)
 800dac2:	a901      	add	r1, sp, #4
 800dac4:	6818      	ldr	r0, [r3, #0]
 800dac6:	f00a faef 	bl	80180a8 <Hardware::SetTime(tm const*)>
 800daca:	b00b      	add	sp, #44	; 0x2c
 800dacc:	f85d fb04 	ldr.w	pc, [sp], #4
 800dad0:	2000fda0 	andcs	pc, r0, r0, lsr #27

0800dad4 <ArtNetNode::Print()>:
 800dad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dad8:	2211      	movs	r2, #17
 800dada:	b087      	sub	sp, #28
 800dadc:	4604      	mov	r4, r0
 800dade:	2104      	movs	r1, #4
 800dae0:	483a      	ldr	r0, [pc, #232]	; (800dbcc <ArtNetNode::Print()+0xf8>)
 800dae2:	f7fc fce5 	bl	800a4b0 <printf>
 800dae6:	4b3a      	ldr	r3, [pc, #232]	; (800dbd0 <ArtNetNode::Print()+0xfc>)
 800dae8:	483a      	ldr	r0, [pc, #232]	; (800dbd4 <ArtNetNode::Print()+0x100>)
 800daea:	7819      	ldrb	r1, [r3, #0]
 800daec:	785a      	ldrb	r2, [r3, #1]
 800daee:	f7fc fcdf 	bl	800a4b0 <printf>
 800daf2:	f104 0158 	add.w	r1, r4, #88	; 0x58
 800daf6:	4838      	ldr	r0, [pc, #224]	; (800dbd8 <ArtNetNode::Print()+0x104>)
 800daf8:	f7fc fcda 	bl	800a4b0 <printf>
 800dafc:	4837      	ldr	r0, [pc, #220]	; (800dbdc <ArtNetNode::Print()+0x108>)
 800dafe:	f104 016a 	add.w	r1, r4, #106	; 0x6a
 800db02:	f7fc fcd5 	bl	800a4b0 <printf>
 800db06:	f894 3a1a 	ldrb.w	r3, [r4, #2586]	; 0xa1a
 800db0a:	b36b      	cbz	r3, 800db68 <ArtNetNode::Print()+0x94>
 800db0c:	4834      	ldr	r0, [pc, #208]	; (800dbe0 <ArtNetNode::Print()+0x10c>)
 800db0e:	4f35      	ldr	r7, [pc, #212]	; (800dbe4 <ArtNetNode::Print()+0x110>)
 800db10:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800dc00 <ArtNetNode::Print()+0x12c>
 800db14:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800dc04 <ArtNetNode::Print()+0x130>
 800db18:	f7fc fcca 	bl	800a4b0 <printf>
 800db1c:	4626      	mov	r6, r4
 800db1e:	2500      	movs	r5, #0
 800db20:	2301      	movs	r3, #1
 800db22:	f10d 0216 	add.w	r2, sp, #22
 800db26:	4629      	mov	r1, r5
 800db28:	4620      	mov	r0, r4
 800db2a:	f7fe fd7d 	bl	800c628 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800db2e:	b1b0      	cbz	r0, 800db5e <ArtNetNode::Print()+0x8a>
 800db30:	f8d6 3a38 	ldr.w	r3, [r6, #2616]	; 0xa38
 800db34:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	bf0c      	ite	eq
 800db3c:	463b      	moveq	r3, r7
 800db3e:	4643      	movne	r3, r8
 800db40:	4629      	mov	r1, r5
 800db42:	4648      	mov	r0, r9
 800db44:	f7fc fcb4 	bl	800a4b0 <printf>
 800db48:	f8d6 1a40 	ldr.w	r1, [r6, #2624]	; 0xa40
 800db4c:	4a26      	ldr	r2, [pc, #152]	; (800dbe8 <ArtNetNode::Print()+0x114>)
 800db4e:	4b27      	ldr	r3, [pc, #156]	; (800dbec <ArtNetNode::Print()+0x118>)
 800db50:	4827      	ldr	r0, [pc, #156]	; (800dbf0 <ArtNetNode::Print()+0x11c>)
 800db52:	2900      	cmp	r1, #0
 800db54:	bf0c      	ite	eq
 800db56:	4611      	moveq	r1, r2
 800db58:	4619      	movne	r1, r3
 800db5a:	f7fc fca9 	bl	800a4b0 <printf>
 800db5e:	3501      	adds	r5, #1
 800db60:	2d42      	cmp	r5, #66	; 0x42
 800db62:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800db66:	d1db      	bne.n	800db20 <ArtNetNode::Print()+0x4c>
 800db68:	f894 3a1b 	ldrb.w	r3, [r4, #2587]	; 0xa1b
 800db6c:	b353      	cbz	r3, 800dbc4 <ArtNetNode::Print()+0xf0>
 800db6e:	4821      	ldr	r0, [pc, #132]	; (800dbf4 <ArtNetNode::Print()+0x120>)
 800db70:	4f21      	ldr	r7, [pc, #132]	; (800dbf8 <ArtNetNode::Print()+0x124>)
 800db72:	f7fc fc9d 	bl	800a4b0 <printf>
 800db76:	f504 56a3 	add.w	r6, r4, #5216	; 0x1460
 800db7a:	2500      	movs	r5, #0
 800db7c:	3618      	adds	r6, #24
 800db7e:	2300      	movs	r3, #0
 800db80:	f10d 0216 	add.w	r2, sp, #22
 800db84:	4629      	mov	r1, r5
 800db86:	4620      	mov	r0, r4
 800db88:	f7fe fd4e 	bl	800c628 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800db8c:	b1b8      	cbz	r0, 800dbbe <ArtNetNode::Print()+0xea>
 800db8e:	012b      	lsls	r3, r5, #4
 800db90:	58f3      	ldr	r3, [r6, r3]
 800db92:	b92b      	cbnz	r3, 800dba0 <ArtNetNode::Print()+0xcc>
 800db94:	4b19      	ldr	r3, [pc, #100]	; (800dbfc <ArtNetNode::Print()+0x128>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	69da      	ldr	r2, [r3, #28]
 800db9a:	695b      	ldr	r3, [r3, #20]
 800db9c:	ea63 0302 	orn	r3, r3, r2
 800dba0:	0e1a      	lsrs	r2, r3, #24
 800dba2:	9202      	str	r2, [sp, #8]
 800dba4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dba8:	9201      	str	r2, [sp, #4]
 800dbaa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dbae:	9200      	str	r2, [sp, #0]
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800dbb6:	4629      	mov	r1, r5
 800dbb8:	4638      	mov	r0, r7
 800dbba:	f7fc fc79 	bl	800a4b0 <printf>
 800dbbe:	3501      	adds	r5, #1
 800dbc0:	2d42      	cmp	r5, #66	; 0x42
 800dbc2:	d1dc      	bne.n	800db7e <ArtNetNode::Print()+0xaa>
 800dbc4:	b007      	add	sp, #28
 800dbc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbca:	bf00      	nop
 800dbcc:	0801bc88 	stmdaeq	r1, {r3, r7, sl, fp, ip, sp, pc}
 800dbd0:	0801bea0 	stmdaeq	r1, {r5, r7, r9, sl, fp, ip, sp, pc}
 800dbd4:	0801bc96 	stmdaeq	r1, {r1, r2, r4, r7, sl, fp, ip, sp, pc}
 800dbd8:	0801bcab 	stmdaeq	r1, {r0, r1, r3, r5, r7, sl, fp, ip, sp, pc}
 800dbdc:	0801bcbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, sl, fp, ip, sp, pc}
 800dbe0:	0801bccf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, sl, fp, ip, sp, pc}
 800dbe4:	0801bc73 	stmdaeq	r1, {r0, r1, r4, r5, r6, sl, fp, ip, sp, pc}
 800dbe8:	0801bc7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, sl, fp, ip, sp, pc}
 800dbec:	0801bc83 	stmdaeq	r1, {r0, r1, r7, sl, fp, ip, sp, pc}
 800dbf0:	0801bcec 	stmdaeq	r1, {r2, r3, r5, r6, r7, sl, fp, ip, sp, pc}
 800dbf4:	0801bcf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, sl, fp, ip, sp, pc}
 800dbf8:	0801bcfb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, sl, fp, ip, sp, pc}
 800dbfc:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 800dc00:	0801bc77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, fp, ip, sp, pc}
 800dc04:	0801bcd8 	stmdaeq	r1, {r3, r4, r6, r7, sl, fp, ip, sp, pc}

0800dc08 <memcmp>:
 800dc08:	4402      	add	r2, r0
 800dc0a:	4290      	cmp	r0, r2
 800dc0c:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800dc10:	d106      	bne.n	800dc20 <memcmp+0x18>
 800dc12:	2000      	movs	r0, #0
 800dc14:	4770      	bx	lr
 800dc16:	3001      	adds	r0, #1
 800dc18:	4290      	cmp	r0, r2
 800dc1a:	d102      	bne.n	800dc22 <memcmp+0x1a>
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	e006      	b.n	800dc2e <memcmp+0x26>
 800dc20:	b510      	push	{r4, lr}
 800dc22:	7803      	ldrb	r3, [r0, #0]
 800dc24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dc28:	42a3      	cmp	r3, r4
 800dc2a:	d0f4      	beq.n	800dc16 <memcmp+0xe>
 800dc2c:	1b18      	subs	r0, r3, r4
 800dc2e:	bd10      	pop	{r4, pc}

0800dc30 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800dc30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc32:	88c6      	ldrh	r6, [r0, #6]
 800dc34:	8885      	ldrh	r5, [r0, #4]
 800dc36:	42ae      	cmp	r6, r5
 800dc38:	d216      	bcs.n	800dc68 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	6800      	ldr	r0, [r0, #0]
 800dc3e:	1bad      	subs	r5, r5, r6
 800dc40:	4430      	add	r0, r6
 800dc42:	7a26      	ldrb	r6, [r4, #8]
 800dc44:	b923      	cbnz	r3, 800dc50 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800dc46:	b926      	cbnz	r6, 800dc52 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800dc48:	9200      	str	r2, [sp, #0]
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	4a09      	ldr	r2, [pc, #36]	; (800dc74 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800dc4e:	e003      	b.n	800dc58 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800dc50:	b166      	cbz	r6, 800dc6c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800dc52:	9200      	str	r2, [sp, #0]
 800dc54:	4a08      	ldr	r2, [pc, #32]	; (800dc78 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800dc56:	460b      	mov	r3, r1
 800dc58:	4629      	mov	r1, r5
 800dc5a:	f7fc fc51 	bl	800a500 <snprintf>
 800dc5e:	4285      	cmp	r5, r0
 800dc60:	bfa2      	ittt	ge
 800dc62:	88e3      	ldrhge	r3, [r4, #6]
 800dc64:	181b      	addge	r3, r3, r0
 800dc66:	80e3      	strhge	r3, [r4, #6]
 800dc68:	b002      	add	sp, #8
 800dc6a:	bd70      	pop	{r4, r5, r6, pc}
 800dc6c:	9200      	str	r2, [sp, #0]
 800dc6e:	460b      	mov	r3, r1
 800dc70:	4a02      	ldr	r2, [pc, #8]	; (800dc7c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800dc72:	e7f1      	b.n	800dc58 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800dc74:	0801ada1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, sp, pc}
 800dc78:	0801ad98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, sp, pc}
 800dc7c:	0801ada2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, sp, pc}

0800dc80 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800dc80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc82:	88c6      	ldrh	r6, [r0, #6]
 800dc84:	8885      	ldrh	r5, [r0, #4]
 800dc86:	42ae      	cmp	r6, r5
 800dc88:	d216      	bcs.n	800dcb8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	6800      	ldr	r0, [r0, #0]
 800dc8e:	1bad      	subs	r5, r5, r6
 800dc90:	4430      	add	r0, r6
 800dc92:	7a26      	ldrb	r6, [r4, #8]
 800dc94:	b923      	cbnz	r3, 800dca0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800dc96:	b926      	cbnz	r6, 800dca2 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800dc98:	9200      	str	r2, [sp, #0]
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	4a09      	ldr	r2, [pc, #36]	; (800dcc4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800dc9e:	e003      	b.n	800dca8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800dca0:	b166      	cbz	r6, 800dcbc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800dca2:	9200      	str	r2, [sp, #0]
 800dca4:	4a08      	ldr	r2, [pc, #32]	; (800dcc8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800dca6:	460b      	mov	r3, r1
 800dca8:	4629      	mov	r1, r5
 800dcaa:	f7fc fc29 	bl	800a500 <snprintf>
 800dcae:	4285      	cmp	r5, r0
 800dcb0:	bfa2      	ittt	ge
 800dcb2:	88e3      	ldrhge	r3, [r4, #6]
 800dcb4:	181b      	addge	r3, r3, r0
 800dcb6:	80e3      	strhge	r3, [r4, #6]
 800dcb8:	b002      	add	sp, #8
 800dcba:	bd70      	pop	{r4, r5, r6, pc}
 800dcbc:	9200      	str	r2, [sp, #0]
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	4a02      	ldr	r2, [pc, #8]	; (800dccc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800dcc2:	e7f1      	b.n	800dca8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800dcc4:	0801adb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, fp, sp, pc}
 800dcc8:	0801ada9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, fp, sp, pc}
 800dccc:	0801adb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, sl, fp, sp, pc}

0800dcd0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800dcd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	8885      	ldrh	r5, [r0, #4]
 800dcd6:	88c1      	ldrh	r1, [r0, #6]
 800dcd8:	42a9      	cmp	r1, r5
 800dcda:	d214      	bcs.n	800dd06 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800dcdc:	4604      	mov	r4, r0
 800dcde:	6800      	ldr	r0, [r0, #0]
 800dce0:	1a6d      	subs	r5, r5, r1
 800dce2:	4408      	add	r0, r1
 800dce4:	7a21      	ldrb	r1, [r4, #8]
 800dce6:	b91a      	cbnz	r2, 800dcf0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800dce8:	b919      	cbnz	r1, 800dcf2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800dcea:	4a0a      	ldr	r2, [pc, #40]	; (800dd14 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800dcec:	9100      	str	r1, [sp, #0]
 800dcee:	e002      	b.n	800dcf6 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800dcf0:	b159      	cbz	r1, 800dd0a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800dcf2:	9200      	str	r2, [sp, #0]
 800dcf4:	4a08      	ldr	r2, [pc, #32]	; (800dd18 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800dcf6:	4629      	mov	r1, r5
 800dcf8:	f7fc fc02 	bl	800a500 <snprintf>
 800dcfc:	4285      	cmp	r5, r0
 800dcfe:	bfa2      	ittt	ge
 800dd00:	88e3      	ldrhge	r3, [r4, #6]
 800dd02:	181b      	addge	r3, r3, r0
 800dd04:	80e3      	strhge	r3, [r4, #6]
 800dd06:	b003      	add	sp, #12
 800dd08:	bd30      	pop	{r4, r5, pc}
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	9200      	str	r2, [sp, #0]
 800dd0e:	4a03      	ldr	r2, [pc, #12]	; (800dd1c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800dd10:	e7f1      	b.n	800dcf6 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800dd12:	bf00      	nop
 800dd14:	0801ada1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, sp, pc}
 800dd18:	0801ad98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, sp, pc}
 800dd1c:	0801ada2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, sp, pc}

0800dd20 <strncpy.isra.0>:
 800dd20:	1e4b      	subs	r3, r1, #1
 800dd22:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800dd26:	b909      	cbnz	r1, 800dd2c <strncpy.isra.0+0xc>
 800dd28:	f00a bad8 	b.w	80182dc <memset>
 800dd2c:	3a01      	subs	r2, #1
 800dd2e:	f800 1b01 	strb.w	r1, [r0], #1
 800dd32:	d1f6      	bne.n	800dd22 <strncpy.isra.0+0x2>
 800dd34:	4770      	bx	lr
	...

0800dd38 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800dd38:	b510      	push	{r4, lr}
 800dd3a:	2287      	movs	r2, #135	; 0x87
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	f840 1b04 	str.w	r1, [r0], #4
 800dd42:	2100      	movs	r1, #0
 800dd44:	f00a faca 	bl	80182dc <memset>
 800dd48:	2301      	movs	r3, #1
 800dd4a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800dd4e:	f240 3302 	movw	r3, #770	; 0x302
 800dd52:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800dd56:	2355      	movs	r3, #85	; 0x55
 800dd58:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800dd62:	4b04      	ldr	r3, [pc, #16]	; (800dd74 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x3c>)
 800dd64:	6819      	ldr	r1, [r3, #0]
 800dd66:	2204      	movs	r2, #4
 800dd68:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
 800dd6c:	b901      	cbnz	r1, 800dd70 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x38>
 800dd6e:	601a      	str	r2, [r3, #0]
 800dd70:	4620      	mov	r0, r4
 800dd72:	bd10      	pop	{r4, pc}
 800dd74:	200006dc 	ldrdcs	r0, [r0], -ip

0800dd78 <ArtNetParams::Load()>:
 800dd78:	b508      	push	{r3, lr}
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	4601      	mov	r1, r0
 800dd7e:	6043      	str	r3, [r0, #4]
 800dd80:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800dd84:	6800      	ldr	r0, [r0, #0]
 800dd86:	b120      	cbz	r0, 800dd92 <ArtNetParams::Load()+0x1a>
 800dd88:	6803      	ldr	r3, [r0, #0]
 800dd8a:	3104      	adds	r1, #4
 800dd8c:	68db      	ldr	r3, [r3, #12]
 800dd8e:	4798      	blx	r3
 800dd90:	2001      	movs	r0, #1
 800dd92:	bd08      	pop	{r3, pc}

0800dd94 <ArtNetParams::Load(char const*, unsigned int)>:
 800dd94:	6803      	ldr	r3, [r0, #0]
 800dd96:	b1e3      	cbz	r3, 800ddd2 <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800dd98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	6043      	str	r3, [r0, #4]
 800dd9e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800dda2:	4604      	mov	r4, r0
 800dda4:	460d      	mov	r5, r1
 800dda6:	4616      	mov	r6, r2
 800dda8:	490a      	ldr	r1, [pc, #40]	; (800ddd4 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800ddaa:	4602      	mov	r2, r0
 800ddac:	4668      	mov	r0, sp
 800ddae:	f009 fbeb 	bl	8017588 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800ddb2:	4632      	mov	r2, r6
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	4668      	mov	r0, sp
 800ddb8:	f009 fbea 	bl	8017590 <ReadConfigFile::Read(char const*, unsigned int)>
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	f851 0b04 	ldr.w	r0, [r1], #4
 800ddc2:	6803      	ldr	r3, [r0, #0]
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	4798      	blx	r3
 800ddc8:	4668      	mov	r0, sp
 800ddca:	f009 fbe0 	bl	801758e <ReadConfigFile::~ReadConfigFile()>
 800ddce:	b002      	add	sp, #8
 800ddd0:	bd70      	pop	{r4, r5, r6, pc}
 800ddd2:	4770      	bx	lr
 800ddd4:	0800e1bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, sp, lr, pc}

0800ddd8 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800ddd8:	6843      	ldr	r3, [r0, #4]
 800ddda:	b111      	cbz	r1, 800dde2 <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800dddc:	431a      	orrs	r2, r3
 800ddde:	6042      	str	r2, [r0, #4]
 800dde0:	4770      	bx	lr
 800dde2:	ea23 0202 	bic.w	r2, r3, r2
 800dde6:	e7fa      	b.n	800ddde <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800dde8 <ArtNetParams::callbackFunction(char const*)>:
 800dde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddec:	460e      	mov	r6, r1
 800ddee:	b0a7      	sub	sp, #156	; 0x9c
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	499e      	ldr	r1, [pc, #632]	; (800e06c <ArtNetParams::callbackFunction(char const*)+0x284>)
 800ddf4:	f10d 020f 	add.w	r2, sp, #15
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	f009 fcfa 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ddfe:	b940      	cbnz	r0, 800de12 <ArtNetParams::callbackFunction(char const*)+0x2a>
 800de00:	2220      	movs	r2, #32
 800de02:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800de06:	4620      	mov	r0, r4
 800de08:	b027      	add	sp, #156	; 0x9c
 800de0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de0e:	f7ff bfe3 	b.w	800ddd8 <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800de12:	2708      	movs	r7, #8
 800de14:	4996      	ldr	r1, [pc, #600]	; (800e070 <ArtNetParams::callbackFunction(char const*)+0x288>)
 800de16:	9705      	str	r7, [sp, #20]
 800de18:	ab05      	add	r3, sp, #20
 800de1a:	aa06      	add	r2, sp, #24
 800de1c:	4630      	mov	r0, r6
 800de1e:	f009 fbeb 	bl	80175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800de22:	bb40      	cbnz	r0, 800de76 <ArtNetParams::callbackFunction(char const*)+0x8e>
 800de24:	4993      	ldr	r1, [pc, #588]	; (800e074 <ArtNetParams::callbackFunction(char const*)+0x28c>)
 800de26:	2204      	movs	r2, #4
 800de28:	a806      	add	r0, sp, #24
 800de2a:	f7ff feed 	bl	800dc08 <memcmp>
 800de2e:	6865      	ldr	r5, [r4, #4]
 800de30:	b188      	cbz	r0, 800de56 <ArtNetParams::callbackFunction(char const*)+0x6e>
 800de32:	4991      	ldr	r1, [pc, #580]	; (800e078 <ArtNetParams::callbackFunction(char const*)+0x290>)
 800de34:	2203      	movs	r2, #3
 800de36:	a806      	add	r0, sp, #24
 800de38:	f7ff fee6 	bl	800dc08 <memcmp>
 800de3c:	b198      	cbz	r0, 800de66 <ArtNetParams::callbackFunction(char const*)+0x7e>
 800de3e:	498f      	ldr	r1, [pc, #572]	; (800e07c <ArtNetParams::callbackFunction(char const*)+0x294>)
 800de40:	2202      	movs	r2, #2
 800de42:	a806      	add	r0, sp, #24
 800de44:	f7ff fee0 	bl	800dc08 <memcmp>
 800de48:	b188      	cbz	r0, 800de6e <ArtNetParams::callbackFunction(char const*)+0x86>
 800de4a:	498d      	ldr	r1, [pc, #564]	; (800e080 <ArtNetParams::callbackFunction(char const*)+0x298>)
 800de4c:	463a      	mov	r2, r7
 800de4e:	a806      	add	r0, sp, #24
 800de50:	f7ff feda 	bl	800dc08 <memcmp>
 800de54:	b168      	cbz	r0, 800de72 <ArtNetParams::callbackFunction(char const*)+0x8a>
 800de56:	f025 0510 	bic.w	r5, r5, #16
 800de5a:	2300      	movs	r3, #0
 800de5c:	6065      	str	r5, [r4, #4]
 800de5e:	72a3      	strb	r3, [r4, #10]
 800de60:	b027      	add	sp, #156	; 0x9c
 800de62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de66:	2301      	movs	r3, #1
 800de68:	f045 0510 	orr.w	r5, r5, #16
 800de6c:	e7f6      	b.n	800de5c <ArtNetParams::callbackFunction(char const*)+0x74>
 800de6e:	2302      	movs	r3, #2
 800de70:	e7fa      	b.n	800de68 <ArtNetParams::callbackFunction(char const*)+0x80>
 800de72:	2303      	movs	r3, #3
 800de74:	e7f8      	b.n	800de68 <ArtNetParams::callbackFunction(char const*)+0x80>
 800de76:	2311      	movs	r3, #17
 800de78:	9305      	str	r3, [sp, #20]
 800de7a:	4982      	ldr	r1, [pc, #520]	; (800e084 <ArtNetParams::callbackFunction(char const*)+0x29c>)
 800de7c:	ab05      	add	r3, sp, #20
 800de7e:	f104 0210 	add.w	r2, r4, #16
 800de82:	4630      	mov	r0, r6
 800de84:	f009 fbb8 	bl	80175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800de88:	b938      	cbnz	r0, 800de9a <ArtNetParams::callbackFunction(char const*)+0xb2>
 800de8a:	9b05      	ldr	r3, [sp, #20]
 800de8c:	4423      	add	r3, r4
 800de8e:	7418      	strb	r0, [r3, #16]
 800de90:	6863      	ldr	r3, [r4, #4]
 800de92:	f043 0302 	orr.w	r3, r3, #2
 800de96:	6063      	str	r3, [r4, #4]
 800de98:	e7e2      	b.n	800de60 <ArtNetParams::callbackFunction(char const*)+0x78>
 800de9a:	233f      	movs	r3, #63	; 0x3f
 800de9c:	9305      	str	r3, [sp, #20]
 800de9e:	497a      	ldr	r1, [pc, #488]	; (800e088 <ArtNetParams::callbackFunction(char const*)+0x2a0>)
 800dea0:	ab05      	add	r3, sp, #20
 800dea2:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800dea6:	4630      	mov	r0, r6
 800dea8:	f009 fba6 	bl	80175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800deac:	b938      	cbnz	r0, 800debe <ArtNetParams::callbackFunction(char const*)+0xd6>
 800deae:	9b05      	ldr	r3, [sp, #20]
 800deb0:	4423      	add	r3, r4
 800deb2:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800deb6:	6863      	ldr	r3, [r4, #4]
 800deb8:	f043 0301 	orr.w	r3, r3, #1
 800debc:	e7eb      	b.n	800de96 <ArtNetParams::callbackFunction(char const*)+0xae>
 800debe:	4973      	ldr	r1, [pc, #460]	; (800e08c <ArtNetParams::callbackFunction(char const*)+0x2a4>)
 800dec0:	f10d 020f 	add.w	r2, sp, #15
 800dec4:	4630      	mov	r0, r6
 800dec6:	f009 fc94 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800deca:	b950      	cbnz	r0, 800dee2 <ArtNetParams::callbackFunction(char const*)+0xfa>
 800decc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ded0:	6863      	ldr	r3, [r4, #4]
 800ded2:	7222      	strb	r2, [r4, #8]
 800ded4:	b112      	cbz	r2, 800dedc <ArtNetParams::callbackFunction(char const*)+0xf4>
 800ded6:	f043 0304 	orr.w	r3, r3, #4
 800deda:	e7dc      	b.n	800de96 <ArtNetParams::callbackFunction(char const*)+0xae>
 800dedc:	f023 0304 	bic.w	r3, r3, #4
 800dee0:	e7d9      	b.n	800de96 <ArtNetParams::callbackFunction(char const*)+0xae>
 800dee2:	496b      	ldr	r1, [pc, #428]	; (800e090 <ArtNetParams::callbackFunction(char const*)+0x2a8>)
 800dee4:	f10d 020f 	add.w	r2, sp, #15
 800dee8:	4630      	mov	r0, r6
 800deea:	f009 fc82 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800deee:	b950      	cbnz	r0, 800df06 <ArtNetParams::callbackFunction(char const*)+0x11e>
 800def0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800def4:	6863      	ldr	r3, [r4, #4]
 800def6:	7262      	strb	r2, [r4, #9]
 800def8:	b112      	cbz	r2, 800df00 <ArtNetParams::callbackFunction(char const*)+0x118>
 800defa:	f043 0308 	orr.w	r3, r3, #8
 800defe:	e7ca      	b.n	800de96 <ArtNetParams::callbackFunction(char const*)+0xae>
 800df00:	f023 0308 	bic.w	r3, r3, #8
 800df04:	e7c7      	b.n	800de96 <ArtNetParams::callbackFunction(char const*)+0xae>
 800df06:	f8df 9198 	ldr.w	r9, [pc, #408]	; 800e0a0 <ArtNetParams::callbackFunction(char const*)+0x2b8>
 800df0a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 800e0a4 <ArtNetParams::callbackFunction(char const*)+0x2bc>
 800df0e:	f8df b198 	ldr.w	fp, [pc, #408]	; 800e0a8 <ArtNetParams::callbackFunction(char const*)+0x2c0>
 800df12:	2500      	movs	r5, #0
 800df14:	f10d 020f 	add.w	r2, sp, #15
 800df18:	4649      	mov	r1, r9
 800df1a:	4630      	mov	r0, r6
 800df1c:	f009 fc69 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800df20:	b9a8      	cbnz	r0, 800df4e <ArtNetParams::callbackFunction(char const*)+0x166>
 800df22:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800df26:	6862      	ldr	r2, [r4, #4]
 800df28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df2c:	280f      	cmp	r0, #15
 800df2e:	fa03 f305 	lsl.w	r3, r3, r5
 800df32:	eb04 0105 	add.w	r1, r4, r5
 800df36:	d803      	bhi.n	800df40 <ArtNetParams::callbackFunction(char const*)+0x158>
 800df38:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800df3c:	4313      	orrs	r3, r2
 800df3e:	e7aa      	b.n	800de96 <ArtNetParams::callbackFunction(char const*)+0xae>
 800df40:	3501      	adds	r5, #1
 800df42:	ea22 0203 	bic.w	r2, r2, r3
 800df46:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800df4a:	6062      	str	r2, [r4, #4]
 800df4c:	e788      	b.n	800de60 <ArtNetParams::callbackFunction(char const*)+0x78>
 800df4e:	4951      	ldr	r1, [pc, #324]	; (800e094 <ArtNetParams::callbackFunction(char const*)+0x2ac>)
 800df50:	2712      	movs	r7, #18
 800df52:	2303      	movs	r3, #3
 800df54:	436f      	muls	r7, r5
 800df56:	9305      	str	r3, [sp, #20]
 800df58:	aa06      	add	r2, sp, #24
 800df5a:	ab05      	add	r3, sp, #20
 800df5c:	4439      	add	r1, r7
 800df5e:	4630      	mov	r0, r6
 800df60:	f009 fb4a 	bl	80175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800df64:	bb08      	cbnz	r0, 800dfaa <ArtNetParams::callbackFunction(char const*)+0x1c2>
 800df66:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800df6a:	6863      	ldr	r3, [r4, #4]
 800df6c:	f041 0120 	orr.w	r1, r1, #32
 800df70:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800df74:	296c      	cmp	r1, #108	; 0x6c
 800df76:	fa02 f205 	lsl.w	r2, r2, r5
 800df7a:	4425      	add	r5, r4
 800df7c:	d10f      	bne.n	800df9e <ArtNetParams::callbackFunction(char const*)+0x1b6>
 800df7e:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800df82:	f041 0120 	orr.w	r1, r1, #32
 800df86:	2974      	cmp	r1, #116	; 0x74
 800df88:	d109      	bne.n	800df9e <ArtNetParams::callbackFunction(char const*)+0x1b6>
 800df8a:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800df8e:	f041 0120 	orr.w	r1, r1, #32
 800df92:	2970      	cmp	r1, #112	; 0x70
 800df94:	d103      	bne.n	800df9e <ArtNetParams::callbackFunction(char const*)+0x1b6>
 800df96:	2101      	movs	r1, #1
 800df98:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800df9c:	e7ce      	b.n	800df3c <ArtNetParams::callbackFunction(char const*)+0x154>
 800df9e:	2100      	movs	r1, #0
 800dfa0:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800dfa4:	ea23 0302 	bic.w	r3, r3, r2
 800dfa8:	e775      	b.n	800de96 <ArtNetParams::callbackFunction(char const*)+0xae>
 800dfaa:	493b      	ldr	r1, [pc, #236]	; (800e098 <ArtNetParams::callbackFunction(char const*)+0x2b0>)
 800dfac:	f04f 0a04 	mov.w	sl, #4
 800dfb0:	ab05      	add	r3, sp, #20
 800dfb2:	aa06      	add	r2, sp, #24
 800dfb4:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800dfb8:	4630      	mov	r0, r6
 800dfba:	f8cd a014 	str.w	sl, [sp, #20]
 800dfbe:	f009 fb1b 	bl	80175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800dfc2:	b9a0      	cbnz	r0, 800dfee <ArtNetParams::callbackFunction(char const*)+0x206>
 800dfc4:	9001      	str	r0, [sp, #4]
 800dfc6:	4652      	mov	r2, sl
 800dfc8:	4934      	ldr	r1, [pc, #208]	; (800e09c <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800dfca:	a806      	add	r0, sp, #24
 800dfcc:	f7ff fe1c 	bl	800dc08 <memcmp>
 800dfd0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800dfd4:	40aa      	lsls	r2, r5
 800dfd6:	9b01      	ldr	r3, [sp, #4]
 800dfd8:	4425      	add	r5, r4
 800dfda:	b920      	cbnz	r0, 800dfe6 <ArtNetParams::callbackFunction(char const*)+0x1fe>
 800dfdc:	2301      	movs	r3, #1
 800dfde:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800dfe2:	6863      	ldr	r3, [r4, #4]
 800dfe4:	e7aa      	b.n	800df3c <ArtNetParams::callbackFunction(char const*)+0x154>
 800dfe6:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800dfea:	6863      	ldr	r3, [r4, #4]
 800dfec:	e7da      	b.n	800dfa4 <ArtNetParams::callbackFunction(char const*)+0x1bc>
 800dfee:	2307      	movs	r3, #7
 800dff0:	9305      	str	r3, [sp, #20]
 800dff2:	aa06      	add	r2, sp, #24
 800dff4:	ab05      	add	r3, sp, #20
 800dff6:	eb0b 0107 	add.w	r1, fp, r7
 800dffa:	4630      	mov	r0, r6
 800dffc:	f009 fafc 	bl	80175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800e000:	2800      	cmp	r0, #0
 800e002:	d17e      	bne.n	800e102 <ArtNetParams::callbackFunction(char const*)+0x31a>
 800e004:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800e008:	f043 0320 	orr.w	r3, r3, #32
 800e00c:	2b69      	cmp	r3, #105	; 0x69
 800e00e:	d14d      	bne.n	800e0ac <ArtNetParams::callbackFunction(char const*)+0x2c4>
 800e010:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e014:	f043 0320 	orr.w	r3, r3, #32
 800e018:	2b6e      	cmp	r3, #110	; 0x6e
 800e01a:	d170      	bne.n	800e0fe <ArtNetParams::callbackFunction(char const*)+0x316>
 800e01c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800e020:	f043 0320 	orr.w	r3, r3, #32
 800e024:	2b70      	cmp	r3, #112	; 0x70
 800e026:	d16a      	bne.n	800e0fe <ArtNetParams::callbackFunction(char const*)+0x316>
 800e028:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e02c:	f043 0320 	orr.w	r3, r3, #32
 800e030:	2b75      	cmp	r3, #117	; 0x75
 800e032:	d164      	bne.n	800e0fe <ArtNetParams::callbackFunction(char const*)+0x316>
 800e034:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800e038:	f043 0320 	orr.w	r3, r3, #32
 800e03c:	3b74      	subs	r3, #116	; 0x74
 800e03e:	bf18      	it	ne
 800e040:	2301      	movne	r3, #1
 800e042:	f8b4 2079 	ldrh.w	r2, [r4, #121]	; 0x79
 800e046:	006d      	lsls	r5, r5, #1
 800e048:	2103      	movs	r1, #3
 800e04a:	40a9      	lsls	r1, r5
 800e04c:	ea22 0201 	bic.w	r2, r2, r1
 800e050:	b143      	cbz	r3, 800e064 <ArtNetParams::callbackFunction(char const*)+0x27c>
 800e052:	2b02      	cmp	r3, #2
 800e054:	bf15      	itete	ne
 800e056:	2301      	movne	r3, #1
 800e058:	40ab      	lsleq	r3, r5
 800e05a:	fa03 f505 	lslne.w	r5, r3, r5
 800e05e:	431a      	orreq	r2, r3
 800e060:	bf18      	it	ne
 800e062:	432a      	orrne	r2, r5
 800e064:	f8a4 2079 	strh.w	r2, [r4, #121]	; 0x79
 800e068:	e6fa      	b.n	800de60 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e06a:	bf00      	nop
 800e06c:	0801bd70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
 800e070:	0801d96a 	stmdaeq	r1, {r1, r3, r5, r6, r8, fp, ip, lr, pc}
 800e074:	0801bd1a 	stmdaeq	r1, {r1, r3, r4, r8, sl, fp, ip, sp, pc}
 800e078:	0801bd1f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, sl, fp, ip, sp, pc}
 800e07c:	0801af66 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, fp, sp, pc}
 800e080:	0801bd23 	stmdaeq	r1, {r0, r1, r5, r8, sl, fp, ip, sp, pc}
 800e084:	0801bdd3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, sl, fp, ip, sp, pc}
 800e088:	0801bdc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, sl, fp, ip, sp, pc}
 800e08c:	0801be86 	stmdaeq	r1, {r1, r2, r7, r9, sl, fp, ip, sp, pc}
 800e090:	0801be8a 	stmdaeq	r1, {r1, r3, r7, r9, sl, fp, ip, sp, pc}
 800e094:	0801d8fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, fp, ip, lr, pc}
 800e098:	0801bd89 	stmdaeq	r1, {r0, r3, r7, r8, sl, fp, ip, sp, pc}
 800e09c:	0801bd2c 	stmdaeq	r1, {r2, r3, r5, r8, sl, fp, ip, sp, pc}
 800e0a0:	0801d77a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, r9, sl, ip, lr, pc}
 800e0a4:	0801bdde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, sl, fp, ip, sp, pc}
 800e0a8:	0801d97c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, fp, ip, lr, pc}
 800e0ac:	2b64      	cmp	r3, #100	; 0x64
 800e0ae:	d126      	bne.n	800e0fe <ArtNetParams::callbackFunction(char const*)+0x316>
 800e0b0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e0b4:	f043 0320 	orr.w	r3, r3, #32
 800e0b8:	2b69      	cmp	r3, #105	; 0x69
 800e0ba:	d120      	bne.n	800e0fe <ArtNetParams::callbackFunction(char const*)+0x316>
 800e0bc:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800e0c0:	f043 0320 	orr.w	r3, r3, #32
 800e0c4:	2b73      	cmp	r3, #115	; 0x73
 800e0c6:	d11a      	bne.n	800e0fe <ArtNetParams::callbackFunction(char const*)+0x316>
 800e0c8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e0cc:	f043 0320 	orr.w	r3, r3, #32
 800e0d0:	2b61      	cmp	r3, #97	; 0x61
 800e0d2:	d114      	bne.n	800e0fe <ArtNetParams::callbackFunction(char const*)+0x316>
 800e0d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800e0d8:	f043 0320 	orr.w	r3, r3, #32
 800e0dc:	2b62      	cmp	r3, #98	; 0x62
 800e0de:	d10e      	bne.n	800e0fe <ArtNetParams::callbackFunction(char const*)+0x316>
 800e0e0:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e0e4:	f043 0320 	orr.w	r3, r3, #32
 800e0e8:	2b6c      	cmp	r3, #108	; 0x6c
 800e0ea:	d108      	bne.n	800e0fe <ArtNetParams::callbackFunction(char const*)+0x316>
 800e0ec:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e0f0:	f043 0320 	orr.w	r3, r3, #32
 800e0f4:	2b65      	cmp	r3, #101	; 0x65
 800e0f6:	bf14      	ite	ne
 800e0f8:	2301      	movne	r3, #1
 800e0fa:	2302      	moveq	r3, #2
 800e0fc:	e7a1      	b.n	800e042 <ArtNetParams::callbackFunction(char const*)+0x25a>
 800e0fe:	2301      	movs	r3, #1
 800e100:	e79f      	b.n	800e042 <ArtNetParams::callbackFunction(char const*)+0x25a>
 800e102:	4b2b      	ldr	r3, [pc, #172]	; (800e1b0 <ArtNetParams::callbackFunction(char const*)+0x3c8>)
 800e104:	2118      	movs	r1, #24
 800e106:	aa04      	add	r2, sp, #16
 800e108:	fb01 3105 	mla	r1, r1, r5, r3
 800e10c:	4630      	mov	r0, r6
 800e10e:	f009 fae7 	bl	80176e0 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800e112:	b998      	cbnz	r0, 800e13c <ArtNetParams::callbackFunction(char const*)+0x354>
 800e114:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e118:	9904      	ldr	r1, [sp, #16]
 800e11a:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800e11e:	2301      	movs	r3, #1
 800e120:	40ab      	lsls	r3, r5
 800e122:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800e126:	b29b      	uxth	r3, r3
 800e128:	b119      	cbz	r1, 800e132 <ArtNetParams::callbackFunction(char const*)+0x34a>
 800e12a:	4313      	orrs	r3, r2
 800e12c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800e130:	e696      	b.n	800de60 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e132:	ea22 0203 	bic.w	r2, r2, r3
 800e136:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 800e13a:	e691      	b.n	800de60 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e13c:	f10d 020f 	add.w	r2, sp, #15
 800e140:	4641      	mov	r1, r8
 800e142:	4630      	mov	r0, r6
 800e144:	f009 fb55 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e148:	b998      	cbnz	r0, 800e172 <ArtNetParams::callbackFunction(char const*)+0x38a>
 800e14a:	2201      	movs	r2, #1
 800e14c:	f105 0308 	add.w	r3, r5, #8
 800e150:	fa02 f303 	lsl.w	r3, r2, r3
 800e154:	40aa      	lsls	r2, r5
 800e156:	4313      	orrs	r3, r2
 800e158:	89a2      	ldrh	r2, [r4, #12]
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	ea22 0103 	bic.w	r1, r2, r3
 800e160:	81a1      	strh	r1, [r4, #12]
 800e162:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800e166:	2900      	cmp	r1, #0
 800e168:	f43f ae7a 	beq.w	800de60 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e16c:	431a      	orrs	r2, r3
 800e16e:	81a2      	strh	r2, [r4, #12]
 800e170:	e676      	b.n	800de60 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e172:	3501      	adds	r5, #1
 800e174:	2d04      	cmp	r5, #4
 800e176:	f109 0910 	add.w	r9, r9, #16
 800e17a:	f108 0812 	add.w	r8, r8, #18
 800e17e:	f47f aec9 	bne.w	800df14 <ArtNetParams::callbackFunction(char const*)+0x12c>
 800e182:	490c      	ldr	r1, [pc, #48]	; (800e1b4 <ArtNetParams::callbackFunction(char const*)+0x3cc>)
 800e184:	f10d 020f 	add.w	r2, sp, #15
 800e188:	4630      	mov	r0, r6
 800e18a:	f009 fb32 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e18e:	b910      	cbnz	r0, 800e196 <ArtNetParams::callbackFunction(char const*)+0x3ae>
 800e190:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e194:	e635      	b.n	800de02 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800e196:	4908      	ldr	r1, [pc, #32]	; (800e1b8 <ArtNetParams::callbackFunction(char const*)+0x3d0>)
 800e198:	f10d 020f 	add.w	r2, sp, #15
 800e19c:	4630      	mov	r0, r6
 800e19e:	f009 fb28 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	f47f ae5c 	bne.w	800de60 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e1a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e1ac:	e629      	b.n	800de02 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800e1ae:	bf00      	nop
 800e1b0:	0801be26 	stmdaeq	r1, {r1, r2, r5, r9, sl, fp, ip, sp, pc}
 800e1b4:	0801bd7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, sl, fp, ip, sp, pc}
 800e1b8:	0801d954 	stmdaeq	r1, {r2, r4, r6, r8, fp, ip, lr, pc}

0800e1bc <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800e1bc:	f7ff be14 	b.w	800dde8 <ArtNetParams::callbackFunction(char const*)>

0800e1c0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800e1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	b085      	sub	sp, #20
 800e1c8:	4615      	mov	r5, r2
 800e1ca:	461e      	mov	r6, r3
 800e1cc:	3004      	adds	r0, #4
 800e1ce:	2900      	cmp	r1, #0
 800e1d0:	f000 80a2 	beq.w	800e318 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x158>
 800e1d4:	2287      	movs	r2, #135	; 0x87
 800e1d6:	f00a f86a 	bl	80182ae <memmove>
 800e1da:	4633      	mov	r3, r6
 800e1dc:	462a      	mov	r2, r5
 800e1de:	4994      	ldr	r1, [pc, #592]	; (800e430 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800e1e0:	a801      	add	r0, sp, #4
 800e1e2:	f009 f931 	bl	8017448 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800e1e6:	6863      	ldr	r3, [r4, #4]
 800e1e8:	f013 0501 	ands.w	r5, r3, #1
 800e1ec:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800e1f0:	d108      	bne.n	800e204 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x44>
 800e1f2:	4b90      	ldr	r3, [pc, #576]	; (800e434 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800e1f4:	6819      	ldr	r1, [r3, #0]
 800e1f6:	223f      	movs	r2, #63	; 0x3f
 800e1f8:	316a      	adds	r1, #106	; 0x6a
 800e1fa:	4630      	mov	r0, r6
 800e1fc:	f7ff fd90 	bl	800dd20 <strncpy.isra.0>
 800e200:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800e204:	6863      	ldr	r3, [r4, #4]
 800e206:	498c      	ldr	r1, [pc, #560]	; (800e438 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800e208:	f003 0301 	and.w	r3, r3, #1
 800e20c:	4632      	mov	r2, r6
 800e20e:	a801      	add	r0, sp, #4
 800e210:	f7ff fd36 	bl	800dc80 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e214:	6863      	ldr	r3, [r4, #4]
 800e216:	f013 0502 	ands.w	r5, r3, #2
 800e21a:	f104 0610 	add.w	r6, r4, #16
 800e21e:	d108      	bne.n	800e232 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x72>
 800e220:	4b84      	ldr	r3, [pc, #528]	; (800e434 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800e222:	6819      	ldr	r1, [r3, #0]
 800e224:	2211      	movs	r2, #17
 800e226:	3158      	adds	r1, #88	; 0x58
 800e228:	4630      	mov	r0, r6
 800e22a:	f7ff fd79 	bl	800dd20 <strncpy.isra.0>
 800e22e:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800e232:	6863      	ldr	r3, [r4, #4]
 800e234:	4981      	ldr	r1, [pc, #516]	; (800e43c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800e236:	4f82      	ldr	r7, [pc, #520]	; (800e440 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800e238:	f8df 9254 	ldr.w	r9, [pc, #596]	; 800e490 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>
 800e23c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e240:	4632      	mov	r2, r6
 800e242:	a801      	add	r0, sp, #4
 800e244:	f7ff fd1c 	bl	800dc80 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e248:	6863      	ldr	r3, [r4, #4]
 800e24a:	7a22      	ldrb	r2, [r4, #8]
 800e24c:	497d      	ldr	r1, [pc, #500]	; (800e444 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800e24e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e252:	a801      	add	r0, sp, #4
 800e254:	f7ff fcec 	bl	800dc30 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800e258:	6863      	ldr	r3, [r4, #4]
 800e25a:	7a62      	ldrb	r2, [r4, #9]
 800e25c:	497a      	ldr	r1, [pc, #488]	; (800e448 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800e25e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e262:	a801      	add	r0, sp, #4
 800e264:	f7ff fce4 	bl	800dc30 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800e268:	6862      	ldr	r2, [r4, #4]
 800e26a:	4978      	ldr	r1, [pc, #480]	; (800e44c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800e26c:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800e270:	a801      	add	r0, sp, #4
 800e272:	f7ff fd2d 	bl	800dcd0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e276:	f104 086a 	add.w	r8, r4, #106	; 0x6a
 800e27a:	2500      	movs	r5, #0
 800e27c:	f8d9 2000 	ldr.w	r2, [r9]
 800e280:	6863      	ldr	r3, [r4, #4]
 800e282:	42aa      	cmp	r2, r5
 800e284:	d84f      	bhi.n	800e326 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x166>
 800e286:	7aa1      	ldrb	r1, [r4, #10]
 800e288:	4a71      	ldr	r2, [pc, #452]	; (800e450 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800e28a:	4e72      	ldr	r6, [pc, #456]	; (800e454 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800e28c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e290:	4971      	ldr	r1, [pc, #452]	; (800e458 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800e292:	f8df 8200 	ldr.w	r8, [pc, #512]	; 800e494 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>
 800e296:	f8df a200 	ldr.w	sl, [pc, #512]	; 800e498 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>
 800e29a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e29e:	a801      	add	r0, sp, #4
 800e2a0:	f7ff fcee 	bl	800dc80 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e2a4:	496d      	ldr	r1, [pc, #436]	; (800e45c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800e2a6:	a801      	add	r0, sp, #4
 800e2a8:	f009 f954 	bl	8017554 <PropertiesBuilder::AddComment(char const*)>
 800e2ac:	f104 0774 	add.w	r7, r4, #116	; 0x74
 800e2b0:	2500      	movs	r5, #0
 800e2b2:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 800e2b6:	f8d9 3000 	ldr.w	r3, [r9]
 800e2ba:	42ab      	cmp	r3, r5
 800e2bc:	6863      	ldr	r3, [r4, #4]
 800e2be:	f200 80a3 	bhi.w	800e408 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x248>
 800e2c2:	f3c3 62c0 	ubfx	r2, r3, #27, #1
 800e2c6:	4966      	ldr	r1, [pc, #408]	; (800e460 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800e2c8:	a801      	add	r0, sp, #4
 800e2ca:	f7ff fd01 	bl	800dcd0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e2ce:	4965      	ldr	r1, [pc, #404]	; (800e464 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800e2d0:	a801      	add	r0, sp, #4
 800e2d2:	f009 f93f 	bl	8017554 <PropertiesBuilder::AddComment(char const*)>
 800e2d6:	6862      	ldr	r2, [r4, #4]
 800e2d8:	4963      	ldr	r1, [pc, #396]	; (800e468 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 800e2da:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800e2de:	a801      	add	r0, sp, #4
 800e2e0:	f7ff fcf6 	bl	800dcd0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e2e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e2e8:	b17b      	cbz	r3, 800e30a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x14a>
 800e2ea:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e2ee:	9b01      	ldr	r3, [sp, #4]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	227d      	movs	r2, #125	; 0x7d
 800e2f4:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e2f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e2fc:	9901      	ldr	r1, [sp, #4]
 800e2fe:	54ca      	strb	r2, [r1, r3]
 800e300:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e304:	3301      	adds	r3, #1
 800e306:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e30a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e30e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e310:	601a      	str	r2, [r3, #0]
 800e312:	b005      	add	sp, #20
 800e314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e318:	6823      	ldr	r3, [r4, #0]
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	4601      	mov	r1, r0
 800e31e:	68d2      	ldr	r2, [r2, #12]
 800e320:	4618      	mov	r0, r3
 800e322:	4790      	blx	r2
 800e324:	e759      	b.n	800e1da <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800e326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e32a:	40aa      	lsls	r2, r5
 800e32c:	494f      	ldr	r1, [pc, #316]	; (800e46c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 800e32e:	439a      	bics	r2, r3
 800e330:	bf0c      	ite	eq
 800e332:	2301      	moveq	r3, #1
 800e334:	2300      	movne	r3, #0
 800e336:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800e33a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800e33e:	a801      	add	r0, sp, #4
 800e340:	f7ff fc76 	bl	800dc30 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800e344:	f8b4 3079 	ldrh.w	r3, [r4, #121]	; 0x79
 800e348:	4949      	ldr	r1, [pc, #292]	; (800e470 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 800e34a:	006a      	lsls	r2, r5, #1
 800e34c:	40d3      	lsrs	r3, r2
 800e34e:	2612      	movs	r6, #18
 800e350:	436e      	muls	r6, r5
 800e352:	f013 0303 	ands.w	r3, r3, #3
 800e356:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 800e35a:	4431      	add	r1, r6
 800e35c:	d052      	beq.n	800e404 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x244>
 800e35e:	4a45      	ldr	r2, [pc, #276]	; (800e474 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800e360:	4845      	ldr	r0, [pc, #276]	; (800e478 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800e362:	2b02      	cmp	r3, #2
 800e364:	bf08      	it	eq
 800e366:	4602      	moveq	r2, r0
 800e368:	3b01      	subs	r3, #1
 800e36a:	bf18      	it	ne
 800e36c:	2301      	movne	r3, #1
 800e36e:	a801      	add	r0, sp, #4
 800e370:	f7ff fc86 	bl	800dc80 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e374:	6861      	ldr	r1, [r4, #4]
 800e376:	f898 2005 	ldrb.w	r2, [r8, #5]
 800e37a:	4840      	ldr	r0, [pc, #256]	; (800e47c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800e37c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e380:	40ab      	lsls	r3, r5
 800e382:	438b      	bics	r3, r1
 800e384:	493e      	ldr	r1, [pc, #248]	; (800e480 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 800e386:	bf0c      	ite	eq
 800e388:	2301      	moveq	r3, #1
 800e38a:	2300      	movne	r3, #0
 800e38c:	2a00      	cmp	r2, #0
 800e38e:	bf0c      	ite	eq
 800e390:	4602      	moveq	r2, r0
 800e392:	460a      	movne	r2, r1
 800e394:	493b      	ldr	r1, [pc, #236]	; (800e484 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800e396:	a801      	add	r0, sp, #4
 800e398:	4431      	add	r1, r6
 800e39a:	f7ff fc71 	bl	800dc80 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e39e:	f04f 0a01 	mov.w	sl, #1
 800e3a2:	f105 0208 	add.w	r2, r5, #8
 800e3a6:	89a1      	ldrh	r1, [r4, #12]
 800e3a8:	fa0a f202 	lsl.w	r2, sl, r2
 800e3ac:	b292      	uxth	r2, r2
 800e3ae:	438a      	bics	r2, r1
 800e3b0:	4935      	ldr	r1, [pc, #212]	; (800e488 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800e3b2:	bf0c      	ite	eq
 800e3b4:	4652      	moveq	r2, sl
 800e3b6:	2200      	movne	r2, #0
 800e3b8:	4431      	add	r1, r6
 800e3ba:	a801      	add	r0, sp, #4
 800e3bc:	f7ff fc88 	bl	800dcd0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e3c0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800e3c4:	fa0a f305 	lsl.w	r3, sl, r5
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	401a      	ands	r2, r3
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	bf0c      	ite	eq
 800e3d0:	4653      	moveq	r3, sl
 800e3d2:	2300      	movne	r3, #0
 800e3d4:	f105 021c 	add.w	r2, r5, #28
 800e3d8:	d009      	beq.n	800e3ee <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x22e>
 800e3da:	4916      	ldr	r1, [pc, #88]	; (800e434 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800e3dc:	6809      	ldr	r1, [r1, #0]
 800e3de:	f241 4078 	movw	r0, #5240	; 0x1478
 800e3e2:	4459      	add	r1, fp
 800e3e4:	5808      	ldr	r0, [r1, r0]
 800e3e6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800e3ea:	f8c1 000b 	str.w	r0, [r1, #11]
 800e3ee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e3f2:	4639      	mov	r1, r7
 800e3f4:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800e3f8:	a801      	add	r0, sp, #4
 800e3fa:	f009 f867 	bl	80174cc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800e3fe:	3501      	adds	r5, #1
 800e400:	3718      	adds	r7, #24
 800e402:	e73b      	b.n	800e27c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xbc>
 800e404:	4a21      	ldr	r2, [pc, #132]	; (800e48c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800e406:	e7af      	b.n	800e368 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a8>
 800e408:	fa0b f105 	lsl.w	r1, fp, r5
 800e40c:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800e410:	4399      	bics	r1, r3
 800e412:	bf0c      	ite	eq
 800e414:	2301      	moveq	r3, #1
 800e416:	2300      	movne	r3, #0
 800e418:	4631      	mov	r1, r6
 800e41a:	2a00      	cmp	r2, #0
 800e41c:	bf0c      	ite	eq
 800e41e:	4642      	moveq	r2, r8
 800e420:	4652      	movne	r2, sl
 800e422:	a801      	add	r0, sp, #4
 800e424:	f7ff fc2c 	bl	800dc80 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e428:	3501      	adds	r5, #1
 800e42a:	3610      	adds	r6, #16
 800e42c:	e743      	b.n	800e2b6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xf6>
 800e42e:	bf00      	nop
 800e430:	0801be91 	stmdaeq	r1, {r0, r4, r7, r9, sl, fp, ip, sp, pc}
 800e434:	200006cc 	andcs	r0, r0, ip, asr #13
 800e438:	0801bdc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, sl, fp, ip, sp, pc}
 800e43c:	0801bdd3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, sl, fp, ip, sp, pc}
 800e440:	0801be26 	stmdaeq	r1, {r1, r2, r5, r9, sl, fp, ip, sp, pc}
 800e444:	0801be86 	stmdaeq	r1, {r1, r2, r7, r9, sl, fp, ip, sp, pc}
 800e448:	0801be8a 	stmdaeq	r1, {r1, r3, r7, r9, sl, fp, ip, sp, pc}
 800e44c:	0801bd70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
 800e450:	0801bd60 	stmdaeq	r1, {r5, r6, r8, sl, fp, ip, sp, pc}
 800e454:	0801bd89 	stmdaeq	r1, {r0, r3, r7, r8, sl, fp, ip, sp, pc}
 800e458:	0801d96a 	stmdaeq	r1, {r1, r3, r5, r6, r8, fp, ip, lr, pc}
 800e45c:	0801bd55 	stmdaeq	r1, {r0, r2, r4, r6, r8, sl, fp, ip, sp, pc}
 800e460:	0801bd7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, sl, fp, ip, sp, pc}
 800e464:	0801ab61 	stmdaeq	r1, {r0, r5, r6, r8, r9, fp, sp, pc}
 800e468:	0801d954 	stmdaeq	r1, {r2, r4, r6, r8, fp, ip, lr, pc}
 800e46c:	0801d77a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, r9, sl, ip, lr, pc}
 800e470:	0801d97c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, fp, ip, lr, pc}
 800e474:	0801bd37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, sl, fp, ip, sp, pc}
 800e478:	0801bd3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp, pc}
 800e47c:	0801bd4a 	stmdaeq	r1, {r1, r3, r6, r8, sl, fp, ip, sp, pc}
 800e480:	0801bd46 	stmdaeq	r1, {r1, r2, r6, r8, sl, fp, ip, sp, pc}
 800e484:	0801d8fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, fp, ip, lr, pc}
 800e488:	0801bdde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, sl, fp, ip, sp, pc}
 800e48c:	0801bd31 	stmdaeq	r1, {r0, r4, r5, r8, sl, fp, ip, sp, pc}
 800e490:	200006dc 	ldrdcs	r0, [r0], -ip
 800e494:	0801bd4e 	stmdaeq	r1, {r1, r2, r3, r6, r8, sl, fp, ip, sp, pc}
 800e498:	0801bd2c 	stmdaeq	r1, {r2, r3, r5, r8, sl, fp, ip, sp, pc}

0800e49c <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800e49c:	b513      	push	{r0, r1, r4, lr}
 800e49e:	6804      	ldr	r4, [r0, #0]
 800e4a0:	b914      	cbnz	r4, 800e4a8 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800e4a2:	601c      	str	r4, [r3, #0]
 800e4a4:	b002      	add	sp, #8
 800e4a6:	bd10      	pop	{r4, pc}
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	460a      	mov	r2, r1
 800e4ae:	2100      	movs	r1, #0
 800e4b0:	f7ff fe86 	bl	800e1c0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800e4b4:	e7f6      	b.n	800e4a4 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800e4b8 <ArtNetParams::Set(unsigned int)>:
 800e4b8:	1e4b      	subs	r3, r1, #1
 800e4ba:	2b40      	cmp	r3, #64	; 0x40
 800e4bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	460f      	mov	r7, r1
 800e4c4:	d807      	bhi.n	800e4d6 <ArtNetParams::Set(unsigned int)+0x1e>
 800e4c6:	4a45      	ldr	r2, [pc, #276]	; (800e5dc <ArtNetParams::Set(unsigned int)+0x124>)
 800e4c8:	f1c1 0342 	rsb	r3, r1, #66	; 0x42
 800e4cc:	6811      	ldr	r1, [r2, #0]
 800e4ce:	428b      	cmp	r3, r1
 800e4d0:	bf94      	ite	ls
 800e4d2:	6013      	strls	r3, [r2, #0]
 800e4d4:	6011      	strhi	r1, [r2, #0]
 800e4d6:	6863      	ldr	r3, [r4, #4]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d07b      	beq.n	800e5d4 <ArtNetParams::Set(unsigned int)+0x11c>
 800e4dc:	4a40      	ldr	r2, [pc, #256]	; (800e5e0 <ArtNetParams::Set(unsigned int)+0x128>)
 800e4de:	079b      	lsls	r3, r3, #30
 800e4e0:	6815      	ldr	r5, [r2, #0]
 800e4e2:	d504      	bpl.n	800e4ee <ArtNetParams::Set(unsigned int)+0x36>
 800e4e4:	f104 0110 	add.w	r1, r4, #16
 800e4e8:	4628      	mov	r0, r5
 800e4ea:	f7fd fe5b 	bl	800c1a4 <ArtNetNode::SetShortName(char const*)>
 800e4ee:	6863      	ldr	r3, [r4, #4]
 800e4f0:	07de      	lsls	r6, r3, #31
 800e4f2:	d504      	bpl.n	800e4fe <ArtNetParams::Set(unsigned int)+0x46>
 800e4f4:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f7fd fe74 	bl	800c1e6 <ArtNetNode::SetLongName(char const*)>
 800e4fe:	6863      	ldr	r3, [r4, #4]
 800e500:	0758      	lsls	r0, r3, #29
 800e502:	d504      	bpl.n	800e50e <ArtNetParams::Set(unsigned int)+0x56>
 800e504:	7a21      	ldrb	r1, [r4, #8]
 800e506:	2200      	movs	r2, #0
 800e508:	4628      	mov	r0, r5
 800e50a:	f7fe f9c5 	bl	800c898 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800e50e:	6863      	ldr	r3, [r4, #4]
 800e510:	0719      	lsls	r1, r3, #28
 800e512:	d504      	bpl.n	800e51e <ArtNetParams::Set(unsigned int)+0x66>
 800e514:	7a61      	ldrb	r1, [r4, #9]
 800e516:	2200      	movs	r2, #0
 800e518:	4628      	mov	r0, r5
 800e51a:	f7fe f98a 	bl	800c832 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800e51e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800e5dc <ArtNetParams::Set(unsigned int)+0x124>
 800e522:	f104 0870 	add.w	r8, r4, #112	; 0x70
 800e526:	2600      	movs	r6, #0
 800e528:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 800e52c:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 800e530:	e03b      	b.n	800e5aa <ArtNetParams::Set(unsigned int)+0xf2>
 800e532:	19f1      	adds	r1, r6, r7
 800e534:	2941      	cmp	r1, #65	; 0x41
 800e536:	d83c      	bhi.n	800e5b2 <ArtNetParams::Set(unsigned int)+0xfa>
 800e538:	6863      	ldr	r3, [r4, #4]
 800e53a:	fa0a f206 	lsl.w	r2, sl, r6
 800e53e:	439a      	bics	r2, r3
 800e540:	d106      	bne.n	800e550 <ArtNetParams::Set(unsigned int)+0x98>
 800e542:	f898 2005 	ldrb.w	r2, [r8, #5]
 800e546:	9101      	str	r1, [sp, #4]
 800e548:	4628      	mov	r0, r5
 800e54a:	f7fe f9d8 	bl	800c8fe <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800e54e:	9901      	ldr	r1, [sp, #4]
 800e550:	6863      	ldr	r3, [r4, #4]
 800e552:	fa0b f206 	lsl.w	r2, fp, r6
 800e556:	439a      	bics	r2, r3
 800e558:	d106      	bne.n	800e568 <ArtNetParams::Set(unsigned int)+0xb0>
 800e55a:	f898 2000 	ldrb.w	r2, [r8]
 800e55e:	9101      	str	r1, [sp, #4]
 800e560:	4628      	mov	r0, r5
 800e562:	f7fe f9f3 	bl	800c94c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800e566:	9901      	ldr	r1, [sp, #4]
 800e568:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800e56c:	2301      	movs	r3, #1
 800e56e:	40b3      	lsls	r3, r6
 800e570:	b29b      	uxth	r3, r3
 800e572:	4393      	bics	r3, r2
 800e574:	d10a      	bne.n	800e58c <ArtNetParams::Set(unsigned int)+0xd4>
 800e576:	f106 031c 	add.w	r3, r6, #28
 800e57a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e57e:	4628      	mov	r0, r5
 800e580:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800e584:	9101      	str	r1, [sp, #4]
 800e586:	f7fe fd25 	bl	800cfd4 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800e58a:	9901      	ldr	r1, [sp, #4]
 800e58c:	89a0      	ldrh	r0, [r4, #12]
 800e58e:	f106 0308 	add.w	r3, r6, #8
 800e592:	2201      	movs	r2, #1
 800e594:	fa02 f303 	lsl.w	r3, r2, r3
 800e598:	b29b      	uxth	r3, r3
 800e59a:	4383      	bics	r3, r0
 800e59c:	d102      	bne.n	800e5a4 <ArtNetParams::Set(unsigned int)+0xec>
 800e59e:	4628      	mov	r0, r5
 800e5a0:	f7ff f81b 	bl	800d5da <ArtNetNode::SetRmd(unsigned int, bool)>
 800e5a4:	3601      	adds	r6, #1
 800e5a6:	f108 0801 	add.w	r8, r8, #1
 800e5aa:	f8d9 3000 	ldr.w	r3, [r9]
 800e5ae:	42b3      	cmp	r3, r6
 800e5b0:	d8bf      	bhi.n	800e532 <ArtNetParams::Set(unsigned int)+0x7a>
 800e5b2:	7aa1      	ldrb	r1, [r4, #10]
 800e5b4:	3108      	adds	r1, #8
 800e5b6:	b2c9      	uxtb	r1, r1
 800e5b8:	4628      	mov	r0, r5
 800e5ba:	f7fe f9ee 	bl	800c99a <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800e5be:	6863      	ldr	r3, [r4, #4]
 800e5c0:	011a      	lsls	r2, r3, #4
 800e5c2:	bf44      	itt	mi
 800e5c4:	2201      	movmi	r2, #1
 800e5c6:	f885 20b4 	strbmi.w	r2, [r5, #180]	; 0xb4
 800e5ca:	04db      	lsls	r3, r3, #19
 800e5cc:	bf44      	itt	mi
 800e5ce:	2301      	movmi	r3, #1
 800e5d0:	f885 3a18 	strbmi.w	r3, [r5, #2584]	; 0xa18
 800e5d4:	b003      	add	sp, #12
 800e5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5da:	bf00      	nop
 800e5dc:	200006dc 	ldrdcs	r0, [r0], -ip
 800e5e0:	200006cc 	andcs	r0, r0, ip, asr #13

0800e5e4 <ArtNetParams::Dump()>:
 800e5e4:	4770      	bx	lr
	...

0800e5e8 <ArtNetNode::HandleTrigger()>:
 800e5e8:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
 800e5ec:	2aff      	cmp	r2, #255	; 0xff
 800e5ee:	4601      	mov	r1, r0
 800e5f0:	d103      	bne.n	800e5fa <ArtNetNode::HandleTrigger()+0x12>
 800e5f2:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 800e5f6:	2bff      	cmp	r3, #255	; 0xff
 800e5f8:	d008      	beq.n	800e60c <ArtNetNode::HandleTrigger()+0x24>
 800e5fa:	4b07      	ldr	r3, [pc, #28]	; (800e618 <ArtNetNode::HandleTrigger()+0x30>)
 800e5fc:	7818      	ldrb	r0, [r3, #0]
 800e5fe:	4290      	cmp	r0, r2
 800e600:	d109      	bne.n	800e616 <ArtNetNode::HandleTrigger()+0x2e>
 800e602:	f891 20c7 	ldrb.w	r2, [r1, #199]	; 0xc7
 800e606:	785b      	ldrb	r3, [r3, #1]
 800e608:	429a      	cmp	r2, r3
 800e60a:	d104      	bne.n	800e616 <ArtNetNode::HandleTrigger()+0x2e>
 800e60c:	6948      	ldr	r0, [r1, #20]
 800e60e:	6803      	ldr	r3, [r0, #0]
 800e610:	31c8      	adds	r1, #200	; 0xc8
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	4718      	bx	r3
 800e616:	4770      	bx	lr
 800e618:	0801be9c 	stmdaeq	r1, {r2, r3, r4, r7, r9, sl, fp, ip, sp, pc}

0800e61c <e131::universe_to_multicast_ip(unsigned short)>:
 800e61c:	b513      	push	{r0, r1, r4, lr}
 800e61e:	4604      	mov	r4, r0
 800e620:	a901      	add	r1, sp, #4
 800e622:	4806      	ldr	r0, [pc, #24]	; (800e63c <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800e624:	f009 fd88 	bl	8018138 <inet_aton>
 800e628:	9801      	ldr	r0, [sp, #4]
 800e62a:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800e62e:	0224      	lsls	r4, r4, #8
 800e630:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800e634:	4320      	orrs	r0, r4
 800e636:	b002      	add	sp, #8
 800e638:	bd10      	pop	{r4, pc}
 800e63a:	bf00      	nop
 800e63c:	0801bea2 	stmdaeq	r1, {r1, r5, r7, r9, sl, fp, ip, sp, pc}

0800e640 <memset.constprop.0.isra.0>:
 800e640:	4401      	add	r1, r0
 800e642:	2300      	movs	r3, #0
 800e644:	4288      	cmp	r0, r1
 800e646:	d100      	bne.n	800e64a <memset.constprop.0.isra.0+0xa>
 800e648:	4770      	bx	lr
 800e64a:	f800 3b01 	strb.w	r3, [r0], #1
 800e64e:	e7f9      	b.n	800e644 <memset.constprop.0.isra.0+0x4>

0800e650 <memcpy.isra.0>:
 800e650:	3801      	subs	r0, #1
 800e652:	440a      	add	r2, r1
 800e654:	4291      	cmp	r1, r2
 800e656:	d100      	bne.n	800e65a <memcpy.isra.0+0xa>
 800e658:	4770      	bx	lr
 800e65a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e65e:	f800 3f01 	strb.w	r3, [r0, #1]!
 800e662:	e7f7      	b.n	800e654 <memcpy.isra.0+0x4>

0800e664 <E131Bridge::E131Bridge()>:
 800e664:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e666:	2300      	movs	r3, #0
 800e668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e66c:	e9c0 2300 	strd	r2, r3, [r0]
 800e670:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e674:	2201      	movs	r2, #1
 800e676:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800e67a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800e67e:	6743      	str	r3, [r0, #116]	; 0x74
 800e680:	4b28      	ldr	r3, [pc, #160]	; (800e724 <E131Bridge::E131Bridge()+0xc0>)
 800e682:	7202      	strb	r2, [r0, #8]
 800e684:	f500 55cd 	add.w	r5, r0, #6560	; 0x19a0
 800e688:	f500 52b4 	add.w	r2, r0, #5760	; 0x1680
 800e68c:	b093      	sub	sp, #76	; 0x4c
 800e68e:	4604      	mov	r4, r0
 800e690:	6018      	str	r0, [r3, #0]
 800e692:	f200 5614 	addw	r6, r0, #1300	; 0x514
 800e696:	321c      	adds	r2, #28
 800e698:	3514      	adds	r5, #20
 800e69a:	2764      	movs	r7, #100	; 0x64
 800e69c:	4630      	mov	r0, r6
 800e69e:	2144      	movs	r1, #68	; 0x44
 800e6a0:	f7ff ffce 	bl	800e640 <memset.constprop.0.isra.0>
 800e6a4:	4610      	mov	r0, r2
 800e6a6:	210c      	movs	r1, #12
 800e6a8:	f7ff ffca 	bl	800e640 <memset.constprop.0.isra.0>
 800e6ac:	320c      	adds	r2, #12
 800e6ae:	f802 7c03 	strb.w	r7, [r2, #-3]
 800e6b2:	4295      	cmp	r5, r2
 800e6b4:	f106 0644 	add.w	r6, r6, #68	; 0x44
 800e6b8:	d1f0      	bne.n	800e69c <E131Bridge::E131Bridge()+0x38>
 800e6ba:	2120      	movs	r1, #32
 800e6bc:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800e6c0:	4d19      	ldr	r5, [pc, #100]	; (800e728 <E131Bridge::E131Bridge()+0xc4>)
 800e6c2:	4a1a      	ldr	r2, [pc, #104]	; (800e72c <E131Bridge::E131Bridge()+0xc8>)
 800e6c4:	f7ff ffbc 	bl	800e640 <memset.constprop.0.isra.0>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800e6ce:	682b      	ldr	r3, [r5, #0]
 800e6d0:	9200      	str	r2, [sp, #0]
 800e6d2:	3320      	adds	r3, #32
 800e6d4:	4a16      	ldr	r2, [pc, #88]	; (800e730 <E131Bridge::E131Bridge()+0xcc>)
 800e6d6:	2140      	movs	r1, #64	; 0x40
 800e6d8:	a802      	add	r0, sp, #8
 800e6da:	f7fb ff11 	bl	800a500 <snprintf>
 800e6de:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800e6e2:	a902      	add	r1, sp, #8
 800e6e4:	233f      	movs	r3, #63	; 0x3f
 800e6e6:	f811 0b01 	ldrb.w	r0, [r1], #1
 800e6ea:	b928      	cbnz	r0, 800e6f8 <E131Bridge::E131Bridge()+0x94>
 800e6ec:	4413      	add	r3, r2
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d006      	beq.n	800e700 <E131Bridge::E131Bridge()+0x9c>
 800e6f2:	f802 0b01 	strb.w	r0, [r2], #1
 800e6f6:	e7fa      	b.n	800e6ee <E131Bridge::E131Bridge()+0x8a>
 800e6f8:	3b01      	subs	r3, #1
 800e6fa:	f802 0b01 	strb.w	r0, [r2], #1
 800e6fe:	d1f2      	bne.n	800e6e6 <E131Bridge::E131Bridge()+0x82>
 800e700:	2300      	movs	r3, #0
 800e702:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800e706:	6828      	ldr	r0, [r5, #0]
 800e708:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800e70c:	f006 fa57 	bl	8014bbe <Network::Begin(unsigned short)>
 800e710:	4b08      	ldr	r3, [pc, #32]	; (800e734 <E131Bridge::E131Bridge()+0xd0>)
 800e712:	4621      	mov	r1, r4
 800e714:	f841 0b24 	str.w	r0, [r1], #36
 800e718:	6818      	ldr	r0, [r3, #0]
 800e71a:	f009 fca9 	bl	8018070 <Hardware::GetUuid(unsigned char*)>
 800e71e:	4620      	mov	r0, r4
 800e720:	b013      	add	sp, #76	; 0x4c
 800e722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e724:	200006e0 	andcs	r0, r0, r0, ror #13
 800e728:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 800e72c:	0801b146 	stmdaeq	r1, {r1, r2, r6, r8, ip, sp, pc}
 800e730:	0801beae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, sl, fp, ip, sp, pc}
 800e734:	2000fda0 	andcs	pc, r0, r0, lsr #27

0800e738 <E131Bridge::~E131Bridge()>:
 800e738:	4770      	bx	lr
	...

0800e73c <E131Bridge::Start()>:
 800e73c:	6943      	ldr	r3, [r0, #20]
 800e73e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e740:	4604      	mov	r4, r0
 800e742:	b363      	cbz	r3, 800e79e <E131Bridge::Start()+0x62>
 800e744:	6983      	ldr	r3, [r0, #24]
 800e746:	b9cb      	cbnz	r3, 800e77c <E131Bridge::Start()+0x40>
 800e748:	a901      	add	r1, sp, #4
 800e74a:	4819      	ldr	r0, [pc, #100]	; (800e7b0 <E131Bridge::Start()+0x74>)
 800e74c:	f009 fcf4 	bl	8018138 <inet_aton>
 800e750:	9b01      	ldr	r3, [sp, #4]
 800e752:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800e756:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800e75a:	6223      	str	r3, [r4, #32]
 800e75c:	f240 207e 	movw	r0, #638	; 0x27e
 800e760:	f009 fce6 	bl	8018130 <operator new(unsigned int)>
 800e764:	61a0      	str	r0, [r4, #24]
 800e766:	4620      	mov	r0, r4
 800e768:	f000 fd08 	bl	800f17c <E131Bridge::FillDataPacket()>
 800e76c:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800e770:	f009 fcde 	bl	8018130 <operator new(unsigned int)>
 800e774:	61e0      	str	r0, [r4, #28]
 800e776:	4620      	mov	r0, r4
 800e778:	f000 fc58 	bl	800f02c <E131Bridge::FillDiscoveryPacket()>
 800e77c:	f504 56b4 	add.w	r6, r4, #5760	; 0x1680
 800e780:	2500      	movs	r5, #0
 800e782:	361e      	adds	r6, #30
 800e784:	270c      	movs	r7, #12
 800e786:	fb07 f305 	mul.w	r3, r7, r5
 800e78a:	5cf3      	ldrb	r3, [r6, r3]
 800e78c:	b123      	cbz	r3, 800e798 <E131Bridge::Start()+0x5c>
 800e78e:	6960      	ldr	r0, [r4, #20]
 800e790:	6803      	ldr	r3, [r0, #0]
 800e792:	4629      	mov	r1, r5
 800e794:	689b      	ldr	r3, [r3, #8]
 800e796:	4798      	blx	r3
 800e798:	3501      	adds	r5, #1
 800e79a:	2d42      	cmp	r5, #66	; 0x42
 800e79c:	d1f3      	bne.n	800e786 <E131Bridge::Start()+0x4a>
 800e79e:	4b05      	ldr	r3, [pc, #20]	; (800e7b4 <E131Bridge::Start()+0x78>)
 800e7a0:	6818      	ldr	r0, [r3, #0]
 800e7a2:	2102      	movs	r1, #2
 800e7a4:	b003      	add	sp, #12
 800e7a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e7aa:	f009 bbbf 	b.w	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 800e7ae:	bf00      	nop
 800e7b0:	0801bea2 	stmdaeq	r1, {r1, r5, r7, r9, sl, fp, ip, sp, pc}
 800e7b4:	2000fd9c 	mulcs	r0, ip, sp

0800e7b8 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800e7b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	f200 5414 	addw	r4, r0, #1300	; 0x514
 800e7c0:	2544      	movs	r5, #68	; 0x44
 800e7c2:	4299      	cmp	r1, r3
 800e7c4:	d004      	beq.n	800e7d0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x18>
 800e7c6:	fb05 f603 	mul.w	r6, r5, r3
 800e7ca:	5ba6      	ldrh	r6, [r4, r6]
 800e7cc:	4296      	cmp	r6, r2
 800e7ce:	d011      	beq.n	800e7f4 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	2b42      	cmp	r3, #66	; 0x42
 800e7d4:	d1f5      	bne.n	800e7c2 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xa>
 800e7d6:	4b08      	ldr	r3, [pc, #32]	; (800e7f8 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x40>)
 800e7d8:	6801      	ldr	r1, [r0, #0]
 800e7da:	681c      	ldr	r4, [r3, #0]
 800e7dc:	9101      	str	r1, [sp, #4]
 800e7de:	4610      	mov	r0, r2
 800e7e0:	f7ff ff1c 	bl	800e61c <e131::universe_to_multicast_ip(unsigned short)>
 800e7e4:	9901      	ldr	r1, [sp, #4]
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	b002      	add	sp, #8
 800e7ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7f0:	f006 b9f9 	b.w	8014be6 <Network::LeaveGroup(int, unsigned int)>
 800e7f4:	b002      	add	sp, #8
 800e7f6:	bd70      	pop	{r4, r5, r6, pc}
 800e7f8:	2000f9ac 	andcs	pc, r0, ip, lsr #19

0800e7fc <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800e7fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7fe:	4604      	mov	r4, r0
 800e800:	461d      	mov	r5, r3
 800e802:	b1d1      	cbz	r1, 800e83a <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3e>
 800e804:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800e808:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800e80c:	b12a      	cbz	r2, 800e81a <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800e80e:	42aa      	cmp	r2, r5
 800e810:	d019      	beq.n	800e846 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4a>
 800e812:	2142      	movs	r1, #66	; 0x42
 800e814:	4620      	mov	r0, r4
 800e816:	f7ff ffcf 	bl	800e7b8 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800e81a:	4b0c      	ldr	r3, [pc, #48]	; (800e84c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x50>)
 800e81c:	6821      	ldr	r1, [r4, #0]
 800e81e:	8035      	strh	r5, [r6, #0]
 800e820:	4628      	mov	r0, r5
 800e822:	681c      	ldr	r4, [r3, #0]
 800e824:	9101      	str	r1, [sp, #4]
 800e826:	f7ff fef9 	bl	800e61c <e131::universe_to_multicast_ip(unsigned short)>
 800e82a:	9901      	ldr	r1, [sp, #4]
 800e82c:	4602      	mov	r2, r0
 800e82e:	4620      	mov	r0, r4
 800e830:	b002      	add	sp, #8
 800e832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e836:	f006 b9d3 	b.w	8014be0 <Network::JoinGroup(int, unsigned int)>
 800e83a:	b122      	cbz	r2, 800e846 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4a>
 800e83c:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800e840:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800e844:	e7e2      	b.n	800e80c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800e846:	b002      	add	sp, #8
 800e848:	bd70      	pop	{r4, r5, r6, pc}
 800e84a:	bf00      	nop
 800e84c:	2000f9ac 	andcs	pc, r0, ip, lsr #19

0800e850 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800e850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e852:	4604      	mov	r4, r0
 800e854:	460d      	mov	r5, r1
 800e856:	461e      	mov	r6, r3
 800e858:	bb1a      	cbnz	r2, 800e8a2 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x52>
 800e85a:	2941      	cmp	r1, #65	; 0x41
 800e85c:	d846      	bhi.n	800e8ec <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x9c>
 800e85e:	230c      	movs	r3, #12
 800e860:	fb03 0301 	mla	r3, r3, r1, r0
 800e864:	f241 619e 	movw	r1, #5790	; 0x169e
 800e868:	5c5a      	ldrb	r2, [r3, r1]
 800e86a:	b132      	cbz	r2, 800e87a <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2a>
 800e86c:	f241 629c 	movw	r2, #5788	; 0x169c
 800e870:	5a9b      	ldrh	r3, [r3, r2]
 800e872:	42b3      	cmp	r3, r6
 800e874:	d108      	bne.n	800e888 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800e876:	b003      	add	sp, #12
 800e878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e87a:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800e87e:	3201      	adds	r2, #1
 800e880:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800e884:	2201      	movs	r2, #1
 800e886:	545a      	strb	r2, [r3, r1]
 800e888:	230c      	movs	r3, #12
 800e88a:	fb03 4405 	mla	r4, r3, r5, r4
 800e88e:	f241 639c 	movw	r3, #5788	; 0x169c
 800e892:	4630      	mov	r0, r6
 800e894:	52e6      	strh	r6, [r4, r3]
 800e896:	f7ff fec1 	bl	800e61c <e131::universe_to_multicast_ip(unsigned short)>
 800e89a:	f504 54b5 	add.w	r4, r4, #5792	; 0x16a0
 800e89e:	6020      	str	r0, [r4, #0]
 800e8a0:	e7e9      	b.n	800e876 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e8a2:	2a02      	cmp	r2, #2
 800e8a4:	d122      	bne.n	800e8ec <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x9c>
 800e8a6:	2941      	cmp	r1, #65	; 0x41
 800e8a8:	d8e5      	bhi.n	800e876 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e8aa:	2344      	movs	r3, #68	; 0x44
 800e8ac:	fb03 0301 	mla	r3, r3, r1, r0
 800e8b0:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800e8b4:	b152      	cbz	r2, 800e8cc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x7c>
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800e8bc:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800e8c0:	3b01      	subs	r3, #1
 800e8c2:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800e8c6:	4632      	mov	r2, r6
 800e8c8:	f7ff ff76 	bl	800e7b8 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800e8cc:	230c      	movs	r3, #12
 800e8ce:	fb03 4505 	mla	r5, r3, r5, r4
 800e8d2:	f241 639e 	movw	r3, #5790	; 0x169e
 800e8d6:	5cea      	ldrb	r2, [r5, r3]
 800e8d8:	2a00      	cmp	r2, #0
 800e8da:	d0cc      	beq.n	800e876 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e8dc:	2200      	movs	r2, #0
 800e8de:	54ea      	strb	r2, [r5, r3]
 800e8e0:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800e8e4:	3b01      	subs	r3, #1
 800e8e6:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800e8ea:	e7c4      	b.n	800e876 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e8ec:	2344      	movs	r3, #68	; 0x44
 800e8ee:	fb03 4305 	mla	r3, r3, r5, r4
 800e8f2:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800e8f6:	b1d2      	cbz	r2, 800e92e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xde>
 800e8f8:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 800e8fc:	42b3      	cmp	r3, r6
 800e8fe:	d0ba      	beq.n	800e876 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e900:	4632      	mov	r2, r6
 800e902:	4629      	mov	r1, r5
 800e904:	4620      	mov	r0, r4
 800e906:	f7ff ff57 	bl	800e7b8 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800e90a:	4b0d      	ldr	r3, [pc, #52]	; (800e940 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xf0>)
 800e90c:	6821      	ldr	r1, [r4, #0]
 800e90e:	681f      	ldr	r7, [r3, #0]
 800e910:	9101      	str	r1, [sp, #4]
 800e912:	4630      	mov	r0, r6
 800e914:	f7ff fe82 	bl	800e61c <e131::universe_to_multicast_ip(unsigned short)>
 800e918:	9901      	ldr	r1, [sp, #4]
 800e91a:	4602      	mov	r2, r0
 800e91c:	4638      	mov	r0, r7
 800e91e:	f006 f95f 	bl	8014be0 <Network::JoinGroup(int, unsigned int)>
 800e922:	2344      	movs	r3, #68	; 0x44
 800e924:	fb03 4305 	mla	r3, r3, r5, r4
 800e928:	f8a3 6514 	strh.w	r6, [r3, #1300]	; 0x514
 800e92c:	e7a3      	b.n	800e876 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e92e:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800e932:	3201      	adds	r2, #1
 800e934:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800e938:	2201      	movs	r2, #1
 800e93a:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800e93e:	e7e4      	b.n	800e90a <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xba>
 800e940:	2000f9ac 	andcs	pc, r0, ip, lsr #19

0800e944 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800e944:	b963      	cbnz	r3, 800e960 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x1c>
 800e946:	2941      	cmp	r1, #65	; 0x41
 800e948:	d813      	bhi.n	800e972 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2e>
 800e94a:	230c      	movs	r3, #12
 800e94c:	fb03 0101 	mla	r1, r3, r1, r0
 800e950:	f241 639c 	movw	r3, #5788	; 0x169c
 800e954:	5acb      	ldrh	r3, [r1, r3]
 800e956:	8013      	strh	r3, [r2, #0]
 800e958:	f241 639e 	movw	r3, #5790	; 0x169e
 800e95c:	5cc8      	ldrb	r0, [r1, r3]
 800e95e:	4770      	bx	lr
 800e960:	2344      	movs	r3, #68	; 0x44
 800e962:	fb03 0101 	mla	r1, r3, r1, r0
 800e966:	f8b1 3514 	ldrh.w	r3, [r1, #1300]	; 0x514
 800e96a:	f891 0516 	ldrb.w	r0, [r1, #1302]	; 0x516
 800e96e:	8013      	strh	r3, [r2, #0]
 800e970:	4770      	bx	lr
 800e972:	4618      	mov	r0, r3
 800e974:	4770      	bx	lr

0800e976 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800e976:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800e97a:	b923      	cbnz	r3, 800e986 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800e97c:	2301      	movs	r3, #1
 800e97e:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800e982:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800e986:	2344      	movs	r3, #68	; 0x44
 800e988:	fb03 0101 	mla	r1, r3, r1, r0
 800e98c:	2301      	movs	r3, #1
 800e98e:	f881 3555 	strb.w	r3, [r1, #1365]	; 0x555
 800e992:	4770      	bx	lr

0800e994 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800e994:	4602      	mov	r2, r0
 800e996:	2044      	movs	r0, #68	; 0x44
 800e998:	4348      	muls	r0, r1
 800e99a:	b570      	push	{r4, r5, r6, lr}
 800e99c:	1815      	adds	r5, r2, r0
 800e99e:	68d3      	ldr	r3, [r2, #12]
 800e9a0:	460c      	mov	r4, r1
 800e9a2:	f8d5 1518 	ldr.w	r1, [r5, #1304]	; 0x518
 800e9a6:	1a5b      	subs	r3, r3, r1
 800e9a8:	f242 7110 	movw	r1, #10000	; 0x2710
 800e9ac:	428b      	cmp	r3, r1
 800e9ae:	d90a      	bls.n	800e9c6 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800e9b0:	2600      	movs	r6, #0
 800e9b2:	f500 60a4 	add.w	r0, r0, #1312	; 0x520
 800e9b6:	f8c5 651c 	str.w	r6, [r5, #1308]	; 0x51c
 800e9ba:	2110      	movs	r1, #16
 800e9bc:	4410      	add	r0, r2
 800e9be:	f7ff fe3f 	bl	800e640 <memset.constprop.0.isra.0>
 800e9c2:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800e9c6:	2344      	movs	r3, #68	; 0x44
 800e9c8:	435c      	muls	r4, r3
 800e9ca:	1915      	adds	r5, r2, r4
 800e9cc:	68d3      	ldr	r3, [r2, #12]
 800e9ce:	f8d5 1534 	ldr.w	r1, [r5, #1332]	; 0x534
 800e9d2:	1a5b      	subs	r3, r3, r1
 800e9d4:	f242 7110 	movw	r1, #10000	; 0x2710
 800e9d8:	428b      	cmp	r3, r1
 800e9da:	d90a      	bls.n	800e9f2 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800e9dc:	2600      	movs	r6, #0
 800e9de:	f204 543c 	addw	r4, r4, #1340	; 0x53c
 800e9e2:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
 800e9e6:	2110      	movs	r1, #16
 800e9e8:	1910      	adds	r0, r2, r4
 800e9ea:	f7ff fe29 	bl	800e640 <memset.constprop.0.isra.0>
 800e9ee:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800e9f2:	f502 508c 	add.w	r0, r2, #4480	; 0x1180
 800e9f6:	4611      	mov	r1, r2
 800e9f8:	3008      	adds	r0, #8
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	f891 4555 	ldrb.w	r4, [r1, #1365]	; 0x555
 800ea00:	3144      	adds	r1, #68	; 0x44
 800ea02:	4281      	cmp	r1, r0
 800ea04:	ea43 0304 	orr.w	r3, r3, r4
 800ea08:	d1f8      	bne.n	800e9fc <E131Bridge::CheckMergeTimeouts(unsigned int)+0x68>
 800ea0a:	b923      	cbnz	r3, 800ea16 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x82>
 800ea0c:	2101      	movs	r1, #1
 800ea0e:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800ea12:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800ea16:	bd70      	pop	{r4, r5, r6, pc}

0800ea18 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800ea18:	2244      	movs	r2, #68	; 0x44
 800ea1a:	fb02 0101 	mla	r1, r2, r1, r0
 800ea1e:	68c3      	ldr	r3, [r0, #12]
 800ea20:	f8d1 2534 	ldr.w	r2, [r1, #1332]	; 0x534
 800ea24:	f8d1 0538 	ldr.w	r0, [r1, #1336]	; 0x538
 800ea28:	b510      	push	{r4, lr}
 800ea2a:	f8d1 451c 	ldr.w	r4, [r1, #1308]	; 0x51c
 800ea2e:	1a9a      	subs	r2, r3, r2
 800ea30:	b184      	cbz	r4, 800ea54 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800ea32:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800ea36:	1a5b      	subs	r3, r3, r1
 800ea38:	b128      	cbz	r0, 800ea46 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800ea3a:	f242 700f 	movw	r0, #9999	; 0x270f
 800ea3e:	4283      	cmp	r3, r0
 800ea40:	d90d      	bls.n	800ea5e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800ea42:	4282      	cmp	r2, r0
 800ea44:	e002      	b.n	800ea4c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800ea46:	f242 7010 	movw	r0, #10000	; 0x2710
 800ea4a:	4283      	cmp	r3, r0
 800ea4c:	bf94      	ite	ls
 800ea4e:	2000      	movls	r0, #0
 800ea50:	2001      	movhi	r0, #1
 800ea52:	bd10      	pop	{r4, pc}
 800ea54:	2800      	cmp	r0, #0
 800ea56:	d0fc      	beq.n	800ea52 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800ea58:	f242 7010 	movw	r0, #10000	; 0x2710
 800ea5c:	e7f1      	b.n	800ea42 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800ea5e:	2000      	movs	r0, #0
 800ea60:	e7f7      	b.n	800ea52 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800ea62 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800ea62:	684a      	ldr	r2, [r1, #4]
 800ea64:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800ea66:	429a      	cmp	r2, r3
 800ea68:	b510      	push	{r4, lr}
 800ea6a:	d10d      	bne.n	800ea88 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800ea6c:	f100 0391 	add.w	r3, r0, #145	; 0x91
 800ea70:	3107      	adds	r1, #7
 800ea72:	30a1      	adds	r0, #161	; 0xa1
 800ea74:	4283      	cmp	r3, r0
 800ea76:	d101      	bne.n	800ea7c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 800ea78:	2001      	movs	r0, #1
 800ea7a:	bd10      	pop	{r4, pc}
 800ea7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea80:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800ea84:	4294      	cmp	r4, r2
 800ea86:	d0f5      	beq.n	800ea74 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800ea88:	2000      	movs	r0, #0
 800ea8a:	e7f6      	b.n	800ea7a <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>

0800ea8c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea92:	4604      	mov	r4, r0
 800ea94:	4690      	mov	r8, r2
 800ea96:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800ea9a:	460f      	mov	r7, r1
 800ea9c:	2900      	cmp	r1, #0
 800ea9e:	d044      	beq.n	800eb2a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9e>
 800eaa0:	2a00      	cmp	r2, #0
 800eaa2:	d042      	beq.n	800eb2a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9e>
 800eaa4:	2600      	movs	r6, #0
 800eaa6:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800eaaa:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800eaae:	f500 65a4 	add.w	r5, r0, #1312	; 0x520
 800eab2:	4632      	mov	r2, r6
 800eab4:	4637      	mov	r7, r6
 800eab6:	f240 6904 	movw	r9, #1540	; 0x604
 800eaba:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
 800eabe:	f1b8 0f00 	cmp.w	r8, #0
 800eac2:	d018      	beq.n	800eaf6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800eac4:	2110      	movs	r1, #16
 800eac6:	4628      	mov	r0, r5
 800eac8:	f845 7c04 	str.w	r7, [r5, #-4]
 800eacc:	f7ff fdb8 	bl	800e640 <memset.constprop.0.isra.0>
 800ead0:	2110      	movs	r1, #16
 800ead2:	f105 001c 	add.w	r0, r5, #28
 800ead6:	61af      	str	r7, [r5, #24]
 800ead8:	f7ff fdb2 	bl	800e640 <memset.constprop.0.isra.0>
 800eadc:	f7fe f8de 	bl	800cc9c <lightset::Data::Get()>
 800eae0:	fb09 0006 	mla	r0, r9, r6, r0
 800eae4:	4642      	mov	r2, r8
 800eae6:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800eaea:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
 800eaee:	f885 7036 	strb.w	r7, [r5, #54]	; 0x36
 800eaf2:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
 800eaf6:	3601      	adds	r6, #1
 800eaf8:	2e42      	cmp	r6, #66	; 0x42
 800eafa:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800eafe:	d1dc      	bne.n	800eaba <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2e>
 800eb00:	b12a      	cbz	r2, 800eb0e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800eb02:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
 800eb06:	2901      	cmp	r1, #1
 800eb08:	d04a      	beq.n	800eba0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x114>
 800eb0a:	2902      	cmp	r1, #2
 800eb0c:	d04d      	beq.n	800ebaa <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x11e>
 800eb0e:	4b29      	ldr	r3, [pc, #164]	; (800ebb4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x128>)
 800eb10:	2102      	movs	r1, #2
 800eb12:	6818      	ldr	r0, [r3, #0]
 800eb14:	f009 fa0a 	bl	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 800eb18:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800eb1c:	f023 0302 	bic.w	r3, r3, #2
 800eb20:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800eb24:	b003      	add	sp, #12
 800eb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb2a:	2600      	movs	r6, #0
 800eb2c:	f204 553c 	addw	r5, r4, #1340	; 0x53c
 800eb30:	4632      	mov	r2, r6
 800eb32:	f240 6b04 	movw	fp, #1540	; 0x604
 800eb36:	46b1      	mov	r9, r6
 800eb38:	f895 a01a 	ldrb.w	sl, [r5, #26]
 800eb3c:	f1ba 0f00 	cmp.w	sl, #0
 800eb40:	d028      	beq.n	800eb94 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 800eb42:	b15f      	cbz	r7, 800eb5c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800eb44:	f855 3c20 	ldr.w	r3, [r5, #-32]
 800eb48:	b143      	cbz	r3, 800eb5c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800eb4a:	f845 9c20 	str.w	r9, [r5, #-32]
 800eb4e:	2110      	movs	r1, #16
 800eb50:	f1a5 001c 	sub.w	r0, r5, #28
 800eb54:	f7ff fd74 	bl	800e640 <memset.constprop.0.isra.0>
 800eb58:	f885 9019 	strb.w	r9, [r5, #25]
 800eb5c:	f1b8 0f00 	cmp.w	r8, #0
 800eb60:	d00a      	beq.n	800eb78 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800eb62:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800eb66:	b13b      	cbz	r3, 800eb78 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800eb68:	f845 9c04 	str.w	r9, [r5, #-4]
 800eb6c:	2110      	movs	r1, #16
 800eb6e:	4628      	mov	r0, r5
 800eb70:	f7ff fd66 	bl	800e640 <memset.constprop.0.isra.0>
 800eb74:	f885 9019 	strb.w	r9, [r5, #25]
 800eb78:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800eb7c:	b953      	cbnz	r3, 800eb94 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 800eb7e:	9301      	str	r3, [sp, #4]
 800eb80:	f7fe f88c 	bl	800cc9c <lightset::Data::Get()>
 800eb84:	fb0b 0006 	mla	r0, fp, r6, r0
 800eb88:	9b01      	ldr	r3, [sp, #4]
 800eb8a:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
 800eb8e:	4652      	mov	r2, sl
 800eb90:	762b      	strb	r3, [r5, #24]
 800eb92:	76ab      	strb	r3, [r5, #26]
 800eb94:	3601      	adds	r6, #1
 800eb96:	2e42      	cmp	r6, #66	; 0x42
 800eb98:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800eb9c:	d1cc      	bne.n	800eb38 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xac>
 800eb9e:	e7af      	b.n	800eb00 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x74>
 800eba0:	6860      	ldr	r0, [r4, #4]
 800eba2:	6803      	ldr	r3, [r0, #0]
 800eba4:	695b      	ldr	r3, [r3, #20]
 800eba6:	4798      	blx	r3
 800eba8:	e7b1      	b.n	800eb0e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800ebaa:	6860      	ldr	r0, [r4, #4]
 800ebac:	6803      	ldr	r3, [r0, #0]
 800ebae:	699b      	ldr	r3, [r3, #24]
 800ebb0:	4798      	blx	r3
 800ebb2:	e7ac      	b.n	800eb0e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800ebb4:	2000fd9c 	mulcs	r0, ip, sp

0800ebb8 <E131Bridge::HandleDmx()>:
 800ebb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebbc:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800ebc0:	b085      	sub	sp, #20
 800ebc2:	ba7f      	rev16	r7, r7
 800ebc4:	b2bf      	uxth	r7, r7
 800ebc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebca:	4604      	mov	r4, r0
 800ebcc:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800ebd0:	3f01      	subs	r7, #1
 800ebd2:	f500 65a4 	add.w	r5, r0, #1312	; 0x520
 800ebd6:	9301      	str	r3, [sp, #4]
 800ebd8:	2600      	movs	r6, #0
 800ebda:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800ebde:	b353      	cbz	r3, 800ec36 <E131Bridge::HandleDmx()+0x7e>
 800ebe0:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800ebe4:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800ebe8:	ba5b      	rev16	r3, r3
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d122      	bne.n	800ec36 <E131Bridge::HandleDmx()+0x7e>
 800ebf0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800ebf4:	9302      	str	r3, [sp, #8]
 800ebf6:	f1a5 0108 	sub.w	r1, r5, #8
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	f7ff ff31 	bl	800ea62 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800ec00:	f105 0114 	add.w	r1, r5, #20
 800ec04:	4682      	mov	sl, r0
 800ec06:	4620      	mov	r0, r4
 800ec08:	f7ff ff2b 	bl	800ea62 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800ec0c:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800ec10:	4680      	mov	r8, r0
 800ec12:	f1ba 0f00 	cmp.w	sl, #0
 800ec16:	d01a      	beq.n	800ec4e <E131Bridge::HandleDmx()+0x96>
 800ec18:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ec1c:	7c2a      	ldrb	r2, [r5, #16]
 800ec1e:	742b      	strb	r3, [r5, #16]
 800ec20:	3313      	adds	r3, #19
 800ec22:	1a9b      	subs	r3, r3, r2
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	2b13      	cmp	r3, #19
 800ec28:	d905      	bls.n	800ec36 <E131Bridge::HandleDmx()+0x7e>
 800ec2a:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800ec2e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800ec32:	2a00      	cmp	r2, #0
 800ec34:	da14      	bge.n	800ec60 <E131Bridge::HandleDmx()+0xa8>
 800ec36:	9b01      	ldr	r3, [sp, #4]
 800ec38:	3601      	adds	r6, #1
 800ec3a:	f203 6304 	addw	r3, r3, #1540	; 0x604
 800ec3e:	2e42      	cmp	r6, #66	; 0x42
 800ec40:	9301      	str	r3, [sp, #4]
 800ec42:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800ec46:	d1c8      	bne.n	800ebda <E131Bridge::HandleDmx()+0x22>
 800ec48:	b005      	add	sp, #20
 800ec4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d0eb      	beq.n	800ec2a <E131Bridge::HandleDmx()+0x72>
 800ec52:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ec56:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800ec5a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ec5e:	e7df      	b.n	800ec20 <E131Bridge::HandleDmx()+0x68>
 800ec60:	065a      	lsls	r2, r3, #25
 800ec62:	d50b      	bpl.n	800ec7c <E131Bridge::HandleDmx()+0xc4>
 800ec64:	f1ba 0f00 	cmp.w	sl, #0
 800ec68:	d102      	bne.n	800ec70 <E131Bridge::HandleDmx()+0xb8>
 800ec6a:	f1b8 0f00 	cmp.w	r8, #0
 800ec6e:	d0e2      	beq.n	800ec36 <E131Bridge::HandleDmx()+0x7e>
 800ec70:	4642      	mov	r2, r8
 800ec72:	4651      	mov	r1, sl
 800ec74:	4620      	mov	r0, r4
 800ec76:	f7ff ff09 	bl	800ea8c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800ec7a:	e7dc      	b.n	800ec36 <E131Bridge::HandleDmx()+0x7e>
 800ec7c:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800ec80:	b133      	cbz	r3, 800ec90 <E131Bridge::HandleDmx()+0xd8>
 800ec82:	f894 34f9 	ldrb.w	r3, [r4, #1273]	; 0x4f9
 800ec86:	b91b      	cbnz	r3, 800ec90 <E131Bridge::HandleDmx()+0xd8>
 800ec88:	4631      	mov	r1, r6
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	f7ff fe82 	bl	800e994 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800ec90:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800ec94:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d259      	bcs.n	800ed50 <E131Bridge::HandleDmx()+0x198>
 800ec9c:	4631      	mov	r1, r6
 800ec9e:	4620      	mov	r0, r4
 800eca0:	9303      	str	r3, [sp, #12]
 800eca2:	f7ff feb9 	bl	800ea18 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800eca6:	2800      	cmp	r0, #0
 800eca8:	d0c5      	beq.n	800ec36 <E131Bridge::HandleDmx()+0x7e>
 800ecaa:	9b03      	ldr	r3, [sp, #12]
 800ecac:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800ecb0:	9b02      	ldr	r3, [sp, #8]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d154      	bne.n	800ed60 <E131Bridge::HandleDmx()+0x1a8>
 800ecb6:	f1bb 0f00 	cmp.w	fp, #0
 800ecba:	d15c      	bne.n	800ed76 <E131Bridge::HandleDmx()+0x1be>
 800ecbc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ecbe:	f845 3c04 	str.w	r3, [r5, #-4]
 800ecc2:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ecc6:	742b      	strb	r3, [r5, #16]
 800ecc8:	2210      	movs	r2, #16
 800ecca:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800ecce:	4628      	mov	r0, r5
 800ecd0:	f7ff fcbe 	bl	800e650 <memcpy.isra.0>
 800ecd4:	68e3      	ldr	r3, [r4, #12]
 800ecd6:	f845 3c08 	str.w	r3, [r5, #-8]
 800ecda:	463a      	mov	r2, r7
 800ecdc:	4649      	mov	r1, r9
 800ecde:	4630      	mov	r0, r6
 800ece0:	f7fd ffe8 	bl	800ccb4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800ece4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800ece8:	069b      	lsls	r3, r3, #26
 800ecea:	f100 80aa 	bmi.w	800ee42 <E131Bridge::HandleDmx()+0x28a>
 800ecee:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	2a00      	cmp	r2, #0
 800ecf6:	f000 80a8 	beq.w	800ee4a <E131Bridge::HandleDmx()+0x292>
 800ecfa:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800ecfe:	2a00      	cmp	r2, #0
 800ed00:	f040 80a3 	bne.w	800ee4a <E131Bridge::HandleDmx()+0x292>
 800ed04:	ba5b      	rev16	r3, r3
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	f1ba 0f00 	cmp.w	sl, #0
 800ed0c:	f040 8096 	bne.w	800ee3c <E131Bridge::HandleDmx()+0x284>
 800ed10:	f1b8 0f00 	cmp.w	r8, #0
 800ed14:	f040 8092 	bne.w	800ee3c <E131Bridge::HandleDmx()+0x284>
 800ed18:	69aa      	ldr	r2, [r5, #24]
 800ed1a:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800ed1e:	3a00      	subs	r2, #0
 800ed20:	bf18      	it	ne
 800ed22:	2201      	movne	r2, #1
 800ed24:	3900      	subs	r1, #0
 800ed26:	bf18      	it	ne
 800ed28:	2101      	movne	r1, #1
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f7ff fd66 	bl	800e7fc <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800ed30:	f240 1301 	movw	r3, #257	; 0x101
 800ed34:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800ed38:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f040 8089 	bne.w	800ee54 <E131Bridge::HandleDmx()+0x29c>
 800ed42:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ed46:	f043 0302 	orr.w	r3, r3, #2
 800ed4a:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800ed4e:	e772      	b.n	800ec36 <E131Bridge::HandleDmx()+0x7e>
 800ed50:	d9ae      	bls.n	800ecb0 <E131Bridge::HandleDmx()+0xf8>
 800ed52:	2200      	movs	r2, #0
 800ed54:	f845 2c04 	str.w	r2, [r5, #-4]
 800ed58:	61aa      	str	r2, [r5, #24]
 800ed5a:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800ed5e:	e7a5      	b.n	800ecac <E131Bridge::HandleDmx()+0xf4>
 800ed60:	f1ba 0f00 	cmp.w	sl, #0
 800ed64:	f000 809a 	beq.w	800ee9c <E131Bridge::HandleDmx()+0x2e4>
 800ed68:	f1bb 0f00 	cmp.w	fp, #0
 800ed6c:	d159      	bne.n	800ee22 <E131Bridge::HandleDmx()+0x26a>
 800ed6e:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ed72:	742b      	strb	r3, [r5, #16]
 800ed74:	e7ae      	b.n	800ecd4 <E131Bridge::HandleDmx()+0x11c>
 800ed76:	f1b8 0f00 	cmp.w	r8, #0
 800ed7a:	d038      	beq.n	800edee <E131Bridge::HandleDmx()+0x236>
 800ed7c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ed80:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ed84:	68e3      	ldr	r3, [r4, #12]
 800ed86:	616b      	str	r3, [r5, #20]
 800ed88:	f7fd ff88 	bl	800cc9c <lightset::Data::Get()>
 800ed8c:	9b01      	ldr	r3, [sp, #4]
 800ed8e:	4683      	mov	fp, r0
 800ed90:	f5a3 7000 	sub.w	r0, r3, #512	; 0x200
 800ed94:	463a      	mov	r2, r7
 800ed96:	4649      	mov	r1, r9
 800ed98:	4458      	add	r0, fp
 800ed9a:	f7ff fc59 	bl	800e650 <memcpy.isra.0>
 800ed9e:	f240 6304 	movw	r3, #1540	; 0x604
 800eda2:	fb03 b306 	mla	r3, r3, r6, fp
 800eda6:	463a      	mov	r2, r7
 800eda8:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800edac:	9b01      	ldr	r3, [sp, #4]
 800edae:	4649      	mov	r1, r9
 800edb0:	eb0b 0003 	add.w	r0, fp, r3
 800edb4:	f7ff fc4c 	bl	800e650 <memcpy.isra.0>
 800edb8:	e794      	b.n	800ece4 <E131Bridge::HandleDmx()+0x12c>
 800edba:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800edbc:	61ab      	str	r3, [r5, #24]
 800edbe:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800edc2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800edc6:	2210      	movs	r2, #16
 800edc8:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800edcc:	f105 001c 	add.w	r0, r5, #28
 800edd0:	f7ff fc3e 	bl	800e650 <memcpy.isra.0>
 800edd4:	68e3      	ldr	r3, [r4, #12]
 800edd6:	616b      	str	r3, [r5, #20]
 800edd8:	4631      	mov	r1, r6
 800edda:	4620      	mov	r0, r4
 800eddc:	f7ff fdcb 	bl	800e976 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800ede0:	463a      	mov	r2, r7
 800ede2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ede4:	4649      	mov	r1, r9
 800ede6:	4630      	mov	r0, r6
 800ede8:	f7fd ffab 	bl	800cd42 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800edec:	e77a      	b.n	800ece4 <E131Bridge::HandleDmx()+0x12c>
 800edee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800edf0:	f845 3c04 	str.w	r3, [r5, #-4]
 800edf4:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800edf8:	742b      	strb	r3, [r5, #16]
 800edfa:	2210      	movs	r2, #16
 800edfc:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800ee00:	4628      	mov	r0, r5
 800ee02:	f7ff fc25 	bl	800e650 <memcpy.isra.0>
 800ee06:	68e3      	ldr	r3, [r4, #12]
 800ee08:	f845 3c08 	str.w	r3, [r5, #-8]
 800ee0c:	4631      	mov	r1, r6
 800ee0e:	4620      	mov	r0, r4
 800ee10:	f7ff fdb1 	bl	800e976 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800ee14:	463a      	mov	r2, r7
 800ee16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ee18:	4649      	mov	r1, r9
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	f7fd ff68 	bl	800ccf0 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800ee20:	e760      	b.n	800ece4 <E131Bridge::HandleDmx()+0x12c>
 800ee22:	f1b8 0f00 	cmp.w	r8, #0
 800ee26:	d103      	bne.n	800ee30 <E131Bridge::HandleDmx()+0x278>
 800ee28:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ee2c:	742b      	strb	r3, [r5, #16]
 800ee2e:	e7ea      	b.n	800ee06 <E131Bridge::HandleDmx()+0x24e>
 800ee30:	4820      	ldr	r0, [pc, #128]	; (800eeb4 <E131Bridge::HandleDmx()+0x2fc>)
 800ee32:	b005      	add	sp, #20
 800ee34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee38:	f7fb bb3a 	b.w	800a4b0 <printf>
 800ee3c:	4642      	mov	r2, r8
 800ee3e:	4651      	mov	r1, sl
 800ee40:	e773      	b.n	800ed2a <E131Bridge::HandleDmx()+0x172>
 800ee42:	f04f 0300 	mov.w	r3, #0
 800ee46:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800ee4a:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	f47f af72 	bne.w	800ed38 <E131Bridge::HandleDmx()+0x180>
 800ee54:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800ee58:	f7fd ff20 	bl	800cc9c <lightset::Data::Get()>
 800ee5c:	f8d8 2000 	ldr.w	r2, [r8]
 800ee60:	f240 6304 	movw	r3, #1540	; 0x604
 800ee64:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800ee68:	9a01      	ldr	r2, [sp, #4]
 800ee6a:	fb03 0306 	mla	r3, r3, r6, r0
 800ee6e:	1882      	adds	r2, r0, r2
 800ee70:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
 800ee74:	4631      	mov	r1, r6
 800ee76:	4640      	mov	r0, r8
 800ee78:	47d0      	blx	sl
 800ee7a:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	f47f af5f 	bne.w	800ed42 <E131Bridge::HandleDmx()+0x18a>
 800ee84:	6860      	ldr	r0, [r4, #4]
 800ee86:	6803      	ldr	r3, [r0, #0]
 800ee88:	4631      	mov	r1, r6
 800ee8a:	689b      	ldr	r3, [r3, #8]
 800ee8c:	4798      	blx	r3
 800ee8e:	f04f 0301 	mov.w	r3, #1
 800ee92:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800ee96:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800ee9a:	e752      	b.n	800ed42 <E131Bridge::HandleDmx()+0x18a>
 800ee9c:	f1bb 0f00 	cmp.w	fp, #0
 800eea0:	d08b      	beq.n	800edba <E131Bridge::HandleDmx()+0x202>
 800eea2:	f1b8 0f00 	cmp.w	r8, #0
 800eea6:	d0c3      	beq.n	800ee30 <E131Bridge::HandleDmx()+0x278>
 800eea8:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800eeac:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800eeb0:	e790      	b.n	800edd4 <E131Bridge::HandleDmx()+0x21c>
 800eeb2:	bf00      	nop
 800eeb4:	0801beb7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r9, sl, fp, ip, sp, pc}

0800eeb8 <E131Bridge::IsValidRoot()>:
 800eeb8:	b530      	push	{r4, r5, lr}
 800eeba:	4a0d      	ldr	r2, [pc, #52]	; (800eef0 <E131Bridge::IsValidRoot()+0x38>)
 800eebc:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 800eec0:	f100 018b 	add.w	r1, r0, #139	; 0x8b
 800eec4:	4299      	cmp	r1, r3
 800eec6:	d109      	bne.n	800eedc <E131Bridge::IsValidRoot()+0x24>
 800eec8:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800eecc:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800eed0:	d00c      	beq.n	800eeec <E131Bridge::IsValidRoot()+0x34>
 800eed2:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800eed6:	4258      	negs	r0, r3
 800eed8:	4158      	adcs	r0, r3
 800eeda:	bd30      	pop	{r4, r5, pc}
 800eedc:	f812 4b01 	ldrb.w	r4, [r2], #1
 800eee0:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800eee4:	42a5      	cmp	r5, r4
 800eee6:	d0ed      	beq.n	800eec4 <E131Bridge::IsValidRoot()+0xc>
 800eee8:	2000      	movs	r0, #0
 800eeea:	e7f6      	b.n	800eeda <E131Bridge::IsValidRoot()+0x22>
 800eeec:	2001      	movs	r0, #1
 800eeee:	e7f4      	b.n	800eeda <E131Bridge::IsValidRoot()+0x22>
 800eef0:	0801bfdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp, pc}

0800eef4 <E131Bridge::IsValidDataPacket()>:
 800eef4:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800eef8:	2b02      	cmp	r3, #2
 800eefa:	d10d      	bne.n	800ef18 <E131Bridge::IsValidDataPacket()+0x24>
 800eefc:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800ef00:	2ba1      	cmp	r3, #161	; 0xa1
 800ef02:	d109      	bne.n	800ef18 <E131Bridge::IsValidDataPacket()+0x24>
 800ef04:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800ef08:	b933      	cbnz	r3, 800ef18 <E131Bridge::IsValidDataPacket()+0x24>
 800ef0a:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800ef0e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800ef12:	4258      	negs	r0, r3
 800ef14:	4158      	adcs	r0, r3
 800ef16:	4770      	bx	lr
 800ef18:	2000      	movs	r0, #0
 800ef1a:	4770      	bx	lr

0800ef1c <E131Bridge::Run()>:
 800ef1c:	b530      	push	{r4, r5, lr}
 800ef1e:	4601      	mov	r1, r0
 800ef20:	b085      	sub	sp, #20
 800ef22:	4604      	mov	r4, r0
 800ef24:	f10d 030e 	add.w	r3, sp, #14
 800ef28:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800ef2c:	9300      	str	r3, [sp, #0]
 800ef2e:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800ef32:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800ef36:	f005 f919 	bl	801416c <udp_recv>
 800ef3a:	4b3a      	ldr	r3, [pc, #232]	; (800f024 <E131Bridge::Run()+0x108>)
 800ef3c:	681d      	ldr	r5, [r3, #0]
 800ef3e:	60e5      	str	r5, [r4, #12]
 800ef40:	2800      	cmp	r0, #0
 800ef42:	d138      	bne.n	800efb6 <E131Bridge::Run()+0x9a>
 800ef44:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800ef48:	b16b      	cbz	r3, 800ef66 <E131Bridge::Run()+0x4a>
 800ef4a:	6923      	ldr	r3, [r4, #16]
 800ef4c:	1aed      	subs	r5, r5, r3
 800ef4e:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800ef52:	429d      	cmp	r5, r3
 800ef54:	d928      	bls.n	800efa8 <E131Bridge::Run()+0x8c>
 800ef56:	6863      	ldr	r3, [r4, #4]
 800ef58:	b9eb      	cbnz	r3, 800ef96 <E131Bridge::Run()+0x7a>
 800ef5a:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ef5e:	f023 0302 	bic.w	r3, r3, #2
 800ef62:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800ef66:	6963      	ldr	r3, [r4, #20]
 800ef68:	b12b      	cbz	r3, 800ef76 <E131Bridge::Run()+0x5a>
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f000 f94c 	bl	800f208 <E131Bridge::HandleDmxIn()>
 800ef70:	4620      	mov	r0, r4
 800ef72:	f000 f8c7 	bl	800f104 <E131Bridge::SendDiscoveryPacket()>
 800ef76:	7a23      	ldrb	r3, [r4, #8]
 800ef78:	b15b      	cbz	r3, 800ef92 <E131Bridge::Run()+0x76>
 800ef7a:	4b2b      	ldr	r3, [pc, #172]	; (800f028 <E131Bridge::Run()+0x10c>)
 800ef7c:	6818      	ldr	r0, [r3, #0]
 800ef7e:	6843      	ldr	r3, [r0, #4]
 800ef80:	2b04      	cmp	r3, #4
 800ef82:	d006      	beq.n	800ef92 <E131Bridge::Run()+0x76>
 800ef84:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d049      	beq.n	800f020 <E131Bridge::Run()+0x104>
 800ef8c:	2103      	movs	r1, #3
 800ef8e:	f008 ffcd 	bl	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 800ef92:	b005      	add	sp, #20
 800ef94:	bd30      	pop	{r4, r5, pc}
 800ef96:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d1dd      	bne.n	800ef5a <E131Bridge::Run()+0x3e>
 800ef9e:	2201      	movs	r2, #1
 800efa0:	4611      	mov	r1, r2
 800efa2:	4620      	mov	r0, r4
 800efa4:	f7ff fd72 	bl	800ea8c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800efa8:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800efac:	1a9b      	subs	r3, r3, r2
 800efae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800efb2:	d3d8      	bcc.n	800ef66 <E131Bridge::Run()+0x4a>
 800efb4:	e7d1      	b.n	800ef5a <E131Bridge::Run()+0x3e>
 800efb6:	4620      	mov	r0, r4
 800efb8:	f7ff ff7e 	bl	800eeb8 <E131Bridge::IsValidRoot()>
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d0e8      	beq.n	800ef92 <E131Bridge::Run()+0x76>
 800efc0:	2300      	movs	r3, #0
 800efc2:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800efc6:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800efca:	6125      	str	r5, [r4, #16]
 800efcc:	b15b      	cbz	r3, 800efe6 <E131Bridge::Run()+0xca>
 800efce:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800efd2:	b943      	cbnz	r3, 800efe6 <E131Bridge::Run()+0xca>
 800efd4:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800efd8:	1aad      	subs	r5, r5, r2
 800efda:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800efde:	4295      	cmp	r5, r2
 800efe0:	bf88      	it	hi
 800efe2:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800efe6:	6863      	ldr	r3, [r4, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d0bc      	beq.n	800ef66 <E131Bridge::Run()+0x4a>
 800efec:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800eff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eff4:	ba1a      	rev	r2, r3
 800eff6:	d108      	bne.n	800f00a <E131Bridge::Run()+0xee>
 800eff8:	4620      	mov	r0, r4
 800effa:	f7ff ff7b 	bl	800eef4 <E131Bridge::IsValidDataPacket()>
 800effe:	2800      	cmp	r0, #0
 800f000:	d0b1      	beq.n	800ef66 <E131Bridge::Run()+0x4a>
 800f002:	4620      	mov	r0, r4
 800f004:	f7ff fdd8 	bl	800ebb8 <E131Bridge::HandleDmx()>
 800f008:	e7ad      	b.n	800ef66 <E131Bridge::Run()+0x4a>
 800f00a:	2a08      	cmp	r2, #8
 800f00c:	d1ab      	bne.n	800ef66 <E131Bridge::Run()+0x4a>
 800f00e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800f012:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f016:	d1a6      	bne.n	800ef66 <E131Bridge::Run()+0x4a>
 800f018:	4620      	mov	r0, r4
 800f01a:	f000 f971 	bl	800f300 <E131Bridge::HandleSynchronization()>
 800f01e:	e7a2      	b.n	800ef66 <E131Bridge::Run()+0x4a>
 800f020:	2102      	movs	r1, #2
 800f022:	e7b4      	b.n	800ef8e <E131Bridge::Run()+0x72>
 800f024:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 800f028:	2000fd9c 	mulcs	r0, ip, sp

0800f02c <E131Bridge::FillDiscoveryPacket()>:
 800f02c:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800f030:	b510      	push	{r4, lr}
 800f032:	333c      	adds	r3, #60	; 0x3c
 800f034:	005b      	lsls	r3, r3, #1
 800f036:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800f03a:	69c3      	ldr	r3, [r0, #28]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800f042:	428b      	cmp	r3, r1
 800f044:	d14a      	bne.n	800f0dc <E131Bridge::FillDiscoveryPacket()+0xb0>
 800f046:	69c3      	ldr	r3, [r0, #28]
 800f048:	492d      	ldr	r1, [pc, #180]	; (800f100 <E131Bridge::FillDiscoveryPacket()+0xd4>)
 800f04a:	701a      	strb	r2, [r3, #0]
 800f04c:	2210      	movs	r2, #16
 800f04e:	705a      	strb	r2, [r3, #1]
 800f050:	1cda      	adds	r2, r3, #3
 800f052:	330f      	adds	r3, #15
 800f054:	4293      	cmp	r3, r2
 800f056:	d144      	bne.n	800f0e2 <E131Bridge::FillDiscoveryPacket()+0xb6>
 800f058:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800f05c:	69c3      	ldr	r3, [r0, #28]
 800f05e:	3234      	adds	r2, #52	; 0x34
 800f060:	0052      	lsls	r2, r2, #1
 800f062:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800f066:	ba52      	rev16	r2, r2
 800f068:	821a      	strh	r2, [r3, #16]
 800f06a:	2200      	movs	r2, #0
 800f06c:	749a      	strb	r2, [r3, #18]
 800f06e:	74da      	strb	r2, [r3, #19]
 800f070:	751a      	strb	r2, [r3, #20]
 800f072:	2208      	movs	r2, #8
 800f074:	f803 2f15 	strb.w	r2, [r3, #21]!
 800f078:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800f07c:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800f080:	4291      	cmp	r1, r2
 800f082:	d133      	bne.n	800f0ec <E131Bridge::FillDiscoveryPacket()+0xc0>
 800f084:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800f088:	69c3      	ldr	r3, [r0, #28]
 800f08a:	3229      	adds	r2, #41	; 0x29
 800f08c:	0052      	lsls	r2, r2, #1
 800f08e:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800f092:	ba52      	rev16	r2, r2
 800f094:	84da      	strh	r2, [r3, #38]	; 0x26
 800f096:	2200      	movs	r2, #0
 800f098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800f09c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800f0a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800f0a4:	2202      	movs	r2, #2
 800f0a6:	f803 2f2b 	strb.w	r2, [r3, #43]!
 800f0aa:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800f0ae:	4291      	cmp	r1, r2
 800f0b0:	d121      	bne.n	800f0f6 <E131Bridge::FillDiscoveryPacket()+0xca>
 800f0b2:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800f0b6:	69c2      	ldr	r2, [r0, #28]
 800f0b8:	3304      	adds	r3, #4
 800f0ba:	005b      	lsls	r3, r3, #1
 800f0bc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800f0c0:	ba5b      	rev16	r3, r3
 800f0c2:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800f0cc:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800f0d0:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800f0da:	bd10      	pop	{r4, pc}
 800f0dc:	f803 2b01 	strb.w	r2, [r3], #1
 800f0e0:	e7af      	b.n	800f042 <E131Bridge::FillDiscoveryPacket()+0x16>
 800f0e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f0ea:	e7b3      	b.n	800f054 <E131Bridge::FillDiscoveryPacket()+0x28>
 800f0ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0f4:	e7c4      	b.n	800f080 <E131Bridge::FillDiscoveryPacket()+0x54>
 800f0f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0fe:	e7d6      	b.n	800f0ae <E131Bridge::FillDiscoveryPacket()+0x82>
 800f100:	0801bfdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp, pc}

0800f104 <E131Bridge::SendDiscoveryPacket()>:
 800f104:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f106:	68c2      	ldr	r2, [r0, #12]
 800f108:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800f10c:	f242 710f 	movw	r1, #9999	; 0x270f
 800f110:	1ad3      	subs	r3, r2, r3
 800f112:	428b      	cmp	r3, r1
 800f114:	4604      	mov	r4, r0
 800f116:	d924      	bls.n	800f162 <E131Bridge::SendDiscoveryPacket()+0x5e>
 800f118:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800f11c:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800f120:	b1ab      	cbz	r3, 800f14e <E131Bridge::SendDiscoveryPacket()+0x4a>
 800f122:	2500      	movs	r5, #0
 800f124:	462e      	mov	r6, r5
 800f126:	2300      	movs	r3, #0
 800f128:	f10d 020e 	add.w	r2, sp, #14
 800f12c:	4629      	mov	r1, r5
 800f12e:	4620      	mov	r0, r4
 800f130:	f7ff fc08 	bl	800e944 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800f134:	b140      	cbz	r0, 800f148 <E131Bridge::SendDiscoveryPacket()+0x44>
 800f136:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f13a:	69e2      	ldr	r2, [r4, #28]
 800f13c:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800f140:	ba5b      	rev16	r3, r3
 800f142:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800f146:	3601      	adds	r6, #1
 800f148:	3501      	adds	r5, #1
 800f14a:	2d42      	cmp	r5, #66	; 0x42
 800f14c:	d1eb      	bne.n	800f126 <E131Bridge::SendDiscoveryPacket()+0x22>
 800f14e:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800f152:	9300      	str	r3, [sp, #0]
 800f154:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800f158:	6a23      	ldr	r3, [r4, #32]
 800f15a:	69e1      	ldr	r1, [r4, #28]
 800f15c:	7820      	ldrb	r0, [r4, #0]
 800f15e:	f005 f861 	bl	8014224 <udp_send>
 800f162:	b004      	add	sp, #16
 800f164:	bd70      	pop	{r4, r5, r6, pc}

0800f166 <memcpy.isra.0>:
 800f166:	3801      	subs	r0, #1
 800f168:	440a      	add	r2, r1
 800f16a:	4291      	cmp	r1, r2
 800f16c:	d100      	bne.n	800f170 <memcpy.isra.0+0xa>
 800f16e:	4770      	bx	lr
 800f170:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f174:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f178:	e7f7      	b.n	800f16a <memcpy.isra.0+0x4>
	...

0800f17c <E131Bridge::FillDataPacket()>:
 800f17c:	b570      	push	{r4, r5, r6, lr}
 800f17e:	4605      	mov	r5, r0
 800f180:	6980      	ldr	r0, [r0, #24]
 800f182:	4920      	ldr	r1, [pc, #128]	; (800f204 <E131Bridge::FillDataPacket()+0x88>)
 800f184:	2400      	movs	r4, #0
 800f186:	2610      	movs	r6, #16
 800f188:	7046      	strb	r6, [r0, #1]
 800f18a:	7004      	strb	r4, [r0, #0]
 800f18c:	7084      	strb	r4, [r0, #2]
 800f18e:	70c4      	strb	r4, [r0, #3]
 800f190:	220c      	movs	r2, #12
 800f192:	3004      	adds	r0, #4
 800f194:	f7ff ffe7 	bl	800f166 <memcpy.isra.0>
 800f198:	69a8      	ldr	r0, [r5, #24]
 800f19a:	2304      	movs	r3, #4
 800f19c:	7543      	strb	r3, [r0, #21]
 800f19e:	7484      	strb	r4, [r0, #18]
 800f1a0:	74c4      	strb	r4, [r0, #19]
 800f1a2:	7504      	strb	r4, [r0, #20]
 800f1a4:	4632      	mov	r2, r6
 800f1a6:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800f1aa:	3016      	adds	r0, #22
 800f1ac:	f7ff ffdb 	bl	800f166 <memcpy.isra.0>
 800f1b0:	69a8      	ldr	r0, [r5, #24]
 800f1b2:	2602      	movs	r6, #2
 800f1b4:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800f1b8:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800f1bc:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800f1c0:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800f1c4:	2240      	movs	r2, #64	; 0x40
 800f1c6:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800f1ca:	302c      	adds	r0, #44	; 0x2c
 800f1cc:	f7ff ffcb 	bl	800f166 <memcpy.isra.0>
 800f1d0:	69ab      	ldr	r3, [r5, #24]
 800f1d2:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800f1d6:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800f1da:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800f1de:	69ab      	ldr	r3, [r5, #24]
 800f1e0:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800f1e4:	69ab      	ldr	r3, [r5, #24]
 800f1e6:	22a1      	movs	r2, #161	; 0xa1
 800f1e8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800f1ec:	69ab      	ldr	r3, [r5, #24]
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800f1f4:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800f1f8:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800f1fc:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800f200:	bd70      	pop	{r4, r5, r6, pc}
 800f202:	bf00      	nop
 800f204:	0801bfdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp, pc}

0800f208 <E131Bridge::HandleDmxIn()>:
 800f208:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f20c:	f500 55b4 	add.w	r5, r0, #5760	; 0x1680
 800f210:	4f3a      	ldr	r7, [pc, #232]	; (800f2fc <E131Bridge::HandleDmxIn()+0xf4>)
 800f212:	4604      	mov	r4, r0
 800f214:	351c      	adds	r5, #28
 800f216:	2600      	movs	r6, #0
 800f218:	78ab      	ldrb	r3, [r5, #2]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d056      	beq.n	800f2cc <E131Bridge::HandleDmxIn()+0xc4>
 800f21e:	6960      	ldr	r0, [r4, #20]
 800f220:	6803      	ldr	r3, [r0, #0]
 800f222:	4631      	mov	r1, r6
 800f224:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800f228:	aa02      	add	r2, sp, #8
 800f22a:	ab03      	add	r3, sp, #12
 800f22c:	47c0      	blx	r8
 800f22e:	4601      	mov	r1, r0
 800f230:	2800      	cmp	r0, #0
 800f232:	d053      	beq.n	800f2dc <E131Bridge::HandleDmxIn()+0xd4>
 800f234:	9a02      	ldr	r2, [sp, #8]
 800f236:	69a0      	ldr	r0, [r4, #24]
 800f238:	b293      	uxth	r3, r2
 800f23a:	f103 0c6d 	add.w	ip, r3, #109	; 0x6d
 800f23e:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800f242:	fa9c fc9c 	rev16.w	ip, ip
 800f246:	f8a0 c010 	strh.w	ip, [r0, #16]
 800f24a:	f103 0c57 	add.w	ip, r3, #87	; 0x57
 800f24e:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800f252:	fa9c fc9c 	rev16.w	ip, ip
 800f256:	f8a0 c026 	strh.w	ip, [r0, #38]	; 0x26
 800f25a:	f895 c009 	ldrb.w	ip, [r5, #9]
 800f25e:	f880 c06c 	strb.w	ip, [r0, #108]	; 0x6c
 800f262:	f895 c008 	ldrb.w	ip, [r5, #8]
 800f266:	f10c 0001 	add.w	r0, ip, #1
 800f26a:	7228      	strb	r0, [r5, #8]
 800f26c:	69a0      	ldr	r0, [r4, #24]
 800f26e:	f880 c06f 	strb.w	ip, [r0, #111]	; 0x6f
 800f272:	f8b5 c000 	ldrh.w	ip, [r5]
 800f276:	69a0      	ldr	r0, [r4, #24]
 800f278:	330a      	adds	r3, #10
 800f27a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800f27e:	fa9c fc9c 	rev16.w	ip, ip
 800f282:	ba5b      	rev16	r3, r3
 800f284:	f8a0 c071 	strh.w	ip, [r0, #113]	; 0x71
 800f288:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800f28c:	307d      	adds	r0, #125	; 0x7d
 800f28e:	f7ff ff6a 	bl	800f166 <memcpy.isra.0>
 800f292:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800f296:	69a1      	ldr	r1, [r4, #24]
 800f298:	7820      	ldrb	r0, [r4, #0]
 800f29a:	ba53      	rev16	r3, r2
 800f29c:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800f2a0:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800f2a4:	9300      	str	r3, [sp, #0]
 800f2a6:	327d      	adds	r2, #125	; 0x7d
 800f2a8:	686b      	ldr	r3, [r5, #4]
 800f2aa:	b292      	uxth	r2, r2
 800f2ac:	f004 ffba 	bl	8014224 <udp_send>
 800f2b0:	683a      	ldr	r2, [r7, #0]
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	40b3      	lsls	r3, r6
 800f2b6:	ea33 0102 	bics.w	r1, r3, r2
 800f2ba:	d007      	beq.n	800f2cc <E131Bridge::HandleDmxIn()+0xc4>
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	603b      	str	r3, [r7, #0]
 800f2c0:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800f2c4:	f043 0301 	orr.w	r3, r3, #1
 800f2c8:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800f2cc:	3601      	adds	r6, #1
 800f2ce:	2e42      	cmp	r6, #66	; 0x42
 800f2d0:	f105 050c 	add.w	r5, r5, #12
 800f2d4:	d1a0      	bne.n	800f218 <E131Bridge::HandleDmxIn()+0x10>
 800f2d6:	b004      	add	sp, #16
 800f2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2dc:	9b03      	ldr	r3, [sp, #12]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d1f4      	bne.n	800f2cc <E131Bridge::HandleDmxIn()+0xc4>
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	40b2      	lsls	r2, r6
 800f2e8:	ea23 0302 	bic.w	r3, r3, r2
 800f2ec:	603b      	str	r3, [r7, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d1ec      	bne.n	800f2cc <E131Bridge::HandleDmxIn()+0xc4>
 800f2f2:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800f2f6:	f023 0301 	bic.w	r3, r3, #1
 800f2fa:	e7e5      	b.n	800f2c8 <E131Bridge::HandleDmxIn()+0xc0>
 800f2fc:	200006e4 	andcs	r0, r0, r4, ror #13

0800f300 <E131Bridge::HandleSynchronization()>:
 800f300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f304:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800f308:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800f30c:	ba5b      	rev16	r3, r3
 800f30e:	b29b      	uxth	r3, r3
 800f310:	429a      	cmp	r2, r3
 800f312:	4604      	mov	r4, r0
 800f314:	d00a      	beq.n	800f32c <E131Bridge::HandleSynchronization()+0x2c>
 800f316:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d006      	beq.n	800f32c <E131Bridge::HandleSynchronization()+0x2c>
 800f31e:	4b24      	ldr	r3, [pc, #144]	; (800f3b0 <E131Bridge::HandleSynchronization()+0xb0>)
 800f320:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f324:	6818      	ldr	r0, [r3, #0]
 800f326:	2102      	movs	r1, #2
 800f328:	f008 be00 	b.w	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 800f32c:	68e3      	ldr	r3, [r4, #12]
 800f32e:	4e21      	ldr	r6, [pc, #132]	; (800f3b4 <E131Bridge::HandleSynchronization()+0xb4>)
 800f330:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800f3b8 <E131Bridge::HandleSynchronization()+0xb8>
 800f334:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800f338:	2500      	movs	r5, #0
 800f33a:	4627      	mov	r7, r4
 800f33c:	46a9      	mov	r9, r5
 800f33e:	f897 3516 	ldrb.w	r3, [r7, #1302]	; 0x516
 800f342:	b323      	cbz	r3, 800f38e <E131Bridge::HandleSynchronization()+0x8e>
 800f344:	f8d8 3000 	ldr.w	r3, [r8]
 800f348:	6860      	ldr	r0, [r4, #4]
 800f34a:	07da      	lsls	r2, r3, #31
 800f34c:	bf5c      	itt	pl
 800f34e:	2301      	movpl	r3, #1
 800f350:	f8c8 3000 	strpl.w	r3, [r8]
 800f354:	6803      	ldr	r3, [r0, #0]
 800f356:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800f35a:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800f35e:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800f362:	4629      	mov	r1, r5
 800f364:	47d0      	blx	sl
 800f366:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800f36a:	b93b      	cbnz	r3, 800f37c <E131Bridge::HandleSynchronization()+0x7c>
 800f36c:	6860      	ldr	r0, [r4, #4]
 800f36e:	6803      	ldr	r3, [r0, #0]
 800f370:	4629      	mov	r1, r5
 800f372:	689b      	ldr	r3, [r3, #8]
 800f374:	4798      	blx	r3
 800f376:	2301      	movs	r3, #1
 800f378:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
 800f37c:	f8d8 3000 	ldr.w	r3, [r8]
 800f380:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800f384:	07db      	lsls	r3, r3, #31
 800f386:	bf5c      	itt	pl
 800f388:	2301      	movpl	r3, #1
 800f38a:	f8c8 3000 	strpl.w	r3, [r8]
 800f38e:	3501      	adds	r5, #1
 800f390:	2d42      	cmp	r5, #66	; 0x42
 800f392:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800f396:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800f39a:	d1d0      	bne.n	800f33e <E131Bridge::HandleSynchronization()+0x3e>
 800f39c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f39e:	b120      	cbz	r0, 800f3aa <E131Bridge::HandleSynchronization()+0xaa>
 800f3a0:	6803      	ldr	r3, [r0, #0]
 800f3a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a6:	689b      	ldr	r3, [r3, #8]
 800f3a8:	4718      	bx	r3
 800f3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3ae:	bf00      	nop
 800f3b0:	2000fd9c 	mulcs	r0, ip, sp
 800f3b4:	20030000 	andcs	r0, r3, r0
 800f3b8:	200006c8 	andcs	r0, r0, r8, asr #13

0800f3bc <E131Bridge::Print()>:
 800f3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c0:	b08c      	sub	sp, #48	; 0x30
 800f3c2:	a902      	add	r1, sp, #8
 800f3c4:	4604      	mov	r4, r0
 800f3c6:	2500      	movs	r5, #0
 800f3c8:	3024      	adds	r0, #36	; 0x24
 800f3ca:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800f3ce:	f001 fe1d 	bl	801100c <uuid_unparse>
 800f3d2:	482c      	ldr	r0, [pc, #176]	; (800f484 <E131Bridge::Print()+0xc8>)
 800f3d4:	f7fb f86c 	bl	800a4b0 <printf>
 800f3d8:	4b2b      	ldr	r3, [pc, #172]	; (800f488 <E131Bridge::Print()+0xcc>)
 800f3da:	482c      	ldr	r0, [pc, #176]	; (800f48c <E131Bridge::Print()+0xd0>)
 800f3dc:	7819      	ldrb	r1, [r3, #0]
 800f3de:	785a      	ldrb	r2, [r3, #1]
 800f3e0:	f7fb f866 	bl	800a4b0 <printf>
 800f3e4:	482a      	ldr	r0, [pc, #168]	; (800f490 <E131Bridge::Print()+0xd4>)
 800f3e6:	a902      	add	r1, sp, #8
 800f3e8:	f7fb f862 	bl	800a4b0 <printf>
 800f3ec:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800f3f0:	b303      	cbz	r3, 800f434 <E131Bridge::Print()+0x78>
 800f3f2:	4828      	ldr	r0, [pc, #160]	; (800f494 <E131Bridge::Print()+0xd8>)
 800f3f4:	4e28      	ldr	r6, [pc, #160]	; (800f498 <E131Bridge::Print()+0xdc>)
 800f3f6:	4f29      	ldr	r7, [pc, #164]	; (800f49c <E131Bridge::Print()+0xe0>)
 800f3f8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800f4ac <E131Bridge::Print()+0xf0>
 800f3fc:	f7fb f858 	bl	800a4b0 <printf>
 800f400:	2301      	movs	r3, #1
 800f402:	f10d 0206 	add.w	r2, sp, #6
 800f406:	4629      	mov	r1, r5
 800f408:	4620      	mov	r0, r4
 800f40a:	f7ff fa9b 	bl	800e944 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800f40e:	b170      	cbz	r0, 800f42e <E131Bridge::Print()+0x72>
 800f410:	2344      	movs	r3, #68	; 0x44
 800f412:	f504 62aa 	add.w	r2, r4, #1360	; 0x550
 800f416:	436b      	muls	r3, r5
 800f418:	4629      	mov	r1, r5
 800f41a:	58d3      	ldr	r3, [r2, r3]
 800f41c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f420:	2b00      	cmp	r3, #0
 800f422:	bf0c      	ite	eq
 800f424:	4633      	moveq	r3, r6
 800f426:	463b      	movne	r3, r7
 800f428:	4640      	mov	r0, r8
 800f42a:	f7fb f841 	bl	800a4b0 <printf>
 800f42e:	3501      	adds	r5, #1
 800f430:	2d42      	cmp	r5, #66	; 0x42
 800f432:	d1e5      	bne.n	800f400 <E131Bridge::Print()+0x44>
 800f434:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800f438:	b1db      	cbz	r3, 800f472 <E131Bridge::Print()+0xb6>
 800f43a:	4819      	ldr	r0, [pc, #100]	; (800f4a0 <E131Bridge::Print()+0xe4>)
 800f43c:	4f19      	ldr	r7, [pc, #100]	; (800f4a4 <E131Bridge::Print()+0xe8>)
 800f43e:	f7fb f837 	bl	800a4b0 <printf>
 800f442:	f504 56b5 	add.w	r6, r4, #5792	; 0x16a0
 800f446:	2500      	movs	r5, #0
 800f448:	3605      	adds	r6, #5
 800f44a:	2300      	movs	r3, #0
 800f44c:	f10d 0206 	add.w	r2, sp, #6
 800f450:	4629      	mov	r1, r5
 800f452:	4620      	mov	r0, r4
 800f454:	f7ff fa76 	bl	800e944 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800f458:	b140      	cbz	r0, 800f46c <E131Bridge::Print()+0xb0>
 800f45a:	230c      	movs	r3, #12
 800f45c:	436b      	muls	r3, r5
 800f45e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f462:	5cf3      	ldrb	r3, [r6, r3]
 800f464:	4629      	mov	r1, r5
 800f466:	4638      	mov	r0, r7
 800f468:	f7fb f822 	bl	800a4b0 <printf>
 800f46c:	3501      	adds	r5, #1
 800f46e:	2d42      	cmp	r5, #66	; 0x42
 800f470:	d1eb      	bne.n	800f44a <E131Bridge::Print()+0x8e>
 800f472:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800f476:	b113      	cbz	r3, 800f47e <E131Bridge::Print()+0xc2>
 800f478:	480b      	ldr	r0, [pc, #44]	; (800f4a8 <E131Bridge::Print()+0xec>)
 800f47a:	f7fb f819 	bl	800a4b0 <printf>
 800f47e:	b00c      	add	sp, #48	; 0x30
 800f480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f484:	0801bee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, ip, sp, pc}
 800f488:	0801bfe9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 800f48c:	0801beec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, sl, fp, ip, sp, pc}
 800f490:	0801beff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, pc}
 800f494:	0801bccf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, sl, fp, ip, sp, pc}
 800f498:	0801bc73 	stmdaeq	r1, {r0, r1, r4, r5, r6, sl, fp, ip, sp, pc}
 800f49c:	0801bc77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, fp, ip, sp, pc}
 800f4a0:	0801bcf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, sl, fp, ip, sp, pc}
 800f4a4:	0801bf2e 	stmdaeq	r1, {r1, r2, r3, r5, r8, r9, sl, fp, ip, sp, pc}
 800f4a8:	0801bf4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp, pc}
 800f4ac:	0801bf0f 	stmdaeq	r1, {r0, r1, r2, r3, r8, r9, sl, fp, ip, sp, pc}

0800f4b0 <memcmp>:
 800f4b0:	4402      	add	r2, r0
 800f4b2:	4290      	cmp	r0, r2
 800f4b4:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800f4b8:	d106      	bne.n	800f4c8 <memcmp+0x18>
 800f4ba:	2000      	movs	r0, #0
 800f4bc:	4770      	bx	lr
 800f4be:	3001      	adds	r0, #1
 800f4c0:	4290      	cmp	r0, r2
 800f4c2:	d102      	bne.n	800f4ca <memcmp+0x1a>
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	e006      	b.n	800f4d6 <memcmp+0x26>
 800f4c8:	b510      	push	{r4, lr}
 800f4ca:	7803      	ldrb	r3, [r0, #0]
 800f4cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f4d0:	42a3      	cmp	r3, r4
 800f4d2:	d0f4      	beq.n	800f4be <memcmp+0xe>
 800f4d4:	1b18      	subs	r0, r3, r4
 800f4d6:	bd10      	pop	{r4, pc}

0800f4d8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800f4d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4da:	88c6      	ldrh	r6, [r0, #6]
 800f4dc:	8885      	ldrh	r5, [r0, #4]
 800f4de:	42ae      	cmp	r6, r5
 800f4e0:	d216      	bcs.n	800f510 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800f4e2:	4604      	mov	r4, r0
 800f4e4:	6800      	ldr	r0, [r0, #0]
 800f4e6:	1bad      	subs	r5, r5, r6
 800f4e8:	4430      	add	r0, r6
 800f4ea:	7a26      	ldrb	r6, [r4, #8]
 800f4ec:	b923      	cbnz	r3, 800f4f8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800f4ee:	b926      	cbnz	r6, 800f4fa <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800f4f0:	9200      	str	r2, [sp, #0]
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	4a09      	ldr	r2, [pc, #36]	; (800f51c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800f4f6:	e003      	b.n	800f500 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800f4f8:	b166      	cbz	r6, 800f514 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800f4fa:	9200      	str	r2, [sp, #0]
 800f4fc:	4a08      	ldr	r2, [pc, #32]	; (800f520 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800f4fe:	460b      	mov	r3, r1
 800f500:	4629      	mov	r1, r5
 800f502:	f7fa fffd 	bl	800a500 <snprintf>
 800f506:	4285      	cmp	r5, r0
 800f508:	bfa2      	ittt	ge
 800f50a:	88e3      	ldrhge	r3, [r4, #6]
 800f50c:	181b      	addge	r3, r3, r0
 800f50e:	80e3      	strhge	r3, [r4, #6]
 800f510:	b002      	add	sp, #8
 800f512:	bd70      	pop	{r4, r5, r6, pc}
 800f514:	9200      	str	r2, [sp, #0]
 800f516:	460b      	mov	r3, r1
 800f518:	4a02      	ldr	r2, [pc, #8]	; (800f524 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800f51a:	e7f1      	b.n	800f500 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800f51c:	0801adb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, fp, sp, pc}
 800f520:	0801ada9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, fp, sp, pc}
 800f524:	0801adb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, sl, fp, sp, pc}

0800f528 <E131Params::E131Params(E131ParamsStore*)>:
 800f528:	b510      	push	{r4, lr}
 800f52a:	2219      	movs	r2, #25
 800f52c:	4604      	mov	r4, r0
 800f52e:	f840 1b04 	str.w	r1, [r0], #4
 800f532:	2100      	movs	r1, #0
 800f534:	f008 fed2 	bl	80182dc <memset>
 800f538:	f04f 3364 	mov.w	r3, #1684300900	; 0x64646464
 800f53c:	f8c4 301f 	str.w	r3, [r4, #31]
 800f540:	2300      	movs	r3, #0
 800f542:	2201      	movs	r2, #1
 800f544:	7323      	strb	r3, [r4, #12]
 800f546:	77a3      	strb	r3, [r4, #30]
 800f548:	4b08      	ldr	r3, [pc, #32]	; (800f56c <E131Params::E131Params(E131ParamsStore*)+0x44>)
 800f54a:	72e2      	strb	r2, [r4, #11]
 800f54c:	2155      	movs	r1, #85	; 0x55
 800f54e:	2202      	movs	r2, #2
 800f550:	f8a4 200d 	strh.w	r2, [r4, #13]
 800f554:	7761      	strb	r1, [r4, #29]
 800f556:	2203      	movs	r2, #3
 800f558:	6819      	ldr	r1, [r3, #0]
 800f55a:	f8a4 200f 	strh.w	r2, [r4, #15]
 800f55e:	2204      	movs	r2, #4
 800f560:	f8a4 2011 	strh.w	r2, [r4, #17]
 800f564:	b901      	cbnz	r1, 800f568 <E131Params::E131Params(E131ParamsStore*)+0x40>
 800f566:	601a      	str	r2, [r3, #0]
 800f568:	4620      	mov	r0, r4
 800f56a:	bd10      	pop	{r4, pc}
 800f56c:	200006e8 	andcs	r0, r0, r8, ror #13

0800f570 <E131Params::Load(char const*, unsigned int)>:
 800f570:	6803      	ldr	r3, [r0, #0]
 800f572:	b1d3      	cbz	r3, 800f5aa <E131Params::Load(char const*, unsigned int)+0x3a>
 800f574:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f576:	2300      	movs	r3, #0
 800f578:	6043      	str	r3, [r0, #4]
 800f57a:	4604      	mov	r4, r0
 800f57c:	460d      	mov	r5, r1
 800f57e:	4616      	mov	r6, r2
 800f580:	490a      	ldr	r1, [pc, #40]	; (800f5ac <E131Params::Load(char const*, unsigned int)+0x3c>)
 800f582:	4602      	mov	r2, r0
 800f584:	4668      	mov	r0, sp
 800f586:	f007 ffff 	bl	8017588 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800f58a:	4632      	mov	r2, r6
 800f58c:	4629      	mov	r1, r5
 800f58e:	4668      	mov	r0, sp
 800f590:	f007 fffe 	bl	8017590 <ReadConfigFile::Read(char const*, unsigned int)>
 800f594:	4621      	mov	r1, r4
 800f596:	f851 0b04 	ldr.w	r0, [r1], #4
 800f59a:	6803      	ldr	r3, [r0, #0]
 800f59c:	689b      	ldr	r3, [r3, #8]
 800f59e:	4798      	blx	r3
 800f5a0:	4668      	mov	r0, sp
 800f5a2:	f007 fff4 	bl	801758e <ReadConfigFile::~ReadConfigFile()>
 800f5a6:	b002      	add	sp, #8
 800f5a8:	bd70      	pop	{r4, r5, r6, pc}
 800f5aa:	4770      	bx	lr
 800f5ac:	0800f849 	stmdaeq	r0, {r0, r3, r6, fp, ip, sp, lr, pc}

0800f5b0 <E131Params::callbackFunction(char const*)>:
 800f5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b4:	460e      	mov	r6, r1
 800f5b6:	b087      	sub	sp, #28
 800f5b8:	2708      	movs	r7, #8
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	4998      	ldr	r1, [pc, #608]	; (800f820 <E131Params::callbackFunction(char const*)+0x270>)
 800f5be:	9701      	str	r7, [sp, #4]
 800f5c0:	ab01      	add	r3, sp, #4
 800f5c2:	eb0d 0207 	add.w	r2, sp, r7
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f008 f816 	bl	80175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800f5cc:	bb68      	cbnz	r0, 800f62a <E131Params::callbackFunction(char const*)+0x7a>
 800f5ce:	4995      	ldr	r1, [pc, #596]	; (800f824 <E131Params::callbackFunction(char const*)+0x274>)
 800f5d0:	2204      	movs	r2, #4
 800f5d2:	eb0d 0007 	add.w	r0, sp, r7
 800f5d6:	f7ff ff6b 	bl	800f4b0 <memcmp>
 800f5da:	6865      	ldr	r5, [r4, #4]
 800f5dc:	b1a0      	cbz	r0, 800f608 <E131Params::callbackFunction(char const*)+0x58>
 800f5de:	4992      	ldr	r1, [pc, #584]	; (800f828 <E131Params::callbackFunction(char const*)+0x278>)
 800f5e0:	2203      	movs	r2, #3
 800f5e2:	eb0d 0007 	add.w	r0, sp, r7
 800f5e6:	f7ff ff63 	bl	800f4b0 <memcmp>
 800f5ea:	b1b0      	cbz	r0, 800f61a <E131Params::callbackFunction(char const*)+0x6a>
 800f5ec:	498f      	ldr	r1, [pc, #572]	; (800f82c <E131Params::callbackFunction(char const*)+0x27c>)
 800f5ee:	2202      	movs	r2, #2
 800f5f0:	eb0d 0007 	add.w	r0, sp, r7
 800f5f4:	f7ff ff5c 	bl	800f4b0 <memcmp>
 800f5f8:	b198      	cbz	r0, 800f622 <E131Params::callbackFunction(char const*)+0x72>
 800f5fa:	498d      	ldr	r1, [pc, #564]	; (800f830 <E131Params::callbackFunction(char const*)+0x280>)
 800f5fc:	463a      	mov	r2, r7
 800f5fe:	eb0d 0007 	add.w	r0, sp, r7
 800f602:	f7ff ff55 	bl	800f4b0 <memcmp>
 800f606:	b170      	cbz	r0, 800f626 <E131Params::callbackFunction(char const*)+0x76>
 800f608:	f025 0501 	bic.w	r5, r5, #1
 800f60c:	2300      	movs	r3, #0
 800f60e:	6065      	str	r5, [r4, #4]
 800f610:	f8a4 3009 	strh.w	r3, [r4, #9]
 800f614:	b007      	add	sp, #28
 800f616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61a:	2301      	movs	r3, #1
 800f61c:	f045 0501 	orr.w	r5, r5, #1
 800f620:	e7f5      	b.n	800f60e <E131Params::callbackFunction(char const*)+0x5e>
 800f622:	2302      	movs	r3, #2
 800f624:	e7fa      	b.n	800f61c <E131Params::callbackFunction(char const*)+0x6c>
 800f626:	2303      	movs	r3, #3
 800f628:	e7f8      	b.n	800f61c <E131Params::callbackFunction(char const*)+0x6c>
 800f62a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800f838 <E131Params::callbackFunction(char const*)+0x288>
 800f62e:	f8df 820c 	ldr.w	r8, [pc, #524]	; 800f83c <E131Params::callbackFunction(char const*)+0x28c>
 800f632:	f8df a20c 	ldr.w	sl, [pc, #524]	; 800f840 <E131Params::callbackFunction(char const*)+0x290>
 800f636:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800f844 <E131Params::callbackFunction(char const*)+0x294>
 800f63a:	2500      	movs	r5, #0
 800f63c:	f10d 0202 	add.w	r2, sp, #2
 800f640:	4649      	mov	r1, r9
 800f642:	4630      	mov	r0, r6
 800f644:	f008 f88d 	bl	8017762 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800f648:	b9d8      	cbnz	r0, 800f682 <E131Params::callbackFunction(char const*)+0xd2>
 800f64a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800f64e:	6861      	ldr	r1, [r4, #4]
 800f650:	1e42      	subs	r2, r0, #1
 800f652:	b292      	uxth	r2, r2
 800f654:	f64f 16fe 	movw	r6, #63998	; 0xf9fe
 800f658:	2310      	movs	r3, #16
 800f65a:	42b2      	cmp	r2, r6
 800f65c:	fa03 f305 	lsl.w	r3, r3, r5
 800f660:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800f664:	d907      	bls.n	800f676 <E131Params::callbackFunction(char const*)+0xc6>
 800f666:	4422      	add	r2, r4
 800f668:	3501      	adds	r5, #1
 800f66a:	ea21 0103 	bic.w	r1, r1, r3
 800f66e:	f8a2 500b 	strh.w	r5, [r2, #11]
 800f672:	6061      	str	r1, [r4, #4]
 800f674:	e7ce      	b.n	800f614 <E131Params::callbackFunction(char const*)+0x64>
 800f676:	4422      	add	r2, r4
 800f678:	430b      	orrs	r3, r1
 800f67a:	f8a2 000b 	strh.w	r0, [r2, #11]
 800f67e:	6063      	str	r3, [r4, #4]
 800f680:	e7c8      	b.n	800f614 <E131Params::callbackFunction(char const*)+0x64>
 800f682:	2712      	movs	r7, #18
 800f684:	2303      	movs	r3, #3
 800f686:	436f      	muls	r7, r5
 800f688:	9301      	str	r3, [sp, #4]
 800f68a:	aa02      	add	r2, sp, #8
 800f68c:	ab01      	add	r3, sp, #4
 800f68e:	eb0a 0107 	add.w	r1, sl, r7
 800f692:	4630      	mov	r0, r6
 800f694:	f007 ffb0 	bl	80175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800f698:	bb08      	cbnz	r0, 800f6de <E131Params::callbackFunction(char const*)+0x12e>
 800f69a:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800f69e:	6862      	ldr	r2, [r4, #4]
 800f6a0:	f041 0120 	orr.w	r1, r1, #32
 800f6a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6a8:	296c      	cmp	r1, #108	; 0x6c
 800f6aa:	fa03 f305 	lsl.w	r3, r3, r5
 800f6ae:	4425      	add	r5, r4
 800f6b0:	d10f      	bne.n	800f6d2 <E131Params::callbackFunction(char const*)+0x122>
 800f6b2:	f89d 1009 	ldrb.w	r1, [sp, #9]
 800f6b6:	f041 0120 	orr.w	r1, r1, #32
 800f6ba:	2974      	cmp	r1, #116	; 0x74
 800f6bc:	d109      	bne.n	800f6d2 <E131Params::callbackFunction(char const*)+0x122>
 800f6be:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800f6c2:	f041 0120 	orr.w	r1, r1, #32
 800f6c6:	2970      	cmp	r1, #112	; 0x70
 800f6c8:	d103      	bne.n	800f6d2 <E131Params::callbackFunction(char const*)+0x122>
 800f6ca:	2101      	movs	r1, #1
 800f6cc:	7529      	strb	r1, [r5, #20]
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	e7d5      	b.n	800f67e <E131Params::callbackFunction(char const*)+0xce>
 800f6d2:	2100      	movs	r1, #0
 800f6d4:	ea22 0203 	bic.w	r2, r2, r3
 800f6d8:	7529      	strb	r1, [r5, #20]
 800f6da:	6062      	str	r2, [r4, #4]
 800f6dc:	e79a      	b.n	800f614 <E131Params::callbackFunction(char const*)+0x64>
 800f6de:	2307      	movs	r3, #7
 800f6e0:	9301      	str	r3, [sp, #4]
 800f6e2:	aa02      	add	r2, sp, #8
 800f6e4:	ab01      	add	r3, sp, #4
 800f6e6:	eb0b 0107 	add.w	r1, fp, r7
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	f007 ff84 	bl	80175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	d15e      	bne.n	800f7b2 <E131Params::callbackFunction(char const*)+0x202>
 800f6f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f6f8:	f043 0320 	orr.w	r3, r3, #32
 800f6fc:	2b69      	cmp	r3, #105	; 0x69
 800f6fe:	d123      	bne.n	800f748 <E131Params::callbackFunction(char const*)+0x198>
 800f700:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f704:	f043 0320 	orr.w	r3, r3, #32
 800f708:	2b6e      	cmp	r3, #110	; 0x6e
 800f70a:	d146      	bne.n	800f79a <E131Params::callbackFunction(char const*)+0x1ea>
 800f70c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800f710:	f043 0320 	orr.w	r3, r3, #32
 800f714:	2b70      	cmp	r3, #112	; 0x70
 800f716:	d140      	bne.n	800f79a <E131Params::callbackFunction(char const*)+0x1ea>
 800f718:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f71c:	f043 0320 	orr.w	r3, r3, #32
 800f720:	2b75      	cmp	r3, #117	; 0x75
 800f722:	d13a      	bne.n	800f79a <E131Params::callbackFunction(char const*)+0x1ea>
 800f724:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f728:	f043 0320 	orr.w	r3, r3, #32
 800f72c:	3b74      	subs	r3, #116	; 0x74
 800f72e:	bf18      	it	ne
 800f730:	2301      	movne	r3, #1
 800f732:	f8b4 201d 	ldrh.w	r2, [r4, #29]
 800f736:	006d      	lsls	r5, r5, #1
 800f738:	2103      	movs	r1, #3
 800f73a:	40a9      	lsls	r1, r5
 800f73c:	ea22 0201 	bic.w	r2, r2, r1
 800f740:	bb6b      	cbnz	r3, 800f79e <E131Params::callbackFunction(char const*)+0x1ee>
 800f742:	f8a4 201d 	strh.w	r2, [r4, #29]
 800f746:	e765      	b.n	800f614 <E131Params::callbackFunction(char const*)+0x64>
 800f748:	2b64      	cmp	r3, #100	; 0x64
 800f74a:	d126      	bne.n	800f79a <E131Params::callbackFunction(char const*)+0x1ea>
 800f74c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f750:	f043 0320 	orr.w	r3, r3, #32
 800f754:	2b69      	cmp	r3, #105	; 0x69
 800f756:	d120      	bne.n	800f79a <E131Params::callbackFunction(char const*)+0x1ea>
 800f758:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800f75c:	f043 0320 	orr.w	r3, r3, #32
 800f760:	2b73      	cmp	r3, #115	; 0x73
 800f762:	d11a      	bne.n	800f79a <E131Params::callbackFunction(char const*)+0x1ea>
 800f764:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f768:	f043 0320 	orr.w	r3, r3, #32
 800f76c:	2b61      	cmp	r3, #97	; 0x61
 800f76e:	d114      	bne.n	800f79a <E131Params::callbackFunction(char const*)+0x1ea>
 800f770:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f774:	f043 0320 	orr.w	r3, r3, #32
 800f778:	2b62      	cmp	r3, #98	; 0x62
 800f77a:	d10e      	bne.n	800f79a <E131Params::callbackFunction(char const*)+0x1ea>
 800f77c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800f780:	f043 0320 	orr.w	r3, r3, #32
 800f784:	2b6c      	cmp	r3, #108	; 0x6c
 800f786:	d108      	bne.n	800f79a <E131Params::callbackFunction(char const*)+0x1ea>
 800f788:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800f78c:	f043 0320 	orr.w	r3, r3, #32
 800f790:	2b65      	cmp	r3, #101	; 0x65
 800f792:	bf14      	ite	ne
 800f794:	2301      	movne	r3, #1
 800f796:	2302      	moveq	r3, #2
 800f798:	e7cb      	b.n	800f732 <E131Params::callbackFunction(char const*)+0x182>
 800f79a:	2301      	movs	r3, #1
 800f79c:	e7c9      	b.n	800f732 <E131Params::callbackFunction(char const*)+0x182>
 800f79e:	2b02      	cmp	r3, #2
 800f7a0:	bf15      	itete	ne
 800f7a2:	2301      	movne	r3, #1
 800f7a4:	40ab      	lsleq	r3, r5
 800f7a6:	fa03 f505 	lslne.w	r5, r3, r5
 800f7aa:	431a      	orreq	r2, r3
 800f7ac:	bf18      	it	ne
 800f7ae:	432a      	orrne	r2, r5
 800f7b0:	e7c7      	b.n	800f742 <E131Params::callbackFunction(char const*)+0x192>
 800f7b2:	f10d 0201 	add.w	r2, sp, #1
 800f7b6:	4641      	mov	r1, r8
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	f008 f81a 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f7be:	b9a0      	cbnz	r0, 800f7ea <E131Params::callbackFunction(char const*)+0x23a>
 800f7c0:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f7c4:	6863      	ldr	r3, [r4, #4]
 800f7c6:	1e48      	subs	r0, r1, #1
 800f7c8:	b2c0      	uxtb	r0, r0
 800f7ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f7ce:	28c7      	cmp	r0, #199	; 0xc7
 800f7d0:	fa02 f205 	lsl.w	r2, r2, r5
 800f7d4:	4425      	add	r5, r4
 800f7d6:	d803      	bhi.n	800f7e0 <E131Params::callbackFunction(char const*)+0x230>
 800f7d8:	2964      	cmp	r1, #100	; 0x64
 800f7da:	d001      	beq.n	800f7e0 <E131Params::callbackFunction(char const*)+0x230>
 800f7dc:	77e9      	strb	r1, [r5, #31]
 800f7de:	e776      	b.n	800f6ce <E131Params::callbackFunction(char const*)+0x11e>
 800f7e0:	2164      	movs	r1, #100	; 0x64
 800f7e2:	77e9      	strb	r1, [r5, #31]
 800f7e4:	ea23 0302 	bic.w	r3, r3, r2
 800f7e8:	e749      	b.n	800f67e <E131Params::callbackFunction(char const*)+0xce>
 800f7ea:	3501      	adds	r5, #1
 800f7ec:	2d04      	cmp	r5, #4
 800f7ee:	f109 0910 	add.w	r9, r9, #16
 800f7f2:	f108 0812 	add.w	r8, r8, #18
 800f7f6:	f47f af21 	bne.w	800f63c <E131Params::callbackFunction(char const*)+0x8c>
 800f7fa:	490e      	ldr	r1, [pc, #56]	; (800f834 <E131Params::callbackFunction(char const*)+0x284>)
 800f7fc:	f10d 0201 	add.w	r2, sp, #1
 800f800:	4630      	mov	r0, r6
 800f802:	f007 fff6 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f806:	2800      	cmp	r0, #0
 800f808:	f47f af04 	bne.w	800f614 <E131Params::callbackFunction(char const*)+0x64>
 800f80c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f810:	6863      	ldr	r3, [r4, #4]
 800f812:	b112      	cbz	r2, 800f81a <E131Params::callbackFunction(char const*)+0x26a>
 800f814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f818:	e731      	b.n	800f67e <E131Params::callbackFunction(char const*)+0xce>
 800f81a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f81e:	e72e      	b.n	800f67e <E131Params::callbackFunction(char const*)+0xce>
 800f820:	0801d96a 	stmdaeq	r1, {r1, r3, r5, r6, r8, fp, ip, lr, pc}
 800f824:	0801bd1a 	stmdaeq	r1, {r1, r3, r4, r8, sl, fp, ip, sp, pc}
 800f828:	0801bd1f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, sl, fp, ip, sp, pc}
 800f82c:	0801af66 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, fp, sp, pc}
 800f830:	0801bd23 	stmdaeq	r1, {r0, r1, r5, r8, sl, fp, ip, sp, pc}
 800f834:	0801d954 	stmdaeq	r1, {r2, r4, r6, r8, fp, ip, lr, pc}
 800f838:	0801d77a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, r9, sl, ip, lr, pc}
 800f83c:	0801bf8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sl, fp, ip, sp, pc}
 800f840:	0801d8fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, fp, ip, lr, pc}
 800f844:	0801d97c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, fp, ip, lr, pc}

0800f848 <E131Params::staticCallbackFunction(void*, char const*)>:
 800f848:	f7ff beb2 	b.w	800f5b0 <E131Params::callbackFunction(char const*)>

0800f84c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
 800f84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f850:	4604      	mov	r4, r0
 800f852:	b087      	sub	sp, #28
 800f854:	4615      	mov	r5, r2
 800f856:	461e      	mov	r6, r3
 800f858:	3004      	adds	r0, #4
 800f85a:	2900      	cmp	r1, #0
 800f85c:	d05f      	beq.n	800f91e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xd2>
 800f85e:	221f      	movs	r2, #31
 800f860:	f008 fd25 	bl	80182ae <memmove>
 800f864:	4633      	mov	r3, r6
 800f866:	462a      	mov	r2, r5
 800f868:	4990      	ldr	r1, [pc, #576]	; (800faac <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x260>)
 800f86a:	4f91      	ldr	r7, [pc, #580]	; (800fab0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x264>)
 800f86c:	4e91      	ldr	r6, [pc, #580]	; (800fab4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x268>)
 800f86e:	f8df 8280 	ldr.w	r8, [pc, #640]	; 800faf0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a4>
 800f872:	f8df 9278 	ldr.w	r9, [pc, #632]	; 800faec <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>
 800f876:	a803      	add	r0, sp, #12
 800f878:	f007 fde6 	bl	8017448 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800f87c:	2500      	movs	r5, #0
 800f87e:	f8d8 2000 	ldr.w	r2, [r8]
 800f882:	6863      	ldr	r3, [r4, #4]
 800f884:	42aa      	cmp	r2, r5
 800f886:	d851      	bhi.n	800f92c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xe0>
 800f888:	f8b4 1009 	ldrh.w	r1, [r4, #9]
 800f88c:	4a8a      	ldr	r2, [pc, #552]	; (800fab8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x26c>)
 800f88e:	4e8b      	ldr	r6, [pc, #556]	; (800fabc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800f890:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f894:	498a      	ldr	r1, [pc, #552]	; (800fac0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800f896:	f8df 925c 	ldr.w	r9, [pc, #604]	; 800faf4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a8>
 800f89a:	f8df a25c 	ldr.w	sl, [pc, #604]	; 800faf8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2ac>
 800f89e:	f003 0301 	and.w	r3, r3, #1
 800f8a2:	a803      	add	r0, sp, #12
 800f8a4:	f7ff fe18 	bl	800f4d8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800f8a8:	4986      	ldr	r1, [pc, #536]	; (800fac4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800f8aa:	a803      	add	r0, sp, #12
 800f8ac:	f007 fe52 	bl	8017554 <PropertiesBuilder::AddComment(char const*)>
 800f8b0:	f104 0713 	add.w	r7, r4, #19
 800f8b4:	2500      	movs	r5, #0
 800f8b6:	f44f 7b80 	mov.w	fp, #256	; 0x100
 800f8ba:	f8d8 3000 	ldr.w	r3, [r8]
 800f8be:	42ab      	cmp	r3, r5
 800f8c0:	d87f      	bhi.n	800f9c2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x176>
 800f8c2:	4981      	ldr	r1, [pc, #516]	; (800fac8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800f8c4:	4e81      	ldr	r6, [pc, #516]	; (800facc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800f8c6:	f8df a21c 	ldr.w	sl, [pc, #540]	; 800fae4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>
 800f8ca:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800fad8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>
 800f8ce:	a803      	add	r0, sp, #12
 800f8d0:	f007 fe40 	bl	8017554 <PropertiesBuilder::AddComment(char const*)>
 800f8d4:	f104 091e 	add.w	r9, r4, #30
 800f8d8:	2700      	movs	r7, #0
 800f8da:	f8d8 3000 	ldr.w	r3, [r8]
 800f8de:	42bb      	cmp	r3, r7
 800f8e0:	f200 8083 	bhi.w	800f9ea <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x19e>
 800f8e4:	497a      	ldr	r1, [pc, #488]	; (800fad0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800f8e6:	a803      	add	r0, sp, #12
 800f8e8:	f007 fe34 	bl	8017554 <PropertiesBuilder::AddComment(char const*)>
 800f8ec:	6863      	ldr	r3, [r4, #4]
 800f8ee:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f8f2:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800f8f6:	42a2      	cmp	r2, r4
 800f8f8:	f080 80b8 	bcs.w	800fa6c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x220>
 800f8fc:	9803      	ldr	r0, [sp, #12]
 800f8fe:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800f902:	4410      	add	r0, r2
 800f904:	eba4 0402 	sub.w	r4, r4, r2
 800f908:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800f90c:	f040 809d 	bne.w	800fa4a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1fe>
 800f910:	2a00      	cmp	r2, #0
 800f912:	f040 809b 	bne.w	800fa4c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x200>
 800f916:	9200      	str	r2, [sp, #0]
 800f918:	4b6e      	ldr	r3, [pc, #440]	; (800fad4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800f91a:	4a6f      	ldr	r2, [pc, #444]	; (800fad8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800f91c:	e09c      	b.n	800fa58 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800f91e:	6823      	ldr	r3, [r4, #0]
 800f920:	681a      	ldr	r2, [r3, #0]
 800f922:	4601      	mov	r1, r0
 800f924:	68d2      	ldr	r2, [r2, #12]
 800f926:	4618      	mov	r0, r3
 800f928:	4790      	blx	r2
 800f92a:	e79b      	b.n	800f864 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x18>
 800f92c:	f8bd c012 	ldrh.w	ip, [sp, #18]
 800f930:	f8bd b010 	ldrh.w	fp, [sp, #16]
 800f934:	eb04 0245 	add.w	r2, r4, r5, lsl #1
 800f938:	45dc      	cmp	ip, fp
 800f93a:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800f93e:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800f942:	d221      	bcs.n	800f988 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x13c>
 800f944:	2110      	movs	r1, #16
 800f946:	9803      	ldr	r0, [sp, #12]
 800f948:	40a9      	lsls	r1, r5
 800f94a:	ea31 0303 	bics.w	r3, r1, r3
 800f94e:	4460      	add	r0, ip
 800f950:	ebab 0b0c 	sub.w	fp, fp, ip
 800f954:	f89d c014 	ldrb.w	ip, [sp, #20]
 800f958:	d006      	beq.n	800f968 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 800f95a:	f1bc 0f00 	cmp.w	ip, #0
 800f95e:	d106      	bne.n	800f96e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x122>
 800f960:	9200      	str	r2, [sp, #0]
 800f962:	4633      	mov	r3, r6
 800f964:	4a5c      	ldr	r2, [pc, #368]	; (800fad8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800f966:	e005      	b.n	800f974 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800f968:	f1bc 0f00 	cmp.w	ip, #0
 800f96c:	d023      	beq.n	800f9b6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x16a>
 800f96e:	9200      	str	r2, [sp, #0]
 800f970:	4633      	mov	r3, r6
 800f972:	464a      	mov	r2, r9
 800f974:	4659      	mov	r1, fp
 800f976:	f7fa fdc3 	bl	800a500 <snprintf>
 800f97a:	4583      	cmp	fp, r0
 800f97c:	bfa2      	ittt	ge
 800f97e:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800f982:	18c0      	addge	r0, r0, r3
 800f984:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800f988:	f8b4 301d 	ldrh.w	r3, [r4, #29]
 800f98c:	fa23 f30a 	lsr.w	r3, r3, sl
 800f990:	f013 0303 	ands.w	r3, r3, #3
 800f994:	d013      	beq.n	800f9be <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x172>
 800f996:	4a51      	ldr	r2, [pc, #324]	; (800fadc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800f998:	4951      	ldr	r1, [pc, #324]	; (800fae0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800f99a:	2b02      	cmp	r3, #2
 800f99c:	bf08      	it	eq
 800f99e:	460a      	moveq	r2, r1
 800f9a0:	3b01      	subs	r3, #1
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	bf18      	it	ne
 800f9a6:	2301      	movne	r3, #1
 800f9a8:	a803      	add	r0, sp, #12
 800f9aa:	f7ff fd95 	bl	800f4d8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800f9ae:	3501      	adds	r5, #1
 800f9b0:	3712      	adds	r7, #18
 800f9b2:	3610      	adds	r6, #16
 800f9b4:	e763      	b.n	800f87e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x32>
 800f9b6:	9200      	str	r2, [sp, #0]
 800f9b8:	4633      	mov	r3, r6
 800f9ba:	4a4a      	ldr	r2, [pc, #296]	; (800fae4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800f9bc:	e7da      	b.n	800f974 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800f9be:	4a4a      	ldr	r2, [pc, #296]	; (800fae8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800f9c0:	e7ee      	b.n	800f9a0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x154>
 800f9c2:	6861      	ldr	r1, [r4, #4]
 800f9c4:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800f9c8:	fa0b f305 	lsl.w	r3, fp, r5
 800f9cc:	438b      	bics	r3, r1
 800f9ce:	bf0c      	ite	eq
 800f9d0:	2301      	moveq	r3, #1
 800f9d2:	2300      	movne	r3, #0
 800f9d4:	4631      	mov	r1, r6
 800f9d6:	2a00      	cmp	r2, #0
 800f9d8:	bf0c      	ite	eq
 800f9da:	464a      	moveq	r2, r9
 800f9dc:	4652      	movne	r2, sl
 800f9de:	a803      	add	r0, sp, #12
 800f9e0:	f7ff fd7a 	bl	800f4d8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800f9e4:	3501      	adds	r5, #1
 800f9e6:	3612      	adds	r6, #18
 800f9e8:	e767      	b.n	800f8ba <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x6e>
 800f9ea:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800f9ee:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800f9f2:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800f9f6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800f9fa:	42a9      	cmp	r1, r5
 800f9fc:	d21e      	bcs.n	800fa3c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f0>
 800f9fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fa02:	9803      	ldr	r0, [sp, #12]
 800fa04:	40ba      	lsls	r2, r7
 800fa06:	ea32 0c0c 	bics.w	ip, r2, ip
 800fa0a:	4408      	add	r0, r1
 800fa0c:	eba5 0501 	sub.w	r5, r5, r1
 800fa10:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800fa14:	d004      	beq.n	800fa20 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d4>
 800fa16:	b921      	cbnz	r1, 800fa22 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d6>
 800fa18:	9300      	str	r3, [sp, #0]
 800fa1a:	465a      	mov	r2, fp
 800fa1c:	4633      	mov	r3, r6
 800fa1e:	e003      	b.n	800fa28 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800fa20:	b179      	cbz	r1, 800fa42 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f6>
 800fa22:	4a32      	ldr	r2, [pc, #200]	; (800faec <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800fa24:	9300      	str	r3, [sp, #0]
 800fa26:	4633      	mov	r3, r6
 800fa28:	4629      	mov	r1, r5
 800fa2a:	f7fa fd69 	bl	800a500 <snprintf>
 800fa2e:	4285      	cmp	r5, r0
 800fa30:	bfa2      	ittt	ge
 800fa32:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800fa36:	18c0      	addge	r0, r0, r3
 800fa38:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800fa3c:	3701      	adds	r7, #1
 800fa3e:	3612      	adds	r6, #18
 800fa40:	e74b      	b.n	800f8da <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800fa42:	9300      	str	r3, [sp, #0]
 800fa44:	4652      	mov	r2, sl
 800fa46:	4633      	mov	r3, r6
 800fa48:	e7ee      	b.n	800fa28 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800fa4a:	b34a      	cbz	r2, 800faa0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x254>
 800fa4c:	3b00      	subs	r3, #0
 800fa4e:	bf18      	it	ne
 800fa50:	2301      	movne	r3, #1
 800fa52:	9300      	str	r3, [sp, #0]
 800fa54:	4a25      	ldr	r2, [pc, #148]	; (800faec <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800fa56:	4b1f      	ldr	r3, [pc, #124]	; (800fad4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800fa58:	4621      	mov	r1, r4
 800fa5a:	f7fa fd51 	bl	800a500 <snprintf>
 800fa5e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fa62:	4284      	cmp	r4, r0
 800fa64:	bfa4      	itt	ge
 800fa66:	181b      	addge	r3, r3, r0
 800fa68:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800fa6c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800fa70:	b17b      	cbz	r3, 800fa92 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800fa72:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800fa76:	9b03      	ldr	r3, [sp, #12]
 800fa78:	4413      	add	r3, r2
 800fa7a:	227d      	movs	r2, #125	; 0x7d
 800fa7c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800fa80:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fa84:	9903      	ldr	r1, [sp, #12]
 800fa86:	54ca      	strb	r2, [r1, r3]
 800fa88:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	f8ad 3012 	strh.w	r3, [sp, #18]
 800fa92:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800fa96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa98:	601a      	str	r2, [r3, #0]
 800fa9a:	b007      	add	sp, #28
 800fa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa0:	2301      	movs	r3, #1
 800faa2:	9300      	str	r3, [sp, #0]
 800faa4:	4a0f      	ldr	r2, [pc, #60]	; (800fae4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800faa6:	4b0b      	ldr	r3, [pc, #44]	; (800fad4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800faa8:	e7d6      	b.n	800fa58 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800faaa:	bf00      	nop
 800faac:	0801bfd4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 800fab0:	0801d97c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, fp, ip, lr, pc}
 800fab4:	0801d77a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, r9, sl, ip, lr, pc}
 800fab8:	0801bf7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 800fabc:	0801d8fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, fp, ip, lr, pc}
 800fac0:	0801d96a 	stmdaeq	r1, {r1, r3, r5, r6, r8, fp, ip, lr, pc}
 800fac4:	0801bf67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 800fac8:	0801bf72 	stmdaeq	r1, {r1, r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 800facc:	0801bf8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sl, fp, ip, sp, pc}
 800fad0:	0801ab61 	stmdaeq	r1, {r0, r5, r6, r8, r9, fp, sp, pc}
 800fad4:	0801d954 	stmdaeq	r1, {r2, r4, r6, r8, fp, ip, lr, pc}
 800fad8:	0801ada1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, sp, pc}
 800fadc:	0801bd37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, sl, fp, ip, sp, pc}
 800fae0:	0801bd3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp, pc}
 800fae4:	0801ada2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, sp, pc}
 800fae8:	0801bd31 	stmdaeq	r1, {r0, r4, r5, r8, sl, fp, ip, sp, pc}
 800faec:	0801ad98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, sp, pc}
 800faf0:	200006e8 	andcs	r0, r0, r8, ror #13
 800faf4:	0801bd4a 	stmdaeq	r1, {r1, r3, r6, r8, sl, fp, ip, sp, pc}
 800faf8:	0801bd46 	stmdaeq	r1, {r1, r2, r6, r8, sl, fp, ip, sp, pc}

0800fafc <E131Params::Save(char*, unsigned int, unsigned int&)>:
 800fafc:	b513      	push	{r0, r1, r4, lr}
 800fafe:	6804      	ldr	r4, [r0, #0]
 800fb00:	b914      	cbnz	r4, 800fb08 <E131Params::Save(char*, unsigned int, unsigned int&)+0xc>
 800fb02:	601c      	str	r4, [r3, #0]
 800fb04:	b002      	add	sp, #8
 800fb06:	bd10      	pop	{r4, pc}
 800fb08:	9300      	str	r3, [sp, #0]
 800fb0a:	4613      	mov	r3, r2
 800fb0c:	460a      	mov	r2, r1
 800fb0e:	2100      	movs	r1, #0
 800fb10:	f7ff fe9c 	bl	800f84c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>
 800fb14:	e7f6      	b.n	800fb04 <E131Params::Save(char*, unsigned int, unsigned int&)+0x8>

0800fb16 <LLRPDevice::~LLRPDevice()>:
 800fb16:	4770      	bx	lr

0800fb18 <LLRPDevice::CopyUID(unsigned char*)>:
 800fb18:	4770      	bx	lr

0800fb1a <LLRPDevice::CopyCID(unsigned char*)>:
 800fb1a:	4770      	bx	lr

0800fb1c <LLRPDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 800fb1c:	2000      	movs	r0, #0
 800fb1e:	4770      	bx	lr

0800fb20 <LLRPDevice::~LLRPDevice()>:
 800fb20:	b510      	push	{r4, lr}
 800fb22:	4604      	mov	r4, r0
 800fb24:	f008 fb00 	bl	8018128 <operator delete(void*)>
 800fb28:	4620      	mov	r0, r4
 800fb2a:	bd10      	pop	{r4, pc}

0800fb2c <memcpy.isra.0>:
 800fb2c:	3801      	subs	r0, #1
 800fb2e:	440a      	add	r2, r1
 800fb30:	4291      	cmp	r1, r2
 800fb32:	d100      	bne.n	800fb36 <memcpy.isra.0+0xa>
 800fb34:	4770      	bx	lr
 800fb36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb3a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800fb3e:	e7f7      	b.n	800fb30 <memcpy.isra.0+0x4>

0800fb40 <LLRPDevice::LLRPDevice()>:
 800fb40:	b513      	push	{r0, r1, r4, lr}
 800fb42:	4b0a      	ldr	r3, [pc, #40]	; (800fb6c <LLRPDevice::LLRPDevice()+0x2c>)
 800fb44:	6003      	str	r3, [r0, #0]
 800fb46:	4604      	mov	r4, r0
 800fb48:	a901      	add	r1, sp, #4
 800fb4a:	4809      	ldr	r0, [pc, #36]	; (800fb70 <LLRPDevice::LLRPDevice()+0x30>)
 800fb4c:	f008 faf4 	bl	8018138 <inet_aton>
 800fb50:	4b08      	ldr	r3, [pc, #32]	; (800fb74 <LLRPDevice::LLRPDevice()+0x34>)
 800fb52:	9a01      	ldr	r2, [sp, #4]
 800fb54:	4808      	ldr	r0, [pc, #32]	; (800fb78 <LLRPDevice::LLRPDevice()+0x38>)
 800fb56:	601a      	str	r2, [r3, #0]
 800fb58:	a901      	add	r1, sp, #4
 800fb5a:	f008 faed 	bl	8018138 <inet_aton>
 800fb5e:	4b07      	ldr	r3, [pc, #28]	; (800fb7c <LLRPDevice::LLRPDevice()+0x3c>)
 800fb60:	9a01      	ldr	r2, [sp, #4]
 800fb62:	601a      	str	r2, [r3, #0]
 800fb64:	4620      	mov	r0, r4
 800fb66:	b002      	add	sp, #8
 800fb68:	bd10      	pop	{r4, pc}
 800fb6a:	bf00      	nop
 800fb6c:	0801c09c 	stmdaeq	r1, {r2, r3, r4, r7, lr, pc}
 800fb70:	0801bfeb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 800fb74:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800fb78:	0801bffb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 800fb7c:	200006f4 	strdcs	r0, [r0], -r4

0800fb80 <LLRPDevice::HandleRequestMessage()>:
 800fb80:	b530      	push	{r4, r5, lr}
 800fb82:	4b24      	ldr	r3, [pc, #144]	; (800fc14 <LLRPDevice::HandleRequestMessage()+0x94>)
 800fb84:	681c      	ldr	r4, [r3, #0]
 800fb86:	b089      	sub	sp, #36	; 0x24
 800fb88:	2210      	movs	r2, #16
 800fb8a:	4605      	mov	r5, r0
 800fb8c:	f104 0117 	add.w	r1, r4, #23
 800fb90:	eb0d 0002 	add.w	r0, sp, r2
 800fb94:	9103      	str	r1, [sp, #12]
 800fb96:	f7ff ffc9 	bl	800fb2c <memcpy.isra.0>
 800fb9a:	2343      	movs	r3, #67	; 0x43
 800fb9c:	74a3      	strb	r3, [r4, #18]
 800fb9e:	682b      	ldr	r3, [r5, #0]
 800fba0:	9903      	ldr	r1, [sp, #12]
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	4628      	mov	r0, r5
 800fba6:	4798      	blx	r3
 800fba8:	232c      	movs	r3, #44	; 0x2c
 800fbaa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800fbae:	2300      	movs	r3, #0
 800fbb0:	2210      	movs	r2, #16
 800fbb2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 800fbb6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
 800fbba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800fbbe:	2302      	movs	r3, #2
 800fbc0:	eb0d 0102 	add.w	r1, sp, r2
 800fbc4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fbc8:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 800fbcc:	f7ff ffae 	bl	800fb2c <memcpy.isra.0>
 800fbd0:	2311      	movs	r3, #17
 800fbd2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fbdc:	682b      	ldr	r3, [r5, #0]
 800fbde:	f104 0146 	add.w	r1, r4, #70	; 0x46
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	689b      	ldr	r3, [r3, #8]
 800fbe6:	4798      	blx	r3
 800fbe8:	4b0b      	ldr	r3, [pc, #44]	; (800fc18 <LLRPDevice::HandleRequestMessage()+0x98>)
 800fbea:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800fbee:	6818      	ldr	r0, [r3, #0]
 800fbf0:	f004 ffeb 	bl	8014bca <Network::MacAddressCopyTo(unsigned char*)>
 800fbf4:	23ff      	movs	r3, #255	; 0xff
 800fbf6:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 800fbfa:	f241 53c1 	movw	r3, #5569	; 0x15c1
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	4806      	ldr	r0, [pc, #24]	; (800fc1c <LLRPDevice::HandleRequestMessage()+0x9c>)
 800fc02:	4b07      	ldr	r3, [pc, #28]	; (800fc20 <LLRPDevice::HandleRequestMessage()+0xa0>)
 800fc04:	7800      	ldrb	r0, [r0, #0]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	2253      	movs	r2, #83	; 0x53
 800fc0a:	4621      	mov	r1, r4
 800fc0c:	f004 fb0a 	bl	8014224 <udp_send>
 800fc10:	b009      	add	sp, #36	; 0x24
 800fc12:	bd30      	pop	{r4, r5, pc}
 800fc14:	200006f8 	strdcs	r0, [r0], -r8
 800fc18:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 800fc1c:	20000000 	andcs	r0, r0, r0
 800fc20:	200006f4 	strdcs	r0, [r0], -r4

0800fc24 <LLRPDevice::HandleRdmCommand()>:
 800fc24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc28:	4b23      	ldr	r3, [pc, #140]	; (800fcb8 <LLRPDevice::HandleRdmCommand()+0x94>)
 800fc2a:	681c      	ldr	r4, [r3, #0]
 800fc2c:	6803      	ldr	r3, [r0, #0]
 800fc2e:	f104 0946 	add.w	r9, r4, #70	; 0x46
 800fc32:	691b      	ldr	r3, [r3, #16]
 800fc34:	b089      	sub	sp, #36	; 0x24
 800fc36:	4649      	mov	r1, r9
 800fc38:	4607      	mov	r7, r0
 800fc3a:	4798      	blx	r3
 800fc3c:	4605      	mov	r5, r0
 800fc3e:	2800      	cmp	r0, #0
 800fc40:	d036      	beq.n	800fcb0 <LLRPDevice::HandleRdmCommand()+0x8c>
 800fc42:	7803      	ldrb	r3, [r0, #0]
 800fc44:	2bcc      	cmp	r3, #204	; 0xcc
 800fc46:	d133      	bne.n	800fcb0 <LLRPDevice::HandleRdmCommand()+0x8c>
 800fc48:	2210      	movs	r2, #16
 800fc4a:	eb0d 0002 	add.w	r0, sp, r2
 800fc4e:	f104 0117 	add.w	r1, r4, #23
 800fc52:	9103      	str	r1, [sp, #12]
 800fc54:	f7ff ff6a 	bl	800fb2c <memcpy.isra.0>
 800fc58:	78ae      	ldrb	r6, [r5, #2]
 800fc5a:	9903      	ldr	r1, [sp, #12]
 800fc5c:	f106 0837 	add.w	r8, r6, #55	; 0x37
 800fc60:	fa5f f888 	uxtb.w	r8, r8
 800fc64:	f884 8012 	strb.w	r8, [r4, #18]
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	4638      	mov	r0, r7
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	4798      	blx	r3
 800fc70:	f106 0320 	add.w	r3, r6, #32
 800fc74:	2210      	movs	r2, #16
 800fc76:	eb0d 0102 	add.w	r1, sp, r2
 800fc7a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800fc7e:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 800fc82:	f7ff ff53 	bl	800fb2c <memcpy.isra.0>
 800fc86:	1d73      	adds	r3, r6, #5
 800fc88:	1c72      	adds	r2, r6, #1
 800fc8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800fc8e:	b2d2      	uxtb	r2, r2
 800fc90:	1c69      	adds	r1, r5, #1
 800fc92:	4648      	mov	r0, r9
 800fc94:	f7ff ff4a 	bl	800fb2c <memcpy.isra.0>
 800fc98:	f241 53c1 	movw	r3, #5569	; 0x15c1
 800fc9c:	9300      	str	r3, [sp, #0]
 800fc9e:	4807      	ldr	r0, [pc, #28]	; (800fcbc <LLRPDevice::HandleRdmCommand()+0x98>)
 800fca0:	4b07      	ldr	r3, [pc, #28]	; (800fcc0 <LLRPDevice::HandleRdmCommand()+0x9c>)
 800fca2:	7800      	ldrb	r0, [r0, #0]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f108 0210 	add.w	r2, r8, #16
 800fcaa:	4621      	mov	r1, r4
 800fcac:	f004 faba 	bl	8014224 <udp_send>
 800fcb0:	b009      	add	sp, #36	; 0x24
 800fcb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcb6:	bf00      	nop
 800fcb8:	200006f8 	strdcs	r0, [r0], -r8
 800fcbc:	20000000 	andcs	r0, r0, r0
 800fcc0:	200006f4 	strdcs	r0, [r0], -r4

0800fcc4 <LLRPDevice::Run()>:
 800fcc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fcc6:	4d0f      	ldr	r5, [pc, #60]	; (800fd04 <LLRPDevice::Run()+0x40>)
 800fcc8:	4a0f      	ldr	r2, [pc, #60]	; (800fd08 <LLRPDevice::Run()+0x44>)
 800fcca:	4604      	mov	r4, r0
 800fccc:	480f      	ldr	r0, [pc, #60]	; (800fd0c <LLRPDevice::Run()+0x48>)
 800fcce:	f10d 0306 	add.w	r3, sp, #6
 800fcd2:	7800      	ldrb	r0, [r0, #0]
 800fcd4:	4629      	mov	r1, r5
 800fcd6:	f004 fa7f 	bl	80141d8 <udp_recv2>
 800fcda:	2841      	cmp	r0, #65	; 0x41
 800fcdc:	d908      	bls.n	800fcf0 <LLRPDevice::Run()+0x2c>
 800fcde:	682b      	ldr	r3, [r5, #0]
 800fce0:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800fce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fce8:	ba1a      	rev	r2, r3
 800fcea:	d003      	beq.n	800fcf4 <LLRPDevice::Run()+0x30>
 800fcec:	2a03      	cmp	r2, #3
 800fcee:	d005      	beq.n	800fcfc <LLRPDevice::Run()+0x38>
 800fcf0:	b003      	add	sp, #12
 800fcf2:	bd30      	pop	{r4, r5, pc}
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	f7ff ff43 	bl	800fb80 <LLRPDevice::HandleRequestMessage()>
 800fcfa:	e7f9      	b.n	800fcf0 <LLRPDevice::Run()+0x2c>
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	f7ff ff91 	bl	800fc24 <LLRPDevice::HandleRdmCommand()>
 800fd02:	e7f5      	b.n	800fcf0 <LLRPDevice::Run()+0x2c>
 800fd04:	200006f8 	strdcs	r0, [r0], -r8
 800fd08:	200006ec 	andcs	r0, r0, ip, ror #13
 800fd0c:	20000000 	andcs	r0, r0, r0

0800fd10 <LLRPDevice::Print()>:
 800fd10:	b507      	push	{r0, r1, r2, lr}
 800fd12:	4811      	ldr	r0, [pc, #68]	; (800fd58 <LLRPDevice::Print()+0x48>)
 800fd14:	f7fa fbcc 	bl	800a4b0 <printf>
 800fd18:	f241 51c1 	movw	r1, #5569	; 0x15c1
 800fd1c:	480f      	ldr	r0, [pc, #60]	; (800fd5c <LLRPDevice::Print()+0x4c>)
 800fd1e:	f7fa fbc7 	bl	800a4b0 <printf>
 800fd22:	4b0f      	ldr	r3, [pc, #60]	; (800fd60 <LLRPDevice::Print()+0x50>)
 800fd24:	480f      	ldr	r0, [pc, #60]	; (800fd64 <LLRPDevice::Print()+0x54>)
 800fd26:	6819      	ldr	r1, [r3, #0]
 800fd28:	0e0b      	lsrs	r3, r1, #24
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800fd30:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fd34:	b2c9      	uxtb	r1, r1
 800fd36:	f7fa fbbb 	bl	800a4b0 <printf>
 800fd3a:	4b0b      	ldr	r3, [pc, #44]	; (800fd68 <LLRPDevice::Print()+0x58>)
 800fd3c:	480b      	ldr	r0, [pc, #44]	; (800fd6c <LLRPDevice::Print()+0x5c>)
 800fd3e:	6819      	ldr	r1, [r3, #0]
 800fd40:	0e0b      	lsrs	r3, r1, #24
 800fd42:	9300      	str	r3, [sp, #0]
 800fd44:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800fd48:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fd4c:	b2c9      	uxtb	r1, r1
 800fd4e:	f7fa fbaf 	bl	800a4b0 <printf>
 800fd52:	b003      	add	sp, #12
 800fd54:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd58:	0801c00b 	stmdaeq	r1, {r0, r1, r3, lr, pc}
 800fd5c:	0801c026 	stmdaeq	r1, {r1, r2, r5, lr, pc}
 800fd60:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800fd64:	0801c044 	stmdaeq	r1, {r2, r6, lr, pc}
 800fd68:	200006f4 	strdcs	r0, [r0], -r4
 800fd6c:	0801c06b 	stmdaeq	r1, {r0, r1, r3, r5, r6, lr, pc}

0800fd70 <RDMNetDevice::Print()>:
 800fd70:	b510      	push	{r4, lr}
 800fd72:	b08a      	sub	sp, #40	; 0x28
 800fd74:	2300      	movs	r3, #0
 800fd76:	4604      	mov	r4, r0
 800fd78:	4669      	mov	r1, sp
 800fd7a:	480a      	ldr	r0, [pc, #40]	; (800fda4 <RDMNetDevice::Print()+0x34>)
 800fd7c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800fd80:	f001 f944 	bl	801100c <uuid_unparse>
 800fd84:	4808      	ldr	r0, [pc, #32]	; (800fda8 <RDMNetDevice::Print()+0x38>)
 800fd86:	f7fa fb93 	bl	800a4b0 <printf>
 800fd8a:	4669      	mov	r1, sp
 800fd8c:	4807      	ldr	r0, [pc, #28]	; (800fdac <RDMNetDevice::Print()+0x3c>)
 800fd8e:	f7fa fb8f 	bl	800a4b0 <printf>
 800fd92:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 800fd96:	f7ff ffbb 	bl	800fd10 <LLRPDevice::Print()>
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f000 fa36 	bl	801020c <RDMDeviceResponder::Print()>
 800fda0:	b00a      	add	sp, #40	; 0x28
 800fda2:	bd10      	pop	{r4, pc}
 800fda4:	200007fd 	strdcs	r0, [r0], -sp
 800fda8:	0801c0e2 	stmdaeq	r1, {r1, r5, r6, r7, lr, pc}
 800fdac:	0801c0ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, lr, pc}

0800fdb0 <RDMSensors::RDMSensors()>:
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	6002      	str	r2, [r0, #0]
 800fdb4:	7102      	strb	r2, [r0, #4]
 800fdb6:	4a01      	ldr	r2, [pc, #4]	; (800fdbc <RDMSensors::RDMSensors()+0xc>)
 800fdb8:	6010      	str	r0, [r2, #0]
 800fdba:	4770      	bx	lr
 800fdbc:	20000810 	andcs	r0, r0, r0, lsl r8

0800fdc0 <RDMSensors::~RDMSensors()>:
 800fdc0:	b570      	push	{r4, r5, r6, lr}
 800fdc2:	2500      	movs	r5, #0
 800fdc4:	4604      	mov	r4, r0
 800fdc6:	462e      	mov	r6, r5
 800fdc8:	7923      	ldrb	r3, [r4, #4]
 800fdca:	6820      	ldr	r0, [r4, #0]
 800fdcc:	42ab      	cmp	r3, r5
 800fdce:	d804      	bhi.n	800fdda <RDMSensors::~RDMSensors()+0x1a>
 800fdd0:	b108      	cbz	r0, 800fdd6 <RDMSensors::~RDMSensors()+0x16>
 800fdd2:	f008 f9ab 	bl	801812c <operator delete[](void*)>
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	bd70      	pop	{r4, r5, r6, pc}
 800fdda:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800fdde:	b128      	cbz	r0, 800fdec <RDMSensors::~RDMSensors()+0x2c>
 800fde0:	6803      	ldr	r3, [r0, #0]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	4798      	blx	r3
 800fde6:	6823      	ldr	r3, [r4, #0]
 800fde8:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 800fdec:	3501      	adds	r5, #1
 800fdee:	e7eb      	b.n	800fdc8 <RDMSensors::~RDMSensors()+0x8>

0800fdf0 <RDMSubDevices::RDMSubDevices()>:
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	6002      	str	r2, [r0, #0]
 800fdf4:	8082      	strh	r2, [r0, #4]
 800fdf6:	4a01      	ldr	r2, [pc, #4]	; (800fdfc <RDMSubDevices::RDMSubDevices()+0xc>)
 800fdf8:	6010      	str	r0, [r2, #0]
 800fdfa:	4770      	bx	lr
 800fdfc:	20000814 	andcs	r0, r0, r4, lsl r8

0800fe00 <RDMSubDevices::~RDMSubDevices()>:
 800fe00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe02:	2500      	movs	r5, #0
 800fe04:	4604      	mov	r4, r0
 800fe06:	462e      	mov	r6, r5
 800fe08:	88a3      	ldrh	r3, [r4, #4]
 800fe0a:	6820      	ldr	r0, [r4, #0]
 800fe0c:	42ab      	cmp	r3, r5
 800fe0e:	d804      	bhi.n	800fe1a <RDMSubDevices::~RDMSubDevices()+0x1a>
 800fe10:	b108      	cbz	r0, 800fe16 <RDMSubDevices::~RDMSubDevices()+0x16>
 800fe12:	f008 f98b 	bl	801812c <operator delete[](void*)>
 800fe16:	4620      	mov	r0, r4
 800fe18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe1a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800fe1e:	00af      	lsls	r7, r5, #2
 800fe20:	b110      	cbz	r0, 800fe28 <RDMSubDevices::~RDMSubDevices()+0x28>
 800fe22:	6803      	ldr	r3, [r0, #0]
 800fe24:	685b      	ldr	r3, [r3, #4]
 800fe26:	4798      	blx	r3
 800fe28:	6823      	ldr	r3, [r4, #0]
 800fe2a:	3501      	adds	r5, #1
 800fe2c:	51de      	str	r6, [r3, r7]
 800fe2e:	e7eb      	b.n	800fe08 <RDMSubDevices::~RDMSubDevices()+0x8>

0800fe30 <RDMSubDevices::GetInfo(unsigned short)>:
 800fe30:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800fe34:	6803      	ldr	r3, [r0, #0]
 800fe36:	3901      	subs	r1, #1
 800fe38:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800fe3c:	3010      	adds	r0, #16
 800fe3e:	4770      	bx	lr

0800fe40 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 800fe40:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800fe44:	6800      	ldr	r0, [r0, #0]
 800fe46:	3b01      	subs	r3, #1
 800fe48:	4611      	mov	r1, r2
 800fe4a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fe4e:	f000 b830 	b.w	800feb2 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

0800fe52 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 800fe52:	b410      	push	{r4}
 800fe54:	460c      	mov	r4, r1
 800fe56:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800fe5a:	3c01      	subs	r4, #1
 800fe5c:	6800      	ldr	r0, [r0, #0]
 800fe5e:	4611      	mov	r1, r2
 800fe60:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800fe64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe68:	461a      	mov	r2, r3
 800fe6a:	f000 b837 	b.w	800fedc <RDMSubDevice::SetLabel(char const*, unsigned char)>

0800fe6e <RDMSubDevices::GetFactoryDefaults()>:
 800fe6e:	b538      	push	{r3, r4, r5, lr}
 800fe70:	4605      	mov	r5, r0
 800fe72:	2400      	movs	r4, #0
 800fe74:	88ab      	ldrh	r3, [r5, #4]
 800fe76:	42a3      	cmp	r3, r4
 800fe78:	d801      	bhi.n	800fe7e <RDMSubDevices::GetFactoryDefaults()+0x10>
 800fe7a:	2001      	movs	r0, #1
 800fe7c:	e009      	b.n	800fe92 <RDMSubDevices::GetFactoryDefaults()+0x24>
 800fe7e:	682b      	ldr	r3, [r5, #0]
 800fe80:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fe84:	b908      	cbnz	r0, 800fe8a <RDMSubDevices::GetFactoryDefaults()+0x1c>
 800fe86:	3401      	adds	r4, #1
 800fe88:	e7f4      	b.n	800fe74 <RDMSubDevices::GetFactoryDefaults()+0x6>
 800fe8a:	f000 f85c 	bl	800ff46 <RDMSubDevice::GetFactoryDefaults()>
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	d1f9      	bne.n	800fe86 <RDMSubDevices::GetFactoryDefaults()+0x18>
 800fe92:	bd38      	pop	{r3, r4, r5, pc}

0800fe94 <RDMSubDevices::SetFactoryDefaults()>:
 800fe94:	b538      	push	{r3, r4, r5, lr}
 800fe96:	4605      	mov	r5, r0
 800fe98:	2400      	movs	r4, #0
 800fe9a:	88ab      	ldrh	r3, [r5, #4]
 800fe9c:	42a3      	cmp	r3, r4
 800fe9e:	d800      	bhi.n	800fea2 <RDMSubDevices::SetFactoryDefaults()+0xe>
 800fea0:	bd38      	pop	{r3, r4, r5, pc}
 800fea2:	682b      	ldr	r3, [r5, #0]
 800fea4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fea8:	b108      	cbz	r0, 800feae <RDMSubDevices::SetFactoryDefaults()+0x1a>
 800feaa:	f000 f826 	bl	800fefa <RDMSubDevice::SetFactoryDefaults()>
 800feae:	3401      	adds	r4, #1
 800feb0:	e7f3      	b.n	800fe9a <RDMSubDevices::SetFactoryDefaults()+0x6>

0800feb2 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 800feb2:	f100 0316 	add.w	r3, r0, #22
 800feb6:	600b      	str	r3, [r1, #0]
 800feb8:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800febc:	710b      	strb	r3, [r1, #4]
 800febe:	4770      	bx	lr

0800fec0 <RDMSubDevice::SetLabel(char const*)>:
 800fec0:	b510      	push	{r4, lr}
 800fec2:	2300      	movs	r3, #0
 800fec4:	f100 0415 	add.w	r4, r0, #21
 800fec8:	5cca      	ldrb	r2, [r1, r3]
 800feca:	b122      	cbz	r2, 800fed6 <RDMSubDevice::SetLabel(char const*)+0x16>
 800fecc:	3301      	adds	r3, #1
 800fece:	2b20      	cmp	r3, #32
 800fed0:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fed4:	d1f8      	bne.n	800fec8 <RDMSubDevice::SetLabel(char const*)+0x8>
 800fed6:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 800feda:	bd10      	pop	{r4, pc}

0800fedc <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 800fedc:	b530      	push	{r4, r5, lr}
 800fede:	2300      	movs	r3, #0
 800fee0:	f100 0415 	add.w	r4, r0, #21
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d905      	bls.n	800fef4 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 800fee8:	5ccd      	ldrb	r5, [r1, r3]
 800feea:	f804 5f01 	strb.w	r5, [r4, #1]!
 800feee:	3301      	adds	r3, #1
 800fef0:	2b20      	cmp	r3, #32
 800fef2:	d1f7      	bne.n	800fee4 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 800fef4:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 800fef8:	bd30      	pop	{r4, r5, pc}

0800fefa <RDMSubDevice::SetFactoryDefaults()>:
 800fefa:	7a03      	ldrb	r3, [r0, #8]
 800fefc:	b510      	push	{r4, lr}
 800fefe:	b94b      	cbnz	r3, 800ff14 <RDMSubDevice::SetFactoryDefaults()+0x1a>
 800ff00:	f100 0138 	add.w	r1, r0, #56	; 0x38
 800ff04:	f7ff ffdc 	bl	800fec0 <RDMSubDevice::SetLabel(char const*)>
 800ff08:	8983      	ldrh	r3, [r0, #12]
 800ff0a:	8243      	strh	r3, [r0, #18]
 800ff0c:	7b83      	ldrb	r3, [r0, #14]
 800ff0e:	7503      	strb	r3, [r0, #20]
 800ff10:	2301      	movs	r3, #1
 800ff12:	7203      	strb	r3, [r0, #8]
 800ff14:	bd10      	pop	{r4, pc}

0800ff16 <RDMSubDevice::CalculateChecksum()>:
 800ff16:	b510      	push	{r4, lr}
 800ff18:	8a43      	ldrh	r3, [r0, #18]
 800ff1a:	7d02      	ldrb	r2, [r0, #20]
 800ff1c:	f890 4036 	ldrb.w	r4, [r0, #54]	; 0x36
 800ff20:	4413      	add	r3, r2
 800ff22:	f100 0215 	add.w	r2, r0, #21
 800ff26:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
 800ff2a:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	30eb      	adds	r0, #235	; 0xeb
 800ff32:	1881      	adds	r1, r0, r2
 800ff34:	428c      	cmp	r4, r1
 800ff36:	d801      	bhi.n	800ff3c <RDMSubDevice::CalculateChecksum()+0x26>
 800ff38:	4618      	mov	r0, r3
 800ff3a:	bd10      	pop	{r4, pc}
 800ff3c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800ff40:	440b      	add	r3, r1
 800ff42:	b29b      	uxth	r3, r3
 800ff44:	e7f5      	b.n	800ff32 <RDMSubDevice::CalculateChecksum()+0x1c>

0800ff46 <RDMSubDevice::GetFactoryDefaults()>:
 800ff46:	7a03      	ldrb	r3, [r0, #8]
 800ff48:	b510      	push	{r4, lr}
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	b133      	cbz	r3, 800ff5c <RDMSubDevice::GetFactoryDefaults()+0x16>
 800ff4e:	f7ff ffe2 	bl	800ff16 <RDMSubDevice::CalculateChecksum()>
 800ff52:	8963      	ldrh	r3, [r4, #10]
 800ff54:	4283      	cmp	r3, r0
 800ff56:	bf1c      	itt	ne
 800ff58:	2300      	movne	r3, #0
 800ff5a:	7223      	strbne	r3, [r4, #8]
 800ff5c:	7a20      	ldrb	r0, [r4, #8]
 800ff5e:	bd10      	pop	{r4, pc}

0800ff60 <memcpy.isra.0>:
 800ff60:	f008 b99a 	b.w	8018298 <memcpy>

0800ff64 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 800ff64:	b510      	push	{r4, lr}
 800ff66:	6001      	str	r1, [r0, #0]
 800ff68:	2100      	movs	r1, #0
 800ff6a:	4604      	mov	r4, r0
 800ff6c:	6041      	str	r1, [r0, #4]
 800ff6e:	2220      	movs	r2, #32
 800ff70:	3008      	adds	r0, #8
 800ff72:	f008 f9b3 	bl	80182dc <memset>
 800ff76:	4b03      	ldr	r3, [pc, #12]	; (800ff84 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 800ff78:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff7a:	237f      	movs	r3, #127	; 0x7f
 800ff7c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800ff80:	4620      	mov	r0, r4
 800ff82:	bd10      	pop	{r4, pc}
 800ff84:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

0800ff88 <RDMDeviceParams::Load()>:
 800ff88:	4601      	mov	r1, r0
 800ff8a:	6800      	ldr	r0, [r0, #0]
 800ff8c:	b130      	cbz	r0, 800ff9c <RDMDeviceParams::Load()+0x14>
 800ff8e:	b508      	push	{r3, lr}
 800ff90:	6803      	ldr	r3, [r0, #0]
 800ff92:	3104      	adds	r1, #4
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	4798      	blx	r3
 800ff98:	2001      	movs	r0, #1
 800ff9a:	bd08      	pop	{r3, pc}
 800ff9c:	4770      	bx	lr

0800ff9e <RDMDeviceParams::Set(RDMDevice*)>:
 800ff9e:	6843      	ldr	r3, [r0, #4]
 800ffa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa4:	460c      	mov	r4, r1
 800ffa6:	07d9      	lsls	r1, r3, #31
 800ffa8:	4605      	mov	r5, r0
 800ffaa:	d518      	bpl.n	800ffde <RDMDeviceParams::Set(RDMDevice*)+0x40>
 800ffac:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 800ffb0:	7823      	ldrb	r3, [r4, #0]
 800ffb2:	2e20      	cmp	r6, #32
 800ffb4:	f100 0108 	add.w	r1, r0, #8
 800ffb8:	bf28      	it	cs
 800ffba:	2620      	movcs	r6, #32
 800ffbc:	b1f3      	cbz	r3, 800fffc <RDMDeviceParams::Set(RDMDevice*)+0x5e>
 800ffbe:	f104 070b 	add.w	r7, r4, #11
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	4632      	mov	r2, r6
 800ffc6:	f7ff ffcb 	bl	800ff60 <memcpy.isra.0>
 800ffca:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ffcc:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
 800ffd0:	b128      	cbz	r0, 800ffde <RDMDeviceParams::Set(RDMDevice*)+0x40>
 800ffd2:	6802      	ldr	r2, [r0, #0]
 800ffd4:	4639      	mov	r1, r7
 800ffd6:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800ffda:	4632      	mov	r2, r6
 800ffdc:	47c0      	blx	r8
 800ffde:	686b      	ldr	r3, [r5, #4]
 800ffe0:	079a      	lsls	r2, r3, #30
 800ffe2:	bf44      	itt	mi
 800ffe4:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 800ffe8:	f8a4 204e 	strhmi.w	r2, [r4, #78]	; 0x4e
 800ffec:	075b      	lsls	r3, r3, #29
 800ffee:	bf44      	itt	mi
 800fff0:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 800fff4:	f8a4 3050 	strhmi.w	r3, [r4, #80]	; 0x50
 800fff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fffc:	4632      	mov	r2, r6
 800fffe:	f104 0052 	add.w	r0, r4, #82	; 0x52
 8010002:	f7ff ffad 	bl	800ff60 <memcpy.isra.0>
 8010006:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
 801000a:	e7e8      	b.n	800ffde <RDMDeviceParams::Set(RDMDevice*)+0x40>

0801000c <RDMDeviceParams::Dump()>:
 801000c:	4770      	bx	lr

0801000e <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 801000e:	4770      	bx	lr

08010010 <RDMDeviceResponder::DmxStartAddressUpdate()>:
 8010010:	4770      	bx	lr
	...

08010014 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8010014:	b510      	push	{r4, lr}
 8010016:	4b06      	ldr	r3, [pc, #24]	; (8010030 <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 8010018:	4604      	mov	r4, r0
 801001a:	f840 3b8c 	str.w	r3, [r0], #140
 801001e:	f7ff feef 	bl	800fe00 <RDMSubDevices::~RDMSubDevices()>
 8010022:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8010026:	f7ff fecb 	bl	800fdc0 <RDMSensors::~RDMSensors()>
 801002a:	4620      	mov	r0, r4
 801002c:	bd10      	pop	{r4, pc}
 801002e:	bf00      	nop
 8010030:	0801c1b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, lr, pc}

08010034 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8010034:	b510      	push	{r4, lr}
 8010036:	4604      	mov	r4, r0
 8010038:	f7ff ffec 	bl	8010014 <RDMDeviceResponder::~RDMDeviceResponder()>
 801003c:	4620      	mov	r0, r4
 801003e:	f008 f873 	bl	8018128 <operator delete(void*)>
 8010042:	4620      	mov	r0, r4
 8010044:	bd10      	pop	{r4, pc}
	...

08010048 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
 8010048:	b570      	push	{r4, r5, r6, lr}
 801004a:	4604      	mov	r4, r0
 801004c:	3004      	adds	r0, #4
 801004e:	460e      	mov	r6, r1
 8010050:	4615      	mov	r5, r2
 8010052:	f000 fee1 	bl	8010e18 <RDMDevice::RDMDevice()>
 8010056:	4620      	mov	r0, r4
 8010058:	4b20      	ldr	r3, [pc, #128]	; (80100dc <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x94>)
 801005a:	f840 3b80 	str.w	r3, [r0], #128
 801005e:	f000 fceb 	bl	8010a38 <RDMIdentify::RDMIdentify()>
 8010062:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8010066:	f7ff fea3 	bl	800fdb0 <RDMSensors::RDMSensors()>
 801006a:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801006e:	f7ff febf 	bl	800fdf0 <RDMSubDevices::RDMSubDevices()>
 8010072:	4b1b      	ldr	r3, [pc, #108]	; (80100e0 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x98>)
 8010074:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 8010078:	601c      	str	r4, [r3, #0]
 801007a:	2365      	movs	r3, #101	; 0x65
 801007c:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
 8010080:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8010084:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8010088:	2301      	movs	r3, #1
 801008a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 801008e:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 8010092:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 8010096:	2100      	movs	r1, #0
 8010098:	4293      	cmp	r3, r2
 801009a:	d119      	bne.n	80100d0 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x88>
 801009c:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 80100a0:	2100      	movs	r1, #0
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d117      	bne.n	80100d6 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x8e>
 80100a6:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 80100aa:	f7f9 ff01 	bl	8009eb0 <RDMSoftwareVersion::GetVersion()>
 80100ae:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 80100b2:	f7f9 ff01 	bl	8009eb8 <RDMSoftwareVersion::GetVersionLength()>
 80100b6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80100ba:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	b91b      	cbnz	r3, 80100cc <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x84>
 80100c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80100c8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 80100cc:	4620      	mov	r0, r4
 80100ce:	bd70      	pop	{r4, r5, r6, pc}
 80100d0:	f803 1b01 	strb.w	r1, [r3], #1
 80100d4:	e7e0      	b.n	8010098 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x50>
 80100d6:	f803 1b01 	strb.w	r1, [r3], #1
 80100da:	e7e2      	b.n	80100a2 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x5a>
 80100dc:	0801c1b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, lr, pc}
 80100e0:	20000818 	andcs	r0, r0, r8, lsl r8

080100e4 <RDMDeviceResponder::Init()>:
 80100e4:	b570      	push	{r4, r5, r6, lr}
 80100e6:	2301      	movs	r3, #1
 80100e8:	4604      	mov	r4, r0
 80100ea:	7103      	strb	r3, [r0, #4]
 80100ec:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80100f0:	2a20      	cmp	r2, #32
 80100f2:	bf28      	it	cs
 80100f4:	2220      	movcs	r2, #32
 80100f6:	3056      	adds	r0, #86	; 0x56
 80100f8:	f104 010f 	add.w	r1, r4, #15
 80100fc:	4613      	mov	r3, r2
 80100fe:	3b01      	subs	r3, #1
 8010100:	d25d      	bcs.n	80101be <RDMDeviceResponder::Init()+0xda>
 8010102:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8010104:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
 8010108:	b110      	cbz	r0, 8010110 <RDMDeviceResponder::Init()+0x2c>
 801010a:	6803      	ldr	r3, [r0, #0]
 801010c:	689b      	ldr	r3, [r3, #8]
 801010e:	4798      	blx	r3
 8010110:	f06f 050d 	mvn.w	r5, #13
 8010114:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8010118:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 801011c:	f104 020e 	add.w	r2, r4, #14
 8010120:	1b2d      	subs	r5, r5, r4
 8010122:	18a9      	adds	r1, r5, r2
 8010124:	4288      	cmp	r0, r1
 8010126:	d84f      	bhi.n	80101c8 <RDMDeviceResponder::Init()+0xe4>
 8010128:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 801012c:	f7f9 fec6 	bl	8009ebc <RDMSoftwareVersion::GetVersionId()>
 8010130:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8010134:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8010138:	2201      	movs	r2, #1
 801013a:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 801013e:	2200      	movs	r2, #0
 8010140:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 8010144:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
 8010148:	0a1a      	lsrs	r2, r3, #8
 801014a:	0e03      	lsrs	r3, r0, #24
 801014c:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8010150:	0c03      	lsrs	r3, r0, #16
 8010152:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 8010156:	0a03      	lsrs	r3, r0, #8
 8010158:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801015c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8010160:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
 8010164:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f8b4 6090 	ldrh.w	r6, [r4, #144]	; 0x90
 801016e:	685d      	ldr	r5, [r3, #4]
 8010170:	bb7d      	cbnz	r5, 80101d2 <RDMDeviceResponder::Init()+0xee>
 8010172:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
 8010176:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 801017a:	0a03      	lsrs	r3, r0, #8
 801017c:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 8010180:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 8010184:	2301      	movs	r3, #1
 8010186:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 801018a:	0a33      	lsrs	r3, r6, #8
 801018c:	b2c0      	uxtb	r0, r0
 801018e:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8010192:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8010196:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 801019a:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 801019e:	f884 60ae 	strb.w	r6, [r4, #174]	; 0xae
 80101a2:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 80101a6:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d12a      	bne.n	8010204 <RDMDeviceResponder::Init()+0x120>
 80101ae:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80101b2:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 80101b6:	4413      	add	r3, r2
 80101b8:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 80101bc:	bd70      	pop	{r4, r5, r6, pc}
 80101be:	f810 5b01 	ldrb.w	r5, [r0], #1
 80101c2:	f800 5c48 	strb.w	r5, [r0, #-72]
 80101c6:	e79a      	b.n	80100fe <RDMDeviceResponder::Init()+0x1a>
 80101c8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80101cc:	440b      	add	r3, r1
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	e7a7      	b.n	8010122 <RDMDeviceResponder::Init()+0x3e>
 80101d2:	682b      	ldr	r3, [r5, #0]
 80101d4:	4628      	mov	r0, r5
 80101d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101d8:	4798      	blx	r3
 80101da:	0a00      	lsrs	r0, r0, #8
 80101dc:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 80101e0:	682b      	ldr	r3, [r5, #0]
 80101e2:	4628      	mov	r0, r5
 80101e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101e6:	4798      	blx	r3
 80101e8:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 80101ec:	682b      	ldr	r3, [r5, #0]
 80101ee:	4628      	mov	r0, r5
 80101f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f2:	4798      	blx	r3
 80101f4:	0a00      	lsrs	r0, r0, #8
 80101f6:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 80101fa:	682b      	ldr	r3, [r5, #0]
 80101fc:	4628      	mov	r0, r5
 80101fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010200:	4798      	blx	r3
 8010202:	e7bf      	b.n	8010184 <RDMDeviceResponder::Init()+0xa0>
 8010204:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010208:	7499      	strb	r1, [r3, #18]
 801020a:	e7ce      	b.n	80101aa <RDMDeviceResponder::Init()+0xc6>

0801020c <RDMDeviceResponder::Print()>:
 801020c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801020e:	4604      	mov	r4, r0
 8010210:	3004      	adds	r0, #4
 8010212:	f000 fe75 	bl	8010f00 <RDMDevice::Print()>
 8010216:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801021a:	481c      	ldr	r0, [pc, #112]	; (801028c <RDMDeviceResponder::Print()+0x80>)
 801021c:	681d      	ldr	r5, [r3, #0]
 801021e:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8010220:	f7fa f946 	bl	800a4b0 <printf>
 8010224:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
 8010228:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
 801022c:	4818      	ldr	r0, [pc, #96]	; (8010290 <RDMDeviceResponder::Print()+0x84>)
 801022e:	f7fa f93f 	bl	800a4b0 <printf>
 8010232:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8010236:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 801023a:	4816      	ldr	r0, [pc, #88]	; (8010294 <RDMDeviceResponder::Print()+0x88>)
 801023c:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8010240:	f7fa f936 	bl	800a4b0 <printf>
 8010244:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8010248:	f894 10a7 	ldrb.w	r1, [r4, #167]	; 0xa7
 801024c:	4812      	ldr	r0, [pc, #72]	; (8010298 <RDMDeviceResponder::Print()+0x8c>)
 801024e:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8010252:	3508      	adds	r5, #8
 8010254:	f7fa f92c 	bl	800a4b0 <printf>
 8010258:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
 801025c:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 8010260:	9500      	str	r5, [sp, #0]
 8010262:	b2f3      	uxtb	r3, r6
 8010264:	480d      	ldr	r0, [pc, #52]	; (801029c <RDMDeviceResponder::Print()+0x90>)
 8010266:	f7fa f923 	bl	800a4b0 <printf>
 801026a:	f894 10ad 	ldrb.w	r1, [r4, #173]	; 0xad
 801026e:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 8010272:	480b      	ldr	r0, [pc, #44]	; (80102a0 <RDMDeviceResponder::Print()+0x94>)
 8010274:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8010278:	f7fa f91a 	bl	800a4b0 <printf>
 801027c:	f894 10af 	ldrb.w	r1, [r4, #175]	; 0xaf
 8010280:	4808      	ldr	r0, [pc, #32]	; (80102a4 <RDMDeviceResponder::Print()+0x98>)
 8010282:	b002      	add	sp, #8
 8010284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010288:	f7fa b912 	b.w	800a4b0 <printf>
 801028c:	0801c0f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, lr, pc}
 8010290:	0801c112 	stmdaeq	r1, {r1, r4, r8, lr, pc}
 8010294:	0801c12b 	stmdaeq	r1, {r0, r1, r3, r5, r8, lr, pc}
 8010298:	0801c143 	stmdaeq	r1, {r0, r1, r6, r8, lr, pc}
 801029c:	0801c15b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, lr, pc}
 80102a0:	0801c179 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, lr, pc}
 80102a4:	0801c191 	stmdaeq	r1, {r0, r4, r7, r8, lr, pc}

080102a8 <memcmp>:
 80102a8:	b510      	push	{r4, lr}
 80102aa:	3901      	subs	r1, #1
 80102ac:	4402      	add	r2, r0
 80102ae:	4290      	cmp	r0, r2
 80102b0:	d101      	bne.n	80102b6 <memcmp+0xe>
 80102b2:	2000      	movs	r0, #0
 80102b4:	e005      	b.n	80102c2 <memcmp+0x1a>
 80102b6:	7803      	ldrb	r3, [r0, #0]
 80102b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80102bc:	42a3      	cmp	r3, r4
 80102be:	d001      	beq.n	80102c4 <memcmp+0x1c>
 80102c0:	1b18      	subs	r0, r3, r4
 80102c2:	bd10      	pop	{r4, pc}
 80102c4:	3001      	adds	r0, #1
 80102c6:	e7f2      	b.n	80102ae <memcmp+0x6>

080102c8 <memcpy.isra.0>:
 80102c8:	3801      	subs	r0, #1
 80102ca:	440a      	add	r2, r1
 80102cc:	4291      	cmp	r1, r2
 80102ce:	d100      	bne.n	80102d2 <memcpy.isra.0+0xa>
 80102d0:	4770      	bx	lr
 80102d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102d6:	f800 3f01 	strb.w	r3, [r0, #1]!
 80102da:	e7f7      	b.n	80102cc <memcpy.isra.0+0x4>

080102dc <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 80102dc:	b570      	push	{r4, r5, r6, lr}
 80102de:	790d      	ldrb	r5, [r1, #4]
 80102e0:	7803      	ldrb	r3, [r0, #0]
 80102e2:	6809      	ldr	r1, [r1, #0]
 80102e4:	2d20      	cmp	r5, #32
 80102e6:	4604      	mov	r4, r0
 80102e8:	bf28      	it	cs
 80102ea:	2520      	movcs	r5, #32
 80102ec:	b18b      	cbz	r3, 8010312 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x36>
 80102ee:	f100 060b 	add.w	r6, r0, #11
 80102f2:	4630      	mov	r0, r6
 80102f4:	462a      	mov	r2, r5
 80102f6:	f7ff ffe7 	bl	80102c8 <memcpy.isra.0>
 80102fa:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80102fc:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
 8010300:	b168      	cbz	r0, 801031e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x42>
 8010302:	6802      	ldr	r2, [r0, #0]
 8010304:	6894      	ldr	r4, [r2, #8]
 8010306:	4631      	mov	r1, r6
 8010308:	462a      	mov	r2, r5
 801030a:	4623      	mov	r3, r4
 801030c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010310:	4718      	bx	r3
 8010312:	462a      	mov	r2, r5
 8010314:	3052      	adds	r0, #82	; 0x52
 8010316:	f7ff ffd7 	bl	80102c8 <memcpy.isra.0>
 801031a:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
 801031e:	bd70      	pop	{r4, r5, r6, pc}

08010320 <RDMDeviceResponder::SetFactoryDefaults()>:
 8010320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010322:	f100 0356 	add.w	r3, r0, #86	; 0x56
 8010326:	4604      	mov	r4, r0
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	4669      	mov	r1, sp
 801032c:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
 8010330:	f88d 3004 	strb.w	r3, [sp, #4]
 8010334:	3004      	adds	r0, #4
 8010336:	f7ff ffd1 	bl	80102dc <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 801033a:	f06f 050d 	mvn.w	r5, #13
 801033e:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8010342:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8010346:	f104 020e 	add.w	r2, r4, #14
 801034a:	1b2d      	subs	r5, r5, r4
 801034c:	18a8      	adds	r0, r5, r2
 801034e:	4288      	cmp	r0, r1
 8010350:	d361      	bcc.n	8010416 <RDMDeviceResponder::SetFactoryDefaults()+0xf6>
 8010352:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 8010356:	2301      	movs	r3, #1
 8010358:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 801035c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	685d      	ldr	r5, [r3, #4]
 8010364:	b1f5      	cbz	r5, 80103a4 <RDMDeviceResponder::SetFactoryDefaults()+0x84>
 8010366:	682b      	ldr	r3, [r5, #0]
 8010368:	4628      	mov	r0, r5
 801036a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801036c:	4798      	blx	r3
 801036e:	0a00      	lsrs	r0, r0, #8
 8010370:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 8010374:	682b      	ldr	r3, [r5, #0]
 8010376:	4628      	mov	r0, r5
 8010378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801037a:	4798      	blx	r3
 801037c:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 8010380:	682b      	ldr	r3, [r5, #0]
 8010382:	4628      	mov	r0, r5
 8010384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010386:	4798      	blx	r3
 8010388:	0a00      	lsrs	r0, r0, #8
 801038a:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 801038e:	682b      	ldr	r3, [r5, #0]
 8010390:	4628      	mov	r0, r5
 8010392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010394:	4798      	blx	r3
 8010396:	6823      	ldr	r3, [r4, #0]
 8010398:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 801039c:	689b      	ldr	r3, [r3, #8]
 801039e:	4629      	mov	r1, r5
 80103a0:	4620      	mov	r0, r4
 80103a2:	4798      	blx	r3
 80103a4:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
 80103a8:	1e6b      	subs	r3, r5, #1
 80103aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103ae:	d218      	bcs.n	80103e2 <RDMDeviceResponder::SetFactoryDefaults()+0xc2>
 80103b0:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 80103b4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80103b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80103bc:	3b01      	subs	r3, #1
 80103be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103c2:	6858      	ldr	r0, [r3, #4]
 80103c4:	b168      	cbz	r0, 80103e2 <RDMDeviceResponder::SetFactoryDefaults()+0xc2>
 80103c6:	6803      	ldr	r3, [r0, #0]
 80103c8:	4629      	mov	r1, r5
 80103ca:	6a1b      	ldr	r3, [r3, #32]
 80103cc:	4798      	blx	r3
 80103ce:	b120      	cbz	r0, 80103da <RDMDeviceResponder::SetFactoryDefaults()+0xba>
 80103d0:	0a2b      	lsrs	r3, r5, #8
 80103d2:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 80103d6:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 80103da:	6823      	ldr	r3, [r4, #0]
 80103dc:	4620      	mov	r0, r4
 80103de:	68db      	ldr	r3, [r3, #12]
 80103e0:	4798      	blx	r3
 80103e2:	2213      	movs	r2, #19
 80103e4:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 80103e8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 80103ec:	f7ff ff6c 	bl	80102c8 <memcpy.isra.0>
 80103f0:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80103f4:	f7ff fd4e 	bl	800fe94 <RDMSubDevices::SetFactoryDefaults()>
 80103f8:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80103fc:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8010400:	4413      	add	r3, r2
 8010402:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8010406:	2301      	movs	r3, #1
 8010408:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 801040c:	b003      	add	sp, #12
 801040e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010412:	f7f9 bd35 	b.w	8009e80 <rdm::device::responder::factorydefaults()>
 8010416:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801041a:	4403      	add	r3, r0
 801041c:	b29b      	uxth	r3, r3
 801041e:	e795      	b.n	801034c <RDMDeviceResponder::SetFactoryDefaults()+0x2c>

08010420 <RDMHandler::RDMHandler(bool)>:
 8010420:	2200      	movs	r2, #0
 8010422:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8010426:	7001      	strb	r1, [r0, #0]
 8010428:	7042      	strb	r2, [r0, #1]
 801042a:	4770      	bx	lr

0801042c <RDMHandler::HandleString(char const*, unsigned int)>:
 801042c:	6883      	ldr	r3, [r0, #8]
 801042e:	f803 2f17 	strb.w	r2, [r3, #23]!
 8010432:	440a      	add	r2, r1
 8010434:	4291      	cmp	r1, r2
 8010436:	d100      	bne.n	801043a <RDMHandler::HandleString(char const*, unsigned int)+0xe>
 8010438:	4770      	bx	lr
 801043a:	f811 0b01 	ldrb.w	r0, [r1], #1
 801043e:	f803 0f01 	strb.w	r0, [r3, #1]!
 8010442:	e7f7      	b.n	8010434 <RDMHandler::HandleString(char const*, unsigned int)+0x8>

08010444 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 8010444:	b570      	push	{r4, r5, r6, lr}
 8010446:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 801044a:	25cc      	movs	r5, #204	; 0xcc
 801044c:	701d      	strb	r5, [r3, #0]
 801044e:	7825      	ldrb	r5, [r4, #0]
 8010450:	705d      	strb	r5, [r3, #1]
 8010452:	7ba5      	ldrb	r5, [r4, #14]
 8010454:	73dd      	strb	r5, [r3, #15]
 8010456:	2500      	movs	r5, #0
 8010458:	745d      	strb	r5, [r3, #17]
 801045a:	7c65      	ldrb	r5, [r4, #17]
 801045c:	749d      	strb	r5, [r3, #18]
 801045e:	7ca5      	ldrb	r5, [r4, #18]
 8010460:	74dd      	strb	r5, [r3, #19]
 8010462:	7ce5      	ldrb	r5, [r4, #19]
 8010464:	3501      	adds	r5, #1
 8010466:	751d      	strb	r5, [r3, #20]
 8010468:	7d25      	ldrb	r5, [r4, #20]
 801046a:	755d      	strb	r5, [r3, #21]
 801046c:	7d65      	ldrb	r5, [r4, #21]
 801046e:	759d      	strb	r5, [r3, #22]
 8010470:	b119      	cbz	r1, 801047a <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 8010472:	1e4d      	subs	r5, r1, #1
 8010474:	2d01      	cmp	r5, #1
 8010476:	d921      	bls.n	80104bc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x78>
 8010478:	bd70      	pop	{r4, r5, r6, pc}
 801047a:	7dda      	ldrb	r2, [r3, #23]
 801047c:	7419      	strb	r1, [r3, #16]
 801047e:	3218      	adds	r2, #24
 8010480:	709a      	strb	r2, [r3, #2]
 8010482:	4a15      	ldr	r2, [pc, #84]	; (80104d8 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x94>)
 8010484:	6812      	ldr	r2, [r2, #0]
 8010486:	1de1      	adds	r1, r4, #7
 8010488:	1c9d      	adds	r5, r3, #2
 801048a:	3204      	adds	r2, #4
 801048c:	340d      	adds	r4, #13
 801048e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8010492:	f805 6f01 	strb.w	r6, [r5, #1]!
 8010496:	42a1      	cmp	r1, r4
 8010498:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 801049c:	71ae      	strb	r6, [r5, #6]
 801049e:	d1f6      	bne.n	801048e <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4a>
 80104a0:	2200      	movs	r2, #0
 80104a2:	6884      	ldr	r4, [r0, #8]
 80104a4:	7899      	ldrb	r1, [r3, #2]
 80104a6:	4613      	mov	r3, r2
 80104a8:	428a      	cmp	r2, r1
 80104aa:	eb04 0502 	add.w	r5, r4, r2
 80104ae:	d30e      	bcc.n	80104ce <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8a>
 80104b0:	0a1a      	lsrs	r2, r3, #8
 80104b2:	702a      	strb	r2, [r5, #0]
 80104b4:	6882      	ldr	r2, [r0, #8]
 80104b6:	440a      	add	r2, r1
 80104b8:	7053      	strb	r3, [r2, #1]
 80104ba:	e7dd      	b.n	8010478 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 80104bc:	7419      	strb	r1, [r3, #16]
 80104be:	2102      	movs	r1, #2
 80104c0:	251a      	movs	r5, #26
 80104c2:	75d9      	strb	r1, [r3, #23]
 80104c4:	0a11      	lsrs	r1, r2, #8
 80104c6:	709d      	strb	r5, [r3, #2]
 80104c8:	7619      	strb	r1, [r3, #24]
 80104ca:	765a      	strb	r2, [r3, #25]
 80104cc:	e7d9      	b.n	8010482 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 80104ce:	5ca5      	ldrb	r5, [r4, r2]
 80104d0:	442b      	add	r3, r5
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	3201      	adds	r2, #1
 80104d6:	e7e7      	b.n	80104a8 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x64>
 80104d8:	20000818 	andcs	r0, r0, r8, lsl r8

080104dc <RDMHandler::RespondMessageAck()>:
 80104dc:	6843      	ldr	r3, [r0, #4]
 80104de:	7d9a      	ldrb	r2, [r3, #22]
 80104e0:	b90a      	cbnz	r2, 80104e6 <RDMHandler::RespondMessageAck()+0xa>
 80104e2:	2218      	movs	r2, #24
 80104e4:	705a      	strb	r2, [r3, #1]
 80104e6:	2200      	movs	r2, #0
 80104e8:	4611      	mov	r1, r2
 80104ea:	f7ff bfab 	b.w	8010444 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

080104f0 <RDMHandler::GetDeviceInfo(unsigned short)>:
 80104f0:	b538      	push	{r3, r4, r5, lr}
 80104f2:	4b18      	ldr	r3, [pc, #96]	; (8010554 <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 80104f4:	4605      	mov	r5, r0
 80104f6:	681c      	ldr	r4, [r3, #0]
 80104f8:	b349      	cbz	r1, 801054e <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 80104fa:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80104fe:	f7ff fc97 	bl	800fe30 <RDMSubDevices::GetInfo(unsigned short)>
 8010502:	b1b8      	cbz	r0, 8010534 <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 8010504:	8803      	ldrh	r3, [r0, #0]
 8010506:	0a1b      	lsrs	r3, r3, #8
 8010508:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 801050c:	8803      	ldrh	r3, [r0, #0]
 801050e:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 8010512:	7903      	ldrb	r3, [r0, #4]
 8010514:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8010518:	7943      	ldrb	r3, [r0, #5]
 801051a:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 801051e:	8843      	ldrh	r3, [r0, #2]
 8010520:	0a1b      	lsrs	r3, r3, #8
 8010522:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 8010526:	8843      	ldrh	r3, [r0, #2]
 8010528:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 801052c:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8010530:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
 8010534:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8010538:	68a8      	ldr	r0, [r5, #8]
 801053a:	2213      	movs	r2, #19
 801053c:	75c2      	strb	r2, [r0, #23]
 801053e:	3018      	adds	r0, #24
 8010540:	f7ff fec2 	bl	80102c8 <memcpy.isra.0>
 8010544:	4628      	mov	r0, r5
 8010546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801054a:	f7ff bfc7 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 801054e:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 8010552:	e7f1      	b.n	8010538 <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 8010554:	20000818 	andcs	r0, r0, r8, lsl r8

08010558 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 8010558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801055a:	6886      	ldr	r6, [r0, #8]
 801055c:	2301      	movs	r3, #1
 801055e:	75f3      	strb	r3, [r6, #23]
 8010560:	4b1c      	ldr	r3, [pc, #112]	; (80105d4 <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 8010562:	681c      	ldr	r4, [r3, #0]
 8010564:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8010568:	4605      	mov	r5, r0
 801056a:	b37b      	cbz	r3, 80105cc <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 801056c:	f06f 0c0d 	mvn.w	ip, #13
 8010570:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
 8010574:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8010578:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 801057c:	f104 020e 	add.w	r2, r4, #14
 8010580:	ebac 0c04 	sub.w	ip, ip, r4
 8010584:	eb0c 0702 	add.w	r7, ip, r2
 8010588:	4287      	cmp	r7, r0
 801058a:	d30a      	bcc.n	80105a2 <RDMHandler::GetFactoryDefaults(unsigned short)+0x4a>
 801058c:	4299      	cmp	r1, r3
 801058e:	d00d      	beq.n	80105ac <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 8010590:	2300      	movs	r3, #0
 8010592:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 8010596:	7633      	strb	r3, [r6, #24]
 8010598:	4628      	mov	r0, r5
 801059a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801059e:	f7ff bf9d 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 80105a2:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 80105a6:	443b      	add	r3, r7
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	e7eb      	b.n	8010584 <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 80105ac:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80105b0:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 80105b4:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 80105b8:	440b      	add	r3, r1
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d1e8      	bne.n	8010590 <RDMHandler::GetFactoryDefaults(unsigned short)+0x38>
 80105be:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80105c2:	f7ff fc54 	bl	800fe6e <RDMSubDevices::GetFactoryDefaults()>
 80105c6:	4603      	mov	r3, r0
 80105c8:	2800      	cmp	r0, #0
 80105ca:	d0e2      	beq.n	8010592 <RDMHandler::GetFactoryDefaults(unsigned short)+0x3a>
 80105cc:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 80105d0:	e7e1      	b.n	8010596 <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 80105d2:	bf00      	nop
 80105d4:	20000818 	andcs	r0, r0, r8, lsl r8

080105d8 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 80105d8:	b510      	push	{r4, lr}
 80105da:	4905      	ldr	r1, [pc, #20]	; (80105f0 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 80105dc:	4604      	mov	r4, r0
 80105de:	220a      	movs	r2, #10
 80105e0:	f7ff ff24 	bl	801042c <RDMHandler::HandleString(char const*, unsigned int)>
 80105e4:	4620      	mov	r0, r4
 80105e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105ea:	f7ff bf77 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 80105ee:	bf00      	nop
 80105f0:	0801b146 	stmdaeq	r1, {r1, r2, r6, r8, ip, sp, pc}

080105f4 <RDMHandler::GetManufacturerLabel(unsigned short)>:
 80105f4:	b510      	push	{r4, lr}
 80105f6:	4b06      	ldr	r3, [pc, #24]	; (8010610 <RDMHandler::GetManufacturerLabel(unsigned short)+0x1c>)
 80105f8:	6819      	ldr	r1, [r3, #0]
 80105fa:	4604      	mov	r4, r0
 80105fc:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
 8010600:	3130      	adds	r1, #48	; 0x30
 8010602:	f7ff ff13 	bl	801042c <RDMHandler::HandleString(char const*, unsigned int)>
 8010606:	4620      	mov	r0, r4
 8010608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801060c:	f7ff bf66 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010610:	20000818 	andcs	r0, r0, r8, lsl r8

08010614 <RDMHandler::GetDeviceLabel(unsigned short)>:
 8010614:	4b0d      	ldr	r3, [pc, #52]	; (801064c <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 8010616:	b513      	push	{r0, r1, r4, lr}
 8010618:	4604      	mov	r4, r0
 801061a:	6818      	ldr	r0, [r3, #0]
 801061c:	b171      	cbz	r1, 801063c <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 801061e:	466a      	mov	r2, sp
 8010620:	308c      	adds	r0, #140	; 0x8c
 8010622:	f7ff fc0d 	bl	800fe40 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 8010626:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801062a:	9900      	ldr	r1, [sp, #0]
 801062c:	4620      	mov	r0, r4
 801062e:	f7ff fefd 	bl	801042c <RDMHandler::HandleString(char const*, unsigned int)>
 8010632:	4620      	mov	r0, r4
 8010634:	f7ff ff52 	bl	80104dc <RDMHandler::RespondMessageAck()>
 8010638:	b002      	add	sp, #8
 801063a:	bd10      	pop	{r4, pc}
 801063c:	f100 030f 	add.w	r3, r0, #15
 8010640:	9300      	str	r3, [sp, #0]
 8010642:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8010646:	f88d 3004 	strb.w	r3, [sp, #4]
 801064a:	e7ec      	b.n	8010626 <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 801064c:	20000818 	andcs	r0, r0, r8, lsl r8

08010650 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 8010650:	6883      	ldr	r3, [r0, #8]
 8010652:	2201      	movs	r2, #1
 8010654:	75da      	strb	r2, [r3, #23]
 8010656:	4a02      	ldr	r2, [pc, #8]	; (8010660 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 8010658:	7812      	ldrb	r2, [r2, #0]
 801065a:	761a      	strb	r2, [r3, #24]
 801065c:	f7ff bf3e 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010660:	2000081c 	andcs	r0, r0, ip, lsl r8

08010664 <RDMHandler::RespondMessageNack(unsigned short)>:
 8010664:	460a      	mov	r2, r1
 8010666:	2102      	movs	r1, #2
 8010668:	f7ff beec 	b.w	8010444 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

0801066c <RDMHandler::SetResetDevice(bool, unsigned short)>:
 801066c:	b510      	push	{r4, lr}
 801066e:	6843      	ldr	r3, [r0, #4]
 8010670:	7d9a      	ldrb	r2, [r3, #22]
 8010672:	2a01      	cmp	r2, #1
 8010674:	4604      	mov	r4, r0
 8010676:	d004      	beq.n	8010682 <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 8010678:	2101      	movs	r1, #1
 801067a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801067e:	f7ff bff1 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
 8010682:	7ddb      	ldrb	r3, [r3, #23]
 8010684:	2b01      	cmp	r3, #1
 8010686:	d003      	beq.n	8010690 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 8010688:	2bff      	cmp	r3, #255	; 0xff
 801068a:	d001      	beq.n	8010690 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 801068c:	2106      	movs	r1, #6
 801068e:	e7f4      	b.n	801067a <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8010690:	68a2      	ldr	r2, [r4, #8]
 8010692:	2100      	movs	r1, #0
 8010694:	2bff      	cmp	r3, #255	; 0xff
 8010696:	75d1      	strb	r1, [r2, #23]
 8010698:	d102      	bne.n	80106a0 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 801069a:	2104      	movs	r1, #4
 801069c:	4620      	mov	r0, r4
 801069e:	e7ec      	b.n	801067a <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 80106a0:	4b03      	ldr	r3, [pc, #12]	; (80106b0 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 80106a2:	6818      	ldr	r0, [r3, #0]
 80106a4:	f007 fd02 	bl	80180ac <Hardware::Reboot()>
 80106a8:	2800      	cmp	r0, #0
 80106aa:	d0f6      	beq.n	801069a <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 80106ac:	bd10      	pop	{r4, pc}
 80106ae:	bf00      	nop
 80106b0:	2000fda0 	andcs	pc, r0, r0, lsr #27

080106b4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 80106b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106b6:	6843      	ldr	r3, [r0, #4]
 80106b8:	460d      	mov	r5, r1
 80106ba:	7d99      	ldrb	r1, [r3, #22]
 80106bc:	2901      	cmp	r1, #1
 80106be:	4604      	mov	r4, r0
 80106c0:	d004      	beq.n	80106cc <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 80106c2:	2101      	movs	r1, #1
 80106c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80106c8:	f7ff bfcc 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
 80106cc:	7ddb      	ldrb	r3, [r3, #23]
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	d901      	bls.n	80106d6 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 80106d2:	2106      	movs	r1, #6
 80106d4:	e7f6      	b.n	80106c4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 80106d6:	4a12      	ldr	r2, [pc, #72]	; (8010720 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 80106d8:	4f12      	ldr	r7, [pc, #72]	; (8010724 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 80106da:	6816      	ldr	r6, [r2, #0]
 80106dc:	4a12      	ldr	r2, [pc, #72]	; (8010728 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 80106de:	6810      	ldr	r0, [r2, #0]
 80106e0:	4a12      	ldr	r2, [pc, #72]	; (801072c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 80106e2:	b983      	cbnz	r3, 8010706 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x52>
 80106e4:	2102      	movs	r1, #2
 80106e6:	7013      	strb	r3, [r2, #0]
 80106e8:	f007 fc20 	bl	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 80106ec:	7839      	ldrb	r1, [r7, #0]
 80106ee:	b111      	cbz	r1, 80106f6 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 80106f0:	4630      	mov	r0, r6
 80106f2:	f000 f9a8 	bl	8010a46 <RDMIdentify::Off(rdm::identify::Mode)>
 80106f6:	b98d      	cbnz	r5, 801071c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x68>
 80106f8:	68a3      	ldr	r3, [r4, #8]
 80106fa:	75dd      	strb	r5, [r3, #23]
 80106fc:	4620      	mov	r0, r4
 80106fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010702:	f7ff beeb 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010706:	7011      	strb	r1, [r2, #0]
 8010708:	2104      	movs	r1, #4
 801070a:	f007 fc0f 	bl	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 801070e:	7839      	ldrb	r1, [r7, #0]
 8010710:	2900      	cmp	r1, #0
 8010712:	d0f0      	beq.n	80106f6 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8010714:	4630      	mov	r0, r6
 8010716:	f000 f995 	bl	8010a44 <RDMIdentify::On(rdm::identify::Mode)>
 801071a:	e7ec      	b.n	80106f6 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 801071c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801071e:	bf00      	nop
 8010720:	20000820 	andcs	r0, r0, r0, lsr #16
 8010724:	2000081d 	andcs	r0, r0, sp, lsl r8
 8010728:	2000fd9c 	mulcs	r0, ip, sp
 801072c:	2000081c 	andcs	r0, r0, ip, lsl r8

08010730 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 8010730:	b538      	push	{r3, r4, r5, lr}
 8010732:	6843      	ldr	r3, [r0, #4]
 8010734:	7d9b      	ldrb	r3, [r3, #22]
 8010736:	4604      	mov	r4, r0
 8010738:	460d      	mov	r5, r1
 801073a:	b123      	cbz	r3, 8010746 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x16>
 801073c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010740:	2101      	movs	r1, #1
 8010742:	f7ff bf8f 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
 8010746:	4b06      	ldr	r3, [pc, #24]	; (8010760 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x30>)
 8010748:	6818      	ldr	r0, [r3, #0]
 801074a:	f7ff fde9 	bl	8010320 <RDMDeviceResponder::SetFactoryDefaults()>
 801074e:	b935      	cbnz	r5, 801075e <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x2e>
 8010750:	68a3      	ldr	r3, [r4, #8]
 8010752:	75dd      	strb	r5, [r3, #23]
 8010754:	4620      	mov	r0, r4
 8010756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801075a:	f7ff bebf 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 801075e:	bd38      	pop	{r3, r4, r5, pc}
 8010760:	20000818 	andcs	r0, r0, r8, lsl r8

08010764 <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 8010764:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010766:	6845      	ldr	r5, [r0, #4]
 8010768:	7dab      	ldrb	r3, [r5, #22]
 801076a:	2b20      	cmp	r3, #32
 801076c:	460e      	mov	r6, r1
 801076e:	4604      	mov	r4, r0
 8010770:	4611      	mov	r1, r2
 8010772:	d905      	bls.n	8010780 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 8010774:	2101      	movs	r1, #1
 8010776:	b002      	add	sp, #8
 8010778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801077c:	f7ff bf72 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
 8010780:	4a0d      	ldr	r2, [pc, #52]	; (80107b8 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 8010782:	6810      	ldr	r0, [r2, #0]
 8010784:	f105 0217 	add.w	r2, r5, #23
 8010788:	b159      	cbz	r1, 80107a2 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 801078a:	308c      	adds	r0, #140	; 0x8c
 801078c:	f7ff fb61 	bl	800fe52 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 8010790:	b97e      	cbnz	r6, 80107b2 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 8010792:	68a3      	ldr	r3, [r4, #8]
 8010794:	4620      	mov	r0, r4
 8010796:	75de      	strb	r6, [r3, #23]
 8010798:	b002      	add	sp, #8
 801079a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801079e:	f7ff be9d 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 80107a2:	4669      	mov	r1, sp
 80107a4:	3004      	adds	r0, #4
 80107a6:	9200      	str	r2, [sp, #0]
 80107a8:	f88d 3004 	strb.w	r3, [sp, #4]
 80107ac:	f7ff fd96 	bl	80102dc <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 80107b0:	e7ee      	b.n	8010790 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 80107b2:	b002      	add	sp, #8
 80107b4:	bd70      	pop	{r4, r5, r6, pc}
 80107b6:	bf00      	nop
 80107b8:	20000818 	andcs	r0, r0, r8, lsl r8

080107bc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 80107bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107c0:	4616      	mov	r6, r2
 80107c2:	4604      	mov	r4, r0
 80107c4:	f006 00ef 	and.w	r0, r6, #239	; 0xef
 80107c8:	2700      	movs	r7, #0
 80107ca:	2820      	cmp	r0, #32
 80107cc:	f89d 801c 	ldrb.w	r8, [sp, #28]
 80107d0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80107d4:	46be      	mov	lr, r7
 80107d6:	d005      	beq.n	80107e4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x28>
 80107d8:	2105      	movs	r1, #5
 80107da:	4620      	mov	r0, r4
 80107dc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107e0:	f7ff bf40 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
 80107e4:	482b      	ldr	r0, [pc, #172]	; (8010894 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd8>)
 80107e6:	6800      	ldr	r0, [r0, #0]
 80107e8:	8880      	ldrh	r0, [r0, #4]
 80107ea:	4290      	cmp	r0, r2
 80107ec:	d205      	bcs.n	80107fa <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3e>
 80107ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80107f2:	4282      	cmp	r2, r0
 80107f4:	d001      	beq.n	80107fa <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3e>
 80107f6:	2109      	movs	r1, #9
 80107f8:	e7ef      	b.n	80107da <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 80107fa:	4d27      	ldr	r5, [pc, #156]	; (8010898 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xdc>)
 80107fc:	f04f 0c14 	mov.w	ip, #20
 8010800:	2000      	movs	r0, #0
 8010802:	f8b5 9000 	ldrh.w	r9, [r5]
 8010806:	4599      	cmp	r9, r3
 8010808:	bf02      	ittt	eq
 801080a:	7daf      	ldrbeq	r7, [r5, #22]
 801080c:	f895 e017 	ldrbeq.w	lr, [r5, #23]
 8010810:	4628      	moveq	r0, r5
 8010812:	f1bc 0c01 	subs.w	ip, ip, #1
 8010816:	f105 0518 	add.w	r5, r5, #24
 801081a:	d1f2      	bne.n	8010802 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x46>
 801081c:	b908      	cbnz	r0, 8010822 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x66>
 801081e:	2100      	movs	r1, #0
 8010820:	e7db      	b.n	80107da <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 8010822:	7823      	ldrb	r3, [r4, #0]
 8010824:	b193      	cbz	r3, 801084c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x90>
 8010826:	2f00      	cmp	r7, #0
 8010828:	d0f9      	beq.n	801081e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 801082a:	2e20      	cmp	r6, #32
 801082c:	d11f      	bne.n	801086e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb2>
 801082e:	bb71      	cbnz	r1, 801088e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd2>
 8010830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010834:	429a      	cmp	r2, r3
 8010836:	d0de      	beq.n	80107f6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 8010838:	6843      	ldr	r3, [r0, #4]
 801083a:	b913      	cbnz	r3, 8010842 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x86>
 801083c:	6881      	ldr	r1, [r0, #8]
 801083e:	07cd      	lsls	r5, r1, #31
 8010840:	d5ca      	bpl.n	80107d8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 8010842:	7d01      	ldrb	r1, [r0, #20]
 8010844:	4541      	cmp	r1, r8
 8010846:	d005      	beq.n	8010854 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x98>
 8010848:	2101      	movs	r1, #1
 801084a:	e7c6      	b.n	80107da <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 801084c:	f1be 0f00 	cmp.w	lr, #0
 8010850:	d1eb      	bne.n	801082a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x6e>
 8010852:	e7e4      	b.n	801081e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 8010854:	6881      	ldr	r1, [r0, #8]
 8010856:	104d      	asrs	r5, r1, #1
 8010858:	eb04 0061 	add.w	r0, r4, r1, asr #1
 801085c:	07c9      	lsls	r1, r1, #31
 801085e:	bf48      	it	mi
 8010860:	5961      	ldrmi	r1, [r4, r5]
 8010862:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010866:	bf48      	it	mi
 8010868:	58cb      	ldrmi	r3, [r1, r3]
 801086a:	4611      	mov	r1, r2
 801086c:	4718      	bx	r3
 801086e:	e9d0 3003 	ldrd	r3, r0, [r0, #12]
 8010872:	f000 0501 	and.w	r5, r0, #1
 8010876:	b90b      	cbnz	r3, 801087c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>
 8010878:	2d00      	cmp	r5, #0
 801087a:	d0ad      	beq.n	80107d8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 801087c:	1046      	asrs	r6, r0, #1
 801087e:	eb04 0060 	add.w	r0, r4, r0, asr #1
 8010882:	b10d      	cbz	r5, 8010888 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcc>
 8010884:	59a4      	ldr	r4, [r4, r6]
 8010886:	58e3      	ldr	r3, [r4, r3]
 8010888:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801088c:	4718      	bx	r3
 801088e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010892:	bf00      	nop
 8010894:	20000814 	andcs	r0, r0, r4, lsl r8
 8010898:	0801c1cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, lr, pc}

0801089c <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 801089c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a0:	23ff      	movs	r3, #255	; 0xff
 80108a2:	7013      	strb	r3, [r2, #0]
 80108a4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80108a8:	b085      	sub	sp, #20
 80108aa:	7ccb      	ldrb	r3, [r1, #19]
 80108ac:	7d4f      	ldrb	r7, [r1, #21]
 80108ae:	9303      	str	r3, [sp, #12]
 80108b0:	7d0b      	ldrb	r3, [r1, #20]
 80108b2:	f101 0a02 	add.w	sl, r1, #2
 80108b6:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 80108ba:	4b5c      	ldr	r3, [pc, #368]	; (8010a2c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x190>)
 80108bc:	4606      	mov	r6, r0
 80108be:	460d      	mov	r5, r1
 80108c0:	4614      	mov	r4, r2
 80108c2:	495b      	ldr	r1, [pc, #364]	; (8010a30 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 80108c4:	f8d3 8000 	ldr.w	r8, [r3]
 80108c8:	2206      	movs	r2, #6
 80108ca:	4650      	mov	r0, sl
 80108cc:	f7ff fcec 	bl	80102a8 <memcmp>
 80108d0:	f108 0905 	add.w	r9, r8, #5
 80108d4:	4683      	mov	fp, r0
 80108d6:	2202      	movs	r2, #2
 80108d8:	4649      	mov	r1, r9
 80108da:	4650      	mov	r0, sl
 80108dc:	b2bf      	uxth	r7, r7
 80108de:	f7ff fce3 	bl	80102a8 <memcmp>
 80108e2:	b928      	cbnz	r0, 80108f0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x54>
 80108e4:	2204      	movs	r2, #4
 80108e6:	4952      	ldr	r1, [pc, #328]	; (8010a30 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 80108e8:	18a8      	adds	r0, r5, r2
 80108ea:	f7ff fcdd 	bl	80102a8 <memcmp>
 80108ee:	b158      	cbz	r0, 8010908 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6c>
 80108f0:	2206      	movs	r2, #6
 80108f2:	4649      	mov	r1, r9
 80108f4:	4650      	mov	r0, sl
 80108f6:	f7ff fcd7 	bl	80102a8 <memcmp>
 80108fa:	b130      	cbz	r0, 801090a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6e>
 80108fc:	f1bb 0f00 	cmp.w	fp, #0
 8010900:	d04b      	beq.n	801099a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xfe>
 8010902:	b005      	add	sp, #20
 8010904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010908:	2001      	movs	r0, #1
 801090a:	2301      	movs	r3, #1
 801090c:	9a03      	ldr	r2, [sp, #12]
 801090e:	2a10      	cmp	r2, #16
 8010910:	d177      	bne.n	8010a02 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x166>
 8010912:	2f01      	cmp	r7, #1
 8010914:	d144      	bne.n	80109a0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x104>
 8010916:	7873      	ldrb	r3, [r6, #1]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d1f2      	bne.n	8010902 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 801091c:	2206      	movs	r2, #6
 801091e:	4649      	mov	r1, r9
 8010920:	f105 0017 	add.w	r0, r5, #23
 8010924:	f7ff fcc0 	bl	80102a8 <memcmp>
 8010928:	2800      	cmp	r0, #0
 801092a:	dcea      	bgt.n	8010902 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 801092c:	2206      	movs	r2, #6
 801092e:	f105 011d 	add.w	r1, r5, #29
 8010932:	4648      	mov	r0, r9
 8010934:	f7ff fcb8 	bl	80102a8 <memcmp>
 8010938:	2800      	cmp	r0, #0
 801093a:	dce2      	bgt.n	8010902 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 801093c:	23fe      	movs	r3, #254	; 0xfe
 801093e:	7023      	strb	r3, [r4, #0]
 8010940:	7063      	strb	r3, [r4, #1]
 8010942:	70a3      	strb	r3, [r4, #2]
 8010944:	70e3      	strb	r3, [r4, #3]
 8010946:	7123      	strb	r3, [r4, #4]
 8010948:	7163      	strb	r3, [r4, #5]
 801094a:	71a3      	strb	r3, [r4, #6]
 801094c:	23aa      	movs	r3, #170	; 0xaa
 801094e:	71e3      	strb	r3, [r4, #7]
 8010950:	f108 0204 	add.w	r2, r8, #4
 8010954:	4621      	mov	r1, r4
 8010956:	f108 080a 	add.w	r8, r8, #10
 801095a:	f240 53fa 	movw	r3, #1530	; 0x5fa
 801095e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010962:	f060 0055 	orn	r0, r0, #85	; 0x55
 8010966:	7208      	strb	r0, [r1, #8]
 8010968:	7810      	ldrb	r0, [r2, #0]
 801096a:	f040 0055 	orr.w	r0, r0, #85	; 0x55
 801096e:	7248      	strb	r0, [r1, #9]
 8010970:	7810      	ldrb	r0, [r2, #0]
 8010972:	4542      	cmp	r2, r8
 8010974:	4403      	add	r3, r0
 8010976:	b29b      	uxth	r3, r3
 8010978:	f101 0102 	add.w	r1, r1, #2
 801097c:	d1ef      	bne.n	801095e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xc2>
 801097e:	0a1a      	lsrs	r2, r3, #8
 8010980:	f062 0155 	orn	r1, r2, #85	; 0x55
 8010984:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 8010988:	7562      	strb	r2, [r4, #21]
 801098a:	f063 0255 	orn	r2, r3, #85	; 0x55
 801098e:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8010992:	7521      	strb	r1, [r4, #20]
 8010994:	75a2      	strb	r2, [r4, #22]
 8010996:	75e3      	strb	r3, [r4, #23]
 8010998:	e7b3      	b.n	8010902 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 801099a:	4658      	mov	r0, fp
 801099c:	465b      	mov	r3, fp
 801099e:	e7b5      	b.n	801090c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x70>
 80109a0:	2f03      	cmp	r7, #3
 80109a2:	d11a      	bne.n	80109da <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x13e>
 80109a4:	7daa      	ldrb	r2, [r5, #22]
 80109a6:	2a00      	cmp	r2, #0
 80109a8:	d1ab      	bne.n	8010902 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80109aa:	7072      	strb	r2, [r6, #1]
 80109ac:	f1bb 0f00 	cmp.w	fp, #0
 80109b0:	d0a7      	beq.n	8010902 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d0a5      	beq.n	8010902 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80109b6:	2302      	movs	r3, #2
 80109b8:	75e3      	strb	r3, [r4, #23]
 80109ba:	4b1e      	ldr	r3, [pc, #120]	; (8010a34 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 80109bc:	7622      	strb	r2, [r4, #24]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	7662      	strb	r2, [r4, #25]
 80109c2:	889b      	ldrh	r3, [r3, #4]
 80109c4:	3b00      	subs	r3, #0
 80109c6:	bf18      	it	ne
 80109c8:	2301      	movne	r3, #1
 80109ca:	005b      	lsls	r3, r3, #1
 80109cc:	4630      	mov	r0, r6
 80109ce:	7663      	strb	r3, [r4, #25]
 80109d0:	b005      	add	sp, #20
 80109d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d6:	f7ff bd81 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 80109da:	2f02      	cmp	r7, #2
 80109dc:	d191      	bne.n	8010902 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80109de:	7daa      	ldrb	r2, [r5, #22]
 80109e0:	2a00      	cmp	r2, #0
 80109e2:	d18e      	bne.n	8010902 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80109e4:	2101      	movs	r1, #1
 80109e6:	7071      	strb	r1, [r6, #1]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d08a      	beq.n	8010902 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80109ec:	4b11      	ldr	r3, [pc, #68]	; (8010a34 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 80109ee:	75e7      	strb	r7, [r4, #23]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	7622      	strb	r2, [r4, #24]
 80109f4:	7662      	strb	r2, [r4, #25]
 80109f6:	889b      	ldrh	r3, [r3, #4]
 80109f8:	3b00      	subs	r3, #0
 80109fa:	bf18      	it	ne
 80109fc:	2301      	movne	r3, #1
 80109fe:	408b      	lsls	r3, r1
 8010a00:	e7e4      	b.n	80109cc <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x130>
 8010a02:	7c6a      	ldrb	r2, [r5, #17]
 8010a04:	7cab      	ldrb	r3, [r5, #18]
 8010a06:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010a0a:	b29b      	uxth	r3, r3
 8010a0c:	f1bb 0f00 	cmp.w	fp, #0
 8010a10:	9301      	str	r3, [sp, #4]
 8010a12:	7dab      	ldrb	r3, [r5, #22]
 8010a14:	9300      	str	r3, [sp, #0]
 8010a16:	bf18      	it	ne
 8010a18:	4601      	movne	r1, r0
 8010a1a:	9a03      	ldr	r2, [sp, #12]
 8010a1c:	463b      	mov	r3, r7
 8010a1e:	bf08      	it	eq
 8010a20:	2101      	moveq	r1, #1
 8010a22:	4630      	mov	r0, r6
 8010a24:	f7ff feca 	bl	80107bc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 8010a28:	e76b      	b.n	8010902 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010a2a:	bf00      	nop
 8010a2c:	20000818 	andcs	r0, r0, r8, lsl r8
 8010a30:	0801c1c4 	stmdaeq	r1, {r2, r6, r7, r8, lr, pc}
 8010a34:	20000814 	andcs	r0, r0, r4, lsl r8

08010a38 <RDMIdentify::RDMIdentify()>:
 8010a38:	4b01      	ldr	r3, [pc, #4]	; (8010a40 <RDMIdentify::RDMIdentify()+0x8>)
 8010a3a:	6018      	str	r0, [r3, #0]
 8010a3c:	4770      	bx	lr
 8010a3e:	bf00      	nop
 8010a40:	20000820 	andcs	r0, r0, r0, lsr #16

08010a44 <RDMIdentify::On(rdm::identify::Mode)>:
 8010a44:	4770      	bx	lr

08010a46 <RDMIdentify::Off(rdm::identify::Mode)>:
 8010a46:	4770      	bx	lr

08010a48 <memcpy.constprop.0.isra.0>:
 8010a48:	3801      	subs	r0, #1
 8010a4a:	1d0b      	adds	r3, r1, #4
 8010a4c:	4299      	cmp	r1, r3
 8010a4e:	d100      	bne.n	8010a52 <memcpy.constprop.0.isra.0+0xa>
 8010a50:	4770      	bx	lr
 8010a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a56:	f800 2f01 	strb.w	r2, [r0, #1]!
 8010a5a:	e7f7      	b.n	8010a4c <memcpy.constprop.0.isra.0+0x4>

08010a5c <RDMHandler::GetInterfaceList(unsigned short)>:
 8010a5c:	4a08      	ldr	r2, [pc, #32]	; (8010a80 <RDMHandler::GetInterfaceList(unsigned short)+0x24>)
 8010a5e:	6883      	ldr	r3, [r0, #8]
 8010a60:	6812      	ldr	r2, [r2, #0]
 8010a62:	6892      	ldr	r2, [r2, #8]
 8010a64:	76da      	strb	r2, [r3, #27]
 8010a66:	0e11      	lsrs	r1, r2, #24
 8010a68:	7619      	strb	r1, [r3, #24]
 8010a6a:	0c11      	lsrs	r1, r2, #16
 8010a6c:	7659      	strb	r1, [r3, #25]
 8010a6e:	0a11      	lsrs	r1, r2, #8
 8010a70:	2200      	movs	r2, #0
 8010a72:	771a      	strb	r2, [r3, #28]
 8010a74:	2206      	movs	r2, #6
 8010a76:	7699      	strb	r1, [r3, #26]
 8010a78:	775a      	strb	r2, [r3, #29]
 8010a7a:	75da      	strb	r2, [r3, #23]
 8010a7c:	f7ff bd2e 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010a80:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010a84 <RDMHandler::GetInterfaceName(unsigned short)>:
 8010a84:	b538      	push	{r3, r4, r5, lr}
 8010a86:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	3117      	adds	r1, #23
 8010a8e:	f105 0018 	add.w	r0, r5, #24
 8010a92:	f7ff ffd9 	bl	8010a48 <memcpy.constprop.0.isra.0>
 8010a96:	4a0d      	ldr	r2, [pc, #52]	; (8010acc <RDMHandler::GetInterfaceName(unsigned short)+0x48>)
 8010a98:	6813      	ldr	r3, [r2, #0]
 8010a9a:	f105 001b 	add.w	r0, r5, #27
 8010a9e:	33a6      	adds	r3, #166	; 0xa6
 8010aa0:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010aa4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010aa8:	2900      	cmp	r1, #0
 8010aaa:	d1f9      	bne.n	8010aa0 <RDMHandler::GetInterfaceName(unsigned short)+0x1c>
 8010aac:	6812      	ldr	r2, [r2, #0]
 8010aae:	32a6      	adds	r2, #166	; 0xa6
 8010ab0:	4611      	mov	r1, r2
 8010ab2:	460b      	mov	r3, r1
 8010ab4:	3101      	adds	r1, #1
 8010ab6:	7818      	ldrb	r0, [r3, #0]
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	d1fa      	bne.n	8010ab2 <RDMHandler::GetInterfaceName(unsigned short)+0x2e>
 8010abc:	1a9b      	subs	r3, r3, r2
 8010abe:	3304      	adds	r3, #4
 8010ac0:	75eb      	strb	r3, [r5, #23]
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ac8:	f7ff bd08 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010acc:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010ad0 <RDMHandler::GetHardwareAddress(unsigned short)>:
 8010ad0:	b538      	push	{r3, r4, r5, lr}
 8010ad2:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010ad6:	4604      	mov	r4, r0
 8010ad8:	3117      	adds	r1, #23
 8010ada:	f105 0018 	add.w	r0, r5, #24
 8010ade:	f7ff ffb3 	bl	8010a48 <memcpy.constprop.0.isra.0>
 8010ae2:	4b06      	ldr	r3, [pc, #24]	; (8010afc <RDMHandler::GetHardwareAddress(unsigned short)+0x2c>)
 8010ae4:	f105 011c 	add.w	r1, r5, #28
 8010ae8:	6818      	ldr	r0, [r3, #0]
 8010aea:	f004 f86e 	bl	8014bca <Network::MacAddressCopyTo(unsigned char*)>
 8010aee:	230a      	movs	r3, #10
 8010af0:	75eb      	strb	r3, [r5, #23]
 8010af2:	4620      	mov	r0, r4
 8010af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010af8:	f7ff bcf0 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010afc:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010b00 <RDMHandler::GetDHCPMode(unsigned short)>:
 8010b00:	b538      	push	{r3, r4, r5, lr}
 8010b02:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010b06:	4604      	mov	r4, r0
 8010b08:	3117      	adds	r1, #23
 8010b0a:	f105 0018 	add.w	r0, r5, #24
 8010b0e:	f7ff ff9b 	bl	8010a48 <memcpy.constprop.0.isra.0>
 8010b12:	4b05      	ldr	r3, [pc, #20]	; (8010b28 <RDMHandler::GetDHCPMode(unsigned short)+0x28>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	795b      	ldrb	r3, [r3, #5]
 8010b18:	772b      	strb	r3, [r5, #28]
 8010b1a:	2305      	movs	r3, #5
 8010b1c:	75eb      	strb	r3, [r5, #23]
 8010b1e:	4620      	mov	r0, r4
 8010b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b24:	f7ff bcda 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010b28:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010b2c <RDMHandler::SetDHCPMode(bool, unsigned short)>:
 8010b2c:	4b10      	ldr	r3, [pc, #64]	; (8010b70 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x44>)
 8010b2e:	6842      	ldr	r2, [r0, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	7919      	ldrb	r1, [r3, #4]
 8010b34:	b510      	push	{r4, lr}
 8010b36:	4604      	mov	r4, r0
 8010b38:	b921      	cbnz	r1, 8010b44 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x18>
 8010b3a:	210b      	movs	r1, #11
 8010b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b40:	f7ff bd90 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
 8010b44:	7ed2      	ldrb	r2, [r2, #27]
 8010b46:	2a01      	cmp	r2, #1
 8010b48:	d109      	bne.n	8010b5e <RDMHandler::SetDHCPMode(bool, unsigned short)+0x32>
 8010b4a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8010b4e:	f042 0204 	orr.w	r2, r2, #4
 8010b52:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8010b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b5a:	f7ff bcbf 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010b5e:	b92a      	cbnz	r2, 8010b6c <RDMHandler::SetDHCPMode(bool, unsigned short)+0x40>
 8010b60:	4618      	mov	r0, r3
 8010b62:	4611      	mov	r1, r2
 8010b64:	f004 fa68 	bl	8015038 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 8010b68:	4620      	mov	r0, r4
 8010b6a:	e7f4      	b.n	8010b56 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x2a>
 8010b6c:	2106      	movs	r1, #6
 8010b6e:	e7e5      	b.n	8010b3c <RDMHandler::SetDHCPMode(bool, unsigned short)+0x10>
 8010b70:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010b74 <RDMHandler::GetNameServers(unsigned short)>:
 8010b74:	6842      	ldr	r2, [r0, #4]
 8010b76:	7dd2      	ldrb	r2, [r2, #23]
 8010b78:	2a02      	cmp	r2, #2
 8010b7a:	d902      	bls.n	8010b82 <RDMHandler::GetNameServers(unsigned short)+0xe>
 8010b7c:	2106      	movs	r1, #6
 8010b7e:	f7ff bd71 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
 8010b82:	6883      	ldr	r3, [r0, #8]
 8010b84:	2200      	movs	r2, #0
 8010b86:	765a      	strb	r2, [r3, #25]
 8010b88:	769a      	strb	r2, [r3, #26]
 8010b8a:	76da      	strb	r2, [r3, #27]
 8010b8c:	771a      	strb	r2, [r3, #28]
 8010b8e:	2205      	movs	r2, #5
 8010b90:	75da      	strb	r2, [r3, #23]
 8010b92:	f7ff bca3 	b.w	80104dc <RDMHandler::RespondMessageAck()>
	...

08010b98 <RDMHandler::GetZeroconf(unsigned short)>:
 8010b98:	b538      	push	{r3, r4, r5, lr}
 8010b9a:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010b9e:	4604      	mov	r4, r0
 8010ba0:	3117      	adds	r1, #23
 8010ba2:	f105 0018 	add.w	r0, r5, #24
 8010ba6:	f7ff ff4f 	bl	8010a48 <memcpy.constprop.0.isra.0>
 8010baa:	4b06      	ldr	r3, [pc, #24]	; (8010bc4 <RDMHandler::GetZeroconf(unsigned short)+0x2c>)
 8010bac:	681a      	ldr	r2, [r3, #0]
 8010bae:	7993      	ldrb	r3, [r2, #6]
 8010bb0:	b103      	cbz	r3, 8010bb4 <RDMHandler::GetZeroconf(unsigned short)+0x1c>
 8010bb2:	79d3      	ldrb	r3, [r2, #7]
 8010bb4:	772b      	strb	r3, [r5, #28]
 8010bb6:	2305      	movs	r3, #5
 8010bb8:	75eb      	strb	r3, [r5, #23]
 8010bba:	4620      	mov	r0, r4
 8010bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bc0:	f7ff bc8c 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010bc4:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010bc8 <RDMHandler::SetZeroconf(bool, unsigned short)>:
 8010bc8:	4b10      	ldr	r3, [pc, #64]	; (8010c0c <RDMHandler::SetZeroconf(bool, unsigned short)+0x44>)
 8010bca:	6842      	ldr	r2, [r0, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	7999      	ldrb	r1, [r3, #6]
 8010bd0:	b510      	push	{r4, lr}
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	b921      	cbnz	r1, 8010be0 <RDMHandler::SetZeroconf(bool, unsigned short)+0x18>
 8010bd6:	210b      	movs	r1, #11
 8010bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bdc:	f7ff bd42 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
 8010be0:	7ed2      	ldrb	r2, [r2, #27]
 8010be2:	2a01      	cmp	r2, #1
 8010be4:	d109      	bne.n	8010bfa <RDMHandler::SetZeroconf(bool, unsigned short)+0x32>
 8010be6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8010bea:	f042 0208 	orr.w	r2, r2, #8
 8010bee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8010bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bf6:	f7ff bc71 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010bfa:	b92a      	cbnz	r2, 8010c08 <RDMHandler::SetZeroconf(bool, unsigned short)+0x40>
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	4611      	mov	r1, r2
 8010c00:	f004 fa1a 	bl	8015038 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 8010c04:	4620      	mov	r0, r4
 8010c06:	e7f4      	b.n	8010bf2 <RDMHandler::SetZeroconf(bool, unsigned short)+0x2a>
 8010c08:	2106      	movs	r1, #6
 8010c0a:	e7e5      	b.n	8010bd8 <RDMHandler::SetZeroconf(bool, unsigned short)+0x10>
 8010c0c:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010c10 <RDMHandler::RenewDhcp(bool, unsigned short)>:
 8010c10:	4b09      	ldr	r3, [pc, #36]	; (8010c38 <RDMHandler::RenewDhcp(bool, unsigned short)+0x28>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	795a      	ldrb	r2, [r3, #5]
 8010c16:	b510      	push	{r4, lr}
 8010c18:	4604      	mov	r4, r0
 8010c1a:	b922      	cbnz	r2, 8010c26 <RDMHandler::RenewDhcp(bool, unsigned short)+0x16>
 8010c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c20:	210b      	movs	r1, #11
 8010c22:	f7ff bd1f 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
 8010c26:	4618      	mov	r0, r3
 8010c28:	f004 f9c0 	bl	8014fac <Network::EnableDhcp()>
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c32:	f7ff bc53 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010c36:	bf00      	nop
 8010c38:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010c3c <RDMHandler::GetAddressNetmask(unsigned short)>:
 8010c3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c3e:	4e10      	ldr	r6, [pc, #64]	; (8010c80 <RDMHandler::GetAddressNetmask(unsigned short)+0x44>)
 8010c40:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010c44:	6833      	ldr	r3, [r6, #0]
 8010c46:	4604      	mov	r4, r0
 8010c48:	695b      	ldr	r3, [r3, #20]
 8010c4a:	9301      	str	r3, [sp, #4]
 8010c4c:	f105 0018 	add.w	r0, r5, #24
 8010c50:	3117      	adds	r1, #23
 8010c52:	f7ff fef9 	bl	8010a48 <memcpy.constprop.0.isra.0>
 8010c56:	a901      	add	r1, sp, #4
 8010c58:	f105 001c 	add.w	r0, r5, #28
 8010c5c:	f7ff fef4 	bl	8010a48 <memcpy.constprop.0.isra.0>
 8010c60:	6836      	ldr	r6, [r6, #0]
 8010c62:	69f0      	ldr	r0, [r6, #28]
 8010c64:	f009 fd9c 	bl	801a7a0 <__popcountsi2>
 8010c68:	f885 0020 	strb.w	r0, [r5, #32]
 8010c6c:	7973      	ldrb	r3, [r6, #5]
 8010c6e:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 8010c72:	230a      	movs	r3, #10
 8010c74:	75eb      	strb	r3, [r5, #23]
 8010c76:	4620      	mov	r0, r4
 8010c78:	f7ff fc30 	bl	80104dc <RDMHandler::RespondMessageAck()>
 8010c7c:	b002      	add	sp, #8
 8010c7e:	bd70      	pop	{r4, r5, r6, pc}
 8010c80:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010c84 <RDMHandler::GetStaticAddress(unsigned short)>:
 8010c84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c86:	4e0f      	ldr	r6, [pc, #60]	; (8010cc4 <RDMHandler::GetStaticAddress(unsigned short)+0x40>)
 8010c88:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010c8c:	6833      	ldr	r3, [r6, #0]
 8010c8e:	4604      	mov	r4, r0
 8010c90:	695b      	ldr	r3, [r3, #20]
 8010c92:	9301      	str	r3, [sp, #4]
 8010c94:	f105 0018 	add.w	r0, r5, #24
 8010c98:	3117      	adds	r1, #23
 8010c9a:	f7ff fed5 	bl	8010a48 <memcpy.constprop.0.isra.0>
 8010c9e:	a901      	add	r1, sp, #4
 8010ca0:	f105 001c 	add.w	r0, r5, #28
 8010ca4:	f7ff fed0 	bl	8010a48 <memcpy.constprop.0.isra.0>
 8010ca8:	6833      	ldr	r3, [r6, #0]
 8010caa:	69d8      	ldr	r0, [r3, #28]
 8010cac:	f009 fd78 	bl	801a7a0 <__popcountsi2>
 8010cb0:	2309      	movs	r3, #9
 8010cb2:	f885 0020 	strb.w	r0, [r5, #32]
 8010cb6:	75eb      	strb	r3, [r5, #23]
 8010cb8:	4620      	mov	r0, r4
 8010cba:	f7ff fc0f 	bl	80104dc <RDMHandler::RespondMessageAck()>
 8010cbe:	b002      	add	sp, #8
 8010cc0:	bd70      	pop	{r4, r5, r6, pc}
 8010cc2:	bf00      	nop
 8010cc4:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010cc8 <RDMHandler::SetStaticAddress(bool, unsigned short)>:
 8010cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010cca:	6845      	ldr	r5, [r0, #4]
 8010ccc:	7dab      	ldrb	r3, [r5, #22]
 8010cce:	2b09      	cmp	r3, #9
 8010cd0:	4604      	mov	r4, r0
 8010cd2:	d005      	beq.n	8010ce0 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x18>
 8010cd4:	2101      	movs	r1, #1
 8010cd6:	b003      	add	sp, #12
 8010cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cdc:	f7ff bcc2 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
 8010ce0:	f105 011b 	add.w	r1, r5, #27
 8010ce4:	a801      	add	r0, sp, #4
 8010ce6:	f7ff feaf 	bl	8010a48 <memcpy.constprop.0.isra.0>
 8010cea:	4b09      	ldr	r3, [pc, #36]	; (8010d10 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x48>)
 8010cec:	7fea      	ldrb	r2, [r5, #31]
 8010cee:	6818      	ldr	r0, [r3, #0]
 8010cf0:	9901      	ldr	r1, [sp, #4]
 8010cf2:	b12a      	cbz	r2, 8010d00 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x38>
 8010cf4:	f1c2 0220 	rsb	r2, r2, #32
 8010cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cfc:	4093      	lsls	r3, r2
 8010cfe:	ba1a      	rev	r2, r3
 8010d00:	f004 f99a 	bl	8015038 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 8010d04:	4620      	mov	r0, r4
 8010d06:	f7ff fbe9 	bl	80104dc <RDMHandler::RespondMessageAck()>
 8010d0a:	b003      	add	sp, #12
 8010d0c:	bd30      	pop	{r4, r5, pc}
 8010d0e:	bf00      	nop
 8010d10:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010d14 <RDMHandler::ApplyConfiguration(bool, unsigned short)>:
 8010d14:	4b08      	ldr	r3, [pc, #32]	; (8010d38 <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x24>)
 8010d16:	b510      	push	{r4, lr}
 8010d18:	4604      	mov	r4, r0
 8010d1a:	6818      	ldr	r0, [r3, #0]
 8010d1c:	f004 f999 	bl	8015052 <Network::ApplyQueuedConfig()>
 8010d20:	b120      	cbz	r0, 8010d2c <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x18>
 8010d22:	4620      	mov	r0, r4
 8010d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d28:	f7ff bbd8 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	2101      	movs	r1, #1
 8010d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d34:	f7ff bc96 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
 8010d38:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010d3c <RDMHandler::GetDefaultRoute(unsigned short)>:
 8010d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d3e:	4b0c      	ldr	r3, [pc, #48]	; (8010d70 <RDMHandler::GetDefaultRoute(unsigned short)+0x34>)
 8010d40:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	4604      	mov	r4, r0
 8010d48:	699b      	ldr	r3, [r3, #24]
 8010d4a:	9301      	str	r3, [sp, #4]
 8010d4c:	f105 0018 	add.w	r0, r5, #24
 8010d50:	3117      	adds	r1, #23
 8010d52:	f7ff fe79 	bl	8010a48 <memcpy.constprop.0.isra.0>
 8010d56:	a901      	add	r1, sp, #4
 8010d58:	f105 001c 	add.w	r0, r5, #28
 8010d5c:	f7ff fe74 	bl	8010a48 <memcpy.constprop.0.isra.0>
 8010d60:	2308      	movs	r3, #8
 8010d62:	75eb      	strb	r3, [r5, #23]
 8010d64:	4620      	mov	r0, r4
 8010d66:	f7ff fbb9 	bl	80104dc <RDMHandler::RespondMessageAck()>
 8010d6a:	b003      	add	sp, #12
 8010d6c:	bd30      	pop	{r4, r5, pc}
 8010d6e:	bf00      	nop
 8010d70:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010d74 <RDMHandler::SetDefaultRoute(bool, unsigned short)>:
 8010d74:	210b      	movs	r1, #11
 8010d76:	f7ff bc75 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
	...

08010d7c <RDMHandler::GetHostName(unsigned short)>:
 8010d7c:	4b0a      	ldr	r3, [pc, #40]	; (8010da8 <RDMHandler::GetHostName(unsigned short)+0x2c>)
 8010d7e:	b513      	push	{r0, r1, r4, lr}
 8010d80:	6819      	ldr	r1, [r3, #0]
 8010d82:	3120      	adds	r1, #32
 8010d84:	460b      	mov	r3, r1
 8010d86:	461a      	mov	r2, r3
 8010d88:	3301      	adds	r3, #1
 8010d8a:	7814      	ldrb	r4, [r2, #0]
 8010d8c:	2c00      	cmp	r4, #0
 8010d8e:	d1fa      	bne.n	8010d86 <RDMHandler::GetHostName(unsigned short)+0xa>
 8010d90:	1a52      	subs	r2, r2, r1
 8010d92:	b292      	uxth	r2, r2
 8010d94:	9001      	str	r0, [sp, #4]
 8010d96:	f7ff fb49 	bl	801042c <RDMHandler::HandleString(char const*, unsigned int)>
 8010d9a:	9801      	ldr	r0, [sp, #4]
 8010d9c:	b002      	add	sp, #8
 8010d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010da2:	f7ff bb9b 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010da6:	bf00      	nop
 8010da8:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010dac <RDMHandler::SetHostName(bool, unsigned short)>:
 8010dac:	b510      	push	{r4, lr}
 8010dae:	6841      	ldr	r1, [r0, #4]
 8010db0:	7d8b      	ldrb	r3, [r1, #22]
 8010db2:	2b3f      	cmp	r3, #63	; 0x3f
 8010db4:	4604      	mov	r4, r0
 8010db6:	d904      	bls.n	8010dc2 <RDMHandler::SetHostName(bool, unsigned short)+0x16>
 8010db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dbc:	2102      	movs	r1, #2
 8010dbe:	f7ff bc51 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
 8010dc2:	440b      	add	r3, r1
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	75da      	strb	r2, [r3, #23]
 8010dc8:	4b04      	ldr	r3, [pc, #16]	; (8010ddc <RDMHandler::SetHostName(bool, unsigned short)+0x30>)
 8010dca:	3117      	adds	r1, #23
 8010dcc:	6818      	ldr	r0, [r3, #0]
 8010dce:	f004 f8b3 	bl	8014f38 <Network::SetHostName(char const*)>
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dd8:	f7ff bb80 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010ddc:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010de0 <RDMHandler::GetDomainName(unsigned short)>:
 8010de0:	4b0a      	ldr	r3, [pc, #40]	; (8010e0c <RDMHandler::GetDomainName(unsigned short)+0x2c>)
 8010de2:	b513      	push	{r0, r1, r4, lr}
 8010de4:	6819      	ldr	r1, [r3, #0]
 8010de6:	3160      	adds	r1, #96	; 0x60
 8010de8:	460b      	mov	r3, r1
 8010dea:	461a      	mov	r2, r3
 8010dec:	3301      	adds	r3, #1
 8010dee:	7814      	ldrb	r4, [r2, #0]
 8010df0:	2c00      	cmp	r4, #0
 8010df2:	d1fa      	bne.n	8010dea <RDMHandler::GetDomainName(unsigned short)+0xa>
 8010df4:	1a52      	subs	r2, r2, r1
 8010df6:	b292      	uxth	r2, r2
 8010df8:	9001      	str	r0, [sp, #4]
 8010dfa:	f7ff fb17 	bl	801042c <RDMHandler::HandleString(char const*, unsigned int)>
 8010dfe:	9801      	ldr	r0, [sp, #4]
 8010e00:	b002      	add	sp, #8
 8010e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e06:	f7ff bb69 	b.w	80104dc <RDMHandler::RespondMessageAck()>
 8010e0a:	bf00      	nop
 8010e0c:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08010e10 <RDMHandler::SetDomainName(bool, unsigned short)>:
 8010e10:	210b      	movs	r1, #11
 8010e12:	f7ff bc27 	b.w	8010664 <RDMHandler::RespondMessageNack(unsigned short)>
	...

08010e18 <RDMDevice::RDMDevice()>:
 8010e18:	4a34      	ldr	r2, [pc, #208]	; (8010eec <RDMDevice::RDMDevice()+0xd4>)
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e1e:	4604      	mov	r4, r0
 8010e20:	7003      	strb	r3, [r0, #0]
 8010e22:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
 8010e26:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
 8010e2a:	6783      	str	r3, [r0, #120]	; 0x78
 8010e2c:	4611      	mov	r1, r2
 8010e2e:	4613      	mov	r3, r2
 8010e30:	3201      	adds	r2, #1
 8010e32:	7818      	ldrb	r0, [r3, #0]
 8010e34:	2800      	cmp	r0, #0
 8010e36:	d1fa      	bne.n	8010e2e <RDMDevice::RDMDevice()+0x16>
 8010e38:	1a5b      	subs	r3, r3, r1
 8010e3a:	2b20      	cmp	r3, #32
 8010e3c:	bf28      	it	cs
 8010e3e:	2320      	movcs	r3, #32
 8010e40:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 8010e44:	4829      	ldr	r0, [pc, #164]	; (8010eec <RDMDevice::RDMDevice()+0xd4>)
 8010e46:	4629      	mov	r1, r5
 8010e48:	461a      	mov	r2, r3
 8010e4a:	3a01      	subs	r2, #1
 8010e4c:	d23e      	bcs.n	8010ecc <RDMDevice::RDMDevice()+0xb4>
 8010e4e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8010e52:	4b27      	ldr	r3, [pc, #156]	; (8010ef0 <RDMDevice::RDMDevice()+0xd8>)
 8010e54:	4e27      	ldr	r6, [pc, #156]	; (8010ef4 <RDMDevice::RDMDevice()+0xdc>)
 8010e56:	781a      	ldrb	r2, [r3, #0]
 8010e58:	7062      	strb	r2, [r4, #1]
 8010e5a:	785b      	ldrb	r3, [r3, #1]
 8010e5c:	6830      	ldr	r0, [r6, #0]
 8010e5e:	70a3      	strb	r3, [r4, #2]
 8010e60:	4669      	mov	r1, sp
 8010e62:	f003 feb2 	bl	8014bca <Network::MacAddressCopyTo(unsigned char*)>
 8010e66:	6833      	ldr	r3, [r6, #0]
 8010e68:	695b      	ldr	r3, [r3, #20]
 8010e6a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010e6e:	0e18      	lsrs	r0, r3, #24
 8010e70:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	70e3      	strb	r3, [r4, #3]
 8010e78:	72a3      	strb	r3, [r4, #10]
 8010e7a:	4b1f      	ldr	r3, [pc, #124]	; (8010ef8 <RDMDevice::RDMDevice()+0xe0>)
 8010e7c:	7122      	strb	r2, [r4, #4]
 8010e7e:	7262      	strb	r2, [r4, #9]
 8010e80:	71a0      	strb	r0, [r4, #6]
 8010e82:	7161      	strb	r1, [r4, #5]
 8010e84:	71e0      	strb	r0, [r4, #7]
 8010e86:	7221      	strb	r1, [r4, #8]
 8010e88:	461a      	mov	r2, r3
 8010e8a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010e8e:	2900      	cmp	r1, #0
 8010e90:	d1fb      	bne.n	8010e8a <RDMDevice::RDMDevice()+0x72>
 8010e92:	1a9b      	subs	r3, r3, r2
 8010e94:	2b20      	cmp	r3, #32
 8010e96:	bf28      	it	cs
 8010e98:	2320      	movcs	r3, #32
 8010e9a:	4917      	ldr	r1, [pc, #92]	; (8010ef8 <RDMDevice::RDMDevice()+0xe0>)
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	3a01      	subs	r2, #1
 8010ea0:	d219      	bcs.n	8010ed6 <RDMDevice::RDMDevice()+0xbe>
 8010ea2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8010ea6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010eaa:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8010eae:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8010eb2:	4a12      	ldr	r2, [pc, #72]	; (8010efc <RDMDevice::RDMDevice()+0xe4>)
 8010eb4:	2315      	movs	r3, #21
 8010eb6:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
 8010eba:	f104 0166 	add.w	r1, r4, #102	; 0x66
 8010ebe:	f104 0351 	add.w	r3, r4, #81	; 0x51
 8010ec2:	4299      	cmp	r1, r3
 8010ec4:	d10c      	bne.n	8010ee0 <RDMDevice::RDMDevice()+0xc8>
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	b002      	add	sp, #8
 8010eca:	bd70      	pop	{r4, r5, r6, pc}
 8010ecc:	f810 6b01 	ldrb.w	r6, [r0], #1
 8010ed0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010ed4:	e7b9      	b.n	8010e4a <RDMDevice::RDMDevice()+0x32>
 8010ed6:	f811 0b01 	ldrb.w	r0, [r1], #1
 8010eda:	f805 0f01 	strb.w	r0, [r5, #1]!
 8010ede:	e7de      	b.n	8010e9e <RDMDevice::RDMDevice()+0x86>
 8010ee0:	f812 0b01 	ldrb.w	r0, [r2], #1
 8010ee4:	f803 0f01 	strb.w	r0, [r3, #1]!
 8010ee8:	e7eb      	b.n	8010ec2 <RDMDevice::RDMDevice()+0xaa>
 8010eea:	bf00      	nop
 8010eec:	0801c498 	stmdaeq	r1, {r3, r4, r7, sl, lr, pc}
 8010ef0:	0801c496 	stmdaeq	r1, {r1, r2, r4, r7, sl, lr, pc}
 8010ef4:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 8010ef8:	0801bc11 	stmdaeq	r1, {r0, r4, sl, fp, ip, sp, pc}
 8010efc:	0801c480 	stmdaeq	r1, {r7, sl, lr, pc}

08010f00 <RDMDevice::Print()>:
 8010f00:	b513      	push	{r0, r1, r4, lr}
 8010f02:	4604      	mov	r4, r0
 8010f04:	4818      	ldr	r0, [pc, #96]	; (8010f68 <RDMDevice::Print()+0x68>)
 8010f06:	f7f9 fad3 	bl	800a4b0 <printf>
 8010f0a:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
 8010f0e:	4817      	ldr	r0, [pc, #92]	; (8010f6c <RDMDevice::Print()+0x6c>)
 8010f10:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 8010f14:	f7f9 facc 	bl	800a4b0 <printf>
 8010f18:	78a2      	ldrb	r2, [r4, #2]
 8010f1a:	7861      	ldrb	r1, [r4, #1]
 8010f1c:	4814      	ldr	r0, [pc, #80]	; (8010f70 <RDMDevice::Print()+0x70>)
 8010f1e:	f7f9 fac7 	bl	800a4b0 <printf>
 8010f22:	79e3      	ldrb	r3, [r4, #7]
 8010f24:	7a62      	ldrb	r2, [r4, #9]
 8010f26:	7aa1      	ldrb	r1, [r4, #10]
 8010f28:	9300      	str	r3, [sp, #0]
 8010f2a:	4812      	ldr	r0, [pc, #72]	; (8010f74 <RDMDevice::Print()+0x74>)
 8010f2c:	7a23      	ldrb	r3, [r4, #8]
 8010f2e:	f7f9 fabf 	bl	800a4b0 <printf>
 8010f32:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 8010f36:	4810      	ldr	r0, [pc, #64]	; (8010f78 <RDMDevice::Print()+0x78>)
 8010f38:	f104 020b 	add.w	r2, r4, #11
 8010f3c:	f7f9 fab8 	bl	800a4b0 <printf>
 8010f40:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8010f44:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 8010f48:	480c      	ldr	r0, [pc, #48]	; (8010f7c <RDMDevice::Print()+0x7c>)
 8010f4a:	0a09      	lsrs	r1, r1, #8
 8010f4c:	f7f9 fab0 	bl	800a4b0 <printf>
 8010f50:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8010f54:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8010f58:	4809      	ldr	r0, [pc, #36]	; (8010f80 <RDMDevice::Print()+0x80>)
 8010f5a:	0a09      	lsrs	r1, r1, #8
 8010f5c:	b002      	add	sp, #8
 8010f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f62:	f7f9 baa5 	b.w	800a4b0 <printf>
 8010f66:	bf00      	nop
 8010f68:	0801c3ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, r9, lr, pc}
 8010f6c:	0801c3c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, r9, lr, pc}
 8010f70:	0801c3e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, r9, lr, pc}
 8010f74:	0801c400 	stmdaeq	r1, {sl, lr, pc}
 8010f78:	0801c427 	stmdaeq	r1, {r0, r1, r2, r5, sl, lr, pc}
 8010f7c:	0801c442 	stmdaeq	r1, {r1, r6, sl, lr, pc}
 8010f80:	0801c461 	stmdaeq	r1, {r0, r5, r6, sl, lr, pc}

08010f84 <uuid_unparse_x>:
 8010f84:	b530      	push	{r4, r5, lr}
 8010f86:	4603      	mov	r3, r0
 8010f88:	4608      	mov	r0, r1
 8010f8a:	4611      	mov	r1, r2
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	891c      	ldrh	r4, [r3, #8]
 8010f90:	b08f      	sub	sp, #60	; 0x3c
 8010f92:	ba12      	rev	r2, r2
 8010f94:	920a      	str	r2, [sp, #40]	; 0x28
 8010f96:	889a      	ldrh	r2, [r3, #4]
 8010f98:	ba52      	rev16	r2, r2
 8010f9a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8010f9e:	88da      	ldrh	r2, [r3, #6]
 8010fa0:	ba64      	rev16	r4, r4
 8010fa2:	ba52      	rev16	r2, r2
 8010fa4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8010fa8:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 8010fac:	f103 020a 	add.w	r2, r3, #10
 8010fb0:	f10d 0431 	add.w	r4, sp, #49	; 0x31
 8010fb4:	3310      	adds	r3, #16
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d122      	bne.n	8011000 <uuid_unparse_x+0x7c>
 8010fba:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8010fbe:	9208      	str	r2, [sp, #32]
 8010fc0:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 8010fc4:	9207      	str	r2, [sp, #28]
 8010fc6:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8010fca:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8010fce:	9206      	str	r2, [sp, #24]
 8010fd0:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8010fd4:	9205      	str	r2, [sp, #20]
 8010fd6:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8010fda:	9204      	str	r2, [sp, #16]
 8010fdc:	0a1b      	lsrs	r3, r3, #8
 8010fde:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8010fe2:	9203      	str	r2, [sp, #12]
 8010fe4:	9301      	str	r3, [sp, #4]
 8010fe6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8010fea:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8010fee:	9202      	str	r2, [sp, #8]
 8010ff0:	9300      	str	r3, [sp, #0]
 8010ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ff4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8010ff8:	f7f9 fa6a 	bl	800a4d0 <sprintf>
 8010ffc:	b00f      	add	sp, #60	; 0x3c
 8010ffe:	bd30      	pop	{r4, r5, pc}
 8011000:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011004:	f804 5f01 	strb.w	r5, [r4, #1]!
 8011008:	e7d5      	b.n	8010fb6 <uuid_unparse_x+0x32>
	...

0801100c <uuid_unparse>:
 801100c:	4a01      	ldr	r2, [pc, #4]	; (8011014 <uuid_unparse+0x8>)
 801100e:	f7ff bfb9 	b.w	8010f84 <uuid_unparse_x>
 8011012:	bf00      	nop
 8011014:	0801c4b4 	stmdaeq	r1, {r2, r4, r5, r7, sl, lr, pc}

08011018 <DmxSend::~DmxSend()>:
 8011018:	4770      	bx	lr
	...

0801101c <DmxSend::Start(unsigned int)>:
 801101c:	b430      	push	{r4, r5}
 801101e:	4c09      	ldr	r4, [pc, #36]	; (8011044 <DmxSend::Start(unsigned int)+0x28>)
 8011020:	2301      	movs	r3, #1
 8011022:	7822      	ldrb	r2, [r4, #0]
 8011024:	fa03 f001 	lsl.w	r0, r3, r1
 8011028:	ea30 0502 	bics.w	r5, r0, r2
 801102c:	d007      	beq.n	801103e <DmxSend::Start(unsigned int)+0x22>
 801102e:	4302      	orrs	r2, r0
 8011030:	4805      	ldr	r0, [pc, #20]	; (8011048 <DmxSend::Start(unsigned int)+0x2c>)
 8011032:	7022      	strb	r2, [r4, #0]
 8011034:	6800      	ldr	r0, [r0, #0]
 8011036:	bc30      	pop	{r4, r5}
 8011038:	2200      	movs	r2, #0
 801103a:	f000 bbab 	b.w	8011794 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 801103e:	bc30      	pop	{r4, r5}
 8011040:	4770      	bx	lr
 8011042:	bf00      	nop
 8011044:	20000824 	andcs	r0, r0, r4, lsr #16
 8011048:	2000105c 	andcs	r1, r0, ip, asr r0

0801104c <DmxSend::Stop(unsigned int)>:
 801104c:	b410      	push	{r4}
 801104e:	480b      	ldr	r0, [pc, #44]	; (801107c <DmxSend::Stop(unsigned int)+0x30>)
 8011050:	2201      	movs	r2, #1
 8011052:	7803      	ldrb	r3, [r0, #0]
 8011054:	408a      	lsls	r2, r1
 8011056:	ea03 0402 	and.w	r4, r3, r2
 801105a:	439a      	bics	r2, r3
 801105c:	d10a      	bne.n	8011074 <DmxSend::Stop(unsigned int)+0x28>
 801105e:	ea23 0304 	bic.w	r3, r3, r4
 8011062:	7003      	strb	r3, [r0, #0]
 8011064:	4806      	ldr	r0, [pc, #24]	; (8011080 <DmxSend::Stop(unsigned int)+0x34>)
 8011066:	f85d 4b04 	ldr.w	r4, [sp], #4
 801106a:	6800      	ldr	r0, [r0, #0]
 801106c:	2300      	movs	r3, #0
 801106e:	461a      	mov	r2, r3
 8011070:	f000 bb90 	b.w	8011794 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8011074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011078:	4770      	bx	lr
 801107a:	bf00      	nop
 801107c:	20000824 	andcs	r0, r0, r4, lsr #16
 8011080:	2000105c 	andcs	r1, r0, ip, asr r0

08011084 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8011084:	b11b      	cbz	r3, 801108e <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xa>
 8011086:	4802      	ldr	r0, [pc, #8]	; (8011090 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xc>)
 8011088:	6800      	ldr	r0, [r0, #0]
 801108a:	f000 bcc5 	b.w	8011a18 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>
 801108e:	4770      	bx	lr
 8011090:	2000105c 	andcs	r1, r0, ip, asr r0

08011094 <DmxSend::Blackout(bool)>:
 8011094:	4b01      	ldr	r3, [pc, #4]	; (801109c <DmxSend::Blackout(bool)+0x8>)
 8011096:	6818      	ldr	r0, [r3, #0]
 8011098:	f000 bce4 	b.w	8011a64 <Dmx::Blackout()>
 801109c:	2000105c 	andcs	r1, r0, ip, asr r0

080110a0 <DmxSend::FullOn()>:
 80110a0:	4b01      	ldr	r3, [pc, #4]	; (80110a8 <DmxSend::FullOn()+0x8>)
 80110a2:	6818      	ldr	r0, [r3, #0]
 80110a4:	f000 bd22 	b.w	8011aec <Dmx::FullOn()>
 80110a8:	2000105c 	andcs	r1, r0, ip, asr r0

080110ac <DmxSend::Print()>:
 80110ac:	b510      	push	{r4, lr}
 80110ae:	4c0e      	ldr	r4, [pc, #56]	; (80110e8 <DmxSend::Print()+0x3c>)
 80110b0:	480e      	ldr	r0, [pc, #56]	; (80110ec <DmxSend::Print()+0x40>)
 80110b2:	f7f9 f9fd 	bl	800a4b0 <printf>
 80110b6:	6823      	ldr	r3, [r4, #0]
 80110b8:	480d      	ldr	r0, [pc, #52]	; (80110f0 <DmxSend::Print()+0x44>)
 80110ba:	6819      	ldr	r1, [r3, #0]
 80110bc:	f7f9 f9f8 	bl	800a4b0 <printf>
 80110c0:	6823      	ldr	r3, [r4, #0]
 80110c2:	480c      	ldr	r0, [pc, #48]	; (80110f4 <DmxSend::Print()+0x48>)
 80110c4:	6859      	ldr	r1, [r3, #4]
 80110c6:	f7f9 f9f3 	bl	800a4b0 <printf>
 80110ca:	6823      	ldr	r3, [r4, #0]
 80110cc:	490a      	ldr	r1, [pc, #40]	; (80110f8 <DmxSend::Print()+0x4c>)
 80110ce:	689b      	ldr	r3, [r3, #8]
 80110d0:	480a      	ldr	r0, [pc, #40]	; (80110fc <DmxSend::Print()+0x50>)
 80110d2:	fbb1 f1f3 	udiv	r1, r1, r3
 80110d6:	f7f9 f9eb 	bl	800a4b0 <printf>
 80110da:	6823      	ldr	r3, [r4, #0]
 80110dc:	4808      	ldr	r0, [pc, #32]	; (8011100 <DmxSend::Print()+0x54>)
 80110de:	8a19      	ldrh	r1, [r3, #16]
 80110e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110e4:	f7f9 b9e4 	b.w	800a4b0 <printf>
 80110e8:	2000105c 	andcs	r1, r0, ip, asr r0
 80110ec:	0801c4e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, sl, lr, pc}
 80110f0:	0801c4ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, sl, lr, pc}
 80110f4:	0801c503 	stmdaeq	r1, {r0, r1, r8, sl, lr, pc}
 80110f8:	000f4240 	andeq	r4, pc, r0, asr #4
 80110fc:	0801c517 	stmdaeq	r1, {r0, r1, r2, r4, r8, sl, lr, pc}
 8011100:	0801c52b 	stmdaeq	r1, {r0, r1, r3, r5, r8, sl, lr, pc}

08011104 <DmxSend::~DmxSend()>:
 8011104:	b510      	push	{r4, lr}
 8011106:	4604      	mov	r4, r0
 8011108:	f007 f80e 	bl	8018128 <operator delete(void*)>
 801110c:	4620      	mov	r0, r4
 801110e:	bd10      	pop	{r4, pc}

08011110 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 8011110:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011112:	88c6      	ldrh	r6, [r0, #6]
 8011114:	8885      	ldrh	r5, [r0, #4]
 8011116:	42ae      	cmp	r6, r5
 8011118:	d216      	bcs.n	8011148 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 801111a:	4604      	mov	r4, r0
 801111c:	6800      	ldr	r0, [r0, #0]
 801111e:	1bad      	subs	r5, r5, r6
 8011120:	4430      	add	r0, r6
 8011122:	7a26      	ldrb	r6, [r4, #8]
 8011124:	b923      	cbnz	r3, 8011130 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 8011126:	b926      	cbnz	r6, 8011132 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 8011128:	9200      	str	r2, [sp, #0]
 801112a:	460b      	mov	r3, r1
 801112c:	4a09      	ldr	r2, [pc, #36]	; (8011154 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 801112e:	e003      	b.n	8011138 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 8011130:	b166      	cbz	r6, 801114c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 8011132:	9200      	str	r2, [sp, #0]
 8011134:	4a08      	ldr	r2, [pc, #32]	; (8011158 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 8011136:	460b      	mov	r3, r1
 8011138:	4629      	mov	r1, r5
 801113a:	f7f9 f9e1 	bl	800a500 <snprintf>
 801113e:	4285      	cmp	r5, r0
 8011140:	bfa2      	ittt	ge
 8011142:	88e3      	ldrhge	r3, [r4, #6]
 8011144:	181b      	addge	r3, r3, r0
 8011146:	80e3      	strhge	r3, [r4, #6]
 8011148:	b002      	add	sp, #8
 801114a:	bd70      	pop	{r4, r5, r6, pc}
 801114c:	9200      	str	r2, [sp, #0]
 801114e:	460b      	mov	r3, r1
 8011150:	4a02      	ldr	r2, [pc, #8]	; (801115c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011152:	e7f1      	b.n	8011138 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 8011154:	0801ada1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, sp, pc}
 8011158:	0801ad98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, sp, pc}
 801115c:	0801ada2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, sp, pc}

08011160 <DmxParams::DmxParams(DmxParamsStore*)>:
 8011160:	4a04      	ldr	r2, [pc, #16]	; (8011174 <DmxParams::DmxParams(DmxParamsStore*)+0x14>)
 8011162:	6001      	str	r1, [r0, #0]
 8011164:	2100      	movs	r1, #0
 8011166:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801116a:	f64f 7228 	movw	r2, #65320	; 0xff28
 801116e:	8182      	strh	r2, [r0, #12]
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	000c00b0 	strheq	r0, [ip], -r0	; <UNPREDICTABLE>

08011178 <DmxParams::Load()>:
 8011178:	b508      	push	{r3, lr}
 801117a:	2300      	movs	r3, #0
 801117c:	4601      	mov	r1, r0
 801117e:	6043      	str	r3, [r0, #4]
 8011180:	6800      	ldr	r0, [r0, #0]
 8011182:	b120      	cbz	r0, 801118e <DmxParams::Load()+0x16>
 8011184:	6803      	ldr	r3, [r0, #0]
 8011186:	3104      	adds	r1, #4
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	4798      	blx	r3
 801118c:	2001      	movs	r0, #1
 801118e:	bd08      	pop	{r3, pc}

08011190 <DmxParams::Load(char const*, unsigned int)>:
 8011190:	6803      	ldr	r3, [r0, #0]
 8011192:	b1d3      	cbz	r3, 80111ca <DmxParams::Load(char const*, unsigned int)+0x3a>
 8011194:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011196:	2300      	movs	r3, #0
 8011198:	6043      	str	r3, [r0, #4]
 801119a:	4604      	mov	r4, r0
 801119c:	460d      	mov	r5, r1
 801119e:	4616      	mov	r6, r2
 80111a0:	490a      	ldr	r1, [pc, #40]	; (80111cc <DmxParams::Load(char const*, unsigned int)+0x3c>)
 80111a2:	4602      	mov	r2, r0
 80111a4:	4668      	mov	r0, sp
 80111a6:	f006 f9ef 	bl	8017588 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 80111aa:	4632      	mov	r2, r6
 80111ac:	4629      	mov	r1, r5
 80111ae:	4668      	mov	r0, sp
 80111b0:	f006 f9ee 	bl	8017590 <ReadConfigFile::Read(char const*, unsigned int)>
 80111b4:	4621      	mov	r1, r4
 80111b6:	f851 0b04 	ldr.w	r0, [r1], #4
 80111ba:	6803      	ldr	r3, [r0, #0]
 80111bc:	689b      	ldr	r3, [r3, #8]
 80111be:	4798      	blx	r3
 80111c0:	4668      	mov	r0, sp
 80111c2:	f006 f9e4 	bl	801758e <ReadConfigFile::~ReadConfigFile()>
 80111c6:	b002      	add	sp, #8
 80111c8:	bd70      	pop	{r4, r5, r6, pc}
 80111ca:	4770      	bx	lr
 80111cc:	0801129d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r9, ip}

080111d0 <DmxParams::callbackFunction(char const*)>:
 80111d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111d2:	460d      	mov	r5, r1
 80111d4:	4604      	mov	r4, r0
 80111d6:	492d      	ldr	r1, [pc, #180]	; (801128c <DmxParams::callbackFunction(char const*)+0xbc>)
 80111d8:	f10d 0206 	add.w	r2, sp, #6
 80111dc:	4628      	mov	r0, r5
 80111de:	f006 fac0 	bl	8017762 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 80111e2:	b988      	cbnz	r0, 8011208 <DmxParams::callbackFunction(char const*)+0x38>
 80111e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80111e8:	6863      	ldr	r3, [r4, #4]
 80111ea:	2a5b      	cmp	r2, #91	; 0x5b
 80111ec:	d907      	bls.n	80111fe <DmxParams::callbackFunction(char const*)+0x2e>
 80111ee:	2ab0      	cmp	r2, #176	; 0xb0
 80111f0:	d005      	beq.n	80111fe <DmxParams::callbackFunction(char const*)+0x2e>
 80111f2:	8122      	strh	r2, [r4, #8]
 80111f4:	f043 0301 	orr.w	r3, r3, #1
 80111f8:	6063      	str	r3, [r4, #4]
 80111fa:	b003      	add	sp, #12
 80111fc:	bd30      	pop	{r4, r5, pc}
 80111fe:	22b0      	movs	r2, #176	; 0xb0
 8011200:	8122      	strh	r2, [r4, #8]
 8011202:	f023 0301 	bic.w	r3, r3, #1
 8011206:	e7f7      	b.n	80111f8 <DmxParams::callbackFunction(char const*)+0x28>
 8011208:	4921      	ldr	r1, [pc, #132]	; (8011290 <DmxParams::callbackFunction(char const*)+0xc0>)
 801120a:	f10d 0206 	add.w	r2, sp, #6
 801120e:	4628      	mov	r0, r5
 8011210:	f006 faa7 	bl	8017762 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 8011214:	b968      	cbnz	r0, 8011232 <DmxParams::callbackFunction(char const*)+0x62>
 8011216:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801121a:	6863      	ldr	r3, [r4, #4]
 801121c:	2a0c      	cmp	r2, #12
 801121e:	bf93      	iteet	ls
 8011220:	220c      	movls	r2, #12
 8011222:	8162      	strhhi	r2, [r4, #10]
 8011224:	f043 0302 	orrhi.w	r3, r3, #2
 8011228:	8162      	strhls	r2, [r4, #10]
 801122a:	bf98      	it	ls
 801122c:	f023 0302 	bicls.w	r3, r3, #2
 8011230:	e7e2      	b.n	80111f8 <DmxParams::callbackFunction(char const*)+0x28>
 8011232:	4918      	ldr	r1, [pc, #96]	; (8011294 <DmxParams::callbackFunction(char const*)+0xc4>)
 8011234:	f10d 0205 	add.w	r2, sp, #5
 8011238:	4628      	mov	r0, r5
 801123a:	f006 fada 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801123e:	b950      	cbnz	r0, 8011256 <DmxParams::callbackFunction(char const*)+0x86>
 8011240:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011244:	6863      	ldr	r3, [r4, #4]
 8011246:	7322      	strb	r2, [r4, #12]
 8011248:	2a28      	cmp	r2, #40	; 0x28
 801124a:	bf14      	ite	ne
 801124c:	f043 0304 	orrne.w	r3, r3, #4
 8011250:	f023 0304 	biceq.w	r3, r3, #4
 8011254:	e7d0      	b.n	80111f8 <DmxParams::callbackFunction(char const*)+0x28>
 8011256:	4910      	ldr	r1, [pc, #64]	; (8011298 <DmxParams::callbackFunction(char const*)+0xc8>)
 8011258:	f10d 0206 	add.w	r2, sp, #6
 801125c:	4628      	mov	r0, r5
 801125e:	f006 fa80 	bl	8017762 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 8011262:	2800      	cmp	r0, #0
 8011264:	d1c9      	bne.n	80111fa <DmxParams::callbackFunction(char const*)+0x2a>
 8011266:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801126a:	6863      	ldr	r3, [r4, #4]
 801126c:	1e91      	subs	r1, r2, #2
 801126e:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 8011272:	bf3b      	ittet	cc
 8011274:	0852      	lsrcc	r2, r2, #1
 8011276:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 801127a:	22ff      	movcs	r2, #255	; 0xff
 801127c:	7362      	strbcc	r2, [r4, #13]
 801127e:	bf32      	itee	cc
 8011280:	f043 0308 	orrcc.w	r3, r3, #8
 8011284:	7362      	strbcs	r2, [r4, #13]
 8011286:	f023 0308 	biccs.w	r3, r3, #8
 801128a:	e7b5      	b.n	80111f8 <DmxParams::callbackFunction(char const*)+0x28>
 801128c:	0801c578 	stmdaeq	r1, {r3, r4, r5, r6, r8, sl, lr, pc}
 8011290:	0801c59c 	stmdaeq	r1, {r2, r3, r4, r7, r8, sl, lr, pc}
 8011294:	0801c58f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, sl, lr, pc}
 8011298:	0801c583 	stmdaeq	r1, {r0, r1, r7, r8, sl, lr, pc}

0801129c <DmxParams::staticCallbackFunction(void*, char const*)>:
 801129c:	f7ff bf98 	b.w	80111d0 <DmxParams::callbackFunction(char const*)>

080112a0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>:
 80112a0:	b570      	push	{r4, r5, r6, lr}
 80112a2:	4604      	mov	r4, r0
 80112a4:	b086      	sub	sp, #24
 80112a6:	4615      	mov	r5, r2
 80112a8:	461e      	mov	r6, r3
 80112aa:	3004      	adds	r0, #4
 80112ac:	b369      	cbz	r1, 801130a <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x6a>
 80112ae:	220a      	movs	r2, #10
 80112b0:	f006 fffd 	bl	80182ae <memmove>
 80112b4:	462a      	mov	r2, r5
 80112b6:	4933      	ldr	r1, [pc, #204]	; (8011384 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe4>)
 80112b8:	4633      	mov	r3, r6
 80112ba:	a803      	add	r0, sp, #12
 80112bc:	f006 f8c4 	bl	8017448 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80112c0:	6863      	ldr	r3, [r4, #4]
 80112c2:	8922      	ldrh	r2, [r4, #8]
 80112c4:	4930      	ldr	r1, [pc, #192]	; (8011388 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe8>)
 80112c6:	f003 0301 	and.w	r3, r3, #1
 80112ca:	a803      	add	r0, sp, #12
 80112cc:	f7ff ff20 	bl	8011110 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 80112d0:	6863      	ldr	r3, [r4, #4]
 80112d2:	8962      	ldrh	r2, [r4, #10]
 80112d4:	492d      	ldr	r1, [pc, #180]	; (801138c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xec>)
 80112d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80112da:	a803      	add	r0, sp, #12
 80112dc:	f7ff ff18 	bl	8011110 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 80112e0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80112e4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80112e8:	7b23      	ldrb	r3, [r4, #12]
 80112ea:	6861      	ldr	r1, [r4, #4]
 80112ec:	42aa      	cmp	r2, r5
 80112ee:	d221      	bcs.n	8011334 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x94>
 80112f0:	9803      	ldr	r0, [sp, #12]
 80112f2:	0749      	lsls	r1, r1, #29
 80112f4:	4410      	add	r0, r2
 80112f6:	eba5 0502 	sub.w	r5, r5, r2
 80112fa:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80112fe:	d40b      	bmi.n	8011318 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x78>
 8011300:	b95a      	cbnz	r2, 801131a <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x7a>
 8011302:	9300      	str	r3, [sp, #0]
 8011304:	4a22      	ldr	r2, [pc, #136]	; (8011390 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 8011306:	4b23      	ldr	r3, [pc, #140]	; (8011394 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 8011308:	e00a      	b.n	8011320 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 801130a:	6823      	ldr	r3, [r4, #0]
 801130c:	681a      	ldr	r2, [r3, #0]
 801130e:	4601      	mov	r1, r0
 8011310:	68d2      	ldr	r2, [r2, #12]
 8011312:	4618      	mov	r0, r3
 8011314:	4790      	blx	r2
 8011316:	e7cd      	b.n	80112b4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x14>
 8011318:	b37a      	cbz	r2, 801137a <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xda>
 801131a:	9300      	str	r3, [sp, #0]
 801131c:	4a1e      	ldr	r2, [pc, #120]	; (8011398 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 801131e:	4b1d      	ldr	r3, [pc, #116]	; (8011394 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 8011320:	4629      	mov	r1, r5
 8011322:	f7f9 f8ed 	bl	800a500 <snprintf>
 8011326:	4285      	cmp	r5, r0
 8011328:	bfa2      	ittt	ge
 801132a:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 801132e:	18c0      	addge	r0, r0, r3
 8011330:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8011334:	7b62      	ldrb	r2, [r4, #13]
 8011336:	6863      	ldr	r3, [r4, #4]
 8011338:	4918      	ldr	r1, [pc, #96]	; (801139c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 801133a:	3201      	adds	r2, #1
 801133c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011340:	0052      	lsls	r2, r2, #1
 8011342:	a803      	add	r0, sp, #12
 8011344:	f7ff fee4 	bl	8011110 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 8011348:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801134c:	b17b      	cbz	r3, 801136e <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xce>
 801134e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011352:	9b03      	ldr	r3, [sp, #12]
 8011354:	4413      	add	r3, r2
 8011356:	227d      	movs	r2, #125	; 0x7d
 8011358:	f803 2c01 	strb.w	r2, [r3, #-1]
 801135c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011360:	9903      	ldr	r1, [sp, #12]
 8011362:	54ca      	strb	r2, [r1, r3]
 8011364:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011368:	3301      	adds	r3, #1
 801136a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801136e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011374:	601a      	str	r2, [r3, #0]
 8011376:	b006      	add	sp, #24
 8011378:	bd70      	pop	{r4, r5, r6, pc}
 801137a:	9300      	str	r3, [sp, #0]
 801137c:	4a08      	ldr	r2, [pc, #32]	; (80113a0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x100>)
 801137e:	4b05      	ldr	r3, [pc, #20]	; (8011394 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 8011380:	e7ce      	b.n	8011320 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 8011382:	bf00      	nop
 8011384:	0801c5a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, sl, lr, pc}
 8011388:	0801c578 	stmdaeq	r1, {r3, r4, r5, r6, r8, sl, lr, pc}
 801138c:	0801c59c 	stmdaeq	r1, {r2, r3, r4, r7, r8, sl, lr, pc}
 8011390:	0801ada1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, sp, pc}
 8011394:	0801c58f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, sl, lr, pc}
 8011398:	0801ad98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, sp, pc}
 801139c:	0801c583 	stmdaeq	r1, {r0, r1, r7, r8, sl, lr, pc}
 80113a0:	0801ada2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, sp, pc}

080113a4 <DmxParams::Save(char*, unsigned int, unsigned int&)>:
 80113a4:	b513      	push	{r0, r1, r4, lr}
 80113a6:	6804      	ldr	r4, [r0, #0]
 80113a8:	b914      	cbnz	r4, 80113b0 <DmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80113aa:	601c      	str	r4, [r3, #0]
 80113ac:	b002      	add	sp, #8
 80113ae:	bd10      	pop	{r4, pc}
 80113b0:	9300      	str	r3, [sp, #0]
 80113b2:	4613      	mov	r3, r2
 80113b4:	460a      	mov	r2, r1
 80113b6:	2100      	movs	r1, #0
 80113b8:	f7ff ff72 	bl	80112a0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>
 80113bc:	e7f6      	b.n	80113ac <DmxParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

080113c0 <DmxParams::Set(Dmx*)>:
 80113c0:	b513      	push	{r0, r1, r4, lr}
 80113c2:	4604      	mov	r4, r0
 80113c4:	4608      	mov	r0, r1
 80113c6:	6863      	ldr	r3, [r4, #4]
 80113c8:	07db      	lsls	r3, r3, #31
 80113ca:	d504      	bpl.n	80113d6 <DmxParams::Set(Dmx*)+0x16>
 80113cc:	8921      	ldrh	r1, [r4, #8]
 80113ce:	9001      	str	r0, [sp, #4]
 80113d0:	f000 faf8 	bl	80119c4 <Dmx::SetDmxBreakTime(unsigned int)>
 80113d4:	9801      	ldr	r0, [sp, #4]
 80113d6:	6863      	ldr	r3, [r4, #4]
 80113d8:	0799      	lsls	r1, r3, #30
 80113da:	d504      	bpl.n	80113e6 <DmxParams::Set(Dmx*)+0x26>
 80113dc:	8961      	ldrh	r1, [r4, #10]
 80113de:	9001      	str	r0, [sp, #4]
 80113e0:	f000 fafa 	bl	80119d8 <Dmx::SetDmxMabTime(unsigned int)>
 80113e4:	9801      	ldr	r0, [sp, #4]
 80113e6:	6863      	ldr	r3, [r4, #4]
 80113e8:	075a      	lsls	r2, r3, #29
 80113ea:	d508      	bpl.n	80113fe <DmxParams::Set(Dmx*)+0x3e>
 80113ec:	7b21      	ldrb	r1, [r4, #12]
 80113ee:	b111      	cbz	r1, 80113f6 <DmxParams::Set(Dmx*)+0x36>
 80113f0:	4b09      	ldr	r3, [pc, #36]	; (8011418 <DmxParams::Set(Dmx*)+0x58>)
 80113f2:	fbb3 f1f1 	udiv	r1, r3, r1
 80113f6:	9001      	str	r0, [sp, #4]
 80113f8:	f000 fabc 	bl	8011974 <Dmx::SetDmxPeriodTime(unsigned int)>
 80113fc:	9801      	ldr	r0, [sp, #4]
 80113fe:	6863      	ldr	r3, [r4, #4]
 8011400:	071b      	lsls	r3, r3, #28
 8011402:	d507      	bpl.n	8011414 <DmxParams::Set(Dmx*)+0x54>
 8011404:	7b61      	ldrb	r1, [r4, #13]
 8011406:	3101      	adds	r1, #1
 8011408:	0049      	lsls	r1, r1, #1
 801140a:	b002      	add	sp, #8
 801140c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011410:	f000 baec 	b.w	80119ec <Dmx::SetDmxSlots(unsigned short)>
 8011414:	b002      	add	sp, #8
 8011416:	bd10      	pop	{r4, pc}
 8011418:	000f4240 	andeq	r4, pc, r0, asr #4

0801141c <DmxParams::Dump()>:
 801141c:	4770      	bx	lr

0801141e <_gpio_mode_output(unsigned int, unsigned int)>:
 801141e:	b513      	push	{r0, r1, r4, lr}
 8011420:	460a      	mov	r2, r1
 8011422:	9101      	str	r1, [sp, #4]
 8011424:	2100      	movs	r1, #0
 8011426:	4604      	mov	r4, r0
 8011428:	f007 fe8d 	bl	8019146 <gpio_af_set>
 801142c:	9b01      	ldr	r3, [sp, #4]
 801142e:	2200      	movs	r2, #0
 8011430:	2101      	movs	r1, #1
 8011432:	4620      	mov	r0, r4
 8011434:	b002      	add	sp, #8
 8011436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801143a:	f007 be49 	b.w	80190d0 <gpio_mode_set>
	...

08011440 <_port_to_uart(unsigned int)>:
 8011440:	4a03      	ldr	r2, [pc, #12]	; (8011450 <_port_to_uart(unsigned int)+0x10>)
 8011442:	4b04      	ldr	r3, [pc, #16]	; (8011454 <_port_to_uart(unsigned int)+0x14>)
 8011444:	2800      	cmp	r0, #0
 8011446:	bf14      	ite	ne
 8011448:	4610      	movne	r0, r2
 801144a:	4618      	moveq	r0, r3
 801144c:	4770      	bx	lr
 801144e:	bf00      	nop
 8011450:	40011400 	andmi	r1, r1, r0, lsl #8
 8011454:	40004800 	andmi	r4, r0, r0, lsl #16

08011458 <TIMER1_IRQHandler>:
 8011458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801145a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801145e:	4d47      	ldr	r5, [pc, #284]	; (801157c <TIMER1_IRQHandler+0x124>)
 8011460:	691e      	ldr	r6, [r3, #16]
 8011462:	4f47      	ldr	r7, [pc, #284]	; (8011580 <TIMER1_IRQHandler+0x128>)
 8011464:	882c      	ldrh	r4, [r5, #0]
 8011466:	2308      	movs	r3, #8
 8011468:	07b1      	lsls	r1, r6, #30
 801146a:	b2a4      	uxth	r4, r4
 801146c:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8011470:	d528      	bpl.n	80114c4 <TIMER1_IRQHandler+0x6c>
 8011472:	07e2      	lsls	r2, r4, #31
 8011474:	d50d      	bpl.n	8011492 <TIMER1_IRQHandler+0x3a>
 8011476:	882b      	ldrh	r3, [r5, #0]
 8011478:	4842      	ldr	r0, [pc, #264]	; (8011584 <TIMER1_IRQHandler+0x12c>)
 801147a:	b29b      	uxth	r3, r3
 801147c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011484:	802b      	strh	r3, [r5, #0]
 8011486:	f7ff ffca 	bl	801141e <_gpio_mode_output(unsigned int, unsigned int)>
 801148a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801148e:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8011492:	07a3      	lsls	r3, r4, #30
 8011494:	d50c      	bpl.n	80114b0 <TIMER1_IRQHandler+0x58>
 8011496:	882b      	ldrh	r3, [r5, #0]
 8011498:	483b      	ldr	r0, [pc, #236]	; (8011588 <TIMER1_IRQHandler+0x130>)
 801149a:	b29b      	uxth	r3, r3
 801149c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80114a0:	2140      	movs	r1, #64	; 0x40
 80114a2:	802b      	strh	r3, [r5, #0]
 80114a4:	f7ff ffbb 	bl	801141e <_gpio_mode_output(unsigned int, unsigned int)>
 80114a8:	4b35      	ldr	r3, [pc, #212]	; (8011580 <TIMER1_IRQHandler+0x128>)
 80114aa:	2240      	movs	r2, #64	; 0x40
 80114ac:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 80114b0:	4631      	mov	r1, r6
 80114b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80114b6:	f008 f830 	bl	801951a <timer_interrupt_flag_clear>
 80114ba:	4b31      	ldr	r3, [pc, #196]	; (8011580 <TIMER1_IRQHandler+0x128>)
 80114bc:	2208      	movs	r2, #8
 80114be:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80114c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114c4:	0777      	lsls	r7, r6, #29
 80114c6:	d51c      	bpl.n	8011502 <TIMER1_IRQHandler+0xaa>
 80114c8:	05e5      	lsls	r5, r4, #23
 80114ca:	d50c      	bpl.n	80114e6 <TIMER1_IRQHandler+0x8e>
 80114cc:	482d      	ldr	r0, [pc, #180]	; (8011584 <TIMER1_IRQHandler+0x12c>)
 80114ce:	2201      	movs	r2, #1
 80114d0:	2102      	movs	r1, #2
 80114d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114d6:	f007 fdfb 	bl	80190d0 <gpio_mode_set>
 80114da:	482a      	ldr	r0, [pc, #168]	; (8011584 <TIMER1_IRQHandler+0x12c>)
 80114dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80114e0:	2107      	movs	r1, #7
 80114e2:	f007 fe30 	bl	8019146 <gpio_af_set>
 80114e6:	05a0      	lsls	r0, r4, #22
 80114e8:	d5e2      	bpl.n	80114b0 <TIMER1_IRQHandler+0x58>
 80114ea:	4827      	ldr	r0, [pc, #156]	; (8011588 <TIMER1_IRQHandler+0x130>)
 80114ec:	2340      	movs	r3, #64	; 0x40
 80114ee:	2201      	movs	r2, #1
 80114f0:	2102      	movs	r1, #2
 80114f2:	f007 fded 	bl	80190d0 <gpio_mode_set>
 80114f6:	4824      	ldr	r0, [pc, #144]	; (8011588 <TIMER1_IRQHandler+0x130>)
 80114f8:	2240      	movs	r2, #64	; 0x40
 80114fa:	2108      	movs	r1, #8
 80114fc:	f007 fe23 	bl	8019146 <gpio_af_set>
 8011500:	e7d6      	b.n	80114b0 <TIMER1_IRQHandler+0x58>
 8011502:	0731      	lsls	r1, r6, #28
 8011504:	d5d4      	bpl.n	80114b0 <TIMER1_IRQHandler+0x58>
 8011506:	05e2      	lsls	r2, r4, #23
 8011508:	d516      	bpl.n	8011538 <TIMER1_IRQHandler+0xe0>
 801150a:	4d20      	ldr	r5, [pc, #128]	; (801158c <TIMER1_IRQHandler+0x134>)
 801150c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 801150e:	f023 0301 	bic.w	r3, r3, #1
 8011512:	65ab      	str	r3, [r5, #88]	; 0x58
 8011514:	2103      	movs	r1, #3
 8011516:	4628      	mov	r0, r5
 8011518:	2220      	movs	r2, #32
 801151a:	f007 f9ad 	bl	8018878 <dma_interrupt_flag_clear>
 801151e:	4b1c      	ldr	r3, [pc, #112]	; (8011590 <TIMER1_IRQHandler+0x138>)
 8011520:	666b      	str	r3, [r5, #100]	; 0x64
 8011522:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8011526:	65eb      	str	r3, [r5, #92]	; 0x5c
 8011528:	6dab      	ldr	r3, [r5, #88]	; 0x58
 801152a:	481a      	ldr	r0, [pc, #104]	; (8011594 <TIMER1_IRQHandler+0x13c>)
 801152c:	f043 0301 	orr.w	r3, r3, #1
 8011530:	65ab      	str	r3, [r5, #88]	; 0x58
 8011532:	2180      	movs	r1, #128	; 0x80
 8011534:	f008 fa38 	bl	80199a8 <usart_dma_transmit_config>
 8011538:	05a3      	lsls	r3, r4, #22
 801153a:	d5b9      	bpl.n	80114b0 <TIMER1_IRQHandler+0x58>
 801153c:	4c13      	ldr	r4, [pc, #76]	; (801158c <TIMER1_IRQHandler+0x134>)
 801153e:	4816      	ldr	r0, [pc, #88]	; (8011598 <TIMER1_IRQHandler+0x140>)
 8011540:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 8011544:	f023 0301 	bic.w	r3, r3, #1
 8011548:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
 801154c:	2220      	movs	r2, #32
 801154e:	2106      	movs	r1, #6
 8011550:	f007 f992 	bl	8018878 <dma_interrupt_flag_clear>
 8011554:	4b0e      	ldr	r3, [pc, #56]	; (8011590 <TIMER1_IRQHandler+0x138>)
 8011556:	4811      	ldr	r0, [pc, #68]	; (801159c <TIMER1_IRQHandler+0x144>)
 8011558:	f503 7201 	add.w	r2, r3, #516	; 0x204
 801155c:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8011560:	f8c4 24ac 	str.w	r2, [r4, #1196]	; 0x4ac
 8011564:	f8c4 34a4 	str.w	r3, [r4, #1188]	; 0x4a4
 8011568:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 801156c:	f043 0301 	orr.w	r3, r3, #1
 8011570:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
 8011574:	2180      	movs	r1, #128	; 0x80
 8011576:	f008 fa17 	bl	80199a8 <usart_dma_transmit_config>
 801157a:	e799      	b.n	80114b0 <TIMER1_IRQHandler+0x58>
 801157c:	20001058 	andcs	r1, r0, r8, asr r0
 8011580:	40020000 	andmi	r0, r2, r0
 8011584:	40020c00 	andmi	r0, r2, r0, lsl #24
 8011588:	40020800 	andmi	r0, r2, r0, lsl #16
 801158c:	40026000 	andmi	r6, r2, r0
 8011590:	20000c48 	andcs	r0, r0, r8, asr #24
 8011594:	40004800 	andmi	r4, r0, r0, lsl #16
 8011598:	40026400 	andmi	r6, r2, r0, lsl #8
 801159c:	40011400 	andmi	r1, r1, r0, lsl #8

080115a0 <Dmx::ClearData(unsigned int)>:
 80115a0:	4a0a      	ldr	r2, [pc, #40]	; (80115cc <Dmx::ClearData(unsigned int)+0x2c>)
 80115a2:	f44f 7301 	mov.w	r3, #516	; 0x204
 80115a6:	fb03 2301 	mla	r3, r3, r1, r2
 80115aa:	b510      	push	{r4, lr}
 80115ac:	f203 2002 	addw	r0, r3, #514	; 0x202
 80115b0:	2400      	movs	r4, #0
 80115b2:	f823 4b02 	strh.w	r4, [r3], #2
 80115b6:	4283      	cmp	r3, r0
 80115b8:	d1fb      	bne.n	80115b2 <Dmx::ClearData(unsigned int)+0x12>
 80115ba:	f44f 7301 	mov.w	r3, #516	; 0x204
 80115be:	fb03 2101 	mla	r1, r3, r1, r2
 80115c2:	f240 2301 	movw	r3, #513	; 0x201
 80115c6:	f8a1 3202 	strh.w	r3, [r1, #514]	; 0x202
 80115ca:	bd10      	pop	{r4, pc}
 80115cc:	20000c48 	andcs	r0, r0, r8, asr #24

080115d0 <Dmx::StartData(unsigned int, unsigned int)>:
 80115d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115d2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80115d6:	b085      	sub	sp, #20
 80115d8:	6943      	ldr	r3, [r0, #20]
 80115da:	460c      	mov	r4, r1
 80115dc:	4615      	mov	r5, r2
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d168      	bne.n	80116b4 <Dmx::StartData(unsigned int, unsigned int)+0xe4>
 80115e2:	4e41      	ldr	r6, [pc, #260]	; (80116e8 <Dmx::StartData(unsigned int, unsigned int)+0x118>)
 80115e4:	8834      	ldrh	r4, [r6, #0]
 80115e6:	b2a4      	uxth	r4, r4
 80115e8:	2c00      	cmp	r4, #0
 80115ea:	d157      	bne.n	801169c <Dmx::StartData(unsigned int, unsigned int)+0xcc>
 80115ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80115f0:	f007 fdea 	bl	80191c8 <rcu_periph_clock_enable>
 80115f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80115f8:	f007 fea2 	bl	8019340 <timer_deinit>
 80115fc:	4b3b      	ldr	r3, [pc, #236]	; (80116ec <Dmx::StartData(unsigned int, unsigned int)+0x11c>)
 80115fe:	f88d 400c 	strb.w	r4, [sp, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	9302      	str	r3, [sp, #8]
 8011606:	4669      	mov	r1, sp
 8011608:	23c7      	movs	r3, #199	; 0xc7
 801160a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801160e:	e9cd 3400 	strd	r3, r4, [sp]
 8011612:	f007 ff3b 	bl	801948c <timer_init>
 8011616:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801161a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801161e:	f007 ff7f 	bl	8019520 <timer_flag_clear>
 8011622:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011626:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801162a:	f007 ff76 	bl	801951a <timer_interrupt_flag_clear>
 801162e:	2210      	movs	r2, #16
 8011630:	4621      	mov	r1, r4
 8011632:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011636:	f008 f863 	bl	8019700 <timer_channel_output_mode_config>
 801163a:	2210      	movs	r2, #16
 801163c:	2101      	movs	r1, #1
 801163e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011642:	f008 f85d 	bl	8019700 <timer_channel_output_mode_config>
 8011646:	4f2a      	ldr	r7, [pc, #168]	; (80116f0 <Dmx::StartData(unsigned int, unsigned int)+0x120>)
 8011648:	2210      	movs	r2, #16
 801164a:	2102      	movs	r1, #2
 801164c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011650:	f008 f856 	bl	8019700 <timer_channel_output_mode_config>
 8011654:	4622      	mov	r2, r4
 8011656:	4621      	mov	r1, r4
 8011658:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801165c:	f008 f876 	bl	801974c <timer_channel_output_pulse_value_config>
 8011660:	683a      	ldr	r2, [r7, #0]
 8011662:	2101      	movs	r1, #1
 8011664:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011668:	f008 f870 	bl	801974c <timer_channel_output_pulse_value_config>
 801166c:	4b21      	ldr	r3, [pc, #132]	; (80116f4 <Dmx::StartData(unsigned int, unsigned int)+0x124>)
 801166e:	683a      	ldr	r2, [r7, #0]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	2102      	movs	r1, #2
 8011674:	441a      	add	r2, r3
 8011676:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801167a:	f008 f867 	bl	801974c <timer_channel_output_pulse_value_config>
 801167e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011682:	210e      	movs	r1, #14
 8011684:	f007 ff45 	bl	8019512 <timer_interrupt_enable>
 8011688:	4b1b      	ldr	r3, [pc, #108]	; (80116f8 <Dmx::StartData(unsigned int, unsigned int)+0x128>)
 801168a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801168e:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 8011692:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011696:	601a      	str	r2, [r3, #0]
 8011698:	f007 ff36 	bl	8019508 <timer_enable>
 801169c:	8831      	ldrh	r1, [r6, #0]
 801169e:	2201      	movs	r2, #1
 80116a0:	fa02 f305 	lsl.w	r3, r2, r5
 80116a4:	430b      	orrs	r3, r1
 80116a6:	b29b      	uxth	r3, r3
 80116a8:	8033      	strh	r3, [r6, #0]
 80116aa:	4b14      	ldr	r3, [pc, #80]	; (80116fc <Dmx::StartData(unsigned int, unsigned int)+0x12c>)
 80116ac:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80116b0:	b005      	add	sp, #20
 80116b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116b4:	4b12      	ldr	r3, [pc, #72]	; (8011700 <Dmx::StartData(unsigned int, unsigned int)+0x130>)
 80116b6:	f44f 7204 	mov.w	r2, #528	; 0x210
 80116ba:	fb02 3305 	mla	r3, r2, r5, r3
 80116be:	2200      	movs	r2, #0
 80116c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80116c4:	2107      	movs	r1, #7
 80116c6:	4620      	mov	r0, r4
 80116c8:	f008 f974 	bl	80199b4 <usart_flag_get>
 80116cc:	2800      	cmp	r0, #0
 80116ce:	d0f9      	beq.n	80116c4 <Dmx::StartData(unsigned int, unsigned int)+0xf4>
 80116d0:	490c      	ldr	r1, [pc, #48]	; (8011704 <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 80116d2:	4620      	mov	r0, r4
 80116d4:	f008 f990 	bl	80199f8 <usart_interrupt_flag_clear>
 80116d8:	f240 3105 	movw	r1, #773	; 0x305
 80116dc:	4620      	mov	r0, r4
 80116de:	f008 f97f 	bl	80199e0 <usart_interrupt_enable>
 80116e2:	4b06      	ldr	r3, [pc, #24]	; (80116fc <Dmx::StartData(unsigned int, unsigned int)+0x12c>)
 80116e4:	2202      	movs	r2, #2
 80116e6:	e7e1      	b.n	80116ac <Dmx::StartData(unsigned int, unsigned int)+0xdc>
 80116e8:	20001058 	andcs	r1, r0, r8, asr r0
 80116ec:	20000004 	andcs	r0, r0, r4
 80116f0:	2000000c 	andcs	r0, r0, ip
 80116f4:	20000008 	andcs	r0, r0, r8
 80116f8:	e000e100 	and	lr, r0, r0, lsl #2
 80116fc:	20001050 	andcs	r1, r0, r0, asr r0
 8011700:	20000828 	andcs	r0, r0, r8, lsr #16
 8011704:	00050305 	andeq	r0, r5, r5, lsl #6

08011708 <Dmx::StopData(unsigned int, unsigned int)>:
 8011708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801170c:	4f1e      	ldr	r7, [pc, #120]	; (8011788 <Dmx::StopData(unsigned int, unsigned int)+0x80>)
 801170e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 8011712:	4688      	mov	r8, r1
 8011714:	4614      	mov	r4, r2
 8011716:	b333      	cbz	r3, 8011766 <Dmx::StopData(unsigned int, unsigned int)+0x5e>
 8011718:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801171c:	6943      	ldr	r3, [r0, #20]
 801171e:	bb23      	cbnz	r3, 801176a <Dmx::StopData(unsigned int, unsigned int)+0x62>
 8011720:	4d1a      	ldr	r5, [pc, #104]	; (801178c <Dmx::StopData(unsigned int, unsigned int)+0x84>)
 8011722:	882b      	ldrh	r3, [r5, #0]
 8011724:	2601      	movs	r6, #1
 8011726:	fa06 f202 	lsl.w	r2, r6, r2
 801172a:	b29b      	uxth	r3, r3
 801172c:	ea23 0302 	bic.w	r3, r3, r2
 8011730:	802b      	strh	r3, [r5, #0]
 8011732:	f3bf 8f5f 	dmb	sy
 8011736:	882b      	ldrh	r3, [r5, #0]
 8011738:	f104 0208 	add.w	r2, r4, #8
 801173c:	b29b      	uxth	r3, r3
 801173e:	4096      	lsls	r6, r2
 8011740:	ea36 0303 	bics.w	r3, r6, r3
 8011744:	d105      	bne.n	8011752 <Dmx::StopData(unsigned int, unsigned int)+0x4a>
 8011746:	2107      	movs	r1, #7
 8011748:	4640      	mov	r0, r8
 801174a:	f008 f933 	bl	80199b4 <usart_flag_get>
 801174e:	2801      	cmp	r0, #1
 8011750:	d1f9      	bne.n	8011746 <Dmx::StopData(unsigned int, unsigned int)+0x3e>
 8011752:	882b      	ldrh	r3, [r5, #0]
 8011754:	b29b      	uxth	r3, r3
 8011756:	ea23 0306 	bic.w	r3, r3, r6
 801175a:	802b      	strh	r3, [r5, #0]
 801175c:	f3bf 8f4f 	dsb	sy
 8011760:	2300      	movs	r3, #0
 8011762:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
 8011766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801176a:	f240 3105 	movw	r1, #773	; 0x305
 801176e:	4640      	mov	r0, r8
 8011770:	f008 f940 	bl	80199f4 <usart_interrupt_disable>
 8011774:	4b06      	ldr	r3, [pc, #24]	; (8011790 <Dmx::StopData(unsigned int, unsigned int)+0x88>)
 8011776:	f44f 7204 	mov.w	r2, #528	; 0x210
 801177a:	fb02 3304 	mla	r3, r2, r4, r3
 801177e:	2200      	movs	r2, #0
 8011780:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8011784:	e7ec      	b.n	8011760 <Dmx::StopData(unsigned int, unsigned int)+0x58>
 8011786:	bf00      	nop
 8011788:	20001050 	andcs	r1, r0, r0, asr r0
 801178c:	20001058 	andcs	r1, r0, r8, asr r0
 8011790:	20000828 	andcs	r0, r0, r8, lsr #16

08011794 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 8011794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011796:	4605      	mov	r5, r0
 8011798:	460c      	mov	r4, r1
 801179a:	4608      	mov	r0, r1
 801179c:	4616      	mov	r6, r2
 801179e:	461f      	mov	r7, r3
 80117a0:	f7ff fe4e 	bl	8011440 <_port_to_uart(unsigned int)>
 80117a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80117a8:	4601      	mov	r1, r0
 80117aa:	695a      	ldr	r2, [r3, #20]
 80117ac:	42b2      	cmp	r2, r6
 80117ae:	d01b      	beq.n	80117e8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>
 80117b0:	9001      	str	r0, [sp, #4]
 80117b2:	615e      	str	r6, [r3, #20]
 80117b4:	4622      	mov	r2, r4
 80117b6:	4628      	mov	r0, r5
 80117b8:	f7ff ffa6 	bl	8011708 <Dmx::StopData(unsigned int, unsigned int)>
 80117bc:	9901      	ldr	r1, [sp, #4]
 80117be:	b94e      	cbnz	r6, 80117d4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x40>
 80117c0:	4b11      	ldr	r3, [pc, #68]	; (8011808 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x74>)
 80117c2:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 80117c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	6193      	str	r3, [r2, #24]
 80117ce:	b967      	cbnz	r7, 80117ea <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x56>
 80117d0:	b003      	add	sp, #12
 80117d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117d4:	2e01      	cmp	r6, #1
 80117d6:	d1fa      	bne.n	80117ce <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 80117d8:	4b0b      	ldr	r3, [pc, #44]	; (8011808 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x74>)
 80117da:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 80117de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	6293      	str	r3, [r2, #40]	; 0x28
 80117e6:	e7f2      	b.n	80117ce <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 80117e8:	b137      	cbz	r7, 80117f8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x64>
 80117ea:	4622      	mov	r2, r4
 80117ec:	4628      	mov	r0, r5
 80117ee:	b003      	add	sp, #12
 80117f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80117f4:	f7ff beec 	b.w	80115d0 <Dmx::StartData(unsigned int, unsigned int)>
 80117f8:	4622      	mov	r2, r4
 80117fa:	4628      	mov	r0, r5
 80117fc:	b003      	add	sp, #12
 80117fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011802:	f7ff bf81 	b.w	8011708 <Dmx::StopData(unsigned int, unsigned int)>
 8011806:	bf00      	nop
 8011808:	0801c5b0 	stmdaeq	r1, {r4, r5, r7, r8, sl, lr, pc}

0801180c <Dmx::Dmx()>:
 801180c:	230c      	movs	r3, #12
 801180e:	225c      	movs	r2, #92	; 0x5c
 8011810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011814:	e9c0 2300 	strd	r2, r3, [r0]
 8011818:	f246 13a8 	movw	r3, #25000	; 0x61a8
 801181c:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8011820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011824:	8203      	strh	r3, [r0, #16]
 8011826:	4b46      	ldr	r3, [pc, #280]	; (8011940 <Dmx::Dmx()+0x134>)
 8011828:	4f46      	ldr	r7, [pc, #280]	; (8011944 <Dmx::Dmx()+0x138>)
 801182a:	6018      	str	r0, [r3, #0]
 801182c:	4b46      	ldr	r3, [pc, #280]	; (8011948 <Dmx::Dmx()+0x13c>)
 801182e:	2400      	movs	r4, #0
 8011830:	b08e      	sub	sp, #56	; 0x38
 8011832:	4605      	mov	r5, r0
 8011834:	801c      	strh	r4, [r3, #0]
 8011836:	4626      	mov	r6, r4
 8011838:	e9d7 0800 	ldrd	r0, r8, [r7]
 801183c:	2202      	movs	r2, #2
 801183e:	4643      	mov	r3, r8
 8011840:	2101      	movs	r1, #1
 8011842:	9003      	str	r0, [sp, #12]
 8011844:	f007 fc44 	bl	80190d0 <gpio_mode_set>
 8011848:	4643      	mov	r3, r8
 801184a:	9803      	ldr	r0, [sp, #12]
 801184c:	2202      	movs	r2, #2
 801184e:	2100      	movs	r1, #0
 8011850:	f007 fc5e 	bl	8019110 <gpio_output_options_set>
 8011854:	4642      	mov	r2, r8
 8011856:	9803      	ldr	r0, [sp, #12]
 8011858:	2100      	movs	r1, #0
 801185a:	f007 fc74 	bl	8019146 <gpio_af_set>
 801185e:	4621      	mov	r1, r4
 8011860:	4628      	mov	r0, r5
 8011862:	f7ff fe9d 	bl	80115a0 <Dmx::ClearData(unsigned int)>
 8011866:	4b39      	ldr	r3, [pc, #228]	; (801194c <Dmx::Dmx()+0x140>)
 8011868:	2201      	movs	r2, #1
 801186a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 801186e:	4621      	mov	r1, r4
 8011870:	2300      	movs	r3, #0
 8011872:	4628      	mov	r0, r5
 8011874:	f7ff ff8e 	bl	8011794 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8011878:	4b35      	ldr	r3, [pc, #212]	; (8011950 <Dmx::Dmx()+0x144>)
 801187a:	f44f 7204 	mov.w	r2, #528	; 0x210
 801187e:	fb02 3304 	mla	r3, r2, r4, r3
 8011882:	3708      	adds	r7, #8
 8011884:	f8c3 620c 	str.w	r6, [r3, #524]	; 0x20c
 8011888:	2c00      	cmp	r4, #0
 801188a:	d056      	beq.n	801193a <Dmx::Dmx()+0x12e>
 801188c:	f640 4015 	movw	r0, #3093	; 0xc15
 8011890:	f007 fc9a 	bl	80191c8 <rcu_periph_clock_enable>
 8011894:	f640 4016 	movw	r0, #3094	; 0xc16
 8011898:	f007 fc96 	bl	80191c8 <rcu_periph_clock_enable>
 801189c:	482d      	ldr	r0, [pc, #180]	; (8011954 <Dmx::Dmx()+0x148>)
 801189e:	2103      	movs	r1, #3
 80118a0:	f006 ff48 	bl	8018734 <dma_deinit>
 80118a4:	4b2c      	ldr	r3, [pc, #176]	; (8011958 <Dmx::Dmx()+0x14c>)
 80118a6:	482b      	ldr	r0, [pc, #172]	; (8011954 <Dmx::Dmx()+0x148>)
 80118a8:	9608      	str	r6, [sp, #32]
 80118aa:	aa05      	add	r2, sp, #20
 80118ac:	f04f 0840 	mov.w	r8, #64	; 0x40
 80118b0:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 80118b4:	2103      	movs	r1, #3
 80118b6:	e9cd 3405 	strd	r3, r4, [sp, #20]
 80118ba:	9609      	str	r6, [sp, #36]	; 0x24
 80118bc:	970d      	str	r7, [sp, #52]	; 0x34
 80118be:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80118c2:	f006 ff6e 	bl	80187a2 <dma_single_data_mode_init>
 80118c6:	4823      	ldr	r0, [pc, #140]	; (8011954 <Dmx::Dmx()+0x148>)
 80118c8:	2103      	movs	r1, #3
 80118ca:	f006 ffa9 	bl	8018820 <dma_circulation_disable>
 80118ce:	2204      	movs	r2, #4
 80118d0:	4820      	ldr	r0, [pc, #128]	; (8011954 <Dmx::Dmx()+0x148>)
 80118d2:	2103      	movs	r1, #3
 80118d4:	f006 ffac 	bl	8018830 <dma_channel_subperipheral_select>
 80118d8:	4820      	ldr	r0, [pc, #128]	; (801195c <Dmx::Dmx()+0x150>)
 80118da:	2106      	movs	r1, #6
 80118dc:	f006 ff2a 	bl	8018734 <dma_deinit>
 80118e0:	4b1f      	ldr	r3, [pc, #124]	; (8011960 <Dmx::Dmx()+0x154>)
 80118e2:	481e      	ldr	r0, [pc, #120]	; (801195c <Dmx::Dmx()+0x150>)
 80118e4:	9608      	str	r6, [sp, #32]
 80118e6:	aa05      	add	r2, sp, #20
 80118e8:	2106      	movs	r1, #6
 80118ea:	e9cd 3405 	strd	r3, r4, [sp, #20]
 80118ee:	9609      	str	r6, [sp, #36]	; 0x24
 80118f0:	970d      	str	r7, [sp, #52]	; 0x34
 80118f2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80118f6:	f006 ff54 	bl	80187a2 <dma_single_data_mode_init>
 80118fa:	4818      	ldr	r0, [pc, #96]	; (801195c <Dmx::Dmx()+0x150>)
 80118fc:	4c19      	ldr	r4, [pc, #100]	; (8011964 <Dmx::Dmx()+0x158>)
 80118fe:	2106      	movs	r1, #6
 8011900:	f006 ff8e 	bl	8018820 <dma_circulation_disable>
 8011904:	2702      	movs	r7, #2
 8011906:	4815      	ldr	r0, [pc, #84]	; (801195c <Dmx::Dmx()+0x150>)
 8011908:	2205      	movs	r2, #5
 801190a:	2106      	movs	r1, #6
 801190c:	f006 ff90 	bl	8018830 <dma_channel_subperipheral_select>
 8011910:	2680      	movs	r6, #128	; 0x80
 8011912:	4915      	ldr	r1, [pc, #84]	; (8011968 <Dmx::Dmx()+0x15c>)
 8011914:	4815      	ldr	r0, [pc, #84]	; (801196c <Dmx::Dmx()+0x160>)
 8011916:	9700      	str	r7, [sp, #0]
 8011918:	2300      	movs	r3, #0
 801191a:	2208      	movs	r2, #8
 801191c:	f008 fba2 	bl	801a064 <gd32_uart_begin>
 8011920:	6066      	str	r6, [r4, #4]
 8011922:	4911      	ldr	r1, [pc, #68]	; (8011968 <Dmx::Dmx()+0x15c>)
 8011924:	4812      	ldr	r0, [pc, #72]	; (8011970 <Dmx::Dmx()+0x164>)
 8011926:	9700      	str	r7, [sp, #0]
 8011928:	2300      	movs	r3, #0
 801192a:	2208      	movs	r2, #8
 801192c:	f008 fb9a 	bl	801a064 <gd32_uart_begin>
 8011930:	4628      	mov	r0, r5
 8011932:	60a6      	str	r6, [r4, #8]
 8011934:	b00e      	add	sp, #56	; 0x38
 8011936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801193a:	2401      	movs	r4, #1
 801193c:	e77c      	b.n	8011838 <Dmx::Dmx()+0x2c>
 801193e:	bf00      	nop
 8011940:	2000105c 	andcs	r1, r0, ip, asr r0
 8011944:	0801c5b0 	stmdaeq	r1, {r4, r5, r7, r8, sl, lr, pc}
 8011948:	20001058 	andcs	r1, r0, r8, asr r0
 801194c:	20001050 	andcs	r1, r0, r0, asr r0
 8011950:	20000828 	andcs	r0, r0, r8, lsr #16
 8011954:	40026000 	andmi	r6, r2, r0
 8011958:	40004804 	andmi	r4, r0, r4, lsl #16
 801195c:	40026400 	andmi	r6, r2, r0, lsl #8
 8011960:	40011404 	andmi	r1, r1, r4, lsl #8
 8011964:	e000e100 	and	lr, r0, r0, lsl #2
 8011968:	0003d090 	muleq	r3, r0, r0
 801196c:	40004800 	andmi	r4, r0, r0, lsl #16
 8011970:	40011400 	andmi	r1, r1, r0, lsl #8

08011974 <Dmx::SetDmxPeriodTime(unsigned int)>:
 8011974:	4b0f      	ldr	r3, [pc, #60]	; (80119b4 <Dmx::SetDmxPeriodTime(unsigned int)+0x40>)
 8011976:	60c1      	str	r1, [r0, #12]
 8011978:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 801197c:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8011980:	480d      	ldr	r0, [pc, #52]	; (80119b8 <Dmx::SetDmxPeriodTime(unsigned int)+0x44>)
 8011982:	429a      	cmp	r2, r3
 8011984:	bf38      	it	cc
 8011986:	461a      	movcc	r2, r3
 8011988:	4b0c      	ldr	r3, [pc, #48]	; (80119bc <Dmx::SetDmxPeriodTime(unsigned int)+0x48>)
 801198a:	6800      	ldr	r0, [r0, #0]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	4403      	add	r3, r0
 8011990:	202c      	movs	r0, #44	; 0x2c
 8011992:	fb00 3302 	mla	r3, r0, r2, r3
 8011996:	b151      	cbz	r1, 80119ae <Dmx::SetDmxPeriodTime(unsigned int)+0x3a>
 8011998:	4299      	cmp	r1, r3
 801199a:	d205      	bcs.n	80119a8 <Dmx::SetDmxPeriodTime(unsigned int)+0x34>
 801199c:	1819      	adds	r1, r3, r0
 801199e:	f240 43b4 	movw	r3, #1204	; 0x4b4
 80119a2:	4299      	cmp	r1, r3
 80119a4:	bf38      	it	cc
 80119a6:	4619      	movcc	r1, r3
 80119a8:	4b05      	ldr	r3, [pc, #20]	; (80119c0 <Dmx::SetDmxPeriodTime(unsigned int)+0x4c>)
 80119aa:	6019      	str	r1, [r3, #0]
 80119ac:	4770      	bx	lr
 80119ae:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80119b2:	e7f4      	b.n	801199e <Dmx::SetDmxPeriodTime(unsigned int)+0x2a>
 80119b4:	20000c48 	andcs	r0, r0, r8, asr #24
 80119b8:	20000008 	andcs	r0, r0, r8
 80119bc:	2000000c 	andcs	r0, r0, ip
 80119c0:	20000004 	andcs	r0, r0, r4

080119c4 <Dmx::SetDmxBreakTime(unsigned int)>:
 80119c4:	295c      	cmp	r1, #92	; 0x5c
 80119c6:	4b03      	ldr	r3, [pc, #12]	; (80119d4 <Dmx::SetDmxBreakTime(unsigned int)+0x10>)
 80119c8:	bf38      	it	cc
 80119ca:	215c      	movcc	r1, #92	; 0x5c
 80119cc:	6019      	str	r1, [r3, #0]
 80119ce:	68c1      	ldr	r1, [r0, #12]
 80119d0:	f7ff bfd0 	b.w	8011974 <Dmx::SetDmxPeriodTime(unsigned int)>
 80119d4:	2000000c 	andcs	r0, r0, ip

080119d8 <Dmx::SetDmxMabTime(unsigned int)>:
 80119d8:	290c      	cmp	r1, #12
 80119da:	4b03      	ldr	r3, [pc, #12]	; (80119e8 <Dmx::SetDmxMabTime(unsigned int)+0x10>)
 80119dc:	bf38      	it	cc
 80119de:	210c      	movcc	r1, #12
 80119e0:	6019      	str	r1, [r3, #0]
 80119e2:	68c1      	ldr	r1, [r0, #12]
 80119e4:	f7ff bfc6 	b.w	8011974 <Dmx::SetDmxPeriodTime(unsigned int)>
 80119e8:	20000008 	andcs	r0, r0, r8

080119ec <Dmx::SetDmxSlots(unsigned short)>:
 80119ec:	1e8b      	subs	r3, r1, #2
 80119ee:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80119f2:	d80f      	bhi.n	8011a14 <Dmx::SetDmxSlots(unsigned short)+0x28>
 80119f4:	69c3      	ldr	r3, [r0, #28]
 80119f6:	8201      	strh	r1, [r0, #16]
 80119f8:	b11b      	cbz	r3, 8011a02 <Dmx::SetDmxSlots(unsigned short)+0x16>
 80119fa:	4299      	cmp	r1, r3
 80119fc:	bf94      	ite	ls
 80119fe:	61c1      	strls	r1, [r0, #28]
 8011a00:	61c3      	strhi	r3, [r0, #28]
 8011a02:	6a03      	ldr	r3, [r0, #32]
 8011a04:	b11b      	cbz	r3, 8011a0e <Dmx::SetDmxSlots(unsigned short)+0x22>
 8011a06:	4299      	cmp	r1, r3
 8011a08:	bf94      	ite	ls
 8011a0a:	6201      	strls	r1, [r0, #32]
 8011a0c:	6203      	strhi	r3, [r0, #32]
 8011a0e:	68c1      	ldr	r1, [r0, #12]
 8011a10:	f7ff bfb0 	b.w	8011974 <Dmx::SetDmxPeriodTime(unsigned int)>
 8011a14:	4770      	bx	lr
	...

08011a18 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>:
 8011a18:	b470      	push	{r4, r5, r6}
 8011a1a:	8a04      	ldrh	r4, [r0, #16]
 8011a1c:	f892 f000 	pld	[r2]
 8011a20:	42a3      	cmp	r3, r4
 8011a22:	bf28      	it	cs
 8011a24:	4623      	movcs	r3, r4
 8011a26:	4c0e      	ldr	r4, [pc, #56]	; (8011a60 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x48>)
 8011a28:	f44f 7501 	mov.w	r5, #516	; 0x204
 8011a2c:	fb05 4401 	mla	r4, r5, r1, r4
 8011a30:	1c5d      	adds	r5, r3, #1
 8011a32:	f8a4 5202 	strh.w	r5, [r4, #514]	; 0x202
 8011a36:	18d5      	adds	r5, r2, r3
 8011a38:	4295      	cmp	r5, r2
 8011a3a:	d109      	bne.n	8011a50 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x38>
 8011a3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a40:	69ca      	ldr	r2, [r1, #28]
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d009      	beq.n	8011a5a <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x42>
 8011a46:	61cb      	str	r3, [r1, #28]
 8011a48:	bc70      	pop	{r4, r5, r6}
 8011a4a:	68c1      	ldr	r1, [r0, #12]
 8011a4c:	f7ff bf92 	b.w	8011974 <Dmx::SetDmxPeriodTime(unsigned int)>
 8011a50:	f812 6b01 	ldrb.w	r6, [r2], #1
 8011a54:	f804 6f01 	strb.w	r6, [r4, #1]!
 8011a58:	e7ee      	b.n	8011a38 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x20>
 8011a5a:	bc70      	pop	{r4, r5, r6}
 8011a5c:	4770      	bx	lr
 8011a5e:	bf00      	nop
 8011a60:	20000c48 	andcs	r0, r0, r8, asr #24

08011a64 <Dmx::Blackout()>:
 8011a64:	b538      	push	{r3, r4, r5, lr}
 8011a66:	4c1e      	ldr	r4, [pc, #120]	; (8011ae0 <Dmx::Blackout()+0x7c>)
 8011a68:	8823      	ldrh	r3, [r4, #0]
 8011a6a:	b29b      	uxth	r3, r3
 8011a6c:	b3bb      	cbz	r3, 8011ade <Dmx::Blackout()+0x7a>
 8011a6e:	f3bf 8f5f 	dmb	sy
 8011a72:	8823      	ldrh	r3, [r4, #0]
 8011a74:	05da      	lsls	r2, r3, #23
 8011a76:	d515      	bpl.n	8011aa4 <Dmx::Blackout()+0x40>
 8011a78:	2000      	movs	r0, #0
 8011a7a:	f7ff fce1 	bl	8011440 <_port_to_uart(unsigned int)>
 8011a7e:	4605      	mov	r5, r0
 8011a80:	2107      	movs	r1, #7
 8011a82:	4628      	mov	r0, r5
 8011a84:	f007 ff96 	bl	80199b4 <usart_flag_get>
 8011a88:	2801      	cmp	r0, #1
 8011a8a:	d1f9      	bne.n	8011a80 <Dmx::Blackout()+0x1c>
 8011a8c:	4b15      	ldr	r3, [pc, #84]	; (8011ae4 <Dmx::Blackout()+0x80>)
 8011a8e:	2000      	movs	r0, #0
 8011a90:	461a      	mov	r2, r3
 8011a92:	f203 2102 	addw	r1, r3, #514	; 0x202
 8011a96:	f823 0b02 	strh.w	r0, [r3], #2
 8011a9a:	428b      	cmp	r3, r1
 8011a9c:	d1fb      	bne.n	8011a96 <Dmx::Blackout()+0x32>
 8011a9e:	f04f 0300 	mov.w	r3, #0
 8011aa2:	7013      	strb	r3, [r2, #0]
 8011aa4:	f3bf 8f5f 	dmb	sy
 8011aa8:	8823      	ldrh	r3, [r4, #0]
 8011aaa:	059b      	lsls	r3, r3, #22
 8011aac:	d517      	bpl.n	8011ade <Dmx::Blackout()+0x7a>
 8011aae:	2001      	movs	r0, #1
 8011ab0:	f7ff fcc6 	bl	8011440 <_port_to_uart(unsigned int)>
 8011ab4:	4604      	mov	r4, r0
 8011ab6:	2107      	movs	r1, #7
 8011ab8:	4620      	mov	r0, r4
 8011aba:	f007 ff7b 	bl	80199b4 <usart_flag_get>
 8011abe:	2801      	cmp	r0, #1
 8011ac0:	d1f9      	bne.n	8011ab6 <Dmx::Blackout()+0x52>
 8011ac2:	4b09      	ldr	r3, [pc, #36]	; (8011ae8 <Dmx::Blackout()+0x84>)
 8011ac4:	2000      	movs	r0, #0
 8011ac6:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8011aca:	f203 2102 	addw	r1, r3, #514	; 0x202
 8011ace:	f823 0b02 	strh.w	r0, [r3], #2
 8011ad2:	428b      	cmp	r3, r1
 8011ad4:	d1fb      	bne.n	8011ace <Dmx::Blackout()+0x6a>
 8011ad6:	f04f 0300 	mov.w	r3, #0
 8011ada:	f882 3204 	strb.w	r3, [r2, #516]	; 0x204
 8011ade:	bd38      	pop	{r3, r4, r5, pc}
 8011ae0:	20001058 	andcs	r1, r0, r8, asr r0
 8011ae4:	20000c48 	andcs	r0, r0, r8, asr #24
 8011ae8:	20000e4c 	andcs	r0, r0, ip, asr #28

08011aec <Dmx::FullOn()>:
 8011aec:	b538      	push	{r3, r4, r5, lr}
 8011aee:	4c1e      	ldr	r4, [pc, #120]	; (8011b68 <Dmx::FullOn()+0x7c>)
 8011af0:	8823      	ldrh	r3, [r4, #0]
 8011af2:	b29b      	uxth	r3, r3
 8011af4:	b3bb      	cbz	r3, 8011b66 <Dmx::FullOn()+0x7a>
 8011af6:	f3bf 8f5f 	dmb	sy
 8011afa:	8823      	ldrh	r3, [r4, #0]
 8011afc:	05da      	lsls	r2, r3, #23
 8011afe:	d515      	bpl.n	8011b2c <Dmx::FullOn()+0x40>
 8011b00:	2000      	movs	r0, #0
 8011b02:	f7ff fc9d 	bl	8011440 <_port_to_uart(unsigned int)>
 8011b06:	4605      	mov	r5, r0
 8011b08:	2107      	movs	r1, #7
 8011b0a:	4628      	mov	r0, r5
 8011b0c:	f007 ff52 	bl	80199b4 <usart_flag_get>
 8011b10:	2801      	cmp	r0, #1
 8011b12:	d1f9      	bne.n	8011b08 <Dmx::FullOn()+0x1c>
 8011b14:	4b15      	ldr	r3, [pc, #84]	; (8011b6c <Dmx::FullOn()+0x80>)
 8011b16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011b1a:	461a      	mov	r2, r3
 8011b1c:	f203 2102 	addw	r1, r3, #514	; 0x202
 8011b20:	f823 0b02 	strh.w	r0, [r3], #2
 8011b24:	428b      	cmp	r3, r1
 8011b26:	d1fb      	bne.n	8011b20 <Dmx::FullOn()+0x34>
 8011b28:	2300      	movs	r3, #0
 8011b2a:	7013      	strb	r3, [r2, #0]
 8011b2c:	f3bf 8f5f 	dmb	sy
 8011b30:	8823      	ldrh	r3, [r4, #0]
 8011b32:	059b      	lsls	r3, r3, #22
 8011b34:	d517      	bpl.n	8011b66 <Dmx::FullOn()+0x7a>
 8011b36:	2001      	movs	r0, #1
 8011b38:	f7ff fc82 	bl	8011440 <_port_to_uart(unsigned int)>
 8011b3c:	4604      	mov	r4, r0
 8011b3e:	2107      	movs	r1, #7
 8011b40:	4620      	mov	r0, r4
 8011b42:	f007 ff37 	bl	80199b4 <usart_flag_get>
 8011b46:	2801      	cmp	r0, #1
 8011b48:	d1f9      	bne.n	8011b3e <Dmx::FullOn()+0x52>
 8011b4a:	4b09      	ldr	r3, [pc, #36]	; (8011b70 <Dmx::FullOn()+0x84>)
 8011b4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011b50:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8011b54:	f203 2102 	addw	r1, r3, #514	; 0x202
 8011b58:	f823 0b02 	strh.w	r0, [r3], #2
 8011b5c:	428b      	cmp	r3, r1
 8011b5e:	d1fb      	bne.n	8011b58 <Dmx::FullOn()+0x6c>
 8011b60:	2300      	movs	r3, #0
 8011b62:	f882 3204 	strb.w	r3, [r2, #516]	; 0x204
 8011b66:	bd38      	pop	{r3, r4, r5, pc}
 8011b68:	20001058 	andcs	r1, r0, r8, asr r0
 8011b6c:	20000c48 	andcs	r0, r0, r8, asr #24
 8011b70:	20000e4c 	andcs	r0, r0, ip, asr #28

08011b74 <WS28xxDmxMulti::SetDmxStartAddress(unsigned short)>:
 8011b74:	2000      	movs	r0, #0
 8011b76:	4770      	bx	lr

08011b78 <WS28xxDmxMulti::GetDmxStartAddress()>:
 8011b78:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011b7c:	4770      	bx	lr

08011b7e <WS28xxDmxMulti::GetDmxFootprint()>:
 8011b7e:	2000      	movs	r0, #0
 8011b80:	4770      	bx	lr

08011b82 <WS28xxDmxMulti::Start(unsigned int)>:
 8011b82:	b538      	push	{r3, r4, r5, lr}
 8011b84:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011b86:	4604      	mov	r4, r0
 8011b88:	460d      	mov	r5, r1
 8011b8a:	b923      	cbnz	r3, 8011b96 <WS28xxDmxMulti::Start(unsigned int)+0x14>
 8011b8c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8011b8e:	b110      	cbz	r0, 8011b96 <WS28xxDmxMulti::Start(unsigned int)+0x14>
 8011b90:	6803      	ldr	r3, [r0, #0]
 8011b92:	689b      	ldr	r3, [r3, #8]
 8011b94:	4798      	blx	r3
 8011b96:	2301      	movs	r3, #1
 8011b98:	fa03 f105 	lsl.w	r1, r3, r5
 8011b9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011b9e:	430b      	orrs	r3, r1
 8011ba0:	6523      	str	r3, [r4, #80]	; 0x50
 8011ba2:	bd38      	pop	{r3, r4, r5, pc}

08011ba4 <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 8011ba4:	b538      	push	{r3, r4, r5, lr}
 8011ba6:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8011ba8:	4b05      	ldr	r3, [pc, #20]	; (8011bc0 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x1c>)
 8011baa:	6003      	str	r3, [r0, #0]
 8011bac:	4604      	mov	r4, r0
 8011bae:	b12d      	cbz	r5, 8011bbc <WS28xxDmxMulti::~WS28xxDmxMulti()+0x18>
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	f001 fab9 	bl	8013128 <WS28xxMulti::~WS28xxMulti()>
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	f006 fab6 	bl	8018128 <operator delete(void*)>
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	bd38      	pop	{r3, r4, r5, pc}
 8011bc0:	0801c5c8 	stmdaeq	r1, {r3, r6, r7, r8, sl, lr, pc}

08011bc4 <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 8011bc4:	b510      	push	{r4, lr}
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	f7ff ffec 	bl	8011ba4 <WS28xxDmxMulti::~WS28xxDmxMulti()>
 8011bcc:	4620      	mov	r0, r4
 8011bce:	f006 faab 	bl	8018128 <operator delete(void*)>
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	bd10      	pop	{r4, pc}

08011bd6 <WS28xxDmxMulti::Blackout(bool)>:
 8011bd6:	b538      	push	{r3, r4, r5, lr}
 8011bd8:	4604      	mov	r4, r0
 8011bda:	460d      	mov	r5, r1
 8011bdc:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8011be0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011be2:	f001 fe87 	bl	80138f4 <WS28xxMulti::IsUpdating()>
 8011be6:	2800      	cmp	r0, #0
 8011be8:	d1fa      	bne.n	8011be0 <WS28xxDmxMulti::Blackout(bool)+0xa>
 8011bea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011bec:	b11d      	cbz	r5, 8011bf6 <WS28xxDmxMulti::Blackout(bool)+0x20>
 8011bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bf2:	f001 bdbd 	b.w	8013770 <WS28xxMulti::Blackout()>
 8011bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bfa:	f001 bd15 	b.w	8013628 <WS28xxMulti::Update()>

08011bfe <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8011bfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c02:	b089      	sub	sp, #36	; 0x24
 8011c04:	4691      	mov	r9, r2
 8011c06:	9306      	str	r3, [sp, #24]
 8011c08:	460b      	mov	r3, r1
 8011c0a:	f003 0203 	and.w	r2, r3, #3
 8011c0e:	2a02      	cmp	r2, #2
 8011c10:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011c12:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8011c14:	9105      	str	r1, [sp, #20]
 8011c16:	4604      	mov	r4, r0
 8011c18:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8011c1c:	9806      	ldr	r0, [sp, #24]
 8011c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8011c22:	d032      	beq.n	8011c8a <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x8c>
 8011c24:	2a03      	cmp	r2, #3
 8011c26:	d032      	beq.n	8011c8e <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x90>
 8011c28:	2a01      	cmp	r2, #1
 8011c2a:	d028      	beq.n	8011c7e <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x80>
 8011c2c:	429e      	cmp	r6, r3
 8011c2e:	bf28      	it	cs
 8011c30:	461e      	movcs	r6, r3
 8011c32:	2500      	movs	r5, #0
 8011c34:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011c36:	9107      	str	r1, [sp, #28]
 8011c38:	f001 fe5c 	bl	80138f4 <WS28xxMulti::IsUpdating()>
 8011c3c:	9907      	ldr	r1, [sp, #28]
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	d1f8      	bne.n	8011c34 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x36>
 8011c42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011c44:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
 8011c48:	2b03      	cmp	r3, #3
 8011c4a:	46c8      	mov	r8, r9
 8011c4c:	fb0a f705 	mul.w	r7, sl, r5
 8011c50:	d041      	beq.n	8011cd6 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xd8>
 8011c52:	42b5      	cmp	r5, r6
 8011c54:	d241      	bcs.n	8011cda <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xdc>
 8011c56:	9a06      	ldr	r2, [sp, #24]
 8011c58:	eba8 0309 	sub.w	r3, r8, r9
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d93c      	bls.n	8011cda <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xdc>
 8011c60:	f898 f000 	pld	[r8]
 8011c64:	f04f 0b00 	mov.w	fp, #0
 8011c68:	fa1f f28b 	uxth.w	r2, fp
 8011c6c:	4552      	cmp	r2, sl
 8011c6e:	f10b 0b01 	add.w	fp, fp, #1
 8011c72:	d33c      	bcc.n	8011cee <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xf0>
 8011c74:	3501      	adds	r5, #1
 8011c76:	f108 0804 	add.w	r8, r8, #4
 8011c7a:	4457      	add	r7, sl
 8011c7c:	e7e9      	b.n	8011c52 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x54>
 8011c7e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8011c80:	442b      	add	r3, r5
 8011c82:	429e      	cmp	r6, r3
 8011c84:	bf28      	it	cs
 8011c86:	461e      	movcs	r6, r3
 8011c88:	e7d4      	b.n	8011c34 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x36>
 8011c8a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8011c8c:	e7f8      	b.n	8011c80 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 8011c8e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8011c90:	e7f6      	b.n	8011c80 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 8011c92:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011c96:	9301      	str	r3, [sp, #4]
 8011c98:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011c9c:	9300      	str	r3, [sp, #0]
 8011c9e:	f898 3000 	ldrb.w	r3, [r8]
 8011ca2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011ca4:	9107      	str	r1, [sp, #28]
 8011ca6:	443a      	add	r2, r7
 8011ca8:	f001 fea4 	bl	80139f4 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8011cac:	9907      	ldr	r1, [sp, #28]
 8011cae:	e008      	b.n	8011cc2 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xc4>
 8011cb0:	9a06      	ldr	r2, [sp, #24]
 8011cb2:	eba8 0309 	sub.w	r3, r8, r9
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d90f      	bls.n	8011cda <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xdc>
 8011cba:	f898 f000 	pld	[r8]
 8011cbe:	f04f 0b00 	mov.w	fp, #0
 8011cc2:	fa1f f28b 	uxth.w	r2, fp
 8011cc6:	4552      	cmp	r2, sl
 8011cc8:	f10b 0b01 	add.w	fp, fp, #1
 8011ccc:	d3e1      	bcc.n	8011c92 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x94>
 8011cce:	3501      	adds	r5, #1
 8011cd0:	f108 0803 	add.w	r8, r8, #3
 8011cd4:	4457      	add	r7, sl
 8011cd6:	42b5      	cmp	r5, r6
 8011cd8:	d3ea      	bcc.n	8011cb0 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xb2>
 8011cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011cdc:	9a05      	ldr	r2, [sp, #20]
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	d117      	bne.n	8011d12 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x114>
 8011ce2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011ce4:	b009      	add	sp, #36	; 0x24
 8011ce6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cea:	f001 bc9d 	b.w	8013628 <WS28xxMulti::Update()>
 8011cee:	f898 3003 	ldrb.w	r3, [r8, #3]
 8011cf2:	9302      	str	r3, [sp, #8]
 8011cf4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011cf8:	9301      	str	r3, [sp, #4]
 8011cfa:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011cfe:	9300      	str	r3, [sp, #0]
 8011d00:	f898 3000 	ldrb.w	r3, [r8]
 8011d04:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011d06:	9107      	str	r1, [sp, #28]
 8011d08:	443a      	add	r2, r7
 8011d0a:	f001 fef5 	bl	8013af8 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8011d0e:	9907      	ldr	r1, [sp, #28]
 8011d10:	e7aa      	b.n	8011c68 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8011d12:	b009      	add	sp, #36	; 0x24
 8011d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d18 <WS28xxDmxMulti::FullOn()>:
 8011d18:	b510      	push	{r4, lr}
 8011d1a:	4604      	mov	r4, r0
 8011d1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011d1e:	f001 fde9 	bl	80138f4 <WS28xxMulti::IsUpdating()>
 8011d22:	2800      	cmp	r0, #0
 8011d24:	d1fa      	bne.n	8011d1c <WS28xxDmxMulti::FullOn()+0x4>
 8011d26:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d2c:	f001 bd82 	b.w	8013834 <WS28xxMulti::FullOn()>

08011d30 <WS28xxDmxMulti::Print()>:
 8011d30:	3004      	adds	r0, #4
 8011d32:	f000 bcb7 	b.w	80126a4 <PixelDmxConfiguration::Print()>

08011d36 <WS28xxDmxMulti::Stop(unsigned int)>:
 8011d36:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011d38:	fa23 f201 	lsr.w	r2, r3, r1
 8011d3c:	07d2      	lsls	r2, r2, #31
 8011d3e:	bf41      	itttt	mi
 8011d40:	2201      	movmi	r2, #1
 8011d42:	408a      	lslmi	r2, r1
 8011d44:	4393      	bicmi	r3, r2
 8011d46:	6503      	strmi	r3, [r0, #80]	; 0x50
 8011d48:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011d4a:	b923      	cbnz	r3, 8011d56 <WS28xxDmxMulti::Stop(unsigned int)+0x20>
 8011d4c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8011d4e:	b110      	cbz	r0, 8011d56 <WS28xxDmxMulti::Stop(unsigned int)+0x20>
 8011d50:	6803      	ldr	r3, [r0, #0]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	4718      	bx	r3
 8011d56:	4770      	bx	lr

08011d58 <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)>:
 8011d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d5a:	4604      	mov	r4, r0
 8011d5c:	4b14      	ldr	r3, [pc, #80]	; (8011db0 <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)+0x58>)
 8011d5e:	f844 3b04 	str.w	r3, [r4], #4
 8011d62:	460d      	mov	r5, r1
 8011d64:	4606      	mov	r6, r0
 8011d66:	460f      	mov	r7, r1
 8011d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011d78:	2300      	movs	r3, #0
 8011d7a:	f106 0244 	add.w	r2, r6, #68	; 0x44
 8011d7e:	e9c6 3312 	strd	r3, r3, [r6, #72]	; 0x48
 8011d82:	6533      	str	r3, [r6, #80]	; 0x50
 8011d84:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
 8011d88:	2110      	movs	r1, #16
 8011d8a:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8011d8e:	1d30      	adds	r0, r6, #4
 8011d90:	f000 fc45 	bl	801261e <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 8011d94:	2020      	movs	r0, #32
 8011d96:	f006 f9cb 	bl	8018130 <operator new(unsigned int)>
 8011d9a:	4639      	mov	r1, r7
 8011d9c:	4604      	mov	r4, r0
 8011d9e:	f001 fbe5 	bl	801356c <WS28xxMulti::WS28xxMulti(PixelConfiguration&)>
 8011da2:	4620      	mov	r0, r4
 8011da4:	64b4      	str	r4, [r6, #72]	; 0x48
 8011da6:	f001 fce3 	bl	8013770 <WS28xxMulti::Blackout()>
 8011daa:	4630      	mov	r0, r6
 8011dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dae:	bf00      	nop
 8011db0:	0801c5c8 	stmdaeq	r1, {r3, r6, r7, r8, sl, lr, pc}

08011db4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8011db4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011db6:	88c6      	ldrh	r6, [r0, #6]
 8011db8:	8885      	ldrh	r5, [r0, #4]
 8011dba:	42ae      	cmp	r6, r5
 8011dbc:	d216      	bcs.n	8011dec <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 8011dbe:	4604      	mov	r4, r0
 8011dc0:	6800      	ldr	r0, [r0, #0]
 8011dc2:	1bad      	subs	r5, r5, r6
 8011dc4:	4430      	add	r0, r6
 8011dc6:	7a26      	ldrb	r6, [r4, #8]
 8011dc8:	b923      	cbnz	r3, 8011dd4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8011dca:	b926      	cbnz	r6, 8011dd6 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8011dcc:	9200      	str	r2, [sp, #0]
 8011dce:	460b      	mov	r3, r1
 8011dd0:	4a09      	ldr	r2, [pc, #36]	; (8011df8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 8011dd2:	e003      	b.n	8011ddc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011dd4:	b166      	cbz	r6, 8011df0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8011dd6:	9200      	str	r2, [sp, #0]
 8011dd8:	4a08      	ldr	r2, [pc, #32]	; (8011dfc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8011dda:	460b      	mov	r3, r1
 8011ddc:	4629      	mov	r1, r5
 8011dde:	f7f8 fb8f 	bl	800a500 <snprintf>
 8011de2:	4285      	cmp	r5, r0
 8011de4:	bfa2      	ittt	ge
 8011de6:	88e3      	ldrhge	r3, [r4, #6]
 8011de8:	181b      	addge	r3, r3, r0
 8011dea:	80e3      	strhge	r3, [r4, #6]
 8011dec:	b002      	add	sp, #8
 8011dee:	bd70      	pop	{r4, r5, r6, pc}
 8011df0:	9200      	str	r2, [sp, #0]
 8011df2:	460b      	mov	r3, r1
 8011df4:	4a02      	ldr	r2, [pc, #8]	; (8011e00 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011df6:	e7f1      	b.n	8011ddc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011df8:	0801ada1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, sp, pc}
 8011dfc:	0801ad98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, sp, pc}
 8011e00:	0801ada2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, sp, pc}

08011e04 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 8011e04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e06:	88c6      	ldrh	r6, [r0, #6]
 8011e08:	8885      	ldrh	r5, [r0, #4]
 8011e0a:	42ae      	cmp	r6, r5
 8011e0c:	d216      	bcs.n	8011e3c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 8011e0e:	4604      	mov	r4, r0
 8011e10:	6800      	ldr	r0, [r0, #0]
 8011e12:	1bad      	subs	r5, r5, r6
 8011e14:	4430      	add	r0, r6
 8011e16:	7a26      	ldrb	r6, [r4, #8]
 8011e18:	b923      	cbnz	r3, 8011e24 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 8011e1a:	b926      	cbnz	r6, 8011e26 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 8011e1c:	9200      	str	r2, [sp, #0]
 8011e1e:	460b      	mov	r3, r1
 8011e20:	4a09      	ldr	r2, [pc, #36]	; (8011e48 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 8011e22:	e003      	b.n	8011e2c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 8011e24:	b166      	cbz	r6, 8011e40 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 8011e26:	9200      	str	r2, [sp, #0]
 8011e28:	4a08      	ldr	r2, [pc, #32]	; (8011e4c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 8011e2a:	460b      	mov	r3, r1
 8011e2c:	4629      	mov	r1, r5
 8011e2e:	f7f8 fb67 	bl	800a500 <snprintf>
 8011e32:	4285      	cmp	r5, r0
 8011e34:	bfa2      	ittt	ge
 8011e36:	88e3      	ldrhge	r3, [r4, #6]
 8011e38:	181b      	addge	r3, r3, r0
 8011e3a:	80e3      	strhge	r3, [r4, #6]
 8011e3c:	b002      	add	sp, #8
 8011e3e:	bd70      	pop	{r4, r5, r6, pc}
 8011e40:	9200      	str	r2, [sp, #0]
 8011e42:	460b      	mov	r3, r1
 8011e44:	4a02      	ldr	r2, [pc, #8]	; (8011e50 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011e46:	e7f1      	b.n	8011e2c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 8011e48:	0801ada1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, sp, pc}
 8011e4c:	0801ad98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, sp, pc}
 8011e50:	0801ada2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, sp, pc}

08011e54 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 8011e54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e56:	88c6      	ldrh	r6, [r0, #6]
 8011e58:	8885      	ldrh	r5, [r0, #4]
 8011e5a:	42ae      	cmp	r6, r5
 8011e5c:	d216      	bcs.n	8011e8c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 8011e5e:	4604      	mov	r4, r0
 8011e60:	6800      	ldr	r0, [r0, #0]
 8011e62:	1bad      	subs	r5, r5, r6
 8011e64:	4430      	add	r0, r6
 8011e66:	7a26      	ldrb	r6, [r4, #8]
 8011e68:	b923      	cbnz	r3, 8011e74 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 8011e6a:	b926      	cbnz	r6, 8011e76 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 8011e6c:	9200      	str	r2, [sp, #0]
 8011e6e:	460b      	mov	r3, r1
 8011e70:	4a09      	ldr	r2, [pc, #36]	; (8011e98 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 8011e72:	e003      	b.n	8011e7c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 8011e74:	b166      	cbz	r6, 8011e90 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 8011e76:	9200      	str	r2, [sp, #0]
 8011e78:	4a08      	ldr	r2, [pc, #32]	; (8011e9c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 8011e7a:	460b      	mov	r3, r1
 8011e7c:	4629      	mov	r1, r5
 8011e7e:	f7f8 fb3f 	bl	800a500 <snprintf>
 8011e82:	4285      	cmp	r5, r0
 8011e84:	bfa2      	ittt	ge
 8011e86:	88e3      	ldrhge	r3, [r4, #6]
 8011e88:	181b      	addge	r3, r3, r0
 8011e8a:	80e3      	strhge	r3, [r4, #6]
 8011e8c:	b002      	add	sp, #8
 8011e8e:	bd70      	pop	{r4, r5, r6, pc}
 8011e90:	9200      	str	r2, [sp, #0]
 8011e92:	460b      	mov	r3, r1
 8011e94:	4a02      	ldr	r2, [pc, #8]	; (8011ea0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011e96:	e7f1      	b.n	8011e7c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 8011e98:	0801adb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, fp, sp, pc}
 8011e9c:	0801ada9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, fp, sp, pc}
 8011ea0:	0801adb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, sl, fp, sp, pc}

08011ea4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 8011ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ea8:	8885      	ldrh	r5, [r0, #4]
 8011eaa:	4698      	mov	r8, r3
 8011eac:	88c3      	ldrh	r3, [r0, #6]
 8011eae:	42ab      	cmp	r3, r5
 8011eb0:	4604      	mov	r4, r0
 8011eb2:	d229      	bcs.n	8011f08 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 8011eb4:	6826      	ldr	r6, [r4, #0]
 8011eb6:	f894 9008 	ldrb.w	r9, [r4, #8]
 8011eba:	4692      	mov	sl, r2
 8011ebc:	ee10 0a10 	vmov	r0, s0
 8011ec0:	460f      	mov	r7, r1
 8011ec2:	441e      	add	r6, r3
 8011ec4:	1aed      	subs	r5, r5, r3
 8011ec6:	f7f7 f865 	bl	8008f94 <__aeabi_f2d>
 8011eca:	f1ba 0f00 	cmp.w	sl, #0
 8011ece:	d109      	bne.n	8011ee4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 8011ed0:	f1b9 0f00 	cmp.w	r9, #0
 8011ed4:	d109      	bne.n	8011eea <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 8011ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011eda:	4a10      	ldr	r2, [pc, #64]	; (8011f1c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 8011edc:	f8cd 8000 	str.w	r8, [sp]
 8011ee0:	463b      	mov	r3, r7
 8011ee2:	e008      	b.n	8011ef6 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 8011ee4:	f1b9 0f00 	cmp.w	r9, #0
 8011ee8:	d011      	beq.n	8011f0e <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 8011eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011eee:	4a0c      	ldr	r2, [pc, #48]	; (8011f20 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 8011ef0:	f8cd 8000 	str.w	r8, [sp]
 8011ef4:	463b      	mov	r3, r7
 8011ef6:	4629      	mov	r1, r5
 8011ef8:	4630      	mov	r0, r6
 8011efa:	f7f8 fb01 	bl	800a500 <snprintf>
 8011efe:	4285      	cmp	r5, r0
 8011f00:	bfa2      	ittt	ge
 8011f02:	88e3      	ldrhge	r3, [r4, #6]
 8011f04:	18c0      	addge	r0, r0, r3
 8011f06:	80e0      	strhge	r0, [r4, #6]
 8011f08:	b004      	add	sp, #16
 8011f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f12:	4a04      	ldr	r2, [pc, #16]	; (8011f24 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 8011f14:	f8cd 8000 	str.w	r8, [sp]
 8011f18:	463b      	mov	r3, r7
 8011f1a:	e7ec      	b.n	8011ef6 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 8011f1c:	0801c603 	stmdaeq	r1, {r0, r1, r9, sl, lr, pc}
 8011f20:	0801c5f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, sl, lr, pc}
 8011f24:	0801c604 	stmdaeq	r1, {r2, r9, sl, lr, pc}

08011f28 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>:
 8011f28:	2206      	movs	r2, #6
 8011f2a:	6001      	str	r1, [r0, #0]
 8011f2c:	4914      	ldr	r1, [pc, #80]	; (8011f80 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x58>)
 8011f2e:	75c2      	strb	r2, [r0, #23]
 8011f30:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8011f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f36:	2300      	movs	r3, #0
 8011f38:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8011f3c:	2501      	movs	r5, #1
 8011f3e:	4a11      	ldr	r2, [pc, #68]	; (8011f84 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x5c>)
 8011f40:	7545      	strb	r5, [r0, #21]
 8011f42:	7583      	strb	r3, [r0, #22]
 8011f44:	8303      	strh	r3, [r0, #24]
 8011f46:	6043      	str	r3, [r0, #4]
 8011f48:	6102      	str	r2, [r0, #16]
 8011f4a:	f100 0418 	add.w	r4, r0, #24
 8011f4e:	f647 76f0 	movw	r6, #32752	; 0x7ff0
 8011f52:	f824 5f02 	strh.w	r5, [r4, #2]!
 8011f56:	b163      	cbz	r3, 8011f72 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x4a>
 8011f58:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8011f5c:	1d11      	adds	r1, r2, #4
 8011f5e:	3207      	adds	r2, #7
 8011f60:	b289      	uxth	r1, r1
 8011f62:	b292      	uxth	r2, r2
 8011f64:	ea81 0702 	eor.w	r7, r1, r2
 8011f68:	423e      	tst	r6, r7
 8011f6a:	bf18      	it	ne
 8011f6c:	ea02 0106 	andne.w	r1, r2, r6
 8011f70:	8021      	strh	r1, [r4, #0]
 8011f72:	3301      	adds	r3, #1
 8011f74:	2b10      	cmp	r3, #16
 8011f76:	d1ec      	bne.n	8011f52 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x2a>
 8011f78:	2300      	movs	r3, #0
 8011f7a:	7503      	strb	r3, [r0, #20]
 8011f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f7e:	bf00      	nop
 8011f80:	0100aa03 	tsteq	r0, r3, lsl #20
 8011f84:	01ff003d 	mvnseq	r0, sp, lsr r0

08011f88 <PixelDmxParams::Load()>:
 8011f88:	b508      	push	{r3, lr}
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	4601      	mov	r1, r0
 8011f8e:	6043      	str	r3, [r0, #4]
 8011f90:	6800      	ldr	r0, [r0, #0]
 8011f92:	b120      	cbz	r0, 8011f9e <PixelDmxParams::Load()+0x16>
 8011f94:	6803      	ldr	r3, [r0, #0]
 8011f96:	3104      	adds	r1, #4
 8011f98:	68db      	ldr	r3, [r3, #12]
 8011f9a:	4798      	blx	r3
 8011f9c:	2001      	movs	r0, #1
 8011f9e:	bd08      	pop	{r3, pc}

08011fa0 <PixelDmxParams::Load(char const*, unsigned int)>:
 8011fa0:	6803      	ldr	r3, [r0, #0]
 8011fa2:	b1d3      	cbz	r3, 8011fda <PixelDmxParams::Load(char const*, unsigned int)+0x3a>
 8011fa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	6043      	str	r3, [r0, #4]
 8011faa:	4604      	mov	r4, r0
 8011fac:	460d      	mov	r5, r1
 8011fae:	4616      	mov	r6, r2
 8011fb0:	490a      	ldr	r1, [pc, #40]	; (8011fdc <PixelDmxParams::Load(char const*, unsigned int)+0x3c>)
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	4668      	mov	r0, sp
 8011fb6:	f005 fae7 	bl	8017588 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8011fba:	4632      	mov	r2, r6
 8011fbc:	4629      	mov	r1, r5
 8011fbe:	4668      	mov	r0, sp
 8011fc0:	f005 fae6 	bl	8017590 <ReadConfigFile::Read(char const*, unsigned int)>
 8011fc4:	4621      	mov	r1, r4
 8011fc6:	f851 0b04 	ldr.w	r0, [r1], #4
 8011fca:	6803      	ldr	r3, [r0, #0]
 8011fcc:	689b      	ldr	r3, [r3, #8]
 8011fce:	4798      	blx	r3
 8011fd0:	4668      	mov	r0, sp
 8011fd2:	f005 fadc 	bl	801758e <ReadConfigFile::~ReadConfigFile()>
 8011fd6:	b002      	add	sp, #8
 8011fd8:	bd70      	pop	{r4, r5, r6, pc}
 8011fda:	4770      	bx	lr
 8011fdc:	0801228d 	stmdaeq	r1, {r0, r2, r3, r7, r9, sp}

08011fe0 <PixelDmxParams::callbackFunction(char const*)>:
 8011fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011fe4:	b08b      	sub	sp, #44	; 0x2c
 8011fe6:	460d      	mov	r5, r1
 8011fe8:	2308      	movs	r3, #8
 8011fea:	4604      	mov	r4, r0
 8011fec:	9304      	str	r3, [sp, #16]
 8011fee:	4999      	ldr	r1, [pc, #612]	; (8012254 <PixelDmxParams::callbackFunction(char const*)+0x274>)
 8011ff0:	ab04      	add	r3, sp, #16
 8011ff2:	aa06      	add	r2, sp, #24
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	f005 faff 	bl	80175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8011ffa:	b9a0      	cbnz	r0, 8012026 <PixelDmxParams::callbackFunction(char const*)+0x46>
 8011ffc:	9b04      	ldr	r3, [sp, #16]
 8011ffe:	3328      	adds	r3, #40	; 0x28
 8012000:	446b      	add	r3, sp
 8012002:	f803 0c10 	strb.w	r0, [r3, #-16]
 8012006:	a806      	add	r0, sp, #24
 8012008:	f000 fc7c 	bl	8012904 <PixelType::GetType(char const*)>
 801200c:	6863      	ldr	r3, [r4, #4]
 801200e:	280e      	cmp	r0, #14
 8012010:	bf0d      	iteet	eq
 8012012:	2203      	moveq	r2, #3
 8012014:	7220      	strbne	r0, [r4, #8]
 8012016:	f043 0301 	orrne.w	r3, r3, #1
 801201a:	7222      	strbeq	r2, [r4, #8]
 801201c:	bf08      	it	eq
 801201e:	f023 0301 	biceq.w	r3, r3, #1
 8012022:	6063      	str	r3, [r4, #4]
 8012024:	e033      	b.n	801208e <PixelDmxParams::callbackFunction(char const*)+0xae>
 8012026:	498c      	ldr	r1, [pc, #560]	; (8012258 <PixelDmxParams::callbackFunction(char const*)+0x278>)
 8012028:	f10d 020a 	add.w	r2, sp, #10
 801202c:	4628      	mov	r0, r5
 801202e:	f005 fb98 	bl	8017762 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 8012032:	b990      	cbnz	r0, 801205a <PixelDmxParams::callbackFunction(char const*)+0x7a>
 8012034:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8012038:	6863      	ldr	r3, [r4, #4]
 801203a:	1e51      	subs	r1, r2, #1
 801203c:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 8012040:	bf2d      	iteet	cs
 8012042:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 8012046:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 801204a:	f043 0302 	orrcc.w	r3, r3, #2
 801204e:	7262      	strbcs	r2, [r4, #9]
 8012050:	bf24      	itt	cs
 8012052:	72a0      	strbcs	r0, [r4, #10]
 8012054:	f023 0302 	biccs.w	r3, r3, #2
 8012058:	e7e3      	b.n	8012022 <PixelDmxParams::callbackFunction(char const*)+0x42>
 801205a:	2303      	movs	r3, #3
 801205c:	9304      	str	r3, [sp, #16]
 801205e:	497f      	ldr	r1, [pc, #508]	; (801225c <PixelDmxParams::callbackFunction(char const*)+0x27c>)
 8012060:	ab04      	add	r3, sp, #16
 8012062:	aa06      	add	r2, sp, #24
 8012064:	4628      	mov	r0, r5
 8012066:	f005 fac7 	bl	80175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 801206a:	b998      	cbnz	r0, 8012094 <PixelDmxParams::callbackFunction(char const*)+0xb4>
 801206c:	9b04      	ldr	r3, [sp, #16]
 801206e:	3328      	adds	r3, #40	; 0x28
 8012070:	446b      	add	r3, sp
 8012072:	f803 0c10 	strb.w	r0, [r3, #-16]
 8012076:	a806      	add	r0, sp, #24
 8012078:	f000 fc68 	bl	801294c <PixelType::GetMap(char const*)>
 801207c:	6863      	ldr	r3, [r4, #4]
 801207e:	75e0      	strb	r0, [r4, #23]
 8012080:	2806      	cmp	r0, #6
 8012082:	bf14      	ite	ne
 8012084:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 8012088:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 801208c:	6063      	str	r3, [r4, #4]
 801208e:	b00b      	add	sp, #44	; 0x2c
 8012090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012094:	4972      	ldr	r1, [pc, #456]	; (8012260 <PixelDmxParams::callbackFunction(char const*)+0x280>)
 8012096:	aa03      	add	r2, sp, #12
 8012098:	4628      	mov	r0, r5
 801209a:	f005 fac6 	bl	801762a <Sscan::Float(char const*, char const*, float&)>
 801209e:	b968      	cbnz	r0, 80120bc <PixelDmxParams::callbackFunction(char const*)+0xdc>
 80120a0:	ed9d 0a03 	vldr	s0, [sp, #12]
 80120a4:	f000 fcbe 	bl	8012a24 <PixelType::ConvertTxH(float)>
 80120a8:	6863      	ldr	r3, [r4, #4]
 80120aa:	b120      	cbz	r0, 80120b6 <PixelDmxParams::callbackFunction(char const*)+0xd6>
 80120ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80120b0:	6063      	str	r3, [r4, #4]
 80120b2:	7620      	strb	r0, [r4, #24]
 80120b4:	e7eb      	b.n	801208e <PixelDmxParams::callbackFunction(char const*)+0xae>
 80120b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80120ba:	e7f9      	b.n	80120b0 <PixelDmxParams::callbackFunction(char const*)+0xd0>
 80120bc:	4969      	ldr	r1, [pc, #420]	; (8012264 <PixelDmxParams::callbackFunction(char const*)+0x284>)
 80120be:	aa03      	add	r2, sp, #12
 80120c0:	4628      	mov	r0, r5
 80120c2:	f005 fab2 	bl	801762a <Sscan::Float(char const*, char const*, float&)>
 80120c6:	b968      	cbnz	r0, 80120e4 <PixelDmxParams::callbackFunction(char const*)+0x104>
 80120c8:	ed9d 0a03 	vldr	s0, [sp, #12]
 80120cc:	f000 fcaa 	bl	8012a24 <PixelType::ConvertTxH(float)>
 80120d0:	6863      	ldr	r3, [r4, #4]
 80120d2:	b120      	cbz	r0, 80120de <PixelDmxParams::callbackFunction(char const*)+0xfe>
 80120d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80120d8:	6063      	str	r3, [r4, #4]
 80120da:	7660      	strb	r0, [r4, #25]
 80120dc:	e7d7      	b.n	801208e <PixelDmxParams::callbackFunction(char const*)+0xae>
 80120de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80120e2:	e7f9      	b.n	80120d8 <PixelDmxParams::callbackFunction(char const*)+0xf8>
 80120e4:	4960      	ldr	r1, [pc, #384]	; (8012268 <PixelDmxParams::callbackFunction(char const*)+0x288>)
 80120e6:	f10d 020a 	add.w	r2, sp, #10
 80120ea:	4628      	mov	r0, r5
 80120ec:	f005 fb39 	bl	8017762 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 80120f0:	b998      	cbnz	r0, 801211a <PixelDmxParams::callbackFunction(char const*)+0x13a>
 80120f2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80120f6:	6863      	ldr	r3, [r4, #4]
 80120f8:	1e8a      	subs	r2, r1, #2
 80120fa:	b292      	uxth	r2, r2
 80120fc:	f240 25a6 	movw	r5, #678	; 0x2a6
 8012100:	42aa      	cmp	r2, r5
 8012102:	bf81      	itttt	hi
 8012104:	2201      	movhi	r2, #1
 8012106:	7562      	strbhi	r2, [r4, #21]
 8012108:	75a0      	strbhi	r0, [r4, #22]
 801210a:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 801210e:	bf9c      	itt	ls
 8012110:	f8a4 1015 	strhls.w	r1, [r4, #21]
 8012114:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 8012118:	e783      	b.n	8012022 <PixelDmxParams::callbackFunction(char const*)+0x42>
 801211a:	4954      	ldr	r1, [pc, #336]	; (801226c <PixelDmxParams::callbackFunction(char const*)+0x28c>)
 801211c:	aa05      	add	r2, sp, #20
 801211e:	4628      	mov	r0, r5
 8012120:	f005 fb3e 	bl	80177a0 <Sscan::Uint32(char const*, char const*, unsigned int&)>
 8012124:	b960      	cbnz	r0, 8012140 <PixelDmxParams::callbackFunction(char const*)+0x160>
 8012126:	9a05      	ldr	r2, [sp, #20]
 8012128:	4951      	ldr	r1, [pc, #324]	; (8012270 <PixelDmxParams::callbackFunction(char const*)+0x290>)
 801212a:	6863      	ldr	r3, [r4, #4]
 801212c:	f8c4 200e 	str.w	r2, [r4, #14]
 8012130:	428a      	cmp	r2, r1
 8012132:	bf14      	ite	ne
 8012134:	f043 0310 	orrne.w	r3, r3, #16
 8012138:	f023 0310 	biceq.w	r3, r3, #16
 801213c:	6063      	str	r3, [r4, #4]
 801213e:	e7a6      	b.n	801208e <PixelDmxParams::callbackFunction(char const*)+0xae>
 8012140:	494c      	ldr	r1, [pc, #304]	; (8012274 <PixelDmxParams::callbackFunction(char const*)+0x294>)
 8012142:	f10d 0209 	add.w	r2, sp, #9
 8012146:	4628      	mov	r0, r5
 8012148:	f005 fb53 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801214c:	b988      	cbnz	r0, 8012172 <PixelDmxParams::callbackFunction(char const*)+0x192>
 801214e:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8012152:	6863      	ldr	r3, [r4, #4]
 8012154:	1e4a      	subs	r2, r1, #1
 8012156:	b2d2      	uxtb	r2, r2
 8012158:	2afd      	cmp	r2, #253	; 0xfd
 801215a:	bf89      	itett	hi
 801215c:	f023 0320 	bichi.w	r3, r3, #32
 8012160:	f043 0320 	orrls.w	r3, r3, #32
 8012164:	6063      	strhi	r3, [r4, #4]
 8012166:	23ff      	movhi	r3, #255	; 0xff
 8012168:	bf9a      	itte	ls
 801216a:	6063      	strls	r3, [r4, #4]
 801216c:	74a1      	strbls	r1, [r4, #18]
 801216e:	74a3      	strbhi	r3, [r4, #18]
 8012170:	e78d      	b.n	801208e <PixelDmxParams::callbackFunction(char const*)+0xae>
 8012172:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8012288 <PixelDmxParams::callbackFunction(char const*)+0x2a8>
 8012176:	2600      	movs	r6, #0
 8012178:	2714      	movs	r7, #20
 801217a:	f104 091a 	add.w	r9, r4, #26
 801217e:	f10d 020a 	add.w	r2, sp, #10
 8012182:	fb07 8106 	mla	r1, r7, r6, r8
 8012186:	4628      	mov	r0, r5
 8012188:	f005 faeb 	bl	8017762 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 801218c:	b948      	cbnz	r0, 80121a2 <PixelDmxParams::callbackFunction(char const*)+0x1c2>
 801218e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012192:	f829 3016 	strh.w	r3, [r9, r6, lsl #1]
 8012196:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801219a:	6863      	ldr	r3, [r4, #4]
 801219c:	40b2      	lsls	r2, r6
 801219e:	4313      	orrs	r3, r2
 80121a0:	6063      	str	r3, [r4, #4]
 80121a2:	3601      	adds	r6, #1
 80121a4:	2e10      	cmp	r6, #16
 80121a6:	d1ea      	bne.n	801217e <PixelDmxParams::callbackFunction(char const*)+0x19e>
 80121a8:	4933      	ldr	r1, [pc, #204]	; (8012278 <PixelDmxParams::callbackFunction(char const*)+0x298>)
 80121aa:	f10d 0209 	add.w	r2, sp, #9
 80121ae:	4628      	mov	r0, r5
 80121b0:	f005 fb1f 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80121b4:	b970      	cbnz	r0, 80121d4 <PixelDmxParams::callbackFunction(char const*)+0x1f4>
 80121b6:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80121ba:	6863      	ldr	r3, [r4, #4]
 80121bc:	1e91      	subs	r1, r2, #2
 80121be:	290e      	cmp	r1, #14
 80121c0:	bf8d      	iteet	hi
 80121c2:	2201      	movhi	r2, #1
 80121c4:	74e2      	strbls	r2, [r4, #19]
 80121c6:	f043 0340 	orrls.w	r3, r3, #64	; 0x40
 80121ca:	74e2      	strbhi	r2, [r4, #19]
 80121cc:	bf88      	it	hi
 80121ce:	f023 0340 	bichi.w	r3, r3, #64	; 0x40
 80121d2:	e726      	b.n	8012022 <PixelDmxParams::callbackFunction(char const*)+0x42>
 80121d4:	4929      	ldr	r1, [pc, #164]	; (801227c <PixelDmxParams::callbackFunction(char const*)+0x29c>)
 80121d6:	f10d 0209 	add.w	r2, sp, #9
 80121da:	4628      	mov	r0, r5
 80121dc:	f005 fb09 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80121e0:	b960      	cbnz	r0, 80121fc <PixelDmxParams::callbackFunction(char const*)+0x21c>
 80121e2:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80121e6:	6863      	ldr	r3, [r4, #4]
 80121e8:	1e51      	subs	r1, r2, #1
 80121ea:	2904      	cmp	r1, #4
 80121ec:	bf99      	ittee	ls
 80121ee:	7522      	strbls	r2, [r4, #20]
 80121f0:	f043 0308 	orrls.w	r3, r3, #8
 80121f4:	7520      	strbhi	r0, [r4, #20]
 80121f6:	f023 0308 	bichi.w	r3, r3, #8
 80121fa:	e712      	b.n	8012022 <PixelDmxParams::callbackFunction(char const*)+0x42>
 80121fc:	4920      	ldr	r1, [pc, #128]	; (8012280 <PixelDmxParams::callbackFunction(char const*)+0x2a0>)
 80121fe:	f10d 0209 	add.w	r2, sp, #9
 8012202:	4628      	mov	r0, r5
 8012204:	f005 faf5 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012208:	b948      	cbnz	r0, 801221e <PixelDmxParams::callbackFunction(char const*)+0x23e>
 801220a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 801220e:	6863      	ldr	r3, [r4, #4]
 8012210:	b112      	cbz	r2, 8012218 <PixelDmxParams::callbackFunction(char const*)+0x238>
 8012212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012216:	e704      	b.n	8012022 <PixelDmxParams::callbackFunction(char const*)+0x42>
 8012218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801221c:	e701      	b.n	8012022 <PixelDmxParams::callbackFunction(char const*)+0x42>
 801221e:	4919      	ldr	r1, [pc, #100]	; (8012284 <PixelDmxParams::callbackFunction(char const*)+0x2a4>)
 8012220:	aa03      	add	r2, sp, #12
 8012222:	4628      	mov	r0, r5
 8012224:	f005 fa01 	bl	801762a <Sscan::Float(char const*, char const*, float&)>
 8012228:	2800      	cmp	r0, #0
 801222a:	f47f af30 	bne.w	801208e <PixelDmxParams::callbackFunction(char const*)+0xae>
 801222e:	eddd 7a03 	vldr	s15, [sp, #12]
 8012232:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8012236:	ee67 7a87 	vmul.f32	s15, s15, s14
 801223a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801223e:	edcd 7a01 	vstr	s15, [sp, #4]
 8012242:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012246:	f1a3 0214 	sub.w	r2, r3, #20
 801224a:	2a05      	cmp	r2, #5
 801224c:	bf8c      	ite	hi
 801224e:	7360      	strbhi	r0, [r4, #13]
 8012250:	7363      	strbls	r3, [r4, #13]
 8012252:	e71c      	b.n	801208e <PixelDmxParams::callbackFunction(char const*)+0xae>
 8012254:	0801d71e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, sl, ip, lr, pc}
 8012258:	0801d727 	stmdaeq	r1, {r0, r1, r2, r5, r8, r9, sl, ip, lr, pc}
 801225c:	0801d70e 	stmdaeq	r1, {r1, r2, r3, r8, r9, sl, ip, lr, pc}
 8012260:	0801d731 	stmdaeq	r1, {r0, r4, r5, r8, r9, sl, ip, lr, pc}
 8012264:	0801d739 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, sl, ip, lr, pc}
 8012268:	0801d6db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r9, sl, ip, lr, pc}
 801226c:	0801d6bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r9, sl, ip, lr, pc}
 8012270:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8012274:	0801d6fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, sl, ip, lr, pc}
 8012278:	0801d6a8 	stmdaeq	r1, {r3, r5, r7, r9, sl, ip, lr, pc}
 801227c:	0801d6ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, sl, ip, lr, pc}
 8012280:	0801d6eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, sl, ip, lr, pc}
 8012284:	0801d6b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r9, sl, ip, lr, pc}
 8012288:	0801d7ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, r9, sl, ip, lr, pc}

0801228c <PixelDmxParams::staticCallbackFunction(void*, char const*)>:
 801228c:	f7ff bea8 	b.w	8011fe0 <PixelDmxParams::callbackFunction(char const*)>

08012290 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)>:
 8012290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012294:	4604      	mov	r4, r0
 8012296:	b086      	sub	sp, #24
 8012298:	4615      	mov	r5, r2
 801229a:	461e      	mov	r6, r3
 801229c:	3004      	adds	r0, #4
 801229e:	b389      	cbz	r1, 8012304 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x74>
 80122a0:	2236      	movs	r2, #54	; 0x36
 80122a2:	f006 f804 	bl	80182ae <memmove>
 80122a6:	462a      	mov	r2, r5
 80122a8:	499b      	ldr	r1, [pc, #620]	; (8012518 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 80122aa:	4633      	mov	r3, r6
 80122ac:	a803      	add	r0, sp, #12
 80122ae:	f005 f8cb 	bl	8017448 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80122b2:	7a20      	ldrb	r0, [r4, #8]
 80122b4:	f000 fb1a 	bl	80128ec <PixelType::GetType(pixel::Type)>
 80122b8:	6863      	ldr	r3, [r4, #4]
 80122ba:	4998      	ldr	r1, [pc, #608]	; (801251c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 80122bc:	4602      	mov	r2, r0
 80122be:	f003 0301 	and.w	r3, r3, #1
 80122c2:	a803      	add	r0, sp, #12
 80122c4:	f7ff fdc6 	bl	8011e54 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 80122c8:	6863      	ldr	r3, [r4, #4]
 80122ca:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 80122ce:	4994      	ldr	r1, [pc, #592]	; (8012520 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 80122d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80122d4:	a803      	add	r0, sp, #12
 80122d6:	f7ff fd95 	bl	8011e04 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 80122da:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80122de:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80122e2:	6863      	ldr	r3, [r4, #4]
 80122e4:	42aa      	cmp	r2, r5
 80122e6:	d227      	bcs.n	8012338 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xa8>
 80122e8:	9803      	ldr	r0, [sp, #12]
 80122ea:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80122ee:	4410      	add	r0, r2
 80122f0:	eba5 0502 	sub.w	r5, r5, r2
 80122f4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80122f8:	d10b      	bne.n	8012312 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 80122fa:	b96a      	cbnz	r2, 8012318 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x88>
 80122fc:	9200      	str	r2, [sp, #0]
 80122fe:	4b89      	ldr	r3, [pc, #548]	; (8012524 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 8012300:	4a89      	ldr	r2, [pc, #548]	; (8012528 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 8012302:	e00f      	b.n	8012324 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x94>
 8012304:	6823      	ldr	r3, [r4, #0]
 8012306:	681a      	ldr	r2, [r3, #0]
 8012308:	4601      	mov	r1, r0
 801230a:	68d2      	ldr	r2, [r2, #12]
 801230c:	4618      	mov	r0, r3
 801230e:	4790      	blx	r2
 8012310:	e7c9      	b.n	80122a6 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 8012312:	2a00      	cmp	r2, #0
 8012314:	f000 8087 	beq.w	8012426 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x196>
 8012318:	3b00      	subs	r3, #0
 801231a:	bf18      	it	ne
 801231c:	2301      	movne	r3, #1
 801231e:	9300      	str	r3, [sp, #0]
 8012320:	4a82      	ldr	r2, [pc, #520]	; (801252c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 8012322:	4b80      	ldr	r3, [pc, #512]	; (8012524 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 8012324:	4629      	mov	r1, r5
 8012326:	f7f8 f8eb 	bl	800a500 <snprintf>
 801232a:	4285      	cmp	r5, r0
 801232c:	bfa2      	ittt	ge
 801232e:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8012332:	18c0      	addge	r0, r0, r3
 8012334:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8012338:	7b63      	ldrb	r3, [r4, #13]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d178      	bne.n	8012430 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1a0>
 801233e:	4a7c      	ldr	r2, [pc, #496]	; (8012530 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 8012340:	497c      	ldr	r1, [pc, #496]	; (8012534 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 8012342:	a803      	add	r0, sp, #12
 8012344:	f7ff fd86 	bl	8011e54 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 8012348:	497b      	ldr	r1, [pc, #492]	; (8012538 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 801234a:	a803      	add	r0, sp, #12
 801234c:	f005 f902 	bl	8017554 <PropertiesBuilder::AddComment(char const*)>
 8012350:	6863      	ldr	r3, [r4, #4]
 8012352:	059e      	lsls	r6, r3, #22
 8012354:	d403      	bmi.n	801235e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xce>
 8012356:	7a20      	ldrb	r0, [r4, #8]
 8012358:	f000 fb2c 	bl	80129b4 <PixelType::GetMap(pixel::Type)>
 801235c:	75e0      	strb	r0, [r4, #23]
 801235e:	7de0      	ldrb	r0, [r4, #23]
 8012360:	f000 fb1c 	bl	801299c <PixelType::GetMap(pixel::Map)>
 8012364:	6863      	ldr	r3, [r4, #4]
 8012366:	4975      	ldr	r1, [pc, #468]	; (801253c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 8012368:	4602      	mov	r2, r0
 801236a:	f3c3 2340 	ubfx	r3, r3, #9, #1
 801236e:	a803      	add	r0, sp, #12
 8012370:	f7ff fd70 	bl	8011e54 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 8012374:	6863      	ldr	r3, [r4, #4]
 8012376:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801237a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801237e:	d011      	beq.n	80123a4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x114>
 8012380:	f10d 020b 	add.w	r2, sp, #11
 8012384:	7a20      	ldrb	r0, [r4, #8]
 8012386:	f10d 010a 	add.w	r1, sp, #10
 801238a:	f000 f9a3 	bl	80126d4 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 801238e:	6863      	ldr	r3, [r4, #4]
 8012390:	055d      	lsls	r5, r3, #21
 8012392:	bf5c      	itt	pl
 8012394:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 8012398:	7622      	strbpl	r2, [r4, #24]
 801239a:	0518      	lsls	r0, r3, #20
 801239c:	bf5c      	itt	pl
 801239e:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 80123a2:	7663      	strbpl	r3, [r4, #25]
 80123a4:	4966      	ldr	r1, [pc, #408]	; (8012540 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 80123a6:	a803      	add	r0, sp, #12
 80123a8:	f005 f8d4 	bl	8017554 <PropertiesBuilder::AddComment(char const*)>
 80123ac:	7e20      	ldrb	r0, [r4, #24]
 80123ae:	f000 fb0b 	bl	80129c8 <PixelType::ConvertTxH(unsigned char)>
 80123b2:	6862      	ldr	r2, [r4, #4]
 80123b4:	4963      	ldr	r1, [pc, #396]	; (8012544 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 80123b6:	2302      	movs	r3, #2
 80123b8:	f3c2 2280 	ubfx	r2, r2, #10, #1
 80123bc:	a803      	add	r0, sp, #12
 80123be:	f7ff fd71 	bl	8011ea4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 80123c2:	7e60      	ldrb	r0, [r4, #25]
 80123c4:	f000 fb00 	bl	80129c8 <PixelType::ConvertTxH(unsigned char)>
 80123c8:	6862      	ldr	r2, [r4, #4]
 80123ca:	495f      	ldr	r1, [pc, #380]	; (8012548 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 80123cc:	2302      	movs	r3, #2
 80123ce:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 80123d2:	a803      	add	r0, sp, #12
 80123d4:	f7ff fd66 	bl	8011ea4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 80123d8:	495c      	ldr	r1, [pc, #368]	; (801254c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 80123da:	a803      	add	r0, sp, #12
 80123dc:	f005 f8ba 	bl	8017554 <PropertiesBuilder::AddComment(char const*)>
 80123e0:	6863      	ldr	r3, [r4, #4]
 80123e2:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 80123e6:	495a      	ldr	r1, [pc, #360]	; (8012550 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 80123e8:	f3c3 2300 	ubfx	r3, r3, #8, #1
 80123ec:	a803      	add	r0, sp, #12
 80123ee:	f7ff fd09 	bl	8011e04 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 80123f2:	4958      	ldr	r1, [pc, #352]	; (8012554 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 80123f4:	a803      	add	r0, sp, #12
 80123f6:	f005 f8ad 	bl	8017554 <PropertiesBuilder::AddComment(char const*)>
 80123fa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80123fe:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8012402:	f8d4 300e 	ldr.w	r3, [r4, #14]
 8012406:	6861      	ldr	r1, [r4, #4]
 8012408:	42aa      	cmp	r2, r5
 801240a:	d22f      	bcs.n	801246c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 801240c:	9803      	ldr	r0, [sp, #12]
 801240e:	06c9      	lsls	r1, r1, #27
 8012410:	4410      	add	r0, r2
 8012412:	eba5 0502 	sub.w	r5, r5, r2
 8012416:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801241a:	d418      	bmi.n	801244e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1be>
 801241c:	b9ca      	cbnz	r2, 8012452 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c2>
 801241e:	9300      	str	r3, [sp, #0]
 8012420:	4a41      	ldr	r2, [pc, #260]	; (8012528 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 8012422:	4b4d      	ldr	r3, [pc, #308]	; (8012558 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 8012424:	e018      	b.n	8012458 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c8>
 8012426:	2301      	movs	r3, #1
 8012428:	9300      	str	r3, [sp, #0]
 801242a:	4a4c      	ldr	r2, [pc, #304]	; (801255c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 801242c:	4b3d      	ldr	r3, [pc, #244]	; (8012524 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 801242e:	e779      	b.n	8012324 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x94>
 8012430:	ee07 3a90 	vmov	s15, r3
 8012434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012438:	2301      	movs	r3, #1
 801243a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801243e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012442:	493c      	ldr	r1, [pc, #240]	; (8012534 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 8012444:	461a      	mov	r2, r3
 8012446:	a803      	add	r0, sp, #12
 8012448:	f7ff fd2c 	bl	8011ea4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 801244c:	e77c      	b.n	8012348 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xb8>
 801244e:	2a00      	cmp	r2, #0
 8012450:	d05e      	beq.n	8012510 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x280>
 8012452:	9300      	str	r3, [sp, #0]
 8012454:	4a35      	ldr	r2, [pc, #212]	; (801252c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 8012456:	4b40      	ldr	r3, [pc, #256]	; (8012558 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 8012458:	4629      	mov	r1, r5
 801245a:	f7f8 f851 	bl	800a500 <snprintf>
 801245e:	4285      	cmp	r5, r0
 8012460:	bfa2      	ittt	ge
 8012462:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8012466:	18c0      	addge	r0, r0, r3
 8012468:	f8ad 0012 	strhge.w	r0, [sp, #18]
 801246c:	493c      	ldr	r1, [pc, #240]	; (8012560 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 801246e:	4e3d      	ldr	r6, [pc, #244]	; (8012564 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 8012470:	a803      	add	r0, sp, #12
 8012472:	f005 f86f 	bl	8017554 <PropertiesBuilder::AddComment(char const*)>
 8012476:	6863      	ldr	r3, [r4, #4]
 8012478:	7ca2      	ldrb	r2, [r4, #18]
 801247a:	493b      	ldr	r1, [pc, #236]	; (8012568 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 801247c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012480:	a803      	add	r0, sp, #12
 8012482:	f7ff fc97 	bl	8011db4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8012486:	f104 0718 	add.w	r7, r4, #24
 801248a:	2500      	movs	r5, #0
 801248c:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8012490:	6862      	ldr	r2, [r4, #4]
 8012492:	fa08 f305 	lsl.w	r3, r8, r5
 8012496:	4393      	bics	r3, r2
 8012498:	bf0c      	ite	eq
 801249a:	2301      	moveq	r3, #1
 801249c:	2300      	movne	r3, #0
 801249e:	4631      	mov	r1, r6
 80124a0:	f837 2f02 	ldrh.w	r2, [r7, #2]!
 80124a4:	a803      	add	r0, sp, #12
 80124a6:	3501      	adds	r5, #1
 80124a8:	f7ff fcac 	bl	8011e04 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 80124ac:	2d10      	cmp	r5, #16
 80124ae:	f106 0614 	add.w	r6, r6, #20
 80124b2:	d1ed      	bne.n	8012490 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x200>
 80124b4:	6863      	ldr	r3, [r4, #4]
 80124b6:	7ce2      	ldrb	r2, [r4, #19]
 80124b8:	492c      	ldr	r1, [pc, #176]	; (801256c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 80124ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80124be:	a803      	add	r0, sp, #12
 80124c0:	f7ff fc78 	bl	8011db4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80124c4:	492a      	ldr	r1, [pc, #168]	; (8012570 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2e0>)
 80124c6:	a803      	add	r0, sp, #12
 80124c8:	f005 f844 	bl	8017554 <PropertiesBuilder::AddComment(char const*)>
 80124cc:	6863      	ldr	r3, [r4, #4]
 80124ce:	7d22      	ldrb	r2, [r4, #20]
 80124d0:	4928      	ldr	r1, [pc, #160]	; (8012574 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2e4>)
 80124d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80124d6:	a803      	add	r0, sp, #12
 80124d8:	f7ff fc6c 	bl	8011db4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80124dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80124e0:	b17b      	cbz	r3, 8012502 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x272>
 80124e2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80124e6:	9b03      	ldr	r3, [sp, #12]
 80124e8:	4413      	add	r3, r2
 80124ea:	227d      	movs	r2, #125	; 0x7d
 80124ec:	f803 2c01 	strb.w	r2, [r3, #-1]
 80124f0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80124f4:	9903      	ldr	r1, [sp, #12]
 80124f6:	54ca      	strb	r2, [r1, r3]
 80124f8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80124fc:	3301      	adds	r3, #1
 80124fe:	f8ad 3012 	strh.w	r3, [sp, #18]
 8012502:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012508:	601a      	str	r2, [r3, #0]
 801250a:	b006      	add	sp, #24
 801250c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012510:	9300      	str	r3, [sp, #0]
 8012512:	4a12      	ldr	r2, [pc, #72]	; (801255c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 8012514:	4b10      	ldr	r3, [pc, #64]	; (8012558 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 8012516:	e79f      	b.n	8012458 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c8>
 8012518:	0801d741 	stmdaeq	r1, {r0, r6, r8, r9, sl, ip, lr, pc}
 801251c:	0801d71e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, sl, ip, lr, pc}
 8012520:	0801d727 	stmdaeq	r1, {r0, r1, r2, r5, r8, r9, sl, ip, lr, pc}
 8012524:	0801d6eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, sl, ip, lr, pc}
 8012528:	0801ada1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, sp, pc}
 801252c:	0801ad98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, sp, pc}
 8012530:	0801c60d 	stmdaeq	r1, {r0, r2, r3, r9, sl, lr, pc}
 8012534:	0801d6b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r9, sl, ip, lr, pc}
 8012538:	0801c617 	stmdaeq	r1, {r0, r1, r2, r4, r9, sl, lr, pc}
 801253c:	0801d70e 	stmdaeq	r1, {r1, r2, r3, r8, r9, sl, ip, lr, pc}
 8012540:	0801c62b 	stmdaeq	r1, {r0, r1, r3, r5, r9, sl, lr, pc}
 8012544:	0801d731 	stmdaeq	r1, {r0, r4, r5, r8, r9, sl, ip, lr, pc}
 8012548:	0801d739 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, sl, ip, lr, pc}
 801254c:	0801c641 	stmdaeq	r1, {r0, r6, r9, sl, lr, pc}
 8012550:	0801d6db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r9, sl, ip, lr, pc}
 8012554:	0801c64a 	stmdaeq	r1, {r1, r3, r6, r9, sl, lr, pc}
 8012558:	0801d6bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r9, sl, ip, lr, pc}
 801255c:	0801ada2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, sp, pc}
 8012560:	0801c65c 	stmdaeq	r1, {r2, r3, r4, r6, r9, sl, lr, pc}
 8012564:	0801d7ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, r9, sl, ip, lr, pc}
 8012568:	0801d6fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, sl, ip, lr, pc}
 801256c:	0801d6a8 	stmdaeq	r1, {r3, r5, r7, r9, sl, ip, lr, pc}
 8012570:	0801c66a 	stmdaeq	r1, {r1, r3, r5, r6, r9, sl, lr, pc}
 8012574:	0801d6ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, sl, ip, lr, pc}

08012578 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)>:
 8012578:	b513      	push	{r0, r1, r4, lr}
 801257a:	6804      	ldr	r4, [r0, #0]
 801257c:	b914      	cbnz	r4, 8012584 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 801257e:	601c      	str	r4, [r3, #0]
 8012580:	b002      	add	sp, #8
 8012582:	bd10      	pop	{r4, pc}
 8012584:	9300      	str	r3, [sp, #0]
 8012586:	4613      	mov	r3, r2
 8012588:	460a      	mov	r2, r1
 801258a:	2100      	movs	r1, #0
 801258c:	f7ff fe80 	bl	8012290 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)>
 8012590:	e7f6      	b.n	8012580 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

08012592 <PixelDmxParams::Set(PixelDmxConfiguration*)>:
 8012592:	6843      	ldr	r3, [r0, #4]
 8012594:	07da      	lsls	r2, r3, #31
 8012596:	bf44      	itt	mi
 8012598:	7a02      	ldrbmi	r2, [r0, #8]
 801259a:	600a      	strmi	r2, [r1, #0]
 801259c:	079a      	lsls	r2, r3, #30
 801259e:	d505      	bpl.n	80125ac <PixelDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 80125a0:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 80125a4:	2a00      	cmp	r2, #0
 80125a6:	bf08      	it	eq
 80125a8:	22aa      	moveq	r2, #170	; 0xaa
 80125aa:	604a      	str	r2, [r1, #4]
 80125ac:	059a      	lsls	r2, r3, #22
 80125ae:	bf44      	itt	mi
 80125b0:	7dc2      	ldrbmi	r2, [r0, #23]
 80125b2:	608a      	strmi	r2, [r1, #8]
 80125b4:	055a      	lsls	r2, r3, #21
 80125b6:	bf44      	itt	mi
 80125b8:	7e02      	ldrbmi	r2, [r0, #24]
 80125ba:	740a      	strbmi	r2, [r1, #16]
 80125bc:	051a      	lsls	r2, r3, #20
 80125be:	bf44      	itt	mi
 80125c0:	7e42      	ldrbmi	r2, [r0, #25]
 80125c2:	744a      	strbmi	r2, [r1, #17]
 80125c4:	06da      	lsls	r2, r3, #27
 80125c6:	bf44      	itt	mi
 80125c8:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 80125cc:	60ca      	strmi	r2, [r1, #12]
 80125ce:	069a      	lsls	r2, r3, #26
 80125d0:	bf44      	itt	mi
 80125d2:	7c82      	ldrbmi	r2, [r0, #18]
 80125d4:	748a      	strbmi	r2, [r1, #18]
 80125d6:	061a      	lsls	r2, r3, #24
 80125d8:	d504      	bpl.n	80125e4 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 80125da:	2201      	movs	r2, #1
 80125dc:	750a      	strb	r2, [r1, #20]
 80125de:	7b42      	ldrb	r2, [r0, #13]
 80125e0:	b102      	cbz	r2, 80125e4 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 80125e2:	74ca      	strb	r2, [r1, #19]
 80125e4:	075a      	lsls	r2, r3, #29
 80125e6:	d50f      	bpl.n	8012608 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x76>
 80125e8:	7ac2      	ldrb	r2, [r0, #11]
 80125ea:	b510      	push	{r4, lr}
 80125ec:	7b04      	ldrb	r4, [r0, #12]
 80125ee:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80125f2:	858a      	strh	r2, [r1, #44]	; 0x2c
 80125f4:	05da      	lsls	r2, r3, #23
 80125f6:	bf44      	itt	mi
 80125f8:	f8b0 2015 	ldrhmi.w	r2, [r0, #21]
 80125fc:	620a      	strmi	r2, [r1, #32]
 80125fe:	065c      	lsls	r4, r3, #25
 8012600:	bf44      	itt	mi
 8012602:	7cc3      	ldrbmi	r3, [r0, #19]
 8012604:	61cb      	strmi	r3, [r1, #28]
 8012606:	bd10      	pop	{r4, pc}
 8012608:	05da      	lsls	r2, r3, #23
 801260a:	bf44      	itt	mi
 801260c:	f8b0 2015 	ldrhmi.w	r2, [r0, #21]
 8012610:	620a      	strmi	r2, [r1, #32]
 8012612:	065b      	lsls	r3, r3, #25
 8012614:	bf44      	itt	mi
 8012616:	7cc3      	ldrbmi	r3, [r0, #19]
 8012618:	61cb      	strmi	r3, [r1, #28]
 801261a:	4770      	bx	lr

0801261c <PixelDmxParams::Dump()>:
 801261c:	4770      	bx	lr

0801261e <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>:
 801261e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012620:	4604      	mov	r4, r0
 8012622:	460e      	mov	r6, r1
 8012624:	4611      	mov	r1, r2
 8012626:	9201      	str	r2, [sp, #4]
 8012628:	461d      	mov	r5, r3
 801262a:	f000 f861 	bl	80126f0 <PixelConfiguration::Validate(unsigned int&)>
 801262e:	7d62      	ldrb	r2, [r4, #21]
 8012630:	b94a      	cbnz	r2, 8012646 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x28>
 8012632:	6823      	ldr	r3, [r4, #0]
 8012634:	9901      	ldr	r1, [sp, #4]
 8012636:	b11b      	cbz	r3, 8012640 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x22>
 8012638:	3b0b      	subs	r3, #11
 801263a:	2b01      	cmp	r3, #1
 801263c:	bf88      	it	hi
 801263e:	6022      	strhi	r2, [r4, #0]
 8012640:	4620      	mov	r0, r4
 8012642:	f000 f855 	bl	80126f0 <PixelConfiguration::Validate(unsigned int&)>
 8012646:	6823      	ldr	r3, [r4, #0]
 8012648:	2b07      	cmp	r3, #7
 801264a:	bf15      	itete	ne
 801264c:	f44f 71aa 	movne.w	r1, #340	; 0x154
 8012650:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8012654:	23aa      	movne	r3, #170	; 0xaa
 8012656:	2380      	moveq	r3, #128	; 0x80
 8012658:	e9c5 3100 	strd	r3, r1, [r5]
 801265c:	6a21      	ldr	r1, [r4, #32]
 801265e:	bf14      	ite	ne
 8012660:	f44f 72ff 	movne.w	r2, #510	; 0x1fe
 8012664:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 8012668:	60aa      	str	r2, [r5, #8]
 801266a:	6862      	ldr	r2, [r4, #4]
 801266c:	b109      	cbz	r1, 8012672 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x54>
 801266e:	4291      	cmp	r1, r2
 8012670:	d900      	bls.n	8012674 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x56>
 8012672:	6222      	str	r2, [r4, #32]
 8012674:	69e0      	ldr	r0, [r4, #28]
 8012676:	6a21      	ldr	r1, [r4, #32]
 8012678:	fbb2 f2f1 	udiv	r2, r2, r1
 801267c:	42b0      	cmp	r0, r6
 801267e:	bf28      	it	cs
 8012680:	4630      	movcs	r0, r6
 8012682:	6262      	str	r2, [r4, #36]	; 0x24
 8012684:	2e01      	cmp	r6, #1
 8012686:	f103 0301 	add.w	r3, r3, #1
 801268a:	fbb2 f2f3 	udiv	r2, r2, r3
 801268e:	f102 0301 	add.w	r3, r2, #1
 8012692:	62a3      	str	r3, [r4, #40]	; 0x28
 8012694:	bf1c      	itt	ne
 8012696:	eb03 0380 	addne.w	r3, r3, r0, lsl #2
 801269a:	1f5a      	subne	r2, r3, #5
 801269c:	61e0      	str	r0, [r4, #28]
 801269e:	60ea      	str	r2, [r5, #12]
 80126a0:	b002      	add	sp, #8
 80126a2:	bd70      	pop	{r4, r5, r6, pc}

080126a4 <PixelDmxConfiguration::Print()>:
 80126a4:	b510      	push	{r4, lr}
 80126a6:	4604      	mov	r4, r0
 80126a8:	f000 f8b8 	bl	801281c <PixelConfiguration::Print()>
 80126ac:	4806      	ldr	r0, [pc, #24]	; (80126c8 <PixelDmxConfiguration::Print()+0x24>)
 80126ae:	f7f7 feff 	bl	800a4b0 <printf>
 80126b2:	69e1      	ldr	r1, [r4, #28]
 80126b4:	4805      	ldr	r0, [pc, #20]	; (80126cc <PixelDmxConfiguration::Print()+0x28>)
 80126b6:	f7f7 fefb 	bl	800a4b0 <printf>
 80126ba:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 80126be:	4804      	ldr	r0, [pc, #16]	; (80126d0 <PixelDmxConfiguration::Print()+0x2c>)
 80126c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126c4:	f7f7 bef4 	b.w	800a4b0 <printf>
 80126c8:	0801c677 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r9, sl, lr, pc}
 80126cc:	0801c690 	stmdaeq	r1, {r4, r7, r9, sl, lr, pc}
 80126d0:	0801c69f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r9, sl, lr, pc}

080126d4 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 80126d4:	23c0      	movs	r3, #192	; 0xc0
 80126d6:	2803      	cmp	r0, #3
 80126d8:	700b      	strb	r3, [r1, #0]
 80126da:	d006      	beq.n	80126ea <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 80126dc:	3808      	subs	r0, #8
 80126de:	2803      	cmp	r0, #3
 80126e0:	bf34      	ite	cc
 80126e2:	23fc      	movcc	r3, #252	; 0xfc
 80126e4:	23f0      	movcs	r3, #240	; 0xf0
 80126e6:	7013      	strb	r3, [r2, #0]
 80126e8:	4770      	bx	lr
 80126ea:	23f8      	movs	r3, #248	; 0xf8
 80126ec:	e7fb      	b.n	80126e6 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

080126f0 <PixelConfiguration::Validate(unsigned int&)>:
 80126f0:	b513      	push	{r0, r1, r4, lr}
 80126f2:	4604      	mov	r4, r0
 80126f4:	6800      	ldr	r0, [r0, #0]
 80126f6:	6863      	ldr	r3, [r4, #4]
 80126f8:	68a2      	ldr	r2, [r4, #8]
 80126fa:	2807      	cmp	r0, #7
 80126fc:	d127      	bne.n	801274e <PixelConfiguration::Validate(unsigned int&)+0x5e>
 80126fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012702:	bf28      	it	cs
 8012704:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012708:	6063      	str	r3, [r4, #4]
 801270a:	2304      	movs	r3, #4
 801270c:	600b      	str	r3, [r1, #0]
 801270e:	2301      	movs	r3, #1
 8012710:	2a06      	cmp	r2, #6
 8012712:	7563      	strb	r3, [r4, #21]
 8012714:	d102      	bne.n	801271c <PixelConfiguration::Validate(unsigned int&)+0x2c>
 8012716:	f000 f94d 	bl	80129b4 <PixelType::GetMap(pixel::Type)>
 801271a:	60a0      	str	r0, [r4, #8]
 801271c:	7c63      	ldrb	r3, [r4, #17]
 801271e:	7c22      	ldrb	r2, [r4, #16]
 8012720:	6820      	ldr	r0, [r4, #0]
 8012722:	429a      	cmp	r2, r3
 8012724:	bf24      	itt	cs
 8012726:	2300      	movcs	r3, #0
 8012728:	8223      	strhcs	r3, [r4, #16]
 801272a:	f10d 0207 	add.w	r2, sp, #7
 801272e:	f10d 0106 	add.w	r1, sp, #6
 8012732:	f7ff ffcf 	bl	80126d4 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 8012736:	7c23      	ldrb	r3, [r4, #16]
 8012738:	b913      	cbnz	r3, 8012740 <PixelConfiguration::Validate(unsigned int&)+0x50>
 801273a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801273e:	7423      	strb	r3, [r4, #16]
 8012740:	7c63      	ldrb	r3, [r4, #17]
 8012742:	b913      	cbnz	r3, 801274a <PixelConfiguration::Validate(unsigned int&)+0x5a>
 8012744:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012748:	7463      	strb	r3, [r4, #17]
 801274a:	4b2a      	ldr	r3, [pc, #168]	; (80127f4 <PixelConfiguration::Validate(unsigned int&)+0x104>)
 801274c:	e01e      	b.n	801278c <PixelConfiguration::Validate(unsigned int&)+0x9c>
 801274e:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8012752:	bf28      	it	cs
 8012754:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 8012758:	6063      	str	r3, [r4, #4]
 801275a:	2303      	movs	r3, #3
 801275c:	600b      	str	r3, [r1, #0]
 801275e:	f1a0 030b 	sub.w	r3, r0, #11
 8012762:	2b01      	cmp	r3, #1
 8012764:	d806      	bhi.n	8012774 <PixelConfiguration::Validate(unsigned int&)+0x84>
 8012766:	7ca3      	ldrb	r3, [r4, #18]
 8012768:	2b1f      	cmp	r3, #31
 801276a:	d83d      	bhi.n	80127e8 <PixelConfiguration::Validate(unsigned int&)+0xf8>
 801276c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8012770:	74a3      	strb	r3, [r4, #18]
 8012772:	e001      	b.n	8012778 <PixelConfiguration::Validate(unsigned int&)+0x88>
 8012774:	2800      	cmp	r0, #0
 8012776:	d139      	bne.n	80127ec <PixelConfiguration::Validate(unsigned int&)+0xfc>
 8012778:	2300      	movs	r3, #0
 801277a:	2a06      	cmp	r2, #6
 801277c:	bf08      	it	eq
 801277e:	60a3      	streq	r3, [r4, #8]
 8012780:	280d      	cmp	r0, #13
 8012782:	7563      	strb	r3, [r4, #21]
 8012784:	68e3      	ldr	r3, [r4, #12]
 8012786:	d119      	bne.n	80127bc <PixelConfiguration::Validate(unsigned int&)+0xcc>
 8012788:	b913      	cbnz	r3, 8012790 <PixelConfiguration::Validate(unsigned int&)+0xa0>
 801278a:	4b1b      	ldr	r3, [pc, #108]	; (80127f8 <PixelConfiguration::Validate(unsigned int&)+0x108>)
 801278c:	60e3      	str	r3, [r4, #12]
 801278e:	e003      	b.n	8012798 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 8012790:	4a1a      	ldr	r2, [pc, #104]	; (80127fc <PixelConfiguration::Validate(unsigned int&)+0x10c>)
 8012792:	4293      	cmp	r3, r2
 8012794:	d900      	bls.n	8012798 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 8012796:	60e2      	str	r2, [r4, #12]
 8012798:	7d23      	ldrb	r3, [r4, #20]
 801279a:	b31b      	cbz	r3, 80127e4 <PixelConfiguration::Validate(unsigned int&)+0xf4>
 801279c:	7ce3      	ldrb	r3, [r4, #19]
 801279e:	b9ab      	cbnz	r3, 80127cc <PixelConfiguration::Validate(unsigned int&)+0xdc>
 80127a0:	6822      	ldr	r2, [r4, #0]
 80127a2:	b17a      	cbz	r2, 80127c4 <PixelConfiguration::Validate(unsigned int&)+0xd4>
 80127a4:	f1a2 030b 	sub.w	r3, r2, #11
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	d90d      	bls.n	80127c8 <PixelConfiguration::Validate(unsigned int&)+0xd8>
 80127ac:	4b14      	ldr	r3, [pc, #80]	; (8012800 <PixelConfiguration::Validate(unsigned int&)+0x110>)
 80127ae:	4915      	ldr	r1, [pc, #84]	; (8012804 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 80127b0:	2a0d      	cmp	r2, #13
 80127b2:	bf08      	it	eq
 80127b4:	460b      	moveq	r3, r1
 80127b6:	61a3      	str	r3, [r4, #24]
 80127b8:	b002      	add	sp, #8
 80127ba:	bd10      	pop	{r4, pc}
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d0e4      	beq.n	801278a <PixelConfiguration::Validate(unsigned int&)+0x9a>
 80127c0:	4a11      	ldr	r2, [pc, #68]	; (8012808 <PixelConfiguration::Validate(unsigned int&)+0x118>)
 80127c2:	e7e6      	b.n	8012792 <PixelConfiguration::Validate(unsigned int&)+0xa2>
 80127c4:	4b11      	ldr	r3, [pc, #68]	; (801280c <PixelConfiguration::Validate(unsigned int&)+0x11c>)
 80127c6:	e7f6      	b.n	80127b6 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 80127c8:	4b11      	ldr	r3, [pc, #68]	; (8012810 <PixelConfiguration::Validate(unsigned int&)+0x120>)
 80127ca:	e7f4      	b.n	80127b6 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 80127cc:	f1a3 0214 	sub.w	r2, r3, #20
 80127d0:	2a05      	cmp	r2, #5
 80127d2:	d807      	bhi.n	80127e4 <PixelConfiguration::Validate(unsigned int&)+0xf4>
 80127d4:	3b15      	subs	r3, #21
 80127d6:	2b04      	cmp	r3, #4
 80127d8:	bf96      	itet	ls
 80127da:	4a0e      	ldrls	r2, [pc, #56]	; (8012814 <PixelConfiguration::Validate(unsigned int&)+0x124>)
 80127dc:	4b0e      	ldrhi	r3, [pc, #56]	; (8012818 <PixelConfiguration::Validate(unsigned int&)+0x128>)
 80127de:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 80127e2:	e7e8      	b.n	80127b6 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 80127e4:	4b07      	ldr	r3, [pc, #28]	; (8012804 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 80127e6:	e7e6      	b.n	80127b6 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 80127e8:	23ff      	movs	r3, #255	; 0xff
 80127ea:	e7c1      	b.n	8012770 <PixelConfiguration::Validate(unsigned int&)+0x80>
 80127ec:	280d      	cmp	r0, #13
 80127ee:	d18e      	bne.n	801270e <PixelConfiguration::Validate(unsigned int&)+0x1e>
 80127f0:	e7c2      	b.n	8012778 <PixelConfiguration::Validate(unsigned int&)+0x88>
 80127f2:	bf00      	nop
 80127f4:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 80127f8:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80127fc:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8012800:	0801ca98 	stmdaeq	r1, {r3, r4, r7, r9, fp, lr, pc}
 8012804:	0801c798 	stmdaeq	r1, {r3, r4, r7, r8, r9, sl, lr, pc}
 8012808:	017d7840 	cmneq	sp, r0, asr #16
 801280c:	0801cd98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, lr, pc}
 8012810:	0801ce98 	stmdaeq	r1, {r3, r4, r7, r9, sl, fp, lr, pc}
 8012814:	0801c784 	stmdaeq	r1, {r2, r7, r8, r9, sl, lr, pc}
 8012818:	0801c898 	stmdaeq	r1, {r3, r4, r7, fp, lr, pc}

0801281c <PixelConfiguration::Print()>:
 801281c:	b513      	push	{r0, r1, r4, lr}
 801281e:	4604      	mov	r4, r0
 8012820:	4827      	ldr	r0, [pc, #156]	; (80128c0 <PixelConfiguration::Print()+0xa4>)
 8012822:	f7f7 fe45 	bl	800a4b0 <printf>
 8012826:	6820      	ldr	r0, [r4, #0]
 8012828:	f000 f860 	bl	80128ec <PixelType::GetType(pixel::Type)>
 801282c:	6822      	ldr	r2, [r4, #0]
 801282e:	4601      	mov	r1, r0
 8012830:	4824      	ldr	r0, [pc, #144]	; (80128c4 <PixelConfiguration::Print()+0xa8>)
 8012832:	f7f7 fe3d 	bl	800a4b0 <printf>
 8012836:	6861      	ldr	r1, [r4, #4]
 8012838:	4823      	ldr	r0, [pc, #140]	; (80128c8 <PixelConfiguration::Print()+0xac>)
 801283a:	f7f7 fe39 	bl	800a4b0 <printf>
 801283e:	7d63      	ldrb	r3, [r4, #21]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d034      	beq.n	80128ae <PixelConfiguration::Print()+0x92>
 8012844:	68a0      	ldr	r0, [r4, #8]
 8012846:	f000 f8a9 	bl	801299c <PixelType::GetMap(pixel::Map)>
 801284a:	68a2      	ldr	r2, [r4, #8]
 801284c:	4601      	mov	r1, r0
 801284e:	481f      	ldr	r0, [pc, #124]	; (80128cc <PixelConfiguration::Print()+0xb0>)
 8012850:	f7f7 fe2e 	bl	800a4b0 <printf>
 8012854:	7c20      	ldrb	r0, [r4, #16]
 8012856:	f000 f8b7 	bl	80129c8 <PixelType::ConvertTxH(unsigned char)>
 801285a:	ee10 0a10 	vmov	r0, s0
 801285e:	f7f6 fb99 	bl	8008f94 <__aeabi_f2d>
 8012862:	460b      	mov	r3, r1
 8012864:	7c21      	ldrb	r1, [r4, #16]
 8012866:	9100      	str	r1, [sp, #0]
 8012868:	4602      	mov	r2, r0
 801286a:	4819      	ldr	r0, [pc, #100]	; (80128d0 <PixelConfiguration::Print()+0xb4>)
 801286c:	f7f7 fe20 	bl	800a4b0 <printf>
 8012870:	7c60      	ldrb	r0, [r4, #17]
 8012872:	f000 f8a9 	bl	80129c8 <PixelType::ConvertTxH(unsigned char)>
 8012876:	ee10 0a10 	vmov	r0, s0
 801287a:	f7f6 fb8b 	bl	8008f94 <__aeabi_f2d>
 801287e:	460b      	mov	r3, r1
 8012880:	7c61      	ldrb	r1, [r4, #17]
 8012882:	9100      	str	r1, [sp, #0]
 8012884:	4602      	mov	r2, r0
 8012886:	4813      	ldr	r0, [pc, #76]	; (80128d4 <PixelConfiguration::Print()+0xb8>)
 8012888:	f7f7 fe12 	bl	800a4b0 <printf>
 801288c:	7d21      	ldrb	r1, [r4, #20]
 801288e:	4a12      	ldr	r2, [pc, #72]	; (80128d8 <PixelConfiguration::Print()+0xbc>)
 8012890:	4b12      	ldr	r3, [pc, #72]	; (80128dc <PixelConfiguration::Print()+0xc0>)
 8012892:	4813      	ldr	r0, [pc, #76]	; (80128e0 <PixelConfiguration::Print()+0xc4>)
 8012894:	2900      	cmp	r1, #0
 8012896:	bf14      	ite	ne
 8012898:	4611      	movne	r1, r2
 801289a:	4619      	moveq	r1, r3
 801289c:	f7f7 fe08 	bl	800a4b0 <printf>
 80128a0:	68e1      	ldr	r1, [r4, #12]
 80128a2:	4810      	ldr	r0, [pc, #64]	; (80128e4 <PixelConfiguration::Print()+0xc8>)
 80128a4:	b002      	add	sp, #8
 80128a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128aa:	f7f7 be01 	b.w	800a4b0 <printf>
 80128ae:	6823      	ldr	r3, [r4, #0]
 80128b0:	3b0b      	subs	r3, #11
 80128b2:	2b01      	cmp	r3, #1
 80128b4:	d8ea      	bhi.n	801288c <PixelConfiguration::Print()+0x70>
 80128b6:	7ca1      	ldrb	r1, [r4, #18]
 80128b8:	480b      	ldr	r0, [pc, #44]	; (80128e8 <PixelConfiguration::Print()+0xcc>)
 80128ba:	f7f7 fdf9 	bl	800a4b0 <printf>
 80128be:	e7e5      	b.n	801288c <PixelConfiguration::Print()+0x70>
 80128c0:	0801c6ca 	stmdaeq	r1, {r1, r3, r6, r7, r9, sl, lr, pc}
 80128c4:	0801c6df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r9, sl, lr, pc}
 80128c8:	0801c6f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, sl, lr, pc}
 80128cc:	0801c702 	stmdaeq	r1, {r1, r8, r9, sl, lr, pc}
 80128d0:	0801c716 	stmdaeq	r1, {r1, r2, r4, r8, r9, sl, lr, pc}
 80128d4:	0801c72e 	stmdaeq	r1, {r1, r2, r3, r5, r8, r9, sl, lr, pc}
 80128d8:	0801c6c3 	stmdaeq	r1, {r0, r1, r6, r7, r9, sl, lr, pc}
 80128dc:	0801c6c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r9, sl, lr, pc}
 80128e0:	0801c75d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, sl, lr, pc}
 80128e4:	0801c773 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, r9, sl, lr, pc}
 80128e8:	0801c746 	stmdaeq	r1, {r1, r2, r6, r8, r9, sl, lr, pc}

080128ec <PixelType::GetType(pixel::Type)>:
 80128ec:	280d      	cmp	r0, #13
 80128ee:	bfda      	itte	le
 80128f0:	4b02      	ldrle	r3, [pc, #8]	; (80128fc <PixelType::GetType(pixel::Type)+0x10>)
 80128f2:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 80128f6:	4802      	ldrgt	r0, [pc, #8]	; (8012900 <PixelType::GetType(pixel::Type)+0x14>)
 80128f8:	4770      	bx	lr
 80128fa:	bf00      	nop
 80128fc:	0801cfcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, sl, fp, lr, pc}
 8012900:	0801cf98 	stmdaeq	r1, {r3, r4, r7, r8, r9, sl, fp, lr, pc}

08012904 <PixelType::GetType(char const*)>:
 8012904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012906:	4c10      	ldr	r4, [pc, #64]	; (8012948 <PixelType::GetType(char const*)+0x44>)
 8012908:	2300      	movs	r3, #0
 801290a:	1e47      	subs	r7, r0, #1
 801290c:	1e66      	subs	r6, r4, #1
 801290e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8012912:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 8012916:	2a19      	cmp	r2, #25
 8012918:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801291c:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
 8012920:	460d      	mov	r5, r1
 8012922:	bf98      	it	ls
 8012924:	f101 0520 	addls.w	r5, r1, #32
 8012928:	f1bc 0f19 	cmp.w	ip, #25
 801292c:	bf98      	it	ls
 801292e:	3220      	addls	r2, #32
 8012930:	42aa      	cmp	r2, r5
 8012932:	d005      	beq.n	8012940 <PixelType::GetType(char const*)+0x3c>
 8012934:	3301      	adds	r3, #1
 8012936:	2b0e      	cmp	r3, #14
 8012938:	f104 0408 	add.w	r4, r4, #8
 801293c:	d1e5      	bne.n	801290a <PixelType::GetType(char const*)+0x6>
 801293e:	e001      	b.n	8012944 <PixelType::GetType(char const*)+0x40>
 8012940:	2900      	cmp	r1, #0
 8012942:	d1e4      	bne.n	801290e <PixelType::GetType(char const*)+0xa>
 8012944:	4618      	mov	r0, r3
 8012946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012948:	0801cfcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, sl, fp, lr, pc}

0801294c <PixelType::GetMap(char const*)>:
 801294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801294e:	4a12      	ldr	r2, [pc, #72]	; (8012998 <PixelType::GetMap(char const*)+0x4c>)
 8012950:	2300      	movs	r3, #0
 8012952:	1e55      	subs	r5, r2, #1
 8012954:	1e46      	subs	r6, r0, #1
 8012956:	f102 0c02 	add.w	ip, r2, #2
 801295a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 801295e:	f1a1 0441 	sub.w	r4, r1, #65	; 0x41
 8012962:	2c19      	cmp	r4, #25
 8012964:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8012968:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801296c:	460f      	mov	r7, r1
 801296e:	bf98      	it	ls
 8012970:	f101 0720 	addls.w	r7, r1, #32
 8012974:	f1be 0f19 	cmp.w	lr, #25
 8012978:	bf98      	it	ls
 801297a:	3420      	addls	r4, #32
 801297c:	42bc      	cmp	r4, r7
 801297e:	d006      	beq.n	801298e <PixelType::GetMap(char const*)+0x42>
 8012980:	3301      	adds	r3, #1
 8012982:	2b06      	cmp	r3, #6
 8012984:	f102 0204 	add.w	r2, r2, #4
 8012988:	d1e3      	bne.n	8012952 <PixelType::GetMap(char const*)+0x6>
 801298a:	4618      	mov	r0, r3
 801298c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801298e:	2900      	cmp	r1, #0
 8012990:	d0fb      	beq.n	801298a <PixelType::GetMap(char const*)+0x3e>
 8012992:	4565      	cmp	r5, ip
 8012994:	d1e1      	bne.n	801295a <PixelType::GetMap(char const*)+0xe>
 8012996:	e7f8      	b.n	801298a <PixelType::GetMap(char const*)+0x3e>
 8012998:	0801cfb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, lr, pc}

0801299c <PixelType::GetMap(pixel::Map)>:
 801299c:	2805      	cmp	r0, #5
 801299e:	bfda      	itte	le
 80129a0:	4b02      	ldrle	r3, [pc, #8]	; (80129ac <PixelType::GetMap(pixel::Map)+0x10>)
 80129a2:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 80129a6:	4802      	ldrgt	r0, [pc, #8]	; (80129b0 <PixelType::GetMap(pixel::Map)+0x14>)
 80129a8:	4770      	bx	lr
 80129aa:	bf00      	nop
 80129ac:	0801cfb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, lr, pc}
 80129b0:	0801cfa0 	stmdaeq	r1, {r5, r7, r8, r9, sl, fp, lr, pc}

080129b4 <PixelType::GetMap(pixel::Type)>:
 80129b4:	3801      	subs	r0, #1
 80129b6:	2809      	cmp	r0, #9
 80129b8:	bf9a      	itte	ls
 80129ba:	4b02      	ldrls	r3, [pc, #8]	; (80129c4 <PixelType::GetMap(pixel::Type)+0x10>)
 80129bc:	5618      	ldrsbls	r0, [r3, r0]
 80129be:	2002      	movhi	r0, #2
 80129c0:	4770      	bx	lr
 80129c2:	bf00      	nop
 80129c4:	0801cfaa 	stmdaeq	r1, {r1, r3, r5, r7, r8, r9, sl, fp, lr, pc}

080129c8 <PixelType::ConvertTxH(unsigned char)>:
 80129c8:	28f0      	cmp	r0, #240	; 0xf0
 80129ca:	d017      	beq.n	80129fc <PixelType::ConvertTxH(unsigned char)+0x34>
 80129cc:	d80c      	bhi.n	80129e8 <PixelType::ConvertTxH(unsigned char)+0x20>
 80129ce:	28c0      	cmp	r0, #192	; 0xc0
 80129d0:	d017      	beq.n	8012a02 <PixelType::ConvertTxH(unsigned char)+0x3a>
 80129d2:	28e0      	cmp	r0, #224	; 0xe0
 80129d4:	d018      	beq.n	8012a08 <PixelType::ConvertTxH(unsigned char)+0x40>
 80129d6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8012a1c <PixelType::ConvertTxH(unsigned char)+0x54>
 80129da:	2880      	cmp	r0, #128	; 0x80
 80129dc:	eef4 7a04 	vmov.f32	s15, #68	; 0x3e200000  0.1562500
 80129e0:	bf08      	it	eq
 80129e2:	eeb0 0a67 	vmoveq.f32	s0, s15
 80129e6:	4770      	bx	lr
 80129e8:	28fc      	cmp	r0, #252	; 0xfc
 80129ea:	d010      	beq.n	8012a0e <PixelType::ConvertTxH(unsigned char)+0x46>
 80129ec:	28fe      	cmp	r0, #254	; 0xfe
 80129ee:	d011      	beq.n	8012a14 <PixelType::ConvertTxH(unsigned char)+0x4c>
 80129f0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8012a1c <PixelType::ConvertTxH(unsigned char)+0x54>
 80129f4:	28f8      	cmp	r0, #248	; 0xf8
 80129f6:	eef6 7a09 	vmov.f32	s15, #105	; 0x3f480000  0.7812500
 80129fa:	e7f1      	b.n	80129e0 <PixelType::ConvertTxH(unsigned char)+0x18>
 80129fc:	eeb6 0a04 	vmov.f32	s0, #100	; 0x3f200000  0.625
 8012a00:	4770      	bx	lr
 8012a02:	eeb5 0a04 	vmov.f32	s0, #84	; 0x3ea00000  0.3125000
 8012a06:	4770      	bx	lr
 8012a08:	eeb5 0a0e 	vmov.f32	s0, #94	; 0x3ef00000  0.4687500
 8012a0c:	4770      	bx	lr
 8012a0e:	eeb6 0a0e 	vmov.f32	s0, #110	; 0x3f700000  0.9375000
 8012a12:	4770      	bx	lr
 8012a14:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8012a20 <PixelType::ConvertTxH(unsigned char)+0x58>
 8012a18:	4770      	bx	lr
 8012a1a:	bf00      	nop
 8012a1c:	00000000 	andeq	r0, r0, r0
 8012a20:	3f8c0000 	svccc	0x008c0000

08012a24 <PixelType::ConvertTxH(float)>:
 8012a24:	eddf 7a24 	vldr	s15, [pc, #144]	; 8012ab8 <PixelType::ConvertTxH(float)+0x94>
 8012a28:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a30:	d433      	bmi.n	8012a9a <PixelType::ConvertTxH(float)+0x76>
 8012a32:	eef4 7a0e 	vmov.f32	s15, #78	; 0x3e700000  0.2343750
 8012a36:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a3e:	d42e      	bmi.n	8012a9e <PixelType::ConvertTxH(float)+0x7a>
 8012a40:	eef5 7a09 	vmov.f32	s15, #89	; 0x3ec80000  0.3906250
 8012a44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4c:	d429      	bmi.n	8012aa2 <PixelType::ConvertTxH(float)+0x7e>
 8012a4e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8012abc <PixelType::ConvertTxH(float)+0x98>
 8012a52:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a5a:	d424      	bmi.n	8012aa6 <PixelType::ConvertTxH(float)+0x82>
 8012a5c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012ac0 <PixelType::ConvertTxH(float)+0x9c>
 8012a60:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a68:	d41f      	bmi.n	8012aaa <PixelType::ConvertTxH(float)+0x86>
 8012a6a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8012ac4 <PixelType::ConvertTxH(float)+0xa0>
 8012a6e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a76:	d41a      	bmi.n	8012aae <PixelType::ConvertTxH(float)+0x8a>
 8012a78:	eddf 7a13 	vldr	s15, [pc, #76]	; 8012ac8 <PixelType::ConvertTxH(float)+0xa4>
 8012a7c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a84:	d415      	bmi.n	8012ab2 <PixelType::ConvertTxH(float)+0x8e>
 8012a86:	eddf 7a11 	vldr	s15, [pc, #68]	; 8012acc <PixelType::ConvertTxH(float)+0xa8>
 8012a8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a92:	bf4c      	ite	mi
 8012a94:	20fe      	movmi	r0, #254	; 0xfe
 8012a96:	2000      	movpl	r0, #0
 8012a98:	4770      	bx	lr
 8012a9a:	2000      	movs	r0, #0
 8012a9c:	4770      	bx	lr
 8012a9e:	2080      	movs	r0, #128	; 0x80
 8012aa0:	4770      	bx	lr
 8012aa2:	20c0      	movs	r0, #192	; 0xc0
 8012aa4:	4770      	bx	lr
 8012aa6:	20e0      	movs	r0, #224	; 0xe0
 8012aa8:	4770      	bx	lr
 8012aaa:	20f0      	movs	r0, #240	; 0xf0
 8012aac:	4770      	bx	lr
 8012aae:	20f8      	movs	r0, #248	; 0xf8
 8012ab0:	4770      	bx	lr
 8012ab2:	20fc      	movs	r0, #252	; 0xfc
 8012ab4:	4770      	bx	lr
 8012ab6:	bf00      	nop
 8012ab8:	3da00000 	stccc	0, cr0, [r0]
 8012abc:	3f0c0000 	svccc	0x000c0000
 8012ac0:	3f340000 	svccc	0x00340000
 8012ac4:	3f5c0000 	svccc	0x005c0000
 8012ac8:	3f820000 	svccc	0x00820000
 8012acc:	3f960000 	svccc	0x00960000

08012ad0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>:
 8012ad0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012ad2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8012ad6:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8012ada:	b2d4      	uxtb	r4, r2
 8012adc:	4a10      	ldr	r2, [pc, #64]	; (8012b20 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x50>)
 8012ade:	4605      	mov	r5, r0
 8012ae0:	6810      	ldr	r0, [r2, #0]
 8012ae2:	6802      	ldr	r2, [r0, #0]
 8012ae4:	2a07      	cmp	r2, #7
 8012ae6:	d007      	beq.n	8012af8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x28>
 8012ae8:	460a      	mov	r2, r1
 8012aea:	e9cd 6400 	strd	r6, r4, [sp]
 8012aee:	4629      	mov	r1, r5
 8012af0:	f000 ff80 	bl	80139f4 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8012af4:	b004      	add	sp, #16
 8012af6:	bd70      	pop	{r4, r5, r6, pc}
 8012af8:	42b3      	cmp	r3, r6
 8012afa:	f04f 0200 	mov.w	r2, #0
 8012afe:	d10a      	bne.n	8012b16 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x46>
 8012b00:	42a3      	cmp	r3, r4
 8012b02:	d108      	bne.n	8012b16 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x46>
 8012b04:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8012b08:	9200      	str	r2, [sp, #0]
 8012b0a:	4613      	mov	r3, r2
 8012b0c:	460a      	mov	r2, r1
 8012b0e:	4629      	mov	r1, r5
 8012b10:	f000 fff2 	bl	8013af8 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012b14:	e7ee      	b.n	8012af4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x24>
 8012b16:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8012b1a:	9600      	str	r6, [sp, #0]
 8012b1c:	e7f6      	b.n	8012b0c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x3c>
 8012b1e:	bf00      	nop
 8012b20:	20001270 	andcs	r1, r0, r0, ror r2

08012b24 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 8012b24:	b570      	push	{r4, r5, r6, lr}
 8012b26:	4d07      	ldr	r5, [pc, #28]	; (8012b44 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x20>)
 8012b28:	4606      	mov	r6, r0
 8012b2a:	2400      	movs	r4, #0
 8012b2c:	682b      	ldr	r3, [r5, #0]
 8012b2e:	429c      	cmp	r4, r3
 8012b30:	d300      	bcc.n	8012b34 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x10>
 8012b32:	bd70      	pop	{r4, r5, r6, pc}
 8012b34:	4621      	mov	r1, r4
 8012b36:	2200      	movs	r2, #0
 8012b38:	4630      	mov	r0, r6
 8012b3a:	f7ff ffc9 	bl	8012ad0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012b3e:	3401      	adds	r4, #1
 8012b40:	e7f4      	b.n	8012b2c <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x8>
 8012b42:	bf00      	nop
 8012b44:	2000126c 	andcs	r1, r0, ip, ror #4

08012b48 <PixelPatterns::PixelPatterns(unsigned int)>:
 8012b48:	4b0c      	ldr	r3, [pc, #48]	; (8012b7c <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 8012b4a:	4a0d      	ldr	r2, [pc, #52]	; (8012b80 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	b510      	push	{r4, lr}
 8012b50:	2910      	cmp	r1, #16
 8012b52:	6013      	str	r3, [r2, #0]
 8012b54:	4a0b      	ldr	r2, [pc, #44]	; (8012b84 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 8012b56:	bf28      	it	cs
 8012b58:	2110      	movcs	r1, #16
 8012b5a:	6011      	str	r1, [r2, #0]
 8012b5c:	685a      	ldr	r2, [r3, #4]
 8012b5e:	4b0a      	ldr	r3, [pc, #40]	; (8012b88 <PixelPatterns::PixelPatterns(unsigned int)+0x40>)
 8012b60:	601a      	str	r2, [r3, #0]
 8012b62:	4b0a      	ldr	r3, [pc, #40]	; (8012b8c <PixelPatterns::PixelPatterns(unsigned int)+0x44>)
 8012b64:	681c      	ldr	r4, [r3, #0]
 8012b66:	4b0a      	ldr	r3, [pc, #40]	; (8012b90 <PixelPatterns::PixelPatterns(unsigned int)+0x48>)
 8012b68:	2210      	movs	r2, #16
 8012b6a:	2100      	movs	r1, #0
 8012b6c:	3a01      	subs	r2, #1
 8012b6e:	61d9      	str	r1, [r3, #28]
 8012b70:	601c      	str	r4, [r3, #0]
 8012b72:	6199      	str	r1, [r3, #24]
 8012b74:	f103 0320 	add.w	r3, r3, #32
 8012b78:	d1f8      	bne.n	8012b6c <PixelPatterns::PixelPatterns(unsigned int)+0x24>
 8012b7a:	bd10      	pop	{r4, pc}
 8012b7c:	20001280 	andcs	r1, r0, r0, lsl #5
 8012b80:	20001270 	andcs	r1, r0, r0, ror r2
 8012b84:	20001264 	andcs	r1, r0, r4, ror #4
 8012b88:	2000126c 	andcs	r1, r0, ip, ror #4
 8012b8c:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 8012b90:	20001064 	andcs	r1, r0, r4, rrx

08012b94 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8012b94:	2805      	cmp	r0, #5
 8012b96:	bfdd      	ittte	le
 8012b98:	4b02      	ldrle	r3, [pc, #8]	; (8012ba4 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8012b9a:	220e      	movle	r2, #14
 8012b9c:	fb02 3000 	mlale	r0, r2, r0, r3
 8012ba0:	4801      	ldrgt	r0, [pc, #4]	; (8012ba8 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 8012ba2:	4770      	bx	lr
 8012ba4:	0801d03c 	stmdaeq	r1, {r2, r3, r4, r5, ip, lr, pc}
 8012ba8:	0801cf98 	stmdaeq	r1, {r3, r4, r7, r8, r9, sl, fp, lr, pc}

08012bac <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 8012bac:	b5e0      	push	{r5, r6, r7, lr}
 8012bae:	4608      	mov	r0, r1
 8012bb0:	460d      	mov	r5, r1
 8012bb2:	4617      	mov	r7, r2
 8012bb4:	461e      	mov	r6, r3
 8012bb6:	f7ff ffb5 	bl	8012b24 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012bba:	4906      	ldr	r1, [pc, #24]	; (8012bd4 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x28>)
 8012bbc:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	61cb      	str	r3, [r1, #28]
 8012bc4:	22ff      	movs	r2, #255	; 0xff
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8012bcc:	604f      	str	r7, [r1, #4]
 8012bce:	618e      	str	r6, [r1, #24]
 8012bd0:	bde0      	pop	{r5, r6, r7, pc}
 8012bd2:	bf00      	nop
 8012bd4:	20001064 	andcs	r1, r0, r4, rrx

08012bd8 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8012bd8:	b5e0      	push	{r5, r6, r7, lr}
 8012bda:	4608      	mov	r0, r1
 8012bdc:	460d      	mov	r5, r1
 8012bde:	461e      	mov	r6, r3
 8012be0:	4617      	mov	r7, r2
 8012be2:	f7ff ff9f 	bl	8012b24 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012be6:	4908      	ldr	r1, [pc, #32]	; (8012c08 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8012be8:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012bec:	2302      	movs	r3, #2
 8012bee:	61cb      	str	r3, [r1, #28]
 8012bf0:	9b04      	ldr	r3, [sp, #16]
 8012bf2:	604b      	str	r3, [r1, #4]
 8012bf4:	4b05      	ldr	r3, [pc, #20]	; (8012c0c <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	610b      	str	r3, [r1, #16]
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	614b      	str	r3, [r1, #20]
 8012bfe:	9b05      	ldr	r3, [sp, #20]
 8012c00:	618b      	str	r3, [r1, #24]
 8012c02:	e9c1 7602 	strd	r7, r6, [r1, #8]
 8012c06:	bde0      	pop	{r5, r6, r7, pc}
 8012c08:	20001064 	andcs	r1, r0, r4, rrx
 8012c0c:	2000126c 	andcs	r1, r0, ip, ror #4

08012c10 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8012c10:	b5e0      	push	{r5, r6, r7, lr}
 8012c12:	4608      	mov	r0, r1
 8012c14:	460d      	mov	r5, r1
 8012c16:	461f      	mov	r7, r3
 8012c18:	4616      	mov	r6, r2
 8012c1a:	f7ff ff83 	bl	8012b24 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012c1e:	4907      	ldr	r1, [pc, #28]	; (8012c3c <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8012c20:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012c24:	2303      	movs	r3, #3
 8012c26:	61cb      	str	r3, [r1, #28]
 8012c28:	4b05      	ldr	r3, [pc, #20]	; (8012c40 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8012c2a:	604f      	str	r7, [r1, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	610b      	str	r3, [r1, #16]
 8012c30:	2300      	movs	r3, #0
 8012c32:	614b      	str	r3, [r1, #20]
 8012c34:	9b04      	ldr	r3, [sp, #16]
 8012c36:	608e      	str	r6, [r1, #8]
 8012c38:	618b      	str	r3, [r1, #24]
 8012c3a:	bde0      	pop	{r5, r6, r7, pc}
 8012c3c:	20001064 	andcs	r1, r0, r4, rrx
 8012c40:	2000126c 	andcs	r1, r0, ip, ror #4

08012c44 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 8012c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c46:	4608      	mov	r0, r1
 8012c48:	460d      	mov	r5, r1
 8012c4a:	461f      	mov	r7, r3
 8012c4c:	4616      	mov	r6, r2
 8012c4e:	4c14      	ldr	r4, [pc, #80]	; (8012ca0 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 8012c50:	f7ff ff68 	bl	8012b24 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012c54:	4913      	ldr	r1, [pc, #76]	; (8012ca4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 8012c56:	6820      	ldr	r0, [r4, #0]
 8012c58:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012c5c:	2304      	movs	r3, #4
 8012c5e:	61cb      	str	r3, [r1, #28]
 8012c60:	1e43      	subs	r3, r0, #1
 8012c62:	005b      	lsls	r3, r3, #1
 8012c64:	b29b      	uxth	r3, r3
 8012c66:	4d10      	ldr	r5, [pc, #64]	; (8012ca8 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x64>)
 8012c68:	610b      	str	r3, [r1, #16]
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	614b      	str	r3, [r1, #20]
 8012c6e:	682b      	ldr	r3, [r5, #0]
 8012c70:	604f      	str	r7, [r1, #4]
 8012c72:	608e      	str	r6, [r1, #8]
 8012c74:	b97b      	cbnz	r3, 8012c96 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 8012c76:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012c7a:	4298      	cmp	r0, r3
 8012c7c:	bf34      	ite	cc
 8012c7e:	0080      	lslcc	r0, r0, #2
 8012c80:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8012c84:	f005 fa56 	bl	8018134 <operator new[](unsigned int)>
 8012c88:	6823      	ldr	r3, [r4, #0]
 8012c8a:	6028      	str	r0, [r5, #0]
 8012c8c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012c90:	2200      	movs	r2, #0
 8012c92:	4298      	cmp	r0, r3
 8012c94:	d100      	bne.n	8012c98 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x54>
 8012c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c98:	f840 2b04 	str.w	r2, [r0], #4
 8012c9c:	e7f9      	b.n	8012c92 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4e>
 8012c9e:	bf00      	nop
 8012ca0:	2000126c 	andcs	r1, r0, ip, ror #4
 8012ca4:	20001064 	andcs	r1, r0, r4, rrx
 8012ca8:	20001268 	andcs	r1, r0, r8, ror #4

08012cac <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8012cac:	b5e0      	push	{r5, r6, r7, lr}
 8012cae:	4608      	mov	r0, r1
 8012cb0:	460d      	mov	r5, r1
 8012cb2:	461e      	mov	r6, r3
 8012cb4:	4617      	mov	r7, r2
 8012cb6:	f7ff ff35 	bl	8012b24 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012cba:	4908      	ldr	r1, [pc, #32]	; (8012cdc <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8012cbc:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012cc0:	2305      	movs	r3, #5
 8012cc2:	61cb      	str	r3, [r1, #28]
 8012cc4:	9b05      	ldr	r3, [sp, #20]
 8012cc6:	604b      	str	r3, [r1, #4]
 8012cc8:	9b04      	ldr	r3, [sp, #16]
 8012cca:	610b      	str	r3, [r1, #16]
 8012ccc:	2300      	movs	r3, #0
 8012cce:	614b      	str	r3, [r1, #20]
 8012cd0:	9b06      	ldr	r3, [sp, #24]
 8012cd2:	618b      	str	r3, [r1, #24]
 8012cd4:	e9c1 7602 	strd	r7, r6, [r1, #8]
 8012cd8:	bde0      	pop	{r5, r6, r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	20001064 	andcs	r1, r0, r4, rrx

08012ce0 <PixelPatterns::Wheel(unsigned char)>:
 8012ce0:	43cb      	mvns	r3, r1
 8012ce2:	b2db      	uxtb	r3, r3
 8012ce4:	2b54      	cmp	r3, #84	; 0x54
 8012ce6:	d809      	bhi.n	8012cfc <PixelPatterns::Wheel(unsigned char)+0x1c>
 8012ce8:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8012cec:	b2db      	uxtb	r3, r3
 8012cee:	1e5a      	subs	r2, r3, #1
 8012cf0:	4258      	negs	r0, r3
 8012cf2:	b2d2      	uxtb	r2, r2
 8012cf4:	b2c0      	uxtb	r0, r0
 8012cf6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8012cfa:	4770      	bx	lr
 8012cfc:	2ba9      	cmp	r3, #169	; 0xa9
 8012cfe:	d809      	bhi.n	8012d14 <PixelPatterns::Wheel(unsigned char)+0x34>
 8012d00:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 8012d04:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012d08:	b2c9      	uxtb	r1, r1
 8012d0a:	43c8      	mvns	r0, r1
 8012d0c:	b2c0      	uxtb	r0, r0
 8012d0e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8012d12:	4770      	bx	lr
 8012d14:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 8012d18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012d1c:	b2c9      	uxtb	r1, r1
 8012d1e:	0208      	lsls	r0, r1, #8
 8012d20:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 8012d24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8012d28:	4770      	bx	lr
	...

08012d2c <PixelPatterns::Increment(unsigned int)>:
 8012d2c:	4a0d      	ldr	r2, [pc, #52]	; (8012d64 <PixelPatterns::Increment(unsigned int)+0x38>)
 8012d2e:	b510      	push	{r4, lr}
 8012d30:	014c      	lsls	r4, r1, #5
 8012d32:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8012d36:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 8012d3a:	b930      	cbnz	r0, 8012d4a <PixelPatterns::Increment(unsigned int)+0x1e>
 8012d3c:	690a      	ldr	r2, [r1, #16]
 8012d3e:	3301      	adds	r3, #1
 8012d40:	4293      	cmp	r3, r2
 8012d42:	bf18      	it	ne
 8012d44:	4618      	movne	r0, r3
 8012d46:	6148      	str	r0, [r1, #20]
 8012d48:	bd10      	pop	{r4, pc}
 8012d4a:	b92b      	cbnz	r3, 8012d58 <PixelPatterns::Increment(unsigned int)+0x2c>
 8012d4c:	4422      	add	r2, r4
 8012d4e:	6913      	ldr	r3, [r2, #16]
 8012d50:	3b01      	subs	r3, #1
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	6153      	str	r3, [r2, #20]
 8012d56:	e7f7      	b.n	8012d48 <PixelPatterns::Increment(unsigned int)+0x1c>
 8012d58:	3b01      	subs	r3, #1
 8012d5a:	614b      	str	r3, [r1, #20]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d1f3      	bne.n	8012d48 <PixelPatterns::Increment(unsigned int)+0x1c>
 8012d60:	e7f4      	b.n	8012d4c <PixelPatterns::Increment(unsigned int)+0x20>
 8012d62:	bf00      	nop
 8012d64:	20001064 	andcs	r1, r0, r4, rrx

08012d68 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 8012d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d6c:	4b12      	ldr	r3, [pc, #72]	; (8012db8 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>)
 8012d6e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8012dbc <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x54>
 8012d72:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012d76:	4605      	mov	r5, r0
 8012d78:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8012d7c:	460c      	mov	r4, r1
 8012d7e:	2700      	movs	r7, #0
 8012d80:	f8d8 3000 	ldr.w	r3, [r8]
 8012d84:	b2be      	uxth	r6, r7
 8012d86:	42b3      	cmp	r3, r6
 8012d88:	f107 0701 	add.w	r7, r7, #1
 8012d8c:	d805      	bhi.n	8012d9a <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 8012d8e:	4621      	mov	r1, r4
 8012d90:	4628      	mov	r0, r5
 8012d92:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d96:	f7ff bfc9 	b.w	8012d2c <PixelPatterns::Increment(unsigned int)>
 8012d9a:	0231      	lsls	r1, r6, #8
 8012d9c:	fbb1 f1f3 	udiv	r1, r1, r3
 8012da0:	4449      	add	r1, r9
 8012da2:	b2c9      	uxtb	r1, r1
 8012da4:	4628      	mov	r0, r5
 8012da6:	f7ff ff9b 	bl	8012ce0 <PixelPatterns::Wheel(unsigned char)>
 8012daa:	4631      	mov	r1, r6
 8012dac:	4602      	mov	r2, r0
 8012dae:	4620      	mov	r0, r4
 8012db0:	f7ff fe8e 	bl	8012ad0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012db4:	e7e4      	b.n	8012d80 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 8012db6:	bf00      	nop
 8012db8:	20001064 	andcs	r1, r0, r4, rrx
 8012dbc:	2000126c 	andcs	r1, r0, ip, ror #4

08012dc0 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 8012dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc4:	4b13      	ldr	r3, [pc, #76]	; (8012e14 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 8012dc6:	4e14      	ldr	r6, [pc, #80]	; (8012e18 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 8012dc8:	f8df a050 	ldr.w	sl, [pc, #80]	; 8012e1c <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 8012dcc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012dd0:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 8012dd4:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8012dd8:	4605      	mov	r5, r0
 8012dda:	460c      	mov	r4, r1
 8012ddc:	f04f 0b00 	mov.w	fp, #0
 8012de0:	6833      	ldr	r3, [r6, #0]
 8012de2:	fa1f f18b 	uxth.w	r1, fp
 8012de6:	428b      	cmp	r3, r1
 8012de8:	d805      	bhi.n	8012df6 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 8012dea:	4621      	mov	r1, r4
 8012dec:	4628      	mov	r0, r5
 8012dee:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012df2:	f7ff bf9b 	b.w	8012d2c <PixelPatterns::Increment(unsigned int)>
 8012df6:	eb09 0301 	add.w	r3, r9, r1
 8012dfa:	fb0a f303 	mul.w	r3, sl, r3
 8012dfe:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8012e02:	bf94      	ite	ls
 8012e04:	463a      	movls	r2, r7
 8012e06:	4642      	movhi	r2, r8
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f7ff fe61 	bl	8012ad0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012e0e:	f10b 0b01 	add.w	fp, fp, #1
 8012e12:	e7e5      	b.n	8012de0 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 8012e14:	20001064 	andcs	r1, r0, r4, rrx
 8012e18:	2000126c 	andcs	r1, r0, ip, ror #4
 8012e1c:	aaaaaaab 	bge	6abd8d0 <__stack_size+0x6ab98d0>

08012e20 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 8012e20:	b538      	push	{r3, r4, r5, lr}
 8012e22:	4b08      	ldr	r3, [pc, #32]	; (8012e44 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x24>)
 8012e24:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012e28:	460c      	mov	r4, r1
 8012e2a:	4605      	mov	r5, r0
 8012e2c:	6959      	ldr	r1, [r3, #20]
 8012e2e:	689a      	ldr	r2, [r3, #8]
 8012e30:	4620      	mov	r0, r4
 8012e32:	f7ff fe4d 	bl	8012ad0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012e36:	4621      	mov	r1, r4
 8012e38:	4628      	mov	r0, r5
 8012e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e3e:	f7ff bf75 	b.w	8012d2c <PixelPatterns::Increment(unsigned int)>
 8012e42:	bf00      	nop
 8012e44:	20001064 	andcs	r1, r0, r4, rrx

08012e48 <PixelPatterns::ScannerUpdate(unsigned int)>:
 8012e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e4c:	4b29      	ldr	r3, [pc, #164]	; (8012ef4 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>)
 8012e4e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8012ef8 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 8012e52:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8012efc <PixelPatterns::ScannerUpdate(unsigned int)+0xb4>
 8012e56:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012e5a:	e9d3 7604 	ldrd	r7, r6, [r3, #16]
 8012e5e:	b085      	sub	sp, #20
 8012e60:	689d      	ldr	r5, [r3, #8]
 8012e62:	00b3      	lsls	r3, r6, #2
 8012e64:	4680      	mov	r8, r0
 8012e66:	9301      	str	r3, [sp, #4]
 8012e68:	4608      	mov	r0, r1
 8012e6a:	f04f 0900 	mov.w	r9, #0
 8012e6e:	1bbf      	subs	r7, r7, r6
 8012e70:	f8da 2000 	ldr.w	r2, [sl]
 8012e74:	fa1f f489 	uxth.w	r4, r9
 8012e78:	42a2      	cmp	r2, r4
 8012e7a:	d806      	bhi.n	8012e8a <PixelPatterns::ScannerUpdate(unsigned int)+0x42>
 8012e7c:	4601      	mov	r1, r0
 8012e7e:	4640      	mov	r0, r8
 8012e80:	b005      	add	sp, #20
 8012e82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e86:	f7ff bf51 	b.w	8012d2c <PixelPatterns::Increment(unsigned int)>
 8012e8a:	42a6      	cmp	r6, r4
 8012e8c:	d10c      	bne.n	8012ea8 <PixelPatterns::ScannerUpdate(unsigned int)+0x60>
 8012e8e:	462a      	mov	r2, r5
 8012e90:	4631      	mov	r1, r6
 8012e92:	9002      	str	r0, [sp, #8]
 8012e94:	f7ff fe1c 	bl	8012ad0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012e98:	f8db 2000 	ldr.w	r2, [fp]
 8012e9c:	9b01      	ldr	r3, [sp, #4]
 8012e9e:	50d5      	str	r5, [r2, r3]
 8012ea0:	9802      	ldr	r0, [sp, #8]
 8012ea2:	f109 0901 	add.w	r9, r9, #1
 8012ea6:	e7e3      	b.n	8012e70 <PixelPatterns::ScannerUpdate(unsigned int)+0x28>
 8012ea8:	42a7      	cmp	r7, r4
 8012eaa:	d109      	bne.n	8012ec0 <PixelPatterns::ScannerUpdate(unsigned int)+0x78>
 8012eac:	462a      	mov	r2, r5
 8012eae:	4639      	mov	r1, r7
 8012eb0:	9002      	str	r0, [sp, #8]
 8012eb2:	f7ff fe0d 	bl	8012ad0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012eb6:	f8db 2000 	ldr.w	r2, [fp]
 8012eba:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8012ebe:	e7ef      	b.n	8012ea0 <PixelPatterns::ScannerUpdate(unsigned int)+0x58>
 8012ec0:	f8db 2000 	ldr.w	r2, [fp]
 8012ec4:	9002      	str	r0, [sp, #8]
 8012ec6:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8012eca:	f3c1 2246 	ubfx	r2, r1, #9, #7
 8012ece:	f3c1 4c46 	ubfx	ip, r1, #17, #7
 8012ed2:	0212      	lsls	r2, r2, #8
 8012ed4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8012ed8:	f3c1 0146 	ubfx	r1, r1, #1, #7
 8012edc:	430a      	orrs	r2, r1
 8012ede:	4621      	mov	r1, r4
 8012ee0:	9203      	str	r2, [sp, #12]
 8012ee2:	f7ff fdf5 	bl	8012ad0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012ee6:	f8db 1000 	ldr.w	r1, [fp]
 8012eea:	9a03      	ldr	r2, [sp, #12]
 8012eec:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8012ef0:	e7d6      	b.n	8012ea0 <PixelPatterns::ScannerUpdate(unsigned int)+0x58>
 8012ef2:	bf00      	nop
 8012ef4:	20001064 	andcs	r1, r0, r4, rrx
 8012ef8:	2000126c 	andcs	r1, r0, ip, ror #4
 8012efc:	20001268 	andcs	r1, r0, r8, ror #4

08012f00 <PixelPatterns::FadeUpdate(unsigned int)>:
 8012f00:	4a20      	ldr	r2, [pc, #128]	; (8012f84 <PixelPatterns::FadeUpdate(unsigned int)+0x84>)
 8012f02:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8012f06:	e9d2 c302 	ldrd	ip, r3, [r2, #8]
 8012f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f0e:	460e      	mov	r6, r1
 8012f10:	e9d2 1704 	ldrd	r1, r7, [r2, #16]
 8012f14:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012f18:	f3cc 2407 	ubfx	r4, ip, #8, #8
 8012f1c:	437a      	muls	r2, r7
 8012f1e:	4605      	mov	r5, r0
 8012f20:	1bc8      	subs	r0, r1, r7
 8012f22:	fb00 2204 	mla	r2, r0, r4, r2
 8012f26:	f3c3 4407 	ubfx	r4, r3, #16, #8
 8012f2a:	f3cc 4e07 	ubfx	lr, ip, #16, #8
 8012f2e:	437c      	muls	r4, r7
 8012f30:	fb00 440e 	mla	r4, r0, lr, r4
 8012f34:	b2db      	uxtb	r3, r3
 8012f36:	fbb2 f2f1 	udiv	r2, r2, r1
 8012f3a:	fbb4 f4f1 	udiv	r4, r4, r1
 8012f3e:	0212      	lsls	r2, r2, #8
 8012f40:	0424      	lsls	r4, r4, #16
 8012f42:	437b      	muls	r3, r7
 8012f44:	b292      	uxth	r2, r2
 8012f46:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8012f4a:	fa5f fc8c 	uxtb.w	ip, ip
 8012f4e:	4314      	orrs	r4, r2
 8012f50:	fb00 330c 	mla	r3, r0, ip, r3
 8012f54:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8012f88 <PixelPatterns::FadeUpdate(unsigned int)+0x88>
 8012f58:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f5c:	b2db      	uxtb	r3, r3
 8012f5e:	431c      	orrs	r4, r3
 8012f60:	2700      	movs	r7, #0
 8012f62:	f8d8 3000 	ldr.w	r3, [r8]
 8012f66:	429f      	cmp	r7, r3
 8012f68:	d305      	bcc.n	8012f76 <PixelPatterns::FadeUpdate(unsigned int)+0x76>
 8012f6a:	4631      	mov	r1, r6
 8012f6c:	4628      	mov	r0, r5
 8012f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f72:	f7ff bedb 	b.w	8012d2c <PixelPatterns::Increment(unsigned int)>
 8012f76:	4639      	mov	r1, r7
 8012f78:	4622      	mov	r2, r4
 8012f7a:	4630      	mov	r0, r6
 8012f7c:	f7ff fda8 	bl	8012ad0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012f80:	3701      	adds	r7, #1
 8012f82:	e7ee      	b.n	8012f62 <PixelPatterns::FadeUpdate(unsigned int)+0x62>
 8012f84:	20001064 	andcs	r1, r0, r4, rrx
 8012f88:	2000126c 	andcs	r1, r0, ip, ror #4

08012f8c <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 8012f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f8e:	4b12      	ldr	r3, [pc, #72]	; (8012fd8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 8012f90:	014e      	lsls	r6, r1, #5
 8012f92:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 8012f96:	599c      	ldr	r4, [r3, r6]
 8012f98:	686f      	ldr	r7, [r5, #4]
 8012f9a:	1b14      	subs	r4, r2, r4
 8012f9c:	42bc      	cmp	r4, r7
 8012f9e:	d319      	bcc.n	8012fd4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8012fa0:	519a      	str	r2, [r3, r6]
 8012fa2:	69eb      	ldr	r3, [r5, #28]
 8012fa4:	3b01      	subs	r3, #1
 8012fa6:	2b04      	cmp	r3, #4
 8012fa8:	d814      	bhi.n	8012fd4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8012faa:	e8df f003 	tbb	[pc, r3]
 8012fae:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 8012fb2:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 8012fb6:	fed8 2001 	cdp2	0, 13, cr2, cr8, cr1, {0}
 8012fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fbc:	f7ff ff00 	bl	8012dc0 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 8012fc0:	e7fa      	b.n	8012fb8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8012fc2:	f7ff ff2d 	bl	8012e20 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 8012fc6:	e7f7      	b.n	8012fb8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8012fc8:	f7ff ff3e 	bl	8012e48 <PixelPatterns::ScannerUpdate(unsigned int)>
 8012fcc:	e7f4      	b.n	8012fb8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8012fce:	f7ff ff97 	bl	8012f00 <PixelPatterns::FadeUpdate(unsigned int)>
 8012fd2:	e7f1      	b.n	8012fb8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8012fd4:	2000      	movs	r0, #0
 8012fd6:	e7f0      	b.n	8012fba <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 8012fd8:	20001064 	andcs	r1, r0, r4, rrx

08012fdc <PixelPatterns::Run()>:
 8012fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fe0:	4f11      	ldr	r7, [pc, #68]	; (8013028 <PixelPatterns::Run()+0x4c>)
 8012fe2:	4606      	mov	r6, r0
 8012fe4:	6838      	ldr	r0, [r7, #0]
 8012fe6:	f000 fc85 	bl	80138f4 <WS28xxMulti::IsUpdating()>
 8012fea:	4604      	mov	r4, r0
 8012fec:	b9c8      	cbnz	r0, 8013022 <PixelPatterns::Run()+0x46>
 8012fee:	4b0f      	ldr	r3, [pc, #60]	; (801302c <PixelPatterns::Run()+0x50>)
 8012ff0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8013030 <PixelPatterns::Run()+0x54>
 8012ff4:	f8d3 9000 	ldr.w	r9, [r3]
 8012ff8:	4605      	mov	r5, r0
 8012ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8012ffe:	b2e9      	uxtb	r1, r5
 8013000:	428b      	cmp	r3, r1
 8013002:	f105 0501 	add.w	r5, r5, #1
 8013006:	d805      	bhi.n	8013014 <PixelPatterns::Run()+0x38>
 8013008:	b15c      	cbz	r4, 8013022 <PixelPatterns::Run()+0x46>
 801300a:	6838      	ldr	r0, [r7, #0]
 801300c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013010:	f000 bb0a 	b.w	8013628 <WS28xxMulti::Update()>
 8013014:	464a      	mov	r2, r9
 8013016:	4630      	mov	r0, r6
 8013018:	f7ff ffb8 	bl	8012f8c <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 801301c:	4320      	orrs	r0, r4
 801301e:	b2c4      	uxtb	r4, r0
 8013020:	e7eb      	b.n	8012ffa <PixelPatterns::Run()+0x1e>
 8013022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013026:	bf00      	nop
 8013028:	20001270 	andcs	r1, r0, r0, ror r2
 801302c:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 8013030:	20001264 	andcs	r1, r0, r4, ror #4

08013034 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>:
 8013034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013036:	4c20      	ldr	r4, [pc, #128]	; (80130b8 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]+0x84>)
 8013038:	f89d e014 	ldrb.w	lr, [sp, #20]
 801303c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8013040:	eb04 1181 	add.w	r1, r4, r1, lsl #6
 8013044:	4c1d      	ldr	r4, [pc, #116]	; (80130bc <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]+0x88>)
 8013046:	b2c0      	uxtb	r0, r0
 8013048:	440c      	add	r4, r1
 801304a:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 801304e:	f100 6008 	add.w	r0, r0, #142606336	; 0x8800000
 8013052:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8013056:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801305a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801305e:	0089      	lsls	r1, r1, #2
 8013060:	2080      	movs	r0, #128	; 0x80
 8013062:	2601      	movs	r6, #1
 8013064:	ea12 0400 	ands.w	r4, r2, r0
 8013068:	bf0b      	itete	eq
 801306a:	f5ac 67c0 	subeq.w	r7, ip, #1536	; 0x600
 801306e:	f5ac 64c0 	subne.w	r4, ip, #1536	; 0x600
 8013072:	603c      	streq	r4, [r7, #0]
 8013074:	6026      	strne	r6, [r4, #0]
 8013076:	ea13 0400 	ands.w	r4, r3, r0
 801307a:	bf0b      	itete	eq
 801307c:	f5ac 6780 	subeq.w	r7, ip, #1024	; 0x400
 8013080:	f5ac 6480 	subne.w	r4, ip, #1024	; 0x400
 8013084:	603c      	streq	r4, [r7, #0]
 8013086:	6026      	strne	r6, [r4, #0]
 8013088:	ea1e 0400 	ands.w	r4, lr, r0
 801308c:	bf15      	itete	ne
 801308e:	f5ac 7400 	subne.w	r4, ip, #512	; 0x200
 8013092:	f5ac 7700 	subeq.w	r7, ip, #512	; 0x200
 8013096:	6026      	strne	r6, [r4, #0]
 8013098:	603c      	streq	r4, [r7, #0]
 801309a:	ea15 0400 	ands.w	r4, r5, r0
 801309e:	bf14      	ite	ne
 80130a0:	f8cc 6000 	strne.w	r6, [ip]
 80130a4:	f8cc 4000 	streq.w	r4, [ip]
 80130a8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80130ac:	4561      	cmp	r1, ip
 80130ae:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80130b2:	d1d7      	bne.n	8013064 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]+0x30>
 80130b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130b6:	bf00      	nop
 80130b8:	20001284 	andcs	r1, r0, r4, lsl #5
 80130bc:	e1100030 	tst	r0, r0, lsr r0

080130c0 <TIMER3_IRQHandler>:
 80130c0:	f3bf 8f5f 	dmb	sy
 80130c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80130c8:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80130cc:	0791      	lsls	r1, r2, #30
 80130ce:	d51e      	bpl.n	801310e <TIMER3_IRQHandler+0x4e>
 80130d0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80130d4:	f021 0101 	bic.w	r1, r1, #1
 80130d8:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
 80130dc:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 80130e0:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80130e4:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 80130e8:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 80130ec:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80130f0:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 80130f4:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 80130f8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80130fc:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 8013100:	4b07      	ldr	r3, [pc, #28]	; (8013120 <TIMER3_IRQHandler+0x60>)
 8013102:	2100      	movs	r1, #0
 8013104:	7019      	strb	r1, [r3, #0]
 8013106:	4b07      	ldr	r3, [pc, #28]	; (8013124 <TIMER3_IRQHandler+0x64>)
 8013108:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801310c:	6299      	str	r1, [r3, #40]	; 0x28
 801310e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013112:	43d2      	mvns	r2, r2
 8013114:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
 8013118:	f3bf 8f5f 	dmb	sy
 801311c:	4770      	bx	lr
 801311e:	bf00      	nop
 8013120:	2000127c 	andcs	r1, r0, ip, ror r2
 8013124:	40021000 	andmi	r1, r2, r0

08013128 <WS28xxMulti::~WS28xxMulti()>:
 8013128:	4b01      	ldr	r3, [pc, #4]	; (8013130 <WS28xxMulti::~WS28xxMulti()+0x8>)
 801312a:	2200      	movs	r2, #0
 801312c:	601a      	str	r2, [r3, #0]
 801312e:	4770      	bx	lr
 8013130:	20001280 	andcs	r1, r0, r0, lsl #5

08013134 <WS28xxMulti::Setup(unsigned char, unsigned char)>:
 8013134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013138:	4680      	mov	r8, r0
 801313a:	b08e      	sub	sp, #56	; 0x38
 801313c:	4608      	mov	r0, r1
 801313e:	4614      	mov	r4, r2
 8013140:	f007 fb2e 	bl	801a7a0 <__popcountsi2>
 8013144:	4607      	mov	r7, r0
 8013146:	4620      	mov	r0, r4
 8013148:	f007 fb2a 	bl	801a7a0 <__popcountsi2>
 801314c:	4c70      	ldr	r4, [pc, #448]	; (8013310 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1dc>)
 801314e:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8013324 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1f0>
 8013152:	4606      	mov	r6, r0
 8013154:	f241 0001 	movw	r0, #4097	; 0x1001
 8013158:	f006 f836 	bl	80191c8 <rcu_periph_clock_enable>
 801315c:	4620      	mov	r0, r4
 801315e:	f006 f8ef 	bl	8019340 <timer_deinit>
 8013162:	2500      	movs	r5, #0
 8013164:	23f9      	movs	r3, #249	; 0xf9
 8013166:	a901      	add	r1, sp, #4
 8013168:	4620      	mov	r0, r4
 801316a:	9303      	str	r3, [sp, #12]
 801316c:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8013170:	f006 f98c 	bl	801948c <timer_init>
 8013174:	4620      	mov	r0, r4
 8013176:	2101      	movs	r1, #1
 8013178:	f006 fb34 	bl	80197e4 <timer_master_slave_mode_config>
 801317c:	4620      	mov	r0, r4
 801317e:	2130      	movs	r1, #48	; 0x30
 8013180:	f006 fb20 	bl	80197c4 <timer_master_output_trigger_source_select>
 8013184:	4629      	mov	r1, r5
 8013186:	4620      	mov	r0, r4
 8013188:	2210      	movs	r2, #16
 801318a:	f006 fab9 	bl	8019700 <timer_channel_output_mode_config>
 801318e:	4620      	mov	r0, r4
 8013190:	2210      	movs	r2, #16
 8013192:	2102      	movs	r1, #2
 8013194:	f006 fab4 	bl	8019700 <timer_channel_output_mode_config>
 8013198:	4620      	mov	r0, r4
 801319a:	2210      	movs	r2, #16
 801319c:	2103      	movs	r1, #3
 801319e:	f006 faaf 	bl	8019700 <timer_channel_output_mode_config>
 80131a2:	f04f 09fa 	mov.w	r9, #250	; 0xfa
 80131a6:	4629      	mov	r1, r5
 80131a8:	4620      	mov	r0, r4
 80131aa:	2201      	movs	r2, #1
 80131ac:	f006 face 	bl	801974c <timer_channel_output_pulse_value_config>
 80131b0:	fb09 f207 	mul.w	r2, r9, r7
 80131b4:	4620      	mov	r0, r4
 80131b6:	08d2      	lsrs	r2, r2, #3
 80131b8:	2102      	movs	r1, #2
 80131ba:	f006 fac7 	bl	801974c <timer_channel_output_pulse_value_config>
 80131be:	fb09 f206 	mul.w	r2, r9, r6
 80131c2:	08d2      	lsrs	r2, r2, #3
 80131c4:	2103      	movs	r1, #3
 80131c6:	4620      	mov	r0, r4
 80131c8:	f006 fac0 	bl	801974c <timer_channel_output_pulse_value_config>
 80131cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80131d0:	f241 0002 	movw	r0, #4098	; 0x1002
 80131d4:	f005 fff8 	bl	80191c8 <rcu_periph_clock_enable>
 80131d8:	4620      	mov	r0, r4
 80131da:	f006 f8b1 	bl	8019340 <timer_deinit>
 80131de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131e2:	a901      	add	r1, sp, #4
 80131e4:	4620      	mov	r0, r4
 80131e6:	9303      	str	r3, [sp, #12]
 80131e8:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80131ec:	f006 f94e 	bl	801948c <timer_init>
 80131f0:	4620      	mov	r0, r4
 80131f2:	2101      	movs	r1, #1
 80131f4:	f006 faf6 	bl	80197e4 <timer_master_slave_mode_config>
 80131f8:	4620      	mov	r0, r4
 80131fa:	2107      	movs	r1, #7
 80131fc:	f006 faea 	bl	80197d4 <timer_slave_mode_select>
 8013200:	4620      	mov	r0, r4
 8013202:	2120      	movs	r1, #32
 8013204:	f006 fad6 	bl	80197b4 <timer_input_trigger_source_select>
 8013208:	4629      	mov	r1, r5
 801320a:	4620      	mov	r0, r4
 801320c:	2210      	movs	r2, #16
 801320e:	f006 fa77 	bl	8019700 <timer_channel_output_mode_config>
 8013212:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8013216:	4629      	mov	r1, r5
 8013218:	3201      	adds	r2, #1
 801321a:	4620      	mov	r0, r4
 801321c:	f006 fa96 	bl	801974c <timer_channel_output_pulse_value_config>
 8013220:	2102      	movs	r1, #2
 8013222:	4620      	mov	r0, r4
 8013224:	f006 f975 	bl	8019512 <timer_interrupt_enable>
 8013228:	4b3a      	ldr	r3, [pc, #232]	; (8013314 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1e0>)
 801322a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801322e:	f504 3416 	add.w	r4, r4, #153600	; 0x25800
 8013232:	f883 531e 	strb.w	r5, [r3, #798]	; 0x31e
 8013236:	f640 4015 	movw	r0, #3093	; 0xc15
 801323a:	601a      	str	r2, [r3, #0]
 801323c:	f005 ffc4 	bl	80191c8 <rcu_periph_clock_enable>
 8013240:	2104      	movs	r1, #4
 8013242:	4620      	mov	r0, r4
 8013244:	f005 fa76 	bl	8018734 <dma_deinit>
 8013248:	a805      	add	r0, sp, #20
 801324a:	f005 fa9e 	bl	801878a <dma_single_data_para_struct_init>
 801324e:	4b32      	ldr	r3, [pc, #200]	; (8013318 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1e4>)
 8013250:	f8cd a01c 	str.w	sl, [sp, #28]
 8013254:	2601      	movs	r6, #1
 8013256:	f04f 0940 	mov.w	r9, #64	; 0x40
 801325a:	f44f 6800 	mov.w	r8, #2048	; 0x800
 801325e:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8013262:	aa05      	add	r2, sp, #20
 8013264:	4620      	mov	r0, r4
 8013266:	2104      	movs	r1, #4
 8013268:	e9cd 3605 	strd	r3, r6, [sp, #20]
 801326c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8013270:	9608      	str	r6, [sp, #32]
 8013272:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8013276:	970d      	str	r7, [sp, #52]	; 0x34
 8013278:	f005 fa93 	bl	80187a2 <dma_single_data_mode_init>
 801327c:	4620      	mov	r0, r4
 801327e:	2104      	movs	r1, #4
 8013280:	f005 face 	bl	8018820 <dma_circulation_disable>
 8013284:	2205      	movs	r2, #5
 8013286:	4620      	mov	r0, r4
 8013288:	2104      	movs	r1, #4
 801328a:	f005 fad1 	bl	8018830 <dma_channel_subperipheral_select>
 801328e:	2107      	movs	r1, #7
 8013290:	4620      	mov	r0, r4
 8013292:	f005 fa4f 	bl	8018734 <dma_deinit>
 8013296:	a805      	add	r0, sp, #20
 8013298:	f005 fa77 	bl	801878a <dma_single_data_para_struct_init>
 801329c:	4b1f      	ldr	r3, [pc, #124]	; (801331c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1e8>)
 801329e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80132a2:	e9cd 3507 	strd	r3, r5, [sp, #28]
 80132a6:	4d1e      	ldr	r5, [pc, #120]	; (8013320 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1ec>)
 80132a8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80132ac:	aa05      	add	r2, sp, #20
 80132ae:	4620      	mov	r0, r4
 80132b0:	2107      	movs	r1, #7
 80132b2:	e9cd 5605 	strd	r5, r6, [sp, #20]
 80132b6:	970d      	str	r7, [sp, #52]	; 0x34
 80132b8:	f005 fa73 	bl	80187a2 <dma_single_data_mode_init>
 80132bc:	4620      	mov	r0, r4
 80132be:	2107      	movs	r1, #7
 80132c0:	f005 faae 	bl	8018820 <dma_circulation_disable>
 80132c4:	2205      	movs	r2, #5
 80132c6:	4620      	mov	r0, r4
 80132c8:	2107      	movs	r1, #7
 80132ca:	f005 fab1 	bl	8018830 <dma_channel_subperipheral_select>
 80132ce:	2102      	movs	r1, #2
 80132d0:	4620      	mov	r0, r4
 80132d2:	f005 fa2f 	bl	8018734 <dma_deinit>
 80132d6:	a805      	add	r0, sp, #20
 80132d8:	f005 fa57 	bl	801878a <dma_single_data_para_struct_init>
 80132dc:	aa05      	add	r2, sp, #20
 80132de:	4620      	mov	r0, r4
 80132e0:	2102      	movs	r1, #2
 80132e2:	e9cd a607 	strd	sl, r6, [sp, #28]
 80132e6:	e9cd 5605 	strd	r5, r6, [sp, #20]
 80132ea:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80132ee:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80132f2:	970d      	str	r7, [sp, #52]	; 0x34
 80132f4:	f005 fa55 	bl	80187a2 <dma_single_data_mode_init>
 80132f8:	4620      	mov	r0, r4
 80132fa:	2102      	movs	r1, #2
 80132fc:	f005 fa90 	bl	8018820 <dma_circulation_disable>
 8013300:	2205      	movs	r2, #5
 8013302:	2102      	movs	r1, #2
 8013304:	4620      	mov	r0, r4
 8013306:	f005 fa93 	bl	8018830 <dma_channel_subperipheral_select>
 801330a:	b00e      	add	sp, #56	; 0x38
 801330c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013310:	40000400 	andmi	r0, r0, r0, lsl #8
 8013314:	e000e100 	and	lr, r0, r0, lsl #2
 8013318:	40021018 	andmi	r1, r2, r8, lsl r0
 801331c:	20001284 	andcs	r1, r0, r4, lsl #5
 8013320:	40021028 	andmi	r1, r2, r8, lsr #32
 8013324:	0801d090 	stmdaeq	r1, {r4, r7, ip, lr, pc}

08013328 <WS28xxMulti::Setup(unsigned int)>:
 8013328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801332c:	4680      	mov	r8, r0
 801332e:	b092      	sub	sp, #72	; 0x48
 8013330:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8013334:	460c      	mov	r4, r1
 8013336:	f005 ff47 	bl	80191c8 <rcu_periph_clock_enable>
 801333a:	4882      	ldr	r0, [pc, #520]	; (8013544 <WS28xxMulti::Setup(unsigned int)+0x21c>)
 801333c:	4d82      	ldr	r5, [pc, #520]	; (8013548 <WS28xxMulti::Setup(unsigned int)+0x220>)
 801333e:	2340      	movs	r3, #64	; 0x40
 8013340:	2200      	movs	r2, #0
 8013342:	2102      	movs	r1, #2
 8013344:	f005 fec4 	bl	80190d0 <gpio_mode_set>
 8013348:	2340      	movs	r3, #64	; 0x40
 801334a:	487e      	ldr	r0, [pc, #504]	; (8013544 <WS28xxMulti::Setup(unsigned int)+0x21c>)
 801334c:	2202      	movs	r2, #2
 801334e:	2100      	movs	r1, #0
 8013350:	f005 fede 	bl	8019110 <gpio_output_options_set>
 8013354:	2240      	movs	r2, #64	; 0x40
 8013356:	2102      	movs	r1, #2
 8013358:	487a      	ldr	r0, [pc, #488]	; (8013544 <WS28xxMulti::Setup(unsigned int)+0x21c>)
 801335a:	f005 fef4 	bl	8019146 <gpio_af_set>
 801335e:	fbb5 f5f4 	udiv	r5, r5, r4
 8013362:	f241 0001 	movw	r0, #4097	; 0x1001
 8013366:	2d0c      	cmp	r5, #12
 8013368:	bf38      	it	cc
 801336a:	250c      	movcc	r5, #12
 801336c:	f005 ff2c 	bl	80191c8 <rcu_periph_clock_enable>
 8013370:	4876      	ldr	r0, [pc, #472]	; (801354c <WS28xxMulti::Setup(unsigned int)+0x224>)
 8013372:	2400      	movs	r4, #0
 8013374:	f005 ffe4 	bl	8019340 <timer_deinit>
 8013378:	1e6b      	subs	r3, r5, #1
 801337a:	4874      	ldr	r0, [pc, #464]	; (801354c <WS28xxMulti::Setup(unsigned int)+0x224>)
 801337c:	9307      	str	r3, [sp, #28]
 801337e:	a905      	add	r1, sp, #20
 8013380:	2602      	movs	r6, #2
 8013382:	2701      	movs	r7, #1
 8013384:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8013388:	f88d 4020 	strb.w	r4, [sp, #32]
 801338c:	f006 f87e 	bl	801948c <timer_init>
 8013390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013394:	486d      	ldr	r0, [pc, #436]	; (801354c <WS28xxMulti::Setup(unsigned int)+0x224>)
 8013396:	9304      	str	r3, [sp, #16]
 8013398:	aa02      	add	r2, sp, #8
 801339a:	4621      	mov	r1, r4
 801339c:	e9cd 7602 	strd	r7, r6, [sp, #8]
 80133a0:	f006 f8c6 	bl	8019530 <timer_channel_output_config>
 80133a4:	fa25 f207 	lsr.w	r2, r5, r7
 80133a8:	4868      	ldr	r0, [pc, #416]	; (801354c <WS28xxMulti::Setup(unsigned int)+0x224>)
 80133aa:	3a01      	subs	r2, #1
 80133ac:	4621      	mov	r1, r4
 80133ae:	f006 f9cd 	bl	801974c <timer_channel_output_pulse_value_config>
 80133b2:	4866      	ldr	r0, [pc, #408]	; (801354c <WS28xxMulti::Setup(unsigned int)+0x224>)
 80133b4:	2260      	movs	r2, #96	; 0x60
 80133b6:	4621      	mov	r1, r4
 80133b8:	f006 f9a2 	bl	8019700 <timer_channel_output_mode_config>
 80133bc:	4863      	ldr	r0, [pc, #396]	; (801354c <WS28xxMulti::Setup(unsigned int)+0x224>)
 80133be:	4622      	mov	r2, r4
 80133c0:	4621      	mov	r1, r4
 80133c2:	f006 f9d1 	bl	8019768 <timer_channel_output_shadow_config>
 80133c6:	4861      	ldr	r0, [pc, #388]	; (801354c <WS28xxMulti::Setup(unsigned int)+0x224>)
 80133c8:	2210      	movs	r2, #16
 80133ca:	4631      	mov	r1, r6
 80133cc:	f006 f998 	bl	8019700 <timer_channel_output_mode_config>
 80133d0:	485e      	ldr	r0, [pc, #376]	; (801354c <WS28xxMulti::Setup(unsigned int)+0x224>)
 80133d2:	2210      	movs	r2, #16
 80133d4:	2103      	movs	r1, #3
 80133d6:	f006 f993 	bl	8019700 <timer_channel_output_mode_config>
 80133da:	485c      	ldr	r0, [pc, #368]	; (801354c <WS28xxMulti::Setup(unsigned int)+0x224>)
 80133dc:	463a      	mov	r2, r7
 80133de:	4631      	mov	r1, r6
 80133e0:	f006 f9b4 	bl	801974c <timer_channel_output_pulse_value_config>
 80133e4:	fa25 f206 	lsr.w	r2, r5, r6
 80133e8:	3a01      	subs	r2, #1
 80133ea:	4858      	ldr	r0, [pc, #352]	; (801354c <WS28xxMulti::Setup(unsigned int)+0x224>)
 80133ec:	2103      	movs	r1, #3
 80133ee:	f006 f9ad 	bl	801974c <timer_channel_output_pulse_value_config>
 80133f2:	4856      	ldr	r0, [pc, #344]	; (801354c <WS28xxMulti::Setup(unsigned int)+0x224>)
 80133f4:	4639      	mov	r1, r7
 80133f6:	f006 f9f5 	bl	80197e4 <timer_master_slave_mode_config>
 80133fa:	2130      	movs	r1, #48	; 0x30
 80133fc:	4853      	ldr	r0, [pc, #332]	; (801354c <WS28xxMulti::Setup(unsigned int)+0x224>)
 80133fe:	f006 f9e1 	bl	80197c4 <timer_master_output_trigger_source_select>
 8013402:	f241 0002 	movw	r0, #4098	; 0x1002
 8013406:	f005 fedf 	bl	80191c8 <rcu_periph_clock_enable>
 801340a:	4851      	ldr	r0, [pc, #324]	; (8013550 <WS28xxMulti::Setup(unsigned int)+0x228>)
 801340c:	f005 ff98 	bl	8019340 <timer_deinit>
 8013410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013414:	484e      	ldr	r0, [pc, #312]	; (8013550 <WS28xxMulti::Setup(unsigned int)+0x228>)
 8013416:	9307      	str	r3, [sp, #28]
 8013418:	a905      	add	r1, sp, #20
 801341a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801341e:	f006 f835 	bl	801948c <timer_init>
 8013422:	484b      	ldr	r0, [pc, #300]	; (8013550 <WS28xxMulti::Setup(unsigned int)+0x228>)
 8013424:	4639      	mov	r1, r7
 8013426:	f006 f9dd 	bl	80197e4 <timer_master_slave_mode_config>
 801342a:	4849      	ldr	r0, [pc, #292]	; (8013550 <WS28xxMulti::Setup(unsigned int)+0x228>)
 801342c:	2107      	movs	r1, #7
 801342e:	f006 f9d1 	bl	80197d4 <timer_slave_mode_select>
 8013432:	4847      	ldr	r0, [pc, #284]	; (8013550 <WS28xxMulti::Setup(unsigned int)+0x228>)
 8013434:	2120      	movs	r1, #32
 8013436:	f006 f9bd 	bl	80197b4 <timer_input_trigger_source_select>
 801343a:	4845      	ldr	r0, [pc, #276]	; (8013550 <WS28xxMulti::Setup(unsigned int)+0x228>)
 801343c:	2210      	movs	r2, #16
 801343e:	4621      	mov	r1, r4
 8013440:	f006 f95e 	bl	8019700 <timer_channel_output_mode_config>
 8013444:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8013448:	4841      	ldr	r0, [pc, #260]	; (8013550 <WS28xxMulti::Setup(unsigned int)+0x228>)
 801344a:	4621      	mov	r1, r4
 801344c:	f006 f97e 	bl	801974c <timer_channel_output_pulse_value_config>
 8013450:	4631      	mov	r1, r6
 8013452:	483f      	ldr	r0, [pc, #252]	; (8013550 <WS28xxMulti::Setup(unsigned int)+0x228>)
 8013454:	f006 f85d 	bl	8019512 <timer_interrupt_enable>
 8013458:	4b3e      	ldr	r3, [pc, #248]	; (8013554 <WS28xxMulti::Setup(unsigned int)+0x22c>)
 801345a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801345e:	f883 431e 	strb.w	r4, [r3, #798]	; 0x31e
 8013462:	f640 4015 	movw	r0, #3093	; 0xc15
 8013466:	601a      	str	r2, [r3, #0]
 8013468:	f005 feae 	bl	80191c8 <rcu_periph_clock_enable>
 801346c:	2107      	movs	r1, #7
 801346e:	483a      	ldr	r0, [pc, #232]	; (8013558 <WS28xxMulti::Setup(unsigned int)+0x230>)
 8013470:	f005 f960 	bl	8018734 <dma_deinit>
 8013474:	a809      	add	r0, sp, #36	; 0x24
 8013476:	f005 f988 	bl	801878a <dma_single_data_para_struct_init>
 801347a:	4b38      	ldr	r3, [pc, #224]	; (801355c <WS28xxMulti::Setup(unsigned int)+0x234>)
 801347c:	4836      	ldr	r0, [pc, #216]	; (8013558 <WS28xxMulti::Setup(unsigned int)+0x230>)
 801347e:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
 8013482:	4b37      	ldr	r3, [pc, #220]	; (8013560 <WS28xxMulti::Setup(unsigned int)+0x238>)
 8013484:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8013488:	aa09      	add	r2, sp, #36	; 0x24
 801348a:	f04f 0a40 	mov.w	sl, #64	; 0x40
 801348e:	f44f 6900 	mov.w	r9, #2048	; 0x800
 8013492:	2107      	movs	r1, #7
 8013494:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
 8013498:	9511      	str	r5, [sp, #68]	; 0x44
 801349a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801349e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80134a2:	f005 f97e 	bl	80187a2 <dma_single_data_mode_init>
 80134a6:	482c      	ldr	r0, [pc, #176]	; (8013558 <WS28xxMulti::Setup(unsigned int)+0x230>)
 80134a8:	2107      	movs	r1, #7
 80134aa:	f005 f9b9 	bl	8018820 <dma_circulation_disable>
 80134ae:	2205      	movs	r2, #5
 80134b0:	4829      	ldr	r0, [pc, #164]	; (8013558 <WS28xxMulti::Setup(unsigned int)+0x230>)
 80134b2:	2107      	movs	r1, #7
 80134b4:	f005 f9bc 	bl	8018830 <dma_channel_subperipheral_select>
 80134b8:	4631      	mov	r1, r6
 80134ba:	4827      	ldr	r0, [pc, #156]	; (8013558 <WS28xxMulti::Setup(unsigned int)+0x230>)
 80134bc:	f005 f93a 	bl	8018734 <dma_deinit>
 80134c0:	a809      	add	r0, sp, #36	; 0x24
 80134c2:	f005 f962 	bl	801878a <dma_single_data_para_struct_init>
 80134c6:	4b27      	ldr	r3, [pc, #156]	; (8013564 <WS28xxMulti::Setup(unsigned int)+0x23c>)
 80134c8:	4823      	ldr	r0, [pc, #140]	; (8013558 <WS28xxMulti::Setup(unsigned int)+0x230>)
 80134ca:	9511      	str	r5, [sp, #68]	; 0x44
 80134cc:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
 80134d0:	4b25      	ldr	r3, [pc, #148]	; (8013568 <WS28xxMulti::Setup(unsigned int)+0x240>)
 80134d2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80134d6:	aa09      	add	r2, sp, #36	; 0x24
 80134d8:	4631      	mov	r1, r6
 80134da:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
 80134de:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80134e2:	f005 f95e 	bl	80187a2 <dma_single_data_mode_init>
 80134e6:	481c      	ldr	r0, [pc, #112]	; (8013558 <WS28xxMulti::Setup(unsigned int)+0x230>)
 80134e8:	4631      	mov	r1, r6
 80134ea:	f005 f999 	bl	8018820 <dma_circulation_disable>
 80134ee:	481a      	ldr	r0, [pc, #104]	; (8013558 <WS28xxMulti::Setup(unsigned int)+0x230>)
 80134f0:	2205      	movs	r2, #5
 80134f2:	4631      	mov	r1, r6
 80134f4:	f005 f99c 	bl	8018830 <dma_channel_subperipheral_select>
 80134f8:	f8d8 5000 	ldr.w	r5, [r8]
 80134fc:	3d0b      	subs	r5, #11
 80134fe:	42b5      	cmp	r5, r6
 8013500:	d81c      	bhi.n	801353c <WS28xxMulti::Setup(unsigned int)+0x214>
 8013502:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8013506:	4627      	mov	r7, r4
 8013508:	3601      	adds	r6, #1
 801350a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 801350e:	2300      	movs	r3, #0
 8013510:	461a      	mov	r2, r3
 8013512:	4619      	mov	r1, r3
 8013514:	4620      	mov	r0, r4
 8013516:	e9cd 7700 	strd	r7, r7, [sp]
 801351a:	f7ff fd8b 	bl	8013034 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 801351e:	2d02      	cmp	r5, #2
 8013520:	bf1b      	ittet	ne
 8013522:	23ff      	movne	r3, #255	; 0xff
 8013524:	e9cd 8800 	strdne	r8, r8, [sp]
 8013528:	e9cd 7700 	strdeq	r7, r7, [sp]
 801352c:	461a      	movne	r2, r3
 801352e:	4620      	mov	r0, r4
 8013530:	4631      	mov	r1, r6
 8013532:	3401      	adds	r4, #1
 8013534:	f7ff fd7e 	bl	8013034 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013538:	2c10      	cmp	r4, #16
 801353a:	d1e8      	bne.n	801350e <WS28xxMulti::Setup(unsigned int)+0x1e6>
 801353c:	b012      	add	sp, #72	; 0x48
 801353e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013542:	bf00      	nop
 8013544:	40020000 	andmi	r0, r2, r0
 8013548:	0bebc200 	bleq	7b03d50 <__stack_size+0x7affd50>
 801354c:	40000400 	andmi	r0, r0, r0, lsl #8
 8013550:	40000800 	andmi	r0, r0, r0, lsl #16
 8013554:	e000e100 	and	lr, r0, r0, lsl #2
 8013558:	40026000 	andmi	r6, r2, r0
 801355c:	0801d090 	stmdaeq	r1, {r4, r7, ip, lr, pc}
 8013560:	40021028 	andmi	r1, r2, r8, lsr #32
 8013564:	20001284 	andcs	r1, r0, r4, lsl #5
 8013568:	40021018 	andmi	r1, r2, r8, lsl r0

0801356c <WS28xxMulti::WS28xxMulti(PixelConfiguration&)>:
 801356c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801356e:	460f      	mov	r7, r1
 8013570:	4604      	mov	r4, r0
 8013572:	460d      	mov	r5, r1
 8013574:	4606      	mov	r6, r0
 8013576:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013578:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801357a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801357e:	2300      	movs	r3, #0
 8013580:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8013584:	61e3      	str	r3, [r4, #28]
 8013586:	4b26      	ldr	r3, [pc, #152]	; (8013620 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0xb4>)
 8013588:	a901      	add	r1, sp, #4
 801358a:	4628      	mov	r0, r5
 801358c:	601c      	str	r4, [r3, #0]
 801358e:	f7ff f8af 	bl	80126f0 <PixelConfiguration::Validate(unsigned int&)>
 8013592:	6826      	ldr	r6, [r4, #0]
 8013594:	3e0b      	subs	r6, #11
 8013596:	2e02      	cmp	r6, #2
 8013598:	d80a      	bhi.n	80135b0 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x44>
 801359a:	686b      	ldr	r3, [r5, #4]
 801359c:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80135a0:	d906      	bls.n	80135b0 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x44>
 80135a2:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80135a6:	606b      	str	r3, [r5, #4]
 80135a8:	a901      	add	r1, sp, #4
 80135aa:	4628      	mov	r0, r5
 80135ac:	f7ff f8a0 	bl	80126f0 <PixelConfiguration::Validate(unsigned int&)>
 80135b0:	6863      	ldr	r3, [r4, #4]
 80135b2:	9a01      	ldr	r2, [sp, #4]
 80135b4:	2e02      	cmp	r6, #2
 80135b6:	fb03 f202 	mul.w	r2, r3, r2
 80135ba:	bf9b      	ittet	ls
 80135bc:	3308      	addls	r3, #8
 80135be:	189b      	addls	r3, r3, r2
 80135c0:	61e2      	strhi	r2, [r4, #28]
 80135c2:	61e3      	strls	r3, [r4, #28]
 80135c4:	69e3      	ldr	r3, [r4, #28]
 80135c6:	4e17      	ldr	r6, [pc, #92]	; (8013624 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0xb8>)
 80135c8:	00db      	lsls	r3, r3, #3
 80135ca:	61e3      	str	r3, [r4, #28]
 80135cc:	f640 4004 	movw	r0, #3076	; 0xc04
 80135d0:	f005 fdfa 	bl	80191c8 <rcu_periph_clock_enable>
 80135d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135d8:	2100      	movs	r1, #0
 80135da:	4630      	mov	r0, r6
 80135dc:	f005 fdb3 	bl	8019146 <gpio_af_set>
 80135e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135e4:	2202      	movs	r2, #2
 80135e6:	2101      	movs	r1, #1
 80135e8:	4630      	mov	r0, r6
 80135ea:	f005 fd71 	bl	80190d0 <gpio_mode_set>
 80135ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135f2:	2202      	movs	r2, #2
 80135f4:	2100      	movs	r1, #0
 80135f6:	4630      	mov	r0, r6
 80135f8:	f005 fd8a 	bl	8019110 <gpio_output_options_set>
 80135fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013600:	62b3      	str	r3, [r6, #40]	; 0x28
 8013602:	7d6b      	ldrb	r3, [r5, #21]
 8013604:	b13b      	cbz	r3, 8013616 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0xaa>
 8013606:	7c6a      	ldrb	r2, [r5, #17]
 8013608:	7c29      	ldrb	r1, [r5, #16]
 801360a:	4620      	mov	r0, r4
 801360c:	f7ff fd92 	bl	8013134 <WS28xxMulti::Setup(unsigned char, unsigned char)>
 8013610:	4620      	mov	r0, r4
 8013612:	b003      	add	sp, #12
 8013614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013616:	68e9      	ldr	r1, [r5, #12]
 8013618:	4620      	mov	r0, r4
 801361a:	f7ff fe85 	bl	8013328 <WS28xxMulti::Setup(unsigned int)>
 801361e:	e7f7      	b.n	8013610 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0xa4>
 8013620:	20001280 	andcs	r1, r0, r0, lsl #5
 8013624:	40021000 	andmi	r1, r2, r0

08013628 <WS28xxMulti::Update()>:
 8013628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801362a:	4b4c      	ldr	r3, [pc, #304]	; (801375c <WS28xxMulti::Update()+0x134>)
 801362c:	4e4c      	ldr	r6, [pc, #304]	; (8013760 <WS28xxMulti::Update()+0x138>)
 801362e:	4c4d      	ldr	r4, [pc, #308]	; (8013764 <WS28xxMulti::Update()+0x13c>)
 8013630:	4f4d      	ldr	r7, [pc, #308]	; (8013768 <WS28xxMulti::Update()+0x140>)
 8013632:	2201      	movs	r2, #1
 8013634:	701a      	strb	r2, [r3, #0]
 8013636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801363a:	2100      	movs	r1, #0
 801363c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8013640:	f022 0201 	bic.w	r2, r2, #1
 8013644:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8013648:	f8c3 1824 	str.w	r1, [r3, #2084]	; 0x824
 801364c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8013650:	f022 0201 	bic.w	r2, r2, #1
 8013654:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8013658:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
 801365c:	7d43      	ldrb	r3, [r0, #21]
 801365e:	4605      	mov	r5, r0
 8013660:	2b00      	cmp	r3, #0
 8013662:	d053      	beq.n	801370c <WS28xxMulti::Update()+0xe4>
 8013664:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013666:	f023 0301 	bic.w	r3, r3, #1
 801366a:	6723      	str	r3, [r4, #112]	; 0x70
 801366c:	2220      	movs	r2, #32
 801366e:	2104      	movs	r1, #4
 8013670:	4620      	mov	r0, r4
 8013672:	f005 f901 	bl	8018878 <dma_interrupt_flag_clear>
 8013676:	67e6      	str	r6, [r4, #124]	; 0x7c
 8013678:	8bab      	ldrh	r3, [r5, #28]
 801367a:	6763      	str	r3, [r4, #116]	; 0x74
 801367c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801367e:	f043 0301 	orr.w	r3, r3, #1
 8013682:	6723      	str	r3, [r4, #112]	; 0x70
 8013684:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8013688:	f023 0301 	bic.w	r3, r3, #1
 801368c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8013690:	2220      	movs	r2, #32
 8013692:	2107      	movs	r1, #7
 8013694:	4620      	mov	r0, r4
 8013696:	f005 f8ef 	bl	8018878 <dma_interrupt_flag_clear>
 801369a:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
 801369e:	8bab      	ldrh	r3, [r5, #28]
 80136a0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80136a4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80136a8:	f043 0301 	orr.w	r3, r3, #1
 80136ac:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80136b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80136b2:	f023 0301 	bic.w	r3, r3, #1
 80136b6:	6423      	str	r3, [r4, #64]	; 0x40
 80136b8:	2102      	movs	r1, #2
 80136ba:	4620      	mov	r0, r4
 80136bc:	2220      	movs	r2, #32
 80136be:	f005 f8db 	bl	8018878 <dma_interrupt_flag_clear>
 80136c2:	64e6      	str	r6, [r4, #76]	; 0x4c
 80136c4:	8bab      	ldrh	r3, [r5, #28]
 80136c6:	6463      	str	r3, [r4, #68]	; 0x44
 80136c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80136ca:	4828      	ldr	r0, [pc, #160]	; (801376c <WS28xxMulti::Update()+0x144>)
 80136cc:	f043 0301 	orr.w	r3, r3, #1
 80136d0:	6423      	str	r3, [r4, #64]	; 0x40
 80136d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80136d6:	f005 ff26 	bl	8019526 <timer_dma_enable>
 80136da:	4824      	ldr	r0, [pc, #144]	; (801376c <WS28xxMulti::Update()+0x144>)
 80136dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80136e0:	f005 ff21 	bl	8019526 <timer_dma_enable>
 80136e4:	4821      	ldr	r0, [pc, #132]	; (801376c <WS28xxMulti::Update()+0x144>)
 80136e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80136ea:	f005 ff1c 	bl	8019526 <timer_dma_enable>
 80136ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80136f2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80136f6:	f042 0201 	orr.w	r2, r2, #1
 80136fa:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 80136fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8013702:	f042 0201 	orr.w	r2, r2, #1
 8013706:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 801370a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801370c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8013710:	f023 0301 	bic.w	r3, r3, #1
 8013714:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8013718:	2220      	movs	r2, #32
 801371a:	2107      	movs	r1, #7
 801371c:	4620      	mov	r0, r4
 801371e:	f005 f8ab 	bl	8018878 <dma_interrupt_flag_clear>
 8013722:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
 8013726:	8bab      	ldrh	r3, [r5, #28]
 8013728:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 801372c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8013730:	f043 0301 	orr.w	r3, r3, #1
 8013734:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8013738:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801373a:	f023 0301 	bic.w	r3, r3, #1
 801373e:	6423      	str	r3, [r4, #64]	; 0x40
 8013740:	2220      	movs	r2, #32
 8013742:	2102      	movs	r1, #2
 8013744:	4620      	mov	r0, r4
 8013746:	f005 f897 	bl	8018878 <dma_interrupt_flag_clear>
 801374a:	64e7      	str	r7, [r4, #76]	; 0x4c
 801374c:	8bab      	ldrh	r3, [r5, #28]
 801374e:	6463      	str	r3, [r4, #68]	; 0x44
 8013750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013752:	f043 0301 	orr.w	r3, r3, #1
 8013756:	6423      	str	r3, [r4, #64]	; 0x40
 8013758:	e7bf      	b.n	80136da <WS28xxMulti::Update()+0xb2>
 801375a:	bf00      	nop
 801375c:	2000127c 	andcs	r1, r0, ip, ror r2
 8013760:	0801d090 	stmdaeq	r1, {r4, r7, ip, lr, pc}
 8013764:	40026000 	andmi	r6, r2, r0
 8013768:	20001284 	andcs	r1, r0, r4, lsl #5
 801376c:	40000400 	andmi	r0, r0, r0, lsl #8

08013770 <WS28xxMulti::Blackout()>:
 8013770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013774:	4f2d      	ldr	r7, [pc, #180]	; (801382c <WS28xxMulti::Blackout()+0xbc>)
 8013776:	4605      	mov	r5, r0
 8013778:	f3bf 8f5f 	dmb	sy
 801377c:	783a      	ldrb	r2, [r7, #0]
 801377e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8013782:	2a00      	cmp	r2, #0
 8013784:	d1f8      	bne.n	8013778 <WS28xxMulti::Blackout()+0x8>
 8013786:	7d6c      	ldrb	r4, [r5, #21]
 8013788:	b19c      	cbz	r4, 80137b2 <WS28xxMulti::Blackout()+0x42>
 801378a:	4a29      	ldr	r2, [pc, #164]	; (8013830 <WS28xxMulti::Blackout()+0xc0>)
 801378c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013790:	3301      	adds	r3, #1
 8013792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013796:	f842 1b04 	str.w	r1, [r2], #4
 801379a:	d1f9      	bne.n	8013790 <WS28xxMulti::Blackout()+0x20>
 801379c:	4628      	mov	r0, r5
 801379e:	f7ff ff43 	bl	8013628 <WS28xxMulti::Update()>
 80137a2:	f3bf 8f5f 	dmb	sy
 80137a6:	783b      	ldrb	r3, [r7, #0]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d1fa      	bne.n	80137a2 <WS28xxMulti::Blackout()+0x32>
 80137ac:	b003      	add	sp, #12
 80137ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b2:	682b      	ldr	r3, [r5, #0]
 80137b4:	f1a3 080b 	sub.w	r8, r3, #11
 80137b8:	f1b8 0f02 	cmp.w	r8, #2
 80137bc:	d908      	bls.n	80137d0 <WS28xxMulti::Blackout()+0x60>
 80137be:	4b1c      	ldr	r3, [pc, #112]	; (8013830 <WS28xxMulti::Blackout()+0xc0>)
 80137c0:	4622      	mov	r2, r4
 80137c2:	3401      	adds	r4, #1
 80137c4:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80137c8:	f843 2b04 	str.w	r2, [r3], #4
 80137cc:	d1f9      	bne.n	80137c2 <WS28xxMulti::Blackout()+0x52>
 80137ce:	e7e5      	b.n	801379c <WS28xxMulti::Blackout()+0x2c>
 80137d0:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80137d4:	4626      	mov	r6, r4
 80137d6:	f10a 0b01 	add.w	fp, sl, #1
 80137da:	2300      	movs	r3, #0
 80137dc:	e9cd 6600 	strd	r6, r6, [sp]
 80137e0:	461a      	mov	r2, r3
 80137e2:	4619      	mov	r1, r3
 80137e4:	4620      	mov	r0, r4
 80137e6:	f7ff fc25 	bl	8013034 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 80137ea:	f04f 0901 	mov.w	r9, #1
 80137ee:	45ca      	cmp	sl, r9
 80137f0:	d211      	bcs.n	8013816 <WS28xxMulti::Blackout()+0xa6>
 80137f2:	f1b8 0f02 	cmp.w	r8, #2
 80137f6:	bf15      	itete	ne
 80137f8:	23ff      	movne	r3, #255	; 0xff
 80137fa:	2300      	moveq	r3, #0
 80137fc:	e9cd 3300 	strdne	r3, r3, [sp]
 8013800:	e9cd 6600 	strdeq	r6, r6, [sp]
 8013804:	4620      	mov	r0, r4
 8013806:	461a      	mov	r2, r3
 8013808:	4659      	mov	r1, fp
 801380a:	3401      	adds	r4, #1
 801380c:	f7ff fc12 	bl	8013034 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013810:	2c10      	cmp	r4, #16
 8013812:	d1e2      	bne.n	80137da <WS28xxMulti::Blackout()+0x6a>
 8013814:	e7c2      	b.n	801379c <WS28xxMulti::Blackout()+0x2c>
 8013816:	4649      	mov	r1, r9
 8013818:	e9cd 6600 	strd	r6, r6, [sp]
 801381c:	2300      	movs	r3, #0
 801381e:	22e0      	movs	r2, #224	; 0xe0
 8013820:	4620      	mov	r0, r4
 8013822:	f7ff fc07 	bl	8013034 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013826:	f109 0901 	add.w	r9, r9, #1
 801382a:	e7e0      	b.n	80137ee <WS28xxMulti::Blackout()+0x7e>
 801382c:	2000127c 	andcs	r1, r0, ip, ror r2
 8013830:	20001284 	andcs	r1, r0, r4, lsl #5

08013834 <WS28xxMulti::FullOn()>:
 8013834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013838:	4f2c      	ldr	r7, [pc, #176]	; (80138ec <WS28xxMulti::FullOn()+0xb8>)
 801383a:	4605      	mov	r5, r0
 801383c:	f3bf 8f5f 	dmb	sy
 8013840:	783a      	ldrb	r2, [r7, #0]
 8013842:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8013846:	2a00      	cmp	r2, #0
 8013848:	d1f8      	bne.n	801383c <WS28xxMulti::FullOn()+0x8>
 801384a:	7d6c      	ldrb	r4, [r5, #21]
 801384c:	b194      	cbz	r4, 8013874 <WS28xxMulti::FullOn()+0x40>
 801384e:	4a28      	ldr	r2, [pc, #160]	; (80138f0 <WS28xxMulti::FullOn()+0xbc>)
 8013850:	4619      	mov	r1, r3
 8013852:	3301      	adds	r3, #1
 8013854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013858:	f842 1b04 	str.w	r1, [r2], #4
 801385c:	d1f9      	bne.n	8013852 <WS28xxMulti::FullOn()+0x1e>
 801385e:	4628      	mov	r0, r5
 8013860:	f7ff fee2 	bl	8013628 <WS28xxMulti::Update()>
 8013864:	f3bf 8f5f 	dmb	sy
 8013868:	783b      	ldrb	r3, [r7, #0]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d1fa      	bne.n	8013864 <WS28xxMulti::FullOn()+0x30>
 801386e:	b003      	add	sp, #12
 8013870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013874:	682e      	ldr	r6, [r5, #0]
 8013876:	3e0b      	subs	r6, #11
 8013878:	2e02      	cmp	r6, #2
 801387a:	d908      	bls.n	801388e <WS28xxMulti::FullOn()+0x5a>
 801387c:	4b1c      	ldr	r3, [pc, #112]	; (80138f0 <WS28xxMulti::FullOn()+0xbc>)
 801387e:	22ff      	movs	r2, #255	; 0xff
 8013880:	3401      	adds	r4, #1
 8013882:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8013886:	f843 2b04 	str.w	r2, [r3], #4
 801388a:	d1f9      	bne.n	8013880 <WS28xxMulti::FullOn()+0x4c>
 801388c:	e7e7      	b.n	801385e <WS28xxMulti::FullOn()+0x2a>
 801388e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8013892:	46a0      	mov	r8, r4
 8013894:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8013898:	2300      	movs	r3, #0
 801389a:	e9cd 8800 	strd	r8, r8, [sp]
 801389e:	461a      	mov	r2, r3
 80138a0:	4619      	mov	r1, r3
 80138a2:	4620      	mov	r0, r4
 80138a4:	f7ff fbc6 	bl	8013034 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 80138a8:	f04f 0b01 	mov.w	fp, #1
 80138ac:	45da      	cmp	sl, fp
 80138ae:	d211      	bcs.n	80138d4 <WS28xxMulti::FullOn()+0xa0>
 80138b0:	2e02      	cmp	r6, #2
 80138b2:	bf15      	itete	ne
 80138b4:	23ff      	movne	r3, #255	; 0xff
 80138b6:	2300      	moveq	r3, #0
 80138b8:	e9cd 9900 	strdne	r9, r9, [sp]
 80138bc:	e9cd 8800 	strdeq	r8, r8, [sp]
 80138c0:	4620      	mov	r0, r4
 80138c2:	f10a 0101 	add.w	r1, sl, #1
 80138c6:	461a      	mov	r2, r3
 80138c8:	3401      	adds	r4, #1
 80138ca:	f7ff fbb3 	bl	8013034 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 80138ce:	2c10      	cmp	r4, #16
 80138d0:	d1e2      	bne.n	8013898 <WS28xxMulti::FullOn()+0x64>
 80138d2:	e7c4      	b.n	801385e <WS28xxMulti::FullOn()+0x2a>
 80138d4:	4659      	mov	r1, fp
 80138d6:	e9cd 9900 	strd	r9, r9, [sp]
 80138da:	23ff      	movs	r3, #255	; 0xff
 80138dc:	22e0      	movs	r2, #224	; 0xe0
 80138de:	4620      	mov	r0, r4
 80138e0:	f7ff fba8 	bl	8013034 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 80138e4:	f10b 0b01 	add.w	fp, fp, #1
 80138e8:	e7e0      	b.n	80138ac <WS28xxMulti::FullOn()+0x78>
 80138ea:	bf00      	nop
 80138ec:	2000127c 	andcs	r1, r0, ip, ror r2
 80138f0:	20001284 	andcs	r1, r0, r4, lsl #5

080138f4 <WS28xxMulti::IsUpdating()>:
 80138f4:	f3bf 8f5f 	dmb	sy
 80138f8:	4b01      	ldr	r3, [pc, #4]	; (8013900 <WS28xxMulti::IsUpdating()+0xc>)
 80138fa:	7818      	ldrb	r0, [r3, #0]
 80138fc:	4770      	bx	lr
 80138fe:	bf00      	nop
 8013900:	2000127c 	andcs	r1, r0, ip, ror r2

08013904 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 8013904:	b2c8      	uxtb	r0, r1
 8013906:	491c      	ldr	r1, [pc, #112]	; (8013978 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x74>)
 8013908:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801390c:	b570      	push	{r4, r5, r6, lr}
 801390e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8013912:	4a1a      	ldr	r2, [pc, #104]	; (801397c <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x78>)
 8013914:	f89d e010 	ldrb.w	lr, [sp, #16]
 8013918:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801391c:	440a      	add	r2, r1
 801391e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8013922:	f100 6008 	add.w	r0, r0, #142606336	; 0x8800000
 8013926:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 801392a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801392e:	0092      	lsls	r2, r2, #2
 8013930:	0080      	lsls	r0, r0, #2
 8013932:	2180      	movs	r1, #128	; 0x80
 8013934:	2400      	movs	r4, #0
 8013936:	2501      	movs	r5, #1
 8013938:	420b      	tst	r3, r1
 801393a:	f5a2 6c80 	sub.w	ip, r2, #1024	; 0x400
 801393e:	bf16      	itet	ne
 8013940:	f5a2 6c80 	subne.w	ip, r2, #1024	; 0x400
 8013944:	f8cc 5000 	streq.w	r5, [ip]
 8013948:	f8cc 4000 	strne.w	r4, [ip]
 801394c:	ea1e 0f01 	tst.w	lr, r1
 8013950:	f5a2 7c00 	sub.w	ip, r2, #512	; 0x200
 8013954:	bf16      	itet	ne
 8013956:	f5a2 7c00 	subne.w	ip, r2, #512	; 0x200
 801395a:	f8cc 5000 	streq.w	r5, [ip]
 801395e:	f8cc 4000 	strne.w	r4, [ip]
 8013962:	420e      	tst	r6, r1
 8013964:	bf0c      	ite	eq
 8013966:	6015      	streq	r5, [r2, #0]
 8013968:	6014      	strne	r4, [r2, #0]
 801396a:	3240      	adds	r2, #64	; 0x40
 801396c:	4290      	cmp	r0, r2
 801396e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013972:	d1e1      	bne.n	8013938 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x34>
 8013974:	bd70      	pop	{r4, r5, r6, pc}
 8013976:	bf00      	nop
 8013978:	20001284 	andcs	r1, r0, r4, lsl #5
 801397c:	e1100020 	tst	r0, r0, lsr #32

08013980 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 8013980:	b2c8      	uxtb	r0, r1
 8013982:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8013986:	4a19      	ldr	r2, [pc, #100]	; (80139ec <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x6c>)
 8013988:	b570      	push	{r4, r5, r6, lr}
 801398a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801398e:	4918      	ldr	r1, [pc, #96]	; (80139f0 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x70>)
 8013990:	f89d c010 	ldrb.w	ip, [sp, #16]
 8013994:	f89d e014 	ldrb.w	lr, [sp, #20]
 8013998:	4411      	add	r1, r2
 801399a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801399e:	f100 6008 	add.w	r0, r0, #142606336	; 0x8800000
 80139a2:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 80139a6:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 80139aa:	0089      	lsls	r1, r1, #2
 80139ac:	0080      	lsls	r0, r0, #2
 80139ae:	2280      	movs	r2, #128	; 0x80
 80139b0:	2401      	movs	r4, #1
 80139b2:	ea13 0502 	ands.w	r5, r3, r2
 80139b6:	f5a1 6680 	sub.w	r6, r1, #1024	; 0x400
 80139ba:	bf0a      	itet	eq
 80139bc:	f5a1 6680 	subeq.w	r6, r1, #1024	; 0x400
 80139c0:	6034      	strne	r4, [r6, #0]
 80139c2:	6035      	streq	r5, [r6, #0]
 80139c4:	ea1c 0502 	ands.w	r5, ip, r2
 80139c8:	f5a1 7600 	sub.w	r6, r1, #512	; 0x200
 80139cc:	bf0a      	itet	eq
 80139ce:	f5a1 7600 	subeq.w	r6, r1, #512	; 0x200
 80139d2:	6034      	strne	r4, [r6, #0]
 80139d4:	6035      	streq	r5, [r6, #0]
 80139d6:	ea1e 0502 	ands.w	r5, lr, r2
 80139da:	bf14      	ite	ne
 80139dc:	600c      	strne	r4, [r1, #0]
 80139de:	600d      	streq	r5, [r1, #0]
 80139e0:	3140      	adds	r1, #64	; 0x40
 80139e2:	4288      	cmp	r0, r1
 80139e4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80139e8:	d1e3      	bne.n	80139b2 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x32>
 80139ea:	bd70      	pop	{r4, r5, r6, pc}
 80139ec:	20001284 	andcs	r1, r0, r4, lsl #5
 80139f0:	e1100020 	tst	r0, r0, lsr #32

080139f4 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 80139f4:	b530      	push	{r4, r5, lr}
 80139f6:	6984      	ldr	r4, [r0, #24]
 80139f8:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80139fc:	468c      	mov	ip, r1
 80139fe:	4611      	mov	r1, r2
 8013a00:	5ce2      	ldrb	r2, [r4, r3]
 8013a02:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013a06:	5d65      	ldrb	r5, [r4, r5]
 8013a08:	5ce3      	ldrb	r3, [r4, r3]
 8013a0a:	7d44      	ldrb	r4, [r0, #21]
 8013a0c:	bb1c      	cbnz	r4, 8013a56 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x62>
 8013a0e:	6804      	ldr	r4, [r0, #0]
 8013a10:	b1cc      	cbz	r4, 8013a46 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x52>
 8013a12:	3c0b      	subs	r4, #11
 8013a14:	2c01      	cmp	r4, #1
 8013a16:	9204      	str	r2, [sp, #16]
 8013a18:	d94a      	bls.n	8013ab0 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xbc>
 8013a1a:	ea6f 0493 	mvn.w	r4, r3, lsr #2
 8013a1e:	9503      	str	r5, [sp, #12]
 8013a20:	f004 0430 	and.w	r4, r4, #48	; 0x30
 8013a24:	f082 02c0 	eor.w	r2, r2, #192	; 0xc0
 8013a28:	ea6f 1515 	mvn.w	r5, r5, lsr #4
 8013a2c:	f005 050c 	and.w	r5, r5, #12
 8013a30:	ea44 1292 	orr.w	r2, r4, r2, lsr #6
 8013a34:	432a      	orrs	r2, r5
 8013a36:	3101      	adds	r1, #1
 8013a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a3c:	4660      	mov	r0, ip
 8013a3e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8013a42:	f7ff baf7 	b.w	8013034 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013a46:	6884      	ldr	r4, [r0, #8]
 8013a48:	2c05      	cmp	r4, #5
 8013a4a:	d854      	bhi.n	8013af6 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x102>
 8013a4c:	e8df f004 	tbb	[pc, r4]
 8013a50:	4c484440 	cfstrdmi	mvd4, [r8], {64}	; 0x40
 8013a54:	68843850 	stmvs	r4, {r4, r6, fp, ip, sp}
 8013a58:	2c05      	cmp	r4, #5
 8013a5a:	d826      	bhi.n	8013aaa <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xb6>
 8013a5c:	e8df f004 	tbb	[pc, r4]
 8013a60:	0b141821 	bleq	8519aec <__exidx_end+0x4fbce8>
 8013a64:	e9cd2503 	stmib	sp, {r0, r1, r8, sl, sp}^
 8013a68:	2503      	movs	r5, #3
 8013a6a:	460a      	mov	r2, r1
 8013a6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a70:	4661      	mov	r1, ip
 8013a72:	f7ff bf47 	b.w	8013904 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8013a76:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013a7a:	462b      	mov	r3, r5
 8013a7c:	460a      	mov	r2, r1
 8013a7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a82:	4661      	mov	r1, ip
 8013a84:	f7ff bf3e 	b.w	8013904 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8013a88:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8013a8c:	462b      	mov	r3, r5
 8013a8e:	e7f5      	b.n	8013a7c <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x88>
 8013a90:	e9cd 3503 	strd	r3, r5, [sp, #12]
 8013a94:	4613      	mov	r3, r2
 8013a96:	460a      	mov	r2, r1
 8013a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a9c:	4661      	mov	r1, ip
 8013a9e:	f7ff bf31 	b.w	8013904 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8013aa2:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8013aa6:	4613      	mov	r3, r2
 8013aa8:	e7f5      	b.n	8013a96 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xa2>
 8013aaa:	e9cd 5203 	strd	r5, r2, [sp, #12]
 8013aae:	e7dc      	b.n	8013a6a <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x76>
 8013ab0:	7c82      	ldrb	r2, [r0, #18]
 8013ab2:	9503      	str	r5, [sp, #12]
 8013ab4:	3101      	adds	r1, #1
 8013ab6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013aba:	4660      	mov	r0, ip
 8013abc:	f7ff baba 	b.w	8013034 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013ac0:	e9cd 5203 	strd	r5, r2, [sp, #12]
 8013ac4:	460a      	mov	r2, r1
 8013ac6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013aca:	4661      	mov	r1, ip
 8013acc:	f7ff bf58 	b.w	8013980 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8013ad0:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8013ad4:	4613      	mov	r3, r2
 8013ad6:	e7f5      	b.n	8013ac4 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013ad8:	e9cd 3503 	strd	r3, r5, [sp, #12]
 8013adc:	4613      	mov	r3, r2
 8013ade:	e7f1      	b.n	8013ac4 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013ae0:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8013ae4:	462b      	mov	r3, r5
 8013ae6:	e7ed      	b.n	8013ac4 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013ae8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013aec:	462b      	mov	r3, r5
 8013aee:	e7e9      	b.n	8013ac4 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013af0:	e9cd 2503 	strd	r2, r5, [sp, #12]
 8013af4:	e7e6      	b.n	8013ac4 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013af6:	bf00      	nop

08013af8 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 8013af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013afa:	6980      	ldr	r0, [r0, #24]
 8013afc:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8013b00:	f810 c003 	ldrb.w	ip, [r0, r3]
 8013b04:	4b1c      	ldr	r3, [pc, #112]	; (8013b78 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x80>)
 8013b06:	f810 e004 	ldrb.w	lr, [r0, r4]
 8013b0a:	eb03 1282 	add.w	r2, r3, r2, lsl #6
 8013b0e:	4b1b      	ldr	r3, [pc, #108]	; (8013b7c <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x84>)
 8013b10:	b2c9      	uxtb	r1, r1
 8013b12:	4413      	add	r3, r2
 8013b14:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8013b18:	f101 6108 	add.w	r1, r1, #142606336	; 0x8800000
 8013b1c:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8013b20:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013b24:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013b28:	5c45      	ldrb	r5, [r0, r1]
 8013b2a:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8013b2e:	009b      	lsls	r3, r3, #2
 8013b30:	5c46      	ldrb	r6, [r0, r1]
 8013b32:	0092      	lsls	r2, r2, #2
 8013b34:	2180      	movs	r1, #128	; 0x80
 8013b36:	2000      	movs	r0, #0
 8013b38:	2401      	movs	r4, #1
 8013b3a:	f5a3 67c0 	sub.w	r7, r3, #1536	; 0x600
 8013b3e:	ea1e 0f01 	tst.w	lr, r1
 8013b42:	bf0c      	ite	eq
 8013b44:	603c      	streq	r4, [r7, #0]
 8013b46:	6038      	strne	r0, [r7, #0]
 8013b48:	f5a3 6780 	sub.w	r7, r3, #1024	; 0x400
 8013b4c:	ea1c 0f01 	tst.w	ip, r1
 8013b50:	bf0c      	ite	eq
 8013b52:	603c      	streq	r4, [r7, #0]
 8013b54:	6038      	strne	r0, [r7, #0]
 8013b56:	f5a3 7700 	sub.w	r7, r3, #512	; 0x200
 8013b5a:	420d      	tst	r5, r1
 8013b5c:	bf0c      	ite	eq
 8013b5e:	603c      	streq	r4, [r7, #0]
 8013b60:	6038      	strne	r0, [r7, #0]
 8013b62:	420e      	tst	r6, r1
 8013b64:	bf0c      	ite	eq
 8013b66:	601c      	streq	r4, [r3, #0]
 8013b68:	6018      	strne	r0, [r3, #0]
 8013b6a:	3340      	adds	r3, #64	; 0x40
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013b72:	d1e2      	bne.n	8013b3a <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
 8013b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b76:	bf00      	nop
 8013b78:	20001284 	andcs	r1, r0, r4, lsl #5
 8013b7c:	e1100030 	tst	r0, r0, lsr r0

08013b80 <net_set_ip>:
 8013b80:	b510      	push	{r4, lr}
 8013b82:	4c05      	ldr	r4, [pc, #20]	; (8013b98 <net_set_ip+0x18>)
 8013b84:	6020      	str	r0, [r4, #0]
 8013b86:	4621      	mov	r1, r4
 8013b88:	4804      	ldr	r0, [pc, #16]	; (8013b9c <net_set_ip+0x1c>)
 8013b8a:	f7f4 fbc5 	bl	8008318 <arp_init>
 8013b8e:	4620      	mov	r0, r4
 8013b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b94:	f002 b8a6 	b.w	8015ce4 <ip_set_ip>
 8013b98:	20009284 	andcs	r9, r0, r4, lsl #5
 8013b9c:	20009290 	mulcs	r0, r0, r2

08013ba0 <net_set_gw>:
 8013ba0:	4b02      	ldr	r3, [pc, #8]	; (8013bac <net_set_gw+0xc>)
 8013ba2:	6098      	str	r0, [r3, #8]
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f002 b89d 	b.w	8015ce4 <ip_set_ip>
 8013baa:	bf00      	nop
 8013bac:	20009284 	andcs	r9, r0, r4, lsl #5

08013bb0 <net_set_dhcp>:
 8013bb0:	b570      	push	{r4, r5, r6, lr}
 8013bb2:	2400      	movs	r4, #0
 8013bb4:	7014      	strb	r4, [r2, #0]
 8013bb6:	4605      	mov	r5, r0
 8013bb8:	4616      	mov	r6, r2
 8013bba:	4810      	ldr	r0, [pc, #64]	; (8013bfc <net_set_dhcp+0x4c>)
 8013bbc:	460a      	mov	r2, r1
 8013bbe:	4910      	ldr	r1, [pc, #64]	; (8013c00 <net_set_dhcp+0x50>)
 8013bc0:	f001 fe76 	bl	80158b0 <dhcp_client>
 8013bc4:	42a0      	cmp	r0, r4
 8013bc6:	da17      	bge.n	8013bf8 <net_set_dhcp+0x48>
 8013bc8:	480d      	ldr	r0, [pc, #52]	; (8013c00 <net_set_dhcp+0x50>)
 8013bca:	f000 f859 	bl	8013c80 <rfc3927>
 8013bce:	7030      	strb	r0, [r6, #0]
 8013bd0:	490b      	ldr	r1, [pc, #44]	; (8013c00 <net_set_dhcp+0x50>)
 8013bd2:	480a      	ldr	r0, [pc, #40]	; (8013bfc <net_set_dhcp+0x4c>)
 8013bd4:	f7f4 fba0 	bl	8008318 <arp_init>
 8013bd8:	4809      	ldr	r0, [pc, #36]	; (8013c00 <net_set_dhcp+0x50>)
 8013bda:	f002 f883 	bl	8015ce4 <ip_set_ip>
 8013bde:	4a08      	ldr	r2, [pc, #32]	; (8013c00 <net_set_dhcp+0x50>)
 8013be0:	1e6b      	subs	r3, r5, #1
 8013be2:	350b      	adds	r5, #11
 8013be4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013be8:	f803 1f01 	strb.w	r1, [r3, #1]!
 8013bec:	42ab      	cmp	r3, r5
 8013bee:	d1f9      	bne.n	8013be4 <net_set_dhcp+0x34>
 8013bf0:	4b04      	ldr	r3, [pc, #16]	; (8013c04 <net_set_dhcp+0x54>)
 8013bf2:	4620      	mov	r0, r4
 8013bf4:	701c      	strb	r4, [r3, #0]
 8013bf6:	bd70      	pop	{r4, r5, r6, pc}
 8013bf8:	2401      	movs	r4, #1
 8013bfa:	e7e9      	b.n	8013bd0 <net_set_dhcp+0x20>
 8013bfc:	20009290 	mulcs	r0, r0, r2
 8013c00:	20009284 	andcs	r9, r0, r4, lsl #5
 8013c04:	20009296 	mulcs	r0, r6, r2

08013c08 <net_dhcp_release>:
 8013c08:	b508      	push	{r3, lr}
 8013c0a:	f001 ff59 	bl	8015ac0 <dhcp_client_release>
 8013c0e:	4b02      	ldr	r3, [pc, #8]	; (8013c18 <net_dhcp_release+0x10>)
 8013c10:	2200      	movs	r2, #0
 8013c12:	701a      	strb	r2, [r3, #0]
 8013c14:	bd08      	pop	{r3, pc}
 8013c16:	bf00      	nop
 8013c18:	20009296 	mulcs	r0, r6, r2

08013c1c <net_set_zeroconf>:
 8013c1c:	b538      	push	{r3, r4, r5, lr}
 8013c1e:	4604      	mov	r4, r0
 8013c20:	480c      	ldr	r0, [pc, #48]	; (8013c54 <net_set_zeroconf+0x38>)
 8013c22:	f000 f82d 	bl	8013c80 <rfc3927>
 8013c26:	4605      	mov	r5, r0
 8013c28:	b190      	cbz	r0, 8013c50 <net_set_zeroconf+0x34>
 8013c2a:	490a      	ldr	r1, [pc, #40]	; (8013c54 <net_set_zeroconf+0x38>)
 8013c2c:	480a      	ldr	r0, [pc, #40]	; (8013c58 <net_set_zeroconf+0x3c>)
 8013c2e:	f7f4 fb73 	bl	8008318 <arp_init>
 8013c32:	4808      	ldr	r0, [pc, #32]	; (8013c54 <net_set_zeroconf+0x38>)
 8013c34:	f002 f856 	bl	8015ce4 <ip_set_ip>
 8013c38:	4a06      	ldr	r2, [pc, #24]	; (8013c54 <net_set_zeroconf+0x38>)
 8013c3a:	1e63      	subs	r3, r4, #1
 8013c3c:	340b      	adds	r4, #11
 8013c3e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013c42:	f803 1f01 	strb.w	r1, [r3, #1]!
 8013c46:	42a3      	cmp	r3, r4
 8013c48:	d1f9      	bne.n	8013c3e <net_set_zeroconf+0x22>
 8013c4a:	4b04      	ldr	r3, [pc, #16]	; (8013c5c <net_set_zeroconf+0x40>)
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	701a      	strb	r2, [r3, #0]
 8013c50:	4628      	mov	r0, r5
 8013c52:	bd38      	pop	{r3, r4, r5, pc}
 8013c54:	20009284 	andcs	r9, r0, r4, lsl #5
 8013c58:	20009290 	mulcs	r0, r0, r2
 8013c5c:	20009296 	mulcs	r0, r6, r2

08013c60 <net_timers_run>:
 8013c60:	4b05      	ldr	r3, [pc, #20]	; (8013c78 <net_timers_run+0x18>)
 8013c62:	4a06      	ldr	r2, [pc, #24]	; (8013c7c <net_timers_run+0x1c>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	6811      	ldr	r1, [r2, #0]
 8013c68:	4299      	cmp	r1, r3
 8013c6a:	d803      	bhi.n	8013c74 <net_timers_run+0x14>
 8013c6c:	3364      	adds	r3, #100	; 0x64
 8013c6e:	6013      	str	r3, [r2, #0]
 8013c70:	f001 bfb2 	b.w	8015bd8 <igmp_timer>
 8013c74:	4770      	bx	lr
 8013c76:	bf00      	nop
 8013c78:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 8013c7c:	2000929c 	mulcs	r0, ip, r2

08013c80 <rfc3927>:
 8013c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c84:	4b19      	ldr	r3, [pc, #100]	; (8013cec <rfc3927+0x6c>)
 8013c86:	4f1a      	ldr	r7, [pc, #104]	; (8013cf0 <rfc3927+0x70>)
 8013c88:	791a      	ldrb	r2, [r3, #4]
 8013c8a:	78dc      	ldrb	r4, [r3, #3]
 8013c8c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8013cf4 <rfc3927+0x74>
 8013c90:	f8d7 9000 	ldr.w	r9, [r7]
 8013c94:	f8df b060 	ldr.w	fp, [pc, #96]	; 8013cf8 <rfc3927+0x78>
 8013c98:	f8df a060 	ldr.w	sl, [pc, #96]	; 8013cfc <rfc3927+0x7c>
 8013c9c:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8013ca0:	4606      	mov	r6, r0
 8013ca2:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8013ca6:	25ff      	movs	r5, #255	; 0xff
 8013ca8:	4659      	mov	r1, fp
 8013caa:	4620      	mov	r0, r4
 8013cac:	f001 fcf4 	bl	8015698 <arp_cache_lookup>
 8013cb0:	b190      	cbz	r0, 8013cd8 <rfc3927+0x58>
 8013cb2:	ba24      	rev	r4, r4
 8013cb4:	3401      	adds	r4, #1
 8013cb6:	3d01      	subs	r5, #1
 8013cb8:	ba24      	rev	r4, r4
 8013cba:	b2ad      	uxth	r5, r5
 8013cbc:	4554      	cmp	r4, sl
 8013cbe:	bf08      	it	eq
 8013cc0:	4644      	moveq	r4, r8
 8013cc2:	b18d      	cbz	r5, 8013ce8 <rfc3927+0x68>
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	eba3 0309 	sub.w	r3, r3, r9
 8013cca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8013cce:	d3eb      	bcc.n	8013ca8 <rfc3927+0x28>
 8013cd0:	2400      	movs	r4, #0
 8013cd2:	4623      	mov	r3, r4
 8013cd4:	4620      	mov	r0, r4
 8013cd6:	e002      	b.n	8013cde <rfc3927+0x5e>
 8013cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013cdc:	2001      	movs	r0, #1
 8013cde:	e9c6 3401 	strd	r3, r4, [r6, #4]
 8013ce2:	6034      	str	r4, [r6, #0]
 8013ce4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ce8:	462c      	mov	r4, r5
 8013cea:	e7f2      	b.n	8013cd2 <rfc3927+0x52>
 8013cec:	200092a0 	andcs	r9, r0, r0, lsr #5
 8013cf0:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 8013cf4:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 8013cf8:	200092a8 	andcs	r9, r0, r8, lsr #5
 8013cfc:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

08013d00 <_init_tcb>:
 8013d00:	b510      	push	{r4, lr}
 8013d02:	f100 0244 	add.w	r2, r0, #68	; 0x44
 8013d06:	4603      	mov	r3, r0
 8013d08:	2400      	movs	r4, #0
 8013d0a:	4293      	cmp	r3, r2
 8013d0c:	d10d      	bne.n	8013d2a <_init_tcb+0x2a>
 8013d0e:	4b08      	ldr	r3, [pc, #32]	; (8013d30 <_init_tcb+0x30>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	6283      	str	r3, [r0, #40]	; 0x28
 8013d14:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d18:	f640 3268 	movw	r2, #2920	; 0xb68
 8013d1c:	6243      	str	r3, [r0, #36]	; 0x24
 8013d1e:	2301      	movs	r3, #1
 8013d20:	8001      	strh	r1, [r0, #0]
 8013d22:	8702      	strh	r2, [r0, #56]	; 0x38
 8013d24:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8013d28:	bd10      	pop	{r4, pc}
 8013d2a:	f803 4b01 	strb.w	r4, [r3], #1
 8013d2e:	e7ec      	b.n	8013d0a <_init_tcb+0xa>
 8013d30:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4

08013d34 <memcpy.isra.0>:
 8013d34:	3801      	subs	r0, #1
 8013d36:	440a      	add	r2, r1
 8013d38:	4291      	cmp	r1, r2
 8013d3a:	d100      	bne.n	8013d3e <memcpy.isra.0+0xa>
 8013d3c:	4770      	bx	lr
 8013d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d42:	f800 3f01 	strb.w	r3, [r0, #1]!
 8013d46:	e7f7      	b.n	8013d38 <memcpy.isra.0+0x4>

08013d48 <_bswap32>:
 8013d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d4a:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 8013d4e:	2204      	movs	r2, #4
 8013d50:	4629      	mov	r1, r5
 8013d52:	4604      	mov	r4, r0
 8013d54:	eb0d 0002 	add.w	r0, sp, r2
 8013d58:	f7ff ffec 	bl	8013d34 <memcpy.isra.0>
 8013d5c:	9b01      	ldr	r3, [sp, #4]
 8013d5e:	2204      	movs	r2, #4
 8013d60:	ba1b      	rev	r3, r3
 8013d62:	eb0d 0102 	add.w	r1, sp, r2
 8013d66:	4628      	mov	r0, r5
 8013d68:	9301      	str	r3, [sp, #4]
 8013d6a:	3426      	adds	r4, #38	; 0x26
 8013d6c:	f7ff ffe2 	bl	8013d34 <memcpy.isra.0>
 8013d70:	2204      	movs	r2, #4
 8013d72:	eb0d 0002 	add.w	r0, sp, r2
 8013d76:	4621      	mov	r1, r4
 8013d78:	f7ff ffdc 	bl	8013d34 <memcpy.isra.0>
 8013d7c:	9b01      	ldr	r3, [sp, #4]
 8013d7e:	2204      	movs	r2, #4
 8013d80:	ba1b      	rev	r3, r3
 8013d82:	eb0d 0102 	add.w	r1, sp, r2
 8013d86:	4620      	mov	r0, r4
 8013d88:	9301      	str	r3, [sp, #4]
 8013d8a:	f7ff ffd3 	bl	8013d34 <memcpy.isra.0>
 8013d8e:	b003      	add	sp, #12
 8013d90:	bd30      	pop	{r4, r5, pc}
	...

08013d94 <_tcp_send_package>:
 8013d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d98:	7a0b      	ldrb	r3, [r1, #8]
 8013d9a:	4c4c      	ldr	r4, [pc, #304]	; (8013ecc <_tcp_send_package+0x138>)
 8013d9c:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8013d9e:	f013 0f02 	tst.w	r3, #2
 8013da2:	4605      	mov	r5, r0
 8013da4:	bf0c      	ite	eq
 8013da6:	f04f 0805 	moveq.w	r8, #5
 8013daa:	f04f 0806 	movne.w	r8, #6
 8013dae:	460f      	mov	r7, r1
 8013db0:	2206      	movs	r2, #6
 8013db2:	f100 0108 	add.w	r1, r0, #8
 8013db6:	4620      	mov	r0, r4
 8013db8:	f7ff ffbc 	bl	8013d34 <memcpy.isra.0>
 8013dbc:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8013dc0:	f8b4 35ec 	ldrh.w	r3, [r4, #1516]	; 0x5ec
 8013dc4:	8263      	strh	r3, [r4, #18]
 8013dc6:	b2b6      	uxth	r6, r6
 8013dc8:	1c5a      	adds	r2, r3, #1
 8013dca:	f105 0904 	add.w	r9, r5, #4
 8013dce:	f106 0314 	add.w	r3, r6, #20
 8013dd2:	ba5b      	rev16	r3, r3
 8013dd4:	f8a4 25ec 	strh.w	r2, [r4, #1516]	; 0x5ec
 8013dd8:	4649      	mov	r1, r9
 8013dda:	2204      	movs	r2, #4
 8013ddc:	f104 001e 	add.w	r0, r4, #30
 8013de0:	8223      	strh	r3, [r4, #16]
 8013de2:	f04f 0a00 	mov.w	sl, #0
 8013de6:	f7ff ffa5 	bl	8013d34 <memcpy.isra.0>
 8013dea:	2114      	movs	r1, #20
 8013dec:	f104 000e 	add.w	r0, r4, #14
 8013df0:	f8a4 a018 	strh.w	sl, [r4, #24]
 8013df4:	f001 ff7f 	bl	8015cf6 <net_chksum>
 8013df8:	882b      	ldrh	r3, [r5, #0]
 8013dfa:	8463      	strh	r3, [r4, #34]	; 0x22
 8013dfc:	886b      	ldrh	r3, [r5, #2]
 8013dfe:	84a3      	strh	r3, [r4, #36]	; 0x24
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 8013e06:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	8320      	strh	r0, [r4, #24]
 8013e0e:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
 8013e12:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 8013e16:	7a3b      	ldrb	r3, [r7, #8]
 8013e18:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8013e1c:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 8013e1e:	8622      	strh	r2, [r4, #48]	; 0x30
 8013e20:	079b      	lsls	r3, r3, #30
 8013e22:	8baa      	ldrh	r2, [r5, #28]
 8013e24:	86a2      	strh	r2, [r4, #52]	; 0x34
 8013e26:	bf41      	itttt	mi
 8013e28:	f240 4302 	movwmi	r3, #1026	; 0x402
 8013e2c:	4622      	movmi	r2, r4
 8013e2e:	86e3      	strhmi	r3, [r4, #54]	; 0x36
 8013e30:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 8013e34:	bf48      	it	mi
 8013e36:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 8013e3a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8013e3c:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
 8013e40:	bf58      	it	pl
 8013e42:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d13e      	bne.n	8013ec8 <_tcp_send_package+0x134>
 8013e4a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8013e4c:	481f      	ldr	r0, [pc, #124]	; (8013ecc <_tcp_send_package+0x138>)
 8013e4e:	ba5b      	rev16	r3, r3
 8013e50:	8463      	strh	r3, [r4, #34]	; 0x22
 8013e52:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8013e54:	ba5b      	rev16	r3, r3
 8013e56:	84a3      	strh	r3, [r4, #36]	; 0x24
 8013e58:	f7ff ff76 	bl	8013d48 <_bswap32>
 8013e5c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013e5e:	491c      	ldr	r1, [pc, #112]	; (8013ed0 <_tcp_send_package+0x13c>)
 8013e60:	ba5b      	rev16	r3, r3
 8013e62:	8623      	strh	r3, [r4, #48]	; 0x30
 8013e64:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013e66:	a801      	add	r0, sp, #4
 8013e68:	ba5b      	rev16	r3, r3
 8013e6a:	220c      	movs	r2, #12
 8013e6c:	86a3      	strh	r3, [r4, #52]	; 0x34
 8013e6e:	f7ff ff61 	bl	8013d34 <memcpy.isra.0>
 8013e72:	4918      	ldr	r1, [pc, #96]	; (8013ed4 <_tcp_send_package+0x140>)
 8013e74:	4816      	ldr	r0, [pc, #88]	; (8013ed0 <_tcp_send_package+0x13c>)
 8013e76:	2204      	movs	r2, #4
 8013e78:	f7ff ff5c 	bl	8013d34 <memcpy.isra.0>
 8013e7c:	2204      	movs	r2, #4
 8013e7e:	4649      	mov	r1, r9
 8013e80:	4815      	ldr	r0, [pc, #84]	; (8013ed8 <_tcp_send_package+0x144>)
 8013e82:	f7ff ff57 	bl	8013d34 <memcpy.isra.0>
 8013e86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8013e8a:	83e3      	strh	r3, [r4, #30]
 8013e8c:	f106 010c 	add.w	r1, r6, #12
 8013e90:	ba73      	rev16	r3, r6
 8013e92:	480f      	ldr	r0, [pc, #60]	; (8013ed0 <_tcp_send_package+0x13c>)
 8013e94:	8423      	strh	r3, [r4, #32]
 8013e96:	f001 ff2e 	bl	8015cf6 <net_chksum>
 8013e9a:	a901      	add	r1, sp, #4
 8013e9c:	4605      	mov	r5, r0
 8013e9e:	220c      	movs	r2, #12
 8013ea0:	480b      	ldr	r0, [pc, #44]	; (8013ed0 <_tcp_send_package+0x13c>)
 8013ea2:	f7ff ff47 	bl	8013d34 <memcpy.isra.0>
 8013ea6:	4809      	ldr	r0, [pc, #36]	; (8013ecc <_tcp_send_package+0x138>)
 8013ea8:	8665      	strh	r5, [r4, #50]	; 0x32
 8013eaa:	f106 0122 	add.w	r1, r6, #34	; 0x22
 8013eae:	b004      	add	sp, #16
 8013eb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013eb4:	f005 bdc4 	b.w	8019a40 <emac_eth_send>
 8013eb8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8013eba:	5cc9      	ldrb	r1, [r1, r3]
 8013ebc:	54d1      	strb	r1, [r2, r3]
 8013ebe:	3301      	adds	r3, #1
 8013ec0:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8013ec2:	4299      	cmp	r1, r3
 8013ec4:	d8f8      	bhi.n	8013eb8 <_tcp_send_package+0x124>
 8013ec6:	e7c0      	b.n	8013e4a <_tcp_send_package+0xb6>
 8013ec8:	2300      	movs	r3, #0
 8013eca:	e7f9      	b.n	8013ec0 <_tcp_send_package+0x12c>
 8013ecc:	10000000 	andne	r0, r0, r0
 8013ed0:	10000016 	andne	r0, r0, r6, lsl r0
 8013ed4:	20009284 	andcs	r9, r0, r4, lsl #5
 8013ed8:	1000001a 	andne	r0, r0, sl, lsl r0

08013edc <_send_reset>:
 8013edc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013ede:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8013ee2:	075a      	lsls	r2, r3, #29
 8013ee4:	4604      	mov	r4, r0
 8013ee6:	460e      	mov	r6, r1
 8013ee8:	d421      	bmi.n	8013f2e <_send_reset+0x52>
 8013eea:	2204      	movs	r2, #4
 8013eec:	f013 0310 	ands.w	r3, r3, #16
 8013ef0:	f88d 200c 	strb.w	r2, [sp, #12]
 8013ef4:	d01d      	beq.n	8013f32 <_send_reset+0x56>
 8013ef6:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 8013efa:	4668      	mov	r0, sp
 8013efc:	f7ff ff1a 	bl	8013d34 <memcpy.isra.0>
 8013f00:	9b00      	ldr	r3, [sp, #0]
 8013f02:	9301      	str	r3, [sp, #4]
 8013f04:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8013f08:	f104 0126 	add.w	r1, r4, #38	; 0x26
 8013f0c:	f3c3 0540 	ubfx	r5, r3, #1, #1
 8013f10:	4668      	mov	r0, sp
 8013f12:	07db      	lsls	r3, r3, #31
 8013f14:	f04f 0204 	mov.w	r2, #4
 8013f18:	bf48      	it	mi
 8013f1a:	3501      	addmi	r5, #1
 8013f1c:	f7ff ff0a 	bl	8013d34 <memcpy.isra.0>
 8013f20:	9b00      	ldr	r3, [sp, #0]
 8013f22:	a901      	add	r1, sp, #4
 8013f24:	441d      	add	r5, r3
 8013f26:	4630      	mov	r0, r6
 8013f28:	9502      	str	r5, [sp, #8]
 8013f2a:	f7ff ff33 	bl	8013d94 <_tcp_send_package>
 8013f2e:	b004      	add	sp, #16
 8013f30:	bd70      	pop	{r4, r5, r6, pc}
 8013f32:	9301      	str	r3, [sp, #4]
 8013f34:	2314      	movs	r3, #20
 8013f36:	f88d 300c 	strb.w	r3, [sp, #12]
 8013f3a:	e7e3      	b.n	8013f04 <_send_reset+0x28>

08013f3c <tcp_begin>:
 8013f3c:	b508      	push	{r3, lr}
 8013f3e:	4b0b      	ldr	r3, [pc, #44]	; (8013f6c <tcp_begin+0x30>)
 8013f40:	f8b3 25f0 	ldrh.w	r2, [r3, #1520]	; 0x5f0
 8013f44:	4282      	cmp	r2, r0
 8013f46:	4601      	mov	r1, r0
 8013f48:	d102      	bne.n	8013f50 <tcp_begin+0x14>
 8013f4a:	f893 0630 	ldrb.w	r0, [r3, #1584]	; 0x630
 8013f4e:	b130      	cbz	r0, 8013f5e <tcp_begin+0x22>
 8013f50:	b12a      	cbz	r2, 8013f5e <tcp_begin+0x22>
 8013f52:	4807      	ldr	r0, [pc, #28]	; (8013f70 <tcp_begin+0x34>)
 8013f54:	f003 ff50 	bl	8017df8 <console_error>
 8013f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f5c:	bd08      	pop	{r3, pc}
 8013f5e:	4805      	ldr	r0, [pc, #20]	; (8013f74 <tcp_begin+0x38>)
 8013f60:	f8a3 15f0 	strh.w	r1, [r3, #1520]	; 0x5f0
 8013f64:	f7ff fecc 	bl	8013d00 <_init_tcb>
 8013f68:	2000      	movs	r0, #0
 8013f6a:	e7f7      	b.n	8013f5c <tcp_begin+0x20>
 8013f6c:	10000000 	andne	r0, r0, r0
 8013f70:	0801d092 	stmdaeq	r1, {r1, r4, r7, ip, lr, pc}
 8013f74:	100005f0 	strdne	r0, [r0], -r0	; <UNPREDICTABLE>

08013f78 <tcp_write>:
 8013f78:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8013f7c:	b530      	push	{r4, r5, lr}
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	bf28      	it	cs
 8013f82:	461a      	movcs	r2, r3
 8013f84:	4615      	mov	r5, r2
 8013f86:	4b12      	ldr	r3, [pc, #72]	; (8013fd0 <tcp_write+0x58>)
 8013f88:	2244      	movs	r2, #68	; 0x44
 8013f8a:	4350      	muls	r0, r2
 8013f8c:	181c      	adds	r4, r3, r0
 8013f8e:	b085      	sub	sp, #20
 8013f90:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 8013f94:	9201      	str	r2, [sp, #4]
 8013f96:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8013f9a:	f8d4 2624 	ldr.w	r2, [r4, #1572]	; 0x624
 8013f9e:	f8c4 161c 	str.w	r1, [r4, #1564]	; 0x61c
 8013fa2:	9202      	str	r2, [sp, #8]
 8013fa4:	4418      	add	r0, r3
 8013fa6:	2218      	movs	r2, #24
 8013fa8:	f8a4 5620 	strh.w	r5, [r4, #1568]	; 0x620
 8013fac:	a901      	add	r1, sp, #4
 8013fae:	f88d 200c 	strb.w	r2, [sp, #12]
 8013fb2:	f7ff feef 	bl	8013d94 <_tcp_send_package>
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	f8c4 361c 	str.w	r3, [r4, #1564]	; 0x61c
 8013fbc:	f8a4 3620 	strh.w	r3, [r4, #1568]	; 0x620
 8013fc0:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8013fc4:	442b      	add	r3, r5
 8013fc6:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
 8013fca:	b005      	add	sp, #20
 8013fcc:	bd30      	pop	{r4, r5, pc}
 8013fce:	bf00      	nop
 8013fd0:	10000000 	andne	r0, r0, r0

08013fd4 <tcp_read>:
 8013fd4:	4b23      	ldr	r3, [pc, #140]	; (8014064 <tcp_read+0x90>)
 8013fd6:	2244      	movs	r2, #68	; 0x44
 8013fd8:	4342      	muls	r2, r0
 8013fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fdc:	189c      	adds	r4, r3, r2
 8013fde:	b085      	sub	sp, #20
 8013fe0:	f894 5630 	ldrb.w	r5, [r4, #1584]	; 0x630
 8013fe4:	2d07      	cmp	r5, #7
 8013fe6:	d118      	bne.n	801401a <tcp_read+0x46>
 8013fe8:	f8d4 1604 	ldr.w	r1, [r4, #1540]	; 0x604
 8013fec:	9101      	str	r1, [sp, #4]
 8013fee:	f8d4 1624 	ldr.w	r1, [r4, #1572]	; 0x624
 8013ff2:	9102      	str	r1, [sp, #8]
 8013ff4:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8013ff8:	2111      	movs	r1, #17
 8013ffa:	f88d 100c 	strb.w	r1, [sp, #12]
 8013ffe:	1898      	adds	r0, r3, r2
 8014000:	a901      	add	r1, sp, #4
 8014002:	f7ff fec7 	bl	8013d94 <_tcp_send_package>
 8014006:	2309      	movs	r3, #9
 8014008:	f884 3630 	strb.w	r3, [r4, #1584]	; 0x630
 801400c:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8014010:	3301      	adds	r3, #1
 8014012:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
 8014016:	2000      	movs	r0, #0
 8014018:	e022      	b.n	8014060 <tcp_read+0x8c>
 801401a:	f44f 6237 	mov.w	r2, #2928	; 0xb70
 801401e:	4350      	muls	r0, r2
 8014020:	181e      	adds	r6, r3, r0
 8014022:	f8b6 5636 	ldrh.w	r5, [r6, #1590]	; 0x636
 8014026:	f8b6 2634 	ldrh.w	r2, [r6, #1588]	; 0x634
 801402a:	42aa      	cmp	r2, r5
 801402c:	d0f3      	beq.n	8014016 <tcp_read+0x42>
 801402e:	f240 52b6 	movw	r2, #1462	; 0x5b6
 8014032:	f100 0c04 	add.w	ip, r0, #4
 8014036:	436a      	muls	r2, r5
 8014038:	f203 6734 	addw	r7, r3, #1588	; 0x634
 801403c:	4494      	add	ip, r2
 801403e:	4467      	add	r7, ip
 8014040:	600f      	str	r7, [r1, #0]
 8014042:	4402      	add	r2, r0
 8014044:	441a      	add	r2, r3
 8014046:	f8b4 3628 	ldrh.w	r3, [r4, #1576]	; 0x628
 801404a:	f8b2 0bec 	ldrh.w	r0, [r2, #3052]	; 0xbec
 801404e:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8014052:	f8a4 3628 	strh.w	r3, [r4, #1576]	; 0x628
 8014056:	1c6b      	adds	r3, r5, #1
 8014058:	f003 0301 	and.w	r3, r3, #1
 801405c:	f8a6 3636 	strh.w	r3, [r6, #1590]	; 0x636
 8014060:	b005      	add	sp, #20
 8014062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014064:	10000000 	andne	r0, r0, r0

08014068 <memcpy.isra.0>:
 8014068:	3801      	subs	r0, #1
 801406a:	440a      	add	r2, r1
 801406c:	4291      	cmp	r1, r2
 801406e:	d100      	bne.n	8014072 <memcpy.isra.0+0xa>
 8014070:	4770      	bx	lr
 8014072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014076:	f800 3f01 	strb.w	r3, [r0, #1]!
 801407a:	e7f7      	b.n	801406c <memcpy.isra.0+0x4>

0801407c <net_memcpy>:
 801407c:	ea40 0301 	orr.w	r3, r0, r1
 8014080:	079b      	lsls	r3, r3, #30
 8014082:	b570      	push	{r4, r5, r6, lr}
 8014084:	d108      	bne.n	8014098 <net_memcpy+0x1c>
 8014086:	f022 0303 	bic.w	r3, r2, #3
 801408a:	1f04      	subs	r4, r0, #4
 801408c:	18cd      	adds	r5, r1, r3
 801408e:	42a9      	cmp	r1, r5
 8014090:	d108      	bne.n	80140a4 <net_memcpy+0x28>
 8014092:	1ad2      	subs	r2, r2, r3
 8014094:	4403      	add	r3, r0
 8014096:	e000      	b.n	801409a <net_memcpy+0x1e>
 8014098:	4603      	mov	r3, r0
 801409a:	3b01      	subs	r3, #1
 801409c:	440a      	add	r2, r1
 801409e:	4291      	cmp	r1, r2
 80140a0:	d105      	bne.n	80140ae <net_memcpy+0x32>
 80140a2:	bd70      	pop	{r4, r5, r6, pc}
 80140a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80140a8:	f844 6f04 	str.w	r6, [r4, #4]!
 80140ac:	e7ef      	b.n	801408e <net_memcpy+0x12>
 80140ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80140b6:	e7f2      	b.n	801409e <net_memcpy+0x22>

080140b8 <udp_set_ip>:
 80140b8:	b513      	push	{r0, r1, r4, lr}
 80140ba:	2204      	movs	r2, #4
 80140bc:	4604      	mov	r4, r0
 80140be:	6803      	ldr	r3, [r0, #0]
 80140c0:	4809      	ldr	r0, [pc, #36]	; (80140e8 <udp_set_ip+0x30>)
 80140c2:	9301      	str	r3, [sp, #4]
 80140c4:	eb0d 0102 	add.w	r1, sp, r2
 80140c8:	f7ff ffce 	bl	8014068 <memcpy.isra.0>
 80140cc:	6862      	ldr	r2, [r4, #4]
 80140ce:	4b07      	ldr	r3, [pc, #28]	; (80140ec <udp_set_ip+0x34>)
 80140d0:	43d1      	mvns	r1, r2
 80140d2:	6019      	str	r1, [r3, #0]
 80140d4:	6823      	ldr	r3, [r4, #0]
 80140d6:	4013      	ands	r3, r2
 80140d8:	4a05      	ldr	r2, [pc, #20]	; (80140f0 <udp_set_ip+0x38>)
 80140da:	6013      	str	r3, [r2, #0]
 80140dc:	68a2      	ldr	r2, [r4, #8]
 80140de:	4b05      	ldr	r3, [pc, #20]	; (80140f4 <udp_set_ip+0x3c>)
 80140e0:	601a      	str	r2, [r3, #0]
 80140e2:	b002      	add	sp, #8
 80140e4:	bd10      	pop	{r4, pc}
 80140e6:	bf00      	nop
 80140e8:	2000ef9a 	mulcs	r0, sl, pc	; <UNPREDICTABLE>
 80140ec:	200092b0 			; <UNDEFINED> instruction: 0x200092b0
 80140f0:	200092b8 			; <UNDEFINED> instruction: 0x200092b8
 80140f4:	200092b4 			; <UNDEFINED> instruction: 0x200092b4

080140f8 <udp_bind>:
 80140f8:	4a0a      	ldr	r2, [pc, #40]	; (8014124 <udp_bind+0x2c>)
 80140fa:	b510      	push	{r4, lr}
 80140fc:	2300      	movs	r3, #0
 80140fe:	4614      	mov	r4, r2
 8014100:	f852 1b04 	ldr.w	r1, [r2], #4
 8014104:	4281      	cmp	r1, r0
 8014106:	d008      	beq.n	801411a <udp_bind+0x22>
 8014108:	b149      	cbz	r1, 801411e <udp_bind+0x26>
 801410a:	3301      	adds	r3, #1
 801410c:	2b08      	cmp	r3, #8
 801410e:	d1f7      	bne.n	8014100 <udp_bind+0x8>
 8014110:	4805      	ldr	r0, [pc, #20]	; (8014128 <udp_bind+0x30>)
 8014112:	f003 fe71 	bl	8017df8 <console_error>
 8014116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801411a:	4618      	mov	r0, r3
 801411c:	bd10      	pop	{r4, pc}
 801411e:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8014122:	e7fa      	b.n	801411a <udp_bind+0x22>
 8014124:	200092c0 	andcs	r9, r0, r0, asr #5
 8014128:	0801d0b2 	stmdaeq	r1, {r1, r4, r5, r7, ip, lr, pc}

0801412c <udp_unbind>:
 801412c:	b510      	push	{r4, lr}
 801412e:	4a0c      	ldr	r2, [pc, #48]	; (8014160 <udp_unbind+0x34>)
 8014130:	2300      	movs	r3, #0
 8014132:	4611      	mov	r1, r2
 8014134:	f852 4b04 	ldr.w	r4, [r2], #4
 8014138:	4284      	cmp	r4, r0
 801413a:	d108      	bne.n	801414e <udp_unbind+0x22>
 801413c:	2000      	movs	r0, #0
 801413e:	f640 3294 	movw	r2, #2964	; 0xb94
 8014142:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8014146:	4353      	muls	r3, r2
 8014148:	4a06      	ldr	r2, [pc, #24]	; (8014164 <udp_unbind+0x38>)
 801414a:	50d0      	str	r0, [r2, r3]
 801414c:	bd10      	pop	{r4, pc}
 801414e:	3301      	adds	r3, #1
 8014150:	2b08      	cmp	r3, #8
 8014152:	d1ef      	bne.n	8014134 <udp_unbind+0x8>
 8014154:	4804      	ldr	r0, [pc, #16]	; (8014168 <udp_unbind+0x3c>)
 8014156:	f003 fe4f 	bl	8017df8 <console_error>
 801415a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801415e:	e7f5      	b.n	801414c <udp_unbind+0x20>
 8014160:	200092c0 	andcs	r9, r0, r0, asr #5
 8014164:	200092e0 	andcs	r9, r0, r0, ror #5
 8014168:	0801d0b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, ip, lr, pc}

0801416c <udp_recv>:
 801416c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014170:	4604      	mov	r4, r0
 8014172:	4698      	mov	r8, r3
 8014174:	4608      	mov	r0, r1
 8014176:	f640 3394 	movw	r3, #2964	; 0xb94
 801417a:	4916      	ldr	r1, [pc, #88]	; (80141d4 <udp_recv+0x68>)
 801417c:	435c      	muls	r4, r3
 801417e:	190f      	adds	r7, r1, r4
 8014180:	5b0b      	ldrh	r3, [r1, r4]
 8014182:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8014186:	4563      	cmp	r3, ip
 8014188:	d021      	beq.n	80141ce <udp_recv+0x62>
 801418a:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 801418e:	fb03 fc0c 	mul.w	ip, r3, ip
 8014192:	eb0c 0604 	add.w	r6, ip, r4
 8014196:	440e      	add	r6, r1
 8014198:	3404      	adds	r4, #4
 801419a:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 801419e:	4295      	cmp	r5, r2
 80141a0:	bf28      	it	cs
 80141a2:	4615      	movcs	r5, r2
 80141a4:	4464      	add	r4, ip
 80141a6:	462a      	mov	r2, r5
 80141a8:	4421      	add	r1, r4
 80141aa:	f7ff ff67 	bl	801407c <net_memcpy>
 80141ae:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 80141b2:	f8c8 3000 	str.w	r3, [r8]
 80141b6:	9b06      	ldr	r3, [sp, #24]
 80141b8:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 80141bc:	801a      	strh	r2, [r3, #0]
 80141be:	887b      	ldrh	r3, [r7, #2]
 80141c0:	3301      	adds	r3, #1
 80141c2:	f003 0301 	and.w	r3, r3, #1
 80141c6:	807b      	strh	r3, [r7, #2]
 80141c8:	4628      	mov	r0, r5
 80141ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141ce:	2500      	movs	r5, #0
 80141d0:	e7fa      	b.n	80141c8 <udp_recv+0x5c>
 80141d2:	bf00      	nop
 80141d4:	200092e0 	andcs	r9, r0, r0, ror #5

080141d8 <udp_recv2>:
 80141d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141da:	4c11      	ldr	r4, [pc, #68]	; (8014220 <udp_recv2+0x48>)
 80141dc:	f640 3594 	movw	r5, #2964	; 0xb94
 80141e0:	4368      	muls	r0, r5
 80141e2:	1827      	adds	r7, r4, r0
 80141e4:	5a26      	ldrh	r6, [r4, r0]
 80141e6:	887d      	ldrh	r5, [r7, #2]
 80141e8:	42ae      	cmp	r6, r5
 80141ea:	d017      	beq.n	801421c <udp_recv2+0x44>
 80141ec:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 80141f0:	1d06      	adds	r6, r0, #4
 80141f2:	fb0c f505 	mul.w	r5, ip, r5
 80141f6:	442e      	add	r6, r5
 80141f8:	4405      	add	r5, r0
 80141fa:	4426      	add	r6, r4
 80141fc:	442c      	add	r4, r5
 80141fe:	600e      	str	r6, [r1, #0]
 8014200:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 8014204:	6011      	str	r1, [r2, #0]
 8014206:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 801420a:	801a      	strh	r2, [r3, #0]
 801420c:	887b      	ldrh	r3, [r7, #2]
 801420e:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 8014212:	3301      	adds	r3, #1
 8014214:	f003 0301 	and.w	r3, r3, #1
 8014218:	807b      	strh	r3, [r7, #2]
 801421a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801421c:	2000      	movs	r0, #0
 801421e:	e7fc      	b.n	801421a <udp_recv2+0x42>
 8014220:	200092e0 	andcs	r9, r0, r0, ror #5

08014224 <udp_send>:
 8014224:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8014228:	f8df 9150 	ldr.w	r9, [pc, #336]	; 801437c <udp_send+0x158>
 801422c:	461c      	mov	r4, r3
 801422e:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 8014232:	4607      	mov	r7, r0
 8014234:	4688      	mov	r8, r1
 8014236:	4616      	mov	r6, r2
 8014238:	2b00      	cmp	r3, #0
 801423a:	f000 808b 	beq.w	8014354 <udp_send+0x130>
 801423e:	1c63      	adds	r3, r4, #1
 8014240:	d141      	bne.n	80142c6 <udp_send+0xa2>
 8014242:	4a46      	ldr	r2, [pc, #280]	; (801435c <udp_send+0x138>)
 8014244:	2307      	movs	r3, #7
 8014246:	4611      	mov	r1, r2
 8014248:	20ff      	movs	r0, #255	; 0xff
 801424a:	e001      	b.n	8014250 <udp_send+0x2c>
 801424c:	f802 0b01 	strb.w	r0, [r2], #1
 8014250:	3b01      	subs	r3, #1
 8014252:	d1fb      	bne.n	801424c <udp_send+0x28>
 8014254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014258:	83cb      	strh	r3, [r1, #30]
 801425a:	840b      	strh	r3, [r1, #32]
 801425c:	f8df a120 	ldr.w	sl, [pc, #288]	; 8014380 <udp_send+0x15c>
 8014260:	4c3e      	ldr	r4, [pc, #248]	; (801435c <udp_send+0x138>)
 8014262:	f8ba 3000 	ldrh.w	r3, [sl]
 8014266:	8263      	strh	r3, [r4, #18]
 8014268:	f106 031c 	add.w	r3, r6, #28
 801426c:	ba5b      	rev16	r3, r3
 801426e:	2500      	movs	r5, #0
 8014270:	2114      	movs	r1, #20
 8014272:	f104 000e 	add.w	r0, r4, #14
 8014276:	8223      	strh	r3, [r4, #16]
 8014278:	8325      	strh	r5, [r4, #24]
 801427a:	f001 fd3c 	bl	8015cf6 <net_chksum>
 801427e:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8014282:	8320      	strh	r0, [r4, #24]
 8014284:	ba5b      	rev16	r3, r3
 8014286:	8463      	strh	r3, [r4, #34]	; 0x22
 8014288:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801428c:	ba5b      	rev16	r3, r3
 801428e:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 8014292:	84a3      	strh	r3, [r4, #36]	; 0x24
 8014294:	f106 0308 	add.w	r3, r6, #8
 8014298:	ba5b      	rev16	r3, r3
 801429a:	4632      	mov	r2, r6
 801429c:	4641      	mov	r1, r8
 801429e:	bf28      	it	cs
 80142a0:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 80142a4:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80142a8:	84e3      	strh	r3, [r4, #38]	; 0x26
 80142aa:	f7ff fee7 	bl	801407c <net_memcpy>
 80142ae:	4620      	mov	r0, r4
 80142b0:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 80142b4:	f005 fbc4 	bl	8019a40 <emac_eth_send>
 80142b8:	f8ba 3000 	ldrh.w	r3, [sl]
 80142bc:	3301      	adds	r3, #1
 80142be:	f8aa 3000 	strh.w	r3, [sl]
 80142c2:	4628      	mov	r0, r5
 80142c4:	e037      	b.n	8014336 <udp_send+0x112>
 80142c6:	4b26      	ldr	r3, [pc, #152]	; (8014360 <udp_send+0x13c>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	43a3      	bics	r3, r4
 80142cc:	d10f      	bne.n	80142ee <udp_send+0xca>
 80142ce:	4a23      	ldr	r2, [pc, #140]	; (801435c <udp_send+0x138>)
 80142d0:	2307      	movs	r3, #7
 80142d2:	21ff      	movs	r1, #255	; 0xff
 80142d4:	e001      	b.n	80142da <udp_send+0xb6>
 80142d6:	f802 1b01 	strb.w	r1, [r2], #1
 80142da:	3b01      	subs	r3, #1
 80142dc:	d1fb      	bne.n	80142d6 <udp_send+0xb2>
 80142de:	2204      	movs	r2, #4
 80142e0:	4820      	ldr	r0, [pc, #128]	; (8014364 <udp_send+0x140>)
 80142e2:	9401      	str	r4, [sp, #4]
 80142e4:	eb0d 0102 	add.w	r1, sp, r2
 80142e8:	f7ff febe 	bl	8014068 <memcpy.isra.0>
 80142ec:	e7b6      	b.n	801425c <udp_send+0x38>
 80142ee:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 80142f2:	2be0      	cmp	r3, #224	; 0xe0
 80142f4:	d10e      	bne.n	8014314 <udp_send+0xf0>
 80142f6:	491c      	ldr	r1, [pc, #112]	; (8014368 <udp_send+0x144>)
 80142f8:	4818      	ldr	r0, [pc, #96]	; (801435c <udp_send+0x138>)
 80142fa:	f3c4 2206 	ubfx	r2, r4, #8, #7
 80142fe:	70ca      	strb	r2, [r1, #3]
 8014300:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8014304:	710a      	strb	r2, [r1, #4]
 8014306:	f3c4 6207 	ubfx	r2, r4, #24, #8
 801430a:	714a      	strb	r2, [r1, #5]
 801430c:	2206      	movs	r2, #6
 801430e:	f7ff feab 	bl	8014068 <memcpy.isra.0>
 8014312:	e7e4      	b.n	80142de <udp_send+0xba>
 8014314:	4b15      	ldr	r3, [pc, #84]	; (801436c <udp_send+0x148>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	43a3      	bics	r3, r4
 801431a:	d00f      	beq.n	801433c <udp_send+0x118>
 801431c:	4d14      	ldr	r5, [pc, #80]	; (8014370 <udp_send+0x14c>)
 801431e:	490f      	ldr	r1, [pc, #60]	; (801435c <udp_send+0x138>)
 8014320:	6828      	ldr	r0, [r5, #0]
 8014322:	f001 f9b9 	bl	8015698 <arp_cache_lookup>
 8014326:	682b      	ldr	r3, [r5, #0]
 8014328:	4298      	cmp	r0, r3
 801432a:	d0d8      	beq.n	80142de <udp_send+0xba>
 801432c:	4811      	ldr	r0, [pc, #68]	; (8014374 <udp_send+0x150>)
 801432e:	f003 fd63 	bl	8017df8 <console_error>
 8014332:	f06f 0002 	mvn.w	r0, #2
 8014336:	b002      	add	sp, #8
 8014338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801433c:	4907      	ldr	r1, [pc, #28]	; (801435c <udp_send+0x138>)
 801433e:	4620      	mov	r0, r4
 8014340:	f001 f9aa 	bl	8015698 <arp_cache_lookup>
 8014344:	42a0      	cmp	r0, r4
 8014346:	d0ca      	beq.n	80142de <udp_send+0xba>
 8014348:	480b      	ldr	r0, [pc, #44]	; (8014378 <udp_send+0x154>)
 801434a:	f003 fd55 	bl	8017df8 <console_error>
 801434e:	f06f 0001 	mvn.w	r0, #1
 8014352:	e7f0      	b.n	8014336 <udp_send+0x112>
 8014354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014358:	e7ed      	b.n	8014336 <udp_send+0x112>
 801435a:	bf00      	nop
 801435c:	2000ef80 	andcs	lr, r0, r0, lsl #31
 8014360:	200092b0 			; <UNDEFINED> instruction: 0x200092b0
 8014364:	2000ef9e 	mulcs	r0, lr, pc	; <UNPREDICTABLE>
 8014368:	20000014 	andcs	r0, r0, r4, lsl r0
 801436c:	200092b8 			; <UNDEFINED> instruction: 0x200092b8
 8014370:	200092b4 			; <UNDEFINED> instruction: 0x200092b4
 8014374:	0801d0bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, ip, lr, pc}
 8014378:	0801d0e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, ip, lr, pc}
 801437c:	200092c0 	andcs	r9, r0, r0, asr #5
 8014380:	200092bc 			; <UNDEFINED> instruction: 0x200092bc

08014384 <strlen>:
 8014384:	4603      	mov	r3, r0
 8014386:	461a      	mov	r2, r3
 8014388:	3301      	adds	r3, #1
 801438a:	7811      	ldrb	r1, [r2, #0]
 801438c:	2900      	cmp	r1, #0
 801438e:	d1fa      	bne.n	8014386 <strlen+0x2>
 8014390:	1a10      	subs	r0, r2, r0
 8014392:	4770      	bx	lr

08014394 <strcmp>:
 8014394:	1e43      	subs	r3, r0, #1
 8014396:	3901      	subs	r1, #1
 8014398:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 801439c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80143a0:	4290      	cmp	r0, r2
 80143a2:	d001      	beq.n	80143a8 <strcmp+0x14>
 80143a4:	1a80      	subs	r0, r0, r2
 80143a6:	e001      	b.n	80143ac <strcmp+0x18>
 80143a8:	2800      	cmp	r0, #0
 80143aa:	d1f5      	bne.n	8014398 <strcmp+0x4>
 80143ac:	4770      	bx	lr

080143ae <strcpy.isra.0>:
 80143ae:	3801      	subs	r0, #1
 80143b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143b4:	f800 3f01 	strb.w	r3, [r0, #1]!
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d1f9      	bne.n	80143b0 <strcpy.isra.0+0x2>
 80143bc:	4770      	bx	lr

080143be <strcat.isra.0>:
 80143be:	b513      	push	{r0, r1, r4, lr}
 80143c0:	4604      	mov	r4, r0
 80143c2:	9101      	str	r1, [sp, #4]
 80143c4:	f7ff ffde 	bl	8014384 <strlen>
 80143c8:	9901      	ldr	r1, [sp, #4]
 80143ca:	4420      	add	r0, r4
 80143cc:	b002      	add	sp, #8
 80143ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143d2:	f7ff bfec 	b.w	80143ae <strcpy.isra.0>
	...

080143d8 <MDNS::MDNS()>:
 80143d8:	b513      	push	{r0, r1, r4, lr}
 80143da:	4604      	mov	r4, r0
 80143dc:	a901      	add	r1, sp, #4
 80143de:	4804      	ldr	r0, [pc, #16]	; (80143f0 <MDNS::MDNS()+0x18>)
 80143e0:	f003 feaa 	bl	8018138 <inet_aton>
 80143e4:	4b03      	ldr	r3, [pc, #12]	; (80143f4 <MDNS::MDNS()+0x1c>)
 80143e6:	9a01      	ldr	r2, [sp, #4]
 80143e8:	601a      	str	r2, [r3, #0]
 80143ea:	4620      	mov	r0, r4
 80143ec:	b002      	add	sp, #8
 80143ee:	bd10      	pop	{r4, pc}
 80143f0:	0801d116 	stmdaeq	r1, {r1, r2, r4, r8, ip, lr, pc}
 80143f4:	2000f574 	andcs	pc, r0, r4, ror r5	; <UNPREDICTABLE>

080143f8 <MDNS::SetName(char const*)>:
 80143f8:	b538      	push	{r3, r4, r5, lr}
 80143fa:	4d0b      	ldr	r5, [pc, #44]	; (8014428 <MDNS::SetName(char const*)+0x30>)
 80143fc:	6828      	ldr	r0, [r5, #0]
 80143fe:	460c      	mov	r4, r1
 8014400:	b108      	cbz	r0, 8014406 <MDNS::SetName(char const*)+0xe>
 8014402:	f003 fe93 	bl	801812c <operator delete[](void*)>
 8014406:	4620      	mov	r0, r4
 8014408:	f7ff ffbc 	bl	8014384 <strlen>
 801440c:	3007      	adds	r0, #7
 801440e:	f003 fe91 	bl	8018134 <operator new[](unsigned int)>
 8014412:	4621      	mov	r1, r4
 8014414:	6028      	str	r0, [r5, #0]
 8014416:	f7ff ffca 	bl	80143ae <strcpy.isra.0>
 801441a:	6828      	ldr	r0, [r5, #0]
 801441c:	4903      	ldr	r1, [pc, #12]	; (801442c <MDNS::SetName(char const*)+0x34>)
 801441e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014422:	f7ff bfcc 	b.w	80143be <strcat.isra.0>
 8014426:	bf00      	nop
 8014428:	2000f9a4 	andcs	pc, r0, r4, lsr #19
 801442c:	0801d126 	stmdaeq	r1, {r1, r2, r5, r8, ip, lr, pc}

08014430 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 8014430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014434:	f04f 0e00 	mov.w	lr, #0
 8014438:	4e1c      	ldr	r6, [pc, #112]	; (80144ac <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 801443a:	4f1d      	ldr	r7, [pc, #116]	; (80144b0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 801443c:	4675      	mov	r5, lr
 801443e:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 8014442:	780b      	ldrb	r3, [r1, #0]
 8014444:	1c68      	adds	r0, r5, #1
 8014446:	b913      	cbnz	r3, 801444e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 8014448:	7013      	strb	r3, [r2, #0]
 801444a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801444e:	2b3f      	cmp	r3, #63	; 0x3f
 8014450:	d91c      	bls.n	801448c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 8014452:	7849      	ldrb	r1, [r1, #1]
 8014454:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 8014458:	430b      	orrs	r3, r1
 801445a:	6839      	ldr	r1, [r7, #0]
 801445c:	5ccc      	ldrb	r4, [r1, r3]
 801445e:	3301      	adds	r3, #1
 8014460:	4419      	add	r1, r3
 8014462:	f1be 0f00 	cmp.w	lr, #0
 8014466:	bf08      	it	eq
 8014468:	4605      	moveq	r5, r0
 801446a:	2300      	movs	r3, #0
 801446c:	42a3      	cmp	r3, r4
 801446e:	5cc8      	ldrb	r0, [r1, r3]
 8014470:	d309      	bcc.n	8014486 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 8014472:	4421      	add	r1, r4
 8014474:	f04f 0e01 	mov.w	lr, #1
 8014478:	4414      	add	r4, r2
 801447a:	780b      	ldrb	r3, [r1, #0]
 801447c:	b10b      	cbz	r3, 8014482 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 801447e:	f804 cb01 	strb.w	ip, [r4], #1
 8014482:	4622      	mov	r2, r4
 8014484:	e7dd      	b.n	8014442 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 8014486:	54d0      	strb	r0, [r2, r3]
 8014488:	3301      	adds	r3, #1
 801448a:	e7ef      	b.n	801446c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 801448c:	4688      	mov	r8, r1
 801448e:	18d4      	adds	r4, r2, r3
 8014490:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8014494:	f802 9b01 	strb.w	r9, [r2], #1
 8014498:	4294      	cmp	r4, r2
 801449a:	d1f9      	bne.n	8014490 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 801449c:	1c5a      	adds	r2, r3, #1
 801449e:	4411      	add	r1, r2
 80144a0:	f1be 0f00 	cmp.w	lr, #0
 80144a4:	d1e9      	bne.n	801447a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 80144a6:	181d      	adds	r5, r3, r0
 80144a8:	e7e7      	b.n	801447a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 80144aa:	bf00      	nop
 80144ac:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 80144b0:	2000f9a8 	andcs	pc, r0, r8, lsr #19

080144b4 <MDNS::FindFirstDotFromRight(char const*) const>:
 80144b4:	b510      	push	{r4, lr}
 80144b6:	4608      	mov	r0, r1
 80144b8:	460c      	mov	r4, r1
 80144ba:	f7ff ff63 	bl	8014384 <strlen>
 80144be:	4420      	add	r0, r4
 80144c0:	42a0      	cmp	r0, r4
 80144c2:	d903      	bls.n	80144cc <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 80144c4:	f810 3901 	ldrb.w	r3, [r0], #-1
 80144c8:	2b2e      	cmp	r3, #46	; 0x2e
 80144ca:	d1f9      	bne.n	80144c0 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 80144cc:	3001      	adds	r0, #1
 80144ce:	bd10      	pop	{r4, pc}

080144d0 <MDNS::WriteDnsName(char const*, char*, bool)>:
 80144d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144d2:	4610      	mov	r0, r2
 80144d4:	1c44      	adds	r4, r0, #1
 80144d6:	460f      	mov	r7, r1
 80144d8:	463d      	mov	r5, r7
 80144da:	f817 6b01 	ldrb.w	r6, [r7], #1
 80144de:	b946      	cbnz	r6, 80144f2 <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 80144e0:	1a69      	subs	r1, r5, r1
 80144e2:	7001      	strb	r1, [r0, #0]
 80144e4:	7829      	ldrb	r1, [r5, #0]
 80144e6:	b949      	cbnz	r1, 80144fc <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 80144e8:	b10b      	cbz	r3, 80144ee <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 80144ea:	f804 1b01 	strb.w	r1, [r4], #1
 80144ee:	1aa0      	subs	r0, r4, r2
 80144f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144f2:	2e2e      	cmp	r6, #46	; 0x2e
 80144f4:	d0f4      	beq.n	80144e0 <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 80144f6:	f804 6b01 	strb.w	r6, [r4], #1
 80144fa:	e7ed      	b.n	80144d8 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 80144fc:	1c69      	adds	r1, r5, #1
 80144fe:	4620      	mov	r0, r4
 8014500:	e7e8      	b.n	80144d4 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

08014504 <MDNS::CreateAnswerLocalIpAddress()>:
 8014504:	b510      	push	{r4, lr}
 8014506:	4c10      	ldr	r4, [pc, #64]	; (8014548 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 8014508:	4910      	ldr	r1, [pc, #64]	; (801454c <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 801450a:	2384      	movs	r3, #132	; 0x84
 801450c:	80e3      	strh	r3, [r4, #6]
 801450e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014512:	2300      	movs	r3, #0
 8014514:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8014518:	6809      	ldr	r1, [r1, #0]
 801451a:	f104 0210 	add.w	r2, r4, #16
 801451e:	2301      	movs	r3, #1
 8014520:	f7ff ffd6 	bl	80144d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8014524:	490a      	ldr	r1, [pc, #40]	; (8014550 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 8014526:	5011      	str	r1, [r2, r0]
 8014528:	1813      	adds	r3, r2, r0
 801452a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 801452e:	605a      	str	r2, [r3, #4]
 8014530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014534:	811a      	strh	r2, [r3, #8]
 8014536:	4a07      	ldr	r2, [pc, #28]	; (8014554 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 8014538:	6812      	ldr	r2, [r2, #0]
 801453a:	6952      	ldr	r2, [r2, #20]
 801453c:	f8c3 200a 	str.w	r2, [r3, #10]
 8014540:	1b1b      	subs	r3, r3, r4
 8014542:	330a      	adds	r3, #10
 8014544:	6023      	str	r3, [r4, #0]
 8014546:	bd10      	pop	{r4, pc}
 8014548:	2000f578 	andcs	pc, r0, r8, ror r5	; <UNPREDICTABLE>
 801454c:	2000f9a4 	andcs	pc, r0, r4, lsr #19
 8014550:	01800100 	orreq	r0, r0, r0, lsl #2
 8014554:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08014558 <MDNS::Start()>:
 8014558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801455a:	4c1d      	ldr	r4, [pc, #116]	; (80145d0 <MDNS::Start()+0x78>)
 801455c:	4e1d      	ldr	r6, [pc, #116]	; (80145d4 <MDNS::Start()+0x7c>)
 801455e:	4f1e      	ldr	r7, [pc, #120]	; (80145d8 <MDNS::Start()+0x80>)
 8014560:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8014564:	4605      	mov	r5, r0
 8014566:	6820      	ldr	r0, [r4, #0]
 8014568:	f000 fb29 	bl	8014bbe <Network::Begin(unsigned short)>
 801456c:	683a      	ldr	r2, [r7, #0]
 801456e:	6030      	str	r0, [r6, #0]
 8014570:	4601      	mov	r1, r0
 8014572:	6820      	ldr	r0, [r4, #0]
 8014574:	f000 fb34 	bl	8014be0 <Network::JoinGroup(int, unsigned int)>
 8014578:	4b18      	ldr	r3, [pc, #96]	; (80145dc <MDNS::Start()+0x84>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	b923      	cbnz	r3, 8014588 <MDNS::Start()+0x30>
 801457e:	6821      	ldr	r1, [r4, #0]
 8014580:	4628      	mov	r0, r5
 8014582:	3120      	adds	r1, #32
 8014584:	f7ff ff38 	bl	80143f8 <MDNS::SetName(char const*)>
 8014588:	4628      	mov	r0, r5
 801458a:	f7ff ffbb 	bl	8014504 <MDNS::CreateAnswerLocalIpAddress()>
 801458e:	4914      	ldr	r1, [pc, #80]	; (80145e0 <MDNS::Start()+0x88>)
 8014590:	7830      	ldrb	r0, [r6, #0]
 8014592:	f831 2b04 	ldrh.w	r2, [r1], #4
 8014596:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801459a:	9300      	str	r3, [sp, #0]
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	f7ff fe41 	bl	8014224 <udp_send>
 80145a2:	6820      	ldr	r0, [r4, #0]
 80145a4:	4c0f      	ldr	r4, [pc, #60]	; (80145e4 <MDNS::Start()+0x8c>)
 80145a6:	f100 0260 	add.w	r2, r0, #96	; 0x60
 80145aa:	233f      	movs	r3, #63	; 0x3f
 80145ac:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80145b0:	b929      	cbnz	r1, 80145be <MDNS::Start()+0x66>
 80145b2:	4413      	add	r3, r2
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d006      	beq.n	80145c6 <MDNS::Start()+0x6e>
 80145b8:	f802 1b01 	strb.w	r1, [r2], #1
 80145bc:	e7fa      	b.n	80145b4 <MDNS::Start()+0x5c>
 80145be:	3b01      	subs	r3, #1
 80145c0:	f802 1b01 	strb.w	r1, [r2], #1
 80145c4:	d1f2      	bne.n	80145ac <MDNS::Start()+0x54>
 80145c6:	2300      	movs	r3, #0
 80145c8:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
 80145cc:	b003      	add	sp, #12
 80145ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145d0:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 80145d4:	2000001c 	andcs	r0, r0, ip, lsl r0
 80145d8:	2000f574 	andcs	pc, r0, r4, ror r5	; <UNPREDICTABLE>
 80145dc:	2000f9a4 	andcs	pc, r0, r4, lsr #19
 80145e0:	2000f578 	andcs	pc, r0, r8, ror r5	; <UNPREDICTABLE>
 80145e4:	0801d126 	stmdaeq	r1, {r1, r2, r5, r8, ip, lr, pc}

080145e8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 80145e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80145ea:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 80145ee:	4c1b      	ldr	r4, [pc, #108]	; (801465c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 80145f0:	2300      	movs	r3, #0
 80145f2:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 80145f6:	f854 100c 	ldr.w	r1, [r4, ip]
 80145fa:	4607      	mov	r7, r0
 80145fc:	f7ff ff68 	bl	80144d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8014600:	4616      	mov	r6, r2
 8014602:	7bac      	ldrb	r4, [r5, #14]
 8014604:	4916      	ldr	r1, [pc, #88]	; (8014660 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 8014606:	4402      	add	r2, r0
 8014608:	4816      	ldr	r0, [pc, #88]	; (8014664 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 801460a:	2301      	movs	r3, #1
 801460c:	429c      	cmp	r4, r3
 801460e:	bf18      	it	ne
 8014610:	4601      	movne	r1, r0
 8014612:	4638      	mov	r0, r7
 8014614:	f7ff ff5c 	bl	80144d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8014618:	4b13      	ldr	r3, [pc, #76]	; (8014668 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 801461a:	5013      	str	r3, [r2, r0]
 801461c:	1814      	adds	r4, r2, r0
 801461e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8014622:	6063      	str	r3, [r4, #4]
 8014624:	4b11      	ldr	r3, [pc, #68]	; (801466c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 8014626:	6819      	ldr	r1, [r3, #0]
 8014628:	9101      	str	r1, [sp, #4]
 801462a:	4608      	mov	r0, r1
 801462c:	f7ff feaa 	bl	8014384 <strlen>
 8014630:	f100 0308 	add.w	r3, r0, #8
 8014634:	ba5b      	rev16	r3, r3
 8014636:	8123      	strh	r3, [r4, #8]
 8014638:	2300      	movs	r3, #0
 801463a:	f8c4 300a 	str.w	r3, [r4, #10]
 801463e:	89ab      	ldrh	r3, [r5, #12]
 8014640:	9901      	ldr	r1, [sp, #4]
 8014642:	ba5b      	rev16	r3, r3
 8014644:	81e3      	strh	r3, [r4, #14]
 8014646:	f104 0210 	add.w	r2, r4, #16
 801464a:	2301      	movs	r3, #1
 801464c:	4638      	mov	r0, r7
 801464e:	f7ff ff3f 	bl	80144d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8014652:	4410      	add	r0, r2
 8014654:	1b80      	subs	r0, r0, r6
 8014656:	b003      	add	sp, #12
 8014658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801465a:	bf00      	nop
 801465c:	2000f77c 	andcs	pc, r0, ip, ror r7	; <UNPREDICTABLE>
 8014660:	0801d122 	stmdaeq	r1, {r1, r5, r8, ip, lr, pc}
 8014664:	0801d13f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, ip, lr, pc}
 8014668:	01802100 	orreq	r2, r0, r0, lsl #2
 801466c:	2000f9a4 	andcs	pc, r0, r4, lsr #19

08014670 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 8014670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014674:	4e19      	ldr	r6, [pc, #100]	; (80146dc <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 8014676:	010f      	lsls	r7, r1, #4
 8014678:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 801467c:	2300      	movs	r3, #0
 801467e:	59f1      	ldr	r1, [r6, r7]
 8014680:	4604      	mov	r4, r0
 8014682:	f7ff ff25 	bl	80144d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8014686:	4690      	mov	r8, r2
 8014688:	7bae      	ldrb	r6, [r5, #14]
 801468a:	4915      	ldr	r1, [pc, #84]	; (80146e0 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 801468c:	4402      	add	r2, r0
 801468e:	4815      	ldr	r0, [pc, #84]	; (80146e4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 8014690:	2301      	movs	r3, #1
 8014692:	429e      	cmp	r6, r3
 8014694:	bf18      	it	ne
 8014696:	4601      	movne	r1, r0
 8014698:	4620      	mov	r0, r4
 801469a:	f7ff ff19 	bl	80144d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 801469e:	4b12      	ldr	r3, [pc, #72]	; (80146e8 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 80146a0:	5013      	str	r3, [r2, r0]
 80146a2:	1816      	adds	r6, r2, r0
 80146a4:	68a8      	ldr	r0, [r5, #8]
 80146a6:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80146aa:	6073      	str	r3, [r6, #4]
 80146ac:	f106 040b 	add.w	r4, r6, #11
 80146b0:	b938      	cbnz	r0, 80146c2 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 80146b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80146b6:	8133      	strh	r3, [r6, #8]
 80146b8:	72b0      	strb	r0, [r6, #10]
 80146ba:	eba4 0008 	sub.w	r0, r4, r8
 80146be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146c2:	f7ff fe5f 	bl	8014384 <strlen>
 80146c6:	1c43      	adds	r3, r0, #1
 80146c8:	72b0      	strb	r0, [r6, #10]
 80146ca:	ba5b      	rev16	r3, r3
 80146cc:	4607      	mov	r7, r0
 80146ce:	68a9      	ldr	r1, [r5, #8]
 80146d0:	8133      	strh	r3, [r6, #8]
 80146d2:	4620      	mov	r0, r4
 80146d4:	f7ff fe6b 	bl	80143ae <strcpy.isra.0>
 80146d8:	443c      	add	r4, r7
 80146da:	e7ee      	b.n	80146ba <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 80146dc:	2000f77c 	andcs	pc, r0, ip, ror r7	; <UNPREDICTABLE>
 80146e0:	0801d122 	stmdaeq	r1, {r1, r5, r8, ip, lr, pc}
 80146e4:	0801d13f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, ip, lr, pc}
 80146e8:	01801000 	orreq	r1, r0, r0

080146ec <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 80146ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80146f0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8014764 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x78>
 80146f4:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 80146f8:	ea4f 1901 	mov.w	r9, r1, lsl #4
 80146fc:	2301      	movs	r3, #1
 80146fe:	6869      	ldr	r1, [r5, #4]
 8014700:	4607      	mov	r7, r0
 8014702:	f7ff fee5 	bl	80144d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8014706:	f858 1009 	ldr.w	r1, [r8, r9]
 801470a:	4b13      	ldr	r3, [pc, #76]	; (8014758 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 801470c:	5013      	str	r3, [r2, r0]
 801470e:	1816      	adds	r6, r2, r0
 8014710:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8014714:	6073      	str	r3, [r6, #4]
 8014716:	4608      	mov	r0, r1
 8014718:	4614      	mov	r4, r2
 801471a:	9101      	str	r1, [sp, #4]
 801471c:	f7ff fe32 	bl	8014384 <strlen>
 8014720:	f100 030d 	add.w	r3, r0, #13
 8014724:	ba5b      	rev16	r3, r3
 8014726:	9901      	ldr	r1, [sp, #4]
 8014728:	8133      	strh	r3, [r6, #8]
 801472a:	f106 020a 	add.w	r2, r6, #10
 801472e:	2300      	movs	r3, #0
 8014730:	4638      	mov	r0, r7
 8014732:	f7ff fecd 	bl	80144d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8014736:	7bad      	ldrb	r5, [r5, #14]
 8014738:	4908      	ldr	r1, [pc, #32]	; (801475c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 801473a:	4402      	add	r2, r0
 801473c:	4808      	ldr	r0, [pc, #32]	; (8014760 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 801473e:	2301      	movs	r3, #1
 8014740:	429d      	cmp	r5, r3
 8014742:	bf18      	it	ne
 8014744:	4601      	movne	r1, r0
 8014746:	4638      	mov	r0, r7
 8014748:	f7ff fec2 	bl	80144d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 801474c:	4410      	add	r0, r2
 801474e:	1b00      	subs	r0, r0, r4
 8014750:	b003      	add	sp, #12
 8014752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014756:	bf00      	nop
 8014758:	01000c00 	tsteq	r0, r0, lsl #24
 801475c:	0801d122 	stmdaeq	r1, {r1, r5, r8, ip, lr, pc}
 8014760:	0801d13f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, ip, lr, pc}
 8014764:	2000f77c 	andcs	pc, r0, ip, ror r7	; <UNPREDICTABLE>

08014768 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 8014768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801476a:	2301      	movs	r3, #1
 801476c:	460f      	mov	r7, r1
 801476e:	4910      	ldr	r1, [pc, #64]	; (80147b0 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 8014770:	4606      	mov	r6, r0
 8014772:	f7ff fead 	bl	80144d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8014776:	490f      	ldr	r1, [pc, #60]	; (80147b4 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 8014778:	4b0f      	ldr	r3, [pc, #60]	; (80147b8 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x50>)
 801477a:	5013      	str	r3, [r2, r0]
 801477c:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8014780:	1815      	adds	r5, r2, r0
 8014782:	6849      	ldr	r1, [r1, #4]
 8014784:	9101      	str	r1, [sp, #4]
 8014786:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 801478a:	606b      	str	r3, [r5, #4]
 801478c:	4608      	mov	r0, r1
 801478e:	4614      	mov	r4, r2
 8014790:	f7ff fdf8 	bl	8014384 <strlen>
 8014794:	1c83      	adds	r3, r0, #2
 8014796:	ba5b      	rev16	r3, r3
 8014798:	812b      	strh	r3, [r5, #8]
 801479a:	f105 020a 	add.w	r2, r5, #10
 801479e:	9901      	ldr	r1, [sp, #4]
 80147a0:	2301      	movs	r3, #1
 80147a2:	4630      	mov	r0, r6
 80147a4:	f7ff fe94 	bl	80144d0 <MDNS::WriteDnsName(char const*, char*, bool)>
 80147a8:	4410      	add	r0, r2
 80147aa:	1b00      	subs	r0, r0, r4
 80147ac:	b003      	add	sp, #12
 80147ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147b0:	0801d12d 	stmdaeq	r1, {r0, r2, r3, r5, r8, ip, lr, pc}
 80147b4:	2000f77c 	andcs	pc, r0, ip, ror r7	; <UNPREDICTABLE>
 80147b8:	01000c00 	tsteq	r0, r0, lsl #24

080147bc <MDNS::CreateMDNSMessage(unsigned int)>:
 80147bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147be:	4d1a      	ldr	r5, [pc, #104]	; (8014828 <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 80147c0:	2384      	movs	r3, #132	; 0x84
 80147c2:	80eb      	strh	r3, [r5, #6]
 80147c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80147c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80147cc:	f105 0410 	add.w	r4, r5, #16
 80147d0:	e9c5 2302 	strd	r2, r3, [r5, #8]
 80147d4:	4622      	mov	r2, r4
 80147d6:	4606      	mov	r6, r0
 80147d8:	460f      	mov	r7, r1
 80147da:	f7ff ff05 	bl	80145e8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 80147de:	4404      	add	r4, r0
 80147e0:	4622      	mov	r2, r4
 80147e2:	4639      	mov	r1, r7
 80147e4:	4630      	mov	r0, r6
 80147e6:	f7ff ff43 	bl	8014670 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 80147ea:	4404      	add	r4, r0
 80147ec:	4622      	mov	r2, r4
 80147ee:	4639      	mov	r1, r7
 80147f0:	4630      	mov	r0, r6
 80147f2:	f7ff ffb9 	bl	8014768 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 80147f6:	4404      	add	r4, r0
 80147f8:	4622      	mov	r2, r4
 80147fa:	4639      	mov	r1, r7
 80147fc:	4630      	mov	r0, r6
 80147fe:	f7ff ff75 	bl	80146ec <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 8014802:	4a0a      	ldr	r2, [pc, #40]	; (801482c <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 8014804:	f852 3b10 	ldr.w	r3, [r2], #16
 8014808:	4420      	add	r0, r4
 801480a:	3b0c      	subs	r3, #12
 801480c:	1e44      	subs	r4, r0, #1
 801480e:	4619      	mov	r1, r3
 8014810:	3901      	subs	r1, #1
 8014812:	d204      	bcs.n	801481e <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 8014814:	18c4      	adds	r4, r0, r3
 8014816:	4b06      	ldr	r3, [pc, #24]	; (8014830 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 8014818:	1ae4      	subs	r4, r4, r3
 801481a:	602c      	str	r4, [r5, #0]
 801481c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801481e:	f812 6b01 	ldrb.w	r6, [r2], #1
 8014822:	f804 6f01 	strb.w	r6, [r4, #1]!
 8014826:	e7f3      	b.n	8014810 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 8014828:	2000f7a0 	andcs	pc, r0, r0, lsr #15
 801482c:	2000f578 	andcs	pc, r0, r8, ror r5	; <UNPREDICTABLE>
 8014830:	2000f7a4 	andcs	pc, r0, r4, lsr #15

08014834 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 8014834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014838:	4d41      	ldr	r5, [pc, #260]	; (8014940 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 801483a:	b085      	sub	sp, #20
 801483c:	682c      	ldr	r4, [r5, #0]
 801483e:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 8014842:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8014846:	4607      	mov	r7, r0
 8014848:	4616      	mov	r6, r2
 801484a:	b11c      	cbz	r4, 8014854 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x20>
 801484c:	692a      	ldr	r2, [r5, #16]
 801484e:	2a00      	cmp	r2, #0
 8014850:	d172      	bne.n	8014938 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x104>
 8014852:	2401      	movs	r4, #1
 8014854:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8014858:	ea4f 1804 	mov.w	r8, r4, lsl #4
 801485c:	8193      	strh	r3, [r2, #12]
 801485e:	f882 a00e 	strb.w	sl, [r2, #14]
 8014862:	2900      	cmp	r1, #0
 8014864:	d158      	bne.n	8014918 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xe4>
 8014866:	4b37      	ldr	r3, [pc, #220]	; (8014944 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 8014868:	6818      	ldr	r0, [r3, #0]
 801486a:	3020      	adds	r0, #32
 801486c:	f7ff fd8a 	bl	8014384 <strlen>
 8014870:	4683      	mov	fp, r0
 8014872:	4630      	mov	r0, r6
 8014874:	f7ff fd86 	bl	8014384 <strlen>
 8014878:	4458      	add	r0, fp
 801487a:	3001      	adds	r0, #1
 801487c:	f003 fc5a 	bl	8018134 <operator new[](unsigned int)>
 8014880:	4b30      	ldr	r3, [pc, #192]	; (8014944 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 8014882:	f845 0008 	str.w	r0, [r5, r8]
 8014886:	6819      	ldr	r1, [r3, #0]
 8014888:	3120      	adds	r1, #32
 801488a:	f7ff fd90 	bl	80143ae <strcpy.isra.0>
 801488e:	f855 0008 	ldr.w	r0, [r5, r8]
 8014892:	4631      	mov	r1, r6
 8014894:	f7ff fd93 	bl	80143be <strcat.isra.0>
 8014898:	4631      	mov	r1, r6
 801489a:	4638      	mov	r0, r7
 801489c:	f7ff fe0a 	bl	80144b4 <MDNS::FindFirstDotFromRight(char const*) const>
 80148a0:	9003      	str	r0, [sp, #12]
 80148a2:	f7ff fd6f 	bl	8014384 <strlen>
 80148a6:	300d      	adds	r0, #13
 80148a8:	f003 fc44 	bl	8018134 <operator new[](unsigned int)>
 80148ac:	eb05 0b08 	add.w	fp, r5, r8
 80148b0:	9903      	ldr	r1, [sp, #12]
 80148b2:	f8cb 0004 	str.w	r0, [fp, #4]
 80148b6:	f7ff fd7a 	bl	80143ae <strcpy.isra.0>
 80148ba:	4923      	ldr	r1, [pc, #140]	; (8014948 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 80148bc:	f8db 0004 	ldr.w	r0, [fp, #4]
 80148c0:	f7ff fd7d 	bl	80143be <strcat.isra.0>
 80148c4:	4921      	ldr	r1, [pc, #132]	; (801494c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 80148c6:	4b22      	ldr	r3, [pc, #136]	; (8014950 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 80148c8:	f8db 0004 	ldr.w	r0, [fp, #4]
 80148cc:	f1ba 0f01 	cmp.w	sl, #1
 80148d0:	bf18      	it	ne
 80148d2:	4619      	movne	r1, r3
 80148d4:	f7ff fd73 	bl	80143be <strcat.isra.0>
 80148d8:	f1b9 0f00 	cmp.w	r9, #0
 80148dc:	d00a      	beq.n	80148f4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xc0>
 80148de:	4648      	mov	r0, r9
 80148e0:	f7ff fd50 	bl	8014384 <strlen>
 80148e4:	3001      	adds	r0, #1
 80148e6:	f003 fc25 	bl	8018134 <operator new[](unsigned int)>
 80148ea:	4649      	mov	r1, r9
 80148ec:	f8cb 0008 	str.w	r0, [fp, #8]
 80148f0:	f7ff fd5d 	bl	80143ae <strcpy.isra.0>
 80148f4:	4621      	mov	r1, r4
 80148f6:	4638      	mov	r0, r7
 80148f8:	f7ff ff60 	bl	80147bc <MDNS::CreateMDNSMessage(unsigned int)>
 80148fc:	4915      	ldr	r1, [pc, #84]	; (8014954 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 80148fe:	4816      	ldr	r0, [pc, #88]	; (8014958 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 8014900:	f831 2b04 	ldrh.w	r2, [r1], #4
 8014904:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8014908:	9300      	str	r3, [sp, #0]
 801490a:	4b14      	ldr	r3, [pc, #80]	; (801495c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x128>)
 801490c:	7800      	ldrb	r0, [r0, #0]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	f7ff fc88 	bl	8014224 <udp_send>
 8014914:	2001      	movs	r0, #1
 8014916:	e010      	b.n	801493a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x106>
 8014918:	4608      	mov	r0, r1
 801491a:	9103      	str	r1, [sp, #12]
 801491c:	f7ff fd32 	bl	8014384 <strlen>
 8014920:	4683      	mov	fp, r0
 8014922:	4630      	mov	r0, r6
 8014924:	f7ff fd2e 	bl	8014384 <strlen>
 8014928:	4458      	add	r0, fp
 801492a:	3001      	adds	r0, #1
 801492c:	f003 fc02 	bl	8018134 <operator new[](unsigned int)>
 8014930:	9903      	ldr	r1, [sp, #12]
 8014932:	f845 0008 	str.w	r0, [r5, r8]
 8014936:	e7a8      	b.n	801488a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x56>
 8014938:	2000      	movs	r0, #0
 801493a:	b005      	add	sp, #20
 801493c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014940:	2000f77c 	andcs	pc, r0, ip, ror r7	; <UNPREDICTABLE>
 8014944:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 8014948:	0801add7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, sl, fp, sp, pc}
 801494c:	0801d122 	stmdaeq	r1, {r1, r5, r8, ip, lr, pc}
 8014950:	0801d13f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, ip, lr, pc}
 8014954:	2000f7a0 	andcs	pc, r0, r0, lsr #15
 8014958:	2000001c 	andcs	r0, r0, ip, lsl r0
 801495c:	2000f574 	andcs	pc, r0, r4, ror r5	; <UNPREDICTABLE>

08014960 <MDNS::HandleRequest(unsigned short)>:
 8014960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014964:	b0c5      	sub	sp, #276	; 0x114
 8014966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014a4c <MDNS::HandleRequest(unsigned short)+0xec>
 801496a:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8014a50 <MDNS::HandleRequest(unsigned short)+0xf0>
 801496e:	9103      	str	r1, [sp, #12]
 8014970:	4605      	mov	r5, r0
 8014972:	2700      	movs	r7, #0
 8014974:	f04f 080c 	mov.w	r8, #12
 8014978:	9b03      	ldr	r3, [sp, #12]
 801497a:	42bb      	cmp	r3, r7
 801497c:	d802      	bhi.n	8014984 <MDNS::HandleRequest(unsigned short)+0x24>
 801497e:	b045      	add	sp, #276	; 0x114
 8014980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014984:	f8da 1000 	ldr.w	r1, [sl]
 8014988:	aa04      	add	r2, sp, #16
 801498a:	4441      	add	r1, r8
 801498c:	4628      	mov	r0, r5
 801498e:	f7ff fd4f 	bl	8014430 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8014992:	f8da 2000 	ldr.w	r2, [sl]
 8014996:	4440      	add	r0, r8
 8014998:	1813      	adds	r3, r2, r0
 801499a:	f100 0804 	add.w	r8, r0, #4
 801499e:	885b      	ldrh	r3, [r3, #2]
 80149a0:	ba5b      	rev16	r3, r3
 80149a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80149a6:	2b01      	cmp	r3, #1
 80149a8:	d13d      	bne.n	8014a26 <MDNS::HandleRequest(unsigned short)+0xc6>
 80149aa:	5a14      	ldrh	r4, [r2, r0]
 80149ac:	4b20      	ldr	r3, [pc, #128]	; (8014a30 <MDNS::HandleRequest(unsigned short)+0xd0>)
 80149ae:	ba64      	rev16	r4, r4
 80149b0:	6818      	ldr	r0, [r3, #0]
 80149b2:	a904      	add	r1, sp, #16
 80149b4:	b2a4      	uxth	r4, r4
 80149b6:	f7ff fced 	bl	8014394 <strcmp>
 80149ba:	b968      	cbnz	r0, 80149d8 <MDNS::HandleRequest(unsigned short)+0x78>
 80149bc:	2c01      	cmp	r4, #1
 80149be:	d10b      	bne.n	80149d8 <MDNS::HandleRequest(unsigned short)+0x78>
 80149c0:	491c      	ldr	r1, [pc, #112]	; (8014a34 <MDNS::HandleRequest(unsigned short)+0xd4>)
 80149c2:	481d      	ldr	r0, [pc, #116]	; (8014a38 <MDNS::HandleRequest(unsigned short)+0xd8>)
 80149c4:	f831 2b04 	ldrh.w	r2, [r1], #4
 80149c8:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80149cc:	9300      	str	r3, [sp, #0]
 80149ce:	4b1b      	ldr	r3, [pc, #108]	; (8014a3c <MDNS::HandleRequest(unsigned short)+0xdc>)
 80149d0:	7800      	ldrb	r0, [r0, #0]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	f7ff fc26 	bl	8014224 <udp_send>
 80149d8:	4819      	ldr	r0, [pc, #100]	; (8014a40 <MDNS::HandleRequest(unsigned short)+0xe0>)
 80149da:	4e1a      	ldr	r6, [pc, #104]	; (8014a44 <MDNS::HandleRequest(unsigned short)+0xe4>)
 80149dc:	a904      	add	r1, sp, #16
 80149de:	f7ff fcd9 	bl	8014394 <strcmp>
 80149e2:	f04f 0900 	mov.w	r9, #0
 80149e6:	9002      	str	r0, [sp, #8]
 80149e8:	6833      	ldr	r3, [r6, #0]
 80149ea:	b1c3      	cbz	r3, 8014a1e <MDNS::HandleRequest(unsigned short)+0xbe>
 80149ec:	9b02      	ldr	r3, [sp, #8]
 80149ee:	b123      	cbz	r3, 80149fa <MDNS::HandleRequest(unsigned short)+0x9a>
 80149f0:	6870      	ldr	r0, [r6, #4]
 80149f2:	a904      	add	r1, sp, #16
 80149f4:	f7ff fcce 	bl	8014394 <strcmp>
 80149f8:	b988      	cbnz	r0, 8014a1e <MDNS::HandleRequest(unsigned short)+0xbe>
 80149fa:	2c0c      	cmp	r4, #12
 80149fc:	d10f      	bne.n	8014a1e <MDNS::HandleRequest(unsigned short)+0xbe>
 80149fe:	4649      	mov	r1, r9
 8014a00:	4628      	mov	r0, r5
 8014a02:	f7ff fedb 	bl	80147bc <MDNS::CreateMDNSMessage(unsigned int)>
 8014a06:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8014a0a:	9300      	str	r3, [sp, #0]
 8014a0c:	480a      	ldr	r0, [pc, #40]	; (8014a38 <MDNS::HandleRequest(unsigned short)+0xd8>)
 8014a0e:	4b0b      	ldr	r3, [pc, #44]	; (8014a3c <MDNS::HandleRequest(unsigned short)+0xdc>)
 8014a10:	f8bb 2000 	ldrh.w	r2, [fp]
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	490c      	ldr	r1, [pc, #48]	; (8014a48 <MDNS::HandleRequest(unsigned short)+0xe8>)
 8014a18:	7800      	ldrb	r0, [r0, #0]
 8014a1a:	f7ff fc03 	bl	8014224 <udp_send>
 8014a1e:	3610      	adds	r6, #16
 8014a20:	f1b9 0f00 	cmp.w	r9, #0
 8014a24:	d001      	beq.n	8014a2a <MDNS::HandleRequest(unsigned short)+0xca>
 8014a26:	3701      	adds	r7, #1
 8014a28:	e7a6      	b.n	8014978 <MDNS::HandleRequest(unsigned short)+0x18>
 8014a2a:	f04f 0901 	mov.w	r9, #1
 8014a2e:	e7db      	b.n	80149e8 <MDNS::HandleRequest(unsigned short)+0x88>
 8014a30:	2000f9a4 	andcs	pc, r0, r4, lsr #19
 8014a34:	2000f578 	andcs	pc, r0, r8, ror r5	; <UNPREDICTABLE>
 8014a38:	2000001c 	andcs	r0, r0, ip, lsl r0
 8014a3c:	2000f574 	andcs	pc, r0, r4, ror r5	; <UNPREDICTABLE>
 8014a40:	0801d12d 	stmdaeq	r1, {r0, r2, r3, r5, r8, ip, lr, pc}
 8014a44:	2000f77c 	andcs	pc, r0, ip, ror r7	; <UNPREDICTABLE>
 8014a48:	2000f7a4 	andcs	pc, r0, r4, lsr #15
 8014a4c:	2000f9a8 	andcs	pc, r0, r8, lsr #19
 8014a50:	2000f7a0 	andcs	pc, r0, r0, lsr #15

08014a54 <MDNS::Parse()>:
 8014a54:	4b08      	ldr	r3, [pc, #32]	; (8014a78 <MDNS::Parse()+0x24>)
 8014a56:	681a      	ldr	r2, [r3, #0]
 8014a58:	8853      	ldrh	r3, [r2, #2]
 8014a5a:	ba5b      	rev16	r3, r3
 8014a5c:	b299      	uxth	r1, r3
 8014a5e:	041b      	lsls	r3, r3, #16
 8014a60:	d408      	bmi.n	8014a74 <MDNS::Parse()+0x20>
 8014a62:	0b89      	lsrs	r1, r1, #14
 8014a64:	d106      	bne.n	8014a74 <MDNS::Parse()+0x20>
 8014a66:	8891      	ldrh	r1, [r2, #4]
 8014a68:	b28b      	uxth	r3, r1
 8014a6a:	b11b      	cbz	r3, 8014a74 <MDNS::Parse()+0x20>
 8014a6c:	ba49      	rev16	r1, r1
 8014a6e:	b289      	uxth	r1, r1
 8014a70:	f7ff bf76 	b.w	8014960 <MDNS::HandleRequest(unsigned short)>
 8014a74:	4770      	bx	lr
 8014a76:	bf00      	nop
 8014a78:	2000f9a8 	andcs	pc, r0, r8, lsr #19

08014a7c <MDNS::Run()>:
 8014a7c:	b538      	push	{r3, r4, r5, lr}
 8014a7e:	4d0c      	ldr	r5, [pc, #48]	; (8014ab0 <MDNS::Run()+0x34>)
 8014a80:	490c      	ldr	r1, [pc, #48]	; (8014ab4 <MDNS::Run()+0x38>)
 8014a82:	4a0d      	ldr	r2, [pc, #52]	; (8014ab8 <MDNS::Run()+0x3c>)
 8014a84:	4604      	mov	r4, r0
 8014a86:	480d      	ldr	r0, [pc, #52]	; (8014abc <MDNS::Run()+0x40>)
 8014a88:	462b      	mov	r3, r5
 8014a8a:	7800      	ldrb	r0, [r0, #0]
 8014a8c:	f7ff fba4 	bl	80141d8 <udp_recv2>
 8014a90:	4b0b      	ldr	r3, [pc, #44]	; (8014ac0 <MDNS::Run()+0x44>)
 8014a92:	8829      	ldrh	r1, [r5, #0]
 8014a94:	8018      	strh	r0, [r3, #0]
 8014a96:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8014a9a:	4299      	cmp	r1, r3
 8014a9c:	d106      	bne.n	8014aac <MDNS::Run()+0x30>
 8014a9e:	280c      	cmp	r0, #12
 8014aa0:	d904      	bls.n	8014aac <MDNS::Run()+0x30>
 8014aa2:	4620      	mov	r0, r4
 8014aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014aa8:	f7ff bfd4 	b.w	8014a54 <MDNS::Parse()>
 8014aac:	bd38      	pop	{r3, r4, r5, pc}
 8014aae:	bf00      	nop
 8014ab0:	2000f570 	andcs	pc, r0, r0, ror r5	; <UNPREDICTABLE>
 8014ab4:	2000f9a8 	andcs	pc, r0, r8, lsr #19
 8014ab8:	2000f56c 	andcs	pc, r0, ip, ror #10
 8014abc:	2000001c 	andcs	r0, r0, ip, lsl r0
 8014ac0:	2000f79c 	mulcs	r0, ip, r7

08014ac4 <MDNS::Print()>:
 8014ac4:	b510      	push	{r4, lr}
 8014ac6:	4816      	ldr	r0, [pc, #88]	; (8014b20 <MDNS::Print()+0x5c>)
 8014ac8:	f7f5 fcf2 	bl	800a4b0 <printf>
 8014acc:	4b15      	ldr	r3, [pc, #84]	; (8014b24 <MDNS::Print()+0x60>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	3301      	adds	r3, #1
 8014ad2:	d104      	bne.n	8014ade <MDNS::Print()+0x1a>
 8014ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ad8:	4813      	ldr	r0, [pc, #76]	; (8014b28 <MDNS::Print()+0x64>)
 8014ada:	f7f5 bce9 	b.w	800a4b0 <printf>
 8014ade:	4b13      	ldr	r3, [pc, #76]	; (8014b2c <MDNS::Print()+0x68>)
 8014ae0:	4c13      	ldr	r4, [pc, #76]	; (8014b30 <MDNS::Print()+0x6c>)
 8014ae2:	6819      	ldr	r1, [r3, #0]
 8014ae4:	4813      	ldr	r0, [pc, #76]	; (8014b34 <MDNS::Print()+0x70>)
 8014ae6:	f7f5 fce3 	bl	800a4b0 <printf>
 8014aea:	6823      	ldr	r3, [r4, #0]
 8014aec:	b14b      	cbz	r3, 8014b02 <MDNS::Print()+0x3e>
 8014aee:	4a12      	ldr	r2, [pc, #72]	; (8014b38 <MDNS::Print()+0x74>)
 8014af0:	68a3      	ldr	r3, [r4, #8]
 8014af2:	6861      	ldr	r1, [r4, #4]
 8014af4:	4811      	ldr	r0, [pc, #68]	; (8014b3c <MDNS::Print()+0x78>)
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	bf08      	it	eq
 8014afa:	4613      	moveq	r3, r2
 8014afc:	89a2      	ldrh	r2, [r4, #12]
 8014afe:	f7f5 fcd7 	bl	800a4b0 <printf>
 8014b02:	6923      	ldr	r3, [r4, #16]
 8014b04:	b15b      	cbz	r3, 8014b1e <MDNS::Print()+0x5a>
 8014b06:	69a3      	ldr	r3, [r4, #24]
 8014b08:	4a0b      	ldr	r2, [pc, #44]	; (8014b38 <MDNS::Print()+0x74>)
 8014b0a:	6961      	ldr	r1, [r4, #20]
 8014b0c:	480b      	ldr	r0, [pc, #44]	; (8014b3c <MDNS::Print()+0x78>)
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	bf08      	it	eq
 8014b12:	4613      	moveq	r3, r2
 8014b14:	8ba2      	ldrh	r2, [r4, #28]
 8014b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b1a:	f7f5 bcc9 	b.w	800a4b0 <printf>
 8014b1e:	bd10      	pop	{r4, pc}
 8014b20:	0801d14a 	stmdaeq	r1, {r1, r3, r6, r8, ip, lr, pc}
 8014b24:	2000001c 	andcs	r0, r0, ip, lsl r0
 8014b28:	0801d150 	stmdaeq	r1, {r4, r6, r8, ip, lr, pc}
 8014b2c:	2000f9a4 	andcs	pc, r0, r4, lsr #19
 8014b30:	2000f77c 	andcs	pc, r0, ip, ror r7	; <UNPREDICTABLE>
 8014b34:	0801d15e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, ip, lr, pc}
 8014b38:	0801b145 	stmdaeq	r1, {r0, r2, r6, r8, ip, sp, pc}
 8014b3c:	0801d16a 	stmdaeq	r1, {r1, r3, r5, r6, r8, ip, lr, pc}

08014b40 <strncpy.constprop.0.isra.0>:
 8014b40:	3901      	subs	r1, #1
 8014b42:	233f      	movs	r3, #63	; 0x3f
 8014b44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014b48:	b92a      	cbnz	r2, 8014b56 <strncpy.constprop.0.isra.0+0x16>
 8014b4a:	4403      	add	r3, r0
 8014b4c:	4298      	cmp	r0, r3
 8014b4e:	d006      	beq.n	8014b5e <strncpy.constprop.0.isra.0+0x1e>
 8014b50:	f800 2b01 	strb.w	r2, [r0], #1
 8014b54:	e7fa      	b.n	8014b4c <strncpy.constprop.0.isra.0+0xc>
 8014b56:	3b01      	subs	r3, #1
 8014b58:	f800 2b01 	strb.w	r2, [r0], #1
 8014b5c:	d1f2      	bne.n	8014b44 <strncpy.constprop.0.isra.0+0x4>
 8014b5e:	4770      	bx	lr

08014b60 <Network::Network()>:
 8014b60:	4a11      	ldr	r2, [pc, #68]	; (8014ba8 <Network::Network()+0x48>)
 8014b62:	2300      	movs	r3, #0
 8014b64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8014b68:	6010      	str	r0, [r2, #0]
 8014b6a:	e9c0 332e 	strd	r3, r3, [r0, #184]	; 0xb8
 8014b6e:	2201      	movs	r2, #1
 8014b70:	e9c0 3330 	strd	r3, r3, [r0, #192]	; 0xc0
 8014b74:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8014b78:	e9c0 2100 	strd	r2, r1, [r0]
 8014b7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014b80:	490a      	ldr	r1, [pc, #40]	; (8014bac <Network::Network()+0x4c>)
 8014b82:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8014b86:	2200      	movs	r2, #0
 8014b88:	6102      	str	r2, [r0, #16]
 8014b8a:	61c3      	str	r3, [r0, #28]
 8014b8c:	f880 3020 	strb.w	r3, [r0, #32]
 8014b90:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8014b94:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
 8014b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b9c:	f802 3f01 	strb.w	r3, [r2, #1]!
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d1f9      	bne.n	8014b98 <Network::Network()+0x38>
 8014ba4:	4770      	bx	lr
 8014ba6:	bf00      	nop
 8014ba8:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 8014bac:	0801d175 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, ip, lr, pc}

08014bb0 <Network::Shutdown()>:
 8014bb0:	b508      	push	{r3, lr}
 8014bb2:	f001 fd4d 	bl	8016650 <network::display_emac_shutdown()>
 8014bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014bba:	f7f3 bb43 	b.w	8008244 <net_shutdown>

08014bbe <Network::Begin(unsigned short)>:
 8014bbe:	4608      	mov	r0, r1
 8014bc0:	f7ff ba9a 	b.w	80140f8 <udp_bind>

08014bc4 <Network::End(unsigned short)>:
 8014bc4:	4608      	mov	r0, r1
 8014bc6:	f7ff bab1 	b.w	801412c <udp_unbind>

08014bca <Network::MacAddressCopyTo(unsigned char*)>:
 8014bca:	f100 039f 	add.w	r3, r0, #159	; 0x9f
 8014bce:	3901      	subs	r1, #1
 8014bd0:	30a5      	adds	r0, #165	; 0xa5
 8014bd2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8014bd6:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014bda:	4283      	cmp	r3, r0
 8014bdc:	d1f9      	bne.n	8014bd2 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 8014bde:	4770      	bx	lr

08014be0 <Network::JoinGroup(int, unsigned int)>:
 8014be0:	4610      	mov	r0, r2
 8014be2:	f001 b813 	b.w	8015c0c <igmp_join>

08014be6 <Network::LeaveGroup(int, unsigned int)>:
 8014be6:	4610      	mov	r0, r2
 8014be8:	f001 b83c 	b.w	8015c64 <igmp_leave>

08014bec <Network::SetDefaultIp()>:
 8014bec:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8014bf0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 8014bf4:	041b      	lsls	r3, r3, #16
 8014bf6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014bfa:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 8014bfe:	3302      	adds	r3, #2
 8014c00:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8014c04:	22ff      	movs	r2, #255	; 0xff
 8014c06:	e9c0 3206 	strd	r3, r2, [r0, #24]
 8014c0a:	6143      	str	r3, [r0, #20]
 8014c0c:	4770      	bx	lr
	...

08014c10 <Network::Init(NetworkParamsStore*)>:
 8014c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c14:	b0a5      	sub	sp, #148	; 0x94
 8014c16:	4604      	mov	r4, r0
 8014c18:	a80b      	add	r0, sp, #44	; 0x2c
 8014c1a:	f000 fae3 	bl	80151e4 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8014c1e:	a80b      	add	r0, sp, #44	; 0x2c
 8014c20:	f000 faec 	bl	80151fc <NetworkParams::Load()>
 8014c24:	b110      	cbz	r0, 8014c2c <Network::Init(NetworkParamsStore*)+0x1c>
 8014c26:	a80b      	add	r0, sp, #44	; 0x2c
 8014c28:	f000 fcc3 	bl	80155b2 <NetworkParams::Dump()>
 8014c2c:	f001 fcf2 	bl	8016614 <network::display_emac_start()>
 8014c30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c32:	9308      	str	r3, [sp, #32]
 8014c34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c36:	9309      	str	r3, [sp, #36]	; 0x24
 8014c38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8014c3c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8014c40:	7163      	strb	r3, [r4, #5]
 8014c42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c44:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8014c48:	bf18      	it	ne
 8014c4a:	f8dd 2085 	ldrne.w	r2, [sp, #133]	; 0x85
 8014c4e:	60e2      	str	r2, [r4, #12]
 8014c50:	061b      	lsls	r3, r3, #24
 8014c52:	bf4c      	ite	mi
 8014c54:	f8dd 3089 	ldrmi.w	r3, [sp, #137]	; 0x89
 8014c58:	2300      	movpl	r3, #0
 8014c5a:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8014c5e:	6123      	str	r3, [r4, #16]
 8014c60:	4630      	mov	r0, r6
 8014c62:	f005 fadb 	bl	801a21c <emac_start(unsigned char*)>
 8014c66:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8014c6a:	f104 0720 	add.w	r7, r4, #32
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	f040 80c5 	bne.w	8014dfe <Network::Init(NetworkParamsStore*)+0x1ee>
 8014c74:	4982      	ldr	r1, [pc, #520]	; (8014e80 <Network::Init(NetworkParamsStore*)+0x270>)
 8014c76:	f104 001f 	add.w	r0, r4, #31
 8014c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c7e:	1c5d      	adds	r5, r3, #1
 8014c80:	2a00      	cmp	r2, #0
 8014c82:	f040 80b8 	bne.w	8014df6 <Network::Init(NetworkParamsStore*)+0x1e6>
 8014c86:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
 8014c8a:	0910      	lsrs	r0, r2, #4
 8014c8c:	2a9f      	cmp	r2, #159	; 0x9f
 8014c8e:	f002 020f 	and.w	r2, r2, #15
 8014c92:	bf94      	ite	ls
 8014c94:	3030      	addls	r0, #48	; 0x30
 8014c96:	3037      	addhi	r0, #55	; 0x37
 8014c98:	18e1      	adds	r1, r4, r3
 8014c9a:	2a09      	cmp	r2, #9
 8014c9c:	4425      	add	r5, r4
 8014c9e:	bf94      	ite	ls
 8014ca0:	3230      	addls	r2, #48	; 0x30
 8014ca2:	3237      	addhi	r2, #55	; 0x37
 8014ca4:	f881 0020 	strb.w	r0, [r1, #32]
 8014ca8:	f885 2020 	strb.w	r2, [r5, #32]
 8014cac:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
 8014cb0:	f103 0e02 	add.w	lr, r3, #2
 8014cb4:	0910      	lsrs	r0, r2, #4
 8014cb6:	2a9f      	cmp	r2, #159	; 0x9f
 8014cb8:	eb04 050e 	add.w	r5, r4, lr
 8014cbc:	f002 020f 	and.w	r2, r2, #15
 8014cc0:	bf94      	ite	ls
 8014cc2:	3030      	addls	r0, #48	; 0x30
 8014cc4:	3037      	addhi	r0, #55	; 0x37
 8014cc6:	f103 0c03 	add.w	ip, r3, #3
 8014cca:	f885 0020 	strb.w	r0, [r5, #32]
 8014cce:	2a09      	cmp	r2, #9
 8014cd0:	eb04 000c 	add.w	r0, r4, ip
 8014cd4:	bf94      	ite	ls
 8014cd6:	3230      	addls	r2, #48	; 0x30
 8014cd8:	3237      	addhi	r2, #55	; 0x37
 8014cda:	f880 2020 	strb.w	r2, [r0, #32]
 8014cde:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8014ce2:	1d1d      	adds	r5, r3, #4
 8014ce4:	0910      	lsrs	r0, r2, #4
 8014ce6:	2a9f      	cmp	r2, #159	; 0x9f
 8014ce8:	f103 0305 	add.w	r3, r3, #5
 8014cec:	f002 020f 	and.w	r2, r2, #15
 8014cf0:	bf94      	ite	ls
 8014cf2:	3030      	addls	r0, #48	; 0x30
 8014cf4:	3037      	addhi	r0, #55	; 0x37
 8014cf6:	4423      	add	r3, r4
 8014cf8:	2a09      	cmp	r2, #9
 8014cfa:	4425      	add	r5, r4
 8014cfc:	bf94      	ite	ls
 8014cfe:	3230      	addls	r2, #48	; 0x30
 8014d00:	3237      	addhi	r2, #55	; 0x37
 8014d02:	f885 0020 	strb.w	r0, [r5, #32]
 8014d06:	f883 2020 	strb.w	r2, [r3, #32]
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	f881 3026 	strb.w	r3, [r1, #38]	; 0x26
 8014d10:	f001 f80b 	bl	8015d2a <net::link_register_read()>
 8014d14:	7963      	ldrb	r3, [r4, #5]
 8014d16:	6020      	str	r0, [r4, #0]
 8014d18:	2800      	cmp	r0, #0
 8014d1a:	f040 809b 	bne.w	8014e54 <Network::Init(NetworkParamsStore*)+0x244>
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	f040 80a9 	bne.w	8014e76 <Network::Init(NetworkParamsStore*)+0x266>
 8014d24:	9b08      	ldr	r3, [sp, #32]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d172      	bne.n	8014e10 <Network::Init(NetworkParamsStore*)+0x200>
 8014d2a:	4620      	mov	r0, r4
 8014d2c:	f7ff ff5e 	bl	8014bec <Network::SetDefaultIp()>
 8014d30:	6963      	ldr	r3, [r4, #20]
 8014d32:	69e2      	ldr	r2, [r4, #28]
 8014d34:	9308      	str	r3, [sp, #32]
 8014d36:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 8014d3a:	f104 0905 	add.w	r9, r4, #5
 8014d3e:	f104 0a07 	add.w	sl, r4, #7
 8014d42:	464b      	mov	r3, r9
 8014d44:	f8cd a000 	str.w	sl, [sp]
 8014d48:	463a      	mov	r2, r7
 8014d4a:	a908      	add	r1, sp, #32
 8014d4c:	4630      	mov	r0, r6
 8014d4e:	f7f3 fa2d 	bl	80081ac <net_init>
 8014d52:	79e3      	ldrb	r3, [r4, #7]
 8014d54:	b113      	cbz	r3, 8014d5c <Network::Init(NetworkParamsStore*)+0x14c>
 8014d56:	2004      	movs	r0, #4
 8014d58:	f001 fc80 	bl	801665c <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8014d5c:	f89d 508d 	ldrb.w	r5, [sp, #141]	; 0x8d
 8014d60:	f89d 308d 	ldrb.w	r3, [sp, #141]	; 0x8d
 8014d64:	9302      	str	r3, [sp, #8]
 8014d66:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8014d6a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8014d6e:	9303      	str	r3, [sp, #12]
 8014d70:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8014e88 <Network::Init(NetworkParamsStore*)+0x278>
 8014d74:	f8df b114 	ldr.w	fp, [pc, #276]	; 8014e8c <Network::Init(NetworkParamsStore*)+0x27c>
 8014d78:	00ab      	lsls	r3, r5, #2
 8014d7a:	9305      	str	r3, [sp, #20]
 8014d7c:	79e3      	ldrb	r3, [r4, #7]
 8014d7e:	b37b      	cbz	r3, 8014de0 <Network::Init(NetworkParamsStore*)+0x1d0>
 8014d80:	9b02      	ldr	r3, [sp, #8]
 8014d82:	b36b      	cbz	r3, 8014de0 <Network::Init(NetworkParamsStore*)+0x1d0>
 8014d84:	9b03      	ldr	r3, [sp, #12]
 8014d86:	b35b      	cbz	r3, 8014de0 <Network::Init(NetworkParamsStore*)+0x1d0>
 8014d88:	2104      	movs	r1, #4
 8014d8a:	f8d8 0000 	ldr.w	r0, [r8]
 8014d8e:	f003 f8cd 	bl	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 8014d92:	2003      	movs	r0, #3
 8014d94:	f001 fc62 	bl	801665c <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8014d98:	2000      	movs	r0, #0
 8014d9a:	f003 fba7 	bl	80184ec <time>
 8014d9e:	9004      	str	r0, [sp, #16]
 8014da0:	2000      	movs	r0, #0
 8014da2:	f003 fba3 	bl	80184ec <time>
 8014da6:	9b04      	ldr	r3, [sp, #16]
 8014da8:	4936      	ldr	r1, [pc, #216]	; (8014e84 <Network::Init(NetworkParamsStore*)+0x274>)
 8014daa:	1ac0      	subs	r0, r0, r3
 8014dac:	9b05      	ldr	r3, [sp, #20]
 8014dae:	4298      	cmp	r0, r3
 8014db0:	db36      	blt.n	8014e20 <Network::Init(NetworkParamsStore*)+0x210>
 8014db2:	2001      	movs	r0, #1
 8014db4:	f001 fc52 	bl	801665c <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8014db8:	f8d8 0000 	ldr.w	r0, [r8]
 8014dbc:	2101      	movs	r1, #1
 8014dbe:	f003 f8b5 	bl	8017f2c <LedBlink::SetMode(ledblink::Mode)>
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	7163      	strb	r3, [r4, #5]
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	71e3      	strb	r3, [r4, #7]
 8014dca:	f8cd a000 	str.w	sl, [sp]
 8014dce:	464b      	mov	r3, r9
 8014dd0:	463a      	mov	r2, r7
 8014dd2:	a908      	add	r1, sp, #32
 8014dd4:	4630      	mov	r0, r6
 8014dd6:	f7f3 f9e9 	bl	80081ac <net_init>
 8014dda:	7963      	ldrb	r3, [r4, #5]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d0cd      	beq.n	8014d7c <Network::Init(NetworkParamsStore*)+0x16c>
 8014de0:	9b08      	ldr	r3, [sp, #32]
 8014de2:	6163      	str	r3, [r4, #20]
 8014de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014de6:	61e3      	str	r3, [r4, #28]
 8014de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dea:	61a3      	str	r3, [r4, #24]
 8014dec:	f001 fc18 	bl	8016620 <network::display_ip()>
 8014df0:	b025      	add	sp, #148	; 0x94
 8014df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014df6:	f800 2f01 	strb.w	r2, [r0, #1]!
 8014dfa:	462b      	mov	r3, r5
 8014dfc:	e73d      	b.n	8014c7a <Network::Init(NetworkParamsStore*)+0x6a>
 8014dfe:	f10d 0145 	add.w	r1, sp, #69	; 0x45
 8014e02:	4638      	mov	r0, r7
 8014e04:	f7ff fe9c 	bl	8014b40 <strncpy.constprop.0.isra.0>
 8014e08:	2300      	movs	r3, #0
 8014e0a:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 8014e0e:	e77f      	b.n	8014d10 <Network::Init(NetworkParamsStore*)+0x100>
 8014e10:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8014e14:	69e1      	ldr	r1, [r4, #28]
 8014e16:	4053      	eors	r3, r2
 8014e18:	420b      	tst	r3, r1
 8014e1a:	bf18      	it	ne
 8014e1c:	920a      	strne	r2, [sp, #40]	; 0x28
 8014e1e:	e78c      	b.n	8014d3a <Network::Init(NetworkParamsStore*)+0x12a>
 8014e20:	f8d8 3000 	ldr.w	r3, [r8]
 8014e24:	68da      	ldr	r2, [r3, #12]
 8014e26:	2a00      	cmp	r2, #0
 8014e28:	d0ba      	beq.n	8014da0 <Network::Init(NetworkParamsStore*)+0x190>
 8014e2a:	f8db 0000 	ldr.w	r0, [fp]
 8014e2e:	695d      	ldr	r5, [r3, #20]
 8014e30:	1b40      	subs	r0, r0, r5
 8014e32:	4282      	cmp	r2, r0
 8014e34:	d8b4      	bhi.n	8014da0 <Network::Init(NetworkParamsStore*)+0x190>
 8014e36:	f8db 0000 	ldr.w	r0, [fp]
 8014e3a:	6158      	str	r0, [r3, #20]
 8014e3c:	6918      	ldr	r0, [r3, #16]
 8014e3e:	2801      	cmp	r0, #1
 8014e40:	f080 0201 	eor.w	r2, r0, #1
 8014e44:	611a      	str	r2, [r3, #16]
 8014e46:	bf1a      	itte	ne
 8014e48:	2301      	movne	r3, #1
 8014e4a:	f8c1 3818 	strne.w	r3, [r1, #2072]	; 0x818
 8014e4e:	f8c1 0828 	streq.w	r0, [r1, #2088]	; 0x828
 8014e52:	e7a5      	b.n	8014da0 <Network::Init(NetworkParamsStore*)+0x190>
 8014e54:	b11b      	cbz	r3, 8014e5e <Network::Init(NetworkParamsStore*)+0x24e>
 8014e56:	2300      	movs	r3, #0
 8014e58:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8014e5c:	9308      	str	r3, [sp, #32]
 8014e5e:	2300      	movs	r3, #0
 8014e60:	f88d 301f 	strb.w	r3, [sp, #31]
 8014e64:	f10d 031f 	add.w	r3, sp, #31
 8014e68:	9300      	str	r3, [sp, #0]
 8014e6a:	463a      	mov	r2, r7
 8014e6c:	a908      	add	r1, sp, #32
 8014e6e:	4630      	mov	r0, r6
 8014e70:	f7f3 f99c 	bl	80081ac <net_init>
 8014e74:	e7b4      	b.n	8014de0 <Network::Init(NetworkParamsStore*)+0x1d0>
 8014e76:	2001      	movs	r0, #1
 8014e78:	f001 fbf0 	bl	801665c <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8014e7c:	e75d      	b.n	8014d3a <Network::Init(NetworkParamsStore*)+0x12a>
 8014e7e:	bf00      	nop
 8014e80:	0801d17a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, ip, lr, pc}
 8014e84:	40020000 	andmi	r0, r2, r0
 8014e88:	2000fd9c 	mulcs	r0, ip, sp
 8014e8c:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4

08014e90 <Network::SetIp(unsigned int)>:
 8014e90:	7943      	ldrb	r3, [r0, #5]
 8014e92:	b570      	push	{r4, r5, r6, lr}
 8014e94:	4604      	mov	r4, r0
 8014e96:	460d      	mov	r5, r1
 8014e98:	2600      	movs	r6, #0
 8014e9a:	b113      	cbz	r3, 8014ea2 <Network::SetIp(unsigned int)+0x12>
 8014e9c:	7146      	strb	r6, [r0, #5]
 8014e9e:	f7fe feb3 	bl	8013c08 <net_dhcp_release>
 8014ea2:	71e6      	strb	r6, [r4, #7]
 8014ea4:	b95d      	cbnz	r5, 8014ebe <Network::SetIp(unsigned int)+0x2e>
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	f7ff fea0 	bl	8014bec <Network::SetDefaultIp()>
 8014eac:	6960      	ldr	r0, [r4, #20]
 8014eae:	f7fe fe67 	bl	8013b80 <net_set_ip>
 8014eb2:	f001 fbb5 	bl	8016620 <network::display_ip()>
 8014eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014eba:	f001 bbb7 	b.w	801662c <network::display_netmask()>
 8014ebe:	4628      	mov	r0, r5
 8014ec0:	f7fe fe5e 	bl	8013b80 <net_set_ip>
 8014ec4:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8014ec8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014ecc:	2800      	cmp	r0, #0
 8014ece:	d0f0      	beq.n	8014eb2 <Network::SetIp(unsigned int)+0x22>
 8014ed0:	6803      	ldr	r3, [r0, #0]
 8014ed2:	4629      	mov	r1, r5
 8014ed4:	689b      	ldr	r3, [r3, #8]
 8014ed6:	4798      	blx	r3
 8014ed8:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8014edc:	6803      	ldr	r3, [r0, #0]
 8014ede:	2100      	movs	r1, #0
 8014ee0:	699b      	ldr	r3, [r3, #24]
 8014ee2:	4798      	blx	r3
 8014ee4:	e7e5      	b.n	8014eb2 <Network::SetIp(unsigned int)+0x22>

08014ee6 <Network::SetNetmask(unsigned int)>:
 8014ee6:	69c2      	ldr	r2, [r0, #28]
 8014ee8:	428a      	cmp	r2, r1
 8014eea:	b508      	push	{r3, lr}
 8014eec:	d00c      	beq.n	8014f08 <Network::SetNetmask(unsigned int)+0x22>
 8014eee:	61c1      	str	r1, [r0, #28]
 8014ef0:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8014ef4:	b110      	cbz	r0, 8014efc <Network::SetNetmask(unsigned int)+0x16>
 8014ef6:	6803      	ldr	r3, [r0, #0]
 8014ef8:	68db      	ldr	r3, [r3, #12]
 8014efa:	4798      	blx	r3
 8014efc:	f001 fb90 	bl	8016620 <network::display_ip()>
 8014f00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014f04:	f001 bb92 	b.w	801662c <network::display_netmask()>
 8014f08:	bd08      	pop	{r3, pc}

08014f0a <Network::SetGatewayIp(unsigned int)>:
 8014f0a:	6983      	ldr	r3, [r0, #24]
 8014f0c:	428b      	cmp	r3, r1
 8014f0e:	b513      	push	{r0, r1, r4, lr}
 8014f10:	4604      	mov	r4, r0
 8014f12:	d00f      	beq.n	8014f34 <Network::SetGatewayIp(unsigned int)+0x2a>
 8014f14:	4608      	mov	r0, r1
 8014f16:	9101      	str	r1, [sp, #4]
 8014f18:	f7fe fe42 	bl	8013ba0 <net_set_gw>
 8014f1c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8014f20:	b118      	cbz	r0, 8014f2a <Network::SetGatewayIp(unsigned int)+0x20>
 8014f22:	6803      	ldr	r3, [r0, #0]
 8014f24:	9901      	ldr	r1, [sp, #4]
 8014f26:	691b      	ldr	r3, [r3, #16]
 8014f28:	4798      	blx	r3
 8014f2a:	b002      	add	sp, #8
 8014f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f30:	f001 bb82 	b.w	8016638 <network::display_gateway()>
 8014f34:	b002      	add	sp, #8
 8014f36:	bd10      	pop	{r4, pc}

08014f38 <Network::SetHostName(char const*)>:
 8014f38:	b538      	push	{r3, r4, r5, lr}
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	f100 0520 	add.w	r5, r0, #32
 8014f40:	4628      	mov	r0, r5
 8014f42:	f7ff fdfd 	bl	8014b40 <strncpy.constprop.0.isra.0>
 8014f46:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 8014f50:	b158      	cbz	r0, 8014f6a <Network::SetHostName(char const*)+0x32>
 8014f52:	6803      	ldr	r3, [r0, #0]
 8014f54:	695c      	ldr	r4, [r3, #20]
 8014f56:	462b      	mov	r3, r5
 8014f58:	461a      	mov	r2, r3
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	7811      	ldrb	r1, [r2, #0]
 8014f5e:	2900      	cmp	r1, #0
 8014f60:	d1fa      	bne.n	8014f58 <Network::SetHostName(char const*)+0x20>
 8014f62:	1b52      	subs	r2, r2, r5
 8014f64:	b292      	uxth	r2, r2
 8014f66:	4629      	mov	r1, r5
 8014f68:	47a0      	blx	r4
 8014f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f6e:	f001 bb69 	b.w	8016644 <network::display_hostname()>

08014f72 <Network::SetZeroconf()>:
 8014f72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014f74:	4604      	mov	r4, r0
 8014f76:	a801      	add	r0, sp, #4
 8014f78:	f7fe fe50 	bl	8013c1c <net_set_zeroconf>
 8014f7c:	71e0      	strb	r0, [r4, #7]
 8014f7e:	b170      	cbz	r0, 8014f9e <Network::SetZeroconf()+0x2c>
 8014f80:	9b01      	ldr	r3, [sp, #4]
 8014f82:	6163      	str	r3, [r4, #20]
 8014f84:	9b02      	ldr	r3, [sp, #8]
 8014f86:	61e3      	str	r3, [r4, #28]
 8014f88:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8014f8c:	9b03      	ldr	r3, [sp, #12]
 8014f8e:	61a3      	str	r3, [r4, #24]
 8014f90:	2300      	movs	r3, #0
 8014f92:	7163      	strb	r3, [r4, #5]
 8014f94:	b118      	cbz	r0, 8014f9e <Network::SetZeroconf()+0x2c>
 8014f96:	6803      	ldr	r3, [r0, #0]
 8014f98:	2101      	movs	r1, #1
 8014f9a:	699b      	ldr	r3, [r3, #24]
 8014f9c:	4798      	blx	r3
 8014f9e:	f001 fb3f 	bl	8016620 <network::display_ip()>
 8014fa2:	f001 fb43 	bl	801662c <network::display_netmask()>
 8014fa6:	79e0      	ldrb	r0, [r4, #7]
 8014fa8:	b004      	add	sp, #16
 8014faa:	bd10      	pop	{r4, pc}

08014fac <Network::EnableDhcp()>:
 8014fac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014fae:	4d21      	ldr	r5, [pc, #132]	; (8015034 <Network::EnableDhcp()+0x88>)
 8014fb0:	682b      	ldr	r3, [r5, #0]
 8014fb2:	781e      	ldrb	r6, [r3, #0]
 8014fb4:	4604      	mov	r4, r0
 8014fb6:	b136      	cbz	r6, 8014fc6 <Network::EnableDhcp()+0x1a>
 8014fb8:	2200      	movs	r2, #0
 8014fba:	701a      	strb	r2, [r3, #0]
 8014fbc:	2104      	movs	r1, #4
 8014fbe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014fc2:	f004 f85b 	bl	801907c <fwdgt_config>
 8014fc6:	2001      	movs	r0, #1
 8014fc8:	f001 fb48 	bl	801665c <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8014fcc:	1de2      	adds	r2, r4, #7
 8014fce:	f104 0120 	add.w	r1, r4, #32
 8014fd2:	a801      	add	r0, sp, #4
 8014fd4:	f7fe fdec 	bl	8013bb0 <net_set_dhcp>
 8014fd8:	79e3      	ldrb	r3, [r4, #7]
 8014fda:	7160      	strb	r0, [r4, #5]
 8014fdc:	b33b      	cbz	r3, 801502e <Network::EnableDhcp()+0x82>
 8014fde:	2004      	movs	r0, #4
 8014fe0:	f001 fb3c 	bl	801665c <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8014fe4:	b16e      	cbz	r6, 8015002 <Network::EnableDhcp()+0x56>
 8014fe6:	2102      	movs	r1, #2
 8014fe8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014fec:	682d      	ldr	r5, [r5, #0]
 8014fee:	f004 f845 	bl	801907c <fwdgt_config>
 8014ff2:	2801      	cmp	r0, #1
 8014ff4:	bf0c      	ite	eq
 8014ff6:	2301      	moveq	r3, #1
 8014ff8:	2300      	movne	r3, #0
 8014ffa:	702b      	strb	r3, [r5, #0]
 8014ffc:	d101      	bne.n	8015002 <Network::EnableDhcp()+0x56>
 8014ffe:	f004 f82d 	bl	801905c <fwdgt_enable>
 8015002:	9b01      	ldr	r3, [sp, #4]
 8015004:	6163      	str	r3, [r4, #20]
 8015006:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801500a:	9b02      	ldr	r3, [sp, #8]
 801500c:	61e3      	str	r3, [r4, #28]
 801500e:	9b03      	ldr	r3, [sp, #12]
 8015010:	61a3      	str	r3, [r4, #24]
 8015012:	b118      	cbz	r0, 801501c <Network::EnableDhcp()+0x70>
 8015014:	6803      	ldr	r3, [r0, #0]
 8015016:	7961      	ldrb	r1, [r4, #5]
 8015018:	699b      	ldr	r3, [r3, #24]
 801501a:	4798      	blx	r3
 801501c:	f001 fb00 	bl	8016620 <network::display_ip()>
 8015020:	f001 fb04 	bl	801662c <network::display_netmask()>
 8015024:	f001 fb08 	bl	8016638 <network::display_gateway()>
 8015028:	7960      	ldrb	r0, [r4, #5]
 801502a:	b004      	add	sp, #16
 801502c:	bd70      	pop	{r4, r5, r6, pc}
 801502e:	2002      	movs	r0, #2
 8015030:	e7d6      	b.n	8014fe0 <Network::EnableDhcp()+0x34>
 8015032:	bf00      	nop
 8015034:	2000fda0 	andcs	pc, r0, r0, lsr #27

08015038 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>:
 8015038:	b109      	cbz	r1, 801503e <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0x6>
 801503a:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
 801503e:	b10a      	cbz	r2, 8015044 <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0xc>
 8015040:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
 8015044:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8015048:	f043 0303 	orr.w	r3, r3, #3
 801504c:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
 8015050:	4770      	bx	lr

08015052 <Network::ApplyQueuedConfig()>:
 8015052:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8015056:	b510      	push	{r4, lr}
 8015058:	4604      	mov	r4, r0
 801505a:	b3c3      	cbz	r3, 80150ce <Network::ApplyQueuedConfig()+0x7c>
 801505c:	079a      	lsls	r2, r3, #30
 801505e:	d01a      	beq.n	8015096 <Network::ApplyQueuedConfig()+0x44>
 8015060:	079b      	lsls	r3, r3, #30
 8015062:	d509      	bpl.n	8015078 <Network::ApplyQueuedConfig()+0x26>
 8015064:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
 8015068:	f7ff ff3d 	bl	8014ee6 <Network::SetNetmask(unsigned int)>
 801506c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8015070:	f023 0302 	bic.w	r3, r3, #2
 8015074:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8015078:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801507c:	07d9      	lsls	r1, r3, #31
 801507e:	d50a      	bpl.n	8015096 <Network::ApplyQueuedConfig()+0x44>
 8015080:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8015084:	4620      	mov	r0, r4
 8015086:	f7ff ff03 	bl	8014e90 <Network::SetIp(unsigned int)>
 801508a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801508e:	f023 0301 	bic.w	r3, r3, #1
 8015092:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8015096:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801509a:	075a      	lsls	r2, r3, #29
 801509c:	d508      	bpl.n	80150b0 <Network::ApplyQueuedConfig()+0x5e>
 801509e:	4620      	mov	r0, r4
 80150a0:	f7ff ff84 	bl	8014fac <Network::EnableDhcp()>
 80150a4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80150a8:	f023 0304 	bic.w	r3, r3, #4
 80150ac:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80150b0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80150b4:	071b      	lsls	r3, r3, #28
 80150b6:	d508      	bpl.n	80150ca <Network::ApplyQueuedConfig()+0x78>
 80150b8:	4620      	mov	r0, r4
 80150ba:	f7ff ff5a 	bl	8014f72 <Network::SetZeroconf()>
 80150be:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80150c2:	f023 0308 	bic.w	r3, r3, #8
 80150c6:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80150ca:	2001      	movs	r0, #1
 80150cc:	e000      	b.n	80150d0 <Network::ApplyQueuedConfig()+0x7e>
 80150ce:	4618      	mov	r0, r3
 80150d0:	bd10      	pop	{r4, pc}
	...

080150d4 <Network::Print()>:
 80150d4:	b530      	push	{r4, r5, lr}
 80150d6:	4604      	mov	r4, r0
 80150d8:	b085      	sub	sp, #20
 80150da:	4832      	ldr	r0, [pc, #200]	; (80151a4 <Network::Print()+0xd0>)
 80150dc:	f7f5 f9e8 	bl	800a4b0 <printf>
 80150e0:	f104 0120 	add.w	r1, r4, #32
 80150e4:	4830      	ldr	r0, [pc, #192]	; (80151a8 <Network::Print()+0xd4>)
 80150e6:	f7f5 f9e3 	bl	800a4b0 <printf>
 80150ea:	68a1      	ldr	r1, [r4, #8]
 80150ec:	482f      	ldr	r0, [pc, #188]	; (80151ac <Network::Print()+0xd8>)
 80150ee:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
 80150f2:	f7f5 f9dd 	bl	800a4b0 <printf>
 80150f6:	69e0      	ldr	r0, [r4, #28]
 80150f8:	6965      	ldr	r5, [r4, #20]
 80150fa:	f005 fb51 	bl	801a7a0 <__popcountsi2>
 80150fe:	0e2b      	lsrs	r3, r5, #24
 8015100:	9001      	str	r0, [sp, #4]
 8015102:	9300      	str	r3, [sp, #0]
 8015104:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8015108:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801510c:	b2e9      	uxtb	r1, r5
 801510e:	4828      	ldr	r0, [pc, #160]	; (80151b0 <Network::Print()+0xdc>)
 8015110:	f7f5 f9ce 	bl	800a4b0 <printf>
 8015114:	69e1      	ldr	r1, [r4, #28]
 8015116:	4827      	ldr	r0, [pc, #156]	; (80151b4 <Network::Print()+0xe0>)
 8015118:	0e0b      	lsrs	r3, r1, #24
 801511a:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801511e:	9300      	str	r3, [sp, #0]
 8015120:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8015124:	b2c9      	uxtb	r1, r1
 8015126:	f7f5 f9c3 	bl	800a4b0 <printf>
 801512a:	69a1      	ldr	r1, [r4, #24]
 801512c:	4822      	ldr	r0, [pc, #136]	; (80151b8 <Network::Print()+0xe4>)
 801512e:	0e0b      	lsrs	r3, r1, #24
 8015130:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8015134:	9300      	str	r3, [sp, #0]
 8015136:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801513a:	b2c9      	uxtb	r1, r1
 801513c:	f7f5 f9b8 	bl	800a4b0 <printf>
 8015140:	69e3      	ldr	r3, [r4, #28]
 8015142:	6961      	ldr	r1, [r4, #20]
 8015144:	481d      	ldr	r0, [pc, #116]	; (80151bc <Network::Print()+0xe8>)
 8015146:	ea61 0103 	orn	r1, r1, r3
 801514a:	0e0b      	lsrs	r3, r1, #24
 801514c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8015150:	9300      	str	r3, [sp, #0]
 8015152:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8015156:	b2c9      	uxtb	r1, r1
 8015158:	f7f5 f9aa 	bl	800a4b0 <printf>
 801515c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8015160:	9302      	str	r3, [sp, #8]
 8015162:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8015166:	9301      	str	r3, [sp, #4]
 8015168:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 801516c:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8015170:	9300      	str	r3, [sp, #0]
 8015172:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
 8015176:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 801517a:	4811      	ldr	r0, [pc, #68]	; (80151c0 <Network::Print()+0xec>)
 801517c:	f7f5 f998 	bl	800a4b0 <printf>
 8015180:	4b10      	ldr	r3, [pc, #64]	; (80151c4 <Network::Print()+0xf0>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	79da      	ldrb	r2, [r3, #7]
 8015186:	b952      	cbnz	r2, 801519e <Network::Print()+0xca>
 8015188:	795b      	ldrb	r3, [r3, #5]
 801518a:	2b00      	cmp	r3, #0
 801518c:	bf14      	ite	ne
 801518e:	2144      	movne	r1, #68	; 0x44
 8015190:	2153      	moveq	r1, #83	; 0x53
 8015192:	480d      	ldr	r0, [pc, #52]	; (80151c8 <Network::Print()+0xf4>)
 8015194:	b005      	add	sp, #20
 8015196:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801519a:	f7f5 b989 	b.w	800a4b0 <printf>
 801519e:	215a      	movs	r1, #90	; 0x5a
 80151a0:	e7f7      	b.n	8015192 <Network::Print()+0xbe>
 80151a2:	bf00      	nop
 80151a4:	0801d186 	stmdaeq	r1, {r1, r2, r7, r8, ip, lr, pc}
 80151a8:	0801d18f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, ip, lr, pc}
 80151ac:	0801d1a0 	stmdaeq	r1, {r5, r7, r8, ip, lr, pc}
 80151b0:	0801d1b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, ip, lr, pc}
 80151b4:	0801d1d2 	stmdaeq	r1, {r1, r4, r6, r7, r8, ip, lr, pc}
 80151b8:	0801d1ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, ip, lr, pc}
 80151bc:	0801d206 	stmdaeq	r1, {r1, r2, r9, ip, lr, pc}
 80151c0:	0801d220 	stmdaeq	r1, {r5, r9, ip, lr, pc}
 80151c4:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 80151c8:	0801d24c 	stmdaeq	r1, {r2, r3, r6, r9, ip, lr, pc}

080151cc <Network::TcpBegin(unsigned short)>:
 80151cc:	4608      	mov	r0, r1
 80151ce:	f7fe beb5 	b.w	8013f3c <tcp_begin>

080151d2 <Network::TcpRead(int, unsigned char const**)>:
 80151d2:	4608      	mov	r0, r1
 80151d4:	4611      	mov	r1, r2
 80151d6:	f7fe befd 	b.w	8013fd4 <tcp_read>

080151da <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 80151da:	4608      	mov	r0, r1
 80151dc:	4611      	mov	r1, r2
 80151de:	461a      	mov	r2, r3
 80151e0:	f7fe beca 	b.w	8013f78 <tcp_write>

080151e4 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 80151e4:	b510      	push	{r4, lr}
 80151e6:	225e      	movs	r2, #94	; 0x5e
 80151e8:	4604      	mov	r4, r0
 80151ea:	f840 1b04 	str.w	r1, [r0], #4
 80151ee:	2100      	movs	r1, #0
 80151f0:	f003 f874 	bl	80182dc <memset>
 80151f4:	2301      	movs	r3, #1
 80151f6:	7623      	strb	r3, [r4, #24]
 80151f8:	4620      	mov	r0, r4
 80151fa:	bd10      	pop	{r4, pc}

080151fc <NetworkParams::Load()>:
 80151fc:	b508      	push	{r3, lr}
 80151fe:	2300      	movs	r3, #0
 8015200:	4601      	mov	r1, r0
 8015202:	6043      	str	r3, [r0, #4]
 8015204:	6800      	ldr	r0, [r0, #0]
 8015206:	b120      	cbz	r0, 8015212 <NetworkParams::Load()+0x16>
 8015208:	6803      	ldr	r3, [r0, #0]
 801520a:	3104      	adds	r1, #4
 801520c:	68db      	ldr	r3, [r3, #12]
 801520e:	4798      	blx	r3
 8015210:	2001      	movs	r0, #1
 8015212:	bd08      	pop	{r3, pc}

08015214 <NetworkParams::Load(char const*, unsigned int)>:
 8015214:	6803      	ldr	r3, [r0, #0]
 8015216:	b1d3      	cbz	r3, 801524e <NetworkParams::Load(char const*, unsigned int)+0x3a>
 8015218:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801521a:	2300      	movs	r3, #0
 801521c:	6043      	str	r3, [r0, #4]
 801521e:	4604      	mov	r4, r0
 8015220:	460d      	mov	r5, r1
 8015222:	4616      	mov	r6, r2
 8015224:	490a      	ldr	r1, [pc, #40]	; (8015250 <NetworkParams::Load(char const*, unsigned int)+0x3c>)
 8015226:	4602      	mov	r2, r0
 8015228:	4668      	mov	r0, sp
 801522a:	f002 f9ad 	bl	8017588 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801522e:	4632      	mov	r2, r6
 8015230:	4629      	mov	r1, r5
 8015232:	4668      	mov	r0, sp
 8015234:	f002 f9ac 	bl	8017590 <ReadConfigFile::Read(char const*, unsigned int)>
 8015238:	4621      	mov	r1, r4
 801523a:	f851 0b04 	ldr.w	r0, [r1], #4
 801523e:	6803      	ldr	r3, [r0, #0]
 8015240:	689b      	ldr	r3, [r3, #8]
 8015242:	4798      	blx	r3
 8015244:	4668      	mov	r0, sp
 8015246:	f002 f9a2 	bl	801758e <ReadConfigFile::~ReadConfigFile()>
 801524a:	b002      	add	sp, #8
 801524c:	bd70      	pop	{r4, r5, r6, pc}
 801524e:	4770      	bx	lr
 8015250:	08015381 	stmdaeq	r1, {r0, r7, r8, r9, ip, lr}

08015254 <NetworkParams::callbackFunction(char const*)>:
 8015254:	b530      	push	{r4, r5, lr}
 8015256:	460d      	mov	r5, r1
 8015258:	b085      	sub	sp, #20
 801525a:	4604      	mov	r4, r0
 801525c:	4942      	ldr	r1, [pc, #264]	; (8015368 <NetworkParams::callbackFunction(char const*)+0x114>)
 801525e:	f10d 0207 	add.w	r2, sp, #7
 8015262:	4628      	mov	r0, r5
 8015264:	f002 fac5 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8015268:	b978      	cbnz	r0, 801528a <NetworkParams::callbackFunction(char const*)+0x36>
 801526a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801526e:	6863      	ldr	r3, [r4, #4]
 8015270:	b142      	cbz	r2, 8015284 <NetworkParams::callbackFunction(char const*)+0x30>
 8015272:	f023 0301 	bic.w	r3, r3, #1
 8015276:	3a00      	subs	r2, #0
 8015278:	bf18      	it	ne
 801527a:	2201      	movne	r2, #1
 801527c:	6063      	str	r3, [r4, #4]
 801527e:	7622      	strb	r2, [r4, #24]
 8015280:	b005      	add	sp, #20
 8015282:	bd30      	pop	{r4, r5, pc}
 8015284:	f043 0301 	orr.w	r3, r3, #1
 8015288:	e7f5      	b.n	8015276 <NetworkParams::callbackFunction(char const*)+0x22>
 801528a:	4938      	ldr	r1, [pc, #224]	; (801536c <NetworkParams::callbackFunction(char const*)+0x118>)
 801528c:	f10d 0207 	add.w	r2, sp, #7
 8015290:	4628      	mov	r0, r5
 8015292:	f002 faae 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8015296:	b980      	cbnz	r0, 80152ba <NetworkParams::callbackFunction(char const*)+0x66>
 8015298:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801529c:	6863      	ldr	r3, [r4, #4]
 801529e:	1e51      	subs	r1, r2, #1
 80152a0:	2904      	cmp	r1, #4
 80152a2:	bf97      	itett	ls
 80152a4:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 80152a8:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 80152ac:	6063      	strls	r3, [r4, #4]
 80152ae:	f884 2061 	strbls.w	r2, [r4, #97]	; 0x61
 80152b2:	bf84      	itt	hi
 80152b4:	6063      	strhi	r3, [r4, #4]
 80152b6:	f884 0061 	strbhi.w	r0, [r4, #97]	; 0x61
 80152ba:	492d      	ldr	r1, [pc, #180]	; (8015370 <NetworkParams::callbackFunction(char const*)+0x11c>)
 80152bc:	aa02      	add	r2, sp, #8
 80152be:	4628      	mov	r0, r5
 80152c0:	f002 fa0e 	bl	80176e0 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80152c4:	b9e8      	cbnz	r0, 8015302 <NetworkParams::callbackFunction(char const*)+0xae>
 80152c6:	9a02      	ldr	r2, [sp, #8]
 80152c8:	6863      	ldr	r3, [r4, #4]
 80152ca:	b2d1      	uxtb	r1, r2
 80152cc:	29ac      	cmp	r1, #172	; 0xac
 80152ce:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80152d2:	d007      	beq.n	80152e4 <NetworkParams::callbackFunction(char const*)+0x90>
 80152d4:	29c0      	cmp	r1, #192	; 0xc0
 80152d6:	d00c      	beq.n	80152f2 <NetworkParams::callbackFunction(char const*)+0x9e>
 80152d8:	290a      	cmp	r1, #10
 80152da:	d10d      	bne.n	80152f8 <NetworkParams::callbackFunction(char const*)+0xa4>
 80152dc:	60a2      	str	r2, [r4, #8]
 80152de:	f043 0302 	orr.w	r3, r3, #2
 80152e2:	e004      	b.n	80152ee <NetworkParams::callbackFunction(char const*)+0x9a>
 80152e4:	3810      	subs	r0, #16
 80152e6:	280f      	cmp	r0, #15
 80152e8:	d9f8      	bls.n	80152dc <NetworkParams::callbackFunction(char const*)+0x88>
 80152ea:	f023 0302 	bic.w	r3, r3, #2
 80152ee:	6063      	str	r3, [r4, #4]
 80152f0:	e7c6      	b.n	8015280 <NetworkParams::callbackFunction(char const*)+0x2c>
 80152f2:	28a8      	cmp	r0, #168	; 0xa8
 80152f4:	d1f9      	bne.n	80152ea <NetworkParams::callbackFunction(char const*)+0x96>
 80152f6:	e7f1      	b.n	80152dc <NetworkParams::callbackFunction(char const*)+0x88>
 80152f8:	2902      	cmp	r1, #2
 80152fa:	d0ef      	beq.n	80152dc <NetworkParams::callbackFunction(char const*)+0x88>
 80152fc:	2a00      	cmp	r2, #0
 80152fe:	d0ed      	beq.n	80152dc <NetworkParams::callbackFunction(char const*)+0x88>
 8015300:	e7f3      	b.n	80152ea <NetworkParams::callbackFunction(char const*)+0x96>
 8015302:	491c      	ldr	r1, [pc, #112]	; (8015374 <NetworkParams::callbackFunction(char const*)+0x120>)
 8015304:	aa02      	add	r2, sp, #8
 8015306:	4628      	mov	r0, r5
 8015308:	f002 f9ea 	bl	80176e0 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 801530c:	b970      	cbnz	r0, 801532c <NetworkParams::callbackFunction(char const*)+0xd8>
 801530e:	9a02      	ldr	r2, [sp, #8]
 8015310:	6863      	ldr	r3, [r4, #4]
 8015312:	b142      	cbz	r2, 8015326 <NetworkParams::callbackFunction(char const*)+0xd2>
 8015314:	ba11      	rev	r1, r2
 8015316:	43c8      	mvns	r0, r1
 8015318:	ea11 0150 	ands.w	r1, r1, r0, lsr #1
 801531c:	d103      	bne.n	8015326 <NetworkParams::callbackFunction(char const*)+0xd2>
 801531e:	60e2      	str	r2, [r4, #12]
 8015320:	f043 0304 	orr.w	r3, r3, #4
 8015324:	e7e3      	b.n	80152ee <NetworkParams::callbackFunction(char const*)+0x9a>
 8015326:	f023 0304 	bic.w	r3, r3, #4
 801532a:	e7e0      	b.n	80152ee <NetworkParams::callbackFunction(char const*)+0x9a>
 801532c:	4912      	ldr	r1, [pc, #72]	; (8015378 <NetworkParams::callbackFunction(char const*)+0x124>)
 801532e:	aa02      	add	r2, sp, #8
 8015330:	4628      	mov	r0, r5
 8015332:	f002 f9d5 	bl	80176e0 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8015336:	b928      	cbnz	r0, 8015344 <NetworkParams::callbackFunction(char const*)+0xf0>
 8015338:	9b02      	ldr	r3, [sp, #8]
 801533a:	6123      	str	r3, [r4, #16]
 801533c:	6863      	ldr	r3, [r4, #4]
 801533e:	f043 0308 	orr.w	r3, r3, #8
 8015342:	e7d4      	b.n	80152ee <NetworkParams::callbackFunction(char const*)+0x9a>
 8015344:	233f      	movs	r3, #63	; 0x3f
 8015346:	9303      	str	r3, [sp, #12]
 8015348:	490c      	ldr	r1, [pc, #48]	; (801537c <NetworkParams::callbackFunction(char const*)+0x128>)
 801534a:	ab03      	add	r3, sp, #12
 801534c:	f104 0219 	add.w	r2, r4, #25
 8015350:	4628      	mov	r0, r5
 8015352:	f002 f951 	bl	80175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8015356:	2800      	cmp	r0, #0
 8015358:	d192      	bne.n	8015280 <NetworkParams::callbackFunction(char const*)+0x2c>
 801535a:	9b03      	ldr	r3, [sp, #12]
 801535c:	4423      	add	r3, r4
 801535e:	7658      	strb	r0, [r3, #25]
 8015360:	6863      	ldr	r3, [r4, #4]
 8015362:	f043 0320 	orr.w	r3, r3, #32
 8015366:	e7c2      	b.n	80152ee <NetworkParams::callbackFunction(char const*)+0x9a>
 8015368:	0801d2a4 	stmdaeq	r1, {r2, r5, r7, r9, ip, lr, pc}
 801536c:	0801d282 	stmdaeq	r1, {r1, r7, r9, ip, lr, pc}
 8015370:	0801d267 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, ip, lr, pc}
 8015374:	0801d29b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r9, ip, lr, pc}
 8015378:	0801d272 	stmdaeq	r1, {r1, r4, r5, r6, r9, ip, lr, pc}
 801537c:	0801d292 	stmdaeq	r1, {r1, r4, r7, r9, ip, lr, pc}

08015380 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8015380:	f7ff bf68 	b.w	8015254 <NetworkParams::callbackFunction(char const*)>

08015384 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>:
 8015384:	b570      	push	{r4, r5, r6, lr}
 8015386:	4604      	mov	r4, r0
 8015388:	b086      	sub	sp, #24
 801538a:	4615      	mov	r5, r2
 801538c:	461e      	mov	r6, r3
 801538e:	3004      	adds	r0, #4
 8015390:	2900      	cmp	r1, #0
 8015392:	d02a      	beq.n	80153ea <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x66>
 8015394:	225e      	movs	r2, #94	; 0x5e
 8015396:	f002 ff8a 	bl	80182ae <memmove>
 801539a:	462a      	mov	r2, r5
 801539c:	4633      	mov	r3, r6
 801539e:	496f      	ldr	r1, [pc, #444]	; (801555c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d8>)
 80153a0:	a803      	add	r0, sp, #12
 80153a2:	f002 f851 	bl	8017448 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80153a6:	6863      	ldr	r3, [r4, #4]
 80153a8:	079a      	lsls	r2, r3, #30
 80153aa:	bf5f      	itttt	pl
 80153ac:	4a6c      	ldrpl	r2, [pc, #432]	; (8015560 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80153ae:	6812      	ldrpl	r2, [r2, #0]
 80153b0:	6952      	ldrpl	r2, [r2, #20]
 80153b2:	60a2      	strpl	r2, [r4, #8]
 80153b4:	075e      	lsls	r6, r3, #29
 80153b6:	bf5f      	itttt	pl
 80153b8:	4a69      	ldrpl	r2, [pc, #420]	; (8015560 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80153ba:	6812      	ldrpl	r2, [r2, #0]
 80153bc:	69d2      	ldrpl	r2, [r2, #28]
 80153be:	60e2      	strpl	r2, [r4, #12]
 80153c0:	071d      	lsls	r5, r3, #28
 80153c2:	bf5f      	itttt	pl
 80153c4:	4a66      	ldrpl	r2, [pc, #408]	; (8015560 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80153c6:	6812      	ldrpl	r2, [r2, #0]
 80153c8:	6992      	ldrpl	r2, [r2, #24]
 80153ca:	6122      	strpl	r2, [r4, #16]
 80153cc:	0698      	lsls	r0, r3, #26
 80153ce:	f104 0519 	add.w	r5, r4, #25
 80153d2:	d418      	bmi.n	8015406 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 80153d4:	4b62      	ldr	r3, [pc, #392]	; (8015560 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	4628      	mov	r0, r5
 80153da:	331f      	adds	r3, #31
 80153dc:	223f      	movs	r2, #63	; 0x3f
 80153de:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80153e2:	b949      	cbnz	r1, 80153f8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x74>
 80153e4:	f002 ff7a 	bl	80182dc <memset>
 80153e8:	e00a      	b.n	8015400 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x7c>
 80153ea:	6823      	ldr	r3, [r4, #0]
 80153ec:	681a      	ldr	r2, [r3, #0]
 80153ee:	4601      	mov	r1, r0
 80153f0:	68d2      	ldr	r2, [r2, #12]
 80153f2:	4618      	mov	r0, r3
 80153f4:	4790      	blx	r2
 80153f6:	e7d0      	b.n	801539a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 80153f8:	3a01      	subs	r2, #1
 80153fa:	f800 1b01 	strb.w	r1, [r0], #1
 80153fe:	d1ee      	bne.n	80153de <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x5a>
 8015400:	2300      	movs	r3, #0
 8015402:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8015406:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801540a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 801540e:	7e23      	ldrb	r3, [r4, #24]
 8015410:	6861      	ldr	r1, [r4, #4]
 8015412:	42b2      	cmp	r2, r6
 8015414:	d21a      	bcs.n	801544c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xc8>
 8015416:	9803      	ldr	r0, [sp, #12]
 8015418:	07c9      	lsls	r1, r1, #31
 801541a:	4410      	add	r0, r2
 801541c:	eba6 0602 	sub.w	r6, r6, r2
 8015420:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8015424:	d404      	bmi.n	8015430 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 8015426:	b922      	cbnz	r2, 8015432 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xae>
 8015428:	9300      	str	r3, [sp, #0]
 801542a:	4a4e      	ldr	r2, [pc, #312]	; (8015564 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 801542c:	4b4e      	ldr	r3, [pc, #312]	; (8015568 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 801542e:	e003      	b.n	8015438 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb4>
 8015430:	b312      	cbz	r2, 8015478 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xf4>
 8015432:	9300      	str	r3, [sp, #0]
 8015434:	4a4d      	ldr	r2, [pc, #308]	; (801556c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8015436:	4b4c      	ldr	r3, [pc, #304]	; (8015568 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8015438:	4631      	mov	r1, r6
 801543a:	f7f5 f861 	bl	800a500 <snprintf>
 801543e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015442:	4286      	cmp	r6, r0
 8015444:	bfa4      	itt	ge
 8015446:	181b      	addge	r3, r3, r0
 8015448:	f8ad 3012 	strhge.w	r3, [sp, #18]
 801544c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015450:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8015454:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8015458:	6861      	ldr	r1, [r4, #4]
 801545a:	42b2      	cmp	r2, r6
 801545c:	d21f      	bcs.n	801549e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x11a>
 801545e:	9803      	ldr	r0, [sp, #12]
 8015460:	05c9      	lsls	r1, r1, #23
 8015462:	4410      	add	r0, r2
 8015464:	eba6 0602 	sub.w	r6, r6, r2
 8015468:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801546c:	d408      	bmi.n	8015480 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xfc>
 801546e:	b94a      	cbnz	r2, 8015484 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x100>
 8015470:	9300      	str	r3, [sp, #0]
 8015472:	4a3c      	ldr	r2, [pc, #240]	; (8015564 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8015474:	4b3e      	ldr	r3, [pc, #248]	; (8015570 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8015476:	e008      	b.n	801548a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 8015478:	9300      	str	r3, [sp, #0]
 801547a:	4a3e      	ldr	r2, [pc, #248]	; (8015574 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 801547c:	4b3a      	ldr	r3, [pc, #232]	; (8015568 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 801547e:	e7db      	b.n	8015438 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb4>
 8015480:	2a00      	cmp	r2, #0
 8015482:	d03c      	beq.n	80154fe <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x17a>
 8015484:	9300      	str	r3, [sp, #0]
 8015486:	4a39      	ldr	r2, [pc, #228]	; (801556c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8015488:	4b39      	ldr	r3, [pc, #228]	; (8015570 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 801548a:	4631      	mov	r1, r6
 801548c:	f7f5 f838 	bl	800a500 <snprintf>
 8015490:	4286      	cmp	r6, r0
 8015492:	bfa2      	ittt	ge
 8015494:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8015498:	18c0      	addge	r0, r0, r3
 801549a:	f8ad 0012 	strhge.w	r0, [sp, #18]
 801549e:	4936      	ldr	r1, [pc, #216]	; (8015578 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 80154a0:	a803      	add	r0, sp, #12
 80154a2:	f002 f857 	bl	8017554 <PropertiesBuilder::AddComment(char const*)>
 80154a6:	6863      	ldr	r3, [r4, #4]
 80154a8:	68a2      	ldr	r2, [r4, #8]
 80154aa:	4934      	ldr	r1, [pc, #208]	; (801557c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f8>)
 80154ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80154b0:	a803      	add	r0, sp, #12
 80154b2:	f002 f80b 	bl	80174cc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80154b6:	6863      	ldr	r3, [r4, #4]
 80154b8:	68e2      	ldr	r2, [r4, #12]
 80154ba:	4931      	ldr	r1, [pc, #196]	; (8015580 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1fc>)
 80154bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80154c0:	a803      	add	r0, sp, #12
 80154c2:	f002 f803 	bl	80174cc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80154c6:	6863      	ldr	r3, [r4, #4]
 80154c8:	6922      	ldr	r2, [r4, #16]
 80154ca:	492e      	ldr	r1, [pc, #184]	; (8015584 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x200>)
 80154cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80154d0:	a803      	add	r0, sp, #12
 80154d2:	f001 fffb 	bl	80174cc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80154d6:	6862      	ldr	r2, [r4, #4]
 80154d8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80154dc:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80154e0:	42a3      	cmp	r3, r4
 80154e2:	d21e      	bcs.n	8015522 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x19e>
 80154e4:	9803      	ldr	r0, [sp, #12]
 80154e6:	0692      	lsls	r2, r2, #26
 80154e8:	4418      	add	r0, r3
 80154ea:	eba4 0403 	sub.w	r4, r4, r3
 80154ee:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80154f2:	d408      	bmi.n	8015506 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x182>
 80154f4:	b943      	cbnz	r3, 8015508 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x184>
 80154f6:	4b24      	ldr	r3, [pc, #144]	; (8015588 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 80154f8:	4a24      	ldr	r2, [pc, #144]	; (801558c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 80154fa:	9500      	str	r5, [sp, #0]
 80154fc:	e007      	b.n	801550e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18a>
 80154fe:	9300      	str	r3, [sp, #0]
 8015500:	4a1c      	ldr	r2, [pc, #112]	; (8015574 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8015502:	4b1b      	ldr	r3, [pc, #108]	; (8015570 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8015504:	e7c1      	b.n	801548a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 8015506:	b32b      	cbz	r3, 8015554 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d0>
 8015508:	4b1f      	ldr	r3, [pc, #124]	; (8015588 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 801550a:	4a21      	ldr	r2, [pc, #132]	; (8015590 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x20c>)
 801550c:	9500      	str	r5, [sp, #0]
 801550e:	4621      	mov	r1, r4
 8015510:	f7f4 fff6 	bl	800a500 <snprintf>
 8015514:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015518:	4284      	cmp	r4, r0
 801551a:	bfa4      	itt	ge
 801551c:	181b      	addge	r3, r3, r0
 801551e:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8015522:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015526:	b17b      	cbz	r3, 8015548 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1c4>
 8015528:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801552c:	9b03      	ldr	r3, [sp, #12]
 801552e:	4413      	add	r3, r2
 8015530:	227d      	movs	r2, #125	; 0x7d
 8015532:	f803 2c01 	strb.w	r2, [r3, #-1]
 8015536:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801553a:	9903      	ldr	r1, [sp, #12]
 801553c:	54ca      	strb	r2, [r1, r3]
 801553e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015542:	3301      	adds	r3, #1
 8015544:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015548:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801554c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801554e:	601a      	str	r2, [r3, #0]
 8015550:	b006      	add	sp, #24
 8015552:	bd70      	pop	{r4, r5, r6, pc}
 8015554:	4b0c      	ldr	r3, [pc, #48]	; (8015588 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 8015556:	4a0f      	ldr	r2, [pc, #60]	; (8015594 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x210>)
 8015558:	9500      	str	r5, [sp, #0]
 801555a:	e7d8      	b.n	801550e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18a>
 801555c:	0801d2ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r9, ip, lr, pc}
 8015560:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 8015564:	0801ada1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, sp, pc}
 8015568:	0801d2a4 	stmdaeq	r1, {r2, r5, r7, r9, ip, lr, pc}
 801556c:	0801ad98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, sp, pc}
 8015570:	0801d282 	stmdaeq	r1, {r1, r7, r9, ip, lr, pc}
 8015574:	0801ada2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, sp, pc}
 8015578:	0801d25d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r9, ip, lr, pc}
 801557c:	0801d267 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, ip, lr, pc}
 8015580:	0801d29b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r9, ip, lr, pc}
 8015584:	0801d272 	stmdaeq	r1, {r1, r4, r5, r6, r9, ip, lr, pc}
 8015588:	0801d292 	stmdaeq	r1, {r1, r4, r7, r9, ip, lr, pc}
 801558c:	0801adb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, fp, sp, pc}
 8015590:	0801ada9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, fp, sp, pc}
 8015594:	0801adb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, sl, fp, sp, pc}

08015598 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 8015598:	b513      	push	{r0, r1, r4, lr}
 801559a:	6804      	ldr	r4, [r0, #0]
 801559c:	b914      	cbnz	r4, 80155a4 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 801559e:	601c      	str	r4, [r3, #0]
 80155a0:	b002      	add	sp, #8
 80155a2:	bd10      	pop	{r4, pc}
 80155a4:	9300      	str	r3, [sp, #0]
 80155a6:	4613      	mov	r3, r2
 80155a8:	460a      	mov	r2, r1
 80155aa:	2100      	movs	r1, #0
 80155ac:	f7ff feea 	bl	8015384 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>
 80155b0:	e7f6      	b.n	80155a0 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

080155b2 <NetworkParams::Dump()>:
 80155b2:	4770      	bx	lr

080155b4 <memcpy.isra.0>:
 80155b4:	3801      	subs	r0, #1
 80155b6:	440a      	add	r2, r1
 80155b8:	4291      	cmp	r1, r2
 80155ba:	d100      	bne.n	80155be <memcpy.isra.0+0xa>
 80155bc:	4770      	bx	lr
 80155be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155c2:	f800 3f01 	strb.w	r3, [r0, #1]!
 80155c6:	e7f7      	b.n	80155b8 <memcpy.isra.0+0x4>

080155c8 <arp_announce>:
 80155c8:	4803      	ldr	r0, [pc, #12]	; (80155d8 <arp_announce+0x10>)
 80155ca:	69c3      	ldr	r3, [r0, #28]
 80155cc:	b113      	cbz	r3, 80155d4 <arp_announce+0xc>
 80155ce:	212a      	movs	r1, #42	; 0x2a
 80155d0:	f004 ba36 	b.w	8019a40 <emac_eth_send>
 80155d4:	4770      	bx	lr
 80155d6:	bf00      	nop
 80155d8:	2000f9b0 			; <UNDEFINED> instruction: 0x2000f9b0

080155dc <arp_handle_request>:
 80155dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155de:	2204      	movs	r2, #4
 80155e0:	f100 0126 	add.w	r1, r0, #38	; 0x26
 80155e4:	4604      	mov	r4, r0
 80155e6:	eb0d 0002 	add.w	r0, sp, r2
 80155ea:	f7ff ffe3 	bl	80155b4 <memcpy.isra.0>
 80155ee:	4b0d      	ldr	r3, [pc, #52]	; (8015624 <arp_handle_request+0x48>)
 80155f0:	9a01      	ldr	r2, [sp, #4]
 80155f2:	69db      	ldr	r3, [r3, #28]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d113      	bne.n	8015620 <arp_handle_request+0x44>
 80155f8:	4d0b      	ldr	r5, [pc, #44]	; (8015628 <arp_handle_request+0x4c>)
 80155fa:	2206      	movs	r2, #6
 80155fc:	18a1      	adds	r1, r4, r2
 80155fe:	4628      	mov	r0, r5
 8015600:	f7ff ffd8 	bl	80155b4 <memcpy.isra.0>
 8015604:	f104 0116 	add.w	r1, r4, #22
 8015608:	f105 0020 	add.w	r0, r5, #32
 801560c:	2206      	movs	r2, #6
 801560e:	f7ff ffd1 	bl	80155b4 <memcpy.isra.0>
 8015612:	69e3      	ldr	r3, [r4, #28]
 8015614:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 8015618:	212a      	movs	r1, #42	; 0x2a
 801561a:	4628      	mov	r0, r5
 801561c:	f004 fa10 	bl	8019a40 <emac_eth_send>
 8015620:	b003      	add	sp, #12
 8015622:	bd30      	pop	{r4, r5, pc}
 8015624:	2000f9b0 			; <UNDEFINED> instruction: 0x2000f9b0
 8015628:	2000f9dc 	ldrdcs	pc, [r0], -ip

0801562c <arp_handle_reply>:
 801562c:	69c1      	ldr	r1, [r0, #28]
 801562e:	3016      	adds	r0, #22
 8015630:	f000 b80a 	b.w	8015648 <arp_cache_update>

08015634 <arp_send_request>:
 8015634:	4b03      	ldr	r3, [pc, #12]	; (8015644 <arp_send_request+0x10>)
 8015636:	212a      	movs	r1, #42	; 0x2a
 8015638:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 801563c:	4618      	mov	r0, r3
 801563e:	f004 b9ff 	b.w	8019a40 <emac_eth_send>
 8015642:	bf00      	nop
 8015644:	2000fa08 	andcs	pc, r0, r8, lsl #20

08015648 <arp_cache_update>:
 8015648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801564a:	4c12      	ldr	r4, [pc, #72]	; (8015694 <arp_cache_update+0x4c>)
 801564c:	8823      	ldrh	r3, [r4, #0]
 801564e:	2b20      	cmp	r3, #32
 8015650:	d019      	beq.n	8015686 <arp_cache_update+0x3e>
 8015652:	2500      	movs	r5, #0
 8015654:	1d22      	adds	r2, r4, #4
 8015656:	260c      	movs	r6, #12
 8015658:	b2af      	uxth	r7, r5
 801565a:	42bb      	cmp	r3, r7
 801565c:	d80c      	bhi.n	8015678 <arp_cache_update+0x30>
 801565e:	fb06 2203 	mla	r2, r6, r3, r2
 8015662:	3203      	adds	r2, #3
 8015664:	1d85      	adds	r5, r0, #6
 8015666:	42a8      	cmp	r0, r5
 8015668:	d10e      	bne.n	8015688 <arp_cache_update+0x40>
 801566a:	220c      	movs	r2, #12
 801566c:	fb02 4203 	mla	r2, r2, r3, r4
 8015670:	3301      	adds	r3, #1
 8015672:	6051      	str	r1, [r2, #4]
 8015674:	8023      	strh	r3, [r4, #0]
 8015676:	e006      	b.n	8015686 <arp_cache_update+0x3e>
 8015678:	3501      	adds	r5, #1
 801567a:	fb06 2705 	mla	r7, r6, r5, r2
 801567e:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 8015682:	428f      	cmp	r7, r1
 8015684:	d1e8      	bne.n	8015658 <arp_cache_update+0x10>
 8015686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015688:	f810 6b01 	ldrb.w	r6, [r0], #1
 801568c:	f802 6f01 	strb.w	r6, [r2, #1]!
 8015690:	e7e9      	b.n	8015666 <arp_cache_update+0x1e>
 8015692:	bf00      	nop
 8015694:	100011a4 	andne	r1, r0, r4, lsr #3

08015698 <arp_cache_lookup>:
 8015698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801569c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 801572c <arp_cache_lookup+0x94>
 80156a0:	4606      	mov	r6, r0
 80156a2:	460c      	mov	r4, r1
 80156a4:	2200      	movs	r2, #0
 80156a6:	200c      	movs	r0, #12
 80156a8:	fb00 f302 	mul.w	r3, r0, r2
 80156ac:	f853 1008 	ldr.w	r1, [r3, r8]
 80156b0:	42b1      	cmp	r1, r6
 80156b2:	d10d      	bne.n	80156d0 <arp_cache_lookup+0x38>
 80156b4:	3304      	adds	r3, #4
 80156b6:	4443      	add	r3, r8
 80156b8:	3c01      	subs	r4, #1
 80156ba:	1d9a      	adds	r2, r3, #6
 80156bc:	4293      	cmp	r3, r2
 80156be:	d102      	bne.n	80156c6 <arp_cache_lookup+0x2e>
 80156c0:	4630      	mov	r0, r6
 80156c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156c6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80156ca:	f804 1f01 	strb.w	r1, [r4, #1]!
 80156ce:	e7f5      	b.n	80156bc <arp_cache_lookup+0x24>
 80156d0:	b111      	cbz	r1, 80156d8 <arp_cache_lookup+0x40>
 80156d2:	3201      	adds	r2, #1
 80156d4:	2a20      	cmp	r2, #32
 80156d6:	d1e7      	bne.n	80156a8 <arp_cache_lookup+0x10>
 80156d8:	f8df a054 	ldr.w	sl, [pc, #84]	; 8015730 <arp_cache_lookup+0x98>
 80156dc:	f8ba 5000 	ldrh.w	r5, [sl]
 80156e0:	2704      	movs	r7, #4
 80156e2:	3f01      	subs	r7, #1
 80156e4:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80156e8:	d101      	bne.n	80156ee <arp_cache_lookup+0x56>
 80156ea:	463e      	mov	r6, r7
 80156ec:	e7e8      	b.n	80156c0 <arp_cache_lookup+0x28>
 80156ee:	4630      	mov	r0, r6
 80156f0:	f7ff ffa0 	bl	8015634 <arp_send_request>
 80156f4:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 80156f8:	f1b9 0901 	subs.w	r9, r9, #1
 80156fc:	f8ba 3000 	ldrh.w	r3, [sl]
 8015700:	d011      	beq.n	8015726 <arp_cache_lookup+0x8e>
 8015702:	429d      	cmp	r5, r3
 8015704:	d00c      	beq.n	8015720 <arp_cache_lookup+0x88>
 8015706:	230c      	movs	r3, #12
 8015708:	fb03 8505 	mla	r5, r3, r5, r8
 801570c:	1d2b      	adds	r3, r5, #4
 801570e:	3c01      	subs	r4, #1
 8015710:	350a      	adds	r5, #10
 8015712:	42ab      	cmp	r3, r5
 8015714:	d0d4      	beq.n	80156c0 <arp_cache_lookup+0x28>
 8015716:	f813 2b01 	ldrb.w	r2, [r3], #1
 801571a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801571e:	e7f8      	b.n	8015712 <arp_cache_lookup+0x7a>
 8015720:	f7f2 ff20 	bl	8008564 <net_handle>
 8015724:	e7e8      	b.n	80156f8 <arp_cache_lookup+0x60>
 8015726:	429d      	cmp	r5, r3
 8015728:	d0db      	beq.n	80156e2 <arp_cache_lookup+0x4a>
 801572a:	e7ec      	b.n	8015706 <arp_cache_lookup+0x6e>
 801572c:	100011a8 	andne	r1, r0, r8, lsr #3
 8015730:	100011a4 	andne	r1, r0, r4, lsr #3

08015734 <_parse_response>:
 8015734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015738:	2400      	movs	r4, #0
 801573a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 801573e:	4e52      	ldr	r6, [pc, #328]	; (8015888 <_parse_response+0x154>)
 8015740:	9009      	str	r0, [sp, #36]	; 0x24
 8015742:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8015746:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801574a:	6833      	ldr	r3, [r6, #0]
 801574c:	9402      	str	r4, [sp, #8]
 801574e:	460d      	mov	r5, r1
 8015750:	46a3      	mov	fp, r4
 8015752:	4627      	mov	r7, r4
 8015754:	46a2      	mov	sl, r4
 8015756:	46a1      	mov	r9, r4
 8015758:	9407      	str	r4, [sp, #28]
 801575a:	46a0      	mov	r8, r4
 801575c:	9308      	str	r3, [sp, #32]
 801575e:	f7f2 ff01 	bl	8008564 <net_handle>
 8015762:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8015766:	9300      	str	r3, [sp, #0]
 8015768:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801576c:	ab0c      	add	r3, sp, #48	; 0x30
 801576e:	f44f 7209 	mov.w	r2, #548	; 0x224
 8015772:	a90d      	add	r1, sp, #52	; 0x34
 8015774:	f7fe fcfa 	bl	801416c <udp_recv>
 8015778:	2800      	cmp	r0, #0
 801577a:	d040      	beq.n	80157fe <_parse_response+0xca>
 801577c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8015780:	2b43      	cmp	r3, #67	; 0x43
 8015782:	d13c      	bne.n	80157fe <_parse_response+0xca>
 8015784:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8015788:	1e6b      	subs	r3, r5, #1
 801578a:	1d69      	adds	r1, r5, #5
 801578c:	4299      	cmp	r1, r3
 801578e:	d130      	bne.n	80157f2 <_parse_response+0xbe>
 8015790:	2500      	movs	r5, #0
 8015792:	ab0d      	add	r3, sp, #52	; 0x34
 8015794:	4418      	add	r0, r3
 8015796:	46ac      	mov	ip, r5
 8015798:	462e      	mov	r6, r5
 801579a:	ab49      	add	r3, sp, #292	; 0x124
 801579c:	4629      	mov	r1, r5
 801579e:	4283      	cmp	r3, r0
 80157a0:	d338      	bcc.n	8015814 <_parse_response+0xe0>
 80157a2:	b145      	cbz	r5, 80157b6 <_parse_response+0x82>
 80157a4:	4b39      	ldr	r3, [pc, #228]	; (801588c <_parse_response+0x158>)
 80157a6:	9a07      	ldr	r2, [sp, #28]
 80157a8:	709a      	strb	r2, [r3, #2]
 80157aa:	9a06      	ldr	r2, [sp, #24]
 80157ac:	705a      	strb	r2, [r3, #1]
 80157ae:	9a05      	ldr	r2, [sp, #20]
 80157b0:	f883 8003 	strb.w	r8, [r3, #3]
 80157b4:	701a      	strb	r2, [r3, #0]
 80157b6:	f1bc 0f00 	cmp.w	ip, #0
 80157ba:	d007      	beq.n	80157cc <_parse_response+0x98>
 80157bc:	4b34      	ldr	r3, [pc, #208]	; (8015890 <_parse_response+0x15c>)
 80157be:	9a04      	ldr	r2, [sp, #16]
 80157c0:	70da      	strb	r2, [r3, #3]
 80157c2:	9a03      	ldr	r2, [sp, #12]
 80157c4:	709a      	strb	r2, [r3, #2]
 80157c6:	9a02      	ldr	r2, [sp, #8]
 80157c8:	705c      	strb	r4, [r3, #1]
 80157ca:	701a      	strb	r2, [r3, #0]
 80157cc:	b13e      	cbz	r6, 80157de <_parse_response+0xaa>
 80157ce:	4b31      	ldr	r3, [pc, #196]	; (8015894 <_parse_response+0x160>)
 80157d0:	70df      	strb	r7, [r3, #3]
 80157d2:	f883 a002 	strb.w	sl, [r3, #2]
 80157d6:	f883 9001 	strb.w	r9, [r3, #1]
 80157da:	f883 b000 	strb.w	fp, [r3]
 80157de:	2902      	cmp	r1, #2
 80157e0:	bf02      	ittt	eq
 80157e2:	4b2d      	ldreq	r3, [pc, #180]	; (8015898 <_parse_response+0x164>)
 80157e4:	9a11      	ldreq	r2, [sp, #68]	; 0x44
 80157e6:	601a      	streq	r2, [r3, #0]
 80157e8:	4608      	mov	r0, r1
 80157ea:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 80157ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157f2:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 80157f6:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 80157fa:	45e6      	cmp	lr, ip
 80157fc:	d0c6      	beq.n	801578c <_parse_response+0x58>
 80157fe:	6833      	ldr	r3, [r6, #0]
 8015800:	9a08      	ldr	r2, [sp, #32]
 8015802:	1a9b      	subs	r3, r3, r2
 8015804:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015808:	d3a9      	bcc.n	801575e <_parse_response+0x2a>
 801580a:	2800      	cmp	r0, #0
 801580c:	d1c0      	bne.n	8015790 <_parse_response+0x5c>
 801580e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015812:	e7ea      	b.n	80157ea <_parse_response+0xb6>
 8015814:	781a      	ldrb	r2, [r3, #0]
 8015816:	2a35      	cmp	r2, #53	; 0x35
 8015818:	d011      	beq.n	801583e <_parse_response+0x10a>
 801581a:	d808      	bhi.n	801582e <_parse_response+0xfa>
 801581c:	2a01      	cmp	r2, #1
 801581e:	d011      	beq.n	8015844 <_parse_response+0x110>
 8015820:	2a03      	cmp	r2, #3
 8015822:	d019      	beq.n	8015858 <_parse_response+0x124>
 8015824:	b14a      	cbz	r2, 801583a <_parse_response+0x106>
 8015826:	1c9a      	adds	r2, r3, #2
 8015828:	785b      	ldrb	r3, [r3, #1]
 801582a:	4413      	add	r3, r2
 801582c:	e7b7      	b.n	801579e <_parse_response+0x6a>
 801582e:	2a36      	cmp	r2, #54	; 0x36
 8015830:	d01f      	beq.n	8015872 <_parse_response+0x13e>
 8015832:	2aff      	cmp	r2, #255	; 0xff
 8015834:	d1f7      	bne.n	8015826 <_parse_response+0xf2>
 8015836:	4603      	mov	r3, r0
 8015838:	e7b1      	b.n	801579e <_parse_response+0x6a>
 801583a:	3301      	adds	r3, #1
 801583c:	e7af      	b.n	801579e <_parse_response+0x6a>
 801583e:	7899      	ldrb	r1, [r3, #2]
 8015840:	3303      	adds	r3, #3
 8015842:	e7ac      	b.n	801579e <_parse_response+0x6a>
 8015844:	f893 b002 	ldrb.w	fp, [r3, #2]
 8015848:	f893 9003 	ldrb.w	r9, [r3, #3]
 801584c:	f893 a004 	ldrb.w	sl, [r3, #4]
 8015850:	795f      	ldrb	r7, [r3, #5]
 8015852:	4616      	mov	r6, r2
 8015854:	3306      	adds	r3, #6
 8015856:	e7a2      	b.n	801579e <_parse_response+0x6a>
 8015858:	789a      	ldrb	r2, [r3, #2]
 801585a:	9202      	str	r2, [sp, #8]
 801585c:	791a      	ldrb	r2, [r3, #4]
 801585e:	9203      	str	r2, [sp, #12]
 8015860:	795a      	ldrb	r2, [r3, #5]
 8015862:	9204      	str	r2, [sp, #16]
 8015864:	785a      	ldrb	r2, [r3, #1]
 8015866:	78dc      	ldrb	r4, [r3, #3]
 8015868:	4413      	add	r3, r2
 801586a:	3302      	adds	r3, #2
 801586c:	f04f 0c01 	mov.w	ip, #1
 8015870:	e795      	b.n	801579e <_parse_response+0x6a>
 8015872:	789a      	ldrb	r2, [r3, #2]
 8015874:	9205      	str	r2, [sp, #20]
 8015876:	78da      	ldrb	r2, [r3, #3]
 8015878:	9206      	str	r2, [sp, #24]
 801587a:	791a      	ldrb	r2, [r3, #4]
 801587c:	f893 8005 	ldrb.w	r8, [r3, #5]
 8015880:	9207      	str	r2, [sp, #28]
 8015882:	3306      	adds	r3, #6
 8015884:	2501      	movs	r5, #1
 8015886:	e78a      	b.n	801579e <_parse_response+0x6a>
 8015888:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 801588c:	2000fc64 	andcs	pc, r0, r4, ror #24
 8015890:	2000fa34 	andcs	pc, r0, r4, lsr sl	; <UNPREDICTABLE>
 8015894:	2000fa3c 	andcs	pc, r0, ip, lsr sl	; <UNPREDICTABLE>
 8015898:	2000fa38 	andcs	pc, r0, r8, lsr sl	; <UNPREDICTABLE>

0801589c <memcpy.isra.0>:
 801589c:	3801      	subs	r0, #1
 801589e:	440a      	add	r2, r1
 80158a0:	4291      	cmp	r1, r2
 80158a2:	d100      	bne.n	80158a6 <memcpy.isra.0+0xa>
 80158a4:	4770      	bx	lr
 80158a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80158aa:	f800 3f01 	strb.w	r3, [r0, #1]!
 80158ae:	e7f7      	b.n	80158a0 <memcpy.isra.0+0x4>

080158b0 <dhcp_client>:
 80158b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158b4:	b087      	sub	sp, #28
 80158b6:	460f      	mov	r7, r1
 80158b8:	9203      	str	r2, [sp, #12]
 80158ba:	4a77      	ldr	r2, [pc, #476]	; (8015a98 <dhcp_client+0x1e8>)
 80158bc:	4605      	mov	r5, r0
 80158be:	f44f 7309 	mov.w	r3, #548	; 0x224
 80158c2:	4614      	mov	r4, r2
 80158c4:	2100      	movs	r1, #0
 80158c6:	3b01      	subs	r3, #1
 80158c8:	f802 1b01 	strb.w	r1, [r2], #1
 80158cc:	d1fb      	bne.n	80158c6 <dhcp_client+0x16>
 80158ce:	f240 1301 	movw	r3, #257	; 0x101
 80158d2:	2206      	movs	r2, #6
 80158d4:	4871      	ldr	r0, [pc, #452]	; (8015a9c <dhcp_client+0x1ec>)
 80158d6:	8023      	strh	r3, [r4, #0]
 80158d8:	4629      	mov	r1, r5
 80158da:	70a2      	strb	r2, [r4, #2]
 80158dc:	f7ff ffde 	bl	801589c <memcpy.isra.0>
 80158e0:	4b6f      	ldr	r3, [pc, #444]	; (8015aa0 <dhcp_client+0x1f0>)
 80158e2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80158e6:	f240 1335 	movw	r3, #309	; 0x135
 80158ea:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 80158ee:	2044      	movs	r0, #68	; 0x44
 80158f0:	f7fe fc02 	bl	80140f8 <udp_bind>
 80158f4:	1e06      	subs	r6, r0, #0
 80158f6:	f2c0 80c9 	blt.w	8015a8c <dhcp_client+0x1dc>
 80158fa:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8015a98 <dhcp_client+0x1e8>
 80158fe:	f04f 0915 	mov.w	r9, #21
 8015902:	f1b9 0901 	subs.w	r9, r9, #1
 8015906:	d11f      	bne.n	8015948 <dhcp_client+0x98>
 8015908:	464c      	mov	r4, r9
 801590a:	2044      	movs	r0, #68	; 0x44
 801590c:	f7fe fc0e 	bl	801412c <udp_unbind>
 8015910:	2c00      	cmp	r4, #0
 8015912:	f000 80be 	beq.w	8015a92 <dhcp_client+0x1e2>
 8015916:	4963      	ldr	r1, [pc, #396]	; (8015aa4 <dhcp_client+0x1f4>)
 8015918:	2204      	movs	r2, #4
 801591a:	a805      	add	r0, sp, #20
 801591c:	f7ff ffbe 	bl	801589c <memcpy.isra.0>
 8015920:	9b05      	ldr	r3, [sp, #20]
 8015922:	4961      	ldr	r1, [pc, #388]	; (8015aa8 <dhcp_client+0x1f8>)
 8015924:	603b      	str	r3, [r7, #0]
 8015926:	2204      	movs	r2, #4
 8015928:	a805      	add	r0, sp, #20
 801592a:	f7ff ffb7 	bl	801589c <memcpy.isra.0>
 801592e:	9b05      	ldr	r3, [sp, #20]
 8015930:	60bb      	str	r3, [r7, #8]
 8015932:	a805      	add	r0, sp, #20
 8015934:	495d      	ldr	r1, [pc, #372]	; (8015aac <dhcp_client+0x1fc>)
 8015936:	2204      	movs	r2, #4
 8015938:	f7ff ffb0 	bl	801589c <memcpy.isra.0>
 801593c:	9b05      	ldr	r3, [sp, #20]
 801593e:	607b      	str	r3, [r7, #4]
 8015940:	2000      	movs	r0, #0
 8015942:	b007      	add	sp, #28
 8015944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015948:	f643 5301 	movw	r3, #15617	; 0x3d01
 801594c:	f240 1807 	movw	r8, #263	; 0x107
 8015950:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8015954:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8015958:	782b      	ldrb	r3, [r5, #0]
 801595a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 801595e:	786b      	ldrb	r3, [r5, #1]
 8015960:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8015964:	78ab      	ldrb	r3, [r5, #2]
 8015966:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 801596a:	78eb      	ldrb	r3, [r5, #3]
 801596c:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8015970:	792b      	ldrb	r3, [r5, #4]
 8015972:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8015976:	796b      	ldrb	r3, [r5, #5]
 8015978:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 801597c:	4a4c      	ldr	r2, [pc, #304]	; (8015ab0 <dhcp_client+0x200>)
 801597e:	4b4d      	ldr	r3, [pc, #308]	; (8015ab4 <dhcp_client+0x204>)
 8015980:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8015984:	23ff      	movs	r3, #255	; 0xff
 8015986:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 801598a:	fa5f fb86 	uxtb.w	fp, r6
 801598e:	2343      	movs	r3, #67	; 0x43
 8015990:	9300      	str	r3, [sp, #0]
 8015992:	f240 1205 	movw	r2, #261	; 0x105
 8015996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801599a:	4651      	mov	r1, sl
 801599c:	4658      	mov	r0, fp
 801599e:	f7fe fc41 	bl	8014224 <udp_send>
 80159a2:	4629      	mov	r1, r5
 80159a4:	4630      	mov	r0, r6
 80159a6:	f7ff fec5 	bl	8015734 <_parse_response>
 80159aa:	2802      	cmp	r0, #2
 80159ac:	d1a9      	bne.n	8015902 <dhcp_client+0x52>
 80159ae:	f643 5303 	movw	r3, #15619	; 0x3d03
 80159b2:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 80159b6:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 80159ba:	782b      	ldrb	r3, [r5, #0]
 80159bc:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 80159c0:	786b      	ldrb	r3, [r5, #1]
 80159c2:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 80159c6:	78ab      	ldrb	r3, [r5, #2]
 80159c8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 80159cc:	78eb      	ldrb	r3, [r5, #3]
 80159ce:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 80159d2:	792b      	ldrb	r3, [r5, #4]
 80159d4:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 80159d8:	796b      	ldrb	r3, [r5, #5]
 80159da:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 80159de:	f240 4332 	movw	r3, #1074	; 0x432
 80159e2:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 80159e6:	4b2f      	ldr	r3, [pc, #188]	; (8015aa4 <dhcp_client+0x1f4>)
 80159e8:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8015abc <dhcp_client+0x20c>
 80159ec:	881a      	ldrh	r2, [r3, #0]
 80159ee:	885b      	ldrh	r3, [r3, #2]
 80159f0:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 80159f4:	f240 4336 	movw	r3, #1078	; 0x436
 80159f8:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 80159fc:	4b2e      	ldr	r3, [pc, #184]	; (8015ab8 <dhcp_client+0x208>)
 80159fe:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8015a08:	230c      	movs	r3, #12
 8015a0a:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 8015a0e:	9b03      	ldr	r3, [sp, #12]
 8015a10:	221e      	movs	r2, #30
 8015a12:	1e58      	subs	r0, r3, #1
 8015a14:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8015a18:	f1a2 0e1e 	sub.w	lr, r2, #30
 8015a1c:	1c51      	adds	r1, r2, #1
 8015a1e:	bb8b      	cbnz	r3, 8015a84 <dhcp_client+0x1d4>
 8015a20:	18a3      	adds	r3, r4, r2
 8015a22:	2037      	movs	r0, #55	; 0x37
 8015a24:	4421      	add	r1, r4
 8015a26:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8015a2a:	2006      	movs	r0, #6
 8015a2c:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8015a30:	2103      	movs	r1, #3
 8015a32:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 8015a36:	210f      	movs	r1, #15
 8015a38:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8015a3c:	213a      	movs	r1, #58	; 0x3a
 8015a3e:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8015a42:	213b      	movs	r1, #59	; 0x3b
 8015a44:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8015a48:	f04f 0801 	mov.w	r8, #1
 8015a4c:	21ff      	movs	r1, #255	; 0xff
 8015a4e:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8015a52:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8015a56:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8015a5a:	32f5      	adds	r2, #245	; 0xf5
 8015a5c:	2343      	movs	r3, #67	; 0x43
 8015a5e:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8015a62:	b292      	uxth	r2, r2
 8015a64:	9300      	str	r3, [sp, #0]
 8015a66:	4651      	mov	r1, sl
 8015a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a6c:	4658      	mov	r0, fp
 8015a6e:	f7fe fbd9 	bl	8014224 <udp_send>
 8015a72:	4629      	mov	r1, r5
 8015a74:	4630      	mov	r0, r6
 8015a76:	f7ff fe5d 	bl	8015734 <_parse_response>
 8015a7a:	2805      	cmp	r0, #5
 8015a7c:	f47f af41 	bne.w	8015902 <dhcp_client+0x52>
 8015a80:	4644      	mov	r4, r8
 8015a82:	e742      	b.n	801590a <dhcp_client+0x5a>
 8015a84:	f80c 3f01 	strb.w	r3, [ip, #1]!
 8015a88:	460a      	mov	r2, r1
 8015a8a:	e7c3      	b.n	8015a14 <dhcp_client+0x164>
 8015a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a90:	e757      	b.n	8015942 <dhcp_client+0x92>
 8015a92:	f06f 0001 	mvn.w	r0, #1
 8015a96:	e754      	b.n	8015942 <dhcp_client+0x92>
 8015a98:	2000fa40 	andcs	pc, r0, r0, asr #20
 8015a9c:	2000fa5c 	andcs	pc, r0, ip, asr sl	; <UNPREDICTABLE>
 8015aa0:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8015aa4:	2000fa38 	andcs	pc, r0, r8, lsr sl	; <UNPREDICTABLE>
 8015aa8:	2000fa34 	andcs	pc, r0, r4, lsr sl	; <UNPREDICTABLE>
 8015aac:	2000fa3c 	andcs	pc, r0, ip, lsr sl	; <UNPREDICTABLE>
 8015ab0:	03010637 	movweq	r0, #5687	; 0x1637
 8015ab4:	3b3a0f06 	blcc	8e996d4 <__exidx_end+0xe7b8d0>
 8015ab8:	2000fc64 	andcs	pc, r0, r4, ror #24
 8015abc:	2000fb49 	andcs	pc, r0, r9, asr #22

08015ac0 <dhcp_client_release>:
 8015ac0:	b507      	push	{r0, r1, r2, lr}
 8015ac2:	2044      	movs	r0, #68	; 0x44
 8015ac4:	f7fe fb18 	bl	80140f8 <udp_bind>
 8015ac8:	4912      	ldr	r1, [pc, #72]	; (8015b14 <dhcp_client_release+0x54>)
 8015aca:	f243 6307 	movw	r3, #13831	; 0x3607
 8015ace:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8015ad2:	2304      	movs	r3, #4
 8015ad4:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8015ad8:	4b0f      	ldr	r3, [pc, #60]	; (8015b18 <dhcp_client_release+0x58>)
 8015ada:	781a      	ldrb	r2, [r3, #0]
 8015adc:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 8015ae0:	785a      	ldrb	r2, [r3, #1]
 8015ae2:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 8015ae6:	789a      	ldrb	r2, [r3, #2]
 8015ae8:	78db      	ldrb	r3, [r3, #3]
 8015aea:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 8015aee:	23ff      	movs	r3, #255	; 0xff
 8015af0:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 8015af4:	2343      	movs	r3, #67	; 0x43
 8015af6:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 8015afa:	b2c0      	uxtb	r0, r0
 8015afc:	9300      	str	r3, [sp, #0]
 8015afe:	22fa      	movs	r2, #250	; 0xfa
 8015b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b04:	f7fe fb8e 	bl	8014224 <udp_send>
 8015b08:	2044      	movs	r0, #68	; 0x44
 8015b0a:	b003      	add	sp, #12
 8015b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b10:	f7fe bb0c 	b.w	801412c <udp_unbind>
 8015b14:	2000fa40 	andcs	pc, r0, r0, asr #20
 8015b18:	2000fc64 	andcs	pc, r0, r4, ror #24

08015b1c <memcpy.isra.0>:
 8015b1c:	3801      	subs	r0, #1
 8015b1e:	440a      	add	r2, r1
 8015b20:	4291      	cmp	r1, r2
 8015b22:	d100      	bne.n	8015b26 <memcpy.isra.0+0xa>
 8015b24:	4770      	bx	lr
 8015b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b2a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8015b2e:	e7f7      	b.n	8015b20 <memcpy.isra.0+0x4>

08015b30 <_send_report>:
 8015b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b32:	4c1d      	ldr	r4, [pc, #116]	; (8015ba8 <_send_report+0x78>)
 8015b34:	9001      	str	r0, [sp, #4]
 8015b36:	f3c0 2306 	ubfx	r3, r0, #8, #7
 8015b3a:	70e3      	strb	r3, [r4, #3]
 8015b3c:	f104 0508 	add.w	r5, r4, #8
 8015b40:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015b44:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8015b48:	7160      	strb	r0, [r4, #5]
 8015b4a:	4621      	mov	r1, r4
 8015b4c:	4628      	mov	r0, r5
 8015b4e:	2206      	movs	r2, #6
 8015b50:	7123      	strb	r3, [r4, #4]
 8015b52:	f7ff ffe3 	bl	8015b1c <memcpy.isra.0>
 8015b56:	2204      	movs	r2, #4
 8015b58:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015b5a:	8363      	strh	r3, [r4, #26]
 8015b5c:	eb0d 0102 	add.w	r1, sp, r2
 8015b60:	f104 0026 	add.w	r0, r4, #38	; 0x26
 8015b64:	f104 0616 	add.w	r6, r4, #22
 8015b68:	f7ff ffd8 	bl	8015b1c <memcpy.isra.0>
 8015b6c:	2700      	movs	r7, #0
 8015b6e:	2118      	movs	r1, #24
 8015b70:	4630      	mov	r0, r6
 8015b72:	8427      	strh	r7, [r4, #32]
 8015b74:	f000 f8bf 	bl	8015cf6 <net_chksum>
 8015b78:	2204      	movs	r2, #4
 8015b7a:	eb0d 0102 	add.w	r1, sp, r2
 8015b7e:	8420      	strh	r0, [r4, #32]
 8015b80:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8015b84:	f7ff ffca 	bl	8015b1c <memcpy.isra.0>
 8015b88:	2120      	movs	r1, #32
 8015b8a:	4630      	mov	r0, r6
 8015b8c:	8627      	strh	r7, [r4, #48]	; 0x30
 8015b8e:	f000 f8b2 	bl	8015cf6 <net_chksum>
 8015b92:	212e      	movs	r1, #46	; 0x2e
 8015b94:	8620      	strh	r0, [r4, #48]	; 0x30
 8015b96:	4628      	mov	r0, r5
 8015b98:	f003 ff52 	bl	8019a40 <emac_eth_send>
 8015b9c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015b9e:	3301      	adds	r3, #1
 8015ba0:	8723      	strh	r3, [r4, #56]	; 0x38
 8015ba2:	b003      	add	sp, #12
 8015ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	10001328 	andne	r1, r0, r8, lsr #6

08015bac <igmp_set_ip>:
 8015bac:	b513      	push	{r0, r1, r4, lr}
 8015bae:	4c09      	ldr	r4, [pc, #36]	; (8015bd4 <igmp_set_ip+0x28>)
 8015bb0:	6803      	ldr	r3, [r0, #0]
 8015bb2:	9301      	str	r3, [sp, #4]
 8015bb4:	2204      	movs	r2, #4
 8015bb6:	eb0d 0102 	add.w	r1, sp, r2
 8015bba:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8015bbe:	f7ff ffad 	bl	8015b1c <memcpy.isra.0>
 8015bc2:	2204      	movs	r2, #4
 8015bc4:	eb0d 0102 	add.w	r1, sp, r2
 8015bc8:	f104 0056 	add.w	r0, r4, #86	; 0x56
 8015bcc:	f7ff ffa6 	bl	8015b1c <memcpy.isra.0>
 8015bd0:	b002      	add	sp, #8
 8015bd2:	bd10      	pop	{r4, pc}
 8015bd4:	10001328 	andne	r1, r0, r8, lsr #6

08015bd8 <igmp_timer>:
 8015bd8:	b570      	push	{r4, r5, r6, lr}
 8015bda:	4c0b      	ldr	r4, [pc, #44]	; (8015c08 <igmp_timer+0x30>)
 8015bdc:	2500      	movs	r5, #0
 8015bde:	2602      	movs	r6, #2
 8015be0:	7963      	ldrb	r3, [r4, #5]
 8015be2:	2b01      	cmp	r3, #1
 8015be4:	d109      	bne.n	8015bfa <igmp_timer+0x22>
 8015be6:	7923      	ldrb	r3, [r4, #4]
 8015be8:	b13b      	cbz	r3, 8015bfa <igmp_timer+0x22>
 8015bea:	3b01      	subs	r3, #1
 8015bec:	b2db      	uxtb	r3, r3
 8015bee:	7123      	strb	r3, [r4, #4]
 8015bf0:	b91b      	cbnz	r3, 8015bfa <igmp_timer+0x22>
 8015bf2:	6820      	ldr	r0, [r4, #0]
 8015bf4:	f7ff ff9c 	bl	8015b30 <_send_report>
 8015bf8:	7166      	strb	r6, [r4, #5]
 8015bfa:	3501      	adds	r5, #1
 8015bfc:	2d24      	cmp	r5, #36	; 0x24
 8015bfe:	f104 0408 	add.w	r4, r4, #8
 8015c02:	d1ed      	bne.n	8015be0 <igmp_timer+0x8>
 8015c04:	bd70      	pop	{r4, r5, r6, pc}
 8015c06:	bf00      	nop
 8015c08:	10001394 	mulne	r0, r4, r3

08015c0c <igmp_join>:
 8015c0c:	b538      	push	{r3, r4, r5, lr}
 8015c0e:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8015c12:	2be0      	cmp	r3, #224	; 0xe0
 8015c14:	d11e      	bne.n	8015c54 <igmp_join+0x48>
 8015c16:	4a12      	ldr	r2, [pc, #72]	; (8015c60 <igmp_join+0x54>)
 8015c18:	f8d2 418c 	ldr.w	r4, [r2, #396]	; 0x18c
 8015c1c:	2c24      	cmp	r4, #36	; 0x24
 8015c1e:	d01c      	beq.n	8015c5a <igmp_join+0x4e>
 8015c20:	2300      	movs	r3, #0
 8015c22:	f102 016c 	add.w	r1, r2, #108	; 0x6c
 8015c26:	429c      	cmp	r4, r3
 8015c28:	dc0e      	bgt.n	8015c48 <igmp_join+0x3c>
 8015c2a:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 8015c2e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8015c32:	66d8      	str	r0, [r3, #108]	; 0x6c
 8015c34:	f8a3 1070 	strh.w	r1, [r3, #112]	; 0x70
 8015c38:	1c63      	adds	r3, r4, #1
 8015c3a:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
 8015c3e:	f7ff ff77 	bl	8015b30 <_send_report>
 8015c42:	4623      	mov	r3, r4
 8015c44:	4618      	mov	r0, r3
 8015c46:	bd38      	pop	{r3, r4, r5, pc}
 8015c48:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
 8015c4c:	4285      	cmp	r5, r0
 8015c4e:	d0f9      	beq.n	8015c44 <igmp_join+0x38>
 8015c50:	3301      	adds	r3, #1
 8015c52:	e7e8      	b.n	8015c26 <igmp_join+0x1a>
 8015c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c58:	e7f4      	b.n	8015c44 <igmp_join+0x38>
 8015c5a:	f06f 0301 	mvn.w	r3, #1
 8015c5e:	e7f1      	b.n	8015c44 <igmp_join+0x38>
 8015c60:	10001328 	andne	r1, r0, r8, lsr #6

08015c64 <igmp_leave>:
 8015c64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015c66:	4c1d      	ldr	r4, [pc, #116]	; (8015cdc <igmp_leave+0x78>)
 8015c68:	2600      	movs	r6, #0
 8015c6a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8015c6e:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
 8015c72:	4282      	cmp	r2, r0
 8015c74:	d006      	beq.n	8015c84 <igmp_leave+0x20>
 8015c76:	3601      	adds	r6, #1
 8015c78:	2e24      	cmp	r6, #36	; 0x24
 8015c7a:	d1f8      	bne.n	8015c6e <igmp_leave+0xa>
 8015c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c80:	b002      	add	sp, #8
 8015c82:	bd70      	pop	{r4, r5, r6, pc}
 8015c84:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015c86:	9001      	str	r0, [sp, #4]
 8015c88:	2500      	movs	r5, #0
 8015c8a:	2118      	movs	r1, #24
 8015c8c:	f104 0016 	add.w	r0, r4, #22
 8015c90:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8015c94:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8015c98:	f000 f82d 	bl	8015cf6 <net_chksum>
 8015c9c:	2204      	movs	r2, #4
 8015c9e:	eb0d 0102 	add.w	r1, sp, r2
 8015ca2:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
 8015ca6:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8015caa:	f7ff ff37 	bl	8015b1c <memcpy.isra.0>
 8015cae:	2120      	movs	r1, #32
 8015cb0:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 8015cb4:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8015cb8:	f000 f81d 	bl	8015cf6 <net_chksum>
 8015cbc:	212e      	movs	r1, #46	; 0x2e
 8015cbe:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
 8015cc2:	4807      	ldr	r0, [pc, #28]	; (8015ce0 <igmp_leave+0x7c>)
 8015cc4:	f003 febc 	bl	8019a40 <emac_eth_send>
 8015cc8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015cca:	3301      	adds	r3, #1
 8015ccc:	8723      	strh	r3, [r4, #56]	; 0x38
 8015cce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8015cd2:	4628      	mov	r0, r5
 8015cd4:	66e5      	str	r5, [r4, #108]	; 0x6c
 8015cd6:	f8a4 5070 	strh.w	r5, [r4, #112]	; 0x70
 8015cda:	e7d1      	b.n	8015c80 <igmp_leave+0x1c>
 8015cdc:	10001328 	andne	r1, r0, r8, lsr #6
 8015ce0:	10001364 	andne	r1, r0, r4, ror #6

08015ce4 <ip_set_ip>:
 8015ce4:	b510      	push	{r4, lr}
 8015ce6:	4604      	mov	r4, r0
 8015ce8:	f7fe f9e6 	bl	80140b8 <udp_set_ip>
 8015cec:	4620      	mov	r0, r4
 8015cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cf2:	f7ff bf5b 	b.w	8015bac <igmp_set_ip>

08015cf6 <net_chksum>:
 8015cf6:	f021 0201 	bic.w	r2, r1, #1
 8015cfa:	b530      	push	{r4, r5, lr}
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	1884      	adds	r4, r0, r2
 8015d00:	42a0      	cmp	r0, r4
 8015d02:	d10b      	bne.n	8015d1c <net_chksum+0x26>
 8015d04:	4291      	cmp	r1, r2
 8015d06:	d004      	beq.n	8015d12 <net_chksum+0x1c>
 8015d08:	7802      	ldrb	r2, [r0, #0]
 8015d0a:	0212      	lsls	r2, r2, #8
 8015d0c:	ba52      	rev16	r2, r2
 8015d0e:	fa13 f382 	uxtah	r3, r3, r2
 8015d12:	0c1a      	lsrs	r2, r3, #16
 8015d14:	d106      	bne.n	8015d24 <net_chksum+0x2e>
 8015d16:	43d8      	mvns	r0, r3
 8015d18:	b280      	uxth	r0, r0
 8015d1a:	bd30      	pop	{r4, r5, pc}
 8015d1c:	f830 5b02 	ldrh.w	r5, [r0], #2
 8015d20:	442b      	add	r3, r5
 8015d22:	e7ed      	b.n	8015d00 <net_chksum+0xa>
 8015d24:	fa12 f383 	uxtah	r3, r2, r3
 8015d28:	e7f3      	b.n	8015d12 <net_chksum+0x1c>

08015d2a <net::link_register_read()>:
 8015d2a:	b507      	push	{r0, r1, r2, lr}
 8015d2c:	2201      	movs	r2, #1
 8015d2e:	f10d 0306 	add.w	r3, sp, #6
 8015d32:	4611      	mov	r1, r2
 8015d34:	2000      	movs	r0, #0
 8015d36:	f002 feb5 	bl	8018aa4 <enet_phy_write_read>
 8015d3a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015d3e:	f080 0004 	eor.w	r0, r0, #4
 8015d42:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8015d46:	b003      	add	sp, #12
 8015d48:	f85d fb04 	ldr.w	pc, [sp], #4

08015d4c <memcpy.isra.0>:
 8015d4c:	3801      	subs	r0, #1
 8015d4e:	440a      	add	r2, r1
 8015d50:	4291      	cmp	r1, r2
 8015d52:	d100      	bne.n	8015d56 <memcpy.isra.0+0xa>
 8015d54:	4770      	bx	lr
 8015d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d5a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8015d5e:	e7f7      	b.n	8015d50 <memcpy.isra.0+0x4>

08015d60 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8015d60:	b430      	push	{r4, r5}
 8015d62:	b168      	cbz	r0, 8015d80 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8015d64:	7905      	ldrb	r5, [r0, #4]
 8015d66:	2300      	movs	r3, #0
 8015d68:	5cd4      	ldrb	r4, [r2, r3]
 8015d6a:	b11c      	cbz	r4, 8015d74 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8015d6c:	1c5c      	adds	r4, r3, #1
 8015d6e:	429d      	cmp	r5, r3
 8015d70:	4623      	mov	r3, r4
 8015d72:	dcf9      	bgt.n	8015d68 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8015d74:	6804      	ldr	r4, [r0, #0]
 8015d76:	69e4      	ldr	r4, [r4, #28]
 8015d78:	b2db      	uxtb	r3, r3
 8015d7a:	46a4      	mov	ip, r4
 8015d7c:	bc30      	pop	{r4, r5}
 8015d7e:	4760      	bx	ip
 8015d80:	bc30      	pop	{r4, r5}
 8015d82:	4770      	bx	lr

08015d84 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8015d84:	b110      	cbz	r0, 8015d8c <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8015d86:	6803      	ldr	r3, [r0, #0]
 8015d88:	691b      	ldr	r3, [r3, #16]
 8015d8a:	4718      	bx	r3
 8015d8c:	4770      	bx	lr
	...

08015d90 <DisplayUdf::DisplayUdf()>:
 8015d90:	b510      	push	{r4, lr}
 8015d92:	4604      	mov	r4, r0
 8015d94:	f001 fdee 	bl	8017974 <Display::Display()>
 8015d98:	2202      	movs	r2, #2
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8015da0:	4b05      	ldr	r3, [pc, #20]	; (8015db8 <DisplayUdf::DisplayUdf()+0x28>)
 8015da2:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8015da6:	601c      	str	r4, [r3, #0]
 8015da8:	2301      	movs	r3, #1
 8015daa:	f802 3f01 	strb.w	r3, [r2, #1]!
 8015dae:	3301      	adds	r3, #1
 8015db0:	2b15      	cmp	r3, #21
 8015db2:	d1fa      	bne.n	8015daa <DisplayUdf::DisplayUdf()+0x1a>
 8015db4:	4620      	mov	r0, r4
 8015db6:	bd10      	pop	{r4, pc}
 8015db8:	2000fc68 	andcs	pc, r0, r8, ror #24

08015dbc <DisplayUdf::SetTitle(char const*, ...)>:
 8015dbc:	b40e      	push	{r1, r2, r3}
 8015dbe:	b517      	push	{r0, r1, r2, r4, lr}
 8015dc0:	ab05      	add	r3, sp, #20
 8015dc2:	4604      	mov	r4, r0
 8015dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dc8:	9301      	str	r3, [sp, #4]
 8015dca:	211f      	movs	r1, #31
 8015dcc:	301c      	adds	r0, #28
 8015dce:	f7f4 fbaf 	bl	800a530 <vsnprintf>
 8015dd2:	4420      	add	r0, r4
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	7703      	strb	r3, [r0, #28]
 8015dd8:	b003      	add	sp, #12
 8015dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dde:	b003      	add	sp, #12
 8015de0:	4770      	bx	lr

08015de2 <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 8015de2:	1e4b      	subs	r3, r1, #1
 8015de4:	2b05      	cmp	r3, #5
 8015de6:	b530      	push	{r4, r5, lr}
 8015de8:	d80f      	bhi.n	8015e0a <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8015dea:	f100 043b 	add.w	r4, r0, #59	; 0x3b
 8015dee:	2300      	movs	r3, #0
 8015df0:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8015df4:	428d      	cmp	r5, r1
 8015df6:	d109      	bne.n	8015e0c <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8015df8:	1884      	adds	r4, r0, r2
 8015dfa:	4403      	add	r3, r0
 8015dfc:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8015e00:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 8015e04:	4402      	add	r2, r0
 8015e06:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
 8015e0a:	bd30      	pop	{r4, r5, pc}
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	2b14      	cmp	r3, #20
 8015e10:	d1ee      	bne.n	8015df0 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8015e12:	e7f7      	b.n	8015e04 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

08015e14 <DisplayUdf::ShowEmacStart()>:
 8015e14:	b510      	push	{r4, lr}
 8015e16:	4604      	mov	r4, r0
 8015e18:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8015e1c:	6980      	ldr	r0, [r0, #24]
 8015e1e:	f7ff ffb1 	bl	8015d84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8015e22:	4a03      	ldr	r2, [pc, #12]	; (8015e30 <DisplayUdf::ShowEmacStart()+0x1c>)
 8015e24:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8015e28:	4620      	mov	r0, r4
 8015e2a:	f7f3 fa47 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 8015e2e:	bd10      	pop	{r4, pc}
 8015e30:	0801d2b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, ip, lr, pc}

08015e34 <DisplayUdf::ShowIpAddress()>:
 8015e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e38:	4604      	mov	r4, r0
 8015e3a:	b088      	sub	sp, #32
 8015e3c:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8015e40:	6980      	ldr	r0, [r0, #24]
 8015e42:	f7ff ff9f 	bl	8015d84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8015e46:	4b13      	ldr	r3, [pc, #76]	; (8015e94 <DisplayUdf::ShowIpAddress()+0x60>)
 8015e48:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8015e4c:	681d      	ldr	r5, [r3, #0]
 8015e4e:	9107      	str	r1, [sp, #28]
 8015e50:	696e      	ldr	r6, [r5, #20]
 8015e52:	69e8      	ldr	r0, [r5, #28]
 8015e54:	b2f3      	uxtb	r3, r6
 8015e56:	9306      	str	r3, [sp, #24]
 8015e58:	f004 fca2 	bl	801a7a0 <__popcountsi2>
 8015e5c:	79ea      	ldrb	r2, [r5, #7]
 8015e5e:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8015e62:	f3c6 4807 	ubfx	r8, r6, #16, #8
 8015e66:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 8015e6a:	0e36      	lsrs	r6, r6, #24
 8015e6c:	b982      	cbnz	r2, 8015e90 <DisplayUdf::ShowIpAddress()+0x5c>
 8015e6e:	796a      	ldrb	r2, [r5, #5]
 8015e70:	2a00      	cmp	r2, #0
 8015e72:	bf14      	ite	ne
 8015e74:	2244      	movne	r2, #68	; 0x44
 8015e76:	2253      	moveq	r2, #83	; 0x53
 8015e78:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8015e7c:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8015e80:	4a05      	ldr	r2, [pc, #20]	; (8015e98 <DisplayUdf::ShowIpAddress()+0x64>)
 8015e82:	9700      	str	r7, [sp, #0]
 8015e84:	4620      	mov	r0, r4
 8015e86:	f7f3 fa19 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 8015e8a:	b008      	add	sp, #32
 8015e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e90:	225a      	movs	r2, #90	; 0x5a
 8015e92:	e7f1      	b.n	8015e78 <DisplayUdf::ShowIpAddress()+0x44>
 8015e94:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 8015e98:	0801d2c8 	stmdaeq	r1, {r3, r6, r7, r9, ip, lr, pc}

08015e9c <DisplayUdf::ShowNetmask()>:
 8015e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015e9e:	4b0c      	ldr	r3, [pc, #48]	; (8015ed0 <DisplayUdf::ShowNetmask()+0x34>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	69db      	ldr	r3, [r3, #28]
 8015ea4:	0e1a      	lsrs	r2, r3, #24
 8015ea6:	9202      	str	r2, [sp, #8]
 8015ea8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015eac:	9201      	str	r2, [sp, #4]
 8015eae:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015eb2:	9200      	str	r2, [sp, #0]
 8015eb4:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8015eb8:	4a06      	ldr	r2, [pc, #24]	; (8015ed4 <DisplayUdf::ShowNetmask()+0x38>)
 8015eba:	b2db      	uxtb	r3, r3
 8015ebc:	4604      	mov	r4, r0
 8015ebe:	f7f3 f9fd 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 8015ec2:	4620      	mov	r0, r4
 8015ec4:	b004      	add	sp, #16
 8015ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015eca:	f7ff bfb3 	b.w	8015e34 <DisplayUdf::ShowIpAddress()>
 8015ece:	bf00      	nop
 8015ed0:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 8015ed4:	0801d2da 	stmdaeq	r1, {r1, r3, r4, r6, r7, r9, ip, lr, pc}

08015ed8 <DisplayUdf::ShowGatewayIp()>:
 8015ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015eda:	4604      	mov	r4, r0
 8015edc:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8015ee0:	6980      	ldr	r0, [r0, #24]
 8015ee2:	f7ff ff4f 	bl	8015d84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8015ee6:	4b0a      	ldr	r3, [pc, #40]	; (8015f10 <DisplayUdf::ShowGatewayIp()+0x38>)
 8015ee8:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	699b      	ldr	r3, [r3, #24]
 8015ef0:	0e1a      	lsrs	r2, r3, #24
 8015ef2:	9202      	str	r2, [sp, #8]
 8015ef4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015ef8:	9201      	str	r2, [sp, #4]
 8015efa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015efe:	9200      	str	r2, [sp, #0]
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	4a04      	ldr	r2, [pc, #16]	; (8015f14 <DisplayUdf::ShowGatewayIp()+0x3c>)
 8015f04:	4620      	mov	r0, r4
 8015f06:	f7f3 f9d9 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 8015f0a:	b004      	add	sp, #16
 8015f0c:	bd10      	pop	{r4, pc}
 8015f0e:	bf00      	nop
 8015f10:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 8015f14:	0801d2e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, ip, lr, pc}

08015f18 <DisplayUdf::ShowHostName()>:
 8015f18:	b510      	push	{r4, lr}
 8015f1a:	4604      	mov	r4, r0
 8015f1c:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8015f20:	6980      	ldr	r0, [r0, #24]
 8015f22:	f7ff ff2f 	bl	8015d84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8015f26:	4b05      	ldr	r3, [pc, #20]	; (8015f3c <DisplayUdf::ShowHostName()+0x24>)
 8015f28:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8015f2c:	681a      	ldr	r2, [r3, #0]
 8015f2e:	69a0      	ldr	r0, [r4, #24]
 8015f30:	3220      	adds	r2, #32
 8015f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f36:	f7ff bf13 	b.w	8015d60 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8015f3a:	bf00      	nop
 8015f3c:	2000f9ac 	andcs	pc, r0, ip, lsr #19

08015f40 <DisplayUdf::Show()>:
 8015f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f42:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 8015f46:	4604      	mov	r4, r0
 8015f48:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 8015f4c:	21ff      	movs	r1, #255	; 0xff
 8015f4e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8015f52:	2806      	cmp	r0, #6
 8015f54:	bf88      	it	hi
 8015f56:	7019      	strbhi	r1, [r3, #0]
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d1f8      	bne.n	8015f4e <DisplayUdf::Show()+0xe>
 8015f5c:	2501      	movs	r5, #1
 8015f5e:	4629      	mov	r1, r5
 8015f60:	3501      	adds	r5, #1
 8015f62:	69a0      	ldr	r0, [r4, #24]
 8015f64:	b2ed      	uxtb	r5, r5
 8015f66:	f7ff ff0d 	bl	8015d84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8015f6a:	2d06      	cmp	r5, #6
 8015f6c:	d1f7      	bne.n	8015f5e <DisplayUdf::Show()+0x1e>
 8015f6e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8015f72:	69a0      	ldr	r0, [r4, #24]
 8015f74:	f104 021c 	add.w	r2, r4, #28
 8015f78:	f7ff fef2 	bl	8015d60 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8015f7c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8015f80:	69a0      	ldr	r0, [r4, #24]
 8015f82:	4a0d      	ldr	r2, [pc, #52]	; (8015fb8 <DisplayUdf::Show()+0x78>)
 8015f84:	f7ff feec 	bl	8015d60 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8015f88:	4b0c      	ldr	r3, [pc, #48]	; (8015fbc <DisplayUdf::Show()+0x7c>)
 8015f8a:	4a0d      	ldr	r2, [pc, #52]	; (8015fc0 <DisplayUdf::Show()+0x80>)
 8015f8c:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8015f90:	9300      	str	r3, [sp, #0]
 8015f92:	4620      	mov	r0, r4
 8015f94:	2303      	movs	r3, #3
 8015f96:	f7f3 f991 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	f7ff ff4a 	bl	8015e34 <DisplayUdf::ShowIpAddress()>
 8015fa0:	4620      	mov	r0, r4
 8015fa2:	f7ff ff99 	bl	8015ed8 <DisplayUdf::ShowGatewayIp()>
 8015fa6:	4620      	mov	r0, r4
 8015fa8:	f7ff ff78 	bl	8015e9c <DisplayUdf::ShowNetmask()>
 8015fac:	4620      	mov	r0, r4
 8015fae:	b003      	add	sp, #12
 8015fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fb4:	f7ff bfb0 	b.w	8015f18 <DisplayUdf::ShowHostName()>
 8015fb8:	0801b146 	stmdaeq	r1, {r1, r2, r6, r8, ip, sp, pc}
 8015fbc:	2000fd40 	andcs	pc, r0, r0, asr #26
 8015fc0:	0801d2f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r9, ip, lr, pc}

08015fc4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8015fc4:	3901      	subs	r1, #1
 8015fc6:	b510      	push	{r4, lr}
 8015fc8:	4604      	mov	r4, r0
 8015fca:	2903      	cmp	r1, #3
 8015fcc:	d814      	bhi.n	8015ff8 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8015fce:	e8df f001 	tbb	[pc, r1]
 8015fd2:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 8015fd6:	4b14      	ldr	r3, [pc, #80]	; (8016028 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8015fd8:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8015fdc:	6818      	ldr	r0, [r3, #0]
 8015fde:	f7f4 fd1b 	bl	800aa18 <Display::Status(Display7SegmentMessage)>
 8015fe2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8015fe6:	69a0      	ldr	r0, [r4, #24]
 8015fe8:	f7ff fecc 	bl	8015d84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8015fec:	4a0f      	ldr	r2, [pc, #60]	; (801602c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 8015fee:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8015ff2:	4620      	mov	r0, r4
 8015ff4:	f7f3 f962 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 8015ff8:	bd10      	pop	{r4, pc}
 8015ffa:	f248 0180 	movw	r1, #32896	; 0x8080
 8015ffe:	4b0a      	ldr	r3, [pc, #40]	; (8016028 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8016000:	6818      	ldr	r0, [r3, #0]
 8016002:	f7f4 fd09 	bl	800aa18 <Display::Status(Display7SegmentMessage)>
 8016006:	e7f7      	b.n	8015ff8 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8016008:	4b07      	ldr	r3, [pc, #28]	; (8016028 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 801600a:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 801600e:	6818      	ldr	r0, [r3, #0]
 8016010:	f7f4 fd02 	bl	800aa18 <Display::Status(Display7SegmentMessage)>
 8016014:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8016018:	69a0      	ldr	r0, [r4, #24]
 801601a:	f7ff feb3 	bl	8015d84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801601e:	4a04      	ldr	r2, [pc, #16]	; (8016030 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8016020:	e7e5      	b.n	8015fee <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 8016022:	f645 3179 	movw	r1, #23417	; 0x5b79
 8016026:	e7ea      	b.n	8015ffe <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8016028:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0
 801602c:	0801d307 	stmdaeq	r1, {r0, r1, r2, r8, r9, ip, lr, pc}
 8016030:	0801d315 	stmdaeq	r1, {r0, r2, r4, r8, r9, ip, lr, pc}

08016034 <DisplayUdf::ShowShutdown()>:
 8016034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016036:	4604      	mov	r4, r0
 8016038:	6980      	ldr	r0, [r0, #24]
 801603a:	b1c0      	cbz	r0, 801606e <DisplayUdf::ShowShutdown()+0x3a>
 801603c:	7947      	ldrb	r7, [r0, #5]
 801603e:	6803      	ldr	r3, [r0, #0]
 8016040:	7905      	ldrb	r5, [r0, #4]
 8016042:	6a1b      	ldr	r3, [r3, #32]
 8016044:	1e7a      	subs	r2, r7, #1
 8016046:	b2d2      	uxtb	r2, r2
 8016048:	9201      	str	r2, [sp, #4]
 801604a:	2100      	movs	r1, #0
 801604c:	4798      	blx	r3
 801604e:	9a01      	ldr	r2, [sp, #4]
 8016050:	2600      	movs	r6, #0
 8016052:	3d01      	subs	r5, #1
 8016054:	42ae      	cmp	r6, r5
 8016056:	69a0      	ldr	r0, [r4, #24]
 8016058:	d310      	bcc.n	801607c <DisplayUdf::ShowShutdown()+0x48>
 801605a:	b118      	cbz	r0, 8016064 <DisplayUdf::ShowShutdown()+0x30>
 801605c:	6803      	ldr	r3, [r0, #0]
 801605e:	2100      	movs	r1, #0
 8016060:	6a1b      	ldr	r3, [r3, #32]
 8016062:	4798      	blx	r3
 8016064:	4a0a      	ldr	r2, [pc, #40]	; (8016090 <DisplayUdf::ShowShutdown()+0x5c>)
 8016066:	69a0      	ldr	r0, [r4, #24]
 8016068:	4639      	mov	r1, r7
 801606a:	f7ff fe79 	bl	8015d60 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 801606e:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8016072:	4620      	mov	r0, r4
 8016074:	f7f4 fcd0 	bl	800aa18 <Display::Status(Display7SegmentMessage)>
 8016078:	b003      	add	sp, #12
 801607a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801607c:	b128      	cbz	r0, 801608a <DisplayUdf::ShowShutdown()+0x56>
 801607e:	6803      	ldr	r3, [r0, #0]
 8016080:	9201      	str	r2, [sp, #4]
 8016082:	695b      	ldr	r3, [r3, #20]
 8016084:	2120      	movs	r1, #32
 8016086:	4798      	blx	r3
 8016088:	9a01      	ldr	r2, [sp, #4]
 801608a:	3601      	adds	r6, #1
 801608c:	e7e2      	b.n	8016054 <DisplayUdf::ShowShutdown()+0x20>
 801608e:	bf00      	nop
 8016090:	0801d323 	stmdaeq	r1, {r0, r1, r5, r8, r9, ip, lr, pc}

08016094 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8016094:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016096:	88c6      	ldrh	r6, [r0, #6]
 8016098:	8885      	ldrh	r5, [r0, #4]
 801609a:	42ae      	cmp	r6, r5
 801609c:	d216      	bcs.n	80160cc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 801609e:	4604      	mov	r4, r0
 80160a0:	6800      	ldr	r0, [r0, #0]
 80160a2:	1bad      	subs	r5, r5, r6
 80160a4:	4430      	add	r0, r6
 80160a6:	7a26      	ldrb	r6, [r4, #8]
 80160a8:	b923      	cbnz	r3, 80160b4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 80160aa:	b926      	cbnz	r6, 80160b6 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 80160ac:	9200      	str	r2, [sp, #0]
 80160ae:	460b      	mov	r3, r1
 80160b0:	4a09      	ldr	r2, [pc, #36]	; (80160d8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 80160b2:	e003      	b.n	80160bc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 80160b4:	b166      	cbz	r6, 80160d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 80160b6:	9200      	str	r2, [sp, #0]
 80160b8:	4a08      	ldr	r2, [pc, #32]	; (80160dc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 80160ba:	460b      	mov	r3, r1
 80160bc:	4629      	mov	r1, r5
 80160be:	f7f4 fa1f 	bl	800a500 <snprintf>
 80160c2:	4285      	cmp	r5, r0
 80160c4:	bfa2      	ittt	ge
 80160c6:	88e3      	ldrhge	r3, [r4, #6]
 80160c8:	181b      	addge	r3, r3, r0
 80160ca:	80e3      	strhge	r3, [r4, #6]
 80160cc:	b002      	add	sp, #8
 80160ce:	bd70      	pop	{r4, r5, r6, pc}
 80160d0:	9200      	str	r2, [sp, #0]
 80160d2:	460b      	mov	r3, r1
 80160d4:	4a02      	ldr	r2, [pc, #8]	; (80160e0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 80160d6:	e7f1      	b.n	80160bc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 80160d8:	0801ada1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, sp, pc}
 80160dc:	0801ad98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, sp, pc}
 80160e0:	0801ada2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, sp, pc}

080160e4 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 80160e4:	b510      	push	{r4, lr}
 80160e6:	2220      	movs	r2, #32
 80160e8:	4604      	mov	r4, r0
 80160ea:	f840 1b04 	str.w	r1, [r0], #4
 80160ee:	2100      	movs	r1, #0
 80160f0:	f002 f8f4 	bl	80182dc <memset>
 80160f4:	f647 7305 	movw	r3, #32517	; 0x7f05
 80160f8:	84a3      	strh	r3, [r4, #36]	; 0x24
 80160fa:	4620      	mov	r0, r4
 80160fc:	bd10      	pop	{r4, pc}

080160fe <DisplayUdfParams::Load()>:
 80160fe:	b508      	push	{r3, lr}
 8016100:	2300      	movs	r3, #0
 8016102:	4601      	mov	r1, r0
 8016104:	6043      	str	r3, [r0, #4]
 8016106:	6800      	ldr	r0, [r0, #0]
 8016108:	b120      	cbz	r0, 8016114 <DisplayUdfParams::Load()+0x16>
 801610a:	6803      	ldr	r3, [r0, #0]
 801610c:	3104      	adds	r1, #4
 801610e:	68db      	ldr	r3, [r3, #12]
 8016110:	4798      	blx	r3
 8016112:	2001      	movs	r0, #1
 8016114:	bd08      	pop	{r3, pc}
	...

08016118 <DisplayUdfParams::Load(char const*, unsigned int)>:
 8016118:	6803      	ldr	r3, [r0, #0]
 801611a:	b1d3      	cbz	r3, 8016152 <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 801611c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801611e:	2300      	movs	r3, #0
 8016120:	6043      	str	r3, [r0, #4]
 8016122:	4604      	mov	r4, r0
 8016124:	460d      	mov	r5, r1
 8016126:	4616      	mov	r6, r2
 8016128:	490a      	ldr	r1, [pc, #40]	; (8016154 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 801612a:	4602      	mov	r2, r0
 801612c:	4668      	mov	r0, sp
 801612e:	f001 fa2b 	bl	8017588 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8016132:	4632      	mov	r2, r6
 8016134:	4629      	mov	r1, r5
 8016136:	4668      	mov	r0, sp
 8016138:	f001 fa2a 	bl	8017590 <ReadConfigFile::Read(char const*, unsigned int)>
 801613c:	4621      	mov	r1, r4
 801613e:	f851 0b04 	ldr.w	r0, [r1], #4
 8016142:	6803      	ldr	r3, [r0, #0]
 8016144:	689b      	ldr	r3, [r3, #8]
 8016146:	4798      	blx	r3
 8016148:	4668      	mov	r0, sp
 801614a:	f001 fa20 	bl	801758e <ReadConfigFile::~ReadConfigFile()>
 801614e:	b002      	add	sp, #8
 8016150:	bd70      	pop	{r4, r5, r6, pc}
 8016152:	4770      	bx	lr
 8016154:	08016221 	stmdaeq	r1, {r0, r5, r9, sp, lr}

08016158 <DisplayUdfParams::callbackFunction(char const*)>:
 8016158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801615a:	460e      	mov	r6, r1
 801615c:	4604      	mov	r4, r0
 801615e:	492c      	ldr	r1, [pc, #176]	; (8016210 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8016160:	f10d 0207 	add.w	r2, sp, #7
 8016164:	4630      	mov	r0, r6
 8016166:	f001 fb44 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801616a:	b968      	cbnz	r0, 8016188 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 801616c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016170:	6863      	ldr	r3, [r4, #4]
 8016172:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8016176:	2a7f      	cmp	r2, #127	; 0x7f
 8016178:	bf14      	ite	ne
 801617a:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 801617e:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 8016182:	6063      	str	r3, [r4, #4]
 8016184:	b003      	add	sp, #12
 8016186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016188:	4922      	ldr	r1, [pc, #136]	; (8016214 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 801618a:	f10d 0207 	add.w	r2, sp, #7
 801618e:	4630      	mov	r0, r6
 8016190:	f001 fb2f 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8016194:	b958      	cbnz	r0, 80161ae <DisplayUdfParams::callbackFunction(char const*)+0x56>
 8016196:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801619a:	6863      	ldr	r3, [r4, #4]
 801619c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80161a0:	2a05      	cmp	r2, #5
 80161a2:	bf14      	ite	ne
 80161a4:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80161a8:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 80161ac:	e7e9      	b.n	8016182 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80161ae:	491a      	ldr	r1, [pc, #104]	; (8016218 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 80161b0:	f10d 0207 	add.w	r2, sp, #7
 80161b4:	4630      	mov	r0, r6
 80161b6:	f001 fb1c 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80161ba:	b948      	cbnz	r0, 80161d0 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 80161bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80161c0:	6863      	ldr	r3, [r4, #4]
 80161c2:	b112      	cbz	r2, 80161ca <DisplayUdfParams::callbackFunction(char const*)+0x72>
 80161c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80161c8:	e7db      	b.n	8016182 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80161ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80161ce:	e7d8      	b.n	8016182 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80161d0:	4f12      	ldr	r7, [pc, #72]	; (801621c <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 80161d2:	2500      	movs	r5, #0
 80161d4:	f857 1b04 	ldr.w	r1, [r7], #4
 80161d8:	f10d 0207 	add.w	r2, sp, #7
 80161dc:	4630      	mov	r0, r6
 80161de:	f001 fb08 	bl	80177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80161e2:	b988      	cbnz	r0, 8016208 <DisplayUdfParams::callbackFunction(char const*)+0xb0>
 80161e4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80161e8:	6862      	ldr	r2, [r4, #4]
 80161ea:	1e4e      	subs	r6, r1, #1
 80161ec:	2301      	movs	r3, #1
 80161ee:	2e05      	cmp	r6, #5
 80161f0:	fa03 f305 	lsl.w	r3, r3, r5
 80161f4:	4425      	add	r5, r4
 80161f6:	d802      	bhi.n	80161fe <DisplayUdfParams::callbackFunction(char const*)+0xa6>
 80161f8:	7229      	strb	r1, [r5, #8]
 80161fa:	4313      	orrs	r3, r2
 80161fc:	e7c1      	b.n	8016182 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80161fe:	ea22 0203 	bic.w	r2, r2, r3
 8016202:	7228      	strb	r0, [r5, #8]
 8016204:	6062      	str	r2, [r4, #4]
 8016206:	e7bd      	b.n	8016184 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8016208:	3501      	adds	r5, #1
 801620a:	2d14      	cmp	r5, #20
 801620c:	d1e2      	bne.n	80161d4 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 801620e:	e7b9      	b.n	8016184 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8016210:	0801d3e2 	stmdaeq	r1, {r1, r5, r6, r7, r8, r9, ip, lr, pc}
 8016214:	0801d3aa 	stmdaeq	r1, {r1, r3, r5, r7, r8, r9, ip, lr, pc}
 8016218:	0801d3b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, ip, lr, pc}
 801621c:	0801d334 	stmdaeq	r1, {r2, r4, r5, r8, r9, ip, lr, pc}

08016220 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 8016220:	f7ff bf9a 	b.w	8016158 <DisplayUdfParams::callbackFunction(char const*)>

08016224 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 8016224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016228:	4604      	mov	r4, r0
 801622a:	b086      	sub	sp, #24
 801622c:	4615      	mov	r5, r2
 801622e:	461e      	mov	r6, r3
 8016230:	3004      	adds	r0, #4
 8016232:	b379      	cbz	r1, 8016294 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 8016234:	2222      	movs	r2, #34	; 0x22
 8016236:	f002 f83a 	bl	80182ae <memmove>
 801623a:	462a      	mov	r2, r5
 801623c:	493e      	ldr	r1, [pc, #248]	; (8016338 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 801623e:	4633      	mov	r3, r6
 8016240:	a803      	add	r0, sp, #12
 8016242:	f001 f901 	bl	8017448 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8016246:	6863      	ldr	r3, [r4, #4]
 8016248:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 801624c:	493b      	ldr	r1, [pc, #236]	; (801633c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 801624e:	f3c3 7340 	ubfx	r3, r3, #29, #1
 8016252:	a803      	add	r0, sp, #12
 8016254:	f7ff ff1e 	bl	8016094 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8016258:	6863      	ldr	r3, [r4, #4]
 801625a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801625e:	4938      	ldr	r1, [pc, #224]	; (8016340 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8016260:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8016264:	a803      	add	r0, sp, #12
 8016266:	f7ff ff15 	bl	8016094 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 801626a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801626e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8016272:	6863      	ldr	r3, [r4, #4]
 8016274:	42aa      	cmp	r2, r5
 8016276:	d226      	bcs.n	80162c6 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 8016278:	9803      	ldr	r0, [sp, #12]
 801627a:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 801627e:	4410      	add	r0, r2
 8016280:	eba5 0502 	sub.w	r5, r5, r2
 8016284:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8016288:	d10b      	bne.n	80162a2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 801628a:	b962      	cbnz	r2, 80162a6 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 801628c:	9200      	str	r2, [sp, #0]
 801628e:	4b2d      	ldr	r3, [pc, #180]	; (8016344 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 8016290:	4a2d      	ldr	r2, [pc, #180]	; (8016348 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 8016292:	e00e      	b.n	80162b2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8016294:	6823      	ldr	r3, [r4, #0]
 8016296:	681a      	ldr	r2, [r3, #0]
 8016298:	4601      	mov	r1, r0
 801629a:	68d2      	ldr	r2, [r2, #12]
 801629c:	4618      	mov	r0, r3
 801629e:	4790      	blx	r2
 80162a0:	e7cb      	b.n	801623a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 80162a2:	2a00      	cmp	r2, #0
 80162a4:	d042      	beq.n	801632c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 80162a6:	3b00      	subs	r3, #0
 80162a8:	bf18      	it	ne
 80162aa:	2301      	movne	r3, #1
 80162ac:	9300      	str	r3, [sp, #0]
 80162ae:	4a27      	ldr	r2, [pc, #156]	; (801634c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 80162b0:	4b24      	ldr	r3, [pc, #144]	; (8016344 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 80162b2:	4629      	mov	r1, r5
 80162b4:	f7f4 f924 	bl	800a500 <snprintf>
 80162b8:	4285      	cmp	r5, r0
 80162ba:	bfa2      	ittt	ge
 80162bc:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80162c0:	181b      	addge	r3, r3, r0
 80162c2:	f8ad 3012 	strhge.w	r3, [sp, #18]
 80162c6:	4e22      	ldr	r6, [pc, #136]	; (8016350 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 80162c8:	2500      	movs	r5, #0
 80162ca:	2701      	movs	r7, #1
 80162cc:	f104 0808 	add.w	r8, r4, #8
 80162d0:	f856 1b04 	ldr.w	r1, [r6], #4
 80162d4:	780b      	ldrb	r3, [r1, #0]
 80162d6:	b163      	cbz	r3, 80162f2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xce>
 80162d8:	6862      	ldr	r2, [r4, #4]
 80162da:	fa07 f305 	lsl.w	r3, r7, r5
 80162de:	4393      	bics	r3, r2
 80162e0:	bf08      	it	eq
 80162e2:	2301      	moveq	r3, #1
 80162e4:	f818 2005 	ldrb.w	r2, [r8, r5]
 80162e8:	bf18      	it	ne
 80162ea:	2300      	movne	r3, #0
 80162ec:	a803      	add	r0, sp, #12
 80162ee:	f7ff fed1 	bl	8016094 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80162f2:	3501      	adds	r5, #1
 80162f4:	2d14      	cmp	r5, #20
 80162f6:	d1eb      	bne.n	80162d0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 80162f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80162fc:	b17b      	cbz	r3, 801631e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xfa>
 80162fe:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8016302:	9b03      	ldr	r3, [sp, #12]
 8016304:	4413      	add	r3, r2
 8016306:	227d      	movs	r2, #125	; 0x7d
 8016308:	f803 2c01 	strb.w	r2, [r3, #-1]
 801630c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016310:	9903      	ldr	r1, [sp, #12]
 8016312:	54ca      	strb	r2, [r1, r3]
 8016314:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016318:	3301      	adds	r3, #1
 801631a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801631e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8016322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016324:	601a      	str	r2, [r3, #0]
 8016326:	b006      	add	sp, #24
 8016328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801632c:	2301      	movs	r3, #1
 801632e:	9300      	str	r3, [sp, #0]
 8016330:	4a08      	ldr	r2, [pc, #32]	; (8016354 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x130>)
 8016332:	4b04      	ldr	r3, [pc, #16]	; (8016344 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 8016334:	e7bd      	b.n	80162b2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8016336:	bf00      	nop
 8016338:	0801d3d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, r9, ip, lr, pc}
 801633c:	0801d3e2 	stmdaeq	r1, {r1, r5, r6, r7, r8, r9, ip, lr, pc}
 8016340:	0801d3aa 	stmdaeq	r1, {r1, r3, r5, r7, r8, r9, ip, lr, pc}
 8016344:	0801d3b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, ip, lr, pc}
 8016348:	0801ada1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, sp, pc}
 801634c:	0801ad98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, sp, pc}
 8016350:	0801d334 	stmdaeq	r1, {r2, r4, r5, r8, r9, ip, lr, pc}
 8016354:	0801ada2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, sp, pc}

08016358 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 8016358:	b513      	push	{r0, r1, r4, lr}
 801635a:	6804      	ldr	r4, [r0, #0]
 801635c:	b914      	cbnz	r4, 8016364 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 801635e:	601c      	str	r4, [r3, #0]
 8016360:	b002      	add	sp, #8
 8016362:	bd10      	pop	{r4, pc}
 8016364:	9300      	str	r3, [sp, #0]
 8016366:	4613      	mov	r3, r2
 8016368:	460a      	mov	r2, r1
 801636a:	2100      	movs	r1, #0
 801636c:	f7ff ff5a 	bl	8016224 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 8016370:	e7f6      	b.n	8016360 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

08016372 <DisplayUdfParams::Set(DisplayUdf*)>:
 8016372:	6843      	ldr	r3, [r0, #4]
 8016374:	009a      	lsls	r2, r3, #2
 8016376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801637a:	4604      	mov	r4, r0
 801637c:	460e      	mov	r6, r1
 801637e:	d506      	bpl.n	801638e <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8016380:	6988      	ldr	r0, [r1, #24]
 8016382:	b120      	cbz	r0, 801638e <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8016384:	6803      	ldr	r3, [r0, #0]
 8016386:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 801638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801638c:	4798      	blx	r3
 801638e:	6863      	ldr	r3, [r4, #4]
 8016390:	69b0      	ldr	r0, [r6, #24]
 8016392:	00db      	lsls	r3, r3, #3
 8016394:	bf41      	itttt	mi
 8016396:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 801639a:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 801639e:	4353      	mulmi	r3, r2
 80163a0:	6173      	strmi	r3, [r6, #20]
 80163a2:	6861      	ldr	r1, [r4, #4]
 80163a4:	f3c1 7180 	ubfx	r1, r1, #30, #1
 80163a8:	b110      	cbz	r0, 80163b0 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 80163aa:	6803      	ldr	r3, [r0, #0]
 80163ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163ae:	4798      	blx	r3
 80163b0:	2500      	movs	r5, #0
 80163b2:	2701      	movs	r7, #1
 80163b4:	f104 0808 	add.w	r8, r4, #8
 80163b8:	6862      	ldr	r2, [r4, #4]
 80163ba:	fa07 f305 	lsl.w	r3, r7, r5
 80163be:	4393      	bics	r3, r2
 80163c0:	d105      	bne.n	80163ce <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 80163c2:	f818 1005 	ldrb.w	r1, [r8, r5]
 80163c6:	462a      	mov	r2, r5
 80163c8:	4630      	mov	r0, r6
 80163ca:	f7ff fd0a 	bl	8015de2 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80163ce:	3501      	adds	r5, #1
 80163d0:	2d14      	cmp	r5, #20
 80163d2:	d1f1      	bne.n	80163b8 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 80163d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080163d8 <DisplayUdfParams::Dump()>:
 80163d8:	4770      	bx	lr
	...

080163dc <artnet::display_shortname(char const*)>:
 80163dc:	4b02      	ldr	r3, [pc, #8]	; (80163e8 <artnet::display_shortname(char const*)+0xc>)
 80163de:	6819      	ldr	r1, [r3, #0]
 80163e0:	4b02      	ldr	r3, [pc, #8]	; (80163ec <artnet::display_shortname(char const*)+0x10>)
 80163e2:	6818      	ldr	r0, [r3, #0]
 80163e4:	f000 b81e 	b.w	8016424 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 80163e8:	200006cc 	andcs	r0, r0, ip, asr #13
 80163ec:	2000fc68 	andcs	pc, r0, r8, ror #24

080163f0 <artnet::display_longname(char const*)>:
 80163f0:	4770      	bx	lr
	...

080163f4 <artnet::display_universe_switch(unsigned int, unsigned char)>:
 80163f4:	4b02      	ldr	r3, [pc, #8]	; (8016400 <artnet::display_universe_switch(unsigned int, unsigned char)+0xc>)
 80163f6:	6819      	ldr	r1, [r3, #0]
 80163f8:	4b02      	ldr	r3, [pc, #8]	; (8016404 <artnet::display_universe_switch(unsigned int, unsigned char)+0x10>)
 80163fa:	6818      	ldr	r0, [r3, #0]
 80163fc:	f000 b834 	b.w	8016468 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8016400:	200006cc 	andcs	r0, r0, ip, asr #13
 8016404:	2000fc68 	andcs	pc, r0, r8, ror #24

08016408 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>:
 8016408:	4b02      	ldr	r3, [pc, #8]	; (8016414 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0xc>)
 801640a:	6819      	ldr	r1, [r3, #0]
 801640c:	4b02      	ldr	r3, [pc, #8]	; (8016418 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0x10>)
 801640e:	6818      	ldr	r0, [r3, #0]
 8016410:	f000 b82a 	b.w	8016468 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8016414:	200006cc 	andcs	r0, r0, ip, asr #13
 8016418:	2000fc68 	andcs	pc, r0, r8, ror #24

0801641c <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)>:
 801641c:	f7ff bff4 	b.w	8016408 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>

08016420 <artnet::display_rdm_enabled(unsigned int, bool)>:
 8016420:	4770      	bx	lr

08016422 <artnet::display_failsafe(unsigned char)>:
 8016422:	4770      	bx	lr

08016424 <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 8016424:	b570      	push	{r4, r5, r6, lr}
 8016426:	4605      	mov	r5, r0
 8016428:	6980      	ldr	r0, [r0, #24]
 801642a:	460c      	mov	r4, r1
 801642c:	b120      	cbz	r0, 8016438 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 801642e:	6803      	ldr	r3, [r0, #0]
 8016430:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8016434:	691b      	ldr	r3, [r3, #16]
 8016436:	4798      	blx	r3
 8016438:	69a8      	ldr	r0, [r5, #24]
 801643a:	f104 0258 	add.w	r2, r4, #88	; 0x58
 801643e:	b190      	cbz	r0, 8016466 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 8016440:	7906      	ldrb	r6, [r0, #4]
 8016442:	3457      	adds	r4, #87	; 0x57
 8016444:	2300      	movs	r3, #0
 8016446:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 801644a:	b119      	cbz	r1, 8016454 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 801644c:	1c59      	adds	r1, r3, #1
 801644e:	429e      	cmp	r6, r3
 8016450:	460b      	mov	r3, r1
 8016452:	dcf8      	bgt.n	8016446 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 8016454:	6801      	ldr	r1, [r0, #0]
 8016456:	69cc      	ldr	r4, [r1, #28]
 8016458:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 801645c:	46a4      	mov	ip, r4
 801645e:	b2db      	uxtb	r3, r3
 8016460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016464:	4760      	bx	ip
 8016466:	bd70      	pop	{r4, r5, r6, pc}

08016468 <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 8016468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801646c:	460c      	mov	r4, r1
 801646e:	b089      	sub	sp, #36	; 0x24
 8016470:	4606      	mov	r6, r0
 8016472:	2301      	movs	r3, #1
 8016474:	f10d 021f 	add.w	r2, sp, #31
 8016478:	2100      	movs	r1, #0
 801647a:	4620      	mov	r0, r4
 801647c:	f7f6 f9bf 	bl	800c7fe <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8016480:	b1e8      	cbz	r0, 80164be <DisplayUdf::ShowUniverse(ArtNetNode*)+0x56>
 8016482:	f8d4 5a38 	ldr.w	r5, [r4, #2616]	; 0xa38
 8016486:	4a2a      	ldr	r2, [pc, #168]	; (8016530 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xc8>)
 8016488:	4b2a      	ldr	r3, [pc, #168]	; (8016534 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>)
 801648a:	4f2b      	ldr	r7, [pc, #172]	; (8016538 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>)
 801648c:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 8016490:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8016494:	2d00      	cmp	r5, #0
 8016496:	bf18      	it	ne
 8016498:	4613      	movne	r3, r2
 801649a:	f8d4 5a40 	ldr.w	r5, [r4, #2624]	; 0xa40
 801649e:	4a27      	ldr	r2, [pc, #156]	; (801653c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>)
 80164a0:	2d00      	cmp	r5, #0
 80164a2:	bf18      	it	ne
 80164a4:	463a      	movne	r2, r7
 80164a6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80164aa:	e9cd 1000 	strd	r1, r0, [sp]
 80164ae:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80164b2:	4a23      	ldr	r2, [pc, #140]	; (8016540 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>)
 80164b4:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
 80164b8:	4630      	mov	r0, r6
 80164ba:	f7f2 feff 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 80164be:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8016534 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>
 80164c2:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8016530 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xc8>
 80164c6:	f8df a074 	ldr.w	sl, [pc, #116]	; 801653c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>
 80164ca:	4627      	mov	r7, r4
 80164cc:	2500      	movs	r5, #0
 80164ce:	4629      	mov	r1, r5
 80164d0:	2301      	movs	r3, #1
 80164d2:	f10d 021f 	add.w	r2, sp, #31
 80164d6:	4620      	mov	r0, r4
 80164d8:	f7f6 f991 	bl	800c7fe <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 80164dc:	3501      	adds	r5, #1
 80164de:	b300      	cbz	r0, 8016522 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xba>
 80164e0:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 80164e4:	f8df b050 	ldr.w	fp, [pc, #80]	; 8016538 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>
 80164e8:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 80164ec:	f89d 001f 	ldrb.w	r0, [sp, #31]
 80164f0:	f894 c036 	ldrb.w	ip, [r4, #54]	; 0x36
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	bf0c      	ite	eq
 80164f8:	46c6      	moveq	lr, r8
 80164fa:	46ce      	movne	lr, r9
 80164fc:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	; 0xa40
 8016500:	f8cd c000 	str.w	ip, [sp]
 8016504:	2b00      	cmp	r3, #0
 8016506:	bf08      	it	eq
 8016508:	46d3      	moveq	fp, sl
 801650a:	e9cd 2001 	strd	r2, r0, [sp, #4]
 801650e:	e9cd eb03 	strd	lr, fp, [sp, #12]
 8016512:	f106 0143 	add.w	r1, r6, #67	; 0x43
 8016516:	4a0b      	ldr	r2, [pc, #44]	; (8016544 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xdc>)
 8016518:	5d49      	ldrb	r1, [r1, r5]
 801651a:	462b      	mov	r3, r5
 801651c:	4630      	mov	r0, r6
 801651e:	f7f2 fecd 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 8016522:	2d04      	cmp	r5, #4
 8016524:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8016528:	d1d1      	bne.n	80164ce <DisplayUdf::ShowUniverse(ArtNetNode*)+0x66>
 801652a:	b009      	add	sp, #36	; 0x24
 801652c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016530:	0801bc77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, fp, ip, sp, pc}
 8016534:	0801bc73 	stmdaeq	r1, {r0, r1, r4, r5, r6, sl, fp, ip, sp, pc}
 8016538:	0801bc83 	stmdaeq	r1, {r0, r1, r7, sl, fp, ip, sp, pc}
 801653c:	0801d3ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, ip, lr, pc}
 8016540:	0801d3f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, ip, lr, pc}
 8016544:	0801d405 	stmdaeq	r1, {r0, r2, sl, ip, lr, pc}

08016548 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 8016548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801654c:	f501 5683 	add.w	r6, r1, #4192	; 0x1060
 8016550:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8016594 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x4c>
 8016554:	b085      	sub	sp, #20
 8016556:	4607      	mov	r7, r0
 8016558:	f100 0849 	add.w	r8, r0, #73	; 0x49
 801655c:	2541      	movs	r5, #65	; 0x41
 801655e:	3608      	adds	r6, #8
 8016560:	012b      	lsls	r3, r5, #4
 8016562:	464a      	mov	r2, r9
 8016564:	58f4      	ldr	r4, [r6, r3]
 8016566:	0e23      	lsrs	r3, r4, #24
 8016568:	9303      	str	r3, [sp, #12]
 801656a:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801656e:	9302      	str	r3, [sp, #8]
 8016570:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8016574:	b2e4      	uxtb	r4, r4
 8016576:	9301      	str	r3, [sp, #4]
 8016578:	9400      	str	r4, [sp, #0]
 801657a:	462b      	mov	r3, r5
 801657c:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8016580:	4638      	mov	r0, r7
 8016582:	3501      	adds	r5, #1
 8016584:	f7f2 fe9a 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 8016588:	2d45      	cmp	r5, #69	; 0x45
 801658a:	d1e9      	bne.n	8016560 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x18>
 801658c:	b005      	add	sp, #20
 801658e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016592:	bf00      	nop
 8016594:	0801d41b 	stmdaeq	r1, {r0, r1, r3, r4, sl, ip, lr, pc}

08016598 <DisplayUdf::Show(ArtNetNode*)>:
 8016598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801659a:	4604      	mov	r4, r0
 801659c:	460d      	mov	r5, r1
 801659e:	f7ff fccf 	bl	8015f40 <DisplayUdf::Show()>
 80165a2:	4629      	mov	r1, r5
 80165a4:	4620      	mov	r0, r4
 80165a6:	f7ff ff3d 	bl	8016424 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 80165aa:	4629      	mov	r1, r5
 80165ac:	4620      	mov	r0, r4
 80165ae:	f7ff ff5b 	bl	8016468 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80165b2:	4629      	mov	r1, r5
 80165b4:	4620      	mov	r0, r4
 80165b6:	f7ff ffc7 	bl	8016548 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 80165ba:	f895 2a1b 	ldrb.w	r2, [r5, #2587]	; 0xa1b
 80165be:	f895 3a1a 	ldrb.w	r3, [r5, #2586]	; 0xa1a
 80165c2:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80165c6:	4413      	add	r3, r2
 80165c8:	4620      	mov	r0, r4
 80165ca:	4a0d      	ldr	r2, [pc, #52]	; (8016600 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 80165cc:	f7f2 fe76 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 80165d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80165d2:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 80165d6:	2a02      	cmp	r2, #2
 80165d8:	d001      	beq.n	80165de <DisplayUdf::Show(ArtNetNode*)+0x46>
 80165da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80165dc:	b92b      	cbnz	r3, 80165ea <DisplayUdf::Show(ArtNetNode*)+0x52>
 80165de:	4a09      	ldr	r2, [pc, #36]	; (8016604 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 80165e0:	4620      	mov	r0, r4
 80165e2:	f7f2 fe6b 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 80165e6:	b003      	add	sp, #12
 80165e8:	bd30      	pop	{r4, r5, pc}
 80165ea:	4807      	ldr	r0, [pc, #28]	; (8016608 <DisplayUdf::Show(ArtNetNode*)+0x70>)
 80165ec:	9300      	str	r3, [sp, #0]
 80165ee:	4b07      	ldr	r3, [pc, #28]	; (801660c <DisplayUdf::Show(ArtNetNode*)+0x74>)
 80165f0:	2a00      	cmp	r2, #0
 80165f2:	bf08      	it	eq
 80165f4:	4603      	moveq	r3, r0
 80165f6:	4a06      	ldr	r2, [pc, #24]	; (8016610 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 80165f8:	4620      	mov	r0, r4
 80165fa:	f7f2 fe5f 	bl	80092bc <Display::Printf(unsigned char, char const*, ...)>
 80165fe:	e7f2      	b.n	80165e6 <DisplayUdf::Show(ArtNetNode*)+0x4e>
 8016600:	0801d42b 	stmdaeq	r1, {r0, r1, r3, r5, sl, ip, lr, pc}
 8016604:	0801d432 	stmdaeq	r1, {r1, r4, r5, sl, ip, lr, pc}
 8016608:	0801bf76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 801660c:	0801bf6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 8016610:	0801d439 	stmdaeq	r1, {r0, r3, r4, r5, sl, ip, lr, pc}

08016614 <network::display_emac_start()>:
 8016614:	4b01      	ldr	r3, [pc, #4]	; (801661c <network::display_emac_start()+0x8>)
 8016616:	6818      	ldr	r0, [r3, #0]
 8016618:	f7ff bbfc 	b.w	8015e14 <DisplayUdf::ShowEmacStart()>
 801661c:	2000fc68 	andcs	pc, r0, r8, ror #24

08016620 <network::display_ip()>:
 8016620:	4b01      	ldr	r3, [pc, #4]	; (8016628 <network::display_ip()+0x8>)
 8016622:	6818      	ldr	r0, [r3, #0]
 8016624:	f7ff bc06 	b.w	8015e34 <DisplayUdf::ShowIpAddress()>
 8016628:	2000fc68 	andcs	pc, r0, r8, ror #24

0801662c <network::display_netmask()>:
 801662c:	4b01      	ldr	r3, [pc, #4]	; (8016634 <network::display_netmask()+0x8>)
 801662e:	6818      	ldr	r0, [r3, #0]
 8016630:	f7ff bc34 	b.w	8015e9c <DisplayUdf::ShowNetmask()>
 8016634:	2000fc68 	andcs	pc, r0, r8, ror #24

08016638 <network::display_gateway()>:
 8016638:	4b01      	ldr	r3, [pc, #4]	; (8016640 <network::display_gateway()+0x8>)
 801663a:	6818      	ldr	r0, [r3, #0]
 801663c:	f7ff bc4c 	b.w	8015ed8 <DisplayUdf::ShowGatewayIp()>
 8016640:	2000fc68 	andcs	pc, r0, r8, ror #24

08016644 <network::display_hostname()>:
 8016644:	4b01      	ldr	r3, [pc, #4]	; (801664c <network::display_hostname()+0x8>)
 8016646:	6818      	ldr	r0, [r3, #0]
 8016648:	f7ff bc66 	b.w	8015f18 <DisplayUdf::ShowHostName()>
 801664c:	2000fc68 	andcs	pc, r0, r8, ror #24

08016650 <network::display_emac_shutdown()>:
 8016650:	4b01      	ldr	r3, [pc, #4]	; (8016658 <network::display_emac_shutdown()+0x8>)
 8016652:	6818      	ldr	r0, [r3, #0]
 8016654:	f7ff bcee 	b.w	8016034 <DisplayUdf::ShowShutdown()>
 8016658:	2000fc68 	andcs	pc, r0, r8, ror #24

0801665c <network::display_dhcp_status(network::dhcp::ClientStatus)>:
 801665c:	4b02      	ldr	r3, [pc, #8]	; (8016668 <network::display_dhcp_status(network::dhcp::ClientStatus)+0xc>)
 801665e:	4601      	mov	r1, r0
 8016660:	6818      	ldr	r0, [r3, #0]
 8016662:	f7ff bcaf 	b.w	8015fc4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8016666:	bf00      	nop
 8016668:	2000fc68 	andcs	pc, r0, r8, ror #24

0801666c <ConfigStore::GetStoreOffset(configstore::Store)>:
 801666c:	b510      	push	{r4, lr}
 801666e:	4a05      	ldr	r2, [pc, #20]	; (8016684 <ConfigStore::GetStoreOffset(configstore::Store)+0x18>)
 8016670:	2300      	movs	r3, #0
 8016672:	2020      	movs	r0, #32
 8016674:	428b      	cmp	r3, r1
 8016676:	d100      	bne.n	801667a <ConfigStore::GetStoreOffset(configstore::Store)+0xe>
 8016678:	bd10      	pop	{r4, pc}
 801667a:	f852 4b04 	ldr.w	r4, [r2], #4
 801667e:	3301      	adds	r3, #1
 8016680:	4420      	add	r0, r4
 8016682:	e7f7      	b.n	8016674 <ConfigStore::GetStoreOffset(configstore::Store)+0x8>
 8016684:	0801d444 	stmdaeq	r1, {r2, r6, sl, ip, lr, pc}

08016688 <ConfigStore::Init()>:
 8016688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801668c:	b085      	sub	sp, #20
 801668e:	4607      	mov	r7, r0
 8016690:	f000 fb4f 	bl	8016d32 <StoreDevice::GetSectorSize() const>
 8016694:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8016698:	4605      	mov	r5, r0
 801669a:	d004      	beq.n	80166a6 <ConfigStore::Init()+0x1e>
 801669c:	2500      	movs	r5, #0
 801669e:	4628      	mov	r0, r5
 80166a0:	b005      	add	sp, #20
 80166a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166a6:	4638      	mov	r0, r7
 80166a8:	f000 fb40 	bl	8016d2c <StoreDevice::GetSize() const>
 80166ac:	4b3a      	ldr	r3, [pc, #232]	; (8016798 <ConfigStore::Init()+0x110>)
 80166ae:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 80166b2:	f3c1 060b 	ubfx	r6, r1, #0, #12
 80166b6:	6019      	str	r1, [r3, #0]
 80166b8:	2e00      	cmp	r6, #0
 80166ba:	d1ef      	bne.n	801669c <ConfigStore::Init()+0x14>
 80166bc:	4c37      	ldr	r4, [pc, #220]	; (801679c <ConfigStore::Init()+0x114>)
 80166be:	ab03      	add	r3, sp, #12
 80166c0:	462a      	mov	r2, r5
 80166c2:	9300      	str	r3, [sp, #0]
 80166c4:	4638      	mov	r0, r7
 80166c6:	4623      	mov	r3, r4
 80166c8:	f000 fb36 	bl	8016d38 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>
 80166cc:	7823      	ldrb	r3, [r4, #0]
 80166ce:	2b41      	cmp	r3, #65	; 0x41
 80166d0:	bf1c      	itt	ne
 80166d2:	2341      	movne	r3, #65	; 0x41
 80166d4:	7023      	strbne	r3, [r4, #0]
 80166d6:	7863      	ldrb	r3, [r4, #1]
 80166d8:	bf14      	ite	ne
 80166da:	4635      	movne	r5, r6
 80166dc:	2501      	moveq	r5, #1
 80166de:	2b76      	cmp	r3, #118	; 0x76
 80166e0:	bf1c      	itt	ne
 80166e2:	2376      	movne	r3, #118	; 0x76
 80166e4:	7063      	strbne	r3, [r4, #1]
 80166e6:	78a3      	ldrb	r3, [r4, #2]
 80166e8:	bf18      	it	ne
 80166ea:	2500      	movne	r5, #0
 80166ec:	2b56      	cmp	r3, #86	; 0x56
 80166ee:	bf1c      	itt	ne
 80166f0:	2356      	movne	r3, #86	; 0x56
 80166f2:	70a3      	strbne	r3, [r4, #2]
 80166f4:	78e3      	ldrb	r3, [r4, #3]
 80166f6:	bf18      	it	ne
 80166f8:	2500      	movne	r5, #0
 80166fa:	2b10      	cmp	r3, #16
 80166fc:	d01f      	beq.n	801673e <ConfigStore::Init()+0xb6>
 80166fe:	2310      	movs	r3, #16
 8016700:	70e3      	strb	r3, [r4, #3]
 8016702:	4b27      	ldr	r3, [pc, #156]	; (80167a0 <ConfigStore::Init()+0x118>)
 8016704:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80167a8 <ConfigStore::Init()+0x120>
 8016708:	2201      	movs	r2, #1
 801670a:	701a      	strb	r2, [r3, #0]
 801670c:	2500      	movs	r5, #0
 801670e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8016712:	4631      	mov	r1, r6
 8016714:	4638      	mov	r0, r7
 8016716:	f7ff ffa9 	bl	801666c <ConfigStore::GetStoreOffset(configstore::Store)>
 801671a:	1823      	adds	r3, r4, r0
 801671c:	5425      	strb	r5, [r4, r0]
 801671e:	705d      	strb	r5, [r3, #1]
 8016720:	709d      	strb	r5, [r3, #2]
 8016722:	70dd      	strb	r5, [r3, #3]
 8016724:	f858 3b04 	ldr.w	r3, [r8], #4
 8016728:	1d02      	adds	r2, r0, #4
 801672a:	4403      	add	r3, r0
 801672c:	429a      	cmp	r2, r3
 801672e:	d32f      	bcc.n	8016790 <ConfigStore::Init()+0x108>
 8016730:	3601      	adds	r6, #1
 8016732:	2e1c      	cmp	r6, #28
 8016734:	d1ed      	bne.n	8016712 <ConfigStore::Init()+0x8a>
 8016736:	4b1b      	ldr	r3, [pc, #108]	; (80167a4 <ConfigStore::Init()+0x11c>)
 8016738:	2501      	movs	r5, #1
 801673a:	601d      	str	r5, [r3, #0]
 801673c:	e7af      	b.n	801669e <ConfigStore::Init()+0x16>
 801673e:	2d00      	cmp	r5, #0
 8016740:	d0df      	beq.n	8016702 <ConfigStore::Init()+0x7a>
 8016742:	f04f 0900 	mov.w	r9, #0
 8016746:	46c8      	mov	r8, r9
 8016748:	4631      	mov	r1, r6
 801674a:	4638      	mov	r0, r7
 801674c:	f7ff ff8e 	bl	801666c <ConfigStore::GetStoreOffset(configstore::Store)>
 8016750:	5c23      	ldrb	r3, [r4, r0]
 8016752:	2bff      	cmp	r3, #255	; 0xff
 8016754:	d112      	bne.n	801677c <ConfigStore::Init()+0xf4>
 8016756:	1823      	adds	r3, r4, r0
 8016758:	785a      	ldrb	r2, [r3, #1]
 801675a:	2aff      	cmp	r2, #255	; 0xff
 801675c:	d10e      	bne.n	801677c <ConfigStore::Init()+0xf4>
 801675e:	789a      	ldrb	r2, [r3, #2]
 8016760:	2aff      	cmp	r2, #255	; 0xff
 8016762:	d10b      	bne.n	801677c <ConfigStore::Init()+0xf4>
 8016764:	78da      	ldrb	r2, [r3, #3]
 8016766:	2aff      	cmp	r2, #255	; 0xff
 8016768:	d108      	bne.n	801677c <ConfigStore::Init()+0xf4>
 801676a:	f804 8000 	strb.w	r8, [r4, r0]
 801676e:	46a9      	mov	r9, r5
 8016770:	f883 8001 	strb.w	r8, [r3, #1]
 8016774:	f883 8002 	strb.w	r8, [r3, #2]
 8016778:	f883 8003 	strb.w	r8, [r3, #3]
 801677c:	3601      	adds	r6, #1
 801677e:	2e1c      	cmp	r6, #28
 8016780:	d1e2      	bne.n	8016748 <ConfigStore::Init()+0xc0>
 8016782:	f1b9 0f00 	cmp.w	r9, #0
 8016786:	d08a      	beq.n	801669e <ConfigStore::Init()+0x16>
 8016788:	4b06      	ldr	r3, [pc, #24]	; (80167a4 <ConfigStore::Init()+0x11c>)
 801678a:	2201      	movs	r2, #1
 801678c:	601a      	str	r2, [r3, #0]
 801678e:	e786      	b.n	801669e <ConfigStore::Init()+0x16>
 8016790:	f804 9002 	strb.w	r9, [r4, r2]
 8016794:	3201      	adds	r2, #1
 8016796:	e7c9      	b.n	801672c <ConfigStore::Init()+0xa4>
 8016798:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>
 801679c:	40024000 	andmi	r4, r2, r0
 80167a0:	2000fc84 	andcs	pc, r0, r4, lsl #25
 80167a4:	2000fc7c 	andcs	pc, r0, ip, ror ip	; <UNPREDICTABLE>
 80167a8:	0801d444 	stmdaeq	r1, {r2, r6, sl, ip, lr, pc}

080167ac <ConfigStore::ConfigStore()>:
 80167ac:	b538      	push	{r3, r4, r5, lr}
 80167ae:	4604      	mov	r4, r0
 80167b0:	f000 fa8e 	bl	8016cd0 <StoreDevice::StoreDevice()>
 80167b4:	4b0b      	ldr	r3, [pc, #44]	; (80167e4 <ConfigStore::ConfigStore()+0x38>)
 80167b6:	4d0c      	ldr	r5, [pc, #48]	; (80167e8 <ConfigStore::ConfigStore()+0x3c>)
 80167b8:	601c      	str	r4, [r3, #0]
 80167ba:	7aa3      	ldrb	r3, [r4, #10]
 80167bc:	b11b      	cbz	r3, 80167c6 <ConfigStore::ConfigStore()+0x1a>
 80167be:	4620      	mov	r0, r4
 80167c0:	f7ff ff62 	bl	8016688 <ConfigStore::Init()>
 80167c4:	7028      	strb	r0, [r5, #0]
 80167c6:	782b      	ldrb	r3, [r5, #0]
 80167c8:	b153      	cbz	r3, 80167e0 <ConfigStore::ConfigStore()+0x34>
 80167ca:	4908      	ldr	r1, [pc, #32]	; (80167ec <ConfigStore::ConfigStore()+0x40>)
 80167cc:	2320      	movs	r3, #32
 80167ce:	2200      	movs	r2, #0
 80167d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80167d4:	3201      	adds	r2, #1
 80167d6:	2a1c      	cmp	r2, #28
 80167d8:	4403      	add	r3, r0
 80167da:	d1f9      	bne.n	80167d0 <ConfigStore::ConfigStore()+0x24>
 80167dc:	4a04      	ldr	r2, [pc, #16]	; (80167f0 <ConfigStore::ConfigStore()+0x44>)
 80167de:	6013      	str	r3, [r2, #0]
 80167e0:	4620      	mov	r0, r4
 80167e2:	bd38      	pop	{r3, r4, r5, pc}
 80167e4:	2000fc80 	andcs	pc, r0, r0, lsl #25
 80167e8:	2000fc74 	andcs	pc, r0, r4, ror ip	; <UNPREDICTABLE>
 80167ec:	0801d444 	stmdaeq	r1, {r2, r6, sl, ip, lr, pc}
 80167f0:	2000fc78 	andcs	pc, r0, r8, ror ip	; <UNPREDICTABLE>

080167f4 <ConfigStore::ResetSetList(configstore::Store)>:
 80167f4:	b508      	push	{r3, lr}
 80167f6:	f7ff ff39 	bl	801666c <ConfigStore::GetStoreOffset(configstore::Store)>
 80167fa:	4905      	ldr	r1, [pc, #20]	; (8016810 <ConfigStore::ResetSetList(configstore::Store)+0x1c>)
 80167fc:	1842      	adds	r2, r0, r1
 80167fe:	2300      	movs	r3, #0
 8016800:	540b      	strb	r3, [r1, r0]
 8016802:	7053      	strb	r3, [r2, #1]
 8016804:	7093      	strb	r3, [r2, #2]
 8016806:	70d3      	strb	r3, [r2, #3]
 8016808:	4b02      	ldr	r3, [pc, #8]	; (8016814 <ConfigStore::ResetSetList(configstore::Store)+0x20>)
 801680a:	2201      	movs	r2, #1
 801680c:	601a      	str	r2, [r3, #0]
 801680e:	bd08      	pop	{r3, pc}
 8016810:	40024000 	andmi	r4, r2, r0
 8016814:	2000fc7c 	andcs	pc, r0, ip, ror ip	; <UNPREDICTABLE>

08016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 8016818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801681c:	461c      	mov	r4, r3
 801681e:	4b19      	ldr	r3, [pc, #100]	; (8016884 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8016820:	9d07      	ldr	r5, [sp, #28]
 8016822:	781f      	ldrb	r7, [r3, #0]
 8016824:	4616      	mov	r6, r2
 8016826:	b307      	cbz	r7, 801686a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8016828:	f7ff ff20 	bl	801666c <ConfigStore::GetStoreOffset(configstore::Store)>
 801682c:	4a16      	ldr	r2, [pc, #88]	; (8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 801682e:	1831      	adds	r1, r6, r0
 8016830:	1e63      	subs	r3, r4, #1
 8016832:	9c06      	ldr	r4, [sp, #24]
 8016834:	4411      	add	r1, r2
 8016836:	440c      	add	r4, r1
 8016838:	f04f 0c00 	mov.w	ip, #0
 801683c:	42a1      	cmp	r1, r4
 801683e:	d116      	bne.n	801686e <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 8016840:	f1bc 0f00 	cmp.w	ip, #0
 8016844:	d011      	beq.n	801686a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8016846:	4b11      	ldr	r3, [pc, #68]	; (801688c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 8016848:	6819      	ldr	r1, [r3, #0]
 801684a:	b109      	cbz	r1, 8016850 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 801684c:	2906      	cmp	r1, #6
 801684e:	d101      	bne.n	8016854 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 8016850:	2101      	movs	r1, #1
 8016852:	6019      	str	r1, [r3, #0]
 8016854:	4b0e      	ldr	r3, [pc, #56]	; (8016890 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 8016856:	6819      	ldr	r1, [r3, #0]
 8016858:	4b0e      	ldr	r3, [pc, #56]	; (8016894 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 801685a:	6019      	str	r1, [r3, #0]
 801685c:	b12e      	cbz	r6, 801686a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 801685e:	b125      	cbz	r5, 801686a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8016860:	9b08      	ldr	r3, [sp, #32]
 8016862:	4418      	add	r0, r3
 8016864:	5813      	ldr	r3, [r2, r0]
 8016866:	432b      	orrs	r3, r5
 8016868:	5013      	str	r3, [r2, r0]
 801686a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801686e:	f891 8000 	ldrb.w	r8, [r1]
 8016872:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8016876:	45f0      	cmp	r8, lr
 8016878:	bf1c      	itt	ne
 801687a:	f881 e000 	strbne.w	lr, [r1]
 801687e:	46bc      	movne	ip, r7
 8016880:	3101      	adds	r1, #1
 8016882:	e7db      	b.n	801683c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 8016884:	2000fc74 	andcs	pc, r0, r4, ror ip	; <UNPREDICTABLE>
 8016888:	40024000 	andmi	r4, r2, r0
 801688c:	2000fc7c 	andcs	pc, r0, ip, ror ip	; <UNPREDICTABLE>
 8016890:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 8016894:	2000fc6c 	andcs	pc, r0, ip, ror #24

08016898 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>:
 8016898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801689c:	461d      	mov	r5, r3
 801689e:	4b15      	ldr	r3, [pc, #84]	; (80168f4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x5c>)
 80168a0:	b085      	sub	sp, #20
 80168a2:	781b      	ldrb	r3, [r3, #0]
 80168a4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80168a8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80168ac:	4607      	mov	r7, r0
 80168ae:	4614      	mov	r4, r2
 80168b0:	b193      	cbz	r3, 80168d8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 80168b2:	f7ff fedb 	bl	801666c <ConfigStore::GetStoreOffset(configstore::Store)>
 80168b6:	4a10      	ldr	r2, [pc, #64]	; (80168f8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x60>)
 80168b8:	eb08 0600 	add.w	r6, r8, r0
 80168bc:	18b3      	adds	r3, r6, r2
 80168be:	f1b9 0f00 	cmp.w	r9, #0
 80168c2:	d013      	beq.n	80168ec <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 80168c4:	5990      	ldr	r0, [r2, r6]
 80168c6:	b988      	cbnz	r0, 80168ec <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 80168c8:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80168cc:	9500      	str	r5, [sp, #0]
 80168ce:	4623      	mov	r3, r4
 80168d0:	4642      	mov	r2, r8
 80168d2:	4638      	mov	r0, r7
 80168d4:	f7ff ffa0 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80168d8:	b005      	add	sp, #20
 80168da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80168e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80168e6:	429d      	cmp	r5, r3
 80168e8:	d1f9      	bne.n	80168de <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x46>
 80168ea:	e7f5      	b.n	80168d8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 80168ec:	3c01      	subs	r4, #1
 80168ee:	441d      	add	r5, r3
 80168f0:	e7f9      	b.n	80168e6 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x4e>
 80168f2:	bf00      	nop
 80168f4:	2000fc74 	andcs	pc, r0, r4, ror ip	; <UNPREDICTABLE>
 80168f8:	40024000 	andmi	r4, r2, r0

080168fc <ConfigStore::Flash()>:
 80168fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80168fe:	4c24      	ldr	r4, [pc, #144]	; (8016990 <ConfigStore::Flash()+0x94>)
 8016900:	6823      	ldr	r3, [r4, #0]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d041      	beq.n	801698a <ConfigStore::Flash()+0x8e>
 8016906:	3b01      	subs	r3, #1
 8016908:	2b05      	cmp	r3, #5
 801690a:	d82f      	bhi.n	801696c <ConfigStore::Flash()+0x70>
 801690c:	e8df f003 	tbb	[pc, r3]
 8016910:	2c140b03 			; <UNDEFINED> instruction: 0x2c140b03
 8016914:	4b1f2e23 	blmi	87e21a8 <__exidx_end+0x7c43a4>
 8016918:	681a      	ldr	r2, [r3, #0]
 801691a:	4b1f      	ldr	r3, [pc, #124]	; (8016998 <ConfigStore::Flash()+0x9c>)
 801691c:	601a      	str	r2, [r3, #0]
 801691e:	2302      	movs	r3, #2
 8016920:	6023      	str	r3, [r4, #0]
 8016922:	2001      	movs	r0, #1
 8016924:	e02f      	b.n	8016986 <ConfigStore::Flash()+0x8a>
 8016926:	4b1b      	ldr	r3, [pc, #108]	; (8016994 <ConfigStore::Flash()+0x98>)
 8016928:	4a1b      	ldr	r2, [pc, #108]	; (8016998 <ConfigStore::Flash()+0x9c>)
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	6812      	ldr	r2, [r2, #0]
 801692e:	1a9b      	subs	r3, r3, r2
 8016930:	2b63      	cmp	r3, #99	; 0x63
 8016932:	d9f6      	bls.n	8016922 <ConfigStore::Flash()+0x26>
 8016934:	2303      	movs	r3, #3
 8016936:	e7f3      	b.n	8016920 <ConfigStore::Flash()+0x24>
 8016938:	4918      	ldr	r1, [pc, #96]	; (801699c <ConfigStore::Flash()+0xa0>)
 801693a:	ab03      	add	r3, sp, #12
 801693c:	6809      	ldr	r1, [r1, #0]
 801693e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016942:	f000 fa1d 	bl	8016d80 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>
 8016946:	2800      	cmp	r0, #0
 8016948:	d0eb      	beq.n	8016922 <ConfigStore::Flash()+0x26>
 801694a:	4b12      	ldr	r3, [pc, #72]	; (8016994 <ConfigStore::Flash()+0x98>)
 801694c:	681a      	ldr	r2, [r3, #0]
 801694e:	4b12      	ldr	r3, [pc, #72]	; (8016998 <ConfigStore::Flash()+0x9c>)
 8016950:	601a      	str	r2, [r3, #0]
 8016952:	2305      	movs	r3, #5
 8016954:	e7e4      	b.n	8016920 <ConfigStore::Flash()+0x24>
 8016956:	4b0f      	ldr	r3, [pc, #60]	; (8016994 <ConfigStore::Flash()+0x98>)
 8016958:	4a0f      	ldr	r2, [pc, #60]	; (8016998 <ConfigStore::Flash()+0x9c>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	6812      	ldr	r2, [r2, #0]
 801695e:	1a9b      	subs	r3, r3, r2
 8016960:	2b63      	cmp	r3, #99	; 0x63
 8016962:	d9de      	bls.n	8016922 <ConfigStore::Flash()+0x26>
 8016964:	2304      	movs	r3, #4
 8016966:	e7db      	b.n	8016920 <ConfigStore::Flash()+0x24>
 8016968:	2306      	movs	r3, #6
 801696a:	e7d9      	b.n	8016920 <ConfigStore::Flash()+0x24>
 801696c:	ab03      	add	r3, sp, #12
 801696e:	4a0c      	ldr	r2, [pc, #48]	; (80169a0 <ConfigStore::Flash()+0xa4>)
 8016970:	490a      	ldr	r1, [pc, #40]	; (801699c <ConfigStore::Flash()+0xa0>)
 8016972:	9300      	str	r3, [sp, #0]
 8016974:	6812      	ldr	r2, [r2, #0]
 8016976:	4b0b      	ldr	r3, [pc, #44]	; (80169a4 <ConfigStore::Flash()+0xa8>)
 8016978:	6809      	ldr	r1, [r1, #0]
 801697a:	f000 fa05 	bl	8016d88 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>
 801697e:	2800      	cmp	r0, #0
 8016980:	d0cf      	beq.n	8016922 <ConfigStore::Flash()+0x26>
 8016982:	2000      	movs	r0, #0
 8016984:	6020      	str	r0, [r4, #0]
 8016986:	b004      	add	sp, #16
 8016988:	bd10      	pop	{r4, pc}
 801698a:	4618      	mov	r0, r3
 801698c:	e7fb      	b.n	8016986 <ConfigStore::Flash()+0x8a>
 801698e:	bf00      	nop
 8016990:	2000fc7c 	andcs	pc, r0, ip, ror ip	; <UNPREDICTABLE>
 8016994:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 8016998:	2000fc6c 	andcs	pc, r0, ip, ror #24
 801699c:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>
 80169a0:	2000fc78 	andcs	pc, r0, r8, ror ip	; <UNPREDICTABLE>
 80169a4:	40024000 	andmi	r4, r2, r0

080169a8 <StoreDisplayUdf::~StoreDisplayUdf()>:
 80169a8:	4770      	bx	lr
	...

080169ac <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 80169ac:	b507      	push	{r0, r1, r2, lr}
 80169ae:	2300      	movs	r3, #0
 80169b0:	460a      	mov	r2, r1
 80169b2:	2101      	movs	r1, #1
 80169b4:	e9cd 3100 	strd	r3, r1, [sp]
 80169b8:	4804      	ldr	r0, [pc, #16]	; (80169cc <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x20>)
 80169ba:	2322      	movs	r3, #34	; 0x22
 80169bc:	6800      	ldr	r0, [r0, #0]
 80169be:	210f      	movs	r1, #15
 80169c0:	f7ff ff6a 	bl	8016898 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 80169c4:	b003      	add	sp, #12
 80169c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80169ca:	bf00      	nop
 80169cc:	2000fc80 	andcs	pc, r0, r0, lsl #25

080169d0 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 80169d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80169d2:	2200      	movs	r2, #0
 80169d4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80169d8:	460b      	mov	r3, r1
 80169da:	4805      	ldr	r0, [pc, #20]	; (80169f0 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 80169dc:	2122      	movs	r1, #34	; 0x22
 80169de:	9100      	str	r1, [sp, #0]
 80169e0:	6800      	ldr	r0, [r0, #0]
 80169e2:	210f      	movs	r1, #15
 80169e4:	f7ff ff18 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80169e8:	b005      	add	sp, #20
 80169ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80169ee:	bf00      	nop
 80169f0:	2000fc80 	andcs	pc, r0, r0, lsl #25

080169f4 <StoreDisplayUdf::~StoreDisplayUdf()>:
 80169f4:	b510      	push	{r4, lr}
 80169f6:	4604      	mov	r4, r0
 80169f8:	f001 fb96 	bl	8018128 <operator delete(void*)>
 80169fc:	4620      	mov	r0, r4
 80169fe:	bd10      	pop	{r4, pc}

08016a00 <StoreDisplayUdf::StoreDisplayUdf()>:
 8016a00:	4a02      	ldr	r2, [pc, #8]	; (8016a0c <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 8016a02:	6002      	str	r2, [r0, #0]
 8016a04:	4a02      	ldr	r2, [pc, #8]	; (8016a10 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 8016a06:	6010      	str	r0, [r2, #0]
 8016a08:	4770      	bx	lr
 8016a0a:	bf00      	nop
 8016a0c:	0801d4bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, sl, ip, lr, pc}
 8016a10:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016a14 <StoreDmxSend::~StoreDmxSend()>:
 8016a14:	4770      	bx	lr
	...

08016a18 <StoreDmxSend::Copy(TDmxParams*)>:
 8016a18:	b507      	push	{r0, r1, r2, lr}
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	460a      	mov	r2, r1
 8016a1e:	2101      	movs	r1, #1
 8016a20:	e9cd 3100 	strd	r3, r1, [sp]
 8016a24:	4804      	ldr	r0, [pc, #16]	; (8016a38 <StoreDmxSend::Copy(TDmxParams*)+0x20>)
 8016a26:	230a      	movs	r3, #10
 8016a28:	6800      	ldr	r0, [r0, #0]
 8016a2a:	2102      	movs	r1, #2
 8016a2c:	f7ff ff34 	bl	8016898 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8016a30:	b003      	add	sp, #12
 8016a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a36:	bf00      	nop
 8016a38:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016a3c <StoreDmxSend::Update(TDmxParams const*)>:
 8016a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a3e:	2200      	movs	r2, #0
 8016a40:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8016a44:	460b      	mov	r3, r1
 8016a46:	4805      	ldr	r0, [pc, #20]	; (8016a5c <StoreDmxSend::Update(TDmxParams const*)+0x20>)
 8016a48:	210a      	movs	r1, #10
 8016a4a:	9100      	str	r1, [sp, #0]
 8016a4c:	6800      	ldr	r0, [r0, #0]
 8016a4e:	2102      	movs	r1, #2
 8016a50:	f7ff fee2 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016a54:	b005      	add	sp, #20
 8016a56:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a5a:	bf00      	nop
 8016a5c:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016a60 <StoreDmxSend::~StoreDmxSend()>:
 8016a60:	b510      	push	{r4, lr}
 8016a62:	4604      	mov	r4, r0
 8016a64:	f001 fb60 	bl	8018128 <operator delete(void*)>
 8016a68:	4620      	mov	r0, r4
 8016a6a:	bd10      	pop	{r4, pc}

08016a6c <StoreDmxSend::StoreDmxSend()>:
 8016a6c:	4a02      	ldr	r2, [pc, #8]	; (8016a78 <StoreDmxSend::StoreDmxSend()+0xc>)
 8016a6e:	6002      	str	r2, [r0, #0]
 8016a70:	4a02      	ldr	r2, [pc, #8]	; (8016a7c <StoreDmxSend::StoreDmxSend()+0x10>)
 8016a72:	6010      	str	r0, [r2, #0]
 8016a74:	4770      	bx	lr
 8016a76:	bf00      	nop
 8016a78:	0801d4d4 	stmdaeq	r1, {r2, r4, r6, r7, sl, ip, lr, pc}
 8016a7c:	2000fc8c 	andcs	pc, r0, ip, lsl #25

08016a80 <StoreNetwork::~StoreNetwork()>:
 8016a80:	4770      	bx	lr

08016a82 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 8016a82:	3804      	subs	r0, #4
 8016a84:	4770      	bx	lr
	...

08016a88 <StoreNetwork::Update(networkparams::Params const*)>:
 8016a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8016a90:	460b      	mov	r3, r1
 8016a92:	4805      	ldr	r0, [pc, #20]	; (8016aa8 <StoreNetwork::Update(networkparams::Params const*)+0x20>)
 8016a94:	215e      	movs	r1, #94	; 0x5e
 8016a96:	9100      	str	r1, [sp, #0]
 8016a98:	6800      	ldr	r0, [r0, #0]
 8016a9a:	4611      	mov	r1, r2
 8016a9c:	f7ff febc 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016aa0:	b005      	add	sp, #20
 8016aa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8016aa6:	bf00      	nop
 8016aa8:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016aac <StoreNetwork::SaveGatewayIp(unsigned int)>:
 8016aac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016aae:	2308      	movs	r3, #8
 8016ab0:	9105      	str	r1, [sp, #20]
 8016ab2:	2100      	movs	r1, #0
 8016ab4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016ab8:	4805      	ldr	r0, [pc, #20]	; (8016ad0 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 8016aba:	2304      	movs	r3, #4
 8016abc:	9300      	str	r3, [sp, #0]
 8016abe:	6800      	ldr	r0, [r0, #0]
 8016ac0:	ab05      	add	r3, sp, #20
 8016ac2:	220c      	movs	r2, #12
 8016ac4:	f7ff fea8 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016ac8:	b007      	add	sp, #28
 8016aca:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ace:	bf00      	nop
 8016ad0:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016ad4 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 8016ad4:	f1a0 0004 	sub.w	r0, r0, #4
 8016ad8:	e7e8      	b.n	8016aac <StoreNetwork::SaveGatewayIp(unsigned int)>
 8016ada:	bf00      	nop

08016adc <StoreNetwork::SaveNetMask(unsigned int)>:
 8016adc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016ade:	2304      	movs	r3, #4
 8016ae0:	9105      	str	r1, [sp, #20]
 8016ae2:	2100      	movs	r1, #0
 8016ae4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016ae8:	4804      	ldr	r0, [pc, #16]	; (8016afc <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 8016aea:	9300      	str	r3, [sp, #0]
 8016aec:	6800      	ldr	r0, [r0, #0]
 8016aee:	ab05      	add	r3, sp, #20
 8016af0:	2208      	movs	r2, #8
 8016af2:	f7ff fe91 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016af6:	b007      	add	sp, #28
 8016af8:	f85d fb04 	ldr.w	pc, [sp], #4
 8016afc:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016b00 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 8016b00:	f1a0 0004 	sub.w	r0, r0, #4
 8016b04:	e7ea      	b.n	8016adc <StoreNetwork::SaveNetMask(unsigned int)>
 8016b06:	bf00      	nop

08016b08 <StoreNetwork::SaveIp(unsigned int)>:
 8016b08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016b0a:	2302      	movs	r3, #2
 8016b0c:	9105      	str	r1, [sp, #20]
 8016b0e:	2100      	movs	r1, #0
 8016b10:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016b14:	2204      	movs	r2, #4
 8016b16:	4804      	ldr	r0, [pc, #16]	; (8016b28 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 8016b18:	9200      	str	r2, [sp, #0]
 8016b1a:	6800      	ldr	r0, [r0, #0]
 8016b1c:	ab05      	add	r3, sp, #20
 8016b1e:	f7ff fe7b 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016b22:	b007      	add	sp, #28
 8016b24:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b28:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016b2c <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 8016b2c:	f1a0 0004 	sub.w	r0, r0, #4
 8016b30:	e7ea      	b.n	8016b08 <StoreNetwork::SaveIp(unsigned int)>
 8016b32:	bf00      	nop

08016b34 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 8016b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016b36:	460b      	mov	r3, r1
 8016b38:	2000      	movs	r0, #0
 8016b3a:	2120      	movs	r1, #32
 8016b3c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8016b40:	2a40      	cmp	r2, #64	; 0x40
 8016b42:	bf28      	it	cs
 8016b44:	2240      	movcs	r2, #64	; 0x40
 8016b46:	4601      	mov	r1, r0
 8016b48:	4804      	ldr	r0, [pc, #16]	; (8016b5c <StoreNetwork::SaveHostName(char const*, unsigned int)+0x28>)
 8016b4a:	9200      	str	r2, [sp, #0]
 8016b4c:	6800      	ldr	r0, [r0, #0]
 8016b4e:	2215      	movs	r2, #21
 8016b50:	f7ff fe62 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016b54:	b005      	add	sp, #20
 8016b56:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b5a:	bf00      	nop
 8016b5c:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016b60 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 8016b60:	f1a0 0004 	sub.w	r0, r0, #4
 8016b64:	e7e6      	b.n	8016b34 <StoreNetwork::SaveHostName(char const*, unsigned int)>
 8016b66:	bf00      	nop

08016b68 <StoreNetwork::~StoreNetwork()>:
 8016b68:	b510      	push	{r4, lr}
 8016b6a:	4604      	mov	r4, r0
 8016b6c:	f001 fadc 	bl	8018128 <operator delete(void*)>
 8016b70:	4620      	mov	r0, r4
 8016b72:	bd10      	pop	{r4, pc}

08016b74 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 8016b74:	f1a0 0004 	sub.w	r0, r0, #4
 8016b78:	e7f6      	b.n	8016b68 <StoreNetwork::~StoreNetwork()>
	...

08016b7c <StoreNetwork::Copy(networkparams::Params*)>:
 8016b7c:	b507      	push	{r0, r1, r2, lr}
 8016b7e:	2301      	movs	r3, #1
 8016b80:	460a      	mov	r2, r1
 8016b82:	2100      	movs	r1, #0
 8016b84:	e9cd 1300 	strd	r1, r3, [sp]
 8016b88:	4803      	ldr	r0, [pc, #12]	; (8016b98 <StoreNetwork::Copy(networkparams::Params*)+0x1c>)
 8016b8a:	235e      	movs	r3, #94	; 0x5e
 8016b8c:	6800      	ldr	r0, [r0, #0]
 8016b8e:	f7ff fe83 	bl	8016898 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8016b92:	b003      	add	sp, #12
 8016b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b98:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016b9c <StoreNetwork::StoreNetwork()>:
 8016b9c:	4a03      	ldr	r2, [pc, #12]	; (8016bac <StoreNetwork::StoreNetwork()+0x10>)
 8016b9e:	6002      	str	r2, [r0, #0]
 8016ba0:	322c      	adds	r2, #44	; 0x2c
 8016ba2:	6042      	str	r2, [r0, #4]
 8016ba4:	4a02      	ldr	r2, [pc, #8]	; (8016bb0 <StoreNetwork::StoreNetwork()+0x14>)
 8016ba6:	6010      	str	r0, [r2, #0]
 8016ba8:	4770      	bx	lr
 8016baa:	bf00      	nop
 8016bac:	0801d4ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, sl, ip, lr, pc}
 8016bb0:	2000fc90 	mulcs	r0, r0, ip

08016bb4 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8016bb4:	4770      	bx	lr
	...

08016bb8 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 8016bb8:	b507      	push	{r0, r1, r2, lr}
 8016bba:	2300      	movs	r3, #0
 8016bbc:	460a      	mov	r2, r1
 8016bbe:	2101      	movs	r1, #1
 8016bc0:	e9cd 3100 	strd	r3, r1, [sp]
 8016bc4:	4804      	ldr	r0, [pc, #16]	; (8016bd8 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x20>)
 8016bc6:	2320      	movs	r3, #32
 8016bc8:	6800      	ldr	r0, [r0, #0]
 8016bca:	210c      	movs	r1, #12
 8016bcc:	f7ff fe64 	bl	8016898 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8016bd0:	b003      	add	sp, #12
 8016bd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8016bd6:	bf00      	nop
 8016bd8:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016bdc <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 8016bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016bde:	2200      	movs	r2, #0
 8016be0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8016be4:	460b      	mov	r3, r1
 8016be6:	4805      	ldr	r0, [pc, #20]	; (8016bfc <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 8016be8:	2120      	movs	r1, #32
 8016bea:	9100      	str	r1, [sp, #0]
 8016bec:	6800      	ldr	r0, [r0, #0]
 8016bee:	210c      	movs	r1, #12
 8016bf0:	f7ff fe12 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016bf4:	b005      	add	sp, #20
 8016bf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8016bfa:	bf00      	nop
 8016bfc:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016c00 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8016c00:	b510      	push	{r4, lr}
 8016c02:	4604      	mov	r4, r0
 8016c04:	f001 fa90 	bl	8018128 <operator delete(void*)>
 8016c08:	4620      	mov	r0, r4
 8016c0a:	bd10      	pop	{r4, pc}

08016c0c <StoreRemoteConfig::StoreRemoteConfig()>:
 8016c0c:	4a02      	ldr	r2, [pc, #8]	; (8016c18 <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 8016c0e:	6002      	str	r2, [r0, #0]
 8016c10:	4a02      	ldr	r2, [pc, #8]	; (8016c1c <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 8016c12:	6010      	str	r0, [r2, #0]
 8016c14:	4770      	bx	lr
 8016c16:	bf00      	nop
 8016c18:	0801d53c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, ip, lr, pc}
 8016c1c:	2000fc94 	mulcs	r0, r4, ip

08016c20 <HAL_I2C::Setup()>:
 8016c20:	b510      	push	{r4, lr}
 8016c22:	4604      	mov	r4, r0
 8016c24:	7800      	ldrb	r0, [r0, #0]
 8016c26:	f002 ffd1 	bl	8019bcc <gd32_i2c_set_address>
 8016c2a:	6860      	ldr	r0, [r4, #4]
 8016c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c30:	f002 bfc4 	b.w	8019bbc <gd32_i2c_set_baudrate>

08016c34 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)>:
 8016c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c38:	b08d      	sub	sp, #52	; 0x34
 8016c3a:	4606      	mov	r6, r0
 8016c3c:	9301      	str	r3, [sp, #4]
 8016c3e:	7a03      	ldrb	r3, [r0, #8]
 8016c40:	460c      	mov	r4, r1
 8016c42:	4617      	mov	r7, r2
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d13c      	bne.n	8016cc2 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x8e>
 8016c48:	b00d      	add	sp, #52	; 0x34
 8016c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c4e:	2101      	movs	r1, #1
 8016c50:	4640      	mov	r0, r8
 8016c52:	f003 f827 	bl	8019ca4 <gd32_i2c_read>
 8016c56:	2800      	cmp	r0, #0
 8016c58:	d1f9      	bne.n	8016c4e <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x1a>
 8016c5a:	7a73      	ldrb	r3, [r6, #9]
 8016c5c:	f8cd 9008 	str.w	r9, [sp, #8]
 8016c60:	2d1d      	cmp	r5, #29
 8016c62:	bf8c      	ite	hi
 8016c64:	a902      	addhi	r1, sp, #8
 8016c66:	a901      	addls	r1, sp, #4
 8016c68:	fbb4 f2f3 	udiv	r2, r4, r3
 8016c6c:	fb03 4212 	mls	r2, r3, r2, r4
 8016c70:	1a9b      	subs	r3, r3, r2
 8016c72:	680a      	ldr	r2, [r1, #0]
 8016c74:	9303      	str	r3, [sp, #12]
 8016c76:	4293      	cmp	r3, r2
 8016c78:	bf98      	it	ls
 8016c7a:	4641      	movls	r1, r8
 8016c7c:	ba63      	rev16	r3, r4
 8016c7e:	f8d1 a000 	ldr.w	sl, [r1]
 8016c82:	f8ad 3010 	strh.w	r3, [sp, #16]
 8016c86:	eb07 030b 	add.w	r3, r7, fp
 8016c8a:	f10d 0211 	add.w	r2, sp, #17
 8016c8e:	eb03 010a 	add.w	r1, r3, sl
 8016c92:	428b      	cmp	r3, r1
 8016c94:	d110      	bne.n	8016cb8 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x84>
 8016c96:	4630      	mov	r0, r6
 8016c98:	f7ff ffc2 	bl	8016c20 <HAL_I2C::Setup()>
 8016c9c:	eba5 050a 	sub.w	r5, r5, sl
 8016ca0:	f10a 0102 	add.w	r1, sl, #2
 8016ca4:	a804      	add	r0, sp, #16
 8016ca6:	f002 ff97 	bl	8019bd8 <gd32_i2c_write>
 8016caa:	4454      	add	r4, sl
 8016cac:	9501      	str	r5, [sp, #4]
 8016cae:	44d3      	add	fp, sl
 8016cb0:	9d01      	ldr	r5, [sp, #4]
 8016cb2:	2d00      	cmp	r5, #0
 8016cb4:	d1cb      	bne.n	8016c4e <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x1a>
 8016cb6:	e7c7      	b.n	8016c48 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x14>
 8016cb8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016cbc:	f802 0f01 	strb.w	r0, [r2, #1]!
 8016cc0:	e7e7      	b.n	8016c92 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x5e>
 8016cc2:	f04f 0b00 	mov.w	fp, #0
 8016cc6:	f10d 080c 	add.w	r8, sp, #12
 8016cca:	f04f 091e 	mov.w	r9, #30
 8016cce:	e7ef      	b.n	8016cb0 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x7c>

08016cd0 <StoreDevice::StoreDevice()>:
 8016cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016cd2:	4604      	mov	r4, r0
 8016cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016cd8:	2050      	movs	r0, #80	; 0x50
 8016cda:	4d11      	ldr	r5, [pc, #68]	; (8016d20 <StoreDevice::StoreDevice()+0x50>)
 8016cdc:	8123      	strh	r3, [r4, #8]
 8016cde:	7020      	strb	r0, [r4, #0]
 8016ce0:	6065      	str	r5, [r4, #4]
 8016ce2:	f002 ff73 	bl	8019bcc <gd32_i2c_set_address>
 8016ce6:	4628      	mov	r0, r5
 8016ce8:	f002 ff68 	bl	8019bbc <gd32_i2c_set_baudrate>
 8016cec:	2101      	movs	r1, #1
 8016cee:	f10d 0007 	add.w	r0, sp, #7
 8016cf2:	f002 ffd7 	bl	8019ca4 <gd32_i2c_read>
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	bf0c      	ite	eq
 8016cfa:	2301      	moveq	r3, #1
 8016cfc:	2300      	movne	r3, #0
 8016cfe:	7223      	strb	r3, [r4, #8]
 8016d00:	72a3      	strb	r3, [r4, #10]
 8016d02:	d006      	beq.n	8016d12 <StoreDevice::StoreDevice()+0x42>
 8016d04:	7821      	ldrb	r1, [r4, #0]
 8016d06:	4807      	ldr	r0, [pc, #28]	; (8016d24 <StoreDevice::StoreDevice()+0x54>)
 8016d08:	f7f3 fbd2 	bl	800a4b0 <printf>
 8016d0c:	4620      	mov	r0, r4
 8016d0e:	b003      	add	sp, #12
 8016d10:	bd30      	pop	{r4, r5, pc}
 8016d12:	2204      	movs	r2, #4
 8016d14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8016d18:	4803      	ldr	r0, [pc, #12]	; (8016d28 <StoreDevice::StoreDevice()+0x58>)
 8016d1a:	f7f3 fbc9 	bl	800a4b0 <printf>
 8016d1e:	e7f5      	b.n	8016d0c <StoreDevice::StoreDevice()+0x3c>
 8016d20:	00061a80 	andeq	r1, r6, r0, lsl #21
 8016d24:	0801d54c 	stmdaeq	r1, {r2, r3, r6, r8, sl, ip, lr, pc}
 8016d28:	0801d56b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, sl, ip, lr, pc}

08016d2c <StoreDevice::GetSize() const>:
 8016d2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8016d30:	4770      	bx	lr

08016d32 <StoreDevice::GetSectorSize() const>:
 8016d32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8016d36:	4770      	bx	lr

08016d38 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>:
 8016d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d3a:	461e      	mov	r6, r3
 8016d3c:	7a03      	ldrb	r3, [r0, #8]
 8016d3e:	4604      	mov	r4, r0
 8016d40:	460d      	mov	r5, r1
 8016d42:	4617      	mov	r7, r2
 8016d44:	b1b3      	cbz	r3, 8016d74 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0x3c>
 8016d46:	2101      	movs	r1, #1
 8016d48:	a801      	add	r0, sp, #4
 8016d4a:	f002 ffab 	bl	8019ca4 <gd32_i2c_read>
 8016d4e:	2800      	cmp	r0, #0
 8016d50:	d1f9      	bne.n	8016d46 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xe>
 8016d52:	4620      	mov	r0, r4
 8016d54:	ba6d      	rev16	r5, r5
 8016d56:	f8ad 5004 	strh.w	r5, [sp, #4]
 8016d5a:	f7ff ff61 	bl	8016c20 <HAL_I2C::Setup()>
 8016d5e:	2102      	movs	r1, #2
 8016d60:	a801      	add	r0, sp, #4
 8016d62:	f002 ff39 	bl	8019bd8 <gd32_i2c_write>
 8016d66:	4620      	mov	r0, r4
 8016d68:	f7ff ff5a 	bl	8016c20 <HAL_I2C::Setup()>
 8016d6c:	4639      	mov	r1, r7
 8016d6e:	4630      	mov	r0, r6
 8016d70:	f002 ff98 	bl	8019ca4 <gd32_i2c_read>
 8016d74:	9b08      	ldr	r3, [sp, #32]
 8016d76:	2200      	movs	r2, #0
 8016d78:	2001      	movs	r0, #1
 8016d7a:	601a      	str	r2, [r3, #0]
 8016d7c:	b003      	add	sp, #12
 8016d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d80 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>:
 8016d80:	2200      	movs	r2, #0
 8016d82:	601a      	str	r2, [r3, #0]
 8016d84:	2001      	movs	r0, #1
 8016d86:	4770      	bx	lr

08016d88 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>:
 8016d88:	b510      	push	{r4, lr}
 8016d8a:	4614      	mov	r4, r2
 8016d8c:	461a      	mov	r2, r3
 8016d8e:	4623      	mov	r3, r4
 8016d90:	f7ff ff50 	bl	8016c34 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)>
 8016d94:	9b02      	ldr	r3, [sp, #8]
 8016d96:	2200      	movs	r2, #0
 8016d98:	601a      	str	r2, [r3, #0]
 8016d9a:	2001      	movs	r0, #1
 8016d9c:	bd10      	pop	{r4, pc}

08016d9e <StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 8016d9e:	4770      	bx	lr

08016da0 <non-virtual thunk to StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 8016da0:	4770      	bx	lr

08016da2 <StoreArtNet::~StoreArtNet()>:
 8016da2:	4770      	bx	lr

08016da4 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 8016da4:	3804      	subs	r0, #4
 8016da6:	4770      	bx	lr

08016da8 <StoreArtNet::Update(artnetparams::Params const*)>:
 8016da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016daa:	2200      	movs	r2, #0
 8016dac:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8016db0:	460b      	mov	r3, r1
 8016db2:	4805      	ldr	r0, [pc, #20]	; (8016dc8 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 8016db4:	2187      	movs	r1, #135	; 0x87
 8016db6:	9100      	str	r1, [sp, #0]
 8016db8:	6800      	ldr	r0, [r0, #0]
 8016dba:	2101      	movs	r1, #1
 8016dbc:	f7ff fd2c 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016dc0:	b005      	add	sp, #20
 8016dc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8016dc6:	bf00      	nop
 8016dc8:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016dcc <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 8016dcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016dce:	4b0d      	ldr	r3, [pc, #52]	; (8016e04 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x38>)
 8016dd0:	f88d 2017 	strb.w	r2, [sp, #23]
 8016dd4:	681a      	ldr	r2, [r3, #0]
 8016dd6:	428a      	cmp	r2, r1
 8016dd8:	d811      	bhi.n	8016dfe <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 8016dda:	1a8a      	subs	r2, r1, r2
 8016ddc:	2a03      	cmp	r2, #3
 8016dde:	d80e      	bhi.n	8016dfe <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 8016de0:	2300      	movs	r3, #0
 8016de2:	9302      	str	r3, [sp, #8]
 8016de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016de8:	4093      	lsls	r3, r2
 8016dea:	4807      	ldr	r0, [pc, #28]	; (8016e08 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x3c>)
 8016dec:	9301      	str	r3, [sp, #4]
 8016dee:	2101      	movs	r1, #1
 8016df0:	9100      	str	r1, [sp, #0]
 8016df2:	6800      	ldr	r0, [r0, #0]
 8016df4:	f10d 0317 	add.w	r3, sp, #23
 8016df8:	3267      	adds	r2, #103	; 0x67
 8016dfa:	f7ff fd0d 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016dfe:	b007      	add	sp, #28
 8016e00:	f85d fb04 	ldr.w	pc, [sp], #4
 8016e04:	2000fc98 	mulcs	r0, r8, ip
 8016e08:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016e0c <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 8016e0c:	f1a0 0004 	sub.w	r0, r0, #4
 8016e10:	f7ff bfdc 	b.w	8016dcc <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

08016e14 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 8016e14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016e16:	f88d 2017 	strb.w	r2, [sp, #23]
 8016e1a:	b951      	cbnz	r1, 8016e32 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x1e>
 8016e1c:	9102      	str	r1, [sp, #8]
 8016e1e:	2204      	movs	r2, #4
 8016e20:	2101      	movs	r1, #1
 8016e22:	e9cd 1200 	strd	r1, r2, [sp]
 8016e26:	4804      	ldr	r0, [pc, #16]	; (8016e38 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x24>)
 8016e28:	f10d 0317 	add.w	r3, sp, #23
 8016e2c:	6800      	ldr	r0, [r0, #0]
 8016e2e:	f7ff fcf3 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016e32:	b007      	add	sp, #28
 8016e34:	f85d fb04 	ldr.w	pc, [sp], #4
 8016e38:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016e3c <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 8016e3c:	f1a0 0004 	sub.w	r0, r0, #4
 8016e40:	f7ff bfe8 	b.w	8016e14 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>

08016e44 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 8016e44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016e46:	f88d 2017 	strb.w	r2, [sp, #23]
 8016e4a:	b959      	cbnz	r1, 8016e64 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x20>
 8016e4c:	9102      	str	r1, [sp, #8]
 8016e4e:	2308      	movs	r3, #8
 8016e50:	2101      	movs	r1, #1
 8016e52:	e9cd 1300 	strd	r1, r3, [sp]
 8016e56:	4805      	ldr	r0, [pc, #20]	; (8016e6c <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x28>)
 8016e58:	f10d 0317 	add.w	r3, sp, #23
 8016e5c:	6800      	ldr	r0, [r0, #0]
 8016e5e:	2205      	movs	r2, #5
 8016e60:	f7ff fcda 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016e64:	b007      	add	sp, #28
 8016e66:	f85d fb04 	ldr.w	pc, [sp], #4
 8016e6a:	bf00      	nop
 8016e6c:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016e70 <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 8016e70:	f1a0 0004 	sub.w	r0, r0, #4
 8016e74:	f7ff bfe6 	b.w	8016e44 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>

08016e78 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8016e78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016e7a:	4b0c      	ldr	r3, [pc, #48]	; (8016eac <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x34>)
 8016e7c:	9205      	str	r2, [sp, #20]
 8016e7e:	681a      	ldr	r2, [r3, #0]
 8016e80:	428a      	cmp	r2, r1
 8016e82:	d810      	bhi.n	8016ea6 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 8016e84:	1a8a      	subs	r2, r1, r2
 8016e86:	2a03      	cmp	r2, #3
 8016e88:	d80d      	bhi.n	8016ea6 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	9302      	str	r3, [sp, #8]
 8016e8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016e92:	4093      	lsls	r3, r2
 8016e94:	4806      	ldr	r0, [pc, #24]	; (8016eb0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x38>)
 8016e96:	9301      	str	r3, [sp, #4]
 8016e98:	2101      	movs	r1, #1
 8016e9a:	9100      	str	r1, [sp, #0]
 8016e9c:	6800      	ldr	r0, [r0, #0]
 8016e9e:	ab05      	add	r3, sp, #20
 8016ea0:	326c      	adds	r2, #108	; 0x6c
 8016ea2:	f7ff fcb9 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016ea6:	b007      	add	sp, #28
 8016ea8:	f85d fb04 	ldr.w	pc, [sp], #4
 8016eac:	2000fc98 	mulcs	r0, r8, ip
 8016eb0:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016eb4 <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8016eb4:	f1a0 0004 	sub.w	r0, r0, #4
 8016eb8:	f7ff bfde 	b.w	8016e78 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

08016ebc <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8016ebc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016ebe:	4b0c      	ldr	r3, [pc, #48]	; (8016ef0 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x34>)
 8016ec0:	9205      	str	r2, [sp, #20]
 8016ec2:	681a      	ldr	r2, [r3, #0]
 8016ec4:	428a      	cmp	r2, r1
 8016ec6:	d810      	bhi.n	8016eea <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 8016ec8:	1a8a      	subs	r2, r1, r2
 8016eca:	2a03      	cmp	r2, #3
 8016ecc:	d80d      	bhi.n	8016eea <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 8016ece:	2300      	movs	r3, #0
 8016ed0:	9302      	str	r3, [sp, #8]
 8016ed2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8016ed6:	4093      	lsls	r3, r2
 8016ed8:	4806      	ldr	r0, [pc, #24]	; (8016ef4 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x38>)
 8016eda:	9301      	str	r3, [sp, #4]
 8016edc:	2101      	movs	r1, #1
 8016ede:	9100      	str	r1, [sp, #0]
 8016ee0:	6800      	ldr	r0, [r0, #0]
 8016ee2:	ab05      	add	r3, sp, #20
 8016ee4:	3271      	adds	r2, #113	; 0x71
 8016ee6:	f7ff fc97 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016eea:	b007      	add	sp, #28
 8016eec:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ef0:	2000fc98 	mulcs	r0, r8, ip
 8016ef4:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016ef8 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8016ef8:	f1a0 0004 	sub.w	r0, r0, #4
 8016efc:	f7ff bfde 	b.w	8016ebc <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

08016f00 <StoreArtNet::SaveLongName(char const*)>:
 8016f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016f02:	460b      	mov	r3, r1
 8016f04:	2200      	movs	r2, #0
 8016f06:	2101      	movs	r1, #1
 8016f08:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016f0c:	4804      	ldr	r0, [pc, #16]	; (8016f20 <StoreArtNet::SaveLongName(char const*)+0x20>)
 8016f0e:	2240      	movs	r2, #64	; 0x40
 8016f10:	9200      	str	r2, [sp, #0]
 8016f12:	6800      	ldr	r0, [r0, #0]
 8016f14:	221e      	movs	r2, #30
 8016f16:	f7ff fc7f 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016f1a:	b005      	add	sp, #20
 8016f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f20:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016f24 <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 8016f24:	f1a0 0004 	sub.w	r0, r0, #4
 8016f28:	e7ea      	b.n	8016f00 <StoreArtNet::SaveLongName(char const*)>
 8016f2a:	bf00      	nop

08016f2c <StoreArtNet::SaveShortName(char const*)>:
 8016f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016f2e:	460b      	mov	r3, r1
 8016f30:	2202      	movs	r2, #2
 8016f32:	2100      	movs	r1, #0
 8016f34:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8016f38:	4805      	ldr	r0, [pc, #20]	; (8016f50 <StoreArtNet::SaveShortName(char const*)+0x24>)
 8016f3a:	2212      	movs	r2, #18
 8016f3c:	9200      	str	r2, [sp, #0]
 8016f3e:	6800      	ldr	r0, [r0, #0]
 8016f40:	220c      	movs	r2, #12
 8016f42:	2101      	movs	r1, #1
 8016f44:	f7ff fc68 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016f48:	b005      	add	sp, #20
 8016f4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f4e:	bf00      	nop
 8016f50:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016f54 <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 8016f54:	f1a0 0004 	sub.w	r0, r0, #4
 8016f58:	e7e8      	b.n	8016f2c <StoreArtNet::SaveShortName(char const*)>
 8016f5a:	bf00      	nop

08016f5c <StoreArtNet::SaveFailSafe(unsigned char)>:
 8016f5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016f5e:	2310      	movs	r3, #16
 8016f60:	2200      	movs	r2, #0
 8016f62:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016f66:	f88d 1017 	strb.w	r1, [sp, #23]
 8016f6a:	4806      	ldr	r0, [pc, #24]	; (8016f84 <StoreArtNet::SaveFailSafe(unsigned char)+0x28>)
 8016f6c:	2101      	movs	r1, #1
 8016f6e:	9100      	str	r1, [sp, #0]
 8016f70:	6800      	ldr	r0, [r0, #0]
 8016f72:	f10d 0317 	add.w	r3, sp, #23
 8016f76:	2206      	movs	r2, #6
 8016f78:	f7ff fc4e 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016f7c:	b007      	add	sp, #28
 8016f7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f82:	bf00      	nop
 8016f84:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016f88 <non-virtual thunk to StoreArtNet::SaveFailSafe(unsigned char)>:
 8016f88:	f1a0 0004 	sub.w	r0, r0, #4
 8016f8c:	e7e6      	b.n	8016f5c <StoreArtNet::SaveFailSafe(unsigned char)>
 8016f8e:	bf00      	nop

08016f90 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 8016f90:	b570      	push	{r4, r5, r6, lr}
 8016f92:	4b1b      	ldr	r3, [pc, #108]	; (8017000 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x70>)
 8016f94:	681c      	ldr	r4, [r3, #0]
 8016f96:	428c      	cmp	r4, r1
 8016f98:	b086      	sub	sp, #24
 8016f9a:	4615      	mov	r5, r2
 8016f9c:	d829      	bhi.n	8016ff2 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 8016f9e:	1b0c      	subs	r4, r1, r4
 8016fa0:	2c03      	cmp	r4, #3
 8016fa2:	d826      	bhi.n	8016ff2 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 8016fa4:	4e17      	ldr	r6, [pc, #92]	; (8017004 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x74>)
 8016fa6:	2308      	movs	r3, #8
 8016fa8:	2200      	movs	r2, #0
 8016faa:	e9cd 3200 	strd	r3, r2, [sp]
 8016fae:	2101      	movs	r1, #1
 8016fb0:	2302      	movs	r3, #2
 8016fb2:	f10d 0216 	add.w	r2, sp, #22
 8016fb6:	6830      	ldr	r0, [r6, #0]
 8016fb8:	f7ff fc6e 	bl	8016898 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8016fbc:	2201      	movs	r2, #1
 8016fbe:	f104 0308 	add.w	r3, r4, #8
 8016fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8016fc6:	40a2      	lsls	r2, r4
 8016fc8:	4313      	orrs	r3, r2
 8016fca:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8016fce:	b29b      	uxth	r3, r3
 8016fd0:	ea21 0203 	bic.w	r2, r1, r3
 8016fd4:	b97d      	cbnz	r5, 8016ff6 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x66>
 8016fd6:	f8ad 2016 	strh.w	r2, [sp, #22]
 8016fda:	2300      	movs	r3, #0
 8016fdc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8016fe0:	2302      	movs	r3, #2
 8016fe2:	9300      	str	r3, [sp, #0]
 8016fe4:	6830      	ldr	r0, [r6, #0]
 8016fe6:	f10d 0316 	add.w	r3, sp, #22
 8016fea:	2208      	movs	r2, #8
 8016fec:	2101      	movs	r1, #1
 8016fee:	f7ff fc13 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016ff2:	b006      	add	sp, #24
 8016ff4:	bd70      	pop	{r4, r5, r6, pc}
 8016ff6:	4319      	orrs	r1, r3
 8016ff8:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016ffc:	e7ed      	b.n	8016fda <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x4a>
 8016ffe:	bf00      	nop
 8017000:	2000fc98 	mulcs	r0, r8, ip
 8017004:	2000fc80 	andcs	pc, r0, r0, lsl #25

08017008 <non-virtual thunk to StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 8017008:	f1a0 0004 	sub.w	r0, r0, #4
 801700c:	f7ff bfc0 	b.w	8016f90 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>

08017010 <StoreArtNet::Copy(artnetparams::Params*)>:
 8017010:	b507      	push	{r0, r1, r2, lr}
 8017012:	2300      	movs	r3, #0
 8017014:	460a      	mov	r2, r1
 8017016:	2101      	movs	r1, #1
 8017018:	e9cd 3100 	strd	r3, r1, [sp]
 801701c:	4803      	ldr	r0, [pc, #12]	; (801702c <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 801701e:	2387      	movs	r3, #135	; 0x87
 8017020:	6800      	ldr	r0, [r0, #0]
 8017022:	f7ff fc39 	bl	8016898 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8017026:	b003      	add	sp, #12
 8017028:	f85d fb04 	ldr.w	pc, [sp], #4
 801702c:	2000fc80 	andcs	pc, r0, r0, lsl #25

08017030 <StoreArtNet::~StoreArtNet()>:
 8017030:	b510      	push	{r4, lr}
 8017032:	4604      	mov	r4, r0
 8017034:	f001 f878 	bl	8018128 <operator delete(void*)>
 8017038:	4620      	mov	r0, r4
 801703a:	bd10      	pop	{r4, pc}

0801703c <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 801703c:	f1a0 0004 	sub.w	r0, r0, #4
 8017040:	e7f6      	b.n	8017030 <StoreArtNet::~StoreArtNet()>
	...

08017044 <StoreArtNet::StoreArtNet(unsigned int)>:
 8017044:	b510      	push	{r4, lr}
 8017046:	4a05      	ldr	r2, [pc, #20]	; (801705c <StoreArtNet::StoreArtNet(unsigned int)+0x18>)
 8017048:	4b05      	ldr	r3, [pc, #20]	; (8017060 <StoreArtNet::StoreArtNet(unsigned int)+0x1c>)
 801704a:	f102 0408 	add.w	r4, r2, #8
 801704e:	3248      	adds	r2, #72	; 0x48
 8017050:	6042      	str	r2, [r0, #4]
 8017052:	4a04      	ldr	r2, [pc, #16]	; (8017064 <StoreArtNet::StoreArtNet(unsigned int)+0x20>)
 8017054:	6004      	str	r4, [r0, #0]
 8017056:	6010      	str	r0, [r2, #0]
 8017058:	6019      	str	r1, [r3, #0]
 801705a:	bd10      	pop	{r4, pc}
 801705c:	0801d5a8 	stmdaeq	r1, {r3, r5, r7, r8, sl, ip, lr, pc}
 8017060:	2000fc98 	mulcs	r0, r8, ip
 8017064:	2000fc9c 	mulcs	r0, ip, ip

08017068 <StoreRDMDevice::~StoreRDMDevice()>:
 8017068:	4770      	bx	lr

0801706a <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 801706a:	3804      	subs	r0, #4
 801706c:	4770      	bx	lr
	...

08017070 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 8017070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017072:	2200      	movs	r2, #0
 8017074:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8017078:	460b      	mov	r3, r1
 801707a:	4805      	ldr	r0, [pc, #20]	; (8017090 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 801707c:	2129      	movs	r1, #41	; 0x29
 801707e:	9100      	str	r1, [sp, #0]
 8017080:	6800      	ldr	r0, [r0, #0]
 8017082:	210b      	movs	r1, #11
 8017084:	f7ff fbc8 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8017088:	b005      	add	sp, #20
 801708a:	f85d fb04 	ldr.w	pc, [sp], #4
 801708e:	bf00      	nop
 8017090:	2000fc80 	andcs	pc, r0, r0, lsl #25

08017094 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8017094:	b570      	push	{r4, r5, r6, lr}
 8017096:	4d0d      	ldr	r5, [pc, #52]	; (80170cc <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 8017098:	b086      	sub	sp, #24
 801709a:	2401      	movs	r4, #1
 801709c:	2600      	movs	r6, #0
 801709e:	6828      	ldr	r0, [r5, #0]
 80170a0:	f88d 2017 	strb.w	r2, [sp, #23]
 80170a4:	460b      	mov	r3, r1
 80170a6:	9200      	str	r2, [sp, #0]
 80170a8:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80170ac:	2204      	movs	r2, #4
 80170ae:	210b      	movs	r1, #11
 80170b0:	f7ff fbb2 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80170b4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80170b8:	6828      	ldr	r0, [r5, #0]
 80170ba:	9400      	str	r4, [sp, #0]
 80170bc:	f10d 0317 	add.w	r3, sp, #23
 80170c0:	2224      	movs	r2, #36	; 0x24
 80170c2:	210b      	movs	r1, #11
 80170c4:	f7ff fba8 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80170c8:	b006      	add	sp, #24
 80170ca:	bd70      	pop	{r4, r5, r6, pc}
 80170cc:	2000fc80 	andcs	pc, r0, r0, lsl #25

080170d0 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 80170d0:	f1a0 0004 	sub.w	r0, r0, #4
 80170d4:	e7de      	b.n	8017094 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 80170d6:	bf00      	nop

080170d8 <StoreRDMDevice::~StoreRDMDevice()>:
 80170d8:	b510      	push	{r4, lr}
 80170da:	4604      	mov	r4, r0
 80170dc:	f001 f824 	bl	8018128 <operator delete(void*)>
 80170e0:	4620      	mov	r0, r4
 80170e2:	bd10      	pop	{r4, pc}

080170e4 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 80170e4:	f1a0 0004 	sub.w	r0, r0, #4
 80170e8:	e7f6      	b.n	80170d8 <StoreRDMDevice::~StoreRDMDevice()>
	...

080170ec <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 80170ec:	b507      	push	{r0, r1, r2, lr}
 80170ee:	2300      	movs	r3, #0
 80170f0:	460a      	mov	r2, r1
 80170f2:	2101      	movs	r1, #1
 80170f4:	e9cd 3100 	strd	r3, r1, [sp]
 80170f8:	4804      	ldr	r0, [pc, #16]	; (801710c <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x20>)
 80170fa:	2329      	movs	r3, #41	; 0x29
 80170fc:	6800      	ldr	r0, [r0, #0]
 80170fe:	210b      	movs	r1, #11
 8017100:	f7ff fbca 	bl	8016898 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8017104:	b003      	add	sp, #12
 8017106:	f85d fb04 	ldr.w	pc, [sp], #4
 801710a:	bf00      	nop
 801710c:	2000fc80 	andcs	pc, r0, r0, lsl #25

08017110 <StoreRDMDevice::StoreRDMDevice()>:
 8017110:	4a03      	ldr	r2, [pc, #12]	; (8017120 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 8017112:	6002      	str	r2, [r0, #0]
 8017114:	321c      	adds	r2, #28
 8017116:	6042      	str	r2, [r0, #4]
 8017118:	4a02      	ldr	r2, [pc, #8]	; (8017124 <StoreRDMDevice::StoreRDMDevice()+0x14>)
 801711a:	6010      	str	r0, [r2, #0]
 801711c:	4770      	bx	lr
 801711e:	bf00      	nop
 8017120:	0801d628 	stmdaeq	r1, {r3, r5, r9, sl, ip, lr, pc}
 8017124:	2000fca0 	andcs	pc, r0, r0, lsr #25

08017128 <StorePixelDmx::~StorePixelDmx()>:
 8017128:	4770      	bx	lr

0801712a <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 801712a:	3804      	subs	r0, #4
 801712c:	4770      	bx	lr
	...

08017130 <StorePixelDmx::Update(pixeldmxparams::Params const*)>:
 8017130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017132:	2200      	movs	r2, #0
 8017134:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8017138:	460b      	mov	r3, r1
 801713a:	4805      	ldr	r0, [pc, #20]	; (8017150 <StorePixelDmx::Update(pixeldmxparams::Params const*)+0x20>)
 801713c:	2136      	movs	r1, #54	; 0x36
 801713e:	9100      	str	r1, [sp, #0]
 8017140:	6800      	ldr	r0, [r0, #0]
 8017142:	2103      	movs	r1, #3
 8017144:	f7ff fb68 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8017148:	b005      	add	sp, #20
 801714a:	f85d fb04 	ldr.w	pc, [sp], #4
 801714e:	bf00      	nop
 8017150:	2000fc80 	andcs	pc, r0, r0, lsl #25

08017154 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 8017154:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017156:	2304      	movs	r3, #4
 8017158:	2200      	movs	r2, #0
 801715a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801715e:	4807      	ldr	r0, [pc, #28]	; (801717c <StorePixelDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 8017160:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017164:	2302      	movs	r3, #2
 8017166:	9300      	str	r3, [sp, #0]
 8017168:	6800      	ldr	r0, [r0, #0]
 801716a:	f10d 0316 	add.w	r3, sp, #22
 801716e:	2207      	movs	r2, #7
 8017170:	2103      	movs	r1, #3
 8017172:	f7ff fb51 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8017176:	b007      	add	sp, #28
 8017178:	f85d fb04 	ldr.w	pc, [sp], #4
 801717c:	2000fc80 	andcs	pc, r0, r0, lsl #25

08017180 <non-virtual thunk to StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 8017180:	f1a0 0004 	sub.w	r0, r0, #4
 8017184:	e7e6      	b.n	8017154 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>
 8017186:	bf00      	nop

08017188 <StorePixelDmx::SaveTestPattern(unsigned char)>:
 8017188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801718a:	2308      	movs	r3, #8
 801718c:	2200      	movs	r2, #0
 801718e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8017192:	4807      	ldr	r0, [pc, #28]	; (80171b0 <StorePixelDmx::SaveTestPattern(unsigned char)+0x28>)
 8017194:	f88d 1017 	strb.w	r1, [sp, #23]
 8017198:	2301      	movs	r3, #1
 801719a:	9300      	str	r3, [sp, #0]
 801719c:	6800      	ldr	r0, [r0, #0]
 801719e:	f10d 0317 	add.w	r3, sp, #23
 80171a2:	2210      	movs	r2, #16
 80171a4:	2103      	movs	r1, #3
 80171a6:	f7ff fb37 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80171aa:	b007      	add	sp, #28
 80171ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80171b0:	2000fc80 	andcs	pc, r0, r0, lsl #25

080171b4 <non-virtual thunk to StorePixelDmx::SaveTestPattern(unsigned char)>:
 80171b4:	f1a0 0004 	sub.w	r0, r0, #4
 80171b8:	e7e6      	b.n	8017188 <StorePixelDmx::SaveTestPattern(unsigned char)>
 80171ba:	bf00      	nop

080171bc <StorePixelDmx::SaveMap(unsigned char)>:
 80171bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80171be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80171c2:	2200      	movs	r2, #0
 80171c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80171c8:	4807      	ldr	r0, [pc, #28]	; (80171e8 <StorePixelDmx::SaveMap(unsigned char)+0x2c>)
 80171ca:	f88d 1017 	strb.w	r1, [sp, #23]
 80171ce:	2301      	movs	r3, #1
 80171d0:	9300      	str	r3, [sp, #0]
 80171d2:	6800      	ldr	r0, [r0, #0]
 80171d4:	f10d 0317 	add.w	r3, sp, #23
 80171d8:	2213      	movs	r2, #19
 80171da:	2103      	movs	r1, #3
 80171dc:	f7ff fb1c 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80171e0:	b007      	add	sp, #28
 80171e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80171e6:	bf00      	nop
 80171e8:	2000fc80 	andcs	pc, r0, r0, lsl #25

080171ec <non-virtual thunk to StorePixelDmx::SaveMap(unsigned char)>:
 80171ec:	f1a0 0004 	sub.w	r0, r0, #4
 80171f0:	e7e4      	b.n	80171bc <StorePixelDmx::SaveMap(unsigned char)>
 80171f2:	bf00      	nop

080171f4 <StorePixelDmx::SaveGroupingCount(unsigned short)>:
 80171f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80171f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80171fa:	2200      	movs	r2, #0
 80171fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8017200:	4807      	ldr	r0, [pc, #28]	; (8017220 <StorePixelDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8017202:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017206:	2302      	movs	r3, #2
 8017208:	9300      	str	r3, [sp, #0]
 801720a:	6800      	ldr	r0, [r0, #0]
 801720c:	f10d 0316 	add.w	r3, sp, #22
 8017210:	2211      	movs	r2, #17
 8017212:	2103      	movs	r1, #3
 8017214:	f7ff fb00 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8017218:	b007      	add	sp, #28
 801721a:	f85d fb04 	ldr.w	pc, [sp], #4
 801721e:	bf00      	nop
 8017220:	2000fc80 	andcs	pc, r0, r0, lsl #25

08017224 <non-virtual thunk to StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8017224:	f1a0 0004 	sub.w	r0, r0, #4
 8017228:	e7e4      	b.n	80171f4 <StorePixelDmx::SaveGroupingCount(unsigned short)>
 801722a:	bf00      	nop

0801722c <StorePixelDmx::SaveCount(unsigned short)>:
 801722c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801722e:	2302      	movs	r3, #2
 8017230:	2200      	movs	r2, #0
 8017232:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8017236:	4807      	ldr	r0, [pc, #28]	; (8017254 <StorePixelDmx::SaveCount(unsigned short)+0x28>)
 8017238:	9300      	str	r3, [sp, #0]
 801723a:	f8ad 1016 	strh.w	r1, [sp, #22]
 801723e:	6800      	ldr	r0, [r0, #0]
 8017240:	f10d 0316 	add.w	r3, sp, #22
 8017244:	2205      	movs	r2, #5
 8017246:	2103      	movs	r1, #3
 8017248:	f7ff fae6 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801724c:	b007      	add	sp, #28
 801724e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017252:	bf00      	nop
 8017254:	2000fc80 	andcs	pc, r0, r0, lsl #25

08017258 <non-virtual thunk to StorePixelDmx::SaveCount(unsigned short)>:
 8017258:	f1a0 0004 	sub.w	r0, r0, #4
 801725c:	e7e6      	b.n	801722c <StorePixelDmx::SaveCount(unsigned short)>
 801725e:	bf00      	nop

08017260 <StorePixelDmx::SaveType(unsigned char)>:
 8017260:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017262:	2301      	movs	r3, #1
 8017264:	2200      	movs	r2, #0
 8017266:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801726a:	4807      	ldr	r0, [pc, #28]	; (8017288 <StorePixelDmx::SaveType(unsigned char)+0x28>)
 801726c:	9300      	str	r3, [sp, #0]
 801726e:	f88d 1017 	strb.w	r1, [sp, #23]
 8017272:	6800      	ldr	r0, [r0, #0]
 8017274:	f10d 0317 	add.w	r3, sp, #23
 8017278:	2204      	movs	r2, #4
 801727a:	2103      	movs	r1, #3
 801727c:	f7ff facc 	bl	8016818 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8017280:	b007      	add	sp, #28
 8017282:	f85d fb04 	ldr.w	pc, [sp], #4
 8017286:	bf00      	nop
 8017288:	2000fc80 	andcs	pc, r0, r0, lsl #25

0801728c <non-virtual thunk to StorePixelDmx::SaveType(unsigned char)>:
 801728c:	f1a0 0004 	sub.w	r0, r0, #4
 8017290:	e7e6      	b.n	8017260 <StorePixelDmx::SaveType(unsigned char)>
 8017292:	bf00      	nop

08017294 <StorePixelDmx::~StorePixelDmx()>:
 8017294:	b510      	push	{r4, lr}
 8017296:	4604      	mov	r4, r0
 8017298:	f000 ff46 	bl	8018128 <operator delete(void*)>
 801729c:	4620      	mov	r0, r4
 801729e:	bd10      	pop	{r4, pc}

080172a0 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 80172a0:	f1a0 0004 	sub.w	r0, r0, #4
 80172a4:	e7f6      	b.n	8017294 <StorePixelDmx::~StorePixelDmx()>
	...

080172a8 <StorePixelDmx::Copy(pixeldmxparams::Params*)>:
 80172a8:	b507      	push	{r0, r1, r2, lr}
 80172aa:	2300      	movs	r3, #0
 80172ac:	460a      	mov	r2, r1
 80172ae:	2101      	movs	r1, #1
 80172b0:	e9cd 3100 	strd	r3, r1, [sp]
 80172b4:	4804      	ldr	r0, [pc, #16]	; (80172c8 <StorePixelDmx::Copy(pixeldmxparams::Params*)+0x20>)
 80172b6:	2336      	movs	r3, #54	; 0x36
 80172b8:	6800      	ldr	r0, [r0, #0]
 80172ba:	2103      	movs	r1, #3
 80172bc:	f7ff faec 	bl	8016898 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 80172c0:	b003      	add	sp, #12
 80172c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80172c6:	bf00      	nop
 80172c8:	2000fc80 	andcs	pc, r0, r0, lsl #25

080172cc <StorePixelDmx::StorePixelDmx()>:
 80172cc:	4a03      	ldr	r2, [pc, #12]	; (80172dc <StorePixelDmx::StorePixelDmx()+0x10>)
 80172ce:	6002      	str	r2, [r0, #0]
 80172d0:	3230      	adds	r2, #48	; 0x30
 80172d2:	6042      	str	r2, [r0, #4]
 80172d4:	4a02      	ldr	r2, [pc, #8]	; (80172e0 <StorePixelDmx::StorePixelDmx()+0x14>)
 80172d6:	6010      	str	r0, [r2, #0]
 80172d8:	4770      	bx	lr
 80172da:	bf00      	nop
 80172dc:	0801d658 	stmdaeq	r1, {r3, r4, r6, r9, sl, ip, lr, pc}
 80172e0:	2000fca8 	andcs	pc, r0, r8, lsr #25

080172e4 <properties::convert_json_file(char*, unsigned short, bool)>:
 80172e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172e8:	7803      	ldrb	r3, [r0, #0]
 80172ea:	2b7b      	cmp	r3, #123	; 0x7b
 80172ec:	f040 80a4 	bne.w	8017438 <properties::convert_json_file(char*, unsigned short, bool)+0x154>
 80172f0:	b182      	cbz	r2, 8017314 <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 80172f2:	2401      	movs	r4, #1
 80172f4:	4606      	mov	r6, r0
 80172f6:	4623      	mov	r3, r4
 80172f8:	2a00      	cmp	r2, #0
 80172fa:	bf0c      	ite	eq
 80172fc:	f04f 0c0a 	moveq.w	ip, #10
 8017300:	f04f 0c00 	movne.w	ip, #0
 8017304:	273d      	movs	r7, #61	; 0x3d
 8017306:	42a1      	cmp	r1, r4
 8017308:	d852      	bhi.n	80173b0 <properties::convert_json_file(char*, unsigned short, bool)+0xcc>
 801730a:	4618      	mov	r0, r3
 801730c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017310:	463c      	mov	r4, r7
 8017312:	e7f1      	b.n	80172f8 <properties::convert_json_file(char*, unsigned short, bool)+0x14>
 8017314:	2323      	movs	r3, #35	; 0x23
 8017316:	f800 3b01 	strb.w	r3, [r0], #1
 801731a:	2701      	movs	r7, #1
 801731c:	4604      	mov	r4, r0
 801731e:	42b9      	cmp	r1, r7
 8017320:	d811      	bhi.n	8017346 <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 8017322:	2301      	movs	r3, #1
 8017324:	4606      	mov	r6, r0
 8017326:	200a      	movs	r0, #10
 8017328:	f806 0b01 	strb.w	r0, [r6], #1
 801732c:	3301      	adds	r3, #1
 801732e:	4625      	mov	r5, r4
 8017330:	4628      	mov	r0, r5
 8017332:	3501      	adds	r5, #1
 8017334:	7804      	ldrb	r4, [r0, #0]
 8017336:	2c7b      	cmp	r4, #123	; 0x7b
 8017338:	d0ea      	beq.n	8017310 <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 801733a:	42b9      	cmp	r1, r7
 801733c:	f107 0401 	add.w	r4, r7, #1
 8017340:	d9da      	bls.n	80172f8 <properties::convert_json_file(char*, unsigned short, bool)+0x14>
 8017342:	4627      	mov	r7, r4
 8017344:	e7f4      	b.n	8017330 <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 8017346:	f814 3b01 	ldrb.w	r3, [r4], #1
 801734a:	2b22      	cmp	r3, #34	; 0x22
 801734c:	d119      	bne.n	8017382 <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 801734e:	46a4      	mov	ip, r4
 8017350:	4605      	mov	r5, r0
 8017352:	2601      	movs	r6, #1
 8017354:	f89c e000 	ldrb.w	lr, [ip]
 8017358:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 801735c:	4664      	mov	r4, ip
 801735e:	4628      	mov	r0, r5
 8017360:	4633      	mov	r3, r6
 8017362:	f10c 0c01 	add.w	ip, ip, #1
 8017366:	f105 0501 	add.w	r5, r5, #1
 801736a:	f106 0601 	add.w	r6, r6, #1
 801736e:	d0d9      	beq.n	8017324 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8017370:	3701      	adds	r7, #1
 8017372:	42b9      	cmp	r1, r7
 8017374:	4664      	mov	r4, ip
 8017376:	f805 ec01 	strb.w	lr, [r5, #-1]
 801737a:	d8eb      	bhi.n	8017354 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 801737c:	4633      	mov	r3, r6
 801737e:	4628      	mov	r0, r5
 8017380:	e7d0      	b.n	8017324 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8017382:	3701      	adds	r7, #1
 8017384:	e7cb      	b.n	801731e <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 8017386:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 801738a:	d111      	bne.n	80173b0 <properties::convert_json_file(char*, unsigned short, bool)+0xcc>
 801738c:	eba3 0800 	sub.w	r8, r3, r0
 8017390:	eb08 0300 	add.w	r3, r8, r0
 8017394:	4602      	mov	r2, r0
 8017396:	f810 eb01 	ldrb.w	lr, [r0], #1
 801739a:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 801739e:	f104 0501 	add.w	r5, r4, #1
 80173a2:	d04c      	beq.n	801743e <properties::convert_json_file(char*, unsigned short, bool)+0x15a>
 80173a4:	42a1      	cmp	r1, r4
 80173a6:	d911      	bls.n	80173cc <properties::convert_json_file(char*, unsigned short, bool)+0xe8>
 80173a8:	f806 eb01 	strb.w	lr, [r6], #1
 80173ac:	462c      	mov	r4, r5
 80173ae:	e7ef      	b.n	8017390 <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 80173b0:	42a1      	cmp	r1, r4
 80173b2:	f890 e000 	ldrb.w	lr, [r0]
 80173b6:	4605      	mov	r5, r0
 80173b8:	f104 0401 	add.w	r4, r4, #1
 80173bc:	f100 0001 	add.w	r0, r0, #1
 80173c0:	d8e1      	bhi.n	8017386 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 80173c2:	4628      	mov	r0, r5
 80173c4:	e7e2      	b.n	801738c <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 80173c6:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 80173ca:	d009      	beq.n	80173e0 <properties::convert_json_file(char*, unsigned short, bool)+0xfc>
 80173cc:	42a9      	cmp	r1, r5
 80173ce:	f892 e000 	ldrb.w	lr, [r2]
 80173d2:	4614      	mov	r4, r2
 80173d4:	f105 0501 	add.w	r5, r5, #1
 80173d8:	f102 0201 	add.w	r2, r2, #1
 80173dc:	d8f3      	bhi.n	80173c6 <properties::convert_json_file(char*, unsigned short, bool)+0xe2>
 80173de:	4622      	mov	r2, r4
 80173e0:	7814      	ldrb	r4, [r2, #0]
 80173e2:	2c2f      	cmp	r4, #47	; 0x2f
 80173e4:	4696      	mov	lr, r2
 80173e6:	4628      	mov	r0, r5
 80173e8:	f102 0201 	add.w	r2, r2, #1
 80173ec:	f105 0501 	add.w	r5, r5, #1
 80173f0:	d81a      	bhi.n	8017428 <properties::convert_json_file(char*, unsigned short, bool)+0x144>
 80173f2:	4281      	cmp	r1, r0
 80173f4:	d8f4      	bhi.n	80173e0 <properties::convert_json_file(char*, unsigned short, bool)+0xfc>
 80173f6:	2c22      	cmp	r4, #34	; 0x22
 80173f8:	bf08      	it	eq
 80173fa:	4696      	moveq	lr, r2
 80173fc:	4670      	mov	r0, lr
 80173fe:	1c6c      	adds	r4, r5, #1
 8017400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017404:	2a22      	cmp	r2, #34	; 0x22
 8017406:	d011      	beq.n	801742c <properties::convert_json_file(char*, unsigned short, bool)+0x148>
 8017408:	2a2c      	cmp	r2, #44	; 0x2c
 801740a:	d00f      	beq.n	801742c <properties::convert_json_file(char*, unsigned short, bool)+0x148>
 801740c:	2a7d      	cmp	r2, #125	; 0x7d
 801740e:	d00d      	beq.n	801742c <properties::convert_json_file(char*, unsigned short, bool)+0x148>
 8017410:	42a9      	cmp	r1, r5
 8017412:	d90f      	bls.n	8017434 <properties::convert_json_file(char*, unsigned short, bool)+0x150>
 8017414:	f1a2 0520 	sub.w	r5, r2, #32
 8017418:	2d5a      	cmp	r5, #90	; 0x5a
 801741a:	d803      	bhi.n	8017424 <properties::convert_json_file(char*, unsigned short, bool)+0x140>
 801741c:	f806 2b01 	strb.w	r2, [r6], #1
 8017420:	3301      	adds	r3, #1
 8017422:	4686      	mov	lr, r0
 8017424:	4625      	mov	r5, r4
 8017426:	e7e9      	b.n	80173fc <properties::convert_json_file(char*, unsigned short, bool)+0x118>
 8017428:	4605      	mov	r5, r0
 801742a:	e7e7      	b.n	80173fc <properties::convert_json_file(char*, unsigned short, bool)+0x118>
 801742c:	f806 cb01 	strb.w	ip, [r6], #1
 8017430:	3301      	adds	r3, #1
 8017432:	462c      	mov	r4, r5
 8017434:	3401      	adds	r4, #1
 8017436:	e766      	b.n	8017306 <properties::convert_json_file(char*, unsigned short, bool)+0x22>
 8017438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801743c:	e766      	b.n	801730c <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 801743e:	f806 7b01 	strb.w	r7, [r6], #1
 8017442:	3301      	adds	r3, #1
 8017444:	4625      	mov	r5, r4
 8017446:	e7c1      	b.n	80173cc <properties::convert_json_file(char*, unsigned short, bool)+0xe8>

08017448 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 8017448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801744c:	6002      	str	r2, [r0, #0]
 801744e:	4614      	mov	r4, r2
 8017450:	2200      	movs	r2, #0
 8017452:	80c2      	strh	r2, [r0, #6]
 8017454:	4a1c      	ldr	r2, [pc, #112]	; (80174c8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 8017456:	8083      	strh	r3, [r0, #4]
 8017458:	7812      	ldrb	r2, [r2, #0]
 801745a:	f002 0201 	and.w	r2, r2, #1
 801745e:	4606      	mov	r6, r0
 8017460:	7202      	strb	r2, [r0, #8]
 8017462:	4608      	mov	r0, r1
 8017464:	4605      	mov	r5, r0
 8017466:	3001      	adds	r0, #1
 8017468:	782f      	ldrb	r7, [r5, #0]
 801746a:	2f00      	cmp	r7, #0
 801746c:	d1fa      	bne.n	8017464 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 801746e:	1a6d      	subs	r5, r5, r1
 8017470:	b29b      	uxth	r3, r3
 8017472:	b1d2      	cbz	r2, 80174aa <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8017474:	1d2f      	adds	r7, r5, #4
 8017476:	429f      	cmp	r7, r3
 8017478:	d814      	bhi.n	80174a4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 801747a:	f04f 087b 	mov.w	r8, #123	; 0x7b
 801747e:	f04f 0922 	mov.w	r9, #34	; 0x22
 8017482:	462a      	mov	r2, r5
 8017484:	f884 8000 	strb.w	r8, [r4]
 8017488:	f884 9001 	strb.w	r9, [r4, #1]
 801748c:	1ca0      	adds	r0, r4, #2
 801748e:	f000 ff0e 	bl	80182ae <memmove>
 8017492:	1963      	adds	r3, r4, r5
 8017494:	223a      	movs	r2, #58	; 0x3a
 8017496:	f883 9002 	strb.w	r9, [r3, #2]
 801749a:	70da      	strb	r2, [r3, #3]
 801749c:	3505      	adds	r5, #5
 801749e:	f804 8007 	strb.w	r8, [r4, r7]
 80174a2:	80f5      	strh	r5, [r6, #6]
 80174a4:	4630      	mov	r0, r6
 80174a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174aa:	1caf      	adds	r7, r5, #2
 80174ac:	429f      	cmp	r7, r3
 80174ae:	d8f9      	bhi.n	80174a4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 80174b0:	4620      	mov	r0, r4
 80174b2:	2323      	movs	r3, #35	; 0x23
 80174b4:	f800 3b01 	strb.w	r3, [r0], #1
 80174b8:	462a      	mov	r2, r5
 80174ba:	442c      	add	r4, r5
 80174bc:	f000 fef7 	bl	80182ae <memmove>
 80174c0:	230a      	movs	r3, #10
 80174c2:	7063      	strb	r3, [r4, #1]
 80174c4:	80f7      	strh	r7, [r6, #6]
 80174c6:	e7ed      	b.n	80174a4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 80174c8:	2000fcac 	andcs	pc, r0, ip, lsr #25

080174cc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 80174cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174ce:	469c      	mov	ip, r3
 80174d0:	8885      	ldrh	r5, [r0, #4]
 80174d2:	88c3      	ldrh	r3, [r0, #6]
 80174d4:	42ab      	cmp	r3, r5
 80174d6:	b085      	sub	sp, #20
 80174d8:	d302      	bcc.n	80174e0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 80174da:	2000      	movs	r0, #0
 80174dc:	b005      	add	sp, #20
 80174de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174e0:	4604      	mov	r4, r0
 80174e2:	6800      	ldr	r0, [r0, #0]
 80174e4:	f894 e008 	ldrb.w	lr, [r4, #8]
 80174e8:	4418      	add	r0, r3
 80174ea:	1aed      	subs	r5, r5, r3
 80174ec:	b2d6      	uxtb	r6, r2
 80174ee:	f3c2 2707 	ubfx	r7, r2, #8, #8
 80174f2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80174f6:	0e12      	lsrs	r2, r2, #24
 80174f8:	f1bc 0f00 	cmp.w	ip, #0
 80174fc:	d109      	bne.n	8017512 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 80174fe:	f1be 0f00 	cmp.w	lr, #0
 8017502:	d109      	bne.n	8017518 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8017504:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017508:	e9cd 6700 	strd	r6, r7, [sp]
 801750c:	4a0e      	ldr	r2, [pc, #56]	; (8017548 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 801750e:	460b      	mov	r3, r1
 8017510:	e008      	b.n	8017524 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8017512:	f1be 0f00 	cmp.w	lr, #0
 8017516:	d00f      	beq.n	8017538 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 8017518:	e9cd 6700 	strd	r6, r7, [sp]
 801751c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017520:	4a0a      	ldr	r2, [pc, #40]	; (801754c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8017522:	460b      	mov	r3, r1
 8017524:	4629      	mov	r1, r5
 8017526:	f7f2 ffeb 	bl	800a500 <snprintf>
 801752a:	4285      	cmp	r5, r0
 801752c:	dbd5      	blt.n	80174da <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 801752e:	88e3      	ldrh	r3, [r4, #6]
 8017530:	4403      	add	r3, r0
 8017532:	80e3      	strh	r3, [r4, #6]
 8017534:	2001      	movs	r0, #1
 8017536:	e7d1      	b.n	80174dc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 8017538:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801753c:	e9cd 6700 	strd	r6, r7, [sp]
 8017540:	4a03      	ldr	r2, [pc, #12]	; (8017550 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8017542:	460b      	mov	r3, r1
 8017544:	e7ee      	b.n	8017524 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8017546:	bf00      	nop
 8017548:	0801d761 	stmdaeq	r1, {r0, r5, r6, r8, r9, sl, ip, lr, pc}
 801754c:	0801d74d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, sl, ip, lr, pc}
 8017550:	0801d762 	stmdaeq	r1, {r1, r5, r6, r8, r9, sl, ip, lr, pc}

08017554 <PropertiesBuilder::AddComment(char const*)>:
 8017554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017556:	7a06      	ldrb	r6, [r0, #8]
 8017558:	b996      	cbnz	r6, 8017580 <PropertiesBuilder::AddComment(char const*)+0x2c>
 801755a:	4604      	mov	r4, r0
 801755c:	88c0      	ldrh	r0, [r0, #6]
 801755e:	88a5      	ldrh	r5, [r4, #4]
 8017560:	42a8      	cmp	r0, r5
 8017562:	d20d      	bcs.n	8017580 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8017564:	6827      	ldr	r7, [r4, #0]
 8017566:	4a07      	ldr	r2, [pc, #28]	; (8017584 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8017568:	1a2d      	subs	r5, r5, r0
 801756a:	460b      	mov	r3, r1
 801756c:	4438      	add	r0, r7
 801756e:	4629      	mov	r1, r5
 8017570:	f7f2 ffc6 	bl	800a500 <snprintf>
 8017574:	4285      	cmp	r5, r0
 8017576:	bfa1      	itttt	ge
 8017578:	88e3      	ldrhge	r3, [r4, #6]
 801757a:	18c0      	addge	r0, r0, r3
 801757c:	80e0      	strhge	r0, [r4, #6]
 801757e:	2601      	movge	r6, #1
 8017580:	4630      	mov	r0, r6
 8017582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017584:	0801d772 	stmdaeq	r1, {r1, r4, r5, r6, r8, r9, sl, ip, lr, pc}

08017588 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8017588:	e9c0 1200 	strd	r1, r2, [r0]
 801758c:	4770      	bx	lr

0801758e <ReadConfigFile::~ReadConfigFile()>:
 801758e:	4770      	bx	lr

08017590 <ReadConfigFile::Read(char const*, unsigned int)>:
 8017590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017594:	4606      	mov	r6, r0
 8017596:	b0a0      	sub	sp, #128	; 0x80
 8017598:	460d      	mov	r5, r1
 801759a:	4614      	mov	r4, r2
 801759c:	f04f 0800 	mov.w	r8, #0
 80175a0:	b33c      	cbz	r4, 80175f2 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 80175a2:	466b      	mov	r3, sp
 80175a4:	462a      	mov	r2, r5
 80175a6:	4619      	mov	r1, r3
 80175a8:	e007      	b.n	80175ba <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 80175aa:	f803 7b01 	strb.w	r7, [r3], #1
 80175ae:	1a58      	subs	r0, r3, r1
 80175b0:	287f      	cmp	r0, #127	; 0x7f
 80175b2:	4615      	mov	r5, r2
 80175b4:	dc1d      	bgt.n	80175f2 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 80175b6:	3c01      	subs	r4, #1
 80175b8:	d00f      	beq.n	80175da <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 80175ba:	7817      	ldrb	r7, [r2, #0]
 80175bc:	2f0d      	cmp	r7, #13
 80175be:	4610      	mov	r0, r2
 80175c0:	f102 0201 	add.w	r2, r2, #1
 80175c4:	d001      	beq.n	80175ca <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 80175c6:	2f0a      	cmp	r7, #10
 80175c8:	d1ef      	bne.n	80175aa <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 80175ca:	4605      	mov	r5, r0
 80175cc:	b12c      	cbz	r4, 80175da <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 80175ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175d2:	2a0d      	cmp	r2, #13
 80175d4:	d00b      	beq.n	80175ee <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 80175d6:	2a0a      	cmp	r2, #10
 80175d8:	d009      	beq.n	80175ee <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 80175da:	f89d 2000 	ldrb.w	r2, [sp]
 80175de:	2a60      	cmp	r2, #96	; 0x60
 80175e0:	d9de      	bls.n	80175a0 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80175e2:	f883 8000 	strb.w	r8, [r3]
 80175e6:	e9d6 3000 	ldrd	r3, r0, [r6]
 80175ea:	4798      	blx	r3
 80175ec:	e7d8      	b.n	80175a0 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80175ee:	3c01      	subs	r4, #1
 80175f0:	e7eb      	b.n	80175ca <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 80175f2:	b020      	add	sp, #128	; 0x80
 80175f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080175f8 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 80175f8:	b570      	push	{r4, r5, r6, lr}
 80175fa:	4615      	mov	r5, r2
 80175fc:	461c      	mov	r4, r3
 80175fe:	f000 f916 	bl	801782e <Sscan::checkName(char const*, char const*)>
 8017602:	b180      	cbz	r0, 8017626 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 8017604:	2100      	movs	r1, #0
 8017606:	5c43      	ldrb	r3, [r0, r1]
 8017608:	6826      	ldr	r6, [r4, #0]
 801760a:	b28a      	uxth	r2, r1
 801760c:	b143      	cbz	r3, 8017620 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 801760e:	42b2      	cmp	r2, r6
 8017610:	d303      	bcc.n	801761a <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 8017612:	2b0a      	cmp	r3, #10
 8017614:	d004      	beq.n	8017620 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8017616:	2002      	movs	r0, #2
 8017618:	e004      	b.n	8017624 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 801761a:	546b      	strb	r3, [r5, r1]
 801761c:	3101      	adds	r1, #1
 801761e:	e7f2      	b.n	8017606 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 8017620:	6022      	str	r2, [r4, #0]
 8017622:	2000      	movs	r0, #0
 8017624:	bd70      	pop	{r4, r5, r6, pc}
 8017626:	2001      	movs	r0, #1
 8017628:	e7fc      	b.n	8017624 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

0801762a <Sscan::Float(char const*, char const*, float&)>:
 801762a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801762c:	4614      	mov	r4, r2
 801762e:	f000 f8fe 	bl	801782e <Sscan::checkName(char const*, char const*)>
 8017632:	2800      	cmp	r0, #0
 8017634:	d052      	beq.n	80176dc <Sscan::Float(char const*, char const*, float&)+0xb2>
 8017636:	7803      	ldrb	r3, [r0, #0]
 8017638:	2b2d      	cmp	r3, #45	; 0x2d
 801763a:	bf04      	itt	eq
 801763c:	3001      	addeq	r0, #1
 801763e:	2601      	moveq	r6, #1
 8017640:	7803      	ldrb	r3, [r0, #0]
 8017642:	bf18      	it	ne
 8017644:	2600      	movne	r6, #0
 8017646:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 801764a:	d101      	bne.n	8017650 <Sscan::Float(char const*, char const*, float&)+0x26>
 801764c:	2002      	movs	r0, #2
 801764e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017650:	2300      	movs	r3, #0
 8017652:	210a      	movs	r1, #10
 8017654:	7802      	ldrb	r2, [r0, #0]
 8017656:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801765a:	2d09      	cmp	r5, #9
 801765c:	d8f6      	bhi.n	801764c <Sscan::Float(char const*, char const*, float&)+0x22>
 801765e:	fb01 2303 	mla	r3, r1, r3, r2
 8017662:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8017666:	2a2e      	cmp	r2, #46	; 0x2e
 8017668:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 801766c:	d002      	beq.n	8017674 <Sscan::Float(char const*, char const*, float&)+0x4a>
 801766e:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8017672:	d1ef      	bne.n	8017654 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8017674:	ee07 3a90 	vmov	s15, r3
 8017678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801767c:	edc4 7a00 	vstr	s15, [r4]
 8017680:	7803      	ldrb	r3, [r0, #0]
 8017682:	2b2e      	cmp	r3, #46	; 0x2e
 8017684:	d007      	beq.n	8017696 <Sscan::Float(char const*, char const*, float&)+0x6c>
 8017686:	b90e      	cbnz	r6, 801768c <Sscan::Float(char const*, char const*, float&)+0x62>
 8017688:	2000      	movs	r0, #0
 801768a:	e7e0      	b.n	801764e <Sscan::Float(char const*, char const*, float&)+0x24>
 801768c:	eef1 7a67 	vneg.f32	s15, s15
 8017690:	edc4 7a00 	vstr	s15, [r4]
 8017694:	e7f8      	b.n	8017688 <Sscan::Float(char const*, char const*, float&)+0x5e>
 8017696:	4603      	mov	r3, r0
 8017698:	2101      	movs	r1, #1
 801769a:	2500      	movs	r5, #0
 801769c:	270a      	movs	r7, #10
 801769e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80176a2:	f012 00df 	ands.w	r0, r2, #223	; 0xdf
 80176a6:	d112      	bne.n	80176ce <Sscan::Float(char const*, char const*, float&)+0xa4>
 80176a8:	ee07 5a10 	vmov	s14, r5
 80176ac:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80176b0:	ee07 1a10 	vmov	s14, r1
 80176b4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80176b8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80176bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80176c0:	2e00      	cmp	r6, #0
 80176c2:	d0e5      	beq.n	8017690 <Sscan::Float(char const*, char const*, float&)+0x66>
 80176c4:	eef1 7a67 	vneg.f32	s15, s15
 80176c8:	edc4 7a00 	vstr	s15, [r4]
 80176cc:	e7bf      	b.n	801764e <Sscan::Float(char const*, char const*, float&)+0x24>
 80176ce:	3a30      	subs	r2, #48	; 0x30
 80176d0:	2a09      	cmp	r2, #9
 80176d2:	d8bb      	bhi.n	801764c <Sscan::Float(char const*, char const*, float&)+0x22>
 80176d4:	fb07 2505 	mla	r5, r7, r5, r2
 80176d8:	4379      	muls	r1, r7
 80176da:	e7e0      	b.n	801769e <Sscan::Float(char const*, char const*, float&)+0x74>
 80176dc:	2001      	movs	r0, #1
 80176de:	e7b6      	b.n	801764e <Sscan::Float(char const*, char const*, float&)+0x24>

080176e0 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 80176e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176e2:	4615      	mov	r5, r2
 80176e4:	f000 f8a3 	bl	801782e <Sscan::checkName(char const*, char const*)>
 80176e8:	bb58      	cbnz	r0, 8017742 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 80176ea:	2001      	movs	r0, #1
 80176ec:	e027      	b.n	801773e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 80176ee:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80176f2:	2b09      	cmp	r3, #9
 80176f4:	d822      	bhi.n	801773c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80176f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80176fa:	3930      	subs	r1, #48	; 0x30
 80176fc:	4603      	mov	r3, r0
 80176fe:	4618      	mov	r0, r3
 8017700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017704:	2a2e      	cmp	r2, #46	; 0x2e
 8017706:	d115      	bne.n	8017734 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8017708:	29ff      	cmp	r1, #255	; 0xff
 801770a:	d817      	bhi.n	801773c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801770c:	3401      	adds	r4, #1
 801770e:	2c03      	cmp	r4, #3
 8017710:	f806 1b01 	strb.w	r1, [r6], #1
 8017714:	d119      	bne.n	801774a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 8017716:	1d1a      	adds	r2, r3, #4
 8017718:	2400      	movs	r4, #0
 801771a:	260a      	movs	r6, #10
 801771c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8017720:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8017724:	d115      	bne.n	8017752 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 8017726:	2cff      	cmp	r4, #255	; 0xff
 8017728:	d808      	bhi.n	801773c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801772a:	f88d 4007 	strb.w	r4, [sp, #7]
 801772e:	9b01      	ldr	r3, [sp, #4]
 8017730:	602b      	str	r3, [r5, #0]
 8017732:	e004      	b.n	801773e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8017734:	2a00      	cmp	r2, #0
 8017736:	d0e7      	beq.n	8017708 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8017738:	42b8      	cmp	r0, r7
 801773a:	d1d8      	bne.n	80176ee <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 801773c:	2002      	movs	r0, #2
 801773e:	b003      	add	sp, #12
 8017740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017742:	ae01      	add	r6, sp, #4
 8017744:	2400      	movs	r4, #0
 8017746:	f04f 0c0a 	mov.w	ip, #10
 801774a:	4603      	mov	r3, r0
 801774c:	1d07      	adds	r7, r0, #4
 801774e:	2100      	movs	r1, #0
 8017750:	e7d5      	b.n	80176fe <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 8017752:	4293      	cmp	r3, r2
 8017754:	d0f2      	beq.n	801773c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8017756:	3930      	subs	r1, #48	; 0x30
 8017758:	2909      	cmp	r1, #9
 801775a:	d8ef      	bhi.n	801773c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801775c:	fb06 1404 	mla	r4, r6, r4, r1
 8017760:	e7dc      	b.n	801771c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

08017762 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8017762:	b538      	push	{r3, r4, r5, lr}
 8017764:	4614      	mov	r4, r2
 8017766:	f000 f862 	bl	801782e <Sscan::checkName(char const*, char const*)>
 801776a:	b1a8      	cbz	r0, 8017798 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x36>
 801776c:	2100      	movs	r1, #0
 801776e:	220a      	movs	r2, #10
 8017770:	7803      	ldrb	r3, [r0, #0]
 8017772:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8017776:	2d09      	cmp	r5, #9
 8017778:	d810      	bhi.n	801779c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x3a>
 801777a:	fb02 3101 	mla	r1, r2, r1, r3
 801777e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8017782:	f013 03df 	ands.w	r3, r3, #223	; 0xdf
 8017786:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
 801778a:	d1f1      	bne.n	8017770 <Sscan::Uint16(char const*, char const*, unsigned short&)+0xe>
 801778c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8017790:	d204      	bcs.n	801779c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x3a>
 8017792:	8021      	strh	r1, [r4, #0]
 8017794:	4618      	mov	r0, r3
 8017796:	bd38      	pop	{r3, r4, r5, pc}
 8017798:	2301      	movs	r3, #1
 801779a:	e7fb      	b.n	8017794 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 801779c:	2302      	movs	r3, #2
 801779e:	e7f9      	b.n	8017794 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

080177a0 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 80177a0:	b570      	push	{r4, r5, r6, lr}
 80177a2:	4614      	mov	r4, r2
 80177a4:	f000 f843 	bl	801782e <Sscan::checkName(char const*, char const*)>
 80177a8:	b1f8      	cbz	r0, 80177ea <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 80177aa:	2300      	movs	r3, #0
 80177ac:	461a      	mov	r2, r3
 80177ae:	260a      	movs	r6, #10
 80177b0:	7805      	ldrb	r5, [r0, #0]
 80177b2:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 80177b6:	2909      	cmp	r1, #9
 80177b8:	d819      	bhi.n	80177ee <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 80177ba:	fba3 3106 	umull	r3, r1, r3, r6
 80177be:	fb06 1102 	mla	r1, r6, r2, r1
 80177c2:	3b30      	subs	r3, #48	; 0x30
 80177c4:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80177c8:	18eb      	adds	r3, r5, r3
 80177ca:	f141 0200 	adc.w	r2, r1, #0
 80177ce:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80177d2:	f011 01df 	ands.w	r1, r1, #223	; 0xdf
 80177d6:	d1eb      	bne.n	80177b0 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x10>
 80177d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80177dc:	4298      	cmp	r0, r3
 80177de:	eb71 0202 	sbcs.w	r2, r1, r2
 80177e2:	d304      	bcc.n	80177ee <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 80177e4:	6023      	str	r3, [r4, #0]
 80177e6:	4608      	mov	r0, r1
 80177e8:	bd70      	pop	{r4, r5, r6, pc}
 80177ea:	2101      	movs	r1, #1
 80177ec:	e7fb      	b.n	80177e6 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x46>
 80177ee:	2102      	movs	r1, #2
 80177f0:	e7f9      	b.n	80177e6 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x46>

080177f2 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 80177f2:	b538      	push	{r3, r4, r5, lr}
 80177f4:	4614      	mov	r4, r2
 80177f6:	f000 f81a 	bl	801782e <Sscan::checkName(char const*, char const*)>
 80177fa:	b1a0      	cbz	r0, 8017826 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x34>
 80177fc:	2100      	movs	r1, #0
 80177fe:	220a      	movs	r2, #10
 8017800:	7803      	ldrb	r3, [r0, #0]
 8017802:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8017806:	2d09      	cmp	r5, #9
 8017808:	d80f      	bhi.n	801782a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x38>
 801780a:	fb02 3101 	mla	r1, r2, r1, r3
 801780e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8017812:	f013 03df 	ands.w	r3, r3, #223	; 0xdf
 8017816:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
 801781a:	d1f1      	bne.n	8017800 <Sscan::Uint8(char const*, char const*, unsigned char&)+0xe>
 801781c:	29ff      	cmp	r1, #255	; 0xff
 801781e:	d804      	bhi.n	801782a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x38>
 8017820:	7021      	strb	r1, [r4, #0]
 8017822:	4618      	mov	r0, r3
 8017824:	bd38      	pop	{r3, r4, r5, pc}
 8017826:	2301      	movs	r3, #1
 8017828:	e7fb      	b.n	8017822 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 801782a:	2302      	movs	r3, #2
 801782c:	e7f9      	b.n	8017822 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

0801782e <Sscan::checkName(char const*, char const*)>:
 801782e:	b510      	push	{r4, lr}
 8017830:	3901      	subs	r1, #1
 8017832:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017836:	4604      	mov	r4, r0
 8017838:	f810 2b01 	ldrb.w	r2, [r0], #1
 801783c:	b123      	cbz	r3, 8017848 <Sscan::checkName(char const*, char const*)+0x1a>
 801783e:	b10a      	cbz	r2, 8017844 <Sscan::checkName(char const*, char const*)+0x16>
 8017840:	4293      	cmp	r3, r2
 8017842:	d0f6      	beq.n	8017832 <Sscan::checkName(char const*, char const*)+0x4>
 8017844:	2000      	movs	r0, #0
 8017846:	e006      	b.n	8017856 <Sscan::checkName(char const*, char const*)+0x28>
 8017848:	2a3d      	cmp	r2, #61	; 0x3d
 801784a:	d1fb      	bne.n	8017844 <Sscan::checkName(char const*, char const*)+0x16>
 801784c:	7860      	ldrb	r0, [r4, #1]
 801784e:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8017852:	d000      	beq.n	8017856 <Sscan::checkName(char const*, char const*)+0x28>
 8017854:	1c60      	adds	r0, r4, #1
 8017856:	bd10      	pop	{r4, pc}

08017858 <LightSet::GetDmxStartAddress()>:
 8017858:	2001      	movs	r0, #1
 801785a:	4770      	bx	lr

0801785c <LightSet::GetDmxFootprint()>:
 801785c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017860:	4770      	bx	lr

08017862 <LightSet::SetDmxStartAddress(unsigned short)>:
 8017862:	2000      	movs	r0, #0
 8017864:	4770      	bx	lr

08017866 <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8017866:	2300      	movs	r3, #0
 8017868:	2001      	movs	r0, #1
 801786a:	7093      	strb	r3, [r2, #2]
 801786c:	8010      	strh	r0, [r2, #0]
 801786e:	4770      	bx	lr

08017870 <Display::PrintInfo() [clone .isra.0]>:
 8017870:	b910      	cbnz	r0, 8017878 <Display::PrintInfo() [clone .isra.0]+0x8>
 8017872:	4803      	ldr	r0, [pc, #12]	; (8017880 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8017874:	f000 bd53 	b.w	801831e <puts>
 8017878:	6803      	ldr	r3, [r0, #0]
 801787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801787c:	4718      	bx	r3
 801787e:	bf00      	nop
 8017880:	0801d9c4 	stmdaeq	r1, {r2, r6, r7, r8, fp, ip, lr, pc}

08017884 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8017884:	b513      	push	{r0, r1, r4, lr}
 8017886:	4604      	mov	r4, r0
 8017888:	0a13      	lsrs	r3, r2, #8
 801788a:	7800      	ldrb	r0, [r0, #0]
 801788c:	f88d 1004 	strb.w	r1, [sp, #4]
 8017890:	f88d 3005 	strb.w	r3, [sp, #5]
 8017894:	f88d 2006 	strb.w	r2, [sp, #6]
 8017898:	f002 f998 	bl	8019bcc <gd32_i2c_set_address>
 801789c:	6860      	ldr	r0, [r4, #4]
 801789e:	f002 f98d 	bl	8019bbc <gd32_i2c_set_baudrate>
 80178a2:	2103      	movs	r1, #3
 80178a4:	a801      	add	r0, sp, #4
 80178a6:	f002 f997 	bl	8019bd8 <gd32_i2c_write>
 80178aa:	b002      	add	sp, #8
 80178ac:	bd10      	pop	{r4, pc}

080178ae <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 80178ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80178b0:	460d      	mov	r5, r1
 80178b2:	4604      	mov	r4, r0
 80178b4:	f002 f98a 	bl	8019bcc <gd32_i2c_set_address>
 80178b8:	4628      	mov	r0, r5
 80178ba:	f002 f97f 	bl	8019bbc <gd32_i2c_set_baudrate>
 80178be:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80178c2:	2b07      	cmp	r3, #7
 80178c4:	d902      	bls.n	80178cc <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 80178c6:	3c50      	subs	r4, #80	; 0x50
 80178c8:	2c0f      	cmp	r4, #15
 80178ca:	d809      	bhi.n	80178e0 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 80178cc:	2101      	movs	r1, #1
 80178ce:	f10d 0007 	add.w	r0, sp, #7
 80178d2:	f002 f9e7 	bl	8019ca4 <gd32_i2c_read>
 80178d6:	fab0 f080 	clz	r0, r0
 80178da:	0940      	lsrs	r0, r0, #5
 80178dc:	b003      	add	sp, #12
 80178de:	bd30      	pop	{r4, r5, pc}
 80178e0:	2100      	movs	r1, #0
 80178e2:	4608      	mov	r0, r1
 80178e4:	f002 f978 	bl	8019bd8 <gd32_i2c_write>
 80178e8:	e7f5      	b.n	80178d6 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

080178ea <Display::Detect7Segment()>:
 80178ea:	b513      	push	{r0, r1, r4, lr}
 80178ec:	68c1      	ldr	r1, [r0, #12]
 80178ee:	4604      	mov	r4, r0
 80178f0:	7a00      	ldrb	r0, [r0, #8]
 80178f2:	f7ff ffdc 	bl	80178ae <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 80178f6:	7460      	strb	r0, [r4, #17]
 80178f8:	b170      	cbz	r0, 8017918 <Display::Detect7Segment()+0x2e>
 80178fa:	2200      	movs	r2, #0
 80178fc:	f104 0008 	add.w	r0, r4, #8
 8017900:	4611      	mov	r1, r2
 8017902:	9001      	str	r0, [sp, #4]
 8017904:	f7ff ffbe 	bl	8017884 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8017908:	7c63      	ldrb	r3, [r4, #17]
 801790a:	9801      	ldr	r0, [sp, #4]
 801790c:	b123      	cbz	r3, 8017918 <Display::Detect7Segment()+0x2e>
 801790e:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8017912:	2112      	movs	r1, #18
 8017914:	f7ff ffb6 	bl	8017884 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8017918:	b002      	add	sp, #8
 801791a:	bd10      	pop	{r4, pc}

0801791c <Display::Detect(display::Type)>:
 801791c:	2902      	cmp	r1, #2
 801791e:	b538      	push	{r3, r4, r5, lr}
 8017920:	4604      	mov	r4, r0
 8017922:	d014      	beq.n	801794e <Display::Detect(display::Type)+0x32>
 8017924:	2904      	cmp	r1, #4
 8017926:	d01b      	beq.n	8017960 <Display::Detect(display::Type)+0x44>
 8017928:	69a0      	ldr	r0, [r4, #24]
 801792a:	b168      	cbz	r0, 8017948 <Display::Detect(display::Type)+0x2c>
 801792c:	6803      	ldr	r3, [r0, #0]
 801792e:	689b      	ldr	r3, [r3, #8]
 8017930:	4798      	blx	r3
 8017932:	69a3      	ldr	r3, [r4, #24]
 8017934:	b9b0      	cbnz	r0, 8017964 <Display::Detect(display::Type)+0x48>
 8017936:	b11b      	cbz	r3, 8017940 <Display::Detect(display::Type)+0x24>
 8017938:	681a      	ldr	r2, [r3, #0]
 801793a:	4618      	mov	r0, r3
 801793c:	6852      	ldr	r2, [r2, #4]
 801793e:	4790      	blx	r2
 8017940:	2300      	movs	r3, #0
 8017942:	61a3      	str	r3, [r4, #24]
 8017944:	2304      	movs	r3, #4
 8017946:	6023      	str	r3, [r4, #0]
 8017948:	2300      	movs	r3, #0
 801794a:	6163      	str	r3, [r4, #20]
 801794c:	e011      	b.n	8017972 <Display::Detect(display::Type)+0x56>
 801794e:	2018      	movs	r0, #24
 8017950:	f000 fbee 	bl	8018130 <operator new(unsigned int)>
 8017954:	2100      	movs	r1, #0
 8017956:	4605      	mov	r5, r0
 8017958:	f000 f896 	bl	8017a88 <Ssd1306::Ssd1306(TOledPanel)>
 801795c:	61a5      	str	r5, [r4, #24]
 801795e:	e7e3      	b.n	8017928 <Display::Detect(display::Type)+0xc>
 8017960:	6001      	str	r1, [r0, #0]
 8017962:	e7e1      	b.n	8017928 <Display::Detect(display::Type)+0xc>
 8017964:	681a      	ldr	r2, [r3, #0]
 8017966:	4618      	mov	r0, r3
 8017968:	68d2      	ldr	r2, [r2, #12]
 801796a:	4790      	blx	r2
 801796c:	69a3      	ldr	r3, [r4, #24]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d0ea      	beq.n	8017948 <Display::Detect(display::Type)+0x2c>
 8017972:	bd38      	pop	{r3, r4, r5, pc}

08017974 <Display::Display()>:
 8017974:	2304      	movs	r3, #4
 8017976:	b510      	push	{r4, lr}
 8017978:	6003      	str	r3, [r0, #0]
 801797a:	4b0f      	ldr	r3, [pc, #60]	; (80179b8 <Display::Display()+0x44>)
 801797c:	4a0f      	ldr	r2, [pc, #60]	; (80179bc <Display::Display()+0x48>)
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	6043      	str	r3, [r0, #4]
 8017982:	2321      	movs	r3, #33	; 0x21
 8017984:	7203      	strb	r3, [r0, #8]
 8017986:	4b0e      	ldr	r3, [pc, #56]	; (80179c0 <Display::Display()+0x4c>)
 8017988:	60c3      	str	r3, [r0, #12]
 801798a:	2300      	movs	r3, #0
 801798c:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8017990:	8203      	strh	r3, [r0, #16]
 8017992:	4b0c      	ldr	r3, [pc, #48]	; (80179c4 <Display::Display()+0x50>)
 8017994:	4604      	mov	r4, r0
 8017996:	2102      	movs	r1, #2
 8017998:	6018      	str	r0, [r3, #0]
 801799a:	f7ff ffbf 	bl	801791c <Display::Detect(display::Type)>
 801799e:	4620      	mov	r0, r4
 80179a0:	f7ff ffa3 	bl	80178ea <Display::Detect7Segment()>
 80179a4:	69a3      	ldr	r3, [r4, #24]
 80179a6:	b10b      	cbz	r3, 80179ac <Display::Display()+0x38>
 80179a8:	f7f1 fd12 	bl	80093d0 <display::timeout::gpio_init()>
 80179ac:	69a0      	ldr	r0, [r4, #24]
 80179ae:	f7ff ff5f 	bl	8017870 <Display::PrintInfo() [clone .isra.0]>
 80179b2:	4620      	mov	r0, r4
 80179b4:	bd10      	pop	{r4, pc}
 80179b6:	bf00      	nop
 80179b8:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 80179bc:	000493e0 	andeq	r9, r4, r0, ror #7
 80179c0:	00061a80 	andeq	r1, r6, r0, lsl #21
 80179c4:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0

080179c8 <Ssd1306::~Ssd1306()>:
 80179c8:	4770      	bx	lr

080179ca <Ssd1306::SetCursor(unsigned int)>:
 80179ca:	4770      	bx	lr

080179cc <Ssd1306::PrintInfo()>:
 80179cc:	b410      	push	{r4}
 80179ce:	4906      	ldr	r1, [pc, #24]	; (80179e8 <Ssd1306::PrintInfo()+0x1c>)
 80179d0:	7c44      	ldrb	r4, [r0, #17]
 80179d2:	7903      	ldrb	r3, [r0, #4]
 80179d4:	7942      	ldrb	r2, [r0, #5]
 80179d6:	4805      	ldr	r0, [pc, #20]	; (80179ec <Ssd1306::PrintInfo()+0x20>)
 80179d8:	2c00      	cmp	r4, #0
 80179da:	bf08      	it	eq
 80179dc:	4601      	moveq	r1, r0
 80179de:	4804      	ldr	r0, [pc, #16]	; (80179f0 <Ssd1306::PrintInfo()+0x24>)
 80179e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179e4:	f7f2 bd64 	b.w	800a4b0 <printf>
 80179e8:	0801d9d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, fp, ip, lr, pc}
 80179ec:	0801d9dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, fp, ip, lr, pc}
 80179f0:	0801d9e4 	stmdaeq	r1, {r2, r5, r6, r7, r8, fp, ip, lr, pc}

080179f4 <Ssd1306::~Ssd1306()>:
 80179f4:	b510      	push	{r4, lr}
 80179f6:	4604      	mov	r4, r0
 80179f8:	f000 fb96 	bl	8018128 <operator delete(void*)>
 80179fc:	4620      	mov	r0, r4
 80179fe:	bd10      	pop	{r4, pc}

08017a00 <Ssd1306::PutChar(int)>:
 8017a00:	b510      	push	{r4, lr}
 8017a02:	3920      	subs	r1, #32
 8017a04:	295f      	cmp	r1, #95	; 0x5f
 8017a06:	f100 0008 	add.w	r0, r0, #8
 8017a0a:	bf94      	ite	ls
 8017a0c:	460c      	movls	r4, r1
 8017a0e:	2400      	movhi	r4, #0
 8017a10:	f7ff f906 	bl	8016c20 <HAL_I2C::Setup()>
 8017a14:	4804      	ldr	r0, [pc, #16]	; (8017a28 <Ssd1306::PutChar(int)+0x28>)
 8017a16:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8017a1a:	4420      	add	r0, r4
 8017a1c:	2107      	movs	r1, #7
 8017a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a22:	f002 b8d9 	b.w	8019bd8 <gd32_i2c_write>
 8017a26:	bf00      	nop
 8017a28:	0801d9f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, fp, ip, lr, pc}

08017a2c <Ssd1306::PutString(char const*)>:
 8017a2c:	b538      	push	{r3, r4, r5, lr}
 8017a2e:	4605      	mov	r5, r0
 8017a30:	1e4c      	subs	r4, r1, #1
 8017a32:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8017a36:	b901      	cbnz	r1, 8017a3a <Ssd1306::PutString(char const*)+0xe>
 8017a38:	bd38      	pop	{r3, r4, r5, pc}
 8017a3a:	4628      	mov	r0, r5
 8017a3c:	f7ff ffe0 	bl	8017a00 <Ssd1306::PutChar(int)>
 8017a40:	e7f7      	b.n	8017a32 <Ssd1306::PutString(char const*)+0x6>

08017a42 <Ssd1306::Text(char const*, unsigned int)>:
 8017a42:	b570      	push	{r4, r5, r6, lr}
 8017a44:	7903      	ldrb	r3, [r0, #4]
 8017a46:	4605      	mov	r5, r0
 8017a48:	460c      	mov	r4, r1
 8017a4a:	4293      	cmp	r3, r2
 8017a4c:	bf94      	ite	ls
 8017a4e:	18ce      	addls	r6, r1, r3
 8017a50:	188e      	addhi	r6, r1, r2
 8017a52:	42b4      	cmp	r4, r6
 8017a54:	d100      	bne.n	8017a58 <Ssd1306::Text(char const*, unsigned int)+0x16>
 8017a56:	bd70      	pop	{r4, r5, r6, pc}
 8017a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a5c:	4628      	mov	r0, r5
 8017a5e:	f7ff ffcf 	bl	8017a00 <Ssd1306::PutChar(int)>
 8017a62:	e7f6      	b.n	8017a52 <Ssd1306::Text(char const*, unsigned int)+0x10>

08017a64 <Ssd1306::InitMembers()>:
 8017a64:	7c03      	ldrb	r3, [r0, #16]
 8017a66:	b14b      	cbz	r3, 8017a7c <Ssd1306::InitMembers()+0x18>
 8017a68:	3b01      	subs	r3, #1
 8017a6a:	2b01      	cmp	r3, #1
 8017a6c:	d909      	bls.n	8017a82 <Ssd1306::InitMembers()+0x1e>
 8017a6e:	2308      	movs	r3, #8
 8017a70:	2204      	movs	r2, #4
 8017a72:	2115      	movs	r1, #21
 8017a74:	7101      	strb	r1, [r0, #4]
 8017a76:	7143      	strb	r3, [r0, #5]
 8017a78:	6142      	str	r2, [r0, #20]
 8017a7a:	4770      	bx	lr
 8017a7c:	2308      	movs	r3, #8
 8017a7e:	461a      	mov	r2, r3
 8017a80:	e7f7      	b.n	8017a72 <Ssd1306::InitMembers()+0xe>
 8017a82:	2304      	movs	r3, #4
 8017a84:	e7fb      	b.n	8017a7e <Ssd1306::InitMembers()+0x1a>
	...

08017a88 <Ssd1306::Ssd1306(TOledPanel)>:
 8017a88:	4a08      	ldr	r2, [pc, #32]	; (8017aac <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8017a8a:	6002      	str	r2, [r0, #0]
 8017a8c:	227f      	movs	r2, #127	; 0x7f
 8017a8e:	b508      	push	{r3, lr}
 8017a90:	80c2      	strh	r2, [r0, #6]
 8017a92:	223c      	movs	r2, #60	; 0x3c
 8017a94:	7202      	strb	r2, [r0, #8]
 8017a96:	4a06      	ldr	r2, [pc, #24]	; (8017ab0 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8017a98:	60c2      	str	r2, [r0, #12]
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	7442      	strb	r2, [r0, #17]
 8017a9e:	4a05      	ldr	r2, [pc, #20]	; (8017ab4 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8017aa0:	7401      	strb	r1, [r0, #16]
 8017aa2:	6010      	str	r0, [r2, #0]
 8017aa4:	f7ff ffde 	bl	8017a64 <Ssd1306::InitMembers()>
 8017aa8:	bd08      	pop	{r3, pc}
 8017aaa:	bf00      	nop
 8017aac:	0801dcd0 	stmdaeq	r1, {r4, r6, r7, sl, fp, ip, lr, pc}
 8017ab0:	00061a80 	andeq	r1, r6, r0, lsl #21
 8017ab4:	2000fd3c 	andcs	pc, r0, ip, lsr sp	; <UNPREDICTABLE>

08017ab8 <Ssd1306::SendCommand(unsigned char)>:
 8017ab8:	b507      	push	{r0, r1, r2, lr}
 8017aba:	2300      	movs	r3, #0
 8017abc:	3008      	adds	r0, #8
 8017abe:	f88d 3004 	strb.w	r3, [sp, #4]
 8017ac2:	f88d 1005 	strb.w	r1, [sp, #5]
 8017ac6:	f7ff f8ab 	bl	8016c20 <HAL_I2C::Setup()>
 8017aca:	2102      	movs	r1, #2
 8017acc:	a801      	add	r0, sp, #4
 8017ace:	f002 f883 	bl	8019bd8 <gd32_i2c_write>
 8017ad2:	b003      	add	sp, #12
 8017ad4:	f85d fb04 	ldr.w	pc, [sp], #4

08017ad8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8017ad8:	2914      	cmp	r1, #20
 8017ada:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017adc:	4615      	mov	r5, r2
 8017ade:	d81d      	bhi.n	8017b1c <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8017ae0:	7943      	ldrb	r3, [r0, #5]
 8017ae2:	4293      	cmp	r3, r2
 8017ae4:	d91a      	bls.n	8017b1c <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8017ae6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017aea:	7c43      	ldrb	r3, [r0, #17]
 8017aec:	004c      	lsls	r4, r1, #1
 8017aee:	b2e4      	uxtb	r4, r4
 8017af0:	b10b      	cbz	r3, 8017af6 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x1e>
 8017af2:	3404      	adds	r4, #4
 8017af4:	b2e4      	uxtb	r4, r4
 8017af6:	f004 010e 	and.w	r1, r4, #14
 8017afa:	9001      	str	r0, [sp, #4]
 8017afc:	f7ff ffdc 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017b00:	0921      	lsrs	r1, r4, #4
 8017b02:	9801      	ldr	r0, [sp, #4]
 8017b04:	f041 0110 	orr.w	r1, r1, #16
 8017b08:	f7ff ffd6 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017b0c:	9801      	ldr	r0, [sp, #4]
 8017b0e:	f045 01b0 	orr.w	r1, r5, #176	; 0xb0
 8017b12:	b003      	add	sp, #12
 8017b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b18:	f7ff bfce 	b.w	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017b1c:	b003      	add	sp, #12
 8017b1e:	bd30      	pop	{r4, r5, pc}

08017b20 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8017b20:	b5e0      	push	{r5, r6, r7, lr}
 8017b22:	461f      	mov	r7, r3
 8017b24:	7943      	ldrb	r3, [r0, #5]
 8017b26:	428b      	cmp	r3, r1
 8017b28:	4605      	mov	r5, r0
 8017b2a:	4616      	mov	r6, r2
 8017b2c:	d30b      	bcc.n	8017b46 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x26>
 8017b2e:	1e4a      	subs	r2, r1, #1
 8017b30:	b2d2      	uxtb	r2, r2
 8017b32:	2100      	movs	r1, #0
 8017b34:	f7ff ffd0 	bl	8017ad8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8017b38:	463a      	mov	r2, r7
 8017b3a:	4631      	mov	r1, r6
 8017b3c:	4628      	mov	r0, r5
 8017b3e:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8017b42:	f7ff bf7e 	b.w	8017a42 <Ssd1306::Text(char const*, unsigned int)>
 8017b46:	bde0      	pop	{r5, r6, r7, pc}

08017b48 <Ssd1306::ClearLine(unsigned char)>:
 8017b48:	b513      	push	{r0, r1, r4, lr}
 8017b4a:	7943      	ldrb	r3, [r0, #5]
 8017b4c:	428b      	cmp	r3, r1
 8017b4e:	4604      	mov	r4, r0
 8017b50:	d315      	bcc.n	8017b7e <Ssd1306::ClearLine(unsigned char)+0x36>
 8017b52:	1e4a      	subs	r2, r1, #1
 8017b54:	b2d2      	uxtb	r2, r2
 8017b56:	2100      	movs	r1, #0
 8017b58:	9201      	str	r2, [sp, #4]
 8017b5a:	f7ff ffbd 	bl	8017ad8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8017b5e:	f104 0008 	add.w	r0, r4, #8
 8017b62:	f7ff f85d 	bl	8016c20 <HAL_I2C::Setup()>
 8017b66:	2181      	movs	r1, #129	; 0x81
 8017b68:	4806      	ldr	r0, [pc, #24]	; (8017b84 <Ssd1306::ClearLine(unsigned char)+0x3c>)
 8017b6a:	f002 f835 	bl	8019bd8 <gd32_i2c_write>
 8017b6e:	9a01      	ldr	r2, [sp, #4]
 8017b70:	2100      	movs	r1, #0
 8017b72:	4620      	mov	r0, r4
 8017b74:	b002      	add	sp, #8
 8017b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b7a:	f7ff bfad 	b.w	8017ad8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8017b7e:	b002      	add	sp, #8
 8017b80:	bd10      	pop	{r4, pc}
 8017b82:	bf00      	nop
 8017b84:	2000fcb4 			; <UNDEFINED> instruction: 0x2000fcb4

08017b88 <Ssd1306::SetSleep(bool)>:
 8017b88:	b111      	cbz	r1, 8017b90 <Ssd1306::SetSleep(bool)+0x8>
 8017b8a:	21ae      	movs	r1, #174	; 0xae
 8017b8c:	f7ff bf94 	b.w	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017b90:	21af      	movs	r1, #175	; 0xaf
 8017b92:	e7fb      	b.n	8017b8c <Ssd1306::SetSleep(bool)+0x4>

08017b94 <Ssd1306::SetContrast(unsigned char)>:
 8017b94:	b538      	push	{r3, r4, r5, lr}
 8017b96:	4604      	mov	r4, r0
 8017b98:	460d      	mov	r5, r1
 8017b9a:	7181      	strb	r1, [r0, #6]
 8017b9c:	2181      	movs	r1, #129	; 0x81
 8017b9e:	f7ff ff8b 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017ba2:	4629      	mov	r1, r5
 8017ba4:	4620      	mov	r0, r4
 8017ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017baa:	f7ff bf85 	b.w	8017ab8 <Ssd1306::SendCommand(unsigned char)>

08017bae <Ssd1306::SetFlipVertically(bool)>:
 8017bae:	b510      	push	{r4, lr}
 8017bb0:	4604      	mov	r4, r0
 8017bb2:	71c1      	strb	r1, [r0, #7]
 8017bb4:	b141      	cbz	r1, 8017bc8 <Ssd1306::SetFlipVertically(bool)+0x1a>
 8017bb6:	21c0      	movs	r1, #192	; 0xc0
 8017bb8:	f7ff ff7e 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017bbc:	21a0      	movs	r1, #160	; 0xa0
 8017bbe:	4620      	mov	r0, r4
 8017bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bc4:	f7ff bf78 	b.w	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017bc8:	21c8      	movs	r1, #200	; 0xc8
 8017bca:	f7ff ff75 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017bce:	21a1      	movs	r1, #161	; 0xa1
 8017bd0:	e7f5      	b.n	8017bbe <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08017bd4 <Ssd1306::CheckSH1106()>:
 8017bd4:	b530      	push	{r4, r5, lr}
 8017bd6:	2100      	movs	r1, #0
 8017bd8:	b087      	sub	sp, #28
 8017bda:	4604      	mov	r4, r0
 8017bdc:	f7ff ff6c 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017be0:	2190      	movs	r1, #144	; 0x90
 8017be2:	4620      	mov	r0, r4
 8017be4:	f7ff ff68 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017be8:	21b0      	movs	r1, #176	; 0xb0
 8017bea:	4620      	mov	r0, r4
 8017bec:	f7ff ff64 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017bf0:	4b22      	ldr	r3, [pc, #136]	; (8017c7c <Ssd1306::CheckSH1106()+0xa8>)
 8017bf2:	f104 0508 	add.w	r5, r4, #8
 8017bf6:	6818      	ldr	r0, [r3, #0]
 8017bf8:	9002      	str	r0, [sp, #8]
 8017bfa:	791b      	ldrb	r3, [r3, #4]
 8017bfc:	f88d 300c 	strb.w	r3, [sp, #12]
 8017c00:	4628      	mov	r0, r5
 8017c02:	f7ff f80d 	bl	8016c20 <HAL_I2C::Setup()>
 8017c06:	2105      	movs	r1, #5
 8017c08:	a802      	add	r0, sp, #8
 8017c0a:	f001 ffe5 	bl	8019bd8 <gd32_i2c_write>
 8017c0e:	2100      	movs	r1, #0
 8017c10:	4620      	mov	r0, r4
 8017c12:	f7ff ff51 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017c16:	2190      	movs	r1, #144	; 0x90
 8017c18:	4620      	mov	r0, r4
 8017c1a:	f7ff ff4d 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017c1e:	21b0      	movs	r1, #176	; 0xb0
 8017c20:	4620      	mov	r0, r4
 8017c22:	f7ff ff49 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017c26:	2300      	movs	r3, #0
 8017c28:	9304      	str	r3, [sp, #16]
 8017c2a:	f88d 3014 	strb.w	r3, [sp, #20]
 8017c2e:	4628      	mov	r0, r5
 8017c30:	2340      	movs	r3, #64	; 0x40
 8017c32:	f88d 3007 	strb.w	r3, [sp, #7]
 8017c36:	f7fe fff3 	bl	8016c20 <HAL_I2C::Setup()>
 8017c3a:	2101      	movs	r1, #1
 8017c3c:	f10d 0007 	add.w	r0, sp, #7
 8017c40:	f001 ffca 	bl	8019bd8 <gd32_i2c_write>
 8017c44:	4628      	mov	r0, r5
 8017c46:	f7fe ffeb 	bl	8016c20 <HAL_I2C::Setup()>
 8017c4a:	2105      	movs	r1, #5
 8017c4c:	a804      	add	r0, sp, #16
 8017c4e:	f002 f829 	bl	8019ca4 <gd32_i2c_read>
 8017c52:	aa02      	add	r2, sp, #8
 8017c54:	a904      	add	r1, sp, #16
 8017c56:	2004      	movs	r0, #4
 8017c58:	3801      	subs	r0, #1
 8017c5a:	d201      	bcs.n	8017c60 <Ssd1306::CheckSH1106()+0x8c>
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	e006      	b.n	8017c6e <Ssd1306::CheckSH1106()+0x9a>
 8017c60:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8017c64:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8017c68:	42ab      	cmp	r3, r5
 8017c6a:	d0f5      	beq.n	8017c58 <Ssd1306::CheckSH1106()+0x84>
 8017c6c:	1b5b      	subs	r3, r3, r5
 8017c6e:	fab3 f383 	clz	r3, r3
 8017c72:	095b      	lsrs	r3, r3, #5
 8017c74:	7463      	strb	r3, [r4, #17]
 8017c76:	b007      	add	sp, #28
 8017c78:	bd30      	pop	{r4, r5, pc}
 8017c7a:	bf00      	nop
 8017c7c:	0801d9f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, fp, ip, lr, pc}

08017c80 <Ssd1306::Cls()>:
 8017c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c84:	7c45      	ldrb	r5, [r0, #17]
 8017c86:	00ad      	lsls	r5, r5, #2
 8017c88:	b2ed      	uxtb	r5, r5
 8017c8a:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8017c8e:	4604      	mov	r4, r0
 8017c90:	2600      	movs	r6, #0
 8017c92:	f045 0810 	orr.w	r8, r5, #16
 8017c96:	b2ff      	uxtb	r7, r7
 8017c98:	6963      	ldr	r3, [r4, #20]
 8017c9a:	42b3      	cmp	r3, r6
 8017c9c:	4629      	mov	r1, r5
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	d80b      	bhi.n	8017cba <Ssd1306::Cls()+0x3a>
 8017ca2:	f7ff ff09 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017ca6:	4641      	mov	r1, r8
 8017ca8:	4620      	mov	r0, r4
 8017caa:	f7ff ff05 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017cae:	4620      	mov	r0, r4
 8017cb0:	21b0      	movs	r1, #176	; 0xb0
 8017cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb6:	f7ff beff 	b.w	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017cba:	f7ff fefd 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017cbe:	4641      	mov	r1, r8
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	f7ff fef9 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017cc6:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8017cca:	b2c9      	uxtb	r1, r1
 8017ccc:	4620      	mov	r0, r4
 8017cce:	f7ff fef3 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017cd2:	7c23      	ldrb	r3, [r4, #16]
 8017cd4:	b123      	cbz	r3, 8017ce0 <Ssd1306::Cls()+0x60>
 8017cd6:	3b01      	subs	r3, #1
 8017cd8:	2b01      	cmp	r3, #1
 8017cda:	d901      	bls.n	8017ce0 <Ssd1306::Cls()+0x60>
 8017cdc:	3601      	adds	r6, #1
 8017cde:	e7db      	b.n	8017c98 <Ssd1306::Cls()+0x18>
 8017ce0:	f104 0008 	add.w	r0, r4, #8
 8017ce4:	f7fe ff9c 	bl	8016c20 <HAL_I2C::Setup()>
 8017ce8:	4639      	mov	r1, r7
 8017cea:	4802      	ldr	r0, [pc, #8]	; (8017cf4 <Ssd1306::Cls()+0x74>)
 8017cec:	f001 ff74 	bl	8019bd8 <gd32_i2c_write>
 8017cf0:	e7f4      	b.n	8017cdc <Ssd1306::Cls()+0x5c>
 8017cf2:	bf00      	nop
 8017cf4:	2000fcb4 			; <UNDEFINED> instruction: 0x2000fcb4

08017cf8 <Ssd1306::Start()>:
 8017cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017cfa:	7a04      	ldrb	r4, [r0, #8]
 8017cfc:	68c6      	ldr	r6, [r0, #12]
 8017cfe:	4605      	mov	r5, r0
 8017d00:	4620      	mov	r0, r4
 8017d02:	f001 ff63 	bl	8019bcc <gd32_i2c_set_address>
 8017d06:	4630      	mov	r0, r6
 8017d08:	f001 ff58 	bl	8019bbc <gd32_i2c_set_baudrate>
 8017d0c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017d10:	2b07      	cmp	r3, #7
 8017d12:	d902      	bls.n	8017d1a <Ssd1306::Start()+0x22>
 8017d14:	3c50      	subs	r4, #80	; 0x50
 8017d16:	2c0f      	cmp	r4, #15
 8017d18:	d80f      	bhi.n	8017d3a <Ssd1306::Start()+0x42>
 8017d1a:	2101      	movs	r1, #1
 8017d1c:	f10d 0007 	add.w	r0, sp, #7
 8017d20:	f001 ffc0 	bl	8019ca4 <gd32_i2c_read>
 8017d24:	fab0 f480 	clz	r4, r0
 8017d28:	0964      	lsrs	r4, r4, #5
 8017d2a:	b35c      	cbz	r4, 8017d84 <Ssd1306::Start()+0x8c>
 8017d2c:	7c2e      	ldrb	r6, [r5, #16]
 8017d2e:	b14e      	cbz	r6, 8017d44 <Ssd1306::Start()+0x4c>
 8017d30:	3e01      	subs	r6, #1
 8017d32:	2e01      	cmp	r6, #1
 8017d34:	d929      	bls.n	8017d8a <Ssd1306::Start()+0x92>
 8017d36:	2400      	movs	r4, #0
 8017d38:	e024      	b.n	8017d84 <Ssd1306::Start()+0x8c>
 8017d3a:	2100      	movs	r1, #0
 8017d3c:	4608      	mov	r0, r1
 8017d3e:	f001 ff4b 	bl	8019bd8 <gd32_i2c_write>
 8017d42:	e7ef      	b.n	8017d24 <Ssd1306::Start()+0x2c>
 8017d44:	4f16      	ldr	r7, [pc, #88]	; (8017da0 <Ssd1306::Start()+0xa8>)
 8017d46:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017d4a:	4628      	mov	r0, r5
 8017d4c:	3601      	adds	r6, #1
 8017d4e:	f7ff feb3 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017d52:	2e18      	cmp	r6, #24
 8017d54:	d1f7      	bne.n	8017d46 <Ssd1306::Start()+0x4e>
 8017d56:	4a13      	ldr	r2, [pc, #76]	; (8017da4 <Ssd1306::Start()+0xac>)
 8017d58:	2300      	movs	r3, #0
 8017d5a:	4611      	mov	r1, r2
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	3301      	adds	r3, #1
 8017d60:	2b86      	cmp	r3, #134	; 0x86
 8017d62:	f802 0b01 	strb.w	r0, [r2], #1
 8017d66:	d1fa      	bne.n	8017d5e <Ssd1306::Start()+0x66>
 8017d68:	2340      	movs	r3, #64	; 0x40
 8017d6a:	700b      	strb	r3, [r1, #0]
 8017d6c:	4628      	mov	r0, r5
 8017d6e:	f7ff ff31 	bl	8017bd4 <Ssd1306::CheckSH1106()>
 8017d72:	4628      	mov	r0, r5
 8017d74:	f7ff ff84 	bl	8017c80 <Ssd1306::Cls()>
 8017d78:	21af      	movs	r1, #175	; 0xaf
 8017d7a:	4628      	mov	r0, r5
 8017d7c:	f7ff fe9c 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017d80:	2301      	movs	r3, #1
 8017d82:	71eb      	strb	r3, [r5, #7]
 8017d84:	4620      	mov	r0, r4
 8017d86:	b003      	add	sp, #12
 8017d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d8a:	4f07      	ldr	r7, [pc, #28]	; (8017da8 <Ssd1306::Start()+0xb0>)
 8017d8c:	2600      	movs	r6, #0
 8017d8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017d92:	4628      	mov	r0, r5
 8017d94:	3601      	adds	r6, #1
 8017d96:	f7ff fe8f 	bl	8017ab8 <Ssd1306::SendCommand(unsigned char)>
 8017d9a:	2e18      	cmp	r6, #24
 8017d9c:	d1f7      	bne.n	8017d8e <Ssd1306::Start()+0x96>
 8017d9e:	e7da      	b.n	8017d56 <Ssd1306::Start()+0x5e>
 8017da0:	0801dcb0 	stmdaeq	r1, {r4, r5, r7, sl, fp, ip, lr, pc}
 8017da4:	2000fcb4 			; <UNDEFINED> instruction: 0x2000fcb4
 8017da8:	0801dc98 	stmdaeq	r1, {r3, r4, r7, sl, fp, ip, lr, pc}

08017dac <console_putc>:
 8017dac:	f000 bbba 	b.w	8018524 <uart0_putc>

08017db0 <console_puts>:
 8017db0:	f000 bbd2 	b.w	8018558 <uart0_puts>

08017db4 <console_set_fg_color>:
 8017db4:	2807      	cmp	r0, #7
 8017db6:	d810      	bhi.n	8017dda <console_set_fg_color+0x26>
 8017db8:	e8df f000 	tbb	[pc, r0]
 8017dbc:	0b090704 	bleq	82599d4 <__exidx_end+0x23bbd0>
 8017dc0:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8017d8c <Ssd1306::Start()+0x94>
 8017dc4:	4806      	ldr	r0, [pc, #24]	; (8017de0 <console_set_fg_color+0x2c>)
 8017dc6:	f000 bbc7 	b.w	8018558 <uart0_puts>
 8017dca:	4806      	ldr	r0, [pc, #24]	; (8017de4 <console_set_fg_color+0x30>)
 8017dcc:	e7fb      	b.n	8017dc6 <console_set_fg_color+0x12>
 8017dce:	4806      	ldr	r0, [pc, #24]	; (8017de8 <console_set_fg_color+0x34>)
 8017dd0:	e7f9      	b.n	8017dc6 <console_set_fg_color+0x12>
 8017dd2:	4806      	ldr	r0, [pc, #24]	; (8017dec <console_set_fg_color+0x38>)
 8017dd4:	e7f7      	b.n	8017dc6 <console_set_fg_color+0x12>
 8017dd6:	4806      	ldr	r0, [pc, #24]	; (8017df0 <console_set_fg_color+0x3c>)
 8017dd8:	e7f5      	b.n	8017dc6 <console_set_fg_color+0x12>
 8017dda:	4806      	ldr	r0, [pc, #24]	; (8017df4 <console_set_fg_color+0x40>)
 8017ddc:	e7f3      	b.n	8017dc6 <console_set_fg_color+0x12>
 8017dde:	bf00      	nop
 8017de0:	0801dd0e 	stmdaeq	r1, {r1, r2, r3, r8, sl, fp, ip, lr, pc}
 8017de4:	0801dd14 	stmdaeq	r1, {r2, r4, r8, sl, fp, ip, lr, pc}
 8017de8:	0801dd1a 	stmdaeq	r1, {r1, r3, r4, r8, sl, fp, ip, lr, pc}
 8017dec:	0801dd20 	stmdaeq	r1, {r5, r8, sl, fp, ip, lr, pc}
 8017df0:	0801a83e 	stmdaeq	r1, {r1, r2, r3, r4, r5, fp, sp, pc}
 8017df4:	0801dd26 	stmdaeq	r1, {r1, r2, r5, r8, sl, fp, ip, lr, pc}

08017df8 <console_error>:
 8017df8:	b510      	push	{r4, lr}
 8017dfa:	4604      	mov	r4, r0
 8017dfc:	4805      	ldr	r0, [pc, #20]	; (8017e14 <console_error+0x1c>)
 8017dfe:	f000 fbab 	bl	8018558 <uart0_puts>
 8017e02:	4620      	mov	r0, r4
 8017e04:	f000 fba8 	bl	8018558 <uart0_puts>
 8017e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e0c:	4802      	ldr	r0, [pc, #8]	; (8017e18 <console_error+0x20>)
 8017e0e:	f000 bba3 	b.w	8018558 <uart0_puts>
 8017e12:	bf00      	nop
 8017e14:	0801dd14 	stmdaeq	r1, {r2, r4, r8, sl, fp, ip, lr, pc}
 8017e18:	0801a83e 	stmdaeq	r1, {r1, r2, r3, r4, r5, fp, sp, pc}

08017e1c <console_status>:
 8017e1c:	b510      	push	{r4, lr}
 8017e1e:	b280      	uxth	r0, r0
 8017e20:	460c      	mov	r4, r1
 8017e22:	f7ff ffc7 	bl	8017db4 <console_set_fg_color>
 8017e26:	4807      	ldr	r0, [pc, #28]	; (8017e44 <console_status+0x28>)
 8017e28:	f000 fb96 	bl	8018558 <uart0_puts>
 8017e2c:	4620      	mov	r0, r4
 8017e2e:	f000 fb93 	bl	8018558 <uart0_puts>
 8017e32:	200a      	movs	r0, #10
 8017e34:	f000 fb76 	bl	8018524 <uart0_putc>
 8017e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e3c:	4802      	ldr	r0, [pc, #8]	; (8017e48 <console_status+0x2c>)
 8017e3e:	f000 bb8b 	b.w	8018558 <uart0_puts>
 8017e42:	bf00      	nop
 8017e44:	0801dd08 	stmdaeq	r1, {r3, r8, sl, fp, ip, lr, pc}
 8017e48:	0801a83e 	stmdaeq	r1, {r1, r2, r3, r4, r5, fp, sp, pc}

08017e4c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8017e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e50:	4d15      	ldr	r5, [pc, #84]	; (8017ea8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8017e52:	461e      	mov	r6, r3
 8017e54:	4b15      	ldr	r3, [pc, #84]	; (8017eac <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8017e56:	b086      	sub	sp, #24
 8017e58:	6018      	str	r0, [r3, #0]
 8017e5a:	4604      	mov	r4, r0
 8017e5c:	4617      	mov	r7, r2
 8017e5e:	f105 0803 	add.w	r8, r5, #3
 8017e62:	2203      	movs	r2, #3
 8017e64:	4628      	mov	r0, r5
 8017e66:	f000 fa22 	bl	80182ae <memmove>
 8017e6a:	4639      	mov	r1, r7
 8017e6c:	220b      	movs	r2, #11
 8017e6e:	4640      	mov	r0, r8
 8017e70:	f000 fa1d 	bl	80182ae <memmove>
 8017e74:	f105 030e 	add.w	r3, r5, #14
 8017e78:	4631      	mov	r1, r6
 8017e7a:	2208      	movs	r2, #8
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f000 fa16 	bl	80182ae <memmove>
 8017e82:	2308      	movs	r3, #8
 8017e84:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8017e88:	230b      	movs	r3, #11
 8017e8a:	9302      	str	r3, [sp, #8]
 8017e8c:	4b08      	ldr	r3, [pc, #32]	; (8017eb0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8017e8e:	9005      	str	r0, [sp, #20]
 8017e90:	e9cd 5300 	strd	r5, r3, [sp]
 8017e94:	4a07      	ldr	r2, [pc, #28]	; (8017eb4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8017e96:	4808      	ldr	r0, [pc, #32]	; (8017eb8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8017e98:	2303      	movs	r3, #3
 8017e9a:	213f      	movs	r1, #63	; 0x3f
 8017e9c:	f7f2 fb30 	bl	800a500 <snprintf>
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	b006      	add	sp, #24
 8017ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ea8:	2000fd40 	andcs	pc, r0, r0, asr #26
 8017eac:	2000fd98 	mulcs	r0, r8, sp
 8017eb0:	0801b146 	stmdaeq	r1, {r1, r2, r6, r8, ip, sp, pc}
 8017eb4:	0801dd2c 	stmdaeq	r1, {r2, r3, r5, r8, sl, fp, ip, lr, pc}
 8017eb8:	2000fd56 	andcs	pc, r0, r6, asr sp	; <UNPREDICTABLE>

08017ebc <FirmwareVersion::Print(char const*)>:
 8017ebc:	b510      	push	{r4, lr}
 8017ebe:	4805      	ldr	r0, [pc, #20]	; (8017ed4 <FirmwareVersion::Print(char const*)+0x18>)
 8017ec0:	460c      	mov	r4, r1
 8017ec2:	f000 fa2c 	bl	801831e <puts>
 8017ec6:	b124      	cbz	r4, 8017ed2 <FirmwareVersion::Print(char const*)+0x16>
 8017ec8:	4620      	mov	r0, r4
 8017eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ece:	f000 ba26 	b.w	801831e <puts>
 8017ed2:	bd10      	pop	{r4, pc}
 8017ed4:	2000fd56 	andcs	pc, r0, r6, asr sp	; <UNPREDICTABLE>

08017ed8 <LedBlink::LedBlink()>:
 8017ed8:	b538      	push	{r3, r4, r5, lr}
 8017eda:	2500      	movs	r5, #0
 8017edc:	2305      	movs	r3, #5
 8017ede:	e9c0 5300 	strd	r5, r3, [r0]
 8017ee2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8017ee6:	e9c0 3503 	strd	r3, r5, [r0, #12]
 8017eea:	4b0d      	ldr	r3, [pc, #52]	; (8017f20 <LedBlink::LedBlink()+0x48>)
 8017eec:	6085      	str	r5, [r0, #8]
 8017eee:	4604      	mov	r4, r0
 8017ef0:	6145      	str	r5, [r0, #20]
 8017ef2:	6018      	str	r0, [r3, #0]
 8017ef4:	f640 4002 	movw	r0, #3074	; 0xc02
 8017ef8:	f001 f966 	bl	80191c8 <rcu_periph_clock_enable>
 8017efc:	2301      	movs	r3, #1
 8017efe:	462a      	mov	r2, r5
 8017f00:	4619      	mov	r1, r3
 8017f02:	4808      	ldr	r0, [pc, #32]	; (8017f24 <LedBlink::LedBlink()+0x4c>)
 8017f04:	f001 f8e4 	bl	80190d0 <gpio_mode_set>
 8017f08:	4806      	ldr	r0, [pc, #24]	; (8017f24 <LedBlink::LedBlink()+0x4c>)
 8017f0a:	2301      	movs	r3, #1
 8017f0c:	2202      	movs	r2, #2
 8017f0e:	4629      	mov	r1, r5
 8017f10:	f001 f8fe 	bl	8019110 <gpio_output_options_set>
 8017f14:	4b04      	ldr	r3, [pc, #16]	; (8017f28 <LedBlink::LedBlink()+0x50>)
 8017f16:	2201      	movs	r2, #1
 8017f18:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	bd38      	pop	{r3, r4, r5, pc}
 8017f20:	2000fd9c 	mulcs	r0, ip, sp
 8017f24:	40020800 	andmi	r0, r2, r0, lsl #16
 8017f28:	40020000 	andmi	r0, r2, r0

08017f2c <LedBlink::SetMode(ledblink::Mode)>:
 8017f2c:	6843      	ldr	r3, [r0, #4]
 8017f2e:	428b      	cmp	r3, r1
 8017f30:	d02b      	beq.n	8017f8a <LedBlink::SetMode(ledblink::Mode)+0x5e>
 8017f32:	6041      	str	r1, [r0, #4]
 8017f34:	2904      	cmp	r1, #4
 8017f36:	d820      	bhi.n	8017f7a <LedBlink::SetMode(ledblink::Mode)+0x4e>
 8017f38:	e8df f001 	tbb	[pc, r1]
 8017f3c:	1610031f 			; <UNDEFINED> instruction: 0x1610031f
 8017f40:	23ff001b 	mvnscs	r0, #27
 8017f44:	6003      	str	r3, [r0, #0]
 8017f46:	2300      	movs	r3, #0
 8017f48:	60c3      	str	r3, [r0, #12]
 8017f4a:	4b10      	ldr	r3, [pc, #64]	; (8017f8c <LedBlink::SetMode(ledblink::Mode)+0x60>)
 8017f4c:	2201      	movs	r2, #1
 8017f4e:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8017f52:	6880      	ldr	r0, [r0, #8]
 8017f54:	b1c8      	cbz	r0, 8017f8a <LedBlink::SetMode(ledblink::Mode)+0x5e>
 8017f56:	6803      	ldr	r3, [r0, #0]
 8017f58:	689b      	ldr	r3, [r3, #8]
 8017f5a:	4718      	bx	r3
 8017f5c:	2301      	movs	r3, #1
 8017f5e:	6003      	str	r3, [r0, #0]
 8017f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017f64:	60c3      	str	r3, [r0, #12]
 8017f66:	e7f4      	b.n	8017f52 <LedBlink::SetMode(ledblink::Mode)+0x26>
 8017f68:	2303      	movs	r3, #3
 8017f6a:	6003      	str	r3, [r0, #0]
 8017f6c:	f240 134d 	movw	r3, #333	; 0x14d
 8017f70:	e7f8      	b.n	8017f64 <LedBlink::SetMode(ledblink::Mode)+0x38>
 8017f72:	2305      	movs	r3, #5
 8017f74:	6003      	str	r3, [r0, #0]
 8017f76:	23c8      	movs	r3, #200	; 0xc8
 8017f78:	e7f4      	b.n	8017f64 <LedBlink::SetMode(ledblink::Mode)+0x38>
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	6003      	str	r3, [r0, #0]
 8017f7e:	60c3      	str	r3, [r0, #12]
 8017f80:	4b02      	ldr	r3, [pc, #8]	; (8017f8c <LedBlink::SetMode(ledblink::Mode)+0x60>)
 8017f82:	2201      	movs	r2, #1
 8017f84:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 8017f88:	e7e3      	b.n	8017f52 <LedBlink::SetMode(ledblink::Mode)+0x26>
 8017f8a:	4770      	bx	lr
 8017f8c:	40020000 	andmi	r0, r2, r0

08017f90 <Hardware::Hardware()>:
 8017f90:	b530      	push	{r4, r5, lr}
 8017f92:	4b31      	ldr	r3, [pc, #196]	; (8018058 <Hardware::Hardware()+0xc8>)
 8017f94:	2400      	movs	r4, #0
 8017f96:	b091      	sub	sp, #68	; 0x44
 8017f98:	7004      	strb	r4, [r0, #0]
 8017f9a:	6018      	str	r0, [r3, #0]
 8017f9c:	4605      	mov	r5, r0
 8017f9e:	f7f0 fad1 	bl	8008544 <console_init>
 8017fa2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8017fa6:	f001 f93b 	bl	8019220 <rcu_timer_clock_prescaler_config>
 8017faa:	f000 fae5 	bl	8018578 <systick_config>
 8017fae:	f002 f909 	bl	801a1c4 <udelay_init()>
 8017fb2:	f002 f8e7 	bl	801a184 <micros_init()>
 8017fb6:	f241 001c 	movw	r0, #4124	; 0x101c
 8017fba:	f001 f905 	bl	80191c8 <rcu_periph_clock_enable>
 8017fbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017fc2:	f001 f8ed 	bl	80191a0 <pmu_backup_ldo_config>
 8017fc6:	f640 4012 	movw	r0, #3090	; 0xc12
 8017fca:	f001 f8fd 	bl	80191c8 <rcu_periph_clock_enable>
 8017fce:	f001 f8f3 	bl	80191b8 <pmu_backup_write_enable>
 8017fd2:	4621      	mov	r1, r4
 8017fd4:	2001      	movs	r0, #1
 8017fd6:	f001 fd35 	bl	8019a44 <bkp_data_write(bkp_data_register_enum, unsigned short)>
 8017fda:	4a20      	ldr	r2, [pc, #128]	; (801805c <Hardware::Hardware()+0xcc>)
 8017fdc:	4b20      	ldr	r3, [pc, #128]	; (8018060 <Hardware::Hardware()+0xd0>)
 8017fde:	1a9b      	subs	r3, r3, r2
 8017fe0:	3b01      	subs	r3, #1
 8017fe2:	d232      	bcs.n	801804a <Hardware::Hardware()+0xba>
 8017fe4:	4b1f      	ldr	r3, [pc, #124]	; (8018064 <Hardware::Hardware()+0xd4>)
 8017fe6:	4c20      	ldr	r4, [pc, #128]	; (8018068 <Hardware::Hardware()+0xd8>)
 8017fe8:	2200      	movs	r2, #0
 8017fea:	1ae4      	subs	r4, r4, r3
 8017fec:	3c01      	subs	r4, #1
 8017fee:	d22f      	bcs.n	8018050 <Hardware::Hardware()+0xc0>
 8017ff0:	f241 0004 	movw	r0, #4100	; 0x1004
 8017ff4:	f001 f8e8 	bl	80191c8 <rcu_periph_clock_enable>
 8017ff8:	481c      	ldr	r0, [pc, #112]	; (801806c <Hardware::Hardware()+0xdc>)
 8017ffa:	f001 f9a1 	bl	8019340 <timer_deinit>
 8017ffe:	a903      	add	r1, sp, #12
 8018000:	23c7      	movs	r3, #199	; 0xc7
 8018002:	481a      	ldr	r0, [pc, #104]	; (801806c <Hardware::Hardware()+0xdc>)
 8018004:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018008:	9405      	str	r4, [sp, #20]
 801800a:	f001 fa3f 	bl	801948c <timer_init>
 801800e:	4817      	ldr	r0, [pc, #92]	; (801806c <Hardware::Hardware()+0xdc>)
 8018010:	f001 fa7a 	bl	8019508 <timer_enable>
 8018014:	f001 fd28 	bl	8019a68 <gd32_adc_init()>
 8018018:	2219      	movs	r2, #25
 801801a:	230b      	movs	r3, #11
 801801c:	2400      	movs	r4, #0
 801801e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018022:	a807      	add	r0, sp, #28
 8018024:	237a      	movs	r3, #122	; 0x7a
 8018026:	930c      	str	r3, [sp, #48]	; 0x30
 8018028:	e9cd 4408 	strd	r4, r4, [sp, #32]
 801802c:	9407      	str	r4, [sp, #28]
 801802e:	940f      	str	r4, [sp, #60]	; 0x3c
 8018030:	f000 f9ce 	bl	80183d0 <mktime>
 8018034:	4621      	mov	r1, r4
 8018036:	e9cd 0401 	strd	r0, r4, [sp, #4]
 801803a:	a801      	add	r0, sp, #4
 801803c:	f000 fa3e 	bl	80184bc <settimeofday>
 8018040:	f001 fd72 	bl	8019b28 <gd32_i2c_begin>
 8018044:	4628      	mov	r0, r5
 8018046:	b011      	add	sp, #68	; 0x44
 8018048:	bd30      	pop	{r4, r5, pc}
 801804a:	f802 4b01 	strb.w	r4, [r2], #1
 801804e:	e7c7      	b.n	8017fe0 <Hardware::Hardware()+0x50>
 8018050:	f803 2b01 	strb.w	r2, [r3], #1
 8018054:	e7ca      	b.n	8017fec <Hardware::Hardware()+0x5c>
 8018056:	bf00      	nop
 8018058:	2000fda0 	andcs	pc, r0, r0, lsr #27
 801805c:	10000000 	andne	r0, r0, r0
 8018060:	100014b8 			; <UNDEFINED> instruction: 0x100014b8
 8018064:	20030000 	andcs	r0, r3, r0
 8018068:	20048d08 	andcs	r8, r4, r8, lsl #26
 801806c:	40001000 	andmi	r1, r0, r0

08018070 <Hardware::GetUuid(unsigned char*)>:
 8018070:	4a0c      	ldr	r2, [pc, #48]	; (80180a4 <Hardware::GetUuid(unsigned char*)+0x34>)
 8018072:	b084      	sub	sp, #16
 8018074:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	; 0xa10
 8018078:	9300      	str	r3, [sp, #0]
 801807a:	f8d2 0a14 	ldr.w	r0, [r2, #2580]	; 0xa14
 801807e:	9001      	str	r0, [sp, #4]
 8018080:	f8d2 2a18 	ldr.w	r2, [r2, #2584]	; 0xa18
 8018084:	9202      	str	r2, [sp, #8]
 8018086:	4403      	add	r3, r0
 8018088:	4413      	add	r3, r2
 801808a:	9303      	str	r3, [sp, #12]
 801808c:	466a      	mov	r2, sp
 801808e:	1e4b      	subs	r3, r1, #1
 8018090:	310f      	adds	r1, #15
 8018092:	428b      	cmp	r3, r1
 8018094:	d101      	bne.n	801809a <Hardware::GetUuid(unsigned char*)+0x2a>
 8018096:	b004      	add	sp, #16
 8018098:	4770      	bx	lr
 801809a:	f812 0b01 	ldrb.w	r0, [r2], #1
 801809e:	f803 0f01 	strb.w	r0, [r3, #1]!
 80180a2:	e7f6      	b.n	8018092 <Hardware::GetUuid(unsigned char*)+0x22>
 80180a4:	1fff7000 	svcne	0x00ff7000

080180a8 <Hardware::SetTime(tm const*)>:
 80180a8:	2000      	movs	r0, #0
 80180aa:	4770      	bx	lr

080180ac <Hardware::Reboot()>:
 80180ac:	b508      	push	{r3, lr}
 80180ae:	2300      	movs	r3, #0
 80180b0:	7003      	strb	r3, [r0, #0]
 80180b2:	4604      	mov	r4, r0
 80180b4:	2104      	movs	r1, #4
 80180b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80180ba:	f000 ffdf 	bl	801907c <fwdgt_config>
 80180be:	4620      	mov	r0, r4
 80180c0:	f7f1 fa62 	bl	8009588 <Hardware::RebootHandler()>
 80180c4:	2102      	movs	r1, #2
 80180c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80180ca:	f000 ffd7 	bl	801907c <fwdgt_config>
 80180ce:	2801      	cmp	r0, #1
 80180d0:	bf0c      	ite	eq
 80180d2:	2301      	moveq	r3, #1
 80180d4:	2300      	movne	r3, #0
 80180d6:	7023      	strb	r3, [r4, #0]
 80180d8:	d101      	bne.n	80180de <Hardware::Reboot()+0x32>
 80180da:	f000 ffbf 	bl	801905c <fwdgt_enable>
 80180de:	4b0f      	ldr	r3, [pc, #60]	; (801811c <Hardware::Reboot()+0x70>)
 80180e0:	480f      	ldr	r0, [pc, #60]	; (8018120 <Hardware::Reboot()+0x74>)
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	490f      	ldr	r1, [pc, #60]	; (8018124 <Hardware::Reboot()+0x78>)
 80180e6:	2208      	movs	r2, #8
 80180e8:	601a      	str	r2, [r3, #0]
 80180ea:	227d      	movs	r2, #125	; 0x7d
 80180ec:	60da      	str	r2, [r3, #12]
 80180ee:	2501      	movs	r5, #1
 80180f0:	68dc      	ldr	r4, [r3, #12]
 80180f2:	b904      	cbnz	r4, 80180f6 <Hardware::Reboot()+0x4a>
 80180f4:	e7fe      	b.n	80180f4 <Hardware::Reboot()+0x48>
 80180f6:	6802      	ldr	r2, [r0, #0]
 80180f8:	695e      	ldr	r6, [r3, #20]
 80180fa:	1b92      	subs	r2, r2, r6
 80180fc:	4294      	cmp	r4, r2
 80180fe:	d8f8      	bhi.n	80180f2 <Hardware::Reboot()+0x46>
 8018100:	6802      	ldr	r2, [r0, #0]
 8018102:	615a      	str	r2, [r3, #20]
 8018104:	691a      	ldr	r2, [r3, #16]
 8018106:	2a01      	cmp	r2, #1
 8018108:	f082 0401 	eor.w	r4, r2, #1
 801810c:	611c      	str	r4, [r3, #16]
 801810e:	bf14      	ite	ne
 8018110:	f8c1 5818 	strne.w	r5, [r1, #2072]	; 0x818
 8018114:	f8c1 2828 	streq.w	r2, [r1, #2088]	; 0x828
 8018118:	e7ea      	b.n	80180f0 <Hardware::Reboot()+0x44>
 801811a:	bf00      	nop
 801811c:	2000fd9c 	mulcs	r0, ip, sp
 8018120:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 8018124:	40020000 	andmi	r0, r2, r0

08018128 <operator delete(void*)>:
 8018128:	f000 b890 	b.w	801824c <free>

0801812c <operator delete[](void*)>:
 801812c:	f000 b88e 	b.w	801824c <free>

08018130 <operator new(unsigned int)>:
 8018130:	f000 b842 	b.w	80181b8 <malloc>

08018134 <operator new[](unsigned int)>:
 8018134:	f000 b840 	b.w	80181b8 <malloc>

08018138 <inet_aton>:
 8018138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801813a:	f04f 0c0a 	mov.w	ip, #10
 801813e:	ae01      	add	r6, sp, #4
 8018140:	2500      	movs	r5, #0
 8018142:	4603      	mov	r3, r0
 8018144:	1d07      	adds	r7, r0, #4
 8018146:	2200      	movs	r2, #0
 8018148:	e007      	b.n	801815a <inet_aton+0x22>
 801814a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801814e:	2b09      	cmp	r3, #9
 8018150:	d820      	bhi.n	8018194 <inet_aton+0x5c>
 8018152:	fb0c 4202 	mla	r2, ip, r2, r4
 8018156:	3a30      	subs	r2, #48	; 0x30
 8018158:	4603      	mov	r3, r0
 801815a:	4618      	mov	r0, r3
 801815c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8018160:	2c2e      	cmp	r4, #46	; 0x2e
 8018162:	d111      	bne.n	8018188 <inet_aton+0x50>
 8018164:	3501      	adds	r5, #1
 8018166:	2d03      	cmp	r5, #3
 8018168:	f806 2b01 	strb.w	r2, [r6], #1
 801816c:	d1e9      	bne.n	8018142 <inet_aton+0xa>
 801816e:	1d1c      	adds	r4, r3, #4
 8018170:	2200      	movs	r2, #0
 8018172:	250a      	movs	r5, #10
 8018174:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8018178:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 801817c:	d10d      	bne.n	801819a <inet_aton+0x62>
 801817e:	f88d 2007 	strb.w	r2, [sp, #7]
 8018182:	b9b1      	cbnz	r1, 80181b2 <inet_aton+0x7a>
 8018184:	2001      	movs	r0, #1
 8018186:	e006      	b.n	8018196 <inet_aton+0x5e>
 8018188:	2c00      	cmp	r4, #0
 801818a:	d0eb      	beq.n	8018164 <inet_aton+0x2c>
 801818c:	2c0a      	cmp	r4, #10
 801818e:	d0e9      	beq.n	8018164 <inet_aton+0x2c>
 8018190:	42b8      	cmp	r0, r7
 8018192:	d1da      	bne.n	801814a <inet_aton+0x12>
 8018194:	2000      	movs	r0, #0
 8018196:	b003      	add	sp, #12
 8018198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801819a:	280a      	cmp	r0, #10
 801819c:	d0ef      	beq.n	801817e <inet_aton+0x46>
 801819e:	42a3      	cmp	r3, r4
 80181a0:	d0f8      	beq.n	8018194 <inet_aton+0x5c>
 80181a2:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 80181a6:	2e09      	cmp	r6, #9
 80181a8:	d8f4      	bhi.n	8018194 <inet_aton+0x5c>
 80181aa:	fb05 0202 	mla	r2, r5, r2, r0
 80181ae:	3a30      	subs	r2, #48	; 0x30
 80181b0:	e7e0      	b.n	8018174 <inet_aton+0x3c>
 80181b2:	9b01      	ldr	r3, [sp, #4]
 80181b4:	600b      	str	r3, [r1, #0]
 80181b6:	e7e5      	b.n	8018184 <inet_aton+0x4c>

080181b8 <malloc>:
 80181b8:	b538      	push	{r3, r4, r5, lr}
 80181ba:	4601      	mov	r1, r0
 80181bc:	4604      	mov	r4, r0
 80181be:	481c      	ldr	r0, [pc, #112]	; (8018230 <malloc+0x78>)
 80181c0:	f7f2 f976 	bl	800a4b0 <printf>
 80181c4:	b17c      	cbz	r4, 80181e6 <malloc+0x2e>
 80181c6:	4b1b      	ldr	r3, [pc, #108]	; (8018234 <malloc+0x7c>)
 80181c8:	6818      	ldr	r0, [r3, #0]
 80181ca:	b978      	cbnz	r0, 80181ec <malloc+0x34>
 80181cc:	4a1a      	ldr	r2, [pc, #104]	; (8018238 <malloc+0x80>)
 80181ce:	481b      	ldr	r0, [pc, #108]	; (801823c <malloc+0x84>)
 80181d0:	6811      	ldr	r1, [r2, #0]
 80181d2:	f104 031b 	add.w	r3, r4, #27
 80181d6:	f023 030f 	bic.w	r3, r3, #15
 80181da:	440b      	add	r3, r1
 80181dc:	4283      	cmp	r3, r0
 80181de:	d921      	bls.n	8018224 <malloc+0x6c>
 80181e0:	4817      	ldr	r0, [pc, #92]	; (8018240 <malloc+0x88>)
 80181e2:	f7f2 f965 	bl	800a4b0 <printf>
 80181e6:	2500      	movs	r5, #0
 80181e8:	4628      	mov	r0, r5
 80181ea:	bd38      	pop	{r3, r4, r5, pc}
 80181ec:	4284      	cmp	r4, r0
 80181ee:	d80a      	bhi.n	8018206 <malloc+0x4e>
 80181f0:	685a      	ldr	r2, [r3, #4]
 80181f2:	6899      	ldr	r1, [r3, #8]
 80181f4:	3201      	adds	r2, #1
 80181f6:	428a      	cmp	r2, r1
 80181f8:	605a      	str	r2, [r3, #4]
 80181fa:	d900      	bls.n	80181fe <malloc+0x46>
 80181fc:	609a      	str	r2, [r3, #8]
 80181fe:	68d9      	ldr	r1, [r3, #12]
 8018200:	b919      	cbnz	r1, 801820a <malloc+0x52>
 8018202:	4604      	mov	r4, r0
 8018204:	e7e2      	b.n	80181cc <malloc+0x14>
 8018206:	3310      	adds	r3, #16
 8018208:	e7de      	b.n	80181c8 <malloc+0x10>
 801820a:	688a      	ldr	r2, [r1, #8]
 801820c:	60da      	str	r2, [r3, #12]
 801820e:	4604      	mov	r4, r0
 8018210:	2300      	movs	r3, #0
 8018212:	f101 050c 	add.w	r5, r1, #12
 8018216:	608b      	str	r3, [r1, #8]
 8018218:	4622      	mov	r2, r4
 801821a:	462b      	mov	r3, r5
 801821c:	4809      	ldr	r0, [pc, #36]	; (8018244 <malloc+0x8c>)
 801821e:	f7f2 f947 	bl	800a4b0 <printf>
 8018222:	e7e1      	b.n	80181e8 <malloc+0x30>
 8018224:	6013      	str	r3, [r2, #0]
 8018226:	4b08      	ldr	r3, [pc, #32]	; (8018248 <malloc+0x90>)
 8018228:	e9c1 3400 	strd	r3, r4, [r1]
 801822c:	e7f0      	b.n	8018210 <malloc+0x58>
 801822e:	bf00      	nop
 8018230:	0801dd50 	stmdaeq	r1, {r4, r6, r8, sl, fp, ip, lr, pc}
 8018234:	20000024 	andcs	r0, r0, r4, lsr #32
 8018238:	20000020 	andcs	r0, r0, r0, lsr #32
 801823c:	1000c000 	andne	ip, r0, r0
 8018240:	0801dd5c 	stmdaeq	r1, {r2, r3, r4, r6, r8, sl, fp, ip, lr, pc}
 8018244:	0801dd78 	stmdaeq	r1, {r3, r4, r5, r6, r8, sl, fp, ip, lr, pc}
 8018248:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

0801824c <free>:
 801824c:	b538      	push	{r3, r4, r5, lr}
 801824e:	4604      	mov	r4, r0
 8018250:	b1c8      	cbz	r0, 8018286 <free+0x3a>
 8018252:	f1a0 050c 	sub.w	r5, r0, #12
 8018256:	4602      	mov	r2, r0
 8018258:	4629      	mov	r1, r5
 801825a:	480c      	ldr	r0, [pc, #48]	; (801828c <free+0x40>)
 801825c:	f7f2 f928 	bl	800a4b0 <printf>
 8018260:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8018264:	4b0a      	ldr	r3, [pc, #40]	; (8018290 <free+0x44>)
 8018266:	429a      	cmp	r2, r3
 8018268:	d10d      	bne.n	8018286 <free+0x3a>
 801826a:	4b0a      	ldr	r3, [pc, #40]	; (8018294 <free+0x48>)
 801826c:	681a      	ldr	r2, [r3, #0]
 801826e:	b152      	cbz	r2, 8018286 <free+0x3a>
 8018270:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8018274:	4291      	cmp	r1, r2
 8018276:	d107      	bne.n	8018288 <free+0x3c>
 8018278:	68da      	ldr	r2, [r3, #12]
 801827a:	f844 2c04 	str.w	r2, [r4, #-4]
 801827e:	685a      	ldr	r2, [r3, #4]
 8018280:	60dd      	str	r5, [r3, #12]
 8018282:	3a01      	subs	r2, #1
 8018284:	605a      	str	r2, [r3, #4]
 8018286:	bd38      	pop	{r3, r4, r5, pc}
 8018288:	3310      	adds	r3, #16
 801828a:	e7ef      	b.n	801826c <free+0x20>
 801828c:	0801dda3 	stmdaeq	r1, {r0, r1, r5, r7, r8, sl, fp, ip, lr, pc}
 8018290:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8018294:	20000024 	andcs	r0, r0, r4, lsr #32

08018298 <memcpy>:
 8018298:	b510      	push	{r4, lr}
 801829a:	1e43      	subs	r3, r0, #1
 801829c:	440a      	add	r2, r1
 801829e:	4291      	cmp	r1, r2
 80182a0:	d100      	bne.n	80182a4 <memcpy+0xc>
 80182a2:	bd10      	pop	{r4, pc}
 80182a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80182a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80182ac:	e7f7      	b.n	801829e <memcpy+0x6>

080182ae <memmove>:
 80182ae:	4288      	cmp	r0, r1
 80182b0:	b510      	push	{r4, lr}
 80182b2:	eb01 0302 	add.w	r3, r1, r2
 80182b6:	d208      	bcs.n	80182ca <memmove+0x1c>
 80182b8:	1e42      	subs	r2, r0, #1
 80182ba:	4299      	cmp	r1, r3
 80182bc:	d100      	bne.n	80182c0 <memmove+0x12>
 80182be:	bd10      	pop	{r4, pc}
 80182c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80182c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80182c8:	e7f7      	b.n	80182ba <memmove+0xc>
 80182ca:	4402      	add	r2, r0
 80182cc:	4601      	mov	r1, r0
 80182ce:	428a      	cmp	r2, r1
 80182d0:	d0f5      	beq.n	80182be <memmove+0x10>
 80182d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80182d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80182da:	e7f8      	b.n	80182ce <memmove+0x20>

080182dc <memset>:
 80182dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182de:	b1c2      	cbz	r2, 8018312 <memset+0x36>
 80182e0:	b2c9      	uxtb	r1, r1
 80182e2:	4603      	mov	r3, r0
 80182e4:	075c      	lsls	r4, r3, #29
 80182e6:	d110      	bne.n	801830a <memset+0x2e>
 80182e8:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 80182ec:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 80182f0:	f022 0407 	bic.w	r4, r2, #7
 80182f4:	463d      	mov	r5, r7
 80182f6:	441c      	add	r4, r3
 80182f8:	461e      	mov	r6, r3
 80182fa:	42a6      	cmp	r6, r4
 80182fc:	d10a      	bne.n	8018314 <memset+0x38>
 80182fe:	441a      	add	r2, r3
 8018300:	4294      	cmp	r4, r2
 8018302:	d006      	beq.n	8018312 <memset+0x36>
 8018304:	f804 1b01 	strb.w	r1, [r4], #1
 8018308:	e7fa      	b.n	8018300 <memset+0x24>
 801830a:	3a01      	subs	r2, #1
 801830c:	f803 1b01 	strb.w	r1, [r3], #1
 8018310:	d1e8      	bne.n	80182e4 <memset+0x8>
 8018312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018314:	f846 7b08 	str.w	r7, [r6], #8
 8018318:	f846 5c04 	str.w	r5, [r6, #-4]
 801831c:	e7ed      	b.n	80182fa <memset+0x1e>

0801831e <puts>:
 801831e:	b508      	push	{r3, lr}
 8018320:	f7ff fd46 	bl	8017db0 <console_puts>
 8018324:	200a      	movs	r0, #10
 8018326:	f7ff fd41 	bl	8017dac <console_putc>
 801832a:	2001      	movs	r0, #1
 801832c:	bd08      	pop	{r3, pc}
	...

08018330 <strtok>:
 8018330:	b530      	push	{r4, r5, lr}
 8018332:	b910      	cbnz	r0, 801833a <strtok+0xa>
 8018334:	4b12      	ldr	r3, [pc, #72]	; (8018380 <strtok+0x50>)
 8018336:	6818      	ldr	r0, [r3, #0]
 8018338:	b158      	cbz	r0, 8018352 <strtok+0x22>
 801833a:	4603      	mov	r3, r0
 801833c:	4618      	mov	r0, r3
 801833e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018342:	460d      	mov	r5, r1
 8018344:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018348:	b924      	cbnz	r4, 8018354 <strtok+0x24>
 801834a:	b94a      	cbnz	r2, 8018360 <strtok+0x30>
 801834c:	4b0c      	ldr	r3, [pc, #48]	; (8018380 <strtok+0x50>)
 801834e:	4610      	mov	r0, r2
 8018350:	601a      	str	r2, [r3, #0]
 8018352:	bd30      	pop	{r4, r5, pc}
 8018354:	42a2      	cmp	r2, r4
 8018356:	d1f5      	bne.n	8018344 <strtok+0x14>
 8018358:	e7f0      	b.n	801833c <strtok+0xc>
 801835a:	4613      	mov	r3, r2
 801835c:	e00c      	b.n	8018378 <strtok+0x48>
 801835e:	b914      	cbnz	r4, 8018366 <strtok+0x36>
 8018360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018364:	460d      	mov	r5, r1
 8018366:	f815 4b01 	ldrb.w	r4, [r5], #1
 801836a:	42a2      	cmp	r2, r4
 801836c:	d1f7      	bne.n	801835e <strtok+0x2e>
 801836e:	2a00      	cmp	r2, #0
 8018370:	d0f3      	beq.n	801835a <strtok+0x2a>
 8018372:	2200      	movs	r2, #0
 8018374:	f803 2c01 	strb.w	r2, [r3, #-1]
 8018378:	4a01      	ldr	r2, [pc, #4]	; (8018380 <strtok+0x50>)
 801837a:	6013      	str	r3, [r2, #0]
 801837c:	e7e9      	b.n	8018352 <strtok+0x22>
 801837e:	bf00      	nop
 8018380:	2000fda4 	andcs	pc, r0, r4, lsr #27

08018384 <isleapyear>:
 8018384:	2264      	movs	r2, #100	; 0x64
 8018386:	fb90 f3f2 	sdiv	r3, r0, r2
 801838a:	fb02 0313 	mls	r3, r2, r3, r0
 801838e:	b94b      	cbnz	r3, 80183a4 <isleapyear+0x20>
 8018390:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8018394:	fb90 f2f3 	sdiv	r2, r0, r3
 8018398:	fb03 0012 	mls	r0, r3, r2, r0
 801839c:	fab0 f080 	clz	r0, r0
 80183a0:	0940      	lsrs	r0, r0, #5
 80183a2:	4770      	bx	lr
 80183a4:	f010 0f03 	tst.w	r0, #3
 80183a8:	bf0c      	ite	eq
 80183aa:	2001      	moveq	r0, #1
 80183ac:	2000      	movne	r0, #0
 80183ae:	4770      	bx	lr

080183b0 <getdaysofmonth>:
 80183b0:	b510      	push	{r4, lr}
 80183b2:	4604      	mov	r4, r0
 80183b4:	2c01      	cmp	r4, #1
 80183b6:	4608      	mov	r0, r1
 80183b8:	d102      	bne.n	80183c0 <getdaysofmonth+0x10>
 80183ba:	f7ff ffe3 	bl	8018384 <isleapyear>
 80183be:	b918      	cbnz	r0, 80183c8 <getdaysofmonth+0x18>
 80183c0:	4b02      	ldr	r3, [pc, #8]	; (80183cc <getdaysofmonth+0x1c>)
 80183c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80183c6:	bd10      	pop	{r4, pc}
 80183c8:	201d      	movs	r0, #29
 80183ca:	e7fc      	b.n	80183c6 <getdaysofmonth+0x16>
 80183cc:	0801ddcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, fp, ip, lr, pc}

080183d0 <mktime>:
 80183d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183d4:	4604      	mov	r4, r0
 80183d6:	2800      	cmp	r0, #0
 80183d8:	d043      	beq.n	8018462 <mktime+0x92>
 80183da:	6941      	ldr	r1, [r0, #20]
 80183dc:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 80183e0:	2b45      	cmp	r3, #69	; 0x45
 80183e2:	d83e      	bhi.n	8018462 <mktime+0x92>
 80183e4:	2600      	movs	r6, #0
 80183e6:	f240 75b2 	movw	r5, #1970	; 0x7b2
 80183ea:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 80183ee:	f240 186d 	movw	r8, #365	; 0x16d
 80183f2:	42af      	cmp	r7, r5
 80183f4:	da24      	bge.n	8018440 <mktime+0x70>
 80183f6:	6927      	ldr	r7, [r4, #16]
 80183f8:	2f0b      	cmp	r7, #11
 80183fa:	d832      	bhi.n	8018462 <mktime+0x92>
 80183fc:	2500      	movs	r5, #0
 80183fe:	42af      	cmp	r7, r5
 8018400:	d129      	bne.n	8018456 <mktime+0x86>
 8018402:	68e5      	ldr	r5, [r4, #12]
 8018404:	2d00      	cmp	r5, #0
 8018406:	dd2c      	ble.n	8018462 <mktime+0x92>
 8018408:	4638      	mov	r0, r7
 801840a:	f7ff ffd1 	bl	80183b0 <getdaysofmonth>
 801840e:	4285      	cmp	r5, r0
 8018410:	dc27      	bgt.n	8018462 <mktime+0x92>
 8018412:	3d01      	subs	r5, #1
 8018414:	2318      	movs	r3, #24
 8018416:	4435      	add	r5, r6
 8018418:	435d      	muls	r5, r3
 801841a:	68a3      	ldr	r3, [r4, #8]
 801841c:	2b17      	cmp	r3, #23
 801841e:	d820      	bhi.n	8018462 <mktime+0x92>
 8018420:	442b      	add	r3, r5
 8018422:	213c      	movs	r1, #60	; 0x3c
 8018424:	fb01 f203 	mul.w	r2, r1, r3
 8018428:	6863      	ldr	r3, [r4, #4]
 801842a:	2b3b      	cmp	r3, #59	; 0x3b
 801842c:	d819      	bhi.n	8018462 <mktime+0x92>
 801842e:	6820      	ldr	r0, [r4, #0]
 8018430:	4413      	add	r3, r2
 8018432:	283b      	cmp	r0, #59	; 0x3b
 8018434:	fb01 f303 	mul.w	r3, r1, r3
 8018438:	d813      	bhi.n	8018462 <mktime+0x92>
 801843a:	4418      	add	r0, r3
 801843c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018440:	4628      	mov	r0, r5
 8018442:	f7ff ff9f 	bl	8018384 <isleapyear>
 8018446:	2800      	cmp	r0, #0
 8018448:	bf14      	ite	ne
 801844a:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 801844e:	4643      	moveq	r3, r8
 8018450:	441e      	add	r6, r3
 8018452:	3501      	adds	r5, #1
 8018454:	e7cd      	b.n	80183f2 <mktime+0x22>
 8018456:	4628      	mov	r0, r5
 8018458:	f7ff ffaa 	bl	80183b0 <getdaysofmonth>
 801845c:	3501      	adds	r5, #1
 801845e:	4406      	add	r6, r0
 8018460:	e7cd      	b.n	80183fe <mktime+0x2e>
 8018462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018466:	e7e9      	b.n	801843c <mktime+0x6c>

08018468 <gettimeofday>:
 8018468:	b538      	push	{r3, r4, r5, lr}
 801846a:	4a10      	ldr	r2, [pc, #64]	; (80184ac <gettimeofday+0x44>)
 801846c:	4b10      	ldr	r3, [pc, #64]	; (80184b0 <gettimeofday+0x48>)
 801846e:	6814      	ldr	r4, [r2, #0]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	6013      	str	r3, [r2, #0]
 8018474:	429c      	cmp	r4, r3
 8018476:	bf2c      	ite	cs
 8018478:	1ae4      	subcs	r4, r4, r3
 801847a:	1b1c      	subcc	r4, r3, r4
 801847c:	4b0d      	ldr	r3, [pc, #52]	; (80184b4 <gettimeofday+0x4c>)
 801847e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018482:	4354      	muls	r4, r2
 8018484:	e9d3 2100 	ldrd	r2, r1, [r3]
 8018488:	18a4      	adds	r4, r4, r2
 801848a:	f141 0100 	adc.w	r1, r1, #0
 801848e:	4605      	mov	r5, r0
 8018490:	e9c3 4100 	strd	r4, r1, [r3]
 8018494:	4a08      	ldr	r2, [pc, #32]	; (80184b8 <gettimeofday+0x50>)
 8018496:	2300      	movs	r3, #0
 8018498:	4620      	mov	r0, r4
 801849a:	f7f0 fbfd 	bl	8008c98 <__aeabi_uldivmod>
 801849e:	4b06      	ldr	r3, [pc, #24]	; (80184b8 <gettimeofday+0x50>)
 80184a0:	6028      	str	r0, [r5, #0]
 80184a2:	fb03 4410 	mls	r4, r3, r0, r4
 80184a6:	606c      	str	r4, [r5, #4]
 80184a8:	2000      	movs	r0, #0
 80184aa:	bd38      	pop	{r3, r4, r5, pc}
 80184ac:	2000fdb0 			; <UNDEFINED> instruction: 0x2000fdb0
 80184b0:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 80184b4:	2000fda8 	andcs	pc, r0, r8, lsr #27
 80184b8:	000f4240 	andeq	r4, pc, r0, asr #4

080184bc <settimeofday>:
 80184bc:	4b07      	ldr	r3, [pc, #28]	; (80184dc <settimeofday+0x20>)
 80184be:	4908      	ldr	r1, [pc, #32]	; (80184e0 <settimeofday+0x24>)
 80184c0:	681a      	ldr	r2, [r3, #0]
 80184c2:	4b08      	ldr	r3, [pc, #32]	; (80184e4 <settimeofday+0x28>)
 80184c4:	b510      	push	{r4, lr}
 80184c6:	601a      	str	r2, [r3, #0]
 80184c8:	6843      	ldr	r3, [r0, #4]
 80184ca:	6804      	ldr	r4, [r0, #0]
 80184cc:	4806      	ldr	r0, [pc, #24]	; (80184e8 <settimeofday+0x2c>)
 80184ce:	17da      	asrs	r2, r3, #31
 80184d0:	fbc4 3200 	smlal	r3, r2, r4, r0
 80184d4:	e9c1 3200 	strd	r3, r2, [r1]
 80184d8:	2000      	movs	r0, #0
 80184da:	bd10      	pop	{r4, pc}
 80184dc:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4
 80184e0:	2000fda8 	andcs	pc, r0, r8, lsr #27
 80184e4:	2000fdb0 			; <UNDEFINED> instruction: 0x2000fdb0
 80184e8:	000f4240 	andeq	r4, pc, r0, asr #4

080184ec <time>:
 80184ec:	b513      	push	{r0, r1, r4, lr}
 80184ee:	4604      	mov	r4, r0
 80184f0:	2100      	movs	r1, #0
 80184f2:	4668      	mov	r0, sp
 80184f4:	f7ff ffb8 	bl	8018468 <gettimeofday>
 80184f8:	9800      	ldr	r0, [sp, #0]
 80184fa:	b104      	cbz	r4, 80184fe <time+0x12>
 80184fc:	6020      	str	r0, [r4, #0]
 80184fe:	b002      	add	sp, #8
 8018500:	bd10      	pop	{r4, pc}
	...

08018504 <uart0_init>:
 8018504:	b507      	push	{r0, r1, r2, lr}
 8018506:	2301      	movs	r3, #1
 8018508:	9300      	str	r3, [sp, #0]
 801850a:	4805      	ldr	r0, [pc, #20]	; (8018520 <uart0_init+0x1c>)
 801850c:	2300      	movs	r3, #0
 801850e:	2208      	movs	r2, #8
 8018510:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8018514:	f001 fda6 	bl	801a064 <gd32_uart_begin>
 8018518:	b003      	add	sp, #12
 801851a:	f85d fb04 	ldr.w	pc, [sp], #4
 801851e:	bf00      	nop
 8018520:	40011000 	andmi	r1, r1, r0

08018524 <uart0_putc>:
 8018524:	280a      	cmp	r0, #10
 8018526:	b570      	push	{r4, r5, r6, lr}
 8018528:	4d0a      	ldr	r5, [pc, #40]	; (8018554 <uart0_putc+0x30>)
 801852a:	4604      	mov	r4, r0
 801852c:	d107      	bne.n	801853e <uart0_putc+0x1a>
 801852e:	2107      	movs	r1, #7
 8018530:	4628      	mov	r0, r5
 8018532:	f001 fa3f 	bl	80199b4 <usart_flag_get>
 8018536:	2800      	cmp	r0, #0
 8018538:	d0f9      	beq.n	801852e <uart0_putc+0xa>
 801853a:	230d      	movs	r3, #13
 801853c:	606b      	str	r3, [r5, #4]
 801853e:	4e05      	ldr	r6, [pc, #20]	; (8018554 <uart0_putc+0x30>)
 8018540:	2107      	movs	r1, #7
 8018542:	4630      	mov	r0, r6
 8018544:	f001 fa36 	bl	80199b4 <usart_flag_get>
 8018548:	2800      	cmp	r0, #0
 801854a:	d0f9      	beq.n	8018540 <uart0_putc+0x1c>
 801854c:	b2e4      	uxtb	r4, r4
 801854e:	606c      	str	r4, [r5, #4]
 8018550:	bd70      	pop	{r4, r5, r6, pc}
 8018552:	bf00      	nop
 8018554:	40011000 	andmi	r1, r1, r0

08018558 <uart0_puts>:
 8018558:	b510      	push	{r4, lr}
 801855a:	1e44      	subs	r4, r0, #1
 801855c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018560:	b903      	cbnz	r3, 8018564 <uart0_puts+0xc>
 8018562:	bd10      	pop	{r4, pc}
 8018564:	2b0a      	cmp	r3, #10
 8018566:	d102      	bne.n	801856e <uart0_puts+0x16>
 8018568:	200d      	movs	r0, #13
 801856a:	f7ff ffdb 	bl	8018524 <uart0_putc>
 801856e:	7820      	ldrb	r0, [r4, #0]
 8018570:	f7ff ffd8 	bl	8018524 <uart0_putc>
 8018574:	e7f2      	b.n	801855c <uart0_puts+0x4>
	...

08018578 <systick_config>:
 8018578:	4b0c      	ldr	r3, [pc, #48]	; (80185ac <systick_config+0x34>)
 801857a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	fbb3 f3f2 	udiv	r3, r3, r2
 8018584:	3b01      	subs	r3, #1
 8018586:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801858a:	d20d      	bcs.n	80185a8 <systick_config+0x30>
 801858c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8018590:	21f0      	movs	r1, #240	; 0xf0
 8018592:	6153      	str	r3, [r2, #20]
 8018594:	4b06      	ldr	r3, [pc, #24]	; (80185b0 <systick_config+0x38>)
 8018596:	2007      	movs	r0, #7
 8018598:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 801859c:	2100      	movs	r1, #0
 801859e:	6191      	str	r1, [r2, #24]
 80185a0:	6110      	str	r0, [r2, #16]
 80185a2:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80185a6:	4770      	bx	lr
 80185a8:	e7fe      	b.n	80185a8 <systick_config+0x30>
 80185aa:	bf00      	nop
 80185ac:	200000f4 	strdcs	r0, [r0], -r4
 80185b0:	e000ed00 	and	lr, r0, r0, lsl #26

080185b4 <SysTick_Handler>:
 80185b4:	4a02      	ldr	r2, [pc, #8]	; (80185c0 <SysTick_Handler+0xc>)
 80185b6:	6813      	ldr	r3, [r2, #0]
 80185b8:	3301      	adds	r3, #1
 80185ba:	6013      	str	r3, [r2, #0]
 80185bc:	4770      	bx	lr
 80185be:	bf00      	nop
 80185c0:	2000fdb4 			; <UNDEFINED> instruction: 0x2000fdb4

080185c4 <SystemInit>:
 80185c4:	4a56      	ldr	r2, [pc, #344]	; (8018720 <SystemInit+0x15c>)
 80185c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80185ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80185ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80185d2:	4b54      	ldr	r3, [pc, #336]	; (8018724 <SystemInit+0x160>)
 80185d4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80185d8:	f042 0201 	orr.w	r2, r2, #1
 80185dc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 80185e0:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80185e4:	b082      	sub	sp, #8
 80185e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80185ea:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 80185ee:	2200      	movs	r2, #0
 80185f0:	9201      	str	r2, [sp, #4]
 80185f2:	f24c 314f 	movw	r1, #49999	; 0xc34f
 80185f6:	9a01      	ldr	r2, [sp, #4]
 80185f8:	428a      	cmp	r2, r1
 80185fa:	d93e      	bls.n	801867a <SystemInit+0xb6>
 80185fc:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8018600:	f042 0290 	orr.w	r2, r2, #144	; 0x90
 8018604:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8018608:	2300      	movs	r3, #0
 801860a:	9301      	str	r3, [sp, #4]
 801860c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8018610:	9b01      	ldr	r3, [sp, #4]
 8018612:	4293      	cmp	r3, r2
 8018614:	d935      	bls.n	8018682 <SystemInit+0xbe>
 8018616:	4b43      	ldr	r3, [pc, #268]	; (8018724 <SystemInit+0x160>)
 8018618:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 801861c:	f022 0203 	bic.w	r2, r2, #3
 8018620:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8018624:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8018628:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 801862c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8018630:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8018634:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8018638:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801863c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8018640:	2200      	movs	r2, #0
 8018642:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8018646:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 801864a:	4937      	ldr	r1, [pc, #220]	; (8018728 <SystemInit+0x164>)
 801864c:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
 8018650:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
 8018654:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8018658:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801865c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8018660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018664:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 8018668:	0389      	lsls	r1, r1, #14
 801866a:	d401      	bmi.n	8018670 <SystemInit+0xac>
 801866c:	3a01      	subs	r2, #1
 801866e:	d1f9      	bne.n	8018664 <SystemInit+0xa0>
 8018670:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8018674:	0392      	lsls	r2, r2, #14
 8018676:	d408      	bmi.n	801868a <SystemInit+0xc6>
 8018678:	e7fe      	b.n	8018678 <SystemInit+0xb4>
 801867a:	9a01      	ldr	r2, [sp, #4]
 801867c:	3201      	adds	r2, #1
 801867e:	9201      	str	r2, [sp, #4]
 8018680:	e7b9      	b.n	80185f6 <SystemInit+0x32>
 8018682:	9b01      	ldr	r3, [sp, #4]
 8018684:	3301      	adds	r3, #1
 8018686:	9301      	str	r3, [sp, #4]
 8018688:	e7c2      	b.n	8018610 <SystemInit+0x4c>
 801868a:	f8d3 2840 	ldr.w	r2, [r3, #2112]	; 0x840
 801868e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8018692:	f8c3 2840 	str.w	r2, [r3, #2112]	; 0x840
 8018696:	4a25      	ldr	r2, [pc, #148]	; (801872c <SystemInit+0x168>)
 8018698:	6811      	ldr	r1, [r2, #0]
 801869a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 801869e:	6011      	str	r1, [r2, #0]
 80186a0:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 80186a4:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
 80186a8:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 80186ac:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80186b0:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
 80186b4:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 80186b8:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400
 80186bc:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
 80186c0:	491b      	ldr	r1, [pc, #108]	; (8018730 <SystemInit+0x16c>)
 80186c2:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
 80186c6:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 80186ca:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80186ce:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
 80186d2:	4914      	ldr	r1, [pc, #80]	; (8018724 <SystemInit+0x160>)
 80186d4:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
 80186d8:	019b      	lsls	r3, r3, #6
 80186da:	d5fb      	bpl.n	80186d4 <SystemInit+0x110>
 80186dc:	6813      	ldr	r3, [r2, #0]
 80186de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80186e2:	6013      	str	r3, [r2, #0]
 80186e4:	4b11      	ldr	r3, [pc, #68]	; (801872c <SystemInit+0x168>)
 80186e6:	685a      	ldr	r2, [r3, #4]
 80186e8:	03d0      	lsls	r0, r2, #15
 80186ea:	d5fc      	bpl.n	80186e6 <SystemInit+0x122>
 80186ec:	681a      	ldr	r2, [r3, #0]
 80186ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80186f2:	601a      	str	r2, [r3, #0]
 80186f4:	685a      	ldr	r2, [r3, #4]
 80186f6:	0391      	lsls	r1, r2, #14
 80186f8:	d5fc      	bpl.n	80186f4 <SystemInit+0x130>
 80186fa:	4b0a      	ldr	r3, [pc, #40]	; (8018724 <SystemInit+0x160>)
 80186fc:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8018700:	f022 0203 	bic.w	r2, r2, #3
 8018704:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8018708:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 801870c:	f042 0202 	orr.w	r2, r2, #2
 8018710:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8018714:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8018718:	0712      	lsls	r2, r2, #28
 801871a:	d5fb      	bpl.n	8018714 <SystemInit+0x150>
 801871c:	b002      	add	sp, #8
 801871e:	4770      	bx	lr
 8018720:	e000ed00 	and	lr, r0, r0, lsl #26
 8018724:	40023000 	andmi	r3, r2, r0
 8018728:	24003010 	strcs	r3, [r0], #-16
 801872c:	40007000 	andmi	r7, r0, r0
 8018730:	09406419 	stmdbeq	r0, {r0, r3, r4, sl, sp, lr}^

08018734 <dma_deinit>:
 8018734:	2318      	movs	r3, #24
 8018736:	fb03 0301 	mla	r3, r3, r1, r0
 801873a:	b510      	push	{r4, lr}
 801873c:	691a      	ldr	r2, [r3, #16]
 801873e:	f022 0201 	bic.w	r2, r2, #1
 8018742:	611a      	str	r2, [r3, #16]
 8018744:	2903      	cmp	r1, #3
 8018746:	f04f 0200 	mov.w	r2, #0
 801874a:	611a      	str	r2, [r3, #16]
 801874c:	615a      	str	r2, [r3, #20]
 801874e:	619a      	str	r2, [r3, #24]
 8018750:	61da      	str	r2, [r3, #28]
 8018752:	621a      	str	r2, [r3, #32]
 8018754:	625a      	str	r2, [r3, #36]	; 0x24
 8018756:	d80a      	bhi.n	801876e <dma_deinit+0x3a>
 8018758:	2406      	movs	r4, #6
 801875a:	084b      	lsrs	r3, r1, #1
 801875c:	4361      	muls	r1, r4
 801875e:	6882      	ldr	r2, [r0, #8]
 8018760:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018764:	233d      	movs	r3, #61	; 0x3d
 8018766:	408b      	lsls	r3, r1
 8018768:	4313      	orrs	r3, r2
 801876a:	6083      	str	r3, [r0, #8]
 801876c:	bd10      	pop	{r4, pc}
 801876e:	3904      	subs	r1, #4
 8018770:	b2ca      	uxtb	r2, r1
 8018772:	2306      	movs	r3, #6
 8018774:	435a      	muls	r2, r3
 8018776:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801877a:	68c4      	ldr	r4, [r0, #12]
 801877c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8018780:	233d      	movs	r3, #61	; 0x3d
 8018782:	4093      	lsls	r3, r2
 8018784:	4323      	orrs	r3, r4
 8018786:	60c3      	str	r3, [r0, #12]
 8018788:	e7f0      	b.n	801876c <dma_deinit+0x38>

0801878a <dma_single_data_para_struct_init>:
 801878a:	2300      	movs	r3, #0
 801878c:	2201      	movs	r2, #1
 801878e:	e9c0 3200 	strd	r3, r2, [r0]
 8018792:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8018796:	e9c0 3204 	strd	r3, r2, [r0, #16]
 801879a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801879e:	6203      	str	r3, [r0, #32]
 80187a0:	4770      	bx	lr

080187a2 <dma_single_data_mode_init>:
 80187a2:	2318      	movs	r3, #24
 80187a4:	fb03 0101 	mla	r1, r3, r1, r0
 80187a8:	b530      	push	{r4, r5, lr}
 80187aa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80187ac:	f023 0304 	bic.w	r3, r3, #4
 80187b0:	624b      	str	r3, [r1, #36]	; 0x24
 80187b2:	6813      	ldr	r3, [r2, #0]
 80187b4:	618b      	str	r3, [r1, #24]
 80187b6:	6893      	ldr	r3, [r2, #8]
 80187b8:	61cb      	str	r3, [r1, #28]
 80187ba:	69d3      	ldr	r3, [r2, #28]
 80187bc:	614b      	str	r3, [r1, #20]
 80187be:	6914      	ldr	r4, [r2, #16]
 80187c0:	6a13      	ldr	r3, [r2, #32]
 80187c2:	6908      	ldr	r0, [r1, #16]
 80187c4:	6995      	ldr	r5, [r2, #24]
 80187c6:	4323      	orrs	r3, r4
 80187c8:	f420 305e 	bic.w	r0, r0, #227328	; 0x37800
 80187cc:	432b      	orrs	r3, r5
 80187ce:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 80187d2:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 80187d6:	4303      	orrs	r3, r0
 80187d8:	610b      	str	r3, [r1, #16]
 80187da:	6853      	ldr	r3, [r2, #4]
 80187dc:	b983      	cbnz	r3, 8018800 <dma_single_data_mode_init+0x5e>
 80187de:	690b      	ldr	r3, [r1, #16]
 80187e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80187e4:	610b      	str	r3, [r1, #16]
 80187e6:	68d3      	ldr	r3, [r2, #12]
 80187e8:	b993      	cbnz	r3, 8018810 <dma_single_data_mode_init+0x6e>
 80187ea:	690b      	ldr	r3, [r1, #16]
 80187ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80187f0:	610b      	str	r3, [r1, #16]
 80187f2:	6953      	ldr	r3, [r2, #20]
 80187f4:	b983      	cbnz	r3, 8018818 <dma_single_data_mode_init+0x76>
 80187f6:	690b      	ldr	r3, [r1, #16]
 80187f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80187fc:	610b      	str	r3, [r1, #16]
 80187fe:	bd30      	pop	{r4, r5, pc}
 8018800:	2b01      	cmp	r3, #1
 8018802:	690b      	ldr	r3, [r1, #16]
 8018804:	bf0c      	ite	eq
 8018806:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 801880a:	f443 4300 	orrne.w	r3, r3, #32768	; 0x8000
 801880e:	e7e9      	b.n	80187e4 <dma_single_data_mode_init+0x42>
 8018810:	690b      	ldr	r3, [r1, #16]
 8018812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8018816:	e7eb      	b.n	80187f0 <dma_single_data_mode_init+0x4e>
 8018818:	690b      	ldr	r3, [r1, #16]
 801881a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801881e:	e7ed      	b.n	80187fc <dma_single_data_mode_init+0x5a>

08018820 <dma_circulation_disable>:
 8018820:	2318      	movs	r3, #24
 8018822:	4359      	muls	r1, r3
 8018824:	3010      	adds	r0, #16
 8018826:	580b      	ldr	r3, [r1, r0]
 8018828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801882c:	500b      	str	r3, [r1, r0]
 801882e:	4770      	bx	lr

08018830 <dma_channel_subperipheral_select>:
 8018830:	2318      	movs	r3, #24
 8018832:	4359      	muls	r1, r3
 8018834:	3010      	adds	r0, #16
 8018836:	580b      	ldr	r3, [r1, r0]
 8018838:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 801883c:	ea43 6242 	orr.w	r2, r3, r2, lsl #25
 8018840:	500a      	str	r2, [r1, r0]
 8018842:	4770      	bx	lr

08018844 <dma_flag_clear>:
 8018844:	2903      	cmp	r1, #3
 8018846:	b530      	push	{r4, r5, lr}
 8018848:	d809      	bhi.n	801885e <dma_flag_clear+0x1a>
 801884a:	2506      	movs	r5, #6
 801884c:	084c      	lsrs	r4, r1, #1
 801884e:	4369      	muls	r1, r5
 8018850:	6883      	ldr	r3, [r0, #8]
 8018852:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018856:	408a      	lsls	r2, r1
 8018858:	4313      	orrs	r3, r2
 801885a:	6083      	str	r3, [r0, #8]
 801885c:	bd30      	pop	{r4, r5, pc}
 801885e:	3904      	subs	r1, #4
 8018860:	b2cb      	uxtb	r3, r1
 8018862:	2506      	movs	r5, #6
 8018864:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8018868:	436b      	muls	r3, r5
 801886a:	68c4      	ldr	r4, [r0, #12]
 801886c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8018870:	409a      	lsls	r2, r3
 8018872:	4322      	orrs	r2, r4
 8018874:	60c2      	str	r2, [r0, #12]
 8018876:	e7f1      	b.n	801885c <dma_flag_clear+0x18>

08018878 <dma_interrupt_flag_clear>:
 8018878:	f7ff bfe4 	b.w	8018844 <dma_flag_clear>

0801887c <enet_delay>:
 801887c:	b082      	sub	sp, #8
 801887e:	2300      	movs	r3, #0
 8018880:	9301      	str	r3, [sp, #4]
 8018882:	9001      	str	r0, [sp, #4]
 8018884:	9b01      	ldr	r3, [sp, #4]
 8018886:	b90b      	cbnz	r3, 801888c <enet_delay+0x10>
 8018888:	b002      	add	sp, #8
 801888a:	4770      	bx	lr
 801888c:	9b01      	ldr	r3, [sp, #4]
 801888e:	3b01      	subs	r3, #1
 8018890:	9301      	str	r3, [sp, #4]
 8018892:	e7f7      	b.n	8018884 <enet_delay+0x8>

08018894 <enet_software_reset>:
 8018894:	4b07      	ldr	r3, [pc, #28]	; (80188b4 <enet_software_reset+0x20>)
 8018896:	681a      	ldr	r2, [r3, #0]
 8018898:	f042 0201 	orr.w	r2, r2, #1
 801889c:	601a      	str	r2, [r3, #0]
 801889e:	4a06      	ldr	r2, [pc, #24]	; (80188b8 <enet_software_reset+0x24>)
 80188a0:	6819      	ldr	r1, [r3, #0]
 80188a2:	07c9      	lsls	r1, r1, #31
 80188a4:	d501      	bpl.n	80188aa <enet_software_reset+0x16>
 80188a6:	3a01      	subs	r2, #1
 80188a8:	d1fa      	bne.n	80188a0 <enet_software_reset+0xc>
 80188aa:	6818      	ldr	r0, [r3, #0]
 80188ac:	43c0      	mvns	r0, r0
 80188ae:	f000 0001 	and.w	r0, r0, #1
 80188b2:	4770      	bx	lr
 80188b4:	40029000 	andmi	r9, r2, r0
 80188b8:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080188bc <enet_descriptors_chain_init>:
 80188bc:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 80188c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188c2:	4a19      	ldr	r2, [pc, #100]	; (8018928 <enet_descriptors_chain_init+0x6c>)
 80188c4:	d125      	bne.n	8018912 <enet_descriptors_chain_init+0x56>
 80188c6:	4b19      	ldr	r3, [pc, #100]	; (801892c <enet_descriptors_chain_init+0x70>)
 80188c8:	6113      	str	r3, [r2, #16]
 80188ca:	4a19      	ldr	r2, [pc, #100]	; (8018930 <enet_descriptors_chain_init+0x74>)
 80188cc:	4c19      	ldr	r4, [pc, #100]	; (8018934 <enet_descriptors_chain_init+0x78>)
 80188ce:	6013      	str	r3, [r2, #0]
 80188d0:	2500      	movs	r5, #0
 80188d2:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80188d6:	2008      	movs	r0, #8
 80188d8:	4917      	ldr	r1, [pc, #92]	; (8018938 <enet_descriptors_chain_init+0x7c>)
 80188da:	2200      	movs	r2, #0
 80188dc:	600a      	str	r2, [r1, #0]
 80188de:	4917      	ldr	r1, [pc, #92]	; (801893c <enet_descriptors_chain_init+0x80>)
 80188e0:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 80188e4:	600a      	str	r2, [r1, #0]
 80188e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80188ea:	f103 0110 	add.w	r1, r3, #16
 80188ee:	fb0e 4702 	mla	r7, lr, r2, r4
 80188f2:	f841 7c08 	str.w	r7, [r1, #-8]
 80188f6:	4594      	cmp	ip, r2
 80188f8:	bf94      	ite	ls
 80188fa:	461f      	movls	r7, r3
 80188fc:	460f      	movhi	r7, r1
 80188fe:	3201      	adds	r2, #1
 8018900:	4290      	cmp	r0, r2
 8018902:	e941 6504 	strd	r6, r5, [r1, #-16]
 8018906:	f841 7c04 	str.w	r7, [r1, #-4]
 801890a:	f101 0110 	add.w	r1, r1, #16
 801890e:	d1ee      	bne.n	80188ee <enet_descriptors_chain_init+0x32>
 8018910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018912:	4b0b      	ldr	r3, [pc, #44]	; (8018940 <enet_descriptors_chain_init+0x84>)
 8018914:	60d3      	str	r3, [r2, #12]
 8018916:	4a0b      	ldr	r2, [pc, #44]	; (8018944 <enet_descriptors_chain_init+0x88>)
 8018918:	4c0b      	ldr	r4, [pc, #44]	; (8018948 <enet_descriptors_chain_init+0x8c>)
 801891a:	6013      	str	r3, [r2, #0]
 801891c:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8018920:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018924:	2046      	movs	r0, #70	; 0x46
 8018926:	e7d7      	b.n	80188d8 <enet_descriptors_chain_init+0x1c>
 8018928:	40029000 	andmi	r9, r2, r0
 801892c:	2002d2bc 			; <UNDEFINED> instruction: 0x2002d2bc
 8018930:	2000fdc4 	andcs	pc, r0, r4, asr #27
 8018934:	2002a31c 	andcs	sl, r2, ip, lsl r3
 8018938:	2000fdb8 			; <UNDEFINED> instruction: 0x2000fdb8
 801893c:	2000fdbc 			; <UNDEFINED> instruction: 0x2000fdbc
 8018940:	20029ebc 			; <UNDEFINED> instruction: 0x20029ebc
 8018944:	2000fdc0 	andcs	pc, r0, r0, asr #27
 8018948:	2000fe04 	andcs	pc, r0, r4, lsl #28

0801894c <enet_frame_receive>:
 801894c:	4b22      	ldr	r3, [pc, #136]	; (80189d8 <enet_frame_receive+0x8c>)
 801894e:	681a      	ldr	r2, [r3, #0]
 8018950:	6812      	ldr	r2, [r2, #0]
 8018952:	2a00      	cmp	r2, #0
 8018954:	b570      	push	{r4, r5, r6, lr}
 8018956:	db3c      	blt.n	80189d2 <enet_frame_receive+0x86>
 8018958:	b970      	cbnz	r0, 8018978 <enet_frame_receive+0x2c>
 801895a:	681a      	ldr	r2, [r3, #0]
 801895c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8018960:	6011      	str	r1, [r2, #0]
 8018962:	491e      	ldr	r1, [pc, #120]	; (80189dc <enet_frame_receive+0x90>)
 8018964:	6948      	ldr	r0, [r1, #20]
 8018966:	0600      	lsls	r0, r0, #24
 8018968:	d422      	bmi.n	80189b0 <enet_frame_receive+0x64>
 801896a:	6851      	ldr	r1, [r2, #4]
 801896c:	0448      	lsls	r0, r1, #17
 801896e:	d524      	bpl.n	80189ba <enet_frame_receive+0x6e>
 8018970:	68d2      	ldr	r2, [r2, #12]
 8018972:	601a      	str	r2, [r3, #0]
 8018974:	2001      	movs	r0, #1
 8018976:	bd70      	pop	{r4, r5, r6, pc}
 8018978:	f402 4403 	and.w	r4, r2, #33536	; 0x8300
 801897c:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8018980:	d127      	bne.n	80189d2 <enet_frame_receive+0x86>
 8018982:	4e17      	ldr	r6, [pc, #92]	; (80189e0 <enet_frame_receive+0x94>)
 8018984:	6836      	ldr	r6, [r6, #0]
 8018986:	f3c2 450d 	ubfx	r5, r2, #16, #14
 801898a:	01b6      	lsls	r6, r6, #6
 801898c:	f1a5 0404 	sub.w	r4, r5, #4
 8018990:	d503      	bpl.n	801899a <enet_frame_receive+0x4e>
 8018992:	f012 0f20 	tst.w	r2, #32
 8018996:	bf18      	it	ne
 8018998:	462c      	movne	r4, r5
 801899a:	428c      	cmp	r4, r1
 801899c:	d819      	bhi.n	80189d2 <enet_frame_receive+0x86>
 801899e:	2200      	movs	r2, #0
 80189a0:	42a2      	cmp	r2, r4
 80189a2:	6819      	ldr	r1, [r3, #0]
 80189a4:	d0d9      	beq.n	801895a <enet_frame_receive+0xe>
 80189a6:	6889      	ldr	r1, [r1, #8]
 80189a8:	5c51      	ldrb	r1, [r2, r1]
 80189aa:	5481      	strb	r1, [r0, r2]
 80189ac:	3201      	adds	r2, #1
 80189ae:	e7f7      	b.n	80189a0 <enet_frame_receive+0x54>
 80189b0:	2080      	movs	r0, #128	; 0x80
 80189b2:	6148      	str	r0, [r1, #20]
 80189b4:	2000      	movs	r0, #0
 80189b6:	6088      	str	r0, [r1, #8]
 80189b8:	e7d7      	b.n	801896a <enet_frame_receive+0x1e>
 80189ba:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80189be:	4907      	ldr	r1, [pc, #28]	; (80189dc <enet_frame_receive+0x90>)
 80189c0:	bf09      	itett	eq
 80189c2:	6809      	ldreq	r1, [r1, #0]
 80189c4:	68ca      	ldrne	r2, [r1, #12]
 80189c6:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 80189ca:	3210      	addeq	r2, #16
 80189cc:	bf08      	it	eq
 80189ce:	1852      	addeq	r2, r2, r1
 80189d0:	e7cf      	b.n	8018972 <enet_frame_receive+0x26>
 80189d2:	2000      	movs	r0, #0
 80189d4:	e7cf      	b.n	8018976 <enet_frame_receive+0x2a>
 80189d6:	bf00      	nop
 80189d8:	2000fdc0 	andcs	pc, r0, r0, asr #27
 80189dc:	40029000 	andmi	r9, r2, r0
 80189e0:	40028000 	andmi	r8, r2, r0

080189e4 <enet_frame_transmit>:
 80189e4:	4a1e      	ldr	r2, [pc, #120]	; (8018a60 <enet_frame_transmit+0x7c>)
 80189e6:	6813      	ldr	r3, [r2, #0]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	b530      	push	{r4, r5, lr}
 80189ee:	db34      	blt.n	8018a5a <enet_frame_transmit+0x76>
 80189f0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80189f4:	4299      	cmp	r1, r3
 80189f6:	d830      	bhi.n	8018a5a <enet_frame_transmit+0x76>
 80189f8:	b9e8      	cbnz	r0, 8018a36 <enet_frame_transmit+0x52>
 80189fa:	6813      	ldr	r3, [r2, #0]
 80189fc:	4819      	ldr	r0, [pc, #100]	; (8018a64 <enet_frame_transmit+0x80>)
 80189fe:	6059      	str	r1, [r3, #4]
 8018a00:	6819      	ldr	r1, [r3, #0]
 8018a02:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8018a06:	6019      	str	r1, [r3, #0]
 8018a08:	6941      	ldr	r1, [r0, #20]
 8018a0a:	6944      	ldr	r4, [r0, #20]
 8018a0c:	f001 0104 	and.w	r1, r1, #4
 8018a10:	f004 0420 	and.w	r4, r4, #32
 8018a14:	4321      	orrs	r1, r4
 8018a16:	d110      	bne.n	8018a3a <enet_frame_transmit+0x56>
 8018a18:	6819      	ldr	r1, [r3, #0]
 8018a1a:	02c8      	lsls	r0, r1, #11
 8018a1c:	d511      	bpl.n	8018a42 <enet_frame_transmit+0x5e>
 8018a1e:	68db      	ldr	r3, [r3, #12]
 8018a20:	6013      	str	r3, [r2, #0]
 8018a22:	2001      	movs	r0, #1
 8018a24:	bd30      	pop	{r4, r5, pc}
 8018a26:	68a4      	ldr	r4, [r4, #8]
 8018a28:	5cc5      	ldrb	r5, [r0, r3]
 8018a2a:	551d      	strb	r5, [r3, r4]
 8018a2c:	3301      	adds	r3, #1
 8018a2e:	428b      	cmp	r3, r1
 8018a30:	6814      	ldr	r4, [r2, #0]
 8018a32:	d1f8      	bne.n	8018a26 <enet_frame_transmit+0x42>
 8018a34:	e7e1      	b.n	80189fa <enet_frame_transmit+0x16>
 8018a36:	2300      	movs	r3, #0
 8018a38:	e7f9      	b.n	8018a2e <enet_frame_transmit+0x4a>
 8018a3a:	6141      	str	r1, [r0, #20]
 8018a3c:	2100      	movs	r1, #0
 8018a3e:	6041      	str	r1, [r0, #4]
 8018a40:	e7ea      	b.n	8018a18 <enet_frame_transmit+0x34>
 8018a42:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8018a46:	4907      	ldr	r1, [pc, #28]	; (8018a64 <enet_frame_transmit+0x80>)
 8018a48:	bf09      	itett	eq
 8018a4a:	6809      	ldreq	r1, [r1, #0]
 8018a4c:	690b      	ldrne	r3, [r1, #16]
 8018a4e:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8018a52:	3310      	addeq	r3, #16
 8018a54:	bf08      	it	eq
 8018a56:	185b      	addeq	r3, r3, r1
 8018a58:	e7e2      	b.n	8018a20 <enet_frame_transmit+0x3c>
 8018a5a:	2000      	movs	r0, #0
 8018a5c:	e7e2      	b.n	8018a24 <enet_frame_transmit+0x40>
 8018a5e:	bf00      	nop
 8018a60:	2000fdc4 	andcs	pc, r0, r4, asr #27
 8018a64:	40029000 	andmi	r9, r2, r0

08018a68 <enet_transmit_checksum_config>:
 8018a68:	6803      	ldr	r3, [r0, #0]
 8018a6a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8018a6e:	430b      	orrs	r3, r1
 8018a70:	6003      	str	r3, [r0, #0]
 8018a72:	4770      	bx	lr

08018a74 <enet_mac_address_set>:
 8018a74:	4b03      	ldr	r3, [pc, #12]	; (8018a84 <enet_mac_address_set+0x10>)
 8018a76:	888a      	ldrh	r2, [r1, #4]
 8018a78:	50c2      	str	r2, [r0, r3]
 8018a7a:	3304      	adds	r3, #4
 8018a7c:	680a      	ldr	r2, [r1, #0]
 8018a7e:	50c2      	str	r2, [r0, r3]
 8018a80:	4770      	bx	lr
 8018a82:	bf00      	nop
 8018a84:	40028040 	andmi	r8, r2, r0, asr #32

08018a88 <enet_rx_enable>:
 8018a88:	4a05      	ldr	r2, [pc, #20]	; (8018aa0 <enet_rx_enable+0x18>)
 8018a8a:	6813      	ldr	r3, [r2, #0]
 8018a8c:	f043 0304 	orr.w	r3, r3, #4
 8018a90:	6013      	str	r3, [r2, #0]
 8018a92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8018a96:	6993      	ldr	r3, [r2, #24]
 8018a98:	f043 0302 	orr.w	r3, r3, #2
 8018a9c:	6193      	str	r3, [r2, #24]
 8018a9e:	4770      	bx	lr
 8018aa0:	40028000 	andmi	r8, r2, r0

08018aa4 <enet_phy_write_read>:
 8018aa4:	b530      	push	{r4, r5, lr}
 8018aa6:	4d12      	ldr	r5, [pc, #72]	; (8018af0 <enet_phy_write_read+0x4c>)
 8018aa8:	4604      	mov	r4, r0
 8018aaa:	6928      	ldr	r0, [r5, #16]
 8018aac:	0192      	lsls	r2, r2, #6
 8018aae:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 8018ab2:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8018ab6:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 8018aba:	4302      	orrs	r2, r0
 8018abc:	02c9      	lsls	r1, r1, #11
 8018abe:	b289      	uxth	r1, r1
 8018ac0:	4322      	orrs	r2, r4
 8018ac2:	430a      	orrs	r2, r1
 8018ac4:	2c02      	cmp	r4, #2
 8018ac6:	bf04      	itt	eq
 8018ac8:	8819      	ldrheq	r1, [r3, #0]
 8018aca:	6169      	streq	r1, [r5, #20]
 8018acc:	f042 0201 	orr.w	r2, r2, #1
 8018ad0:	612a      	str	r2, [r5, #16]
 8018ad2:	4907      	ldr	r1, [pc, #28]	; (8018af0 <enet_phy_write_read+0x4c>)
 8018ad4:	4a07      	ldr	r2, [pc, #28]	; (8018af4 <enet_phy_write_read+0x50>)
 8018ad6:	6908      	ldr	r0, [r1, #16]
 8018ad8:	07c0      	lsls	r0, r0, #31
 8018ada:	d501      	bpl.n	8018ae0 <enet_phy_write_read+0x3c>
 8018adc:	3a01      	subs	r2, #1
 8018ade:	d1fa      	bne.n	8018ad6 <enet_phy_write_read+0x32>
 8018ae0:	690a      	ldr	r2, [r1, #16]
 8018ae2:	43d2      	mvns	r2, r2
 8018ae4:	f002 0001 	and.w	r0, r2, #1
 8018ae8:	b90c      	cbnz	r4, 8018aee <enet_phy_write_read+0x4a>
 8018aea:	694a      	ldr	r2, [r1, #20]
 8018aec:	801a      	strh	r2, [r3, #0]
 8018aee:	bd30      	pop	{r4, r5, pc}
 8018af0:	40028000 	andmi	r8, r2, r0
 8018af4:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08018af8 <enet_phy_config>:
 8018af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018afa:	4d26      	ldr	r5, [pc, #152]	; (8018b94 <enet_phy_config+0x9c>)
 8018afc:	2001      	movs	r0, #1
 8018afe:	692c      	ldr	r4, [r5, #16]
 8018b00:	f000 fb9e 	bl	8019240 <rcu_clock_freq_get>
 8018b04:	4b24      	ldr	r3, [pc, #144]	; (8018b98 <enet_phy_config+0xa0>)
 8018b06:	4a25      	ldr	r2, [pc, #148]	; (8018b9c <enet_phy_config+0xa4>)
 8018b08:	4403      	add	r3, r0
 8018b0a:	4293      	cmp	r3, r2
 8018b0c:	f024 041c 	bic.w	r4, r4, #28
 8018b10:	d21f      	bcs.n	8018b52 <enet_phy_config+0x5a>
 8018b12:	f044 0408 	orr.w	r4, r4, #8
 8018b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018b1a:	612c      	str	r4, [r5, #16]
 8018b1c:	2200      	movs	r2, #0
 8018b1e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018b22:	2101      	movs	r1, #1
 8018b24:	f10d 0306 	add.w	r3, sp, #6
 8018b28:	2002      	movs	r0, #2
 8018b2a:	f7ff ffbb 	bl	8018aa4 <enet_phy_write_read>
 8018b2e:	b350      	cbz	r0, 8018b86 <enet_phy_config+0x8e>
 8018b30:	481b      	ldr	r0, [pc, #108]	; (8018ba0 <enet_phy_config+0xa8>)
 8018b32:	2200      	movs	r2, #0
 8018b34:	f7ff fea2 	bl	801887c <enet_delay>
 8018b38:	2101      	movs	r1, #1
 8018b3a:	f10d 0306 	add.w	r3, sp, #6
 8018b3e:	4610      	mov	r0, r2
 8018b40:	f7ff ffb0 	bl	8018aa4 <enet_phy_write_read>
 8018b44:	b1f8      	cbz	r0, 8018b86 <enet_phy_config+0x8e>
 8018b46:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018b4a:	43c0      	mvns	r0, r0
 8018b4c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8018b50:	e01a      	b.n	8018b88 <enet_phy_config+0x90>
 8018b52:	4b14      	ldr	r3, [pc, #80]	; (8018ba4 <enet_phy_config+0xac>)
 8018b54:	4a14      	ldr	r2, [pc, #80]	; (8018ba8 <enet_phy_config+0xb0>)
 8018b56:	4403      	add	r3, r0
 8018b58:	4293      	cmp	r3, r2
 8018b5a:	d802      	bhi.n	8018b62 <enet_phy_config+0x6a>
 8018b5c:	f044 040c 	orr.w	r4, r4, #12
 8018b60:	e7d9      	b.n	8018b16 <enet_phy_config+0x1e>
 8018b62:	4b12      	ldr	r3, [pc, #72]	; (8018bac <enet_phy_config+0xb4>)
 8018b64:	4a12      	ldr	r2, [pc, #72]	; (8018bb0 <enet_phy_config+0xb8>)
 8018b66:	4403      	add	r3, r0
 8018b68:	4293      	cmp	r3, r2
 8018b6a:	d3d4      	bcc.n	8018b16 <enet_phy_config+0x1e>
 8018b6c:	4b11      	ldr	r3, [pc, #68]	; (8018bb4 <enet_phy_config+0xbc>)
 8018b6e:	4a12      	ldr	r2, [pc, #72]	; (8018bb8 <enet_phy_config+0xc0>)
 8018b70:	4403      	add	r3, r0
 8018b72:	4293      	cmp	r3, r2
 8018b74:	d802      	bhi.n	8018b7c <enet_phy_config+0x84>
 8018b76:	f044 0404 	orr.w	r4, r4, #4
 8018b7a:	e7cc      	b.n	8018b16 <enet_phy_config+0x1e>
 8018b7c:	4b0f      	ldr	r3, [pc, #60]	; (8018bbc <enet_phy_config+0xc4>)
 8018b7e:	4a10      	ldr	r2, [pc, #64]	; (8018bc0 <enet_phy_config+0xc8>)
 8018b80:	4403      	add	r3, r0
 8018b82:	4293      	cmp	r3, r2
 8018b84:	d902      	bls.n	8018b8c <enet_phy_config+0x94>
 8018b86:	2000      	movs	r0, #0
 8018b88:	b003      	add	sp, #12
 8018b8a:	bd30      	pop	{r4, r5, pc}
 8018b8c:	f044 0410 	orr.w	r4, r4, #16
 8018b90:	e7c1      	b.n	8018b16 <enet_phy_config+0x1e>
 8018b92:	bf00      	nop
 8018b94:	40028000 	andmi	r8, r2, r0
 8018b98:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8018b9c:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8018ba0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8018ba4:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8018ba8:	017d783f 	cmneq	sp, pc, lsr r8
 8018bac:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8018bb0:	02625a00 	rsbeq	r5, r2, #0, 20
 8018bb4:	fa0a1f00 	blx	82a07bc <__exidx_end+0x2829b8>
 8018bb8:	02faf07f 	rscseq	pc, sl, #127	; 0x7f
 8018bbc:	f70f2e80 			; <UNDEFINED> instruction: 0xf70f2e80
 8018bc0:	02faf080 	rscseq	pc, sl, #128	; 0x80

08018bc4 <enet_init>:
 8018bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018bc6:	2300      	movs	r3, #0
 8018bc8:	4604      	mov	r4, r0
 8018bca:	460d      	mov	r5, r1
 8018bcc:	4616      	mov	r6, r2
 8018bce:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018bd2:	f7ff ff91 	bl	8018af8 <enet_phy_config>
 8018bd6:	2800      	cmp	r0, #0
 8018bd8:	d032      	beq.n	8018c40 <enet_init+0x7c>
 8018bda:	4b39      	ldr	r3, [pc, #228]	; (8018cc0 <enet_init+0xfc>)
 8018bdc:	4a39      	ldr	r2, [pc, #228]	; (8018cc4 <enet_init+0x100>)
 8018bde:	6819      	ldr	r1, [r3, #0]
 8018be0:	400a      	ands	r2, r1
 8018be2:	601a      	str	r2, [r3, #0]
 8018be4:	2200      	movs	r2, #0
 8018be6:	605a      	str	r2, [r3, #4]
 8018be8:	609a      	str	r2, [r3, #8]
 8018bea:	60da      	str	r2, [r3, #12]
 8018bec:	6999      	ldr	r1, [r3, #24]
 8018bee:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8018bf2:	0409      	lsls	r1, r1, #16
 8018bf4:	0c09      	lsrs	r1, r1, #16
 8018bf6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8018bfa:	6199      	str	r1, [r3, #24]
 8018bfc:	4932      	ldr	r1, [pc, #200]	; (8018cc8 <enet_init+0x104>)
 8018bfe:	61da      	str	r2, [r3, #28]
 8018c00:	6988      	ldr	r0, [r1, #24]
 8018c02:	4b32      	ldr	r3, [pc, #200]	; (8018ccc <enet_init+0x108>)
 8018c04:	4003      	ands	r3, r0
 8018c06:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8018c0a:	618b      	str	r3, [r1, #24]
 8018c0c:	680b      	ldr	r3, [r1, #0]
 8018c0e:	4b30      	ldr	r3, [pc, #192]	; (8018cd0 <enet_init+0x10c>)
 8018c10:	600b      	str	r3, [r1, #0]
 8018c12:	2c01      	cmp	r4, #1
 8018c14:	d01e      	beq.n	8018c54 <enet_init+0x90>
 8018c16:	08e3      	lsrs	r3, r4, #3
 8018c18:	0861      	lsrs	r1, r4, #1
 8018c1a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8018c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c22:	430b      	orrs	r3, r1
 8018c24:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018c28:	2101      	movs	r1, #1
 8018c2a:	f10d 0306 	add.w	r3, sp, #6
 8018c2e:	2002      	movs	r0, #2
 8018c30:	f7ff ff38 	bl	8018aa4 <enet_phy_write_read>
 8018c34:	b158      	cbz	r0, 8018c4e <enet_init+0x8a>
 8018c36:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018c3a:	f7ff fe1f 	bl	801887c <enet_delay>
 8018c3e:	e05e      	b.n	8018cfe <enet_init+0x13a>
 8018c40:	4824      	ldr	r0, [pc, #144]	; (8018cd4 <enet_init+0x110>)
 8018c42:	f7ff fe1b 	bl	801887c <enet_delay>
 8018c46:	f7ff ff57 	bl	8018af8 <enet_phy_config>
 8018c4a:	2800      	cmp	r0, #0
 8018c4c:	d1c5      	bne.n	8018bda <enet_init+0x16>
 8018c4e:	2000      	movs	r0, #0
 8018c50:	b003      	add	sp, #12
 8018c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c54:	4f20      	ldr	r7, [pc, #128]	; (8018cd8 <enet_init+0x114>)
 8018c56:	4614      	mov	r4, r2
 8018c58:	2201      	movs	r2, #1
 8018c5a:	4611      	mov	r1, r2
 8018c5c:	f10d 0306 	add.w	r3, sp, #6
 8018c60:	2000      	movs	r0, #0
 8018c62:	f7ff ff1f 	bl	8018aa4 <enet_phy_write_read>
 8018c66:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018c6a:	f002 0204 	and.w	r2, r2, #4
 8018c6e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018c72:	3401      	adds	r4, #1
 8018c74:	b912      	cbnz	r2, 8018c7c <enet_init+0xb8>
 8018c76:	42bc      	cmp	r4, r7
 8018c78:	d1ee      	bne.n	8018c58 <enet_init+0x94>
 8018c7a:	e7e8      	b.n	8018c4e <enet_init+0x8a>
 8018c7c:	42bc      	cmp	r4, r7
 8018c7e:	d0e6      	beq.n	8018c4e <enet_init+0x8a>
 8018c80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018c84:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018c88:	2101      	movs	r1, #1
 8018c8a:	2200      	movs	r2, #0
 8018c8c:	2002      	movs	r0, #2
 8018c8e:	f7ff ff09 	bl	8018aa4 <enet_phy_write_read>
 8018c92:	2800      	cmp	r0, #0
 8018c94:	d0db      	beq.n	8018c4e <enet_init+0x8a>
 8018c96:	4f10      	ldr	r7, [pc, #64]	; (8018cd8 <enet_init+0x114>)
 8018c98:	2400      	movs	r4, #0
 8018c9a:	2201      	movs	r2, #1
 8018c9c:	4611      	mov	r1, r2
 8018c9e:	f10d 0306 	add.w	r3, sp, #6
 8018ca2:	2000      	movs	r0, #0
 8018ca4:	f7ff fefe 	bl	8018aa4 <enet_phy_write_read>
 8018ca8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018cac:	f002 0220 	and.w	r2, r2, #32
 8018cb0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018cb4:	3401      	adds	r4, #1
 8018cb6:	b98a      	cbnz	r2, 8018cdc <enet_init+0x118>
 8018cb8:	42bc      	cmp	r4, r7
 8018cba:	d1ee      	bne.n	8018c9a <enet_init+0xd6>
 8018cbc:	e7c7      	b.n	8018c4e <enet_init+0x8a>
 8018cbe:	bf00      	nop
 8018cc0:	40028000 	andmi	r8, r2, r0
 8018cc4:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8018cc8:	40029000 	andmi	r9, r2, r0
 8018ccc:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 8018cd0:	02c16000 	sbceq	r6, r1, #0
 8018cd4:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8018cd8:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8018cdc:	42bc      	cmp	r4, r7
 8018cde:	d0b6      	beq.n	8018c4e <enet_init+0x8a>
 8018ce0:	2101      	movs	r1, #1
 8018ce2:	2210      	movs	r2, #16
 8018ce4:	2000      	movs	r0, #0
 8018ce6:	f7ff fedd 	bl	8018aa4 <enet_phy_write_read>
 8018cea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018cee:	f3c3 0480 	ubfx	r4, r3, #2, #1
 8018cf2:	0799      	lsls	r1, r3, #30
 8018cf4:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8018cf8:	d401      	bmi.n	8018cfe <enet_init+0x13a>
 8018cfa:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8018cfe:	4b69      	ldr	r3, [pc, #420]	; (8018ea4 <enet_init+0x2e0>)
 8018d00:	681a      	ldr	r2, [r3, #0]
 8018d02:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 8018d06:	4314      	orrs	r4, r2
 8018d08:	056a      	lsls	r2, r5, #21
 8018d0a:	601c      	str	r4, [r3, #0]
 8018d0c:	d50b      	bpl.n	8018d26 <enet_init+0x162>
 8018d0e:	681a      	ldr	r2, [r3, #0]
 8018d10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018d14:	601a      	str	r2, [r3, #0]
 8018d16:	4a64      	ldr	r2, [pc, #400]	; (8018ea8 <enet_init+0x2e4>)
 8018d18:	6993      	ldr	r3, [r2, #24]
 8018d1a:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8018d1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8018d22:	431d      	orrs	r5, r3
 8018d24:	6195      	str	r5, [r2, #24]
 8018d26:	485f      	ldr	r0, [pc, #380]	; (8018ea4 <enet_init+0x2e0>)
 8018d28:	6843      	ldr	r3, [r0, #4]
 8018d2a:	431e      	orrs	r6, r3
 8018d2c:	4b5f      	ldr	r3, [pc, #380]	; (8018eac <enet_init+0x2e8>)
 8018d2e:	6046      	str	r6, [r0, #4]
 8018d30:	681a      	ldr	r2, [r3, #0]
 8018d32:	07d7      	lsls	r7, r2, #31
 8018d34:	d513      	bpl.n	8018d5e <enet_init+0x19a>
 8018d36:	6801      	ldr	r1, [r0, #0]
 8018d38:	685a      	ldr	r2, [r3, #4]
 8018d3a:	4c5d      	ldr	r4, [pc, #372]	; (8018eb0 <enet_init+0x2ec>)
 8018d3c:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 8018d40:	4014      	ands	r4, r2
 8018d42:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8018d46:	4321      	orrs	r1, r4
 8018d48:	6001      	str	r1, [r0, #0]
 8018d4a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8018d4e:	0892      	lsrs	r2, r2, #2
 8018d50:	6981      	ldr	r1, [r0, #24]
 8018d52:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8018d56:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8018d5a:	430a      	orrs	r2, r1
 8018d5c:	6182      	str	r2, [r0, #24]
 8018d5e:	681a      	ldr	r2, [r3, #0]
 8018d60:	0796      	lsls	r6, r2, #30
 8018d62:	d508      	bpl.n	8018d76 <enet_init+0x1b2>
 8018d64:	4950      	ldr	r1, [pc, #320]	; (8018ea8 <enet_init+0x2e4>)
 8018d66:	6898      	ldr	r0, [r3, #8]
 8018d68:	680a      	ldr	r2, [r1, #0]
 8018d6a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8018d6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8018d72:	4302      	orrs	r2, r0
 8018d74:	600a      	str	r2, [r1, #0]
 8018d76:	681a      	ldr	r2, [r3, #0]
 8018d78:	0755      	lsls	r5, r2, #29
 8018d7a:	d508      	bpl.n	8018d8e <enet_init+0x1ca>
 8018d7c:	494a      	ldr	r1, [pc, #296]	; (8018ea8 <enet_init+0x2e4>)
 8018d7e:	68d8      	ldr	r0, [r3, #12]
 8018d80:	680a      	ldr	r2, [r1, #0]
 8018d82:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8018d86:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8018d8a:	4302      	orrs	r2, r0
 8018d8c:	600a      	str	r2, [r1, #0]
 8018d8e:	681a      	ldr	r2, [r3, #0]
 8018d90:	0714      	lsls	r4, r2, #28
 8018d92:	d508      	bpl.n	8018da6 <enet_init+0x1e2>
 8018d94:	4944      	ldr	r1, [pc, #272]	; (8018ea8 <enet_init+0x2e4>)
 8018d96:	6918      	ldr	r0, [r3, #16]
 8018d98:	680a      	ldr	r2, [r1, #0]
 8018d9a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8018d9e:	f022 0202 	bic.w	r2, r2, #2
 8018da2:	4302      	orrs	r2, r0
 8018da4:	600a      	str	r2, [r1, #0]
 8018da6:	681a      	ldr	r2, [r3, #0]
 8018da8:	06d0      	lsls	r0, r2, #27
 8018daa:	d506      	bpl.n	8018dba <enet_init+0x1f6>
 8018dac:	493e      	ldr	r1, [pc, #248]	; (8018ea8 <enet_init+0x2e4>)
 8018dae:	4a41      	ldr	r2, [pc, #260]	; (8018eb4 <enet_init+0x2f0>)
 8018db0:	6988      	ldr	r0, [r1, #24]
 8018db2:	4002      	ands	r2, r0
 8018db4:	6958      	ldr	r0, [r3, #20]
 8018db6:	4302      	orrs	r2, r0
 8018db8:	618a      	str	r2, [r1, #24]
 8018dba:	681a      	ldr	r2, [r3, #0]
 8018dbc:	0691      	lsls	r1, r2, #26
 8018dbe:	d511      	bpl.n	8018de4 <enet_init+0x220>
 8018dc0:	4839      	ldr	r0, [pc, #228]	; (8018ea8 <enet_init+0x2e4>)
 8018dc2:	699a      	ldr	r2, [r3, #24]
 8018dc4:	6981      	ldr	r1, [r0, #24]
 8018dc6:	4c3c      	ldr	r4, [pc, #240]	; (8018eb8 <enet_init+0x2f4>)
 8018dc8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8018dcc:	4014      	ands	r4, r2
 8018dce:	f021 0104 	bic.w	r1, r1, #4
 8018dd2:	4321      	orrs	r1, r4
 8018dd4:	6181      	str	r1, [r0, #24]
 8018dd6:	6801      	ldr	r1, [r0, #0]
 8018dd8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8018ddc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8018de0:	430a      	orrs	r2, r1
 8018de2:	6002      	str	r2, [r0, #0]
 8018de4:	681a      	ldr	r2, [r3, #0]
 8018de6:	0652      	lsls	r2, r2, #25
 8018de8:	d506      	bpl.n	8018df8 <enet_init+0x234>
 8018dea:	492e      	ldr	r1, [pc, #184]	; (8018ea4 <enet_init+0x2e0>)
 8018dec:	69d8      	ldr	r0, [r3, #28]
 8018dee:	69ca      	ldr	r2, [r1, #28]
 8018df0:	0c52      	lsrs	r2, r2, #17
 8018df2:	0452      	lsls	r2, r2, #17
 8018df4:	4302      	orrs	r2, r0
 8018df6:	61ca      	str	r2, [r1, #28]
 8018df8:	681a      	ldr	r2, [r3, #0]
 8018dfa:	0617      	lsls	r7, r2, #24
 8018dfc:	d517      	bpl.n	8018e2e <enet_init+0x26a>
 8018dfe:	4c29      	ldr	r4, [pc, #164]	; (8018ea4 <enet_init+0x2e0>)
 8018e00:	6a1a      	ldr	r2, [r3, #32]
 8018e02:	69a0      	ldr	r0, [r4, #24]
 8018e04:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8018e08:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8018e0c:	0400      	lsls	r0, r0, #16
 8018e0e:	0c00      	lsrs	r0, r0, #16
 8018e10:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8018e14:	4301      	orrs	r1, r0
 8018e16:	4824      	ldr	r0, [pc, #144]	; (8018ea8 <enet_init+0x2e4>)
 8018e18:	61a1      	str	r1, [r4, #24]
 8018e1a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8018e1e:	0a12      	lsrs	r2, r2, #8
 8018e20:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8018e24:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8018e28:	430a      	orrs	r2, r1
 8018e2a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8018e2e:	681a      	ldr	r2, [r3, #0]
 8018e30:	05d6      	lsls	r6, r2, #23
 8018e32:	bf42      	ittt	mi
 8018e34:	4a1b      	ldrmi	r2, [pc, #108]	; (8018ea4 <enet_init+0x2e0>)
 8018e36:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8018e38:	6091      	strmi	r1, [r2, #8]
 8018e3a:	681a      	ldr	r2, [r3, #0]
 8018e3c:	0595      	lsls	r5, r2, #22
 8018e3e:	bf42      	ittt	mi
 8018e40:	4a18      	ldrmi	r2, [pc, #96]	; (8018ea4 <enet_init+0x2e0>)
 8018e42:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8018e44:	60d1      	strmi	r1, [r2, #12]
 8018e46:	681a      	ldr	r2, [r3, #0]
 8018e48:	0554      	lsls	r4, r2, #21
 8018e4a:	d508      	bpl.n	8018e5e <enet_init+0x29a>
 8018e4c:	4915      	ldr	r1, [pc, #84]	; (8018ea4 <enet_init+0x2e0>)
 8018e4e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8018e50:	684a      	ldr	r2, [r1, #4]
 8018e52:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8018e56:	f022 0206 	bic.w	r2, r2, #6
 8018e5a:	4302      	orrs	r2, r0
 8018e5c:	604a      	str	r2, [r1, #4]
 8018e5e:	681a      	ldr	r2, [r3, #0]
 8018e60:	0510      	lsls	r0, r2, #20
 8018e62:	d508      	bpl.n	8018e76 <enet_init+0x2b2>
 8018e64:	490f      	ldr	r1, [pc, #60]	; (8018ea4 <enet_init+0x2e0>)
 8018e66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018e68:	680a      	ldr	r2, [r1, #0]
 8018e6a:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8018e6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8018e72:	4302      	orrs	r2, r0
 8018e74:	600a      	str	r2, [r1, #0]
 8018e76:	681a      	ldr	r2, [r3, #0]
 8018e78:	04d1      	lsls	r1, r2, #19
 8018e7a:	d506      	bpl.n	8018e8a <enet_init+0x2c6>
 8018e7c:	4909      	ldr	r1, [pc, #36]	; (8018ea4 <enet_init+0x2e0>)
 8018e7e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018e80:	680a      	ldr	r2, [r1, #0]
 8018e82:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8018e86:	4302      	orrs	r2, r0
 8018e88:	600a      	str	r2, [r1, #0]
 8018e8a:	681a      	ldr	r2, [r3, #0]
 8018e8c:	0492      	lsls	r2, r2, #18
 8018e8e:	d506      	bpl.n	8018e9e <enet_init+0x2da>
 8018e90:	4904      	ldr	r1, [pc, #16]	; (8018ea4 <enet_init+0x2e0>)
 8018e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e94:	680a      	ldr	r2, [r1, #0]
 8018e96:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8018e9a:	4313      	orrs	r3, r2
 8018e9c:	600b      	str	r3, [r1, #0]
 8018e9e:	2001      	movs	r0, #1
 8018ea0:	e6d6      	b.n	8018c50 <enet_init+0x8c>
 8018ea2:	bf00      	nop
 8018ea4:	40028000 	andmi	r8, r2, r0
 8018ea8:	40029000 	andmi	r9, r2, r0
 8018eac:	2000fdc8 	andcs	pc, r0, r8, asr #27
 8018eb0:	02000080 	andeq	r0, r0, #128	; 0x80
 8018eb4:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c
 8018eb8:	01000004 	tsteq	r0, r4

08018ebc <enet_txfifo_flush>:
 8018ebc:	4b06      	ldr	r3, [pc, #24]	; (8018ed8 <enet_txfifo_flush+0x1c>)
 8018ebe:	4807      	ldr	r0, [pc, #28]	; (8018edc <enet_txfifo_flush+0x20>)
 8018ec0:	699a      	ldr	r2, [r3, #24]
 8018ec2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8018ec6:	619a      	str	r2, [r3, #24]
 8018ec8:	699a      	ldr	r2, [r3, #24]
 8018eca:	02d2      	lsls	r2, r2, #11
 8018ecc:	d502      	bpl.n	8018ed4 <enet_txfifo_flush+0x18>
 8018ece:	3801      	subs	r0, #1
 8018ed0:	d1fa      	bne.n	8018ec8 <enet_txfifo_flush+0xc>
 8018ed2:	4770      	bx	lr
 8018ed4:	2001      	movs	r0, #1
 8018ed6:	4770      	bx	lr
 8018ed8:	40029000 	andmi	r9, r2, r0
 8018edc:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08018ee0 <enet_tx_enable>:
 8018ee0:	4a06      	ldr	r2, [pc, #24]	; (8018efc <enet_tx_enable+0x1c>)
 8018ee2:	b508      	push	{r3, lr}
 8018ee4:	6813      	ldr	r3, [r2, #0]
 8018ee6:	f043 0308 	orr.w	r3, r3, #8
 8018eea:	6013      	str	r3, [r2, #0]
 8018eec:	f7ff ffe6 	bl	8018ebc <enet_txfifo_flush>
 8018ef0:	4a03      	ldr	r2, [pc, #12]	; (8018f00 <enet_tx_enable+0x20>)
 8018ef2:	6993      	ldr	r3, [r2, #24]
 8018ef4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018ef8:	6193      	str	r3, [r2, #24]
 8018efa:	bd08      	pop	{r3, pc}
 8018efc:	40028000 	andmi	r8, r2, r0
 8018f00:	40029000 	andmi	r9, r2, r0

08018f04 <enet_enable>:
 8018f04:	b508      	push	{r3, lr}
 8018f06:	f7ff ffeb 	bl	8018ee0 <enet_tx_enable>
 8018f0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018f0e:	f7ff bdbb 	b.w	8018a88 <enet_rx_enable>
	...

08018f14 <enet_desc_information_get>:
 8018f14:	2905      	cmp	r1, #5
 8018f16:	d820      	bhi.n	8018f5a <enet_desc_information_get+0x46>
 8018f18:	e8df f001 	tbb	[pc, r1]
 8018f1c:	0309191b 	movweq	r1, #39195	; 0x991b
 8018f20:	68401907 	stmdavs	r0, {r0, r1, r2, r8, fp, ip}^
 8018f24:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8018f28:	4770      	bx	lr
 8018f2a:	88c0      	ldrh	r0, [r0, #6]
 8018f2c:	e7fa      	b.n	8018f24 <enet_desc_information_get+0x10>
 8018f2e:	6802      	ldr	r2, [r0, #0]
 8018f30:	f3c2 430d 	ubfx	r3, r2, #16, #14
 8018f34:	2b04      	cmp	r3, #4
 8018f36:	d913      	bls.n	8018f60 <enet_desc_information_get+0x4c>
 8018f38:	490a      	ldr	r1, [pc, #40]	; (8018f64 <enet_desc_information_get+0x50>)
 8018f3a:	6809      	ldr	r1, [r1, #0]
 8018f3c:	0189      	lsls	r1, r1, #6
 8018f3e:	f1a3 0004 	sub.w	r0, r3, #4
 8018f42:	d50e      	bpl.n	8018f62 <enet_desc_information_get+0x4e>
 8018f44:	f012 0f20 	tst.w	r2, #32
 8018f48:	bf18      	it	ne
 8018f4a:	4618      	movne	r0, r3
 8018f4c:	4770      	bx	lr
 8018f4e:	6880      	ldr	r0, [r0, #8]
 8018f50:	4770      	bx	lr
 8018f52:	6800      	ldr	r0, [r0, #0]
 8018f54:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8018f58:	4770      	bx	lr
 8018f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f5e:	4770      	bx	lr
 8018f60:	2000      	movs	r0, #0
 8018f62:	4770      	bx	lr
 8018f64:	40028000 	andmi	r8, r2, r0

08018f68 <enet_rxframe_drop>:
 8018f68:	4815      	ldr	r0, [pc, #84]	; (8018fc0 <enet_rxframe_drop+0x58>)
 8018f6a:	4916      	ldr	r1, [pc, #88]	; (8018fc4 <enet_rxframe_drop+0x5c>)
 8018f6c:	6802      	ldr	r2, [r0, #0]
 8018f6e:	b510      	push	{r4, lr}
 8018f70:	6854      	ldr	r4, [r2, #4]
 8018f72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8018f76:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8018f7a:	6013      	str	r3, [r2, #0]
 8018f7c:	680b      	ldr	r3, [r1, #0]
 8018f7e:	d009      	beq.n	8018f94 <enet_rxframe_drop+0x2c>
 8018f80:	b12b      	cbz	r3, 8018f8e <enet_rxframe_drop+0x26>
 8018f82:	68da      	ldr	r2, [r3, #12]
 8018f84:	6002      	str	r2, [r0, #0]
 8018f86:	681a      	ldr	r2, [r3, #0]
 8018f88:	b1ba      	cbz	r2, 8018fba <enet_rxframe_drop+0x52>
 8018f8a:	600a      	str	r2, [r1, #0]
 8018f8c:	bd10      	pop	{r4, pc}
 8018f8e:	68d3      	ldr	r3, [r2, #12]
 8018f90:	6003      	str	r3, [r0, #0]
 8018f92:	e7fb      	b.n	8018f8c <enet_rxframe_drop+0x24>
 8018f94:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8018f98:	4c0b      	ldr	r4, [pc, #44]	; (8018fc8 <enet_rxframe_drop+0x60>)
 8018f9a:	d006      	beq.n	8018faa <enet_rxframe_drop+0x42>
 8018f9c:	68e2      	ldr	r2, [r4, #12]
 8018f9e:	6002      	str	r2, [r0, #0]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d0f3      	beq.n	8018f8c <enet_rxframe_drop+0x24>
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	600b      	str	r3, [r1, #0]
 8018fa8:	e7f0      	b.n	8018f8c <enet_rxframe_drop+0x24>
 8018faa:	6824      	ldr	r4, [r4, #0]
 8018fac:	3210      	adds	r2, #16
 8018fae:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8018fb2:	4422      	add	r2, r4
 8018fb4:	6002      	str	r2, [r0, #0]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d0e8      	beq.n	8018f8c <enet_rxframe_drop+0x24>
 8018fba:	3310      	adds	r3, #16
 8018fbc:	e7f3      	b.n	8018fa6 <enet_rxframe_drop+0x3e>
 8018fbe:	bf00      	nop
 8018fc0:	2000fdc0 	andcs	pc, r0, r0, asr #27
 8018fc4:	2000fdb8 			; <UNDEFINED> instruction: 0x2000fdb8
 8018fc8:	40029000 	andmi	r9, r2, r0

08018fcc <enet_rxframe_size_get>:
 8018fcc:	b508      	push	{r3, lr}
 8018fce:	4b10      	ldr	r3, [pc, #64]	; (8019010 <enet_rxframe_size_get+0x44>)
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	db19      	blt.n	801900c <enet_rxframe_size_get+0x40>
 8018fd8:	f403 4203 	and.w	r2, r3, #33536	; 0x8300
 8018fdc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8018fe0:	d003      	beq.n	8018fea <enet_rxframe_size_get+0x1e>
 8018fe2:	f7ff ffc1 	bl	8018f68 <enet_rxframe_drop>
 8018fe6:	2001      	movs	r0, #1
 8018fe8:	bd08      	pop	{r3, pc}
 8018fea:	f003 0221 	and.w	r2, r3, #33	; 0x21
 8018fee:	2a21      	cmp	r2, #33	; 0x21
 8018ff0:	d0f7      	beq.n	8018fe2 <enet_rxframe_size_get+0x16>
 8018ff2:	4908      	ldr	r1, [pc, #32]	; (8019014 <enet_rxframe_size_get+0x48>)
 8018ff4:	6809      	ldr	r1, [r1, #0]
 8018ff6:	f3c3 420d 	ubfx	r2, r3, #16, #14
 8018ffa:	0189      	lsls	r1, r1, #6
 8018ffc:	f1a2 0004 	sub.w	r0, r2, #4
 8019000:	d5f2      	bpl.n	8018fe8 <enet_rxframe_size_get+0x1c>
 8019002:	f013 0f20 	tst.w	r3, #32
 8019006:	bf18      	it	ne
 8019008:	4610      	movne	r0, r2
 801900a:	e7ed      	b.n	8018fe8 <enet_rxframe_size_get+0x1c>
 801900c:	2000      	movs	r0, #0
 801900e:	e7eb      	b.n	8018fe8 <enet_rxframe_size_get+0x1c>
 8019010:	2000fdc0 	andcs	pc, r0, r0, asr #27
 8019014:	40028000 	andmi	r8, r2, r0

08019018 <enet_initpara_reset>:
 8019018:	4b08      	ldr	r3, [pc, #32]	; (801903c <enet_initpara_reset+0x24>)
 801901a:	2200      	movs	r2, #0
 801901c:	e9c3 2200 	strd	r2, r2, [r3]
 8019020:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8019024:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8019028:	e9c3 2206 	strd	r2, r2, [r3, #24]
 801902c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8019030:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8019034:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8019038:	639a      	str	r2, [r3, #56]	; 0x38
 801903a:	4770      	bx	lr
 801903c:	2000fdc8 	andcs	pc, r0, r8, asr #27

08019040 <enet_deinit>:
 8019040:	b508      	push	{r3, lr}
 8019042:	f240 4019 	movw	r0, #1049	; 0x419
 8019046:	f000 f8da 	bl	80191fe <rcu_periph_reset_enable>
 801904a:	f240 4019 	movw	r0, #1049	; 0x419
 801904e:	f000 f8d8 	bl	8019202 <rcu_periph_reset_disable>
 8019052:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019056:	f7ff bfdf 	b.w	8019018 <enet_initpara_reset>
	...

0801905c <fwdgt_enable>:
 801905c:	4b02      	ldr	r3, [pc, #8]	; (8019068 <fwdgt_enable+0xc>)
 801905e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8019062:	601a      	str	r2, [r3, #0]
 8019064:	4770      	bx	lr
 8019066:	bf00      	nop
 8019068:	40003000 	andmi	r3, r0, r0

0801906c <fwdgt_counter_reload>:
 801906c:	4b02      	ldr	r3, [pc, #8]	; (8019078 <fwdgt_counter_reload+0xc>)
 801906e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8019072:	601a      	str	r2, [r3, #0]
 8019074:	4770      	bx	lr
 8019076:	bf00      	nop
 8019078:	40003000 	andmi	r3, r0, r0

0801907c <fwdgt_config>:
 801907c:	4a12      	ldr	r2, [pc, #72]	; (80190c8 <fwdgt_config+0x4c>)
 801907e:	b510      	push	{r4, lr}
 8019080:	f245 5355 	movw	r3, #21845	; 0x5555
 8019084:	4c11      	ldr	r4, [pc, #68]	; (80190cc <fwdgt_config+0x50>)
 8019086:	6013      	str	r3, [r2, #0]
 8019088:	68d3      	ldr	r3, [r2, #12]
 801908a:	3c01      	subs	r4, #1
 801908c:	f003 0301 	and.w	r3, r3, #1
 8019090:	d013      	beq.n	80190ba <fwdgt_config+0x3e>
 8019092:	2b00      	cmp	r3, #0
 8019094:	d1f8      	bne.n	8019088 <fwdgt_config+0xc>
 8019096:	6051      	str	r1, [r2, #4]
 8019098:	490c      	ldr	r1, [pc, #48]	; (80190cc <fwdgt_config+0x50>)
 801909a:	4a0b      	ldr	r2, [pc, #44]	; (80190c8 <fwdgt_config+0x4c>)
 801909c:	68d3      	ldr	r3, [r2, #12]
 801909e:	3901      	subs	r1, #1
 80190a0:	f003 0302 	and.w	r3, r3, #2
 80190a4:	d00d      	beq.n	80190c2 <fwdgt_config+0x46>
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d1f8      	bne.n	801909c <fwdgt_config+0x20>
 80190aa:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80190ae:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80190b2:	6090      	str	r0, [r2, #8]
 80190b4:	6013      	str	r3, [r2, #0]
 80190b6:	2001      	movs	r0, #1
 80190b8:	e002      	b.n	80190c0 <fwdgt_config+0x44>
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d0eb      	beq.n	8019096 <fwdgt_config+0x1a>
 80190be:	2000      	movs	r0, #0
 80190c0:	bd10      	pop	{r4, pc}
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d1fb      	bne.n	80190be <fwdgt_config+0x42>
 80190c6:	e7f0      	b.n	80190aa <fwdgt_config+0x2e>
 80190c8:	40003000 	andmi	r3, r0, r0
 80190cc:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080190d0 <gpio_mode_set>:
 80190d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190d4:	6805      	ldr	r5, [r0, #0]
 80190d6:	68c4      	ldr	r4, [r0, #12]
 80190d8:	2600      	movs	r6, #0
 80190da:	f04f 0e03 	mov.w	lr, #3
 80190de:	fa23 f706 	lsr.w	r7, r3, r6
 80190e2:	07ff      	lsls	r7, r7, #31
 80190e4:	d50d      	bpl.n	8019102 <gpio_mode_set+0x32>
 80190e6:	0077      	lsls	r7, r6, #1
 80190e8:	fa0e fc07 	lsl.w	ip, lr, r7
 80190ec:	fa01 f807 	lsl.w	r8, r1, r7
 80190f0:	ea25 050c 	bic.w	r5, r5, ip
 80190f4:	ea24 040c 	bic.w	r4, r4, ip
 80190f8:	fa02 f707 	lsl.w	r7, r2, r7
 80190fc:	ea48 0505 	orr.w	r5, r8, r5
 8019100:	433c      	orrs	r4, r7
 8019102:	3601      	adds	r6, #1
 8019104:	2e10      	cmp	r6, #16
 8019106:	d1ea      	bne.n	80190de <gpio_mode_set+0xe>
 8019108:	6005      	str	r5, [r0, #0]
 801910a:	60c4      	str	r4, [r0, #12]
 801910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019110 <gpio_output_options_set>:
 8019110:	2901      	cmp	r1, #1
 8019112:	6841      	ldr	r1, [r0, #4]
 8019114:	bf0c      	ite	eq
 8019116:	4319      	orreq	r1, r3
 8019118:	4399      	bicne	r1, r3
 801911a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801911c:	6041      	str	r1, [r0, #4]
 801911e:	6881      	ldr	r1, [r0, #8]
 8019120:	2400      	movs	r4, #0
 8019122:	2603      	movs	r6, #3
 8019124:	fa23 f504 	lsr.w	r5, r3, r4
 8019128:	07ed      	lsls	r5, r5, #31
 801912a:	d507      	bpl.n	801913c <gpio_output_options_set+0x2c>
 801912c:	0065      	lsls	r5, r4, #1
 801912e:	fa06 f705 	lsl.w	r7, r6, r5
 8019132:	ea21 0107 	bic.w	r1, r1, r7
 8019136:	fa02 f505 	lsl.w	r5, r2, r5
 801913a:	4329      	orrs	r1, r5
 801913c:	3401      	adds	r4, #1
 801913e:	2c10      	cmp	r4, #16
 8019140:	d1f0      	bne.n	8019124 <gpio_output_options_set+0x14>
 8019142:	6081      	str	r1, [r0, #8]
 8019144:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019146 <gpio_af_set>:
 8019146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019148:	6a06      	ldr	r6, [r0, #32]
 801914a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801914c:	2300      	movs	r3, #0
 801914e:	f04f 0c0f 	mov.w	ip, #15
 8019152:	fa22 f403 	lsr.w	r4, r2, r3
 8019156:	07e7      	lsls	r7, r4, #31
 8019158:	d507      	bpl.n	801916a <gpio_af_set+0x24>
 801915a:	009c      	lsls	r4, r3, #2
 801915c:	fa0c f704 	lsl.w	r7, ip, r4
 8019160:	ea26 0607 	bic.w	r6, r6, r7
 8019164:	fa01 f404 	lsl.w	r4, r1, r4
 8019168:	4326      	orrs	r6, r4
 801916a:	3301      	adds	r3, #1
 801916c:	2b08      	cmp	r3, #8
 801916e:	d1f0      	bne.n	8019152 <gpio_af_set+0xc>
 8019170:	2300      	movs	r3, #0
 8019172:	f04f 0c0f 	mov.w	ip, #15
 8019176:	f103 0408 	add.w	r4, r3, #8
 801917a:	fa22 f404 	lsr.w	r4, r2, r4
 801917e:	07e4      	lsls	r4, r4, #31
 8019180:	d507      	bpl.n	8019192 <gpio_af_set+0x4c>
 8019182:	009c      	lsls	r4, r3, #2
 8019184:	fa0c f704 	lsl.w	r7, ip, r4
 8019188:	ea25 0507 	bic.w	r5, r5, r7
 801918c:	fa01 f404 	lsl.w	r4, r1, r4
 8019190:	4325      	orrs	r5, r4
 8019192:	3301      	adds	r3, #1
 8019194:	2b08      	cmp	r3, #8
 8019196:	d1ee      	bne.n	8019176 <gpio_af_set+0x30>
 8019198:	6206      	str	r6, [r0, #32]
 801919a:	6245      	str	r5, [r0, #36]	; 0x24
 801919c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080191a0 <pmu_backup_ldo_config>:
 80191a0:	4b04      	ldr	r3, [pc, #16]	; (80191b4 <pmu_backup_ldo_config+0x14>)
 80191a2:	685a      	ldr	r2, [r3, #4]
 80191a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80191a8:	605a      	str	r2, [r3, #4]
 80191aa:	685a      	ldr	r2, [r3, #4]
 80191ac:	4310      	orrs	r0, r2
 80191ae:	6058      	str	r0, [r3, #4]
 80191b0:	4770      	bx	lr
 80191b2:	bf00      	nop
 80191b4:	40007000 	andmi	r7, r0, r0

080191b8 <pmu_backup_write_enable>:
 80191b8:	4a02      	ldr	r2, [pc, #8]	; (80191c4 <pmu_backup_write_enable+0xc>)
 80191ba:	6813      	ldr	r3, [r2, #0]
 80191bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80191c0:	6013      	str	r3, [r2, #0]
 80191c2:	4770      	bx	lr
 80191c4:	40007000 	andmi	r7, r0, r0

080191c8 <rcu_periph_clock_enable>:
 80191c8:	0983      	lsrs	r3, r0, #6
 80191ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80191ce:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80191d2:	f000 001f 	and.w	r0, r0, #31
 80191d6:	6819      	ldr	r1, [r3, #0]
 80191d8:	2201      	movs	r2, #1
 80191da:	4082      	lsls	r2, r0
 80191dc:	430a      	orrs	r2, r1
 80191de:	601a      	str	r2, [r3, #0]
 80191e0:	4770      	bx	lr

080191e2 <rcu_periph_clock_disable>:
 80191e2:	0983      	lsrs	r3, r0, #6
 80191e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80191e8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80191ec:	f000 001f 	and.w	r0, r0, #31
 80191f0:	681a      	ldr	r2, [r3, #0]
 80191f2:	2101      	movs	r1, #1
 80191f4:	4081      	lsls	r1, r0
 80191f6:	ea22 0201 	bic.w	r2, r2, r1
 80191fa:	601a      	str	r2, [r3, #0]
 80191fc:	4770      	bx	lr

080191fe <rcu_periph_reset_enable>:
 80191fe:	f7ff bfe3 	b.w	80191c8 <rcu_periph_clock_enable>

08019202 <rcu_periph_reset_disable>:
 8019202:	f7ff bfee 	b.w	80191e2 <rcu_periph_clock_disable>
	...

08019208 <rcu_ckout0_config>:
 8019208:	4a04      	ldr	r2, [pc, #16]	; (801921c <rcu_ckout0_config+0x14>)
 801920a:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 801920e:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8019212:	4319      	orrs	r1, r3
 8019214:	4308      	orrs	r0, r1
 8019216:	f8c2 0808 	str.w	r0, [r2, #2056]	; 0x808
 801921a:	4770      	bx	lr
 801921c:	40023000 	andmi	r3, r2, r0

08019220 <rcu_timer_clock_prescaler_config>:
 8019220:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8019224:	4298      	cmp	r0, r3
 8019226:	4b05      	ldr	r3, [pc, #20]	; (801923c <rcu_timer_clock_prescaler_config+0x1c>)
 8019228:	f8d3 288c 	ldr.w	r2, [r3, #2188]	; 0x88c
 801922c:	bf0c      	ite	eq
 801922e:	f022 7280 	biceq.w	r2, r2, #16777216	; 0x1000000
 8019232:	4302      	orrne	r2, r0
 8019234:	f8c3 288c 	str.w	r2, [r3, #2188]	; 0x88c
 8019238:	4770      	bx	lr
 801923a:	bf00      	nop
 801923c:	40023000 	andmi	r3, r2, r0

08019240 <rcu_clock_freq_get>:
 8019240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019242:	4b35      	ldr	r3, [pc, #212]	; (8019318 <rcu_clock_freq_get+0xd8>)
 8019244:	b089      	sub	sp, #36	; 0x24
 8019246:	4604      	mov	r4, r0
 8019248:	ad04      	add	r5, sp, #16
 801924a:	f103 0610 	add.w	r6, r3, #16
 801924e:	461f      	mov	r7, r3
 8019250:	6818      	ldr	r0, [r3, #0]
 8019252:	6859      	ldr	r1, [r3, #4]
 8019254:	462a      	mov	r2, r5
 8019256:	c203      	stmia	r2!, {r0, r1}
 8019258:	3308      	adds	r3, #8
 801925a:	42b3      	cmp	r3, r6
 801925c:	4615      	mov	r5, r2
 801925e:	d1f7      	bne.n	8019250 <rcu_clock_freq_get+0x10>
 8019260:	6938      	ldr	r0, [r7, #16]
 8019262:	6871      	ldr	r1, [r6, #4]
 8019264:	4a2d      	ldr	r2, [pc, #180]	; (801931c <rcu_clock_freq_get+0xdc>)
 8019266:	466b      	mov	r3, sp
 8019268:	c303      	stmia	r3!, {r0, r1}
 801926a:	c303      	stmia	r3!, {r0, r1}
 801926c:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8019270:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019274:	2b01      	cmp	r3, #1
 8019276:	d03f      	beq.n	80192f8 <rcu_clock_freq_get+0xb8>
 8019278:	2b02      	cmp	r3, #2
 801927a:	d13f      	bne.n	80192fc <rcu_clock_freq_get+0xbc>
 801927c:	f8d2 0804 	ldr.w	r0, [r2, #2052]	; 0x804
 8019280:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
 8019284:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8019288:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 801928c:	4d24      	ldr	r5, [pc, #144]	; (8019320 <rcu_clock_freq_get+0xe0>)
 801928e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8019292:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8019296:	f3c1 1188 	ubfx	r1, r1, #6, #9
 801929a:	f103 0301 	add.w	r3, r3, #1
 801929e:	4a21      	ldr	r2, [pc, #132]	; (8019324 <rcu_clock_freq_get+0xe4>)
 80192a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80192a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80192a8:	bf08      	it	eq
 80192aa:	462a      	moveq	r2, r5
 80192ac:	fbb2 f2f0 	udiv	r2, r2, r0
 80192b0:	434a      	muls	r2, r1
 80192b2:	fbb2 f0f3 	udiv	r0, r2, r3
 80192b6:	4919      	ldr	r1, [pc, #100]	; (801931c <rcu_clock_freq_get+0xdc>)
 80192b8:	f8d1 3808 	ldr.w	r3, [r1, #2056]	; 0x808
 80192bc:	f8d1 2808 	ldr.w	r2, [r1, #2056]	; 0x808
 80192c0:	f3c2 2282 	ubfx	r2, r2, #10, #3
 80192c4:	3220      	adds	r2, #32
 80192c6:	446a      	add	r2, sp
 80192c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80192cc:	f812 5c20 	ldrb.w	r5, [r2, #-32]
 80192d0:	f8d1 2808 	ldr.w	r2, [r1, #2056]	; 0x808
 80192d4:	3320      	adds	r3, #32
 80192d6:	446b      	add	r3, sp
 80192d8:	f3c2 3242 	ubfx	r2, r2, #13, #3
 80192dc:	3220      	adds	r2, #32
 80192de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80192e2:	446a      	add	r2, sp
 80192e4:	fa20 f303 	lsr.w	r3, r0, r3
 80192e8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80192ec:	2c03      	cmp	r4, #3
 80192ee:	d810      	bhi.n	8019312 <rcu_clock_freq_get+0xd2>
 80192f0:	e8df f004 	tbb	[pc, r4]
 80192f4:	0c090607 	stceq	6, cr0, [r9], {7}
 80192f8:	480a      	ldr	r0, [pc, #40]	; (8019324 <rcu_clock_freq_get+0xe4>)
 80192fa:	e7dc      	b.n	80192b6 <rcu_clock_freq_get+0x76>
 80192fc:	4808      	ldr	r0, [pc, #32]	; (8019320 <rcu_clock_freq_get+0xe0>)
 80192fe:	e7da      	b.n	80192b6 <rcu_clock_freq_get+0x76>
 8019300:	4618      	mov	r0, r3
 8019302:	b009      	add	sp, #36	; 0x24
 8019304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019306:	fa23 f005 	lsr.w	r0, r3, r5
 801930a:	e7fa      	b.n	8019302 <rcu_clock_freq_get+0xc2>
 801930c:	fa23 f002 	lsr.w	r0, r3, r2
 8019310:	e7f7      	b.n	8019302 <rcu_clock_freq_get+0xc2>
 8019312:	2000      	movs	r0, #0
 8019314:	e7f5      	b.n	8019302 <rcu_clock_freq_get+0xc2>
 8019316:	bf00      	nop
 8019318:	0801a7d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, sl, sp, pc}
 801931c:	40023000 	andmi	r3, r2, r0
 8019320:	00f42400 	rscseq	r2, r4, r0, lsl #8
 8019324:	017d7840 	cmneq	sp, r0, asr #16

08019328 <syscfg_enet_phy_interface_config>:
 8019328:	4a04      	ldr	r2, [pc, #16]	; (801933c <syscfg_enet_phy_interface_config+0x14>)
 801932a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 801932e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8019332:	4318      	orrs	r0, r3
 8019334:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
 8019338:	4770      	bx	lr
 801933a:	bf00      	nop
 801933c:	40013000 	andmi	r3, r1, r0

08019340 <timer_deinit>:
 8019340:	b508      	push	{r3, lr}
 8019342:	4b4e      	ldr	r3, [pc, #312]	; (801947c <timer_deinit+0x13c>)
 8019344:	4298      	cmp	r0, r3
 8019346:	f000 8092 	beq.w	801946e <timer_deinit+0x12e>
 801934a:	d822      	bhi.n	8019392 <timer_deinit+0x52>
 801934c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8019350:	4298      	cmp	r0, r3
 8019352:	d062      	beq.n	801941a <timer_deinit+0xda>
 8019354:	d80b      	bhi.n	801936e <timer_deinit+0x2e>
 8019356:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801935a:	4298      	cmp	r0, r3
 801935c:	d04f      	beq.n	80193fe <timer_deinit+0xbe>
 801935e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8019362:	4298      	cmp	r0, r3
 8019364:	d052      	beq.n	801940c <timer_deinit+0xcc>
 8019366:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801936a:	d041      	beq.n	80193f0 <timer_deinit+0xb0>
 801936c:	bd08      	pop	{r3, pc}
 801936e:	4b44      	ldr	r3, [pc, #272]	; (8019480 <timer_deinit+0x140>)
 8019370:	4298      	cmp	r0, r3
 8019372:	d059      	beq.n	8019428 <timer_deinit+0xe8>
 8019374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8019378:	4298      	cmp	r0, r3
 801937a:	d071      	beq.n	8019460 <timer_deinit+0x120>
 801937c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8019380:	4298      	cmp	r0, r3
 8019382:	d1f3      	bne.n	801936c <timer_deinit+0x2c>
 8019384:	f640 0004 	movw	r0, #2052	; 0x804
 8019388:	f7ff ff39 	bl	80191fe <rcu_periph_reset_enable>
 801938c:	f640 0004 	movw	r0, #2052	; 0x804
 8019390:	e02a      	b.n	80193e8 <timer_deinit+0xa8>
 8019392:	4b3c      	ldr	r3, [pc, #240]	; (8019484 <timer_deinit+0x144>)
 8019394:	4298      	cmp	r0, r3
 8019396:	d055      	beq.n	8019444 <timer_deinit+0x104>
 8019398:	d812      	bhi.n	80193c0 <timer_deinit+0x80>
 801939a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801939e:	4298      	cmp	r0, r3
 80193a0:	d01c      	beq.n	80193dc <timer_deinit+0x9c>
 80193a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80193a6:	4298      	cmp	r0, r3
 80193a8:	d045      	beq.n	8019436 <timer_deinit+0xf6>
 80193aa:	f5a3 4364 	sub.w	r3, r3, #58368	; 0xe400
 80193ae:	4298      	cmp	r0, r3
 80193b0:	d1dc      	bne.n	801936c <timer_deinit+0x2c>
 80193b2:	f640 0008 	movw	r0, #2056	; 0x808
 80193b6:	f7ff ff22 	bl	80191fe <rcu_periph_reset_enable>
 80193ba:	f640 0008 	movw	r0, #2056	; 0x808
 80193be:	e013      	b.n	80193e8 <timer_deinit+0xa8>
 80193c0:	4b31      	ldr	r3, [pc, #196]	; (8019488 <timer_deinit+0x148>)
 80193c2:	4298      	cmp	r0, r3
 80193c4:	d045      	beq.n	8019452 <timer_deinit+0x112>
 80193c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80193ca:	4298      	cmp	r0, r3
 80193cc:	d1ce      	bne.n	801936c <timer_deinit+0x2c>
 80193ce:	f640 1012 	movw	r0, #2322	; 0x912
 80193d2:	f7ff ff14 	bl	80191fe <rcu_periph_reset_enable>
 80193d6:	f640 1012 	movw	r0, #2322	; 0x912
 80193da:	e005      	b.n	80193e8 <timer_deinit+0xa8>
 80193dc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80193e0:	f7ff ff0d 	bl	80191fe <rcu_periph_reset_enable>
 80193e4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80193e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80193ec:	f7ff bf09 	b.w	8019202 <rcu_periph_reset_disable>
 80193f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80193f4:	f7ff ff03 	bl	80191fe <rcu_periph_reset_enable>
 80193f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80193fc:	e7f4      	b.n	80193e8 <timer_deinit+0xa8>
 80193fe:	f640 0001 	movw	r0, #2049	; 0x801
 8019402:	f7ff fefc 	bl	80191fe <rcu_periph_reset_enable>
 8019406:	f640 0001 	movw	r0, #2049	; 0x801
 801940a:	e7ed      	b.n	80193e8 <timer_deinit+0xa8>
 801940c:	f640 0002 	movw	r0, #2050	; 0x802
 8019410:	f7ff fef5 	bl	80191fe <rcu_periph_reset_enable>
 8019414:	f640 0002 	movw	r0, #2050	; 0x802
 8019418:	e7e6      	b.n	80193e8 <timer_deinit+0xa8>
 801941a:	f640 0003 	movw	r0, #2051	; 0x803
 801941e:	f7ff feee 	bl	80191fe <rcu_periph_reset_enable>
 8019422:	f640 0003 	movw	r0, #2051	; 0x803
 8019426:	e7df      	b.n	80193e8 <timer_deinit+0xa8>
 8019428:	f640 0005 	movw	r0, #2053	; 0x805
 801942c:	f7ff fee7 	bl	80191fe <rcu_periph_reset_enable>
 8019430:	f640 0005 	movw	r0, #2053	; 0x805
 8019434:	e7d8      	b.n	80193e8 <timer_deinit+0xa8>
 8019436:	f640 1001 	movw	r0, #2305	; 0x901
 801943a:	f7ff fee0 	bl	80191fe <rcu_periph_reset_enable>
 801943e:	f640 1001 	movw	r0, #2305	; 0x901
 8019442:	e7d1      	b.n	80193e8 <timer_deinit+0xa8>
 8019444:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8019448:	f7ff fed9 	bl	80191fe <rcu_periph_reset_enable>
 801944c:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8019450:	e7ca      	b.n	80193e8 <timer_deinit+0xa8>
 8019452:	f640 1011 	movw	r0, #2321	; 0x911
 8019456:	f7ff fed2 	bl	80191fe <rcu_periph_reset_enable>
 801945a:	f640 1011 	movw	r0, #2321	; 0x911
 801945e:	e7c3      	b.n	80193e8 <timer_deinit+0xa8>
 8019460:	f640 0006 	movw	r0, #2054	; 0x806
 8019464:	f7ff fecb 	bl	80191fe <rcu_periph_reset_enable>
 8019468:	f640 0006 	movw	r0, #2054	; 0x806
 801946c:	e7bc      	b.n	80193e8 <timer_deinit+0xa8>
 801946e:	f640 0007 	movw	r0, #2055	; 0x807
 8019472:	f7ff fec4 	bl	80191fe <rcu_periph_reset_enable>
 8019476:	f640 0007 	movw	r0, #2055	; 0x807
 801947a:	e7b5      	b.n	80193e8 <timer_deinit+0xa8>
 801947c:	40001c00 	andmi	r1, r0, r0, lsl #24
 8019480:	40001400 	andmi	r1, r0, r0, lsl #8
 8019484:	40014000 	andmi	r4, r1, r0
 8019488:	40014400 	andmi	r4, r1, r0, lsl #8

0801948c <timer_init>:
 801948c:	880b      	ldrh	r3, [r1, #0]
 801948e:	6283      	str	r3, [r0, #40]	; 0x28
 8019490:	4b1a      	ldr	r3, [pc, #104]	; (80194fc <timer_init+0x70>)
 8019492:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8019496:	429a      	cmp	r2, r3
 8019498:	d004      	beq.n	80194a4 <timer_init+0x18>
 801949a:	f420 6340 	bic.w	r3, r0, #3072	; 0xc00
 801949e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80194a2:	d10b      	bne.n	80194bc <timer_init+0x30>
 80194a4:	6803      	ldr	r3, [r0, #0]
 80194a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80194aa:	6003      	str	r3, [r0, #0]
 80194ac:	6802      	ldr	r2, [r0, #0]
 80194ae:	884b      	ldrh	r3, [r1, #2]
 80194b0:	4313      	orrs	r3, r2
 80194b2:	6003      	str	r3, [r0, #0]
 80194b4:	6802      	ldr	r2, [r0, #0]
 80194b6:	888b      	ldrh	r3, [r1, #4]
 80194b8:	4313      	orrs	r3, r2
 80194ba:	6003      	str	r3, [r0, #0]
 80194bc:	688b      	ldr	r3, [r1, #8]
 80194be:	62c3      	str	r3, [r0, #44]	; 0x2c
 80194c0:	4b0f      	ldr	r3, [pc, #60]	; (8019500 <timer_init+0x74>)
 80194c2:	4298      	cmp	r0, r3
 80194c4:	d003      	beq.n	80194ce <timer_init+0x42>
 80194c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80194ca:	4298      	cmp	r0, r3
 80194cc:	d104      	bne.n	80194d8 <timer_init+0x4c>
 80194ce:	6943      	ldr	r3, [r0, #20]
 80194d0:	f043 0301 	orr.w	r3, r3, #1
 80194d4:	6143      	str	r3, [r0, #20]
 80194d6:	4770      	bx	lr
 80194d8:	6803      	ldr	r3, [r0, #0]
 80194da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80194de:	6003      	str	r3, [r0, #0]
 80194e0:	6802      	ldr	r2, [r0, #0]
 80194e2:	88cb      	ldrh	r3, [r1, #6]
 80194e4:	4313      	orrs	r3, r2
 80194e6:	6003      	str	r3, [r0, #0]
 80194e8:	4b04      	ldr	r3, [pc, #16]	; (80194fc <timer_init+0x70>)
 80194ea:	4298      	cmp	r0, r3
 80194ec:	d002      	beq.n	80194f4 <timer_init+0x68>
 80194ee:	4b05      	ldr	r3, [pc, #20]	; (8019504 <timer_init+0x78>)
 80194f0:	4298      	cmp	r0, r3
 80194f2:	d1ec      	bne.n	80194ce <timer_init+0x42>
 80194f4:	7b0b      	ldrb	r3, [r1, #12]
 80194f6:	6303      	str	r3, [r0, #48]	; 0x30
 80194f8:	e7e9      	b.n	80194ce <timer_init+0x42>
 80194fa:	bf00      	nop
 80194fc:	40010000 	andmi	r0, r1, r0
 8019500:	40001000 	andmi	r1, r0, r0
 8019504:	40010400 	andmi	r0, r1, r0, lsl #8

08019508 <timer_enable>:
 8019508:	6803      	ldr	r3, [r0, #0]
 801950a:	f043 0301 	orr.w	r3, r3, #1
 801950e:	6003      	str	r3, [r0, #0]
 8019510:	4770      	bx	lr

08019512 <timer_interrupt_enable>:
 8019512:	68c3      	ldr	r3, [r0, #12]
 8019514:	4319      	orrs	r1, r3
 8019516:	60c1      	str	r1, [r0, #12]
 8019518:	4770      	bx	lr

0801951a <timer_interrupt_flag_clear>:
 801951a:	43c9      	mvns	r1, r1
 801951c:	6101      	str	r1, [r0, #16]
 801951e:	4770      	bx	lr

08019520 <timer_flag_clear>:
 8019520:	43c9      	mvns	r1, r1
 8019522:	6101      	str	r1, [r0, #16]
 8019524:	4770      	bx	lr

08019526 <timer_dma_enable>:
 8019526:	68c3      	ldr	r3, [r0, #12]
 8019528:	4319      	orrs	r1, r3
 801952a:	60c1      	str	r1, [r0, #12]
 801952c:	4770      	bx	lr
	...

08019530 <timer_channel_output_config>:
 8019530:	2903      	cmp	r1, #3
 8019532:	d83e      	bhi.n	80195b2 <timer_channel_output_config+0x82>
 8019534:	e8df f011 	tbh	[pc, r1, lsl #1]
 8019538:	003e0004 	eorseq	r0, lr, r4
 801953c:	00bc007d 	adcseq	r0, ip, sp, ror r0
 8019540:	6a03      	ldr	r3, [r0, #32]
 8019542:	f023 0301 	bic.w	r3, r3, #1
 8019546:	6203      	str	r3, [r0, #32]
 8019548:	6983      	ldr	r3, [r0, #24]
 801954a:	f023 0303 	bic.w	r3, r3, #3
 801954e:	6183      	str	r3, [r0, #24]
 8019550:	6a01      	ldr	r1, [r0, #32]
 8019552:	8813      	ldrh	r3, [r2, #0]
 8019554:	430b      	orrs	r3, r1
 8019556:	6203      	str	r3, [r0, #32]
 8019558:	6a03      	ldr	r3, [r0, #32]
 801955a:	f023 0302 	bic.w	r3, r3, #2
 801955e:	6203      	str	r3, [r0, #32]
 8019560:	6a01      	ldr	r1, [r0, #32]
 8019562:	8893      	ldrh	r3, [r2, #4]
 8019564:	430b      	orrs	r3, r1
 8019566:	6203      	str	r3, [r0, #32]
 8019568:	4b64      	ldr	r3, [pc, #400]	; (80196fc <timer_channel_output_config+0x1cc>)
 801956a:	f420 6180 	bic.w	r1, r0, #1024	; 0x400
 801956e:	4299      	cmp	r1, r3
 8019570:	d11f      	bne.n	80195b2 <timer_channel_output_config+0x82>
 8019572:	6a03      	ldr	r3, [r0, #32]
 8019574:	f023 0304 	bic.w	r3, r3, #4
 8019578:	6203      	str	r3, [r0, #32]
 801957a:	6a01      	ldr	r1, [r0, #32]
 801957c:	8853      	ldrh	r3, [r2, #2]
 801957e:	430b      	orrs	r3, r1
 8019580:	6203      	str	r3, [r0, #32]
 8019582:	6a03      	ldr	r3, [r0, #32]
 8019584:	f023 0308 	bic.w	r3, r3, #8
 8019588:	6203      	str	r3, [r0, #32]
 801958a:	6a01      	ldr	r1, [r0, #32]
 801958c:	88d3      	ldrh	r3, [r2, #6]
 801958e:	430b      	orrs	r3, r1
 8019590:	6203      	str	r3, [r0, #32]
 8019592:	6843      	ldr	r3, [r0, #4]
 8019594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019598:	6043      	str	r3, [r0, #4]
 801959a:	6841      	ldr	r1, [r0, #4]
 801959c:	8913      	ldrh	r3, [r2, #8]
 801959e:	430b      	orrs	r3, r1
 80195a0:	6043      	str	r3, [r0, #4]
 80195a2:	6843      	ldr	r3, [r0, #4]
 80195a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80195a8:	6043      	str	r3, [r0, #4]
 80195aa:	6841      	ldr	r1, [r0, #4]
 80195ac:	8953      	ldrh	r3, [r2, #10]
 80195ae:	430b      	orrs	r3, r1
 80195b0:	6043      	str	r3, [r0, #4]
 80195b2:	4770      	bx	lr
 80195b4:	6a03      	ldr	r3, [r0, #32]
 80195b6:	8811      	ldrh	r1, [r2, #0]
 80195b8:	f023 0310 	bic.w	r3, r3, #16
 80195bc:	6203      	str	r3, [r0, #32]
 80195be:	6983      	ldr	r3, [r0, #24]
 80195c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80195c4:	6183      	str	r3, [r0, #24]
 80195c6:	6a03      	ldr	r3, [r0, #32]
 80195c8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80195cc:	6203      	str	r3, [r0, #32]
 80195ce:	6a03      	ldr	r3, [r0, #32]
 80195d0:	8891      	ldrh	r1, [r2, #4]
 80195d2:	f023 0320 	bic.w	r3, r3, #32
 80195d6:	6203      	str	r3, [r0, #32]
 80195d8:	6a03      	ldr	r3, [r0, #32]
 80195da:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80195de:	6203      	str	r3, [r0, #32]
 80195e0:	4b46      	ldr	r3, [pc, #280]	; (80196fc <timer_channel_output_config+0x1cc>)
 80195e2:	f420 6180 	bic.w	r1, r0, #1024	; 0x400
 80195e6:	4299      	cmp	r1, r3
 80195e8:	d1e3      	bne.n	80195b2 <timer_channel_output_config+0x82>
 80195ea:	6a03      	ldr	r3, [r0, #32]
 80195ec:	8851      	ldrh	r1, [r2, #2]
 80195ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80195f2:	6203      	str	r3, [r0, #32]
 80195f4:	6a03      	ldr	r3, [r0, #32]
 80195f6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80195fa:	6203      	str	r3, [r0, #32]
 80195fc:	6a03      	ldr	r3, [r0, #32]
 80195fe:	88d1      	ldrh	r1, [r2, #6]
 8019600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019604:	6203      	str	r3, [r0, #32]
 8019606:	6a03      	ldr	r3, [r0, #32]
 8019608:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801960c:	6203      	str	r3, [r0, #32]
 801960e:	6843      	ldr	r3, [r0, #4]
 8019610:	8911      	ldrh	r1, [r2, #8]
 8019612:	8952      	ldrh	r2, [r2, #10]
 8019614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019618:	6043      	str	r3, [r0, #4]
 801961a:	6843      	ldr	r3, [r0, #4]
 801961c:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8019620:	6043      	str	r3, [r0, #4]
 8019622:	6843      	ldr	r3, [r0, #4]
 8019624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019628:	6043      	str	r3, [r0, #4]
 801962a:	6843      	ldr	r3, [r0, #4]
 801962c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8019630:	e7be      	b.n	80195b0 <timer_channel_output_config+0x80>
 8019632:	6a03      	ldr	r3, [r0, #32]
 8019634:	8811      	ldrh	r1, [r2, #0]
 8019636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801963a:	6203      	str	r3, [r0, #32]
 801963c:	69c3      	ldr	r3, [r0, #28]
 801963e:	f023 0303 	bic.w	r3, r3, #3
 8019642:	61c3      	str	r3, [r0, #28]
 8019644:	6a03      	ldr	r3, [r0, #32]
 8019646:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801964a:	6203      	str	r3, [r0, #32]
 801964c:	6a03      	ldr	r3, [r0, #32]
 801964e:	8891      	ldrh	r1, [r2, #4]
 8019650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019654:	6203      	str	r3, [r0, #32]
 8019656:	6a03      	ldr	r3, [r0, #32]
 8019658:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801965c:	6203      	str	r3, [r0, #32]
 801965e:	4b27      	ldr	r3, [pc, #156]	; (80196fc <timer_channel_output_config+0x1cc>)
 8019660:	f420 6180 	bic.w	r1, r0, #1024	; 0x400
 8019664:	4299      	cmp	r1, r3
 8019666:	d1a4      	bne.n	80195b2 <timer_channel_output_config+0x82>
 8019668:	6a03      	ldr	r3, [r0, #32]
 801966a:	8851      	ldrh	r1, [r2, #2]
 801966c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019670:	6203      	str	r3, [r0, #32]
 8019672:	6a03      	ldr	r3, [r0, #32]
 8019674:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8019678:	6203      	str	r3, [r0, #32]
 801967a:	6a03      	ldr	r3, [r0, #32]
 801967c:	88d1      	ldrh	r1, [r2, #6]
 801967e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019682:	6203      	str	r3, [r0, #32]
 8019684:	6a03      	ldr	r3, [r0, #32]
 8019686:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801968a:	6203      	str	r3, [r0, #32]
 801968c:	6843      	ldr	r3, [r0, #4]
 801968e:	8911      	ldrh	r1, [r2, #8]
 8019690:	8952      	ldrh	r2, [r2, #10]
 8019692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019696:	6043      	str	r3, [r0, #4]
 8019698:	6843      	ldr	r3, [r0, #4]
 801969a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801969e:	6043      	str	r3, [r0, #4]
 80196a0:	6843      	ldr	r3, [r0, #4]
 80196a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80196a6:	6043      	str	r3, [r0, #4]
 80196a8:	6843      	ldr	r3, [r0, #4]
 80196aa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80196ae:	e77f      	b.n	80195b0 <timer_channel_output_config+0x80>
 80196b0:	6a03      	ldr	r3, [r0, #32]
 80196b2:	8811      	ldrh	r1, [r2, #0]
 80196b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80196b8:	6203      	str	r3, [r0, #32]
 80196ba:	69c3      	ldr	r3, [r0, #28]
 80196bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80196c0:	61c3      	str	r3, [r0, #28]
 80196c2:	6a03      	ldr	r3, [r0, #32]
 80196c4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80196c8:	6203      	str	r3, [r0, #32]
 80196ca:	6a03      	ldr	r3, [r0, #32]
 80196cc:	8891      	ldrh	r1, [r2, #4]
 80196ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80196d2:	6203      	str	r3, [r0, #32]
 80196d4:	6a03      	ldr	r3, [r0, #32]
 80196d6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80196da:	6203      	str	r3, [r0, #32]
 80196dc:	4b07      	ldr	r3, [pc, #28]	; (80196fc <timer_channel_output_config+0x1cc>)
 80196de:	f420 6180 	bic.w	r1, r0, #1024	; 0x400
 80196e2:	4299      	cmp	r1, r3
 80196e4:	f47f af65 	bne.w	80195b2 <timer_channel_output_config+0x82>
 80196e8:	6843      	ldr	r3, [r0, #4]
 80196ea:	8912      	ldrh	r2, [r2, #8]
 80196ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80196f0:	6043      	str	r3, [r0, #4]
 80196f2:	6843      	ldr	r3, [r0, #4]
 80196f4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80196f8:	e75a      	b.n	80195b0 <timer_channel_output_config+0x80>
 80196fa:	bf00      	nop
 80196fc:	40010000 	andmi	r0, r1, r0

08019700 <timer_channel_output_mode_config>:
 8019700:	2903      	cmp	r1, #3
 8019702:	d81a      	bhi.n	801973a <timer_channel_output_mode_config+0x3a>
 8019704:	e8df f001 	tbb	[pc, r1]
 8019708:	1a120a02 	bne	849bf18 <__exidx_end+0x47e114>
 801970c:	6983      	ldr	r3, [r0, #24]
 801970e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019712:	6183      	str	r3, [r0, #24]
 8019714:	6983      	ldr	r3, [r0, #24]
 8019716:	4313      	orrs	r3, r2
 8019718:	6183      	str	r3, [r0, #24]
 801971a:	4770      	bx	lr
 801971c:	6983      	ldr	r3, [r0, #24]
 801971e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8019722:	6183      	str	r3, [r0, #24]
 8019724:	6983      	ldr	r3, [r0, #24]
 8019726:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801972a:	e7f5      	b.n	8019718 <timer_channel_output_mode_config+0x18>
 801972c:	69c3      	ldr	r3, [r0, #28]
 801972e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019732:	61c3      	str	r3, [r0, #28]
 8019734:	69c3      	ldr	r3, [r0, #28]
 8019736:	4313      	orrs	r3, r2
 8019738:	61c3      	str	r3, [r0, #28]
 801973a:	4770      	bx	lr
 801973c:	69c3      	ldr	r3, [r0, #28]
 801973e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8019742:	61c3      	str	r3, [r0, #28]
 8019744:	69c3      	ldr	r3, [r0, #28]
 8019746:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801974a:	e7f5      	b.n	8019738 <timer_channel_output_mode_config+0x38>

0801974c <timer_channel_output_pulse_value_config>:
 801974c:	2903      	cmp	r1, #3
 801974e:	d80a      	bhi.n	8019766 <timer_channel_output_pulse_value_config+0x1a>
 8019750:	e8df f001 	tbb	[pc, r1]
 8019754:	08060402 	stmdaeq	r6, {r1, sl}
 8019758:	6342      	str	r2, [r0, #52]	; 0x34
 801975a:	4770      	bx	lr
 801975c:	6382      	str	r2, [r0, #56]	; 0x38
 801975e:	4770      	bx	lr
 8019760:	63c2      	str	r2, [r0, #60]	; 0x3c
 8019762:	4770      	bx	lr
 8019764:	6402      	str	r2, [r0, #64]	; 0x40
 8019766:	4770      	bx	lr

08019768 <timer_channel_output_shadow_config>:
 8019768:	2903      	cmp	r1, #3
 801976a:	d81a      	bhi.n	80197a2 <timer_channel_output_shadow_config+0x3a>
 801976c:	e8df f001 	tbb	[pc, r1]
 8019770:	1a120a02 	bne	849bf80 <__exidx_end+0x47e17c>
 8019774:	6983      	ldr	r3, [r0, #24]
 8019776:	f023 0308 	bic.w	r3, r3, #8
 801977a:	6183      	str	r3, [r0, #24]
 801977c:	6983      	ldr	r3, [r0, #24]
 801977e:	4313      	orrs	r3, r2
 8019780:	6183      	str	r3, [r0, #24]
 8019782:	4770      	bx	lr
 8019784:	6983      	ldr	r3, [r0, #24]
 8019786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801978a:	6183      	str	r3, [r0, #24]
 801978c:	6983      	ldr	r3, [r0, #24]
 801978e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8019792:	e7f5      	b.n	8019780 <timer_channel_output_shadow_config+0x18>
 8019794:	69c3      	ldr	r3, [r0, #28]
 8019796:	f023 0308 	bic.w	r3, r3, #8
 801979a:	61c3      	str	r3, [r0, #28]
 801979c:	69c3      	ldr	r3, [r0, #28]
 801979e:	4313      	orrs	r3, r2
 80197a0:	61c3      	str	r3, [r0, #28]
 80197a2:	4770      	bx	lr
 80197a4:	69c3      	ldr	r3, [r0, #28]
 80197a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80197aa:	61c3      	str	r3, [r0, #28]
 80197ac:	69c3      	ldr	r3, [r0, #28]
 80197ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80197b2:	e7f5      	b.n	80197a0 <timer_channel_output_shadow_config+0x38>

080197b4 <timer_input_trigger_source_select>:
 80197b4:	6883      	ldr	r3, [r0, #8]
 80197b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80197ba:	6083      	str	r3, [r0, #8]
 80197bc:	6883      	ldr	r3, [r0, #8]
 80197be:	4319      	orrs	r1, r3
 80197c0:	6081      	str	r1, [r0, #8]
 80197c2:	4770      	bx	lr

080197c4 <timer_master_output_trigger_source_select>:
 80197c4:	6843      	ldr	r3, [r0, #4]
 80197c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80197ca:	6043      	str	r3, [r0, #4]
 80197cc:	6843      	ldr	r3, [r0, #4]
 80197ce:	4319      	orrs	r1, r3
 80197d0:	6041      	str	r1, [r0, #4]
 80197d2:	4770      	bx	lr

080197d4 <timer_slave_mode_select>:
 80197d4:	6883      	ldr	r3, [r0, #8]
 80197d6:	f023 0307 	bic.w	r3, r3, #7
 80197da:	6083      	str	r3, [r0, #8]
 80197dc:	6883      	ldr	r3, [r0, #8]
 80197de:	4319      	orrs	r1, r3
 80197e0:	6081      	str	r1, [r0, #8]
 80197e2:	4770      	bx	lr

080197e4 <timer_master_slave_mode_config>:
 80197e4:	b921      	cbnz	r1, 80197f0 <timer_master_slave_mode_config+0xc>
 80197e6:	6883      	ldr	r3, [r0, #8]
 80197e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197ec:	6083      	str	r3, [r0, #8]
 80197ee:	4770      	bx	lr
 80197f0:	2901      	cmp	r1, #1
 80197f2:	d1fc      	bne.n	80197ee <timer_master_slave_mode_config+0xa>
 80197f4:	6883      	ldr	r3, [r0, #8]
 80197f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80197fa:	e7f7      	b.n	80197ec <timer_master_slave_mode_config+0x8>

080197fc <usart_deinit>:
 80197fc:	b508      	push	{r3, lr}
 80197fe:	4b2d      	ldr	r3, [pc, #180]	; (80198b4 <usart_deinit+0xb8>)
 8019800:	4298      	cmp	r0, r3
 8019802:	d050      	beq.n	80198a6 <usart_deinit+0xaa>
 8019804:	d817      	bhi.n	8019836 <usart_deinit+0x3a>
 8019806:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 801980a:	4298      	cmp	r0, r3
 801980c:	d044      	beq.n	8019898 <usart_deinit+0x9c>
 801980e:	d808      	bhi.n	8019822 <usart_deinit+0x26>
 8019810:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8019814:	4298      	cmp	r0, r3
 8019816:	d02a      	beq.n	801986e <usart_deinit+0x72>
 8019818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801981c:	4298      	cmp	r0, r3
 801981e:	d02d      	beq.n	801987c <usart_deinit+0x80>
 8019820:	bd08      	pop	{r3, pc}
 8019822:	4b25      	ldr	r3, [pc, #148]	; (80198b8 <usart_deinit+0xbc>)
 8019824:	4298      	cmp	r0, r3
 8019826:	d1fb      	bne.n	8019820 <usart_deinit+0x24>
 8019828:	f640 0014 	movw	r0, #2068	; 0x814
 801982c:	f7ff fce7 	bl	80191fe <rcu_periph_reset_enable>
 8019830:	f640 0014 	movw	r0, #2068	; 0x814
 8019834:	e017      	b.n	8019866 <usart_deinit+0x6a>
 8019836:	4b21      	ldr	r3, [pc, #132]	; (80198bc <usart_deinit+0xc0>)
 8019838:	4298      	cmp	r0, r3
 801983a:	d00e      	beq.n	801985a <usart_deinit+0x5e>
 801983c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8019840:	4298      	cmp	r0, r3
 8019842:	d022      	beq.n	801988a <usart_deinit+0x8e>
 8019844:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 8019848:	4298      	cmp	r0, r3
 801984a:	d1e9      	bne.n	8019820 <usart_deinit+0x24>
 801984c:	f640 001f 	movw	r0, #2079	; 0x81f
 8019850:	f7ff fcd5 	bl	80191fe <rcu_periph_reset_enable>
 8019854:	f640 001f 	movw	r0, #2079	; 0x81f
 8019858:	e005      	b.n	8019866 <usart_deinit+0x6a>
 801985a:	f640 1004 	movw	r0, #2308	; 0x904
 801985e:	f7ff fcce 	bl	80191fe <rcu_periph_reset_enable>
 8019862:	f640 1004 	movw	r0, #2308	; 0x904
 8019866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801986a:	f7ff bcca 	b.w	8019202 <rcu_periph_reset_disable>
 801986e:	f640 0011 	movw	r0, #2065	; 0x811
 8019872:	f7ff fcc4 	bl	80191fe <rcu_periph_reset_enable>
 8019876:	f640 0011 	movw	r0, #2065	; 0x811
 801987a:	e7f4      	b.n	8019866 <usart_deinit+0x6a>
 801987c:	f640 0012 	movw	r0, #2066	; 0x812
 8019880:	f7ff fcbd 	bl	80191fe <rcu_periph_reset_enable>
 8019884:	f640 0012 	movw	r0, #2066	; 0x812
 8019888:	e7ed      	b.n	8019866 <usart_deinit+0x6a>
 801988a:	f640 1005 	movw	r0, #2309	; 0x905
 801988e:	f7ff fcb6 	bl	80191fe <rcu_periph_reset_enable>
 8019892:	f640 1005 	movw	r0, #2309	; 0x905
 8019896:	e7e6      	b.n	8019866 <usart_deinit+0x6a>
 8019898:	f640 0013 	movw	r0, #2067	; 0x813
 801989c:	f7ff fcaf 	bl	80191fe <rcu_periph_reset_enable>
 80198a0:	f640 0013 	movw	r0, #2067	; 0x813
 80198a4:	e7df      	b.n	8019866 <usart_deinit+0x6a>
 80198a6:	f640 001e 	movw	r0, #2078	; 0x81e
 80198aa:	f7ff fca8 	bl	80191fe <rcu_periph_reset_enable>
 80198ae:	f640 001e 	movw	r0, #2078	; 0x81e
 80198b2:	e7d8      	b.n	8019866 <usart_deinit+0x6a>
 80198b4:	40007800 	andmi	r7, r0, r0, lsl #16
 80198b8:	40005000 	andmi	r5, r0, r0
 80198bc:	40011000 	andmi	r1, r1, r0

080198c0 <usart_baudrate_set>:
 80198c0:	b538      	push	{r3, r4, r5, lr}
 80198c2:	4b1e      	ldr	r3, [pc, #120]	; (801993c <usart_baudrate_set+0x7c>)
 80198c4:	4298      	cmp	r0, r3
 80198c6:	4604      	mov	r4, r0
 80198c8:	460d      	mov	r5, r1
 80198ca:	d02e      	beq.n	801992a <usart_baudrate_set+0x6a>
 80198cc:	d821      	bhi.n	8019912 <usart_baudrate_set+0x52>
 80198ce:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 80198d2:	4298      	cmp	r0, r3
 80198d4:	d029      	beq.n	801992a <usart_baudrate_set+0x6a>
 80198d6:	d81a      	bhi.n	801990e <usart_baudrate_set+0x4e>
 80198d8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80198dc:	4298      	cmp	r0, r3
 80198de:	d024      	beq.n	801992a <usart_baudrate_set+0x6a>
 80198e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80198e4:	429c      	cmp	r4, r3
 80198e6:	d020      	beq.n	801992a <usart_baudrate_set+0x6a>
 80198e8:	2000      	movs	r0, #0
 80198ea:	68e2      	ldr	r2, [r4, #12]
 80198ec:	0412      	lsls	r2, r2, #16
 80198ee:	ea4f 0355 	mov.w	r3, r5, lsr #1
 80198f2:	d51c      	bpl.n	801992e <usart_baudrate_set+0x6e>
 80198f4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80198f8:	fbb3 f1f5 	udiv	r1, r3, r5
 80198fc:	f3c1 0342 	ubfx	r3, r1, #1, #3
 8019900:	f021 010f 	bic.w	r1, r1, #15
 8019904:	0409      	lsls	r1, r1, #16
 8019906:	0c09      	lsrs	r1, r1, #16
 8019908:	430b      	orrs	r3, r1
 801990a:	60a3      	str	r3, [r4, #8]
 801990c:	bd38      	pop	{r3, r4, r5, pc}
 801990e:	4b0c      	ldr	r3, [pc, #48]	; (8019940 <usart_baudrate_set+0x80>)
 8019910:	e7e8      	b.n	80198e4 <usart_baudrate_set+0x24>
 8019912:	4b0c      	ldr	r3, [pc, #48]	; (8019944 <usart_baudrate_set+0x84>)
 8019914:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8019918:	429a      	cmp	r2, r3
 801991a:	d002      	beq.n	8019922 <usart_baudrate_set+0x62>
 801991c:	f5a3 4314 	sub.w	r3, r3, #37888	; 0x9400
 8019920:	e7e0      	b.n	80198e4 <usart_baudrate_set+0x24>
 8019922:	2003      	movs	r0, #3
 8019924:	f7ff fc8c 	bl	8019240 <rcu_clock_freq_get>
 8019928:	e7df      	b.n	80198ea <usart_baudrate_set+0x2a>
 801992a:	2002      	movs	r0, #2
 801992c:	e7fa      	b.n	8019924 <usart_baudrate_set+0x64>
 801992e:	4403      	add	r3, r0
 8019930:	fbb3 f1f5 	udiv	r1, r3, r5
 8019934:	b289      	uxth	r1, r1
 8019936:	60a1      	str	r1, [r4, #8]
 8019938:	e7e8      	b.n	801990c <usart_baudrate_set+0x4c>
 801993a:	bf00      	nop
 801993c:	40007800 	andmi	r7, r0, r0, lsl #16
 8019940:	40005000 	andmi	r5, r0, r0
 8019944:	40011000 	andmi	r1, r1, r0

08019948 <usart_parity_config>:
 8019948:	68c3      	ldr	r3, [r0, #12]
 801994a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801994e:	60c3      	str	r3, [r0, #12]
 8019950:	68c3      	ldr	r3, [r0, #12]
 8019952:	4319      	orrs	r1, r3
 8019954:	60c1      	str	r1, [r0, #12]
 8019956:	4770      	bx	lr

08019958 <usart_word_length_set>:
 8019958:	68c3      	ldr	r3, [r0, #12]
 801995a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801995e:	60c3      	str	r3, [r0, #12]
 8019960:	68c3      	ldr	r3, [r0, #12]
 8019962:	4319      	orrs	r1, r3
 8019964:	60c1      	str	r1, [r0, #12]
 8019966:	4770      	bx	lr

08019968 <usart_stop_bit_set>:
 8019968:	6903      	ldr	r3, [r0, #16]
 801996a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801996e:	6103      	str	r3, [r0, #16]
 8019970:	6903      	ldr	r3, [r0, #16]
 8019972:	4319      	orrs	r1, r3
 8019974:	6101      	str	r1, [r0, #16]
 8019976:	4770      	bx	lr

08019978 <usart_transmit_config>:
 8019978:	68c3      	ldr	r3, [r0, #12]
 801997a:	f023 0308 	bic.w	r3, r3, #8
 801997e:	4319      	orrs	r1, r3
 8019980:	60c1      	str	r1, [r0, #12]
 8019982:	4770      	bx	lr

08019984 <usart_receive_config>:
 8019984:	68c3      	ldr	r3, [r0, #12]
 8019986:	f023 0304 	bic.w	r3, r3, #4
 801998a:	4319      	orrs	r1, r3
 801998c:	60c1      	str	r1, [r0, #12]
 801998e:	4770      	bx	lr

08019990 <usart_hardware_flow_rts_config>:
 8019990:	6943      	ldr	r3, [r0, #20]
 8019992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019996:	4319      	orrs	r1, r3
 8019998:	6141      	str	r1, [r0, #20]
 801999a:	4770      	bx	lr

0801999c <usart_hardware_flow_cts_config>:
 801999c:	6943      	ldr	r3, [r0, #20]
 801999e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80199a2:	4319      	orrs	r1, r3
 80199a4:	6141      	str	r1, [r0, #20]
 80199a6:	4770      	bx	lr

080199a8 <usart_dma_transmit_config>:
 80199a8:	6943      	ldr	r3, [r0, #20]
 80199aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80199ae:	4319      	orrs	r1, r3
 80199b0:	6141      	str	r1, [r0, #20]
 80199b2:	4770      	bx	lr

080199b4 <usart_flag_get>:
 80199b4:	098b      	lsrs	r3, r1, #6
 80199b6:	f001 011f 	and.w	r1, r1, #31
 80199ba:	581a      	ldr	r2, [r3, r0]
 80199bc:	2301      	movs	r3, #1
 80199be:	408b      	lsls	r3, r1
 80199c0:	4213      	tst	r3, r2
 80199c2:	bf14      	ite	ne
 80199c4:	2001      	movne	r0, #1
 80199c6:	2000      	moveq	r0, #0
 80199c8:	4770      	bx	lr

080199ca <usart_flag_clear>:
 80199ca:	b510      	push	{r4, lr}
 80199cc:	098c      	lsrs	r4, r1, #6
 80199ce:	2201      	movs	r2, #1
 80199d0:	5823      	ldr	r3, [r4, r0]
 80199d2:	f001 011f 	and.w	r1, r1, #31
 80199d6:	408a      	lsls	r2, r1
 80199d8:	ea23 0302 	bic.w	r3, r3, r2
 80199dc:	5023      	str	r3, [r4, r0]
 80199de:	bd10      	pop	{r4, pc}

080199e0 <usart_interrupt_enable>:
 80199e0:	098a      	lsrs	r2, r1, #6
 80199e2:	b510      	push	{r4, lr}
 80199e4:	f001 011f 	and.w	r1, r1, #31
 80199e8:	5814      	ldr	r4, [r2, r0]
 80199ea:	2301      	movs	r3, #1
 80199ec:	408b      	lsls	r3, r1
 80199ee:	4323      	orrs	r3, r4
 80199f0:	5013      	str	r3, [r2, r0]
 80199f2:	bd10      	pop	{r4, pc}

080199f4 <usart_interrupt_disable>:
 80199f4:	f7ff bfe9 	b.w	80199ca <usart_flag_clear>

080199f8 <usart_interrupt_flag_clear>:
 80199f8:	b510      	push	{r4, lr}
 80199fa:	0d8c      	lsrs	r4, r1, #22
 80199fc:	2201      	movs	r2, #1
 80199fe:	5823      	ldr	r3, [r4, r0]
 8019a00:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8019a04:	408a      	lsls	r2, r1
 8019a06:	ea23 0302 	bic.w	r3, r3, r2
 8019a0a:	5023      	str	r3, [r4, r0]
 8019a0c:	bd10      	pop	{r4, pc}
	...

08019a10 <emac_eth_recv>:
 8019a10:	b538      	push	{r3, r4, r5, lr}
 8019a12:	4605      	mov	r5, r0
 8019a14:	f7ff fada 	bl	8018fcc <enet_rxframe_size_get>
 8019a18:	4604      	mov	r4, r0
 8019a1a:	b138      	cbz	r0, 8019a2c <emac_eth_recv+0x1c>
 8019a1c:	4b05      	ldr	r3, [pc, #20]	; (8019a34 <emac_eth_recv+0x24>)
 8019a1e:	2105      	movs	r1, #5
 8019a20:	6818      	ldr	r0, [r3, #0]
 8019a22:	f7ff fa77 	bl	8018f14 <enet_desc_information_get>
 8019a26:	6028      	str	r0, [r5, #0]
 8019a28:	4620      	mov	r0, r4
 8019a2a:	bd38      	pop	{r3, r4, r5, pc}
 8019a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a30:	e7fb      	b.n	8019a2a <emac_eth_recv+0x1a>
 8019a32:	bf00      	nop
 8019a34:	2000fdc0 	andcs	pc, r0, r0, asr #27

08019a38 <emac_free_pkt>:
 8019a38:	2100      	movs	r1, #0
 8019a3a:	4608      	mov	r0, r1
 8019a3c:	f7fe bf86 	b.w	801894c <enet_frame_receive>

08019a40 <emac_eth_send>:
 8019a40:	f7fe bfd0 	b.w	80189e4 <enet_frame_transmit>

08019a44 <bkp_data_write(bkp_data_register_enum, unsigned short)>:
 8019a44:	2801      	cmp	r0, #1
 8019a46:	bf9c      	itt	ls
 8019a48:	4b01      	ldrls	r3, [pc, #4]	; (8019a50 <bkp_data_write(bkp_data_register_enum, unsigned short)+0xc>)
 8019a4a:	f823 1010 	strhls.w	r1, [r3, r0, lsl #1]
 8019a4e:	4770      	bx	lr
 8019a50:	40024010 	andmi	r4, r2, r0, lsl r0

08019a54 <bkp_data_read(bkp_data_register_enum)>:
 8019a54:	2801      	cmp	r0, #1
 8019a56:	bf9d      	ittte	ls
 8019a58:	4b02      	ldrls	r3, [pc, #8]	; (8019a64 <bkp_data_read(bkp_data_register_enum)+0x10>)
 8019a5a:	f833 0010 	ldrhls.w	r0, [r3, r0, lsl #1]
 8019a5e:	b280      	uxthls	r0, r0
 8019a60:	2000      	movhi	r0, #0
 8019a62:	4770      	bx	lr
 8019a64:	40024010 	andmi	r4, r2, r0, lsl r0

08019a68 <gd32_adc_init()>:
 8019a68:	b510      	push	{r4, lr}
 8019a6a:	f241 1008 	movw	r0, #4360	; 0x1108
 8019a6e:	4c24      	ldr	r4, [pc, #144]	; (8019b00 <gd32_adc_init()+0x98>)
 8019a70:	f7ff fbaa 	bl	80191c8 <rcu_periph_clock_enable>
 8019a74:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8019a78:	f000 fce6 	bl	801a448 <adc_clock_config>
 8019a7c:	4620      	mov	r0, r4
 8019a7e:	2203      	movs	r2, #3
 8019a80:	2102      	movs	r1, #2
 8019a82:	f000 fd63 	bl	801a54c <adc_channel_length_config>
 8019a86:	4620      	mov	r0, r4
 8019a88:	2306      	movs	r3, #6
 8019a8a:	2210      	movs	r2, #16
 8019a8c:	2100      	movs	r1, #0
 8019a8e:	f000 fd7a 	bl	801a586 <adc_inserted_channel_config>
 8019a92:	4620      	mov	r0, r4
 8019a94:	2306      	movs	r3, #6
 8019a96:	2211      	movs	r2, #17
 8019a98:	2101      	movs	r1, #1
 8019a9a:	f000 fd74 	bl	801a586 <adc_inserted_channel_config>
 8019a9e:	2306      	movs	r3, #6
 8019aa0:	4620      	mov	r0, r4
 8019aa2:	2212      	movs	r2, #18
 8019aa4:	2102      	movs	r1, #2
 8019aa6:	f000 fd6e 	bl	801a586 <adc_inserted_channel_config>
 8019aaa:	2200      	movs	r2, #0
 8019aac:	4620      	mov	r0, r4
 8019aae:	2102      	movs	r1, #2
 8019ab0:	f000 fd98 	bl	801a5e4 <adc_external_trigger_config>
 8019ab4:	4620      	mov	r0, r4
 8019ab6:	2100      	movs	r1, #0
 8019ab8:	f000 fcfe 	bl	801a4b8 <adc_data_alignment_config>
 8019abc:	2201      	movs	r2, #1
 8019abe:	4620      	mov	r0, r4
 8019ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8019ac4:	f000 fcd0 	bl	801a468 <adc_special_function_config>
 8019ac8:	2101      	movs	r1, #1
 8019aca:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8019ace:	f000 fd15 	bl	801a4fc <adc_channel_16_to_18>
 8019ad2:	2101      	movs	r1, #1
 8019ad4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8019ad8:	f000 fd10 	bl	801a4fc <adc_channel_16_to_18>
 8019adc:	4620      	mov	r0, r4
 8019ade:	f000 fcf4 	bl	801a4ca <adc_enable>
 8019ae2:	2100      	movs	r1, #0
 8019ae4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019ae8:	f000 fb80 	bl	801a1ec <udelay(unsigned int, unsigned int)>
 8019aec:	4620      	mov	r0, r4
 8019aee:	f000 fcf4 	bl	801a4da <adc_calibration_enable>
 8019af2:	4620      	mov	r0, r4
 8019af4:	2102      	movs	r1, #2
 8019af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019afa:	f000 bd89 	b.w	801a610 <adc_software_trigger_enable>
 8019afe:	bf00      	nop
 8019b00:	40012000 	andmi	r2, r1, r0

08019b04 <_stop() [clone .isra.0]>:
 8019b04:	b508      	push	{r3, lr}
 8019b06:	4806      	ldr	r0, [pc, #24]	; (8019b20 <_stop() [clone .isra.0]+0x1c>)
 8019b08:	f000 fe10 	bl	801a72c <i2c_stop_on_bus>
 8019b0c:	4905      	ldr	r1, [pc, #20]	; (8019b24 <_stop() [clone .isra.0]+0x20>)
 8019b0e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8019b12:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8019b16:	0592      	lsls	r2, r2, #22
 8019b18:	d501      	bpl.n	8019b1e <_stop() [clone .isra.0]+0x1a>
 8019b1a:	3b01      	subs	r3, #1
 8019b1c:	d1f9      	bne.n	8019b12 <_stop() [clone .isra.0]+0xe>
 8019b1e:	bd08      	pop	{r3, pc}
 8019b20:	40005400 	andmi	r5, r0, r0, lsl #8
 8019b24:	40005000 	andmi	r5, r0, r0

08019b28 <gd32_i2c_begin>:
 8019b28:	b508      	push	{r3, lr}
 8019b2a:	f241 0015 	movw	r0, #4117	; 0x1015
 8019b2e:	f7ff fb4b 	bl	80191c8 <rcu_periph_clock_enable>
 8019b32:	f640 4001 	movw	r0, #3073	; 0xc01
 8019b36:	f7ff fb47 	bl	80191c8 <rcu_periph_clock_enable>
 8019b3a:	f640 4001 	movw	r0, #3073	; 0xc01
 8019b3e:	f7ff fb43 	bl	80191c8 <rcu_periph_clock_enable>
 8019b42:	481b      	ldr	r0, [pc, #108]	; (8019bb0 <gd32_i2c_begin+0x88>)
 8019b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019b48:	2104      	movs	r1, #4
 8019b4a:	f7ff fafc 	bl	8019146 <gpio_af_set>
 8019b4e:	4818      	ldr	r0, [pc, #96]	; (8019bb0 <gd32_i2c_begin+0x88>)
 8019b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019b54:	2104      	movs	r1, #4
 8019b56:	f7ff faf6 	bl	8019146 <gpio_af_set>
 8019b5a:	4815      	ldr	r0, [pc, #84]	; (8019bb0 <gd32_i2c_begin+0x88>)
 8019b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019b60:	2201      	movs	r2, #1
 8019b62:	2102      	movs	r1, #2
 8019b64:	f7ff fab4 	bl	80190d0 <gpio_mode_set>
 8019b68:	4811      	ldr	r0, [pc, #68]	; (8019bb0 <gd32_i2c_begin+0x88>)
 8019b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019b6e:	2202      	movs	r2, #2
 8019b70:	2101      	movs	r1, #1
 8019b72:	f7ff facd 	bl	8019110 <gpio_output_options_set>
 8019b76:	480e      	ldr	r0, [pc, #56]	; (8019bb0 <gd32_i2c_begin+0x88>)
 8019b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019b7c:	2201      	movs	r2, #1
 8019b7e:	2102      	movs	r1, #2
 8019b80:	f7ff faa6 	bl	80190d0 <gpio_mode_set>
 8019b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019b88:	4809      	ldr	r0, [pc, #36]	; (8019bb0 <gd32_i2c_begin+0x88>)
 8019b8a:	2202      	movs	r2, #2
 8019b8c:	2101      	movs	r1, #1
 8019b8e:	f7ff fabf 	bl	8019110 <gpio_output_options_set>
 8019b92:	4908      	ldr	r1, [pc, #32]	; (8019bb4 <gd32_i2c_begin+0x8c>)
 8019b94:	4808      	ldr	r0, [pc, #32]	; (8019bb8 <gd32_i2c_begin+0x90>)
 8019b96:	2200      	movs	r2, #0
 8019b98:	f000 fd48 	bl	801a62c <i2c_clock_config>
 8019b9c:	4806      	ldr	r0, [pc, #24]	; (8019bb8 <gd32_i2c_begin+0x90>)
 8019b9e:	f000 fdbb 	bl	801a718 <i2c_enable>
 8019ba2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019ba6:	4804      	ldr	r0, [pc, #16]	; (8019bb8 <gd32_i2c_begin+0x90>)
 8019ba8:	2101      	movs	r1, #1
 8019baa:	f000 bd9b 	b.w	801a6e4 <i2c_ack_config>
 8019bae:	bf00      	nop
 8019bb0:	40020400 	andmi	r0, r2, r0, lsl #8
 8019bb4:	00061a80 	andeq	r1, r6, r0, lsl #21
 8019bb8:	40005400 	andmi	r5, r0, r0, lsl #8

08019bbc <gd32_i2c_set_baudrate>:
 8019bbc:	4601      	mov	r1, r0
 8019bbe:	2200      	movs	r2, #0
 8019bc0:	4801      	ldr	r0, [pc, #4]	; (8019bc8 <gd32_i2c_set_baudrate+0xc>)
 8019bc2:	f000 bd33 	b.w	801a62c <i2c_clock_config>
 8019bc6:	bf00      	nop
 8019bc8:	40005400 	andmi	r5, r0, r0, lsl #8

08019bcc <gd32_i2c_set_address>:
 8019bcc:	4b01      	ldr	r3, [pc, #4]	; (8019bd4 <gd32_i2c_set_address+0x8>)
 8019bce:	0040      	lsls	r0, r0, #1
 8019bd0:	7018      	strb	r0, [r3, #0]
 8019bd2:	4770      	bx	lr
 8019bd4:	2002d33c 	andcs	sp, r2, ip, lsr r3

08019bd8 <gd32_i2c_write>:
 8019bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bda:	4e30      	ldr	r6, [pc, #192]	; (8019c9c <gd32_i2c_write+0xc4>)
 8019bdc:	4604      	mov	r4, r0
 8019bde:	460f      	mov	r7, r1
 8019be0:	f640 75ff 	movw	r5, #4095	; 0xfff
 8019be4:	f240 6101 	movw	r1, #1537	; 0x601
 8019be8:	4630      	mov	r0, r6
 8019bea:	f000 fda9 	bl	801a740 <i2c_flag_get>
 8019bee:	b9b0      	cbnz	r0, 8019c1e <gd32_i2c_write+0x46>
 8019bf0:	482a      	ldr	r0, [pc, #168]	; (8019c9c <gd32_i2c_write+0xc4>)
 8019bf2:	4e2a      	ldr	r6, [pc, #168]	; (8019c9c <gd32_i2c_write+0xc4>)
 8019bf4:	f000 fd95 	bl	801a722 <i2c_start_on_bus>
 8019bf8:	f640 75ff 	movw	r5, #4095	; 0xfff
 8019bfc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8019c00:	4630      	mov	r0, r6
 8019c02:	f000 fd9d 	bl	801a740 <i2c_flag_get>
 8019c06:	b190      	cbz	r0, 8019c2e <gd32_i2c_write+0x56>
 8019c08:	4b25      	ldr	r3, [pc, #148]	; (8019ca0 <gd32_i2c_write+0xc8>)
 8019c0a:	4824      	ldr	r0, [pc, #144]	; (8019c9c <gd32_i2c_write+0xc4>)
 8019c0c:	7819      	ldrb	r1, [r3, #0]
 8019c0e:	4e23      	ldr	r6, [pc, #140]	; (8019c9c <gd32_i2c_write+0xc4>)
 8019c10:	f06f 0201 	mvn.w	r2, #1
 8019c14:	f000 fd78 	bl	801a708 <i2c_master_addressing>
 8019c18:	f640 75ff 	movw	r5, #4095	; 0xfff
 8019c1c:	e00c      	b.n	8019c38 <gd32_i2c_write+0x60>
 8019c1e:	3d01      	subs	r5, #1
 8019c20:	d1e0      	bne.n	8019be4 <gd32_i2c_write+0xc>
 8019c22:	f7ff ff6f 	bl	8019b04 <_stop() [clone .isra.0]>
 8019c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c2a:	4240      	negs	r0, r0
 8019c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c2e:	3d01      	subs	r5, #1
 8019c30:	d1e4      	bne.n	8019bfc <gd32_i2c_write+0x24>
 8019c32:	e7f6      	b.n	8019c22 <gd32_i2c_write+0x4a>
 8019c34:	3d01      	subs	r5, #1
 8019c36:	d0f4      	beq.n	8019c22 <gd32_i2c_write+0x4a>
 8019c38:	f240 5101 	movw	r1, #1281	; 0x501
 8019c3c:	4630      	mov	r0, r6
 8019c3e:	f000 fd7f 	bl	801a740 <i2c_flag_get>
 8019c42:	2800      	cmp	r0, #0
 8019c44:	d0f6      	beq.n	8019c34 <gd32_i2c_write+0x5c>
 8019c46:	4815      	ldr	r0, [pc, #84]	; (8019c9c <gd32_i2c_write+0xc4>)
 8019c48:	4e14      	ldr	r6, [pc, #80]	; (8019c9c <gd32_i2c_write+0xc4>)
 8019c4a:	f240 5101 	movw	r1, #1281	; 0x501
 8019c4e:	f000 fd82 	bl	801a756 <i2c_flag_clear>
 8019c52:	f640 75ff 	movw	r5, #4095	; 0xfff
 8019c56:	f240 5107 	movw	r1, #1287	; 0x507
 8019c5a:	4630      	mov	r0, r6
 8019c5c:	f000 fd70 	bl	801a740 <i2c_flag_get>
 8019c60:	2801      	cmp	r0, #1
 8019c62:	d107      	bne.n	8019c74 <gd32_i2c_write+0x9c>
 8019c64:	4e0d      	ldr	r6, [pc, #52]	; (8019c9c <gd32_i2c_write+0xc4>)
 8019c66:	4427      	add	r7, r4
 8019c68:	42a7      	cmp	r7, r4
 8019c6a:	d106      	bne.n	8019c7a <gd32_i2c_write+0xa2>
 8019c6c:	f7ff ff4a 	bl	8019b04 <_stop() [clone .isra.0]>
 8019c70:	2000      	movs	r0, #0
 8019c72:	e7da      	b.n	8019c2a <gd32_i2c_write+0x52>
 8019c74:	3d01      	subs	r5, #1
 8019c76:	d1ee      	bne.n	8019c56 <gd32_i2c_write+0x7e>
 8019c78:	e7d3      	b.n	8019c22 <gd32_i2c_write+0x4a>
 8019c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c7e:	4630      	mov	r0, r6
 8019c80:	f000 fd59 	bl	801a736 <i2c_data_transmit>
 8019c84:	f640 75ff 	movw	r5, #4095	; 0xfff
 8019c88:	f240 5102 	movw	r1, #1282	; 0x502
 8019c8c:	4630      	mov	r0, r6
 8019c8e:	f000 fd57 	bl	801a740 <i2c_flag_get>
 8019c92:	2800      	cmp	r0, #0
 8019c94:	d1e8      	bne.n	8019c68 <gd32_i2c_write+0x90>
 8019c96:	3d01      	subs	r5, #1
 8019c98:	d1f6      	bne.n	8019c88 <gd32_i2c_write+0xb0>
 8019c9a:	e7c2      	b.n	8019c22 <gd32_i2c_write+0x4a>
 8019c9c:	40005400 	andmi	r5, r0, r0, lsl #8
 8019ca0:	2002d33c 	andcs	sp, r2, ip, lsr r3

08019ca4 <gd32_i2c_read>:
 8019ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ca8:	4f4d      	ldr	r7, [pc, #308]	; (8019de0 <gd32_i2c_read+0x13c>)
 8019caa:	4680      	mov	r8, r0
 8019cac:	460c      	mov	r4, r1
 8019cae:	f640 76ff 	movw	r6, #4095	; 0xfff
 8019cb2:	f240 6101 	movw	r1, #1537	; 0x601
 8019cb6:	4638      	mov	r0, r7
 8019cb8:	f000 fd42 	bl	801a740 <i2c_flag_get>
 8019cbc:	4605      	mov	r5, r0
 8019cbe:	bb08      	cbnz	r0, 8019d04 <gd32_i2c_read+0x60>
 8019cc0:	2c02      	cmp	r4, #2
 8019cc2:	d103      	bne.n	8019ccc <gd32_i2c_read+0x28>
 8019cc4:	4601      	mov	r1, r0
 8019cc6:	4846      	ldr	r0, [pc, #280]	; (8019de0 <gd32_i2c_read+0x13c>)
 8019cc8:	f000 fd15 	bl	801a6f6 <i2c_ackpos_config>
 8019ccc:	4844      	ldr	r0, [pc, #272]	; (8019de0 <gd32_i2c_read+0x13c>)
 8019cce:	4f44      	ldr	r7, [pc, #272]	; (8019de0 <gd32_i2c_read+0x13c>)
 8019cd0:	f000 fd27 	bl	801a722 <i2c_start_on_bus>
 8019cd4:	f640 76ff 	movw	r6, #4095	; 0xfff
 8019cd8:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8019cdc:	4638      	mov	r0, r7
 8019cde:	f000 fd2f 	bl	801a740 <i2c_flag_get>
 8019ce2:	b1a8      	cbz	r0, 8019d10 <gd32_i2c_read+0x6c>
 8019ce4:	4b3f      	ldr	r3, [pc, #252]	; (8019de4 <gd32_i2c_read+0x140>)
 8019ce6:	483e      	ldr	r0, [pc, #248]	; (8019de0 <gd32_i2c_read+0x13c>)
 8019ce8:	7819      	ldrb	r1, [r3, #0]
 8019cea:	2201      	movs	r2, #1
 8019cec:	f000 fd0c 	bl	801a708 <i2c_master_addressing>
 8019cf0:	2c02      	cmp	r4, #2
 8019cf2:	d803      	bhi.n	8019cfc <gd32_i2c_read+0x58>
 8019cf4:	483a      	ldr	r0, [pc, #232]	; (8019de0 <gd32_i2c_read+0x13c>)
 8019cf6:	2100      	movs	r1, #0
 8019cf8:	f000 fcf4 	bl	801a6e4 <i2c_ack_config>
 8019cfc:	4f38      	ldr	r7, [pc, #224]	; (8019de0 <gd32_i2c_read+0x13c>)
 8019cfe:	f640 76ff 	movw	r6, #4095	; 0xfff
 8019d02:	e00a      	b.n	8019d1a <gd32_i2c_read+0x76>
 8019d04:	3e01      	subs	r6, #1
 8019d06:	d1d4      	bne.n	8019cb2 <gd32_i2c_read+0xe>
 8019d08:	f7ff fefc 	bl	8019b04 <_stop() [clone .isra.0]>
 8019d0c:	2504      	movs	r5, #4
 8019d0e:	e04d      	b.n	8019dac <gd32_i2c_read+0x108>
 8019d10:	3e01      	subs	r6, #1
 8019d12:	d1e1      	bne.n	8019cd8 <gd32_i2c_read+0x34>
 8019d14:	e7f8      	b.n	8019d08 <gd32_i2c_read+0x64>
 8019d16:	3e01      	subs	r6, #1
 8019d18:	d0f6      	beq.n	8019d08 <gd32_i2c_read+0x64>
 8019d1a:	f240 5101 	movw	r1, #1281	; 0x501
 8019d1e:	4638      	mov	r0, r7
 8019d20:	f000 fd0e 	bl	801a740 <i2c_flag_get>
 8019d24:	2800      	cmp	r0, #0
 8019d26:	d0f6      	beq.n	8019d16 <gd32_i2c_read+0x72>
 8019d28:	482d      	ldr	r0, [pc, #180]	; (8019de0 <gd32_i2c_read+0x13c>)
 8019d2a:	f240 5101 	movw	r1, #1281	; 0x501
 8019d2e:	f000 fd12 	bl	801a756 <i2c_flag_clear>
 8019d32:	2c01      	cmp	r4, #1
 8019d34:	d102      	bne.n	8019d3c <gd32_i2c_read+0x98>
 8019d36:	482a      	ldr	r0, [pc, #168]	; (8019de0 <gd32_i2c_read+0x13c>)
 8019d38:	f000 fcf8 	bl	801a72c <i2c_stop_on_bus>
 8019d3c:	4e28      	ldr	r6, [pc, #160]	; (8019de0 <gd32_i2c_read+0x13c>)
 8019d3e:	f640 77ff 	movw	r7, #4095	; 0xfff
 8019d42:	e022      	b.n	8019d8a <gd32_i2c_read+0xe6>
 8019d44:	2c03      	cmp	r4, #3
 8019d46:	d134      	bne.n	8019db2 <gd32_i2c_read+0x10e>
 8019d48:	f640 79ff 	movw	r9, #4095	; 0xfff
 8019d4c:	e002      	b.n	8019d54 <gd32_i2c_read+0xb0>
 8019d4e:	f1b9 0901 	subs.w	r9, r9, #1
 8019d52:	d0d9      	beq.n	8019d08 <gd32_i2c_read+0x64>
 8019d54:	f240 5102 	movw	r1, #1282	; 0x502
 8019d58:	4630      	mov	r0, r6
 8019d5a:	f000 fcf1 	bl	801a740 <i2c_flag_get>
 8019d5e:	2800      	cmp	r0, #0
 8019d60:	d0f5      	beq.n	8019d4e <gd32_i2c_read+0xaa>
 8019d62:	2100      	movs	r1, #0
 8019d64:	4630      	mov	r0, r6
 8019d66:	f000 fcbd 	bl	801a6e4 <i2c_ack_config>
 8019d6a:	f240 5106 	movw	r1, #1286	; 0x506
 8019d6e:	4630      	mov	r0, r6
 8019d70:	f000 fce6 	bl	801a740 <i2c_flag_get>
 8019d74:	b138      	cbz	r0, 8019d86 <gd32_i2c_read+0xe2>
 8019d76:	4630      	mov	r0, r6
 8019d78:	f000 fcdf 	bl	801a73a <i2c_data_receive>
 8019d7c:	f808 0b01 	strb.w	r0, [r8], #1
 8019d80:	3c01      	subs	r4, #1
 8019d82:	f640 77ff 	movw	r7, #4095	; 0xfff
 8019d86:	3f01      	subs	r7, #1
 8019d88:	d0be      	beq.n	8019d08 <gd32_i2c_read+0x64>
 8019d8a:	2c00      	cmp	r4, #0
 8019d8c:	d1da      	bne.n	8019d44 <gd32_i2c_read+0xa0>
 8019d8e:	4916      	ldr	r1, [pc, #88]	; (8019de8 <gd32_i2c_read+0x144>)
 8019d90:	f640 73ff 	movw	r3, #4095	; 0xfff
 8019d94:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8019d98:	0592      	lsls	r2, r2, #22
 8019d9a:	d41d      	bmi.n	8019dd8 <gd32_i2c_read+0x134>
 8019d9c:	4810      	ldr	r0, [pc, #64]	; (8019de0 <gd32_i2c_read+0x13c>)
 8019d9e:	2101      	movs	r1, #1
 8019da0:	f000 fca0 	bl	801a6e4 <i2c_ack_config>
 8019da4:	480e      	ldr	r0, [pc, #56]	; (8019de0 <gd32_i2c_read+0x13c>)
 8019da6:	2101      	movs	r1, #1
 8019da8:	f000 fca5 	bl	801a6f6 <i2c_ackpos_config>
 8019dac:	4628      	mov	r0, r5
 8019dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019db2:	2c02      	cmp	r4, #2
 8019db4:	d1d9      	bne.n	8019d6a <gd32_i2c_read+0xc6>
 8019db6:	f640 79ff 	movw	r9, #4095	; 0xfff
 8019dba:	e002      	b.n	8019dc2 <gd32_i2c_read+0x11e>
 8019dbc:	f1b9 0901 	subs.w	r9, r9, #1
 8019dc0:	d0a2      	beq.n	8019d08 <gd32_i2c_read+0x64>
 8019dc2:	f240 5102 	movw	r1, #1282	; 0x502
 8019dc6:	4630      	mov	r0, r6
 8019dc8:	f000 fcba 	bl	801a740 <i2c_flag_get>
 8019dcc:	2800      	cmp	r0, #0
 8019dce:	d0f5      	beq.n	8019dbc <gd32_i2c_read+0x118>
 8019dd0:	4630      	mov	r0, r6
 8019dd2:	f000 fcab 	bl	801a72c <i2c_stop_on_bus>
 8019dd6:	e7c8      	b.n	8019d6a <gd32_i2c_read+0xc6>
 8019dd8:	3b01      	subs	r3, #1
 8019dda:	d1db      	bne.n	8019d94 <gd32_i2c_read+0xf0>
 8019ddc:	e796      	b.n	8019d0c <gd32_i2c_read+0x68>
 8019dde:	bf00      	nop
 8019de0:	40005400 	andmi	r5, r0, r0, lsl #8
 8019de4:	2002d33c 	andcs	sp, r2, ip, lsr r3
 8019de8:	40005000 	andmi	r5, r0, r0

08019dec <_gpio_init(unsigned int)>:
 8019dec:	4b96      	ldr	r3, [pc, #600]	; (801a048 <_gpio_init(unsigned int)+0x25c>)
 8019dee:	4298      	cmp	r0, r3
 8019df0:	b510      	push	{r4, lr}
 8019df2:	f000 8104 	beq.w	8019ffe <_gpio_init(unsigned int)+0x212>
 8019df6:	d831      	bhi.n	8019e5c <_gpio_init(unsigned int)+0x70>
 8019df8:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8019dfc:	4298      	cmp	r0, r3
 8019dfe:	f000 8098 	beq.w	8019f32 <_gpio_init(unsigned int)+0x146>
 8019e02:	f200 80bd 	bhi.w	8019f80 <_gpio_init(unsigned int)+0x194>
 8019e06:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8019e0a:	4298      	cmp	r0, r3
 8019e0c:	d070      	beq.n	8019ef0 <_gpio_init(unsigned int)+0x104>
 8019e0e:	488f      	ldr	r0, [pc, #572]	; (801a04c <_gpio_init(unsigned int)+0x260>)
 8019e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019e14:	2107      	movs	r1, #7
 8019e16:	f7ff f996 	bl	8019146 <gpio_af_set>
 8019e1a:	488c      	ldr	r0, [pc, #560]	; (801a04c <_gpio_init(unsigned int)+0x260>)
 8019e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019e20:	2201      	movs	r2, #1
 8019e22:	2102      	movs	r1, #2
 8019e24:	f7ff f954 	bl	80190d0 <gpio_mode_set>
 8019e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019e2c:	4887      	ldr	r0, [pc, #540]	; (801a04c <_gpio_init(unsigned int)+0x260>)
 8019e2e:	2202      	movs	r2, #2
 8019e30:	2100      	movs	r1, #0
 8019e32:	f7ff f96d 	bl	8019110 <gpio_output_options_set>
 8019e36:	4885      	ldr	r0, [pc, #532]	; (801a04c <_gpio_init(unsigned int)+0x260>)
 8019e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019e3c:	2107      	movs	r1, #7
 8019e3e:	f7ff f982 	bl	8019146 <gpio_af_set>
 8019e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019e46:	4881      	ldr	r0, [pc, #516]	; (801a04c <_gpio_init(unsigned int)+0x260>)
 8019e48:	2201      	movs	r2, #1
 8019e4a:	2102      	movs	r1, #2
 8019e4c:	f7ff f940 	bl	80190d0 <gpio_mode_set>
 8019e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019e54:	487d      	ldr	r0, [pc, #500]	; (801a04c <_gpio_init(unsigned int)+0x260>)
 8019e56:	2202      	movs	r2, #2
 8019e58:	2100      	movs	r1, #0
 8019e5a:	e045      	b.n	8019ee8 <_gpio_init(unsigned int)+0xfc>
 8019e5c:	4b7c      	ldr	r3, [pc, #496]	; (801a050 <_gpio_init(unsigned int)+0x264>)
 8019e5e:	4298      	cmp	r0, r3
 8019e60:	d022      	beq.n	8019ea8 <_gpio_init(unsigned int)+0xbc>
 8019e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8019e66:	4298      	cmp	r0, r3
 8019e68:	f000 80ab 	beq.w	8019fc2 <_gpio_init(unsigned int)+0x1d6>
 8019e6c:	4879      	ldr	r0, [pc, #484]	; (801a054 <_gpio_init(unsigned int)+0x268>)
 8019e6e:	2202      	movs	r2, #2
 8019e70:	2108      	movs	r1, #8
 8019e72:	f7ff f968 	bl	8019146 <gpio_af_set>
 8019e76:	2302      	movs	r3, #2
 8019e78:	4619      	mov	r1, r3
 8019e7a:	4876      	ldr	r0, [pc, #472]	; (801a054 <_gpio_init(unsigned int)+0x268>)
 8019e7c:	2201      	movs	r2, #1
 8019e7e:	f7ff f927 	bl	80190d0 <gpio_mode_set>
 8019e82:	2302      	movs	r3, #2
 8019e84:	461a      	mov	r2, r3
 8019e86:	4873      	ldr	r0, [pc, #460]	; (801a054 <_gpio_init(unsigned int)+0x268>)
 8019e88:	2100      	movs	r1, #0
 8019e8a:	f7ff f941 	bl	8019110 <gpio_output_options_set>
 8019e8e:	4871      	ldr	r0, [pc, #452]	; (801a054 <_gpio_init(unsigned int)+0x268>)
 8019e90:	2201      	movs	r2, #1
 8019e92:	2108      	movs	r1, #8
 8019e94:	f7ff f957 	bl	8019146 <gpio_af_set>
 8019e98:	2301      	movs	r3, #1
 8019e9a:	461a      	mov	r2, r3
 8019e9c:	486d      	ldr	r0, [pc, #436]	; (801a054 <_gpio_init(unsigned int)+0x268>)
 8019e9e:	2102      	movs	r1, #2
 8019ea0:	f7ff f916 	bl	80190d0 <gpio_mode_set>
 8019ea4:	2301      	movs	r3, #1
 8019ea6:	e0ca      	b.n	801a03e <_gpio_init(unsigned int)+0x252>
 8019ea8:	486b      	ldr	r0, [pc, #428]	; (801a058 <_gpio_init(unsigned int)+0x26c>)
 8019eaa:	2240      	movs	r2, #64	; 0x40
 8019eac:	2107      	movs	r1, #7
 8019eae:	f7ff f94a 	bl	8019146 <gpio_af_set>
 8019eb2:	4869      	ldr	r0, [pc, #420]	; (801a058 <_gpio_init(unsigned int)+0x26c>)
 8019eb4:	2340      	movs	r3, #64	; 0x40
 8019eb6:	2201      	movs	r2, #1
 8019eb8:	2102      	movs	r1, #2
 8019eba:	f7ff f909 	bl	80190d0 <gpio_mode_set>
 8019ebe:	2340      	movs	r3, #64	; 0x40
 8019ec0:	4865      	ldr	r0, [pc, #404]	; (801a058 <_gpio_init(unsigned int)+0x26c>)
 8019ec2:	2202      	movs	r2, #2
 8019ec4:	2100      	movs	r1, #0
 8019ec6:	f7ff f923 	bl	8019110 <gpio_output_options_set>
 8019eca:	4863      	ldr	r0, [pc, #396]	; (801a058 <_gpio_init(unsigned int)+0x26c>)
 8019ecc:	2280      	movs	r2, #128	; 0x80
 8019ece:	2107      	movs	r1, #7
 8019ed0:	f7ff f939 	bl	8019146 <gpio_af_set>
 8019ed4:	4860      	ldr	r0, [pc, #384]	; (801a058 <_gpio_init(unsigned int)+0x26c>)
 8019ed6:	2380      	movs	r3, #128	; 0x80
 8019ed8:	2201      	movs	r2, #1
 8019eda:	2102      	movs	r1, #2
 8019edc:	f7ff f8f8 	bl	80190d0 <gpio_mode_set>
 8019ee0:	485d      	ldr	r0, [pc, #372]	; (801a058 <_gpio_init(unsigned int)+0x26c>)
 8019ee2:	2380      	movs	r3, #128	; 0x80
 8019ee4:	2202      	movs	r2, #2
 8019ee6:	2100      	movs	r1, #0
 8019ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019eec:	f7ff b910 	b.w	8019110 <gpio_output_options_set>
 8019ef0:	485a      	ldr	r0, [pc, #360]	; (801a05c <_gpio_init(unsigned int)+0x270>)
 8019ef2:	2204      	movs	r2, #4
 8019ef4:	2107      	movs	r1, #7
 8019ef6:	f7ff f926 	bl	8019146 <gpio_af_set>
 8019efa:	4858      	ldr	r0, [pc, #352]	; (801a05c <_gpio_init(unsigned int)+0x270>)
 8019efc:	2304      	movs	r3, #4
 8019efe:	2201      	movs	r2, #1
 8019f00:	2102      	movs	r1, #2
 8019f02:	f7ff f8e5 	bl	80190d0 <gpio_mode_set>
 8019f06:	2304      	movs	r3, #4
 8019f08:	4854      	ldr	r0, [pc, #336]	; (801a05c <_gpio_init(unsigned int)+0x270>)
 8019f0a:	2202      	movs	r2, #2
 8019f0c:	2100      	movs	r1, #0
 8019f0e:	f7ff f8ff 	bl	8019110 <gpio_output_options_set>
 8019f12:	4852      	ldr	r0, [pc, #328]	; (801a05c <_gpio_init(unsigned int)+0x270>)
 8019f14:	2208      	movs	r2, #8
 8019f16:	2107      	movs	r1, #7
 8019f18:	f7ff f915 	bl	8019146 <gpio_af_set>
 8019f1c:	484f      	ldr	r0, [pc, #316]	; (801a05c <_gpio_init(unsigned int)+0x270>)
 8019f1e:	2308      	movs	r3, #8
 8019f20:	2201      	movs	r2, #1
 8019f22:	2102      	movs	r1, #2
 8019f24:	f7ff f8d4 	bl	80190d0 <gpio_mode_set>
 8019f28:	484c      	ldr	r0, [pc, #304]	; (801a05c <_gpio_init(unsigned int)+0x270>)
 8019f2a:	2308      	movs	r3, #8
 8019f2c:	2202      	movs	r2, #2
 8019f2e:	2100      	movs	r1, #0
 8019f30:	e7da      	b.n	8019ee8 <_gpio_init(unsigned int)+0xfc>
 8019f32:	484b      	ldr	r0, [pc, #300]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019f34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019f38:	2108      	movs	r1, #8
 8019f3a:	f7ff f904 	bl	8019146 <gpio_af_set>
 8019f3e:	4848      	ldr	r0, [pc, #288]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019f44:	2201      	movs	r2, #1
 8019f46:	2102      	movs	r1, #2
 8019f48:	f7ff f8c2 	bl	80190d0 <gpio_mode_set>
 8019f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019f50:	4843      	ldr	r0, [pc, #268]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019f52:	2202      	movs	r2, #2
 8019f54:	2100      	movs	r1, #0
 8019f56:	f7ff f8db 	bl	8019110 <gpio_output_options_set>
 8019f5a:	4841      	ldr	r0, [pc, #260]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019f60:	2108      	movs	r1, #8
 8019f62:	f7ff f8f0 	bl	8019146 <gpio_af_set>
 8019f66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019f6a:	483d      	ldr	r0, [pc, #244]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019f6c:	2201      	movs	r2, #1
 8019f6e:	2102      	movs	r1, #2
 8019f70:	f7ff f8ae 	bl	80190d0 <gpio_mode_set>
 8019f74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019f78:	4839      	ldr	r0, [pc, #228]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019f7a:	2202      	movs	r2, #2
 8019f7c:	2100      	movs	r1, #0
 8019f7e:	e7b3      	b.n	8019ee8 <_gpio_init(unsigned int)+0xfc>
 8019f80:	4837      	ldr	r0, [pc, #220]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019f82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019f86:	2108      	movs	r1, #8
 8019f88:	f7ff f8dd 	bl	8019146 <gpio_af_set>
 8019f8c:	4834      	ldr	r0, [pc, #208]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019f92:	2201      	movs	r2, #1
 8019f94:	2102      	movs	r1, #2
 8019f96:	f7ff f89b 	bl	80190d0 <gpio_mode_set>
 8019f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019f9e:	4830      	ldr	r0, [pc, #192]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019fa0:	2202      	movs	r2, #2
 8019fa2:	2100      	movs	r1, #0
 8019fa4:	f7ff f8b4 	bl	8019110 <gpio_output_options_set>
 8019fa8:	4828      	ldr	r0, [pc, #160]	; (801a04c <_gpio_init(unsigned int)+0x260>)
 8019faa:	2204      	movs	r2, #4
 8019fac:	2108      	movs	r1, #8
 8019fae:	f7ff f8ca 	bl	8019146 <gpio_af_set>
 8019fb2:	2304      	movs	r3, #4
 8019fb4:	4825      	ldr	r0, [pc, #148]	; (801a04c <_gpio_init(unsigned int)+0x260>)
 8019fb6:	2201      	movs	r2, #1
 8019fb8:	2102      	movs	r1, #2
 8019fba:	f7ff f889 	bl	80190d0 <gpio_mode_set>
 8019fbe:	2304      	movs	r3, #4
 8019fc0:	e748      	b.n	8019e54 <_gpio_init(unsigned int)+0x68>
 8019fc2:	4827      	ldr	r0, [pc, #156]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019fc4:	2240      	movs	r2, #64	; 0x40
 8019fc6:	2108      	movs	r1, #8
 8019fc8:	f7ff f8bd 	bl	8019146 <gpio_af_set>
 8019fcc:	4824      	ldr	r0, [pc, #144]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019fce:	2340      	movs	r3, #64	; 0x40
 8019fd0:	2201      	movs	r2, #1
 8019fd2:	2102      	movs	r1, #2
 8019fd4:	f7ff f87c 	bl	80190d0 <gpio_mode_set>
 8019fd8:	2340      	movs	r3, #64	; 0x40
 8019fda:	4821      	ldr	r0, [pc, #132]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019fdc:	2202      	movs	r2, #2
 8019fde:	2100      	movs	r1, #0
 8019fe0:	f7ff f896 	bl	8019110 <gpio_output_options_set>
 8019fe4:	481e      	ldr	r0, [pc, #120]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019fe6:	2280      	movs	r2, #128	; 0x80
 8019fe8:	2108      	movs	r1, #8
 8019fea:	f7ff f8ac 	bl	8019146 <gpio_af_set>
 8019fee:	2380      	movs	r3, #128	; 0x80
 8019ff0:	481b      	ldr	r0, [pc, #108]	; (801a060 <_gpio_init(unsigned int)+0x274>)
 8019ff2:	2201      	movs	r2, #1
 8019ff4:	2102      	movs	r1, #2
 8019ff6:	f7ff f86b 	bl	80190d0 <gpio_mode_set>
 8019ffa:	2380      	movs	r3, #128	; 0x80
 8019ffc:	e7bc      	b.n	8019f78 <_gpio_init(unsigned int)+0x18c>
 8019ffe:	4815      	ldr	r0, [pc, #84]	; (801a054 <_gpio_init(unsigned int)+0x268>)
 801a000:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a004:	2108      	movs	r1, #8
 801a006:	f7ff f89e 	bl	8019146 <gpio_af_set>
 801a00a:	4812      	ldr	r0, [pc, #72]	; (801a054 <_gpio_init(unsigned int)+0x268>)
 801a00c:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a010:	2201      	movs	r2, #1
 801a012:	2102      	movs	r1, #2
 801a014:	f7ff f85c 	bl	80190d0 <gpio_mode_set>
 801a018:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a01c:	480d      	ldr	r0, [pc, #52]	; (801a054 <_gpio_init(unsigned int)+0x268>)
 801a01e:	2202      	movs	r2, #2
 801a020:	2100      	movs	r1, #0
 801a022:	f7ff f875 	bl	8019110 <gpio_output_options_set>
 801a026:	480b      	ldr	r0, [pc, #44]	; (801a054 <_gpio_init(unsigned int)+0x268>)
 801a028:	2280      	movs	r2, #128	; 0x80
 801a02a:	2108      	movs	r1, #8
 801a02c:	f7ff f88b 	bl	8019146 <gpio_af_set>
 801a030:	2380      	movs	r3, #128	; 0x80
 801a032:	4808      	ldr	r0, [pc, #32]	; (801a054 <_gpio_init(unsigned int)+0x268>)
 801a034:	2201      	movs	r2, #1
 801a036:	2102      	movs	r1, #2
 801a038:	f7ff f84a 	bl	80190d0 <gpio_mode_set>
 801a03c:	2380      	movs	r3, #128	; 0x80
 801a03e:	4805      	ldr	r0, [pc, #20]	; (801a054 <_gpio_init(unsigned int)+0x268>)
 801a040:	2202      	movs	r2, #2
 801a042:	2100      	movs	r1, #0
 801a044:	e750      	b.n	8019ee8 <_gpio_init(unsigned int)+0xfc>
 801a046:	bf00      	nop
 801a048:	40007800 	andmi	r7, r0, r0, lsl #16
 801a04c:	40020c00 	andmi	r0, r2, r0, lsl #24
 801a050:	40011000 	andmi	r1, r1, r0
 801a054:	40021000 	andmi	r1, r2, r0
 801a058:	40020400 	andmi	r0, r2, r0, lsl #8
 801a05c:	40020000 	andmi	r0, r2, r0
 801a060:	40020800 	andmi	r0, r2, r0, lsl #16

0801a064 <gd32_uart_begin>:
 801a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a066:	461e      	mov	r6, r3
 801a068:	4b44      	ldr	r3, [pc, #272]	; (801a17c <gd32_uart_begin+0x118>)
 801a06a:	4298      	cmp	r0, r3
 801a06c:	4604      	mov	r4, r0
 801a06e:	460f      	mov	r7, r1
 801a070:	4615      	mov	r5, r2
 801a072:	d076      	beq.n	801a162 <gd32_uart_begin+0xfe>
 801a074:	d80f      	bhi.n	801a096 <gd32_uart_begin+0x32>
 801a076:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 801a07a:	4298      	cmp	r0, r3
 801a07c:	d060      	beq.n	801a140 <gd32_uart_begin+0xdc>
 801a07e:	d866      	bhi.n	801a14e <gd32_uart_begin+0xea>
 801a080:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801a084:	4298      	cmp	r0, r3
 801a086:	d054      	beq.n	801a132 <gd32_uart_begin+0xce>
 801a088:	f241 0012 	movw	r0, #4114	; 0x1012
 801a08c:	f7ff f89c 	bl	80191c8 <rcu_periph_clock_enable>
 801a090:	f640 4003 	movw	r0, #3075	; 0xc03
 801a094:	e00f      	b.n	801a0b6 <gd32_uart_begin+0x52>
 801a096:	4b3a      	ldr	r3, [pc, #232]	; (801a180 <gd32_uart_begin+0x11c>)
 801a098:	4298      	cmp	r0, r3
 801a09a:	d006      	beq.n	801a0aa <gd32_uart_begin+0x46>
 801a09c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801a0a0:	4298      	cmp	r0, r3
 801a0a2:	d05b      	beq.n	801a15c <gd32_uart_begin+0xf8>
 801a0a4:	f241 001f 	movw	r0, #4127	; 0x101f
 801a0a8:	e05d      	b.n	801a166 <gd32_uart_begin+0x102>
 801a0aa:	f241 1004 	movw	r0, #4356	; 0x1104
 801a0ae:	f7ff f88b 	bl	80191c8 <rcu_periph_clock_enable>
 801a0b2:	f640 4001 	movw	r0, #3073	; 0xc01
 801a0b6:	f7ff f887 	bl	80191c8 <rcu_periph_clock_enable>
 801a0ba:	4620      	mov	r0, r4
 801a0bc:	f7ff fe96 	bl	8019dec <_gpio_init(unsigned int)>
 801a0c0:	4620      	mov	r0, r4
 801a0c2:	f7ff fb9b 	bl	80197fc <usart_deinit>
 801a0c6:	68e3      	ldr	r3, [r4, #12]
 801a0c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a0cc:	60e3      	str	r3, [r4, #12]
 801a0ce:	4639      	mov	r1, r7
 801a0d0:	4620      	mov	r0, r4
 801a0d2:	f7ff fbf5 	bl	80198c0 <usart_baudrate_set>
 801a0d6:	f1a5 0309 	sub.w	r3, r5, #9
 801a0da:	4259      	negs	r1, r3
 801a0dc:	4159      	adcs	r1, r3
 801a0de:	0309      	lsls	r1, r1, #12
 801a0e0:	4620      	mov	r0, r4
 801a0e2:	f7ff fc39 	bl	8019958 <usart_word_length_set>
 801a0e6:	9906      	ldr	r1, [sp, #24]
 801a0e8:	1e8a      	subs	r2, r1, #2
 801a0ea:	4251      	negs	r1, r2
 801a0ec:	4151      	adcs	r1, r2
 801a0ee:	0349      	lsls	r1, r1, #13
 801a0f0:	4620      	mov	r0, r4
 801a0f2:	f7ff fc39 	bl	8019968 <usart_stop_bit_set>
 801a0f6:	2e01      	cmp	r6, #1
 801a0f8:	d03a      	beq.n	801a170 <gd32_uart_begin+0x10c>
 801a0fa:	2e02      	cmp	r6, #2
 801a0fc:	d13b      	bne.n	801a176 <gd32_uart_begin+0x112>
 801a0fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a102:	4620      	mov	r0, r4
 801a104:	f7ff fc20 	bl	8019948 <usart_parity_config>
 801a108:	2100      	movs	r1, #0
 801a10a:	4620      	mov	r0, r4
 801a10c:	f7ff fc40 	bl	8019990 <usart_hardware_flow_rts_config>
 801a110:	2100      	movs	r1, #0
 801a112:	4620      	mov	r0, r4
 801a114:	f7ff fc42 	bl	801999c <usart_hardware_flow_cts_config>
 801a118:	2104      	movs	r1, #4
 801a11a:	4620      	mov	r0, r4
 801a11c:	f7ff fc32 	bl	8019984 <usart_receive_config>
 801a120:	2108      	movs	r1, #8
 801a122:	4620      	mov	r0, r4
 801a124:	f7ff fc28 	bl	8019978 <usart_transmit_config>
 801a128:	68e3      	ldr	r3, [r4, #12]
 801a12a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a12e:	60e3      	str	r3, [r4, #12]
 801a130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a132:	f241 0011 	movw	r0, #4113	; 0x1011
 801a136:	f7ff f847 	bl	80191c8 <rcu_periph_clock_enable>
 801a13a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801a13e:	e7ba      	b.n	801a0b6 <gd32_uart_begin+0x52>
 801a140:	f241 0013 	movw	r0, #4115	; 0x1013
 801a144:	f7ff f840 	bl	80191c8 <rcu_periph_clock_enable>
 801a148:	f640 4002 	movw	r0, #3074	; 0xc02
 801a14c:	e7b3      	b.n	801a0b6 <gd32_uart_begin+0x52>
 801a14e:	f241 0014 	movw	r0, #4116	; 0x1014
 801a152:	f7ff f839 	bl	80191c8 <rcu_periph_clock_enable>
 801a156:	f640 4002 	movw	r0, #3074	; 0xc02
 801a15a:	e797      	b.n	801a08c <gd32_uart_begin+0x28>
 801a15c:	f241 1005 	movw	r0, #4357	; 0x1105
 801a160:	e7f0      	b.n	801a144 <gd32_uart_begin+0xe0>
 801a162:	f241 001e 	movw	r0, #4126	; 0x101e
 801a166:	f7ff f82f 	bl	80191c8 <rcu_periph_clock_enable>
 801a16a:	f640 4004 	movw	r0, #3076	; 0xc04
 801a16e:	e7a2      	b.n	801a0b6 <gd32_uart_begin+0x52>
 801a170:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801a174:	e7c5      	b.n	801a102 <gd32_uart_begin+0x9e>
 801a176:	2100      	movs	r1, #0
 801a178:	e7c3      	b.n	801a102 <gd32_uart_begin+0x9e>
 801a17a:	bf00      	nop
 801a17c:	40007800 	andmi	r7, r0, r0, lsl #16
 801a180:	40011000 	andmi	r1, r1, r0

0801a184 <micros_init()>:
 801a184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a186:	f241 0003 	movw	r0, #4099	; 0x1003
 801a18a:	f7ff f81d 	bl	80191c8 <rcu_periph_clock_enable>
 801a18e:	480c      	ldr	r0, [pc, #48]	; (801a1c0 <micros_init()+0x3c>)
 801a190:	f7ff f8d6 	bl	8019340 <timer_deinit>
 801a194:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a198:	2300      	movs	r3, #0
 801a19a:	f8c2 3c24 	str.w	r3, [r2, #3108]	; 0xc24
 801a19e:	22c7      	movs	r2, #199	; 0xc7
 801a1a0:	e9cd 2300 	strd	r2, r3, [sp]
 801a1a4:	4669      	mov	r1, sp
 801a1a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a1aa:	4805      	ldr	r0, [pc, #20]	; (801a1c0 <micros_init()+0x3c>)
 801a1ac:	9302      	str	r3, [sp, #8]
 801a1ae:	f7ff f96d 	bl	801948c <timer_init>
 801a1b2:	4803      	ldr	r0, [pc, #12]	; (801a1c0 <micros_init()+0x3c>)
 801a1b4:	f7ff f9a8 	bl	8019508 <timer_enable>
 801a1b8:	b005      	add	sp, #20
 801a1ba:	f85d fb04 	ldr.w	pc, [sp], #4
 801a1be:	bf00      	nop
 801a1c0:	40000c00 	andmi	r0, r0, r0, lsl #24

0801a1c4 <udelay_init()>:
 801a1c4:	4a07      	ldr	r2, [pc, #28]	; (801a1e4 <udelay_init()+0x20>)
 801a1c6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 801a1ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a1ce:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 801a1d2:	4b05      	ldr	r3, [pc, #20]	; (801a1e8 <udelay_init()+0x24>)
 801a1d4:	2200      	movs	r2, #0
 801a1d6:	605a      	str	r2, [r3, #4]
 801a1d8:	681a      	ldr	r2, [r3, #0]
 801a1da:	f042 0201 	orr.w	r2, r2, #1
 801a1de:	601a      	str	r2, [r3, #0]
 801a1e0:	4770      	bx	lr
 801a1e2:	bf00      	nop
 801a1e4:	e000ed00 	and	lr, r0, r0, lsl #26
 801a1e8:	e0001000 	and	r1, r0, r0

0801a1ec <udelay(unsigned int, unsigned int)>:
 801a1ec:	23c8      	movs	r3, #200	; 0xc8
 801a1ee:	b530      	push	{r4, r5, lr}
 801a1f0:	4358      	muls	r0, r3
 801a1f2:	b909      	cbnz	r1, 801a1f8 <udelay(unsigned int, unsigned int)+0xc>
 801a1f4:	4b08      	ldr	r3, [pc, #32]	; (801a218 <udelay(unsigned int, unsigned int)+0x2c>)
 801a1f6:	6859      	ldr	r1, [r3, #4]
 801a1f8:	4c07      	ldr	r4, [pc, #28]	; (801a218 <udelay(unsigned int, unsigned int)+0x2c>)
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	6862      	ldr	r2, [r4, #4]
 801a1fe:	4291      	cmp	r1, r2
 801a200:	d0fc      	beq.n	801a1fc <udelay(unsigned int, unsigned int)+0x10>
 801a202:	bf2a      	itet	cs
 801a204:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 801a208:	189b      	addcc	r3, r3, r2
 801a20a:	195b      	addcs	r3, r3, r5
 801a20c:	1a5b      	subs	r3, r3, r1
 801a20e:	4283      	cmp	r3, r0
 801a210:	d300      	bcc.n	801a214 <udelay(unsigned int, unsigned int)+0x28>
 801a212:	bd30      	pop	{r4, r5, pc}
 801a214:	4611      	mov	r1, r2
 801a216:	e7f1      	b.n	801a1fc <udelay(unsigned int, unsigned int)+0x10>
 801a218:	e0001000 	and	r1, r0, r0

0801a21c <emac_start(unsigned char*)>:
 801a21c:	b570      	push	{r4, r5, r6, lr}
 801a21e:	4605      	mov	r5, r0
 801a220:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801a224:	f7fe ffd0 	bl	80191c8 <rcu_periph_clock_enable>
 801a228:	f640 4001 	movw	r0, #3073	; 0xc01
 801a22c:	f7fe ffcc 	bl	80191c8 <rcu_periph_clock_enable>
 801a230:	f640 4002 	movw	r0, #3074	; 0xc02
 801a234:	f7fe ffc8 	bl	80191c8 <rcu_periph_clock_enable>
 801a238:	f241 100e 	movw	r0, #4366	; 0x110e
 801a23c:	f7fe ffc4 	bl	80191c8 <rcu_periph_clock_enable>
 801a240:	487d      	ldr	r0, [pc, #500]	; (801a438 <emac_start(unsigned char*)+0x21c>)
 801a242:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a246:	2100      	movs	r1, #0
 801a248:	f7fe ff7d 	bl	8019146 <gpio_af_set>
 801a24c:	487a      	ldr	r0, [pc, #488]	; (801a438 <emac_start(unsigned char*)+0x21c>)
 801a24e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a252:	2200      	movs	r2, #0
 801a254:	2102      	movs	r1, #2
 801a256:	f7fe ff3b 	bl	80190d0 <gpio_mode_set>
 801a25a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a25e:	2203      	movs	r2, #3
 801a260:	4875      	ldr	r0, [pc, #468]	; (801a438 <emac_start(unsigned char*)+0x21c>)
 801a262:	2100      	movs	r1, #0
 801a264:	f7fe ff54 	bl	8019110 <gpio_output_options_set>
 801a268:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 801a26c:	f44f 00c0 	mov.w	r0, #6291456	; 0x600000
 801a270:	f7fe ffca 	bl	8019208 <rcu_ckout0_config>
 801a274:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801a278:	f7ff f856 	bl	8019328 <syscfg_enet_phy_interface_config>
 801a27c:	2302      	movs	r3, #2
 801a27e:	4619      	mov	r1, r3
 801a280:	486d      	ldr	r0, [pc, #436]	; (801a438 <emac_start(unsigned char*)+0x21c>)
 801a282:	2200      	movs	r2, #0
 801a284:	f7fe ff24 	bl	80190d0 <gpio_mode_set>
 801a288:	486b      	ldr	r0, [pc, #428]	; (801a438 <emac_start(unsigned char*)+0x21c>)
 801a28a:	2302      	movs	r3, #2
 801a28c:	2203      	movs	r2, #3
 801a28e:	2100      	movs	r1, #0
 801a290:	f7fe ff3e 	bl	8019110 <gpio_output_options_set>
 801a294:	4868      	ldr	r0, [pc, #416]	; (801a438 <emac_start(unsigned char*)+0x21c>)
 801a296:	2304      	movs	r3, #4
 801a298:	2200      	movs	r2, #0
 801a29a:	2102      	movs	r1, #2
 801a29c:	f7fe ff18 	bl	80190d0 <gpio_mode_set>
 801a2a0:	4865      	ldr	r0, [pc, #404]	; (801a438 <emac_start(unsigned char*)+0x21c>)
 801a2a2:	2304      	movs	r3, #4
 801a2a4:	2203      	movs	r2, #3
 801a2a6:	2100      	movs	r1, #0
 801a2a8:	f7fe ff32 	bl	8019110 <gpio_output_options_set>
 801a2ac:	4862      	ldr	r0, [pc, #392]	; (801a438 <emac_start(unsigned char*)+0x21c>)
 801a2ae:	2380      	movs	r3, #128	; 0x80
 801a2b0:	2200      	movs	r2, #0
 801a2b2:	2102      	movs	r1, #2
 801a2b4:	f7fe ff0c 	bl	80190d0 <gpio_mode_set>
 801a2b8:	2380      	movs	r3, #128	; 0x80
 801a2ba:	485f      	ldr	r0, [pc, #380]	; (801a438 <emac_start(unsigned char*)+0x21c>)
 801a2bc:	2203      	movs	r2, #3
 801a2be:	2100      	movs	r1, #0
 801a2c0:	f7fe ff26 	bl	8019110 <gpio_output_options_set>
 801a2c4:	485c      	ldr	r0, [pc, #368]	; (801a438 <emac_start(unsigned char*)+0x21c>)
 801a2c6:	2202      	movs	r2, #2
 801a2c8:	210b      	movs	r1, #11
 801a2ca:	f7fe ff3c 	bl	8019146 <gpio_af_set>
 801a2ce:	485a      	ldr	r0, [pc, #360]	; (801a438 <emac_start(unsigned char*)+0x21c>)
 801a2d0:	2204      	movs	r2, #4
 801a2d2:	210b      	movs	r1, #11
 801a2d4:	f7fe ff37 	bl	8019146 <gpio_af_set>
 801a2d8:	4857      	ldr	r0, [pc, #348]	; (801a438 <emac_start(unsigned char*)+0x21c>)
 801a2da:	2280      	movs	r2, #128	; 0x80
 801a2dc:	210b      	movs	r1, #11
 801a2de:	f7fe ff32 	bl	8019146 <gpio_af_set>
 801a2e2:	4856      	ldr	r0, [pc, #344]	; (801a43c <emac_start(unsigned char*)+0x220>)
 801a2e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a2e8:	2200      	movs	r2, #0
 801a2ea:	2102      	movs	r1, #2
 801a2ec:	f7fe fef0 	bl	80190d0 <gpio_mode_set>
 801a2f0:	4852      	ldr	r0, [pc, #328]	; (801a43c <emac_start(unsigned char*)+0x220>)
 801a2f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a2f6:	2203      	movs	r2, #3
 801a2f8:	2100      	movs	r1, #0
 801a2fa:	f7fe ff09 	bl	8019110 <gpio_output_options_set>
 801a2fe:	484f      	ldr	r0, [pc, #316]	; (801a43c <emac_start(unsigned char*)+0x220>)
 801a300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a304:	2200      	movs	r2, #0
 801a306:	2102      	movs	r1, #2
 801a308:	f7fe fee2 	bl	80190d0 <gpio_mode_set>
 801a30c:	484b      	ldr	r0, [pc, #300]	; (801a43c <emac_start(unsigned char*)+0x220>)
 801a30e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a312:	2203      	movs	r2, #3
 801a314:	2100      	movs	r1, #0
 801a316:	f7fe fefb 	bl	8019110 <gpio_output_options_set>
 801a31a:	4848      	ldr	r0, [pc, #288]	; (801a43c <emac_start(unsigned char*)+0x220>)
 801a31c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a320:	2200      	movs	r2, #0
 801a322:	2102      	movs	r1, #2
 801a324:	f7fe fed4 	bl	80190d0 <gpio_mode_set>
 801a328:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a32c:	4843      	ldr	r0, [pc, #268]	; (801a43c <emac_start(unsigned char*)+0x220>)
 801a32e:	2203      	movs	r2, #3
 801a330:	2100      	movs	r1, #0
 801a332:	f7fe feed 	bl	8019110 <gpio_output_options_set>
 801a336:	4841      	ldr	r0, [pc, #260]	; (801a43c <emac_start(unsigned char*)+0x220>)
 801a338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a33c:	210b      	movs	r1, #11
 801a33e:	f7fe ff02 	bl	8019146 <gpio_af_set>
 801a342:	483e      	ldr	r0, [pc, #248]	; (801a43c <emac_start(unsigned char*)+0x220>)
 801a344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a348:	210b      	movs	r1, #11
 801a34a:	f7fe fefc 	bl	8019146 <gpio_af_set>
 801a34e:	483b      	ldr	r0, [pc, #236]	; (801a43c <emac_start(unsigned char*)+0x220>)
 801a350:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801a354:	210b      	movs	r1, #11
 801a356:	f7fe fef6 	bl	8019146 <gpio_af_set>
 801a35a:	2302      	movs	r3, #2
 801a35c:	4619      	mov	r1, r3
 801a35e:	4838      	ldr	r0, [pc, #224]	; (801a440 <emac_start(unsigned char*)+0x224>)
 801a360:	2200      	movs	r2, #0
 801a362:	f7fe feb5 	bl	80190d0 <gpio_mode_set>
 801a366:	4836      	ldr	r0, [pc, #216]	; (801a440 <emac_start(unsigned char*)+0x224>)
 801a368:	2302      	movs	r3, #2
 801a36a:	2203      	movs	r2, #3
 801a36c:	2100      	movs	r1, #0
 801a36e:	f7fe fecf 	bl	8019110 <gpio_output_options_set>
 801a372:	4833      	ldr	r0, [pc, #204]	; (801a440 <emac_start(unsigned char*)+0x224>)
 801a374:	2310      	movs	r3, #16
 801a376:	2200      	movs	r2, #0
 801a378:	2102      	movs	r1, #2
 801a37a:	f7fe fea9 	bl	80190d0 <gpio_mode_set>
 801a37e:	4830      	ldr	r0, [pc, #192]	; (801a440 <emac_start(unsigned char*)+0x224>)
 801a380:	2310      	movs	r3, #16
 801a382:	2203      	movs	r2, #3
 801a384:	2100      	movs	r1, #0
 801a386:	f7fe fec3 	bl	8019110 <gpio_output_options_set>
 801a38a:	482d      	ldr	r0, [pc, #180]	; (801a440 <emac_start(unsigned char*)+0x224>)
 801a38c:	2320      	movs	r3, #32
 801a38e:	2200      	movs	r2, #0
 801a390:	2102      	movs	r1, #2
 801a392:	f7fe fe9d 	bl	80190d0 <gpio_mode_set>
 801a396:	2320      	movs	r3, #32
 801a398:	4829      	ldr	r0, [pc, #164]	; (801a440 <emac_start(unsigned char*)+0x224>)
 801a39a:	2203      	movs	r2, #3
 801a39c:	2100      	movs	r1, #0
 801a39e:	f7fe feb7 	bl	8019110 <gpio_output_options_set>
 801a3a2:	4827      	ldr	r0, [pc, #156]	; (801a440 <emac_start(unsigned char*)+0x224>)
 801a3a4:	2202      	movs	r2, #2
 801a3a6:	210b      	movs	r1, #11
 801a3a8:	f7fe fecd 	bl	8019146 <gpio_af_set>
 801a3ac:	4824      	ldr	r0, [pc, #144]	; (801a440 <emac_start(unsigned char*)+0x224>)
 801a3ae:	2210      	movs	r2, #16
 801a3b0:	210b      	movs	r1, #11
 801a3b2:	f7fe fec8 	bl	8019146 <gpio_af_set>
 801a3b6:	2220      	movs	r2, #32
 801a3b8:	210b      	movs	r1, #11
 801a3ba:	4821      	ldr	r0, [pc, #132]	; (801a440 <emac_start(unsigned char*)+0x224>)
 801a3bc:	f7fe fec3 	bl	8019146 <gpio_af_set>
 801a3c0:	f640 4019 	movw	r0, #3097	; 0xc19
 801a3c4:	f7fe ff00 	bl	80191c8 <rcu_periph_clock_enable>
 801a3c8:	f640 401a 	movw	r0, #3098	; 0xc1a
 801a3cc:	f7fe fefc 	bl	80191c8 <rcu_periph_clock_enable>
 801a3d0:	f640 401b 	movw	r0, #3099	; 0xc1b
 801a3d4:	f7fe fef8 	bl	80191c8 <rcu_periph_clock_enable>
 801a3d8:	f7fe fe32 	bl	8019040 <enet_deinit>
 801a3dc:	f7fe fa5a 	bl	8018894 <enet_software_reset>
 801a3e0:	4604      	mov	r4, r0
 801a3e2:	b138      	cbz	r0, 801a3f4 <emac_start(unsigned char*)+0x1d8>
 801a3e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a3e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a3ec:	2001      	movs	r0, #1
 801a3ee:	f7fe fbe9 	bl	8018bc4 <enet_init>
 801a3f2:	4604      	mov	r4, r0
 801a3f4:	4628      	mov	r0, r5
 801a3f6:	f000 f9c1 	bl	801a77c <mac_address_get(unsigned char*)>
 801a3fa:	4629      	mov	r1, r5
 801a3fc:	2000      	movs	r0, #0
 801a3fe:	f7fe fb39 	bl	8018a74 <enet_mac_address_set>
 801a402:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 801a406:	f7fe fa59 	bl	80188bc <enet_descriptors_chain_init>
 801a40a:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 801a40e:	f7fe fa55 	bl	80188bc <enet_descriptors_chain_init>
 801a412:	4e0c      	ldr	r6, [pc, #48]	; (801a444 <emac_start(unsigned char*)+0x228>)
 801a414:	2500      	movs	r5, #0
 801a416:	4630      	mov	r0, r6
 801a418:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 801a41c:	3501      	adds	r5, #1
 801a41e:	f7fe fb23 	bl	8018a68 <enet_transmit_checksum_config>
 801a422:	2d08      	cmp	r5, #8
 801a424:	f106 0610 	add.w	r6, r6, #16
 801a428:	d1f5      	bne.n	801a416 <emac_start(unsigned char*)+0x1fa>
 801a42a:	f7fe fd6b 	bl	8018f04 <enet_enable>
 801a42e:	fab4 f084 	clz	r0, r4
 801a432:	0940      	lsrs	r0, r0, #5
 801a434:	4240      	negs	r0, r0
 801a436:	bd70      	pop	{r4, r5, r6, pc}
 801a438:	40020000 	andmi	r0, r2, r0
 801a43c:	40020400 	andmi	r0, r2, r0, lsl #8
 801a440:	40020800 	andmi	r0, r2, r0, lsl #16
 801a444:	2002d2bc 			; <UNDEFINED> instruction: 0x2002d2bc

0801a448 <adc_clock_config>:
 801a448:	4b06      	ldr	r3, [pc, #24]	; (801a464 <adc_clock_config+0x1c>)
 801a44a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 801a44e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 801a452:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 801a456:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 801a45a:	4310      	orrs	r0, r2
 801a45c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
 801a460:	4770      	bx	lr
 801a462:	bf00      	nop
 801a464:	40012000 	andmi	r2, r1, r0

0801a468 <adc_special_function_config>:
 801a468:	b510      	push	{r4, lr}
 801a46a:	f401 7380 	and.w	r3, r1, #256	; 0x100
 801a46e:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 801a472:	f001 0102 	and.w	r1, r1, #2
 801a476:	b17a      	cbz	r2, 801a498 <adc_special_function_config+0x30>
 801a478:	b11b      	cbz	r3, 801a482 <adc_special_function_config+0x1a>
 801a47a:	6843      	ldr	r3, [r0, #4]
 801a47c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a480:	6043      	str	r3, [r0, #4]
 801a482:	b11c      	cbz	r4, 801a48c <adc_special_function_config+0x24>
 801a484:	6843      	ldr	r3, [r0, #4]
 801a486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801a48a:	6043      	str	r3, [r0, #4]
 801a48c:	b119      	cbz	r1, 801a496 <adc_special_function_config+0x2e>
 801a48e:	6883      	ldr	r3, [r0, #8]
 801a490:	f043 0302 	orr.w	r3, r3, #2
 801a494:	6083      	str	r3, [r0, #8]
 801a496:	bd10      	pop	{r4, pc}
 801a498:	b11b      	cbz	r3, 801a4a2 <adc_special_function_config+0x3a>
 801a49a:	6843      	ldr	r3, [r0, #4]
 801a49c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a4a0:	6043      	str	r3, [r0, #4]
 801a4a2:	b11c      	cbz	r4, 801a4ac <adc_special_function_config+0x44>
 801a4a4:	6843      	ldr	r3, [r0, #4]
 801a4a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a4aa:	6043      	str	r3, [r0, #4]
 801a4ac:	2900      	cmp	r1, #0
 801a4ae:	d0f2      	beq.n	801a496 <adc_special_function_config+0x2e>
 801a4b0:	6883      	ldr	r3, [r0, #8]
 801a4b2:	f023 0302 	bic.w	r3, r3, #2
 801a4b6:	e7ed      	b.n	801a494 <adc_special_function_config+0x2c>

0801a4b8 <adc_data_alignment_config>:
 801a4b8:	6883      	ldr	r3, [r0, #8]
 801a4ba:	b119      	cbz	r1, 801a4c4 <adc_data_alignment_config+0xc>
 801a4bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a4c0:	6083      	str	r3, [r0, #8]
 801a4c2:	4770      	bx	lr
 801a4c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a4c8:	e7fa      	b.n	801a4c0 <adc_data_alignment_config+0x8>

0801a4ca <adc_enable>:
 801a4ca:	6883      	ldr	r3, [r0, #8]
 801a4cc:	07db      	lsls	r3, r3, #31
 801a4ce:	bf5e      	ittt	pl
 801a4d0:	6883      	ldrpl	r3, [r0, #8]
 801a4d2:	f043 0301 	orrpl.w	r3, r3, #1
 801a4d6:	6083      	strpl	r3, [r0, #8]
 801a4d8:	4770      	bx	lr

0801a4da <adc_calibration_enable>:
 801a4da:	6883      	ldr	r3, [r0, #8]
 801a4dc:	f043 0308 	orr.w	r3, r3, #8
 801a4e0:	f100 0208 	add.w	r2, r0, #8
 801a4e4:	6083      	str	r3, [r0, #8]
 801a4e6:	6813      	ldr	r3, [r2, #0]
 801a4e8:	0719      	lsls	r1, r3, #28
 801a4ea:	d4fc      	bmi.n	801a4e6 <adc_calibration_enable+0xc>
 801a4ec:	6883      	ldr	r3, [r0, #8]
 801a4ee:	f043 0304 	orr.w	r3, r3, #4
 801a4f2:	6083      	str	r3, [r0, #8]
 801a4f4:	6813      	ldr	r3, [r2, #0]
 801a4f6:	075b      	lsls	r3, r3, #29
 801a4f8:	d4fc      	bmi.n	801a4f4 <adc_calibration_enable+0x1a>
 801a4fa:	4770      	bx	lr

0801a4fc <adc_channel_16_to_18>:
 801a4fc:	f400 0380 	and.w	r3, r0, #4194304	; 0x400000
 801a500:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000
 801a504:	b181      	cbz	r1, 801a528 <adc_channel_16_to_18+0x2c>
 801a506:	b133      	cbz	r3, 801a516 <adc_channel_16_to_18+0x1a>
 801a508:	4a0f      	ldr	r2, [pc, #60]	; (801a548 <adc_channel_16_to_18+0x4c>)
 801a50a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 801a50e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801a512:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 801a516:	b130      	cbz	r0, 801a526 <adc_channel_16_to_18+0x2a>
 801a518:	4a0b      	ldr	r2, [pc, #44]	; (801a548 <adc_channel_16_to_18+0x4c>)
 801a51a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 801a51e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801a522:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 801a526:	4770      	bx	lr
 801a528:	b133      	cbz	r3, 801a538 <adc_channel_16_to_18+0x3c>
 801a52a:	4a07      	ldr	r2, [pc, #28]	; (801a548 <adc_channel_16_to_18+0x4c>)
 801a52c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 801a530:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 801a534:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 801a538:	2800      	cmp	r0, #0
 801a53a:	d0f4      	beq.n	801a526 <adc_channel_16_to_18+0x2a>
 801a53c:	4a02      	ldr	r2, [pc, #8]	; (801a548 <adc_channel_16_to_18+0x4c>)
 801a53e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 801a542:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801a546:	e7ec      	b.n	801a522 <adc_channel_16_to_18+0x26>
 801a548:	40012000 	andmi	r2, r1, r0

0801a54c <adc_channel_length_config>:
 801a54c:	2901      	cmp	r1, #1
 801a54e:	d002      	beq.n	801a556 <adc_channel_length_config+0xa>
 801a550:	2902      	cmp	r1, #2
 801a552:	d00c      	beq.n	801a56e <adc_channel_length_config+0x22>
 801a554:	4770      	bx	lr
 801a556:	3a01      	subs	r2, #1
 801a558:	2a0f      	cmp	r2, #15
 801a55a:	d813      	bhi.n	801a584 <adc_channel_length_config+0x38>
 801a55c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801a55e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801a562:	62c3      	str	r3, [r0, #44]	; 0x2c
 801a564:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801a566:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801a56a:	62c3      	str	r3, [r0, #44]	; 0x2c
 801a56c:	4770      	bx	lr
 801a56e:	3a01      	subs	r2, #1
 801a570:	2a03      	cmp	r2, #3
 801a572:	d807      	bhi.n	801a584 <adc_channel_length_config+0x38>
 801a574:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a576:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a57a:	6383      	str	r3, [r0, #56]	; 0x38
 801a57c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a57e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801a582:	6383      	str	r3, [r0, #56]	; 0x38
 801a584:	4770      	bx	lr

0801a586 <adc_inserted_channel_config>:
 801a586:	2903      	cmp	r1, #3
 801a588:	b530      	push	{r4, r5, lr}
 801a58a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801a58c:	d80f      	bhi.n	801a5ae <adc_inserted_channel_config+0x28>
 801a58e:	f3c4 5401 	ubfx	r4, r4, #20, #2
 801a592:	1a61      	subs	r1, r4, r1
 801a594:	f06f 0404 	mvn.w	r4, #4
 801a598:	4361      	muls	r1, r4
 801a59a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 801a59c:	310f      	adds	r1, #15
 801a59e:	241f      	movs	r4, #31
 801a5a0:	408c      	lsls	r4, r1
 801a5a2:	ea25 0404 	bic.w	r4, r5, r4
 801a5a6:	fa02 f101 	lsl.w	r1, r2, r1
 801a5aa:	4321      	orrs	r1, r4
 801a5ac:	6381      	str	r1, [r0, #56]	; 0x38
 801a5ae:	2a09      	cmp	r2, #9
 801a5b0:	d80a      	bhi.n	801a5c8 <adc_inserted_channel_config+0x42>
 801a5b2:	6901      	ldr	r1, [r0, #16]
 801a5b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a5b8:	2407      	movs	r4, #7
 801a5ba:	4094      	lsls	r4, r2
 801a5bc:	ea21 0104 	bic.w	r1, r1, r4
 801a5c0:	4093      	lsls	r3, r2
 801a5c2:	430b      	orrs	r3, r1
 801a5c4:	6103      	str	r3, [r0, #16]
 801a5c6:	bd30      	pop	{r4, r5, pc}
 801a5c8:	2a12      	cmp	r2, #18
 801a5ca:	d8fc      	bhi.n	801a5c6 <adc_inserted_channel_config+0x40>
 801a5cc:	3a0a      	subs	r2, #10
 801a5ce:	68c1      	ldr	r1, [r0, #12]
 801a5d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a5d4:	2407      	movs	r4, #7
 801a5d6:	4094      	lsls	r4, r2
 801a5d8:	ea21 0104 	bic.w	r1, r1, r4
 801a5dc:	4093      	lsls	r3, r2
 801a5de:	430b      	orrs	r3, r1
 801a5e0:	60c3      	str	r3, [r0, #12]
 801a5e2:	e7f0      	b.n	801a5c6 <adc_inserted_channel_config+0x40>

0801a5e4 <adc_external_trigger_config>:
 801a5e4:	2901      	cmp	r1, #1
 801a5e6:	d002      	beq.n	801a5ee <adc_external_trigger_config+0xa>
 801a5e8:	2902      	cmp	r1, #2
 801a5ea:	d009      	beq.n	801a600 <adc_external_trigger_config+0x1c>
 801a5ec:	4770      	bx	lr
 801a5ee:	6883      	ldr	r3, [r0, #8]
 801a5f0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 801a5f4:	6083      	str	r3, [r0, #8]
 801a5f6:	6883      	ldr	r3, [r0, #8]
 801a5f8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 801a5fc:	6083      	str	r3, [r0, #8]
 801a5fe:	4770      	bx	lr
 801a600:	6883      	ldr	r3, [r0, #8]
 801a602:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a606:	6083      	str	r3, [r0, #8]
 801a608:	6883      	ldr	r3, [r0, #8]
 801a60a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801a60e:	e7f5      	b.n	801a5fc <adc_external_trigger_config+0x18>

0801a610 <adc_software_trigger_enable>:
 801a610:	2901      	cmp	r1, #1
 801a612:	d002      	beq.n	801a61a <adc_software_trigger_enable+0xa>
 801a614:	2902      	cmp	r1, #2
 801a616:	d005      	beq.n	801a624 <adc_software_trigger_enable+0x14>
 801a618:	4770      	bx	lr
 801a61a:	6883      	ldr	r3, [r0, #8]
 801a61c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801a620:	6083      	str	r3, [r0, #8]
 801a622:	4770      	bx	lr
 801a624:	6883      	ldr	r3, [r0, #8]
 801a626:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801a62a:	e7f9      	b.n	801a620 <adc_software_trigger_enable+0x10>

0801a62c <i2c_clock_config>:
 801a62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a62e:	4605      	mov	r5, r0
 801a630:	2002      	movs	r0, #2
 801a632:	460c      	mov	r4, r1
 801a634:	4617      	mov	r7, r2
 801a636:	f7fe fe03 	bl	8019240 <rcu_clock_freq_get>
 801a63a:	4a26      	ldr	r2, [pc, #152]	; (801a6d4 <i2c_clock_config+0xa8>)
 801a63c:	686e      	ldr	r6, [r5, #4]
 801a63e:	4603      	mov	r3, r0
 801a640:	4825      	ldr	r0, [pc, #148]	; (801a6d8 <i2c_clock_config+0xac>)
 801a642:	fbb3 f0f0 	udiv	r0, r3, r0
 801a646:	4293      	cmp	r3, r2
 801a648:	bf94      	ite	ls
 801a64a:	4601      	movls	r1, r0
 801a64c:	2132      	movhi	r1, #50	; 0x32
 801a64e:	4a23      	ldr	r2, [pc, #140]	; (801a6dc <i2c_clock_config+0xb0>)
 801a650:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 801a654:	430e      	orrs	r6, r1
 801a656:	4294      	cmp	r4, r2
 801a658:	606e      	str	r6, [r5, #4]
 801a65a:	d811      	bhi.n	801a680 <i2c_clock_config+0x54>
 801a65c:	3001      	adds	r0, #1
 801a65e:	2831      	cmp	r0, #49	; 0x31
 801a660:	bf86      	itte	hi
 801a662:	2232      	movhi	r2, #50	; 0x32
 801a664:	622a      	strhi	r2, [r5, #32]
 801a666:	6228      	strls	r0, [r5, #32]
 801a668:	0064      	lsls	r4, r4, #1
 801a66a:	fbb3 f4f4 	udiv	r4, r3, r4
 801a66e:	2c04      	cmp	r4, #4
 801a670:	69ea      	ldr	r2, [r5, #28]
 801a672:	bf38      	it	cc
 801a674:	2404      	movcc	r4, #4
 801a676:	f3c4 040b 	ubfx	r4, r4, #0, #12
 801a67a:	4314      	orrs	r4, r2
 801a67c:	61ec      	str	r4, [r5, #28]
 801a67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a680:	4a17      	ldr	r2, [pc, #92]	; (801a6e0 <i2c_clock_config+0xb4>)
 801a682:	4294      	cmp	r4, r2
 801a684:	d8fb      	bhi.n	801a67e <i2c_clock_config+0x52>
 801a686:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801a68a:	4351      	muls	r1, r2
 801a68c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a690:	fbb1 f1f2 	udiv	r1, r1, r2
 801a694:	3101      	adds	r1, #1
 801a696:	6229      	str	r1, [r5, #32]
 801a698:	b9a7      	cbnz	r7, 801a6c4 <i2c_clock_config+0x98>
 801a69a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a69e:	fbb3 f4f4 	udiv	r4, r3, r4
 801a6a2:	69eb      	ldr	r3, [r5, #28]
 801a6a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801a6a8:	61eb      	str	r3, [r5, #28]
 801a6aa:	f3c4 030b 	ubfx	r3, r4, #0, #12
 801a6ae:	b90b      	cbnz	r3, 801a6b4 <i2c_clock_config+0x88>
 801a6b0:	f044 0401 	orr.w	r4, r4, #1
 801a6b4:	69eb      	ldr	r3, [r5, #28]
 801a6b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a6ba:	61eb      	str	r3, [r5, #28]
 801a6bc:	69eb      	ldr	r3, [r5, #28]
 801a6be:	4323      	orrs	r3, r4
 801a6c0:	61eb      	str	r3, [r5, #28]
 801a6c2:	e7dc      	b.n	801a67e <i2c_clock_config+0x52>
 801a6c4:	2219      	movs	r2, #25
 801a6c6:	4354      	muls	r4, r2
 801a6c8:	fbb3 f4f4 	udiv	r4, r3, r4
 801a6cc:	69eb      	ldr	r3, [r5, #28]
 801a6ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a6d2:	e7e9      	b.n	801a6a8 <i2c_clock_config+0x7c>
 801a6d4:	02faf07f 	rscseq	pc, sl, #127	; 0x7f
 801a6d8:	000f4240 	andeq	r4, pc, r0, asr #4
 801a6dc:	000186a0 	andeq	r8, r1, r0, lsr #13
 801a6e0:	00061a80 	andeq	r1, r6, r0, lsl #21

0801a6e4 <i2c_ack_config>:
 801a6e4:	6803      	ldr	r3, [r0, #0]
 801a6e6:	2901      	cmp	r1, #1
 801a6e8:	bf0c      	ite	eq
 801a6ea:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 801a6ee:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 801a6f2:	6003      	str	r3, [r0, #0]
 801a6f4:	4770      	bx	lr

0801a6f6 <i2c_ackpos_config>:
 801a6f6:	6803      	ldr	r3, [r0, #0]
 801a6f8:	b919      	cbnz	r1, 801a702 <i2c_ackpos_config+0xc>
 801a6fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a6fe:	6003      	str	r3, [r0, #0]
 801a700:	4770      	bx	lr
 801a702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a706:	e7fa      	b.n	801a6fe <i2c_ackpos_config+0x8>

0801a708 <i2c_master_addressing>:
 801a708:	3202      	adds	r2, #2
 801a70a:	bf0c      	ite	eq
 801a70c:	f021 0101 	biceq.w	r1, r1, #1
 801a710:	f041 0101 	orrne.w	r1, r1, #1
 801a714:	6101      	str	r1, [r0, #16]
 801a716:	4770      	bx	lr

0801a718 <i2c_enable>:
 801a718:	6803      	ldr	r3, [r0, #0]
 801a71a:	f043 0301 	orr.w	r3, r3, #1
 801a71e:	6003      	str	r3, [r0, #0]
 801a720:	4770      	bx	lr

0801a722 <i2c_start_on_bus>:
 801a722:	6803      	ldr	r3, [r0, #0]
 801a724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a728:	6003      	str	r3, [r0, #0]
 801a72a:	4770      	bx	lr

0801a72c <i2c_stop_on_bus>:
 801a72c:	6803      	ldr	r3, [r0, #0]
 801a72e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801a732:	6003      	str	r3, [r0, #0]
 801a734:	4770      	bx	lr

0801a736 <i2c_data_transmit>:
 801a736:	6101      	str	r1, [r0, #16]
 801a738:	4770      	bx	lr

0801a73a <i2c_data_receive>:
 801a73a:	6900      	ldr	r0, [r0, #16]
 801a73c:	b2c0      	uxtb	r0, r0
 801a73e:	4770      	bx	lr

0801a740 <i2c_flag_get>:
 801a740:	098b      	lsrs	r3, r1, #6
 801a742:	f001 011f 	and.w	r1, r1, #31
 801a746:	581a      	ldr	r2, [r3, r0]
 801a748:	2301      	movs	r3, #1
 801a74a:	408b      	lsls	r3, r1
 801a74c:	4213      	tst	r3, r2
 801a74e:	bf14      	ite	ne
 801a750:	2001      	movne	r0, #1
 801a752:	2000      	moveq	r0, #0
 801a754:	4770      	bx	lr

0801a756 <i2c_flag_clear>:
 801a756:	f240 5301 	movw	r3, #1281	; 0x501
 801a75a:	4299      	cmp	r1, r3
 801a75c:	b510      	push	{r4, lr}
 801a75e:	d102      	bne.n	801a766 <i2c_flag_clear+0x10>
 801a760:	6943      	ldr	r3, [r0, #20]
 801a762:	6983      	ldr	r3, [r0, #24]
 801a764:	bd10      	pop	{r4, pc}
 801a766:	098c      	lsrs	r4, r1, #6
 801a768:	2201      	movs	r2, #1
 801a76a:	5823      	ldr	r3, [r4, r0]
 801a76c:	f001 011f 	and.w	r1, r1, #31
 801a770:	408a      	lsls	r2, r1
 801a772:	ea23 0302 	bic.w	r3, r3, r2
 801a776:	5023      	str	r3, [r4, r0]
 801a778:	e7f4      	b.n	801a764 <i2c_flag_clear+0xe>
	...

0801a77c <mac_address_get(unsigned char*)>:
 801a77c:	4a07      	ldr	r2, [pc, #28]	; (801a79c <mac_address_get(unsigned char*)+0x20>)
 801a77e:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	; 0xa10
 801a782:	f8d2 2a14 	ldr.w	r2, [r2, #2580]	; 0xa14
 801a786:	7042      	strb	r2, [r0, #1]
 801a788:	0e1a      	lsrs	r2, r3, #24
 801a78a:	7082      	strb	r2, [r0, #2]
 801a78c:	0c1a      	lsrs	r2, r3, #16
 801a78e:	2102      	movs	r1, #2
 801a790:	70c2      	strb	r2, [r0, #3]
 801a792:	0a1a      	lsrs	r2, r3, #8
 801a794:	7001      	strb	r1, [r0, #0]
 801a796:	7102      	strb	r2, [r0, #4]
 801a798:	7143      	strb	r3, [r0, #5]
 801a79a:	4770      	bx	lr
 801a79c:	1fff7000 	svcne	0x00ff7000

0801a7a0 <__popcountsi2>:
 801a7a0:	0843      	lsrs	r3, r0, #1
 801a7a2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 801a7a6:	1ac0      	subs	r0, r0, r3
 801a7a8:	0883      	lsrs	r3, r0, #2
 801a7aa:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 801a7ae:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 801a7b2:	4418      	add	r0, r3
 801a7b4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 801a7b8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 801a7bc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 801a7c0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 801a7c4:	0e00      	lsrs	r0, r0, #24
 801a7c6:	4770      	bx	lr

Disassembly of section .rodata:

0801a7c8 <vtable for DisplayHandler-0x118>:
 801a7c8:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801a7cc:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801a7d8:	03020100 	movweq	r0, #8448	; 0x2100
 801a7dc:	08070604 	stmdaeq	r7, {r2, r9, sl}
 801a7e0:	00000009 	andeq	r0, r0, r9
 801a7e4:	03020100 	movweq	r0, #8448	; 0x2100
 801a7e8:	3a732504 	bcc	9ce3c00 <__exidx_end+0x1cc5dfc>
 801a7ec:	31007525 	tstcc	r0, r5, lsr #10
 801a7f0:	37353a33 			; <UNDEFINED> instruction: 0x37353a33
 801a7f4:	0032303a 	eorseq	r3, r2, sl, lsr r0
 801a7f8:	20636544 	rsbcs	r6, r3, r4, asr #10
 801a7fc:	32203532 	eorcc	r3, r0, #209715200	; 0xc800000
 801a800:	00323230 	eorseq	r3, r2, r0, lsr r2
 801a804:	32335b1b 	eorscc	r5, r3, #27648	; 0x6c00
 801a808:	7472416d 	ldrbtvc	r4, [r2], #-365	; 0xfffffe93
 801a80c:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 801a810:	50203420 	eorpl	r3, r0, r0, lsr #8
 801a814:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 801a818:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801a81c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 801a654 <i2c_clock_config+0x28>
 801a820:	2072656c 	rsbscs	r6, r2, ip, ror #10
 801a824:	7836317b 	ldmdavc	r6!, {r0, r1, r3, r4, r5, r6, r8, ip, sp}
 801a828:	55203420 	strpl	r3, [r0, #-1056]!	; 0xfffffbe0
 801a82c:	6576696e 	ldrbvs	r6, [r6, #-2414]!	; 0xfffff692
 801a830:	73657372 	cmnvc	r5, #-939524095	; 0xc8000001
 801a834:	202f207d 	eorcs	r2, pc, sp, ror r0	; <UNPREDICTABLE>
 801a838:	44207832 	strtmi	r7, [r0], #-2098	; 0xfffff7ce
 801a83c:	5b1b584d 	blpl	86f0978 <__exidx_end+0x6d2b74>
 801a840:	006d3733 	rsbeq	r3, sp, r3, lsr r7
 801a844:	6f635f2e 	svcvs	0x00635f2e
 801a848:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801a84c:	685f2e00 	ldmdavs	pc, {r9, sl, fp, sp}^	; <UNPREDICTABLE>
 801a850:	00707474 	rsbseq	r7, r0, r4, ror r4
 801a854:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 801a858:	7472413d 	ldrbtvc	r4, [r2], #-317	; 0xfffffec3
 801a85c:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 801a860:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 801a864:	44206c65 	strtmi	r6, [r0], #-3173	; 0xfffff39b
 801a868:	4100584d 	tstmi	r0, sp, asr #16
 801a86c:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 801a870:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 801a874:	253a5020 	ldrcs	r5, [sl, #-32]!	; 0xffffffe0
 801a878:	73252d75 			; <UNDEFINED> instruction: 0x73252d75
 801a87c:	2064253a 	rsbcs	r2, r4, sl, lsr r5
 801a880:	75253a44 	strvc	r3, [r5, #-2628]!	; 0xfffff5bc
 801a884:	33444700 	movtcc	r4, #18176	; 0x4700
 801a888:	35344632 	ldrcc	r4, [r4, #-1586]!	; 0xfffff9ce
 801a88c:	20495630 	subcs	r5, r9, r0, lsr r6
 801a890:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 801a894:	4d442d6c 	stclmi	13, cr2, [r4, #-432]	; 0xfffffe50
 801a898:	72410058 	subvc	r0, r1, #88	; 0x58
 801a89c:	74654e74 	strbtvc	r4, [r5], #-3700	; 0xfffff18c
 801a8a0:	50203420 	eorpl	r3, r0, r0, lsr #8
 801a8a4:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 801a8a8:	78752520 	ldmdavc	r5!, {r5, r8, sl, sp}^
 801a8ac:	25007525 	strcs	r7, [r0, #-1317]	; 0xfffffadb
 801a8b0:	64253a73 	strtvs	r3, [r5], #-2675	; 0xfffff58d
 801a8b4:	64254720 	strtvs	r4, [r5], #-1824	; 0xfffff8e0
 801a8b8:	00732520 	rsbseq	r2, r3, r0, lsr #10
 801a8bc:	21786d64 	cmncs	r8, r4, ror #26
 801a8c0:	65726200 	ldrbvs	r6, [r2, #-512]!	; 0xfffffe00
 801a8c4:	00236b61 	eoreq	r6, r3, r1, ror #22
 801a8c8:	2362616d 	cmncs	r2, #1073741851	; 0x4000001b
 801a8cc:	66657200 	strbtvs	r7, [r5], -r0, lsl #4
 801a8d0:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801a8d4:	6c730023 	ldclvs	0, cr0, [r3], #-140	; 0xffffff74
 801a8d8:	2373746f 	cmncs	r3, #1862270976	; 0x6f000000
 801a8dc:	00000000 	andeq	r0, r0, r0

0801a8e0 <vtable for DisplayHandler>:
	...
 801a8e8:	0800907f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, ip, pc}
 801a8ec:	080091c1 	stmdaeq	r0, {r0, r6, r7, r8, ip, pc}
 801a8f0:	08009221 	stmdaeq	r0, {r0, r5, r9, ip, pc}

0801a8f4 <vtable for LightSet64with4>:
	...
 801a8fc:	08009081 	stmdaeq	r0, {r0, r7, ip, pc}
 801a900:	080091cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, ip, pc}
 801a904:	08009083 	stmdaeq	r0, {r0, r1, r7, ip, pc}
 801a908:	080090a5 	stmdaeq	r0, {r0, r2, r5, r7, ip, pc}
 801a90c:	080090c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, ip, pc}
 801a910:	080090fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, ip, pc}
 801a914:	0800907d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, ip, pc}
 801a918:	0800911d 	stmdaeq	r0, {r0, r2, r3, r4, r8, ip, pc}
 801a91c:	0800913b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, ip, pc}
 801a920:	0800913f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r8, ip, pc}
 801a924:	08009145 	stmdaeq	r0, {r0, r2, r6, r8, ip, pc}
 801a928:	08009149 	stmdaeq	r0, {r0, r3, r6, r8, ip, pc}

0801a92c <vtable for ArtNetTriggerHandler>:
	...
 801a934:	0800914d 	stmdaeq	r0, {r0, r2, r3, r6, r8, ip, pc}
 801a938:	080091d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, ip, pc}
 801a93c:	08009509 	stmdaeq	r0, {r0, r3, r8, sl, ip, pc}

0801a940 <vtable for PixelDmxStartStop>:
	...
 801a948:	0800914f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r8, ip, pc}
 801a94c:	080091e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, ip, pc}
 801a950:	08009151 	stmdaeq	r0, {r0, r4, r6, r8, ip, pc}
 801a954:	08009161 	stmdaeq	r0, {r0, r5, r6, r8, ip, pc}

0801a958 <vtable for RDMNetDevice>:
	...
 801a960:	08009271 	stmdaeq	r0, {r0, r4, r5, r6, r9, ip, pc}
 801a964:	08009299 	stmdaeq	r0, {r0, r3, r4, r7, r9, ip, pc}
 801a968:	0801000f 	stmdaeq	r1, {r0, r1, r2, r3}
 801a96c:	08010011 	stmdaeq	r1, {r0, r4}
 801a970:	08009195 	stmdaeq	r0, {r0, r2, r4, r7, r8, ip, pc}
 801a974:	080091a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, ip, pc}
 801a978:	080091f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, ip, pc}
 801a97c:	ffffff34 			; <UNDEFINED> instruction: 0xffffff34
 801a980:	00000000 	andeq	r0, r0, r0
 801a984:	08009291 	stmdaeq	r0, {r0, r4, r7, r9, ip, pc}
 801a988:	080092ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r9, ip, pc}
 801a98c:	080091a1 	stmdaeq	r0, {r0, r5, r7, r8, ip, pc}
 801a990:	080091b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, ip, pc}
 801a994:	08009205 	stmdaeq	r0, {r0, r2, r9, ip, pc}

0801a998 <CSWTCH.135>:
 801a998:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 801a99c:	 			; <UNDEFINED> instruction: 0x312e3146

0801a99d <SOFTWARE_VERSION>:
 801a99d:	00312e31 	eorseq	r2, r1, r1, lsr lr

0801a9a1 <gamma10_0>:
 801a9a1:	03020100 	movweq	r0, #8448	; 0x2100
 801a9a5:	07060504 	streq	r0, [r6, -r4, lsl #10]
 801a9a9:	0b0a0908 	bleq	829cdd1 <__exidx_end+0x27efcd>
 801a9ad:	0f0e0d0c 	svceq	0x000e0d0c
 801a9b1:	13121110 	tstne	r2, #16, 2
 801a9b5:	17161514 			; <UNDEFINED> instruction: 0x17161514
 801a9b9:	1b1a1918 	blne	86a0e21 <__exidx_end+0x68301d>
 801a9bd:	1f1e1d1c 	svcne	0x001e1d1c
 801a9c1:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801a9c5:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 801a9c9:	2b2a2928 	blcs	8aa4e71 <__exidx_end+0xa8706d>
 801a9cd:	2f2e2d2c 	svccs	0x002e2d2c
 801a9d1:	33323130 	teqcc	r2, #48, 2
 801a9d5:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801a9d9:	3b3a3938 	blcc	8ea8ec1 <__exidx_end+0xe8b0bd>
 801a9dd:	3f3e3d3c 	svccc	0x003e3d3c
 801a9e1:	43424140 	movtmi	r4, #8512	; 0x2140
 801a9e5:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801a9e9:	4b4a4948 	blmi	92acf11 <__exidx_end+0x128f10d>
 801a9ed:	4f4e4d4c 	svcmi	0x004e4d4c
 801a9f1:	53525150 	cmppl	r2, #80, 2
 801a9f5:	57565554 			; <UNDEFINED> instruction: 0x57565554
 801a9f9:	5b5a5958 	blpl	96b0f61 <__exidx_end+0x169315d>
 801a9fd:	5f5e5d5c 	svcpl	0x005e5d5c
 801aa01:	63626160 	cmnvs	r2, #96, 2
 801aa05:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 801aa09:	6b6a6968 	blvs	9ab4fb1 <__exidx_end+0x1a971ad>
 801aa0d:	6f6e6d6c 	svcvs	0x006e6d6c
 801aa11:	73727170 	cmnvc	r2, #112, 2
 801aa15:	77767574 			; <UNDEFINED> instruction: 0x77767574
 801aa19:	7b7a7978 	blvc	9eb9001 <__exidx_end+0x1e9b1fd>
 801aa1d:	7f7e7d7c 	svcvc	0x007e7d7c
 801aa21:	83828180 	orrhi	r8, r2, #128, 2
 801aa25:	87868584 	strhi	r8, [r6, r4, lsl #11]
 801aa29:	8b8a8988 	blhi	62bd051 <__stack_size+0x62b9051>
 801aa2d:	8f8e8d8c 	svchi	0x008e8d8c
 801aa31:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 801aa35:	97969594 			; <UNDEFINED> instruction: 0x97969594
 801aa39:	9b9a9998 	blls	66c10a1 <__stack_size+0x66bd0a1>
 801aa3d:	9f9e9d9c 	svcls	0x009e9d9c
 801aa41:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 801aa45:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 801aa49:	abaaa9a8 	blge	6ac50f1 <__stack_size+0x6ac10f1>
 801aa4d:	afaeadac 	svcge	0x00aeadac
 801aa51:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 801aa55:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 801aa59:	bbbab9b8 	bllt	6ec9141 <__stack_size+0x6ec5141>
 801aa5d:	bfbebdbc 	svclt	0x00bebdbc
 801aa61:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 801aa65:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 801aa69:	cbcac9c8 	blgt	72cd191 <__stack_size+0x72c9191>
 801aa6d:	cfcecdcc 	svcgt	0x00cecdcc
 801aa71:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 801aa75:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 801aa79:	dbdad9d8 	blle	76d11e1 <__stack_size+0x76cd1e1>
 801aa7d:	dfdedddc 	svcle	0x00dedddc
 801aa81:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 801aa85:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 801aa89:	ebeae9e8 	bl	7ad5231 <__stack_size+0x7ad1231>
 801aa8d:	efeeedec 	svc	0x00eeedec
 801aa91:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 801aa95:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 801aa99:	fbfaf9f8 	blx	7ed9283 <__stack_size+0x7ed5283>
 801aa9d:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

0801aaa1 <SOFTWARE_VERSION>:
 801aaa1:	00312e31 	eorseq	r2, r1, r1, lsr lr
 801aaa5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801aaa9:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801aaad:	2c64252e 	cfstr64cs	mvdx2, [r4], #-184	; 0xffffff48
 801aab1:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 801aab5:	64252c73 	strtvs	r2, [r5], #-3187	; 0xfffff38d
 801aab9:	0a73252c 	beq	9ce3f71 <__exidx_end+0x1cc616d>
 801aabd:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 801aac1:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801aac5:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801aac9:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 801aacd:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 801aad1:	4f000a64 	svcmi	0x00000a64
 801aad5:	664f006e 	strbvs	r0, [pc], -lr, rrx
 801aad9:	69640066 	stmdbvs	r4!, {r1, r2, r5, r6}^
 801aadd:	616c7073 	smcvs	50947	; 0xc703
 801aae1:	73253a79 			; <UNDEFINED> instruction: 0x73253a79
 801aae5:	6674000a 	ldrbtvs	r0, [r4], -sl
 801aae9:	253a7074 	ldrcs	r7, [sl, #-116]!	; 0xffffff8c
 801aaed:	76000a73 			; <UNDEFINED> instruction: 0x76000a73
 801aaf1:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801aaf5:	253a6e6f 	ldrcs	r6, [sl, #-3695]!	; 0xfffff191
 801aaf9:	70750073 	rsbsvc	r0, r5, r3, ror r0
 801aafd:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 801ab01:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 801ab05:	54000a73 	strpl	r0, [r0], #-2675	; 0xfffff58d
 801ab09:	20505446 	subscs	r5, r0, r6, asr #8
 801ab0d:	20206e4f 	eorcs	r6, r0, pc, asr #28
 801ab11:	6265525b 	rsbvs	r5, r5, #-1342177275	; 0xb0000005
 801ab15:	5d746f6f 	ldclpl	15, cr6, [r4, #-444]!	; 0xfffffe44
 801ab19:	54465400 	strbpl	r5, [r6], #-1024	; 0xfffffc00
 801ab1d:	664f2050 			; <UNDEFINED> instruction: 0x664f2050
 801ab21:	525b2066 	subspl	r2, fp, #102	; 0x66
 801ab25:	6f6f6265 	svcvs	0x006f6265
 801ab29:	00205d74 	eoreq	r5, r0, r4, ror sp
 801ab2d:	4f525245 	svcmi	0x00525245
 801ab31:	673f2352 			; <UNDEFINED> instruction: 0x673f2352
 801ab35:	000a7465 	andeq	r7, sl, r5, ror #8
 801ab39:	70746674 	rsbsvc	r6, r4, r4, ror r6
 801ab3d:	69640023 	stmdbvs	r4!, {r0, r1, r5}^
 801ab41:	616c7073 	smcvs	50947	; 0xc703
 801ab45:	45002379 	strmi	r2, [r0, #-889]	; 0xfffffc87
 801ab49:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 801ab4d:	000a2123 	andeq	r2, sl, r3, lsr #2
 801ab51:	4f525245 	svcmi	0x00525245
 801ab55:	0a3f2352 	beq	8fe38a5 <__exidx_end+0xfc5aa1>
 801ab59:	62657200 	rsbvs	r7, r5, #0, 4
 801ab5d:	23746f6f 	cmncs	r4, #444	; 0x1bc
 801ab61:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 801ab65:	00237473 	eoreq	r7, r3, r3, ror r4
 801ab69:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801ab6d:	75002a23 	strvc	r2, [r0, #-2595]	; 0xfffff5dd
 801ab71:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 801ab75:	76002365 	strvc	r2, [r0], -r5, ror #6
 801ab79:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801ab7d:	00236e6f 	eoreq	r6, r3, pc, ror #28
 801ab81:	23746567 	cmncs	r4, #432013312	; 0x19c00000
 801ab85:	63616600 	cmnvs	r1, #0, 12
 801ab89:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801ab8d:	 	tstmi	r0, r3, lsr #6

0801ab90 <s_Node>:
 801ab90:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801ab94:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801aba0:	41730000 	cmnmi	r3, r0
 801aba4:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 801aba8:	31332e31 	teqcc	r3, r1, lsr lr
	...
 801abb4:	2043534f 	subcs	r5, r3, pc, asr #6
 801abb8:	76726553 			; <UNDEFINED> instruction: 0x76726553
 801abbc:	00007265 	andeq	r7, r0, r5, ror #4
 801abc0:	00000000 	andeq	r0, r0, r0
 801abc4:	544c0000 	strbpl	r0, [ip], #-0
 801abc8:	00000043 	andeq	r0, r0, r3, asr #32
	...
 801abd8:	2043534f 	subcs	r5, r3, pc, asr #6
 801abdc:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 801abe0:	0000746e 	andeq	r7, r0, lr, ror #8
 801abe4:	00000000 	andeq	r0, r0, r0
 801abe8:	44520000 	ldrbmi	r0, [r2], #-0
 801abec:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 801abf0:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 801abf4:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 801abf8:	0000796c 	andeq	r7, r0, ip, ror #18
 801abfc:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 801ac00:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 801ac0c:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 801ac10:	00004944 	andeq	r4, r0, r4, asr #18
	...
 801ac20:	00504444 	subseq	r4, r0, r4, asr #8
	...
 801ac30:	69500000 	ldmdbvs	r0, {}^	; <UNPREDICTABLE>
 801ac34:	506c6578 	rsbpl	r6, ip, r8, ror r5
 801ac38:	65687375 	strbvs	r7, [r8, #-885]!	; 0xfffffc8b
 801ac3c:	00000072 	andeq	r0, r0, r2, ror r0
 801ac40:	00000000 	andeq	r0, r0, r0
 801ac44:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

0801ac56 <s_Output>:
 801ac56:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 801ac62:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 801ac6e:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 801ac72:	00726f74 	rsbseq	r6, r2, r4, ror pc
 801ac76:	00000000 	andeq	r0, r0, r0
 801ac7a:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 801ac7e:	0000006c 	andeq	r0, r0, ip, rrx
 801ac82:	00000000 	andeq	r0, r0, r0
 801ac86:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 801ac8a:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 801ac8e:	00000000 	andeq	r0, r0, r0
 801ac92:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 801ac9e:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801aca2:	00006769 	andeq	r6, r0, r9, ror #14
 801aca6:	00000000 	andeq	r0, r0, r0
 801acaa:	70657453 	rsbvc	r7, r5, r3, asr r4
 801acae:	00726570 	rsbseq	r6, r2, r0, ror r5
 801acb2:	00000000 	andeq	r0, r0, r0
 801acb6:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 801acba:	00007265 	andeq	r7, r0, r5, ror #4
 801acbe:	00000000 	andeq	r0, r0, r0
 801acc2:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801acc6:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801acca:	00000000 	andeq	r0, r0, r0
 801acce:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 801acd2:	00006c61 	andeq	r6, r0, r1, ror #24
 801acd6:	00000000 	andeq	r0, r0, r0
 801acda:	20424752 	subcs	r4, r2, r2, asr r7
 801acde:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 801ace2:	0000006c 	andeq	r0, r0, ip, rrx
	...

0801ace8 <RemoteConfig::s_GET>:
 801ace8:	0800b3e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, ip, sp, pc}
 801acec:	00000000 	andeq	r0, r0, r0
 801acf0:	0801ab5a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, fp, sp, pc}
 801acf4:	00000008 	andeq	r0, r0, r8
 801acf8:	0800a819 	stmdaeq	r0, {r0, r3, r4, fp, sp, pc}
 801acfc:	00000000 	andeq	r0, r0, r0
 801ad00:	0801ab63 	stmdaeq	r1, {r0, r1, r5, r6, r8, r9, fp, sp, pc}
 801ad04:	00000005 	andeq	r0, r0, r5
 801ad08:	0800a819 	stmdaeq	r0, {r0, r3, r4, fp, sp, pc}
 801ad0c:	00000000 	andeq	r0, r0, r0
 801ad10:	0801ab69 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, fp, sp, pc}
 801ad14:	00000006 	andeq	r0, r0, r6
 801ad18:	0800a9cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, fp, sp, pc}
 801ad1c:	00000000 	andeq	r0, r0, r0
 801ad20:	0801ab70 	stmdaeq	r1, {r4, r5, r6, r8, r9, fp, sp, pc}
 801ad24:	00000007 	andeq	r0, r0, r7
 801ad28:	0800a98d 	stmdaeq	r0, {r0, r2, r3, r7, r8, fp, sp, pc}
 801ad2c:	00000000 	andeq	r0, r0, r0
 801ad30:	0801ab78 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, fp, sp, pc}
 801ad34:	00000008 	andeq	r0, r0, r8
 801ad38:	0800a8e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, fp, sp, pc}
 801ad3c:	00000000 	andeq	r0, r0, r0
 801ad40:	0801ab3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, r9, fp, sp, pc}
 801ad44:	00000008 	andeq	r0, r0, r8
 801ad48:	0800aca1 	stmdaeq	r0, {r0, r5, r7, sl, fp, sp, pc}
 801ad4c:	00000000 	andeq	r0, r0, r0
 801ad50:	0801ab81 	stmdaeq	r1, {r0, r7, r8, r9, fp, sp, pc}
 801ad54:	00010004 	andeq	r0, r1, r4
 801ad58:	0800a93d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, fp, sp, pc}
 801ad5c:	00000000 	andeq	r0, r0, r0
 801ad60:	0801ab39 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, fp, sp, pc}
 801ad64:	00000005 	andeq	r0, r0, r5
 801ad68:	0800b0d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, ip, sp, pc}
 801ad6c:	00000000 	andeq	r0, r0, r0
 801ad70:	0801ab86 	stmdaeq	r1, {r1, r2, r7, r8, r9, fp, sp, pc}
 801ad74:	00000009 	andeq	r0, r0, r9

0801ad78 <RemoteConfig::s_SET>:
 801ad78:	0800aa79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, fp, sp, pc}
 801ad7c:	00000000 	andeq	r0, r0, r0
 801ad80:	0801ab39 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, fp, sp, pc}
 801ad84:	00010005 	andeq	r0, r1, r5
 801ad88:	0800aa51 	stmdaeq	r0, {r0, r4, r6, r9, fp, sp, pc}
 801ad8c:	00000000 	andeq	r0, r0, r0
 801ad90:	0801ab3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, r9, fp, sp, pc}
 801ad94:	00010008 	andeq	r0, r1, r8
 801ad98:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801ad9c:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 801ada0:	73252300 			; <UNDEFINED> instruction: 0x73252300
 801ada4:	0a64253d 	beq	99242a0 <__exidx_end+0x190649c>
 801ada8:	73252200 			; <UNDEFINED> instruction: 0x73252200
 801adac:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801adb0:	002c2273 	eoreq	r2, ip, r3, ror r2
 801adb4:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 801adb8:	000a7325 	andeq	r7, sl, r5, lsr #6
 801adbc:	6f626552 	svcvs	0x00626552
 801adc0:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 801adc4:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 801adc8:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 801adcc:	6f6f6265 	svcvs	0x006f6265
 801add0:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 801add4:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 801add8:	6f637200 	svcvs	0x00637200
 801addc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801ade0:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801ade4:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 801ade8:	6b726f77 	blvs	9cb6bcc <__exidx_end+0x1c98dc8>
 801adec:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801adf0:	73696400 	cmnvc	r9, #0, 8
 801adf4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801adf8:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801adfc:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 801ae00:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 801ae04:	00747874 	rsbseq	r7, r4, r4, ror r8
 801ae08:	31333165 	teqcc	r3, r5, ror #2
 801ae0c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801ae10:	72617000 	rsbvc	r7, r1, #0
 801ae14:	2e736d61 	cdpcs	13, 7, cr6, cr3, cr1, {3}
 801ae18:	00747874 	rsbseq	r7, r4, r4, ror r8
 801ae1c:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801ae20:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801ae24:	00747874 	rsbseq	r7, r4, r4, ror r8

0801ae28 <RemoteConfig::s_TXT>:
 801ae28:	0800aca9 	stmdaeq	r0, {r0, r3, r5, r7, sl, fp, sp, pc}
 801ae2c:	00000000 	andeq	r0, r0, r0
 801ae30:	0800afb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sl, fp, sp, pc}
 801ae34:	00000000 	andeq	r0, r0, r0
 801ae38:	0801add9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, sl, fp, sp, pc}
 801ae3c:	0000000b 	andeq	r0, r0, fp
 801ae40:	0000000c 	andeq	r0, r0, ip
 801ae44:	0800acd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, fp, sp, pc}
 801ae48:	00000000 	andeq	r0, r0, r0
 801ae4c:	0800afe5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 801ae50:	00000000 	andeq	r0, r0, r0
 801ae54:	0801ade5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, sl, fp, sp, pc}
 801ae58:	0000000b 	andeq	r0, r0, fp
 801ae5c:	00000000 	andeq	r0, r0, r0
 801ae60:	0800adc5 	stmdaeq	r0, {r0, r2, r6, r7, r8, sl, fp, sp, pc}
 801ae64:	00000000 	andeq	r0, r0, r0
 801ae68:	0800b0ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, ip, sp, pc}
 801ae6c:	00000000 	andeq	r0, r0, r0
 801ae70:	0801adf1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, sl, fp, sp, pc}
 801ae74:	0000000b 	andeq	r0, r0, fp
 801ae78:	0000000f 	andeq	r0, r0, pc
 801ae7c:	0800ad09 	stmdaeq	r0, {r0, r3, r8, sl, fp, sp, pc}
 801ae80:	00000000 	andeq	r0, r0, r0
 801ae84:	0800b00d 	stmdaeq	r0, {r0, r2, r3, ip, sp, pc}
 801ae88:	00000000 	andeq	r0, r0, r0
 801ae8c:	0801adfd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, sl, fp, sp, pc}
 801ae90:	0000000a 	andeq	r0, r0, sl
 801ae94:	00000001 	andeq	r0, r0, r1
 801ae98:	0800ad39 	stmdaeq	r0, {r0, r3, r4, r5, r8, sl, fp, sp, pc}
 801ae9c:	00000000 	andeq	r0, r0, r0
 801aea0:	0800b035 	stmdaeq	r0, {r0, r2, r4, r5, ip, sp, pc}
 801aea4:	00000000 	andeq	r0, r0, r0
 801aea8:	0801ae08 	stmdaeq	r1, {r3, r9, sl, fp, sp, pc}
 801aeac:	00000008 	andeq	r0, r0, r8
 801aeb0:	00000004 	andeq	r0, r0, r4
 801aeb4:	0800ad69 	stmdaeq	r0, {r0, r3, r5, r6, r8, sl, fp, sp, pc}
 801aeb8:	00000000 	andeq	r0, r0, r0
 801aebc:	0800b05d 	stmdaeq	r0, {r0, r2, r3, r4, r6, ip, sp, pc}
 801aec0:	00000000 	andeq	r0, r0, r0
 801aec4:	0801ae11 	stmdaeq	r1, {r0, r4, r9, sl, fp, sp, pc}
 801aec8:	0000000a 	andeq	r0, r0, sl
 801aecc:	00000002 	andeq	r0, r0, r2
 801aed0:	0800ad95 	stmdaeq	r0, {r0, r2, r4, r7, r8, sl, fp, sp, pc}
 801aed4:	00000000 	andeq	r0, r0, r0
 801aed8:	0800b085 	stmdaeq	r0, {r0, r2, r7, ip, sp, pc}
 801aedc:	00000000 	andeq	r0, r0, r0
 801aee0:	0801ae1c 	stmdaeq	r1, {r2, r3, r4, r9, sl, fp, sp, pc}
 801aee4:	0000000b 	andeq	r0, r0, fp
 801aee8:	00000003 	andeq	r0, r0, r3
 801aeec:	00544547 	subseq	r4, r4, r7, asr #10
 801aef0:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 801aef4:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 801aef8:	0a200050 	beq	881b040 <__exidx_end+0x7fd23c>
 801aefc:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 801af00:	43003a00 	movwmi	r3, #2560	; 0xa00
 801af04:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 801af08:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 801af0c:	00657079 	rsbeq	r7, r5, r9, ror r0
 801af10:	61003b20 	tstvs	r0, r0, lsr #22
 801af14:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 801af18:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 801af1c:	6a2f6e6f 	bvs	8bf68e0 <__exidx_end+0xbd8adc>
 801af20:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 801af24:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 801af28:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 801af2c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 801af30:	2f006874 	svccs	0x00006874
 801af34:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 801af38:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 801af3c:	2f006c6d 	svccs	0x00006c6d
 801af40:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 801af44:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 801af48:	2f007373 	svccs	0x00007373
 801af4c:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 801af50:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 801af54:	736a2f00 	cmnvc	sl, #0, 30
 801af58:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 801af5c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801af60:	72657600 	rsbvc	r7, r5, #0, 12
 801af64:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 801af68:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 801af6c:	00656d69 	rsbeq	r6, r5, r9, ror #26
 801af70:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801af74:	0079616c 	rsbseq	r6, r9, ip, ror #2
 801af78:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801af7c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801af80:	6a2f0079 	bvs	8bdb16c <__exidx_end+0xbbd368>
 801af84:	2f6e6f73 	svccs	0x006e6f73
 801af88:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801af8c:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 801af90:	6f6f6265 	svcvs	0x006f6265
 801af94:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 801af98:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 801af9c:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 801afa0:	434f4421 	movtmi	r4, #62497	; 0xf421
 801afa4:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 801afa8:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 801afac:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 801afb0:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801afb4:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 801afb8:	3e646165 	powccsz	f6, f4, f5
 801afbc:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 801afc0:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 801afc4:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 801afc8:	742f3c74 	strtvc	r3, [pc], #-3188	; 801afd0 <RemoteConfig::s_TXT+0x1a8>
 801afcc:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 801afd0:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801afd4:	3e646165 	powccsz	f6, f4, f5
 801afd8:	6f623c0a 	svcvs	0x00623c0a
 801afdc:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 801afe0:	4f3e3168 	svcmi	0x003e3168
 801afe4:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801afe8:	2f3c3e31 	svccs	0x003c3e31
 801afec:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801aff0:	2f3c0a3e 	svccs	0x003c0a3e
 801aff4:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801aff8:	42000a3e 	andmi	r0, r0, #253952	; 0x3e000
 801affc:	52206461 	eorpl	r6, r0, #1627389952	; 0x61000000
 801b000:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 801b004:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
 801b008:	4620746f 	strtmi	r7, [r0], -pc, ror #8
 801b00c:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 801b010:	71655200 	cmnvc	r5, r0, lsl #4
 801b014:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 801b018:	746e4520 	strbtvc	r4, [lr], #-1312	; 0xfffffae0
 801b01c:	20797469 	rsbscs	r7, r9, r9, ror #8
 801b020:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 801b024:	6772614c 	ldrbvs	r6, [r2, -ip, asr #2]!
 801b028:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
 801b02c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 801b030:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 801b034:	6f542049 	svcvs	0x00542049
 801b038:	6f4c206f 	svcvs	0x004c206f
 801b03c:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 801b040:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 801b044:	206c616e 	rsbcs	r6, ip, lr, ror #2
 801b048:	76726553 			; <UNDEFINED> instruction: 0x76726553
 801b04c:	45207265 	strmi	r7, [r0, #-613]!	; 0xfffffd9b
 801b050:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 801b054:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 801b058:	20646f68 	rsbcs	r6, r4, r8, ror #30
 801b05c:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801b060:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 801b064:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 801b068:	00646574 	rsbeq	r6, r4, r4, ror r5
 801b06c:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 801b070:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801b074:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801b078:	70707553 	rsbsvc	r7, r0, r3, asr r5
 801b07c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
 801b080:	6e550064 	cdpvs	0, 5, cr0, cr5, cr4, {3}
 801b084:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 801b088:	7245206e 	subvc	r2, r5, #110	; 0x6e
 801b08c:	00726f72 	rsbseq	r6, r2, r2, ror pc
 801b090:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 801b094:	434f4421 	movtmi	r4, #62497	; 0xf421
 801b098:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 801b09c:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 801b0a0:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 801b0a4:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801b0a8:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 801b0ac:	3e646165 	powccsz	f6, f4, f5
 801b0b0:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 801b0b4:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 801b0b8:	73252075 			; <UNDEFINED> instruction: 0x73252075
 801b0bc:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801b0c0:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 801b0c4:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 801b0c8:	0a3e6461 	beq	8fb4254 <__exidx_end+0xf96450>
 801b0cc:	646f623c 	strbtvs	r6, [pc], #-572	; 801b0d4 <RemoteConfig::s_TXT+0x2ac>
 801b0d0:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 801b0d4:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 801b0d8:	31682f3c 	cmncc	r8, ip, lsr pc
 801b0dc:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 801b0e0:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801b0e4:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801b0e8:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801b0ec:	5448000a 	strbpl	r0, [r8], #-10
 801b0f0:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 801b0f4:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 801b0f8:	73252075 			; <UNDEFINED> instruction: 0x73252075
 801b0fc:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 801b100:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 801b104:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801b108:	6f430a0d 	svcvs	0x00430a0d
 801b10c:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 801b110:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 801b114:	203a6570 	eorscs	r6, sl, r0, ror r5
 801b118:	0a0d7325 	beq	8377db4 <__exidx_end+0x359fb0>
 801b11c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 801b120:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 801b124:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 801b128:	203a6874 	eorscs	r6, sl, r4, ror r8
 801b12c:	0a0d7525 	beq	83785c8 <__exidx_end+0x35a7c4>
 801b130:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 801b134:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801b138:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 801b13c:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 801b140:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 801b144:	4447000a 	strbmi	r0, [r7], #-10
 801b148:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 801b14c:	49563035 	ldmdbmi	r6, {r0, r2, r4, r5, ip, sp}^
	...

0801b151 <contentType>:
 801b151:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801b155:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 801b159:	0000006c 	andeq	r0, r0, ip, rrx
	...
 801b171:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801b175:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 801b191:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801b195:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 801b199:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 801b19d:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 801b1b1:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 801b1b5:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 801b1b9:	2f6e6f69 	svccs	0x006e6f69
 801b1bd:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

0801b1d1 <RemoteConfigConst::PARAMS_DISABLE>:
 801b1d1:	61736964 	cmnvs	r3, r4, ror #18
 801b1d5:	00656c62 	rsbeq	r6, r5, r2, ror #24

0801b1d9 <RemoteConfigConst::PARAMS_FILE_NAME>:
 801b1d9:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 801b1dd:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 801b1e1:	00747874 	rsbseq	r7, r4, r4, ror r8

0801b1e5 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 801b1e5:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801b1e9:	5f79616c 	svcpl	0x0079616c
 801b1ed:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

0801b1f2 <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 801b1f2:	61736964 	cmnvs	r3, r4, ror #18
 801b1f6:	5f656c62 	svcpl	0x00656c62
 801b1fa:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 801b1fe:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

0801b200 <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 801b200:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801b204:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 801b208:	6f6f6265 	svcvs	0x006f6265
 801b20c:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

0801b20e <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 801b20e:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801b212:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 801acae <s_Output+0x58>
 801b216:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 801b21a:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

0801b21c <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 801b21c:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801b220:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 801b224:	6f746361 	svcvs	0x00746361
 801b228:	7b007972 	blvc	80397f8 <__exidx_end+0x1b9f4>
 801b22c:	73696c22 	cmnvc	r9, #8704	; 0x2200
 801b230:	7b3a2274 	blvc	8ea3c08 <__exidx_end+0xe85e04>
 801b234:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 801b238:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 801b23c:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801b240:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801b244:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 801b248:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801b24c:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801b250:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 801b254:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 801b258:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 801b25c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801b260:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801b264:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 801b268:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801b26c:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 801b270:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801b274:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801b278:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 801b27c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801b280:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 801b284:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 801b288:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 801b28c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801b290:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 801b294:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 801b298:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 801b29c:	616f6222 	cmnvs	pc, r2, lsr #4
 801b2a0:	3a226472 	bcc	88b4470 <__exidx_end+0x89666c>
 801b2a4:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801b2a8:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 801b2ac:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 801b2b0:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 801b2b4:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 801b2b8:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 801b2bc:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 801b2c0:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 801b2c4:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 801b2c8:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 801b2cc:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 801b2d0:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 801b2d4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 801b2d8:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 801b2dc:	7b000a7d 	blvc	801dcd8 <vtable for Ssd1306+0x10>
 801b2e0:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 801b2e4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801b2e8:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 801b2ec:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 801b2f0:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801b2f4:	7b3a2273 	blvc	8ea3cc8 <__exidx_end+0xe85ec4>
 801b2f8:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 801b2fc:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 801b300:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 801b304:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 801b308:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 801b30c:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 801b310:	61726170 	cmnvs	r2, r0, ror r1
 801b314:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 801b318:	3a227478 	bcc	88b8500 <__exidx_end+0x89a6fc>
 801b31c:	584d4422 	stmdapl	sp, {r1, r5, sl, lr}^
 801b320:	61725420 	cmnvs	r2, r0, lsr #8
 801b324:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 801b328:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 801b32c:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801b330:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801b334:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 801b338:	4d44223a 	sfmmi	f2, 2, [r4, #-232]	; 0xffffff18
 801b33c:	69502058 	ldmdbvs	r0, {r3, r4, r6, sp}^
 801b340:	226c6578 	rsbcs	r6, ip, #120, 10	; 0x1e000000
 801b344:	6964222c 	stmdbvs	r4!, {r2, r3, r5, r9, sp}^
 801b348:	616c7073 	smcvs	50947	; 0xc703
 801b34c:	78742e79 	ldmdavc	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp}^
 801b350:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 801b354:	70736944 	rsbsvc	r6, r3, r4, asr #18
 801b358:	2079616c 	rsbscs	r6, r9, ip, ror #2
 801b35c:	22464455 	subcs	r4, r6, #1426063360	; 0x55000000
 801b360:	656e222c 	strbvs	r2, [lr, #-556]!	; 0xfffffdd4
 801b364:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 801b368:	78742e6b 	ldmdavc	r4!, {r0, r1, r3, r5, r6, r9, sl, fp, sp}^
 801b36c:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 801b370:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 801b374:	226b726f 	rsbcs	r7, fp, #-268435450	; 0xf0000006
 801b378:	6372222c 	cmnvs	r2, #44, 4	; 0xc0000002
 801b37c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801b380:	78742e67 	ldmdavc	r4!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}^
 801b384:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 801b388:	6f6d6552 	svcvs	0x006d6552
 801b38c:	63206574 			; <UNDEFINED> instruction: 0x63206574
 801b390:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801b394:	61727567 	cmnvs	r2, r7, ror #10
 801b398:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801b39c:	007d7d22 	rsbseq	r7, sp, r2, lsr #26

0801b3a0 <index_html>:
 801b3a0:	4f44213c 	svcmi	0x0044213c
 801b3a4:	50595443 	subspl	r5, r9, r3, asr #8
 801b3a8:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 801b3ac:	0a3e6c6d 	beq	8fb6568 <__exidx_end+0xf98764>
 801b3b0:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 801b3b4:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 801b3b8:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 801b3bc:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 801b3c0:	6b6e696c 	blvs	9bb5978 <__exidx_end+0x1b97b74>
 801b3c4:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 801b3c8:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 801b3cc:	73656c79 	cmnvc	r5, #30976	; 0x7900
 801b3d0:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 801b3d4:	72682022 	rsbvc	r2, r8, #34	; 0x22
 801b3d8:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 801b3dc:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 801b3e0:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 801b3e4:	20227373 	eorcs	r7, r2, r3, ror r3
 801b3e8:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 801b3ec:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 801b3f0:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 801b3f4:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 801b3f8:	0a3e656c 	beq	8fb49b0 <__exidx_end+0xf96bac>
 801b3fc:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 801b400:	0a3e6461 	beq	8fb458c <__exidx_end+0xf96788>
 801b404:	646f623c 	strbtvs	r6, [pc], #-572	; 801b40c <index_html+0x6c>
 801b408:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 801b40c:	6165683c 	cmnvs	r5, ip, lsr r8
 801b410:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 801b414:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 801b418:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 801b41c:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 801b420:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 801b424:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 801b428:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801b42c:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 801b430:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 801b434:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 801b438:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 801b43c:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 801b440:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801b444:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 801b448:	6f746365 	svcvs	0x00746365
 801b44c:	20227972 	eorcs	r7, r2, r2, ror r9
 801b450:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801b454:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 801b458:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 801b45c:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801b460:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 801b464:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 801b468:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 801b46c:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 801b470:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 801b474:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 801b478:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 801b47c:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 801b480:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801b484:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 801b488:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 801b48c:	20227478 	eorcs	r7, r2, r8, ror r4
 801b490:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801b494:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 801b498:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 801b49c:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 801b4a0:	0a3e656c 	beq	8fb4a58 <__exidx_end+0xf96c54>
 801b4a4:	6f663c09 	svcvs	0x00663c09
 801b4a8:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 801b4ac:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 801b4b0:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 801b4b4:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 801b4b8:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801b4bc:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 801b4c0:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 801b4c4:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 801b4c8:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 801b4cc:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 801b4d0:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 801b4d4:	20747069 	rsbscs	r7, r4, r9, rrx
 801b4d8:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 801b4dc:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 801b4e0:	6a2e7865 	bvs	8bb967c <__exidx_end+0xb9b878>
 801b4e4:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 801b4e8:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 801b4ec:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801b4f0:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 801b4f4:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801b4f8:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801b4fc:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801b500:	 	svcvs	0x0062000a

0801b502 <styles_css>:
 801b502:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b506:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801b50a:	63616220 	cmnvs	r1, #32, 4
 801b50e:	6f72676b 	svcvs	0x0072676b
 801b512:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 801b516:	6f6c6f63 	svcvs	0x006c6f63
 801b51a:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801b51e:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 801b522:	30322c30 	eorscc	r2, r2, r0, lsr ip
 801b526:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 801b52a:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801b52e:	6f6c6f63 	svcvs	0x006c6f63
 801b532:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801b536:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 801b53a:	202c3535 	eorcs	r3, ip, r5, lsr r5
 801b53e:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 801b542:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 801b546:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 801b54a:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 801b54e:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801b552:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801b556:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801b55a:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 801b55e:	0a3b7865 	beq	8ef96fa <__exidx_end+0xedb8f6>
 801b562:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 801b566:	0a7b2069 	beq	9ee3712 <__exidx_end+0x1ec590e>
 801b56a:	696c2020 	stmdbvs	ip!, {r5, sp}^
 801b56e:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 801b572:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 801b576:	6f6e203a 	svcvs	0x006e203a
 801b57a:	0a3b656e 	beq	8ef4b3a <__exidx_end+0xed6d36>
 801b57e:	616d2020 	cmnvs	sp, r0, lsr #32
 801b582:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 801b586:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 801b58a:	70352078 	eorsvc	r2, r5, r8, ror r0
 801b58e:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 801b592:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 801b596:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 801b59a:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801b59e:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801b5a2:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801b5a6:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 801b5aa:	0a3b7865 	beq	8ef9746 <__exidx_end+0xedb942>
 801b5ae:	6f622020 	svcvs	0x00622020
 801b5b2:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 801b5b6:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 801b5ba:	3a737569 	bcc	9cf8b66 <__exidx_end+0x1cdad62>
 801b5be:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 801b5c2:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801b5c6:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801b5ca:	203a7265 	eorscs	r7, sl, r5, ror #4
 801b5ce:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b5d2:	72672064 	rsbvc	r2, r7, #100	; 0x64
 801b5d6:	31207965 			; <UNDEFINED> instruction: 0x31207965
 801b5da:	0a3b7870 	beq	8ef97a2 <__exidx_end+0xedb99e>
 801b5de:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 801b5e2:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 801b5e6:	0a7b2072 	beq	9ee37b6 <__exidx_end+0x1ec59b2>
 801b5ea:	69642020 	stmdbvs	r4!, {r5, sp}^
 801b5ee:	616c7073 	smcvs	50947	; 0xc703
 801b5f2:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 801b5f6:	3b78656c 	blcc	9e34bae <__exidx_end+0x1e16daa>
 801b5fa:	6a20200a 	bvs	882362a <__exidx_end+0x805826>
 801b5fe:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 801b602:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 801b606:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 801b60a:	203a746e 	eorscs	r7, sl, lr, ror #8
 801b60e:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 801b612:	0a3b7265 	beq	8ef7fae <__exidx_end+0xeda1aa>
 801b616:	6f622020 	svcvs	0x00622020
 801b61a:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 801b61e:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 801b622:	3a737569 	bcc	9cf8bce <__exidx_end+0x1cdadca>
 801b626:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 801b62a:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801b62e:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801b632:	203a7265 	eorscs	r7, sl, r5, ror #4
 801b636:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b63a:	72672064 	rsbvc	r2, r7, #100	; 0x64
 801b63e:	31207965 			; <UNDEFINED> instruction: 0x31207965
 801b642:	0a3b7870 	beq	8ef980a <__exidx_end+0xedba06>
 801b646:	00000a7d 	andeq	r0, r0, sp, ror sl
	...

0801b64c <HttpContent>:
 801b64c:	0801af40 	stmdaeq	r1, {r6, r8, r9, sl, fp, sp, pc}
 801b650:	0801b502 	stmdaeq	r1, {r1, r8, sl, ip, sp, pc}
 801b654:	0801af4c 	stmdaeq	r1, {r2, r3, r6, r8, r9, sl, fp, sp, pc}
 801b658:	0801b664 	stmdaeq	r1, {r2, r5, r6, r9, sl, ip, sp, pc}
 801b65c:	0801af34 	stmdaeq	r1, {r2, r4, r5, r8, r9, sl, fp, sp, pc}
 801b660:	0801b3a0 	stmdaeq	r1, {r5, r7, r8, r9, ip, sp, pc}

0801b664 <index_js>:
 801b664:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801b668:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 801b66c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801b670:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 801b674:	534a7465 	movtpl	r7, #42085	; 0xa465
 801b678:	6a284e4f 	bvs	8a2efbc <__exidx_end+0xa111b8>
 801b67c:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b680:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801b684:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 801b688:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 801b68c:	6a2f273d 	bvs	8be5388 <__exidx_end+0xbc7584>
 801b690:	2f6e6f73 	svccs	0x006e6f73
 801b694:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801b698:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801b69c:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 801b6a0:	20797274 	rsbscs	r7, r9, r4, ror r2
 801b6a4:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 801b6a8:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 801b6ac:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 801b6b0:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 801b6b4:	20746961 	rsbscs	r6, r4, r1, ror #18
 801b6b8:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 801b6bc:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 801b6c0:	0a3b296c 	beq	8ee5c78 <__exidx_end+0xec7e74>
 801b6c4:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 801b6c8:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 801b6cc:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 801b6d0:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 801b6d4:	73657220 	cmnvc	r5, #32, 4
 801b6d8:	6f736a2e 	svcvs	0x00736a2e
 801b6dc:	3b29286e 	blcc	8a6589c <__exidx_end+0xa47a98>
 801b6e0:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 801b6e4:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 801b6e8:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 801b6ec:	6f727265 	svcvs	0x00727265
 801b6f0:	7b202972 	blvc	8825cc0 <__exidx_end+0x807ebc>
 801b6f4:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801b6f8:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 801b6fc:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 801b700:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 801b704:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 801b708:	3b29726f 	blcc	8a780cc <__exidx_end+0xa5a2c8>
 801b70c:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 801b710:	0a0a7d0a 	beq	82bab40 <__exidx_end+0x29cd3c>
 801b714:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801b718:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 801b71c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801b720:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 801b724:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 801b728:	73694c72 	cmnvc	r9, #29184	; 0x7200
 801b72c:	20292874 	eorcs	r2, r9, r4, ror r8
 801b730:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 801b734:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801b738:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801b73c:	6177613d 	cmnvs	r7, sp, lsr r1
 801b740:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801b744:	534a7465 	movtpl	r7, #42085	; 0xa465
 801b748:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801b74c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801b750:	0a3b2927 	beq	8ee5bf4 <__exidx_end+0xec7df0>
 801b754:	6f640909 	svcvs	0x00640909
 801b758:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 801b75c:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 801b760:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 801b764:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 801b768:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 801b76c:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 801b770:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 801b774:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 801b778:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 801b77c:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 801b780:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 801b784:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 801b788:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 801b78c:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 801b790:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 801b794:	2b656d61 	blcs	9976d20 <__exidx_end+0x1958f1c>
 801b798:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801b718 <index_js+0xb4>
 801b79c:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801b7a0:	2b223e69 	blcs	88ab14c <__exidx_end+0x88d348>
 801b7a4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801b7a8:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 801b7ac:	6f6e2e74 	svcvs	0x006e2e74
 801b7b0:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 801b7b4:	2b657079 	blcs	99779a0 <__exidx_end+0x1959b9c>
 801b7b8:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801b738 <index_js+0xd4>
 801b7bc:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801b7c0:	2b223e69 	blcs	88ab16c <__exidx_end+0x88d368>
 801b7c4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801b7c8:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 801b7cc:	6f6e2e74 	svcvs	0x006e2e74
 801b7d0:	702e6564 	eorvc	r6, lr, r4, ror #10
 801b7d4:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 801b7d8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801b7dc:	2f3c222b 	svccs	0x003c222b
 801b7e0:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 801b7e4:	0a7d0a3b 	beq	9f5e0d8 <__exidx_end+0x1f402d4>
 801b7e8:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 801b7ec:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 801b7f0:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 801b7f4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801b7f8:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 801b7fc:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801b800:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801b804:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 801b808:	0a7b2029 	beq	9ee38b4 <__exidx_end+0x1ec5ab0>
 801b80c:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 801b810:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 801b814:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 801b818:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b81c:	6177613d 	cmnvs	r7, sp, lsr r1
 801b820:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801b824:	534a7465 	movtpl	r7, #42085	; 0xa465
 801b828:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801b82c:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801b830:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801b834:	3b292779 	blcc	8a65620 <__exidx_end+0xa4781c>
 801b838:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801b83c:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801b840:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801b844:	0a22223d 	beq	88a4140 <__exidx_end+0x88633c>
 801b848:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 801b84c:	66207465 	strtvs	r7, [r0], -r5, ror #8
 801b850:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 801b854:	73656d61 	cmnvc	r5, #6208	; 0x1840
 801b858:	6a624f3d 	bvs	98af554 <__exidx_end+0x1891750>
 801b85c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 801b860:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 801b864:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 801b868:	6f746365 	svcvs	0x00746365
 801b86c:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 801b870:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801b874:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 801b878:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 801b87c:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 801b880:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 801b884:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 801b888:	6145726f 	cmpvs	r5, pc, ror #4
 801b88c:	66286863 	strtvs	r6, [r8], -r3, ror #16
 801b890:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 801b894:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b898:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 801b89c:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801b8a0:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 801b8a4:	20726176 	rsbscs	r6, r2, r6, ror r1
 801b8a8:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 801b8ac:	203d2065 	eorscs	r2, sp, r5, rrx
 801b8b0:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801b8b4:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801b8b8:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 801b8bc:	73656c69 	cmnvc	r5, #26880	; 0x6900
 801b8c0:	6b5b5d22 	blvs	96f2d50 <__exidx_end+0x16d4f4c>
 801b8c4:	3b5d7965 	blcc	9779e60 <__exidx_end+0x175c05c>
 801b8c8:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801b8cc:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 801b8d0:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 801b8d4:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 801b8d8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801b8dc:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 801b8e0:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 801b8e4:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 801b8e8:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 801b8ec:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 801b8f0:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 801b8f4:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 801b8f8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801b8fc:	0a3b223e 	beq	8ee41fc <__exidx_end+0xec63f8>
 801b900:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 801b904:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801b908:	6f640909 	svcvs	0x00640909
 801b90c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 801b910:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 801b914:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 801b918:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 801b91c:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 801b920:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 801b924:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 801b928:	6f746365 	svcvs	0x00746365
 801b92c:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 801b930:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 801b934:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 801b938:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 801b93c:	3b6c6d74 	blcc	9b36f14 <__exidx_end+0x1b19110>
 801b940:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801b944:	5f746567 	svcpl	0x00746567
 801b948:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 801b94c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801b950:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801b954:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 801b958:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 801b95c:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 801b960:	20636e79 	rsbcs	r6, r3, r9, ror lr
 801b964:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 801b968:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801b96c:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 801b970:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 801b974:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801b978:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801b97c:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801b980:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 801b984:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 801b988:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 801b98c:	6177613d 	cmnvs	r7, sp, lsr r1
 801b990:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801b994:	534a7465 	movtpl	r7, #42085	; 0xa465
 801b998:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801b99c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801b9a0:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 801b9a4:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801b9a8:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 801b9ac:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801b9b0:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 801b9b4:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 801b9b8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 801b9bc:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 801b9c0:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 801b9c4:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 801b9c8:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 801b9cc:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 801b9d0:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 801b9d4:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 801b9d8:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 801b9dc:	2b22563e 	blcs	88b12dc <__exidx_end+0x8934d8>
 801b9e0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801b9e4:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801b9e8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801b9ec:	2b6e6f69 	blcs	9bb7798 <__exidx_end+0x1b99994>
 801b9f0:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801b970 <index_js+0x30c>
 801b9f4:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801b9f8:	2b223e69 	blcs	88ab3a4 <__exidx_end+0x88d5a0>
 801b9fc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801ba00:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801ba04:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 801ba08:	61642e64 	cmnvs	r4, r4, ror #28
 801ba0c:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 801ba10:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801ba14:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801ba18:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 801ba1c:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801ba20:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 801ba24:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 801ba28:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 801ba2c:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 801ba30:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 801ba34:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 801ba38:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 801ba3c:	6f697372 	svcvs	0x00697372
 801ba40:	6f622e6e 	svcvs	0x00622e6e
 801ba44:	2b647261 	blcs	99383d0 <__exidx_end+0x191a5cc>
 801ba48:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801b9c8 <index_js+0x364>
 801ba4c:	3b223e69 	blcc	88ab3f8 <__exidx_end+0x88d5f4>
 801ba50:	0a0a7d0a 	beq	82bae80 <__exidx_end+0x29d07c>
 801ba54:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801ba58:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 801ba5c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801ba60:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 801ba64:	745f7465 	ldrbvc	r7, [pc], #-1125	; 801ba6c <index_js+0x408>
 801ba68:	73287478 			; <UNDEFINED> instruction: 0x73287478
 801ba6c:	20296c65 	eorcs	r6, r9, r5, ror #24
 801ba70:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 801ba74:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 801ba78:	613d7478 	teqvs	sp, r8, ror r4
 801ba7c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 801ba80:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 801ba84:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 801ba88:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 801ba8c:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801ba90:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801ba94:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801ba98:	3b22223d 	blcc	88a4394 <__exidx_end+0x886590>
 801ba9c:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 801baa0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 801baa4:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 801baa8:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 801baac:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 801bab0:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 801bab4:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 801bab8:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 801babc:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 801bac0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801bac4:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 801bac8:	0a7b2029 	beq	9ee3b74 <__exidx_end+0x1ec5d70>
 801bacc:	61760909 	cmnvs	r6, r9, lsl #18
 801bad0:	61762072 	cmnvs	r6, r2, ror r0
 801bad4:	2065756c 	rsbcs	r7, r5, ip, ror #10
 801bad8:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 801badc:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 801bae0:	6b5b5d6c 	blvs	96f3098 <__exidx_end+0x16d5294>
 801bae4:	3b5d7965 	blcc	977a080 <__exidx_end+0x175c27c>
 801bae8:	2009090a 	andcs	r0, r9, sl, lsl #18
 801baec:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801baf0:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 801baf4:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 801baf8:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 801bafc:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 801bb00:	2f3c222b 	svccs	0x003c222b
 801bb04:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 801bb08:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 801bb0c:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 801bb10:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 801bb14:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 801bb18:	742f3c3e 	strtvc	r3, [pc], #-3134	; 801bb20 <index_js+0x4bc>
 801bb1c:	3b223e72 	blcc	88ab4ec <__exidx_end+0x88d6e8>
 801bb20:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 801bb24:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 801bb28:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 801bb2c:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801bb30:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 801bb34:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 801bb38:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801bb3c:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 801bb40:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 801bb44:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 801bb48:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 801bb4c:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 801bb50:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 801bb54:	0a3b6c6d 	beq	8ef6d10 <__exidx_end+0xed8f0c>
 801bb58:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 801bb5c:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 801bb60:	73694c72 	cmnvc	r9, #29184	; 0x7200
 801bb64:	3b292874 	blcc	8a65d3c <__exidx_end+0xa47f38>
 801bb68:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 801bb6c:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 801bb70:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 801bb74:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801bb78:	0a3b2928 	beq	8ee6020 <__exidx_end+0xec821c>
 801bb7c:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 801bb80:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 801bb84:	6f697372 	svcvs	0x00697372
 801bb88:	3b29286e 	blcc	8a65d48 <__exidx_end+0xa47f44>
 801bb8c:	2020000a 	eorcs	r0, r0, sl
 801bb90:	76696e55 			; <UNDEFINED> instruction: 0x76696e55
 801bb94:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801bb98:	72612073 	rsbvc	r2, r1, #115	; 0x73
 801bb9c:	616d2065 	cmnvs	sp, r5, rrx
 801bba0:	65707070 	ldrbvs	r7, [r0, #-112]!	; 0xffffff90
 801bba4:	312b2064 			; <UNDEFINED> instruction: 0x312b2064
 801bba8:	0000000a 	andeq	r0, r0, sl

0801bbac <vtable for ArtNet4Node>:
	...
 801bbb4:	0800bd8d 	stmdaeq	r0, {r0, r2, r3, r7, r8, sl, fp, ip, sp, pc}
 801bbb8:	0800bdad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, sl, fp, ip, sp, pc}
 801bbbc:	0800bd0f 	stmdaeq	r0, {r0, r1, r2, r3, r8, sl, fp, ip, sp, pc}
 801bbc0:	0800bdf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp, pc}
 801bbc4:	0800bdbf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, sl, fp, ip, sp, pc}
 801bbc8:	0800bcfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, sl, fp, ip, sp, pc}
 801bbcc:	0800bd71 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, fp, ip, sp, pc}

0801bbd0 <ArtNetMsgConst::START>:
 801bbd0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 801bbd4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 801bbd8:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 801bbdc:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

0801bbe1 <ArtNetMsgConst::PARAMS>:
 801bbe1:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801bbe5:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801bbe9:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801bbed:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801bbf1:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801bbf5 <ArtNetMsgConst::STARTED>:
 801bbf5:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801bbf9:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801bbfd:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801bc01:	00646574 	rsbeq	r6, r4, r4, ror r5
 801bc05:	25207325 	strcs	r7, [r0, #-805]!	; 0xfffffcdb
 801bc09:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
 801bc0d:	00732520 	rsbseq	r2, r3, r0, lsr #10
 801bc11:	70747468 	rsbsvc	r7, r4, r8, ror #8
 801bc15:	2f2f3a73 	svccs	0x002f3a73
 801bc19:	32336467 	eorscc	r6, r3, #1728053248	; 0x67000000
 801bc1d:	786d642d 	stmdavc	sp!, {r0, r2, r3, r5, sl, sp, lr}^
 801bc21:	67726f2e 	ldrbvs	r6, [r2, -lr, lsr #30]!
 801bc25:	626d4500 	rsbvs	r4, sp, #0, 10
 801bc29:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
 801bc2d:	 	subvc	r0, r1, #100	; 0x64

0801bc2f <artnet::NODE_ID>:
 801bc2f:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801bc33:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801bc37 <defaults::SHORT_NAME>:
 801bc37:	20567641 	subscs	r7, r6, r1, asr #12
 801bc3b:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801bc3f:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801bc43:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
 801bc47:	34302500 	ldrtcc	r2, [r0], #-1280	; 0xfffffb00
 801bc4b:	255b2078 	ldrbcs	r2, [fp, #-120]	; 0xffffff88
 801bc4f:	5d643430 	cfstrdpl	mvd3, [r4, #-192]!	; 0xffffff40
 801bc53:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801bc57:	00567641 	subseq	r7, r6, r1, asr #12

0801bc5b <artnet::NODE_ID>:
 801bc5b:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801bc5f:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801bc63 <artnet::NODE_ID>:
 801bc63:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801bc67:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801bc6b <artnet::NODE_ID>:
 801bc6b:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801bc6f:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801bc73:	00505448 	subseq	r5, r0, r8, asr #8
 801bc77:	0050544c 	subseq	r5, r0, ip, asr #8
 801bc7b:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801bc7f:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801bc83:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 801bc87:	646f4e00 	strbtvs	r4, [pc], #-3584	; 801bc8f <artnet::NODE_ID+0x24>
 801bc8b:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 801bc8f:	75255b20 	strvc	r5, [r5, #-2848]!	; 0xfffff4e0
 801bc93:	20000a5d 	andcs	r0, r0, sp, asr sl
 801bc97:	6d726946 			; <UNDEFINED> instruction: 0x6d726946
 801bc9b:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
 801bc9f:	3a202020 	bcc	8823d27 <__exidx_end+0x805f23>
 801bca3:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801bca7:	000a6425 	andeq	r6, sl, r5, lsr #8
 801bcab:	6f685320 	svcvs	0x00685320
 801bcaf:	6e207472 	mcrvs	4, 1, r7, cr0, cr2, {3}
 801bcb3:	20656d61 	rsbcs	r6, r5, r1, ror #26
 801bcb7:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801bcbb:	4c20000a 	stcmi	0, cr0, [r0], #-40	; 0xffffffd8
 801bcbf:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 801bcc3:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801bcc7:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801bccb:	000a7325 	andeq	r7, sl, r5, lsr #6
 801bccf:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 801bcd3:	0a747570 	beq	9d3929b <__exidx_end+0x1d1b497>
 801bcd7:	50202000 	eorpl	r2, r0, r0
 801bcdb:	2074726f 	rsbscs	r7, r4, pc, ror #4
 801bcdf:	20643225 	rsbcs	r3, r4, r5, lsr #4
 801bce3:	20753425 	rsbscs	r3, r5, r5, lsr #8
 801bce7:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 801bceb:	257b2000 	ldrbcs	r2, [fp, #-0]!
 801bcef:	000a7d73 	andeq	r7, sl, r3, ror sp
 801bcf3:	706e4920 	rsbvc	r4, lr, r0, lsr #18
 801bcf7:	000a7475 	andeq	r7, sl, r5, ror r4
 801bcfb:	6f502020 	svcvs	0x00502020
 801bcff:	25207472 	strcs	r7, [r0, #-1138]!	; 0xfffffb8e
 801bd03:	25206432 	strcs	r6, [r0, #-1074]!	; 0xfffffbce
 801bd07:	2d207534 	cfstr32cs	mvfx7, [r0, #-208]!	; 0xffffff30
 801bd0b:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 801bd0f:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801bd13:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801bd17:	68000a64 	stmdavs	r0, {r2, r5, r6, r9, fp}
 801bd1b:	00646c6f 	rsbeq	r6, r4, pc, ror #24
 801bd1f:	0066666f 	rsbeq	r6, r6, pc, ror #12
 801bd23:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801bd27:	6b636162 	blvs	98f42b7 <__exidx_end+0x18d64b3>
 801bd2b:	63617300 	cmnvs	r1, #0, 6
 801bd2f:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 801bd33:	00747570 	rsbseq	r7, r4, r0, ror r5
 801bd37:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 801bd3b:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
 801bd3f:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
 801bd43:	6c00656c 	cfstr32vs	mvfx6, [r0], {108}	; 0x6c
 801bd47:	68007074 	stmdavs	r0, {r2, r4, r5, r6, ip, sp, lr}
 801bd4b:	61007074 	tstvs	r0, r4, ror r0
 801bd4f:	656e7472 	strbvs	r7, [lr, #-1138]!	; 0xfffffb8e
 801bd53:	72410074 	subvc	r0, r1, #116	; 0x74
 801bd57:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 801bd5b:	00342074 	eorseq	r2, r4, r4, ror r0
	...

0801bd60 <CSWTCH.95>:
 801bd60:	0801bd1a 	stmdaeq	r1, {r1, r3, r4, r8, sl, fp, ip, sp, pc}
 801bd64:	0801bd1f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, sl, fp, ip, sp, pc}
 801bd68:	0801af66 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, fp, sp, pc}
 801bd6c:	0801bd23 	stmdaeq	r1, {r0, r1, r5, r8, sl, fp, ip, sp, pc}

0801bd70 <ArtNetParamsConst::ENABLE_RDM>:
 801bd70:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801bd74:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 801bd78:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

0801bd7b <ArtNetParamsConst::MAP_UNIVERSE0>:
 801bd7b:	5f70616d 	svcpl	0x0070616d
 801bd7f:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801bd83:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801bd87:	 	rsbsvc	r0, r0, #48	; 0x30

0801bd89 <ArtNetParamsConst::PROTOCOL_PORT>:
 801bd89:	746f7270 	strbtvc	r7, [pc], #-624	; 801bd91 <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 801bd8d:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801bbd8 <ArtNetMsgConst::START+0x8>
 801bd91:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801bd95:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801bd99:	746f7270 	strbtvc	r7, [pc], #-624	; 801bda1 <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 801bd9d:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801bbe8 <ArtNetMsgConst::PARAMS+0x7>
 801bda1:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801bda5:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801bda9:	746f7270 	strbtvc	r7, [pc], #-624	; 801bdb1 <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 801bdad:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801bbf8 <ArtNetMsgConst::STARTED+0x3>
 801bdb1:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801bdb5:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801bdb9:	746f7270 	strbtvc	r7, [pc], #-624	; 801bdc1 <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 801bdbd:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801bc08 <ArtNetMsgConst::STARTED+0x13>
 801bdc1:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801bdc5:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801bdc9 <ArtNetParamsConst::NODE_LONG_NAME>:
 801bdc9:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 801bdcd:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 801bdd1:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

0801bdd3 <ArtNetParamsConst::NODE_SHORT_NAME>:
 801bdd3:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 801bdd7:	616e5f74 	smcvs	58868	; 0xe5f4
 801bddb:	 	andvc	r6, r0, #457179136	; 0x1b400000

0801bdde <ArtNetParamsConst::RDM_ENABLE_PORT>:
 801bdde:	5f6d6472 	svcpl	0x006d6472
 801bde2:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801bde6:	705f656c 	subsvc	r6, pc, ip, ror #10
 801bdea:	5f74726f 	svcpl	0x0074726f
 801bdee:	64720061 	ldrbtvs	r0, [r2], #-97	; 0xffffff9f
 801bdf2:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 801bdf6:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801bdfa:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801bdfe:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801be02:	5f6d6472 	svcpl	0x006d6472
 801be06:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801be0a:	705f656c 	subsvc	r6, pc, ip, ror #10
 801be0e:	5f74726f 	svcpl	0x0074726f
 801be12:	64720063 	ldrbtvs	r0, [r2], #-99	; 0xffffff9d
 801be16:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 801be1a:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801be1e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801be22:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801be26 <ArtNetParamsConst::DESTINATION_IP_PORT>:
 801be26:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801be2a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801be2e:	5f6e6f69 	svcpl	0x006e6f69
 801be32:	705f7069 	subsvc	r7, pc, r9, rrx
 801be36:	5f74726f 	svcpl	0x0074726f
 801be3a:	00000061 	andeq	r0, r0, r1, rrx
 801be3e:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801be42:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801be46:	5f6e6f69 	svcpl	0x006e6f69
 801be4a:	705f7069 	subsvc	r7, pc, r9, rrx
 801be4e:	5f74726f 	svcpl	0x0074726f
 801be52:	00000062 	andeq	r0, r0, r2, rrx
 801be56:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801be5a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801be5e:	5f6e6f69 	svcpl	0x006e6f69
 801be62:	705f7069 	subsvc	r7, pc, r9, rrx
 801be66:	5f74726f 	svcpl	0x0074726f
 801be6a:	00000063 	andeq	r0, r0, r3, rrx
 801be6e:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801be72:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801be76:	5f6e6f69 	svcpl	0x006e6f69
 801be7a:	705f7069 	subsvc	r7, pc, r9, rrx
 801be7e:	5f74726f 	svcpl	0x0074726f
 801be82:	00000064 	andeq	r0, r0, r4, rrx

0801be86 <ArtNetParamsConst::NET>:
 801be86:	0074656e 	rsbseq	r6, r4, lr, ror #10

0801be8a <ArtNetParamsConst::SUBNET>:
 801be8a:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 801be8e:	 	tstvs	r0, r5, ror #8

0801be91 <ArtNetParamsConst::FILE_NAME>:
 801be91:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 801be95:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 801be99:	 			; <UNDEFINED> instruction: 0xff007478

0801be9c <ArtNetConst::OEM_ID>:
 801be9c:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

0801be9e <ArtNetConst::ESTA_ID>:
 801be9e:	 	stmdacc	r1, {r4, r6}

0801bea0 <ArtNetConst::VERSION>:
 801bea0:	33323801 	teqcc	r2, #65536	; 0x10000
 801bea4:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801bea8:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 801beac:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 801beb0:	20733834 	rsbscs	r3, r3, r4, lsr r8
 801beb4:	30007325 	andcc	r7, r0, r5, lsr #6
 801beb8:	6f4e202e 	svcvs	0x004e202e
 801bebc:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 801bec0:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 801bec4:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 801bec8:	202c6465 	eorcs	r6, ip, r5, ror #8
 801becc:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 801bed0:	6f687320 	svcvs	0x00687320
 801bed4:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 801bed8:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 801bedc:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 801bee0:	000a216e 	andeq	r2, sl, lr, ror #2
 801bee4:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 801bee8:	000a6567 	andeq	r6, sl, r7, ror #10
 801beec:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 801bef0:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 801bef4:	203a2065 	eorscs	r2, sl, r5, rrx
 801bef8:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801befc:	20000a64 	andcs	r0, r0, r4, ror #20
 801bf00:	20444943 	subcs	r4, r4, r3, asr #18
 801bf04:	20202020 	eorcs	r2, r0, r0, lsr #32
 801bf08:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801bf0c:	20000a73 	andcs	r0, r0, r3, ror sl
 801bf10:	726f5020 	rsbvc	r5, pc, #32
 801bf14:	32252074 	eorcc	r2, r5, #116	; 0x74
 801bf18:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 801bf1c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 801bf20:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 801bf24:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 801bf28:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 801bf2c:	2020000a 	eorcs	r0, r0, sl
 801bf30:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 801bf34:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 801bf38:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 801bf3c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801bf40:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 801bf44:	5b206433 	blpl	8835018 <__exidx_end+0x817214>
 801bf48:	0a5d6425 	beq	9774fe4 <__exidx_end+0x17571e0>
 801bf4c:	79532000 	ldmdbvc	r3, {sp}^
 801bf50:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 801bf54:	7a696e6f 	bvc	9a77918 <__exidx_end+0x1a59b14>
 801bf58:	73692065 	cmnvc	r9, #101	; 0x65
 801bf5c:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801bf60:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801bf64:	44000a64 	strmi	r0, [r0], #-2660	; 0xfffff59c
 801bf68:	4f20584d 	svcmi	0x0020584d
 801bf6c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 801bf70:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
 801bf74:	6e492058 	mcrvs	0, 2, r2, cr9, cr8, {2}
 801bf78:	00747570 	rsbseq	r7, r4, r0, ror r5

0801bf7c <CSWTCH.56>:
 801bf7c:	0801bd1a 	stmdaeq	r1, {r1, r3, r4, r8, sl, fp, ip, sp, pc}
 801bf80:	0801bd1f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, sl, fp, ip, sp, pc}
 801bf84:	0801af66 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, fp, sp, pc}
 801bf88:	0801bd23 	stmdaeq	r1, {r0, r1, r5, r8, sl, fp, ip, sp, pc}

0801bf8c <E131ParamsConst::PRIORITY>:
 801bf8c:	6f697270 	svcvs	0x00697270
 801bf90:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801bf94:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801bf98:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801bf9c:	72700000 	rsbsvc	r0, r0, #0
 801bfa0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801bfa4:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 801bfa8:	5f74726f 	svcpl	0x0074726f
 801bfac:	00000062 	andeq	r0, r0, r2, rrx
 801bfb0:	6f697270 	svcvs	0x00697270
 801bfb4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801bfb8:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801bfbc:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801bfc0:	72700000 	rsbsvc	r0, r0, #0
 801bfc4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801bfc8:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 801bfcc:	5f74726f 	svcpl	0x0074726f
 801bfd0:	00000064 	andeq	r0, r0, r4, rrx

0801bfd4 <E131ParamsConst::FILE_NAME>:
 801bfd4:	31333165 	teqcc	r3, r5, ror #2
 801bfd8:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
	...

0801bfdd <E117Const::ACN_PACKET_IDENTIFIER>:
 801bfdd:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 801bfe1:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 801bfe5:	00000037 	andeq	r0, r0, r7, lsr r0

0801bfe9 <E131BridgeConst::VERSION>:
 801bfe9:	33321901 	teqcc	r2, #16384	; 0x4000
 801bfed:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801bff1:	35322e35 	ldrcc	r2, [r2, #-3637]!	; 0xfffff1cb
 801bff5:	33312e30 	teqcc	r1, #48, 28	; 0x300
 801bff9:	33320033 	teqcc	r2, #51	; 0x33
 801bffd:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801c001:	35322e35 	ldrcc	r2, [r2, #-3637]!	; 0xfffff1cb
 801c005:	33312e30 	teqcc	r1, #48, 28	; 0x300
 801c009:	4c4c0034 	mcrrmi	0, 3, r0, ip, cr4
 801c00d:	44205052 	strtmi	r5, [r0], #-82	; 0xffffffae
 801c011:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 801c015:	6f632065 	svcvs	0x00632065
 801c019:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801c01d:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 801c021:	0a6e6f69 	beq	9bb7dcd <__exidx_end+0x1b99fc9>
 801c025:	6f502000 	svcvs	0x00502000
 801c029:	55207472 	strpl	r7, [r0, #-1138]!	; 0xfffffb8e
 801c02d:	20205044 	eorcs	r5, r0, r4, asr #32
 801c031:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c035:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c039:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c03d:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c041:	20000a64 	andcs	r0, r0, r4, ror #20
 801c045:	746c754d 	strbtvc	r7, [ip], #-1357	; 0xfffffab3
 801c049:	73616369 	cmnvc	r1, #-1543503871	; 0xa4000001
 801c04d:	6f6a2074 	svcvs	0x006a2074
 801c051:	52206e69 	eorpl	r6, r0, #1680	; 0x690
 801c055:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 801c059:	3a207473 	bcc	883922d <__exidx_end+0x81b429>
 801c05d:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801c061:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801c065:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801c069:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 801c06d:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
 801c071:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
 801c075:	73655220 	cmnvc	r5, #32, 4
 801c079:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
 801c07d:	20202065 	eorcs	r2, r0, r5, rrx
 801c081:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801c085:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801c089:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801c08d:	0a64252e 	beq	992554d <__exidx_end+0x1907749>
 801c091:	 	andeq	r0, r0, r0

0801c094 <vtable for LLRPDevice>:
	...
 801c09c:	0800fb17 	stmdaeq	r0, {r0, r1, r2, r4, r8, r9, fp, ip, sp, lr, pc}
 801c0a0:	0800fb21 	stmdaeq	r0, {r0, r5, r8, r9, fp, ip, sp, lr, pc}
 801c0a4:	0800fb19 	stmdaeq	r0, {r0, r3, r4, r8, r9, fp, ip, sp, lr, pc}
 801c0a8:	0800fb1b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, fp, ip, sp, lr, pc}
 801c0ac:	0800fb1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, fp, ip, sp, lr, pc}

0801c0b0 <RDMNetConst::MSG_CONFIG>:
 801c0b0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801c0b4:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801c0b8:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801c0bc:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801c0c0:	 	andpl	r7, r0, #1694498816	; 0x65000000

0801c0c3 <RDMNetConst::MSG_STARTED>:
 801c0c3:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801c0c7:	73207465 			; <UNDEFINED> instruction: 0x73207465
 801c0cb:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 801c0cf:	 	movwpl	r6, #1125	; 0x465

0801c0d2 <RDMNetConst::MSG_START>:
 801c0d2:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 801c0d6:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 801c0da:	4d445220 	sfmmi	f5, 2, [r4, #-128]	; 0xffffff80
 801c0de:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801c0e2:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801c0e6:	000a7465 	andeq	r7, sl, r5, ror #8
 801c0ea:	44494320 	strbmi	r4, [r9], #-800	; 0xfffffce0
 801c0ee:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c0f2:	52000a73 	andpl	r0, r0, #471040	; 0x73000
 801c0f6:	52204d44 	eorpl	r4, r0, #68, 26	; 0x1100
 801c0fa:	6f707365 	svcvs	0x00707365
 801c0fe:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
 801c102:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801c106:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 801c10a:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801c10e:	000a6e6f 	andeq	r6, sl, pc, ror #28
 801c112:	6f725020 	svcvs	0x00725020
 801c116:	6f636f74 	svcvs	0x00636f74
 801c11a:	6556206c 	ldrbvs	r2, [r6, #-108]	; 0xffffff94
 801c11e:	6f697372 	svcvs	0x00697372
 801c122:	6425206e 	strtvs	r2, [r5], #-110	; 0xffffff92
 801c126:	0a64252e 	beq	99255e6 <__exidx_end+0x19077e2>
 801c12a:	4d442000 	stclmi	0, cr2, [r4, #-0]
 801c12e:	64412058 	strbvs	r2, [r1], #-88	; 0xffffffa8
 801c132:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 801c136:	20202073 	eorcs	r2, r0, r3, ror r0
 801c13a:	3a202020 	bcc	88241c2 <__exidx_end+0x8063be>
 801c13e:	0a642520 	beq	99255c6 <__exidx_end+0x19077c2>
 801c142:	4d442000 	stclmi	0, cr2, [r4, #-0]
 801c146:	6f462058 	svcvs	0x00462058
 801c14a:	7270746f 	rsbsvc	r7, r0, #1862270976	; 0x6f000000
 801c14e:	20746e69 	rsbscs	r6, r4, r9, ror #28
 801c152:	3a202020 	bcc	88241da <__exidx_end+0x8063d6>
 801c156:	0a642520 	beq	99255de <__exidx_end+0x19077da>
 801c15a:	65502000 	ldrbvs	r2, [r0, #-0]
 801c15e:	6e6f7372 	mcrvs	3, 3, r7, cr15, cr2, {3}
 801c162:	74696c61 	strbtvc	r6, [r9], #-3169	; 0xfffff39f
 801c166:	64252079 	strtvs	r2, [r5], #-121	; 0xffffff87
 801c16a:	20666f20 	rsbcs	r6, r6, r0, lsr #30
 801c16e:	5b206425 	blpl	883520a <__exidx_end+0x817406>
 801c172:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 801c176:	20000a5d 	andcs	r0, r0, sp, asr sl
 801c17a:	20627553 	rsbcs	r7, r2, r3, asr r5
 801c17e:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801c182:	20736563 	rsbscs	r6, r3, r3, ror #10
 801c186:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c18a:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c18e:	20000a64 	andcs	r0, r0, r4, ror #20
 801c192:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
 801c196:	2073726f 	rsbscs	r7, r3, pc, ror #4
 801c19a:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c19e:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c1a2:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c1a6:	00000a64 	andeq	r0, r0, r4, ror #20
	...

0801c1ac <vtable for RDMDeviceResponder>:
	...
 801c1b4:	08010015 	stmdaeq	r1, {r0, r2, r4}
 801c1b8:	08010035 	stmdaeq	r1, {r0, r2, r4, r5}
 801c1bc:	0801000f 	stmdaeq	r1, {r0, r1, r2, r3}
 801c1c0:	08010011 	stmdaeq	r1, {r0, r4}

0801c1c4 <UID_ALL>:
 801c1c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 801c1c8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

0801c1cc <RDMHandler::PID_DEFINITIONS>:
 801c1cc:	00000060 	andeq	r0, r0, r0, rrx
 801c1d0:	080104f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, sl}
	...
 801c1e0:	01010000 	mrseq	r0, (UNDEF: 1)
 801c1e4:	00000080 	andeq	r0, r0, r0, lsl #1
 801c1e8:	080105d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, sl}
	...
 801c1f8:	01010100 	mrseq	r0, (UNDEF: 17)
 801c1fc:	00000081 	andeq	r0, r0, r1, lsl #1
 801c200:	080105f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, sl}
	...
 801c210:	01010100 	mrseq	r0, (UNDEF: 17)
 801c214:	00000082 	andeq	r0, r0, r2, lsl #1
 801c218:	08010615 	stmdaeq	r1, {r0, r2, r4, r9, sl}
 801c21c:	00000000 	andeq	r0, r0, r0
 801c220:	08010765 	stmdaeq	r1, {r0, r2, r5, r6, r8, r9, sl}
 801c224:	00000000 	andeq	r0, r0, r0
 801c228:	01010100 	mrseq	r0, (UNDEF: 17)
 801c22c:	00000090 	muleq	r0, r0, r0
 801c230:	08010559 	stmdaeq	r1, {r0, r3, r4, r6, r8, sl}
 801c234:	00000000 	andeq	r0, r0, r0
 801c238:	08010731 	stmdaeq	r1, {r0, r4, r5, r8, r9, sl}
 801c23c:	00000000 	andeq	r0, r0, r0
 801c240:	01010100 	mrseq	r0, (UNDEF: 17)
 801c244:	00001000 	andeq	r1, r0, r0
 801c248:	08010651 	stmdaeq	r1, {r0, r4, r6, r9, sl}
 801c24c:	00000000 	andeq	r0, r0, r0
 801c250:	080106b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r9, sl}
 801c254:	00000000 	andeq	r0, r0, r0
 801c258:	01010000 	mrseq	r0, (UNDEF: 1)
 801c25c:	00001001 	andeq	r1, r0, r1
	...
 801c268:	0801066d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r9, sl}
 801c26c:	00000000 	andeq	r0, r0, r0
 801c270:	01010100 	mrseq	r0, (UNDEF: 17)
 801c274:	00000700 	andeq	r0, r0, r0, lsl #14
 801c278:	08010a5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r9, fp}
	...
 801c288:	01000000 	mrseq	r0, (UNDEF: 0)
 801c28c:	00000701 	andeq	r0, r0, r1, lsl #14
 801c290:	08010a85 	stmdaeq	r1, {r0, r2, r7, r9, fp}
	...
 801c2a0:	01000004 	tsteq	r0, r4
 801c2a4:	00000702 	andeq	r0, r0, r2, lsl #14
 801c2a8:	08010ad1 	stmdaeq	r1, {r0, r4, r6, r7, r9, fp}
	...
 801c2b8:	01000004 	tsteq	r0, r4
 801c2bc:	00000703 	andeq	r0, r0, r3, lsl #14
 801c2c0:	08010b01 	stmdaeq	r1, {r0, r8, r9, fp}
 801c2c4:	00000000 	andeq	r0, r0, r0
 801c2c8:	08010b2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, fp}
 801c2cc:	00000000 	andeq	r0, r0, r0
 801c2d0:	01000004 	tsteq	r0, r4
 801c2d4:	00000704 	andeq	r0, r0, r4, lsl #14
 801c2d8:	08010b99 	stmdaeq	r1, {r0, r3, r4, r7, r8, r9, fp}
 801c2dc:	00000000 	andeq	r0, r0, r0
 801c2e0:	08010bc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, fp}
 801c2e4:	00000000 	andeq	r0, r0, r0
 801c2e8:	01000004 	tsteq	r0, r4
 801c2ec:	00000705 	andeq	r0, r0, r5, lsl #14
 801c2f0:	08010c3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, sl, fp}
	...
 801c300:	01000004 	tsteq	r0, r4
 801c304:	00000707 	andeq	r0, r0, r7, lsl #14
	...
 801c310:	08010c11 	stmdaeq	r1, {r0, r4, sl, fp}
 801c314:	00000000 	andeq	r0, r0, r0
 801c318:	01000004 	tsteq	r0, r4
 801c31c:	00000706 	andeq	r0, r0, r6, lsl #14
 801c320:	08010c85 	stmdaeq	r1, {r0, r2, r7, sl, fp}
 801c324:	00000000 	andeq	r0, r0, r0
 801c328:	08010cc9 	stmdaeq	r1, {r0, r3, r6, r7, sl, fp}
 801c32c:	00000000 	andeq	r0, r0, r0
 801c330:	01000004 	tsteq	r0, r4
 801c334:	00000709 	andeq	r0, r0, r9, lsl #14
	...
 801c340:	08010d15 	stmdaeq	r1, {r0, r2, r4, r8, sl, fp}
 801c344:	00000000 	andeq	r0, r0, r0
 801c348:	01000004 	tsteq	r0, r4
 801c34c:	0000070b 	andeq	r0, r0, fp, lsl #14
 801c350:	08010b75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, fp}
	...
 801c360:	01000001 	tsteq	r0, r1
 801c364:	0000070a 	andeq	r0, r0, sl, lsl #14
 801c368:	08010d3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, sl, fp}
 801c36c:	00000000 	andeq	r0, r0, r0
 801c370:	08010d75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, sl, fp}
 801c374:	00000000 	andeq	r0, r0, r0
 801c378:	01000004 	tsteq	r0, r4
 801c37c:	0000070c 	andeq	r0, r0, ip, lsl #14
 801c380:	08010d7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, sl, fp}
 801c384:	00000000 	andeq	r0, r0, r0
 801c388:	08010dad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, sl, fp}
 801c38c:	00000000 	andeq	r0, r0, r0
 801c390:	01000000 	mrseq	r0, (UNDEF: 0)
 801c394:	0000070d 	andeq	r0, r0, sp, lsl #14
 801c398:	08010de1 	stmdaeq	r1, {r0, r5, r6, r7, r8, sl, fp}
 801c39c:	00000000 	andeq	r0, r0, r0
 801c3a0:	08010e11 	stmdaeq	r1, {r0, r4, r9, sl, fp}
 801c3a4:	00000000 	andeq	r0, r0, r0
 801c3a8:	01000000 	mrseq	r0, (UNDEF: 0)
 801c3ac:	204d4452 	subcs	r4, sp, r2, asr r4
 801c3b0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801c3b4:	63206563 			; <UNDEFINED> instruction: 0x63206563
 801c3b8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801c3bc:	61727567 	cmnvs	r2, r7, ror #10
 801c3c0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801c3c4:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 801c3c8:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 801c3cc:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 801c3d0:	20726572 	rsbscs	r6, r2, r2, ror r5
 801c3d4:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 801c3d8:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c3dc:	0a732a2e 	beq	9ce6c9c <__exidx_end+0x1cc8e98>
 801c3e0:	614d2000 	mrsvs	r2, (UNDEF: 77)
 801c3e4:	6166756e 	cmnvs	r6, lr, ror #10
 801c3e8:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
 801c3ec:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 801c3f0:	20202044 	eorcs	r2, r0, r4, asr #32
 801c3f4:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801c3f8:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 801c3fc:	000a5832 	andeq	r5, sl, r2, lsr r8
 801c400:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 801c404:	206c6169 	rsbcs	r6, ip, r9, ror #2
 801c408:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
 801c40c:	20207265 	eorcs	r7, r0, r5, ror #4
 801c410:	3a202020 	bcc	8824498 <__exidx_end+0x806694>
 801c414:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 801c418:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 801c41c:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 801c420:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 801c424:	20000a58 	andcs	r0, r0, r8, asr sl
 801c428:	746f6f52 	strbtvc	r6, [pc], #-3922	; 801c430 <RDMHandler::PID_DEFINITIONS+0x264>
 801c42c:	62616c20 	rsbvs	r6, r1, #32, 24	; 0x2000
 801c430:	20206c65 	eorcs	r6, r0, r5, ror #24
 801c434:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c438:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801c43c:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 801c440:	5020000a 	eorpl	r0, r0, sl
 801c444:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 801c448:	43207463 			; <UNDEFINED> instruction: 0x43207463
 801c44c:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
 801c450:	2079726f 	rsbscs	r7, r9, pc, ror #4
 801c454:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c458:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 801c45c:	0a58322e 	beq	9628d1c <__exidx_end+0x160af18>
 801c460:	72502000 	subsvc	r2, r0, #0
 801c464:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
 801c468:	65442074 	strbvs	r2, [r4, #-116]	; 0xffffff8c
 801c46c:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 801c470:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c474:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801c478:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 801c47c:	000a5832 	andeq	r5, sl, r2, lsr r8

0801c480 <DEVICE_LABEL>:
 801c480:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 801c484:	30353446 	eorscc	r3, r5, r6, asr #8
 801c488:	52204956 	eorpl	r4, r0, #1409024	; 0x158000
 801c48c:	44204d44 	strtmi	r4, [r0], #-3396	; 0xfffff2bc
 801c490:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 801c494:	 	subseq	r0, r0, r5, rrx

0801c496 <RDMConst::MANUFACTURER_ID>:
 801c496:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0801c498 <RDMConst::MANUFACTURER_NAME>:
 801c498:	70747468 	rsbsvc	r7, r4, r8, ror #8
 801c49c:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 801c4a0:	6f2e7777 	svcvs	0x002e7777
 801c4a4:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 801c4a8:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 801c4ac:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 801c4b0:	0067726f 	rsbeq	r7, r7, pc, ror #4
 801c4b4:	78383025 	ldmdavc	r8!, {r0, r2, r5, ip, sp}
 801c4b8:	3430252d 	ldrtcc	r2, [r0], #-1325	; 0xfffffad3
 801c4bc:	30252d78 	eorcc	r2, r5, r8, ror sp
 801c4c0:	252d7834 	strcs	r7, [sp, #-2100]!	; 0xfffff7cc
 801c4c4:	25783230 	ldrbcs	r3, [r8, #-560]!	; 0xfffffdd0
 801c4c8:	2d783230 	lfmcs	f3, 2, [r8, #-192]!	; 0xffffff40
 801c4cc:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c4d0:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c4d4:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c4d8:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c4dc:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c4e0:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c4e4:	584d4400 	stmdapl	sp, {sl, lr}^
 801c4e8:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 801c4ec:	20000a64 	andcs	r0, r0, r4, ror #20
 801c4f0:	61657242 	cmnvs	r5, r2, asr #4
 801c4f4:	6974206b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, sp}^
 801c4f8:	2020656d 	eorcs	r6, r0, sp, ror #10
 801c4fc:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c500:	20000a75 	andcs	r0, r0, r5, ror sl
 801c504:	2042414d 	subcs	r4, r2, sp, asr #2
 801c508:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 801c50c:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c510:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c514:	20000a75 	andcs	r0, r0, r5, ror sl
 801c518:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
 801c51c:	20687365 	rsbcs	r7, r8, r5, ror #6
 801c520:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
 801c524:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c528:	20000a75 	andcs	r0, r0, r5, ror sl
 801c52c:	746f6c53 	strbtvc	r6, [pc], #-3155	; 801c534 <RDMConst::MANUFACTURER_NAME+0x9c>
 801c530:	20202073 	eorcs	r2, r0, r3, ror r0
 801c534:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c538:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c53c:	00000a75 	andeq	r0, r0, r5, ror sl

0801c540 <vtable for DmxSend>:
	...
 801c548:	08011019 	stmdaeq	r1, {r0, r3, r4, ip}
 801c54c:	08011105 	stmdaeq	r1, {r0, r2, r8, ip}
 801c550:	0801101d 	stmdaeq	r1, {r0, r2, r3, r4, ip}
 801c554:	0801104d 	stmdaeq	r1, {r0, r2, r3, r6, ip}
 801c558:	08011085 	stmdaeq	r1, {r0, r2, r7, ip}
 801c55c:	08011095 	stmdaeq	r1, {r0, r2, r4, r7, ip}
 801c560:	080110a1 	stmdaeq	r1, {r0, r5, r7, ip}
 801c564:	080110ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, ip}
 801c568:	08017863 	stmdaeq	r1, {r0, r1, r5, r6, fp, ip, sp, lr}
 801c56c:	08017859 	stmdaeq	r1, {r0, r3, r4, r6, fp, ip, sp, lr}
 801c570:	0801785d 	stmdaeq	r1, {r0, r2, r3, r4, r6, fp, ip, sp, lr}
 801c574:	08017867 	stmdaeq	r1, {r0, r1, r2, r5, r6, fp, ip, sp, lr}

0801c578 <DmxParamsConst::BREAK_TIME>:
 801c578:	61657262 	cmnvs	r5, r2, ror #4
 801c57c:	69745f6b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 801c580:	 	movwvc	r6, #1389	; 0x56d

0801c583 <DmxParamsConst::SLOTS_COUNT>:
 801c583:	746f6c73 	strbtvc	r6, [pc], #-3187	; 801c58b <DmxParamsConst::SLOTS_COUNT+0x8>
 801c587:	6f635f73 	svcvs	0x00635f73
 801c58b:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801c58f <DmxParamsConst::REFRESH_RATE>:
 801c58f:	72666572 	rsbvc	r6, r6, #478150656	; 0x1c800000
 801c593:	5f687365 	svcpl	0x00687365
 801c597:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
	...

0801c59c <DmxParamsConst::MAB_TIME>:
 801c59c:	5f62616d 	svcpl	0x0062616d
 801c5a0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	...

0801c5a5 <DmxParamsConst::FILE_NAME>:
 801c5a5:	61726170 	cmnvs	r2, r0, ror r1
 801c5a9:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 801c5ad:	 	andeq	r7, r0, r8, ror r4

0801c5b0 <s_DirGpio>:
 801c5b0:	40020c00 	andmi	r0, r2, r0, lsl #24
 801c5b4:	00000001 	andeq	r0, r0, r1
 801c5b8:	40020c00 	andmi	r0, r2, r0, lsl #24
 801c5bc:	00000002 	andeq	r0, r0, r2

0801c5c0 <vtable for WS28xxDmxMulti>:
	...
 801c5c8:	08011ba5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, fp, ip}
 801c5cc:	08011bc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, fp, ip}
 801c5d0:	08011b83 	stmdaeq	r1, {r0, r1, r7, r8, r9, fp, ip}
 801c5d4:	08011d37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, sl, fp, ip}
 801c5d8:	08011bff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip}
 801c5dc:	08011bd7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, r9, fp, ip}
 801c5e0:	08011d19 	stmdaeq	r1, {r0, r3, r4, r8, sl, fp, ip}
 801c5e4:	08011d31 	stmdaeq	r1, {r0, r4, r5, r8, sl, fp, ip}
 801c5e8:	08011b75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, fp, ip}
 801c5ec:	08011b79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, fp, ip}
 801c5f0:	08011b7f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, r9, fp, ip}
 801c5f4:	08017867 	stmdaeq	r1, {r0, r1, r2, r5, r6, fp, ip, sp, lr}
 801c5f8:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801c5fc:	2a2e253a 	bcs	8ba5aec <__exidx_end+0xb87ce8>
 801c600:	23002c66 	movwcs	r2, #3174	; 0xc66
 801c604:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 801c608:	0a662a2e 	beq	99a6ec8 <__exidx_end+0x19890c4>
 801c60c:	65643c00 	strbvs	r3, [r4, #-3072]!	; 0xfffff400
 801c610:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 801c614:	4f003e74 	svcmi	0x00003e74
 801c618:	77726576 			; <UNDEFINED> instruction: 0x77726576
 801c61c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 801c620:	74616420 	strbtvc	r6, [r1], #-1056	; 0xfffffbe0
 801c624:	65687361 	strbvs	r7, [r8, #-865]!	; 0xfffffc9f
 801c628:	4f007465 	svcmi	0x00007465
 801c62c:	77726576 			; <UNDEFINED> instruction: 0x77726576
 801c630:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 801c634:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 801c638:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801c63c:	29737528 	ldmdbcs	r3!, {r3, r5, r8, sl, ip, sp, lr}^
 801c640:	6f724700 	svcvs	0x00724700
 801c644:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
 801c648:	6c430067 	mcrrvs	0, 6, r0, r3, cr7
 801c64c:	206b636f 	rsbcs	r6, fp, pc, ror #6
 801c650:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
 801c654:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 801c658:	00737069 	rsbseq	r7, r3, r9, rrx
 801c65c:	31415041 	cmpcc	r1, r1, asr #32
 801c660:	532f3230 			; <UNDEFINED> instruction: 0x532f3230
 801c664:	3238394b 	eorscc	r3, r8, #1228800	; 0x12c000
 801c668:	65540032 	ldrbvs	r0, [r4, #-50]	; 0xffffffce
 801c66c:	70207473 	eorvc	r7, r0, r3, ror r4
 801c670:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 801c674:	50006e72 	andpl	r6, r0, r2, ror lr
 801c678:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 801c67c:	584d4420 	stmdapl	sp, {r5, sl, lr}^
 801c680:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801c684:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 801c688:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801c68c:	000a6e6f 	andeq	r6, sl, pc, ror #28
 801c690:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 801c694:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
 801c698:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c69c:	20000a64 	andcs	r0, r0, r4, ror #20
 801c6a0:	756f7247 	strbvc	r7, [pc, #-583]!	; 801c461 <RDMHandler::PID_DEFINITIONS+0x295>
 801c6a4:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 801c6a8:	756f6320 	strbvc	r6, [pc, #-800]!	; 801c390 <RDMHandler::PID_DEFINITIONS+0x1c4>
 801c6ac:	3a20746e 	bcc	883986c <__exidx_end+0x81ba68>
 801c6b0:	20642520 	rsbcs	r2, r4, r0, lsr #10
 801c6b4:	6f72475b 	svcvs	0x0072475b
 801c6b8:	20737075 	rsbscs	r7, r3, r5, ror r0
 801c6bc:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801c6c0:	59000a5d 	stmdbpl	r0, {r0, r2, r3, r4, r6, r9, fp}
 801c6c4:	4e007365 	cdpmi	3, 0, cr7, cr0, cr5, {3}
 801c6c8:	6950006f 	ldmdbvs	r0, {r0, r1, r2, r3, r5, r6}^
 801c6cc:	206c6578 	rsbcs	r6, ip, r8, ror r5
 801c6d0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801c6d4:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801c6d8:	6f697461 	svcvs	0x00697461
 801c6dc:	20000a6e 	andcs	r0, r0, lr, ror #20
 801c6e0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 801c6e4:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c6e8:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801c6ec:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 801c6f0:	20000a5d 	andcs	r0, r0, sp, asr sl
 801c6f4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 801c6f8:	20202074 	eorcs	r2, r0, r4, ror r0
 801c6fc:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801c700:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 801c704:	69707061 	ldmdbvs	r0!, {r0, r5, r6, ip, sp, lr}^
 801c708:	3a20676e 	bcc	88364c8 <__exidx_end+0x8186c4>
 801c70c:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801c710:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 801c714:	5420000a 	strtpl	r0, [r0], #-10
 801c718:	20204830 	eorcs	r4, r0, r0, lsr r8
 801c71c:	3a202020 	bcc	88247a4 <__exidx_end+0x8069a0>
 801c720:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 801c724:	305b2066 	subscc	r2, fp, r6, rrx
 801c728:	5d582578 	cfldr64pl	mvdx2, [r8, #-480]	; 0xfffffe20
 801c72c:	5420000a 	strtpl	r0, [r0], #-10
 801c730:	20204831 	eorcs	r4, r0, r1, lsr r8
 801c734:	3a202020 	bcc	88247bc <__exidx_end+0x8069b8>
 801c738:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 801c73c:	305b2066 	subscc	r2, fp, r6, rrx
 801c740:	5d582578 	cfldr64pl	mvdx2, [r8, #-480]	; 0xfffffe20
 801c744:	4720000a 	strmi	r0, [r0, -sl]!
 801c748:	61626f6c 	cmnvs	r2, ip, ror #30
 801c74c:	6972426c 	ldmdbvs	r2!, {r2, r3, r5, r6, r9, lr}^
 801c750:	6e746867 	cdpvs	8, 7, cr6, cr4, cr7, {3}
 801c754:	3a737365 	bcc	9cf94f0 <__exidx_end+0x1cdb6ec>
 801c758:	0a752520 	beq	9d65be0 <__exidx_end+0x1d47ddc>
 801c75c:	61472000 	mrsvs	r2, (UNDEF: 71)
 801c760:	20616d6d 	rsbcs	r6, r1, sp, ror #26
 801c764:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
 801c768:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801c76c:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 801c770:	20000a73 	andcs	r0, r0, r3, ror sl
 801c774:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 801c778:	25203a6b 	strcs	r3, [r0, #-2667]!	; 0xfffff595
 801c77c:	7a482075 	bvc	9224958 <__exidx_end+0x1206b54>
 801c780:	0000000a 	andeq	r0, r0, sl

0801c784 <CSWTCH.9>:
 801c784:	0801c998 	stmdaeq	r1, {r3, r4, r7, r8, fp, lr, pc}
 801c788:	0801ca98 	stmdaeq	r1, {r3, r4, r7, r9, fp, lr, pc}
 801c78c:	0801cb98 	stmdaeq	r1, {r3, r4, r7, r8, r9, fp, lr, pc}
 801c790:	0801cc98 	stmdaeq	r1, {r3, r4, r7, sl, fp, lr, pc}
 801c794:	0801cd98 	stmdaeq	r1, {r3, r4, r7, r8, sl, fp, lr, pc}

0801c798 <gamma10_0>:
 801c798:	03020100 	movweq	r0, #8448	; 0x2100
 801c79c:	07060504 	streq	r0, [r6, -r4, lsl #10]
 801c7a0:	0b0a0908 	bleq	829ebc8 <__exidx_end+0x280dc4>
 801c7a4:	0f0e0d0c 	svceq	0x000e0d0c
 801c7a8:	13121110 	tstne	r2, #16, 2
 801c7ac:	17161514 			; <UNDEFINED> instruction: 0x17161514
 801c7b0:	1b1a1918 	blne	86a2c18 <__exidx_end+0x684e14>
 801c7b4:	1f1e1d1c 	svcne	0x001e1d1c
 801c7b8:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801c7bc:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 801c7c0:	2b2a2928 	blcs	8aa6c68 <__exidx_end+0xa88e64>
 801c7c4:	2f2e2d2c 	svccs	0x002e2d2c
 801c7c8:	33323130 	teqcc	r2, #48, 2
 801c7cc:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801c7d0:	3b3a3938 	blcc	8eaacb8 <__exidx_end+0xe8ceb4>
 801c7d4:	3f3e3d3c 	svccc	0x003e3d3c
 801c7d8:	43424140 	movtmi	r4, #8512	; 0x2140
 801c7dc:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801c7e0:	4b4a4948 	blmi	92aed08 <__exidx_end+0x1290f04>
 801c7e4:	4f4e4d4c 	svcmi	0x004e4d4c
 801c7e8:	53525150 	cmppl	r2, #80, 2
 801c7ec:	57565554 			; <UNDEFINED> instruction: 0x57565554
 801c7f0:	5b5a5958 	blpl	96b2d58 <__exidx_end+0x1694f54>
 801c7f4:	5f5e5d5c 	svcpl	0x005e5d5c
 801c7f8:	63626160 	cmnvs	r2, #96, 2
 801c7fc:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 801c800:	6b6a6968 	blvs	9ab6da8 <__exidx_end+0x1a98fa4>
 801c804:	6f6e6d6c 	svcvs	0x006e6d6c
 801c808:	73727170 	cmnvc	r2, #112, 2
 801c80c:	77767574 			; <UNDEFINED> instruction: 0x77767574
 801c810:	7b7a7978 	blvc	9ebadf8 <__exidx_end+0x1e9cff4>
 801c814:	7f7e7d7c 	svcvc	0x007e7d7c
 801c818:	83828180 	orrhi	r8, r2, #128, 2
 801c81c:	87868584 	strhi	r8, [r6, r4, lsl #11]
 801c820:	8b8a8988 	blhi	62bee48 <__stack_size+0x62bae48>
 801c824:	8f8e8d8c 	svchi	0x008e8d8c
 801c828:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 801c82c:	97969594 			; <UNDEFINED> instruction: 0x97969594
 801c830:	9b9a9998 	blls	66c2e98 <__stack_size+0x66bee98>
 801c834:	9f9e9d9c 	svcls	0x009e9d9c
 801c838:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 801c83c:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 801c840:	abaaa9a8 	blge	6ac6ee8 <__stack_size+0x6ac2ee8>
 801c844:	afaeadac 	svcge	0x00aeadac
 801c848:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 801c84c:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 801c850:	bbbab9b8 	bllt	6ecaf38 <__stack_size+0x6ec6f38>
 801c854:	bfbebdbc 	svclt	0x00bebdbc
 801c858:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 801c85c:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 801c860:	cbcac9c8 	blgt	72cef88 <__stack_size+0x72caf88>
 801c864:	cfcecdcc 	svcgt	0x00cecdcc
 801c868:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 801c86c:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 801c870:	dbdad9d8 	blle	76d2fd8 <__stack_size+0x76cefd8>
 801c874:	dfdedddc 	svcle	0x00dedddc
 801c878:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 801c87c:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 801c880:	ebeae9e8 	bl	7ad7028 <__stack_size+0x7ad3028>
 801c884:	efeeedec 	svc	0x00eeedec
 801c888:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 801c88c:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 801c890:	fbfaf9f8 	blx	7edb07a <__stack_size+0x7ed707a>
 801c894:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

0801c898 <gamma20_0>:
	...
 801c8a4:	01010101 	tsteq	r1, r1, lsl #2
 801c8a8:	01010101 	tsteq	r1, r1, lsl #2
 801c8ac:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801c8b0:	03030202 	movweq	r0, #12802	; 0x3202
 801c8b4:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 801c8b8:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 801c8bc:	06060505 	streq	r0, [r6], -r5, lsl #10
 801c8c0:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801c8c4:	09080808 	stmdbeq	r8, {r3, fp}
 801c8c8:	0a0a0909 	beq	829ecf4 <__exidx_end+0x280ef0>
 801c8cc:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801c8d0:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801c8d4:	100f0f0e 	andne	r0, pc, lr, lsl #30
 801c8d8:	12111110 	andsne	r1, r1, #16, 2
 801c8dc:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 801c8e0:	16151514 			; <UNDEFINED> instruction: 0x16151514
 801c8e4:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 801c8e8:	1b1a1a19 	blne	86a3154 <__exidx_end+0x685350>
 801c8ec:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 801c8f0:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 801c8f4:	23232221 			; <UNDEFINED> instruction: 0x23232221
 801c8f8:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 801c8fc:	2a292827 	bcs	8a669a0 <__exidx_end+0xa48b9c>
 801c900:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 801c904:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
 801c908:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 801c90c:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 801c910:	3b3a3938 	blcc	8eaadf8 <__exidx_end+0xe8cff4>
 801c914:	3f3e3d3c 	svccc	0x003e3d3c
 801c918:	43424140 	movtmi	r4, #8512	; 0x2140
 801c91c:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801c920:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 801c924:	504f4e4d 	subpl	r4, pc, sp, asr #28
 801c928:	55545251 	ldrbpl	r5, [r4, #-593]	; 0xfffffdaf
 801c92c:	59585756 	ldmdbpl	r8, {r1, r2, r4, r6, r8, r9, sl, ip, lr}^
 801c930:	5e5d5c5b 	mrcpl	12, 2, r5, cr13, cr11, {2}
 801c934:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 801c938:	68676664 	stmdavs	r7!, {r2, r5, r6, r9, sl, sp, lr}^
 801c93c:	6d6c6b69 	fstmdbxvs	ip!, {d22-d73}	;@ Deprecated
 801c940:	7371706f 	cmnvc	r1, #111	; 0x6f
 801c944:	78777574 	ldmdavc	r7!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 801c948:	7e7c7b79 	vmovvc.s8	r7, d12[7]
 801c94c:	8382807f 	orrhi	r8, r2, #127	; 0x7f
 801c950:	89888685 	stmibhi	r8, {r0, r2, r7, r9, sl, pc}
 801c954:	8f8e8c8b 	svchi	0x008e8c8b
 801c958:	95949291 	ldrls	r9, [r4, #657]	; 0x291
 801c95c:	9b9a9897 	blls	66c2bc0 <__stack_size+0x66bebc0>
 801c960:	a2a09e9d 	adcge	r9, r0, #2512	; 0x9d0
 801c964:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 801c968:	afadabaa 	svcge	0x00adabaa
 801c96c:	b5b4b2b0 	ldrlt	fp, [r4, #688]!	; 0x2b0
 801c970:	bcbab9b7 			; <UNDEFINED> instruction: 0xbcbab9b7
 801c974:	c3c1c0be 	bicgt	ip, r1, #190	; 0xbe
 801c978:	cac8c7c5 	bgt	724e894 <__stack_size+0x724a894>
 801c97c:	d1cfcecc 	bicle	ip, pc, ip, asr #29
 801c980:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 801c984:	e0dedcda 	ldrsb	sp, [lr], #202	; 0xca
 801c988:	e8e6e4e2 	stmia	r6!, {r1, r5, r6, r7, sl, sp, lr, pc}^
 801c98c:	efedebe9 	svc	0x00edebe9
 801c990:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 801c994:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0801c998 <gamma21_0>:
	...
 801c9a4:	01010000 	mrseq	r0, (UNDEF: 1)
 801c9a8:	01010101 	tsteq	r1, r1, lsl #2
 801c9ac:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 801c9b0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801c9b4:	03030302 	movweq	r0, #13058	; 0x3302
 801c9b8:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 801c9bc:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 801c9c0:	06060505 	streq	r0, [r6], -r5, lsl #10
 801c9c4:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801c9c8:	09080808 	stmdbeq	r8, {r3, fp}
 801c9cc:	0a0a0909 	beq	829edf8 <__exidx_end+0x280ff4>
 801c9d0:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801c9d4:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801c9d8:	0f0f0e0e 	svceq	0x000f0e0e
 801c9dc:	11111010 	tstne	r1, r0, lsl r0
 801c9e0:	14131212 	ldrne	r1, [r3], #-530	; 0xfffffdee
 801c9e4:	16151514 			; <UNDEFINED> instruction: 0x16151514
 801c9e8:	18181716 	ldmdane	r8, {r1, r2, r4, r8, r9, sl, ip}
 801c9ec:	1b1a1919 	blne	86a2e58 <__exidx_end+0x685054>
 801c9f0:	1d1d1c1b 	ldcne	12, cr1, [sp, #-108]	; 0xffffff94
 801c9f4:	201f1f1e 	andscs	r1, pc, lr, lsl pc	; <UNPREDICTABLE>
 801c9f8:	23222121 			; <UNDEFINED> instruction: 0x23222121
 801c9fc:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 801ca00:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 801ca04:	2c2c2b2a 			; <UNDEFINED> instruction: 0x2c2c2b2a
 801ca08:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801ca0c:	33333231 	teqcc	r3, #268435459	; 0x10000003
 801ca10:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801ca14:	3b3a3938 	blcc	8eaaefc <__exidx_end+0xe8d0f8>
 801ca18:	3f3e3d3c 	svccc	0x003e3d3c
 801ca1c:	43424140 	movtmi	r4, #8512	; 0x2140
 801ca20:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801ca24:	4c4b4948 	mcrrmi	9, 4, r4, fp, cr8	; <UNPREDICTABLE>
 801ca28:	504f4e4d 	subpl	r4, pc, sp, asr #28
 801ca2c:	55545351 	ldrbpl	r5, [r4, #-849]	; 0xfffffcaf
 801ca30:	5a585756 	bpl	9632790 <__exidx_end+0x161498c>
 801ca34:	5f5d5c5b 	svcpl	0x005d5c5b
 801ca38:	64626160 	strbtvs	r6, [r2], #-352	; 0xfffffea0
 801ca3c:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 801ca40:	6e6d6b6a 	vnmulvs.f64	d22, d13, d26
 801ca44:	74727170 	ldrbtvc	r7, [r2], #-368	; 0xfffffe90
 801ca48:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 801ca4c:	7f7e7c7b 	svcvc	0x007e7c7b
 801ca50:	85838281 	strhi	r8, [r3, #641]	; 0x281
 801ca54:	8b898886 	blhi	627ec74 <__stack_size+0x627ac74>
 801ca58:	91908e8d 	orrsls	r8, r0, sp, lsl #29
 801ca5c:	97969493 			; <UNDEFINED> instruction: 0x97969493
 801ca60:	9e9c9b99 	vmovls.32	r9, d28[0]
 801ca64:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 801ca68:	abaaa8a6 	blge	6ac6d08 <__stack_size+0x6ac2d08>
 801ca6c:	b2b0afad 	adcslt	sl, r0, #692	; 0x2b4
 801ca70:	b9b7b6b4 	ldmiblt	r7!, {r2, r4, r5, r7, r9, sl, ip, sp, pc}
 801ca74:	c0bfbdbb 	ldrhtgt	fp, [pc], fp
 801ca78:	c8c6c4c2 	stmiagt	r6, {r1, r6, r7, sl, lr, pc}^
 801ca7c:	cfcdcbca 	svcgt	0x00cdcbca
 801ca80:	d7d5d3d1 			; <UNDEFINED> instruction: 0xd7d5d3d1
 801ca84:	dfdddbd9 	svcle	0x00dddbd9
 801ca88:	e6e4e2e1 	strbt	lr, [r4], r1, ror #5
 801ca8c:	eeeceae8 	vfms.f32	s29, s25, s17
 801ca90:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 801ca94:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0801ca98 <gamma22_0>:
	...
 801caa4:	01000000 	mrseq	r0, (UNDEF: 0)
 801caa8:	01010101 	tsteq	r1, r1, lsl #2
 801caac:	01010101 	tsteq	r1, r1, lsl #2
 801cab0:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 801cab4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801cab8:	03030303 	movweq	r0, #13059	; 0x3303
 801cabc:	04040403 	streq	r0, [r4], #-1027	; 0xfffffbfd
 801cac0:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 801cac4:	06060605 	streq	r0, [r6], -r5, lsl #12
 801cac8:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801cacc:	09080808 	stmdbeq	r8, {r3, fp}
 801cad0:	0a0a0909 	beq	829eefc <__exidx_end+0x2810f8>
 801cad4:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801cad8:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 801cadc:	0f0f0e0e 	svceq	0x000f0e0e
 801cae0:	11111010 	tstne	r1, r0, lsl r0
 801cae4:	13131212 	tstne	r3, #536870913	; 0x20000001
 801cae8:	16151414 			; <UNDEFINED> instruction: 0x16151414
 801caec:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801caf0:	1a1a1919 	bne	86a2f5c <__exidx_end+0x685158>
 801caf4:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801caf8:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801cafc:	23222121 			; <UNDEFINED> instruction: 0x23222121
 801cb00:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 801cb04:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 801cb08:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 801cb0c:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801cb10:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 801cb14:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801cb18:	3b3a3938 	blcc	8eab000 <__exidx_end+0xe8d1fc>
 801cb1c:	3f3e3d3c 	svccc	0x003e3d3c
 801cb20:	43424140 	movtmi	r4, #8512	; 0x2140
 801cb24:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801cb28:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 801cb2c:	514f4e4d 	cmppl	pc, sp, asr #28
 801cb30:	55545352 	ldrbpl	r5, [r4, #-850]	; 0xfffffcae
 801cb34:	5a595857 	bpl	9672c98 <__exidx_end+0x1654e94>
 801cb38:	5f5e5d5b 	svcpl	0x005e5d5b
 801cb3c:	64636261 	strbtvs	r6, [r3], #-609	; 0xfffffd9f
 801cb40:	6a696766 	bvs	9a768e0 <__exidx_end+0x1a58adc>
 801cb44:	6f6e6d6b 	svcvs	0x006e6d6b
 801cb48:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 801cb4c:	7b797877 	blvc	9e7ad30 <__exidx_end+0x1e5cf2c>
 801cb50:	817f7e7c 	cmnhi	pc, ip, ror lr	; <UNPREDICTABLE>
 801cb54:	87858482 	strhi	r8, [r5, r2, lsl #9]
 801cb58:	8d8c8a89 	vstrhi	s16, [ip, #548]	; 0x224
 801cb5c:	9492918f 	ldrls	r9, [r2], #399	; 0x18f
 801cb60:	9a999795 	bls	66829bc <__stack_size+0x667e9bc>
 801cb64:	a19f9e9c 			; <UNDEFINED> instruction: 0xa19f9e9c
 801cb68:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 801cb6c:	afadacaa 	svcge	0x00adacaa
 801cb70:	b6b5b3b1 			; <UNDEFINED> instruction: 0xb6b5b3b1
 801cb74:	bebcbab8 			; <UNDEFINED> instruction: 0xbebcbab8
 801cb78:	c5c4c2c0 	strbgt	ip, [r4, #704]	; 0x2c0
 801cb7c:	cdcbc9c7 	vstrgt.16	s25, [fp, #398]	; 0x18e	; <UNPREDICTABLE>
 801cb80:	d5d3d1cf 	ldrble	sp, [r3, #463]	; 0x1cf
 801cb84:	dddbd9d7 	vldrle.16	s27, [fp, #430]	; 0x1ae	; <UNPREDICTABLE>
 801cb88:	e5e3e1df 	strb	lr, [r3, #479]!	; 0x1df
 801cb8c:	eeeceae7 	vfms.f32	s29, s25, s15
 801cb90:	f6f4f2f0 			; <UNDEFINED> instruction: 0xf6f4f2f0
 801cb94:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8

0801cb98 <gamma23_0>:
	...
 801cba8:	01010100 	mrseq	r0, (UNDEF: 17)
 801cbac:	01010101 	tsteq	r1, r1, lsl #2
 801cbb0:	01010101 	tsteq	r1, r1, lsl #2
 801cbb4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801cbb8:	03020202 	movweq	r0, #8706	; 0x2202
 801cbbc:	03030303 	movweq	r0, #13059	; 0x3303
 801cbc0:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 801cbc4:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 801cbc8:	06060605 	streq	r0, [r6], -r5, lsl #12
 801cbcc:	07070707 	streq	r0, [r7, -r7, lsl #14]
 801cbd0:	09080808 	stmdbeq	r8, {r3, fp}
 801cbd4:	0a0a0a09 	beq	829f400 <__exidx_end+0x2815fc>
 801cbd8:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801cbdc:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 801cbe0:	0f0f0e0e 	svceq	0x000f0e0e
 801cbe4:	11111010 	tstne	r1, r0, lsl r0
 801cbe8:	13131212 	tstne	r3, #536870913	; 0x20000001
 801cbec:	15151414 	ldrne	r1, [r5, #-1044]	; 0xfffffbec
 801cbf0:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801cbf4:	1a1a1918 	bne	86a305c <__exidx_end+0x685258>
 801cbf8:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801cbfc:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801cc00:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801cc04:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 801cc08:	29282726 	stmdbcs	r8!, {r1, r2, r5, r8, r9, sl, sp}
 801cc0c:	2c2b2a2a 			; <UNDEFINED> instruction: 0x2c2b2a2a
 801cc10:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801cc14:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 801cc18:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801cc1c:	3b3a3938 	blcc	8eab104 <__exidx_end+0xe8d300>
 801cc20:	3f3e3d3c 	svccc	0x003e3d3c
 801cc24:	43424140 	movtmi	r4, #8512	; 0x2140
 801cc28:	48474645 	stmdami	r7, {r0, r2, r6, r9, sl, lr}^
 801cc2c:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 801cc30:	51504f4e 	cmppl	r0, lr, asr #30
 801cc34:	56555452 			; <UNDEFINED> instruction: 0x56555452
 801cc38:	5b5a5957 	blpl	96b319c <__exidx_end+0x1695398>
 801cc3c:	605f5e5c 	subsvs	r5, pc, ip, asr lr	; <UNPREDICTABLE>
 801cc40:	66646362 	strbtvs	r6, [r4], -r2, ror #6
 801cc44:	6b6a6867 	blvs	9ab6de8 <__exidx_end+0x1a98fe4>
 801cc48:	71706e6d 	cmnvc	r0, sp, ror #28
 801cc4c:	77757472 			; <UNDEFINED> instruction: 0x77757472
 801cc50:	7d7b7a78 	vldmdbvc	fp!, {s15-s134}
 801cc54:	8382807e 	orrhi	r8, r2, #126	; 0x7e
 801cc58:	8a888685 	bhi	623e674 <__stack_size+0x623a674>
 801cc5c:	908f8d8b 	addls	r8, pc, fp, lsl #27
 801cc60:	97959492 			; <UNDEFINED> instruction: 0x97959492
 801cc64:	9e9c9a99 			; <UNDEFINED> instruction: 0x9e9c9a99
 801cc68:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 801cc6c:	acaaa9a7 			; <UNDEFINED> instruction: 0xacaaa9a7
 801cc70:	b4b2b0ae 	ldrtlt	fp, [r2], #174	; 0xae
 801cc74:	bbb9b7b6 	bllt	6e8ab54 <__stack_size+0x6e86b54>
 801cc78:	c3c1bfbd 	bicgt	fp, r1, #756	; 0x2f4
 801cc7c:	cbc9c7c5 	blgt	728eb98 <__stack_size+0x728ab98>
 801cc80:	d3d1cfcd 	bicsle	ip, r1, #820	; 0x334
 801cc84:	dcdad7d5 	ldclle	7, cr13, [sl], {213}	; 0xd5
 801cc88:	e4e2e0de 	strbt	lr, [r2], #222	; 0xde
 801cc8c:	edebe9e6 			; <UNDEFINED> instruction: 0xedebe9e6
 801cc90:	f6f4f1ef 			; <UNDEFINED> instruction: 0xf6f4f1ef
 801cc94:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801cc98 <gamma24_0>:
	...
 801cca8:	01000000 	mrseq	r0, (UNDEF: 0)
 801ccac:	01010101 	tsteq	r1, r1, lsl #2
 801ccb0:	01010101 	tsteq	r1, r1, lsl #2
 801ccb4:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 801ccb8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801ccbc:	03030202 	movweq	r0, #12802	; 0x3202
 801ccc0:	04030303 	streq	r0, [r3], #-771	; 0xfffffcfd
 801ccc4:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 801ccc8:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
 801cccc:	06060606 	streq	r0, [r6], -r6, lsl #12
 801ccd0:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 801ccd4:	09090808 	stmdbeq	r9, {r3, fp}
 801ccd8:	0a0a0a09 	beq	829f504 <__exidx_end+0x281700>
 801ccdc:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801cce0:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801cce4:	0f0f0e0e 	svceq	0x000f0e0e
 801cce8:	11111010 	tstne	r1, r0, lsl r0
 801ccec:	13131212 	tstne	r3, #536870913	; 0x20000001
 801ccf0:	16151414 			; <UNDEFINED> instruction: 0x16151414
 801ccf4:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801ccf8:	1a1a1918 	bne	86a3160 <__exidx_end+0x68535c>
 801ccfc:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801cd00:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801cd04:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801cd08:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 801cd0c:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 801cd10:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 801cd14:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801cd18:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 801cd1c:	37363535 			; <UNDEFINED> instruction: 0x37363535
 801cd20:	3b3a3938 	blcc	8eab208 <__exidx_end+0xe8d404>
 801cd24:	403f3e3c 	eorsmi	r3, pc, ip, lsr lr	; <UNPREDICTABLE>
 801cd28:	44434241 	strbmi	r4, [r3], #-577	; 0xfffffdbf
 801cd2c:	49474645 	stmdbmi	r7, {r0, r2, r6, r9, sl, lr}^
 801cd30:	4d4c4b4a 	vstrmi	d20, [ip, #-296]	; 0xfffffed8
 801cd34:	5251504e 	subspl	r5, r1, #78	; 0x4e
 801cd38:	57565553 			; <UNDEFINED> instruction: 0x57565553
 801cd3c:	5c5b5a58 	mrrcpl	10, 5, r5, fp, cr8
 801cd40:	62605f5e 	rsbvs	r5, r0, #376	; 0x178
 801cd44:	67666463 	strbvs	r6, [r6, -r3, ror #8]!
 801cd48:	6d6c6a69 	vstmdbvs	ip!, {s13-s117}
 801cd4c:	7372706f 	cmnvc	r2, #111	; 0x6f
 801cd50:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 801cd54:	7f7e7c7b 	svcvc	0x007e7c7b
 801cd58:	86848381 	strhi	r8, [r4], r1, lsl #7
 801cd5c:	8d8b8988 	vstrhi.16	s16, [fp, #272]	; 0x110	; <UNPREDICTABLE>
 801cd60:	9492908e 	ldrls	r9, [r2], #142	; 0x8e
 801cd64:	9b999795 	blls	6682bc0 <__stack_size+0x667ebc0>
 801cd68:	a2a09e9c 	adcge	r9, r0, #156, 28	; 0x9c0
 801cd6c:	a9a7a6a4 	stmibge	r7!, {r2, r5, r7, r9, sl, sp, pc}
 801cd70:	b1afadab 			; <UNDEFINED> instruction: 0xb1afadab
 801cd74:	b9b7b5b3 	ldmiblt	r7!, {r0, r1, r4, r5, r7, r8, sl, ip, sp, pc}
 801cd78:	c1bfbdbb 			; <UNDEFINED> instruction: 0xc1bfbdbb
 801cd7c:	c9c7c5c3 	stmibgt	r7, {r0, r1, r6, r7, r8, sl, lr, pc}^
 801cd80:	d2cfcdcb 	sbcle	ip, pc, #12992	; 0x32c0
 801cd84:	dad8d6d4 	ble	76528dc <__stack_size+0x764e8dc>
 801cd88:	e3e1dfdc 	mvn	sp, #220, 30	; 0x370
 801cd8c:	eceae8e5 	stcl	8, cr14, [sl], #916	; 0x394
 801cd90:	f6f3f1ef 			; <UNDEFINED> instruction: 0xf6f3f1ef
 801cd94:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801cd98 <gamma25_0>:
	...
 801cdac:	01010000 	mrseq	r0, (UNDEF: 1)
 801cdb0:	01010101 	tsteq	r1, r1, lsl #2
 801cdb4:	01010101 	tsteq	r1, r1, lsl #2
 801cdb8:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 801cdbc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801cdc0:	03030302 	movweq	r0, #13058	; 0x3302
 801cdc4:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 801cdc8:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
 801cdcc:	06050505 	streq	r0, [r5], -r5, lsl #10
 801cdd0:	07060606 	streq	r0, [r6, -r6, lsl #12]
 801cdd4:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 801cdd8:	09090808 	stmdbeq	r9, {r3, fp}
 801cddc:	0a0a0a09 	beq	829f608 <__exidx_end+0x281804>
 801cde0:	0c0c0b0b 			; <UNDEFINED> instruction: 0x0c0c0b0b
 801cde4:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801cde8:	0f0f0f0e 	svceq	0x000f0f0e
 801cdec:	11111010 	tstne	r1, r0, lsl r0
 801cdf0:	13131212 	tstne	r3, #536870913	; 0x20000001
 801cdf4:	16151414 			; <UNDEFINED> instruction: 0x16151414
 801cdf8:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801cdfc:	1a1a1919 	bne	86a3268 <__exidx_end+0x685464>
 801ce00:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801ce04:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801ce08:	23222121 			; <UNDEFINED> instruction: 0x23222121
 801ce0c:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 801ce10:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 801ce14:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 801ce18:	302f2e2e 	eorcc	r2, pc, lr, lsr #28
 801ce1c:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 801ce20:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 801ce24:	3c3b3a39 			; <UNDEFINED> instruction: 0x3c3b3a39
 801ce28:	403f3e3d 	eorsmi	r3, pc, sp, lsr lr	; <UNPREDICTABLE>
 801ce2c:	45444341 	strbmi	r4, [r4, #-833]	; 0xfffffcbf
 801ce30:	49484746 	stmdbmi	r8, {r1, r2, r6, r8, r9, sl, lr}^
 801ce34:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
 801ce38:	53525150 	cmppl	r2, #80, 2
 801ce3c:	59575655 	ldmdbpl	r7, {r0, r2, r4, r6, r9, sl, ip, lr}^
 801ce40:	5e5d5b5a 	vmovpl.s8	r5, d13[2]
 801ce44:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 801ce48:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 801ce4c:	6f6e6c6b 	svcvs	0x006e6c6b
 801ce50:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 801ce54:	7c7a7977 			; <UNDEFINED> instruction: 0x7c7a7977
 801ce58:	82817f7d 	addhi	r7, r1, #500	; 0x1f4
 801ce5c:	89878684 	stmibhi	r7, {r2, r7, r9, sl, pc}
 801ce60:	908e8d8b 	addls	r8, lr, fp, lsl #27
 801ce64:	97969492 			; <UNDEFINED> instruction: 0x97969492
 801ce68:	9f9d9b99 	svcls	0x009d9b99
 801ce6c:	a6a5a3a1 	strtge	sl, [r5], r1, lsr #7
 801ce70:	aeacaaa8 	vfmage.f32	s20, s25, s17
 801ce74:	b6b4b2b0 			; <UNDEFINED> instruction: 0xb6b4b2b0
 801ce78:	bfbdbab8 	svclt	0x00bdbab8
 801ce7c:	c7c5c3c1 	strbgt	ip, [r5, r1, asr #7]
 801ce80:	d0ceccc9 	sbcle	ip, lr, r9, asr #25
 801ce84:	d9d7d4d2 	ldmible	r7, {r1, r4, r6, r7, sl, ip, lr, pc}^
 801ce88:	e2e0dddb 	rsc	sp, r0, #14016	; 0x36c0
 801ce8c:	ebe9e7e4 	bl	7a96e24 <__stack_size+0x7a92e24>
 801ce90:	f5f3f0ee 			; <UNDEFINED> instruction: 0xf5f3f0ee
 801ce94:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801ce98 <gamma25_5>:
 801ce98:	01010100 	mrseq	r0, (UNDEF: 17)
 801ce9c:	01010101 	tsteq	r1, r1, lsl #2
 801cea0:	01010101 	tsteq	r1, r1, lsl #2
 801cea4:	01010101 	tsteq	r1, r1, lsl #2
 801cea8:	01010101 	tsteq	r1, r1, lsl #2
 801ceac:	01010101 	tsteq	r1, r1, lsl #2
 801ceb0:	01010101 	tsteq	r1, r1, lsl #2
 801ceb4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801ceb8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801cebc:	03030302 	movweq	r0, #13058	; 0x3302
 801cec0:	03030303 	movweq	r0, #13059	; 0x3303
 801cec4:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 801cec8:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 801cecc:	06060605 	streq	r0, [r6], -r5, lsl #12
 801ced0:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801ced4:	08080807 	stmdaeq	r8, {r0, r1, r2, fp}
 801ced8:	0a090909 	beq	825f304 <__exidx_end+0x241500>
 801cedc:	0b0b0a0a 	bleq	82df70c <__exidx_end+0x2c1908>
 801cee0:	0c0c0c0b 	stceq	12, cr0, [ip], {11}
 801cee4:	0e0e0d0d 	cdpeq	13, 0, cr0, cr14, cr13, {0}
 801cee8:	100f0f0f 	andne	r0, pc, pc, lsl #30
 801ceec:	12111110 	andsne	r1, r1, #16, 2
 801cef0:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 801cef4:	16161514 			; <UNDEFINED> instruction: 0x16161514
 801cef8:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 801cefc:	1b1a1a19 	blne	86a3768 <__exidx_end+0x685964>
 801cf00:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 801cf04:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 801cf08:	23232221 			; <UNDEFINED> instruction: 0x23232221
 801cf0c:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 801cf10:	2a292827 	bcs	8a66fb4 <__exidx_end+0xa491b0>
 801cf14:	2d2c2b2b 	fstmdbxcs	ip!, {d2-d22}	;@ Deprecated
 801cf18:	31302f2e 	teqcc	r0, lr, lsr #30
 801cf1c:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 801cf20:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 801cf24:	3d3c3a39 	vldmdbcc	ip!, {s6-s62}
 801cf28:	41403f3e 	cmpmi	r0, lr, lsr pc
 801cf2c:	45444342 	strbmi	r4, [r4, #-834]	; 0xfffffcbe
 801cf30:	4a494846 	bmi	926f050 <__exidx_end+0x125124c>
 801cf34:	4f4e4c4b 	svcmi	0x004e4c4b
 801cf38:	54535150 	ldrbpl	r5, [r3], #-336	; 0xfffffeb0
 801cf3c:	59585655 	ldmdbpl	r8, {r0, r2, r4, r6, r9, sl, ip, lr}^
 801cf40:	5e5d5c5a 	mrcpl	12, 2, r5, cr13, cr10, {2}
 801cf44:	64636160 	strbtvs	r6, [r3], #-352	; 0xfffffea0
 801cf48:	6a686765 	bvs	9a36ce4 <__exidx_end+0x1a18ee0>
 801cf4c:	706e6d6b 	rsbvc	r6, lr, fp, ror #26
 801cf50:	76747371 			; <UNDEFINED> instruction: 0x76747371
 801cf54:	7c7b7978 			; <UNDEFINED> instruction: 0x7c7b7978
 801cf58:	8381807e 	orrhi	r8, r1, #126	; 0x7e
 801cf5c:	8a888685 	bhi	623e978 <__stack_size+0x623a978>
 801cf60:	918f8d8b 	orrls	r8, pc, fp, lsl #27
 801cf64:	98969492 	ldmls	r6, {r1, r4, r7, sl, ip, pc}
 801cf68:	9f9d9c9a 	svcls	0x009d9c9a
 801cf6c:	a7a5a3a1 	strge	sl, [r5, r1, lsr #7]!
 801cf70:	afadaba9 	svcge	0x00adaba9
 801cf74:	b7b5b3b1 			; <UNDEFINED> instruction: 0xb7b5b3b1
 801cf78:	bfbdbbb9 	svclt	0x00bdbbb9
 801cf7c:	c8c6c3c1 	stmiagt	r6, {r0, r6, r7, r8, r9, lr, pc}^
 801cf80:	d0ceccca 	sbcle	ip, lr, sl, asr #25
 801cf84:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 801cf88:	e3e0dedc 	mvn	sp, #220, 28	; 0xdc0
 801cf8c:	eceae7e5 	stcl	7, cr14, [sl], #916	; 0x394
 801cf90:	f6f3f1ee 			; <UNDEFINED> instruction: 0xf6f3f1ee
 801cf94:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8
 801cf98:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 801cf9c:	006e776f 	rsbeq	r7, lr, pc, ror #14
 801cfa0:	65646e55 	strbvs	r6, [r4, #-3669]!	; 0xfffff1ab
 801cfa4:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 801cfa8:	 	andeq	r0, r0, #100	; 0x64

0801cfaa <CSWTCH.18>:
 801cfaa:	02020200 	andeq	r0, r2, #0, 4
 801cfae:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 801cfb2:	 	ldrbmi	r0, [r2, -r0, lsl #10]

0801cfb4 <PixelType::MAPS>:
 801cfb4:	00424752 	subeq	r4, r2, r2, asr r7
 801cfb8:	00474252 	subeq	r4, r7, r2, asr r2
 801cfbc:	00425247 	subeq	r5, r2, r7, asr #4
 801cfc0:	00524247 	subseq	r4, r2, r7, asr #4
 801cfc4:	00475242 	subeq	r5, r7, r2, asr #4
 801cfc8:	00524742 	subseq	r4, r2, r2, asr #14

0801cfcc <PixelType::TYPES>:
 801cfcc:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801cfd0:	00003130 	andeq	r3, r0, r0, lsr r1
 801cfd4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801cfd8:	00003131 	andeq	r3, r0, r1, lsr r1
 801cfdc:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801cfe0:	00003231 	andeq	r3, r0, r1, lsr r2
 801cfe4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801cfe8:	00423231 	subeq	r3, r2, r1, lsr r2
 801cfec:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801cff0:	00003331 	andeq	r3, r0, r1, lsr r3
 801cff4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801cff8:	00003531 	andeq	r3, r0, r1, lsr r5
 801cffc:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801d000:	00003231 	andeq	r3, r0, r1, lsr r2
 801d004:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801d008:	00573231 	subseq	r3, r7, r1, lsr r2
 801d00c:	31534355 	cmpcc	r3, r5, asr r3
 801d010:	00333039 	eorseq	r3, r3, r9, lsr r0
 801d014:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 801d018:	00333039 	eorseq	r3, r3, r9, lsr r0
 801d01c:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 801d020:	00003231 	andeq	r3, r0, r1, lsr r2
 801d024:	31415041 	cmpcc	r1, r1, asr #32
 801d028:	00003230 	andeq	r3, r0, r0, lsr r2
 801d02c:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801d030:	00003232 	andeq	r3, r0, r2, lsr r2
 801d034:	31383950 	teqcc	r8, r0, asr r9
 801d038:	00000033 	andeq	r0, r0, r3, lsr r0

0801d03c <s_patternName>:
 801d03c:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 801d048:	61520000 	cmpvs	r2, r0
 801d04c:	6f626e69 	svcvs	0x00626e69
 801d050:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 801d054:	00656c63 	rsbeq	r6, r5, r3, ror #24
 801d058:	61656854 	cmnvs	r5, r4, asr r8
 801d05c:	20726574 	rsbscs	r6, r2, r4, ror r5
 801d060:	73616863 	cmnvc	r1, #6488064	; 0x630000
 801d064:	6f430065 	svcvs	0x00430065
 801d068:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 801d06c:	70697720 	rsbvc	r7, r9, r0, lsr #14
 801d070:	00000065 	andeq	r0, r0, r5, rrx
 801d074:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 801d078:	0072656e 	rsbseq	r6, r2, lr, ror #10
 801d07c:	00000000 	andeq	r0, r0, r0
 801d080:	61460000 	mrsvs	r0, (UNDEF: 70)
 801d084:	00006564 	andeq	r6, r0, r4, ror #10
	...

0801d090 <pixel::s_GPIO_PINs>:
 801d090:	6374ffff 	cmnvs	r4, #1020	; 0x3fc	; <UNPREDICTABLE>
 801d094:	65625f70 	strbvs	r5, [r2, #-3952]!	; 0xfffff090
 801d098:	3a6e6967 	bcc	9bb763c <__exidx_end+0x1b99838>
 801d09c:	6f6f7420 	svcvs	0x006f7420
 801d0a0:	6e616d20 	cdpvs	13, 6, cr6, cr1, cr0, {1}
 801d0a4:	6f632079 	svcvs	0x00632079
 801d0a8:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 801d0ac:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801d0b0:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
 801d0b4:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 801d0b8:	6e69626e 	cdpvs	2, 6, cr6, cr9, cr14, {3}
 801d0bc:	41000a64 	tstmi	r0, r4, ror #20
 801d0c0:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 801d0c4:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 801d0c8:	61662070 	smcvs	25088	; 0x6200
 801d0cc:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 801d0d0:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 801d0d4:	61666564 	cmnvs	r6, r4, ror #10
 801d0d8:	20746c75 	rsbscs	r6, r4, r5, ror ip
 801d0dc:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 801d0e0:	0a796177 	beq	9e756c4 <__exidx_end+0x1e578c0>
 801d0e4:	50524100 	subspl	r4, r2, r0, lsl #2
 801d0e8:	6f6f6c20 	svcvs	0x006f6c20
 801d0ec:	2070756b 	rsbscs	r7, r0, fp, ror #10
 801d0f0:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 801d0f4:	000a6465 	andeq	r6, sl, r5, ror #8

0801d0f8 <NetworkConst::MSG_MDNS_CONFIG>:
 801d0f8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801d0fc:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801d100:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801d104:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

0801d109 <NetworkConst::MSG_NETWORK_INIT>:
 801d109:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 801d10d:	206b726f 	rsbcs	r7, fp, pc, ror #4
 801d111:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 801d115:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 801d119:	302e302e 	eorcc	r3, lr, lr, lsr #32
 801d11d:	3135322e 	teqcc	r5, lr, lsr #4
 801d121:	63745f00 	cmnvs	r4, #0, 30
 801d125:	6f6c2e70 	svcvs	0x006c2e70
 801d129:	006c6163 	rsbeq	r6, ip, r3, ror #2
 801d12d:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 801d131:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 801d135:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 801d13d <NetworkConst::MSG_NETWORK_INIT+0x34>
 801d139:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 801d13d:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 801c2e1 <RDMHandler::PID_DEFINITIONS+0x115>
 801d141:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 801d145:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 801d149:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 801d14d:	20000a53 	andcs	r0, r0, r3, asr sl
 801d151:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801d155:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 801d159:	0a676e69 	beq	99f8b05 <__exidx_end+0x19dad01>
 801d15d:	614e2000 	mrsvs	r2, (UNDEF: 78)
 801d161:	3a20656d 	bcc	883671d <__exidx_end+0x818919>
 801d165:	0a732520 	beq	9ce65ed <__exidx_end+0x1cc87e9>
 801d169:	73252000 			; <UNDEFINED> instruction: 0x73252000
 801d16d:	20642520 	rsbcs	r2, r4, r0, lsr #10
 801d171:	000a7325 	andeq	r7, sl, r5, lsr #6
 801d175:	30687465 	rsbcc	r7, r8, r5, ror #8
 801d179:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 801d17d:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 801d181:	5f656369 	svcpl	0x00656369
 801d185:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 801d189:	6b726f77 	blvs	9cb8f6d <__exidx_end+0x1c9b169>
 801d18d:	4820000a 	stmdami	r0!, {r1, r3}
 801d191:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 801d195:	20656d61 	rsbcs	r6, r5, r1, ror #26
 801d199:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801d19d:	20000a73 	andcs	r0, r0, r3, ror sl
 801d1a1:	614e6649 	cmpvs	lr, r9, asr #12
 801d1a5:	2020656d 	eorcs	r6, r0, sp, ror #10
 801d1a9:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801d1ad:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801d1b1:	000a7325 	andeq	r7, sl, r5, lsr #6
 801d1b5:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 801d1b9:	20202074 	eorcs	r2, r0, r4, ror r0
 801d1bd:	3a202020 	bcc	8825245 <__exidx_end+0x807441>
 801d1c1:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801d1c5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d1c9:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d1cd:	0a64252f 	beq	9926691 <__exidx_end+0x190888d>
 801d1d1:	654e2000 	strbvs	r2, [lr, #-0]
 801d1d5:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 801d1d9:	2020206b 	eorcs	r2, r0, fp, rrx
 801d1dd:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801d1e1:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d1e5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d1e9:	20000a64 	andcs	r0, r0, r4, ror #20
 801d1ed:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 801d1f1:	20796177 	rsbscs	r6, r9, r7, ror r1
 801d1f5:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801d1f9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d1fd:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d201:	0a64252e 	beq	99266c1 <__exidx_end+0x19088bd>
 801d205:	72422000 	subvc	r2, r2, #0
 801d209:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 801d20d:	20747361 	rsbscs	r7, r4, r1, ror #6
 801d211:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801d215:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d219:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d21d:	20000a64 	andcs	r0, r0, r4, ror #20
 801d221:	2063614d 	rsbcs	r6, r3, sp, asr #2
 801d225:	20202020 	eorcs	r2, r0, r0, lsr #32
 801d229:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801d22d:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801d231:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 801d235:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 801d239:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 801d23d:	3a78322e 	bcc	9e29afd <__exidx_end+0x1e0bcf9>
 801d241:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801d245:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 801d249:	20000a78 	andcs	r0, r0, r8, ror sl
 801d24d:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 801d251:	20202020 	eorcs	r2, r0, r0, lsr #32
 801d255:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801d259:	000a6325 	andeq	r6, sl, r5, lsr #6
 801d25d:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 801d261:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 801d265:	 	rsbvc	r0, r9, r0, asr r0

0801d267 <NetworkParamsConst::IP_ADDRESS>:
 801d267:	615f7069 	cmpvs	pc, r9, rrx
 801d26b:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 801d26f:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

0801d272 <NetworkParamsConst::DEFAULT_GATEWAY>:
 801d272:	61666564 	cmnvs	r6, r4, ror #10
 801d276:	5f746c75 	svcpl	0x00746c75
 801d27a:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 801d27e:	00796177 	rsbseq	r6, r9, r7, ror r1

0801d282 <NetworkParamsConst::DHCP_RETRY_TIME>:
 801d282:	70636864 	rsbvc	r6, r3, r4, ror #16
 801d286:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 801d28a:	745f7972 	ldrbvc	r7, [pc], #-2418	; 801d292 <NetworkParamsConst::HOSTNAME>
 801d28e:	00656d69 	rsbeq	r6, r5, r9, ror #26

0801d292 <NetworkParamsConst::HOSTNAME>:
 801d292:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 801d296:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

0801d29b <NetworkParamsConst::NET_MASK>:
 801d29b:	5f74656e 	svcpl	0x0074656e
 801d29f:	6b73616d 	blvs	9cf585b <__exidx_end+0x1cd7a57>
	...

0801d2a4 <NetworkParamsConst::USE_DHCP>:
 801d2a4:	5f657375 	svcpl	0x00657375
 801d2a8:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

0801d2ad <NetworkParamsConst::FILE_NAME>:
 801d2ad:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 801d2b1:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 801d2b5:	00747874 	rsbseq	r7, r4, r4, ror r8
 801d2b9:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 801d2bd:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 801d2c1:	61747320 	cmnvs	r4, r0, lsr #6
 801d2c5:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 801d2c9:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d2cd:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d2d1:	252f6425 	strcs	r6, [pc, #-1061]!	; 801ceb4 <gamma25_5+0x1c>
 801d2d5:	63252064 			; <UNDEFINED> instruction: 0x63252064
 801d2d9:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 801d2dd:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d2e1:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d2e5:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 801d2e9:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 801d2ed:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d2f1:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d2f5:	46006425 	strmi	r6, [r0], -r5, lsr #8
 801d2f9:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 801d2fd:	20657261 	rsbcs	r7, r5, r1, ror #4
 801d301:	2a2e2556 	bcs	8ba6861 <__exidx_end+0xb88a5d>
 801d305:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 801d309:	72205043 	eorvc	r5, r0, #67	; 0x43
 801d30d:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 801d311:	00676e69 	rsbeq	r6, r7, r9, ror #28
 801d315:	50434844 	subpl	r4, r3, r4, asr #16
 801d319:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 801d31d:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 801d321:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 801d325:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 801d329:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 801d32d:	6f647475 	svcvs	0x00647475
 801d331:	 	stmdagt	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}

0801d334 <pArray>:
 801d334:	0801d3c8 	stmdaeq	r1, {r3, r6, r7, r8, r9, ip, lr, pc}
 801d338:	0801d384 	stmdaeq	r1, {r2, r7, r8, r9, ip, lr, pc}
 801d33c:	0801d267 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, ip, lr, pc}
 801d340:	0801d3ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, ip, lr, pc}
 801d344:	0801d973 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, fp, ip, lr, pc}
 801d348:	0801d38f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, r9, ip, lr, pc}
 801d34c:	0801bdd3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, sl, fp, ip, sp, pc}
 801d350:	0801d292 	stmdaeq	r1, {r1, r4, r7, r9, ip, lr, pc}
 801d354:	0801d77a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, r9, sl, ip, lr, pc}
 801d358:	0801d78a 	stmdaeq	r1, {r1, r3, r7, r8, r9, sl, ip, lr, pc}
 801d35c:	0801d79a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, sl, ip, lr, pc}
 801d360:	0801d7aa 	stmdaeq	r1, {r1, r3, r5, r7, r8, r9, sl, ip, lr, pc}
 801d364:	0801d29b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r9, ip, lr, pc}
 801d368:	0801d942 	stmdaeq	r1, {r1, r6, r8, fp, ip, lr, pc}
 801d36c:	0801be26 	stmdaeq	r1, {r1, r2, r5, r9, sl, fp, ip, sp, pc}
 801d370:	0801be3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r9, sl, fp, ip, sp, pc}
 801d374:	0801be56 	stmdaeq	r1, {r1, r2, r4, r6, r9, sl, fp, ip, sp, pc}
 801d378:	0801be6e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r9, sl, fp, ip, sp, pc}
 801d37c:	0801d272 	stmdaeq	r1, {r1, r4, r5, r6, r9, ip, lr, pc}
 801d380:	0801d39c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, ip, lr, pc}

0801d384 <DisplayUdfParamsConst::BOARD_NAME>:
 801d384:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 801d388:	616e5f64 	cmnvs	lr, r4, ror #30
 801d38c:	 	tstvs	r0, sp, ror #10

0801d38f <DisplayUdfParamsConst::ACTIVE_PORTS>:
 801d38f:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801d393:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 801d397:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

0801d39c <DisplayUdfParamsConst::DMX_DIRECTION>:
 801d39c:	5f786d64 	svcpl	0x00786d64
 801d3a0:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801d3a4:	6f697463 	svcvs	0x00697463
 801d3a8:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

0801d3aa <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 801d3aa:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 801d3ae:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801d3b2:	756f656d 	strbvc	r6, [pc, #-1389]!	; 801ce4d <gamma25_0+0xb5>
 801d3b6:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

0801d3b8 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 801d3b8:	70696c66 	rsbvc	r6, r9, r6, ror #24
 801d3bc:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 801d3c0:	61636974 	smcvs	13972	; 0x3694
 801d3c4:	00796c6c 	rsbseq	r6, r9, ip, ror #24

0801d3c8 <DisplayUdfParamsConst::TITLE>:
 801d3c8:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 801d3cc:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

0801d3ce <DisplayUdfParamsConst::VERSION>:
 801d3ce:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801d3d2:	006e6f69 	rsbeq	r6, lr, r9, ror #30

0801d3d6 <DisplayUdfParamsConst::FILE_NAME>:
 801d3d6:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801d3da:	2e79616c 	rpwcsez	f6, f1, #4.0
 801d3de:	00747874 	rsbseq	r7, r4, r4, ror r8

0801d3e2 <DisplayUdfParamsConst::INTENSITY>:
 801d3e2:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 801d3e6:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 801d3ea:	20200079 	eorcs	r0, r0, r9, ror r0
 801d3ee:	4f002020 	svcmi	0x00002020
 801d3f2:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801d3f6:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 801d3fa:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 801d3fe:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801d402:	4f007325 	svcmi	0x00007325
 801d406:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801d40a:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 801d40e:	3a64253a 	bcc	99268fe <__exidx_end+0x1908afa>
 801d412:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 801d416:	73252073 			; <UNDEFINED> instruction: 0x73252073
 801d41a:	3a632500 	bcc	98e6822 <__exidx_end+0x18c8a1e>
 801d41e:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801d422:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d426:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d42a:	3a504100 	bcc	942d832 <__exidx_end+0x140fa2e>
 801d42e:	00642520 	rsbeq	r2, r4, r0, lsr #10
 801d432:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 801d436:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 801d43a:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 801d43e:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

0801d444 <s_aStorSize>:
 801d444:	00000060 	andeq	r0, r0, r0, rrx
 801d448:	00000090 	muleq	r0, r0, r0
 801d44c:	00000020 	andeq	r0, r0, r0, lsr #32
 801d450:	00000040 	andeq	r0, r0, r0, asr #32
 801d454:	00000060 	andeq	r0, r0, r0, rrx
 801d458:	00000040 	andeq	r0, r0, r0, asr #32
 801d45c:	00000020 	andeq	r0, r0, r0, lsr #32
 801d460:	00000020 	andeq	r0, r0, r0, lsr #32
 801d464:	000001e0 	andeq	r0, r0, r0, ror #3
 801d468:	00000040 	andeq	r0, r0, r0, asr #32
 801d46c:	00000020 	andeq	r0, r0, r0, lsr #32
 801d470:	00000060 	andeq	r0, r0, r0, rrx
 801d474:	00000030 	andeq	r0, r0, r0, lsr r0
 801d478:	00000020 	andeq	r0, r0, r0, lsr #32
 801d47c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 801d480:	00000030 	andeq	r0, r0, r0, lsr r0
 801d484:	00000040 	andeq	r0, r0, r0, asr #32
 801d488:	00000020 	andeq	r0, r0, r0, lsr #32
 801d48c:	00000060 	andeq	r0, r0, r0, rrx
 801d490:	00000020 	andeq	r0, r0, r0, lsr #32
 801d494:	00000400 	andeq	r0, r0, r0, lsl #8
 801d498:	00000020 	andeq	r0, r0, r0, lsr #32
 801d49c:	00000020 	andeq	r0, r0, r0, lsr #32
 801d4a0:	00000040 	andeq	r0, r0, r0, asr #32
 801d4a4:	00000060 	andeq	r0, r0, r0, rrx
 801d4a8:	00000020 	andeq	r0, r0, r0, lsr #32
 801d4ac:	00000020 	andeq	r0, r0, r0, lsr #32
 801d4b0:	000000c0 	andeq	r0, r0, r0, asr #1

0801d4b4 <vtable for StoreDisplayUdf>:
	...
 801d4bc:	080169a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, fp, sp, lr}
 801d4c0:	080169f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, fp, sp, lr}
 801d4c4:	080169d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, fp, sp, lr}
 801d4c8:	080169ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, fp, sp, lr}

0801d4cc <vtable for StoreDmxSend>:
	...
 801d4d4:	08016a15 	stmdaeq	r1, {r0, r2, r4, r9, fp, sp, lr}
 801d4d8:	08016a61 	stmdaeq	r1, {r0, r5, r6, r9, fp, sp, lr}
 801d4dc:	08016a3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, fp, sp, lr}
 801d4e0:	08016a19 	stmdaeq	r1, {r0, r3, r4, r9, fp, sp, lr}

0801d4e4 <vtable for StoreNetwork>:
	...
 801d4ec:	08016a81 	stmdaeq	r1, {r0, r7, r9, fp, sp, lr}
 801d4f0:	08016b69 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, fp, sp, lr}
 801d4f4:	08016a89 	stmdaeq	r1, {r0, r3, r7, r9, fp, sp, lr}
 801d4f8:	08016b7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, fp, sp, lr}
 801d4fc:	08016b09 	stmdaeq	r1, {r0, r3, r8, r9, fp, sp, lr}
 801d500:	08016add 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, fp, sp, lr}
 801d504:	08016aad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r9, fp, sp, lr}
 801d508:	08016b35 	stmdaeq	r1, {r0, r2, r4, r5, r8, r9, fp, sp, lr}
 801d50c:	08009e51 	stmdaeq	r0, {r0, r4, r6, r9, sl, fp, ip, pc}
 801d510:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801d514:	00000000 	andeq	r0, r0, r0
 801d518:	08016a83 	stmdaeq	r1, {r0, r1, r7, r9, fp, sp, lr}
 801d51c:	08016b75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, fp, sp, lr}
 801d520:	08016b2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, fp, sp, lr}
 801d524:	08016b01 	stmdaeq	r1, {r0, r8, r9, fp, sp, lr}
 801d528:	08016ad5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, fp, sp, lr}
 801d52c:	08016b61 	stmdaeq	r1, {r0, r5, r6, r8, r9, fp, sp, lr}
 801d530:	08009e79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sl, fp, ip, pc}

0801d534 <vtable for StoreRemoteConfig>:
	...
 801d53c:	08016bb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, fp, sp, lr}
 801d540:	08016c01 	stmdaeq	r1, {r0, sl, fp, sp, lr}
 801d544:	08016bdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, fp, sp, lr}
 801d548:	08016bb9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, fp, sp, lr}
 801d54c:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
 801d550:	76654465 	strbtvc	r4, [r5], -r5, ror #8
 801d554:	3a656369 	bcc	9976300 <__exidx_end+0x19584fc>
 801d558:	206f4e20 	rsbcs	r4, pc, r0, lsr #28
 801d55c:	34325441 	ldrtcc	r5, [r2], #-1089	; 0xfffffbbf
 801d560:	20323343 	eorscs	r3, r2, r3, asr #6
 801d564:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 801d568:	53007832 	movwpl	r7, #2098	; 0x832
 801d56c:	65726f74 	ldrbvs	r6, [r2, #-3956]!	; 0xfffff08c
 801d570:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801d574:	203a6563 	eorscs	r6, sl, r3, ror #10
 801d578:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
 801d57c:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 801d580:	32544120 	subscc	r4, r4, #32, 2
 801d584:	32334334 	eorscc	r4, r3, #52, 6	; 0xd0000000
 801d588:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 801d58c:	6f742068 	svcvs	0x00742068
 801d590:	206c6174 	rsbcs	r6, ip, r4, ror r1
 801d594:	62207525 	eorvs	r7, r0, #155189248	; 0x9400000
 801d598:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 801d59c:	75255b20 	strvc	r5, [r5, #-2848]!	; 0xfffff4e0
 801d5a0:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 801d5a4:	0000000a 	andeq	r0, r0, sl

0801d5a8 <vtable for StoreArtNet>:
	...
 801d5b0:	08016da3 	stmdaeq	r1, {r0, r1, r5, r7, r8, sl, fp, sp, lr}
 801d5b4:	08017031 	stmdaeq	r1, {r0, r4, r5, ip, sp, lr}
 801d5b8:	08016da9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, fp, sp, lr}
 801d5bc:	08017011 	stmdaeq	r1, {r0, r4, ip, sp, lr}
 801d5c0:	08016f5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, sl, fp, sp, lr}
 801d5c4:	08016f2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, sl, fp, sp, lr}
 801d5c8:	08016f01 	stmdaeq	r1, {r0, r8, r9, sl, fp, sp, lr}
 801d5cc:	08016dcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, sl, fp, sp, lr}
 801d5d0:	08016e15 	stmdaeq	r1, {r0, r2, r4, r9, sl, fp, sp, lr}
 801d5d4:	08016e45 	stmdaeq	r1, {r0, r2, r6, r9, sl, fp, sp, lr}
 801d5d8:	08016e79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr}
 801d5dc:	08016ebd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, sl, fp, sp, lr}
 801d5e0:	08016f91 	stmdaeq	r1, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
 801d5e4:	08016d9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, sl, fp, sp, lr}
 801d5e8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801d5ec:	00000000 	andeq	r0, r0, r0
 801d5f0:	08016da5 	stmdaeq	r1, {r0, r2, r5, r7, r8, sl, fp, sp, lr}
 801d5f4:	0801703d 	stmdaeq	r1, {r0, r2, r3, r4, r5, ip, sp, lr}
 801d5f8:	08016f89 	stmdaeq	r1, {r0, r3, r7, r8, r9, sl, fp, sp, lr}
 801d5fc:	08016f55 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, sl, fp, sp, lr}
 801d600:	08016f25 	stmdaeq	r1, {r0, r2, r5, r8, r9, sl, fp, sp, lr}
 801d604:	08016e0d 	stmdaeq	r1, {r0, r2, r3, r9, sl, fp, sp, lr}
 801d608:	08016e3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, sl, fp, sp, lr}
 801d60c:	08016e71 	stmdaeq	r1, {r0, r4, r5, r6, r9, sl, fp, sp, lr}
 801d610:	08016da1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, sp, lr}
 801d614:	08016eb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r9, sl, fp, sp, lr}
 801d618:	08016ef9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, sl, fp, sp, lr}
 801d61c:	08017009 	stmdaeq	r1, {r0, r3, ip, sp, lr}

0801d620 <vtable for StoreRDMDevice>:
	...
 801d628:	08017069 	stmdaeq	r1, {r0, r3, r5, r6, ip, sp, lr}
 801d62c:	080170d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, ip, sp, lr}
 801d630:	08017071 	stmdaeq	r1, {r0, r4, r5, r6, ip, sp, lr}
 801d634:	080170ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, ip, sp, lr}
 801d638:	08017095 	stmdaeq	r1, {r0, r2, r4, r7, ip, sp, lr}
 801d63c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801d640:	00000000 	andeq	r0, r0, r0
 801d644:	0801706b 	stmdaeq	r1, {r0, r1, r3, r5, r6, ip, sp, lr}
 801d648:	080170e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, ip, sp, lr}
 801d64c:	080170d1 	stmdaeq	r1, {r0, r4, r6, r7, ip, sp, lr}

0801d650 <vtable for StorePixelDmx>:
	...
 801d658:	08017129 	stmdaeq	r1, {r0, r3, r5, r8, ip, sp, lr}
 801d65c:	08017295 	stmdaeq	r1, {r0, r2, r4, r7, r9, ip, sp, lr}
 801d660:	08017131 	stmdaeq	r1, {r0, r4, r5, r8, ip, sp, lr}
 801d664:	080172a9 	stmdaeq	r1, {r0, r3, r5, r7, r9, ip, sp, lr}
 801d668:	08017261 	stmdaeq	r1, {r0, r5, r6, r9, ip, sp, lr}
 801d66c:	0801722d 	stmdaeq	r1, {r0, r2, r3, r5, r9, ip, sp, lr}
 801d670:	080171f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, ip, sp, lr}
 801d674:	080171bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, ip, sp, lr}
 801d678:	08017189 	stmdaeq	r1, {r0, r3, r7, r8, ip, sp, lr}
 801d67c:	08017155 	stmdaeq	r1, {r0, r2, r4, r6, r8, ip, sp, lr}
 801d680:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801d684:	00000000 	andeq	r0, r0, r0
 801d688:	0801712b 	stmdaeq	r1, {r0, r1, r3, r5, r8, ip, sp, lr}
 801d68c:	080172a1 	stmdaeq	r1, {r0, r5, r7, r9, ip, sp, lr}
 801d690:	0801728d 	stmdaeq	r1, {r0, r2, r3, r7, r9, ip, sp, lr}
 801d694:	08017259 	stmdaeq	r1, {r0, r3, r4, r6, r9, ip, sp, lr}
 801d698:	08017225 	stmdaeq	r1, {r0, r2, r5, r9, ip, sp, lr}
 801d69c:	080171ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, ip, sp, lr}
 801d6a0:	080171b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, ip, sp, lr}
 801d6a4:	08017181 	stmdaeq	r1, {r0, r7, r8, ip, sp, lr}

0801d6a8 <DevicesParamsConst::ACTIVE_OUT>:
 801d6a8:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801d6ac:	6f5f6576 	svcvs	0x005f6576
 801d6b0:	 	smlsdxvs	r0, r5, r4, r7

0801d6b3 <DevicesParamsConst::GAMMA_VALUE>:
 801d6b3:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 801d6b7:	61765f61 	cmnvs	r6, r1, ror #30
 801d6bb:	0065756c 	rsbeq	r7, r5, ip, ror #10

0801d6bf <DevicesParamsConst::SPI_SPEED_HZ>:
 801d6bf:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 801d6c3:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 801d6c7:	5f646565 	svcpl	0x00646565
 801d6cb:	 	strvc	r7, [r0], #-2664	; 0xfffff598

0801d6ce <DevicesParamsConst::TEST_PATTERN>:
 801d6ce:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 801d6d2:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 801d6d6:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

0801d6db <DevicesParamsConst::GROUPING_COUNT>:
 801d6db:	5f64656c 	svcpl	0x0064656c
 801d6df:	756f7267 	strbvc	r7, [pc, #-615]!	; 801d480 <s_aStorSize+0x3c>
 801d6e3:	6f635f70 	svcvs	0x00635f70
 801d6e7:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801d6eb <DevicesParamsConst::GAMMA_CORRECTION>:
 801d6eb:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 801d6ef:	6f635f61 	svcvs	0x00635f61
 801d6f3:	63657272 	cmnvs	r5, #536870919	; 0x20000007
 801d6f7:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	...

0801d6fc <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 801d6fc:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 801d700:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 801d704:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801d708:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 801d70c:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

0801d70e <DevicesParamsConst::MAP>:
 801d70e:	5f64656c 	svcpl	0x0064656c
 801d712:	5f626772 	svcpl	0x00626772
 801d716:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 801d71a:	00676e69 	rsbeq	r6, r7, r9, ror #28

0801d71e <DevicesParamsConst::TYPE>:
 801d71e:	5f64656c 	svcpl	0x0064656c
 801d722:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

0801d727 <DevicesParamsConst::COUNT>:
 801d727:	5f64656c 	svcpl	0x0064656c
 801d72b:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801d72f:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

0801d731 <DevicesParamsConst::LED_T0H>:
 801d731:	5f64656c 	svcpl	0x0064656c
 801d735:	00683074 	rsbeq	r3, r8, r4, ror r0

0801d739 <DevicesParamsConst::LED_T1H>:
 801d739:	5f64656c 	svcpl	0x0064656c
 801d73d:	00683174 	rsbeq	r3, r8, r4, ror r1

0801d741 <DevicesParamsConst::FILE_NAME>:
 801d741:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801d745:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801d749:	00747874 	rsbseq	r7, r4, r4, ror r8
 801d74d:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801d751:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 801d755:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d759:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d75d:	002c2264 	eoreq	r2, ip, r4, ror #4
 801d761:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 801d765:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d769:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d76d:	0a64252e 	beq	9926c2d <__exidx_end+0x1908e29>
 801d771:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 801d775:	0a232073 	beq	88e5949 <__exidx_end+0x8c7b45>
	...

0801d77a <LightSetParamsConst::UNIVERSE_PORT>:
 801d77a:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801d77e:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801d782:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801d786:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801d78a:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801d78e:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801d792:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801d796:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801d79a:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801d79e:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801d7a2:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801d7a6:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801d7aa:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801d7ae:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801d7b2:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801d7b6:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801d7ba <LightSetParamsConst::START_UNI_PORT>:
 801d7ba:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d7be:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d7c2:	6f705f69 	svcvs	0x00705f69
 801d7c6:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801d7ca:	00000000 	andeq	r0, r0, r0
 801d7ce:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d7d2:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d7d6:	6f705f69 	svcvs	0x00705f69
 801d7da:	325f7472 	subscc	r7, pc, #1912602624	; 0x72000000
 801d7de:	00000000 	andeq	r0, r0, r0
 801d7e2:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d7e6:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d7ea:	6f705f69 	svcvs	0x00705f69
 801d7ee:	335f7472 	cmpcc	pc, #1912602624	; 0x72000000
 801d7f2:	00000000 	andeq	r0, r0, r0
 801d7f6:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d7fa:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d7fe:	6f705f69 	svcvs	0x00705f69
 801d802:	345f7472 	ldrbcc	r7, [pc], #-1138	; 801d80a <LightSetParamsConst::START_UNI_PORT+0x50>
 801d806:	00000000 	andeq	r0, r0, r0
 801d80a:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d80e:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d812:	6f705f69 	svcvs	0x00705f69
 801d816:	355f7472 	ldrbcc	r7, [pc, #-1138]	; 801d3ac <DisplayUdfParamsConst::SLEEP_TIMEOUT+0x2>
 801d81a:	00000000 	andeq	r0, r0, r0
 801d81e:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d822:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d826:	6f705f69 	svcvs	0x00705f69
 801d82a:	365f7472 			; <UNDEFINED> instruction: 0x365f7472
 801d82e:	00000000 	andeq	r0, r0, r0
 801d832:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d836:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d83a:	6f705f69 	svcvs	0x00705f69
 801d83e:	375f7472 			; <UNDEFINED> instruction: 0x375f7472
 801d842:	00000000 	andeq	r0, r0, r0
 801d846:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d84a:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d84e:	6f705f69 	svcvs	0x00705f69
 801d852:	385f7472 	ldmdacc	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 801d856:	00000000 	andeq	r0, r0, r0
 801d85a:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d85e:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d862:	6f705f69 	svcvs	0x00705f69
 801d866:	395f7472 	ldmdbcc	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 801d86a:	00000000 	andeq	r0, r0, r0
 801d86e:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d872:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d876:	6f705f69 	svcvs	0x00705f69
 801d87a:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801d87e:	00000030 	andeq	r0, r0, r0, lsr r0
 801d882:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d886:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d88a:	6f705f69 	svcvs	0x00705f69
 801d88e:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801d892:	00000031 	andeq	r0, r0, r1, lsr r0
 801d896:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d89a:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d89e:	6f705f69 	svcvs	0x00705f69
 801d8a2:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801d8a6:	00000032 	andeq	r0, r0, r2, lsr r0
 801d8aa:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d8ae:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d8b2:	6f705f69 	svcvs	0x00705f69
 801d8b6:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801d8ba:	00000033 	andeq	r0, r0, r3, lsr r0
 801d8be:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d8c2:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d8c6:	6f705f69 	svcvs	0x00705f69
 801d8ca:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801d8ce:	00000034 	andeq	r0, r0, r4, lsr r0
 801d8d2:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d8d6:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d8da:	6f705f69 	svcvs	0x00705f69
 801d8de:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801d8e2:	00000035 	andeq	r0, r0, r5, lsr r0
 801d8e6:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d8ea:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801d8ee:	6f705f69 	svcvs	0x00705f69
 801d8f2:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801d8f6:	00000036 	andeq	r0, r0, r6, lsr r0

0801d8fa <LightSetParamsConst::MERGE_MODE_PORT>:
 801d8fa:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801d8fe:	6f6d5f65 	svcvs	0x006d5f65
 801d902:	705f6564 	subsvc	r6, pc, r4, ror #10
 801d906:	5f74726f 	svcpl	0x0074726f
 801d90a:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 801d90e:	5f656772 	svcpl	0x00656772
 801d912:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 801d916:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801d91a:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801d91e:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801d922:	6f6d5f65 	svcvs	0x006d5f65
 801d926:	705f6564 	subsvc	r6, pc, r4, ror #10
 801d92a:	5f74726f 	svcpl	0x0074726f
 801d92e:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 801d932:	5f656772 	svcpl	0x00656772
 801d936:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 801d93a:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801d93e:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801d942 <LightSetParamsConst::DMX_START_ADDRESS>:
 801d942:	5f786d64 	svcpl	0x00786d64
 801d946:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801d94a:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 801d94e:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 801d952:	 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^

0801d954 <LightSetParamsConst::DISABLE_MERGE_TIMEOUT>:
 801d954:	61736964 	cmnvs	r3, r4, ror #18
 801d958:	5f656c62 	svcpl	0x00656c62
 801d95c:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801d960:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 801d964:	756f656d 	strbvc	r6, [pc, #-1389]!	; 801d3ff <DisplayUdfParamsConst::INTENSITY+0x1d>
 801d968:	 	smcvs	24580	; 0x6004

0801d96a <LightSetParamsConst::FAILSAFE>:
 801d96a:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 801d96e:	65666173 	strbvs	r6, [r6, #-371]!	; 0xfffffe8d
	...

0801d973 <LightSetParamsConst::UNIVERSE>:
 801d973:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801d977:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

0801d97c <LightSetParamsConst::DIRECTION>:
 801d97c:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801d980:	6f697463 	svcvs	0x00697463
 801d984:	6f705f6e 	svcvs	0x00705f6e
 801d988:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 801d98c:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 801d990:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801d994:	5f6e6f69 	svcpl	0x006e6f69
 801d998:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801d99c:	0000625f 	andeq	r6, r0, pc, asr r2
 801d9a0:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801d9a4:	6f697463 	svcvs	0x00697463
 801d9a8:	6f705f6e 	svcvs	0x00705f6e
 801d9ac:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 801d9b0:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 801d9b4:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801d9b8:	5f6e6f69 	svcpl	0x006e6f69
 801d9bc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801d9c0:	0000645f 	andeq	r6, r0, pc, asr r4
 801d9c4:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 801d9c8:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 801d9cc:	66207961 	strtvs	r7, [r0], -r1, ror #18
 801d9d0:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 801d9d4:	31485300 	mrscc	r5, (UNDEF: 120)
 801d9d8:	00363031 	eorseq	r3, r6, r1, lsr r0
 801d9dc:	31445353 	cmpcc	r4, r3, asr r3
 801d9e0:	00363033 	eorseq	r3, r6, r3, lsr r0
 801d9e4:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801d9e8:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 801d9ec:	000a2964 	andeq	r2, sl, r4, ror #18
 801d9f0:	aaeeaa40 	bge	7bc82f8 <__stack_size+0x7bc42f8>
 801d9f4:	000000ee 	andeq	r0, r0, lr, ror #1

0801d9f8 <_OledFont8x6>:
 801d9f8:	00000040 	andeq	r0, r0, r0, asr #32
 801d9fc:	40000000 	andmi	r0, r0, r0
 801da00:	005f0000 	subseq	r0, pc, r0
 801da04:	00400000 	subeq	r0, r0, r0
 801da08:	00070007 	andeq	r0, r7, r7
 801da0c:	7f144000 	svcvc	0x00144000
 801da10:	00147f14 	andseq	r7, r4, r4, lsl pc
 801da14:	7f2a2440 	svcvc	0x002a2440
 801da18:	4000122a 	andmi	r1, r0, sl, lsr #4
 801da1c:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 801da20:	36400062 	strbcc	r0, [r0], -r2, rrx
 801da24:	50205649 	eorpl	r5, r0, r9, asr #12
 801da28:	08004000 	stmdaeq	r0, {lr}
 801da2c:	00000307 	andeq	r0, r0, r7, lsl #6
 801da30:	221c0040 	andscs	r0, ip, #64	; 0x40
 801da34:	40000041 	andmi	r0, r0, r1, asr #32
 801da38:	1c224100 	stfnes	f4, [r2], #-0
 801da3c:	2a400000 	bcs	901da44 <__exidx_end+0xfffc40>
 801da40:	2a1c7f1c 	bcs	873d6b8 <__exidx_end+0x71f8b4>
 801da44:	08084000 	stmdaeq	r8, {lr}
 801da48:	0008083e 	andeq	r0, r8, lr, lsr r8
 801da4c:	70800040 	addvc	r0, r0, r0, asr #32
 801da50:	40000030 	andmi	r0, r0, r0, lsr r0
 801da54:	08080808 	stmdaeq	r8, {r3, fp}
 801da58:	00400008 	subeq	r0, r0, r8
 801da5c:	00606000 	rsbeq	r6, r0, r0
 801da60:	10204000 	eorne	r4, r0, r0
 801da64:	00020408 	andeq	r0, r2, r8, lsl #8
 801da68:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 801da6c:	40003e45 	andmi	r3, r0, r5, asr #28
 801da70:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 801da74:	72400000 	subvc	r0, r0, #0
 801da78:	46494949 	strbmi	r4, [r9], -r9, asr #18
 801da7c:	41214000 			; <UNDEFINED> instruction: 0x41214000
 801da80:	00334d49 	eorseq	r4, r3, r9, asr #26
 801da84:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 801da88:	4000107f 	andmi	r1, r0, pc, ror r0
 801da8c:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 801da90:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 801da94:	3149494a 	cmpcc	r9, sl, asr #18
 801da98:	21414000 	mrscs	r4, (UNDEF: 65)
 801da9c:	00070911 	andeq	r0, r7, r1, lsl r9
 801daa0:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 801daa4:	40003649 	andmi	r3, r0, r9, asr #12
 801daa8:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 801daac:	0040001e 	subeq	r0, r0, lr, lsl r0
 801dab0:	00001400 	andeq	r1, r0, r0, lsl #8
 801dab4:	40004000 	andmi	r4, r0, r0
 801dab8:	00000034 	andeq	r0, r0, r4, lsr r0
 801dabc:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 801dac0:	40004122 	andmi	r4, r0, r2, lsr #2
 801dac4:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 801dac8:	00400014 	subeq	r0, r0, r4, lsl r0
 801dacc:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 801dad0:	01024000 	mrseq	r4, (UNDEF: 2)
 801dad4:	00060959 	andeq	r0, r6, r9, asr r9
 801dad8:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 801dadc:	40004e59 	andmi	r4, r0, r9, asr lr
 801dae0:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 801dae4:	7f40007c 	svcvc	0x0040007c
 801dae8:	36494949 	strbcc	r4, [r9], -r9, asr #18
 801daec:	413e4000 	teqmi	lr, r0
 801daf0:	00224141 	eoreq	r4, r2, r1, asr #2
 801daf4:	41417f40 	cmpmi	r1, r0, asr #30
 801daf8:	40003e41 	andmi	r3, r0, r1, asr #28
 801dafc:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 801db00:	7f400041 	svcvc	0x00400041
 801db04:	01090909 	tsteq	r9, r9, lsl #18
 801db08:	413e4000 	teqmi	lr, r0
 801db0c:	00735141 	rsbseq	r5, r3, r1, asr #2
 801db10:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 801db14:	40007f08 	andmi	r7, r0, r8, lsl #30
 801db18:	417f4100 	cmnmi	pc, r0, lsl #2
 801db1c:	20400000 	subcs	r0, r0, r0
 801db20:	013f4140 	teqeq	pc, r0, asr #2
 801db24:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 801db28:	00412214 	subeq	r2, r1, r4, lsl r2
 801db2c:	40407f40 	submi	r7, r0, r0, asr #30
 801db30:	40004040 	andmi	r4, r0, r0, asr #32
 801db34:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 801db38:	7f40007f 	svcvc	0x0040007f
 801db3c:	7f100804 	svcvc	0x00100804
 801db40:	413e4000 	teqmi	lr, r0
 801db44:	003e4141 	eorseq	r4, lr, r1, asr #2
 801db48:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 801db4c:	40000609 	andmi	r0, r0, r9, lsl #12
 801db50:	2151413e 	cmpcs	r1, lr, lsr r1
 801db54:	7f40005e 	svcvc	0x0040005e
 801db58:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 801db5c:	49264000 	stmdbmi	r6!, {lr}
 801db60:	00324949 	eorseq	r4, r2, r9, asr #18
 801db64:	7f010340 	svcvc	0x00010340
 801db68:	40000301 	andmi	r0, r0, r1, lsl #6
 801db6c:	4040403f 	submi	r4, r0, pc, lsr r0
 801db70:	1f40003f 	svcne	0x0040003f
 801db74:	1f204020 	svcne	0x00204020
 801db78:	403f4000 	eorsmi	r4, pc, r0
 801db7c:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 801db80:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 801db84:	40006314 	andmi	r6, r0, r4, lsl r3
 801db88:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 801db8c:	61400003 	cmpvs	r0, r3
 801db90:	434d4959 	movtmi	r4, #55641	; 0xd959
 801db94:	7f004000 	svcvc	0x00004000
 801db98:	00414141 	subeq	r4, r1, r1, asr #2
 801db9c:	08040240 	stmdaeq	r4, {r6, r9}
 801dba0:	40002010 	andmi	r2, r0, r0, lsl r0
 801dba4:	41414100 	mrsmi	r4, (UNDEF: 81)
 801dba8:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 801dbac:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 801dbb0:	40404000 	submi	r4, r0, r0
 801dbb4:	00404040 	subeq	r4, r0, r0, asr #32
 801dbb8:	07030040 	streq	r0, [r3, -r0, asr #32]
 801dbbc:	40000008 	andmi	r0, r0, r8
 801dbc0:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 801dbc4:	7f400040 	svcvc	0x00400040
 801dbc8:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 801dbcc:	44384000 	ldrtmi	r4, [r8], #-0
 801dbd0:	00284444 	eoreq	r4, r8, r4, asr #8
 801dbd4:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 801dbd8:	40007f28 	andmi	r7, r0, r8, lsr #30
 801dbdc:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 801dbe0:	00400018 	subeq	r0, r0, r8, lsl r0
 801dbe4:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 801dbe8:	a4184000 	ldrge	r4, [r8], #-0
 801dbec:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 801dbf0:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 801dbf4:	40007804 	andmi	r7, r0, r4, lsl #16
 801dbf8:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 801dbfc:	20400000 	subcs	r0, r0, r0
 801dc00:	003d4040 	eorseq	r4, sp, r0, asr #32
 801dc04:	107f4000 	rsbsne	r4, pc, r0
 801dc08:	00004428 	andeq	r4, r0, r8, lsr #8
 801dc0c:	7f410040 	svcvc	0x00410040
 801dc10:	40000040 	andmi	r0, r0, r0, asr #32
 801dc14:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 801dc18:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 801dc1c:	78040408 	stmdavc	r4, {r3, sl}
 801dc20:	44384000 	ldrtmi	r4, [r8], #-0
 801dc24:	00384444 	eorseq	r4, r8, r4, asr #8
 801dc28:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 801dc2c:	40001824 	andmi	r1, r0, r4, lsr #16
 801dc30:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 801dc34:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 801dc38:	08040408 	stmdaeq	r4, {r3, sl}
 801dc3c:	54484000 	strbpl	r4, [r8], #-0
 801dc40:	00245454 	eoreq	r5, r4, r4, asr r4
 801dc44:	3f040440 	svccc	0x00040440
 801dc48:	40002444 	andmi	r2, r0, r4, asr #8
 801dc4c:	2040403c 	subcs	r4, r0, ip, lsr r0
 801dc50:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 801dc54:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 801dc58:	403c4000 	eorsmi	r4, ip, r0
 801dc5c:	003c4030 	eorseq	r4, ip, r0, lsr r0
 801dc60:	10284440 	eorne	r4, r8, r0, asr #8
 801dc64:	40004428 	andmi	r4, r0, r8, lsr #8
 801dc68:	9090904c 	addsls	r9, r0, ip, asr #32
 801dc6c:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 801dc70:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 801dc74:	08004000 	stmdaeq	r0, {lr}
 801dc78:	00004136 	andeq	r4, r0, r6, lsr r1
 801dc7c:	77000040 	strvc	r0, [r0, -r0, asr #32]
 801dc80:	40000000 	andmi	r0, r0, r0
 801dc84:	08364100 	ldmdaeq	r6!, {r8, lr}
 801dc88:	02400000 	subeq	r0, r0, #0
 801dc8c:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 801dc90:	263c4000 	ldrtcs	r4, [ip], -r0
 801dc94:	003c2623 	eorseq	r2, ip, r3, lsr #12

0801dc98 <oled_128x32_init>:
 801dc98:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801dc9c:	4000d31f 	andmi	sp, r0, pc, lsl r3
 801dca0:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801dca4:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 801dca8:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 801dcac:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801dcb0 <oled_128x64_init>:
 801dcb0:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801dcb4:	4000d33f 	andmi	sp, r0, pc, lsr r3
 801dcb8:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801dcbc:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 801dcc0:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 801dcc4:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801dcc8 <vtable for Ssd1306>:
	...
 801dcd0:	080179c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, fp, ip, sp, lr}
 801dcd4:	080179f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, fp, ip, sp, lr}
 801dcd8:	08017cf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, sl, fp, ip, sp, lr}
 801dcdc:	08017c81 	stmdaeq	r1, {r0, r7, sl, fp, ip, sp, lr}
 801dce0:	08017b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, ip, sp, lr}
 801dce4:	08017a01 	stmdaeq	r1, {r0, r9, fp, ip, sp, lr}
 801dce8:	08017a2d 	stmdaeq	r1, {r0, r2, r3, r5, r9, fp, ip, sp, lr}
 801dcec:	08017b21 	stmdaeq	r1, {r0, r5, r8, r9, fp, ip, sp, lr}
 801dcf0:	08017ad9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, fp, ip, sp, lr}
 801dcf4:	080179cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, fp, ip, sp, lr}
 801dcf8:	08017b89 	stmdaeq	r1, {r0, r3, r7, r8, r9, fp, ip, sp, lr}
 801dcfc:	08017b95 	stmdaeq	r1, {r0, r2, r4, r7, r8, r9, fp, ip, sp, lr}
 801dd00:	08017baf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, r9, fp, ip, sp, lr}
 801dd04:	080179cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, fp, ip, sp, lr}
 801dd08:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 801dd0c:	5b1b006d 	blpl	86ddec8 <__exidx_end+0x6c00c4>
 801dd10:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 801dd14:	31335b1b 	teqcc	r3, fp, lsl fp
 801dd18:	5b1b006d 	blpl	86dded4 <__exidx_end+0x6c00d0>
 801dd1c:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 801dd20:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 801dd24:	5b1b006d 	blpl	86ddee0 <__exidx_end+0x6c00dc>
 801dd28:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 801dd2c:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 801dd30:	205d732a 	subscs	r7, sp, sl, lsr #6
 801dd34:	43207325 			; <UNDEFINED> instruction: 0x43207325
 801dd38:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 801dd3c:	2064656c 	rsbcs	r6, r4, ip, ror #10
 801dd40:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 801dd44:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 801dd48:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 801dd4c:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 801dd50:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801dd54:	203a636f 	eorscs	r6, sl, pc, ror #6
 801dd58:	000a7525 	andeq	r7, sl, r5, lsr #10
 801dd5c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801dd60:	203a636f 	eorscs	r6, sl, pc, ror #6
 801dd64:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 801dd68:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 801dd6c:	6b636f6c 	blvs	98f9b24 <__exidx_end+0x18dbd20>
 801dd70:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 801dd74:	000a7469 	andeq	r7, sl, r9, ror #8
 801dd78:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801dd7c:	203a636f 	eorscs	r6, sl, pc, ror #6
 801dd80:	6f6c4270 	svcvs	0x006c4270
 801dd84:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 801dd88:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 801dd8c:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 801dd90:	7a697320 	bvc	9a7aa18 <__exidx_end+0x1a5cc14>
 801dd94:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 801dd98:	6164202c 	cmnvs	r4, ip, lsr #32
 801dd9c:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 801dda0:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 801dda4:	3a656572 	bcc	9977374 <__exidx_end+0x1959570>
 801dda8:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 801ddac:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801ddb0:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 801ddb4:	203d2072 	eorscs	r2, sp, r2, ror r0
 801ddb8:	202c7025 	eorcs	r7, ip, r5, lsr #32
 801ddbc:	6f6c4270 	svcvs	0x006c4270
 801ddc0:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 801ddc4:	0a702520 	beq	9c2724c <__exidx_end+0x1c09448>
 801ddc8:	00000000 	andeq	r0, r0, r0

0801ddcc <days_of_month>:
 801ddcc:	0000001f 	andeq	r0, r0, pc, lsl r0
 801ddd0:	0000001c 	andeq	r0, r0, ip, lsl r0
 801ddd4:	0000001f 	andeq	r0, r0, pc, lsl r0
 801ddd8:	0000001e 	andeq	r0, r0, lr, lsl r0
 801dddc:	0000001f 	andeq	r0, r0, pc, lsl r0
 801dde0:	0000001e 	andeq	r0, r0, lr, lsl r0
 801dde4:	0000001f 	andeq	r0, r0, pc, lsl r0
 801dde8:	0000001f 	andeq	r0, r0, pc, lsl r0
 801ddec:	0000001e 	andeq	r0, r0, lr, lsl r0
 801ddf0:	0000001f 	andeq	r0, r0, pc, lsl r0
 801ddf4:	0000001e 	andeq	r0, r0, lr, lsl r0
 801ddf8:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0801ddfc <__exidx_start>:
 801ddfc:	7ffec754 	svcvc	0x00fec754
 801de00:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

0801de04 <.ARM.attributes>:
 801de04:	00003441 	andeq	r3, r0, r1, asr #8
 801de08:	61656100 	cmnvs	r5, r0, lsl #2
 801de0c:	01006962 	tsteq	r0, r2, ror #18
 801de10:	0000002a 	andeq	r0, r0, sl, lsr #32
 801de14:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 801de18:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 801de1c:	0600344d 	streq	r3, [r0], -sp, asr #8
 801de20:	094d070d 	stmdbeq	sp, {r0, r2, r3, r8, r9, sl}^
 801de24:	12060a02 	andne	r0, r6, #8192	; 0x2000
 801de28:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
 801de2c:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
 801de30:	1b011a01 	blne	806463c <__exidx_end+0x46838>
 801de34:	22011c01 	andcs	r1, r1, #256	; 0x100
 801de38:	Address 0x000000000801de38 is out of bounds.


Disassembly of section .data:

20000000 <LLRPDevice::m_nHandleLLRP>:
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <s_nDmxTransmitPeriod>:
20000004:	000061a8 	andeq	r6, r0, r8, lsr #3

20000008 <s_nDmxTransmitMabTime>:
20000008:	0000000c 	andeq	r0, r0, ip

2000000c <s_nDmxTransmitBreakTime>:
2000000c:	0000005c 	andeq	r0, r0, ip, asr r0

20000010 <DmxConfigUdp::s_nHandle>:
20000010:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000014 <s_multicast_mac>:
20000014:	005e0001 	subseq	r0, lr, r1
20000018:	00000000 	andeq	r0, r0, r0

2000001c <MDNS::s_nHandle>:
2000001c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000020 <next_block>:
20000020:	1000a000 	andne	sl, r0, r0

20000024 <s_block_bucket>:
20000024:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000034:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000044:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000054:	00000060 	andeq	r0, r0, r0, rrx
	...
20000064:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000074:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000084:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000094:	00000180 	andeq	r0, r0, r0, lsl #3
	...
200000a4:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000b4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000c4:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000d4:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000f4 <SystemCoreClock>:
200000f4:	0bebc200 	bleq	1faf08fc <_sp+0xfae08fc>

Disassembly of section .bss:

200000f8 <outptr>:
200000f8:	00000000 	andeq	r0, r0, r0

200000fc <RemoteConfig::s_pUdpBuffer>:
200000fc:	00000000 	andeq	r0, r0, r0

20000100 <RemoteConfig::s_RemoteConfigListBin>:
	...

20000124 <RemoteConfig::s_pThis>:
20000124:	00000000 	andeq	r0, r0, r0

20000128 <HttpDaemon::m_Content>:
	...

200006c8 <guard variable for lightset::Data::Get()::instance>:
200006c8:	00000000 	andeq	r0, r0, r0

200006cc <ArtNetNode::s_pThis>:
200006cc:	00000000 	andeq	r0, r0, r0

200006d0 <s_ReceivingMask>:
200006d0:	00000000 	andeq	r0, r0, r0

200006d4 <ip>:
200006d4:	00000000 	andeq	r0, r0, r0

200006d8 <ip>:
200006d8:	00000000 	andeq	r0, r0, r0

200006dc <s_nPortsMax>:
200006dc:	00000000 	andeq	r0, r0, r0

200006e0 <E131Bridge::s_pThis>:
200006e0:	00000000 	andeq	r0, r0, r0

200006e4 <s_ReceivingMask>:
200006e4:	00000000 	andeq	r0, r0, r0

200006e8 <s_nPortsMax>:
200006e8:	00000000 	andeq	r0, r0, r0

200006ec <LLRPDevice::s_nIpAddressFrom>:
200006ec:	00000000 	andeq	r0, r0, r0

200006f0 <LLRPDevice::m_nIpAddresLLRPRequest>:
200006f0:	00000000 	andeq	r0, r0, r0

200006f4 <LLRPDevice::m_nIpAddressLLRPResponse>:
200006f4:	00000000 	andeq	r0, r0, r0

200006f8 <LLRPDevice::m_pLLRP>:
200006f8:	00000000 	andeq	r0, r0, r0

200006fc <RDMNetDevice::s_RdmCommand>:
	...

200007fd <RDMNetDevice::s_Cid>:
	...

20000810 <RDMSensors::s_pThis>:
20000810:	00000000 	andeq	r0, r0, r0

20000814 <RDMSubDevices::s_pThis>:
20000814:	00000000 	andeq	r0, r0, r0

20000818 <RDMDeviceResponder::s_pThis>:
20000818:	00000000 	andeq	r0, r0, r0

2000081c <RDMIdentify::m_bIsEnabled>:
	...

2000081d <RDMIdentify::m_nMode>:
2000081d:	 	andeq	r0, r0, r0

20000820 <RDMIdentify::s_pThis>:
20000820:	00000000 	andeq	r0, r0, r0

20000824 <DmxSend::s_nStarted>:
20000824:	00000000 	andeq	r0, r0, r0

20000828 <s_RxBuffer>:
	...

20000c48 <s_TxBuffer>:
	...

20001050 <sv_PortState>:
	...

20001058 <sv_nUartsSending>:
20001058:	00000000 	andeq	r0, r0, r0

2000105c <Dmx::s_pThis>:
2000105c:	00000000 	andeq	r0, r0, r0

20001060 <DmxConfigUdp::s_pUdpBuffer>:
20001060:	00000000 	andeq	r0, r0, r0

20001064 <PixelPatterns::m_PortConfig>:
	...

20001264 <PixelPatterns::m_nActivePorts>:
20001264:	00000000 	andeq	r0, r0, r0

20001268 <PixelPatterns::m_pScannerColours>:
20001268:	00000000 	andeq	r0, r0, r0

2000126c <PixelPatterns::m_nCount>:
2000126c:	00000000 	andeq	r0, r0, r0

20001270 <PixelPatterns::m_pOutput>:
20001270:	00000000 	andeq	r0, r0, r0

20001274 <PixelTestPattern::s_pThis>:
20001274:	00000000 	andeq	r0, r0, r0

20001278 <PixelTestPattern::s_Pattern>:
20001278:	00000000 	andeq	r0, r0, r0

2000127c <sv_isRunning>:
2000127c:	00000000 	andeq	r0, r0, r0

20001280 <WS28xxMulti::s_pThis>:
20001280:	00000000 	andeq	r0, r0, r0

20001284 <pixel::s_DmaBuffer>:
	...

20009284 <g_ip_info>:
	...

20009290 <g_mac_address>:
20009290:	00000000 	andeq	r0, r0, r0
	...

20009296 <s_is_dhcp>:
	...

20009298 <s_p>:
20009298:	00000000 	andeq	r0, r0, r0

2000929c <s_ticker>:
2000929c:	00000000 	andeq	r0, r0, r0

200092a0 <s_mac_address>:
	...

200092a8 <s_mac_address_arp_reply>:
	...

200092b0 <broadcast_mask>:
200092b0:	00000000 	andeq	r0, r0, r0

200092b4 <gw_ip>:
200092b4:	00000000 	andeq	r0, r0, r0

200092b8 <on_network_mask>:
200092b8:	00000000 	andeq	r0, r0, r0

200092bc <s_id>:
200092bc:	00000000 	andeq	r0, r0, r0

200092c0 <s_ports_allowed>:
	...

200092e0 <s_recv_queue>:
	...

2000ef80 <s_send_packet>:
	...

2000f56c <MDNS::s_nRemoteIp>:
2000f56c:	00000000 	andeq	r0, r0, r0

2000f570 <MDNS::s_nRemotePort>:
2000f570:	00000000 	andeq	r0, r0, r0

2000f574 <MDNS::s_nMulticastIp>:
2000f574:	00000000 	andeq	r0, r0, r0

2000f578 <MDNS::s_AnswerLocalIp>:
	...

2000f77c <MDNS::s_ServiceRecords>:
	...

2000f79c <MDNS::s_nBytesReceived>:
2000f79c:	00000000 	andeq	r0, r0, r0

2000f7a0 <MDNS::s_ServiceRecordsData>:
	...

2000f9a4 <MDNS::s_pName>:
2000f9a4:	00000000 	andeq	r0, r0, r0

2000f9a8 <MDNS::s_pBuffer>:
2000f9a8:	00000000 	andeq	r0, r0, r0

2000f9ac <Network::s_pThis>:
2000f9ac:	00000000 	andeq	r0, r0, r0

2000f9b0 <s_arp_announce>:
	...

2000f9dc <s_arp_reply>:
	...

2000fa08 <s_arp_request>:
	...

2000fa34 <s_dhcp_allocated_gw>:
2000fa34:	00000000 	andeq	r0, r0, r0

2000fa38 <s_dhcp_allocated_ip>:
2000fa38:	00000000 	andeq	r0, r0, r0

2000fa3c <s_dhcp_allocated_netmask>:
2000fa3c:	00000000 	andeq	r0, r0, r0

2000fa40 <s_dhcp_message>:
	...

2000fc64 <s_dhcp_server_ip>:
2000fc64:	00000000 	andeq	r0, r0, r0

2000fc68 <DisplayUdf::s_pThis>:
2000fc68:	00000000 	andeq	r0, r0, r0

2000fc6c <ConfigStore::s_nWaitMillis>:
2000fc6c:	00000000 	andeq	r0, r0, r0

2000fc70 <ConfigStore::s_nStartAddress>:
2000fc70:	00000000 	andeq	r0, r0, r0

2000fc74 <ConfigStore::s_bHaveFlashChip>:
2000fc74:	00000000 	andeq	r0, r0, r0

2000fc78 <ConfigStore::s_nSpiFlashStoreSize>:
2000fc78:	00000000 	andeq	r0, r0, r0

2000fc7c <ConfigStore::s_State>:
2000fc7c:	00000000 	andeq	r0, r0, r0

2000fc80 <ConfigStore::s_pThis>:
2000fc80:	00000000 	andeq	r0, r0, r0

2000fc84 <ConfigStore::s_bIsNew>:
2000fc84:	00000000 	andeq	r0, r0, r0

2000fc88 <StoreDisplayUdf::s_pThis>:
2000fc88:	00000000 	andeq	r0, r0, r0

2000fc8c <StoreDmxSend::s_pThis>:
2000fc8c:	00000000 	andeq	r0, r0, r0

2000fc90 <StoreNetwork::s_pThis>:
2000fc90:	00000000 	andeq	r0, r0, r0

2000fc94 <StoreRemoteConfig::s_pThis>:
2000fc94:	00000000 	andeq	r0, r0, r0

2000fc98 <StoreArtNet::s_nPortIndexOffset>:
2000fc98:	00000000 	andeq	r0, r0, r0

2000fc9c <StoreArtNet::s_pThis>:
2000fc9c:	00000000 	andeq	r0, r0, r0

2000fca0 <StoreRDMDevice::s_pThis>:
2000fca0:	00000000 	andeq	r0, r0, r0

2000fca4 <StoreE131::s_pThis>:
2000fca4:	00000000 	andeq	r0, r0, r0

2000fca8 <StorePixelDmx::s_pThis>:
2000fca8:	00000000 	andeq	r0, r0, r0

2000fcac <PropertiesConfig::s_Config>:
2000fcac:	00000000 	andeq	r0, r0, r0

2000fcb0 <Display::s_pThis>:
2000fcb0:	00000000 	andeq	r0, r0, r0

2000fcb4 <_ClearBuffer>:
	...

2000fd3c <Ssd1306::s_pThis>:
2000fd3c:	00000000 	andeq	r0, r0, r0

2000fd40 <FirmwareVersion::s_FirmwareVersion>:
	...

2000fd56 <FirmwareVersion::s_Print>:
	...

2000fd98 <FirmwareVersion::s_pThis>:
2000fd98:	00000000 	andeq	r0, r0, r0

2000fd9c <LedBlink::s_pThis>:
2000fd9c:	00000000 	andeq	r0, r0, r0

2000fda0 <Hardware::s_pThis>:
2000fda0:	00000000 	andeq	r0, r0, r0

2000fda4 <last.0>:
2000fda4:	00000000 	andeq	r0, r0, r0

2000fda8 <s_micros>:
	...

2000fdb0 <set_timer>:
2000fdb0:	00000000 	andeq	r0, r0, r0

2000fdb4 <s_nSysTickMillis>:
2000fdb4:	00000000 	andeq	r0, r0, r0

2000fdb8 <dma_current_ptp_rxdesc>:
2000fdb8:	00000000 	andeq	r0, r0, r0

2000fdbc <dma_current_ptp_txdesc>:
2000fdbc:	00000000 	andeq	r0, r0, r0

2000fdc0 <dma_current_rxdesc>:
2000fdc0:	00000000 	andeq	r0, r0, r0

2000fdc4 <dma_current_txdesc>:
2000fdc4:	00000000 	andeq	r0, r0, r0

2000fdc8 <enet_initpara>:
	...

2000fe04 <rx_buff>:
	...

20029ebc <rxdesc_tab>:
	...

2002a31c <tx_buff>:
	...

2002d2bc <txdesc_tab>:
	...

2002d33c <s_nAddress>:
2002d33c:	00000000 	andeq	r0, r0, r0

Disassembly of section .tcmsram:

10000000 <s_tcp>:
	...

100005ec <s_id>:
100005ec:	00000000 	andeq	r0, r0, r0

100005f0 <s_tcb>:
	...

10000634 <s_recv_queue>:
	...

100011a4 <s_entry_current>:
100011a4:	00000000 	andeq	r0, r0, r0

100011a8 <s_arp_records>:
	...

10001328 <s_multicast_mac>:
	...

10001330 <s_report>:
	...

10001360 <s_id>:
10001360:	00000000 	andeq	r0, r0, r0

10001364 <s_leave>:
	...

10001394 <s_groups>:
	...

100014b4 <s_joins_allowed_index>:
100014b4:	00000000 	andeq	r0, r0, r0

Disassembly of section .heap:

1000a000 <heap_low>:
	...

Disassembly of section .stack:

1000c000 <_sp-0x4000>:
	...

Disassembly of section .ramadd:

20030000 <lightset::Data::Get()::instance>:
	...

Disassembly of section .bkpsram:

40024000 <ConfigStore::s_SpiFlashData>:
	...
