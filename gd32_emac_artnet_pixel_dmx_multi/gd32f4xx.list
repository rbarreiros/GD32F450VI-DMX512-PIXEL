
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08008000 <__gVectors>:
 8008000:	10010000 	andne	r0, r1, r0
 8008004:	08008bb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, fp, pc}
 8008008:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800800c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008010:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008014:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008018:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
	...
 800802c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008030:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008034:	00000000 	andeq	r0, r0, r0
 8008038:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800803c:	080186c5 	stmdaeq	r1, {r0, r2, r6, r7, r9, sl, pc}
 8008040:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008044:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008048:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800804c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008050:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008054:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008058:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800805c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008060:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008064:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008068:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800806c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008070:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008074:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008078:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800807c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008080:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008084:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008088:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800808c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008090:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008094:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008098:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800809c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080a0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080a4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080a8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080ac:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080b0:	080114e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, ip}
 80080b4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080b8:	0801313d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, ip, sp}
 80080bc:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080c0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080c4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080c8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080cc:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080d0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080d4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080d8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080dc:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080e0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080e4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080e8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080ec:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080f0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080f4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080f8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80080fc:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008100:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008104:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008108:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800810c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008110:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008114:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008118:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800811c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008120:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008124:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008128:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800812c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008130:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008134:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008138:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800813c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008140:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008144:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008148:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800814c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008150:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008154:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008158:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800815c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008160:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008164:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008168:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800816c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008170:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008174:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008178:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800817c:	00000000 	andeq	r0, r0, r0
 8008180:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008184:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008188:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800818c:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008190:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008194:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 8008198:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 800819c:	00000000 	andeq	r0, r0, r0
 80081a0:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80081a4:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}
 80081a8:	08009045 	stmdaeq	r0, {r0, r2, r6, ip, pc}

Disassembly of section .text:

080081ac <net_init>:
 80081ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081ae:	9e08      	ldr	r6, [sp, #32]
 80081b0:	460c      	mov	r4, r1
 80081b2:	4921      	ldr	r1, [pc, #132]	; (8008238 <net_init+0x8c>)
 80081b4:	461d      	mov	r5, r3
 80081b6:	1e43      	subs	r3, r0, #1
 80081b8:	3005      	adds	r0, #5
 80081ba:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80081be:	f801 7b01 	strb.w	r7, [r1], #1
 80081c2:	4283      	cmp	r3, r0
 80081c4:	d1f9      	bne.n	80081ba <net_init+0xe>
 80081c6:	491d      	ldr	r1, [pc, #116]	; (800823c <net_init+0x90>)
 80081c8:	f104 000c 	add.w	r0, r4, #12
 80081cc:	4623      	mov	r3, r4
 80081ce:	f813 7b01 	ldrb.w	r7, [r3], #1
 80081d2:	f801 7b01 	strb.w	r7, [r1], #1
 80081d6:	4283      	cmp	r3, r0
 80081d8:	d1f9      	bne.n	80081ce <net_init+0x22>
 80081da:	4918      	ldr	r1, [pc, #96]	; (800823c <net_init+0x90>)
 80081dc:	4816      	ldr	r0, [pc, #88]	; (8008238 <net_init+0x8c>)
 80081de:	9201      	str	r2, [sp, #4]
 80081e0:	2700      	movs	r7, #0
 80081e2:	f000 f99d 	bl	8008520 <ip_init>
 80081e6:	4814      	ldr	r0, [pc, #80]	; (8008238 <net_init+0x8c>)
 80081e8:	f000 f83a 	bl	8008260 <rfc3927_init>
 80081ec:	7037      	strb	r7, [r6, #0]
 80081ee:	782b      	ldrb	r3, [r5, #0]
 80081f0:	9a01      	ldr	r2, [sp, #4]
 80081f2:	b153      	cbz	r3, 800820a <net_init+0x5e>
 80081f4:	4911      	ldr	r1, [pc, #68]	; (800823c <net_init+0x90>)
 80081f6:	4810      	ldr	r0, [pc, #64]	; (8008238 <net_init+0x8c>)
 80081f8:	f00d fb98 	bl	801592c <dhcp_client>
 80081fc:	42b8      	cmp	r0, r7
 80081fe:	da04      	bge.n	800820a <net_init+0x5e>
 8008200:	480e      	ldr	r0, [pc, #56]	; (800823c <net_init+0x90>)
 8008202:	702f      	strb	r7, [r5, #0]
 8008204:	f00b fd7a 	bl	8013cfc <rfc3927>
 8008208:	7030      	strb	r0, [r6, #0]
 800820a:	490c      	ldr	r1, [pc, #48]	; (800823c <net_init+0x90>)
 800820c:	480a      	ldr	r0, [pc, #40]	; (8008238 <net_init+0x8c>)
 800820e:	f000 f883 	bl	8008318 <arp_init>
 8008212:	480a      	ldr	r0, [pc, #40]	; (800823c <net_init+0x90>)
 8008214:	f00d fda4 	bl	8015d60 <ip_set_ip>
 8008218:	f000 f82e 	bl	8008278 <tcp_init>
 800821c:	4a07      	ldr	r2, [pc, #28]	; (800823c <net_init+0x90>)
 800821e:	1e63      	subs	r3, r4, #1
 8008220:	340b      	adds	r4, #11
 8008222:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008226:	f803 1f01 	strb.w	r1, [r3, #1]!
 800822a:	429c      	cmp	r4, r3
 800822c:	d1f9      	bne.n	8008222 <net_init+0x76>
 800822e:	782a      	ldrb	r2, [r5, #0]
 8008230:	4b03      	ldr	r3, [pc, #12]	; (8008240 <net_init+0x94>)
 8008232:	701a      	strb	r2, [r3, #0]
 8008234:	b003      	add	sp, #12
 8008236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008238:	20009298 	mulcs	r0, r8, r2
 800823c:	2000928c 	andcs	r9, r0, ip, lsl #5
 8008240:	2000929e 	mulcs	r0, lr, r2

08008244 <net_shutdown>:
 8008244:	b508      	push	{r3, lr}
 8008246:	f000 f976 	bl	8008536 <ip_shutdown>
 800824a:	4b04      	ldr	r3, [pc, #16]	; (800825c <net_shutdown+0x18>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	b11b      	cbz	r3, 8008258 <net_shutdown+0x14>
 8008250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008254:	f00d bc72 	b.w	8015b3c <dhcp_client_release>
 8008258:	bd08      	pop	{r3, pc}
 800825a:	bf00      	nop
 800825c:	2000929e 	mulcs	r0, lr, r2

08008260 <rfc3927_init>:
 8008260:	4b04      	ldr	r3, [pc, #16]	; (8008274 <rfc3927_init+0x14>)
 8008262:	1d82      	adds	r2, r0, #6
 8008264:	4290      	cmp	r0, r2
 8008266:	d100      	bne.n	800826a <rfc3927_init+0xa>
 8008268:	4770      	bx	lr
 800826a:	f810 1b01 	ldrb.w	r1, [r0], #1
 800826e:	f803 1b01 	strb.w	r1, [r3], #1
 8008272:	e7f7      	b.n	8008264 <rfc3927_init+0x4>
 8008274:	200092a8 	andcs	r9, r0, r8, lsr #5

08008278 <tcp_init>:
 8008278:	b513      	push	{r0, r1, r4, lr}
 800827a:	4c0c      	ldr	r4, [pc, #48]	; (80082ac <tcp_init+0x34>)
 800827c:	490c      	ldr	r1, [pc, #48]	; (80082b0 <tcp_init+0x38>)
 800827e:	2206      	movs	r2, #6
 8008280:	18a0      	adds	r0, r4, r2
 8008282:	f00b fd95 	bl	8013db0 <memcpy.isra.0>
 8008286:	2308      	movs	r3, #8
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <tcp_init+0x3c>)
 800828c:	2204      	movs	r2, #4
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	eb0d 0102 	add.w	r1, sp, r2
 8008296:	f104 001a 	add.w	r0, r4, #26
 800829a:	f00b fd89 	bl	8013db0 <memcpy.isra.0>
 800829e:	2345      	movs	r3, #69	; 0x45
 80082a0:	81e3      	strh	r3, [r4, #14]
 80082a2:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <tcp_init+0x40>)
 80082a4:	6163      	str	r3, [r4, #20]
 80082a6:	b002      	add	sp, #8
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	bf00      	nop
 80082ac:	10000000 	andne	r0, r0, r0
 80082b0:	20009298 	mulcs	r0, r8, r2
 80082b4:	2000928c 	andcs	r9, r0, ip, lsl #5
 80082b8:	06400040 	strbeq	r0, [r0], -r0, asr #32

080082bc <udp_init>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <udp_init+0x40>)
 80082c0:	460e      	mov	r6, r1
 80082c2:	490f      	ldr	r1, [pc, #60]	; (8008300 <udp_init+0x44>)
 80082c4:	2408      	movs	r4, #8
 80082c6:	2200      	movs	r2, #0
 80082c8:	3c01      	subs	r4, #1
 80082ca:	801a      	strh	r2, [r3, #0]
 80082cc:	805a      	strh	r2, [r3, #2]
 80082ce:	f841 2b04 	str.w	r2, [r1], #4
 80082d2:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 80082d6:	d1f7      	bne.n	80082c8 <udp_init+0xc>
 80082d8:	4d0a      	ldr	r5, [pc, #40]	; (8008304 <udp_init+0x48>)
 80082da:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <udp_init+0x4c>)
 80082dc:	2206      	movs	r2, #6
 80082de:	4601      	mov	r1, r0
 80082e0:	18a8      	adds	r0, r5, r2
 80082e2:	801c      	strh	r4, [r3, #0]
 80082e4:	f00b fefe 	bl	80140e4 <memcpy.isra.0>
 80082e8:	4b08      	ldr	r3, [pc, #32]	; (800830c <udp_init+0x50>)
 80082ea:	60eb      	str	r3, [r5, #12]
 80082ec:	4630      	mov	r0, r6
 80082ee:	4b08      	ldr	r3, [pc, #32]	; (8008310 <udp_init+0x54>)
 80082f0:	616b      	str	r3, [r5, #20]
 80082f2:	f00b ff1f 	bl	8014134 <udp_set_ip>
 80082f6:	852c      	strh	r4, [r5, #40]	; 0x28
 80082f8:	bd70      	pop	{r4, r5, r6, pc}
 80082fa:	bf00      	nop
 80082fc:	200092e8 	andcs	r9, r0, r8, ror #5
 8008300:	200092c8 	andcs	r9, r0, r8, asr #5
 8008304:	2000ef88 	andcs	lr, r0, r8, lsl #31
 8008308:	200092c4 	andcs	r9, r0, r4, asr #5
 800830c:	00450008 	subeq	r0, r5, r8
 8008310:	11400040 	cmpne	r0, r0, asr #32

08008314 <udp_shutdown>:
 8008314:	4770      	bx	lr
	...

08008318 <arp_init>:
 8008318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800831c:	460d      	mov	r5, r1
 800831e:	4604      	mov	r4, r0
 8008320:	f000 f876 	bl	8008410 <arp_cache_init>
 8008324:	2206      	movs	r2, #6
 8008326:	482f      	ldr	r0, [pc, #188]	; (80083e4 <arp_init+0xcc>)
 8008328:	682f      	ldr	r7, [r5, #0]
 800832a:	4621      	mov	r1, r4
 800832c:	f00d f980 	bl	8015630 <memcpy.isra.0>
 8008330:	4b2d      	ldr	r3, [pc, #180]	; (80083e8 <arp_init+0xd0>)
 8008332:	2507      	movs	r5, #7
 8008334:	461e      	mov	r6, r3
 8008336:	22ff      	movs	r2, #255	; 0xff
 8008338:	3d01      	subs	r5, #1
 800833a:	d146      	bne.n	80083ca <arp_init+0xb2>
 800833c:	4b2b      	ldr	r3, [pc, #172]	; (80083ec <arp_init+0xd4>)
 800833e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800840c <arp_init+0xf4>
 8008342:	482b      	ldr	r0, [pc, #172]	; (80083f0 <arp_init+0xd8>)
 8008344:	e9c6 3803 	strd	r3, r8, [r6, #12]
 8008348:	2206      	movs	r2, #6
 800834a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800834e:	4621      	mov	r1, r4
 8008350:	82b3      	strh	r3, [r6, #20]
 8008352:	f00d f96d 	bl	8015630 <memcpy.isra.0>
 8008356:	4a27      	ldr	r2, [pc, #156]	; (80083f4 <arp_init+0xdc>)
 8008358:	61f7      	str	r7, [r6, #28]
 800835a:	2307      	movs	r3, #7
 800835c:	3b01      	subs	r3, #1
 800835e:	d137      	bne.n	80083d0 <arp_init+0xb8>
 8008360:	2206      	movs	r2, #6
 8008362:	4621      	mov	r1, r4
 8008364:	4824      	ldr	r0, [pc, #144]	; (80083f8 <arp_init+0xe0>)
 8008366:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 800836a:	f00d f961 	bl	8015630 <memcpy.isra.0>
 800836e:	4a23      	ldr	r2, [pc, #140]	; (80083fc <arp_init+0xe4>)
 8008370:	2306      	movs	r3, #6
 8008372:	4615      	mov	r5, r2
 8008374:	21ff      	movs	r1, #255	; 0xff
 8008376:	3b01      	subs	r3, #1
 8008378:	d22d      	bcs.n	80083d6 <arp_init+0xbe>
 800837a:	4b1c      	ldr	r3, [pc, #112]	; (80083ec <arp_init+0xd4>)
 800837c:	4820      	ldr	r0, [pc, #128]	; (8008400 <arp_init+0xe8>)
 800837e:	e9c5 3803 	strd	r3, r8, [r5, #12]
 8008382:	2206      	movs	r2, #6
 8008384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008388:	4621      	mov	r1, r4
 800838a:	82ab      	strh	r3, [r5, #20]
 800838c:	f00d f950 	bl	8015630 <memcpy.isra.0>
 8008390:	4a1c      	ldr	r2, [pc, #112]	; (8008404 <arp_init+0xec>)
 8008392:	61ef      	str	r7, [r5, #28]
 8008394:	2307      	movs	r3, #7
 8008396:	2100      	movs	r1, #0
 8008398:	3b01      	subs	r3, #1
 800839a:	d11f      	bne.n	80083dc <arp_init+0xc4>
 800839c:	4d1a      	ldr	r5, [pc, #104]	; (8008408 <arp_init+0xf0>)
 800839e:	2206      	movs	r2, #6
 80083a0:	18a8      	adds	r0, r5, r2
 80083a2:	4621      	mov	r1, r4
 80083a4:	f00d f944 	bl	8015630 <memcpy.isra.0>
 80083a8:	4b10      	ldr	r3, [pc, #64]	; (80083ec <arp_init+0xd4>)
 80083aa:	4621      	mov	r1, r4
 80083ac:	e9c5 3803 	strd	r3, r8, [r5, #12]
 80083b0:	f105 0016 	add.w	r0, r5, #22
 80083b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083b8:	2206      	movs	r2, #6
 80083ba:	82ab      	strh	r3, [r5, #20]
 80083bc:	f00d f938 	bl	8015630 <memcpy.isra.0>
 80083c0:	61ef      	str	r7, [r5, #28]
 80083c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083c6:	f00d b93d 	b.w	8015644 <arp_announce>
 80083ca:	f803 2b01 	strb.w	r2, [r3], #1
 80083ce:	e7b3      	b.n	8008338 <arp_init+0x20>
 80083d0:	f802 5b01 	strb.w	r5, [r2], #1
 80083d4:	e7c2      	b.n	800835c <arp_init+0x44>
 80083d6:	f802 1b01 	strb.w	r1, [r2], #1
 80083da:	e7cc      	b.n	8008376 <arp_init+0x5e>
 80083dc:	f802 1b01 	strb.w	r1, [r2], #1
 80083e0:	e7da      	b.n	8008398 <arp_init+0x80>
 80083e2:	bf00      	nop
 80083e4:	2000f9be 			; <UNDEFINED> instruction: 0x2000f9be
 80083e8:	2000f9b8 			; <UNDEFINED> instruction: 0x2000f9b8
 80083ec:	01000608 	tsteq	r0, r8, lsl #12
 80083f0:	2000f9ce 	andcs	pc, r0, lr, asr #19
 80083f4:	2000f9d8 	ldrdcs	pc, [r0], -r8
 80083f8:	2000fa16 	andcs	pc, r0, r6, lsl sl	; <UNPREDICTABLE>
 80083fc:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>
 8008400:	2000fa26 	andcs	pc, r0, r6, lsr #20
 8008404:	2000fa30 	andcs	pc, r0, r0, lsr sl	; <UNPREDICTABLE>
 8008408:	2000f9e4 	andcs	pc, r0, r4, ror #19
 800840c:	04060008 	streq	r0, [r6], #-8

08008410 <arp_cache_init>:
 8008410:	4a0a      	ldr	r2, [pc, #40]	; (800843c <arp_cache_init+0x2c>)
 8008412:	2300      	movs	r3, #0
 8008414:	b510      	push	{r4, lr}
 8008416:	f822 3b08 	strh.w	r3, [r2], #8
 800841a:	4618      	mov	r0, r3
 800841c:	4611      	mov	r1, r2
 800841e:	f842 0c04 	str.w	r0, [r2, #-4]
 8008422:	1d94      	adds	r4, r2, #6
 8008424:	42a1      	cmp	r1, r4
 8008426:	d105      	bne.n	8008434 <arp_cache_init+0x24>
 8008428:	3303      	adds	r3, #3
 800842a:	2b60      	cmp	r3, #96	; 0x60
 800842c:	f102 020c 	add.w	r2, r2, #12
 8008430:	d1f4      	bne.n	800841c <arp_cache_init+0xc>
 8008432:	bd10      	pop	{r4, pc}
 8008434:	f801 0b01 	strb.w	r0, [r1], #1
 8008438:	e7f4      	b.n	8008424 <arp_cache_init+0x14>
 800843a:	bf00      	nop
 800843c:	100011a4 	andne	r1, r0, r4, lsr #3

08008440 <igmp_init>:
 8008440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008444:	2200      	movs	r2, #0
 8008446:	4b26      	ldr	r3, [pc, #152]	; (80084e0 <igmp_init+0xa0>)
 8008448:	4605      	mov	r5, r0
 800844a:	4608      	mov	r0, r1
 800844c:	4611      	mov	r1, r2
 800844e:	f103 0408 	add.w	r4, r3, #8
 8008452:	42a3      	cmp	r3, r4
 8008454:	d140      	bne.n	80084d8 <igmp_init+0x98>
 8008456:	3201      	adds	r2, #1
 8008458:	2a24      	cmp	r2, #36	; 0x24
 800845a:	d1f8      	bne.n	800844e <igmp_init+0xe>
 800845c:	4c21      	ldr	r4, [pc, #132]	; (80084e4 <igmp_init+0xa4>)
 800845e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80084f0 <igmp_init+0xb0>
 8008462:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80084f4 <igmp_init+0xb4>
 8008466:	2600      	movs	r6, #0
 8008468:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
 800846c:	8726      	strh	r6, [r4, #56]	; 0x38
 800846e:	f00d fbdb 	bl	8015c28 <igmp_set_ip>
 8008472:	2301      	movs	r3, #1
 8008474:	8023      	strh	r3, [r4, #0]
 8008476:	235e      	movs	r3, #94	; 0x5e
 8008478:	70a3      	strb	r3, [r4, #2]
 800847a:	2206      	movs	r2, #6
 800847c:	4629      	mov	r1, r5
 800847e:	f104 000e 	add.w	r0, r4, #14
 8008482:	f00d fb89 	bl	8015b98 <memcpy.isra.0>
 8008486:	f240 4394 	movw	r3, #1172	; 0x494
 800848a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800848c:	2316      	movs	r3, #22
 800848e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8008490:	4b15      	ldr	r3, [pc, #84]	; (80084e8 <igmp_init+0xa8>)
 8008492:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008498:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800849c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80084a0:	2206      	movs	r2, #6
 80084a2:	f8c4 901c 	str.w	r9, [r4, #28]
 80084a6:	f8c4 8014 	str.w	r8, [r4, #20]
 80084aa:	4629      	mov	r1, r5
 80084ac:	f104 0042 	add.w	r0, r4, #66	; 0x42
 80084b0:	8327      	strh	r7, [r4, #24]
 80084b2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80084b4:	f00d fb70 	bl	8015b98 <memcpy.isra.0>
 80084b8:	23e0      	movs	r3, #224	; 0xe0
 80084ba:	4a0c      	ldr	r2, [pc, #48]	; (80084ec <igmp_init+0xac>)
 80084bc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80084c0:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 80084c4:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
 80084c8:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
 80084cc:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
 80084d0:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
 80084d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084d8:	f803 1b01 	strb.w	r1, [r3], #1
 80084dc:	e7b9      	b.n	8008452 <igmp_init+0x12>
 80084de:	bf00      	nop
 80084e0:	10001394 	mulne	r0, r4, r3
 80084e4:	10001328 	andne	r1, r0, r8, lsr #6
 80084e8:	005e0001 	subseq	r0, lr, r1
 80084ec:	04940200 	ldreq	r0, [r4], #512	; 0x200
 80084f0:	02010040 	andeq	r0, r1, #64	; 0x40
 80084f4:	00460008 	subeq	r0, r6, r8

080084f8 <igmp_shutdown>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	2500      	movs	r5, #0
 80084fc:	4c07      	ldr	r4, [pc, #28]	; (800851c <igmp_shutdown+0x24>)
 80084fe:	462e      	mov	r6, r5
 8008500:	6820      	ldr	r0, [r4, #0]
 8008502:	b120      	cbz	r0, 800850e <igmp_shutdown+0x16>
 8008504:	f00d fbec 	bl	8015ce0 <igmp_leave>
 8008508:	6026      	str	r6, [r4, #0]
 800850a:	7166      	strb	r6, [r4, #5]
 800850c:	7126      	strb	r6, [r4, #4]
 800850e:	3501      	adds	r5, #1
 8008510:	2d24      	cmp	r5, #36	; 0x24
 8008512:	f104 0408 	add.w	r4, r4, #8
 8008516:	d1f3      	bne.n	8008500 <igmp_shutdown+0x8>
 8008518:	bd70      	pop	{r4, r5, r6, pc}
 800851a:	bf00      	nop
 800851c:	10001394 	mulne	r0, r4, r3

08008520 <ip_init>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4604      	mov	r4, r0
 8008524:	460d      	mov	r5, r1
 8008526:	f7ff fec9 	bl	80082bc <udp_init>
 800852a:	4629      	mov	r1, r5
 800852c:	4620      	mov	r0, r4
 800852e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008532:	f7ff bf85 	b.w	8008440 <igmp_init>

08008536 <ip_shutdown>:
 8008536:	b508      	push	{r3, lr}
 8008538:	f7ff ffde 	bl	80084f8 <igmp_shutdown>
 800853c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008540:	f7ff bee8 	b.w	8008314 <udp_shutdown>

08008544 <console_init>:
 8008544:	b508      	push	{r3, lr}
 8008546:	f010 f865 	bl	8018614 <uart0_init>
 800854a:	4804      	ldr	r0, [pc, #16]	; (800855c <console_init+0x18>)
 800854c:	f010 f88c 	bl	8018668 <uart0_puts>
 8008550:	4803      	ldr	r0, [pc, #12]	; (8008560 <console_init+0x1c>)
 8008552:	f010 f889 	bl	8018668 <uart0_puts>
 8008556:	2000      	movs	r0, #0
 8008558:	bd08      	pop	{r3, pc}
 800855a:	bf00      	nop
 800855c:	0801abfa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, r9, fp, sp, pc}
 8008560:	0801ef90 	stmdaeq	r1, {r4, r7, r8, r9, sl, fp, sp, lr, pc}

08008564 <net_handle>:
 8008564:	b510      	push	{r4, lr}
 8008566:	4c0c      	ldr	r4, [pc, #48]	; (8008598 <net_handle+0x34>)
 8008568:	4620      	mov	r0, r4
 800856a:	f011 fad9 	bl	8019b20 <emac_eth_recv>
 800856e:	2800      	cmp	r0, #0
 8008570:	dd07      	ble.n	8008582 <net_handle+0x1e>
 8008572:	6820      	ldr	r0, [r4, #0]
 8008574:	8983      	ldrh	r3, [r0, #12]
 8008576:	2b08      	cmp	r3, #8
 8008578:	d107      	bne.n	800858a <net_handle+0x26>
 800857a:	f000 faab 	bl	8008ad4 <ip_handle>
 800857e:	f011 fae3 	bl	8019b48 <emac_free_pkt>
 8008582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008586:	f00b bba9 	b.w	8013cdc <net_timers_run>
 800858a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800858e:	d1f6      	bne.n	800857e <net_handle+0x1a>
 8008590:	f000 fa44 	bl	8008a1c <arp_handle>
 8008594:	e7f3      	b.n	800857e <net_handle+0x1a>
 8008596:	bf00      	nop
 8008598:	200092a0 	andcs	r9, r0, r0, lsr #5

0800859c <tcp_handle>:
 800859c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80085a2:	f8b0 8010 	ldrh.w	r8, [r0, #16]
 80085a6:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 80085aa:	4cbd      	ldr	r4, [pc, #756]	; (80088a0 <tcp_handle+0x304>)
 80085ac:	ba5b      	rev16	r3, r3
 80085ae:	8443      	strh	r3, [r0, #34]	; 0x22
 80085b0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80085b2:	4605      	mov	r5, r0
 80085b4:	ba5b      	rev16	r3, r3
 80085b6:	8483      	strh	r3, [r0, #36]	; 0x24
 80085b8:	f00b fc04 	bl	8013dc4 <_bswap32>
 80085bc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80085be:	f8b4 25f0 	ldrh.w	r2, [r4, #1520]	; 0x5f0
 80085c2:	ba5b      	rev16	r3, r3
 80085c4:	862b      	strh	r3, [r5, #48]	; 0x30
 80085c6:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80085c8:	ba5b      	rev16	r3, r3
 80085ca:	86ab      	strh	r3, [r5, #52]	; 0x34
 80085cc:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d152      	bne.n	8008678 <tcp_handle+0xdc>
 80085d2:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d00f      	beq.n	80085fa <tcp_handle+0x5e>
 80085da:	2204      	movs	r2, #4
 80085dc:	f105 011a 	add.w	r1, r5, #26
 80085e0:	4668      	mov	r0, sp
 80085e2:	f00b fbe5 	bl	8013db0 <memcpy.isra.0>
 80085e6:	f8b4 25f2 	ldrh.w	r2, [r4, #1522]	; 0x5f2
 80085ea:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d143      	bne.n	8008678 <tcp_handle+0xdc>
 80085f0:	f8d4 25f4 	ldr.w	r2, [r4, #1524]	; 0x5f4
 80085f4:	9b00      	ldr	r3, [sp, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d13e      	bne.n	8008678 <tcp_handle+0xdc>
 80085fa:	2204      	movs	r2, #4
 80085fc:	eb0d 0002 	add.w	r0, sp, r2
 8008600:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8008604:	f00b fbd4 	bl	8013db0 <memcpy.isra.0>
 8008608:	2204      	movs	r2, #4
 800860a:	eb0d 0002 	add.w	r0, sp, r2
 800860e:	f105 0126 	add.w	r1, r5, #38	; 0x26
 8008612:	9e01      	ldr	r6, [sp, #4]
 8008614:	f00b fbcc 	bl	8013db0 <memcpy.isra.0>
 8008618:	f894 2630 	ldrb.w	r2, [r4, #1584]	; 0x630
 800861c:	9f01      	ldr	r7, [sp, #4]
 800861e:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 8008622:	2a01      	cmp	r2, #1
 8008624:	d01e      	beq.n	8008664 <tcp_handle+0xc8>
 8008626:	1ed3      	subs	r3, r2, #3
 8008628:	2b07      	cmp	r3, #7
 800862a:	d825      	bhi.n	8008678 <tcp_handle+0xdc>
 800862c:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8008630:	f64f 71ec 	movw	r1, #65516	; 0xffec
 8008634:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8008638:	fa98 f898 	rev16.w	r8, r8
 800863c:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
 8008640:	f8b4 1628 	ldrh.w	r1, [r4, #1576]	; 0x628
 8008644:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 8008648:	fa13 f888 	uxtah	r8, r3, r8
 800864c:	fa1f f888 	uxth.w	r8, r8
 8008650:	2900      	cmp	r1, #0
 8008652:	d14d      	bne.n	80086f0 <tcp_handle+0x154>
 8008654:	f1b8 0f00 	cmp.w	r8, #0
 8008658:	d178      	bne.n	800874c <tcp_handle+0x1b0>
 800865a:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 800865e:	42bb      	cmp	r3, r7
 8008660:	d174      	bne.n	800874c <tcp_handle+0x1b0>
 8008662:	e053      	b.n	800870c <tcp_handle+0x170>
 8008664:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8008668:	075a      	lsls	r2, r3, #29
 800866a:	d405      	bmi.n	8008678 <tcp_handle+0xdc>
 800866c:	06d8      	lsls	r0, r3, #27
 800866e:	d506      	bpl.n	800867e <tcp_handle+0xe2>
 8008670:	498c      	ldr	r1, [pc, #560]	; (80088a4 <tcp_handle+0x308>)
 8008672:	4628      	mov	r0, r5
 8008674:	f00b fc70 	bl	8013f58 <_send_reset>
 8008678:	b004      	add	sp, #16
 800867a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867e:	0799      	lsls	r1, r3, #30
 8008680:	d5fa      	bpl.n	8008678 <tcp_handle+0xdc>
 8008682:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8008686:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800868a:	f105 011a 	add.w	r1, r5, #26
 800868e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008692:	4668      	mov	r0, sp
 8008694:	2204      	movs	r2, #4
 8008696:	f8a4 35f2 	strh.w	r3, [r4, #1522]	; 0x5f2
 800869a:	f00b fb89 	bl	8013db0 <memcpy.isra.0>
 800869e:	2206      	movs	r2, #6
 80086a0:	9b00      	ldr	r3, [sp, #0]
 80086a2:	4881      	ldr	r0, [pc, #516]	; (80088a8 <tcp_handle+0x30c>)
 80086a4:	f8c4 35f4 	str.w	r3, [r4, #1524]	; 0x5f4
 80086a8:	18a9      	adds	r1, r5, r2
 80086aa:	f00b fb81 	bl	8013db0 <memcpy.isra.0>
 80086ae:	f8d4 2618 	ldr.w	r2, [r4, #1560]	; 0x618
 80086b2:	487c      	ldr	r0, [pc, #496]	; (80088a4 <tcp_handle+0x308>)
 80086b4:	f8c4 762c 	str.w	r7, [r4, #1580]	; 0x62c
 80086b8:	1c7b      	adds	r3, r7, #1
 80086ba:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80086be:	f8c4 3624 	str.w	r3, [r4, #1572]	; 0x624
 80086c2:	a901      	add	r1, sp, #4
 80086c4:	2312      	movs	r3, #18
 80086c6:	f88d 300c 	strb.w	r3, [sp, #12]
 80086ca:	f8c4 a608 	str.w	sl, [r4, #1544]	; 0x608
 80086ce:	f8c4 7610 	str.w	r7, [r4, #1552]	; 0x610
 80086d2:	f8c4 6614 	str.w	r6, [r4, #1556]	; 0x614
 80086d6:	f00b fb9b 	bl	8013e10 <_tcp_send_package>
 80086da:	f8d4 3618 	ldr.w	r3, [r4, #1560]	; 0x618
 80086de:	f8c4 3600 	str.w	r3, [r4, #1536]	; 0x600
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	f8c4 2604 	str.w	r2, [r4, #1540]	; 0x604
 80086e8:	2303      	movs	r3, #3
 80086ea:	f884 3630 	strb.w	r3, [r4, #1584]	; 0x630
 80086ee:	e7c3      	b.n	8008678 <tcp_handle+0xdc>
 80086f0:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 80086f4:	eba3 0c07 	sub.w	ip, r3, r7
 80086f8:	f1b8 0f00 	cmp.w	r8, #0
 80086fc:	d10e      	bne.n	800871c <tcp_handle+0x180>
 80086fe:	f1bc 0f00 	cmp.w	ip, #0
 8008702:	dc23      	bgt.n	800874c <tcp_handle+0x1b0>
 8008704:	1afb      	subs	r3, r7, r3
 8008706:	1a5b      	subs	r3, r3, r1
 8008708:	2b00      	cmp	r3, #0
 800870a:	da1f      	bge.n	800874c <tcp_handle+0x1b0>
 800870c:	0743      	lsls	r3, r0, #29
 800870e:	d534      	bpl.n	800877a <tcp_handle+0x1de>
 8008710:	f8b4 15f0 	ldrh.w	r1, [r4, #1520]	; 0x5f0
 8008714:	4863      	ldr	r0, [pc, #396]	; (80088a4 <tcp_handle+0x308>)
 8008716:	f00b fb31 	bl	8013d7c <_init_tcb>
 800871a:	e7ad      	b.n	8008678 <tcp_handle+0xdc>
 800871c:	f1bc 0f00 	cmp.w	ip, #0
 8008720:	dc06      	bgt.n	8008730 <tcp_handle+0x194>
 8008722:	eba7 0c03 	sub.w	ip, r7, r3
 8008726:	ebac 0c01 	sub.w	ip, ip, r1
 800872a:	f1bc 0f00 	cmp.w	ip, #0
 800872e:	dbed      	blt.n	800870c <tcp_handle+0x170>
 8008730:	eb08 0c07 	add.w	ip, r8, r7
 8008734:	f103 0e01 	add.w	lr, r3, #1
 8008738:	ebae 0e0c 	sub.w	lr, lr, ip
 800873c:	f1be 0f00 	cmp.w	lr, #0
 8008740:	dc04      	bgt.n	800874c <tcp_handle+0x1b0>
 8008742:	43db      	mvns	r3, r3
 8008744:	1a5b      	subs	r3, r3, r1
 8008746:	eb13 0f0c 	cmn.w	r3, ip
 800874a:	d4df      	bmi.n	800870c <tcp_handle+0x170>
 800874c:	0742      	lsls	r2, r0, #29
 800874e:	d506      	bpl.n	800875e <tcp_handle+0x1c2>
 8008750:	f8b4 15f0 	ldrh.w	r1, [r4, #1520]	; 0x5f0
 8008754:	4853      	ldr	r0, [pc, #332]	; (80088a4 <tcp_handle+0x308>)
 8008756:	f00b fb11 	bl	8013d7c <_init_tcb>
 800875a:	2301      	movs	r3, #1
 800875c:	e7c5      	b.n	80086ea <tcp_handle+0x14e>
 800875e:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8008762:	9301      	str	r3, [sp, #4]
 8008764:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 8008768:	9302      	str	r3, [sp, #8]
 800876a:	484e      	ldr	r0, [pc, #312]	; (80088a4 <tcp_handle+0x308>)
 800876c:	2310      	movs	r3, #16
 800876e:	a901      	add	r1, sp, #4
 8008770:	f88d 300c 	strb.w	r3, [sp, #12]
 8008774:	f00b fb4c 	bl	8013e10 <_tcp_send_package>
 8008778:	e77e      	b.n	8008678 <tcp_handle+0xdc>
 800877a:	0781      	lsls	r1, r0, #30
 800877c:	d505      	bpl.n	800878a <tcp_handle+0x1ee>
 800877e:	2a03      	cmp	r2, #3
 8008780:	d0eb      	beq.n	800875a <tcp_handle+0x1be>
 8008782:	4948      	ldr	r1, [pc, #288]	; (80088a4 <tcp_handle+0x308>)
 8008784:	4628      	mov	r0, r5
 8008786:	f00b fbe7 	bl	8013f58 <_send_reset>
 800878a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800878e:	06da      	lsls	r2, r3, #27
 8008790:	f57f af72 	bpl.w	8008678 <tcp_handle+0xdc>
 8008794:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 8008798:	3b03      	subs	r3, #3
 800879a:	2b07      	cmp	r3, #7
 800879c:	d81d      	bhi.n	80087da <tcp_handle+0x23e>
 800879e:	e8df f003 	tbb	[pc, r3]
 80087a2:	87878704 	strhi	r8, [r7, r4, lsl #14]
 80087a6:	c5ba8787 	ldrgt	r8, [sl, #1927]!	; 0x787
 80087aa:	f8d4 3600 	ldr.w	r3, [r4, #1536]	; 0x600
 80087ae:	1b9b      	subs	r3, r3, r6
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dc0e      	bgt.n	80087d2 <tcp_handle+0x236>
 80087b4:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 80087b8:	1af3      	subs	r3, r6, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	dc09      	bgt.n	80087d2 <tcp_handle+0x236>
 80087be:	f8c4 a608 	str.w	sl, [r4, #1544]	; 0x608
 80087c2:	f8c4 7610 	str.w	r7, [r4, #1552]	; 0x610
 80087c6:	f8c4 6614 	str.w	r6, [r4, #1556]	; 0x614
 80087ca:	f8c4 6600 	str.w	r6, [r4, #1536]	; 0x600
 80087ce:	2304      	movs	r3, #4
 80087d0:	e78b      	b.n	80086ea <tcp_handle+0x14e>
 80087d2:	4934      	ldr	r1, [pc, #208]	; (80088a4 <tcp_handle+0x308>)
 80087d4:	4628      	mov	r0, r5
 80087d6:	f00b fbbf 	bl	8013f58 <_send_reset>
 80087da:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 80087de:	3b04      	subs	r3, #4
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d837      	bhi.n	8008854 <tcp_handle+0x2b8>
 80087e4:	f1b8 0f00 	cmp.w	r8, #0
 80087e8:	d034      	beq.n	8008854 <tcp_handle+0x2b8>
 80087ea:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 80087ee:	42bb      	cmp	r3, r7
 80087f0:	f040 80ad 	bne.w	800894e <tcp_handle+0x3b2>
 80087f4:	f8b4 7634 	ldrh.w	r7, [r4, #1588]	; 0x634
 80087f8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80088ac <tcp_handle+0x310>
 80087fc:	f240 53b6 	movw	r3, #1462	; 0x5b6
 8008800:	435f      	muls	r7, r3
 8008802:	1d38      	adds	r0, r7, #4
 8008804:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8008808:	4642      	mov	r2, r8
 800880a:	4449      	add	r1, r9
 800880c:	4450      	add	r0, sl
 800880e:	f00b facf 	bl	8013db0 <memcpy.isra.0>
 8008812:	f8b4 2628 	ldrh.w	r2, [r4, #1576]	; 0x628
 8008816:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 800881a:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800881e:	f8a4 2628 	strh.w	r2, [r4, #1576]	; 0x628
 8008822:	4427      	add	r7, r4
 8008824:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 8008828:	f8a7 8bec 	strh.w	r8, [r7, #3052]	; 0xbec
 800882c:	4443      	add	r3, r8
 800882e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008832:	f8c4 3624 	str.w	r3, [r4, #1572]	; 0x624
 8008836:	a901      	add	r1, sp, #4
 8008838:	2310      	movs	r3, #16
 800883a:	f1aa 0044 	sub.w	r0, sl, #68	; 0x44
 800883e:	f88d 300c 	strb.w	r3, [sp, #12]
 8008842:	f00b fae5 	bl	8013e10 <_tcp_send_package>
 8008846:	f8b4 3634 	ldrh.w	r3, [r4, #1588]	; 0x634
 800884a:	3301      	adds	r3, #1
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	f8a4 3634 	strh.w	r3, [r4, #1588]	; 0x634
 8008854:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 8008858:	2b02      	cmp	r3, #2
 800885a:	f67f af0d 	bls.w	8008678 <tcp_handle+0xdc>
 800885e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8008862:	07db      	lsls	r3, r3, #31
 8008864:	f57f af08 	bpl.w	8008678 <tcp_handle+0xdc>
 8008868:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 800886c:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 8008870:	480c      	ldr	r0, [pc, #48]	; (80088a4 <tcp_handle+0x308>)
 8008872:	3301      	adds	r3, #1
 8008874:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008878:	f8c4 3624 	str.w	r3, [r4, #1572]	; 0x624
 800887c:	a901      	add	r1, sp, #4
 800887e:	2310      	movs	r3, #16
 8008880:	f88d 300c 	strb.w	r3, [sp, #12]
 8008884:	f00b fac4 	bl	8013e10 <_tcp_send_package>
 8008888:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 800888c:	2b05      	cmp	r3, #5
 800888e:	d067      	beq.n	8008960 <tcp_handle+0x3c4>
 8008890:	d861      	bhi.n	8008956 <tcp_handle+0x3ba>
 8008892:	3b03      	subs	r3, #3
 8008894:	2b01      	cmp	r3, #1
 8008896:	f63f aeef 	bhi.w	8008678 <tcp_handle+0xdc>
 800889a:	2307      	movs	r3, #7
 800889c:	e725      	b.n	80086ea <tcp_handle+0x14e>
 800889e:	bf00      	nop
 80088a0:	10000000 	andne	r0, r0, r0
 80088a4:	100005f0 	strdne	r0, [r0], -r0	; <UNPREDICTABLE>
 80088a8:	100005f8 	strdne	r0, [r0], -r8
 80088ac:	10000634 	andne	r0, r0, r4, lsr r6
 80088b0:	f8d4 3600 	ldr.w	r3, [r4, #1536]	; 0x600
 80088b4:	1b99      	subs	r1, r3, r6
 80088b6:	d51a      	bpl.n	80088ee <tcp_handle+0x352>
 80088b8:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 80088bc:	1ab2      	subs	r2, r6, r2
 80088be:	2a00      	cmp	r2, #0
 80088c0:	dc15      	bgt.n	80088ee <tcp_handle+0x352>
 80088c2:	f8c4 6600 	str.w	r6, [r4, #1536]	; 0x600
 80088c6:	f8d4 3610 	ldr.w	r3, [r4, #1552]	; 0x610
 80088ca:	1bda      	subs	r2, r3, r7
 80088cc:	2a00      	cmp	r2, #0
 80088ce:	db07      	blt.n	80088e0 <tcp_handle+0x344>
 80088d0:	42bb      	cmp	r3, r7
 80088d2:	d182      	bne.n	80087da <tcp_handle+0x23e>
 80088d4:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
 80088d8:	1b9b      	subs	r3, r3, r6
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f73f af7d 	bgt.w	80087da <tcp_handle+0x23e>
 80088e0:	f8c4 a608 	str.w	sl, [r4, #1544]	; 0x608
 80088e4:	f8c4 7610 	str.w	r7, [r4, #1552]	; 0x610
 80088e8:	f8c4 6614 	str.w	r6, [r4, #1556]	; 0x614
 80088ec:	e775      	b.n	80087da <tcp_handle+0x23e>
 80088ee:	1af3      	subs	r3, r6, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	dc09      	bgt.n	8008908 <tcp_handle+0x36c>
 80088f4:	2900      	cmp	r1, #0
 80088f6:	f73f af70 	bgt.w	80087da <tcp_handle+0x23e>
 80088fa:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 80088fe:	1af3      	subs	r3, r6, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	f73f af6a 	bgt.w	80087da <tcp_handle+0x23e>
 8008906:	e7de      	b.n	80088c6 <tcp_handle+0x32a>
 8008908:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 800890c:	1b9a      	subs	r2, r3, r6
 800890e:	2a00      	cmp	r2, #0
 8008910:	f6bf af63 	bge.w	80087da <tcp_handle+0x23e>
 8008914:	e725      	b.n	8008762 <tcp_handle+0x1c6>
 8008916:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 800891a:	42b3      	cmp	r3, r6
 800891c:	f47f af5d 	bne.w	80087da <tcp_handle+0x23e>
 8008920:	f8b4 15f0 	ldrh.w	r1, [r4, #1520]	; 0x5f0
 8008924:	4811      	ldr	r0, [pc, #68]	; (800896c <tcp_handle+0x3d0>)
 8008926:	f00b fa29 	bl	8013d7c <_init_tcb>
 800892a:	e756      	b.n	80087da <tcp_handle+0x23e>
 800892c:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8008930:	42b3      	cmp	r3, r6
 8008932:	f47f af52 	bne.w	80087da <tcp_handle+0x23e>
 8008936:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 800893a:	9302      	str	r3, [sp, #8]
 800893c:	480b      	ldr	r0, [pc, #44]	; (800896c <tcp_handle+0x3d0>)
 800893e:	9601      	str	r6, [sp, #4]
 8008940:	2310      	movs	r3, #16
 8008942:	a901      	add	r1, sp, #4
 8008944:	f88d 300c 	strb.w	r3, [sp, #12]
 8008948:	f00b fa62 	bl	8013e10 <_tcp_send_package>
 800894c:	e745      	b.n	80087da <tcp_handle+0x23e>
 800894e:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 8008952:	9201      	str	r2, [sp, #4]
 8008954:	e708      	b.n	8008768 <tcp_handle+0x1cc>
 8008956:	2b06      	cmp	r3, #6
 8008958:	f47f ae8e 	bne.w	8008678 <tcp_handle+0xdc>
 800895c:	230a      	movs	r3, #10
 800895e:	e6c4      	b.n	80086ea <tcp_handle+0x14e>
 8008960:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8008964:	42b3      	cmp	r3, r6
 8008966:	d0f9      	beq.n	800895c <tcp_handle+0x3c0>
 8008968:	2308      	movs	r3, #8
 800896a:	e6be      	b.n	80086ea <tcp_handle+0x14e>
 800896c:	100005f0 	strdne	r0, [r0], -r0	; <UNPREDICTABLE>

08008970 <udp_handle>:
 8008970:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008974:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8008976:	ba5b      	rev16	r3, r3
 8008978:	b29b      	uxth	r3, r3
 800897a:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 800897e:	2a01      	cmp	r2, #1
 8008980:	4607      	mov	r7, r0
 8008982:	d904      	bls.n	800898e <udp_handle+0x1e>
 8008984:	2b7b      	cmp	r3, #123	; 0x7b
 8008986:	d002      	beq.n	800898e <udp_handle+0x1e>
 8008988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800898c:	d308      	bcc.n	80089a0 <udp_handle+0x30>
 800898e:	4a21      	ldr	r2, [pc, #132]	; (8008a14 <udp_handle+0xa4>)
 8008990:	2400      	movs	r4, #0
 8008992:	f852 1b04 	ldr.w	r1, [r2], #4
 8008996:	4299      	cmp	r1, r3
 8008998:	d005      	beq.n	80089a6 <udp_handle+0x36>
 800899a:	3401      	adds	r4, #1
 800899c:	2c08      	cmp	r4, #8
 800899e:	d1f8      	bne.n	8008992 <udp_handle+0x22>
 80089a0:	b002      	add	sp, #8
 80089a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a6:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 80089a8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8008a18 <udp_handle+0xa8>
 80089ac:	f640 3394 	movw	r3, #2964	; 0xb94
 80089b0:	435c      	muls	r4, r3
 80089b2:	ba76      	rev16	r6, r6
 80089b4:	f838 5004 	ldrh.w	r5, [r8, r4]
 80089b8:	3e08      	subs	r6, #8
 80089ba:	b2b6      	uxth	r6, r6
 80089bc:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 80089c0:	435d      	muls	r5, r3
 80089c2:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 80089c6:	f104 0004 	add.w	r0, r4, #4
 80089ca:	bf28      	it	cs
 80089cc:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 80089d0:	4428      	add	r0, r5
 80089d2:	4632      	mov	r2, r6
 80089d4:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 80089d8:	4440      	add	r0, r8
 80089da:	f00b fb83 	bl	80140e4 <memcpy.isra.0>
 80089de:	2204      	movs	r2, #4
 80089e0:	eb0d 0002 	add.w	r0, sp, r2
 80089e4:	f107 011a 	add.w	r1, r7, #26
 80089e8:	f00b fb7c 	bl	80140e4 <memcpy.isra.0>
 80089ec:	192b      	adds	r3, r5, r4
 80089ee:	4443      	add	r3, r8
 80089f0:	9a01      	ldr	r2, [sp, #4]
 80089f2:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 80089f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80089f8:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 80089fc:	ba52      	rev16	r2, r2
 80089fe:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 8008a02:	f838 3004 	ldrh.w	r3, [r8, r4]
 8008a06:	3301      	adds	r3, #1
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	f828 3004 	strh.w	r3, [r8, r4]
 8008a10:	e7c6      	b.n	80089a0 <udp_handle+0x30>
 8008a12:	bf00      	nop
 8008a14:	200092c8 	andcs	r9, r0, r8, asr #5
 8008a18:	200092e8 	andcs	r9, r0, r8, ror #5

08008a1c <arp_handle>:
 8008a1c:	8a83      	ldrh	r3, [r0, #20]
 8008a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a22:	d003      	beq.n	8008a2c <arp_handle+0x10>
 8008a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a28:	d002      	beq.n	8008a30 <arp_handle+0x14>
 8008a2a:	4770      	bx	lr
 8008a2c:	f00c be14 	b.w	8015658 <arp_handle_request>
 8008a30:	f00c be3a 	b.w	80156a8 <arp_handle_reply>

08008a34 <igmp_handle>:
 8008a34:	7b83      	ldrb	r3, [r0, #14]
 8008a36:	2b45      	cmp	r3, #69	; 0x45
 8008a38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	d117      	bne.n	8008a6e <igmp_handle+0x3a>
 8008a3e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8008a42:	2b11      	cmp	r3, #17
 8008a44:	d113      	bne.n	8008a6e <igmp_handle+0x3a>
 8008a46:	4b21      	ldr	r3, [pc, #132]	; (8008acc <igmp_handle+0x98>)
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	f100 051d 	add.w	r5, r0, #29
 8008a4e:	466a      	mov	r2, sp
 8008a50:	f100 0621 	add.w	r6, r0, #33	; 0x21
 8008a54:	462b      	mov	r3, r5
 8008a56:	42b3      	cmp	r3, r6
 8008a58:	d10c      	bne.n	8008a74 <igmp_handle+0x40>
 8008a5a:	2401      	movs	r4, #1
 8008a5c:	4b1c      	ldr	r3, [pc, #112]	; (8008ad0 <igmp_handle+0x9c>)
 8008a5e:	2100      	movs	r1, #0
 8008a60:	f8d3 718c 	ldr.w	r7, [r3, #396]	; 0x18c
 8008a64:	f04f 0c01 	mov.w	ip, #1
 8008a68:	336c      	adds	r3, #108	; 0x6c
 8008a6a:	428f      	cmp	r7, r1
 8008a6c:	d10a      	bne.n	8008a84 <igmp_handle+0x50>
 8008a6e:	b003      	add	sp, #12
 8008a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a74:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008a78:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8008a7c:	428c      	cmp	r4, r1
 8008a7e:	d0ea      	beq.n	8008a56 <igmp_handle+0x22>
 8008a80:	2400      	movs	r4, #0
 8008a82:	e7eb      	b.n	8008a5c <igmp_handle+0x28>
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	9201      	str	r2, [sp, #4]
 8008a88:	b924      	cbnz	r4, 8008a94 <igmp_handle+0x60>
 8008a8a:	f10d 0e04 	add.w	lr, sp, #4
 8008a8e:	462a      	mov	r2, r5
 8008a90:	42b2      	cmp	r2, r6
 8008a92:	d10e      	bne.n	8008ab2 <igmp_handle+0x7e>
 8008a94:	f893 e005 	ldrb.w	lr, [r3, #5]
 8008a98:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
 8008a9c:	f1be 0f01 	cmp.w	lr, #1
 8008aa0:	d110      	bne.n	8008ac4 <igmp_handle+0x90>
 8008aa2:	f893 e004 	ldrb.w	lr, [r3, #4]
 8008aa6:	4596      	cmp	lr, r2
 8008aa8:	d909      	bls.n	8008abe <igmp_handle+0x8a>
 8008aaa:	0852      	lsrs	r2, r2, #1
 8008aac:	3201      	adds	r2, #1
 8008aae:	711a      	strb	r2, [r3, #4]
 8008ab0:	e005      	b.n	8008abe <igmp_handle+0x8a>
 8008ab2:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8008ab6:	f812 9f01 	ldrb.w	r9, [r2, #1]!
 8008aba:	45c1      	cmp	r9, r8
 8008abc:	d0e8      	beq.n	8008a90 <igmp_handle+0x5c>
 8008abe:	3101      	adds	r1, #1
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	e7d2      	b.n	8008a6a <igmp_handle+0x36>
 8008ac4:	f883 c005 	strb.w	ip, [r3, #5]
 8008ac8:	e7ef      	b.n	8008aaa <igmp_handle+0x76>
 8008aca:	bf00      	nop
 8008acc:	010000e0 	smlatteq	r0, r0, r0, r0
 8008ad0:	10001328 	andne	r1, r0, r8, lsr #6

08008ad4 <ip_handle>:
 8008ad4:	7b82      	ldrb	r2, [r0, #14]
 8008ad6:	7dc3      	ldrb	r3, [r0, #23]
 8008ad8:	2a45      	cmp	r2, #69	; 0x45
 8008ada:	d003      	beq.n	8008ae4 <ip_handle+0x10>
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d111      	bne.n	8008b04 <ip_handle+0x30>
 8008ae0:	f7ff bfa8 	b.w	8008a34 <igmp_handle>
 8008ae4:	2b06      	cmp	r3, #6
 8008ae6:	d00b      	beq.n	8008b00 <ip_handle+0x2c>
 8008ae8:	d804      	bhi.n	8008af4 <ip_handle+0x20>
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d006      	beq.n	8008afc <ip_handle+0x28>
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d0f6      	beq.n	8008ae0 <ip_handle+0xc>
 8008af2:	4770      	bx	lr
 8008af4:	2b11      	cmp	r3, #17
 8008af6:	d105      	bne.n	8008b04 <ip_handle+0x30>
 8008af8:	f7ff bf3a 	b.w	8008970 <udp_handle>
 8008afc:	f000 b804 	b.w	8008b08 <icmp_handle>
 8008b00:	f7ff bd4c 	b.w	800859c <tcp_handle>
 8008b04:	4770      	bx	lr
	...

08008b08 <icmp_handle>:
 8008b08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b0a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8008b0e:	2b08      	cmp	r3, #8
 8008b10:	4604      	mov	r4, r0
 8008b12:	d13e      	bne.n	8008b92 <icmp_handle+0x8a>
 8008b14:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8008b18:	2d00      	cmp	r5, #0
 8008b1a:	d13a      	bne.n	8008b92 <icmp_handle+0x8a>
 8008b1c:	1d86      	adds	r6, r0, #6
 8008b1e:	4631      	mov	r1, r6
 8008b20:	2206      	movs	r2, #6
 8008b22:	f00d f951 	bl	8015dc8 <memcpy.isra.0>
 8008b26:	4630      	mov	r0, r6
 8008b28:	491b      	ldr	r1, [pc, #108]	; (8008b98 <icmp_handle+0x90>)
 8008b2a:	2206      	movs	r2, #6
 8008b2c:	f00d f94c 	bl	8015dc8 <memcpy.isra.0>
 8008b30:	8a63      	ldrh	r3, [r4, #18]
 8008b32:	f104 061a 	add.w	r6, r4, #26
 8008b36:	43db      	mvns	r3, r3
 8008b38:	4631      	mov	r1, r6
 8008b3a:	8263      	strh	r3, [r4, #18]
 8008b3c:	2204      	movs	r2, #4
 8008b3e:	f104 001e 	add.w	r0, r4, #30
 8008b42:	f00d f941 	bl	8015dc8 <memcpy.isra.0>
 8008b46:	4b15      	ldr	r3, [pc, #84]	; (8008b9c <icmp_handle+0x94>)
 8008b48:	2204      	movs	r2, #4
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	9301      	str	r3, [sp, #4]
 8008b4e:	eb0d 0102 	add.w	r1, sp, r2
 8008b52:	4630      	mov	r0, r6
 8008b54:	f104 060e 	add.w	r6, r4, #14
 8008b58:	f00d f936 	bl	8015dc8 <memcpy.isra.0>
 8008b5c:	2114      	movs	r1, #20
 8008b5e:	7625      	strb	r5, [r4, #24]
 8008b60:	7665      	strb	r5, [r4, #25]
 8008b62:	4630      	mov	r0, r6
 8008b64:	f00d f905 	bl	8015d72 <net_chksum>
 8008b68:	8a21      	ldrh	r1, [r4, #16]
 8008b6a:	8320      	strh	r0, [r4, #24]
 8008b6c:	ba49      	rev16	r1, r1
 8008b6e:	b289      	uxth	r1, r1
 8008b70:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8008b74:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8008b78:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	f00d f8f8 	bl	8015d72 <net_chksum>
 8008b82:	8a21      	ldrh	r1, [r4, #16]
 8008b84:	84a0      	strh	r0, [r4, #36]	; 0x24
 8008b86:	ba49      	rev16	r1, r1
 8008b88:	b289      	uxth	r1, r1
 8008b8a:	310e      	adds	r1, #14
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f010 ffdf 	bl	8019b50 <emac_eth_send>
 8008b92:	b002      	add	sp, #8
 8008b94:	bd70      	pop	{r4, r5, r6, pc}
 8008b96:	bf00      	nop
 8008b98:	20009298 	mulcs	r0, r8, r2
 8008b9c:	2000928c 	andcs	r9, r0, ip, lsl #5
 8008ba0:	0801f08c 	stmdaeq	r1, {r2, r3, r7, ip, sp, lr, pc}
 8008ba4:	20000000 	andcs	r0, r0, r0
 8008ba8:	20000100 	andcs	r0, r0, r0, lsl #2
 8008bac:	20000100 	andcs	r0, r0, r0, lsl #2
 8008bb0:	2002dc20 	andcs	sp, r2, r0, lsr #24

08008bb4 <Reset_Handler>:
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	e003      	b.n	8008bc0 <DataInit>

08008bb8 <CopyData>:
 8008bb8:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <Zerobss+0x10>)
 8008bba:	585b      	ldr	r3, [r3, r1]
 8008bbc:	5043      	str	r3, [r0, r1]
 8008bbe:	3104      	adds	r1, #4

08008bc0 <DataInit>:
 8008bc0:	4809      	ldr	r0, [pc, #36]	; (8008be8 <Zerobss+0x14>)
 8008bc2:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <Zerobss+0x18>)
 8008bc4:	1842      	adds	r2, r0, r1
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d3f6      	bcc.n	8008bb8 <CopyData>
 8008bca:	4a09      	ldr	r2, [pc, #36]	; (8008bf0 <Zerobss+0x1c>)
 8008bcc:	e002      	b.n	8008bd4 <Zerobss>

08008bce <FillZerobss>:
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f842 3b04 	str.w	r3, [r2], #4

08008bd4 <Zerobss>:
 8008bd4:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <Zerobss+0x20>)
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d3f9      	bcc.n	8008bce <FillZerobss>
 8008bda:	f00f fd7b 	bl	80186d4 <SystemInit>
 8008bde:	f000 fcd7 	bl	8009590 <main>
 8008be2:	4770      	bx	lr
 8008be4:	0801f08c 	stmdaeq	r1, {r2, r3, r7, ip, sp, lr, pc}
 8008be8:	20000000 	andcs	r0, r0, r0
 8008bec:	20000100 	andcs	r0, r0, r0, lsl #2
 8008bf0:	20000100 	andcs	r0, r0, r0, lsl #2
 8008bf4:	2002dc20 	andcs	sp, r2, r0, lsr #24

08008bf8 <__aeabi_d2f>:
 8008bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008c00:	bf24      	itt	cs
 8008c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008c0a:	d90d      	bls.n	8008c28 <__aeabi_d2f+0x30>
 8008c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008c20:	bf08      	it	eq
 8008c22:	f020 0001 	biceq.w	r0, r0, #1
 8008c26:	4770      	bx	lr
 8008c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008c2c:	d121      	bne.n	8008c72 <__aeabi_d2f+0x7a>
 8008c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008c32:	bfbc      	itt	lt
 8008c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008c38:	4770      	bxlt	lr
 8008c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008c42:	f1c2 0218 	rsb	r2, r2, #24
 8008c46:	f1c2 0c20 	rsb	ip, r2, #32
 8008c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8008c52:	bf18      	it	ne
 8008c54:	f040 0001 	orrne.w	r0, r0, #1
 8008c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008c64:	ea40 000c 	orr.w	r0, r0, ip
 8008c68:	fa23 f302 	lsr.w	r3, r3, r2
 8008c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c70:	e7cc      	b.n	8008c0c <__aeabi_d2f+0x14>
 8008c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008c76:	d107      	bne.n	8008c88 <__aeabi_d2f+0x90>
 8008c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008c7c:	bf1e      	ittt	ne
 8008c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008c86:	4770      	bxne	lr
 8008c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop

08008c98 <__aeabi_uldivmod>:
 8008c98:	b953      	cbnz	r3, 8008cb0 <__aeabi_uldivmod+0x18>
 8008c9a:	b94a      	cbnz	r2, 8008cb0 <__aeabi_uldivmod+0x18>
 8008c9c:	2900      	cmp	r1, #0
 8008c9e:	bf08      	it	eq
 8008ca0:	2800      	cmpeq	r0, #0
 8008ca2:	bf1c      	itt	ne
 8008ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008cac:	f000 b80c 	b.w	8008cc8 <__aeabi_idiv0>
 8008cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008cb8:	f001 fc3e 	bl	800a538 <__udivmoddi4>
 8008cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cc4:	b004      	add	sp, #16
 8008cc6:	4770      	bx	lr

08008cc8 <__aeabi_idiv0>:
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop

08008ccc <__aeabi_drsub>:
 8008ccc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008cd0:	e002      	b.n	8008cd8 <__adddf3>
 8008cd2:	bf00      	nop

08008cd4 <__aeabi_dsub>:
 8008cd4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008cd8 <__adddf3>:
 8008cd8:	b530      	push	{r4, r5, lr}
 8008cda:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008cde:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008ce2:	ea94 0f05 	teq	r4, r5
 8008ce6:	bf08      	it	eq
 8008ce8:	ea90 0f02 	teqeq	r0, r2
 8008cec:	bf1f      	itttt	ne
 8008cee:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008cf2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008cf6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008cfa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008cfe:	f000 80e2 	beq.w	8008ec6 <__adddf3+0x1ee>
 8008d02:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008d06:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008d0a:	bfb8      	it	lt
 8008d0c:	426d      	neglt	r5, r5
 8008d0e:	dd0c      	ble.n	8008d2a <__adddf3+0x52>
 8008d10:	442c      	add	r4, r5
 8008d12:	ea80 0202 	eor.w	r2, r0, r2
 8008d16:	ea81 0303 	eor.w	r3, r1, r3
 8008d1a:	ea82 0000 	eor.w	r0, r2, r0
 8008d1e:	ea83 0101 	eor.w	r1, r3, r1
 8008d22:	ea80 0202 	eor.w	r2, r0, r2
 8008d26:	ea81 0303 	eor.w	r3, r1, r3
 8008d2a:	2d36      	cmp	r5, #54	; 0x36
 8008d2c:	bf88      	it	hi
 8008d2e:	bd30      	pophi	{r4, r5, pc}
 8008d30:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008d34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008d38:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008d3c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008d40:	d002      	beq.n	8008d48 <__adddf3+0x70>
 8008d42:	4240      	negs	r0, r0
 8008d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008d48:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008d4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008d50:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008d54:	d002      	beq.n	8008d5c <__adddf3+0x84>
 8008d56:	4252      	negs	r2, r2
 8008d58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008d5c:	ea94 0f05 	teq	r4, r5
 8008d60:	f000 80a7 	beq.w	8008eb2 <__adddf3+0x1da>
 8008d64:	f1a4 0401 	sub.w	r4, r4, #1
 8008d68:	f1d5 0e20 	rsbs	lr, r5, #32
 8008d6c:	db0d      	blt.n	8008d8a <__adddf3+0xb2>
 8008d6e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008d72:	fa22 f205 	lsr.w	r2, r2, r5
 8008d76:	1880      	adds	r0, r0, r2
 8008d78:	f141 0100 	adc.w	r1, r1, #0
 8008d7c:	fa03 f20e 	lsl.w	r2, r3, lr
 8008d80:	1880      	adds	r0, r0, r2
 8008d82:	fa43 f305 	asr.w	r3, r3, r5
 8008d86:	4159      	adcs	r1, r3
 8008d88:	e00e      	b.n	8008da8 <__adddf3+0xd0>
 8008d8a:	f1a5 0520 	sub.w	r5, r5, #32
 8008d8e:	f10e 0e20 	add.w	lr, lr, #32
 8008d92:	2a01      	cmp	r2, #1
 8008d94:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008d98:	bf28      	it	cs
 8008d9a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008d9e:	fa43 f305 	asr.w	r3, r3, r5
 8008da2:	18c0      	adds	r0, r0, r3
 8008da4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008da8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008dac:	d507      	bpl.n	8008dbe <__adddf3+0xe6>
 8008dae:	f04f 0e00 	mov.w	lr, #0
 8008db2:	f1dc 0c00 	rsbs	ip, ip, #0
 8008db6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008dba:	eb6e 0101 	sbc.w	r1, lr, r1
 8008dbe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008dc2:	d31b      	bcc.n	8008dfc <__adddf3+0x124>
 8008dc4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008dc8:	d30c      	bcc.n	8008de4 <__adddf3+0x10c>
 8008dca:	0849      	lsrs	r1, r1, #1
 8008dcc:	ea5f 0030 	movs.w	r0, r0, rrx
 8008dd0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008dd4:	f104 0401 	add.w	r4, r4, #1
 8008dd8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008ddc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008de0:	f080 809a 	bcs.w	8008f18 <__adddf3+0x240>
 8008de4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008de8:	bf08      	it	eq
 8008dea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008dee:	f150 0000 	adcs.w	r0, r0, #0
 8008df2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008df6:	ea41 0105 	orr.w	r1, r1, r5
 8008dfa:	bd30      	pop	{r4, r5, pc}
 8008dfc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008e00:	4140      	adcs	r0, r0
 8008e02:	eb41 0101 	adc.w	r1, r1, r1
 8008e06:	3c01      	subs	r4, #1
 8008e08:	bf28      	it	cs
 8008e0a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008e0e:	d2e9      	bcs.n	8008de4 <__adddf3+0x10c>
 8008e10:	f091 0f00 	teq	r1, #0
 8008e14:	bf04      	itt	eq
 8008e16:	4601      	moveq	r1, r0
 8008e18:	2000      	moveq	r0, #0
 8008e1a:	fab1 f381 	clz	r3, r1
 8008e1e:	bf08      	it	eq
 8008e20:	3320      	addeq	r3, #32
 8008e22:	f1a3 030b 	sub.w	r3, r3, #11
 8008e26:	f1b3 0220 	subs.w	r2, r3, #32
 8008e2a:	da0c      	bge.n	8008e46 <__adddf3+0x16e>
 8008e2c:	320c      	adds	r2, #12
 8008e2e:	dd08      	ble.n	8008e42 <__adddf3+0x16a>
 8008e30:	f102 0c14 	add.w	ip, r2, #20
 8008e34:	f1c2 020c 	rsb	r2, r2, #12
 8008e38:	fa01 f00c 	lsl.w	r0, r1, ip
 8008e3c:	fa21 f102 	lsr.w	r1, r1, r2
 8008e40:	e00c      	b.n	8008e5c <__adddf3+0x184>
 8008e42:	f102 0214 	add.w	r2, r2, #20
 8008e46:	bfd8      	it	le
 8008e48:	f1c2 0c20 	rsble	ip, r2, #32
 8008e4c:	fa01 f102 	lsl.w	r1, r1, r2
 8008e50:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008e54:	bfdc      	itt	le
 8008e56:	ea41 010c 	orrle.w	r1, r1, ip
 8008e5a:	4090      	lslle	r0, r2
 8008e5c:	1ae4      	subs	r4, r4, r3
 8008e5e:	bfa2      	ittt	ge
 8008e60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008e64:	4329      	orrge	r1, r5
 8008e66:	bd30      	popge	{r4, r5, pc}
 8008e68:	ea6f 0404 	mvn.w	r4, r4
 8008e6c:	3c1f      	subs	r4, #31
 8008e6e:	da1c      	bge.n	8008eaa <__adddf3+0x1d2>
 8008e70:	340c      	adds	r4, #12
 8008e72:	dc0e      	bgt.n	8008e92 <__adddf3+0x1ba>
 8008e74:	f104 0414 	add.w	r4, r4, #20
 8008e78:	f1c4 0220 	rsb	r2, r4, #32
 8008e7c:	fa20 f004 	lsr.w	r0, r0, r4
 8008e80:	fa01 f302 	lsl.w	r3, r1, r2
 8008e84:	ea40 0003 	orr.w	r0, r0, r3
 8008e88:	fa21 f304 	lsr.w	r3, r1, r4
 8008e8c:	ea45 0103 	orr.w	r1, r5, r3
 8008e90:	bd30      	pop	{r4, r5, pc}
 8008e92:	f1c4 040c 	rsb	r4, r4, #12
 8008e96:	f1c4 0220 	rsb	r2, r4, #32
 8008e9a:	fa20 f002 	lsr.w	r0, r0, r2
 8008e9e:	fa01 f304 	lsl.w	r3, r1, r4
 8008ea2:	ea40 0003 	orr.w	r0, r0, r3
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	bd30      	pop	{r4, r5, pc}
 8008eaa:	fa21 f004 	lsr.w	r0, r1, r4
 8008eae:	4629      	mov	r1, r5
 8008eb0:	bd30      	pop	{r4, r5, pc}
 8008eb2:	f094 0f00 	teq	r4, #0
 8008eb6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008eba:	bf06      	itte	eq
 8008ebc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008ec0:	3401      	addeq	r4, #1
 8008ec2:	3d01      	subne	r5, #1
 8008ec4:	e74e      	b.n	8008d64 <__adddf3+0x8c>
 8008ec6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008eca:	bf18      	it	ne
 8008ecc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008ed0:	d029      	beq.n	8008f26 <__adddf3+0x24e>
 8008ed2:	ea94 0f05 	teq	r4, r5
 8008ed6:	bf08      	it	eq
 8008ed8:	ea90 0f02 	teqeq	r0, r2
 8008edc:	d005      	beq.n	8008eea <__adddf3+0x212>
 8008ede:	ea54 0c00 	orrs.w	ip, r4, r0
 8008ee2:	bf04      	itt	eq
 8008ee4:	4619      	moveq	r1, r3
 8008ee6:	4610      	moveq	r0, r2
 8008ee8:	bd30      	pop	{r4, r5, pc}
 8008eea:	ea91 0f03 	teq	r1, r3
 8008eee:	bf1e      	ittt	ne
 8008ef0:	2100      	movne	r1, #0
 8008ef2:	2000      	movne	r0, #0
 8008ef4:	bd30      	popne	{r4, r5, pc}
 8008ef6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008efa:	d105      	bne.n	8008f08 <__adddf3+0x230>
 8008efc:	0040      	lsls	r0, r0, #1
 8008efe:	4149      	adcs	r1, r1
 8008f00:	bf28      	it	cs
 8008f02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008f06:	bd30      	pop	{r4, r5, pc}
 8008f08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008f0c:	bf3c      	itt	cc
 8008f0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008f12:	bd30      	popcc	{r4, r5, pc}
 8008f14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008f18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008f1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f20:	f04f 0000 	mov.w	r0, #0
 8008f24:	bd30      	pop	{r4, r5, pc}
 8008f26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008f2a:	bf1a      	itte	ne
 8008f2c:	4619      	movne	r1, r3
 8008f2e:	4610      	movne	r0, r2
 8008f30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008f34:	bf1c      	itt	ne
 8008f36:	460b      	movne	r3, r1
 8008f38:	4602      	movne	r2, r0
 8008f3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008f3e:	bf06      	itte	eq
 8008f40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008f44:	ea91 0f03 	teqeq	r1, r3
 8008f48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008f4c:	bd30      	pop	{r4, r5, pc}
 8008f4e:	bf00      	nop

08008f50 <__aeabi_ui2d>:
 8008f50:	f090 0f00 	teq	r0, #0
 8008f54:	bf04      	itt	eq
 8008f56:	2100      	moveq	r1, #0
 8008f58:	4770      	bxeq	lr
 8008f5a:	b530      	push	{r4, r5, lr}
 8008f5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008f60:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008f64:	f04f 0500 	mov.w	r5, #0
 8008f68:	f04f 0100 	mov.w	r1, #0
 8008f6c:	e750      	b.n	8008e10 <__adddf3+0x138>
 8008f6e:	bf00      	nop

08008f70 <__aeabi_i2d>:
 8008f70:	f090 0f00 	teq	r0, #0
 8008f74:	bf04      	itt	eq
 8008f76:	2100      	moveq	r1, #0
 8008f78:	4770      	bxeq	lr
 8008f7a:	b530      	push	{r4, r5, lr}
 8008f7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008f80:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008f84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008f88:	bf48      	it	mi
 8008f8a:	4240      	negmi	r0, r0
 8008f8c:	f04f 0100 	mov.w	r1, #0
 8008f90:	e73e      	b.n	8008e10 <__adddf3+0x138>
 8008f92:	bf00      	nop

08008f94 <__aeabi_f2d>:
 8008f94:	0042      	lsls	r2, r0, #1
 8008f96:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008f9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8008f9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008fa2:	bf1f      	itttt	ne
 8008fa4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008fa8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008fac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008fb0:	4770      	bxne	lr
 8008fb2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8008fb6:	bf08      	it	eq
 8008fb8:	4770      	bxeq	lr
 8008fba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008fbe:	bf04      	itt	eq
 8008fc0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008fc4:	4770      	bxeq	lr
 8008fc6:	b530      	push	{r4, r5, lr}
 8008fc8:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008fcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008fd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008fd4:	e71c      	b.n	8008e10 <__adddf3+0x138>
 8008fd6:	bf00      	nop

08008fd8 <__aeabi_ul2d>:
 8008fd8:	ea50 0201 	orrs.w	r2, r0, r1
 8008fdc:	bf08      	it	eq
 8008fde:	4770      	bxeq	lr
 8008fe0:	b530      	push	{r4, r5, lr}
 8008fe2:	f04f 0500 	mov.w	r5, #0
 8008fe6:	e00a      	b.n	8008ffe <__aeabi_l2d+0x16>

08008fe8 <__aeabi_l2d>:
 8008fe8:	ea50 0201 	orrs.w	r2, r0, r1
 8008fec:	bf08      	it	eq
 8008fee:	4770      	bxeq	lr
 8008ff0:	b530      	push	{r4, r5, lr}
 8008ff2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008ff6:	d502      	bpl.n	8008ffe <__aeabi_l2d+0x16>
 8008ff8:	4240      	negs	r0, r0
 8008ffa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ffe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8009002:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8009006:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800900a:	f43f aed8 	beq.w	8008dbe <__adddf3+0xe6>
 800900e:	f04f 0203 	mov.w	r2, #3
 8009012:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009016:	bf18      	it	ne
 8009018:	3203      	addne	r2, #3
 800901a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800901e:	bf18      	it	ne
 8009020:	3203      	addne	r2, #3
 8009022:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8009026:	f1c2 0320 	rsb	r3, r2, #32
 800902a:	fa00 fc03 	lsl.w	ip, r0, r3
 800902e:	fa20 f002 	lsr.w	r0, r0, r2
 8009032:	fa01 fe03 	lsl.w	lr, r1, r3
 8009036:	ea40 000e 	orr.w	r0, r0, lr
 800903a:	fa21 f102 	lsr.w	r1, r1, r2
 800903e:	4414      	add	r4, r2
 8009040:	e6bd      	b.n	8008dbe <__adddf3+0xe6>
 8009042:	bf00      	nop

08009044 <ADC_IRQHandler>:
 8009044:	e7fe      	b.n	8009044 <ADC_IRQHandler>

08009046 <memcmp>:
 8009046:	b510      	push	{r4, lr}
 8009048:	3901      	subs	r1, #1
 800904a:	4402      	add	r2, r0
 800904c:	4290      	cmp	r0, r2
 800904e:	d101      	bne.n	8009054 <memcmp+0xe>
 8009050:	2000      	movs	r0, #0
 8009052:	e005      	b.n	8009060 <memcmp+0x1a>
 8009054:	7803      	ldrb	r3, [r0, #0]
 8009056:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800905a:	42a3      	cmp	r3, r4
 800905c:	d001      	beq.n	8009062 <memcmp+0x1c>
 800905e:	1b18      	subs	r0, r3, r4
 8009060:	bd10      	pop	{r4, pc}
 8009062:	3001      	adds	r0, #1
 8009064:	e7f2      	b.n	800904c <memcmp+0x6>

08009066 <memcpy>:
 8009066:	b510      	push	{r4, lr}
 8009068:	1e43      	subs	r3, r0, #1
 800906a:	440a      	add	r2, r1
 800906c:	4291      	cmp	r1, r2
 800906e:	d100      	bne.n	8009072 <memcpy+0xc>
 8009070:	bd10      	pop	{r4, pc}
 8009072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800907a:	e7f7      	b.n	800906c <memcpy+0x6>

0800907c <LightSet::FullOn()>:
 800907c:	4770      	bx	lr

0800907e <DisplayHandler::~DisplayHandler()>:
 800907e:	4770      	bx	lr

08009080 <LightSet64with4::~LightSet64with4()>:
 8009080:	4770      	bx	lr

08009082 <LightSet64with4::Start(unsigned int)>:
 8009082:	291f      	cmp	r1, #31
 8009084:	460b      	mov	r3, r1
 8009086:	d805      	bhi.n	8009094 <LightSet64with4::Start(unsigned int)+0x12>
 8009088:	6842      	ldr	r2, [r0, #4]
 800908a:	b11a      	cbz	r2, 8009094 <LightSet64with4::Start(unsigned int)+0x12>
 800908c:	6813      	ldr	r3, [r2, #0]
 800908e:	4610      	mov	r0, r2
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	4718      	bx	r3
 8009094:	6880      	ldr	r0, [r0, #8]
 8009096:	b120      	cbz	r0, 80090a2 <LightSet64with4::Start(unsigned int)+0x20>
 8009098:	6802      	ldr	r2, [r0, #0]
 800909a:	f003 0103 	and.w	r1, r3, #3
 800909e:	6892      	ldr	r2, [r2, #8]
 80090a0:	4710      	bx	r2
 80090a2:	4770      	bx	lr

080090a4 <LightSet64with4::Stop(unsigned int)>:
 80090a4:	293f      	cmp	r1, #63	; 0x3f
 80090a6:	460b      	mov	r3, r1
 80090a8:	d805      	bhi.n	80090b6 <LightSet64with4::Stop(unsigned int)+0x12>
 80090aa:	6842      	ldr	r2, [r0, #4]
 80090ac:	b11a      	cbz	r2, 80090b6 <LightSet64with4::Stop(unsigned int)+0x12>
 80090ae:	6813      	ldr	r3, [r2, #0]
 80090b0:	4610      	mov	r0, r2
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	4718      	bx	r3
 80090b6:	6880      	ldr	r0, [r0, #8]
 80090b8:	b120      	cbz	r0, 80090c4 <LightSet64with4::Stop(unsigned int)+0x20>
 80090ba:	6802      	ldr	r2, [r0, #0]
 80090bc:	f003 0103 	and.w	r1, r3, #3
 80090c0:	68d2      	ldr	r2, [r2, #12]
 80090c2:	4710      	bx	r2
 80090c4:	4770      	bx	lr

080090c6 <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)>:
 80090c6:	293f      	cmp	r1, #63	; 0x3f
 80090c8:	b4f0      	push	{r4, r5, r6, r7}
 80090ca:	460c      	mov	r4, r1
 80090cc:	4615      	mov	r5, r2
 80090ce:	461e      	mov	r6, r3
 80090d0:	d807      	bhi.n	80090e2 <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 80090d2:	6847      	ldr	r7, [r0, #4]
 80090d4:	b12f      	cbz	r7, 80090e2 <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 80090d6:	6838      	ldr	r0, [r7, #0]
 80090d8:	6904      	ldr	r4, [r0, #16]
 80090da:	4638      	mov	r0, r7
 80090dc:	46a4      	mov	ip, r4
 80090de:	bcf0      	pop	{r4, r5, r6, r7}
 80090e0:	4760      	bx	ip
 80090e2:	6880      	ldr	r0, [r0, #8]
 80090e4:	b138      	cbz	r0, 80090f6 <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)+0x30>
 80090e6:	6803      	ldr	r3, [r0, #0]
 80090e8:	691f      	ldr	r7, [r3, #16]
 80090ea:	462a      	mov	r2, r5
 80090ec:	4633      	mov	r3, r6
 80090ee:	f004 0103 	and.w	r1, r4, #3
 80090f2:	46bc      	mov	ip, r7
 80090f4:	e7f3      	b.n	80090de <LightSet64with4::SetData(unsigned int, unsigned char const*, unsigned int)+0x18>
 80090f6:	bcf0      	pop	{r4, r5, r6, r7}
 80090f8:	4770      	bx	lr

080090fa <LightSet64with4::Blackout(bool)>:
 80090fa:	b570      	push	{r4, r5, r6, lr}
 80090fc:	4604      	mov	r4, r0
 80090fe:	6840      	ldr	r0, [r0, #4]
 8009100:	460d      	mov	r5, r1
 8009102:	b110      	cbz	r0, 800910a <LightSet64with4::Blackout(bool)+0x10>
 8009104:	6803      	ldr	r3, [r0, #0]
 8009106:	695b      	ldr	r3, [r3, #20]
 8009108:	4798      	blx	r3
 800910a:	68a0      	ldr	r0, [r4, #8]
 800910c:	b128      	cbz	r0, 800911a <LightSet64with4::Blackout(bool)+0x20>
 800910e:	6803      	ldr	r3, [r0, #0]
 8009110:	4629      	mov	r1, r5
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009118:	4718      	bx	r3
 800911a:	bd70      	pop	{r4, r5, r6, pc}

0800911c <LightSet64with4::Print()>:
 800911c:	b510      	push	{r4, lr}
 800911e:	4604      	mov	r4, r0
 8009120:	6840      	ldr	r0, [r0, #4]
 8009122:	b110      	cbz	r0, 800912a <LightSet64with4::Print()+0xe>
 8009124:	6803      	ldr	r3, [r0, #0]
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	4798      	blx	r3
 800912a:	68a0      	ldr	r0, [r4, #8]
 800912c:	b120      	cbz	r0, 8009138 <LightSet64with4::Print()+0x1c>
 800912e:	6803      	ldr	r3, [r0, #0]
 8009130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009134:	69db      	ldr	r3, [r3, #28]
 8009136:	4718      	bx	r3
 8009138:	bd10      	pop	{r4, pc}

0800913a <LightSet64with4::SetDmxStartAddress(unsigned short)>:
 800913a:	2000      	movs	r0, #0
 800913c:	4770      	bx	lr

0800913e <LightSet64with4::GetDmxStartAddress()>:
 800913e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009142:	4770      	bx	lr

08009144 <LightSet64with4::GetDmxFootprint()>:
 8009144:	2000      	movs	r0, #0
 8009146:	4770      	bx	lr

08009148 <LightSet64with4::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8009148:	2000      	movs	r0, #0
 800914a:	4770      	bx	lr

0800914c <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 800914c:	4770      	bx	lr

0800914e <PixelDmxStartStop::~PixelDmxStartStop()>:
 800914e:	4770      	bx	lr

08009150 <PixelDmxStartStop::Start()>:
 8009150:	4b02      	ldr	r3, [pc, #8]	; (800915c <PixelDmxStartStop::Start()+0xc>)
 8009152:	2204      	movs	r2, #4
 8009154:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40020000 	andmi	r0, r2, r0

08009160 <PixelDmxStartStop::Stop()>:
 8009160:	4b02      	ldr	r3, [pc, #8]	; (800916c <PixelDmxStartStop::Stop()+0xc>)
 8009162:	2204      	movs	r2, #4
 8009164:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	40020000 	andmi	r0, r2, r0

08009170 <dmxconfigudp::atoi(char const*, unsigned int)>:
 8009170:	b530      	push	{r4, r5, lr}
 8009172:	4401      	add	r1, r0
 8009174:	2300      	movs	r3, #0
 8009176:	250a      	movs	r5, #10
 8009178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800917c:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8009180:	2c09      	cmp	r4, #9
 8009182:	d805      	bhi.n	8009190 <dmxconfigudp::atoi(char const*, unsigned int)+0x20>
 8009184:	fb05 2303 	mla	r3, r5, r3, r2
 8009188:	4281      	cmp	r1, r0
 800918a:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 800918e:	d1f3      	bne.n	8009178 <dmxconfigudp::atoi(char const*, unsigned int)+0x8>
 8009190:	4618      	mov	r0, r3
 8009192:	bd30      	pop	{r4, r5, pc}

08009194 <RDMNetDevice::CopyUID(unsigned char*)>:
 8009194:	460b      	mov	r3, r1
 8009196:	2206      	movs	r2, #6
 8009198:	1d41      	adds	r1, r0, #5
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff bf63 	b.w	8009066 <memcpy>

080091a0 <non-virtual thunk to RDMNetDevice::CopyUID(unsigned char*)>:
 80091a0:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 80091a4:	e7f6      	b.n	8009194 <RDMNetDevice::CopyUID(unsigned char*)>
	...

080091a8 <RDMNetDevice::CopyCID(unsigned char*)>:
 80091a8:	4608      	mov	r0, r1
 80091aa:	2210      	movs	r2, #16
 80091ac:	4901      	ldr	r1, [pc, #4]	; (80091b4 <RDMNetDevice::CopyCID(unsigned char*)+0xc>)
 80091ae:	f7ff bf5a 	b.w	8009066 <memcpy>
 80091b2:	bf00      	nop
 80091b4:	20000805 	andcs	r0, r0, r5, lsl #16

080091b8 <non-virtual thunk to RDMNetDevice::CopyCID(unsigned char*)>:
 80091b8:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 80091bc:	e7f4      	b.n	80091a8 <RDMNetDevice::CopyCID(unsigned char*)>
 80091be:	bf00      	nop

080091c0 <DisplayHandler::~DisplayHandler()>:
 80091c0:	b510      	push	{r4, lr}
 80091c2:	4604      	mov	r4, r0
 80091c4:	f00f f838 	bl	8018238 <operator delete(void*)>
 80091c8:	4620      	mov	r0, r4
 80091ca:	bd10      	pop	{r4, pc}

080091cc <LightSet64with4::~LightSet64with4()>:
 80091cc:	b510      	push	{r4, lr}
 80091ce:	4604      	mov	r4, r0
 80091d0:	f00f f832 	bl	8018238 <operator delete(void*)>
 80091d4:	4620      	mov	r0, r4
 80091d6:	bd10      	pop	{r4, pc}

080091d8 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 80091d8:	b510      	push	{r4, lr}
 80091da:	4604      	mov	r4, r0
 80091dc:	f00f f82c 	bl	8018238 <operator delete(void*)>
 80091e0:	4620      	mov	r0, r4
 80091e2:	bd10      	pop	{r4, pc}

080091e4 <PixelDmxStartStop::~PixelDmxStartStop()>:
 80091e4:	b510      	push	{r4, lr}
 80091e6:	4604      	mov	r4, r0
 80091e8:	f00f f826 	bl	8018238 <operator delete(void*)>
 80091ec:	4620      	mov	r0, r4
 80091ee:	bd10      	pop	{r4, pc}

080091f0 <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 80091f0:	b510      	push	{r4, lr}
 80091f2:	4c03      	ldr	r4, [pc, #12]	; (8009200 <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)+0x10>)
 80091f4:	30d0      	adds	r0, #208	; 0xd0
 80091f6:	4622      	mov	r2, r4
 80091f8:	f007 fb94 	bl	8010924 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 80091fc:	4620      	mov	r0, r4
 80091fe:	bd10      	pop	{r4, pc}
 8009200:	20000704 	andcs	r0, r0, r4, lsl #14

08009204 <non-virtual thunk to RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 8009204:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 8009208:	e7f2      	b.n	80091f0 <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>
 800920a:	bf00      	nop

0800920c <DisplayHandler::Print(unsigned int)>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	7903      	ldrb	r3, [r0, #4]
 8009210:	b1c3      	cbz	r3, 8009244 <DisplayHandler::Print(unsigned int)+0x38>
 8009212:	4c0d      	ldr	r4, [pc, #52]	; (8009248 <DisplayHandler::Print(unsigned int)+0x3c>)
 8009214:	2904      	cmp	r1, #4
 8009216:	6820      	ldr	r0, [r4, #0]
 8009218:	bf98      	it	ls
 800921a:	4b0c      	ldrls	r3, [pc, #48]	; (800924c <DisplayHandler::Print(unsigned int)+0x40>)
 800921c:	7d42      	ldrb	r2, [r0, #21]
 800921e:	bf98      	it	ls
 8009220:	5c5d      	ldrbls	r5, [r3, r1]
 8009222:	7d01      	ldrb	r1, [r0, #20]
 8009224:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009228:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800922c:	bf88      	it	hi
 800922e:	2555      	movhi	r5, #85	; 0x55
 8009230:	b2c9      	uxtb	r1, r1
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	f00e fbc8 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 8009238:	6820      	ldr	r0, [r4, #0]
 800923a:	4629      	mov	r1, r5
 800923c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009240:	f00e bbd0 	b.w	80179e4 <Display::PutChar(int)>
 8009244:	bd38      	pop	{r3, r4, r5, pc}
 8009246:	bf00      	nop
 8009248:	2000fcb8 			; <UNDEFINED> instruction: 0x2000fcb8
 800924c:	0801ad58 	stmdaeq	r1, {r3, r4, r6, r8, sl, fp, sp, pc}

08009250 <RDMNetDevice::~RDMNetDevice()>:
 8009250:	b510      	push	{r4, lr}
 8009252:	4b06      	ldr	r3, [pc, #24]	; (800926c <RDMNetDevice::~RDMNetDevice()+0x1c>)
 8009254:	4604      	mov	r4, r0
 8009256:	f840 3b8c 	str.w	r3, [r0], #140
 800925a:	f006 fe15 	bl	800fe88 <RDMSubDevices::~RDMSubDevices()>
 800925e:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8009262:	f006 fdf1 	bl	800fe48 <RDMSensors::~RDMSensors()>
 8009266:	4620      	mov	r0, r4
 8009268:	bd10      	pop	{r4, pc}
 800926a:	bf00      	nop
 800926c:	0801c574 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, lr, pc}

08009270 <non-virtual thunk to RDMNetDevice::~RDMNetDevice()>:
 8009270:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 8009274:	e7ec      	b.n	8009250 <RDMNetDevice::~RDMNetDevice()>
 8009276:	bf00      	nop

08009278 <RDMNetDevice::~RDMNetDevice()>:
 8009278:	b510      	push	{r4, lr}
 800927a:	4604      	mov	r4, r0
 800927c:	f7ff ffe8 	bl	8009250 <RDMNetDevice::~RDMNetDevice()>
 8009280:	4620      	mov	r0, r4
 8009282:	f00e ffd9 	bl	8018238 <operator delete(void*)>
 8009286:	4620      	mov	r0, r4
 8009288:	bd10      	pop	{r4, pc}

0800928a <non-virtual thunk to RDMNetDevice::~RDMNetDevice()>:
 800928a:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 800928e:	e7f3      	b.n	8009278 <RDMNetDevice::~RDMNetDevice()>

08009290 <Display::ClearLine(unsigned int)>:
 8009290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009292:	7d43      	ldrb	r3, [r0, #21]
 8009294:	428b      	cmp	r3, r1
 8009296:	4604      	mov	r4, r0
 8009298:	d317      	bcc.n	80092ca <Display::ClearLine(unsigned int)+0x3a>
 800929a:	1e4a      	subs	r2, r1, #1
 800929c:	2100      	movs	r1, #0
 800929e:	9201      	str	r2, [sp, #4]
 80092a0:	f00e fb92 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 80092a4:	2500      	movs	r5, #0
 80092a6:	7d23      	ldrb	r3, [r4, #20]
 80092a8:	9a01      	ldr	r2, [sp, #4]
 80092aa:	42ab      	cmp	r3, r5
 80092ac:	d806      	bhi.n	80092bc <Display::ClearLine(unsigned int)+0x2c>
 80092ae:	2100      	movs	r1, #0
 80092b0:	4620      	mov	r0, r4
 80092b2:	b003      	add	sp, #12
 80092b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092b8:	f00e bb86 	b.w	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 80092bc:	2120      	movs	r1, #32
 80092be:	4620      	mov	r0, r4
 80092c0:	9201      	str	r2, [sp, #4]
 80092c2:	3501      	adds	r5, #1
 80092c4:	f00e fb8e 	bl	80179e4 <Display::PutChar(int)>
 80092c8:	e7ed      	b.n	80092a6 <Display::ClearLine(unsigned int)+0x16>
 80092ca:	b003      	add	sp, #12
 80092cc:	bd30      	pop	{r4, r5, pc}

080092ce <Display::TextLine(unsigned int, char const*, unsigned int)>:
 80092ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d0:	461e      	mov	r6, r3
 80092d2:	7d43      	ldrb	r3, [r0, #21]
 80092d4:	428b      	cmp	r3, r1
 80092d6:	4605      	mov	r5, r0
 80092d8:	4614      	mov	r4, r2
 80092da:	d30a      	bcc.n	80092f2 <Display::TextLine(unsigned int, char const*, unsigned int)+0x24>
 80092dc:	1e4a      	subs	r2, r1, #1
 80092de:	2100      	movs	r1, #0
 80092e0:	f00e fb72 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 80092e4:	7d2b      	ldrb	r3, [r5, #20]
 80092e6:	42b3      	cmp	r3, r6
 80092e8:	bf94      	ite	ls
 80092ea:	18e7      	addls	r7, r4, r3
 80092ec:	19a7      	addhi	r7, r4, r6
 80092ee:	42a7      	cmp	r7, r4
 80092f0:	d100      	bne.n	80092f4 <Display::TextLine(unsigned int, char const*, unsigned int)+0x26>
 80092f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f8:	4628      	mov	r0, r5
 80092fa:	f00e fb73 	bl	80179e4 <Display::PutChar(int)>
 80092fe:	e7f6      	b.n	80092ee <Display::TextLine(unsigned int, char const*, unsigned int)+0x20>

08009300 <Display::Printf(unsigned char, char const*, ...)>:
 8009300:	b40c      	push	{r2, r3}
 8009302:	b570      	push	{r4, r5, r6, lr}
 8009304:	b08a      	sub	sp, #40	; 0x28
 8009306:	ab0e      	add	r3, sp, #56	; 0x38
 8009308:	4605      	mov	r5, r0
 800930a:	f853 2b04 	ldr.w	r2, [r3], #4
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	460e      	mov	r6, r1
 8009312:	a802      	add	r0, sp, #8
 8009314:	2120      	movs	r1, #32
 8009316:	f001 f8ff 	bl	800a518 <vsnprintf>
 800931a:	aa02      	add	r2, sp, #8
 800931c:	4604      	mov	r4, r0
 800931e:	b283      	uxth	r3, r0
 8009320:	4631      	mov	r1, r6
 8009322:	4628      	mov	r0, r5
 8009324:	f7ff ffd3 	bl	80092ce <Display::TextLine(unsigned int, char const*, unsigned int)>
 8009328:	4620      	mov	r0, r4
 800932a:	b00a      	add	sp, #40	; 0x28
 800932c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009330:	b002      	add	sp, #8
 8009332:	4770      	bx	lr

08009334 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 8009334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009338:	4690      	mov	r8, r2
 800933a:	7d42      	ldrb	r2, [r0, #21]
 800933c:	3a01      	subs	r2, #1
 800933e:	460e      	mov	r6, r1
 8009340:	b2d2      	uxtb	r2, r2
 8009342:	2100      	movs	r1, #0
 8009344:	4604      	mov	r4, r0
 8009346:	461f      	mov	r7, r3
 8009348:	f00e fb3e 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 800934c:	2500      	movs	r5, #0
 800934e:	7d23      	ldrb	r3, [r4, #20]
 8009350:	3b01      	subs	r3, #1
 8009352:	429d      	cmp	r5, r3
 8009354:	d320      	bcc.n	8009398 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x64>
 8009356:	7d62      	ldrb	r2, [r4, #21]
 8009358:	3a01      	subs	r2, #1
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	2100      	movs	r1, #0
 800935e:	4620      	mov	r0, r4
 8009360:	f00e fb32 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 8009364:	7d61      	ldrb	r1, [r4, #21]
 8009366:	7d22      	ldrb	r2, [r4, #20]
 8009368:	2500      	movs	r5, #0
 800936a:	5d73      	ldrb	r3, [r6, r5]
 800936c:	b11b      	cbz	r3, 8009376 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x42>
 800936e:	1c6b      	adds	r3, r5, #1
 8009370:	42aa      	cmp	r2, r5
 8009372:	461d      	mov	r5, r3
 8009374:	dcf9      	bgt.n	800936a <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x36>
 8009376:	b2eb      	uxtb	r3, r5
 8009378:	4632      	mov	r2, r6
 800937a:	4620      	mov	r0, r4
 800937c:	f7ff ffa7 	bl	80092ce <Display::TextLine(unsigned int, char const*, unsigned int)>
 8009380:	4809      	ldr	r0, [pc, #36]	; (80093a8 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x74>)
 8009382:	4641      	mov	r1, r8
 8009384:	f001 f888 	bl	800a498 <printf>
 8009388:	1c7b      	adds	r3, r7, #1
 800938a:	d00b      	beq.n	80093a4 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x70>
 800938c:	4631      	mov	r1, r6
 800938e:	4638      	mov	r0, r7
 8009390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009394:	f00e bdca 	b.w	8017f2c <console_status>
 8009398:	2120      	movs	r1, #32
 800939a:	4620      	mov	r0, r4
 800939c:	f00e fb22 	bl	80179e4 <Display::PutChar(int)>
 80093a0:	3501      	adds	r5, #1
 80093a2:	e7d4      	b.n	800934e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x1a>
 80093a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a8:	0801ab99 	stmdaeq	r1, {r0, r3, r4, r7, r8, r9, fp, sp, pc}

080093ac <display::timeout::gpio_init()>:
 80093ac:	b510      	push	{r4, lr}
 80093ae:	f640 4002 	movw	r0, #3074	; 0xc02
 80093b2:	f00f ff91 	bl	80192d8 <rcu_periph_clock_enable>
 80093b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ba:	4803      	ldr	r0, [pc, #12]	; (80093c8 <display::timeout::gpio_init()+0x1c>)
 80093bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093c0:	2201      	movs	r2, #1
 80093c2:	2100      	movs	r1, #0
 80093c4:	f00f bf0c 	b.w	80191e0 <gpio_mode_set>
 80093c8:	40020800 	andmi	r0, r2, r0, lsl #16

080093cc <display::timeout::gpio_renew()>:
 80093cc:	4b03      	ldr	r3, [pc, #12]	; (80093dc <display::timeout::gpio_renew()+0x10>)
 80093ce:	f8d3 0810 	ldr.w	r0, [r3, #2064]	; 0x810
 80093d2:	f480 5000 	eor.w	r0, r0, #8192	; 0x2000
 80093d6:	f3c0 3040 	ubfx	r0, r0, #13, #1
 80093da:	4770      	bx	lr
 80093dc:	40020000 	andmi	r0, r2, r0

080093e0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 80093e0:	2905      	cmp	r1, #5
 80093e2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093e6:	4606      	mov	r6, r0
 80093e8:	460f      	mov	r7, r1
 80093ea:	dc6e      	bgt.n	80094ca <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xea>
 80093ec:	4b38      	ldr	r3, [pc, #224]	; (80094d0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf0>)
 80093ee:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80094d8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf8>
 80093f2:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80094dc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xfc>
 80093f6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80094e0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x100>
 80093fa:	6019      	str	r1, [r3, #0]
 80093fc:	2400      	movs	r4, #0
 80093fe:	2f05      	cmp	r7, #5
 8009400:	d80a      	bhi.n	8009418 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8009402:	e8df f007 	tbb	[pc, r7]
 8009406:	1c120339 	ldcne	3, cr0, [r2], {57}	; 0x39
 800940a:	23002d25 	movwcs	r2, #3365	; 0xd25
 800940e:	2264      	movs	r2, #100	; 0x64
 8009410:	4621      	mov	r1, r4
 8009412:	4630      	mov	r0, r6
 8009414:	f009 fc08 	bl	8012c28 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8009418:	3401      	adds	r4, #1
 800941a:	2c10      	cmp	r4, #16
 800941c:	f108 0820 	add.w	r8, r8, #32
 8009420:	d1ed      	bne.n	80093fe <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x1e>
 8009422:	2001      	movs	r0, #1
 8009424:	b004      	add	sp, #16
 8009426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800942a:	2364      	movs	r3, #100	; 0x64
 800942c:	2200      	movs	r2, #0
 800942e:	e9cd 3200 	strd	r3, r2, [sp]
 8009432:	4621      	mov	r1, r4
 8009434:	4b27      	ldr	r3, [pc, #156]	; (80094d4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf4>)
 8009436:	4630      	mov	r0, r6
 8009438:	f009 fc0c 	bl	8012c54 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 800943c:	e7ec      	b.n	8009418 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 800943e:	2300      	movs	r3, #0
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	4a24      	ldr	r2, [pc, #144]	; (80094d4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf4>)
 8009444:	2364      	movs	r3, #100	; 0x64
 8009446:	4621      	mov	r1, r4
 8009448:	4630      	mov	r0, r6
 800944a:	f009 fc1f 	bl	8012c8c <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 800944e:	e7e3      	b.n	8009418 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8009450:	2364      	movs	r3, #100	; 0x64
 8009452:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8009456:	4621      	mov	r1, r4
 8009458:	4630      	mov	r0, r6
 800945a:	f009 fc31 	bl	8012cc0 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 800945e:	e7db      	b.n	8009418 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8009460:	2364      	movs	r3, #100	; 0x64
 8009462:	2200      	movs	r2, #0
 8009464:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009468:	230a      	movs	r3, #10
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	4621      	mov	r1, r4
 800946e:	4b19      	ldr	r3, [pc, #100]	; (80094d4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf4>)
 8009470:	4630      	mov	r0, r6
 8009472:	f009 fc59 	bl	8012d28 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8009476:	e7cf      	b.n	8009418 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8009478:	2500      	movs	r5, #0
 800947a:	f8c8 501c 	str.w	r5, [r8, #28]
 800947e:	f8da 3000 	ldr.w	r3, [sl]
 8009482:	f8d9 0000 	ldr.w	r0, [r9]
 8009486:	429d      	cmp	r5, r3
 8009488:	d30a      	bcc.n	80094a0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc0>
 800948a:	f8d9 0000 	ldr.w	r0, [r9]
 800948e:	f00a fa6f 	bl	8013970 <WS28xxMulti::IsUpdating()>
 8009492:	2800      	cmp	r0, #0
 8009494:	d1f9      	bne.n	800948a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xaa>
 8009496:	f8d9 0000 	ldr.w	r0, [r9]
 800949a:	f00a f903 	bl	80136a4 <WS28xxMulti::Update()>
 800949e:	e7bb      	b.n	8009418 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 80094a0:	6803      	ldr	r3, [r0, #0]
 80094a2:	2b07      	cmp	r3, #7
 80094a4:	f04f 0300 	mov.w	r3, #0
 80094a8:	d007      	beq.n	80094ba <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xda>
 80094aa:	e9cd 3300 	strd	r3, r3, [sp]
 80094ae:	462a      	mov	r2, r5
 80094b0:	4621      	mov	r1, r4
 80094b2:	f00a fadd 	bl	8013a70 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 80094b6:	3501      	adds	r5, #1
 80094b8:	e7e1      	b.n	800947e <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x9e>
 80094ba:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	462a      	mov	r2, r5
 80094c2:	4621      	mov	r1, r4
 80094c4:	f00a fb56 	bl	8013b74 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 80094c8:	e7f5      	b.n	80094b6 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd6>
 80094ca:	2000      	movs	r0, #0
 80094cc:	e7aa      	b.n	8009424 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x44>
 80094ce:	bf00      	nop
 80094d0:	20001280 	andcs	r1, r0, r0, lsl #5
 80094d4:	00646464 	rsbeq	r6, r4, r4, ror #8
 80094d8:	2000106c 	andcs	r1, r0, ip, rrx
 80094dc:	20001278 	andcs	r1, r0, r8, ror r2
 80094e0:	20001274 	andcs	r1, r0, r4, ror r2

080094e4 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)>:
 80094e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094e6:	780b      	ldrb	r3, [r1, #0]
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	4604      	mov	r4, r0
 80094ec:	d11e      	bne.n	800952c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x48>
 80094ee:	4b18      	ldr	r3, [pc, #96]	; (8009550 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x6c>)
 80094f0:	784d      	ldrb	r5, [r1, #1]
 80094f2:	6818      	ldr	r0, [r3, #0]
 80094f4:	4b17      	ldr	r3, [pc, #92]	; (8009554 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x70>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	429d      	cmp	r5, r3
 80094fa:	d017      	beq.n	800952c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x48>
 80094fc:	4629      	mov	r1, r5
 80094fe:	f7ff ff6f 	bl	80093e0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8009502:	b198      	cbz	r0, 800952c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x48>
 8009504:	b1a5      	cbz	r5, 8009530 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4c>
 8009506:	6863      	ldr	r3, [r4, #4]
 8009508:	4c13      	ldr	r4, [pc, #76]	; (8009558 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x74>)
 800950a:	2200      	movs	r2, #0
 800950c:	605a      	str	r2, [r3, #4]
 800950e:	6820      	ldr	r0, [r4, #0]
 8009510:	2106      	movs	r1, #6
 8009512:	f7ff febd 	bl	8009290 <Display::ClearLine(unsigned int)>
 8009516:	4628      	mov	r0, r5
 8009518:	6824      	ldr	r4, [r4, #0]
 800951a:	f009 fb79 	bl	8012c10 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 800951e:	4a0f      	ldr	r2, [pc, #60]	; (800955c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x78>)
 8009520:	9500      	str	r5, [sp, #0]
 8009522:	4603      	mov	r3, r0
 8009524:	2106      	movs	r1, #6
 8009526:	4620      	mov	r0, r4
 8009528:	f7ff feea 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 800952c:	b003      	add	sp, #12
 800952e:	bd30      	pop	{r4, r5, pc}
 8009530:	68a0      	ldr	r0, [r4, #8]
 8009532:	6803      	ldr	r3, [r0, #0]
 8009534:	2101      	movs	r1, #1
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	4798      	blx	r3
 800953a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 800953e:	605a      	str	r2, [r3, #4]
 8009540:	4b07      	ldr	r3, [pc, #28]	; (8009560 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x7c>)
 8009542:	6818      	ldr	r0, [r3, #0]
 8009544:	b003      	add	sp, #12
 8009546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800954a:	f00c bd2b 	b.w	8015fa4 <DisplayUdf::Show()>
 800954e:	bf00      	nop
 8009550:	2000127c 	andcs	r1, r0, ip, ror r2
 8009554:	20001280 	andcs	r1, r0, r0, lsl #5
 8009558:	2000fcb8 			; <UNDEFINED> instruction: 0x2000fcb8
 800955c:	0801aba5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, fp, sp, pc}
 8009560:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>

08009564 <Hardware::RebootHandler()>:
 8009564:	b508      	push	{r3, lr}
 8009566:	4b07      	ldr	r3, [pc, #28]	; (8009584 <Hardware::RebootHandler()+0x20>)
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	f00a f93f 	bl	80137ec <WS28xxMulti::Blackout()>
 800956e:	4b06      	ldr	r3, [pc, #24]	; (8009588 <Hardware::RebootHandler()+0x24>)
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	f008 fabb 	bl	8011aec <Dmx::Blackout()>
 8009576:	4b05      	ldr	r3, [pc, #20]	; (800958c <Hardware::RebootHandler()+0x28>)
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800957e:	f002 be07 	b.w	800c190 <ArtNetNode::Stop()>
 8009582:	bf00      	nop
 8009584:	20001288 	andcs	r1, r0, r8, lsl #5
 8009588:	20001064 	andcs	r1, r0, r4, rrx
 800958c:	200006d4 	ldrdcs	r0, [r0], -r4

08009590 <main>:
 8009590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	f5ad 5d5e 	sub.w	sp, sp, #14208	; 0x3780
 8009598:	b081      	sub	sp, #4
 800959a:	a806      	add	r0, sp, #24
 800959c:	f00e fd80 	bl	80180a0 <Hardware::Hardware()>
 80095a0:	a8e5      	add	r0, sp, #916	; 0x394
 80095a2:	f00b fb1b 	bl	8014bdc <Network::Network()>
 80095a6:	a825      	add	r0, sp, #148	; 0x94
 80095a8:	f00e fd1e 	bl	8017fe8 <LedBlink::LedBlink()>
 80095ac:	a8a9      	add	r0, sp, #676	; 0x2a4
 80095ae:	f00c fc23 	bl	8015df8 <DisplayUdf::DisplayUdf()>
 80095b2:	4abe      	ldr	r2, [pc, #760]	; (80098ac <main+0x31c>)
 80095b4:	4bbe      	ldr	r3, [pc, #760]	; (80098b0 <main+0x320>)
 80095b6:	49bf      	ldr	r1, [pc, #764]	; (80098b4 <main+0x324>)
 80095b8:	a807      	add	r0, sp, #28
 80095ba:	f00e fccf 	bl	8017f5c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 80095be:	a818      	add	r0, sp, #96	; 0x60
 80095c0:	f00d f92c 	bl	801681c <ConfigStore::ConfigStore()>
 80095c4:	49bc      	ldr	r1, [pc, #752]	; (80098b8 <main+0x328>)
 80095c6:	a807      	add	r0, sp, #28
 80095c8:	f00e fd00 	bl	8017fcc <FirmwareVersion::Print(char const*)>
 80095cc:	4bbb      	ldr	r3, [pc, #748]	; (80098bc <main+0x32c>)
 80095ce:	2501      	movs	r5, #1
 80095d0:	f8c3 5818 	str.w	r5, [r3, #2072]	; 0x818
 80095d4:	2008      	movs	r0, #8
 80095d6:	f00e fe33 	bl	8018240 <operator new(unsigned int)>
 80095da:	4bb9      	ldr	r3, [pc, #740]	; (80098c0 <main+0x330>)
 80095dc:	6003      	str	r3, [r0, #0]
 80095de:	4bb9      	ldr	r3, [pc, #740]	; (80098c4 <main+0x334>)
 80095e0:	49b9      	ldr	r1, [pc, #740]	; (80098c8 <main+0x338>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3b00      	subs	r3, #0
 80095e6:	bf18      	it	ne
 80095e8:	2301      	movne	r3, #1
 80095ea:	7103      	strb	r3, [r0, #4]
 80095ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80095f0:	9027      	str	r0, [sp, #156]	; 0x9c
 80095f2:	ab25      	add	r3, sp, #148	; 0x94
 80095f4:	a8a9      	add	r0, sp, #676	; 0x2a4
 80095f6:	2303      	movs	r3, #3
 80095f8:	f7ff fe9c 	bl	8009334 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80095fc:	a810      	add	r0, sp, #64	; 0x40
 80095fe:	f00d fb05 	bl	8016c0c <StoreNetwork::StoreNetwork()>
 8009602:	abe5      	add	r3, sp, #916	; 0x394
 8009604:	aa11      	add	r2, sp, #68	; 0x44
 8009606:	4618      	mov	r0, r3
 8009608:	a910      	add	r1, sp, #64	; 0x40
 800960a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800960e:	f00b fb3d 	bl	8014c8c <Network::Init(NetworkParamsStore*)>
 8009612:	a8e5      	add	r0, sp, #916	; 0x394
 8009614:	f00b fd9c 	bl	8015150 <Network::Print()>
 8009618:	49ac      	ldr	r1, [pc, #688]	; (80098cc <main+0x33c>)
 800961a:	2303      	movs	r3, #3
 800961c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009620:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009622:	f7ff fe87 	bl	8009334 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009626:	a808      	add	r0, sp, #32
 8009628:	f00a ff14 	bl	8014454 <MDNS::MDNS()>
 800962c:	2400      	movs	r4, #0
 800962e:	a808      	add	r0, sp, #32
 8009630:	f00a ffd0 	bl	80145d4 <MDNS::Start()>
 8009634:	4aa6      	ldr	r2, [pc, #664]	; (80098d0 <main+0x340>)
 8009636:	f642 1305 	movw	r3, #10501	; 0x2905
 800963a:	4621      	mov	r1, r4
 800963c:	e9cd 4400 	strd	r4, r4, [sp]
 8009640:	a808      	add	r0, sp, #32
 8009642:	f00b f935 	bl	80148b0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8009646:	4ba3      	ldr	r3, [pc, #652]	; (80098d4 <main+0x344>)
 8009648:	4aa3      	ldr	r2, [pc, #652]	; (80098d8 <main+0x348>)
 800964a:	4621      	mov	r1, r4
 800964c:	e9cd 5300 	strd	r5, r3, [sp]
 8009650:	a808      	add	r0, sp, #32
 8009652:	2350      	movs	r3, #80	; 0x50
 8009654:	f00b f92c 	bl	80148b0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8009658:	a808      	add	r0, sp, #32
 800965a:	f00b fa71 	bl	8014b40 <MDNS::Print()>
 800965e:	a858      	add	r0, sp, #352	; 0x160
 8009660:	f001 ffca 	bl	800b5f8 <HttpDaemon::HttpDaemon()>
 8009664:	a858      	add	r0, sp, #352	; 0x160
 8009666:	f001 ffdb 	bl	800b620 <HttpDaemon::Start()>
 800966a:	2303      	movs	r3, #3
 800966c:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 8009670:	499a      	ldr	r1, [pc, #616]	; (80098dc <main+0x34c>)
 8009672:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009674:	f7ff fe5e 	bl	8009334 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009678:	2140      	movs	r1, #64	; 0x40
 800967a:	a812      	add	r0, sp, #72	; 0x48
 800967c:	f00d fd1a 	bl	80170b4 <StoreArtNet::StoreArtNet(unsigned int)>
 8009680:	a912      	add	r1, sp, #72	; 0x48
 8009682:	a8c2      	add	r0, sp, #776	; 0x308
 8009684:	f004 fb9c 	bl	800ddc0 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8009688:	f50d 60a7 	add.w	r0, sp, #1336	; 0x538
 800968c:	f002 fc98 	bl	800bfc0 <ArtNet4Node::ArtNet4Node()>
 8009690:	a8c2      	add	r0, sp, #776	; 0x308
 8009692:	f004 fbb5 	bl	800de00 <ArtNetParams::Load()>
 8009696:	b130      	cbz	r0, 80096a6 <main+0x116>
 8009698:	a8c2      	add	r0, sp, #776	; 0x308
 800969a:	f004 ffe7 	bl	800e66c <ArtNetParams::Dump()>
 800969e:	2140      	movs	r1, #64	; 0x40
 80096a0:	a8c2      	add	r0, sp, #776	; 0x308
 80096a2:	f004 ff4d 	bl	800e540 <ArtNetParams::Set(unsigned int)>
 80096a6:	ab6c      	add	r3, sp, #432	; 0x1b0
 80096a8:	21aa      	movs	r1, #170	; 0xaa
 80096aa:	2203      	movs	r2, #3
 80096ac:	e9c3 2100 	strd	r2, r1, [r3]
 80096b0:	2006      	movs	r0, #6
 80096b2:	2200      	movs	r2, #0
 80096b4:	e9c3 0202 	strd	r0, r2, [r3, #8]
 80096b8:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80096bc:	611a      	str	r2, [r3, #16]
 80096be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096c2:	829a      	strh	r2, [r3, #20]
 80096c4:	4a86      	ldr	r2, [pc, #536]	; (80098e0 <main+0x350>)
 80096c6:	619a      	str	r2, [r3, #24]
 80096c8:	2201      	movs	r2, #1
 80096ca:	6259      	str	r1, [r3, #36]	; 0x24
 80096cc:	e9c3 2207 	strd	r2, r2, [r3, #28]
 80096d0:	859a      	strh	r2, [r3, #44]	; 0x2c
 80096d2:	a814      	add	r0, sp, #80	; 0x50
 80096d4:	f00d fe32 	bl	801733c <StorePixelDmx::StorePixelDmx()>
 80096d8:	a914      	add	r1, sp, #80	; 0x50
 80096da:	a884      	add	r0, sp, #528	; 0x210
 80096dc:	f008 fc68 	bl	8011fb0 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 80096e0:	a884      	add	r0, sp, #528	; 0x210
 80096e2:	f008 fc85 	bl	8011ff0 <PixelDmxParams::Load()>
 80096e6:	b130      	cbz	r0, 80096f6 <main+0x166>
 80096e8:	a884      	add	r0, sp, #528	; 0x210
 80096ea:	f008 ffd5 	bl	8012698 <PixelDmxParams::Dump()>
 80096ee:	a96c      	add	r1, sp, #432	; 0x1b0
 80096f0:	a884      	add	r0, sp, #528	; 0x210
 80096f2:	f008 ff8c 	bl	801260e <PixelDmxParams::Set(PixelDmxConfiguration*)>
 80096f6:	f50d 7813 	add.w	r8, sp, #588	; 0x24c
 80096fa:	a96c      	add	r1, sp, #432	; 0x1b0
 80096fc:	4640      	mov	r0, r8
 80096fe:	f008 fb6f 	bl	8011de0 <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)>
 8009702:	2004      	movs	r0, #4
 8009704:	f00e fd9c 	bl	8018240 <operator new(unsigned int)>
 8009708:	4b76      	ldr	r3, [pc, #472]	; (80098e4 <main+0x354>)
 800970a:	6003      	str	r3, [r0, #0]
 800970c:	4604      	mov	r4, r0
 800970e:	2304      	movs	r3, #4
 8009710:	4875      	ldr	r0, [pc, #468]	; (80098e8 <main+0x358>)
 8009712:	2200      	movs	r2, #0
 8009714:	2101      	movs	r1, #1
 8009716:	f00f fd63 	bl	80191e0 <gpio_mode_set>
 800971a:	2304      	movs	r3, #4
 800971c:	2202      	movs	r2, #2
 800971e:	4872      	ldr	r0, [pc, #456]	; (80098e8 <main+0x358>)
 8009720:	2100      	movs	r1, #0
 8009722:	f00f fd7d 	bl	8019220 <gpio_output_options_set>
 8009726:	4b65      	ldr	r3, [pc, #404]	; (80098bc <main+0x32c>)
 8009728:	2204      	movs	r2, #4
 800972a:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 800972e:	f8d8 7020 	ldr.w	r7, [r8, #32]
 8009732:	f8c8 404c 	str.w	r4, [r8, #76]	; 0x4c
 8009736:	f8d8 902c 	ldr.w	r9, [r8, #44]	; 0x2c
 800973a:	2400      	movs	r4, #0
 800973c:	4625      	mov	r5, r4
 800973e:	f20d 5a3c 	addw	sl, sp, #1340	; 0x53c
 8009742:	42bc      	cmp	r4, r7
 8009744:	f040 82d5 	bne.w	8009cf2 <main+0x762>
 8009748:	f89d 9224 	ldrb.w	r9, [sp, #548]	; 0x224
 800974c:	4e67      	ldr	r6, [pc, #412]	; (80098ec <main+0x35c>)
 800974e:	4639      	mov	r1, r7
 8009750:	a809      	add	r0, sp, #36	; 0x24
 8009752:	ab84      	add	r3, sp, #528	; 0x210
 8009754:	f009 fa36 	bl	8012bc4 <PixelPatterns::PixelPatterns(unsigned int)>
 8009758:	4649      	mov	r1, r9
 800975a:	a809      	add	r0, sp, #36	; 0x24
 800975c:	f8c6 9000 	str.w	r9, [r6]
 8009760:	f7ff fe3e 	bl	80093e0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8009764:	f89d 5310 	ldrb.w	r5, [sp, #784]	; 0x310
 8009768:	f89d 3311 	ldrb.w	r3, [sp, #785]	; 0x311
 800976c:	f8bd 4381 	ldrh.w	r4, [sp, #897]	; 0x381
 8009770:	022d      	lsls	r5, r5, #8
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	f004 0403 	and.w	r4, r4, #3
 8009778:	f405 45fe 	and.w	r5, r5, #32512	; 0x7f00
 800977c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009780:	2c01      	cmp	r4, #1
 8009782:	aac2      	add	r2, sp, #776	; 0x308
 8009784:	ea45 0503 	orr.w	r5, r5, r3
 8009788:	f040 82d6 	bne.w	8009d38 <main+0x7a8>
 800978c:	f892 306b 	ldrb.w	r3, [r2, #107]	; 0x6b
 8009790:	2140      	movs	r1, #64	; 0x40
 8009792:	432b      	orrs	r3, r5
 8009794:	4622      	mov	r2, r4
 8009796:	f20d 503c 	addw	r0, sp, #1340	; 0x53c
 800979a:	f003 f864 	bl	800c866 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800979e:	f8bd 2381 	ldrh.w	r2, [sp, #897]	; 0x381
 80097a2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80097a6:	2a01      	cmp	r2, #1
 80097a8:	abc2      	add	r3, sp, #776	; 0x308
 80097aa:	d108      	bne.n	80097be <main+0x22e>
 80097ac:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80097b0:	2141      	movs	r1, #65	; 0x41
 80097b2:	432b      	orrs	r3, r5
 80097b4:	f20d 503c 	addw	r0, sp, #1340	; 0x53c
 80097b8:	f003 f855 	bl	800c866 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 80097bc:	3401      	adds	r4, #1
 80097be:	a80a      	add	r0, sp, #40	; 0x28
 80097c0:	f00d f98c 	bl	8016adc <StoreDmxSend::StoreDmxSend()>
 80097c4:	a90a      	add	r1, sp, #40	; 0x28
 80097c6:	a821      	add	r0, sp, #132	; 0x84
 80097c8:	f007 fd0e 	bl	80111e8 <DmxParams::DmxParams(DmxParamsStore*)>
 80097cc:	a83d      	add	r0, sp, #244	; 0xf4
 80097ce:	f008 f861 	bl	8011894 <Dmx::Dmx()>
 80097d2:	a821      	add	r0, sp, #132	; 0x84
 80097d4:	f007 fd14 	bl	8011200 <DmxParams::Load()>
 80097d8:	b130      	cbz	r0, 80097e8 <main+0x258>
 80097da:	a821      	add	r0, sp, #132	; 0x84
 80097dc:	f007 fe62 	bl	80114a4 <DmxParams::Dump()>
 80097e0:	a93d      	add	r1, sp, #244	; 0xf4
 80097e2:	a821      	add	r0, sp, #132	; 0x84
 80097e4:	f007 fe30 	bl	8011448 <DmxParams::Set(Dmx*)>
 80097e8:	ab0b      	add	r3, sp, #44	; 0x2c
 80097ea:	4a41      	ldr	r2, [pc, #260]	; (80098f0 <main+0x360>)
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
 80097f2:	4658      	mov	r0, fp
 80097f4:	f007 fc9e 	bl	8011134 <DmxSend::Print()>
 80097f8:	2c00      	cmp	r4, #0
 80097fa:	f000 829f 	beq.w	8009d3c <main+0x7ac>
 80097fe:	2001      	movs	r0, #1
 8009800:	f00e fd1e 	bl	8018240 <operator new(unsigned int)>
 8009804:	4b3b      	ldr	r3, [pc, #236]	; (80098f4 <main+0x364>)
 8009806:	4605      	mov	r5, r0
 8009808:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	f00b fa14 	bl	8014c3a <Network::Begin(unsigned short)>
 8009812:	4b39      	ldr	r3, [pc, #228]	; (80098f8 <main+0x368>)
 8009814:	6018      	str	r0, [r3, #0]
 8009816:	2201      	movs	r2, #1
 8009818:	f50d 6aa7 	add.w	sl, sp, #1336	; 0x538
 800981c:	aba9      	add	r3, sp, #676	; 0x2a4
 800981e:	e9c3 2417 	strd	r2, r4, [r3, #92]	; 0x5c
 8009822:	ab13      	add	r3, sp, #76	; 0x4c
 8009824:	f8ca 3020 	str.w	r3, [sl, #32]
 8009828:	6833      	ldr	r3, [r6, #0]
 800982a:	4834      	ldr	r0, [pc, #208]	; (80098fc <main+0x36c>)
 800982c:	2b00      	cmp	r3, #0
 800982e:	bf0c      	ite	eq
 8009830:	4641      	moveq	r1, r8
 8009832:	2100      	movne	r1, #0
 8009834:	ab1b      	add	r3, sp, #108	; 0x6c
 8009836:	2c00      	cmp	r4, #0
 8009838:	bf14      	ite	ne
 800983a:	465a      	movne	r2, fp
 800983c:	2200      	moveq	r2, #0
 800983e:	e9c3 0100 	strd	r0, r1, [r3]
 8009842:	609a      	str	r2, [r3, #8]
 8009844:	a81b      	add	r0, sp, #108	; 0x6c
 8009846:	f7ff fc69 	bl	800911c <LightSet64with4::Print()>
 800984a:	ab1e      	add	r3, sp, #120	; 0x78
 800984c:	a81b      	add	r0, sp, #108	; 0x6c
 800984e:	4a2c      	ldr	r2, [pc, #176]	; (8009900 <main+0x370>)
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	e9c3 0801 	strd	r0, r8, [r3, #4]
 8009856:	4b2b      	ldr	r3, [pc, #172]	; (8009904 <main+0x374>)
 8009858:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8009914 <main+0x384>
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f8ca 0008 	str.w	r0, [sl, #8]
 8009862:	aa1e      	add	r2, sp, #120	; 0x78
 8009864:	615a      	str	r2, [r3, #20]
 8009866:	4650      	mov	r0, sl
 8009868:	f002 fc02 	bl	800c070 <ArtNet4Node::Print()>
 800986c:	4926      	ldr	r1, [pc, #152]	; (8009908 <main+0x378>)
 800986e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8009872:	2303      	movs	r3, #3
 8009874:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009876:	f7ff fd5d 	bl	8009334 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800987a:	f8d8 3000 	ldr.w	r3, [r8]
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	f009 f872 	bl	8012968 <PixelType::GetType(pixel::Type)>
 8009884:	9402      	str	r4, [sp, #8]
 8009886:	ab2b      	add	r3, sp, #172	; 0xac
 8009888:	9305      	str	r3, [sp, #20]
 800988a:	f8d8 3000 	ldr.w	r3, [r8]
 800988e:	4a1f      	ldr	r2, [pc, #124]	; (800990c <main+0x37c>)
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	2120      	movs	r1, #32
 8009894:	e9cd 0300 	strd	r0, r3, [sp]
 8009898:	463b      	mov	r3, r7
 800989a:	9805      	ldr	r0, [sp, #20]
 800989c:	f000 fe24 	bl	800a4e8 <snprintf>
 80098a0:	ab34      	add	r3, sp, #208	; 0xd0
 80098a2:	4a1b      	ldr	r2, [pc, #108]	; (8009910 <main+0x380>)
 80098a4:	9304      	str	r3, [sp, #16]
 80098a6:	4618      	mov	r0, r3
 80098a8:	e036      	b.n	8009918 <main+0x388>
 80098aa:	bf00      	nop
 80098ac:	0801abb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, fp, sp, pc}
 80098b0:	0801abab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, sp, pc}
 80098b4:	0801ad5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, fp, sp, pc}
 80098b8:	0801abc0 	stmdaeq	r1, {r6, r7, r8, r9, fp, sp, pc}
 80098bc:	40020000 	andmi	r0, r2, r0
 80098c0:	0801aca8 	stmdaeq	r1, {r3, r5, r7, sl, fp, sp, pc}
 80098c4:	2000fcb8 			; <UNDEFINED> instruction: 0x2000fcb8
 80098c8:	0801d4c9 	stmdaeq	r1, {r0, r3, r6, r7, sl, ip, lr, pc}
 80098cc:	0801d4b8 	stmdaeq	r1, {r3, r4, r5, r7, sl, ip, lr, pc}
 80098d0:	0801ac00 	stmdaeq	r1, {sl, fp, sp, pc}
 80098d4:	0801ac10 	stmdaeq	r1, {r4, sl, fp, sp, pc}
 80098d8:	0801ac09 	stmdaeq	r1, {r0, r3, sl, fp, sp, pc}
 80098dc:	0801bfa1 	stmdaeq	r1, {r0, r5, r7, r8, r9, sl, fp, ip, sp, pc}
 80098e0:	0801ad61 	stmdaeq	r1, {r0, r5, r6, r8, sl, fp, sp, pc}
 80098e4:	0801ad08 	stmdaeq	r1, {r3, r8, sl, fp, sp, pc}
 80098e8:	40020800 	andmi	r0, r2, r0, lsl #16
 80098ec:	20001280 	andcs	r1, r0, r0, lsl #5
 80098f0:	0801c908 	stmdaeq	r1, {r3, r8, fp, lr, pc}
 80098f4:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 80098f8:	20000010 	andcs	r0, r0, r0, lsl r0
 80098fc:	0801acbc 	stmdaeq	r1, {r2, r3, r4, r5, r7, sl, fp, sp, pc}
 8009900:	0801acf4 	stmdaeq	r1, {r2, r4, r5, r6, r7, sl, fp, sp, pc}
 8009904:	200006d4 	ldrdcs	r0, [r0], -r4
 8009908:	0801c470 	stmdaeq	r1, {r4, r5, r6, sl, lr, pc}
 800990c:	0801ac27 	stmdaeq	r1, {r0, r1, r2, r5, sl, fp, sp, pc}
 8009910:	0801ac45 	stmdaeq	r1, {r0, r2, r6, sl, fp, sp, pc}
 8009914:	20001288 	andcs	r1, r0, r8, lsl #5
 8009918:	2120      	movs	r1, #32
 800991a:	f000 fde5 	bl	800a4e8 <snprintf>
 800991e:	4604      	mov	r4, r0
 8009920:	202c      	movs	r0, #44	; 0x2c
 8009922:	f00e fc8d 	bl	8018240 <operator new(unsigned int)>
 8009926:	4603      	mov	r3, r0
 8009928:	2200      	movs	r2, #0
 800992a:	6042      	str	r2, [r0, #4]
 800992c:	6282      	str	r2, [r0, #40]	; 0x28
 800992e:	f823 2b08 	strh.w	r2, [r3], #8
 8009932:	9a05      	ldr	r2, [sp, #20]
 8009934:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 8009938:	f812 1b01 	ldrb.w	r1, [r2], #1
 800993c:	b111      	cbz	r1, 8009944 <main+0x3b4>
 800993e:	4563      	cmp	r3, ip
 8009940:	f040 81fe 	bne.w	8009d40 <main+0x7b0>
 8009944:	2201      	movs	r2, #1
 8009946:	900c      	str	r0, [sp, #48]	; 0x30
 8009948:	a90c      	add	r1, sp, #48	; 0x30
 800994a:	f20d 405c 	addw	r0, sp, #1116	; 0x45c
 800994e:	ab0c      	add	r3, sp, #48	; 0x30
 8009950:	f006 fbbe 	bl	80100d0 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
 8009954:	f50d 60a5 	add.w	r0, sp, #1320	; 0x528
 8009958:	f006 f936 	bl	800fbc8 <LLRPDevice::LLRPDevice()>
 800995c:	f20d 4a5c 	addw	sl, sp, #1116	; 0x45c
 8009960:	4bb6      	ldr	r3, [pc, #728]	; (8009c3c <main+0x6ac>)
 8009962:	f8ca 3000 	str.w	r3, [sl]
 8009966:	3324      	adds	r3, #36	; 0x24
 8009968:	f8ca 30cc 	str.w	r3, [sl, #204]	; 0xcc
 800996c:	2100      	movs	r1, #0
 800996e:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
 8009972:	f006 fd99 	bl	80104a8 <RDMHandler::RDMHandler(bool)>
 8009976:	4bb2      	ldr	r3, [pc, #712]	; (8009c40 <main+0x6b0>)
 8009978:	49b2      	ldr	r1, [pc, #712]	; (8009c44 <main+0x6b4>)
 800997a:	6818      	ldr	r0, [r3, #0]
 800997c:	f00e fc00 	bl	8018180 <Hardware::GetUuid(unsigned char*)>
 8009980:	b2e4      	uxtb	r4, r4
 8009982:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8009986:	2c20      	cmp	r4, #32
 8009988:	bf28      	it	cs
 800998a:	2420      	movcs	r4, #32
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 81dd 	beq.w	8009d4c <main+0x7bc>
 8009992:	f20d 4b6b 	addw	fp, sp, #1131	; 0x46b
 8009996:	9904      	ldr	r1, [sp, #16]
 8009998:	4622      	mov	r2, r4
 800999a:	4658      	mov	r0, fp
 800999c:	f7ff fb63 	bl	8009066 <memcpy>
 80099a0:	f8da 007c 	ldr.w	r0, [sl, #124]	; 0x7c
 80099a4:	f88a 402f 	strb.w	r4, [sl, #47]	; 0x2f
 80099a8:	b120      	cbz	r0, 80099b4 <main+0x424>
 80099aa:	6803      	ldr	r3, [r0, #0]
 80099ac:	4622      	mov	r2, r4
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	4659      	mov	r1, fp
 80099b2:	4798      	blx	r3
 80099b4:	f20d 435c 	addw	r3, sp, #1116	; 0x45c
 80099b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80099c0:	f240 6201 	movw	r2, #1537	; 0x601
 80099c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80099c8:	f20d 4161 	addw	r1, sp, #1121	; 0x461
 80099cc:	2201      	movs	r2, #1
 80099ce:	f20d 503c 	addw	r0, sp, #1340	; 0x53c
 80099d2:	f003 ffee 	bl	800d9b2 <ArtNetNode::SetRdmUID(unsigned char const*, bool)>
 80099d6:	f20d 405c 	addw	r0, sp, #1116	; 0x45c
 80099da:	f006 fbc7 	bl	801016c <RDMDeviceResponder::Init()>
 80099de:	a816      	add	r0, sp, #88	; 0x58
 80099e0:	f00d fbce 	bl	8017180 <StoreRDMDevice::StoreRDMDevice()>
 80099e4:	a916      	add	r1, sp, #88	; 0x58
 80099e6:	a878      	add	r0, sp, #480	; 0x1e0
 80099e8:	f006 fb00 	bl	800ffec <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 80099ec:	a878      	add	r0, sp, #480	; 0x1e0
 80099ee:	f006 fb0f 	bl	8010010 <RDMDeviceParams::Load()>
 80099f2:	b138      	cbz	r0, 8009a04 <main+0x474>
 80099f4:	a878      	add	r0, sp, #480	; 0x1e0
 80099f6:	f006 fb4d 	bl	8010094 <RDMDeviceParams::Dump()>
 80099fa:	f50d 618c 	add.w	r1, sp, #1120	; 0x460
 80099fe:	a878      	add	r0, sp, #480	; 0x1e0
 8009a00:	f006 fb11 	bl	8010026 <RDMDeviceParams::Set(RDMDevice*)>
 8009a04:	f20d 425c 	addw	r2, sp, #1116	; 0x45c
 8009a08:	ab17      	add	r3, sp, #92	; 0x5c
 8009a0a:	67d3      	str	r3, [r2, #124]	; 0x7c
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	f006 f9f3 	bl	800fdf8 <RDMNetDevice::Print()>
 8009a12:	f8d8 3000 	ldr.w	r3, [r8]
 8009a16:	498c      	ldr	r1, [pc, #560]	; (8009c48 <main+0x6b8>)
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	463a      	mov	r2, r7
 8009a1c:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009a1e:	f00c fa01 	bl	8015e24 <DisplayUdf::SetTitle(char const*, ...)>
 8009a22:	2202      	movs	r2, #2
 8009a24:	4611      	mov	r1, r2
 8009a26:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009a28:	f00c fa10 	bl	8015e4c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009a2c:	2206      	movs	r2, #6
 8009a2e:	2103      	movs	r1, #3
 8009a30:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009a32:	f00c fa0b 	bl	8015e4c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009a36:	2203      	movs	r2, #3
 8009a38:	2104      	movs	r1, #4
 8009a3a:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009a3c:	f00c fa06 	bl	8015e4c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009a40:	ac6c      	add	r4, sp, #432	; 0x1b0
 8009a42:	2208      	movs	r2, #8
 8009a44:	2105      	movs	r1, #5
 8009a46:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009a48:	f00c fa00 	bl	8015e4c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009a4c:	2213      	movs	r2, #19
 8009a4e:	2106      	movs	r1, #6
 8009a50:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009a52:	f00c f9fb 	bl	8015e4c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8009a56:	6820      	ldr	r0, [r4, #0]
 8009a58:	f008 ff86 	bl	8012968 <PixelType::GetType(pixel::Type)>
 8009a5c:	9004      	str	r0, [sp, #16]
 8009a5e:	68a0      	ldr	r0, [r4, #8]
 8009a60:	6867      	ldr	r7, [r4, #4]
 8009a62:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8009a66:	f008 ffd7 	bl	8012a18 <PixelType::GetMap(pixel::Map)>
 8009a6a:	9b04      	ldr	r3, [sp, #16]
 8009a6c:	4a77      	ldr	r2, [pc, #476]	; (8009c4c <main+0x6bc>)
 8009a6e:	9700      	str	r7, [sp, #0]
 8009a70:	2107      	movs	r1, #7
 8009a72:	e9cd 8001 	strd	r8, r0, [sp, #4]
 8009a76:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009a78:	f7ff fc42 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 8009a7c:	a80d      	add	r0, sp, #52	; 0x34
 8009a7e:	f00c fff7 	bl	8016a70 <StoreDisplayUdf::StoreDisplayUdf()>
 8009a82:	ab62      	add	r3, sp, #392	; 0x188
 8009a84:	a90d      	add	r1, sp, #52	; 0x34
 8009a86:	4618      	mov	r0, r3
 8009a88:	9304      	str	r3, [sp, #16]
 8009a8a:	f00c fb55 	bl	8016138 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8009a8e:	9804      	ldr	r0, [sp, #16]
 8009a90:	f00c fb5f 	bl	8016152 <DisplayUdfParams::Load()>
 8009a94:	b130      	cbz	r0, 8009aa4 <main+0x514>
 8009a96:	9804      	ldr	r0, [sp, #16]
 8009a98:	a9a9      	add	r1, sp, #676	; 0x2a4
 8009a9a:	f00c fc94 	bl	80163c6 <DisplayUdfParams::Set(DisplayUdf*)>
 8009a9e:	9804      	ldr	r0, [sp, #16]
 8009aa0:	f00c fcc3 	bl	801642a <DisplayUdfParams::Dump()>
 8009aa4:	f20d 513c 	addw	r1, sp, #1340	; 0x53c
 8009aa8:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009aaa:	f00c fdad 	bl	8016608 <DisplayUdf::Show(ArtNetNode*)>
 8009aae:	f1b9 0f00 	cmp.w	r9, #0
 8009ab2:	d00e      	beq.n	8009ad2 <main+0x542>
 8009ab4:	2106      	movs	r1, #6
 8009ab6:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009ab8:	f7ff fbea 	bl	8009290 <Display::ClearLine(unsigned int)>
 8009abc:	4648      	mov	r0, r9
 8009abe:	f009 f8a7 	bl	8012c10 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8009ac2:	4a63      	ldr	r2, [pc, #396]	; (8009c50 <main+0x6c0>)
 8009ac4:	f8cd 9000 	str.w	r9, [sp]
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2106      	movs	r1, #6
 8009acc:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009ace:	f7ff fc17 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 8009ad2:	f89d 3f56 	ldrb.w	r3, [sp, #3926]	; 0xf56
 8009ad6:	2203      	movs	r2, #3
 8009ad8:	2100      	movs	r1, #0
 8009ada:	a846      	add	r0, sp, #280	; 0x118
 8009adc:	f001 f822 	bl	800ab24 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8009ae0:	a80e      	add	r0, sp, #56	; 0x38
 8009ae2:	f00d f8cb 	bl	8016c7c <StoreRemoteConfig::StoreRemoteConfig()>
 8009ae6:	ab4f      	add	r3, sp, #316	; 0x13c
 8009ae8:	a90e      	add	r1, sp, #56	; 0x38
 8009aea:	4618      	mov	r0, r3
 8009aec:	9304      	str	r3, [sp, #16]
 8009aee:	f001 fb49 	bl	800b184 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8009af2:	9804      	ldr	r0, [sp, #16]
 8009af4:	f001 fb50 	bl	800b198 <RemoteConfigParams::Load()>
 8009af8:	b130      	cbz	r0, 8009b08 <main+0x578>
 8009afa:	9804      	ldr	r0, [sp, #16]
 8009afc:	f001 fc93 	bl	800b426 <RemoteConfigParams::Dump()>
 8009b00:	9804      	ldr	r0, [sp, #16]
 8009b02:	a946      	add	r1, sp, #280	; 0x118
 8009b04:	f001 fc6f 	bl	800b3e6 <RemoteConfigParams::Set(RemoteConfig*)>
 8009b08:	a818      	add	r0, sp, #96	; 0x60
 8009b0a:	f00c ff2f 	bl	801696c <ConfigStore::Flash()>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d1fa      	bne.n	8009b08 <main+0x578>
 8009b12:	4c50      	ldr	r4, [pc, #320]	; (8009c54 <main+0x6c4>)
 8009b14:	4950      	ldr	r1, [pc, #320]	; (8009c58 <main+0x6c8>)
 8009b16:	2303      	movs	r3, #3
 8009b18:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8009b1c:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009b1e:	f7ff fc09 	bl	8009334 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009b22:	f241 51c1 	movw	r1, #5569	; 0x15c1
 8009b26:	6820      	ldr	r0, [r4, #0]
 8009b28:	f00b f887 	bl	8014c3a <Network::Begin(unsigned short)>
 8009b2c:	4b4b      	ldr	r3, [pc, #300]	; (8009c5c <main+0x6cc>)
 8009b2e:	6018      	str	r0, [r3, #0]
 8009b30:	4b4b      	ldr	r3, [pc, #300]	; (8009c60 <main+0x6d0>)
 8009b32:	4601      	mov	r1, r0
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	6820      	ldr	r0, [r4, #0]
 8009b38:	f00b f890 	bl	8014c5c <Network::JoinGroup(int, unsigned int)>
 8009b3c:	4949      	ldr	r1, [pc, #292]	; (8009c64 <main+0x6d4>)
 8009b3e:	2302      	movs	r3, #2
 8009b40:	f248 0280 	movw	r2, #32896	; 0x8080
 8009b44:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009b46:	f7ff fbf5 	bl	8009334 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009b4a:	4947      	ldr	r1, [pc, #284]	; (8009c68 <main+0x6d8>)
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8009b52:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009b54:	f7ff fbee 	bl	8009334 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009b58:	f50d 60a7 	add.w	r0, sp, #1336	; 0x538
 8009b5c:	f002 fa42 	bl	800bfe4 <ArtNet4Node::Start()>
 8009b60:	f248 0280 	movw	r2, #32896	; 0x8080
 8009b64:	2302      	movs	r3, #2
 8009b66:	4941      	ldr	r1, [pc, #260]	; (8009c6c <main+0x6dc>)
 8009b68:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009b6a:	f7ff fbe3 	bl	8009334 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009b6e:	2102      	movs	r1, #2
 8009b70:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009b74:	f00f fb0a 	bl	801918c <fwdgt_config>
 8009b78:	ab06      	add	r3, sp, #24
 8009b7a:	2801      	cmp	r0, #1
 8009b7c:	bf0c      	ite	eq
 8009b7e:	2201      	moveq	r2, #1
 8009b80:	2200      	movne	r2, #0
 8009b82:	701a      	strb	r2, [r3, #0]
 8009b84:	d101      	bne.n	8009b8a <main+0x5fa>
 8009b86:	f00f faf1 	bl	801916c <fwdgt_enable>
 8009b8a:	4f39      	ldr	r7, [pc, #228]	; (8009c70 <main+0x6e0>)
 8009b8c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8009c7c <main+0x6ec>
 8009b90:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8009c80 <main+0x6f0>
 8009b94:	f00f faf2 	bl	801917c <fwdgt_counter_reload>
 8009b98:	f7fe fce4 	bl	8008564 <net_handle>
 8009b9c:	f50d 60a7 	add.w	r0, sp, #1336	; 0x538
 8009ba0:	f002 fa54 	bl	800c04c <ArtNet4Node::Run()>
 8009ba4:	a846      	add	r0, sp, #280	; 0x118
 8009ba6:	f001 f989 	bl	800aebc <RemoteConfig::Run()>
 8009baa:	a818      	add	r0, sp, #96	; 0x60
 8009bac:	f00c fede 	bl	801696c <ConfigStore::Flash()>
 8009bb0:	6833      	ldr	r3, [r6, #0]
 8009bb2:	b113      	cbz	r3, 8009bba <main+0x62a>
 8009bb4:	a809      	add	r0, sp, #36	; 0x24
 8009bb6:	f009 fa4f 	bl	8013058 <PixelPatterns::Run()>
 8009bba:	2d00      	cmp	r5, #0
 8009bbc:	d062      	beq.n	8009c84 <main+0x6f4>
 8009bbe:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8009bc2:	492b      	ldr	r1, [pc, #172]	; (8009c70 <main+0x6e0>)
 8009bc4:	f898 0000 	ldrb.w	r0, [r8]
 8009bc8:	aa0f      	add	r2, sp, #60	; 0x3c
 8009bca:	f00a fb43 	bl	8014254 <udp_recv2>
 8009bce:	f1a0 030b 	sub.w	r3, r0, #11
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	2b05      	cmp	r3, #5
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	d854      	bhi.n	8009c84 <main+0x6f4>
 8009bda:	f8d7 a000 	ldr.w	sl, [r7]
 8009bde:	2204      	movs	r2, #4
 8009be0:	4651      	mov	r1, sl
 8009be2:	4648      	mov	r0, r9
 8009be4:	f7ff fa2f 	bl	8009046 <memcmp>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d14b      	bne.n	8009c84 <main+0x6f4>
 8009bec:	eb0a 0304 	add.w	r3, sl, r4
 8009bf0:	f10a 0104 	add.w	r1, sl, #4
 8009bf4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009bf8:	2b0a      	cmp	r3, #10
 8009bfa:	bf04      	itt	eq
 8009bfc:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8009c00:	b2a4      	uxtheq	r4, r4
 8009c02:	2c0a      	cmp	r4, #10
 8009c04:	f000 80ab 	beq.w	8009d5e <main+0x7ce>
 8009c08:	2c0e      	cmp	r4, #14
 8009c0a:	f200 80a8 	bhi.w	8009d5e <main+0x7ce>
 8009c0e:	4819      	ldr	r0, [pc, #100]	; (8009c74 <main+0x6e4>)
 8009c10:	9104      	str	r1, [sp, #16]
 8009c12:	2206      	movs	r2, #6
 8009c14:	f7ff fa17 	bl	8009046 <memcmp>
 8009c18:	9904      	ldr	r1, [sp, #16]
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	f040 809f 	bne.w	8009d5e <main+0x7ce>
 8009c20:	2104      	movs	r1, #4
 8009c22:	f10a 000a 	add.w	r0, sl, #10
 8009c26:	f7ff faa3 	bl	8009170 <dmxconfigudp::atoi(char const*, unsigned int)>
 8009c2a:	285b      	cmp	r0, #91	; 0x5b
 8009c2c:	4601      	mov	r1, r0
 8009c2e:	d929      	bls.n	8009c84 <main+0x6f4>
 8009c30:	4b11      	ldr	r3, [pc, #68]	; (8009c78 <main+0x6e8>)
 8009c32:	6818      	ldr	r0, [r3, #0]
 8009c34:	f007 ff0a 	bl	8011a4c <Dmx::SetDmxBreakTime(unsigned int)>
 8009c38:	e024      	b.n	8009c84 <main+0x6f4>
 8009c3a:	bf00      	nop
 8009c3c:	0801ad20 	stmdaeq	r1, {r5, r8, sl, fp, sp, pc}
 8009c40:	2001067c 	andcs	r0, r1, ip, ror r6
 8009c44:	20000805 	andcs	r0, r0, r5, lsl #16
 8009c48:	0801ac5a 	stmdaeq	r1, {r1, r3, r4, r6, sl, fp, sp, pc}
 8009c4c:	0801ac6f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, sl, fp, sp, pc}
 8009c50:	0801aba5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, fp, sp, pc}
 8009c54:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 8009c58:	0801c492 	stmdaeq	r1, {r1, r4, r7, sl, lr, pc}
 8009c5c:	20000000 	andcs	r0, r0, r0
 8009c60:	200006f8 	strdcs	r0, [r0], -r8
 8009c64:	0801c483 	stmdaeq	r1, {r0, r1, r7, sl, lr, pc}
 8009c68:	0801bf90 	stmdaeq	r1, {r4, r7, r8, r9, sl, fp, ip, sp, pc}
 8009c6c:	0801bfb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, pc}
 8009c70:	20001068 	andcs	r1, r0, r8, rrx
 8009c74:	0801ac81 	stmdaeq	r1, {r0, r7, sl, fp, sp, pc}
 8009c78:	20001064 	andcs	r1, r0, r4, rrx
 8009c7c:	20000010 	andcs	r0, r0, r0, lsl r0
 8009c80:	0801ac7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, sl, fp, sp, pc}
 8009c84:	a808      	add	r0, sp, #32
 8009c86:	f00a ff37 	bl	8014af8 <MDNS::Run()>
 8009c8a:	aca9      	add	r4, sp, #676	; 0x2a4
 8009c8c:	f50d 60a5 	add.w	r0, sp, #1320	; 0x528
 8009c90:	f006 f85c 	bl	800fd4c <LLRPDevice::Run()>
 8009c94:	a858      	add	r0, sp, #352	; 0x160
 8009c96:	f001 ff2f 	bl	800baf8 <HttpDaemon::Run()>
 8009c9a:	69e2      	ldr	r2, [r4, #28]
 8009c9c:	b172      	cbz	r2, 8009cbc <main+0x72c>
 8009c9e:	7e23      	ldrb	r3, [r4, #24]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f040 80ab 	bne.w	8009dfc <main+0x86c>
 8009ca6:	4b5c      	ldr	r3, [pc, #368]	; (8009e18 <main+0x888>)
 8009ca8:	6a21      	ldr	r1, [r4, #32]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	1a5b      	subs	r3, r3, r1
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d204      	bcs.n	8009cbc <main+0x72c>
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	7621      	strb	r1, [r4, #24]
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f00e f82e 	bl	8017d18 <ILI9341::EnableSleep(bool)>
 8009cbc:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8009cbe:	ab25      	add	r3, sp, #148	; 0x94
 8009cc0:	2c00      	cmp	r4, #0
 8009cc2:	f43f af67 	beq.w	8009b94 <main+0x604>
 8009cc6:	4954      	ldr	r1, [pc, #336]	; (8009e18 <main+0x888>)
 8009cc8:	6958      	ldr	r0, [r3, #20]
 8009cca:	680a      	ldr	r2, [r1, #0]
 8009ccc:	1a12      	subs	r2, r2, r0
 8009cce:	4294      	cmp	r4, r2
 8009cd0:	f63f af60 	bhi.w	8009b94 <main+0x604>
 8009cd4:	680a      	ldr	r2, [r1, #0]
 8009cd6:	615a      	str	r2, [r3, #20]
 8009cd8:	691a      	ldr	r2, [r3, #16]
 8009cda:	f082 0101 	eor.w	r1, r2, #1
 8009cde:	2a01      	cmp	r2, #1
 8009ce0:	6119      	str	r1, [r3, #16]
 8009ce2:	4b4e      	ldr	r3, [pc, #312]	; (8009e1c <main+0x88c>)
 8009ce4:	bf1a      	itte	ne
 8009ce6:	2201      	movne	r2, #1
 8009ce8:	f8c3 2818 	strne.w	r2, [r3, #2072]	; 0x818
 8009cec:	f8c3 2828 	streq.w	r2, [r3, #2088]	; 0x828
 8009cf0:	e750      	b.n	8009b94 <main+0x604>
 8009cf2:	2c0f      	cmp	r4, #15
 8009cf4:	d81e      	bhi.n	8009d34 <main+0x7a4>
 8009cf6:	aa84      	add	r2, sp, #528	; 0x210
 8009cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cfc:	6852      	ldr	r2, [r2, #4]
 8009cfe:	40a3      	lsls	r3, r4
 8009d00:	4393      	bics	r3, r2
 8009d02:	d117      	bne.n	8009d34 <main+0x7a4>
 8009d04:	ab84      	add	r3, sp, #528	; 0x210
 8009d06:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8009d0a:	2600      	movs	r6, #0
 8009d0c:	f8b3 b01a 	ldrh.w	fp, [r3, #26]
 8009d10:	b2b3      	uxth	r3, r6
 8009d12:	4599      	cmp	r9, r3
 8009d14:	eb05 0106 	add.w	r1, r5, r6
 8009d18:	d804      	bhi.n	8009d24 <main+0x794>
 8009d1a:	f1c9 0504 	rsb	r5, r9, #4
 8009d1e:	440d      	add	r5, r1
 8009d20:	3401      	adds	r4, #1
 8009d22:	e50e      	b.n	8009742 <main+0x1b2>
 8009d24:	445b      	add	r3, fp
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	2201      	movs	r2, #1
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	f002 fd9b 	bl	800c866 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8009d30:	3601      	adds	r6, #1
 8009d32:	e7ed      	b.n	8009d10 <main+0x780>
 8009d34:	3504      	adds	r5, #4
 8009d36:	e7f3      	b.n	8009d20 <main+0x790>
 8009d38:	2400      	movs	r4, #0
 8009d3a:	e530      	b.n	800979e <main+0x20e>
 8009d3c:	4625      	mov	r5, r4
 8009d3e:	e56a      	b.n	8009816 <main+0x286>
 8009d40:	f803 1b01 	strb.w	r1, [r3], #1
 8009d44:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009d46:	3101      	adds	r1, #1
 8009d48:	6281      	str	r1, [r0, #40]	; 0x28
 8009d4a:	e5f5      	b.n	8009938 <main+0x3a8>
 8009d4c:	9904      	ldr	r1, [sp, #16]
 8009d4e:	4622      	mov	r2, r4
 8009d50:	f20d 40b2 	addw	r0, sp, #1202	; 0x4b2
 8009d54:	f7ff f987 	bl	8009066 <memcpy>
 8009d58:	f88a 4076 	strb.w	r4, [sl, #118]	; 0x76
 8009d5c:	e62a      	b.n	80099b4 <main+0x424>
 8009d5e:	4830      	ldr	r0, [pc, #192]	; (8009e20 <main+0x890>)
 8009d60:	9104      	str	r1, [sp, #16]
 8009d62:	2204      	movs	r2, #4
 8009d64:	f7ff f96f 	bl	8009046 <memcmp>
 8009d68:	9904      	ldr	r1, [sp, #16]
 8009d6a:	b978      	cbnz	r0, 8009d8c <main+0x7fc>
 8009d6c:	2107      	movs	r1, #7
 8009d6e:	f10a 0008 	add.w	r0, sl, #8
 8009d72:	f7ff f9fd 	bl	8009170 <dmxconfigudp::atoi(char const*, unsigned int)>
 8009d76:	4b2b      	ldr	r3, [pc, #172]	; (8009e24 <main+0x894>)
 8009d78:	f1a0 020c 	sub.w	r2, r0, #12
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	4601      	mov	r1, r0
 8009d80:	d880      	bhi.n	8009c84 <main+0x6f4>
 8009d82:	4b29      	ldr	r3, [pc, #164]	; (8009e28 <main+0x898>)
 8009d84:	6818      	ldr	r0, [r3, #0]
 8009d86:	f007 fe6b 	bl	8011a60 <Dmx::SetDmxMabTime(unsigned int)>
 8009d8a:	e77b      	b.n	8009c84 <main+0x6f4>
 8009d8c:	2c0c      	cmp	r4, #12
 8009d8e:	d917      	bls.n	8009dc0 <main+0x830>
 8009d90:	2c0e      	cmp	r4, #14
 8009d92:	d82f      	bhi.n	8009df4 <main+0x864>
 8009d94:	4825      	ldr	r0, [pc, #148]	; (8009e2c <main+0x89c>)
 8009d96:	9104      	str	r1, [sp, #16]
 8009d98:	2208      	movs	r2, #8
 8009d9a:	f7ff f954 	bl	8009046 <memcmp>
 8009d9e:	9904      	ldr	r1, [sp, #16]
 8009da0:	bb40      	cbnz	r0, 8009df4 <main+0x864>
 8009da2:	2102      	movs	r1, #2
 8009da4:	f10a 000c 	add.w	r0, sl, #12
 8009da8:	f7ff f9e2 	bl	8009170 <dmxconfigudp::atoi(char const*, unsigned int)>
 8009dac:	4601      	mov	r1, r0
 8009dae:	b110      	cbz	r0, 8009db6 <main+0x826>
 8009db0:	4b1f      	ldr	r3, [pc, #124]	; (8009e30 <main+0x8a0>)
 8009db2:	fbb3 f1f0 	udiv	r1, r3, r0
 8009db6:	4b1c      	ldr	r3, [pc, #112]	; (8009e28 <main+0x898>)
 8009db8:	6818      	ldr	r0, [r3, #0]
 8009dba:	f007 fe1f 	bl	80119fc <Dmx::SetDmxPeriodTime(unsigned int)>
 8009dbe:	e761      	b.n	8009c84 <main+0x6f4>
 8009dc0:	2c0a      	cmp	r4, #10
 8009dc2:	f43f af5f 	beq.w	8009c84 <main+0x6f4>
 8009dc6:	481b      	ldr	r0, [pc, #108]	; (8009e34 <main+0x8a4>)
 8009dc8:	2206      	movs	r2, #6
 8009dca:	f7ff f93c 	bl	8009046 <memcmp>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	f47f af58 	bne.w	8009c84 <main+0x6f4>
 8009dd4:	2103      	movs	r1, #3
 8009dd6:	f10a 000a 	add.w	r0, sl, #10
 8009dda:	f7ff f9c9 	bl	8009170 <dmxconfigudp::atoi(char const*, unsigned int)>
 8009dde:	1e83      	subs	r3, r0, #2
 8009de0:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009de4:	f63f af4e 	bhi.w	8009c84 <main+0x6f4>
 8009de8:	4b0f      	ldr	r3, [pc, #60]	; (8009e28 <main+0x898>)
 8009dea:	b281      	uxth	r1, r0
 8009dec:	6818      	ldr	r0, [r3, #0]
 8009dee:	f007 fe41 	bl	8011a74 <Dmx::SetDmxSlots(unsigned short)>
 8009df2:	e747      	b.n	8009c84 <main+0x6f4>
 8009df4:	2c0d      	cmp	r4, #13
 8009df6:	f47f af45 	bne.w	8009c84 <main+0x6f4>
 8009dfa:	e7e4      	b.n	8009dc6 <main+0x836>
 8009dfc:	f7ff fae6 	bl	80093cc <display::timeout::gpio_renew()>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	f43f af5b 	beq.w	8009cbc <main+0x72c>
 8009e06:	2100      	movs	r1, #0
 8009e08:	7621      	strb	r1, [r4, #24]
 8009e0a:	a8a9      	add	r0, sp, #676	; 0x2a4
 8009e0c:	f00d ff84 	bl	8017d18 <ILI9341::EnableSleep(bool)>
 8009e10:	4b01      	ldr	r3, [pc, #4]	; (8009e18 <main+0x888>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	6223      	str	r3, [r4, #32]
 8009e16:	e751      	b.n	8009cbc <main+0x72c>
 8009e18:	20010694 	mulcs	r1, r4, r6
 8009e1c:	40020000 	andmi	r0, r2, r0
 8009e20:	0801ac88 	stmdaeq	r1, {r3, r7, sl, fp, sp, pc}
 8009e24:	000f4234 	andeq	r4, pc, r4, lsr r2	; <UNPREDICTABLE>
 8009e28:	20001064 	andcs	r1, r0, r4, rrx
 8009e2c:	0801ac8d 	stmdaeq	r1, {r0, r2, r3, r7, sl, fp, sp, pc}
 8009e30:	000f4240 	andeq	r4, pc, r0, asr #4
 8009e34:	0801ac96 	stmdaeq	r1, {r1, r2, r4, r7, sl, fp, sp, pc}

08009e38 <StoreNetwork::SaveDhcp(bool)>:
 8009e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	f88d 1017 	strb.w	r1, [sp, #23]
 8009e40:	2100      	movs	r1, #0
 8009e42:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009e46:	4805      	ldr	r0, [pc, #20]	; (8009e5c <StoreNetwork::SaveDhcp(bool)+0x24>)
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	6800      	ldr	r0, [r0, #0]
 8009e4c:	f10d 0317 	add.w	r3, sp, #23
 8009e50:	2214      	movs	r2, #20
 8009e52:	f00c fd19 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8009e56:	b007      	add	sp, #28
 8009e58:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e5c:	2000fc88 	andcs	pc, r0, r8, lsl #25

08009e60 <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 8009e60:	f1a0 0004 	sub.w	r0, r0, #4
 8009e64:	e7e8      	b.n	8009e38 <StoreNetwork::SaveDhcp(bool)>
 8009e66:	bf00      	nop

08009e68 <rdm::device::responder::factorydefaults()>:
 8009e68:	b508      	push	{r3, lr}
 8009e6a:	4b08      	ldr	r3, [pc, #32]	; (8009e8c <rdm::device::responder::factorydefaults()+0x24>)
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	6818      	ldr	r0, [r3, #0]
 8009e70:	f000 fea4 	bl	800abbc <RemoteConfig::SetDisable(bool)>
 8009e74:	4b06      	ldr	r3, [pc, #24]	; (8009e90 <rdm::device::responder::factorydefaults()+0x28>)
 8009e76:	210b      	movs	r1, #11
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	f00c fcf3 	bl	8016864 <ConfigStore::ResetSetList(configstore::Store)>
 8009e7e:	4b05      	ldr	r3, [pc, #20]	; (8009e94 <rdm::device::responder::factorydefaults()+0x2c>)
 8009e80:	2101      	movs	r1, #1
 8009e82:	6818      	ldr	r0, [r3, #0]
 8009e84:	f7ff ffd8 	bl	8009e38 <StoreNetwork::SaveDhcp(bool)>
 8009e88:	bd08      	pop	{r3, pc}
 8009e8a:	bf00      	nop
 8009e8c:	2000012c 	andcs	r0, r0, ip, lsr #2
 8009e90:	2000fc88 	andcs	pc, r0, r8, lsl #25
 8009e94:	2000fc98 	mulcs	r0, r8, ip

08009e98 <RDMSoftwareVersion::GetVersion()>:
 8009e98:	4800      	ldr	r0, [pc, #0]	; (8009e9c <RDMSoftwareVersion::GetVersion()+0x4>)
 8009e9a:	4770      	bx	lr
 8009e9c:	0801ae61 	stmdaeq	r1, {r0, r5, r6, r9, sl, fp, sp, pc}

08009ea0 <RDMSoftwareVersion::GetVersionLength()>:
 8009ea0:	2003      	movs	r0, #3
 8009ea2:	4770      	bx	lr

08009ea4 <RDMSoftwareVersion::GetVersionId()>:
 8009ea4:	4800      	ldr	r0, [pc, #0]	; (8009ea8 <RDMSoftwareVersion::GetVersionId()+0x4>)
 8009ea6:	4770      	bx	lr
 8009ea8:	6391fef9 	orrsvs	pc, r1, #3984	; 0xf90

08009eac <_itostr>:
 8009eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eae:	0fc7      	lsrs	r7, r0, #31
 8009eb0:	b091      	sub	sp, #68	; 0x44
 8009eb2:	bf18      	it	ne
 8009eb4:	4240      	negne	r0, r0
 8009eb6:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8009eba:	b9c8      	cbnz	r0, 8009ef0 <_itostr+0x44>
 8009ebc:	2330      	movs	r3, #48	; 0x30
 8009ebe:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8009ec2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8009ec6:	b132      	cbz	r2, 8009ed6 <_itostr+0x2a>
 8009ec8:	4668      	mov	r0, sp
 8009eca:	2530      	movs	r5, #48	; 0x30
 8009ecc:	1ae6      	subs	r6, r4, r3
 8009ece:	4296      	cmp	r6, r2
 8009ed0:	da01      	bge.n	8009ed6 <_itostr+0x2a>
 8009ed2:	4283      	cmp	r3, r0
 8009ed4:	d81c      	bhi.n	8009f10 <_itostr+0x64>
 8009ed6:	b117      	cbz	r7, 8009ede <_itostr+0x32>
 8009ed8:	222d      	movs	r2, #45	; 0x2d
 8009eda:	f803 2901 	strb.w	r2, [r3], #-1
 8009ede:	3301      	adds	r3, #1
 8009ee0:	1ae0      	subs	r0, r4, r3
 8009ee2:	3901      	subs	r1, #1
 8009ee4:	aa10      	add	r2, sp, #64	; 0x40
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d315      	bcc.n	8009f16 <_itostr+0x6a>
 8009eea:	3001      	adds	r0, #1
 8009eec:	b011      	add	sp, #68	; 0x44
 8009eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef0:	4623      	mov	r3, r4
 8009ef2:	250a      	movs	r5, #10
 8009ef4:	46ec      	mov	ip, sp
 8009ef6:	fb90 f6f5 	sdiv	r6, r0, r5
 8009efa:	fb05 0016 	mls	r0, r5, r6, r0
 8009efe:	3030      	adds	r0, #48	; 0x30
 8009f00:	f803 0901 	strb.w	r0, [r3], #-1
 8009f04:	4630      	mov	r0, r6
 8009f06:	2e00      	cmp	r6, #0
 8009f08:	d0dd      	beq.n	8009ec6 <_itostr+0x1a>
 8009f0a:	4563      	cmp	r3, ip
 8009f0c:	d1f3      	bne.n	8009ef6 <_itostr+0x4a>
 8009f0e:	e7da      	b.n	8009ec6 <_itostr+0x1a>
 8009f10:	f803 5901 	strb.w	r5, [r3], #-1
 8009f14:	e7da      	b.n	8009ecc <_itostr+0x20>
 8009f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f1a:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009f1e:	e7e1      	b.n	8009ee4 <_itostr+0x38>

08009f20 <_xputch>:
 8009f20:	4603      	mov	r3, r0
 8009f22:	b410      	push	{r4}
 8009f24:	4c09      	ldr	r4, [pc, #36]	; (8009f4c <_xputch+0x2c>)
 8009f26:	68da      	ldr	r2, [r3, #12]
 8009f28:	4608      	mov	r0, r1
 8009f2a:	6821      	ldr	r1, [r4, #0]
 8009f2c:	3201      	adds	r2, #1
 8009f2e:	60da      	str	r2, [r3, #12]
 8009f30:	b141      	cbz	r1, 8009f44 <_xputch+0x24>
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	da02      	bge.n	8009f3e <_xputch+0x1e>
 8009f38:	1c4b      	adds	r3, r1, #1
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	7008      	strb	r0, [r1, #0]
 8009f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f48:	f00d bfb8 	b.w	8017ebc <console_putc>
 8009f4c:	20000100 	andcs	r0, r0, r0, lsl #2

08009f50 <_format_int>:
 8009f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f54:	4698      	mov	r8, r3
 8009f56:	b091      	sub	sp, #68	; 0x44
 8009f58:	ea52 0308 	orrs.w	r3, r2, r8
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	4617      	mov	r7, r2
 8009f60:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8009f64:	d133      	bne.n	8009fce <_format_int+0x7e>
 8009f66:	2330      	movs	r3, #48	; 0x30
 8009f68:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8009f6c:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8009f70:	6833      	ldr	r3, [r6, #0]
 8009f72:	07d8      	lsls	r0, r3, #31
 8009f74:	d507      	bpl.n	8009f86 <_format_int+0x36>
 8009f76:	6871      	ldr	r1, [r6, #4]
 8009f78:	466a      	mov	r2, sp
 8009f7a:	2030      	movs	r0, #48	; 0x30
 8009f7c:	1b2f      	subs	r7, r5, r4
 8009f7e:	428f      	cmp	r7, r1
 8009f80:	da01      	bge.n	8009f86 <_format_int+0x36>
 8009f82:	4294      	cmp	r4, r2
 8009f84:	d839      	bhi.n	8009ffa <_format_int+0xaa>
 8009f86:	0699      	lsls	r1, r3, #26
 8009f88:	d507      	bpl.n	8009f9a <_format_int+0x4a>
 8009f8a:	68b1      	ldr	r1, [r6, #8]
 8009f8c:	466a      	mov	r2, sp
 8009f8e:	2030      	movs	r0, #48	; 0x30
 8009f90:	1b2f      	subs	r7, r5, r4
 8009f92:	428f      	cmp	r7, r1
 8009f94:	da01      	bge.n	8009f9a <_format_int+0x4a>
 8009f96:	4294      	cmp	r4, r2
 8009f98:	d832      	bhi.n	800a000 <_format_int+0xb0>
 8009f9a:	071a      	lsls	r2, r3, #28
 8009f9c:	bf44      	itt	mi
 8009f9e:	222d      	movmi	r2, #45	; 0x2d
 8009fa0:	f804 2901 	strbmi.w	r2, [r4], #-1
 8009fa4:	065b      	lsls	r3, r3, #25
 8009fa6:	d407      	bmi.n	8009fb8 <_format_int+0x68>
 8009fa8:	68b2      	ldr	r2, [r6, #8]
 8009faa:	466b      	mov	r3, sp
 8009fac:	2120      	movs	r1, #32
 8009fae:	1b28      	subs	r0, r5, r4
 8009fb0:	4290      	cmp	r0, r2
 8009fb2:	da01      	bge.n	8009fb8 <_format_int+0x68>
 8009fb4:	429c      	cmp	r4, r3
 8009fb6:	d826      	bhi.n	800a006 <_format_int+0xb6>
 8009fb8:	1b2d      	subs	r5, r5, r4
 8009fba:	3401      	adds	r4, #1
 8009fbc:	ab10      	add	r3, sp, #64	; 0x40
 8009fbe:	429c      	cmp	r4, r3
 8009fc0:	d324      	bcc.n	800a00c <_format_int+0xbc>
 8009fc2:	68b3      	ldr	r3, [r6, #8]
 8009fc4:	42ab      	cmp	r3, r5
 8009fc6:	dc27      	bgt.n	800a018 <_format_int+0xc8>
 8009fc8:	b011      	add	sp, #68	; 0x44
 8009fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fce:	462c      	mov	r4, r5
 8009fd0:	46e9      	mov	r9, sp
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	4641      	mov	r1, r8
 8009fd6:	220a      	movs	r2, #10
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f7fe fe5d 	bl	8008c98 <__aeabi_uldivmod>
 8009fde:	3230      	adds	r2, #48	; 0x30
 8009fe0:	f804 2901 	strb.w	r2, [r4], #-1
 8009fe4:	463a      	mov	r2, r7
 8009fe6:	4643      	mov	r3, r8
 8009fe8:	2a0a      	cmp	r2, #10
 8009fea:	f173 0300 	sbcs.w	r3, r3, #0
 8009fee:	4607      	mov	r7, r0
 8009ff0:	4688      	mov	r8, r1
 8009ff2:	d3bd      	bcc.n	8009f70 <_format_int+0x20>
 8009ff4:	454c      	cmp	r4, r9
 8009ff6:	d1ec      	bne.n	8009fd2 <_format_int+0x82>
 8009ff8:	e7ba      	b.n	8009f70 <_format_int+0x20>
 8009ffa:	f804 0901 	strb.w	r0, [r4], #-1
 8009ffe:	e7bd      	b.n	8009f7c <_format_int+0x2c>
 800a000:	f804 0901 	strb.w	r0, [r4], #-1
 800a004:	e7c4      	b.n	8009f90 <_format_int+0x40>
 800a006:	f804 1901 	strb.w	r1, [r4], #-1
 800a00a:	e7d0      	b.n	8009fae <_format_int+0x5e>
 800a00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a010:	4630      	mov	r0, r6
 800a012:	f7ff ff85 	bl	8009f20 <_xputch>
 800a016:	e7d1      	b.n	8009fbc <_format_int+0x6c>
 800a018:	2120      	movs	r1, #32
 800a01a:	4630      	mov	r0, r6
 800a01c:	f7ff ff80 	bl	8009f20 <_xputch>
 800a020:	3501      	adds	r5, #1
 800a022:	e7ce      	b.n	8009fc2 <_format_int+0x72>

0800a024 <_format_hex>:
 800a024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a026:	b091      	sub	sp, #68	; 0x44
 800a028:	6804      	ldr	r4, [r0, #0]
 800a02a:	4606      	mov	r6, r0
 800a02c:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800a030:	bb61      	cbnz	r1, 800a08c <_format_hex+0x68>
 800a032:	2330      	movs	r3, #48	; 0x30
 800a034:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800a038:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800a03c:	07e5      	lsls	r5, r4, #31
 800a03e:	d507      	bpl.n	800a050 <_format_hex+0x2c>
 800a040:	6870      	ldr	r0, [r6, #4]
 800a042:	4669      	mov	r1, sp
 800a044:	2530      	movs	r5, #48	; 0x30
 800a046:	1ad7      	subs	r7, r2, r3
 800a048:	4287      	cmp	r7, r0
 800a04a:	da01      	bge.n	800a050 <_format_hex+0x2c>
 800a04c:	428b      	cmp	r3, r1
 800a04e:	d831      	bhi.n	800a0b4 <_format_hex+0x90>
 800a050:	06a0      	lsls	r0, r4, #26
 800a052:	d507      	bpl.n	800a064 <_format_hex+0x40>
 800a054:	68b0      	ldr	r0, [r6, #8]
 800a056:	4669      	mov	r1, sp
 800a058:	2530      	movs	r5, #48	; 0x30
 800a05a:	1ad7      	subs	r7, r2, r3
 800a05c:	4287      	cmp	r7, r0
 800a05e:	da01      	bge.n	800a064 <_format_hex+0x40>
 800a060:	428b      	cmp	r3, r1
 800a062:	d82a      	bhi.n	800a0ba <_format_hex+0x96>
 800a064:	0661      	lsls	r1, r4, #25
 800a066:	d407      	bmi.n	800a078 <_format_hex+0x54>
 800a068:	68b0      	ldr	r0, [r6, #8]
 800a06a:	4669      	mov	r1, sp
 800a06c:	2420      	movs	r4, #32
 800a06e:	1ad5      	subs	r5, r2, r3
 800a070:	4285      	cmp	r5, r0
 800a072:	da01      	bge.n	800a078 <_format_hex+0x54>
 800a074:	428b      	cmp	r3, r1
 800a076:	d823      	bhi.n	800a0c0 <_format_hex+0x9c>
 800a078:	1ad5      	subs	r5, r2, r3
 800a07a:	1c5c      	adds	r4, r3, #1
 800a07c:	ab10      	add	r3, sp, #64	; 0x40
 800a07e:	429c      	cmp	r4, r3
 800a080:	d321      	bcc.n	800a0c6 <_format_hex+0xa2>
 800a082:	68b3      	ldr	r3, [r6, #8]
 800a084:	429d      	cmp	r5, r3
 800a086:	db24      	blt.n	800a0d2 <_format_hex+0xae>
 800a088:	b011      	add	sp, #68	; 0x44
 800a08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a08c:	f014 0f02 	tst.w	r4, #2
 800a090:	bf0c      	ite	eq
 800a092:	2757      	moveq	r7, #87	; 0x57
 800a094:	2737      	movne	r7, #55	; 0x37
 800a096:	4613      	mov	r3, r2
 800a098:	466d      	mov	r5, sp
 800a09a:	f001 000f 	and.w	r0, r1, #15
 800a09e:	2809      	cmp	r0, #9
 800a0a0:	bf94      	ite	ls
 800a0a2:	3030      	addls	r0, #48	; 0x30
 800a0a4:	19c0      	addhi	r0, r0, r7
 800a0a6:	0909      	lsrs	r1, r1, #4
 800a0a8:	f803 0901 	strb.w	r0, [r3], #-1
 800a0ac:	d0c6      	beq.n	800a03c <_format_hex+0x18>
 800a0ae:	42ab      	cmp	r3, r5
 800a0b0:	d1f3      	bne.n	800a09a <_format_hex+0x76>
 800a0b2:	e7c3      	b.n	800a03c <_format_hex+0x18>
 800a0b4:	f803 5901 	strb.w	r5, [r3], #-1
 800a0b8:	e7c5      	b.n	800a046 <_format_hex+0x22>
 800a0ba:	f803 5901 	strb.w	r5, [r3], #-1
 800a0be:	e7cc      	b.n	800a05a <_format_hex+0x36>
 800a0c0:	f803 4901 	strb.w	r4, [r3], #-1
 800a0c4:	e7d3      	b.n	800a06e <_format_hex+0x4a>
 800a0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f7ff ff28 	bl	8009f20 <_xputch>
 800a0d0:	e7d4      	b.n	800a07c <_format_hex+0x58>
 800a0d2:	2120      	movs	r1, #32
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f7ff ff23 	bl	8009f20 <_xputch>
 800a0da:	3501      	adds	r5, #1
 800a0dc:	e7d1      	b.n	800a082 <_format_hex+0x5e>
	...

0800a0e0 <_vprintf>:
 800a0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0e4:	f04f 0800 	mov.w	r8, #0
 800a0e8:	b096      	sub	sp, #88	; 0x58
 800a0ea:	e9cd 8004 	strd	r8, r0, [sp, #16]
 800a0ee:	4614      	mov	r4, r2
 800a0f0:	af06      	add	r7, sp, #24
 800a0f2:	780b      	ldrb	r3, [r1, #0]
 800a0f4:	b91b      	cbnz	r3, 800a0fe <_vprintf+0x1e>
 800a0f6:	9804      	ldr	r0, [sp, #16]
 800a0f8:	b016      	add	sp, #88	; 0x58
 800a0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0fe:	2b25      	cmp	r3, #37	; 0x25
 800a100:	f101 0601 	add.w	r6, r1, #1
 800a104:	d005      	beq.n	800a112 <_vprintf+0x32>
 800a106:	4619      	mov	r1, r3
 800a108:	a801      	add	r0, sp, #4
 800a10a:	f7ff ff09 	bl	8009f20 <_xputch>
 800a10e:	4631      	mov	r1, r6
 800a110:	e7ef      	b.n	800a0f2 <_vprintf+0x12>
 800a112:	784b      	ldrb	r3, [r1, #1]
 800a114:	f8cd 800c 	str.w	r8, [sp, #12]
 800a118:	2b30      	cmp	r3, #48	; 0x30
 800a11a:	e9cd 8801 	strd	r8, r8, [sp, #4]
 800a11e:	d129      	bne.n	800a174 <_vprintf+0x94>
 800a120:	2320      	movs	r3, #32
 800a122:	9301      	str	r3, [sp, #4]
 800a124:	1c8e      	adds	r6, r1, #2
 800a126:	2200      	movs	r2, #0
 800a128:	4635      	mov	r5, r6
 800a12a:	4613      	mov	r3, r2
 800a12c:	f04f 0c0a 	mov.w	ip, #10
 800a130:	7829      	ldrb	r1, [r5, #0]
 800a132:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 800a136:	2809      	cmp	r0, #9
 800a138:	462e      	mov	r6, r5
 800a13a:	f105 0501 	add.w	r5, r5, #1
 800a13e:	d91d      	bls.n	800a17c <_vprintf+0x9c>
 800a140:	b12a      	cbz	r2, 800a14e <_vprintf+0x6e>
 800a142:	9303      	str	r3, [sp, #12]
 800a144:	b11b      	cbz	r3, 800a14e <_vprintf+0x6e>
 800a146:	9b01      	ldr	r3, [sp, #4]
 800a148:	f043 0310 	orr.w	r3, r3, #16
 800a14c:	9301      	str	r3, [sp, #4]
 800a14e:	292e      	cmp	r1, #46	; 0x2e
 800a150:	d123      	bne.n	800a19a <_vprintf+0xba>
 800a152:	7873      	ldrb	r3, [r6, #1]
 800a154:	2b2a      	cmp	r3, #42	; 0x2a
 800a156:	d015      	beq.n	800a184 <_vprintf+0xa4>
 800a158:	2100      	movs	r1, #0
 800a15a:	1c70      	adds	r0, r6, #1
 800a15c:	460a      	mov	r2, r1
 800a15e:	250a      	movs	r5, #10
 800a160:	7803      	ldrb	r3, [r0, #0]
 800a162:	3b30      	subs	r3, #48	; 0x30
 800a164:	2b09      	cmp	r3, #9
 800a166:	4606      	mov	r6, r0
 800a168:	f100 0001 	add.w	r0, r0, #1
 800a16c:	d958      	bls.n	800a220 <_vprintf+0x140>
 800a16e:	b181      	cbz	r1, 800a192 <_vprintf+0xb2>
 800a170:	9202      	str	r2, [sp, #8]
 800a172:	e00e      	b.n	800a192 <_vprintf+0xb2>
 800a174:	2b2d      	cmp	r3, #45	; 0x2d
 800a176:	d1d6      	bne.n	800a126 <_vprintf+0x46>
 800a178:	2340      	movs	r3, #64	; 0x40
 800a17a:	e7d2      	b.n	800a122 <_vprintf+0x42>
 800a17c:	fb0c 0303 	mla	r3, ip, r3, r0
 800a180:	2201      	movs	r2, #1
 800a182:	e7d5      	b.n	800a130 <_vprintf+0x50>
 800a184:	f854 3b04 	ldr.w	r3, [r4], #4
 800a188:	2b00      	cmp	r3, #0
 800a18a:	bfb8      	it	lt
 800a18c:	425b      	neglt	r3, r3
 800a18e:	3602      	adds	r6, #2
 800a190:	9302      	str	r3, [sp, #8]
 800a192:	9b01      	ldr	r3, [sp, #4]
 800a194:	f043 0301 	orr.w	r3, r3, #1
 800a198:	9301      	str	r3, [sp, #4]
 800a19a:	7833      	ldrb	r3, [r6, #0]
 800a19c:	2b6c      	cmp	r3, #108	; 0x6c
 800a19e:	bf04      	itt	eq
 800a1a0:	3601      	addeq	r6, #1
 800a1a2:	9b01      	ldreq	r3, [sp, #4]
 800a1a4:	7831      	ldrb	r1, [r6, #0]
 800a1a6:	bf04      	itt	eq
 800a1a8:	f043 0304 	orreq.w	r3, r3, #4
 800a1ac:	9301      	streq	r3, [sp, #4]
 800a1ae:	2958      	cmp	r1, #88	; 0x58
 800a1b0:	f000 8169 	beq.w	800a486 <_vprintf+0x3a6>
 800a1b4:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	2a15      	cmp	r2, #21
 800a1bc:	d8a4      	bhi.n	800a108 <_vprintf+0x28>
 800a1be:	2b15      	cmp	r3, #21
 800a1c0:	d8a2      	bhi.n	800a108 <_vprintf+0x28>
 800a1c2:	a201      	add	r2, pc, #4	; (adr r2, 800a1c8 <_vprintf+0xe8>)
 800a1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c8:	0800a229 	stmdaeq	r0, {r0, r3, r5, r9, sp, pc}
 800a1cc:	0800a23b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r9, sp, pc}
 800a1d0:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a1d4:	0800a271 	stmdaeq	r0, {r0, r4, r5, r6, r9, sp, pc}
 800a1d8:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a1dc:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a1e0:	0800a23b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r9, sp, pc}
 800a1e4:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a1e8:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a1ec:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a1f0:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a1f4:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a1f8:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a1fc:	0800a3c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, sp, pc}
 800a200:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a204:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a208:	0800a3f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, sp, pc}
 800a20c:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a210:	0800a467 	stmdaeq	r0, {r0, r1, r2, r5, r6, sl, sp, pc}
 800a214:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a218:	0800a109 	stmdaeq	r0, {r0, r3, r8, sp, pc}
 800a21c:	0800a48f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, sp, pc}
 800a220:	fb05 3202 	mla	r2, r5, r2, r3
 800a224:	2101      	movs	r1, #1
 800a226:	e79b      	b.n	800a160 <_vprintf+0x80>
 800a228:	4625      	mov	r5, r4
 800a22a:	a801      	add	r0, sp, #4
 800a22c:	f855 1b04 	ldr.w	r1, [r5], #4
 800a230:	f7ff fe76 	bl	8009f20 <_xputch>
 800a234:	3601      	adds	r6, #1
 800a236:	462c      	mov	r4, r5
 800a238:	e769      	b.n	800a10e <_vprintf+0x2e>
 800a23a:	9901      	ldr	r1, [sp, #4]
 800a23c:	074d      	lsls	r5, r1, #29
 800a23e:	bf4b      	itete	mi
 800a240:	3407      	addmi	r4, #7
 800a242:	4625      	movpl	r5, r4
 800a244:	f024 0407 	bicmi.w	r4, r4, #7
 800a248:	f855 2b04 	ldrpl.w	r2, [r5], #4
 800a24c:	bf45      	ittet	mi
 800a24e:	6863      	ldrmi	r3, [r4, #4]
 800a250:	4625      	movmi	r5, r4
 800a252:	17d3      	asrpl	r3, r2, #31
 800a254:	f855 2b08 	ldrmi.w	r2, [r5], #8
 800a258:	2b00      	cmp	r3, #0
 800a25a:	da05      	bge.n	800a268 <_vprintf+0x188>
 800a25c:	f041 0108 	orr.w	r1, r1, #8
 800a260:	4252      	negs	r2, r2
 800a262:	9101      	str	r1, [sp, #4]
 800a264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800a268:	a801      	add	r0, sp, #4
 800a26a:	f7ff fe71 	bl	8009f50 <_format_int>
 800a26e:	e7e1      	b.n	800a234 <_vprintf+0x154>
 800a270:	3407      	adds	r4, #7
 800a272:	f024 0507 	bic.w	r5, r4, #7
 800a276:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a27a:	f7fe fcbd 	bl	8008bf8 <__aeabi_d2f>
 800a27e:	9b01      	ldr	r3, [sp, #4]
 800a280:	ee07 0a90 	vmov	s15, r0
 800a284:	07dc      	lsls	r4, r3, #31
 800a286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a28a:	bf4c      	ite	mi
 800a28c:	9c02      	ldrmi	r4, [sp, #8]
 800a28e:	2406      	movpl	r4, #6
 800a290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a294:	bf48      	it	mi
 800a296:	eef1 7a67 	vnegmi.f32	s15, s15
 800a29a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a29e:	bf4a      	itet	mi
 800a2a0:	f10d 0a19 	addmi.w	sl, sp, #25
 800a2a4:	46ba      	movpl	sl, r7
 800a2a6:	232d      	movmi	r3, #45	; 0x2d
 800a2a8:	ee17 0a10 	vmov	r0, s14
 800a2ac:	f04f 0200 	mov.w	r2, #0
 800a2b0:	4651      	mov	r1, sl
 800a2b2:	bf48      	it	mi
 800a2b4:	f88d 3018 	strbmi.w	r3, [sp, #24]
 800a2b8:	f7ff fdf8 	bl	8009eac <_itostr>
 800a2bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a2c0:	232e      	movs	r3, #46	; 0x2e
 800a2c2:	f80a 3000 	strb.w	r3, [sl, r0]
 800a2c6:	eb0a 0900 	add.w	r9, sl, r0
 800a2ca:	230a      	movs	r3, #10
 800a2cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2d0:	1c62      	adds	r2, r4, #1
 800a2d2:	f109 0901 	add.w	r9, r9, #1
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	2c00      	cmp	r4, #0
 800a2da:	dc3d      	bgt.n	800a358 <_vprintf+0x278>
 800a2dc:	ee07 3a10 	vmov	s14, r3
 800a2e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a2ee:	ee17 0a90 	vmov	r0, s15
 800a2f2:	f7ff fddb 	bl	8009eac <_itostr>
 800a2f6:	4448      	add	r0, r9
 800a2f8:	1bc0      	subs	r0, r0, r7
 800a2fa:	1e44      	subs	r4, r0, #1
 800a2fc:	193a      	adds	r2, r7, r4
 800a2fe:	5d3b      	ldrb	r3, [r7, r4]
 800a300:	2b34      	cmp	r3, #52	; 0x34
 800a302:	d911      	bls.n	800a328 <_vprintf+0x248>
 800a304:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a308:	292e      	cmp	r1, #46	; 0x2e
 800a30a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 800a30e:	d029      	beq.n	800a364 <_vprintf+0x284>
 800a310:	469c      	mov	ip, r3
 800a312:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800a316:	4663      	mov	r3, ip
 800a318:	f81c 1901 	ldrb.w	r1, [ip], #-1
 800a31c:	2939      	cmp	r1, #57	; 0x39
 800a31e:	d01e      	beq.n	800a35e <_vprintf+0x27e>
 800a320:	292e      	cmp	r1, #46	; 0x2e
 800a322:	d01f      	beq.n	800a364 <_vprintf+0x284>
 800a324:	3101      	adds	r1, #1
 800a326:	7019      	strb	r1, [r3, #0]
 800a328:	f104 0358 	add.w	r3, r4, #88	; 0x58
 800a32c:	446b      	add	r3, sp
 800a32e:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 800a332:	2b2e      	cmp	r3, #46	; 0x2e
 800a334:	bf08      	it	eq
 800a336:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 800a33a:	46a1      	mov	r9, r4
 800a33c:	9b03      	ldr	r3, [sp, #12]
 800a33e:	4599      	cmp	r9, r3
 800a340:	db3b      	blt.n	800a3ba <_vprintf+0x2da>
 800a342:	46b9      	mov	r9, r7
 800a344:	2c00      	cmp	r4, #0
 800a346:	f77f af75 	ble.w	800a234 <_vprintf+0x154>
 800a34a:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a34e:	a801      	add	r0, sp, #4
 800a350:	f7ff fde6 	bl	8009f20 <_xputch>
 800a354:	3c01      	subs	r4, #1
 800a356:	e7f5      	b.n	800a344 <_vprintf+0x264>
 800a358:	434b      	muls	r3, r1
 800a35a:	3c01      	subs	r4, #1
 800a35c:	e7bc      	b.n	800a2d8 <_vprintf+0x1f8>
 800a35e:	f88c e001 	strb.w	lr, [ip, #1]
 800a362:	e7d8      	b.n	800a316 <_vprintf+0x236>
 800a364:	3b01      	subs	r3, #1
 800a366:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800a36a:	7819      	ldrb	r1, [r3, #0]
 800a36c:	2939      	cmp	r1, #57	; 0x39
 800a36e:	d112      	bne.n	800a396 <_vprintf+0x2b6>
 800a370:	42bb      	cmp	r3, r7
 800a372:	d20d      	bcs.n	800a390 <_vprintf+0x2b0>
 800a374:	1c5c      	adds	r4, r3, #1
 800a376:	1c99      	adds	r1, r3, #2
 800a378:	428c      	cmp	r4, r1
 800a37a:	eba2 0203 	sub.w	r2, r2, r3
 800a37e:	d913      	bls.n	800a3a8 <_vprintf+0x2c8>
 800a380:	4619      	mov	r1, r3
 800a382:	441a      	add	r2, r3
 800a384:	428a      	cmp	r2, r1
 800a386:	d10b      	bne.n	800a3a0 <_vprintf+0x2c0>
 800a388:	2231      	movs	r2, #49	; 0x31
 800a38a:	705a      	strb	r2, [r3, #1]
 800a38c:	4604      	mov	r4, r0
 800a38e:	e7cb      	b.n	800a328 <_vprintf+0x248>
 800a390:	f803 c901 	strb.w	ip, [r3], #-1
 800a394:	e7e9      	b.n	800a36a <_vprintf+0x28a>
 800a396:	42bb      	cmp	r3, r7
 800a398:	d3ec      	bcc.n	800a374 <_vprintf+0x294>
 800a39a:	292d      	cmp	r1, #45	; 0x2d
 800a39c:	d0ea      	beq.n	800a374 <_vprintf+0x294>
 800a39e:	e7c1      	b.n	800a324 <_vprintf+0x244>
 800a3a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a3a4:	704c      	strb	r4, [r1, #1]
 800a3a6:	e7ed      	b.n	800a384 <_vprintf+0x2a4>
 800a3a8:	4414      	add	r4, r2
 800a3aa:	440a      	add	r2, r1
 800a3ac:	428a      	cmp	r2, r1
 800a3ae:	d0eb      	beq.n	800a388 <_vprintf+0x2a8>
 800a3b0:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 800a3b4:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800a3b8:	e7f8      	b.n	800a3ac <_vprintf+0x2cc>
 800a3ba:	2120      	movs	r1, #32
 800a3bc:	a801      	add	r0, sp, #4
 800a3be:	f7ff fdaf 	bl	8009f20 <_xputch>
 800a3c2:	f109 0901 	add.w	r9, r9, #1
 800a3c6:	e7b9      	b.n	800a33c <_vprintf+0x25c>
 800a3c8:	4625      	mov	r5, r4
 800a3ca:	2308      	movs	r3, #8
 800a3cc:	f855 4b04 	ldr.w	r4, [r5], #4
 800a3d0:	9303      	str	r3, [sp, #12]
 800a3d2:	2130      	movs	r1, #48	; 0x30
 800a3d4:	2320      	movs	r3, #32
 800a3d6:	a801      	add	r0, sp, #4
 800a3d8:	9301      	str	r3, [sp, #4]
 800a3da:	f7ff fda1 	bl	8009f20 <_xputch>
 800a3de:	2178      	movs	r1, #120	; 0x78
 800a3e0:	a801      	add	r0, sp, #4
 800a3e2:	f7ff fd9d 	bl	8009f20 <_xputch>
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	a801      	add	r0, sp, #4
 800a3ea:	f7ff fe1b 	bl	800a024 <_format_hex>
 800a3ee:	e721      	b.n	800a234 <_vprintf+0x154>
 800a3f0:	4625      	mov	r5, r4
 800a3f2:	2400      	movs	r4, #0
 800a3f4:	f855 9b04 	ldr.w	r9, [r5], #4
 800a3f8:	f819 3004 	ldrb.w	r3, [r9, r4]
 800a3fc:	b993      	cbnz	r3, 800a424 <_vprintf+0x344>
 800a3fe:	9b01      	ldr	r3, [sp, #4]
 800a400:	07d9      	lsls	r1, r3, #31
 800a402:	d503      	bpl.n	800a40c <_vprintf+0x32c>
 800a404:	9b02      	ldr	r3, [sp, #8]
 800a406:	429c      	cmp	r4, r3
 800a408:	bfa8      	it	ge
 800a40a:	461c      	movge	r4, r3
 800a40c:	9b01      	ldr	r3, [sp, #4]
 800a40e:	065a      	lsls	r2, r3, #25
 800a410:	f104 0a01 	add.w	sl, r4, #1
 800a414:	d403      	bmi.n	800a41e <_vprintf+0x33e>
 800a416:	9b03      	ldr	r3, [sp, #12]
 800a418:	429c      	cmp	r4, r3
 800a41a:	db05      	blt.n	800a428 <_vprintf+0x348>
 800a41c:	4654      	mov	r4, sl
 800a41e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a422:	e00d      	b.n	800a440 <_vprintf+0x360>
 800a424:	3401      	adds	r4, #1
 800a426:	e7e7      	b.n	800a3f8 <_vprintf+0x318>
 800a428:	2120      	movs	r1, #32
 800a42a:	a801      	add	r0, sp, #4
 800a42c:	f7ff fd78 	bl	8009f20 <_xputch>
 800a430:	4654      	mov	r4, sl
 800a432:	e7eb      	b.n	800a40c <_vprintf+0x32c>
 800a434:	a801      	add	r0, sp, #4
 800a436:	f7ff fd73 	bl	8009f20 <_xputch>
 800a43a:	9b02      	ldr	r3, [sp, #8]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	9302      	str	r3, [sp, #8]
 800a440:	9b01      	ldr	r3, [sp, #4]
 800a442:	07db      	lsls	r3, r3, #31
 800a444:	d501      	bpl.n	800a44a <_vprintf+0x36a>
 800a446:	9b02      	ldr	r3, [sp, #8]
 800a448:	b11b      	cbz	r3, 800a452 <_vprintf+0x372>
 800a44a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 800a44e:	2900      	cmp	r1, #0
 800a450:	d1f0      	bne.n	800a434 <_vprintf+0x354>
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	429c      	cmp	r4, r3
 800a456:	f6bf aeed 	bge.w	800a234 <_vprintf+0x154>
 800a45a:	2120      	movs	r1, #32
 800a45c:	a801      	add	r0, sp, #4
 800a45e:	f7ff fd5f 	bl	8009f20 <_xputch>
 800a462:	3401      	adds	r4, #1
 800a464:	e7f5      	b.n	800a452 <_vprintf+0x372>
 800a466:	9b01      	ldr	r3, [sp, #4]
 800a468:	f013 0304 	ands.w	r3, r3, #4
 800a46c:	bf1d      	ittte	ne
 800a46e:	3407      	addne	r4, #7
 800a470:	f024 0407 	bicne.w	r4, r4, #7
 800a474:	4625      	movne	r5, r4
 800a476:	4625      	moveq	r5, r4
 800a478:	bf1a      	itte	ne
 800a47a:	f855 2b08 	ldrne.w	r2, [r5], #8
 800a47e:	6863      	ldrne	r3, [r4, #4]
 800a480:	f855 2b04 	ldreq.w	r2, [r5], #4
 800a484:	e6f0      	b.n	800a268 <_vprintf+0x188>
 800a486:	9b01      	ldr	r3, [sp, #4]
 800a488:	f043 0302 	orr.w	r3, r3, #2
 800a48c:	9301      	str	r3, [sp, #4]
 800a48e:	4625      	mov	r5, r4
 800a490:	f855 1b04 	ldr.w	r1, [r5], #4
 800a494:	e7a8      	b.n	800a3e8 <_vprintf+0x308>
 800a496:	bf00      	nop

0800a498 <printf>:
 800a498:	b40f      	push	{r0, r1, r2, r3}
 800a49a:	b507      	push	{r0, r1, r2, lr}
 800a49c:	aa04      	add	r2, sp, #16
 800a49e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800a4a2:	f852 1b04 	ldr.w	r1, [r2], #4
 800a4a6:	9201      	str	r2, [sp, #4]
 800a4a8:	f7ff fe1a 	bl	800a0e0 <_vprintf>
 800a4ac:	b003      	add	sp, #12
 800a4ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4b2:	b004      	add	sp, #16
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <sprintf>:
 800a4b8:	b40e      	push	{r1, r2, r3}
 800a4ba:	b517      	push	{r0, r1, r2, r4, lr}
 800a4bc:	4c09      	ldr	r4, [pc, #36]	; (800a4e4 <sprintf+0x2c>)
 800a4be:	aa05      	add	r2, sp, #20
 800a4c0:	6020      	str	r0, [r4, #0]
 800a4c2:	f852 1b04 	ldr.w	r1, [r2], #4
 800a4c6:	9201      	str	r2, [sp, #4]
 800a4c8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800a4cc:	f7ff fe08 	bl	800a0e0 <_vprintf>
 800a4d0:	6822      	ldr	r2, [r4, #0]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	7013      	strb	r3, [r2, #0]
 800a4d6:	6023      	str	r3, [r4, #0]
 800a4d8:	b003      	add	sp, #12
 800a4da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4de:	b003      	add	sp, #12
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	20000100 	andcs	r0, r0, r0, lsl #2

0800a4e8 <snprintf>:
 800a4e8:	b40c      	push	{r2, r3}
 800a4ea:	b513      	push	{r0, r1, r4, lr}
 800a4ec:	4c09      	ldr	r4, [pc, #36]	; (800a514 <snprintf+0x2c>)
 800a4ee:	aa04      	add	r2, sp, #16
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	6020      	str	r0, [r4, #0]
 800a4f4:	f852 1b04 	ldr.w	r1, [r2], #4
 800a4f8:	9201      	str	r2, [sp, #4]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7ff fdf0 	bl	800a0e0 <_vprintf>
 800a500:	6822      	ldr	r2, [r4, #0]
 800a502:	2300      	movs	r3, #0
 800a504:	7013      	strb	r3, [r2, #0]
 800a506:	6023      	str	r3, [r4, #0]
 800a508:	b002      	add	sp, #8
 800a50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a50e:	b002      	add	sp, #8
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	20000100 	andcs	r0, r0, r0, lsl #2

0800a518 <vsnprintf>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4c06      	ldr	r4, [pc, #24]	; (800a534 <vsnprintf+0x1c>)
 800a51c:	4605      	mov	r5, r0
 800a51e:	4608      	mov	r0, r1
 800a520:	4611      	mov	r1, r2
 800a522:	461a      	mov	r2, r3
 800a524:	6025      	str	r5, [r4, #0]
 800a526:	f7ff fddb 	bl	800a0e0 <_vprintf>
 800a52a:	6822      	ldr	r2, [r4, #0]
 800a52c:	2300      	movs	r3, #0
 800a52e:	7013      	strb	r3, [r2, #0]
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	20000100 	andcs	r0, r0, r0, lsl #2

0800a538 <__udivmoddi4>:
 800a538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a53c:	9e08      	ldr	r6, [sp, #32]
 800a53e:	460d      	mov	r5, r1
 800a540:	4604      	mov	r4, r0
 800a542:	460f      	mov	r7, r1
 800a544:	2b00      	cmp	r3, #0
 800a546:	d14a      	bne.n	800a5de <__udivmoddi4+0xa6>
 800a548:	428a      	cmp	r2, r1
 800a54a:	4694      	mov	ip, r2
 800a54c:	d965      	bls.n	800a61a <__udivmoddi4+0xe2>
 800a54e:	fab2 f382 	clz	r3, r2
 800a552:	b143      	cbz	r3, 800a566 <__udivmoddi4+0x2e>
 800a554:	fa02 fc03 	lsl.w	ip, r2, r3
 800a558:	f1c3 0220 	rsb	r2, r3, #32
 800a55c:	409f      	lsls	r7, r3
 800a55e:	fa20 f202 	lsr.w	r2, r0, r2
 800a562:	4317      	orrs	r7, r2
 800a564:	409c      	lsls	r4, r3
 800a566:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800a56a:	fa1f f58c 	uxth.w	r5, ip
 800a56e:	fbb7 f1fe 	udiv	r1, r7, lr
 800a572:	0c22      	lsrs	r2, r4, #16
 800a574:	fb0e 7711 	mls	r7, lr, r1, r7
 800a578:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800a57c:	fb01 f005 	mul.w	r0, r1, r5
 800a580:	4290      	cmp	r0, r2
 800a582:	d90a      	bls.n	800a59a <__udivmoddi4+0x62>
 800a584:	eb1c 0202 	adds.w	r2, ip, r2
 800a588:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800a58c:	f080 811c 	bcs.w	800a7c8 <__udivmoddi4+0x290>
 800a590:	4290      	cmp	r0, r2
 800a592:	f240 8119 	bls.w	800a7c8 <__udivmoddi4+0x290>
 800a596:	3902      	subs	r1, #2
 800a598:	4462      	add	r2, ip
 800a59a:	1a12      	subs	r2, r2, r0
 800a59c:	b2a4      	uxth	r4, r4
 800a59e:	fbb2 f0fe 	udiv	r0, r2, lr
 800a5a2:	fb0e 2210 	mls	r2, lr, r0, r2
 800a5a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a5aa:	fb00 f505 	mul.w	r5, r0, r5
 800a5ae:	42a5      	cmp	r5, r4
 800a5b0:	d90a      	bls.n	800a5c8 <__udivmoddi4+0x90>
 800a5b2:	eb1c 0404 	adds.w	r4, ip, r4
 800a5b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a5ba:	f080 8107 	bcs.w	800a7cc <__udivmoddi4+0x294>
 800a5be:	42a5      	cmp	r5, r4
 800a5c0:	f240 8104 	bls.w	800a7cc <__udivmoddi4+0x294>
 800a5c4:	4464      	add	r4, ip
 800a5c6:	3802      	subs	r0, #2
 800a5c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800a5cc:	1b64      	subs	r4, r4, r5
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	b11e      	cbz	r6, 800a5da <__udivmoddi4+0xa2>
 800a5d2:	40dc      	lsrs	r4, r3
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	e9c6 4300 	strd	r4, r3, [r6]
 800a5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5de:	428b      	cmp	r3, r1
 800a5e0:	d908      	bls.n	800a5f4 <__udivmoddi4+0xbc>
 800a5e2:	2e00      	cmp	r6, #0
 800a5e4:	f000 80ed 	beq.w	800a7c2 <__udivmoddi4+0x28a>
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	e9c6 0500 	strd	r0, r5, [r6]
 800a5ee:	4608      	mov	r0, r1
 800a5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f4:	fab3 f183 	clz	r1, r3
 800a5f8:	2900      	cmp	r1, #0
 800a5fa:	d149      	bne.n	800a690 <__udivmoddi4+0x158>
 800a5fc:	42ab      	cmp	r3, r5
 800a5fe:	d302      	bcc.n	800a606 <__udivmoddi4+0xce>
 800a600:	4282      	cmp	r2, r0
 800a602:	f200 80f8 	bhi.w	800a7f6 <__udivmoddi4+0x2be>
 800a606:	1a84      	subs	r4, r0, r2
 800a608:	eb65 0203 	sbc.w	r2, r5, r3
 800a60c:	2001      	movs	r0, #1
 800a60e:	4617      	mov	r7, r2
 800a610:	2e00      	cmp	r6, #0
 800a612:	d0e2      	beq.n	800a5da <__udivmoddi4+0xa2>
 800a614:	e9c6 4700 	strd	r4, r7, [r6]
 800a618:	e7df      	b.n	800a5da <__udivmoddi4+0xa2>
 800a61a:	b902      	cbnz	r2, 800a61e <__udivmoddi4+0xe6>
 800a61c:	deff      	udf	#255	; 0xff
 800a61e:	fab2 f382 	clz	r3, r2
 800a622:	2b00      	cmp	r3, #0
 800a624:	f040 8090 	bne.w	800a748 <__udivmoddi4+0x210>
 800a628:	1a8a      	subs	r2, r1, r2
 800a62a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800a62e:	fa1f fe8c 	uxth.w	lr, ip
 800a632:	2101      	movs	r1, #1
 800a634:	fbb2 f5f7 	udiv	r5, r2, r7
 800a638:	fb07 2015 	mls	r0, r7, r5, r2
 800a63c:	0c22      	lsrs	r2, r4, #16
 800a63e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800a642:	fb0e f005 	mul.w	r0, lr, r5
 800a646:	4290      	cmp	r0, r2
 800a648:	d908      	bls.n	800a65c <__udivmoddi4+0x124>
 800a64a:	eb1c 0202 	adds.w	r2, ip, r2
 800a64e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800a652:	d202      	bcs.n	800a65a <__udivmoddi4+0x122>
 800a654:	4290      	cmp	r0, r2
 800a656:	f200 80cb 	bhi.w	800a7f0 <__udivmoddi4+0x2b8>
 800a65a:	4645      	mov	r5, r8
 800a65c:	1a12      	subs	r2, r2, r0
 800a65e:	b2a4      	uxth	r4, r4
 800a660:	fbb2 f0f7 	udiv	r0, r2, r7
 800a664:	fb07 2210 	mls	r2, r7, r0, r2
 800a668:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a66c:	fb0e fe00 	mul.w	lr, lr, r0
 800a670:	45a6      	cmp	lr, r4
 800a672:	d908      	bls.n	800a686 <__udivmoddi4+0x14e>
 800a674:	eb1c 0404 	adds.w	r4, ip, r4
 800a678:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800a67c:	d202      	bcs.n	800a684 <__udivmoddi4+0x14c>
 800a67e:	45a6      	cmp	lr, r4
 800a680:	f200 80bb 	bhi.w	800a7fa <__udivmoddi4+0x2c2>
 800a684:	4610      	mov	r0, r2
 800a686:	eba4 040e 	sub.w	r4, r4, lr
 800a68a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800a68e:	e79f      	b.n	800a5d0 <__udivmoddi4+0x98>
 800a690:	f1c1 0720 	rsb	r7, r1, #32
 800a694:	408b      	lsls	r3, r1
 800a696:	fa22 fc07 	lsr.w	ip, r2, r7
 800a69a:	ea4c 0c03 	orr.w	ip, ip, r3
 800a69e:	fa05 f401 	lsl.w	r4, r5, r1
 800a6a2:	fa20 f307 	lsr.w	r3, r0, r7
 800a6a6:	40fd      	lsrs	r5, r7
 800a6a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800a6ac:	4323      	orrs	r3, r4
 800a6ae:	fbb5 f8f9 	udiv	r8, r5, r9
 800a6b2:	fa1f fe8c 	uxth.w	lr, ip
 800a6b6:	fb09 5518 	mls	r5, r9, r8, r5
 800a6ba:	0c1c      	lsrs	r4, r3, #16
 800a6bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800a6c0:	fb08 f50e 	mul.w	r5, r8, lr
 800a6c4:	42a5      	cmp	r5, r4
 800a6c6:	fa02 f201 	lsl.w	r2, r2, r1
 800a6ca:	fa00 f001 	lsl.w	r0, r0, r1
 800a6ce:	d90b      	bls.n	800a6e8 <__udivmoddi4+0x1b0>
 800a6d0:	eb1c 0404 	adds.w	r4, ip, r4
 800a6d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800a6d8:	f080 8088 	bcs.w	800a7ec <__udivmoddi4+0x2b4>
 800a6dc:	42a5      	cmp	r5, r4
 800a6de:	f240 8085 	bls.w	800a7ec <__udivmoddi4+0x2b4>
 800a6e2:	f1a8 0802 	sub.w	r8, r8, #2
 800a6e6:	4464      	add	r4, ip
 800a6e8:	1b64      	subs	r4, r4, r5
 800a6ea:	b29d      	uxth	r5, r3
 800a6ec:	fbb4 f3f9 	udiv	r3, r4, r9
 800a6f0:	fb09 4413 	mls	r4, r9, r3, r4
 800a6f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800a6f8:	fb03 fe0e 	mul.w	lr, r3, lr
 800a6fc:	45a6      	cmp	lr, r4
 800a6fe:	d908      	bls.n	800a712 <__udivmoddi4+0x1da>
 800a700:	eb1c 0404 	adds.w	r4, ip, r4
 800a704:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800a708:	d26c      	bcs.n	800a7e4 <__udivmoddi4+0x2ac>
 800a70a:	45a6      	cmp	lr, r4
 800a70c:	d96a      	bls.n	800a7e4 <__udivmoddi4+0x2ac>
 800a70e:	3b02      	subs	r3, #2
 800a710:	4464      	add	r4, ip
 800a712:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800a716:	fba3 9502 	umull	r9, r5, r3, r2
 800a71a:	eba4 040e 	sub.w	r4, r4, lr
 800a71e:	42ac      	cmp	r4, r5
 800a720:	46c8      	mov	r8, r9
 800a722:	46ae      	mov	lr, r5
 800a724:	d356      	bcc.n	800a7d4 <__udivmoddi4+0x29c>
 800a726:	d053      	beq.n	800a7d0 <__udivmoddi4+0x298>
 800a728:	b156      	cbz	r6, 800a740 <__udivmoddi4+0x208>
 800a72a:	ebb0 0208 	subs.w	r2, r0, r8
 800a72e:	eb64 040e 	sbc.w	r4, r4, lr
 800a732:	fa04 f707 	lsl.w	r7, r4, r7
 800a736:	40ca      	lsrs	r2, r1
 800a738:	40cc      	lsrs	r4, r1
 800a73a:	4317      	orrs	r7, r2
 800a73c:	e9c6 7400 	strd	r7, r4, [r6]
 800a740:	4618      	mov	r0, r3
 800a742:	2100      	movs	r1, #0
 800a744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a748:	f1c3 0120 	rsb	r1, r3, #32
 800a74c:	fa02 fc03 	lsl.w	ip, r2, r3
 800a750:	fa20 f201 	lsr.w	r2, r0, r1
 800a754:	fa25 f101 	lsr.w	r1, r5, r1
 800a758:	409d      	lsls	r5, r3
 800a75a:	432a      	orrs	r2, r5
 800a75c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800a760:	fa1f fe8c 	uxth.w	lr, ip
 800a764:	fbb1 f0f7 	udiv	r0, r1, r7
 800a768:	fb07 1510 	mls	r5, r7, r0, r1
 800a76c:	0c11      	lsrs	r1, r2, #16
 800a76e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800a772:	fb00 f50e 	mul.w	r5, r0, lr
 800a776:	428d      	cmp	r5, r1
 800a778:	fa04 f403 	lsl.w	r4, r4, r3
 800a77c:	d908      	bls.n	800a790 <__udivmoddi4+0x258>
 800a77e:	eb1c 0101 	adds.w	r1, ip, r1
 800a782:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800a786:	d22f      	bcs.n	800a7e8 <__udivmoddi4+0x2b0>
 800a788:	428d      	cmp	r5, r1
 800a78a:	d92d      	bls.n	800a7e8 <__udivmoddi4+0x2b0>
 800a78c:	3802      	subs	r0, #2
 800a78e:	4461      	add	r1, ip
 800a790:	1b49      	subs	r1, r1, r5
 800a792:	b292      	uxth	r2, r2
 800a794:	fbb1 f5f7 	udiv	r5, r1, r7
 800a798:	fb07 1115 	mls	r1, r7, r5, r1
 800a79c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a7a0:	fb05 f10e 	mul.w	r1, r5, lr
 800a7a4:	4291      	cmp	r1, r2
 800a7a6:	d908      	bls.n	800a7ba <__udivmoddi4+0x282>
 800a7a8:	eb1c 0202 	adds.w	r2, ip, r2
 800a7ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800a7b0:	d216      	bcs.n	800a7e0 <__udivmoddi4+0x2a8>
 800a7b2:	4291      	cmp	r1, r2
 800a7b4:	d914      	bls.n	800a7e0 <__udivmoddi4+0x2a8>
 800a7b6:	3d02      	subs	r5, #2
 800a7b8:	4462      	add	r2, ip
 800a7ba:	1a52      	subs	r2, r2, r1
 800a7bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800a7c0:	e738      	b.n	800a634 <__udivmoddi4+0xfc>
 800a7c2:	4631      	mov	r1, r6
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	e708      	b.n	800a5da <__udivmoddi4+0xa2>
 800a7c8:	4639      	mov	r1, r7
 800a7ca:	e6e6      	b.n	800a59a <__udivmoddi4+0x62>
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	e6fb      	b.n	800a5c8 <__udivmoddi4+0x90>
 800a7d0:	4548      	cmp	r0, r9
 800a7d2:	d2a9      	bcs.n	800a728 <__udivmoddi4+0x1f0>
 800a7d4:	ebb9 0802 	subs.w	r8, r9, r2
 800a7d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	e7a3      	b.n	800a728 <__udivmoddi4+0x1f0>
 800a7e0:	4645      	mov	r5, r8
 800a7e2:	e7ea      	b.n	800a7ba <__udivmoddi4+0x282>
 800a7e4:	462b      	mov	r3, r5
 800a7e6:	e794      	b.n	800a712 <__udivmoddi4+0x1da>
 800a7e8:	4640      	mov	r0, r8
 800a7ea:	e7d1      	b.n	800a790 <__udivmoddi4+0x258>
 800a7ec:	46d0      	mov	r8, sl
 800a7ee:	e77b      	b.n	800a6e8 <__udivmoddi4+0x1b0>
 800a7f0:	3d02      	subs	r5, #2
 800a7f2:	4462      	add	r2, ip
 800a7f4:	e732      	b.n	800a65c <__udivmoddi4+0x124>
 800a7f6:	4608      	mov	r0, r1
 800a7f8:	e70a      	b.n	800a610 <__udivmoddi4+0xd8>
 800a7fa:	4464      	add	r4, ip
 800a7fc:	3802      	subs	r0, #2
 800a7fe:	e742      	b.n	800a686 <__udivmoddi4+0x14e>

0800a800 <RemoteConfig::HandleList()>:
 800a800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a804:	6801      	ldr	r1, [r0, #0]
 800a806:	4a2b      	ldr	r2, [pc, #172]	; (800a8b4 <RemoteConfig::HandleList()+0xb4>)
 800a808:	4b2b      	ldr	r3, [pc, #172]	; (800a8b8 <RemoteConfig::HandleList()+0xb8>)
 800a80a:	4e2c      	ldr	r6, [pc, #176]	; (800a8bc <RemoteConfig::HandleList()+0xbc>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6835      	ldr	r5, [r6, #0]
 800a810:	695f      	ldr	r7, [r3, #20]
 800a812:	4604      	mov	r4, r0
 800a814:	2012      	movs	r0, #18
 800a816:	fb00 2201 	mla	r2, r0, r1, r2
 800a81a:	6860      	ldr	r0, [r4, #4]
 800a81c:	4928      	ldr	r1, [pc, #160]	; (800a8c0 <RemoteConfig::HandleList()+0xc0>)
 800a81e:	f04f 080c 	mov.w	r8, #12
 800a822:	fb08 1100 	mla	r1, r8, r0, r1
 800a826:	4827      	ldr	r0, [pc, #156]	; (800a8c4 <RemoteConfig::HandleList()+0xc4>)
 800a828:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800a82c:	f890 9009 	ldrb.w	r9, [r0, #9]
 800a830:	b2fb      	uxtb	r3, r7
 800a832:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 800a836:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800a83a:	b089      	sub	sp, #36	; 0x24
 800a83c:	3507      	adds	r5, #7
 800a83e:	0e3f      	lsrs	r7, r7, #24
 800a840:	f1b9 0f00 	cmp.w	r9, #0
 800a844:	d01d      	beq.n	800a882 <RemoteConfig::HandleList()+0x82>
 800a846:	3009      	adds	r0, #9
 800a848:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800a84c:	e9cd 8005 	strd	r8, r0, [sp, #20]
 800a850:	e9cd e701 	strd	lr, r7, [sp, #4]
 800a854:	4a1c      	ldr	r2, [pc, #112]	; (800a8c8 <RemoteConfig::HandleList()+0xc8>)
 800a856:	f8cd c000 	str.w	ip, [sp]
 800a85a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800a85e:	4628      	mov	r0, r5
 800a860:	f7ff fe42 	bl	800a4e8 <snprintf>
 800a864:	69e3      	ldr	r3, [r4, #28]
 800a866:	2b05      	cmp	r3, #5
 800a868:	d118      	bne.n	800a89c <RemoteConfig::HandleList()+0x9c>
 800a86a:	f642 1305 	movw	r3, #10501	; 0x2905
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	69a3      	ldr	r3, [r4, #24]
 800a872:	b282      	uxth	r2, r0
 800a874:	4629      	mov	r1, r5
 800a876:	7d20      	ldrb	r0, [r4, #20]
 800a878:	f009 fd12 	bl	80142a0 <udp_send>
 800a87c:	b009      	add	sp, #36	; 0x24
 800a87e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a882:	e9cd 1804 	strd	r1, r8, [sp, #16]
 800a886:	e9cd 7202 	strd	r7, r2, [sp, #8]
 800a88a:	e9cd ce00 	strd	ip, lr, [sp]
 800a88e:	4a0f      	ldr	r2, [pc, #60]	; (800a8cc <RemoteConfig::HandleList()+0xcc>)
 800a890:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800a894:	4628      	mov	r0, r5
 800a896:	f7ff fe27 	bl	800a4e8 <snprintf>
 800a89a:	e7e3      	b.n	800a864 <RemoteConfig::HandleList()+0x64>
 800a89c:	2b06      	cmp	r3, #6
 800a89e:	d1ed      	bne.n	800a87c <RemoteConfig::HandleList()+0x7c>
 800a8a0:	6833      	ldr	r3, [r6, #0]
 800a8a2:	799b      	ldrb	r3, [r3, #6]
 800a8a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a8a6:	d1e9      	bne.n	800a87c <RemoteConfig::HandleList()+0x7c>
 800a8a8:	f642 1305 	movw	r3, #10501	; 0x2905
 800a8ac:	9300      	str	r3, [sp, #0]
 800a8ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8b2:	e7de      	b.n	800a872 <RemoteConfig::HandleList()+0x72>
 800a8b4:	0801af50 	stmdaeq	r1, {r4, r6, r8, r9, sl, fp, sp, pc}
 800a8b8:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 800a8bc:	20000104 	andcs	r0, r0, r4, lsl #2
 800a8c0:	0801b016 	stmdaeq	r1, {r1, r2, r4, ip, sp, pc}
 800a8c4:	20000108 	andcs	r0, r0, r8, lsl #2
 800a8c8:	0801ae65 	stmdaeq	r1, {r0, r2, r5, r6, r9, sl, fp, sp, pc}
 800a8cc:	0801ae7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r9, sl, fp, sp, pc}

0800a8d0 <RemoteConfig::HandleDisplayGet()>:
 800a8d0:	69c3      	ldr	r3, [r0, #28]
 800a8d2:	2b08      	cmp	r3, #8
 800a8d4:	d11b      	bne.n	800a90e <RemoteConfig::HandleDisplayGet()+0x3e>
 800a8d6:	4b0e      	ldr	r3, [pc, #56]	; (800a910 <RemoteConfig::HandleDisplayGet()+0x40>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8dc:	7e19      	ldrb	r1, [r3, #24]
 800a8de:	4d0d      	ldr	r5, [pc, #52]	; (800a914 <RemoteConfig::HandleDisplayGet()+0x44>)
 800a8e0:	4a0d      	ldr	r2, [pc, #52]	; (800a918 <RemoteConfig::HandleDisplayGet()+0x48>)
 800a8e2:	4b0e      	ldr	r3, [pc, #56]	; (800a91c <RemoteConfig::HandleDisplayGet()+0x4c>)
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	2900      	cmp	r1, #0
 800a8e8:	bf18      	it	ne
 800a8ea:	4613      	movne	r3, r2
 800a8ec:	6828      	ldr	r0, [r5, #0]
 800a8ee:	4a0c      	ldr	r2, [pc, #48]	; (800a920 <RemoteConfig::HandleDisplayGet()+0x50>)
 800a8f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a8f4:	f7ff fdf8 	bl	800a4e8 <snprintf>
 800a8f8:	f642 1305 	movw	r3, #10501	; 0x2905
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	b282      	uxth	r2, r0
 800a900:	69a3      	ldr	r3, [r4, #24]
 800a902:	6829      	ldr	r1, [r5, #0]
 800a904:	7d20      	ldrb	r0, [r4, #20]
 800a906:	f009 fccb 	bl	80142a0 <udp_send>
 800a90a:	b003      	add	sp, #12
 800a90c:	bd30      	pop	{r4, r5, pc}
 800a90e:	4770      	bx	lr
 800a910:	2000fcb8 			; <UNDEFINED> instruction: 0x2000fcb8
 800a914:	20000104 	andcs	r0, r0, r4, lsl #2
 800a918:	0801ae97 	stmdaeq	r1, {r0, r1, r2, r4, r7, r9, sl, fp, sp, pc}
 800a91c:	0801ae94 	stmdaeq	r1, {r2, r4, r7, r9, sl, fp, sp, pc}
 800a920:	0801ae9b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r9, sl, fp, sp, pc}

0800a924 <RemoteConfig::HandleTftpGet()>:
 800a924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a926:	4604      	mov	r4, r0
 800a928:	f000 fe26 	bl	800b578 <RemoteConfig::PlatformHandleTftpGet()>
 800a92c:	69e3      	ldr	r3, [r4, #28]
 800a92e:	2b05      	cmp	r3, #5
 800a930:	d116      	bne.n	800a960 <RemoteConfig::HandleTftpGet()+0x3c>
 800a932:	f894 1020 	ldrb.w	r1, [r4, #32]
 800a936:	4d0b      	ldr	r5, [pc, #44]	; (800a964 <RemoteConfig::HandleTftpGet()+0x40>)
 800a938:	4a0b      	ldr	r2, [pc, #44]	; (800a968 <RemoteConfig::HandleTftpGet()+0x44>)
 800a93a:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <RemoteConfig::HandleTftpGet()+0x48>)
 800a93c:	6828      	ldr	r0, [r5, #0]
 800a93e:	2900      	cmp	r1, #0
 800a940:	bf08      	it	eq
 800a942:	4613      	moveq	r3, r2
 800a944:	4a0a      	ldr	r2, [pc, #40]	; (800a970 <RemoteConfig::HandleTftpGet()+0x4c>)
 800a946:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a94a:	f7ff fdcd 	bl	800a4e8 <snprintf>
 800a94e:	f642 1305 	movw	r3, #10501	; 0x2905
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	b282      	uxth	r2, r0
 800a956:	69a3      	ldr	r3, [r4, #24]
 800a958:	6829      	ldr	r1, [r5, #0]
 800a95a:	7d20      	ldrb	r0, [r4, #20]
 800a95c:	f009 fca0 	bl	80142a0 <udp_send>
 800a960:	b003      	add	sp, #12
 800a962:	bd30      	pop	{r4, r5, pc}
 800a964:	20000104 	andcs	r0, r0, r4, lsl #2
 800a968:	0801ae97 	stmdaeq	r1, {r0, r1, r2, r4, r7, r9, sl, fp, sp, pc}
 800a96c:	0801ae94 	stmdaeq	r1, {r2, r4, r7, r9, sl, fp, sp, pc}
 800a970:	0801aea7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r9, sl, fp, sp, pc}

0800a974 <RemoteConfig::HandleVersion()>:
 800a974:	69c3      	ldr	r3, [r0, #28]
 800a976:	2b08      	cmp	r3, #8
 800a978:	d114      	bne.n	800a9a4 <RemoteConfig::HandleVersion()+0x30>
 800a97a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a97c:	4d0a      	ldr	r5, [pc, #40]	; (800a9a8 <RemoteConfig::HandleVersion()+0x34>)
 800a97e:	4b0b      	ldr	r3, [pc, #44]	; (800a9ac <RemoteConfig::HandleVersion()+0x38>)
 800a980:	4a0b      	ldr	r2, [pc, #44]	; (800a9b0 <RemoteConfig::HandleVersion()+0x3c>)
 800a982:	4604      	mov	r4, r0
 800a984:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a988:	6828      	ldr	r0, [r5, #0]
 800a98a:	f7ff fdad 	bl	800a4e8 <snprintf>
 800a98e:	f642 1305 	movw	r3, #10501	; 0x2905
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	b282      	uxth	r2, r0
 800a996:	69a3      	ldr	r3, [r4, #24]
 800a998:	6829      	ldr	r1, [r5, #0]
 800a99a:	7d20      	ldrb	r0, [r4, #20]
 800a99c:	f009 fc80 	bl	80142a0 <udp_send>
 800a9a0:	b003      	add	sp, #12
 800a9a2:	bd30      	pop	{r4, r5, pc}
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	20000104 	andcs	r0, r0, r4, lsl #2
 800a9ac:	20010632 	andcs	r0, r1, r2, lsr r6
 800a9b0:	0801aeb0 	stmdaeq	r1, {r4, r5, r7, r9, sl, fp, sp, pc}

0800a9b4 <RemoteConfig::HandleUptime()>:
 800a9b4:	7bc3      	ldrb	r3, [r0, #15]
 800a9b6:	b1e3      	cbz	r3, 800a9f2 <RemoteConfig::HandleUptime()+0x3e>
 800a9b8:	4b0e      	ldr	r3, [pc, #56]	; (800a9f4 <RemoteConfig::HandleUptime()+0x40>)
 800a9ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	69c3      	ldr	r3, [r0, #28]
 800a9c0:	2b07      	cmp	r3, #7
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	d113      	bne.n	800a9ee <RemoteConfig::HandleUptime()+0x3a>
 800a9c6:	4d0c      	ldr	r5, [pc, #48]	; (800a9f8 <RemoteConfig::HandleUptime()+0x44>)
 800a9c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a9cc:	6828      	ldr	r0, [r5, #0]
 800a9ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d6:	4a09      	ldr	r2, [pc, #36]	; (800a9fc <RemoteConfig::HandleUptime()+0x48>)
 800a9d8:	f7ff fd86 	bl	800a4e8 <snprintf>
 800a9dc:	f642 1305 	movw	r3, #10501	; 0x2905
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	b282      	uxth	r2, r0
 800a9e4:	69a3      	ldr	r3, [r4, #24]
 800a9e6:	6829      	ldr	r1, [r5, #0]
 800a9e8:	7d20      	ldrb	r0, [r4, #20]
 800a9ea:	f009 fc59 	bl	80142a0 <udp_send>
 800a9ee:	b003      	add	sp, #12
 800a9f0:	bd30      	pop	{r4, r5, pc}
 800a9f2:	4770      	bx	lr
 800a9f4:	20010694 	mulcs	r1, r4, r6
 800a9f8:	20000104 	andcs	r0, r0, r4, lsl #2
 800a9fc:	0801aebb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, fp, sp, pc}

0800aa00 <RemoteConfig::HandleDisplaySet()>:
 800aa00:	b538      	push	{r3, r4, r5, lr}
 800aa02:	69c3      	ldr	r3, [r0, #28]
 800aa04:	2b09      	cmp	r3, #9
 800aa06:	d111      	bne.n	800aa2c <RemoteConfig::HandleDisplaySet()+0x2c>
 800aa08:	4b09      	ldr	r3, [pc, #36]	; (800aa30 <RemoteConfig::HandleDisplaySet()+0x30>)
 800aa0a:	681c      	ldr	r4, [r3, #0]
 800aa0c:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <RemoteConfig::HandleDisplaySet()+0x34>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	7a5d      	ldrb	r5, [r3, #9]
 800aa12:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800aa16:	4259      	negs	r1, r3
 800aa18:	4159      	adcs	r1, r3
 800aa1a:	7621      	strb	r1, [r4, #24]
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f00d f97b 	bl	8017d18 <ILI9341::EnableSleep(bool)>
 800aa22:	2d30      	cmp	r5, #48	; 0x30
 800aa24:	bf1e      	ittt	ne
 800aa26:	4b04      	ldrne	r3, [pc, #16]	; (800aa38 <RemoteConfig::HandleDisplaySet()+0x38>)
 800aa28:	681b      	ldrne	r3, [r3, #0]
 800aa2a:	6223      	strne	r3, [r4, #32]
 800aa2c:	bd38      	pop	{r3, r4, r5, pc}
 800aa2e:	bf00      	nop
 800aa30:	2000fcb8 			; <UNDEFINED> instruction: 0x2000fcb8
 800aa34:	20000104 	andcs	r0, r0, r4, lsl #2
 800aa38:	20010694 	mulcs	r1, r4, r6

0800aa3c <Display::TextStatus(char const*)>:
 800aa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3e:	7d42      	ldrb	r2, [r0, #21]
 800aa40:	3a01      	subs	r2, #1
 800aa42:	460e      	mov	r6, r1
 800aa44:	b2d2      	uxtb	r2, r2
 800aa46:	2100      	movs	r1, #0
 800aa48:	4604      	mov	r4, r0
 800aa4a:	f00c ffbd 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 800aa4e:	2500      	movs	r5, #0
 800aa50:	7d23      	ldrb	r3, [r4, #20]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	42ab      	cmp	r3, r5
 800aa56:	d81d      	bhi.n	800aa94 <Display::TextStatus(char const*)+0x58>
 800aa58:	7d62      	ldrb	r2, [r4, #21]
 800aa5a:	3a01      	subs	r2, #1
 800aa5c:	b2d2      	uxtb	r2, r2
 800aa5e:	2100      	movs	r1, #0
 800aa60:	4620      	mov	r0, r4
 800aa62:	f00c ffb1 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 800aa66:	7d62      	ldrb	r2, [r4, #21]
 800aa68:	7d21      	ldrb	r1, [r4, #20]
 800aa6a:	2500      	movs	r5, #0
 800aa6c:	5d73      	ldrb	r3, [r6, r5]
 800aa6e:	b11b      	cbz	r3, 800aa78 <Display::TextStatus(char const*)+0x3c>
 800aa70:	1c6b      	adds	r3, r5, #1
 800aa72:	42a9      	cmp	r1, r5
 800aa74:	461d      	mov	r5, r3
 800aa76:	dcf9      	bgt.n	800aa6c <Display::TextStatus(char const*)+0x30>
 800aa78:	3a01      	subs	r2, #1
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f00c ffa3 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 800aa82:	7d23      	ldrb	r3, [r4, #20]
 800aa84:	b2ed      	uxtb	r5, r5
 800aa86:	429d      	cmp	r5, r3
 800aa88:	bf94      	ite	ls
 800aa8a:	1977      	addls	r7, r6, r5
 800aa8c:	18f7      	addhi	r7, r6, r3
 800aa8e:	42b7      	cmp	r7, r6
 800aa90:	d106      	bne.n	800aaa0 <Display::TextStatus(char const*)+0x64>
 800aa92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa94:	2120      	movs	r1, #32
 800aa96:	4620      	mov	r0, r4
 800aa98:	f00c ffa4 	bl	80179e4 <Display::PutChar(int)>
 800aa9c:	3501      	adds	r5, #1
 800aa9e:	e7d7      	b.n	800aa50 <Display::TextStatus(char const*)+0x14>
 800aaa0:	f816 1b01 	ldrb.w	r1, [r6], #1
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f00c ff9d 	bl	80179e4 <Display::PutChar(int)>
 800aaaa:	e7f0      	b.n	800aa8e <Display::TextStatus(char const*)+0x52>

0800aaac <RemoteConfig::HandleTftpSet()>:
 800aaac:	69c3      	ldr	r3, [r0, #28]
 800aaae:	2b06      	cmp	r3, #6
 800aab0:	d12a      	bne.n	800ab08 <RemoteConfig::HandleTftpSet()+0x5c>
 800aab2:	b570      	push	{r4, r5, r6, lr}
 800aab4:	4b15      	ldr	r3, [pc, #84]	; (800ab0c <RemoteConfig::HandleTftpSet()+0x60>)
 800aab6:	4e16      	ldr	r6, [pc, #88]	; (800ab10 <RemoteConfig::HandleTftpSet()+0x64>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	6835      	ldr	r5, [r6, #0]
 800aabc:	799b      	ldrb	r3, [r3, #6]
 800aabe:	2b30      	cmp	r3, #48	; 0x30
 800aac0:	bf14      	ite	ne
 800aac2:	2301      	movne	r3, #1
 800aac4:	2300      	moveq	r3, #0
 800aac6:	4604      	mov	r4, r0
 800aac8:	f880 3020 	strb.w	r3, [r0, #32]
 800aacc:	d015      	beq.n	800aafa <RemoteConfig::HandleTftpSet()+0x4e>
 800aace:	2100      	movs	r1, #0
 800aad0:	7629      	strb	r1, [r5, #24]
 800aad2:	4628      	mov	r0, r5
 800aad4:	f00d f920 	bl	8017d18 <ILI9341::EnableSleep(bool)>
 800aad8:	4b0e      	ldr	r3, [pc, #56]	; (800ab14 <RemoteConfig::HandleTftpSet()+0x68>)
 800aada:	490f      	ldr	r1, [pc, #60]	; (800ab18 <RemoteConfig::HandleTftpSet()+0x6c>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6830      	ldr	r0, [r6, #0]
 800aae0:	622b      	str	r3, [r5, #32]
 800aae2:	f7ff ffab 	bl	800aa3c <Display::TextStatus(char const*)>
 800aae6:	f244 0171 	movw	r1, #16497	; 0x4071
 800aaea:	480c      	ldr	r0, [pc, #48]	; (800ab1c <RemoteConfig::HandleTftpSet()+0x70>)
 800aaec:	f7ff fcd4 	bl	800a498 <printf>
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aaf6:	f000 bd37 	b.w	800b568 <RemoteConfig::PlatformHandleTftpSet()>
 800aafa:	4909      	ldr	r1, [pc, #36]	; (800ab20 <RemoteConfig::HandleTftpSet()+0x74>)
 800aafc:	4628      	mov	r0, r5
 800aafe:	f7ff ff9d 	bl	800aa3c <Display::TextStatus(char const*)>
 800ab02:	f248 0171 	movw	r1, #32881	; 0x8071
 800ab06:	e7f0      	b.n	800aaea <RemoteConfig::HandleTftpSet()+0x3e>
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	20000104 	andcs	r0, r0, r4, lsl #2
 800ab10:	2000fcb8 			; <UNDEFINED> instruction: 0x2000fcb8
 800ab14:	20010694 	mulcs	r1, r4, r6
 800ab18:	0801aec8 	stmdaeq	r1, {r3, r6, r7, r9, sl, fp, sp, pc}
 800ab1c:	0801ab99 	stmdaeq	r1, {r0, r3, r4, r7, r8, r9, fp, sp, pc}
 800ab20:	0801aeda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r9, sl, fp, sp, pc}

0800ab24 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800ab24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab28:	2500      	movs	r5, #0
 800ab2a:	461f      	mov	r7, r3
 800ab2c:	6083      	str	r3, [r0, #8]
 800ab2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab32:	4e13      	ldr	r6, [pc, #76]	; (800ab80 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x5c>)
 800ab34:	f8df a050 	ldr.w	sl, [pc, #80]	; 800ab88 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x64>
 800ab38:	60c5      	str	r5, [r0, #12]
 800ab3a:	e9c0 3505 	strd	r3, r5, [r0, #20]
 800ab3e:	4b11      	ldr	r3, [pc, #68]	; (800ab84 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x60>)
 800ab40:	8205      	strh	r5, [r0, #16]
 800ab42:	e9c0 1200 	strd	r1, r2, [r0]
 800ab46:	4604      	mov	r4, r0
 800ab48:	6018      	str	r0, [r3, #0]
 800ab4a:	4689      	mov	r9, r1
 800ab4c:	61c5      	str	r5, [r0, #28]
 800ab4e:	f880 5020 	strb.w	r5, [r0, #32]
 800ab52:	4631      	mov	r1, r6
 800ab54:	f8da 0000 	ldr.w	r0, [sl]
 800ab58:	4690      	mov	r8, r2
 800ab5a:	f00a f874 	bl	8014c46 <Network::MacAddressCopyTo(unsigned char*)>
 800ab5e:	f8da 0000 	ldr.w	r0, [sl]
 800ab62:	f886 9006 	strb.w	r9, [r6, #6]
 800ab66:	f642 1105 	movw	r1, #10501	; 0x2905
 800ab6a:	f886 8007 	strb.w	r8, [r6, #7]
 800ab6e:	7237      	strb	r7, [r6, #8]
 800ab70:	7275      	strb	r5, [r6, #9]
 800ab72:	f00a f862 	bl	8014c3a <Network::Begin(unsigned short)>
 800ab76:	6160      	str	r0, [r4, #20]
 800ab78:	4620      	mov	r0, r4
 800ab7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab7e:	bf00      	nop
 800ab80:	20000108 	andcs	r0, r0, r8, lsl #2
 800ab84:	2000012c 	andcs	r0, r0, ip, lsr #2
 800ab88:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

0800ab8c <RemoteConfig::GetStringNode() const>:
 800ab8c:	4b03      	ldr	r3, [pc, #12]	; (800ab9c <RemoteConfig::GetStringNode() const+0x10>)
 800ab8e:	7998      	ldrb	r0, [r3, #6]
 800ab90:	4b03      	ldr	r3, [pc, #12]	; (800aba0 <RemoteConfig::GetStringNode() const+0x14>)
 800ab92:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800ab96:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ab9a:	4770      	bx	lr
 800ab9c:	20000108 	andcs	r0, r0, r8, lsl #2
 800aba0:	0801af50 	stmdaeq	r1, {r4, r6, r8, r9, sl, fp, sp, pc}

0800aba4 <RemoteConfig::GetStringOutput() const>:
 800aba4:	4b03      	ldr	r3, [pc, #12]	; (800abb4 <RemoteConfig::GetStringOutput() const+0x10>)
 800aba6:	79d8      	ldrb	r0, [r3, #7]
 800aba8:	4b03      	ldr	r3, [pc, #12]	; (800abb8 <RemoteConfig::GetStringOutput() const+0x14>)
 800abaa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800abae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800abb2:	4770      	bx	lr
 800abb4:	20000108 	andcs	r0, r0, r8, lsl #2
 800abb8:	0801b016 	stmdaeq	r1, {r1, r2, r4, ip, sp, pc}

0800abbc <RemoteConfig::SetDisable(bool)>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	7b03      	ldrb	r3, [r0, #12]
 800abc0:	4604      	mov	r4, r0
 800abc2:	b161      	cbz	r1, 800abde <RemoteConfig::SetDisable(bool)+0x22>
 800abc4:	b953      	cbnz	r3, 800abdc <RemoteConfig::SetDisable(bool)+0x20>
 800abc6:	4b0c      	ldr	r3, [pc, #48]	; (800abf8 <RemoteConfig::SetDisable(bool)+0x3c>)
 800abc8:	f642 1105 	movw	r1, #10501	; 0x2905
 800abcc:	6818      	ldr	r0, [r3, #0]
 800abce:	f00a f837 	bl	8014c40 <Network::End(unsigned short)>
 800abd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abd6:	6163      	str	r3, [r4, #20]
 800abd8:	2301      	movs	r3, #1
 800abda:	7323      	strb	r3, [r4, #12]
 800abdc:	bd38      	pop	{r3, r4, r5, pc}
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d0fc      	beq.n	800abdc <RemoteConfig::SetDisable(bool)+0x20>
 800abe2:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <RemoteConfig::SetDisable(bool)+0x3c>)
 800abe4:	460d      	mov	r5, r1
 800abe6:	6818      	ldr	r0, [r3, #0]
 800abe8:	f642 1105 	movw	r1, #10501	; 0x2905
 800abec:	f00a f825 	bl	8014c3a <Network::Begin(unsigned short)>
 800abf0:	7325      	strb	r5, [r4, #12]
 800abf2:	6160      	str	r0, [r4, #20]
 800abf4:	e7f2      	b.n	800abdc <RemoteConfig::SetDisable(bool)+0x20>
 800abf6:	bf00      	nop
 800abf8:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

0800abfc <RemoteConfig::SetDisplayName(char const*)>:
 800abfc:	4809      	ldr	r0, [pc, #36]	; (800ac24 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800abfe:	b508      	push	{r3, lr}
 800ac00:	2217      	movs	r2, #23
 800ac02:	1e4b      	subs	r3, r1, #1
 800ac04:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ac08:	b911      	cbnz	r1, 800ac10 <RemoteConfig::SetDisplayName(char const*)+0x14>
 800ac0a:	f00d fbef 	bl	80183ec <memset>
 800ac0e:	e003      	b.n	800ac18 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800ac10:	3a01      	subs	r2, #1
 800ac12:	f800 1b01 	strb.w	r1, [r0], #1
 800ac16:	d1f5      	bne.n	800ac04 <RemoteConfig::SetDisplayName(char const*)+0x8>
 800ac18:	4b03      	ldr	r3, [pc, #12]	; (800ac28 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 2020 	strb.w	r2, [r3, #32]
 800ac20:	bd08      	pop	{r3, pc}
 800ac22:	bf00      	nop
 800ac24:	20000111 	andcs	r0, r0, r1, lsl r1
 800ac28:	20000108 	andcs	r0, r0, r8, lsl #2

0800ac2c <RemoteConfig::HandleGet(void*, unsigned int)>:
 800ac2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac2e:	4f2a      	ldr	r7, [pc, #168]	; (800acd8 <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 800ac30:	b085      	sub	sp, #20
 800ac32:	4604      	mov	r4, r0
 800ac34:	4616      	mov	r6, r2
 800ac36:	460d      	mov	r5, r1
 800ac38:	b9a9      	cbnz	r1, 800ac66 <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800ac40:	aa03      	add	r2, sp, #12
 800ac42:	3105      	adds	r1, #5
 800ac44:	9303      	str	r3, [sp, #12]
 800ac46:	f000 fc65 	bl	800b514 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800ac4a:	1e03      	subs	r3, r0, #0
 800ac4c:	da1b      	bge.n	800ac86 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800ac4e:	f642 1305 	movw	r3, #10501	; 0x2905
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	4921      	ldr	r1, [pc, #132]	; (800acdc <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800ac56:	69a3      	ldr	r3, [r4, #24]
 800ac58:	7d20      	ldrb	r0, [r4, #20]
 800ac5a:	220b      	movs	r2, #11
 800ac5c:	f009 fb20 	bl	80142a0 <udp_send>
 800ac60:	200c      	movs	r0, #12
 800ac62:	b005      	add	sp, #20
 800ac64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac66:	9203      	str	r2, [sp, #12]
 800ac68:	aa03      	add	r2, sp, #12
 800ac6a:	6039      	str	r1, [r7, #0]
 800ac6c:	f000 fc52 	bl	800b514 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800ac70:	1e03      	subs	r3, r0, #0
 800ac72:	da08      	bge.n	800ac86 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800ac74:	2e0b      	cmp	r6, #11
 800ac76:	4632      	mov	r2, r6
 800ac78:	4918      	ldr	r1, [pc, #96]	; (800acdc <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800ac7a:	bf28      	it	cs
 800ac7c:	220b      	movcs	r2, #11
 800ac7e:	4628      	mov	r0, r5
 800ac80:	f00d fb92 	bl	80183a8 <memcpy>
 800ac84:	e7ec      	b.n	800ac60 <RemoteConfig::HandleGet(void*, unsigned int)+0x34>
 800ac86:	4916      	ldr	r1, [pc, #88]	; (800ace0 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 800ac88:	221c      	movs	r2, #28
 800ac8a:	4353      	muls	r3, r2
 800ac8c:	18ca      	adds	r2, r1, r3
 800ac8e:	58cb      	ldr	r3, [r1, r3]
 800ac90:	6852      	ldr	r2, [r2, #4]
 800ac92:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800ac96:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800ac9a:	07d2      	lsls	r2, r2, #31
 800ac9c:	bf48      	it	mi
 800ac9e:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800aca2:	a903      	add	r1, sp, #12
 800aca4:	bf48      	it	mi
 800aca6:	58d3      	ldrmi	r3, [r2, r3]
 800aca8:	4798      	blx	r3
 800acaa:	b95d      	cbnz	r5, 800acc4 <RemoteConfig::HandleGet(void*, unsigned int)+0x98>
 800acac:	f642 1305 	movw	r3, #10501	; 0x2905
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800acb6:	69a3      	ldr	r3, [r4, #24]
 800acb8:	6839      	ldr	r1, [r7, #0]
 800acba:	7d20      	ldrb	r0, [r4, #20]
 800acbc:	f009 faf0 	bl	80142a0 <udp_send>
 800acc0:	9803      	ldr	r0, [sp, #12]
 800acc2:	e7ce      	b.n	800ac62 <RemoteConfig::HandleGet(void*, unsigned int)+0x36>
 800acc4:	9a03      	ldr	r2, [sp, #12]
 800acc6:	6839      	ldr	r1, [r7, #0]
 800acc8:	42b2      	cmp	r2, r6
 800acca:	bf28      	it	cs
 800accc:	4632      	movcs	r2, r6
 800acce:	4628      	mov	r0, r5
 800acd0:	f00d fb75 	bl	80183be <memmove>
 800acd4:	e7f4      	b.n	800acc0 <RemoteConfig::HandleGet(void*, unsigned int)+0x94>
 800acd6:	bf00      	nop
 800acd8:	20000104 	andcs	r0, r0, r4, lsl #2
 800acdc:	0801aeed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r9, sl, fp, sp, pc}
 800ace0:	0801b1e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, ip, sp, pc}

0800ace4 <RemoteConfig::HandleGetNoParams()>:
 800ace4:	2200      	movs	r2, #0
 800ace6:	4611      	mov	r1, r2
 800ace8:	f7ff bfa0 	b.w	800ac2c <RemoteConfig::HandleGet(void*, unsigned int)>

0800acec <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800acec:	b500      	push	{lr}
 800acee:	4a09      	ldr	r2, [pc, #36]	; (800ad14 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800acf0:	b08d      	sub	sp, #52	; 0x34
 800acf2:	a803      	add	r0, sp, #12
 800acf4:	9101      	str	r1, [sp, #4]
 800acf6:	6811      	ldr	r1, [r2, #0]
 800acf8:	f000 fa44 	bl	800b184 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800acfc:	4906      	ldr	r1, [pc, #24]	; (800ad18 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x2c>)
 800acfe:	9b01      	ldr	r3, [sp, #4]
 800ad00:	6809      	ldr	r1, [r1, #0]
 800ad02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad06:	a803      	add	r0, sp, #12
 800ad08:	f000 fb60 	bl	800b3cc <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800ad0c:	b00d      	add	sp, #52	; 0x34
 800ad0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad12:	bf00      	nop
 800ad14:	2000fc9c 	mulcs	r0, ip, ip
 800ad18:	20000104 	andcs	r0, r0, r4, lsl #2

0800ad1c <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800ad1c:	b500      	push	{lr}
 800ad1e:	4a09      	ldr	r2, [pc, #36]	; (800ad44 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800ad20:	b09d      	sub	sp, #116	; 0x74
 800ad22:	a803      	add	r0, sp, #12
 800ad24:	9101      	str	r1, [sp, #4]
 800ad26:	6811      	ldr	r1, [r2, #0]
 800ad28:	f00a fa9a 	bl	8015260 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800ad2c:	4906      	ldr	r1, [pc, #24]	; (800ad48 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x2c>)
 800ad2e:	9b01      	ldr	r3, [sp, #4]
 800ad30:	6809      	ldr	r1, [r1, #0]
 800ad32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad36:	a803      	add	r0, sp, #12
 800ad38:	f00a fc6c 	bl	8015614 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800ad3c:	b01d      	add	sp, #116	; 0x74
 800ad3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad42:	bf00      	nop
 800ad44:	2000fc98 	mulcs	r0, r8, ip
 800ad48:	20000104 	andcs	r0, r0, r4, lsl #2

0800ad4c <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 800ad4c:	b500      	push	{lr}
 800ad4e:	4a09      	ldr	r2, [pc, #36]	; (800ad74 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 800ad50:	b0a7      	sub	sp, #156	; 0x9c
 800ad52:	a803      	add	r0, sp, #12
 800ad54:	9101      	str	r1, [sp, #4]
 800ad56:	6811      	ldr	r1, [r2, #0]
 800ad58:	f003 f832 	bl	800ddc0 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800ad5c:	4906      	ldr	r1, [pc, #24]	; (800ad78 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x2c>)
 800ad5e:	9b01      	ldr	r3, [sp, #4]
 800ad60:	6809      	ldr	r1, [r1, #0]
 800ad62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad66:	a803      	add	r0, sp, #12
 800ad68:	f003 fbdc 	bl	800e524 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 800ad6c:	b027      	add	sp, #156	; 0x9c
 800ad6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad72:	bf00      	nop
 800ad74:	2000fca4 	andcs	pc, r0, r4, lsr #25
 800ad78:	20000104 	andcs	r0, r0, r4, lsl #2

0800ad7c <RemoteConfig::HandleGetE131Txt(unsigned int&)>:
 800ad7c:	b500      	push	{lr}
 800ad7e:	4a09      	ldr	r2, [pc, #36]	; (800ada4 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x28>)
 800ad80:	b08d      	sub	sp, #52	; 0x34
 800ad82:	a803      	add	r0, sp, #12
 800ad84:	9101      	str	r1, [sp, #4]
 800ad86:	6811      	ldr	r1, [r2, #0]
 800ad88:	f004 fc12 	bl	800f5b0 <E131Params::E131Params(E131ParamsStore*)>
 800ad8c:	4906      	ldr	r1, [pc, #24]	; (800ada8 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x2c>)
 800ad8e:	9b01      	ldr	r3, [sp, #4]
 800ad90:	6809      	ldr	r1, [r1, #0]
 800ad92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad96:	a803      	add	r0, sp, #12
 800ad98:	f004 fef4 	bl	800fb84 <E131Params::Save(char*, unsigned int, unsigned int&)>
 800ad9c:	b00d      	add	sp, #52	; 0x34
 800ad9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ada2:	bf00      	nop
 800ada4:	2000fcac 	andcs	pc, r0, ip, lsr #25
 800ada8:	20000104 	andcs	r0, r0, r4, lsl #2

0800adac <RemoteConfig::HandleGetParamsTxt(unsigned int&)>:
 800adac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800adae:	4a08      	ldr	r2, [pc, #32]	; (800add0 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x24>)
 800adb0:	9101      	str	r1, [sp, #4]
 800adb2:	a802      	add	r0, sp, #8
 800adb4:	6811      	ldr	r1, [r2, #0]
 800adb6:	f006 fa17 	bl	80111e8 <DmxParams::DmxParams(DmxParamsStore*)>
 800adba:	4906      	ldr	r1, [pc, #24]	; (800add4 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x28>)
 800adbc:	9b01      	ldr	r3, [sp, #4]
 800adbe:	6809      	ldr	r1, [r1, #0]
 800adc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800adc4:	a802      	add	r0, sp, #8
 800adc6:	f006 fb31 	bl	801142c <DmxParams::Save(char*, unsigned int, unsigned int&)>
 800adca:	b007      	add	sp, #28
 800adcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800add0:	2000fc94 	mulcs	r0, r4, ip
 800add4:	20000104 	andcs	r0, r0, r4, lsl #2

0800add8 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 800add8:	b500      	push	{lr}
 800adda:	4a09      	ldr	r2, [pc, #36]	; (800ae00 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 800addc:	b093      	sub	sp, #76	; 0x4c
 800adde:	a803      	add	r0, sp, #12
 800ade0:	9101      	str	r1, [sp, #4]
 800ade2:	6811      	ldr	r1, [r2, #0]
 800ade4:	f007 f8e4 	bl	8011fb0 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 800ade8:	4906      	ldr	r1, [pc, #24]	; (800ae04 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x2c>)
 800adea:	9b01      	ldr	r3, [sp, #4]
 800adec:	6809      	ldr	r1, [r1, #0]
 800adee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800adf2:	a803      	add	r0, sp, #12
 800adf4:	f007 fbfe 	bl	80125f4 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)>
 800adf8:	b013      	add	sp, #76	; 0x4c
 800adfa:	f85d fb04 	ldr.w	pc, [sp], #4
 800adfe:	bf00      	nop
 800ae00:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0
 800ae04:	20000104 	andcs	r0, r0, r4, lsl #2

0800ae08 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800ae08:	b500      	push	{lr}
 800ae0a:	4a09      	ldr	r2, [pc, #36]	; (800ae30 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800ae0c:	b08d      	sub	sp, #52	; 0x34
 800ae0e:	a802      	add	r0, sp, #8
 800ae10:	9101      	str	r1, [sp, #4]
 800ae12:	6811      	ldr	r1, [r2, #0]
 800ae14:	f00b f990 	bl	8016138 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800ae18:	4906      	ldr	r1, [pc, #24]	; (800ae34 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x2c>)
 800ae1a:	9b01      	ldr	r3, [sp, #4]
 800ae1c:	6809      	ldr	r1, [r1, #0]
 800ae1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae22:	a802      	add	r0, sp, #8
 800ae24:	f00b fac2 	bl	80163ac <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800ae28:	b00d      	add	sp, #52	; 0x34
 800ae2a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae2e:	bf00      	nop
 800ae30:	2000fc90 	mulcs	r0, r0, ip
 800ae34:	20000104 	andcs	r0, r0, r4, lsl #2

0800ae38 <RemoteConfig::HandleSet(void*, unsigned int)>:
 800ae38:	b530      	push	{r4, r5, lr}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	9201      	str	r2, [sp, #4]
 800ae40:	b9d1      	cbnz	r1, 800ae78 <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 800ae42:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800ae46:	9303      	str	r3, [sp, #12]
 800ae48:	4b19      	ldr	r3, [pc, #100]	; (800aeb0 <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 800ae4a:	6819      	ldr	r1, [r3, #0]
 800ae4c:	aa03      	add	r2, sp, #12
 800ae4e:	3101      	adds	r1, #1
 800ae50:	f000 fb60 	bl	800b514 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	db0d      	blt.n	800ae74 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800ae58:	4b16      	ldr	r3, [pc, #88]	; (800aeb4 <RemoteConfig::HandleSet(void*, unsigned int)+0x7c>)
 800ae5a:	221c      	movs	r2, #28
 800ae5c:	fb02 3300 	mla	r3, r2, r0, r3
 800ae60:	68da      	ldr	r2, [r3, #12]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	1051      	asrs	r1, r2, #1
 800ae66:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800ae6a:	07d2      	lsls	r2, r2, #31
 800ae6c:	bf44      	itt	mi
 800ae6e:	5862      	ldrmi	r2, [r4, r1]
 800ae70:	58d3      	ldrmi	r3, [r2, r3]
 800ae72:	4798      	blx	r3
 800ae74:	b005      	add	sp, #20
 800ae76:	bd30      	pop	{r4, r5, pc}
 800ae78:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ae7c:	d8fa      	bhi.n	800ae74 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800ae7e:	4b0e      	ldr	r3, [pc, #56]	; (800aeb8 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	460d      	mov	r5, r1
 800ae84:	07d9      	lsls	r1, r3, #31
 800ae86:	d50b      	bpl.n	800aea0 <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 800ae88:	782b      	ldrb	r3, [r5, #0]
 800ae8a:	2b7b      	cmp	r3, #123	; 0x7b
 800ae8c:	d108      	bne.n	800aea0 <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 800ae8e:	1e51      	subs	r1, r2, #1
 800ae90:	b289      	uxth	r1, r1
 800ae92:	2200      	movs	r2, #0
 800ae94:	4628      	mov	r0, r5
 800ae96:	f00c fa5d 	bl	8017354 <properties::convert_json_file(char*, unsigned short, bool)>
 800ae9a:	1e02      	subs	r2, r0, #0
 800ae9c:	ddea      	ble.n	800ae74 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800ae9e:	b292      	uxth	r2, r2
 800aea0:	4b03      	ldr	r3, [pc, #12]	; (800aeb0 <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 800aea2:	61e2      	str	r2, [r4, #28]
 800aea4:	601d      	str	r5, [r3, #0]
 800aea6:	aa01      	add	r2, sp, #4
 800aea8:	1c69      	adds	r1, r5, #1
 800aeaa:	4620      	mov	r0, r4
 800aeac:	e7d0      	b.n	800ae50 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800aeae:	bf00      	nop
 800aeb0:	20000104 	andcs	r0, r0, r4, lsl #2
 800aeb4:	0801b1e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, ip, sp, pc}
 800aeb8:	2000fcb4 			; <UNDEFINED> instruction: 0x2000fcb4

0800aebc <RemoteConfig::Run()>:
 800aebc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800aec0:	7b05      	ldrb	r5, [r0, #12]
 800aec2:	2d00      	cmp	r5, #0
 800aec4:	d156      	bne.n	800af74 <RemoteConfig::Run()+0xb8>
 800aec6:	4e45      	ldr	r6, [pc, #276]	; (800afdc <RemoteConfig::Run()+0x120>)
 800aec8:	4604      	mov	r4, r0
 800aeca:	f100 0218 	add.w	r2, r0, #24
 800aece:	f10d 030e 	add.w	r3, sp, #14
 800aed2:	7d00      	ldrb	r0, [r0, #20]
 800aed4:	4631      	mov	r1, r6
 800aed6:	f009 f9bd 	bl	8014254 <udp_recv2>
 800aeda:	2803      	cmp	r0, #3
 800aedc:	61e0      	str	r0, [r4, #28]
 800aede:	d949      	bls.n	800af74 <RemoteConfig::Run()+0xb8>
 800aee0:	1e43      	subs	r3, r0, #1
 800aee2:	6831      	ldr	r1, [r6, #0]
 800aee4:	5cca      	ldrb	r2, [r1, r3]
 800aee6:	2a0a      	cmp	r2, #10
 800aee8:	bf18      	it	ne
 800aeea:	4603      	movne	r3, r0
 800aeec:	61e3      	str	r3, [r4, #28]
 800aeee:	7808      	ldrb	r0, [r1, #0]
 800aef0:	283f      	cmp	r0, #63	; 0x3f
 800aef2:	d137      	bne.n	800af64 <RemoteConfig::Run()+0xa8>
 800aef4:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 800aff4 <RemoteConfig::Run()+0x138>
 800aef8:	3b01      	subs	r3, #1
 800aefa:	61e3      	str	r3, [r4, #28]
 800aefc:	462a      	mov	r2, r5
 800aefe:	4667      	mov	r7, ip
 800af00:	f89c 500e 	ldrb.w	r5, [ip, #14]
 800af04:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 800af08:	b16d      	cbz	r5, 800af26 <RemoteConfig::Run()+0x6a>
 800af0a:	4283      	cmp	r3, r0
 800af0c:	d80d      	bhi.n	800af2a <RemoteConfig::Run()+0x6e>
 800af0e:	3201      	adds	r2, #1
 800af10:	2a09      	cmp	r2, #9
 800af12:	f10c 0c10 	add.w	ip, ip, #16
 800af16:	d1f3      	bne.n	800af00 <RemoteConfig::Run()+0x44>
 800af18:	f642 1305 	movw	r3, #10501	; 0x2905
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	69a3      	ldr	r3, [r4, #24]
 800af20:	492f      	ldr	r1, [pc, #188]	; (800afe0 <RemoteConfig::Run()+0x124>)
 800af22:	2208      	movs	r2, #8
 800af24:	e04e      	b.n	800afc4 <RemoteConfig::Run()+0x108>
 800af26:	4283      	cmp	r3, r0
 800af28:	d1f1      	bne.n	800af0e <RemoteConfig::Run()+0x52>
 800af2a:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800af2e:	460e      	mov	r6, r1
 800af30:	3d01      	subs	r5, #1
 800af32:	4408      	add	r0, r1
 800af34:	4286      	cmp	r6, r0
 800af36:	d10b      	bne.n	800af50 <RemoteConfig::Run()+0x94>
 800af38:	0113      	lsls	r3, r2, #4
 800af3a:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800af3e:	58fb      	ldr	r3, [r7, r3]
 800af40:	6852      	ldr	r2, [r2, #4]
 800af42:	1051      	asrs	r1, r2, #1
 800af44:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800af48:	07d2      	lsls	r2, r2, #31
 800af4a:	d408      	bmi.n	800af5e <RemoteConfig::Run()+0xa2>
 800af4c:	4798      	blx	r3
 800af4e:	e011      	b.n	800af74 <RemoteConfig::Run()+0xb8>
 800af50:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800af54:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 800af58:	45f0      	cmp	r8, lr
 800af5a:	d0eb      	beq.n	800af34 <RemoteConfig::Run()+0x78>
 800af5c:	e7d7      	b.n	800af0e <RemoteConfig::Run()+0x52>
 800af5e:	5862      	ldr	r2, [r4, r1]
 800af60:	58d3      	ldr	r3, [r2, r3]
 800af62:	e7f3      	b.n	800af4c <RemoteConfig::Run()+0x90>
 800af64:	7b62      	ldrb	r2, [r4, #13]
 800af66:	b92a      	cbnz	r2, 800af74 <RemoteConfig::Run()+0xb8>
 800af68:	2823      	cmp	r0, #35	; 0x23
 800af6a:	d106      	bne.n	800af7a <RemoteConfig::Run()+0xbe>
 800af6c:	4611      	mov	r1, r2
 800af6e:	4620      	mov	r0, r4
 800af70:	f7ff ff62 	bl	800ae38 <RemoteConfig::HandleSet(void*, unsigned int)>
 800af74:	b004      	add	sp, #16
 800af76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af7a:	2821      	cmp	r0, #33	; 0x21
 800af7c:	d1fa      	bne.n	800af74 <RemoteConfig::Run()+0xb8>
 800af7e:	3b01      	subs	r3, #1
 800af80:	2b05      	cmp	r3, #5
 800af82:	61e3      	str	r3, [r4, #28]
 800af84:	d918      	bls.n	800afb8 <RemoteConfig::Run()+0xfc>
 800af86:	4d17      	ldr	r5, [pc, #92]	; (800afe4 <RemoteConfig::Run()+0x128>)
 800af88:	460a      	mov	r2, r1
 800af8a:	f101 0c05 	add.w	ip, r1, #5
 800af8e:	4608      	mov	r0, r1
 800af90:	4560      	cmp	r0, ip
 800af92:	d01b      	beq.n	800afcc <RemoteConfig::Run()+0x110>
 800af94:	f815 6b01 	ldrb.w	r6, [r5], #1
 800af98:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800af9c:	42b7      	cmp	r7, r6
 800af9e:	d0f7      	beq.n	800af90 <RemoteConfig::Run()+0xd4>
 800afa0:	2b08      	cmp	r3, #8
 800afa2:	d909      	bls.n	800afb8 <RemoteConfig::Run()+0xfc>
 800afa4:	4b10      	ldr	r3, [pc, #64]	; (800afe8 <RemoteConfig::Run()+0x12c>)
 800afa6:	3108      	adds	r1, #8
 800afa8:	428a      	cmp	r2, r1
 800afaa:	d015      	beq.n	800afd8 <RemoteConfig::Run()+0x11c>
 800afac:	f813 0b01 	ldrb.w	r0, [r3], #1
 800afb0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800afb4:	4285      	cmp	r5, r0
 800afb6:	d0f7      	beq.n	800afa8 <RemoteConfig::Run()+0xec>
 800afb8:	f642 1305 	movw	r3, #10501	; 0x2905
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	69a3      	ldr	r3, [r4, #24]
 800afc0:	490a      	ldr	r1, [pc, #40]	; (800afec <RemoteConfig::Run()+0x130>)
 800afc2:	2208      	movs	r2, #8
 800afc4:	7d20      	ldrb	r0, [r4, #20]
 800afc6:	f009 f96b 	bl	80142a0 <udp_send>
 800afca:	e7d3      	b.n	800af74 <RemoteConfig::Run()+0xb8>
 800afcc:	2300      	movs	r3, #0
 800afce:	4a08      	ldr	r2, [pc, #32]	; (800aff0 <RemoteConfig::Run()+0x134>)
 800afd0:	011b      	lsls	r3, r3, #4
 800afd2:	4620      	mov	r0, r4
 800afd4:	58d3      	ldr	r3, [r2, r3]
 800afd6:	e7b9      	b.n	800af4c <RemoteConfig::Run()+0x90>
 800afd8:	2301      	movs	r3, #1
 800afda:	e7f8      	b.n	800afce <RemoteConfig::Run()+0x112>
 800afdc:	20000104 	andcs	r0, r0, r4, lsl #2
 800afe0:	0801af11 	stmdaeq	r1, {r0, r4, r8, r9, sl, fp, sp, pc}
 800afe4:	0801aef9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
 800afe8:	0801aeff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
 800afec:	0801af08 	stmdaeq	r1, {r3, r8, r9, sl, fp, sp, pc}
 800aff0:	0801b138 	stmdaeq	r1, {r3, r4, r5, r8, ip, sp, pc}
 800aff4:	0801b0a8 	stmdaeq	r1, {r3, r5, r7, ip, sp, pc}

0800aff8 <RemoteConfig::HandleSetRconfig()>:
 800aff8:	b510      	push	{r4, lr}
 800affa:	4b09      	ldr	r3, [pc, #36]	; (800b020 <RemoteConfig::HandleSetRconfig()+0x28>)
 800affc:	b08a      	sub	sp, #40	; 0x28
 800affe:	4604      	mov	r4, r0
 800b000:	6819      	ldr	r1, [r3, #0]
 800b002:	a801      	add	r0, sp, #4
 800b004:	f000 f8be 	bl	800b184 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800b008:	4b06      	ldr	r3, [pc, #24]	; (800b024 <RemoteConfig::HandleSetRconfig()+0x2c>)
 800b00a:	69e2      	ldr	r2, [r4, #28]
 800b00c:	6819      	ldr	r1, [r3, #0]
 800b00e:	a801      	add	r0, sp, #4
 800b010:	f000 f8ce 	bl	800b1b0 <RemoteConfigParams::Load(char const*, unsigned int)>
 800b014:	4621      	mov	r1, r4
 800b016:	a801      	add	r0, sp, #4
 800b018:	f000 f9e5 	bl	800b3e6 <RemoteConfigParams::Set(RemoteConfig*)>
 800b01c:	b00a      	add	sp, #40	; 0x28
 800b01e:	bd10      	pop	{r4, pc}
 800b020:	2000fc9c 	mulcs	r0, ip, ip
 800b024:	20000104 	andcs	r0, r0, r4, lsl #2

0800b028 <RemoteConfig::HandleSetNetworkTxt()>:
 800b028:	b510      	push	{r4, lr}
 800b02a:	4b07      	ldr	r3, [pc, #28]	; (800b048 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800b02c:	b09a      	sub	sp, #104	; 0x68
 800b02e:	6819      	ldr	r1, [r3, #0]
 800b030:	4604      	mov	r4, r0
 800b032:	a801      	add	r0, sp, #4
 800b034:	f00a f914 	bl	8015260 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800b038:	4b04      	ldr	r3, [pc, #16]	; (800b04c <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800b03a:	69e2      	ldr	r2, [r4, #28]
 800b03c:	6819      	ldr	r1, [r3, #0]
 800b03e:	a801      	add	r0, sp, #4
 800b040:	f00a f926 	bl	8015290 <NetworkParams::Load(char const*, unsigned int)>
 800b044:	b01a      	add	sp, #104	; 0x68
 800b046:	bd10      	pop	{r4, pc}
 800b048:	2000fc98 	mulcs	r0, r8, ip
 800b04c:	20000104 	andcs	r0, r0, r4, lsl #2

0800b050 <RemoteConfig::HandleSetArtnetTxt()>:
 800b050:	b510      	push	{r4, lr}
 800b052:	4b07      	ldr	r3, [pc, #28]	; (800b070 <RemoteConfig::HandleSetArtnetTxt()+0x20>)
 800b054:	b0a4      	sub	sp, #144	; 0x90
 800b056:	6819      	ldr	r1, [r3, #0]
 800b058:	4604      	mov	r4, r0
 800b05a:	a801      	add	r0, sp, #4
 800b05c:	f002 feb0 	bl	800ddc0 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800b060:	4b04      	ldr	r3, [pc, #16]	; (800b074 <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 800b062:	69e2      	ldr	r2, [r4, #28]
 800b064:	6819      	ldr	r1, [r3, #0]
 800b066:	a801      	add	r0, sp, #4
 800b068:	f002 fed8 	bl	800de1c <ArtNetParams::Load(char const*, unsigned int)>
 800b06c:	b024      	add	sp, #144	; 0x90
 800b06e:	bd10      	pop	{r4, pc}
 800b070:	2000fca4 	andcs	pc, r0, r4, lsr #25
 800b074:	20000104 	andcs	r0, r0, r4, lsl #2

0800b078 <RemoteConfig::HandleSetE131Txt()>:
 800b078:	b510      	push	{r4, lr}
 800b07a:	4b07      	ldr	r3, [pc, #28]	; (800b098 <RemoteConfig::HandleSetE131Txt()+0x20>)
 800b07c:	b08a      	sub	sp, #40	; 0x28
 800b07e:	6819      	ldr	r1, [r3, #0]
 800b080:	4604      	mov	r4, r0
 800b082:	a801      	add	r0, sp, #4
 800b084:	f004 fa94 	bl	800f5b0 <E131Params::E131Params(E131ParamsStore*)>
 800b088:	4b04      	ldr	r3, [pc, #16]	; (800b09c <RemoteConfig::HandleSetE131Txt()+0x24>)
 800b08a:	69e2      	ldr	r2, [r4, #28]
 800b08c:	6819      	ldr	r1, [r3, #0]
 800b08e:	a801      	add	r0, sp, #4
 800b090:	f004 fab2 	bl	800f5f8 <E131Params::Load(char const*, unsigned int)>
 800b094:	b00a      	add	sp, #40	; 0x28
 800b096:	bd10      	pop	{r4, pc}
 800b098:	2000fcac 	andcs	pc, r0, ip, lsr #25
 800b09c:	20000104 	andcs	r0, r0, r4, lsl #2

0800b0a0 <RemoteConfig::HandleSetParamsTxt()>:
 800b0a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0a2:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <RemoteConfig::HandleSetParamsTxt()+0x20>)
 800b0a4:	4604      	mov	r4, r0
 800b0a6:	6819      	ldr	r1, [r3, #0]
 800b0a8:	4668      	mov	r0, sp
 800b0aa:	f006 f89d 	bl	80111e8 <DmxParams::DmxParams(DmxParamsStore*)>
 800b0ae:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <RemoteConfig::HandleSetParamsTxt()+0x24>)
 800b0b0:	69e2      	ldr	r2, [r4, #28]
 800b0b2:	6819      	ldr	r1, [r3, #0]
 800b0b4:	4668      	mov	r0, sp
 800b0b6:	f006 f8af 	bl	8011218 <DmxParams::Load(char const*, unsigned int)>
 800b0ba:	b004      	add	sp, #16
 800b0bc:	bd10      	pop	{r4, pc}
 800b0be:	bf00      	nop
 800b0c0:	2000fc94 	mulcs	r0, r4, ip
 800b0c4:	20000104 	andcs	r0, r0, r4, lsl #2

0800b0c8 <RemoteConfig::HandleSetDevicesTxt()>:
 800b0c8:	b510      	push	{r4, lr}
 800b0ca:	4b07      	ldr	r3, [pc, #28]	; (800b0e8 <RemoteConfig::HandleSetDevicesTxt()+0x20>)
 800b0cc:	b090      	sub	sp, #64	; 0x40
 800b0ce:	6819      	ldr	r1, [r3, #0]
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	a801      	add	r0, sp, #4
 800b0d4:	f006 ff6c 	bl	8011fb0 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 800b0d8:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 800b0da:	69e2      	ldr	r2, [r4, #28]
 800b0dc:	6819      	ldr	r1, [r3, #0]
 800b0de:	a801      	add	r0, sp, #4
 800b0e0:	f006 ff92 	bl	8012008 <PixelDmxParams::Load(char const*, unsigned int)>
 800b0e4:	b010      	add	sp, #64	; 0x40
 800b0e6:	bd10      	pop	{r4, pc}
 800b0e8:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0
 800b0ec:	20000104 	andcs	r0, r0, r4, lsl #2

0800b0f0 <RemoteConfig::HandleSetDisplayTxt()>:
 800b0f0:	b510      	push	{r4, lr}
 800b0f2:	4b07      	ldr	r3, [pc, #28]	; (800b110 <RemoteConfig::HandleSetDisplayTxt()+0x20>)
 800b0f4:	b08a      	sub	sp, #40	; 0x28
 800b0f6:	6819      	ldr	r1, [r3, #0]
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	4668      	mov	r0, sp
 800b0fc:	f00b f81c 	bl	8016138 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800b100:	4b04      	ldr	r3, [pc, #16]	; (800b114 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800b102:	69e2      	ldr	r2, [r4, #28]
 800b104:	6819      	ldr	r1, [r3, #0]
 800b106:	4668      	mov	r0, sp
 800b108:	f00b f830 	bl	801616c <DisplayUdfParams::Load(char const*, unsigned int)>
 800b10c:	b00a      	add	sp, #40	; 0x28
 800b10e:	bd10      	pop	{r4, pc}
 800b110:	2000fc90 	mulcs	r0, r0, ip
 800b114:	20000104 	andcs	r0, r0, r4, lsl #2

0800b118 <RemoteConfig::HandleFactory()>:
 800b118:	b538      	push	{r3, r4, r5, lr}
 800b11a:	4d05      	ldr	r5, [pc, #20]	; (800b130 <RemoteConfig::HandleFactory()+0x18>)
 800b11c:	2400      	movs	r4, #0
 800b11e:	4621      	mov	r1, r4
 800b120:	6828      	ldr	r0, [r5, #0]
 800b122:	3401      	adds	r4, #1
 800b124:	f00b fb9e 	bl	8016864 <ConfigStore::ResetSetList(configstore::Store)>
 800b128:	2c1c      	cmp	r4, #28
 800b12a:	d1f8      	bne.n	800b11e <RemoteConfig::HandleFactory()+0x6>
 800b12c:	bd38      	pop	{r3, r4, r5, pc}
 800b12e:	bf00      	nop
 800b130:	2000fc88 	andcs	pc, r0, r8, lsl #25

0800b134 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800b134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b136:	460b      	mov	r3, r1
 800b138:	8885      	ldrh	r5, [r0, #4]
 800b13a:	88c1      	ldrh	r1, [r0, #6]
 800b13c:	42a9      	cmp	r1, r5
 800b13e:	d214      	bcs.n	800b16a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800b140:	4604      	mov	r4, r0
 800b142:	6800      	ldr	r0, [r0, #0]
 800b144:	1a6d      	subs	r5, r5, r1
 800b146:	4408      	add	r0, r1
 800b148:	7a21      	ldrb	r1, [r4, #8]
 800b14a:	b91a      	cbnz	r2, 800b154 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800b14c:	b919      	cbnz	r1, 800b156 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800b14e:	4a0a      	ldr	r2, [pc, #40]	; (800b178 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800b150:	9100      	str	r1, [sp, #0]
 800b152:	e002      	b.n	800b15a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b154:	b159      	cbz	r1, 800b16e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800b156:	9200      	str	r2, [sp, #0]
 800b158:	4a08      	ldr	r2, [pc, #32]	; (800b17c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800b15a:	4629      	mov	r1, r5
 800b15c:	f7ff f9c4 	bl	800a4e8 <snprintf>
 800b160:	4285      	cmp	r5, r0
 800b162:	bfa2      	ittt	ge
 800b164:	88e3      	ldrhge	r3, [r4, #6]
 800b166:	181b      	addge	r3, r3, r0
 800b168:	80e3      	strhge	r3, [r4, #6]
 800b16a:	b003      	add	sp, #12
 800b16c:	bd30      	pop	{r4, r5, pc}
 800b16e:	2201      	movs	r2, #1
 800b170:	9200      	str	r2, [sp, #0]
 800b172:	4a03      	ldr	r2, [pc, #12]	; (800b180 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800b174:	e7f1      	b.n	800b15a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b176:	bf00      	nop
 800b178:	0801b161 	stmdaeq	r1, {r0, r5, r6, r8, ip, sp, pc}
 800b17c:	0801b158 	stmdaeq	r1, {r3, r4, r6, r8, ip, sp, pc}
 800b180:	0801b162 	stmdaeq	r1, {r1, r5, r6, r8, ip, sp, pc}

0800b184 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800b184:	b510      	push	{r4, lr}
 800b186:	2220      	movs	r2, #32
 800b188:	4604      	mov	r4, r0
 800b18a:	f840 1b04 	str.w	r1, [r0], #4
 800b18e:	2100      	movs	r1, #0
 800b190:	f00d f92c 	bl	80183ec <memset>
 800b194:	4620      	mov	r0, r4
 800b196:	bd10      	pop	{r4, pc}

0800b198 <RemoteConfigParams::Load()>:
 800b198:	b508      	push	{r3, lr}
 800b19a:	2300      	movs	r3, #0
 800b19c:	4601      	mov	r1, r0
 800b19e:	6043      	str	r3, [r0, #4]
 800b1a0:	6800      	ldr	r0, [r0, #0]
 800b1a2:	b120      	cbz	r0, 800b1ae <RemoteConfigParams::Load()+0x16>
 800b1a4:	6803      	ldr	r3, [r0, #0]
 800b1a6:	3104      	adds	r1, #4
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	4798      	blx	r3
 800b1ac:	2001      	movs	r0, #1
 800b1ae:	bd08      	pop	{r3, pc}

0800b1b0 <RemoteConfigParams::Load(char const*, unsigned int)>:
 800b1b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	6043      	str	r3, [r0, #4]
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	460d      	mov	r5, r1
 800b1ba:	4616      	mov	r6, r2
 800b1bc:	490a      	ldr	r1, [pc, #40]	; (800b1e8 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800b1be:	4602      	mov	r2, r0
 800b1c0:	4668      	mov	r0, sp
 800b1c2:	f00c fa19 	bl	80175f8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800b1c6:	4632      	mov	r2, r6
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	4668      	mov	r0, sp
 800b1cc:	f00c fa18 	bl	8017600 <ReadConfigFile::Read(char const*, unsigned int)>
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	f851 0b04 	ldr.w	r0, [r1], #4
 800b1d6:	6803      	ldr	r3, [r0, #0]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	4798      	blx	r3
 800b1dc:	4668      	mov	r0, sp
 800b1de:	f00c fa0e 	bl	80175fe <ReadConfigFile::~ReadConfigFile()>
 800b1e2:	b002      	add	sp, #8
 800b1e4:	bd70      	pop	{r4, r5, r6, pc}
 800b1e6:	bf00      	nop
 800b1e8:	0800b2a9 	stmdaeq	r0, {r0, r3, r5, r7, r9, ip, sp, pc}

0800b1ec <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800b1ec:	6843      	ldr	r3, [r0, #4]
 800b1ee:	b111      	cbz	r1, 800b1f6 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800b1f0:	431a      	orrs	r2, r3
 800b1f2:	6042      	str	r2, [r0, #4]
 800b1f4:	4770      	bx	lr
 800b1f6:	ea23 0202 	bic.w	r2, r3, r2
 800b1fa:	e7fa      	b.n	800b1f2 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800b1fc <RemoteConfigParams::callbackFunction(char const*)>:
 800b1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1fe:	460d      	mov	r5, r1
 800b200:	4604      	mov	r4, r0
 800b202:	4923      	ldr	r1, [pc, #140]	; (800b290 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800b204:	f10d 0203 	add.w	r2, sp, #3
 800b208:	4628      	mov	r0, r5
 800b20a:	f00c fb2a 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b20e:	b940      	cbnz	r0, 800b222 <RemoteConfigParams::callbackFunction(char const*)+0x26>
 800b210:	2201      	movs	r2, #1
 800b212:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800b216:	4620      	mov	r0, r4
 800b218:	b003      	add	sp, #12
 800b21a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b21e:	f7ff bfe5 	b.w	800b1ec <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800b222:	491c      	ldr	r1, [pc, #112]	; (800b294 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800b224:	f10d 0203 	add.w	r2, sp, #3
 800b228:	4628      	mov	r0, r5
 800b22a:	f00c fb1a 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b22e:	b908      	cbnz	r0, 800b234 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 800b230:	2202      	movs	r2, #2
 800b232:	e7ee      	b.n	800b212 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800b234:	4918      	ldr	r1, [pc, #96]	; (800b298 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800b236:	f10d 0203 	add.w	r2, sp, #3
 800b23a:	4628      	mov	r0, r5
 800b23c:	f00c fb11 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b240:	b908      	cbnz	r0, 800b246 <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 800b242:	2204      	movs	r2, #4
 800b244:	e7e5      	b.n	800b212 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800b246:	4915      	ldr	r1, [pc, #84]	; (800b29c <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800b248:	f10d 0203 	add.w	r2, sp, #3
 800b24c:	4628      	mov	r0, r5
 800b24e:	f00c fb08 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b252:	b908      	cbnz	r0, 800b258 <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 800b254:	2208      	movs	r2, #8
 800b256:	e7dc      	b.n	800b212 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800b258:	4911      	ldr	r1, [pc, #68]	; (800b2a0 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800b25a:	f10d 0203 	add.w	r2, sp, #3
 800b25e:	4628      	mov	r0, r5
 800b260:	f00c faff 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b264:	b908      	cbnz	r0, 800b26a <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 800b266:	2220      	movs	r2, #32
 800b268:	e7d3      	b.n	800b212 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800b26a:	2317      	movs	r3, #23
 800b26c:	9301      	str	r3, [sp, #4]
 800b26e:	490d      	ldr	r1, [pc, #52]	; (800b2a4 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800b270:	ab01      	add	r3, sp, #4
 800b272:	f104 020c 	add.w	r2, r4, #12
 800b276:	4628      	mov	r0, r5
 800b278:	f00c f9f6 	bl	8017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b27c:	b930      	cbnz	r0, 800b28c <RemoteConfigParams::callbackFunction(char const*)+0x90>
 800b27e:	9b01      	ldr	r3, [sp, #4]
 800b280:	4423      	add	r3, r4
 800b282:	7318      	strb	r0, [r3, #12]
 800b284:	6863      	ldr	r3, [r4, #4]
 800b286:	f043 0310 	orr.w	r3, r3, #16
 800b28a:	6063      	str	r3, [r4, #4]
 800b28c:	b003      	add	sp, #12
 800b28e:	bd30      	pop	{r4, r5, pc}
 800b290:	0801b591 	stmdaeq	r1, {r0, r4, r7, r8, sl, ip, sp, pc}
 800b294:	0801b5b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, sl, ip, sp, pc}
 800b298:	0801b5c0 	stmdaeq	r1, {r6, r7, r8, sl, ip, sp, pc}
 800b29c:	0801b5ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, sl, ip, sp, pc}
 800b2a0:	0801b5dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, sl, ip, sp, pc}
 800b2a4:	0801b5a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, sl, ip, sp, pc}

0800b2a8 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800b2a8:	f7ff bfa8 	b.w	800b1fc <RemoteConfigParams::callbackFunction(char const*)>

0800b2ac <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800b2ac:	b570      	push	{r4, r5, r6, lr}
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	b086      	sub	sp, #24
 800b2b2:	4615      	mov	r5, r2
 800b2b4:	461e      	mov	r6, r3
 800b2b6:	3004      	adds	r0, #4
 800b2b8:	2900      	cmp	r1, #0
 800b2ba:	d041      	beq.n	800b340 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 800b2bc:	2220      	movs	r2, #32
 800b2be:	f00d f87e 	bl	80183be <memmove>
 800b2c2:	4633      	mov	r3, r6
 800b2c4:	462a      	mov	r2, r5
 800b2c6:	4937      	ldr	r1, [pc, #220]	; (800b3a4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800b2c8:	a803      	add	r0, sp, #12
 800b2ca:	f00c f8f5 	bl	80174b8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800b2ce:	6862      	ldr	r2, [r4, #4]
 800b2d0:	4935      	ldr	r1, [pc, #212]	; (800b3a8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800b2d2:	f002 0201 	and.w	r2, r2, #1
 800b2d6:	a803      	add	r0, sp, #12
 800b2d8:	f7ff ff2c 	bl	800b134 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b2dc:	6862      	ldr	r2, [r4, #4]
 800b2de:	4933      	ldr	r1, [pc, #204]	; (800b3ac <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800b2e0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800b2e4:	a803      	add	r0, sp, #12
 800b2e6:	f7ff ff25 	bl	800b134 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b2ea:	6862      	ldr	r2, [r4, #4]
 800b2ec:	4930      	ldr	r1, [pc, #192]	; (800b3b0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800b2ee:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800b2f2:	a803      	add	r0, sp, #12
 800b2f4:	f7ff ff1e 	bl	800b134 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b2f8:	6862      	ldr	r2, [r4, #4]
 800b2fa:	492e      	ldr	r1, [pc, #184]	; (800b3b4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800b2fc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800b300:	a803      	add	r0, sp, #12
 800b302:	f7ff ff17 	bl	800b134 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b306:	6862      	ldr	r2, [r4, #4]
 800b308:	492b      	ldr	r1, [pc, #172]	; (800b3b8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800b30a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800b30e:	a803      	add	r0, sp, #12
 800b310:	f7ff ff10 	bl	800b134 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b314:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b318:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800b31c:	6862      	ldr	r2, [r4, #4]
 800b31e:	42ab      	cmp	r3, r5
 800b320:	d223      	bcs.n	800b36a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 800b322:	9803      	ldr	r0, [sp, #12]
 800b324:	06d2      	lsls	r2, r2, #27
 800b326:	4418      	add	r0, r3
 800b328:	eba5 0503 	sub.w	r5, r5, r3
 800b32c:	f104 040c 	add.w	r4, r4, #12
 800b330:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b334:	d40b      	bmi.n	800b34e <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800b336:	b95b      	cbnz	r3, 800b350 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 800b338:	4b20      	ldr	r3, [pc, #128]	; (800b3bc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800b33a:	4a21      	ldr	r2, [pc, #132]	; (800b3c0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800b33c:	9400      	str	r4, [sp, #0]
 800b33e:	e00a      	b.n	800b356 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	4601      	mov	r1, r0
 800b346:	68d2      	ldr	r2, [r2, #12]
 800b348:	4618      	mov	r0, r3
 800b34a:	4790      	blx	r2
 800b34c:	e7b9      	b.n	800b2c2 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800b34e:	b32b      	cbz	r3, 800b39c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 800b350:	4b1a      	ldr	r3, [pc, #104]	; (800b3bc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800b352:	4a1c      	ldr	r2, [pc, #112]	; (800b3c4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800b354:	9400      	str	r4, [sp, #0]
 800b356:	4629      	mov	r1, r5
 800b358:	f7ff f8c6 	bl	800a4e8 <snprintf>
 800b35c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b360:	4285      	cmp	r5, r0
 800b362:	bfa4      	itt	ge
 800b364:	181b      	addge	r3, r3, r0
 800b366:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800b36a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b36e:	b17b      	cbz	r3, 800b390 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 800b370:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b374:	9b03      	ldr	r3, [sp, #12]
 800b376:	4413      	add	r3, r2
 800b378:	227d      	movs	r2, #125	; 0x7d
 800b37a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b37e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b382:	9903      	ldr	r1, [sp, #12]
 800b384:	54ca      	strb	r2, [r1, r3]
 800b386:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b38a:	3301      	adds	r3, #1
 800b38c:	f8ad 3012 	strh.w	r3, [sp, #18]
 800b390:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	b006      	add	sp, #24
 800b39a:	bd70      	pop	{r4, r5, r6, pc}
 800b39c:	4b07      	ldr	r3, [pc, #28]	; (800b3bc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800b39e:	4a0a      	ldr	r2, [pc, #40]	; (800b3c8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800b3a0:	9400      	str	r4, [sp, #0]
 800b3a2:	e7d8      	b.n	800b356 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800b3a4:	0801b599 	stmdaeq	r1, {r0, r3, r4, r7, r8, sl, ip, sp, pc}
 800b3a8:	0801b591 	stmdaeq	r1, {r0, r4, r7, r8, sl, ip, sp, pc}
 800b3ac:	0801b5b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, sl, ip, sp, pc}
 800b3b0:	0801b5c0 	stmdaeq	r1, {r6, r7, r8, sl, ip, sp, pc}
 800b3b4:	0801b5ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, sl, ip, sp, pc}
 800b3b8:	0801b5dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, sl, ip, sp, pc}
 800b3bc:	0801b5a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, sl, ip, sp, pc}
 800b3c0:	0801b174 	stmdaeq	r1, {r2, r4, r5, r6, r8, ip, sp, pc}
 800b3c4:	0801b169 	stmdaeq	r1, {r0, r3, r5, r6, r8, ip, sp, pc}
 800b3c8:	0801b175 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, ip, sp, pc}

0800b3cc <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800b3cc:	b513      	push	{r0, r1, r4, lr}
 800b3ce:	6804      	ldr	r4, [r0, #0]
 800b3d0:	b914      	cbnz	r4, 800b3d8 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800b3d2:	601c      	str	r4, [r3, #0]
 800b3d4:	b002      	add	sp, #8
 800b3d6:	bd10      	pop	{r4, pc}
 800b3d8:	9300      	str	r3, [sp, #0]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	460a      	mov	r2, r1
 800b3de:	2100      	movs	r1, #0
 800b3e0:	f7ff ff64 	bl	800b2ac <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800b3e4:	e7f6      	b.n	800b3d4 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800b3e6 <RemoteConfigParams::Set(RemoteConfig*)>:
 800b3e6:	b538      	push	{r3, r4, r5, lr}
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	6841      	ldr	r1, [r0, #4]
 800b3ec:	4605      	mov	r5, r0
 800b3ee:	f001 0101 	and.w	r1, r1, #1
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f7ff fbe2 	bl	800abbc <RemoteConfig::SetDisable(bool)>
 800b3f8:	686b      	ldr	r3, [r5, #4]
 800b3fa:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800b3fe:	7362      	strb	r2, [r4, #13]
 800b400:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800b404:	73a2      	strb	r2, [r4, #14]
 800b406:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800b40a:	73e2      	strb	r2, [r4, #15]
 800b40c:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800b410:	06db      	lsls	r3, r3, #27
 800b412:	7422      	strb	r2, [r4, #16]
 800b414:	d506      	bpl.n	800b424 <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 800b416:	f105 010c 	add.w	r1, r5, #12
 800b41a:	4620      	mov	r0, r4
 800b41c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b420:	f7ff bbec 	b.w	800abfc <RemoteConfig::SetDisplayName(char const*)>
 800b424:	bd38      	pop	{r3, r4, r5, pc}

0800b426 <RemoteConfigParams::Dump()>:
 800b426:	4770      	bx	lr

0800b428 <RemoteConfig::HandleReboot()>:
 800b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42a:	7b83      	ldrb	r3, [r0, #14]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d05f      	beq.n	800b4f0 <RemoteConfig::HandleReboot()+0xc8>
 800b430:	4c30      	ldr	r4, [pc, #192]	; (800b4f4 <RemoteConfig::HandleReboot()+0xcc>)
 800b432:	4e31      	ldr	r6, [pc, #196]	; (800b4f8 <RemoteConfig::HandleReboot()+0xd0>)
 800b434:	6825      	ldr	r5, [r4, #0]
 800b436:	2301      	movs	r3, #1
 800b438:	2100      	movs	r1, #0
 800b43a:	7443      	strb	r3, [r0, #17]
 800b43c:	7629      	strb	r1, [r5, #24]
 800b43e:	4628      	mov	r0, r5
 800b440:	f00c fc6a 	bl	8017d18 <ILI9341::EnableSleep(bool)>
 800b444:	4b2d      	ldr	r3, [pc, #180]	; (800b4fc <RemoteConfig::HandleReboot()+0xd4>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	622b      	str	r3, [r5, #32]
 800b44a:	6830      	ldr	r0, [r6, #0]
 800b44c:	f00b fa8e 	bl	801696c <ConfigStore::Flash()>
 800b450:	4605      	mov	r5, r0
 800b452:	2800      	cmp	r0, #0
 800b454:	d1f9      	bne.n	800b44a <RemoteConfig::HandleReboot()+0x22>
 800b456:	4b2a      	ldr	r3, [pc, #168]	; (800b500 <RemoteConfig::HandleReboot()+0xd8>)
 800b458:	6818      	ldr	r0, [r3, #0]
 800b45a:	f009 fbe7 	bl	8014c2c <Network::Shutdown()>
 800b45e:	4829      	ldr	r0, [pc, #164]	; (800b504 <RemoteConfig::HandleReboot()+0xdc>)
 800b460:	f7ff f81a 	bl	800a498 <printf>
 800b464:	6820      	ldr	r0, [r4, #0]
 800b466:	f00c faab 	bl	80179c0 <Display::Cls()>
 800b46a:	6824      	ldr	r4, [r4, #0]
 800b46c:	7d62      	ldrb	r2, [r4, #21]
 800b46e:	3a01      	subs	r2, #1
 800b470:	b2d2      	uxtb	r2, r2
 800b472:	4629      	mov	r1, r5
 800b474:	4620      	mov	r0, r4
 800b476:	f00c faa7 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 800b47a:	7d23      	ldrb	r3, [r4, #20]
 800b47c:	3b01      	subs	r3, #1
 800b47e:	429d      	cmp	r5, r3
 800b480:	d329      	bcc.n	800b4d6 <RemoteConfig::HandleReboot()+0xae>
 800b482:	7d62      	ldrb	r2, [r4, #21]
 800b484:	3a01      	subs	r2, #1
 800b486:	b2d2      	uxtb	r2, r2
 800b488:	2100      	movs	r1, #0
 800b48a:	4620      	mov	r0, r4
 800b48c:	f00c fa9c 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 800b490:	7d62      	ldrb	r2, [r4, #21]
 800b492:	7d20      	ldrb	r0, [r4, #20]
 800b494:	491c      	ldr	r1, [pc, #112]	; (800b508 <RemoteConfig::HandleReboot()+0xe0>)
 800b496:	2500      	movs	r5, #0
 800b498:	42a8      	cmp	r0, r5
 800b49a:	f105 0501 	add.w	r5, r5, #1
 800b49e:	dd03      	ble.n	800b4a8 <RemoteConfig::HandleReboot()+0x80>
 800b4a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1f7      	bne.n	800b498 <RemoteConfig::HandleReboot()+0x70>
 800b4a8:	3a01      	subs	r2, #1
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f00c fa8b 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 800b4b2:	7d23      	ldrb	r3, [r4, #20]
 800b4b4:	4f14      	ldr	r7, [pc, #80]	; (800b508 <RemoteConfig::HandleReboot()+0xe0>)
 800b4b6:	b2ed      	uxtb	r5, r5
 800b4b8:	429d      	cmp	r5, r3
 800b4ba:	bf28      	it	cs
 800b4bc:	461d      	movcs	r5, r3
 800b4be:	2600      	movs	r6, #0
 800b4c0:	42b5      	cmp	r5, r6
 800b4c2:	d10e      	bne.n	800b4e2 <RemoteConfig::HandleReboot()+0xba>
 800b4c4:	4811      	ldr	r0, [pc, #68]	; (800b50c <RemoteConfig::HandleReboot()+0xe4>)
 800b4c6:	f244 0140 	movw	r1, #16448	; 0x4040
 800b4ca:	f7fe ffe5 	bl	800a498 <printf>
 800b4ce:	4b10      	ldr	r3, [pc, #64]	; (800b510 <RemoteConfig::HandleReboot()+0xe8>)
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	f00c fe73 	bl	80181bc <Hardware::Reboot()>
 800b4d6:	2120      	movs	r1, #32
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f00c fa83 	bl	80179e4 <Display::PutChar(int)>
 800b4de:	3501      	adds	r5, #1
 800b4e0:	e7cb      	b.n	800b47a <RemoteConfig::HandleReboot()+0x52>
 800b4e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f00c fa7c 	bl	80179e4 <Display::PutChar(int)>
 800b4ec:	3601      	adds	r6, #1
 800b4ee:	e7e7      	b.n	800b4c0 <RemoteConfig::HandleReboot()+0x98>
 800b4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	2000fcb8 			; <UNDEFINED> instruction: 0x2000fcb8
 800b4f8:	2000fc88 	andcs	pc, r0, r8, lsl #25
 800b4fc:	20010694 	mulcs	r1, r4, r6
 800b500:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 800b504:	0801b18a 	stmdaeq	r1, {r1, r3, r7, r8, ip, sp, pc}
 800b508:	0801b17c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, ip, sp, pc}
 800b50c:	0801ab99 	stmdaeq	r1, {r0, r3, r4, r7, r8, r9, fp, sp, pc}
 800b510:	2001067c 	andcs	r0, r1, ip, ror r6

0800b514 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800b514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b518:	4d12      	ldr	r5, [pc, #72]	; (800b564 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800b51a:	2000      	movs	r0, #0
 800b51c:	f10d 0c04 	add.w	ip, sp, #4
 800b520:	6814      	ldr	r4, [r2, #0]
 800b522:	7d2b      	ldrb	r3, [r5, #20]
 800b524:	9301      	str	r3, [sp, #4]
 800b526:	42a3      	cmp	r3, r4
 800b528:	bf34      	ite	cc
 800b52a:	4664      	movcc	r4, ip
 800b52c:	4614      	movcs	r4, r2
 800b52e:	692e      	ldr	r6, [r5, #16]
 800b530:	6827      	ldr	r7, [r4, #0]
 800b532:	3e01      	subs	r6, #1
 800b534:	440f      	add	r7, r1
 800b536:	460c      	mov	r4, r1
 800b538:	42bc      	cmp	r4, r7
 800b53a:	d101      	bne.n	800b540 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 800b53c:	6013      	str	r3, [r2, #0]
 800b53e:	e00c      	b.n	800b55a <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 800b540:	f894 8000 	ldrb.w	r8, [r4]
 800b544:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800b548:	45f0      	cmp	r8, lr
 800b54a:	d009      	beq.n	800b560 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800b54c:	3001      	adds	r0, #1
 800b54e:	2807      	cmp	r0, #7
 800b550:	f105 051c 	add.w	r5, r5, #28
 800b554:	d1e4      	bne.n	800b520 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800b556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b55a:	b002      	add	sp, #8
 800b55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b560:	3401      	adds	r4, #1
 800b562:	e7e9      	b.n	800b538 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800b564:	0801b1e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, ip, sp, pc}

0800b568 <RemoteConfig::PlatformHandleTftpSet()>:
 800b568:	f890 1020 	ldrb.w	r1, [r0, #32]
 800b56c:	b109      	cbz	r1, 800b572 <RemoteConfig::PlatformHandleTftpSet()+0xa>
 800b56e:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 800b572:	2001      	movs	r0, #1
 800b574:	f00e baee 	b.w	8019b54 <bkp_data_write(bkp_data_register_enum, unsigned short)>

0800b578 <RemoteConfig::PlatformHandleTftpGet()>:
 800b578:	b510      	push	{r4, lr}
 800b57a:	4604      	mov	r4, r0
 800b57c:	2001      	movs	r0, #1
 800b57e:	f00e faf1 	bl	8019b64 <bkp_data_read(bkp_data_register_enum)>
 800b582:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 800b586:	1ac3      	subs	r3, r0, r3
 800b588:	4258      	negs	r0, r3
 800b58a:	4158      	adcs	r0, r3
 800b58c:	f884 0020 	strb.w	r0, [r4, #32]
 800b590:	bd10      	pop	{r4, pc}

0800b592 <strcmp>:
 800b592:	1e43      	subs	r3, r0, #1
 800b594:	3901      	subs	r1, #1
 800b596:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800b59a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b59e:	4290      	cmp	r0, r2
 800b5a0:	d001      	beq.n	800b5a6 <strcmp+0x14>
 800b5a2:	1a80      	subs	r0, r0, r2
 800b5a4:	e001      	b.n	800b5aa <strcmp+0x18>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d1f5      	bne.n	800b596 <strcmp+0x4>
 800b5aa:	4770      	bx	lr

0800b5ac <strcasecmp>:
 800b5ac:	b530      	push	{r4, r5, lr}
 800b5ae:	1e42      	subs	r2, r0, #1
 800b5b0:	3901      	subs	r1, #1
 800b5b2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800b5b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b5ba:	2b19      	cmp	r3, #25
 800b5bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b5c0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	bf98      	it	ls
 800b5c8:	f100 0420 	addls.w	r4, r0, #32
 800b5cc:	2d19      	cmp	r5, #25
 800b5ce:	bf98      	it	ls
 800b5d0:	3320      	addls	r3, #32
 800b5d2:	42a3      	cmp	r3, r4
 800b5d4:	d001      	beq.n	800b5da <strcasecmp+0x2e>
 800b5d6:	1ae0      	subs	r0, r4, r3
 800b5d8:	e001      	b.n	800b5de <strcasecmp+0x32>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d1e9      	bne.n	800b5b2 <strcasecmp+0x6>
 800b5de:	bd30      	pop	{r4, r5, pc}

0800b5e0 <PropertiesConfig::EnableJSON(bool)>:
 800b5e0:	4a04      	ldr	r2, [pc, #16]	; (800b5f4 <PropertiesConfig::EnableJSON(bool)+0x14>)
 800b5e2:	7813      	ldrb	r3, [r2, #0]
 800b5e4:	b118      	cbz	r0, 800b5ee <PropertiesConfig::EnableJSON(bool)+0xe>
 800b5e6:	f043 0301 	orr.w	r3, r3, #1
 800b5ea:	7013      	strb	r3, [r2, #0]
 800b5ec:	4770      	bx	lr
 800b5ee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b5f2:	e7fa      	b.n	800b5ea <PropertiesConfig::EnableJSON(bool)+0xa>
 800b5f4:	2000fcb4 			; <UNDEFINED> instruction: 0x2000fcb4

0800b5f8 <HttpDaemon::HttpDaemon()>:
 800b5f8:	4a08      	ldr	r2, [pc, #32]	; (800b61c <HttpDaemon::HttpDaemon()+0x24>)
 800b5fa:	6002      	str	r2, [r0, #0]
 800b5fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b600:	2200      	movs	r2, #0
 800b602:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800b606:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800b60a:	2102      	movs	r1, #2
 800b60c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800b610:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800b614:	e9c0 2208 	strd	r2, r2, [r0, #32]
 800b618:	60c2      	str	r2, [r0, #12]
 800b61a:	4770      	bx	lr
 800b61c:	0801b511 	stmdaeq	r1, {r0, r4, r8, sl, ip, sp, pc}

0800b620 <HttpDaemon::Start()>:
 800b620:	4b04      	ldr	r3, [pc, #16]	; (800b634 <HttpDaemon::Start()+0x14>)
 800b622:	b510      	push	{r4, lr}
 800b624:	2150      	movs	r1, #80	; 0x50
 800b626:	4604      	mov	r4, r0
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	f009 fe0d 	bl	8015248 <Network::TcpBegin(unsigned short)>
 800b62e:	6120      	str	r0, [r4, #16]
 800b630:	bd10      	pop	{r4, pc}
 800b632:	bf00      	nop
 800b634:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

0800b638 <HttpDaemon::ParseMethod(char*)>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	491a      	ldr	r1, [pc, #104]	; (800b6a8 <HttpDaemon::ParseMethod(char*)+0x70>)
 800b640:	f00c fefe 	bl	8018440 <strtok>
 800b644:	4605      	mov	r5, r0
 800b646:	b360      	cbz	r0, 800b6a2 <HttpDaemon::ParseMethod(char*)+0x6a>
 800b648:	4918      	ldr	r1, [pc, #96]	; (800b6ac <HttpDaemon::ParseMethod(char*)+0x74>)
 800b64a:	f7ff ffa2 	bl	800b592 <strcmp>
 800b64e:	b128      	cbz	r0, 800b65c <HttpDaemon::ParseMethod(char*)+0x24>
 800b650:	4917      	ldr	r1, [pc, #92]	; (800b6b0 <HttpDaemon::ParseMethod(char*)+0x78>)
 800b652:	4628      	mov	r0, r5
 800b654:	f7ff ff9d 	bl	800b592 <strcmp>
 800b658:	bb18      	cbnz	r0, 800b6a2 <HttpDaemon::ParseMethod(char*)+0x6a>
 800b65a:	2001      	movs	r0, #1
 800b65c:	61e0      	str	r0, [r4, #28]
 800b65e:	4912      	ldr	r1, [pc, #72]	; (800b6a8 <HttpDaemon::ParseMethod(char*)+0x70>)
 800b660:	2000      	movs	r0, #0
 800b662:	f00c feed 	bl	8018440 <strtok>
 800b666:	b910      	cbnz	r0, 800b66e <HttpDaemon::ParseMethod(char*)+0x36>
 800b668:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b66c:	bd38      	pop	{r3, r4, r5, pc}
 800b66e:	6060      	str	r0, [r4, #4]
 800b670:	4910      	ldr	r1, [pc, #64]	; (800b6b4 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800b672:	2000      	movs	r0, #0
 800b674:	f00c fee4 	bl	8018440 <strtok>
 800b678:	2800      	cmp	r0, #0
 800b67a:	d0f5      	beq.n	800b668 <HttpDaemon::ParseMethod(char*)+0x30>
 800b67c:	490e      	ldr	r1, [pc, #56]	; (800b6b8 <HttpDaemon::ParseMethod(char*)+0x80>)
 800b67e:	f7ff ff88 	bl	800b592 <strcmp>
 800b682:	2800      	cmp	r0, #0
 800b684:	d1f0      	bne.n	800b668 <HttpDaemon::ParseMethod(char*)+0x30>
 800b686:	490d      	ldr	r1, [pc, #52]	; (800b6bc <HttpDaemon::ParseMethod(char*)+0x84>)
 800b688:	f00c feda 	bl	8018440 <strtok>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	d0eb      	beq.n	800b668 <HttpDaemon::ParseMethod(char*)+0x30>
 800b690:	490b      	ldr	r1, [pc, #44]	; (800b6c0 <HttpDaemon::ParseMethod(char*)+0x88>)
 800b692:	f7ff ff7e 	bl	800b592 <strcmp>
 800b696:	2800      	cmp	r0, #0
 800b698:	f240 10f9 	movw	r0, #505	; 0x1f9
 800b69c:	bf08      	it	eq
 800b69e:	20c8      	moveq	r0, #200	; 0xc8
 800b6a0:	e7e4      	b.n	800b66c <HttpDaemon::ParseMethod(char*)+0x34>
 800b6a2:	f240 10f5 	movw	r0, #501	; 0x1f5
 800b6a6:	e7e1      	b.n	800b66c <HttpDaemon::ParseMethod(char*)+0x34>
 800b6a8:	0801d7af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, r9, sl, ip, lr, pc}
 800b6ac:	0801b2ac 	stmdaeq	r1, {r2, r3, r5, r7, r9, ip, sp, pc}
 800b6b0:	0801b2b0 	stmdaeq	r1, {r4, r5, r7, r9, ip, sp, pc}
 800b6b4:	0801b31a 	stmdaeq	r1, {r1, r3, r4, r8, r9, ip, sp, pc}
 800b6b8:	0801b2b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r9, ip, sp, pc}
 800b6bc:	0801b2ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, ip, sp, pc}
 800b6c0:	0801b2bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, ip, sp, pc}

0800b6c4 <HttpDaemon::ParseHeaderField(char*)>:
 800b6c4:	b538      	push	{r3, r4, r5, lr}
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	4608      	mov	r0, r1
 800b6ca:	491d      	ldr	r1, [pc, #116]	; (800b740 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800b6cc:	f00c feb8 	bl	8018440 <strtok>
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	b910      	cbnz	r0, 800b6da <HttpDaemon::ParseHeaderField(char*)+0x16>
 800b6d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b6d8:	bd38      	pop	{r3, r4, r5, pc}
 800b6da:	491a      	ldr	r1, [pc, #104]	; (800b744 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800b6dc:	f7ff ff66 	bl	800b5ac <strcasecmp>
 800b6e0:	b970      	cbnz	r0, 800b700 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800b6e2:	4919      	ldr	r1, [pc, #100]	; (800b748 <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800b6e4:	f00c feac 	bl	8018440 <strtok>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d0f3      	beq.n	800b6d4 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800b6ec:	4917      	ldr	r1, [pc, #92]	; (800b74c <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800b6ee:	f7ff ff50 	bl	800b592 <strcmp>
 800b6f2:	b108      	cbz	r0, 800b6f8 <HttpDaemon::ParseHeaderField(char*)+0x34>
 800b6f4:	20c8      	movs	r0, #200	; 0xc8
 800b6f6:	e7ef      	b.n	800b6d8 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	f885 3020 	strb.w	r3, [r5, #32]
 800b6fe:	e7f9      	b.n	800b6f4 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800b700:	4620      	mov	r0, r4
 800b702:	4913      	ldr	r1, [pc, #76]	; (800b750 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800b704:	f7ff ff52 	bl	800b5ac <strcasecmp>
 800b708:	4604      	mov	r4, r0
 800b70a:	2800      	cmp	r0, #0
 800b70c:	d1f2      	bne.n	800b6f4 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800b70e:	4911      	ldr	r1, [pc, #68]	; (800b754 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800b710:	f00c fe96 	bl	8018440 <strtok>
 800b714:	2800      	cmp	r0, #0
 800b716:	d0dd      	beq.n	800b6d4 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800b718:	1e42      	subs	r2, r0, #1
 800b71a:	4623      	mov	r3, r4
 800b71c:	200a      	movs	r0, #10
 800b71e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800b722:	b909      	cbnz	r1, 800b728 <HttpDaemon::ParseHeaderField(char*)+0x64>
 800b724:	84eb      	strh	r3, [r5, #38]	; 0x26
 800b726:	e7e5      	b.n	800b6f4 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800b728:	3930      	subs	r1, #48	; 0x30
 800b72a:	2909      	cmp	r1, #9
 800b72c:	d8d2      	bhi.n	800b6d4 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800b72e:	fb00 1303 	mla	r3, r0, r3, r1
 800b732:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800b736:	d9f2      	bls.n	800b71e <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800b738:	f240 109d 	movw	r0, #413	; 0x19d
 800b73c:	e7cc      	b.n	800b6d8 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800b73e:	bf00      	nop
 800b740:	0801b2c1 	stmdaeq	r1, {r0, r6, r7, r9, ip, sp, pc}
 800b744:	0801b2c3 	stmdaeq	r1, {r0, r1, r6, r7, r9, ip, sp, pc}
 800b748:	0801b2d0 	stmdaeq	r1, {r4, r6, r7, r9, ip, sp, pc}
 800b74c:	0801b2d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r9, ip, sp, pc}
 800b750:	0801b2e4 	stmdaeq	r1, {r2, r5, r6, r7, r9, ip, sp, pc}
 800b754:	0801d7af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, r9, sl, ip, lr, pc}

0800b758 <HttpDaemon::ParseRequest()>:
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	68c1      	ldr	r1, [r0, #12]
 800b75c:	2400      	movs	r4, #0
 800b75e:	4605      	mov	r5, r0
 800b760:	f880 4020 	strb.w	r4, [r0, #32]
 800b764:	6244      	str	r4, [r0, #36]	; 0x24
 800b766:	4622      	mov	r2, r4
 800b768:	4626      	mov	r6, r4
 800b76a:	8aab      	ldrh	r3, [r5, #20]
 800b76c:	42a3      	cmp	r3, r4
 800b76e:	d91e      	bls.n	800b7ae <HttpDaemon::ParseRequest()+0x56>
 800b770:	68eb      	ldr	r3, [r5, #12]
 800b772:	5d18      	ldrb	r0, [r3, r4]
 800b774:	280a      	cmp	r0, #10
 800b776:	d10f      	bne.n	800b798 <HttpDaemon::ParseRequest()+0x40>
 800b778:	4423      	add	r3, r4
 800b77a:	1c57      	adds	r7, r2, #1
 800b77c:	f803 6c01 	strb.w	r6, [r3, #-1]
 800b780:	b96a      	cbnz	r2, 800b79e <HttpDaemon::ParseRequest()+0x46>
 800b782:	4628      	mov	r0, r5
 800b784:	f7ff ff58 	bl	800b638 <HttpDaemon::ParseMethod(char*)>
 800b788:	28c8      	cmp	r0, #200	; 0xc8
 800b78a:	d111      	bne.n	800b7b0 <HttpDaemon::ParseRequest()+0x58>
 800b78c:	68eb      	ldr	r3, [r5, #12]
 800b78e:	1c61      	adds	r1, r4, #1
 800b790:	b28c      	uxth	r4, r1
 800b792:	463a      	mov	r2, r7
 800b794:	fa13 f181 	uxtah	r1, r3, r1
 800b798:	3401      	adds	r4, #1
 800b79a:	b2a4      	uxth	r4, r4
 800b79c:	e7e5      	b.n	800b76a <HttpDaemon::ParseRequest()+0x12>
 800b79e:	7808      	ldrb	r0, [r1, #0]
 800b7a0:	b968      	cbnz	r0, 800b7be <HttpDaemon::ParseRequest()+0x66>
 800b7a2:	696b      	ldr	r3, [r5, #20]
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	1b1b      	subs	r3, r3, r4
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	84ab      	strh	r3, [r5, #36]	; 0x24
 800b7ac:	b90b      	cbnz	r3, 800b7b2 <HttpDaemon::ParseRequest()+0x5a>
 800b7ae:	20c8      	movs	r0, #200	; 0xc8
 800b7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7b2:	68ea      	ldr	r2, [r5, #12]
 800b7b4:	3401      	adds	r4, #1
 800b7b6:	4414      	add	r4, r2
 800b7b8:	60ac      	str	r4, [r5, #8]
 800b7ba:	54e0      	strb	r0, [r4, r3]
 800b7bc:	e7f7      	b.n	800b7ae <HttpDaemon::ParseRequest()+0x56>
 800b7be:	4628      	mov	r0, r5
 800b7c0:	f7ff ff80 	bl	800b6c4 <HttpDaemon::ParseHeaderField(char*)>
 800b7c4:	e7e0      	b.n	800b788 <HttpDaemon::ParseRequest()+0x30>
	...

0800b7c8 <HttpDaemon::HandleGetTxt()>:
 800b7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7cc:	6846      	ldr	r6, [r0, #4]
 800b7ce:	1db4      	adds	r4, r6, #6
 800b7d0:	4607      	mov	r7, r0
 800b7d2:	4622      	mov	r2, r4
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	3201      	adds	r2, #1
 800b7d8:	7819      	ldrb	r1, [r3, #0]
 800b7da:	2900      	cmp	r1, #0
 800b7dc:	d1fa      	bne.n	800b7d4 <HttpDaemon::HandleGetTxt()+0xc>
 800b7de:	1b1b      	subs	r3, r3, r4
 800b7e0:	2b04      	cmp	r3, #4
 800b7e2:	d803      	bhi.n	800b7ec <HttpDaemon::HandleGetTxt()+0x24>
 800b7e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ec:	3b04      	subs	r3, #4
 800b7ee:	4914      	ldr	r1, [pc, #80]	; (800b840 <HttpDaemon::HandleGetTxt()+0x78>)
 800b7f0:	18e0      	adds	r0, r4, r3
 800b7f2:	f7ff fece 	bl	800b592 <strcmp>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d1f4      	bne.n	800b7e4 <HttpDaemon::HandleGetTxt()+0x1c>
 800b7fa:	4b12      	ldr	r3, [pc, #72]	; (800b844 <HttpDaemon::HandleGetTxt()+0x7c>)
 800b7fc:	2001      	movs	r0, #1
 800b7fe:	f893 8000 	ldrb.w	r8, [r3]
 800b802:	f7ff feed 	bl	800b5e0 <PropertiesConfig::EnableJSON(bool)>
 800b806:	4b10      	ldr	r3, [pc, #64]	; (800b848 <HttpDaemon::HandleGetTxt()+0x80>)
 800b808:	f240 529b 	movw	r2, #1435	; 0x59b
 800b80c:	6818      	ldr	r0, [r3, #0]
 800b80e:	4621      	mov	r1, r4
 800b810:	f7ff fa0c 	bl	800ac2c <RemoteConfig::HandleGet(void*, unsigned int)>
 800b814:	f008 0801 	and.w	r8, r8, #1
 800b818:	4605      	mov	r5, r0
 800b81a:	4640      	mov	r0, r8
 800b81c:	f7ff fee0 	bl	800b5e0 <PropertiesConfig::EnableJSON(bool)>
 800b820:	2d00      	cmp	r5, #0
 800b822:	d0df      	beq.n	800b7e4 <HttpDaemon::HandleGetTxt()+0x1c>
 800b824:	847d      	strh	r5, [r7, #34]	; 0x22
 800b826:	4b09      	ldr	r3, [pc, #36]	; (800b84c <HttpDaemon::HandleGetTxt()+0x84>)
 800b828:	3506      	adds	r5, #6
 800b82a:	442e      	add	r6, r5
 800b82c:	42b4      	cmp	r4, r6
 800b82e:	d101      	bne.n	800b834 <HttpDaemon::HandleGetTxt()+0x6c>
 800b830:	20c8      	movs	r0, #200	; 0xc8
 800b832:	e7d9      	b.n	800b7e8 <HttpDaemon::HandleGetTxt()+0x20>
 800b834:	f814 2b01 	ldrb.w	r2, [r4], #1
 800b838:	f803 2b01 	strb.w	r2, [r3], #1
 800b83c:	e7f6      	b.n	800b82c <HttpDaemon::HandleGetTxt()+0x64>
 800b83e:	bf00      	nop
 800b840:	0801b1cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, ip, sp, pc}
 800b844:	2000fcb4 			; <UNDEFINED> instruction: 0x2000fcb4
 800b848:	2000012c 	andcs	r0, r0, ip, lsr #2
 800b84c:	20000130 	andcs	r0, r0, r0, lsr r1

0800b850 <HttpDaemon::HandleGet()>:
 800b850:	b570      	push	{r4, r5, r6, lr}
 800b852:	6845      	ldr	r5, [r0, #4]
 800b854:	493e      	ldr	r1, [pc, #248]	; (800b950 <HttpDaemon::HandleGet()+0x100>)
 800b856:	4604      	mov	r4, r0
 800b858:	4628      	mov	r0, r5
 800b85a:	f7ff fe9a 	bl	800b592 <strcmp>
 800b85e:	b120      	cbz	r0, 800b86a <HttpDaemon::HandleGet()+0x1a>
 800b860:	493c      	ldr	r1, [pc, #240]	; (800b954 <HttpDaemon::HandleGet()+0x104>)
 800b862:	4628      	mov	r0, r5
 800b864:	f7ff fe95 	bl	800b592 <strcmp>
 800b868:	b950      	cbnz	r0, 800b880 <HttpDaemon::HandleGet()+0x30>
 800b86a:	4b3b      	ldr	r3, [pc, #236]	; (800b958 <HttpDaemon::HandleGet()+0x108>)
 800b86c:	493b      	ldr	r1, [pc, #236]	; (800b95c <HttpDaemon::HandleGet()+0x10c>)
 800b86e:	483c      	ldr	r0, [pc, #240]	; (800b960 <HttpDaemon::HandleGet()+0x110>)
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	f000 fa61 	bl	800bd38 <get_file_content(char const*, char*)>
 800b876:	2800      	cmp	r0, #0
 800b878:	dd2f      	ble.n	800b8da <HttpDaemon::HandleGet()+0x8a>
 800b87a:	8460      	strh	r0, [r4, #34]	; 0x22
 800b87c:	20c8      	movs	r0, #200	; 0xc8
 800b87e:	bd70      	pop	{r4, r5, r6, pc}
 800b880:	4938      	ldr	r1, [pc, #224]	; (800b964 <HttpDaemon::HandleGet()+0x114>)
 800b882:	4628      	mov	r0, r5
 800b884:	f7ff fe85 	bl	800b592 <strcmp>
 800b888:	b920      	cbnz	r0, 800b894 <HttpDaemon::HandleGet()+0x44>
 800b88a:	4b37      	ldr	r3, [pc, #220]	; (800b968 <HttpDaemon::HandleGet()+0x118>)
 800b88c:	4933      	ldr	r1, [pc, #204]	; (800b95c <HttpDaemon::HandleGet()+0x10c>)
 800b88e:	4837      	ldr	r0, [pc, #220]	; (800b96c <HttpDaemon::HandleGet()+0x11c>)
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	e7ee      	b.n	800b872 <HttpDaemon::HandleGet()+0x22>
 800b894:	4936      	ldr	r1, [pc, #216]	; (800b970 <HttpDaemon::HandleGet()+0x120>)
 800b896:	4628      	mov	r0, r5
 800b898:	f7ff fe7b 	bl	800b592 <strcmp>
 800b89c:	b190      	cbz	r0, 800b8c4 <HttpDaemon::HandleGet()+0x74>
 800b89e:	4a35      	ldr	r2, [pc, #212]	; (800b974 <HttpDaemon::HandleGet()+0x124>)
 800b8a0:	1e6b      	subs	r3, r5, #1
 800b8a2:	1d69      	adds	r1, r5, #5
 800b8a4:	428b      	cmp	r3, r1
 800b8a6:	d112      	bne.n	800b8ce <HttpDaemon::HandleGet()+0x7e>
 800b8a8:	4b33      	ldr	r3, [pc, #204]	; (800b978 <HttpDaemon::HandleGet()+0x128>)
 800b8aa:	4934      	ldr	r1, [pc, #208]	; (800b97c <HttpDaemon::HandleGet()+0x12c>)
 800b8ac:	6023      	str	r3, [r4, #0]
 800b8ae:	3506      	adds	r5, #6
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f7ff fe6e 	bl	800b592 <strcmp>
 800b8b6:	b998      	cbnz	r0, 800b8e0 <HttpDaemon::HandleGet()+0x90>
 800b8b8:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b8bc:	4827      	ldr	r0, [pc, #156]	; (800b95c <HttpDaemon::HandleGet()+0x10c>)
 800b8be:	f000 f9c7 	bl	800bc50 <remoteconfig::json_get_list(char*, unsigned short)>
 800b8c2:	e7d8      	b.n	800b876 <HttpDaemon::HandleGet()+0x26>
 800b8c4:	4b2e      	ldr	r3, [pc, #184]	; (800b980 <HttpDaemon::HandleGet()+0x130>)
 800b8c6:	4925      	ldr	r1, [pc, #148]	; (800b95c <HttpDaemon::HandleGet()+0x10c>)
 800b8c8:	482e      	ldr	r0, [pc, #184]	; (800b984 <HttpDaemon::HandleGet()+0x134>)
 800b8ca:	6023      	str	r3, [r4, #0]
 800b8cc:	e7d1      	b.n	800b872 <HttpDaemon::HandleGet()+0x22>
 800b8ce:	f812 0b01 	ldrb.w	r0, [r2], #1
 800b8d2:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800b8d6:	4286      	cmp	r6, r0
 800b8d8:	d0e4      	beq.n	800b8a4 <HttpDaemon::HandleGet()+0x54>
 800b8da:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800b8de:	e7ce      	b.n	800b87e <HttpDaemon::HandleGet()+0x2e>
 800b8e0:	4929      	ldr	r1, [pc, #164]	; (800b988 <HttpDaemon::HandleGet()+0x138>)
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f7ff fe55 	bl	800b592 <strcmp>
 800b8e8:	b928      	cbnz	r0, 800b8f6 <HttpDaemon::HandleGet()+0xa6>
 800b8ea:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b8ee:	481b      	ldr	r0, [pc, #108]	; (800b95c <HttpDaemon::HandleGet()+0x10c>)
 800b8f0:	f000 f9de 	bl	800bcb0 <remoteconfig::json_get_version(char*, unsigned short)>
 800b8f4:	e7bf      	b.n	800b876 <HttpDaemon::HandleGet()+0x26>
 800b8f6:	4925      	ldr	r1, [pc, #148]	; (800b98c <HttpDaemon::HandleGet()+0x13c>)
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	f7ff fe4a 	bl	800b592 <strcmp>
 800b8fe:	b948      	cbnz	r0, 800b914 <HttpDaemon::HandleGet()+0xc4>
 800b900:	4b23      	ldr	r3, [pc, #140]	; (800b990 <HttpDaemon::HandleGet()+0x140>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	7bdb      	ldrb	r3, [r3, #15]
 800b906:	b303      	cbz	r3, 800b94a <HttpDaemon::HandleGet()+0xfa>
 800b908:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b90c:	4813      	ldr	r0, [pc, #76]	; (800b95c <HttpDaemon::HandleGet()+0x10c>)
 800b90e:	f000 f9eb 	bl	800bce8 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800b912:	e7b0      	b.n	800b876 <HttpDaemon::HandleGet()+0x26>
 800b914:	491f      	ldr	r1, [pc, #124]	; (800b994 <HttpDaemon::HandleGet()+0x144>)
 800b916:	4628      	mov	r0, r5
 800b918:	f7ff fe3b 	bl	800b592 <strcmp>
 800b91c:	b928      	cbnz	r0, 800b92a <HttpDaemon::HandleGet()+0xda>
 800b91e:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b922:	480e      	ldr	r0, [pc, #56]	; (800b95c <HttpDaemon::HandleGet()+0x10c>)
 800b924:	f000 f9f0 	bl	800bd08 <remoteconfig::json_get_display(char*, unsigned short)>
 800b928:	e7a5      	b.n	800b876 <HttpDaemon::HandleGet()+0x26>
 800b92a:	491b      	ldr	r1, [pc, #108]	; (800b998 <HttpDaemon::HandleGet()+0x148>)
 800b92c:	4628      	mov	r0, r5
 800b92e:	f7ff fe30 	bl	800b592 <strcmp>
 800b932:	b928      	cbnz	r0, 800b940 <HttpDaemon::HandleGet()+0xf0>
 800b934:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800b938:	4808      	ldr	r0, [pc, #32]	; (800b95c <HttpDaemon::HandleGet()+0x10c>)
 800b93a:	f000 f9f5 	bl	800bd28 <remoteconfig::json_get_directory(char*, unsigned short)>
 800b93e:	e79a      	b.n	800b876 <HttpDaemon::HandleGet()+0x26>
 800b940:	4620      	mov	r0, r4
 800b942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b946:	f7ff bf3f 	b.w	800b7c8 <HttpDaemon::HandleGetTxt()>
 800b94a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b94e:	e796      	b.n	800b87e <HttpDaemon::HandleGet()+0x2e>
 800b950:	0801b31a 	stmdaeq	r1, {r1, r3, r4, r8, r9, ip, sp, pc}
 800b954:	0801b2f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, ip, sp, pc}
 800b958:	0801b511 	stmdaeq	r1, {r0, r4, r8, sl, ip, sp, pc}
 800b95c:	20000130 	andcs	r0, r0, r0, lsr r1
 800b960:	0801b2f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, ip, sp, pc}
 800b964:	0801b2ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r9, ip, sp, pc}
 800b968:	0801b531 	stmdaeq	r1, {r0, r4, r5, r8, sl, ip, sp, pc}
 800b96c:	0801b300 	stmdaeq	r1, {r8, r9, ip, sp, pc}
 800b970:	0801b30b 	stmdaeq	r1, {r0, r1, r3, r8, r9, ip, sp, pc}
 800b974:	0801b315 	stmdaeq	r1, {r0, r2, r4, r8, r9, ip, sp, pc}
 800b978:	0801b571 	stmdaeq	r1, {r0, r4, r5, r6, r8, sl, ip, sp, pc}
 800b97c:	0801b31c 	stmdaeq	r1, {r2, r3, r4, r8, r9, ip, sp, pc}
 800b980:	0801b551 	stmdaeq	r1, {r0, r4, r6, r8, sl, ip, sp, pc}
 800b984:	0801b30c 	stmdaeq	r1, {r2, r3, r8, r9, ip, sp, pc}
 800b988:	0801b321 	stmdaeq	r1, {r0, r5, r8, r9, ip, sp, pc}
 800b98c:	0801b329 	stmdaeq	r1, {r0, r3, r5, r8, r9, ip, sp, pc}
 800b990:	2000012c 	andcs	r0, r0, ip, lsr #2
 800b994:	0801b330 	stmdaeq	r1, {r4, r5, r8, r9, ip, sp, pc}
 800b998:	0801b338 	stmdaeq	r1, {r3, r4, r5, r8, r9, ip, sp, pc}

0800b99c <HttpDaemon::HandlePost(bool)>:
 800b99c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b99e:	4604      	mov	r4, r0
 800b9a0:	2900      	cmp	r1, #0
 800b9a2:	f040 8088 	bne.w	800bab6 <HttpDaemon::HandlePost(bool)+0x11a>
 800b9a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d058      	beq.n	800ba60 <HttpDaemon::HandlePost(bool)+0xc4>
 800b9ae:	6845      	ldr	r5, [r0, #4]
 800b9b0:	4943      	ldr	r1, [pc, #268]	; (800bac0 <HttpDaemon::HandlePost(bool)+0x124>)
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	f7ff fded 	bl	800b592 <strcmp>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	bf0c      	ite	eq
 800b9bc:	2301      	moveq	r3, #1
 800b9be:	2300      	movne	r3, #0
 800b9c0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800b9c4:	d050      	beq.n	800ba68 <HttpDaemon::HandlePost(bool)+0xcc>
 800b9c6:	493f      	ldr	r1, [pc, #252]	; (800bac4 <HttpDaemon::HandlePost(bool)+0x128>)
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	f7ff fde2 	bl	800b592 <strcmp>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d04a      	beq.n	800ba68 <HttpDaemon::HandlePost(bool)+0xcc>
 800b9d2:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800b9d6:	e045      	b.n	800ba64 <HttpDaemon::HandlePost(bool)+0xc8>
 800b9d8:	493b      	ldr	r1, [pc, #236]	; (800bac8 <HttpDaemon::HandlePost(bool)+0x12c>)
 800b9da:	68a0      	ldr	r0, [r4, #8]
 800b9dc:	f10d 0207 	add.w	r2, sp, #7
 800b9e0:	f00b ff3f 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b9e4:	b9c8      	cbnz	r0, 800ba1a <HttpDaemon::HandlePost(bool)+0x7e>
 800b9e6:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800b9ea:	4b38      	ldr	r3, [pc, #224]	; (800bacc <HttpDaemon::HandlePost(bool)+0x130>)
 800b9ec:	fab6 f186 	clz	r1, r6
 800b9f0:	681d      	ldr	r5, [r3, #0]
 800b9f2:	0949      	lsrs	r1, r1, #5
 800b9f4:	7629      	strb	r1, [r5, #24]
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f00c f98e 	bl	8017d18 <ILI9341::EnableSleep(bool)>
 800b9fc:	b116      	cbz	r6, 800ba04 <HttpDaemon::HandlePost(bool)+0x68>
 800b9fe:	4b34      	ldr	r3, [pc, #208]	; (800bad0 <HttpDaemon::HandlePost(bool)+0x134>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	622b      	str	r3, [r5, #32]
 800ba04:	4b33      	ldr	r3, [pc, #204]	; (800bad4 <HttpDaemon::HandlePost(bool)+0x138>)
 800ba06:	4a34      	ldr	r2, [pc, #208]	; (800bad8 <HttpDaemon::HandlePost(bool)+0x13c>)
 800ba08:	4834      	ldr	r0, [pc, #208]	; (800badc <HttpDaemon::HandlePost(bool)+0x140>)
 800ba0a:	6023      	str	r3, [r4, #0]
 800ba0c:	f240 519f 	movw	r1, #1439	; 0x59f
 800ba10:	f7fe fd6a 	bl	800a4e8 <snprintf>
 800ba14:	8460      	strh	r0, [r4, #34]	; 0x22
 800ba16:	20c8      	movs	r0, #200	; 0xc8
 800ba18:	e024      	b.n	800ba64 <HttpDaemon::HandlePost(bool)+0xc8>
 800ba1a:	4931      	ldr	r1, [pc, #196]	; (800bae0 <HttpDaemon::HandlePost(bool)+0x144>)
 800ba1c:	68a0      	ldr	r0, [r4, #8]
 800ba1e:	f10d 0207 	add.w	r2, sp, #7
 800ba22:	f00b ff1e 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ba26:	b9d8      	cbnz	r0, 800ba60 <HttpDaemon::HandlePost(bool)+0xc4>
 800ba28:	4b2e      	ldr	r3, [pc, #184]	; (800bae4 <HttpDaemon::HandlePost(bool)+0x148>)
 800ba2a:	6818      	ldr	r0, [r3, #0]
 800ba2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba30:	b11b      	cbz	r3, 800ba3a <HttpDaemon::HandlePost(bool)+0x9e>
 800ba32:	2104      	movs	r1, #4
 800ba34:	f00c fb02 	bl	801803c <LedBlink::SetMode(ledblink::Mode)>
 800ba38:	e7e4      	b.n	800ba04 <HttpDaemon::HandlePost(bool)+0x68>
 800ba3a:	2102      	movs	r1, #2
 800ba3c:	e7fa      	b.n	800ba34 <HttpDaemon::HandlePost(bool)+0x98>
 800ba3e:	4b2a      	ldr	r3, [pc, #168]	; (800bae8 <HttpDaemon::HandlePost(bool)+0x14c>)
 800ba40:	2001      	movs	r0, #1
 800ba42:	781d      	ldrb	r5, [r3, #0]
 800ba44:	f7ff fdcc 	bl	800b5e0 <PropertiesConfig::EnableJSON(bool)>
 800ba48:	4b28      	ldr	r3, [pc, #160]	; (800baec <HttpDaemon::HandlePost(bool)+0x150>)
 800ba4a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800ba4c:	6818      	ldr	r0, [r3, #0]
 800ba4e:	68a1      	ldr	r1, [r4, #8]
 800ba50:	f005 0501 	and.w	r5, r5, #1
 800ba54:	f7ff f9f0 	bl	800ae38 <RemoteConfig::HandleSet(void*, unsigned int)>
 800ba58:	4628      	mov	r0, r5
 800ba5a:	f7ff fdc1 	bl	800b5e0 <PropertiesConfig::EnableJSON(bool)>
 800ba5e:	e7d1      	b.n	800ba04 <HttpDaemon::HandlePost(bool)+0x68>
 800ba60:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ba64:	b002      	add	sp, #8
 800ba66:	bd70      	pop	{r4, r5, r6, pc}
 800ba68:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800ba6a:	6962      	ldr	r2, [r4, #20]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	dbd2      	blt.n	800ba16 <HttpDaemon::HandlePost(bool)+0x7a>
 800ba70:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d0cf      	beq.n	800ba16 <HttpDaemon::HandlePost(bool)+0x7a>
 800ba76:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d0df      	beq.n	800ba3e <HttpDaemon::HandlePost(bool)+0xa2>
 800ba7e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800ba80:	68a0      	ldr	r0, [r4, #8]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f00b fc66 	bl	8017354 <properties::convert_json_file(char*, unsigned short, bool)>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	dde9      	ble.n	800ba60 <HttpDaemon::HandlePost(bool)+0xc4>
 800ba8c:	4918      	ldr	r1, [pc, #96]	; (800baf0 <HttpDaemon::HandlePost(bool)+0x154>)
 800ba8e:	68a0      	ldr	r0, [r4, #8]
 800ba90:	f10d 0207 	add.w	r2, sp, #7
 800ba94:	f00b fee5 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d19d      	bne.n	800b9d8 <HttpDaemon::HandlePost(bool)+0x3c>
 800ba9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d0af      	beq.n	800ba04 <HttpDaemon::HandlePost(bool)+0x68>
 800baa4:	4b11      	ldr	r3, [pc, #68]	; (800baec <HttpDaemon::HandlePost(bool)+0x150>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	7b9b      	ldrb	r3, [r3, #14]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d0d8      	beq.n	800ba60 <HttpDaemon::HandlePost(bool)+0xc4>
 800baae:	4b11      	ldr	r3, [pc, #68]	; (800baf4 <HttpDaemon::HandlePost(bool)+0x158>)
 800bab0:	6818      	ldr	r0, [r3, #0]
 800bab2:	f00c fb83 	bl	80181bc <Hardware::Reboot()>
 800bab6:	68c3      	ldr	r3, [r0, #12]
 800bab8:	6083      	str	r3, [r0, #8]
 800baba:	6943      	ldr	r3, [r0, #20]
 800babc:	8483      	strh	r3, [r0, #36]	; 0x24
 800babe:	e7da      	b.n	800ba76 <HttpDaemon::HandlePost(bool)+0xda>
 800bac0:	0801b342 	stmdaeq	r1, {r1, r6, r8, r9, ip, sp, pc}
 800bac4:	0801b2de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r9, ip, sp, pc}
 800bac8:	0801b330 	stmdaeq	r1, {r4, r5, r8, r9, ip, sp, pc}
 800bacc:	2000fcb8 			; <UNDEFINED> instruction: 0x2000fcb8
 800bad0:	20010694 	mulcs	r1, r4, r6
 800bad4:	0801b511 	stmdaeq	r1, {r0, r4, r8, sl, ip, sp, pc}
 800bad8:	0801b35f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, pc}
 800badc:	20000130 	andcs	r0, r0, r0, lsr r1
 800bae0:	0801b356 	stmdaeq	r1, {r1, r2, r4, r6, r8, r9, ip, sp, pc}
 800bae4:	20010678 	andcs	r0, r1, r8, ror r6
 800bae8:	2000fcb4 			; <UNDEFINED> instruction: 0x2000fcb4
 800baec:	2000012c 	andcs	r0, r0, ip, lsr #2
 800baf0:	0801b34f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, r9, ip, sp, pc}
 800baf4:	2001067c 	andcs	r0, r1, ip, ror r6

0800baf8 <HttpDaemon::Run()>:
 800baf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bafa:	4e46      	ldr	r6, [pc, #280]	; (800bc14 <HttpDaemon::Run()+0x11c>)
 800bafc:	6901      	ldr	r1, [r0, #16]
 800bafe:	4604      	mov	r4, r0
 800bb00:	f100 020c 	add.w	r2, r0, #12
 800bb04:	6830      	ldr	r0, [r6, #0]
 800bb06:	f009 fba2 	bl	801524e <Network::TcpRead(int, unsigned char const**)>
 800bb0a:	6160      	str	r0, [r4, #20]
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d05b      	beq.n	800bbc8 <HttpDaemon::Run()+0xd0>
 800bb10:	69a3      	ldr	r3, [r4, #24]
 800bb12:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800bb16:	d159      	bne.n	800bbcc <HttpDaemon::Run()+0xd4>
 800bb18:	4620      	mov	r0, r4
 800bb1a:	f7ff fe1d 	bl	800b758 <HttpDaemon::ParseRequest()>
 800bb1e:	28c8      	cmp	r0, #200	; 0xc8
 800bb20:	61a0      	str	r0, [r4, #24]
 800bb22:	d106      	bne.n	800bb32 <HttpDaemon::Run()+0x3a>
 800bb24:	69e3      	ldr	r3, [r4, #28]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d142      	bne.n	800bbb0 <HttpDaemon::Run()+0xb8>
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f7ff fe90 	bl	800b850 <HttpDaemon::HandleGet()>
 800bb30:	61a0      	str	r0, [r4, #24]
 800bb32:	69a3      	ldr	r3, [r4, #24]
 800bb34:	2bc8      	cmp	r3, #200	; 0xc8
 800bb36:	d06b      	beq.n	800bc10 <HttpDaemon::Run()+0x118>
 800bb38:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800bb3c:	d05e      	beq.n	800bbfc <HttpDaemon::Run()+0x104>
 800bb3e:	dc4e      	bgt.n	800bbde <HttpDaemon::Run()+0xe6>
 800bb40:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800bb44:	d05c      	beq.n	800bc00 <HttpDaemon::Run()+0x108>
 800bb46:	f240 129d 	movw	r2, #413	; 0x19d
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d05a      	beq.n	800bc04 <HttpDaemon::Run()+0x10c>
 800bb4e:	4d32      	ldr	r5, [pc, #200]	; (800bc18 <HttpDaemon::Run()+0x120>)
 800bb50:	4a32      	ldr	r2, [pc, #200]	; (800bc1c <HttpDaemon::Run()+0x124>)
 800bb52:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bb56:	bf18      	it	ne
 800bb58:	4615      	movne	r5, r2
 800bb5a:	4a31      	ldr	r2, [pc, #196]	; (800bc20 <HttpDaemon::Run()+0x128>)
 800bb5c:	6022      	str	r2, [r4, #0]
 800bb5e:	e9cd 5500 	strd	r5, r5, [sp]
 800bb62:	4a30      	ldr	r2, [pc, #192]	; (800bc24 <HttpDaemon::Run()+0x12c>)
 800bb64:	4830      	ldr	r0, [pc, #192]	; (800bc28 <HttpDaemon::Run()+0x130>)
 800bb66:	f240 519f 	movw	r1, #1439	; 0x59f
 800bb6a:	f7fe fcbd 	bl	800a4e8 <snprintf>
 800bb6e:	8460      	strh	r0, [r4, #34]	; 0x22
 800bb70:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800bb72:	9303      	str	r3, [sp, #12]
 800bb74:	6823      	ldr	r3, [r4, #0]
 800bb76:	9302      	str	r3, [sp, #8]
 800bb78:	4b2c      	ldr	r3, [pc, #176]	; (800bc2c <HttpDaemon::Run()+0x134>)
 800bb7a:	4a2d      	ldr	r2, [pc, #180]	; (800bc30 <HttpDaemon::Run()+0x138>)
 800bb7c:	68e0      	ldr	r0, [r4, #12]
 800bb7e:	e9cd 5300 	strd	r5, r3, [sp]
 800bb82:	f240 519f 	movw	r1, #1439	; 0x59f
 800bb86:	69a3      	ldr	r3, [r4, #24]
 800bb88:	f7fe fcae 	bl	800a4e8 <snprintf>
 800bb8c:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800bb90:	b283      	uxth	r3, r0
 800bb92:	6830      	ldr	r0, [r6, #0]
 800bb94:	f009 fb5f 	bl	8015256 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800bb98:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800bb9a:	4a23      	ldr	r2, [pc, #140]	; (800bc28 <HttpDaemon::Run()+0x130>)
 800bb9c:	6921      	ldr	r1, [r4, #16]
 800bb9e:	6830      	ldr	r0, [r6, #0]
 800bba0:	f009 fb59 	bl	8015256 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800bba4:	f44f 7202 	mov.w	r2, #520	; 0x208
 800bba8:	2302      	movs	r3, #2
 800bbaa:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800bbae:	e00b      	b.n	800bbc8 <HttpDaemon::Run()+0xd0>
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d1be      	bne.n	800bb32 <HttpDaemon::Run()+0x3a>
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f7ff fef0 	bl	800b99c <HttpDaemon::HandlePost(bool)>
 800bbbc:	28c8      	cmp	r0, #200	; 0xc8
 800bbbe:	61a0      	str	r0, [r4, #24]
 800bbc0:	d1b7      	bne.n	800bb32 <HttpDaemon::Run()+0x3a>
 800bbc2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d1b4      	bne.n	800bb32 <HttpDaemon::Run()+0x3a>
 800bbc8:	b004      	add	sp, #16
 800bbca:	bd70      	pop	{r4, r5, r6, pc}
 800bbcc:	2bc8      	cmp	r3, #200	; 0xc8
 800bbce:	d1b0      	bne.n	800bb32 <HttpDaemon::Run()+0x3a>
 800bbd0:	69e1      	ldr	r1, [r4, #28]
 800bbd2:	2901      	cmp	r1, #1
 800bbd4:	d1ad      	bne.n	800bb32 <HttpDaemon::Run()+0x3a>
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f7ff fee0 	bl	800b99c <HttpDaemon::HandlePost(bool)>
 800bbdc:	e7a8      	b.n	800bb30 <HttpDaemon::Run()+0x38>
 800bbde:	f240 12f5 	movw	r2, #501	; 0x1f5
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d010      	beq.n	800bc08 <HttpDaemon::Run()+0x110>
 800bbe6:	f240 12f9 	movw	r2, #505	; 0x1f9
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d00e      	beq.n	800bc0c <HttpDaemon::Run()+0x114>
 800bbee:	4d11      	ldr	r5, [pc, #68]	; (800bc34 <HttpDaemon::Run()+0x13c>)
 800bbf0:	4a0a      	ldr	r2, [pc, #40]	; (800bc1c <HttpDaemon::Run()+0x124>)
 800bbf2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800bbf6:	bf18      	it	ne
 800bbf8:	4615      	movne	r5, r2
 800bbfa:	e7ae      	b.n	800bb5a <HttpDaemon::Run()+0x62>
 800bbfc:	4d0e      	ldr	r5, [pc, #56]	; (800bc38 <HttpDaemon::Run()+0x140>)
 800bbfe:	e7ac      	b.n	800bb5a <HttpDaemon::Run()+0x62>
 800bc00:	4d0e      	ldr	r5, [pc, #56]	; (800bc3c <HttpDaemon::Run()+0x144>)
 800bc02:	e7aa      	b.n	800bb5a <HttpDaemon::Run()+0x62>
 800bc04:	4d0e      	ldr	r5, [pc, #56]	; (800bc40 <HttpDaemon::Run()+0x148>)
 800bc06:	e7a8      	b.n	800bb5a <HttpDaemon::Run()+0x62>
 800bc08:	4d0e      	ldr	r5, [pc, #56]	; (800bc44 <HttpDaemon::Run()+0x14c>)
 800bc0a:	e7a6      	b.n	800bb5a <HttpDaemon::Run()+0x62>
 800bc0c:	4d0e      	ldr	r5, [pc, #56]	; (800bc48 <HttpDaemon::Run()+0x150>)
 800bc0e:	e7a4      	b.n	800bb5a <HttpDaemon::Run()+0x62>
 800bc10:	4d0e      	ldr	r5, [pc, #56]	; (800bc4c <HttpDaemon::Run()+0x154>)
 800bc12:	e7ad      	b.n	800bb70 <HttpDaemon::Run()+0x78>
 800bc14:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 800bc18:	0801b3bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, r9, ip, sp, pc}
 800bc1c:	0801b442 	stmdaeq	r1, {r1, r6, sl, ip, sp, pc}
 800bc20:	0801b511 	stmdaeq	r1, {r0, r4, r8, sl, ip, sp, pc}
 800bc24:	0801b453 	stmdaeq	r1, {r0, r1, r4, r6, sl, ip, sp, pc}
 800bc28:	20000130 	andcs	r0, r0, r0, lsr r1
 800bc2c:	0801b506 	stmdaeq	r1, {r1, r2, r8, sl, ip, sp, pc}
 800bc30:	0801b4ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, sl, ip, sp, pc}
 800bc34:	0801b3ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, ip, sp, pc}
 800bc38:	0801b3ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r8, r9, ip, sp, pc}
 800bc3c:	0801b3c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, r9, ip, sp, pc}
 800bc40:	0801b3d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, ip, sp, pc}
 800bc44:	0801b415 	stmdaeq	r1, {r0, r2, r4, sl, ip, sp, pc}
 800bc48:	0801b42c 	stmdaeq	r1, {r2, r3, r5, sl, ip, sp, pc}
 800bc4c:	0801b450 	stmdaeq	r1, {r4, r6, sl, ip, sp, pc}

0800bc50 <remoteconfig::json_get_list(char*, unsigned short)>:
 800bc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc52:	4b13      	ldr	r3, [pc, #76]	; (800bca0 <remoteconfig::json_get_list(char*, unsigned short)+0x50>)
 800bc54:	4f13      	ldr	r7, [pc, #76]	; (800bca4 <remoteconfig::json_get_list(char*, unsigned short)+0x54>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	b08b      	sub	sp, #44	; 0x2c
 800bc5a:	4605      	mov	r5, r0
 800bc5c:	6838      	ldr	r0, [r7, #0]
 800bc5e:	695c      	ldr	r4, [r3, #20]
 800bc60:	9109      	str	r1, [sp, #36]	; 0x24
 800bc62:	f7fe ff93 	bl	800ab8c <RemoteConfig::GetStringNode() const>
 800bc66:	4606      	mov	r6, r0
 800bc68:	6838      	ldr	r0, [r7, #0]
 800bc6a:	f7fe ff9b 	bl	800aba4 <RemoteConfig::GetStringOutput() const>
 800bc6e:	4b0e      	ldr	r3, [pc, #56]	; (800bca8 <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 800bc70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc72:	7a1a      	ldrb	r2, [r3, #8]
 800bc74:	9604      	str	r6, [sp, #16]
 800bc76:	3309      	adds	r3, #9
 800bc78:	9303      	str	r3, [sp, #12]
 800bc7a:	0e23      	lsrs	r3, r4, #24
 800bc7c:	9302      	str	r3, [sp, #8]
 800bc7e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800bc82:	9301      	str	r3, [sp, #4]
 800bc84:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800bc88:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	4a07      	ldr	r2, [pc, #28]	; (800bcac <remoteconfig::json_get_list(char*, unsigned short)+0x5c>)
 800bc90:	b2e3      	uxtb	r3, r4
 800bc92:	4628      	mov	r0, r5
 800bc94:	f7fe fc28 	bl	800a4e8 <snprintf>
 800bc98:	b280      	uxth	r0, r0
 800bc9a:	b00b      	add	sp, #44	; 0x2c
 800bc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 800bca4:	2000012c 	andcs	r0, r0, ip, lsr #2
 800bca8:	20000108 	andcs	r0, r0, r8, lsl #2
 800bcac:	0801b5eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, sl, ip, sp, pc}

0800bcb0 <remoteconfig::json_get_version(char*, unsigned short)>:
 800bcb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bcb2:	4b0a      	ldr	r3, [pc, #40]	; (800bcdc <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 800bcb4:	9305      	str	r3, [sp, #20]
 800bcb6:	2208      	movs	r2, #8
 800bcb8:	9204      	str	r2, [sp, #16]
 800bcba:	f1a3 020b 	sub.w	r2, r3, #11
 800bcbe:	9203      	str	r2, [sp, #12]
 800bcc0:	220b      	movs	r2, #11
 800bcc2:	9202      	str	r2, [sp, #8]
 800bcc4:	3b0e      	subs	r3, #14
 800bcc6:	4a06      	ldr	r2, [pc, #24]	; (800bce0 <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 800bcc8:	9201      	str	r2, [sp, #4]
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	4a05      	ldr	r2, [pc, #20]	; (800bce4 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800bcce:	2303      	movs	r3, #3
 800bcd0:	f7fe fc0a 	bl	800a4e8 <snprintf>
 800bcd4:	b280      	uxth	r0, r0
 800bcd6:	b007      	add	sp, #28
 800bcd8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bcdc:	2001062a 	andcs	r0, r1, sl, lsr #12
 800bce0:	0801b506 	stmdaeq	r1, {r1, r2, r8, sl, ip, sp, pc}
 800bce4:	0801b64a 	stmdaeq	r1, {r1, r3, r6, r9, sl, ip, sp, pc}

0800bce8 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 800bce8:	b508      	push	{r3, lr}
 800bcea:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bcf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcf6:	4a03      	ldr	r2, [pc, #12]	; (800bd04 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 800bcf8:	f7fe fbf6 	bl	800a4e8 <snprintf>
 800bcfc:	b280      	uxth	r0, r0
 800bcfe:	bd08      	pop	{r3, pc}
 800bd00:	20010694 	mulcs	r1, r4, r6
 800bd04:	0801b690 	stmdaeq	r1, {r4, r7, r9, sl, ip, sp, pc}

0800bd08 <remoteconfig::json_get_display(char*, unsigned short)>:
 800bd08:	b508      	push	{r3, lr}
 800bd0a:	4b05      	ldr	r3, [pc, #20]	; (800bd20 <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 800bd0c:	4a05      	ldr	r2, [pc, #20]	; (800bd24 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	7e1b      	ldrb	r3, [r3, #24]
 800bd12:	f083 0301 	eor.w	r3, r3, #1
 800bd16:	f7fe fbe7 	bl	800a4e8 <snprintf>
 800bd1a:	b280      	uxth	r0, r0
 800bd1c:	bd08      	pop	{r3, pc}
 800bd1e:	bf00      	nop
 800bd20:	2000fcb8 			; <UNDEFINED> instruction: 0x2000fcb8
 800bd24:	0801b69f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r9, sl, ip, sp, pc}

0800bd28 <remoteconfig::json_get_directory(char*, unsigned short)>:
 800bd28:	b508      	push	{r3, lr}
 800bd2a:	4a02      	ldr	r2, [pc, #8]	; (800bd34 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 800bd2c:	f7fe fbdc 	bl	800a4e8 <snprintf>
 800bd30:	b280      	uxth	r0, r0
 800bd32:	bd08      	pop	{r3, pc}
 800bd34:	0801b6ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, sl, ip, sp, pc}

0800bd38 <get_file_content(char const*, char*)>:
 800bd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd3a:	4a11      	ldr	r2, [pc, #68]	; (800bd80 <get_file_content(char const*, char*)+0x48>)
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800bd42:	1e46      	subs	r6, r0, #1
 800bd44:	3c01      	subs	r4, #1
 800bd46:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800bd4a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800bd4e:	42bd      	cmp	r5, r7
 800bd50:	d005      	beq.n	800bd5e <get_file_content(char const*, char*)+0x26>
 800bd52:	3301      	adds	r3, #1
 800bd54:	2b03      	cmp	r3, #3
 800bd56:	d1f2      	bne.n	800bd3e <get_file_content(char const*, char*)+0x6>
 800bd58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd5e:	2d00      	cmp	r5, #0
 800bd60:	d1f1      	bne.n	800bd46 <get_file_content(char const*, char*)+0xe>
 800bd62:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bd66:	4608      	mov	r0, r1
 800bd68:	6853      	ldr	r3, [r2, #4]
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800bd70:	f800 2b01 	strb.w	r2, [r0], #1
 800bd74:	2a00      	cmp	r2, #0
 800bd76:	d1f9      	bne.n	800bd6c <get_file_content(char const*, char*)+0x34>
 800bd78:	1a41      	subs	r1, r0, r1
 800bd7a:	1e48      	subs	r0, r1, #1
 800bd7c:	e7ee      	b.n	800bd5c <get_file_content(char const*, char*)+0x24>
 800bd7e:	bf00      	nop
 800bd80:	0801ba0c 	stmdaeq	r1, {r2, r3, r9, fp, ip, sp, pc}

0800bd84 <ArtNet4Node::IsStatusChanged()>:
 800bd84:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800bd88:	f893 0d8c 	ldrb.w	r0, [r3, #3468]	; 0xd8c
 800bd8c:	b110      	cbz	r0, 800bd94 <ArtNet4Node::IsStatusChanged()+0x10>
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 2d8c 	strb.w	r2, [r3, #3468]	; 0xd8c
 800bd94:	4770      	bx	lr

0800bd96 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 800bd96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd98:	1d07      	adds	r7, r0, #4
 800bd9a:	4616      	mov	r6, r2
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	4613      	mov	r3, r2
 800bda0:	4638      	mov	r0, r7
 800bda2:	f10d 0206 	add.w	r2, sp, #6
 800bda6:	460d      	mov	r5, r1
 800bda8:	f000 fc82 	bl	800c6b0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800bdac:	b1be      	cbz	r6, 800bdde <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800bdae:	b1b0      	cbz	r0, 800bdde <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800bdb0:	2328      	movs	r3, #40	; 0x28
 800bdb2:	fb03 4305 	mla	r3, r3, r5, r4
 800bdb6:	f8d3 3a44 	ldr.w	r3, [r3, #2628]	; 0xa44
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d10f      	bne.n	800bdde <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800bdbe:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800bdc2:	b123      	cbz	r3, 800bdce <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x38>
 800bdc4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bdce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bdd2:	b933      	cbnz	r3, 800bde2 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4c>
 800bdd4:	2202      	movs	r2, #2
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	4638      	mov	r0, r7
 800bdda:	f000 fc91 	bl	800c700 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800bdde:	b003      	add	sp, #12
 800bde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bde2:	1e71      	subs	r1, r6, #1
 800bde4:	424a      	negs	r2, r1
 800bde6:	f504 50c4 	add.w	r0, r4, #6272	; 0x1880
 800bdea:	414a      	adcs	r2, r1
 800bdec:	3014      	adds	r0, #20
 800bdee:	4629      	mov	r1, r5
 800bdf0:	f002 fd72 	bl	800e8d8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800bdf4:	e7f3      	b.n	800bdde <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
	...

0800bdf8 <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)>:
 800bdf8:	1e8a      	subs	r2, r1, #2
 800bdfa:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800bdfe:	4253      	negs	r3, r2
 800be00:	4153      	adcs	r3, r2
 800be02:	f880 389c 	strb.w	r3, [r0, #2204]	; 0x89c
 800be06:	4b02      	ldr	r3, [pc, #8]	; (800be10 <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)+0x18>)
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	f00c b917 	b.w	801803c <LedBlink::SetMode(ledblink::Mode)>
 800be0e:	bf00      	nop
 800be10:	20010678 	andcs	r0, r1, r8, ror r6

0800be14 <ArtNet4Node::~ArtNet4Node()>:
 800be14:	b510      	push	{r4, lr}
 800be16:	4b06      	ldr	r3, [pc, #24]	; (800be30 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 800be18:	6003      	str	r3, [r0, #0]
 800be1a:	4604      	mov	r4, r0
 800be1c:	f500 50c4 	add.w	r0, r0, #6272	; 0x1880
 800be20:	3014      	adds	r0, #20
 800be22:	f002 fccd 	bl	800e7c0 <E131Bridge::~E131Bridge()>
 800be26:	1d20      	adds	r0, r4, #4
 800be28:	f000 f953 	bl	800c0d2 <ArtNetNode::~ArtNetNode()>
 800be2c:	4620      	mov	r0, r4
 800be2e:	bd10      	pop	{r4, pc}
 800be30:	0801bf74 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}

0800be34 <ArtNet4Node::~ArtNet4Node()>:
 800be34:	b510      	push	{r4, lr}
 800be36:	4604      	mov	r4, r0
 800be38:	f7ff ffec 	bl	800be14 <ArtNet4Node::~ArtNet4Node()>
 800be3c:	4620      	mov	r0, r4
 800be3e:	f00c f9fb 	bl	8018238 <operator delete(void*)>
 800be42:	4620      	mov	r0, r4
 800be44:	bd10      	pop	{r4, pc}

0800be46 <ArtNet4Node::GetStatus(unsigned int)>:
 800be46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be48:	4604      	mov	r4, r0
 800be4a:	f500 50c4 	add.w	r0, r0, #6272	; 0x1880
 800be4e:	2301      	movs	r3, #1
 800be50:	f10d 0206 	add.w	r2, sp, #6
 800be54:	3014      	adds	r0, #20
 800be56:	460d      	mov	r5, r1
 800be58:	f002 fdb8 	bl	800e9cc <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800be5c:	b170      	cbz	r0, 800be7c <ArtNet4Node::GetStatus(unsigned int)+0x36>
 800be5e:	2344      	movs	r3, #68	; 0x44
 800be60:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800be64:	fb03 4105 	mla	r1, r3, r5, r4
 800be68:	f891 0dea 	ldrb.w	r0, [r1, #3562]	; 0xdea
 800be6c:	f891 3de9 	ldrb.w	r3, [r1, #3561]	; 0xde9
 800be70:	01c0      	lsls	r0, r0, #7
 800be72:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 800be76:	f040 0001 	orr.w	r0, r0, #1
 800be7a:	b2c0      	uxtb	r0, r0
 800be7c:	b003      	add	sp, #12
 800be7e:	bd30      	pop	{r4, r5, pc}

0800be80 <ArtNet4Node::HandleAddress(unsigned char)>:
 800be80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be82:	f500 57c4 	add.w	r7, r0, #6272	; 0x1880
 800be86:	4604      	mov	r4, r0
 800be88:	460d      	mov	r5, r1
 800be8a:	2600      	movs	r6, #0
 800be8c:	3714      	adds	r7, #20
 800be8e:	2301      	movs	r3, #1
 800be90:	f10d 0206 	add.w	r2, sp, #6
 800be94:	4631      	mov	r1, r6
 800be96:	1d20      	adds	r0, r4, #4
 800be98:	f000 fc0a 	bl	800c6b0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800be9c:	b150      	cbz	r0, 800beb4 <ArtNet4Node::HandleAddress(unsigned char)+0x34>
 800be9e:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800bea2:	b123      	cbz	r3, 800beae <ArtNet4Node::HandleAddress(unsigned char)+0x2e>
 800bea4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bea8:	3301      	adds	r3, #1
 800beaa:	f8ad 3006 	strh.w	r3, [sp, #6]
 800beae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800beb2:	b99b      	cbnz	r3, 800bedc <ArtNet4Node::HandleAddress(unsigned char)+0x5c>
 800beb4:	3601      	adds	r6, #1
 800beb6:	2e42      	cmp	r6, #66	; 0x42
 800beb8:	d1e9      	bne.n	800be8e <ArtNet4Node::HandleAddress(unsigned char)+0xe>
 800beba:	2d13      	cmp	r5, #19
 800bebc:	f005 0603 	and.w	r6, r5, #3
 800bec0:	d819      	bhi.n	800bef6 <ArtNet4Node::HandleAddress(unsigned char)+0x76>
 800bec2:	2d0f      	cmp	r5, #15
 800bec4:	d82c      	bhi.n	800bf20 <ArtNet4Node::HandleAddress(unsigned char)+0xa0>
 800bec6:	2d02      	cmp	r5, #2
 800bec8:	d026      	beq.n	800bf18 <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 800beca:	3d03      	subs	r5, #3
 800becc:	2d01      	cmp	r5, #1
 800bece:	d821      	bhi.n	800bf14 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800bed0:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800bed4:	2300      	movs	r3, #0
 800bed6:	f884 389c 	strb.w	r3, [r4, #2204]	; 0x89c
 800beda:	e01b      	b.n	800bf14 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800bedc:	2228      	movs	r2, #40	; 0x28
 800bede:	f604 2144 	addw	r1, r4, #2628	; 0xa44
 800bee2:	4372      	muls	r2, r6
 800bee4:	4638      	mov	r0, r7
 800bee6:	588a      	ldr	r2, [r1, r2]
 800bee8:	2a01      	cmp	r2, #1
 800beea:	bf18      	it	ne
 800beec:	2202      	movne	r2, #2
 800beee:	4631      	mov	r1, r6
 800bef0:	f002 fcf2 	bl	800e8d8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800bef4:	e7de      	b.n	800beb4 <ArtNet4Node::HandleAddress(unsigned char)+0x34>
 800bef6:	2d53      	cmp	r5, #83	; 0x53
 800bef8:	d808      	bhi.n	800bf0c <ArtNet4Node::HandleAddress(unsigned char)+0x8c>
 800befa:	2d4f      	cmp	r5, #79	; 0x4f
 800befc:	d90a      	bls.n	800bf14 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800befe:	2344      	movs	r3, #68	; 0x44
 800bf00:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800bf04:	fb03 4406 	mla	r4, r3, r6, r4
 800bf08:	2300      	movs	r3, #0
 800bf0a:	e00f      	b.n	800bf2c <ArtNet4Node::HandleAddress(unsigned char)+0xac>
 800bf0c:	3570      	adds	r5, #112	; 0x70
 800bf0e:	b2ed      	uxtb	r5, r5
 800bf10:	2d03      	cmp	r5, #3
 800bf12:	d90e      	bls.n	800bf32 <ArtNet4Node::HandleAddress(unsigned char)+0xb2>
 800bf14:	b003      	add	sp, #12
 800bf16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf18:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e7da      	b.n	800bed6 <ArtNet4Node::HandleAddress(unsigned char)+0x56>
 800bf20:	2344      	movs	r3, #68	; 0x44
 800bf22:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800bf26:	fb03 4406 	mla	r4, r3, r6, r4
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	f8c4 3de4 	str.w	r3, [r4, #3556]	; 0xde4
 800bf30:	e7f0      	b.n	800bf14 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800bf32:	2328      	movs	r3, #40	; 0x28
 800bf34:	fb03 4306 	mla	r3, r3, r6, r4
 800bf38:	f8d3 2a44 	ldr.w	r2, [r3, #2628]	; 0xa44
 800bf3c:	2a01      	cmp	r2, #1
 800bf3e:	d1e9      	bne.n	800bf14 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800bf40:	4b1d      	ldr	r3, [pc, #116]	; (800bfb8 <ArtNet4Node::HandleAddress(unsigned char)+0x138>)
 800bf42:	6819      	ldr	r1, [r3, #0]
 800bf44:	07c9      	lsls	r1, r1, #31
 800bf46:	bf58      	it	pl
 800bf48:	601a      	strpl	r2, [r3, #0]
 800bf4a:	f240 6204 	movw	r2, #1540	; 0x604
 800bf4e:	4b1b      	ldr	r3, [pc, #108]	; (800bfbc <ArtNet4Node::HandleAddress(unsigned char)+0x13c>)
 800bf50:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800bf54:	4372      	muls	r2, r6
 800bf56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf5a:	441a      	add	r2, r3
 800bf5c:	f8d4 0898 	ldr.w	r0, [r4, #2200]	; 0x898
 800bf60:	f502 7500 	add.w	r5, r2, #512	; 0x200
 800bf64:	4611      	mov	r1, r2
 800bf66:	2700      	movs	r7, #0
 800bf68:	428d      	cmp	r5, r1
 800bf6a:	d121      	bne.n	800bfb0 <ArtNet4Node::HandleAddress(unsigned char)+0x130>
 800bf6c:	f240 6104 	movw	r1, #1540	; 0x604
 800bf70:	fb01 3106 	mla	r1, r1, r6, r3
 800bf74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf78:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800bf7c:	6801      	ldr	r1, [r0, #0]
 800bf7e:	690d      	ldr	r5, [r1, #16]
 800bf80:	4631      	mov	r1, r6
 800bf82:	47a8      	blx	r5
 800bf84:	2544      	movs	r5, #68	; 0x44
 800bf86:	fb05 4506 	mla	r5, r5, r6, r4
 800bf8a:	f895 3daa 	ldrb.w	r3, [r5, #3498]	; 0xdaa
 800bf8e:	b15b      	cbz	r3, 800bfa8 <ArtNet4Node::HandleAddress(unsigned char)+0x128>
 800bf90:	f895 3dea 	ldrb.w	r3, [r5, #3562]	; 0xdea
 800bf94:	b943      	cbnz	r3, 800bfa8 <ArtNet4Node::HandleAddress(unsigned char)+0x128>
 800bf96:	f8d4 0898 	ldr.w	r0, [r4, #2200]	; 0x898
 800bf9a:	6803      	ldr	r3, [r0, #0]
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	4798      	blx	r3
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	f885 3dea 	strb.w	r3, [r5, #3562]	; 0xdea
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	f884 3d88 	strb.w	r3, [r4, #3464]	; 0xd88
 800bfae:	e7b1      	b.n	800bf14 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800bfb0:	f801 7b01 	strb.w	r7, [r1], #1
 800bfb4:	e7d8      	b.n	800bf68 <ArtNet4Node::HandleAddress(unsigned char)+0xe8>
 800bfb6:	bf00      	nop
 800bfb8:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800bfbc:	20030000 	andcs	r0, r3, r0

0800bfc0 <ArtNet4Node::ArtNet4Node()>:
 800bfc0:	b510      	push	{r4, lr}
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	3004      	adds	r0, #4
 800bfc6:	f000 f973 	bl	800c2b0 <ArtNetNode::ArtNetNode()>
 800bfca:	4b05      	ldr	r3, [pc, #20]	; (800bfe0 <ArtNet4Node::ArtNet4Node()+0x20>)
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	f504 50c4 	add.w	r0, r4, #6272	; 0x1880
 800bfd2:	3014      	adds	r0, #20
 800bfd4:	f002 fb8a 	bl	800e6ec <E131Bridge::E131Bridge()>
 800bfd8:	61e4      	str	r4, [r4, #28]
 800bfda:	4620      	mov	r0, r4
 800bfdc:	bd10      	pop	{r4, pc}
 800bfde:	bf00      	nop
 800bfe0:	0801bf74 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}

0800bfe4 <ArtNet4Node::Start()>:
 800bfe4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bfe8:	f500 57ef 	add.w	r7, r0, #7648	; 0x1de0
 800bfec:	4604      	mov	r4, r0
 800bfee:	4606      	mov	r6, r0
 800bff0:	2500      	movs	r5, #0
 800bff2:	3704      	adds	r7, #4
 800bff4:	f104 0804 	add.w	r8, r4, #4
 800bff8:	2301      	movs	r3, #1
 800bffa:	f10d 0206 	add.w	r2, sp, #6
 800bffe:	4629      	mov	r1, r5
 800c000:	4640      	mov	r0, r8
 800c002:	f000 fb55 	bl	800c6b0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800c006:	b140      	cbz	r0, 800c01a <ArtNet4Node::Start()+0x36>
 800c008:	f8d6 3a44 	ldr.w	r3, [r6, #2628]	; 0xa44
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	bf01      	itttt	eq
 800c010:	2344      	moveq	r3, #68	; 0x44
 800c012:	436b      	muleq	r3, r5
 800c014:	f8d6 2a3c 	ldreq.w	r2, [r6, #2620]	; 0xa3c
 800c018:	50fa      	streq	r2, [r7, r3]
 800c01a:	3501      	adds	r5, #1
 800c01c:	2d42      	cmp	r5, #66	; 0x42
 800c01e:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c022:	d1e7      	bne.n	800bff4 <ArtNet4Node::Start()+0x10>
 800c024:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800c028:	f894 2a1c 	ldrb.w	r2, [r4, #2588]	; 0xa1c
 800c02c:	f883 2d8d 	strb.w	r2, [r3, #3469]	; 0xd8d
 800c030:	68a2      	ldr	r2, [r4, #8]
 800c032:	f8c3 2898 	str.w	r2, [r3, #2200]	; 0x898
 800c036:	4640      	mov	r0, r8
 800c038:	f000 f84c 	bl	800c0d4 <ArtNetNode::Start()>
 800c03c:	f504 50c4 	add.w	r0, r4, #6272	; 0x1880
 800c040:	3014      	adds	r0, #20
 800c042:	b002      	add	sp, #8
 800c044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c048:	f002 bbbc 	b.w	800e7c4 <E131Bridge::Start()>

0800c04c <ArtNet4Node::Run()>:
 800c04c:	b510      	push	{r4, lr}
 800c04e:	4604      	mov	r4, r0
 800c050:	3004      	adds	r0, #4
 800c052:	f000 fa4f 	bl	800c4f4 <ArtNetNode::Run()>
 800c056:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800c05a:	f893 3d9f 	ldrb.w	r3, [r3, #3487]	; 0xd9f
 800c05e:	b133      	cbz	r3, 800c06e <ArtNet4Node::Run()+0x22>
 800c060:	f504 50c4 	add.w	r0, r4, #6272	; 0x1880
 800c064:	3014      	adds	r0, #20
 800c066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c06a:	f002 bf9b 	b.w	800efa4 <E131Bridge::Run()>
 800c06e:	bd10      	pop	{r4, pc}

0800c070 <ArtNet4Node::Print()>:
 800c070:	b510      	push	{r4, lr}
 800c072:	4604      	mov	r4, r0
 800c074:	3004      	adds	r0, #4
 800c076:	f001 fd71 	bl	800db5c <ArtNetNode::Print()>
 800c07a:	f894 3a1e 	ldrb.w	r3, [r4, #2590]	; 0xa1e
 800c07e:	b163      	cbz	r3, 800c09a <ArtNet4Node::Print()+0x2a>
 800c080:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800c084:	b113      	cbz	r3, 800c08c <ArtNet4Node::Print()+0x1c>
 800c086:	4805      	ldr	r0, [pc, #20]	; (800c09c <ArtNet4Node::Print()+0x2c>)
 800c088:	f7fe fa06 	bl	800a498 <printf>
 800c08c:	f504 50c4 	add.w	r0, r4, #6272	; 0x1880
 800c090:	3014      	adds	r0, #20
 800c092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c096:	f003 b9d5 	b.w	800f444 <E131Bridge::Print()>
 800c09a:	bd10      	pop	{r4, pc}
 800c09c:	0801bf4e 	stmdaeq	r1, {r1, r2, r3, r6, r8, r9, sl, fp, ip, sp, pc}

0800c0a0 <strncpy.isra.0>:
 800c0a0:	3901      	subs	r1, #1
 800c0a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c0a6:	b92b      	cbnz	r3, 800c0b4 <strncpy.isra.0+0x14>
 800c0a8:	4402      	add	r2, r0
 800c0aa:	4290      	cmp	r0, r2
 800c0ac:	d006      	beq.n	800c0bc <strncpy.isra.0+0x1c>
 800c0ae:	f800 3b01 	strb.w	r3, [r0], #1
 800c0b2:	e7fa      	b.n	800c0aa <strncpy.isra.0+0xa>
 800c0b4:	3a01      	subs	r2, #1
 800c0b6:	f800 3b01 	strb.w	r3, [r0], #1
 800c0ba:	d1f2      	bne.n	800c0a2 <strncpy.isra.0+0x2>
 800c0bc:	4770      	bx	lr

0800c0be <memcpy.isra.0>:
 800c0be:	3801      	subs	r0, #1
 800c0c0:	440a      	add	r2, r1
 800c0c2:	4291      	cmp	r1, r2
 800c0c4:	d100      	bne.n	800c0c8 <memcpy.isra.0+0xa>
 800c0c6:	4770      	bx	lr
 800c0c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0cc:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c0d0:	e7f7      	b.n	800c0c2 <memcpy.isra.0+0x4>

0800c0d2 <ArtNetNode::~ArtNetNode()>:
 800c0d2:	4770      	bx	lr

0800c0d4 <ArtNetNode::Start()>:
 800c0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d6:	4d2c      	ldr	r5, [pc, #176]	; (800c188 <ArtNetNode::Start()+0xb4>)
 800c0d8:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 800c0dc:	682a      	ldr	r2, [r5, #0]
 800c0de:	7951      	ldrb	r1, [r2, #5]
 800c0e0:	f023 0302 	bic.w	r3, r3, #2
 800c0e4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800c0e8:	b25b      	sxtb	r3, r3
 800c0ea:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
 800c0ee:	7912      	ldrb	r2, [r2, #4]
 800c0f0:	f023 0304 	bic.w	r3, r3, #4
 800c0f4:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800c0f8:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	f001 f923 	bl	800d348 <ArtNetNode::FillPollReply()>
 800c102:	6828      	ldr	r0, [r5, #0]
 800c104:	f641 1136 	movw	r1, #6454	; 0x1936
 800c108:	f008 fd97 	bl	8014c3a <Network::Begin(unsigned short)>
 800c10c:	2302      	movs	r3, #2
 800c10e:	f884 3a11 	strb.w	r3, [r4, #2577]	; 0xa11
 800c112:	6923      	ldr	r3, [r4, #16]
 800c114:	6020      	str	r0, [r4, #0]
 800c116:	b173      	cbz	r3, 800c136 <ArtNetNode::Start()+0x62>
 800c118:	f504 56a3 	add.w	r6, r4, #5216	; 0x1460
 800c11c:	2500      	movs	r5, #0
 800c11e:	3614      	adds	r6, #20
 800c120:	012b      	lsls	r3, r5, #4
 800c122:	5cf3      	ldrb	r3, [r6, r3]
 800c124:	b123      	cbz	r3, 800c130 <ArtNetNode::Start()+0x5c>
 800c126:	6920      	ldr	r0, [r4, #16]
 800c128:	6803      	ldr	r3, [r0, #0]
 800c12a:	4629      	mov	r1, r5
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	4798      	blx	r3
 800c130:	3501      	adds	r5, #1
 800c132:	2d42      	cmp	r5, #66	; 0x42
 800c134:	d1f4      	bne.n	800c120 <ArtNetNode::Start()+0x4c>
 800c136:	2100      	movs	r1, #0
 800c138:	4620      	mov	r0, r4
 800c13a:	f001 f9df 	bl	800d4fc <ArtNetNode::SendPollRelply(bool)>
 800c13e:	68e3      	ldr	r3, [r4, #12]
 800c140:	b1d3      	cbz	r3, 800c178 <ArtNetNode::Start()+0xa4>
 800c142:	f504 57a3 	add.w	r7, r4, #5216	; 0x1460
 800c146:	4626      	mov	r6, r4
 800c148:	2500      	movs	r5, #0
 800c14a:	3714      	adds	r7, #20
 800c14c:	f896 3a3c 	ldrb.w	r3, [r6, #2620]	; 0xa3c
 800c150:	b133      	cbz	r3, 800c160 <ArtNetNode::Start()+0x8c>
 800c152:	f896 3a24 	ldrb.w	r3, [r6, #2596]	; 0xa24
 800c156:	b11b      	cbz	r3, 800c160 <ArtNetNode::Start()+0x8c>
 800c158:	4629      	mov	r1, r5
 800c15a:	4620      	mov	r0, r4
 800c15c:	f001 face 	bl	800d6fc <ArtNetNode::SendTod(unsigned int)>
 800c160:	012b      	lsls	r3, r5, #4
 800c162:	5cfb      	ldrb	r3, [r7, r3]
 800c164:	b11b      	cbz	r3, 800c16e <ArtNetNode::Start()+0x9a>
 800c166:	4629      	mov	r1, r5
 800c168:	4620      	mov	r0, r4
 800c16a:	f001 fb99 	bl	800d8a0 <ArtNetNode::SendTodRequest(unsigned int)>
 800c16e:	3501      	adds	r5, #1
 800c170:	2d42      	cmp	r5, #66	; 0x42
 800c172:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c176:	d1e9      	bne.n	800c14c <ArtNetNode::Start()+0x78>
 800c178:	4b04      	ldr	r3, [pc, #16]	; (800c18c <ArtNetNode::Start()+0xb8>)
 800c17a:	2102      	movs	r1, #2
 800c17c:	6818      	ldr	r0, [r3, #0]
 800c17e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c182:	f00b bf5b 	b.w	801803c <LedBlink::SetMode(ledblink::Mode)>
 800c186:	bf00      	nop
 800c188:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 800c18c:	20010678 	andcs	r0, r1, r8, ror r6

0800c190 <ArtNetNode::Stop()>:
 800c190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c194:	2500      	movs	r5, #0
 800c196:	4f22      	ldr	r7, [pc, #136]	; (800c220 <ArtNetNode::Stop()+0x90>)
 800c198:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800c228 <ArtNetNode::Stop()+0x98>
 800c19c:	4604      	mov	r4, r0
 800c19e:	4606      	mov	r6, r0
 800c1a0:	46a9      	mov	r9, r5
 800c1a2:	f04f 0a01 	mov.w	sl, #1
 800c1a6:	f8d6 3a40 	ldr.w	r3, [r6, #2624]	; 0xa40
 800c1aa:	b97b      	cbnz	r3, 800c1cc <ArtNetNode::Stop()+0x3c>
 800c1ac:	6860      	ldr	r0, [r4, #4]
 800c1ae:	b118      	cbz	r0, 800c1b8 <ArtNetNode::Stop()+0x28>
 800c1b0:	6803      	ldr	r3, [r0, #0]
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	4798      	blx	r3
 800c1b8:	f8d8 3000 	ldr.w	r3, [r8]
 800c1bc:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800c1c0:	07db      	lsls	r3, r3, #31
 800c1c2:	bf58      	it	pl
 800c1c4:	f8c8 a000 	strpl.w	sl, [r8]
 800c1c8:	f886 9a45 	strb.w	r9, [r6, #2629]	; 0xa45
 800c1cc:	3501      	adds	r5, #1
 800c1ce:	2d42      	cmp	r5, #66	; 0x42
 800c1d0:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c1d4:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800c1d8:	d1e5      	bne.n	800c1a6 <ArtNetNode::Stop()+0x16>
 800c1da:	6923      	ldr	r3, [r4, #16]
 800c1dc:	b173      	cbz	r3, 800c1fc <ArtNetNode::Stop()+0x6c>
 800c1de:	f504 56a3 	add.w	r6, r4, #5216	; 0x1460
 800c1e2:	2500      	movs	r5, #0
 800c1e4:	3614      	adds	r6, #20
 800c1e6:	012b      	lsls	r3, r5, #4
 800c1e8:	5cf3      	ldrb	r3, [r6, r3]
 800c1ea:	b123      	cbz	r3, 800c1f6 <ArtNetNode::Stop()+0x66>
 800c1ec:	6920      	ldr	r0, [r4, #16]
 800c1ee:	6803      	ldr	r3, [r0, #0]
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	4798      	blx	r3
 800c1f6:	3501      	adds	r5, #1
 800c1f8:	2d04      	cmp	r5, #4
 800c1fa:	d1f4      	bne.n	800c1e6 <ArtNetNode::Stop()+0x56>
 800c1fc:	4b09      	ldr	r3, [pc, #36]	; (800c224 <ArtNetNode::Stop()+0x94>)
 800c1fe:	2100      	movs	r1, #0
 800c200:	6818      	ldr	r0, [r3, #0]
 800c202:	f00b ff1b 	bl	801803c <LedBlink::SetMode(ledblink::Mode)>
 800c206:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 800c20a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c20e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c212:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 800c216:	2301      	movs	r3, #1
 800c218:	f884 3a11 	strb.w	r3, [r4, #2577]	; 0xa11
 800c21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c220:	20030000 	andcs	r0, r3, r0
 800c224:	20010678 	andcs	r0, r1, r8, ror r6
 800c228:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800c22c <ArtNetNode::SetShortName(char const*)>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	f100 0558 	add.w	r5, r0, #88	; 0x58
 800c232:	4604      	mov	r4, r0
 800c234:	2211      	movs	r2, #17
 800c236:	4628      	mov	r0, r5
 800c238:	f7ff ff32 	bl	800c0a0 <strncpy.isra.0>
 800c23c:	2300      	movs	r3, #0
 800c23e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800c242:	2212      	movs	r2, #18
 800c244:	4629      	mov	r1, r5
 800c246:	f204 50a6 	addw	r0, r4, #1446	; 0x5a6
 800c24a:	f7ff ff38 	bl	800c0be <memcpy.isra.0>
 800c24e:	f894 3a11 	ldrb.w	r3, [r4, #2577]	; 0xa11
 800c252:	2b02      	cmp	r3, #2
 800c254:	d10a      	bne.n	800c26c <ArtNetNode::SetShortName(char const*)+0x40>
 800c256:	69e0      	ldr	r0, [r4, #28]
 800c258:	b118      	cbz	r0, 800c262 <ArtNetNode::SetShortName(char const*)+0x36>
 800c25a:	6803      	ldr	r3, [r0, #0]
 800c25c:	4629      	mov	r1, r5
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	4798      	blx	r3
 800c262:	4628      	mov	r0, r5
 800c264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c268:	f00a b8e0 	b.w	801642c <artnet::display_shortname(char const*)>
 800c26c:	bd38      	pop	{r3, r4, r5, pc}

0800c26e <ArtNetNode::SetLongName(char const*)>:
 800c26e:	b538      	push	{r3, r4, r5, lr}
 800c270:	f100 056a 	add.w	r5, r0, #106	; 0x6a
 800c274:	4604      	mov	r4, r0
 800c276:	223f      	movs	r2, #63	; 0x3f
 800c278:	4628      	mov	r0, r5
 800c27a:	f7ff ff11 	bl	800c0a0 <strncpy.isra.0>
 800c27e:	2300      	movs	r3, #0
 800c280:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800c284:	2240      	movs	r2, #64	; 0x40
 800c286:	4629      	mov	r1, r5
 800c288:	f504 60b7 	add.w	r0, r4, #1464	; 0x5b8
 800c28c:	f7ff ff17 	bl	800c0be <memcpy.isra.0>
 800c290:	f894 3a11 	ldrb.w	r3, [r4, #2577]	; 0xa11
 800c294:	2b02      	cmp	r3, #2
 800c296:	d10a      	bne.n	800c2ae <ArtNetNode::SetLongName(char const*)+0x40>
 800c298:	69e0      	ldr	r0, [r4, #28]
 800c29a:	b118      	cbz	r0, 800c2a4 <ArtNetNode::SetLongName(char const*)+0x36>
 800c29c:	6803      	ldr	r3, [r0, #0]
 800c29e:	4629      	mov	r1, r5
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	4798      	blx	r3
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2aa:	f00a b8c9 	b.w	8016440 <artnet::display_longname(char const*)>
 800c2ae:	bd38      	pop	{r3, r4, r5, pc}

0800c2b0 <ArtNetNode::ArtNetNode()>:
 800c2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2b8:	e9c0 2300 	strd	r2, r3, [r0]
 800c2bc:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800c2c0:	4a50      	ldr	r2, [pc, #320]	; (800c404 <ArtNetNode::ArtNetNode()+0x154>)
 800c2c2:	f8c0 39a4 	str.w	r3, [r0, #2468]	; 0x9a4
 800c2c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2ca:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800c2ce:	6010      	str	r0, [r2, #0]
 800c2d0:	b085      	sub	sp, #20
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	f8c0 39a8 	str.w	r3, [r0, #2472]	; 0x9a8
 800c2d8:	f880 39ac 	strb.w	r3, [r0, #2476]	; 0x9ac
 800c2dc:	f100 0220 	add.w	r2, r0, #32
 800c2e0:	f100 01b8 	add.w	r1, r0, #184	; 0xb8
 800c2e4:	428a      	cmp	r2, r1
 800c2e6:	d17e      	bne.n	800c3e6 <ArtNetNode::ArtNetNode()+0x136>
 800c2e8:	4b47      	ldr	r3, [pc, #284]	; (800c408 <ArtNetNode::ArtNetNode()+0x158>)
 800c2ea:	6818      	ldr	r0, [r3, #0]
 800c2ec:	6943      	ldr	r3, [r0, #20]
 800c2ee:	6223      	str	r3, [r4, #32]
 800c2f0:	69c2      	ldr	r2, [r0, #28]
 800c2f2:	ea63 0302 	orn	r3, r3, r2
 800c2f6:	6263      	str	r3, [r4, #36]	; 0x24
 800c2f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2fa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800c2fe:	f008 fca2 	bl	8014c46 <Network::MacAddressCopyTo(unsigned char*)>
 800c302:	23d0      	movs	r3, #208	; 0xd0
 800c304:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 800c308:	f642 0398 	movw	r3, #10392	; 0x2898
 800c30c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
 800c310:	f504 6222 	add.w	r2, r4, #2592	; 0xa20
 800c314:	f504 6320 	add.w	r3, r4, #2560	; 0xa00
 800c318:	2100      	movs	r1, #0
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d166      	bne.n	800c3ec <ArtNetNode::ArtNetNode()+0x13c>
 800c31e:	f240 1201 	movw	r2, #257	; 0x101
 800c322:	f8a4 2a10 	strh.w	r2, [r4, #2576]	; 0xa10
 800c326:	f504 50c4 	add.w	r0, r4, #6272	; 0x1880
 800c32a:	f504 52a3 	add.w	r2, r4, #5216	; 0x1460
 800c32e:	3210      	adds	r2, #16
 800c330:	3010      	adds	r0, #16
 800c332:	2600      	movs	r6, #0
 800c334:	2708      	movs	r7, #8
 800c336:	f103 0528 	add.w	r5, r3, #40	; 0x28
 800c33a:	42ab      	cmp	r3, r5
 800c33c:	d15c      	bne.n	800c3f8 <ArtNetNode::ArtNetNode()+0x148>
 800c33e:	4611      	mov	r1, r2
 800c340:	f102 0310 	add.w	r3, r2, #16
 800c344:	4299      	cmp	r1, r3
 800c346:	d15a      	bne.n	800c3fe <ArtNetNode::ArtNetNode()+0x14e>
 800c348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c34a:	6093      	str	r3, [r2, #8]
 800c34c:	4288      	cmp	r0, r1
 800c34e:	70d7      	strb	r7, [r2, #3]
 800c350:	d14f      	bne.n	800c3f2 <ArtNetNode::ArtNetNode()+0x142>
 800c352:	4620      	mov	r0, r4
 800c354:	492d      	ldr	r1, [pc, #180]	; (800c40c <ArtNetNode::ArtNetNode()+0x15c>)
 800c356:	4e2e      	ldr	r6, [pc, #184]	; (800c410 <ArtNetNode::ArtNetNode()+0x160>)
 800c358:	f7ff ff68 	bl	800c22c <ArtNetNode::SetShortName(char const*)>
 800c35c:	4b2d      	ldr	r3, [pc, #180]	; (800c414 <ArtNetNode::ArtNetNode()+0x164>)
 800c35e:	9302      	str	r3, [sp, #8]
 800c360:	f604 15bd 	addw	r5, r4, #2493	; 0x9bd
 800c364:	2304      	movs	r3, #4
 800c366:	4a2c      	ldr	r2, [pc, #176]	; (800c418 <ArtNetNode::ArtNetNode()+0x168>)
 800c368:	9301      	str	r3, [sp, #4]
 800c36a:	9600      	str	r6, [sp, #0]
 800c36c:	4b2b      	ldr	r3, [pc, #172]	; (800c41c <ArtNetNode::ArtNetNode()+0x16c>)
 800c36e:	2140      	movs	r1, #64	; 0x40
 800c370:	4628      	mov	r0, r5
 800c372:	f7fe f8b9 	bl	800a4e8 <snprintf>
 800c376:	4629      	mov	r1, r5
 800c378:	4620      	mov	r0, r4
 800c37a:	2500      	movs	r5, #0
 800c37c:	f7ff ff77 	bl	800c26e <ArtNetNode::SetLongName(char const*)>
 800c380:	f604 10ad 	addw	r0, r4, #2477	; 0x9ad
 800c384:	4926      	ldr	r1, [pc, #152]	; (800c420 <ArtNetNode::ArtNetNode()+0x170>)
 800c386:	220f      	movs	r2, #15
 800c388:	f7ff fe8a 	bl	800c0a0 <strncpy.isra.0>
 800c38c:	4631      	mov	r1, r6
 800c38e:	f204 607b 	addw	r0, r4, #1659	; 0x67b
 800c392:	f884 59bc 	strb.w	r5, [r4, #2492]	; 0x9bc
 800c396:	2208      	movs	r2, #8
 800c398:	f7ff fe91 	bl	800c0be <memcpy.isra.0>
 800c39c:	2350      	movs	r3, #80	; 0x50
 800c39e:	f884 3684 	strb.w	r3, [r4, #1668]	; 0x684
 800c3a2:	230e      	movs	r3, #14
 800c3a4:	f884 3686 	strb.w	r3, [r4, #1670]	; 0x686
 800c3a8:	f604 008d 	addw	r0, r4, #2189	; 0x88d
 800c3ac:	f884 5683 	strb.w	r5, [r4, #1667]	; 0x683
 800c3b0:	f884 5685 	strb.w	r5, [r4, #1669]	; 0x685
 800c3b4:	2208      	movs	r2, #8
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	f7ff fe81 	bl	800c0be <memcpy.isra.0>
 800c3bc:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800c3c0:	f884 3896 	strb.w	r3, [r4, #2198]	; 0x896
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800c3ca:	f884 5895 	strb.w	r5, [r4, #2197]	; 0x895
 800c3ce:	f884 5897 	strb.w	r5, [r4, #2199]	; 0x897
 800c3d2:	f8a4 3898 	strh.w	r3, [r4, #2200]	; 0x898
 800c3d6:	f884 589b 	strb.w	r5, [r4, #2203]	; 0x89b
 800c3da:	f8c4 589c 	str.w	r5, [r4, #2204]	; 0x89c
 800c3de:	f8a4 58a0 	strh.w	r5, [r4, #2208]	; 0x8a0
 800c3e2:	b005      	add	sp, #20
 800c3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3e6:	f802 3b01 	strb.w	r3, [r2], #1
 800c3ea:	e77b      	b.n	800c2e4 <ArtNetNode::ArtNetNode()+0x34>
 800c3ec:	f803 1b01 	strb.w	r1, [r3], #1
 800c3f0:	e793      	b.n	800c31a <ArtNetNode::ArtNetNode()+0x6a>
 800c3f2:	462b      	mov	r3, r5
 800c3f4:	460a      	mov	r2, r1
 800c3f6:	e79e      	b.n	800c336 <ArtNetNode::ArtNetNode()+0x86>
 800c3f8:	f803 6b01 	strb.w	r6, [r3], #1
 800c3fc:	e79d      	b.n	800c33a <ArtNetNode::ArtNetNode()+0x8a>
 800c3fe:	f801 6b01 	strb.w	r6, [r1], #1
 800c402:	e79f      	b.n	800c344 <ArtNetNode::ArtNetNode()+0x94>
 800c404:	200006d4 	ldrdcs	r0, [r0], -r4
 800c408:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 800c40c:	0801bff7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 800c410:	0801bfef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 800c414:	0801bfd1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 800c418:	0801bfc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 800c41c:	0801b506 	stmdaeq	r1, {r1, r2, r8, sl, ip, sp, pc}
 800c420:	0801bfe6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}

0800c424 <ArtNetNode::SetNetworkDataLossCondition()>:
 800c424:	2300      	movs	r3, #0
 800c426:	b570      	push	{r4, r5, r6, lr}
 800c428:	f880 3a16 	strb.w	r3, [r0, #2582]	; 0xa16
 800c42c:	f880 3a15 	strb.w	r3, [r0, #2581]	; 0xa15
 800c430:	4604      	mov	r4, r0
 800c432:	f500 6525 	add.w	r5, r0, #2640	; 0xa50
 800c436:	4603      	mov	r3, r0
 800c438:	f8d3 2a2c 	ldr.w	r2, [r3, #2604]	; 0xa2c
 800c43c:	f8d3 1a34 	ldr.w	r1, [r3, #2612]	; 0xa34
 800c440:	42ca      	cmn	r2, r1
 800c442:	d11d      	bne.n	800c480 <ArtNetNode::SetNetworkDataLossCondition()+0x5c>
 800c444:	3328      	adds	r3, #40	; 0x28
 800c446:	42ab      	cmp	r3, r5
 800c448:	d1f6      	bne.n	800c438 <ArtNetNode::SetNetworkDataLossCondition()+0x14>
 800c44a:	bd70      	pop	{r4, r5, r6, pc}
 800c44c:	6840      	ldr	r0, [r0, #4]
 800c44e:	6803      	ldr	r3, [r0, #0]
 800c450:	2101      	movs	r1, #1
 800c452:	695b      	ldr	r3, [r3, #20]
 800c454:	4798      	blx	r3
 800c456:	4b11      	ldr	r3, [pc, #68]	; (800c49c <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 800c458:	4911      	ldr	r1, [pc, #68]	; (800c4a0 <ArtNetNode::SetNetworkDataLossCondition()+0x7c>)
 800c45a:	2200      	movs	r2, #0
 800c45c:	2001      	movs	r0, #1
 800c45e:	f8c4 2a2c 	str.w	r2, [r4, #2604]	; 0xa2c
 800c462:	f8c4 2a34 	str.w	r2, [r4, #2612]	; 0xa34
 800c466:	680e      	ldr	r6, [r1, #0]
 800c468:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
 800c46c:	07f6      	lsls	r6, r6, #31
 800c46e:	f104 0428 	add.w	r4, r4, #40	; 0x28
 800c472:	bf58      	it	pl
 800c474:	6008      	strpl	r0, [r1, #0]
 800c476:	42ac      	cmp	r4, r5
 800c478:	f203 6304 	addw	r3, r3, #1540	; 0x604
 800c47c:	d1ef      	bne.n	800c45e <ArtNetNode::SetNetworkDataLossCondition()+0x3a>
 800c47e:	e7e4      	b.n	800c44a <ArtNetNode::SetNetworkDataLossCondition()+0x26>
 800c480:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800c484:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c488:	2b40      	cmp	r3, #64	; 0x40
 800c48a:	d0df      	beq.n	800c44c <ArtNetNode::SetNetworkDataLossCondition()+0x28>
 800c48c:	d9e3      	bls.n	800c456 <ArtNetNode::SetNetworkDataLossCondition()+0x32>
 800c48e:	2b80      	cmp	r3, #128	; 0x80
 800c490:	d1e1      	bne.n	800c456 <ArtNetNode::SetNetworkDataLossCondition()+0x32>
 800c492:	6840      	ldr	r0, [r0, #4]
 800c494:	6803      	ldr	r3, [r0, #0]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	4798      	blx	r3
 800c49a:	e7dc      	b.n	800c456 <ArtNetNode::SetNetworkDataLossCondition()+0x32>
 800c49c:	20030000 	andcs	r0, r3, r0
 800c4a0:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800c4a4 <ArtNetNode::GetType()>:
 800c4a4:	f8b0 3588 	ldrh.w	r3, [r0, #1416]	; 0x588
 800c4a8:	2b0b      	cmp	r3, #11
 800c4aa:	b530      	push	{r4, r5, lr}
 800c4ac:	d91d      	bls.n	800c4ea <ArtNetNode::GetType()+0x46>
 800c4ae:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
 800c4b2:	b9d3      	cbnz	r3, 800c4ea <ArtNetNode::GetType()+0x46>
 800c4b4:	f890 20c3 	ldrb.w	r2, [r0, #195]	; 0xc3
 800c4b8:	2a0e      	cmp	r2, #14
 800c4ba:	d10d      	bne.n	800c4d8 <ArtNetNode::GetType()+0x34>
 800c4bc:	4a0c      	ldr	r2, [pc, #48]	; (800c4f0 <ArtNetNode::GetType()+0x4c>)
 800c4be:	f100 03b7 	add.w	r3, r0, #183	; 0xb7
 800c4c2:	f100 01bf 	add.w	r1, r0, #191	; 0xbf
 800c4c6:	428b      	cmp	r3, r1
 800c4c8:	d109      	bne.n	800c4de <ArtNetNode::GetType()+0x3a>
 800c4ca:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
 800c4ce:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
 800c4d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	f8a0 358a 	strh.w	r3, [r0, #1418]	; 0x58a
 800c4dc:	bd30      	pop	{r4, r5, pc}
 800c4de:	f812 4b01 	ldrb.w	r4, [r2], #1
 800c4e2:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800c4e6:	42a5      	cmp	r5, r4
 800c4e8:	d0ed      	beq.n	800c4c6 <ArtNetNode::GetType()+0x22>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	e7f4      	b.n	800c4d8 <ArtNetNode::GetType()+0x34>
 800c4ee:	bf00      	nop
 800c4f0:	0801ab78 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, fp, sp, pc}

0800c4f4 <ArtNetNode::Run()>:
 800c4f4:	b530      	push	{r4, r5, lr}
 800c4f6:	4601      	mov	r1, r0
 800c4f8:	b085      	sub	sp, #20
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	f10d 030e 	add.w	r3, sp, #14
 800c500:	f811 0bb8 	ldrb.w	r0, [r1], #184
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800c50a:	f204 5384 	addw	r3, r4, #1412	; 0x584
 800c50e:	f007 fe6b 	bl	80141e8 <udp_recv>
 800c512:	4b65      	ldr	r3, [pc, #404]	; (800c6a8 <ArtNetNode::Run()+0x1b4>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f8c4 39a4 	str.w	r3, [r4, #2468]	; 0x9a4
 800c51a:	2800      	cmp	r0, #0
 800c51c:	d146      	bne.n	800c5ac <ArtNetNode::Run()+0xb8>
 800c51e:	f8d4 29a8 	ldr.w	r2, [r4, #2472]	; 0x9a8
 800c522:	1a9b      	subs	r3, r3, r2
 800c524:	f242 720f 	movw	r2, #9999	; 0x270f
 800c528:	4293      	cmp	r3, r2
 800c52a:	d902      	bls.n	800c532 <ArtNetNode::Run()+0x3e>
 800c52c:	4620      	mov	r0, r4
 800c52e:	f7ff ff79 	bl	800c424 <ArtNetNode::SetNetworkDataLossCondition()>
 800c532:	f894 3a12 	ldrb.w	r3, [r4, #2578]	; 0xa12
 800c536:	b15b      	cbz	r3, 800c550 <ArtNetNode::Run()+0x5c>
 800c538:	69a0      	ldr	r0, [r4, #24]
 800c53a:	f894 5a17 	ldrb.w	r5, [r4, #2583]	; 0xa17
 800c53e:	6803      	ldr	r3, [r0, #0]
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	4798      	blx	r3
 800c544:	b905      	cbnz	r5, 800c548 <ArtNetNode::Run()+0x54>
 800c546:	b118      	cbz	r0, 800c550 <ArtNetNode::Run()+0x5c>
 800c548:	2100      	movs	r1, #0
 800c54a:	4620      	mov	r0, r4
 800c54c:	f000 ffd6 	bl	800d4fc <ArtNetNode::SendPollRelply(bool)>
 800c550:	f8d4 39a4 	ldr.w	r3, [r4, #2468]	; 0x9a4
 800c554:	f8d4 29a8 	ldr.w	r2, [r4, #2472]	; 0x9a8
 800c558:	1a9b      	subs	r3, r3, r2
 800c55a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c55e:	d305      	bcc.n	800c56c <ArtNetNode::Run()+0x78>
 800c560:	f894 3a19 	ldrb.w	r3, [r4, #2585]	; 0xa19
 800c564:	f023 0302 	bic.w	r3, r3, #2
 800c568:	f884 3a19 	strb.w	r3, [r4, #2585]	; 0xa19
 800c56c:	6923      	ldr	r3, [r4, #16]
 800c56e:	b113      	cbz	r3, 800c576 <ArtNetNode::Run()+0x82>
 800c570:	4620      	mov	r0, r4
 800c572:	f000 fd8b 	bl	800d08c <ArtNetNode::HandleDmxIn()>
 800c576:	68e3      	ldr	r3, [r4, #12]
 800c578:	b113      	cbz	r3, 800c580 <ArtNetNode::Run()+0x8c>
 800c57a:	4620      	mov	r0, r4
 800c57c:	f001 fa2c 	bl	800d9d8 <ArtNetNode::HandleRdmIn()>
 800c580:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 800c584:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c588:	2bc0      	cmp	r3, #192	; 0xc0
 800c58a:	d10d      	bne.n	800c5a8 <ArtNetNode::Run()+0xb4>
 800c58c:	4b47      	ldr	r3, [pc, #284]	; (800c6ac <ArtNetNode::Run()+0x1b8>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	2b04      	cmp	r3, #4
 800c594:	d008      	beq.n	800c5a8 <ArtNetNode::Run()+0xb4>
 800c596:	69a0      	ldr	r0, [r4, #24]
 800c598:	f894 2a19 	ldrb.w	r2, [r4, #2585]	; 0xa19
 800c59c:	6803      	ldr	r3, [r0, #0]
 800c59e:	699b      	ldr	r3, [r3, #24]
 800c5a0:	2a00      	cmp	r2, #0
 800c5a2:	d07f      	beq.n	800c6a4 <ArtNetNode::Run()+0x1b0>
 800c5a4:	2103      	movs	r1, #3
 800c5a6:	4798      	blx	r3
 800c5a8:	b005      	add	sp, #20
 800c5aa:	bd30      	pop	{r4, r5, pc}
 800c5ac:	f894 2a15 	ldrb.w	r2, [r4, #2581]	; 0xa15
 800c5b0:	f8a4 0588 	strh.w	r0, [r4, #1416]	; 0x588
 800c5b4:	f8c4 39a8 	str.w	r3, [r4, #2472]	; 0x9a8
 800c5b8:	b142      	cbz	r2, 800c5cc <ArtNetNode::Run()+0xd8>
 800c5ba:	f8d4 2a0c 	ldr.w	r2, [r4, #2572]	; 0xa0c
 800c5be:	1a9b      	subs	r3, r3, r2
 800c5c0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800c5c4:	bf24      	itt	cs
 800c5c6:	2300      	movcs	r3, #0
 800c5c8:	f884 3a15 	strbcs.w	r3, [r4, #2581]	; 0xa15
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f7ff ff69 	bl	800c4a4 <ArtNetNode::GetType()>
 800c5d2:	f8b4 358a 	ldrh.w	r3, [r4, #1418]	; 0x58a
 800c5d6:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 800c5da:	d04e      	beq.n	800c67a <ArtNetNode::Run()+0x186>
 800c5dc:	d81b      	bhi.n	800c616 <ArtNetNode::Run()+0x122>
 800c5de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c5e2:	d03d      	beq.n	800c660 <ArtNetNode::Run()+0x16c>
 800c5e4:	d80b      	bhi.n	800c5fe <ArtNetNode::Run()+0x10a>
 800c5e6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c5ea:	d02d      	beq.n	800c648 <ArtNetNode::Run()+0x154>
 800c5ec:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 800c5f0:	d030      	beq.n	800c654 <ArtNetNode::Run()+0x160>
 800c5f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5f6:	d1b9      	bne.n	800c56c <ArtNetNode::Run()+0x78>
 800c5f8:	f000 ffec 	bl	800d5d4 <ArtNetNode::HandlePoll()>
 800c5fc:	e7b6      	b.n	800c56c <ArtNetNode::Run()+0x78>
 800c5fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c602:	d033      	beq.n	800c66c <ArtNetNode::Run()+0x178>
 800c604:	f5b3 4f01 	cmp.w	r3, #33024	; 0x8100
 800c608:	d1b0      	bne.n	800c56c <ArtNetNode::Run()+0x78>
 800c60a:	68e3      	ldr	r3, [r4, #12]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0ad      	beq.n	800c56c <ArtNetNode::Run()+0x78>
 800c610:	f001 f843 	bl	800d69a <ArtNetNode::HandleTodData()>
 800c614:	e7aa      	b.n	800c56c <ArtNetNode::Run()+0x78>
 800c616:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800c61a:	d024      	beq.n	800c666 <ArtNetNode::Run()+0x172>
 800c61c:	d80b      	bhi.n	800c636 <ArtNetNode::Run()+0x142>
 800c61e:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 800c622:	d031      	beq.n	800c688 <ArtNetNode::Run()+0x194>
 800c624:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 800c628:	d1a0      	bne.n	800c56c <ArtNetNode::Run()+0x78>
 800c62a:	68a3      	ldr	r3, [r4, #8]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d09d      	beq.n	800c56c <ArtNetNode::Run()+0x78>
 800c630:	f001 fa6c 	bl	800db0c <ArtNetNode::HandleTimeCode()>
 800c634:	e79a      	b.n	800c56c <ArtNetNode::Run()+0x78>
 800c636:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 800c63a:	d02c      	beq.n	800c696 <ArtNetNode::Run()+0x1a2>
 800c63c:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800c640:	d194      	bne.n	800c56c <ArtNetNode::Run()+0x78>
 800c642:	f000 fdb5 	bl	800d1b0 <ArtNetNode::HandleIpProg()>
 800c646:	e791      	b.n	800c56c <ArtNetNode::Run()+0x78>
 800c648:	6863      	ldr	r3, [r4, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d08e      	beq.n	800c56c <ArtNetNode::Run()+0x78>
 800c64e:	f000 fc33 	bl	800ceb8 <ArtNetNode::HandleDmx()>
 800c652:	e78b      	b.n	800c56c <ArtNetNode::Run()+0x78>
 800c654:	6863      	ldr	r3, [r4, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d088      	beq.n	800c56c <ArtNetNode::Run()+0x78>
 800c65a:	f001 fa0d 	bl	800da78 <ArtNetNode::HandleSync()>
 800c65e:	e785      	b.n	800c56c <ArtNetNode::Run()+0x78>
 800c660:	f000 fa08 	bl	800ca74 <ArtNetNode::HandleAddress()>
 800c664:	e782      	b.n	800c56c <ArtNetNode::Run()+0x78>
 800c666:	f001 fa57 	bl	800db18 <ArtNetNode::HandleTimeSync()>
 800c66a:	e77f      	b.n	800c56c <ArtNetNode::Run()+0x78>
 800c66c:	68e3      	ldr	r3, [r4, #12]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f43f af7c 	beq.w	800c56c <ArtNetNode::Run()+0x78>
 800c674:	f001 f8e5 	bl	800d842 <ArtNetNode::HandleTodRequest()>
 800c678:	e778      	b.n	800c56c <ArtNetNode::Run()+0x78>
 800c67a:	68e3      	ldr	r3, [r4, #12]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f43f af75 	beq.w	800c56c <ArtNetNode::Run()+0x78>
 800c682:	f001 f8a1 	bl	800d7c8 <ArtNetNode::HandleTodControl()>
 800c686:	e771      	b.n	800c56c <ArtNetNode::Run()+0x78>
 800c688:	68e3      	ldr	r3, [r4, #12]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f43f af6e 	beq.w	800c56c <ArtNetNode::Run()+0x78>
 800c690:	f001 f94e 	bl	800d930 <ArtNetNode::HandleRdm()>
 800c694:	e76a      	b.n	800c56c <ArtNetNode::Run()+0x78>
 800c696:	6963      	ldr	r3, [r4, #20]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f43f af67 	beq.w	800c56c <ArtNetNode::Run()+0x78>
 800c69e:	f001 ffe7 	bl	800e670 <ArtNetNode::HandleTrigger()>
 800c6a2:	e763      	b.n	800c56c <ArtNetNode::Run()+0x78>
 800c6a4:	2102      	movs	r1, #2
 800c6a6:	e77e      	b.n	800c5a6 <ArtNetNode::Run()+0xb2>
 800c6a8:	20010694 	mulcs	r1, r4, r6
 800c6ac:	20010678 	andcs	r0, r1, r8, ror r6

0800c6b0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 800c6b0:	b94b      	cbnz	r3, 800c6c6 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x16>
 800c6b2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c6b6:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800c6ba:	f8b1 3470 	ldrh.w	r3, [r1, #1136]	; 0x470
 800c6be:	8013      	strh	r3, [r2, #0]
 800c6c0:	f891 0474 	ldrb.w	r0, [r1, #1140]	; 0x474
 800c6c4:	4770      	bx	lr
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	bf01      	itttt	eq
 800c6ca:	2328      	moveq	r3, #40	; 0x28
 800c6cc:	fb03 0101 	mlaeq	r1, r3, r1, r0
 800c6d0:	f8b1 3a20 	ldrheq.w	r3, [r1, #2592]	; 0xa20
 800c6d4:	f891 0a24 	ldrbeq.w	r0, [r1, #2596]	; 0xa24
 800c6d8:	bf0c      	ite	eq
 800c6da:	8013      	strheq	r3, [r2, #0]
 800c6dc:	2000      	movne	r0, #0
 800c6de:	4770      	bx	lr

0800c6e0 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 800c6e0:	4402      	add	r2, r0
 800c6e2:	f001 010f 	and.w	r1, r1, #15
 800c6e6:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 800c6ea:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 800c6ee:	021b      	lsls	r3, r3, #8
 800c6f0:	0112      	lsls	r2, r2, #4
 800c6f2:	b2d2      	uxtb	r2, r2
 800c6f4:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	ea43 0001 	orr.w	r0, r3, r1
 800c6fe:	4770      	bx	lr

0800c700 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 800c700:	2941      	cmp	r1, #65	; 0x41
 800c702:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c706:	4604      	mov	r4, r0
 800c708:	460d      	mov	r5, r1
 800c70a:	4690      	mov	r8, r2
 800c70c:	461e      	mov	r6, r3
 800c70e:	f200 80a7 	bhi.w	800c860 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x160>
 800c712:	f1b8 0f02 	cmp.w	r8, #2
 800c716:	ea4f 0291 	mov.w	r2, r1, lsr #2
 800c71a:	d123      	bne.n	800c764 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x64>
 800c71c:	2328      	movs	r3, #40	; 0x28
 800c71e:	fb03 0301 	mla	r3, r3, r1, r0
 800c722:	f893 2a24 	ldrb.w	r2, [r3, #2596]	; 0xa24
 800c726:	b13a      	cbz	r2, 800c738 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x38>
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2a24 	strb.w	r2, [r3, #2596]	; 0xa24
 800c72e:	f890 3a1a 	ldrb.w	r3, [r0, #2586]	; 0xa1a
 800c732:	3b01      	subs	r3, #1
 800c734:	f880 3a1a 	strb.w	r3, [r0, #2586]	; 0xa1a
 800c738:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800c73c:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 800c740:	f895 3474 	ldrb.w	r3, [r5, #1140]	; 0x474
 800c744:	b90b      	cbnz	r3, 800c74a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x4a>
 800c746:	2000      	movs	r0, #0
 800c748:	e00a      	b.n	800c760 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x60>
 800c74a:	2308      	movs	r3, #8
 800c74c:	2000      	movs	r0, #0
 800c74e:	f885 0474 	strb.w	r0, [r5, #1140]	; 0x474
 800c752:	f885 3473 	strb.w	r3, [r5, #1139]	; 0x473
 800c756:	f894 3a1b 	ldrb.w	r3, [r4, #2587]	; 0xa1b
 800c75a:	3b01      	subs	r3, #1
 800c75c:	f884 3a1b 	strb.w	r3, [r4, #2587]	; 0xa1b
 800c760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c764:	f1b8 0f00 	cmp.w	r8, #0
 800c768:	d138      	bne.n	800c7dc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xdc>
 800c76a:	eb00 1701 	add.w	r7, r0, r1, lsl #4
 800c76e:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800c772:	f897 3474 	ldrb.w	r3, [r7, #1140]	; 0x474
 800c776:	b923      	cbnz	r3, 800c782 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x82>
 800c778:	f890 3a1b 	ldrb.w	r3, [r0, #2587]	; 0xa1b
 800c77c:	3301      	adds	r3, #1
 800c77e:	f880 3a1b 	strb.w	r3, [r0, #2587]	; 0xa1b
 800c782:	2301      	movs	r3, #1
 800c784:	f887 3474 	strb.w	r3, [r7, #1140]	; 0x474
 800c788:	f04f 0900 	mov.w	r9, #0
 800c78c:	f006 030f 	and.w	r3, r6, #15
 800c790:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
 800c794:	f887 9473 	strb.w	r9, [r7, #1139]	; 0x473
 800c798:	4631      	mov	r1, r6
 800c79a:	4620      	mov	r0, r4
 800c79c:	f7ff ffa0 	bl	800c6e0 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800c7a0:	2328      	movs	r3, #40	; 0x28
 800c7a2:	fb03 4305 	mla	r3, r3, r5, r4
 800c7a6:	f8a7 0470 	strh.w	r0, [r7, #1136]	; 0x470
 800c7aa:	f893 2a24 	ldrb.w	r2, [r3, #2596]	; 0xa24
 800c7ae:	b132      	cbz	r2, 800c7be <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800c7b0:	f883 9a24 	strb.w	r9, [r3, #2596]	; 0xa24
 800c7b4:	f894 3a1a 	ldrb.w	r3, [r4, #2586]	; 0xa1a
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	f884 3a1a 	strb.w	r3, [r4, #2586]	; 0xa1a
 800c7be:	69a0      	ldr	r0, [r4, #24]
 800c7c0:	f894 3a11 	ldrb.w	r3, [r4, #2577]	; 0xa11
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	d03f      	beq.n	800c848 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x148>
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d138      	bne.n	800c83e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x13e>
 800c7cc:	69e0      	ldr	r0, [r4, #28]
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d140      	bne.n	800c854 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x154>
 800c7d2:	4631      	mov	r1, r6
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	f009 fe35 	bl	8016444 <artnet::display_universe_switch(unsigned int, unsigned char)>
 800c7da:	e7b4      	b.n	800c746 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x46>
 800c7dc:	f1b8 0f01 	cmp.w	r8, #1
 800c7e0:	d1ed      	bne.n	800c7be <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800c7e2:	2728      	movs	r7, #40	; 0x28
 800c7e4:	fb07 0301 	mla	r3, r7, r1, r0
 800c7e8:	f893 3a24 	ldrb.w	r3, [r3, #2596]	; 0xa24
 800c7ec:	b923      	cbnz	r3, 800c7f8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf8>
 800c7ee:	f890 3a1a 	ldrb.w	r3, [r0, #2586]	; 0xa1a
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	f880 3a1a 	strb.w	r3, [r0, #2586]	; 0xa1a
 800c7f8:	fb07 4705 	mla	r7, r7, r5, r4
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	f887 3a24 	strb.w	r3, [r7, #2596]	; 0xa24
 800c802:	f006 030f 	and.w	r3, r6, #15
 800c806:	f887 3a22 	strb.w	r3, [r7, #2594]	; 0xa22
 800c80a:	4631      	mov	r1, r6
 800c80c:	4620      	mov	r0, r4
 800c80e:	f7ff ff67 	bl	800c6e0 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800c812:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800c816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c81a:	f8a7 0a20 	strh.w	r0, [r7, #2592]	; 0xa20
 800c81e:	f893 2474 	ldrb.w	r2, [r3, #1140]	; 0x474
 800c822:	2a00      	cmp	r2, #0
 800c824:	d0cb      	beq.n	800c7be <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800c826:	2200      	movs	r2, #0
 800c828:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
 800c82c:	2208      	movs	r2, #8
 800c82e:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
 800c832:	f894 3a1b 	ldrb.w	r3, [r4, #2587]	; 0xa1b
 800c836:	3b01      	subs	r3, #1
 800c838:	f884 3a1b 	strb.w	r3, [r4, #2587]	; 0xa1b
 800c83c:	e7bf      	b.n	800c7be <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800c83e:	6803      	ldr	r3, [r0, #0]
 800c840:	4642      	mov	r2, r8
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	4629      	mov	r1, r5
 800c846:	4798      	blx	r3
 800c848:	f894 3a11 	ldrb.w	r3, [r4, #2577]	; 0xa11
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	f47f af7a 	bne.w	800c746 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x46>
 800c852:	e7bb      	b.n	800c7cc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xcc>
 800c854:	6803      	ldr	r3, [r0, #0]
 800c856:	4632      	mov	r2, r6
 800c858:	695b      	ldr	r3, [r3, #20]
 800c85a:	4629      	mov	r1, r5
 800c85c:	4798      	blx	r3
 800c85e:	e7b8      	b.n	800c7d2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd2>
 800c860:	f06f 0004 	mvn.w	r0, #4
 800c864:	e77c      	b.n	800c760 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x60>

0800c866 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800c866:	b430      	push	{r4, r5}
 800c868:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 800c86c:	f3c3 2506 	ubfx	r5, r3, #8, #7
 800c870:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
 800c874:	f3c3 1503 	ubfx	r5, r3, #4, #4
 800c878:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 800c87c:	bc30      	pop	{r4, r5}
 800c87e:	f003 030f 	and.w	r3, r3, #15
 800c882:	f7ff bf3d 	b.w	800c700 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>

0800c886 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 800c886:	2941      	cmp	r1, #65	; 0x41
 800c888:	d815      	bhi.n	800c8b6 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x30>
 800c88a:	b94b      	cbnz	r3, 800c8a0 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x1a>
 800c88c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c890:	f501 5080 	add.w	r0, r1, #4096	; 0x1000
 800c894:	f890 3472 	ldrb.w	r3, [r0, #1138]	; 0x472
 800c898:	7013      	strb	r3, [r2, #0]
 800c89a:	f890 0474 	ldrb.w	r0, [r0, #1140]	; 0x474
 800c89e:	4770      	bx	lr
 800c8a0:	2b02      	cmp	r3, #2
 800c8a2:	d008      	beq.n	800c8b6 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x30>
 800c8a4:	2328      	movs	r3, #40	; 0x28
 800c8a6:	fb03 0101 	mla	r1, r3, r1, r0
 800c8aa:	f891 3a22 	ldrb.w	r3, [r1, #2594]	; 0xa22
 800c8ae:	7013      	strb	r3, [r2, #0]
 800c8b0:	f891 0a24 	ldrb.w	r0, [r1, #2596]	; 0xa24
 800c8b4:	4770      	bx	lr
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	4770      	bx	lr

0800c8ba <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 800c8ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8be:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800c8c2:	f108 0904 	add.w	r9, r8, #4
 800c8c6:	1883      	adds	r3, r0, r2
 800c8c8:	f1b9 0f42 	cmp.w	r9, #66	; 0x42
 800c8cc:	f04f 06a0 	mov.w	r6, #160	; 0xa0
 800c8d0:	4605      	mov	r5, r0
 800c8d2:	460f      	mov	r7, r1
 800c8d4:	4614      	mov	r4, r2
 800c8d6:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
 800c8da:	bf28      	it	cs
 800c8dc:	f04f 0942 	movcs.w	r9, #66	; 0x42
 800c8e0:	fb06 0602 	mla	r6, r6, r2, r0
 800c8e4:	45c8      	cmp	r8, r9
 800c8e6:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c8ea:	d30c      	bcc.n	800c906 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x4c>
 800c8ec:	69e8      	ldr	r0, [r5, #28]
 800c8ee:	b1a8      	cbz	r0, 800c91c <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x62>
 800c8f0:	f895 3a11 	ldrb.w	r3, [r5, #2577]	; 0xa11
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d111      	bne.n	800c91c <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x62>
 800c8f8:	6803      	ldr	r3, [r0, #0]
 800c8fa:	463a      	mov	r2, r7
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	69db      	ldr	r3, [r3, #28]
 800c900:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c904:	4718      	bx	r3
 800c906:	f8b6 19f8 	ldrh.w	r1, [r6, #2552]	; 0x9f8
 800c90a:	4622      	mov	r2, r4
 800c90c:	4628      	mov	r0, r5
 800c90e:	f7ff fee7 	bl	800c6e0 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800c912:	f108 0801 	add.w	r8, r8, #1
 800c916:	f8a6 09f8 	strh.w	r0, [r6, #2552]	; 0x9f8
 800c91a:	e7e3      	b.n	800c8e4 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x2a>
 800c91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c920 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 800c920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c924:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800c928:	f108 0904 	add.w	r9, r8, #4
 800c92c:	1883      	adds	r3, r0, r2
 800c92e:	f1b9 0f42 	cmp.w	r9, #66	; 0x42
 800c932:	f04f 06a0 	mov.w	r6, #160	; 0xa0
 800c936:	4605      	mov	r5, r0
 800c938:	460f      	mov	r7, r1
 800c93a:	4614      	mov	r4, r2
 800c93c:	f883 1036 	strb.w	r1, [r3, #54]	; 0x36
 800c940:	bf28      	it	cs
 800c942:	f04f 0942 	movcs.w	r9, #66	; 0x42
 800c946:	fb06 0602 	mla	r6, r6, r2, r0
 800c94a:	45c8      	cmp	r8, r9
 800c94c:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c950:	d30c      	bcc.n	800c96c <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x4c>
 800c952:	69e8      	ldr	r0, [r5, #28]
 800c954:	b1a8      	cbz	r0, 800c982 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x62>
 800c956:	f895 3a11 	ldrb.w	r3, [r5, #2577]	; 0xa11
 800c95a:	2b02      	cmp	r3, #2
 800c95c:	d111      	bne.n	800c982 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x62>
 800c95e:	6803      	ldr	r3, [r0, #0]
 800c960:	463a      	mov	r2, r7
 800c962:	4621      	mov	r1, r4
 800c964:	699b      	ldr	r3, [r3, #24]
 800c966:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c96a:	4718      	bx	r3
 800c96c:	f8b6 19f8 	ldrh.w	r1, [r6, #2552]	; 0x9f8
 800c970:	4622      	mov	r2, r4
 800c972:	4628      	mov	r0, r5
 800c974:	f7ff feb4 	bl	800c6e0 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800c978:	f108 0801 	add.w	r8, r8, #1
 800c97c:	f8a6 09f8 	strh.w	r0, [r6, #2552]	; 0x9f8
 800c980:	e7e3      	b.n	800c94a <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x2a>
 800c982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c986 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800c986:	2941      	cmp	r1, #65	; 0x41
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	460c      	mov	r4, r1
 800c98c:	4615      	mov	r5, r2
 800c98e:	d820      	bhi.n	800c9d2 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x4c>
 800c990:	2228      	movs	r2, #40	; 0x28
 800c992:	fb02 0301 	mla	r3, r2, r1, r0
 800c996:	2d01      	cmp	r5, #1
 800c998:	f8c3 5a40 	str.w	r5, [r3, #2624]	; 0xa40
 800c99c:	f893 3a23 	ldrb.w	r3, [r3, #2595]	; 0xa23
 800c9a0:	fb02 0201 	mla	r2, r2, r1, r0
 800c9a4:	bf0c      	ite	eq
 800c9a6:	f043 0301 	orreq.w	r3, r3, #1
 800c9aa:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800c9ae:	f882 3a23 	strb.w	r3, [r2, #2595]	; 0xa23
 800c9b2:	f890 3a11 	ldrb.w	r3, [r0, #2577]	; 0xa11
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d10b      	bne.n	800c9d2 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x4c>
 800c9ba:	69c0      	ldr	r0, [r0, #28]
 800c9bc:	b118      	cbz	r0, 800c9c6 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x40>
 800c9be:	6803      	ldr	r3, [r0, #0]
 800c9c0:	462a      	mov	r2, r5
 800c9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c4:	4798      	blx	r3
 800c9c6:	4629      	mov	r1, r5
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9ce:	f009 bd4d 	b.w	801646c <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)>
 800c9d2:	bd38      	pop	{r3, r4, r5, pc}

0800c9d4 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 800c9d4:	2941      	cmp	r1, #65	; 0x41
 800c9d6:	b538      	push	{r3, r4, r5, lr}
 800c9d8:	460c      	mov	r4, r1
 800c9da:	4615      	mov	r5, r2
 800c9dc:	d820      	bhi.n	800ca20 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x4c>
 800c9de:	2228      	movs	r2, #40	; 0x28
 800c9e0:	fb02 0301 	mla	r3, r2, r1, r0
 800c9e4:	2d01      	cmp	r5, #1
 800c9e6:	f8c3 5a38 	str.w	r5, [r3, #2616]	; 0xa38
 800c9ea:	f893 3a23 	ldrb.w	r3, [r3, #2595]	; 0xa23
 800c9ee:	fb02 0201 	mla	r2, r2, r1, r0
 800c9f2:	bf0c      	ite	eq
 800c9f4:	f043 0302 	orreq.w	r3, r3, #2
 800c9f8:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 800c9fc:	f882 3a23 	strb.w	r3, [r2, #2595]	; 0xa23
 800ca00:	f890 3a11 	ldrb.w	r3, [r0, #2577]	; 0xa11
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d10b      	bne.n	800ca20 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x4c>
 800ca08:	69c0      	ldr	r0, [r0, #28]
 800ca0a:	b118      	cbz	r0, 800ca14 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x40>
 800ca0c:	6803      	ldr	r3, [r0, #0]
 800ca0e:	462a      	mov	r2, r5
 800ca10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca12:	4798      	blx	r3
 800ca14:	4629      	mov	r1, r5
 800ca16:	4620      	mov	r0, r4
 800ca18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca1c:	f009 bd1c 	b.w	8016458 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>
 800ca20:	bd38      	pop	{r3, r4, r5, pc}

0800ca22 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>:
 800ca22:	b510      	push	{r4, lr}
 800ca24:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800ca28:	f1a1 0208 	sub.w	r2, r1, #8
 800ca2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca30:	f880 30ad 	strb.w	r3, [r0, #173]	; 0xad
 800ca34:	2a04      	cmp	r2, #4
 800ca36:	d81c      	bhi.n	800ca72 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x50>
 800ca38:	e8df f002 	tbb	[pc, r2]
 800ca3c:	1b180307 	blne	860d660 <__exidx_end+0x5ee5d4>
 800ca40:	f043001b 			; <UNDEFINED> instruction: 0xf043001b
 800ca44:	0340      	lsls	r0, r0, #13
 800ca46:	f880 30ad 	strb.w	r3, [r0, #173]	; 0xad
 800ca4a:	f890 3a11 	ldrb.w	r3, [r0, #2577]	; 0xa11
 800ca4e:	2b02      	cmp	r3, #2
 800ca50:	d10f      	bne.n	800ca72 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x50>
 800ca52:	69c0      	ldr	r0, [r0, #28]
 800ca54:	f001 0403 	and.w	r4, r1, #3
 800ca58:	b118      	cbz	r0, 800ca62 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x40>
 800ca5a:	6803      	ldr	r3, [r0, #0]
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	4798      	blx	r3
 800ca62:	4620      	mov	r0, r4
 800ca64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca68:	f009 bd03 	b.w	8016472 <artnet::display_failsafe(unsigned char)>
 800ca6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca70:	e7e9      	b.n	800ca46 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x24>
 800ca72:	bd10      	pop	{r4, pc}

0800ca74 <ArtNetNode::HandleAddress()>:
 800ca74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca78:	2301      	movs	r3, #1
 800ca7a:	f880 3a10 	strb.w	r3, [r0, #2576]	; 0xa10
 800ca7e:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
 800ca82:	4604      	mov	r4, r0
 800ca84:	b133      	cbz	r3, 800ca94 <ArtNetNode::HandleAddress()+0x20>
 800ca86:	f100 01c6 	add.w	r1, r0, #198	; 0xc6
 800ca8a:	f7ff fbcf 	bl	800c22c <ArtNetNode::SetShortName(char const*)>
 800ca8e:	2306      	movs	r3, #6
 800ca90:	f884 3a10 	strb.w	r3, [r4, #2576]	; 0xa10
 800ca94:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
 800ca98:	b13b      	cbz	r3, 800caaa <ArtNetNode::HandleAddress()+0x36>
 800ca9a:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f7ff fbe5 	bl	800c26e <ArtNetNode::SetLongName(char const*)>
 800caa4:	2307      	movs	r3, #7
 800caa6:	f884 3a10 	strb.w	r3, [r4, #2576]	; 0xa10
 800caaa:	f894 50c5 	ldrb.w	r5, [r4, #197]	; 0xc5
 800caae:	b105      	cbz	r5, 800cab2 <ArtNetNode::HandleAddress()+0x3e>
 800cab0:	3d01      	subs	r5, #1
 800cab2:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
 800cab6:	2900      	cmp	r1, #0
 800cab8:	d148      	bne.n	800cb4c <ArtNetNode::HandleAddress()+0xd8>
 800caba:	462a      	mov	r2, r5
 800cabc:	4620      	mov	r0, r4
 800cabe:	f7ff fefc 	bl	800c8ba <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800cac2:	f894 10c4 	ldrb.w	r1, [r4, #196]	; 0xc4
 800cac6:	2900      	cmp	r1, #0
 800cac8:	d146      	bne.n	800cb58 <ArtNetNode::HandleAddress()+0xe4>
 800caca:	462a      	mov	r2, r5
 800cacc:	4620      	mov	r0, r4
 800cace:	f7ff ff27 	bl	800c920 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800cad2:	00ad      	lsls	r5, r5, #2
 800cad4:	f204 1817 	addw	r8, r4, #279	; 0x117
 800cad8:	4627      	mov	r7, r4
 800cada:	f204 191b 	addw	r9, r4, #283	; 0x11b
 800cade:	462e      	mov	r6, r5
 800cae0:	f898 3005 	ldrb.w	r3, [r8, #5]
 800cae4:	2b7f      	cmp	r3, #127	; 0x7f
 800cae6:	d007      	beq.n	800caf8 <ArtNetNode::HandleAddress()+0x84>
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d13b      	bne.n	800cb64 <ArtNetNode::HandleAddress()+0xf0>
 800caec:	2301      	movs	r3, #1
 800caee:	2201      	movs	r2, #1
 800caf0:	4631      	mov	r1, r6
 800caf2:	4620      	mov	r0, r4
 800caf4:	f7ff fe04 	bl	800c700 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800caf8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800cafc:	2a7f      	cmp	r2, #127	; 0x7f
 800cafe:	d005      	beq.n	800cb0c <ArtNetNode::HandleAddress()+0x98>
 800cb00:	bbaa      	cbnz	r2, 800cb6e <ArtNetNode::HandleAddress()+0xfa>
 800cb02:	2301      	movs	r3, #1
 800cb04:	4631      	mov	r1, r6
 800cb06:	4620      	mov	r0, r4
 800cb08:	f7ff fdfa 	bl	800c700 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800cb0c:	45c8      	cmp	r8, r9
 800cb0e:	f106 0601 	add.w	r6, r6, #1
 800cb12:	d1e5      	bne.n	800cae0 <ArtNetNode::HandleAddress()+0x6c>
 800cb14:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 800cb18:	f003 0103 	and.w	r1, r3, #3
 800cb1c:	2b53      	cmp	r3, #83	; 0x53
 800cb1e:	4429      	add	r1, r5
 800cb20:	d82b      	bhi.n	800cb7a <ArtNetNode::HandleAddress()+0x106>
 800cb22:	2b4f      	cmp	r3, #79	; 0x4f
 800cb24:	f200 8092 	bhi.w	800cc4c <ArtNetNode::HandleAddress()+0x1d8>
 800cb28:	1e5a      	subs	r2, r3, #1
 800cb2a:	b2d0      	uxtb	r0, r2
 800cb2c:	2812      	cmp	r0, #18
 800cb2e:	d834      	bhi.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cb30:	2a12      	cmp	r2, #18
 800cb32:	d832      	bhi.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cb34:	e8df f002 	tbb	[pc, r2]
 800cb38:	74685c4d 	strbtvc	r5, [r8], #-3149	; 0xfffff3b3
 800cb3c:	80313131 	eorshi	r3, r1, r1, lsr r1
 800cb40:	80808080 	addhi	r8, r0, r0, lsl #1
 800cb44:	85313131 	ldrhi	r3, [r1, #-305]!	; 0xfffffecf
 800cb48:	00858585 	addeq	r8, r5, r5, lsl #11
 800cb4c:	060f      	lsls	r7, r1, #24
 800cb4e:	d5b8      	bpl.n	800cac2 <ArtNetNode::HandleAddress()+0x4e>
 800cb50:	462a      	mov	r2, r5
 800cb52:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800cb56:	e7b1      	b.n	800cabc <ArtNetNode::HandleAddress()+0x48>
 800cb58:	060e      	lsls	r6, r1, #24
 800cb5a:	d5ba      	bpl.n	800cad2 <ArtNetNode::HandleAddress()+0x5e>
 800cb5c:	462a      	mov	r2, r5
 800cb5e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800cb62:	e7b3      	b.n	800cacc <ArtNetNode::HandleAddress()+0x58>
 800cb64:	0618      	lsls	r0, r3, #24
 800cb66:	d5c7      	bpl.n	800caf8 <ArtNetNode::HandleAddress()+0x84>
 800cb68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb6c:	e7bf      	b.n	800caee <ArtNetNode::HandleAddress()+0x7a>
 800cb6e:	0611      	lsls	r1, r2, #24
 800cb70:	d5cc      	bpl.n	800cb0c <ArtNetNode::HandleAddress()+0x98>
 800cb72:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800cb76:	2200      	movs	r2, #0
 800cb78:	e7c4      	b.n	800cb04 <ArtNetNode::HandleAddress()+0x90>
 800cb7a:	2b93      	cmp	r3, #147	; 0x93
 800cb7c:	d81a      	bhi.n	800cbb4 <ArtNetNode::HandleAddress()+0x140>
 800cb7e:	2b8f      	cmp	r3, #143	; 0x8f
 800cb80:	d868      	bhi.n	800cc54 <ArtNetNode::HandleAddress()+0x1e0>
 800cb82:	2b63      	cmp	r3, #99	; 0x63
 800cb84:	d806      	bhi.n	800cb94 <ArtNetNode::HandleAddress()+0x120>
 800cb86:	2b5f      	cmp	r3, #95	; 0x5f
 800cb88:	d907      	bls.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f7ff fefa 	bl	800c986 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800cb92:	e002      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cb94:	3b70      	subs	r3, #112	; 0x70
 800cb96:	2b03      	cmp	r3, #3
 800cb98:	d95a      	bls.n	800cc50 <ArtNetNode::HandleAddress()+0x1dc>
 800cb9a:	69a0      	ldr	r0, [r4, #24]
 800cb9c:	b120      	cbz	r0, 800cba8 <ArtNetNode::HandleAddress()+0x134>
 800cb9e:	6803      	ldr	r3, [r0, #0]
 800cba0:	f894 1122 	ldrb.w	r1, [r4, #290]	; 0x122
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	4798      	blx	r3
 800cba8:	4620      	mov	r0, r4
 800cbaa:	2101      	movs	r1, #1
 800cbac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbb0:	f000 bca4 	b.w	800d4fc <ArtNetNode::SendPollRelply(bool)>
 800cbb4:	2bc3      	cmp	r3, #195	; 0xc3
 800cbb6:	d806      	bhi.n	800cbc6 <ArtNetNode::HandleAddress()+0x152>
 800cbb8:	2bbf      	cmp	r3, #191	; 0xbf
 800cbba:	d9ee      	bls.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f000 fd4f 	bl	800d662 <ArtNetNode::SetRmd(unsigned int, bool)>
 800cbc4:	e7e9      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cbc6:	3330      	adds	r3, #48	; 0x30
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	2b03      	cmp	r3, #3
 800cbcc:	d8e5      	bhi.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cbce:	2200      	movs	r2, #0
 800cbd0:	e7f5      	b.n	800cbbe <ArtNetNode::HandleAddress()+0x14a>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f884 3a16 	strb.w	r3, [r4, #2582]	; 0xa16
 800cbd8:	f504 6225 	add.w	r2, r4, #2640	; 0xa50
 800cbdc:	f897 3a23 	ldrb.w	r3, [r7, #2595]	; 0xa23
 800cbe0:	f023 0308 	bic.w	r3, r3, #8
 800cbe4:	f887 3a23 	strb.w	r3, [r7, #2595]	; 0xa23
 800cbe8:	3728      	adds	r7, #40	; 0x28
 800cbea:	42ba      	cmp	r2, r7
 800cbec:	d1f6      	bne.n	800cbdc <ArtNetNode::HandleAddress()+0x168>
 800cbee:	e7d4      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cbf0:	4b3a      	ldr	r3, [pc, #232]	; (800ccdc <ArtNetNode::HandleAddress()+0x268>)
 800cbf2:	2102      	movs	r1, #2
 800cbf4:	6818      	ldr	r0, [r3, #0]
 800cbf6:	f00b fa21 	bl	801803c <LedBlink::SetMode(ledblink::Mode)>
 800cbfa:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 800cbfe:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800cc02:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 800cc06:	e7c8      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cc08:	4b34      	ldr	r3, [pc, #208]	; (800ccdc <ArtNetNode::HandleAddress()+0x268>)
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	6818      	ldr	r0, [r3, #0]
 800cc0e:	f00b fa15 	bl	801803c <LedBlink::SetMode(ledblink::Mode)>
 800cc12:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 800cc16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc1e:	e7f0      	b.n	800cc02 <ArtNetNode::HandleAddress()+0x18e>
 800cc20:	4b2e      	ldr	r3, [pc, #184]	; (800ccdc <ArtNetNode::HandleAddress()+0x268>)
 800cc22:	2104      	movs	r1, #4
 800cc24:	6818      	ldr	r0, [r3, #0]
 800cc26:	f00b fa09 	bl	801803c <LedBlink::SetMode(ledblink::Mode)>
 800cc2a:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 800cc2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc36:	e7e4      	b.n	800cc02 <ArtNetNode::HandleAddress()+0x18e>
 800cc38:	4619      	mov	r1, r3
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f7ff fef1 	bl	800ca22 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800cc40:	e7ab      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cc42:	2201      	movs	r2, #1
 800cc44:	4620      	mov	r0, r4
 800cc46:	f7ff fec5 	bl	800c9d4 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800cc4a:	e7a6      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	e7f9      	b.n	800cc44 <ArtNetNode::HandleAddress()+0x1d0>
 800cc50:	2201      	movs	r2, #1
 800cc52:	e79b      	b.n	800cb8c <ArtNetNode::HandleAddress()+0x118>
 800cc54:	4b22      	ldr	r3, [pc, #136]	; (800cce0 <ArtNetNode::HandleAddress()+0x26c>)
 800cc56:	6860      	ldr	r0, [r4, #4]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	07d2      	lsls	r2, r2, #31
 800cc5c:	bf58      	it	pl
 800cc5e:	2201      	movpl	r2, #1
 800cc60:	b2cd      	uxtb	r5, r1
 800cc62:	bf58      	it	pl
 800cc64:	601a      	strpl	r2, [r3, #0]
 800cc66:	f240 6204 	movw	r2, #1540	; 0x604
 800cc6a:	4b1e      	ldr	r3, [pc, #120]	; (800cce4 <ArtNetNode::HandleAddress()+0x270>)
 800cc6c:	436a      	muls	r2, r5
 800cc6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc72:	441a      	add	r2, r3
 800cc74:	f502 7600 	add.w	r6, r2, #512	; 0x200
 800cc78:	4611      	mov	r1, r2
 800cc7a:	2700      	movs	r7, #0
 800cc7c:	428e      	cmp	r6, r1
 800cc7e:	d12a      	bne.n	800ccd6 <ArtNetNode::HandleAddress()+0x262>
 800cc80:	f240 6104 	movw	r1, #1540	; 0x604
 800cc84:	fb01 3105 	mla	r1, r1, r5, r3
 800cc88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc8c:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800cc90:	6801      	ldr	r1, [r0, #0]
 800cc92:	690e      	ldr	r6, [r1, #16]
 800cc94:	4629      	mov	r1, r5
 800cc96:	47b0      	blx	r6
 800cc98:	2d41      	cmp	r5, #65	; 0x41
 800cc9a:	f63f af7e 	bhi.w	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800cc9e:	2628      	movs	r6, #40	; 0x28
 800cca0:	fb06 4605 	mla	r6, r6, r5, r4
 800cca4:	f8d6 3a40 	ldr.w	r3, [r6, #2624]	; 0xa40
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f47f af76 	bne.w	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800ccae:	f896 3a45 	ldrb.w	r3, [r6, #2629]	; 0xa45
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f47f af71 	bne.w	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800ccb8:	6860      	ldr	r0, [r4, #4]
 800ccba:	6803      	ldr	r3, [r0, #0]
 800ccbc:	4629      	mov	r1, r5
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	4798      	blx	r3
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	f886 3a45 	strb.w	r3, [r6, #2629]	; 0xa45
 800ccc8:	f896 3a23 	ldrb.w	r3, [r6, #2595]	; 0xa23
 800cccc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ccd0:	f886 3a23 	strb.w	r3, [r6, #2595]	; 0xa23
 800ccd4:	e761      	b.n	800cb9a <ArtNetNode::HandleAddress()+0x126>
 800ccd6:	f801 7b01 	strb.w	r7, [r1], #1
 800ccda:	e7cf      	b.n	800cc7c <ArtNetNode::HandleAddress()+0x208>
 800ccdc:	20010678 	andcs	r0, r1, r8, ror r6
 800cce0:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800cce4:	20030000 	andcs	r0, r3, r0

0800cce8 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 800cce8:	b510      	push	{r4, lr}
 800ccea:	f240 6304 	movw	r3, #1540	; 0x604
 800ccee:	fb03 0001 	mla	r0, r3, r1, r0
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d100      	bne.n	800ccfa <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 800ccf8:	bd10      	pop	{r4, pc}
 800ccfa:	f810 4b01 	ldrb.w	r4, [r0], #1
 800ccfe:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 800cd02:	42a1      	cmp	r1, r4
 800cd04:	bf38      	it	cc
 800cd06:	4621      	movcc	r1, r4
 800cd08:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	e7f1      	b.n	800ccf4 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

0800cd10 <memcpy.isra.0>:
 800cd10:	3801      	subs	r0, #1
 800cd12:	440a      	add	r2, r1
 800cd14:	4291      	cmp	r1, r2
 800cd16:	d100      	bne.n	800cd1a <memcpy.isra.0+0xa>
 800cd18:	4770      	bx	lr
 800cd1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd1e:	f800 3f01 	strb.w	r3, [r0, #1]!
 800cd22:	e7f7      	b.n	800cd14 <memcpy.isra.0+0x4>

0800cd24 <lightset::Data::Get()>:
 800cd24:	4b03      	ldr	r3, [pc, #12]	; (800cd34 <lightset::Data::Get()+0x10>)
 800cd26:	4804      	ldr	r0, [pc, #16]	; (800cd38 <lightset::Data::Get()+0x14>)
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	07d2      	lsls	r2, r2, #31
 800cd2c:	bf5c      	itt	pl
 800cd2e:	2201      	movpl	r2, #1
 800cd30:	601a      	strpl	r2, [r3, #0]
 800cd32:	4770      	bx	lr
 800cd34:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800cd38:	20030000 	andcs	r0, r3, r0

0800cd3c <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 800cd3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cd3e:	4604      	mov	r4, r0
 800cd40:	9103      	str	r1, [sp, #12]
 800cd42:	9201      	str	r2, [sp, #4]
 800cd44:	f7ff ffee 	bl	800cd24 <lightset::Data::Get()>
 800cd48:	f240 6304 	movw	r3, #1540	; 0x604
 800cd4c:	435c      	muls	r4, r3
 800cd4e:	1906      	adds	r6, r0, r4
 800cd50:	9a01      	ldr	r2, [sp, #4]
 800cd52:	9903      	ldr	r1, [sp, #12]
 800cd54:	9202      	str	r2, [sp, #8]
 800cd56:	4605      	mov	r5, r0
 800cd58:	4630      	mov	r0, r6
 800cd5a:	9101      	str	r1, [sp, #4]
 800cd5c:	f7ff ffd8 	bl	800cd10 <memcpy.isra.0>
 800cd60:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800cd64:	9a02      	ldr	r2, [sp, #8]
 800cd66:	9901      	ldr	r1, [sp, #4]
 800cd68:	f8c6 2600 	str.w	r2, [r6, #1536]	; 0x600
 800cd6c:	1928      	adds	r0, r5, r4
 800cd6e:	b004      	add	sp, #16
 800cd70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd74:	f7ff bfcc 	b.w	800cd10 <memcpy.isra.0>

0800cd78 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800cd78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cd7c:	4606      	mov	r6, r0
 800cd7e:	9103      	str	r1, [sp, #12]
 800cd80:	9201      	str	r2, [sp, #4]
 800cd82:	461f      	mov	r7, r3
 800cd84:	f7ff ffce 	bl	800cd24 <lightset::Data::Get()>
 800cd88:	f240 6404 	movw	r4, #1540	; 0x604
 800cd8c:	4374      	muls	r4, r6
 800cd8e:	eb00 0804 	add.w	r8, r0, r4
 800cd92:	9a01      	ldr	r2, [sp, #4]
 800cd94:	9903      	ldr	r1, [sp, #12]
 800cd96:	9202      	str	r2, [sp, #8]
 800cd98:	4605      	mov	r5, r0
 800cd9a:	4640      	mov	r0, r8
 800cd9c:	9101      	str	r1, [sp, #4]
 800cd9e:	f7ff ffb7 	bl	800cd10 <memcpy.isra.0>
 800cda2:	9a02      	ldr	r2, [sp, #8]
 800cda4:	9901      	ldr	r1, [sp, #4]
 800cda6:	f8c8 2600 	str.w	r2, [r8, #1536]	; 0x600
 800cdaa:	b937      	cbnz	r7, 800cdba <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 800cdac:	4631      	mov	r1, r6
 800cdae:	4628      	mov	r0, r5
 800cdb0:	b004      	add	sp, #16
 800cdb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb6:	f7ff bf97 	b.w	800cce8 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800cdba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800cdbe:	1928      	adds	r0, r5, r4
 800cdc0:	b004      	add	sp, #16
 800cdc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc6:	f7ff bfa3 	b.w	800cd10 <memcpy.isra.0>

0800cdca <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800cdca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdcc:	b085      	sub	sp, #20
 800cdce:	461f      	mov	r7, r3
 800cdd0:	4606      	mov	r6, r0
 800cdd2:	9103      	str	r1, [sp, #12]
 800cdd4:	9201      	str	r2, [sp, #4]
 800cdd6:	f7ff ffa5 	bl	800cd24 <lightset::Data::Get()>
 800cdda:	f240 6404 	movw	r4, #1540	; 0x604
 800cdde:	4374      	muls	r4, r6
 800cde0:	4605      	mov	r5, r0
 800cde2:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800cde6:	9a01      	ldr	r2, [sp, #4]
 800cde8:	9903      	ldr	r1, [sp, #12]
 800cdea:	9202      	str	r2, [sp, #8]
 800cdec:	4428      	add	r0, r5
 800cdee:	9101      	str	r1, [sp, #4]
 800cdf0:	f7ff ff8e 	bl	800cd10 <memcpy.isra.0>
 800cdf4:	192b      	adds	r3, r5, r4
 800cdf6:	9a02      	ldr	r2, [sp, #8]
 800cdf8:	9901      	ldr	r1, [sp, #4]
 800cdfa:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
 800cdfe:	b937      	cbnz	r7, 800ce0e <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x44>
 800ce00:	4631      	mov	r1, r6
 800ce02:	4628      	mov	r0, r5
 800ce04:	b005      	add	sp, #20
 800ce06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ce0a:	f7ff bf6d 	b.w	800cce8 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800ce0e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ce12:	1928      	adds	r0, r5, r4
 800ce14:	b005      	add	sp, #20
 800ce16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ce1a:	f7ff bf79 	b.w	800cd10 <memcpy.isra.0>

0800ce1e <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 800ce1e:	f890 3a16 	ldrb.w	r3, [r0, #2582]	; 0xa16
 800ce22:	b91b      	cbnz	r3, 800ce2c <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 800ce24:	f240 1301 	movw	r3, #257	; 0x101
 800ce28:	f8a0 3a16 	strh.w	r3, [r0, #2582]	; 0xa16
 800ce2c:	2328      	movs	r3, #40	; 0x28
 800ce2e:	fb03 0101 	mla	r1, r3, r1, r0
 800ce32:	f891 3a23 	ldrb.w	r3, [r1, #2595]	; 0xa23
 800ce36:	f043 0308 	orr.w	r3, r3, #8
 800ce3a:	f881 3a23 	strb.w	r3, [r1, #2595]	; 0xa23
 800ce3e:	4770      	bx	lr

0800ce40 <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 800ce40:	2328      	movs	r3, #40	; 0x28
 800ce42:	fb03 0301 	mla	r3, r3, r1, r0
 800ce46:	b530      	push	{r4, r5, lr}
 800ce48:	f8d0 29a4 	ldr.w	r2, [r0, #2468]	; 0x9a4
 800ce4c:	f8d3 4a28 	ldr.w	r4, [r3, #2600]	; 0xa28
 800ce50:	f242 7510 	movw	r5, #10000	; 0x2710
 800ce54:	1b14      	subs	r4, r2, r4
 800ce56:	42ac      	cmp	r4, r5
 800ce58:	d908      	bls.n	800ce6c <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 800ce5a:	2400      	movs	r4, #0
 800ce5c:	f8c3 4a2c 	str.w	r4, [r3, #2604]	; 0xa2c
 800ce60:	f893 4a23 	ldrb.w	r4, [r3, #2595]	; 0xa23
 800ce64:	f024 0408 	bic.w	r4, r4, #8
 800ce68:	f883 4a23 	strb.w	r4, [r3, #2595]	; 0xa23
 800ce6c:	2328      	movs	r3, #40	; 0x28
 800ce6e:	fb03 0101 	mla	r1, r3, r1, r0
 800ce72:	f8d1 3a30 	ldr.w	r3, [r1, #2608]	; 0xa30
 800ce76:	1ad2      	subs	r2, r2, r3
 800ce78:	f242 7310 	movw	r3, #10000	; 0x2710
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d908      	bls.n	800ce92 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 800ce80:	2300      	movs	r3, #0
 800ce82:	f8c1 3a34 	str.w	r3, [r1, #2612]	; 0xa34
 800ce86:	f891 3a23 	ldrb.w	r3, [r1, #2595]	; 0xa23
 800ce8a:	f023 0308 	bic.w	r3, r3, #8
 800ce8e:	f881 3a23 	strb.w	r3, [r1, #2595]	; 0xa23
 800ce92:	4603      	mov	r3, r0
 800ce94:	f500 6425 	add.w	r4, r0, #2640	; 0xa50
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f893 1a23 	ldrb.w	r1, [r3, #2595]	; 0xa23
 800ce9e:	3328      	adds	r3, #40	; 0x28
 800cea0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800cea4:	429c      	cmp	r4, r3
 800cea6:	ea42 0201 	orr.w	r2, r2, r1
 800ceaa:	d1f6      	bne.n	800ce9a <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x5a>
 800ceac:	b91a      	cbnz	r2, 800ceb6 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x76>
 800ceae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ceb2:	f8a0 3a16 	strh.w	r3, [r0, #2582]	; 0xa16
 800ceb6:	bd30      	pop	{r4, r5, pc}

0800ceb8 <ArtNetNode::HandleDmx()>:
 800ceb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cebc:	f8b0 70c8 	ldrh.w	r7, [r0, #200]	; 0xc8
 800cec0:	ba7f      	rev16	r7, r7
 800cec2:	b2bf      	uxth	r7, r7
 800cec4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800cec8:	4604      	mov	r4, r0
 800ceca:	bf28      	it	cs
 800cecc:	f44f 7700 	movcs.w	r7, #512	; 0x200
 800ced0:	4605      	mov	r5, r0
 800ced2:	2600      	movs	r6, #0
 800ced4:	f04f 0901 	mov.w	r9, #1
 800ced8:	f100 08ca 	add.w	r8, r0, #202	; 0xca
 800cedc:	f895 3a24 	ldrb.w	r3, [r5, #2596]	; 0xa24
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d056      	beq.n	800cf92 <ArtNetNode::HandleDmx()+0xda>
 800cee4:	f8d5 3a40 	ldr.w	r3, [r5, #2624]	; 0xa40
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d152      	bne.n	800cf92 <ArtNetNode::HandleDmx()+0xda>
 800ceec:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 800cef0:	f8b5 3a20 	ldrh.w	r3, [r5, #2592]	; 0xa20
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d14c      	bne.n	800cf92 <ArtNetNode::HandleDmx()+0xda>
 800cef8:	f895 3a23 	ldrb.w	r3, [r5, #2595]	; 0xa23
 800cefc:	f8d5 ba2c 	ldr.w	fp, [r5, #2604]	; 0xa2c
 800cf00:	f8d5 aa34 	ldr.w	sl, [r5, #2612]	; 0xa34
 800cf04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf08:	f885 3a23 	strb.w	r3, [r5, #2595]	; 0xa23
 800cf0c:	f894 3a16 	ldrb.w	r3, [r4, #2582]	; 0xa16
 800cf10:	b133      	cbz	r3, 800cf20 <ArtNetNode::HandleDmx()+0x68>
 800cf12:	f894 3a18 	ldrb.w	r3, [r4, #2584]	; 0xa18
 800cf16:	b91b      	cbnz	r3, 800cf20 <ArtNetNode::HandleDmx()+0x68>
 800cf18:	4631      	mov	r1, r6
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	f7ff ff90 	bl	800ce40 <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 800cf20:	ea5b 020a 	orrs.w	r2, fp, sl
 800cf24:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
 800cf28:	d139      	bne.n	800cf9e <ArtNetNode::HandleDmx()+0xe6>
 800cf2a:	f8c5 3a2c 	str.w	r3, [r5, #2604]	; 0xa2c
 800cf2e:	f8d4 39a4 	ldr.w	r3, [r4, #2468]	; 0x9a4
 800cf32:	f8c5 3a28 	str.w	r3, [r5, #2600]	; 0xa28
 800cf36:	463a      	mov	r2, r7
 800cf38:	4641      	mov	r1, r8
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	f7ff fefe 	bl	800cd3c <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800cf40:	f894 3a15 	ldrb.w	r3, [r4, #2581]	; 0xa15
 800cf44:	b9fb      	cbnz	r3, 800cf86 <ArtNetNode::HandleDmx()+0xce>
 800cf46:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800cf4a:	f7ff feeb 	bl	800cd24 <lightset::Data::Get()>
 800cf4e:	f240 6304 	movw	r3, #1540	; 0x604
 800cf52:	4373      	muls	r3, r6
 800cf54:	18c2      	adds	r2, r0, r3
 800cf56:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 800cf5a:	f8da 3000 	ldr.w	r3, [sl]
 800cf5e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800cf62:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800cf66:	1842      	adds	r2, r0, r1
 800cf68:	4631      	mov	r1, r6
 800cf6a:	4650      	mov	r0, sl
 800cf6c:	47d8      	blx	fp
 800cf6e:	f895 3a45 	ldrb.w	r3, [r5, #2629]	; 0xa45
 800cf72:	b943      	cbnz	r3, 800cf86 <ArtNetNode::HandleDmx()+0xce>
 800cf74:	6860      	ldr	r0, [r4, #4]
 800cf76:	6803      	ldr	r3, [r0, #0]
 800cf78:	4631      	mov	r1, r6
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	4798      	blx	r3
 800cf7e:	f884 9a17 	strb.w	r9, [r4, #2583]	; 0xa17
 800cf82:	f885 9a45 	strb.w	r9, [r5, #2629]	; 0xa45
 800cf86:	f894 3a19 	ldrb.w	r3, [r4, #2585]	; 0xa19
 800cf8a:	f043 0302 	orr.w	r3, r3, #2
 800cf8e:	f884 3a19 	strb.w	r3, [r4, #2585]	; 0xa19
 800cf92:	3601      	adds	r6, #1
 800cf94:	2e42      	cmp	r6, #66	; 0x42
 800cf96:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800cf9a:	d19f      	bne.n	800cedc <ArtNetNode::HandleDmx()+0x24>
 800cf9c:	e040      	b.n	800d020 <ArtNetNode::HandleDmx()+0x168>
 800cf9e:	459b      	cmp	fp, r3
 800cfa0:	d104      	bne.n	800cfac <ArtNetNode::HandleDmx()+0xf4>
 800cfa2:	f1ba 0f00 	cmp.w	sl, #0
 800cfa6:	d0c2      	beq.n	800cf2e <ArtNetNode::HandleDmx()+0x76>
 800cfa8:	b11b      	cbz	r3, 800cfb2 <ArtNetNode::HandleDmx()+0xfa>
 800cfaa:	e037      	b.n	800d01c <ArtNetNode::HandleDmx()+0x164>
 800cfac:	f1bb 0f00 	cmp.w	fp, #0
 800cfb0:	d132      	bne.n	800d018 <ArtNetNode::HandleDmx()+0x160>
 800cfb2:	459a      	cmp	sl, r3
 800cfb4:	d11d      	bne.n	800cff2 <ArtNetNode::HandleDmx()+0x13a>
 800cfb6:	f8d4 39a4 	ldr.w	r3, [r4, #2468]	; 0x9a4
 800cfba:	f8c5 3a30 	str.w	r3, [r5, #2608]	; 0xa30
 800cfbe:	f7ff feb1 	bl	800cd24 <lightset::Data::Get()>
 800cfc2:	f240 6304 	movw	r3, #1540	; 0x604
 800cfc6:	fb03 fa06 	mul.w	sl, r3, r6
 800cfca:	4683      	mov	fp, r0
 800cfcc:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 800cfd0:	463a      	mov	r2, r7
 800cfd2:	4641      	mov	r1, r8
 800cfd4:	4458      	add	r0, fp
 800cfd6:	f7ff fe9b 	bl	800cd10 <memcpy.isra.0>
 800cfda:	eb0b 030a 	add.w	r3, fp, sl
 800cfde:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 800cfe2:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800cfe6:	463a      	mov	r2, r7
 800cfe8:	4641      	mov	r1, r8
 800cfea:	4458      	add	r0, fp
 800cfec:	f7ff fe90 	bl	800cd10 <memcpy.isra.0>
 800cff0:	e7a6      	b.n	800cf40 <ArtNetNode::HandleDmx()+0x88>
 800cff2:	b9bb      	cbnz	r3, 800d024 <ArtNetNode::HandleDmx()+0x16c>
 800cff4:	f8c5 3a2c 	str.w	r3, [r5, #2604]	; 0xa2c
 800cff8:	f8d4 39a4 	ldr.w	r3, [r4, #2468]	; 0x9a4
 800cffc:	f8c5 3a28 	str.w	r3, [r5, #2600]	; 0xa28
 800d000:	4631      	mov	r1, r6
 800d002:	4620      	mov	r0, r4
 800d004:	f7ff ff0b 	bl	800ce1e <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800d008:	463a      	mov	r2, r7
 800d00a:	f8d5 3a38 	ldr.w	r3, [r5, #2616]	; 0xa38
 800d00e:	4641      	mov	r1, r8
 800d010:	4630      	mov	r0, r6
 800d012:	f7ff feb1 	bl	800cd78 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800d016:	e793      	b.n	800cf40 <ArtNetNode::HandleDmx()+0x88>
 800d018:	459b      	cmp	fp, r3
 800d01a:	d118      	bne.n	800d04e <ArtNetNode::HandleDmx()+0x196>
 800d01c:	459a      	cmp	sl, r3
 800d01e:	d1eb      	bne.n	800cff8 <ArtNetNode::HandleDmx()+0x140>
 800d020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d024:	f1ba 0f00 	cmp.w	sl, #0
 800d028:	d1e4      	bne.n	800cff4 <ArtNetNode::HandleDmx()+0x13c>
 800d02a:	f8c5 3a34 	str.w	r3, [r5, #2612]	; 0xa34
 800d02e:	f8d4 39a4 	ldr.w	r3, [r4, #2468]	; 0x9a4
 800d032:	f8c5 3a30 	str.w	r3, [r5, #2608]	; 0xa30
 800d036:	4631      	mov	r1, r6
 800d038:	4620      	mov	r0, r4
 800d03a:	f7ff fef0 	bl	800ce1e <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800d03e:	463a      	mov	r2, r7
 800d040:	f8d5 3a38 	ldr.w	r3, [r5, #2616]	; 0xa38
 800d044:	4641      	mov	r1, r8
 800d046:	4630      	mov	r0, r6
 800d048:	f7ff febf 	bl	800cdca <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800d04c:	e778      	b.n	800cf40 <ArtNetNode::HandleDmx()+0x88>
 800d04e:	f1ba 0f00 	cmp.w	sl, #0
 800d052:	d0ea      	beq.n	800d02a <ArtNetNode::HandleDmx()+0x172>
 800d054:	459a      	cmp	sl, r3
 800d056:	d0ea      	beq.n	800d02e <ArtNetNode::HandleDmx()+0x176>
 800d058:	e7e2      	b.n	800d020 <ArtNetNode::HandleDmx()+0x168>
	...

0800d05c <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 800d05c:	2941      	cmp	r1, #65	; 0x41
 800d05e:	b510      	push	{r4, lr}
 800d060:	d810      	bhi.n	800d084 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x28>
 800d062:	4b09      	ldr	r3, [pc, #36]	; (800d088 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x2c>)
 800d064:	681c      	ldr	r4, [r3, #0]
 800d066:	6963      	ldr	r3, [r4, #20]
 800d068:	69e4      	ldr	r4, [r4, #28]
 800d06a:	4053      	eors	r3, r2
 800d06c:	4223      	tst	r3, r4
 800d06e:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800d072:	f241 4378 	movw	r3, #5240	; 0x1478
 800d076:	bf0d      	iteet	eq
 800d078:	1840      	addeq	r0, r0, r1
 800d07a:	1809      	addne	r1, r1, r0
 800d07c:	6a42      	ldrne	r2, [r0, #36]	; 0x24
 800d07e:	50c2      	streq	r2, [r0, r3]
 800d080:	bf18      	it	ne
 800d082:	50ca      	strne	r2, [r1, r3]
 800d084:	bd10      	pop	{r4, pc}
 800d086:	bf00      	nop
 800d088:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

0800d08c <ArtNetNode::HandleDmxIn()>:
 800d08c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d090:	f500 55a3 	add.w	r5, r0, #5216	; 0x1460
 800d094:	4f37      	ldr	r7, [pc, #220]	; (800d174 <ArtNetNode::HandleDmxIn()+0xe8>)
 800d096:	4604      	mov	r4, r0
 800d098:	3510      	adds	r5, #16
 800d09a:	2600      	movs	r6, #0
 800d09c:	792b      	ldrb	r3, [r5, #4]
 800d09e:	b93b      	cbnz	r3, 800d0b0 <ArtNetNode::HandleDmxIn()+0x24>
 800d0a0:	3601      	adds	r6, #1
 800d0a2:	2e42      	cmp	r6, #66	; 0x42
 800d0a4:	f105 0510 	add.w	r5, r5, #16
 800d0a8:	d1f8      	bne.n	800d09c <ArtNetNode::HandleDmxIn()+0x10>
 800d0aa:	b004      	add	sp, #16
 800d0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b0:	6920      	ldr	r0, [r4, #16]
 800d0b2:	6803      	ldr	r3, [r0, #0]
 800d0b4:	aa02      	add	r2, sp, #8
 800d0b6:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800d0ba:	4631      	mov	r1, r6
 800d0bc:	ab03      	add	r3, sp, #12
 800d0be:	47c0      	blx	r8
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d03f      	beq.n	800d144 <ArtNetNode::HandleDmxIn()+0xb8>
 800d0c4:	7b2b      	ldrb	r3, [r5, #12]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	732b      	strb	r3, [r5, #12]
 800d0cc:	f884 3687 	strb.w	r3, [r4, #1671]	; 0x687
 800d0d0:	f884 6688 	strb.w	r6, [r4, #1672]	; 0x688
 800d0d4:	882b      	ldrh	r3, [r5, #0]
 800d0d6:	f8a4 3689 	strh.w	r3, [r4, #1673]	; 0x689
 800d0da:	9b02      	ldr	r3, [sp, #8]
 800d0dc:	f204 628c 	addw	r2, r4, #1676	; 0x68c
 800d0e0:	18c1      	adds	r1, r0, r3
 800d0e2:	4281      	cmp	r1, r0
 800d0e4:	d129      	bne.n	800d13a <ArtNetNode::HandleDmxIn()+0xae>
 800d0e6:	07da      	lsls	r2, r3, #31
 800d0e8:	d505      	bpl.n	800d0f6 <ArtNetNode::HandleDmxIn()+0x6a>
 800d0ea:	18e2      	adds	r2, r4, r3
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	f882 168d 	strb.w	r1, [r2, #1677]	; 0x68d
 800d0f4:	9302      	str	r3, [sp, #8]
 800d0f6:	9b02      	ldr	r3, [sp, #8]
 800d0f8:	f884 368c 	strb.w	r3, [r4, #1676]	; 0x68c
 800d0fc:	0a1a      	lsrs	r2, r3, #8
 800d0fe:	2380      	movs	r3, #128	; 0x80
 800d100:	f884 268b 	strb.w	r2, [r4, #1675]	; 0x68b
 800d104:	70eb      	strb	r3, [r5, #3]
 800d106:	f641 1336 	movw	r3, #6454	; 0x1936
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	68ab      	ldr	r3, [r5, #8]
 800d10e:	7820      	ldrb	r0, [r4, #0]
 800d110:	f240 2212 	movw	r2, #530	; 0x212
 800d114:	f204 617b 	addw	r1, r4, #1659	; 0x67b
 800d118:	f007 f8c2 	bl	80142a0 <udp_send>
 800d11c:	683a      	ldr	r2, [r7, #0]
 800d11e:	2301      	movs	r3, #1
 800d120:	40b3      	lsls	r3, r6
 800d122:	ea33 0102 	bics.w	r1, r3, r2
 800d126:	d0bb      	beq.n	800d0a0 <ArtNetNode::HandleDmxIn()+0x14>
 800d128:	4313      	orrs	r3, r2
 800d12a:	603b      	str	r3, [r7, #0]
 800d12c:	f894 3a19 	ldrb.w	r3, [r4, #2585]	; 0xa19
 800d130:	f043 0301 	orr.w	r3, r3, #1
 800d134:	f884 3a19 	strb.w	r3, [r4, #2585]	; 0xa19
 800d138:	e7b2      	b.n	800d0a0 <ArtNetNode::HandleDmxIn()+0x14>
 800d13a:	f810 cb01 	ldrb.w	ip, [r0], #1
 800d13e:	f802 cf01 	strb.w	ip, [r2, #1]!
 800d142:	e7ce      	b.n	800d0e2 <ArtNetNode::HandleDmxIn()+0x56>
 800d144:	f995 2003 	ldrsb.w	r2, [r5, #3]
 800d148:	78eb      	ldrb	r3, [r5, #3]
 800d14a:	2a00      	cmp	r2, #0
 800d14c:	daa8      	bge.n	800d0a0 <ArtNetNode::HandleDmxIn()+0x14>
 800d14e:	9a03      	ldr	r2, [sp, #12]
 800d150:	2a00      	cmp	r2, #0
 800d152:	d1a5      	bne.n	800d0a0 <ArtNetNode::HandleDmxIn()+0x14>
 800d154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d158:	70eb      	strb	r3, [r5, #3]
 800d15a:	2201      	movs	r2, #1
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	40b2      	lsls	r2, r6
 800d160:	ea23 0302 	bic.w	r3, r3, r2
 800d164:	603b      	str	r3, [r7, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d19a      	bne.n	800d0a0 <ArtNetNode::HandleDmxIn()+0x14>
 800d16a:	f894 3a19 	ldrb.w	r3, [r4, #2585]	; 0xa19
 800d16e:	f023 0301 	bic.w	r3, r3, #1
 800d172:	e7df      	b.n	800d134 <ArtNetNode::HandleDmxIn()+0xa8>
 800d174:	200006d8 	ldrdcs	r0, [r0], -r8

0800d178 <memcmp.constprop.0>:
 800d178:	b510      	push	{r4, lr}
 800d17a:	4907      	ldr	r1, [pc, #28]	; (800d198 <memcmp.constprop.0+0x20>)
 800d17c:	1e42      	subs	r2, r0, #1
 800d17e:	3003      	adds	r0, #3
 800d180:	4282      	cmp	r2, r0
 800d182:	d101      	bne.n	800d188 <memcmp.constprop.0+0x10>
 800d184:	2000      	movs	r0, #0
 800d186:	e006      	b.n	800d196 <memcmp.constprop.0+0x1e>
 800d188:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800d18c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d190:	42a3      	cmp	r3, r4
 800d192:	d0f5      	beq.n	800d180 <memcmp.constprop.0+0x8>
 800d194:	1b18      	subs	r0, r3, r4
 800d196:	bd10      	pop	{r4, pc}
 800d198:	200006dc 	ldrdcs	r0, [r0], -ip

0800d19c <memcpy.constprop.0.isra.0>:
 800d19c:	3801      	subs	r0, #1
 800d19e:	1d0b      	adds	r3, r1, #4
 800d1a0:	4299      	cmp	r1, r3
 800d1a2:	d100      	bne.n	800d1a6 <memcpy.constprop.0.isra.0+0xa>
 800d1a4:	4770      	bx	lr
 800d1a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1aa:	f800 2f01 	strb.w	r2, [r0, #1]!
 800d1ae:	e7f7      	b.n	800d1a0 <memcpy.constprop.0.isra.0+0x4>

0800d1b0 <ArtNetNode::HandleIpProg()>:
 800d1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b4:	ed2d 8b02 	vpush	{d8}
 800d1b8:	4d5c      	ldr	r5, [pc, #368]	; (800d32c <ArtNetNode::HandleIpProg()+0x17c>)
 800d1ba:	f890 70c6 	ldrb.w	r7, [r0, #198]	; 0xc6
 800d1be:	4604      	mov	r4, r0
 800d1c0:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
 800d1c4:	6828      	ldr	r0, [r5, #0]
 800d1c6:	ee08 3a10 	vmov	s16, r3
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	f890 b005 	ldrb.w	fp, [r0, #5]
 800d1d0:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 800d1d4:	f06f 0306 	mvn.w	r3, #6
 800d1d8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 800d1dc:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800d1e0:	2bc0      	cmp	r3, #192	; 0xc0
 800d1e2:	b085      	sub	sp, #20
 800d1e4:	d101      	bne.n	800d1ea <ArtNetNode::HandleIpProg()+0x3a>
 800d1e6:	f007 ff1f 	bl	8015028 <Network::EnableDhcp()>
 800d1ea:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800d1ee:	2b88      	cmp	r3, #136	; 0x88
 800d1f0:	d103      	bne.n	800d1fa <ArtNetNode::HandleIpProg()+0x4a>
 800d1f2:	6828      	ldr	r0, [r5, #0]
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	f007 fe89 	bl	8014f0c <Network::SetIp(unsigned int)>
 800d1fa:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800d1fe:	2b84      	cmp	r3, #132	; 0x84
 800d200:	4e4b      	ldr	r6, [pc, #300]	; (800d330 <ArtNetNode::HandleIpProg()+0x180>)
 800d202:	f104 08c8 	add.w	r8, r4, #200	; 0xc8
 800d206:	d107      	bne.n	800d218 <ArtNetNode::HandleIpProg()+0x68>
 800d208:	4641      	mov	r1, r8
 800d20a:	4630      	mov	r0, r6
 800d20c:	f7ff ffc6 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d210:	6831      	ldr	r1, [r6, #0]
 800d212:	6828      	ldr	r0, [r5, #0]
 800d214:	f007 fe7a 	bl	8014f0c <Network::SetIp(unsigned int)>
 800d218:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800d21c:	2b82      	cmp	r3, #130	; 0x82
 800d21e:	f104 09cc 	add.w	r9, r4, #204	; 0xcc
 800d222:	d107      	bne.n	800d234 <ArtNetNode::HandleIpProg()+0x84>
 800d224:	4842      	ldr	r0, [pc, #264]	; (800d330 <ArtNetNode::HandleIpProg()+0x180>)
 800d226:	4649      	mov	r1, r9
 800d228:	f7ff ffb8 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d22c:	6831      	ldr	r1, [r6, #0]
 800d22e:	6828      	ldr	r0, [r5, #0]
 800d230:	f007 fe97 	bl	8014f62 <Network::SetNetmask(unsigned int)>
 800d234:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800d238:	2f90      	cmp	r7, #144	; 0x90
 800d23a:	f104 0ad2 	add.w	sl, r4, #210	; 0xd2
 800d23e:	d107      	bne.n	800d250 <ArtNetNode::HandleIpProg()+0xa0>
 800d240:	483b      	ldr	r0, [pc, #236]	; (800d330 <ArtNetNode::HandleIpProg()+0x180>)
 800d242:	4651      	mov	r1, sl
 800d244:	f7ff ffaa 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d248:	6831      	ldr	r1, [r6, #0]
 800d24a:	6828      	ldr	r0, [r5, #0]
 800d24c:	f007 fe9b 	bl	8014f86 <Network::SetGatewayIp(unsigned int)>
 800d250:	6829      	ldr	r1, [r5, #0]
 800d252:	794a      	ldrb	r2, [r1, #5]
 800d254:	0192      	lsls	r2, r2, #6
 800d256:	f884 20d2 	strb.w	r2, [r4, #210]	; 0xd2
 800d25a:	2200      	movs	r2, #0
 800d25c:	f884 20d3 	strb.w	r2, [r4, #211]	; 0xd3
 800d260:	7948      	ldrb	r0, [r1, #5]
 800d262:	6949      	ldr	r1, [r1, #20]
 800d264:	6031      	str	r1, [r6, #0]
 800d266:	ea8b 0b00 	eor.w	fp, fp, r0
 800d26a:	4640      	mov	r0, r8
 800d26c:	f7ff ff84 	bl	800d178 <memcmp.constprop.0>
 800d270:	492f      	ldr	r1, [pc, #188]	; (800d330 <ArtNetNode::HandleIpProg()+0x180>)
 800d272:	4607      	mov	r7, r0
 800d274:	4640      	mov	r0, r8
 800d276:	f7ff ff91 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d27a:	6829      	ldr	r1, [r5, #0]
 800d27c:	4648      	mov	r0, r9
 800d27e:	69c9      	ldr	r1, [r1, #28]
 800d280:	6031      	str	r1, [r6, #0]
 800d282:	f7ff ff79 	bl	800d178 <memcmp.constprop.0>
 800d286:	492a      	ldr	r1, [pc, #168]	; (800d330 <ArtNetNode::HandleIpProg()+0x180>)
 800d288:	9003      	str	r0, [sp, #12]
 800d28a:	4648      	mov	r0, r9
 800d28c:	f7ff ff86 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d290:	6829      	ldr	r1, [r5, #0]
 800d292:	4650      	mov	r0, sl
 800d294:	6989      	ldr	r1, [r1, #24]
 800d296:	6031      	str	r1, [r6, #0]
 800d298:	f7ff ff6e 	bl	800d178 <memcmp.constprop.0>
 800d29c:	9b03      	ldr	r3, [sp, #12]
 800d29e:	4924      	ldr	r1, [pc, #144]	; (800d330 <ArtNetNode::HandleIpProg()+0x180>)
 800d2a0:	431f      	orrs	r7, r3
 800d2a2:	4307      	orrs	r7, r0
 800d2a4:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 800d2a8:	bf0c      	ite	eq
 800d2aa:	465e      	moveq	r6, fp
 800d2ac:	f04b 0601 	orrne.w	r6, fp, #1
 800d2b0:	f7ff ff74 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f641 1336 	movw	r3, #6454	; 0x1936
 800d2ba:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
 800d2be:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	ee18 1a10 	vmov	r1, s16
 800d2c8:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
 800d2cc:	7820      	ldrb	r0, [r4, #0]
 800d2ce:	2222      	movs	r2, #34	; 0x22
 800d2d0:	f006 ffe6 	bl	80142a0 <udp_send>
 800d2d4:	b32e      	cbz	r6, 800d322 <ArtNetNode::HandleIpProg()+0x172>
 800d2d6:	682a      	ldr	r2, [r5, #0]
 800d2d8:	6953      	ldr	r3, [r2, #20]
 800d2da:	6223      	str	r3, [r4, #32]
 800d2dc:	69d1      	ldr	r1, [r2, #28]
 800d2de:	7952      	ldrb	r2, [r2, #5]
 800d2e0:	ea63 0301 	orn	r3, r3, r1
 800d2e4:	6263      	str	r3, [r4, #36]	; 0x24
 800d2e6:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 800d2ea:	f023 0302 	bic.w	r3, r3, #2
 800d2ee:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800d2f2:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
 800d2f6:	4641      	mov	r1, r8
 800d2f8:	f204 5096 	addw	r0, r4, #1430	; 0x596
 800d2fc:	f7ff ff4e 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d300:	4641      	mov	r1, r8
 800d302:	f204 605b 	addw	r0, r4, #1627	; 0x65b
 800d306:	f7ff ff49 	bl	800d19c <memcpy.constprop.0.isra.0>
 800d30a:	f894 3a12 	ldrb.w	r3, [r4, #2578]	; 0xa12
 800d30e:	b143      	cbz	r3, 800d322 <ArtNetNode::HandleIpProg()+0x172>
 800d310:	2101      	movs	r1, #1
 800d312:	4620      	mov	r0, r4
 800d314:	b005      	add	sp, #20
 800d316:	ecbd 8b02 	vpop	{d8}
 800d31a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31e:	f000 b8ed 	b.w	800d4fc <ArtNetNode::SendPollRelply(bool)>
 800d322:	b005      	add	sp, #20
 800d324:	ecbd 8b02 	vpop	{d8}
 800d328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32c:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 800d330:	200006dc 	ldrdcs	r0, [r0], -ip

0800d334 <memcpy.isra.0>:
 800d334:	3801      	subs	r0, #1
 800d336:	440a      	add	r2, r1
 800d338:	4291      	cmp	r1, r2
 800d33a:	d100      	bne.n	800d33e <memcpy.isra.0+0xa>
 800d33c:	4770      	bx	lr
 800d33e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d342:	f800 3f01 	strb.w	r3, [r0, #1]!
 800d346:	e7f7      	b.n	800d338 <memcpy.isra.0+0x4>

0800d348 <ArtNetNode::FillPollReply()>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	4604      	mov	r4, r0
 800d34c:	f200 508c 	addw	r0, r0, #1420	; 0x58c
 800d350:	f204 627b 	addw	r2, r4, #1659	; 0x67b
 800d354:	4603      	mov	r3, r0
 800d356:	2100      	movs	r1, #0
 800d358:	429a      	cmp	r2, r3
 800d35a:	d153      	bne.n	800d404 <ArtNetNode::FillPollReply()+0xbc>
 800d35c:	4d2b      	ldr	r5, [pc, #172]	; (800d40c <ArtNetNode::FillPollReply()+0xc4>)
 800d35e:	492c      	ldr	r1, [pc, #176]	; (800d410 <ArtNetNode::FillPollReply()+0xc8>)
 800d360:	2208      	movs	r2, #8
 800d362:	f7ff ffe7 	bl	800d334 <memcpy.isra.0>
 800d366:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800d36a:	f8a4 3594 	strh.w	r3, [r4, #1428]	; 0x594
 800d36e:	4629      	mov	r1, r5
 800d370:	6a23      	ldr	r3, [r4, #32]
 800d372:	602b      	str	r3, [r5, #0]
 800d374:	f204 5096 	addw	r0, r4, #1430	; 0x596
 800d378:	2204      	movs	r2, #4
 800d37a:	f7ff ffdb 	bl	800d334 <memcpy.isra.0>
 800d37e:	f641 1336 	movw	r3, #6454	; 0x1936
 800d382:	f8a4 359a 	strh.w	r3, [r4, #1434]	; 0x59a
 800d386:	4b23      	ldr	r3, [pc, #140]	; (800d414 <ArtNetNode::FillPollReply()+0xcc>)
 800d388:	781a      	ldrb	r2, [r3, #0]
 800d38a:	f884 259c 	strb.w	r2, [r4, #1436]	; 0x59c
 800d38e:	785b      	ldrb	r3, [r3, #1]
 800d390:	f884 359d 	strb.w	r3, [r4, #1437]	; 0x59d
 800d394:	4b20      	ldr	r3, [pc, #128]	; (800d418 <ArtNetNode::FillPollReply()+0xd0>)
 800d396:	781a      	ldrb	r2, [r3, #0]
 800d398:	f884 25a0 	strb.w	r2, [r4, #1440]	; 0x5a0
 800d39c:	785b      	ldrb	r3, [r3, #1]
 800d39e:	f884 35a1 	strb.w	r3, [r4, #1441]	; 0x5a1
 800d3a2:	4b1e      	ldr	r3, [pc, #120]	; (800d41c <ArtNetNode::FillPollReply()+0xd4>)
 800d3a4:	785a      	ldrb	r2, [r3, #1]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	f884 35a5 	strb.w	r3, [r4, #1445]	; 0x5a5
 800d3ac:	f884 25a4 	strb.w	r2, [r4, #1444]	; 0x5a4
 800d3b0:	f104 0158 	add.w	r1, r4, #88	; 0x58
 800d3b4:	f204 50a6 	addw	r0, r4, #1446	; 0x5a6
 800d3b8:	2212      	movs	r2, #18
 800d3ba:	f7ff ffbb 	bl	800d334 <memcpy.isra.0>
 800d3be:	f104 016a 	add.w	r1, r4, #106	; 0x6a
 800d3c2:	f504 60b7 	add.w	r0, r4, #1464	; 0x5b8
 800d3c6:	2240      	movs	r2, #64	; 0x40
 800d3c8:	f7ff ffb4 	bl	800d334 <memcpy.isra.0>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	f884 3654 	strb.w	r3, [r4, #1620]	; 0x654
 800d3d2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d3d6:	f204 6055 	addw	r0, r4, #1621	; 0x655
 800d3da:	2206      	movs	r2, #6
 800d3dc:	f7ff ffaa 	bl	800d334 <memcpy.isra.0>
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	f204 605b 	addw	r0, r4, #1627	; 0x65b
 800d3e6:	2204      	movs	r2, #4
 800d3e8:	f7ff ffa4 	bl	800d334 <memcpy.isra.0>
 800d3ec:	2304      	movs	r3, #4
 800d3ee:	f884 3639 	strb.w	r3, [r4, #1593]	; 0x639
 800d3f2:	f104 01ae 	add.w	r1, r4, #174	; 0xae
 800d3f6:	f204 6066 	addw	r0, r4, #1638	; 0x666
 800d3fa:	2206      	movs	r2, #6
 800d3fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d400:	f7ff bf98 	b.w	800d334 <memcpy.isra.0>
 800d404:	f803 1b01 	strb.w	r1, [r3], #1
 800d408:	e7a6      	b.n	800d358 <ArtNetNode::FillPollReply()+0x10>
 800d40a:	bf00      	nop
 800d40c:	200006e0 	andcs	r0, r0, r0, ror #13
 800d410:	0801c01b 	stmdaeq	r1, {r0, r1, r3, r4, lr, pc}
 800d414:	0801c260 	stmdaeq	r1, {r5, r6, r9, lr, pc}
 800d418:	0801c25c 	stmdaeq	r1, {r2, r3, r4, r6, r9, lr, pc}
 800d41c:	0801c25e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r9, lr, pc}

0800d420 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>:
 800d420:	1a8a      	subs	r2, r1, r2
 800d422:	2941      	cmp	r1, #65	; 0x41
 800d424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d428:	4605      	mov	r5, r0
 800d42a:	460e      	mov	r6, r1
 800d42c:	461f      	mov	r7, r3
 800d42e:	eb00 0402 	add.w	r4, r0, r2
 800d432:	d90e      	bls.n	800d452 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x32>
 800d434:	2300      	movs	r3, #0
 800d436:	f884 363a 	strb.w	r3, [r4, #1594]	; 0x63a
 800d43a:	f884 3642 	strb.w	r3, [r4, #1602]	; 0x642
 800d43e:	f884 3661 	strb.w	r3, [r4, #1633]	; 0x661
 800d442:	f884 364a 	strb.w	r3, [r4, #1610]	; 0x64a
 800d446:	f884 363e 	strb.w	r3, [r4, #1598]	; 0x63e
 800d44a:	f884 3646 	strb.w	r3, [r4, #1606]	; 0x646
 800d44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d452:	f04f 0928 	mov.w	r9, #40	; 0x28
 800d456:	fb09 0901 	mla	r9, r9, r1, r0
 800d45a:	f8d9 3a40 	ldr.w	r3, [r9, #2624]	; 0xa40
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d115      	bne.n	800d48e <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x6e>
 800d462:	6980      	ldr	r0, [r0, #24]
 800d464:	f899 8a23 	ldrb.w	r8, [r9, #2595]	; 0xa23
 800d468:	6803      	ldr	r3, [r0, #0]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	4798      	blx	r3
 800d46e:	2328      	movs	r3, #40	; 0x28
 800d470:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800d474:	f008 0876 	and.w	r8, r8, #118	; 0x76
 800d478:	fb03 5306 	mla	r3, r3, r6, r5
 800d47c:	ea40 0808 	orr.w	r8, r0, r8
 800d480:	f010 0001 	ands.w	r0, r0, #1
 800d484:	bf08      	it	eq
 800d486:	f8c9 0a40 	streq.w	r0, [r9, #2624]	; 0xa40
 800d48a:	f883 8a23 	strb.w	r8, [r3, #2595]	; 0xa23
 800d48e:	2300      	movs	r3, #0
 800d490:	f884 363a 	strb.w	r3, [r4, #1594]	; 0x63a
 800d494:	2328      	movs	r3, #40	; 0x28
 800d496:	fb03 5306 	mla	r3, r3, r6, r5
 800d49a:	f893 3a24 	ldrb.w	r3, [r3, #2596]	; 0xa24
 800d49e:	b12b      	cbz	r3, 800d4ac <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x8c>
 800d4a0:	2380      	movs	r3, #128	; 0x80
 800d4a2:	f884 363a 	strb.w	r3, [r4, #1594]	; 0x63a
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	603b      	str	r3, [r7, #0]
 800d4ac:	2328      	movs	r3, #40	; 0x28
 800d4ae:	fb03 5306 	mla	r3, r3, r6, r5
 800d4b2:	eb05 1106 	add.w	r1, r5, r6, lsl #4
 800d4b6:	f893 2a23 	ldrb.w	r2, [r3, #2595]	; 0xa23
 800d4ba:	f884 2642 	strb.w	r2, [r4, #1602]	; 0x642
 800d4be:	f893 2a3c 	ldrb.w	r2, [r3, #2620]	; 0xa3c
 800d4c2:	2a00      	cmp	r2, #0
 800d4c4:	bf14      	ite	ne
 800d4c6:	2240      	movne	r2, #64	; 0x40
 800d4c8:	22c0      	moveq	r2, #192	; 0xc0
 800d4ca:	f884 2661 	strb.w	r2, [r4, #1633]	; 0x661
 800d4ce:	f893 3a22 	ldrb.w	r3, [r3, #2594]	; 0xa22
 800d4d2:	f884 364a 	strb.w	r3, [r4, #1610]	; 0x64a
 800d4d6:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800d4da:	f891 3474 	ldrb.w	r3, [r1, #1140]	; 0x474
 800d4de:	b12b      	cbz	r3, 800d4ec <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0xcc>
 800d4e0:	2340      	movs	r3, #64	; 0x40
 800d4e2:	f884 363a 	strb.w	r3, [r4, #1594]	; 0x63a
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	603b      	str	r3, [r7, #0]
 800d4ec:	f891 3473 	ldrb.w	r3, [r1, #1139]	; 0x473
 800d4f0:	f884 363e 	strb.w	r3, [r4, #1598]	; 0x63e
 800d4f4:	f891 3472 	ldrb.w	r3, [r1, #1138]	; 0x472
 800d4f8:	e7a7      	b.n	800d44a <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x2a>
	...

0800d4fc <ArtNetNode::SendPollRelply(bool)>:
 800d4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d500:	4604      	mov	r4, r0
 800d502:	b087      	sub	sp, #28
 800d504:	b941      	cbnz	r1, 800d518 <ArtNetNode::SendPollRelply(bool)+0x1c>
 800d506:	f890 3a11 	ldrb.w	r3, [r0, #2577]	; 0xa11
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	bf02      	ittt	eq
 800d50e:	f8d0 3a00 	ldreq.w	r3, [r0, #2560]	; 0xa00
 800d512:	3301      	addeq	r3, #1
 800d514:	f8c0 3a00 	streq.w	r3, [r0, #2560]	; 0xa00
 800d518:	f894 30ab 	ldrb.w	r3, [r4, #171]	; 0xab
 800d51c:	f884 35a3 	strb.w	r3, [r4, #1443]	; 0x5a3
 800d520:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 800d524:	f884 3660 	strb.w	r3, [r4, #1632]	; 0x660
 800d528:	2601      	movs	r6, #1
 800d52a:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
 800d52e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 800d5d0 <ArtNetNode::SendPollRelply(bool)+0xd4>
 800d532:	f884 3665 	strb.w	r3, [r4, #1637]	; 0x665
 800d536:	f104 0835 	add.w	r8, r4, #53	; 0x35
 800d53a:	4635      	mov	r5, r6
 800d53c:	f04f 0b00 	mov.w	fp, #0
 800d540:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800d544:	f884 359e 	strb.w	r3, [r4, #1438]	; 0x59e
 800d548:	ebb6 0f85 	cmp.w	r6, r5, lsl #2
 800d54c:	f898 3011 	ldrb.w	r3, [r8, #17]
 800d550:	f884 359f 	strb.w	r3, [r4, #1439]	; 0x59f
 800d554:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800d558:	bf8c      	ite	hi
 800d55a:	f04f 0901 	movhi.w	r9, #1
 800d55e:	f04f 0904 	movls.w	r9, #4
 800d562:	f884 565f 	strb.w	r5, [r4, #1631]	; 0x65f
 800d566:	f8cd b014 	str.w	fp, [sp, #20]
 800d56a:	4617      	mov	r7, r2
 800d56c:	4491      	add	r9, r2
 800d56e:	4639      	mov	r1, r7
 800d570:	ab05      	add	r3, sp, #20
 800d572:	4620      	mov	r0, r4
 800d574:	3701      	adds	r7, #1
 800d576:	9203      	str	r2, [sp, #12]
 800d578:	f7ff ff52 	bl	800d420 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>
 800d57c:	454f      	cmp	r7, r9
 800d57e:	9a03      	ldr	r2, [sp, #12]
 800d580:	d1f5      	bne.n	800d56e <ArtNetNode::SendPollRelply(bool)+0x72>
 800d582:	9b05      	ldr	r3, [sp, #20]
 800d584:	f884 3639 	strb.w	r3, [r4, #1593]	; 0x639
 800d588:	f604 13ad 	addw	r3, r4, #2477	; 0x9ad
 800d58c:	9301      	str	r3, [sp, #4]
 800d58e:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	4652      	mov	r2, sl
 800d596:	f894 3a10 	ldrb.w	r3, [r4, #2576]	; 0xa10
 800d59a:	2140      	movs	r1, #64	; 0x40
 800d59c:	f504 60bf 	add.w	r0, r4, #1528	; 0x5f8
 800d5a0:	f7fc ffa2 	bl	800a4e8 <snprintf>
 800d5a4:	f641 1336 	movw	r3, #6454	; 0x1936
 800d5a8:	9300      	str	r3, [sp, #0]
 800d5aa:	7820      	ldrb	r0, [r4, #0]
 800d5ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5ae:	22ef      	movs	r2, #239	; 0xef
 800d5b0:	f204 518c 	addw	r1, r4, #1420	; 0x58c
 800d5b4:	3501      	adds	r5, #1
 800d5b6:	f006 fe73 	bl	80142a0 <udp_send>
 800d5ba:	2d12      	cmp	r5, #18
 800d5bc:	f106 0604 	add.w	r6, r6, #4
 800d5c0:	d1be      	bne.n	800d540 <ArtNetNode::SendPollRelply(bool)+0x44>
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	f884 3a17 	strb.w	r3, [r4, #2583]	; 0xa17
 800d5c8:	b007      	add	sp, #28
 800d5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ce:	bf00      	nop
 800d5d0:	0801c008 	stmdaeq	r1, {r3, lr, pc}

0800d5d4 <ArtNetNode::HandlePoll()>:
 800d5d4:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
 800d5d8:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800d5dc:	f880 3a12 	strb.w	r3, [r0, #2578]	; 0xa12
 800d5e0:	f012 0304 	ands.w	r3, r2, #4
 800d5e4:	b410      	push	{r4}
 800d5e6:	d02f      	beq.n	800d648 <ArtNetNode::HandlePoll()+0x74>
 800d5e8:	f8d0 1a08 	ldr.w	r1, [r0, #2568]	; 0xa08
 800d5ec:	f890 4a14 	ldrb.w	r4, [r0, #2580]	; 0xa14
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	f880 3a13 	strb.w	r3, [r0, #2579]	; 0xa13
 800d5f6:	b979      	cbnz	r1, 800d618 <ArtNetNode::HandlePoll()+0x44>
 800d5f8:	f8d0 3584 	ldr.w	r3, [r0, #1412]	; 0x584
 800d5fc:	f8c0 3a08 	str.w	r3, [r0, #2568]	; 0xa08
 800d600:	b19c      	cbz	r4, 800d62a <ArtNetNode::HandlePoll()+0x56>
 800d602:	f890 3a1c 	ldrb.w	r3, [r0, #2588]	; 0xa1c
 800d606:	f890 20c5 	ldrb.w	r2, [r0, #197]	; 0xc5
 800d60a:	4293      	cmp	r3, r2
 800d60c:	bf28      	it	cs
 800d60e:	4613      	movcs	r3, r2
 800d610:	f880 3a1c 	strb.w	r3, [r0, #2588]	; 0xa1c
 800d614:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d616:	e010      	b.n	800d63a <ArtNetNode::HandlePoll()+0x66>
 800d618:	2c00      	cmp	r4, #0
 800d61a:	d1f2      	bne.n	800d602 <ArtNetNode::HandlePoll()+0x2e>
 800d61c:	f8d0 4584 	ldr.w	r4, [r0, #1412]	; 0x584
 800d620:	42a1      	cmp	r1, r4
 800d622:	d002      	beq.n	800d62a <ArtNetNode::HandlePoll()+0x56>
 800d624:	f880 3a14 	strb.w	r3, [r0, #2580]	; 0xa14
 800d628:	e7eb      	b.n	800d602 <ArtNetNode::HandlePoll()+0x2e>
 800d62a:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 800d62e:	f880 3a1c 	strb.w	r3, [r0, #2588]	; 0xa1c
 800d632:	0713      	lsls	r3, r2, #28
 800d634:	d5ee      	bpl.n	800d614 <ArtNetNode::HandlePoll()+0x40>
 800d636:	f8d0 3584 	ldr.w	r3, [r0, #1412]	; 0x584
 800d63a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d63e:	f8c0 3a04 	str.w	r3, [r0, #2564]	; 0xa04
 800d642:	2101      	movs	r1, #1
 800d644:	f7ff bf5a 	b.w	800d4fc <ArtNetNode::SendPollRelply(bool)>
 800d648:	f880 3a13 	strb.w	r3, [r0, #2579]	; 0xa13
 800d64c:	e7f5      	b.n	800d63a <ArtNetNode::HandlePoll()+0x66>

0800d64e <memcpy.isra.0>:
 800d64e:	3801      	subs	r0, #1
 800d650:	440a      	add	r2, r1
 800d652:	4291      	cmp	r1, r2
 800d654:	d100      	bne.n	800d658 <memcpy.isra.0+0xa>
 800d656:	4770      	bx	lr
 800d658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d65c:	f800 3f01 	strb.w	r3, [r0, #1]!
 800d660:	e7f7      	b.n	800d652 <memcpy.isra.0+0x4>

0800d662 <ArtNetNode::SetRmd(unsigned int, bool)>:
 800d662:	2328      	movs	r3, #40	; 0x28
 800d664:	fb03 0301 	mla	r3, r3, r1, r0
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	f893 6a3c 	ldrb.w	r6, [r3, #2620]	; 0xa3c
 800d66e:	f883 2a3c 	strb.w	r2, [r3, #2620]	; 0xa3c
 800d672:	4296      	cmp	r6, r2
 800d674:	460d      	mov	r5, r1
 800d676:	4614      	mov	r4, r2
 800d678:	d00e      	beq.n	800d698 <ArtNetNode::SetRmd(unsigned int, bool)+0x36>
 800d67a:	f890 3a11 	ldrb.w	r3, [r0, #2577]	; 0xa11
 800d67e:	2b02      	cmp	r3, #2
 800d680:	d10a      	bne.n	800d698 <ArtNetNode::SetRmd(unsigned int, bool)+0x36>
 800d682:	69c0      	ldr	r0, [r0, #28]
 800d684:	b110      	cbz	r0, 800d68c <ArtNetNode::SetRmd(unsigned int, bool)+0x2a>
 800d686:	6803      	ldr	r3, [r0, #0]
 800d688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d68a:	4798      	blx	r3
 800d68c:	4621      	mov	r1, r4
 800d68e:	4628      	mov	r0, r5
 800d690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d694:	f008 beec 	b.w	8016470 <artnet::display_rdm_enabled(unsigned int, bool)>
 800d698:	bd70      	pop	{r4, r5, r6, pc}

0800d69a <ArtNetNode::HandleTodData()>:
 800d69a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d69e:	f890 30c4 	ldrb.w	r3, [r0, #196]	; 0xc4
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	d110      	bne.n	800d6ca <ArtNetNode::HandleTodData()+0x30>
 800d6a8:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
 800d6ac:	f890 70cf 	ldrb.w	r7, [r0, #207]	; 0xcf
 800d6b0:	f500 55a3 	add.w	r5, r0, #5216	; 0x1460
 800d6b4:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800d6b8:	3510      	adds	r5, #16
 800d6ba:	2600      	movs	r6, #0
 800d6bc:	792b      	ldrb	r3, [r5, #4]
 800d6be:	b933      	cbnz	r3, 800d6ce <ArtNetNode::HandleTodData()+0x34>
 800d6c0:	3601      	adds	r6, #1
 800d6c2:	2e42      	cmp	r6, #66	; 0x42
 800d6c4:	f105 0510 	add.w	r5, r5, #16
 800d6c8:	d1f8      	bne.n	800d6bc <ArtNetNode::HandleTodData()+0x22>
 800d6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ce:	882b      	ldrh	r3, [r5, #0]
 800d6d0:	42bb      	cmp	r3, r7
 800d6d2:	d1f5      	bne.n	800d6c0 <ArtNetNode::HandleTodData()+0x26>
 800d6d4:	f104 09d4 	add.w	r9, r4, #212	; 0xd4
 800d6d8:	f04f 0800 	mov.w	r8, #0
 800d6dc:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
 800d6e0:	4543      	cmp	r3, r8
 800d6e2:	d9ed      	bls.n	800d6c0 <ArtNetNode::HandleTodData()+0x26>
 800d6e4:	68e0      	ldr	r0, [r4, #12]
 800d6e6:	6803      	ldr	r3, [r0, #0]
 800d6e8:	464a      	mov	r2, r9
 800d6ea:	699b      	ldr	r3, [r3, #24]
 800d6ec:	4631      	mov	r1, r6
 800d6ee:	4798      	blx	r3
 800d6f0:	f108 0801 	add.w	r8, r8, #1
 800d6f4:	f109 0906 	add.w	r9, r9, #6
 800d6f8:	e7f0      	b.n	800d6dc <ArtNetNode::HandleTodData()+0x42>
	...

0800d6fc <ArtNetNode::SendTod(unsigned int)>:
 800d6fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d700:	f100 09b8 	add.w	r9, r0, #184	; 0xb8
 800d704:	4604      	mov	r4, r0
 800d706:	460f      	mov	r7, r1
 800d708:	ea4f 0891 	mov.w	r8, r1, lsr #2
 800d70c:	2208      	movs	r2, #8
 800d70e:	4648      	mov	r0, r9
 800d710:	492c      	ldr	r1, [pc, #176]	; (800d7c4 <ArtNetNode::SendTod(unsigned int)+0xc8>)
 800d712:	f7ff ff9c 	bl	800d64e <memcpy.isra.0>
 800d716:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800d71a:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 800d71e:	230e      	movs	r3, #14
 800d720:	2500      	movs	r5, #0
 800d722:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
 800d726:	68e0      	ldr	r0, [r4, #12]
 800d728:	f884 50c2 	strb.w	r5, [r4, #194]	; 0xc2
 800d72c:	2301      	movs	r3, #1
 800d72e:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
 800d732:	6803      	ldr	r3, [r0, #0]
 800d734:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
 800d738:	4639      	mov	r1, r7
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	4798      	blx	r3
 800d73e:	f007 0303 	and.w	r3, r7, #3
 800d742:	3301      	adds	r3, #1
 800d744:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 800d748:	f108 0301 	add.w	r3, r8, #1
 800d74c:	44a0      	add	r8, r4
 800d74e:	f884 50c6 	strb.w	r5, [r4, #198]	; 0xc6
 800d752:	f884 50c7 	strb.w	r5, [r4, #199]	; 0xc7
 800d756:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
 800d75a:	f884 50c9 	strb.w	r5, [r4, #201]	; 0xc9
 800d75e:	f884 50ca 	strb.w	r5, [r4, #202]	; 0xca
 800d762:	f884 50cb 	strb.w	r5, [r4, #203]	; 0xcb
 800d766:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 800d76a:	f898 3036 	ldrb.w	r3, [r8, #54]	; 0x36
 800d76e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 800d772:	2328      	movs	r3, #40	; 0x28
 800d774:	fb03 4307 	mla	r3, r3, r7, r4
 800d778:	f884 50ce 	strb.w	r5, [r4, #206]	; 0xce
 800d77c:	f893 3a22 	ldrb.w	r3, [r3, #2594]	; 0xa22
 800d780:	f884 30cf 	strb.w	r3, [r4, #207]	; 0xcf
 800d784:	b2c6      	uxtb	r6, r0
 800d786:	68e0      	ldr	r0, [r4, #12]
 800d788:	f884 50d0 	strb.w	r5, [r4, #208]	; 0xd0
 800d78c:	f884 60d1 	strb.w	r6, [r4, #209]	; 0xd1
 800d790:	f884 50d2 	strb.w	r5, [r4, #210]	; 0xd2
 800d794:	f884 60d3 	strb.w	r6, [r4, #211]	; 0xd3
 800d798:	6803      	ldr	r3, [r0, #0]
 800d79a:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
 800d79e:	4639      	mov	r1, r7
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	4798      	blx	r3
 800d7a4:	2306      	movs	r3, #6
 800d7a6:	fb03 f206 	mul.w	r2, r3, r6
 800d7aa:	f641 1336 	movw	r3, #6454	; 0x1936
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	7820      	ldrb	r0, [r4, #0]
 800d7b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7b4:	321c      	adds	r2, #28
 800d7b6:	4649      	mov	r1, r9
 800d7b8:	f006 fd72 	bl	80142a0 <udp_send>
 800d7bc:	b003      	add	sp, #12
 800d7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7c2:	bf00      	nop
 800d7c4:	0801c023 	stmdaeq	r1, {r0, r1, r5, lr, pc}

0800d7c8 <ArtNetNode::HandleTodControl()>:
 800d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ca:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
 800d7ce:	f890 70cf 	ldrb.w	r7, [r0, #207]	; 0xcf
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800d7d8:	4606      	mov	r6, r0
 800d7da:	2500      	movs	r5, #0
 800d7dc:	f896 3a3c 	ldrb.w	r3, [r6, #2620]	; 0xa3c
 800d7e0:	b34b      	cbz	r3, 800d836 <ArtNetNode::HandleTodControl()+0x6e>
 800d7e2:	f8b6 3a20 	ldrh.w	r3, [r6, #2592]	; 0xa20
 800d7e6:	42bb      	cmp	r3, r7
 800d7e8:	d125      	bne.n	800d836 <ArtNetNode::HandleTodControl()+0x6e>
 800d7ea:	f896 3a24 	ldrb.w	r3, [r6, #2596]	; 0xa24
 800d7ee:	b313      	cbz	r3, 800d836 <ArtNetNode::HandleTodControl()+0x6e>
 800d7f0:	f896 3a45 	ldrb.w	r3, [r6, #2629]	; 0xa45
 800d7f4:	b13b      	cbz	r3, 800d806 <ArtNetNode::HandleTodControl()+0x3e>
 800d7f6:	f894 39ac 	ldrb.w	r3, [r4, #2476]	; 0x9ac
 800d7fa:	b923      	cbnz	r3, 800d806 <ArtNetNode::HandleTodControl()+0x3e>
 800d7fc:	6860      	ldr	r0, [r4, #4]
 800d7fe:	6803      	ldr	r3, [r0, #0]
 800d800:	4629      	mov	r1, r5
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	4798      	blx	r3
 800d806:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d104      	bne.n	800d818 <ArtNetNode::HandleTodControl()+0x50>
 800d80e:	68e0      	ldr	r0, [r4, #12]
 800d810:	6803      	ldr	r3, [r0, #0]
 800d812:	4629      	mov	r1, r5
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	4798      	blx	r3
 800d818:	4629      	mov	r1, r5
 800d81a:	4620      	mov	r0, r4
 800d81c:	f7ff ff6e 	bl	800d6fc <ArtNetNode::SendTod(unsigned int)>
 800d820:	f896 3a45 	ldrb.w	r3, [r6, #2629]	; 0xa45
 800d824:	b13b      	cbz	r3, 800d836 <ArtNetNode::HandleTodControl()+0x6e>
 800d826:	f894 39ac 	ldrb.w	r3, [r4, #2476]	; 0x9ac
 800d82a:	b923      	cbnz	r3, 800d836 <ArtNetNode::HandleTodControl()+0x6e>
 800d82c:	6860      	ldr	r0, [r4, #4]
 800d82e:	6803      	ldr	r3, [r0, #0]
 800d830:	4629      	mov	r1, r5
 800d832:	689b      	ldr	r3, [r3, #8]
 800d834:	4798      	blx	r3
 800d836:	3501      	adds	r5, #1
 800d838:	2d42      	cmp	r5, #66	; 0x42
 800d83a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800d83e:	d1cd      	bne.n	800d7dc <ArtNetNode::HandleTodControl()+0x14>
 800d840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d842 <ArtNetNode::HandleTodRequest()>:
 800d842:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d846:	4605      	mov	r5, r0
 800d848:	f06f 0ace 	mvn.w	sl, #206	; 0xce
 800d84c:	f815 8fcf 	ldrb.w	r8, [r5, #207]!
 800d850:	4604      	mov	r4, r0
 800d852:	f008 081f 	and.w	r8, r8, #31
 800d856:	ebaa 0a00 	sub.w	sl, sl, r0
 800d85a:	eb0a 0305 	add.w	r3, sl, r5
 800d85e:	4598      	cmp	r8, r3
 800d860:	4626      	mov	r6, r4
 800d862:	dc01      	bgt.n	800d868 <ArtNetNode::HandleTodRequest()+0x26>
 800d864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d868:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
 800d86c:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 800d870:	2700      	movs	r7, #0
 800d872:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
 800d876:	f896 3a3c 	ldrb.w	r3, [r6, #2620]	; 0xa3c
 800d87a:	b153      	cbz	r3, 800d892 <ArtNetNode::HandleTodRequest()+0x50>
 800d87c:	f8b6 3a20 	ldrh.w	r3, [r6, #2592]	; 0xa20
 800d880:	454b      	cmp	r3, r9
 800d882:	d106      	bne.n	800d892 <ArtNetNode::HandleTodRequest()+0x50>
 800d884:	f896 3a24 	ldrb.w	r3, [r6, #2596]	; 0xa24
 800d888:	b11b      	cbz	r3, 800d892 <ArtNetNode::HandleTodRequest()+0x50>
 800d88a:	4639      	mov	r1, r7
 800d88c:	4620      	mov	r0, r4
 800d88e:	f7ff ff35 	bl	800d6fc <ArtNetNode::SendTod(unsigned int)>
 800d892:	3701      	adds	r7, #1
 800d894:	2f42      	cmp	r7, #66	; 0x42
 800d896:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800d89a:	d1ec      	bne.n	800d876 <ArtNetNode::HandleTodRequest()+0x34>
 800d89c:	e7dd      	b.n	800d85a <ArtNetNode::HandleTodRequest()+0x18>
	...

0800d8a0 <ArtNetNode::SendTodRequest(unsigned int)>:
 800d8a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	68c0      	ldr	r0, [r0, #12]
 800d8a6:	6803      	ldr	r3, [r0, #0]
 800d8a8:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	460d      	mov	r5, r1
 800d8b0:	4798      	blx	r3
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	491d      	ldr	r1, [pc, #116]	; (800d92c <ArtNetNode::SendTodRequest(unsigned int)+0x8c>)
 800d8b6:	2208      	movs	r2, #8
 800d8b8:	f7ff fec9 	bl	800d64e <memcpy.isra.0>
 800d8bc:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800d8c0:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 800d8c4:	220e      	movs	r2, #14
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	f884 20c3 	strb.w	r2, [r4, #195]	; 0xc3
 800d8cc:	eb04 0295 	add.w	r2, r4, r5, lsr #2
 800d8d0:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
 800d8d4:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
 800d8d8:	f884 30c6 	strb.w	r3, [r4, #198]	; 0xc6
 800d8dc:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
 800d8e0:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
 800d8e4:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
 800d8e8:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
 800d8ec:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 800d8f0:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 800d8f4:	f205 1547 	addw	r5, r5, #327	; 0x147
 800d8f8:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800d8fc:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 800d900:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800d904:	2301      	movs	r3, #1
 800d906:	f884 20cd 	strb.w	r2, [r4, #205]	; 0xcd
 800d90a:	f884 30cf 	strb.w	r3, [r4, #207]	; 0xcf
 800d90e:	78ab      	ldrb	r3, [r5, #2]
 800d910:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
 800d914:	f641 1336 	movw	r3, #6454	; 0x1936
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	7820      	ldrb	r0, [r4, #0]
 800d91c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d91e:	2219      	movs	r2, #25
 800d920:	4631      	mov	r1, r6
 800d922:	f006 fcbd 	bl	80142a0 <udp_send>
 800d926:	b002      	add	sp, #8
 800d928:	bd70      	pop	{r4, r5, r6, pc}
 800d92a:	bf00      	nop
 800d92c:	0801c023 	stmdaeq	r1, {r0, r1, r5, lr, pc}

0800d930 <ArtNetNode::HandleRdm()>:
 800d930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d934:	f890 70c4 	ldrb.w	r7, [r0, #196]	; 0xc4
 800d938:	2f01      	cmp	r7, #1
 800d93a:	4604      	mov	r4, r0
 800d93c:	d136      	bne.n	800d9ac <ArtNetNode::HandleRdm()+0x7c>
 800d93e:	f890 20cd 	ldrb.w	r2, [r0, #205]	; 0xcd
 800d942:	f890 30cf 	ldrb.w	r3, [r0, #207]	; 0xcf
 800d946:	f100 0ab8 	add.w	sl, r0, #184	; 0xb8
 800d94a:	ea43 2b02 	orr.w	fp, r3, r2, lsl #8
 800d94e:	4605      	mov	r5, r0
 800d950:	2600      	movs	r6, #0
 800d952:	f100 08d0 	add.w	r8, r0, #208	; 0xd0
 800d956:	f895 3a3c 	ldrb.w	r3, [r5, #2620]	; 0xa3c
 800d95a:	b313      	cbz	r3, 800d9a2 <ArtNetNode::HandleRdm()+0x72>
 800d95c:	f8b5 3a20 	ldrh.w	r3, [r5, #2592]	; 0xa20
 800d960:	455b      	cmp	r3, fp
 800d962:	d11e      	bne.n	800d9a2 <ArtNetNode::HandleRdm()+0x72>
 800d964:	f895 3a24 	ldrb.w	r3, [r5, #2596]	; 0xa24
 800d968:	b1db      	cbz	r3, 800d9a2 <ArtNetNode::HandleRdm()+0x72>
 800d96a:	68e0      	ldr	r0, [r4, #12]
 800d96c:	6803      	ldr	r3, [r0, #0]
 800d96e:	4642      	mov	r2, r8
 800d970:	69db      	ldr	r3, [r3, #28]
 800d972:	4631      	mov	r1, r6
 800d974:	4798      	blx	r3
 800d976:	b1a0      	cbz	r0, 800d9a2 <ArtNetNode::HandleRdm()+0x72>
 800d978:	f884 70c4 	strb.w	r7, [r4, #196]	; 0xc4
 800d97c:	f890 9002 	ldrb.w	r9, [r0, #2]
 800d980:	1c41      	adds	r1, r0, #1
 800d982:	f109 0201 	add.w	r2, r9, #1
 800d986:	4640      	mov	r0, r8
 800d988:	f7ff fe61 	bl	800d64e <memcpy.isra.0>
 800d98c:	f641 1336 	movw	r3, #6454	; 0x1936
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	7820      	ldrb	r0, [r4, #0]
 800d994:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
 800d998:	f109 0219 	add.w	r2, r9, #25
 800d99c:	4651      	mov	r1, sl
 800d99e:	f006 fc7f 	bl	80142a0 <udp_send>
 800d9a2:	3601      	adds	r6, #1
 800d9a4:	2e42      	cmp	r6, #66	; 0x42
 800d9a6:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800d9aa:	d1d4      	bne.n	800d956 <ArtNetNode::HandleRdm()+0x26>
 800d9ac:	b003      	add	sp, #12
 800d9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9b2 <ArtNetNode::SetRdmUID(unsigned char const*, bool)>:
 800d9b2:	b538      	push	{r3, r4, r5, lr}
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	4615      	mov	r5, r2
 800d9b8:	30ae      	adds	r0, #174	; 0xae
 800d9ba:	2206      	movs	r2, #6
 800d9bc:	f7ff fe47 	bl	800d64e <memcpy.isra.0>
 800d9c0:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
 800d9c4:	b125      	cbz	r5, 800d9d0 <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x1e>
 800d9c6:	f043 0310 	orr.w	r3, r3, #16
 800d9ca:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 800d9ce:	bd38      	pop	{r3, r4, r5, pc}
 800d9d0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800d9d4:	e7f9      	b.n	800d9ca <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x18>
	...

0800d9d8 <ArtNetNode::HandleRdmIn()>:
 800d9d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9dc:	f500 55a3 	add.w	r5, r0, #5216	; 0x1460
 800d9e0:	2600      	movs	r6, #0
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	f100 08b8 	add.w	r8, r0, #184	; 0xb8
 800d9e8:	3512      	adds	r5, #18
 800d9ea:	f100 09d0 	add.w	r9, r0, #208	; 0xd0
 800d9ee:	f100 0abf 	add.w	sl, r0, #191	; 0xbf
 800d9f2:	4637      	mov	r7, r6
 800d9f4:	78ab      	ldrb	r3, [r5, #2]
 800d9f6:	b37b      	cbz	r3, 800da58 <ArtNetNode::HandleRdmIn()+0x80>
 800d9f8:	68e0      	ldr	r0, [r4, #12]
 800d9fa:	6803      	ldr	r3, [r0, #0]
 800d9fc:	464a      	mov	r2, r9
 800d9fe:	6a1b      	ldr	r3, [r3, #32]
 800da00:	4631      	mov	r1, r6
 800da02:	4798      	blx	r3
 800da04:	b340      	cbz	r0, 800da58 <ArtNetNode::HandleRdmIn()+0x80>
 800da06:	4a1b      	ldr	r2, [pc, #108]	; (800da74 <ArtNetNode::HandleRdmIn()+0x9c>)
 800da08:	f104 03b7 	add.w	r3, r4, #183	; 0xb7
 800da0c:	4553      	cmp	r3, sl
 800da0e:	d12b      	bne.n	800da68 <ArtNetNode::HandleRdmIn()+0x90>
 800da10:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 800da14:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 800da18:	230e      	movs	r3, #14
 800da1a:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
 800da1e:	2301      	movs	r3, #1
 800da20:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
 800da24:	eb04 0396 	add.w	r3, r4, r6, lsr #2
 800da28:	f884 70c2 	strb.w	r7, [r4, #194]	; 0xc2
 800da2c:	f884 70c0 	strb.w	r7, [r4, #192]	; 0xc0
 800da30:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800da34:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 800da38:	f884 70ce 	strb.w	r7, [r4, #206]	; 0xce
 800da3c:	782b      	ldrb	r3, [r5, #0]
 800da3e:	f884 30cf 	strb.w	r3, [r4, #207]	; 0xcf
 800da42:	f641 1336 	movw	r3, #6454	; 0x1936
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	f8d5 3006 	ldr.w	r3, [r5, #6]
 800da4c:	7820      	ldrb	r0, [r4, #0]
 800da4e:	f240 1217 	movw	r2, #279	; 0x117
 800da52:	4641      	mov	r1, r8
 800da54:	f006 fc24 	bl	80142a0 <udp_send>
 800da58:	3601      	adds	r6, #1
 800da5a:	2e42      	cmp	r6, #66	; 0x42
 800da5c:	f105 0510 	add.w	r5, r5, #16
 800da60:	d1c8      	bne.n	800d9f4 <ArtNetNode::HandleRdmIn()+0x1c>
 800da62:	b002      	add	sp, #8
 800da64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da68:	f812 1b01 	ldrb.w	r1, [r2], #1
 800da6c:	f803 1f01 	strb.w	r1, [r3, #1]!
 800da70:	e7cc      	b.n	800da0c <ArtNetNode::HandleRdmIn()+0x34>
 800da72:	bf00      	nop
 800da74:	0801c02b 	stmdaeq	r1, {r0, r1, r3, r5, lr, pc}

0800da78 <ArtNetNode::HandleSync()>:
 800da78:	2301      	movs	r3, #1
 800da7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da7e:	f880 3a15 	strb.w	r3, [r0, #2581]	; 0xa15
 800da82:	4b1f      	ldr	r3, [pc, #124]	; (800db00 <ArtNetNode::HandleSync()+0x88>)
 800da84:	4f1f      	ldr	r7, [pc, #124]	; (800db04 <ArtNetNode::HandleSync()+0x8c>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800db08 <ArtNetNode::HandleSync()+0x90>
 800da8c:	f8c0 3a0c 	str.w	r3, [r0, #2572]	; 0xa0c
 800da90:	2500      	movs	r5, #0
 800da92:	4604      	mov	r4, r0
 800da94:	4606      	mov	r6, r0
 800da96:	46a9      	mov	r9, r5
 800da98:	f8d6 3a40 	ldr.w	r3, [r6, #2624]	; 0xa40
 800da9c:	bb3b      	cbnz	r3, 800daee <ArtNetNode::HandleSync()+0x76>
 800da9e:	f896 3a24 	ldrb.w	r3, [r6, #2596]	; 0xa24
 800daa2:	b323      	cbz	r3, 800daee <ArtNetNode::HandleSync()+0x76>
 800daa4:	f8d8 3000 	ldr.w	r3, [r8]
 800daa8:	6860      	ldr	r0, [r4, #4]
 800daaa:	07da      	lsls	r2, r3, #31
 800daac:	bf5c      	itt	pl
 800daae:	2301      	movpl	r3, #1
 800dab0:	f8c8 3000 	strpl.w	r3, [r8]
 800dab4:	6803      	ldr	r3, [r0, #0]
 800dab6:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800daba:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800dabe:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800dac2:	4629      	mov	r1, r5
 800dac4:	47d0      	blx	sl
 800dac6:	f896 3a45 	ldrb.w	r3, [r6, #2629]	; 0xa45
 800daca:	b93b      	cbnz	r3, 800dadc <ArtNetNode::HandleSync()+0x64>
 800dacc:	6860      	ldr	r0, [r4, #4]
 800dace:	6803      	ldr	r3, [r0, #0]
 800dad0:	4629      	mov	r1, r5
 800dad2:	689b      	ldr	r3, [r3, #8]
 800dad4:	4798      	blx	r3
 800dad6:	2301      	movs	r3, #1
 800dad8:	f886 3a45 	strb.w	r3, [r6, #2629]	; 0xa45
 800dadc:	f8d8 3000 	ldr.w	r3, [r8]
 800dae0:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800dae4:	07db      	lsls	r3, r3, #31
 800dae6:	bf5c      	itt	pl
 800dae8:	2301      	movpl	r3, #1
 800daea:	f8c8 3000 	strpl.w	r3, [r8]
 800daee:	3501      	adds	r5, #1
 800daf0:	2d42      	cmp	r5, #66	; 0x42
 800daf2:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800daf6:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800dafa:	d1cd      	bne.n	800da98 <ArtNetNode::HandleSync()+0x20>
 800dafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db00:	20010694 	mulcs	r1, r4, r6
 800db04:	20030000 	andcs	r0, r3, r0
 800db08:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800db0c <ArtNetNode::HandleTimeCode()>:
 800db0c:	4601      	mov	r1, r0
 800db0e:	6880      	ldr	r0, [r0, #8]
 800db10:	6803      	ldr	r3, [r0, #0]
 800db12:	31c6      	adds	r1, #198	; 0xc6
 800db14:	691b      	ldr	r3, [r3, #16]
 800db16:	4718      	bx	r3

0800db18 <ArtNetNode::HandleTimeSync()>:
 800db18:	b500      	push	{lr}
 800db1a:	b08b      	sub	sp, #44	; 0x2c
 800db1c:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 800db20:	9301      	str	r3, [sp, #4]
 800db22:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
 800db26:	9302      	str	r3, [sp, #8]
 800db28:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
 800db2c:	9303      	str	r3, [sp, #12]
 800db2e:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
 800db32:	9304      	str	r3, [sp, #16]
 800db34:	f890 30cb 	ldrb.w	r3, [r0, #203]	; 0xcb
 800db38:	f890 20cc 	ldrb.w	r2, [r0, #204]	; 0xcc
 800db3c:	9305      	str	r3, [sp, #20]
 800db3e:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
 800db42:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800db46:	9306      	str	r3, [sp, #24]
 800db48:	4b03      	ldr	r3, [pc, #12]	; (800db58 <ArtNetNode::HandleTimeSync()+0x40>)
 800db4a:	a901      	add	r1, sp, #4
 800db4c:	6818      	ldr	r0, [r3, #0]
 800db4e:	f00a fb33 	bl	80181b8 <Hardware::SetTime(tm const*)>
 800db52:	b00b      	add	sp, #44	; 0x2c
 800db54:	f85d fb04 	ldr.w	pc, [sp], #4
 800db58:	2001067c 	andcs	r0, r1, ip, ror r6

0800db5c <ArtNetNode::Print()>:
 800db5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db60:	2211      	movs	r2, #17
 800db62:	b087      	sub	sp, #28
 800db64:	4604      	mov	r4, r0
 800db66:	2104      	movs	r1, #4
 800db68:	483a      	ldr	r0, [pc, #232]	; (800dc54 <ArtNetNode::Print()+0xf8>)
 800db6a:	f7fc fc95 	bl	800a498 <printf>
 800db6e:	4b3a      	ldr	r3, [pc, #232]	; (800dc58 <ArtNetNode::Print()+0xfc>)
 800db70:	483a      	ldr	r0, [pc, #232]	; (800dc5c <ArtNetNode::Print()+0x100>)
 800db72:	7819      	ldrb	r1, [r3, #0]
 800db74:	785a      	ldrb	r2, [r3, #1]
 800db76:	f7fc fc8f 	bl	800a498 <printf>
 800db7a:	f104 0158 	add.w	r1, r4, #88	; 0x58
 800db7e:	4838      	ldr	r0, [pc, #224]	; (800dc60 <ArtNetNode::Print()+0x104>)
 800db80:	f7fc fc8a 	bl	800a498 <printf>
 800db84:	4837      	ldr	r0, [pc, #220]	; (800dc64 <ArtNetNode::Print()+0x108>)
 800db86:	f104 016a 	add.w	r1, r4, #106	; 0x6a
 800db8a:	f7fc fc85 	bl	800a498 <printf>
 800db8e:	f894 3a1a 	ldrb.w	r3, [r4, #2586]	; 0xa1a
 800db92:	b36b      	cbz	r3, 800dbf0 <ArtNetNode::Print()+0x94>
 800db94:	4834      	ldr	r0, [pc, #208]	; (800dc68 <ArtNetNode::Print()+0x10c>)
 800db96:	4f35      	ldr	r7, [pc, #212]	; (800dc6c <ArtNetNode::Print()+0x110>)
 800db98:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800dc88 <ArtNetNode::Print()+0x12c>
 800db9c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800dc8c <ArtNetNode::Print()+0x130>
 800dba0:	f7fc fc7a 	bl	800a498 <printf>
 800dba4:	4626      	mov	r6, r4
 800dba6:	2500      	movs	r5, #0
 800dba8:	2301      	movs	r3, #1
 800dbaa:	f10d 0216 	add.w	r2, sp, #22
 800dbae:	4629      	mov	r1, r5
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f7fe fd7d 	bl	800c6b0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800dbb6:	b1b0      	cbz	r0, 800dbe6 <ArtNetNode::Print()+0x8a>
 800dbb8:	f8d6 3a38 	ldr.w	r3, [r6, #2616]	; 0xa38
 800dbbc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	bf0c      	ite	eq
 800dbc4:	463b      	moveq	r3, r7
 800dbc6:	4643      	movne	r3, r8
 800dbc8:	4629      	mov	r1, r5
 800dbca:	4648      	mov	r0, r9
 800dbcc:	f7fc fc64 	bl	800a498 <printf>
 800dbd0:	f8d6 1a40 	ldr.w	r1, [r6, #2624]	; 0xa40
 800dbd4:	4a26      	ldr	r2, [pc, #152]	; (800dc70 <ArtNetNode::Print()+0x114>)
 800dbd6:	4b27      	ldr	r3, [pc, #156]	; (800dc74 <ArtNetNode::Print()+0x118>)
 800dbd8:	4827      	ldr	r0, [pc, #156]	; (800dc78 <ArtNetNode::Print()+0x11c>)
 800dbda:	2900      	cmp	r1, #0
 800dbdc:	bf0c      	ite	eq
 800dbde:	4611      	moveq	r1, r2
 800dbe0:	4619      	movne	r1, r3
 800dbe2:	f7fc fc59 	bl	800a498 <printf>
 800dbe6:	3501      	adds	r5, #1
 800dbe8:	2d42      	cmp	r5, #66	; 0x42
 800dbea:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800dbee:	d1db      	bne.n	800dba8 <ArtNetNode::Print()+0x4c>
 800dbf0:	f894 3a1b 	ldrb.w	r3, [r4, #2587]	; 0xa1b
 800dbf4:	b353      	cbz	r3, 800dc4c <ArtNetNode::Print()+0xf0>
 800dbf6:	4821      	ldr	r0, [pc, #132]	; (800dc7c <ArtNetNode::Print()+0x120>)
 800dbf8:	4f21      	ldr	r7, [pc, #132]	; (800dc80 <ArtNetNode::Print()+0x124>)
 800dbfa:	f7fc fc4d 	bl	800a498 <printf>
 800dbfe:	f504 56a3 	add.w	r6, r4, #5216	; 0x1460
 800dc02:	2500      	movs	r5, #0
 800dc04:	3618      	adds	r6, #24
 800dc06:	2300      	movs	r3, #0
 800dc08:	f10d 0216 	add.w	r2, sp, #22
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f7fe fd4e 	bl	800c6b0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800dc14:	b1b8      	cbz	r0, 800dc46 <ArtNetNode::Print()+0xea>
 800dc16:	012b      	lsls	r3, r5, #4
 800dc18:	58f3      	ldr	r3, [r6, r3]
 800dc1a:	b92b      	cbnz	r3, 800dc28 <ArtNetNode::Print()+0xcc>
 800dc1c:	4b19      	ldr	r3, [pc, #100]	; (800dc84 <ArtNetNode::Print()+0x128>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	69da      	ldr	r2, [r3, #28]
 800dc22:	695b      	ldr	r3, [r3, #20]
 800dc24:	ea63 0302 	orn	r3, r3, r2
 800dc28:	0e1a      	lsrs	r2, r3, #24
 800dc2a:	9202      	str	r2, [sp, #8]
 800dc2c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dc30:	9201      	str	r2, [sp, #4]
 800dc32:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dc36:	9200      	str	r2, [sp, #0]
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800dc3e:	4629      	mov	r1, r5
 800dc40:	4638      	mov	r0, r7
 800dc42:	f7fc fc29 	bl	800a498 <printf>
 800dc46:	3501      	adds	r5, #1
 800dc48:	2d42      	cmp	r5, #66	; 0x42
 800dc4a:	d1dc      	bne.n	800dc06 <ArtNetNode::Print()+0xaa>
 800dc4c:	b007      	add	sp, #28
 800dc4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc52:	bf00      	nop
 800dc54:	0801c048 	stmdaeq	r1, {r3, r6, lr, pc}
 800dc58:	0801c260 	stmdaeq	r1, {r5, r6, r9, lr, pc}
 800dc5c:	0801c056 	stmdaeq	r1, {r1, r2, r4, r6, lr, pc}
 800dc60:	0801c06b 	stmdaeq	r1, {r0, r1, r3, r5, r6, lr, pc}
 800dc64:	0801c07d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, lr, pc}
 800dc68:	0801c08f 	stmdaeq	r1, {r0, r1, r2, r3, r7, lr, pc}
 800dc6c:	0801c033 	stmdaeq	r1, {r0, r1, r4, r5, lr, pc}
 800dc70:	0801c03b 	stmdaeq	r1, {r0, r1, r3, r4, r5, lr, pc}
 800dc74:	0801c043 	stmdaeq	r1, {r0, r1, r6, lr, pc}
 800dc78:	0801c0ac 	stmdaeq	r1, {r2, r3, r5, r7, lr, pc}
 800dc7c:	0801c0b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, lr, pc}
 800dc80:	0801c0bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, lr, pc}
 800dc84:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 800dc88:	0801c037 	stmdaeq	r1, {r0, r1, r2, r4, r5, lr, pc}
 800dc8c:	0801c098 	stmdaeq	r1, {r3, r4, r7, lr, pc}

0800dc90 <memcmp>:
 800dc90:	4402      	add	r2, r0
 800dc92:	4290      	cmp	r0, r2
 800dc94:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800dc98:	d106      	bne.n	800dca8 <memcmp+0x18>
 800dc9a:	2000      	movs	r0, #0
 800dc9c:	4770      	bx	lr
 800dc9e:	3001      	adds	r0, #1
 800dca0:	4290      	cmp	r0, r2
 800dca2:	d102      	bne.n	800dcaa <memcmp+0x1a>
 800dca4:	2000      	movs	r0, #0
 800dca6:	e006      	b.n	800dcb6 <memcmp+0x26>
 800dca8:	b510      	push	{r4, lr}
 800dcaa:	7803      	ldrb	r3, [r0, #0]
 800dcac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dcb0:	42a3      	cmp	r3, r4
 800dcb2:	d0f4      	beq.n	800dc9e <memcmp+0xe>
 800dcb4:	1b18      	subs	r0, r3, r4
 800dcb6:	bd10      	pop	{r4, pc}

0800dcb8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800dcb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcba:	88c6      	ldrh	r6, [r0, #6]
 800dcbc:	8885      	ldrh	r5, [r0, #4]
 800dcbe:	42ae      	cmp	r6, r5
 800dcc0:	d216      	bcs.n	800dcf0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	6800      	ldr	r0, [r0, #0]
 800dcc6:	1bad      	subs	r5, r5, r6
 800dcc8:	4430      	add	r0, r6
 800dcca:	7a26      	ldrb	r6, [r4, #8]
 800dccc:	b923      	cbnz	r3, 800dcd8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800dcce:	b926      	cbnz	r6, 800dcda <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800dcd0:	9200      	str	r2, [sp, #0]
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4a09      	ldr	r2, [pc, #36]	; (800dcfc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800dcd6:	e003      	b.n	800dce0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800dcd8:	b166      	cbz	r6, 800dcf4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800dcda:	9200      	str	r2, [sp, #0]
 800dcdc:	4a08      	ldr	r2, [pc, #32]	; (800dd00 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800dcde:	460b      	mov	r3, r1
 800dce0:	4629      	mov	r1, r5
 800dce2:	f7fc fc01 	bl	800a4e8 <snprintf>
 800dce6:	4285      	cmp	r5, r0
 800dce8:	bfa2      	ittt	ge
 800dcea:	88e3      	ldrhge	r3, [r4, #6]
 800dcec:	181b      	addge	r3, r3, r0
 800dcee:	80e3      	strhge	r3, [r4, #6]
 800dcf0:	b002      	add	sp, #8
 800dcf2:	bd70      	pop	{r4, r5, r6, pc}
 800dcf4:	9200      	str	r2, [sp, #0]
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	4a02      	ldr	r2, [pc, #8]	; (800dd04 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800dcfa:	e7f1      	b.n	800dce0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800dcfc:	0801b161 	stmdaeq	r1, {r0, r5, r6, r8, ip, sp, pc}
 800dd00:	0801b158 	stmdaeq	r1, {r3, r4, r6, r8, ip, sp, pc}
 800dd04:	0801b162 	stmdaeq	r1, {r1, r5, r6, r8, ip, sp, pc}

0800dd08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800dd08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd0a:	88c6      	ldrh	r6, [r0, #6]
 800dd0c:	8885      	ldrh	r5, [r0, #4]
 800dd0e:	42ae      	cmp	r6, r5
 800dd10:	d216      	bcs.n	800dd40 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800dd12:	4604      	mov	r4, r0
 800dd14:	6800      	ldr	r0, [r0, #0]
 800dd16:	1bad      	subs	r5, r5, r6
 800dd18:	4430      	add	r0, r6
 800dd1a:	7a26      	ldrb	r6, [r4, #8]
 800dd1c:	b923      	cbnz	r3, 800dd28 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800dd1e:	b926      	cbnz	r6, 800dd2a <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800dd20:	9200      	str	r2, [sp, #0]
 800dd22:	460b      	mov	r3, r1
 800dd24:	4a09      	ldr	r2, [pc, #36]	; (800dd4c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800dd26:	e003      	b.n	800dd30 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800dd28:	b166      	cbz	r6, 800dd44 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800dd2a:	9200      	str	r2, [sp, #0]
 800dd2c:	4a08      	ldr	r2, [pc, #32]	; (800dd50 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800dd2e:	460b      	mov	r3, r1
 800dd30:	4629      	mov	r1, r5
 800dd32:	f7fc fbd9 	bl	800a4e8 <snprintf>
 800dd36:	4285      	cmp	r5, r0
 800dd38:	bfa2      	ittt	ge
 800dd3a:	88e3      	ldrhge	r3, [r4, #6]
 800dd3c:	181b      	addge	r3, r3, r0
 800dd3e:	80e3      	strhge	r3, [r4, #6]
 800dd40:	b002      	add	sp, #8
 800dd42:	bd70      	pop	{r4, r5, r6, pc}
 800dd44:	9200      	str	r2, [sp, #0]
 800dd46:	460b      	mov	r3, r1
 800dd48:	4a02      	ldr	r2, [pc, #8]	; (800dd54 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800dd4a:	e7f1      	b.n	800dd30 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800dd4c:	0801b174 	stmdaeq	r1, {r2, r4, r5, r6, r8, ip, sp, pc}
 800dd50:	0801b169 	stmdaeq	r1, {r0, r3, r5, r6, r8, ip, sp, pc}
 800dd54:	0801b175 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, ip, sp, pc}

0800dd58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800dd58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	8885      	ldrh	r5, [r0, #4]
 800dd5e:	88c1      	ldrh	r1, [r0, #6]
 800dd60:	42a9      	cmp	r1, r5
 800dd62:	d214      	bcs.n	800dd8e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800dd64:	4604      	mov	r4, r0
 800dd66:	6800      	ldr	r0, [r0, #0]
 800dd68:	1a6d      	subs	r5, r5, r1
 800dd6a:	4408      	add	r0, r1
 800dd6c:	7a21      	ldrb	r1, [r4, #8]
 800dd6e:	b91a      	cbnz	r2, 800dd78 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800dd70:	b919      	cbnz	r1, 800dd7a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800dd72:	4a0a      	ldr	r2, [pc, #40]	; (800dd9c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800dd74:	9100      	str	r1, [sp, #0]
 800dd76:	e002      	b.n	800dd7e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800dd78:	b159      	cbz	r1, 800dd92 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800dd7a:	9200      	str	r2, [sp, #0]
 800dd7c:	4a08      	ldr	r2, [pc, #32]	; (800dda0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800dd7e:	4629      	mov	r1, r5
 800dd80:	f7fc fbb2 	bl	800a4e8 <snprintf>
 800dd84:	4285      	cmp	r5, r0
 800dd86:	bfa2      	ittt	ge
 800dd88:	88e3      	ldrhge	r3, [r4, #6]
 800dd8a:	181b      	addge	r3, r3, r0
 800dd8c:	80e3      	strhge	r3, [r4, #6]
 800dd8e:	b003      	add	sp, #12
 800dd90:	bd30      	pop	{r4, r5, pc}
 800dd92:	2201      	movs	r2, #1
 800dd94:	9200      	str	r2, [sp, #0]
 800dd96:	4a03      	ldr	r2, [pc, #12]	; (800dda4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800dd98:	e7f1      	b.n	800dd7e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800dd9a:	bf00      	nop
 800dd9c:	0801b161 	stmdaeq	r1, {r0, r5, r6, r8, ip, sp, pc}
 800dda0:	0801b158 	stmdaeq	r1, {r3, r4, r6, r8, ip, sp, pc}
 800dda4:	0801b162 	stmdaeq	r1, {r1, r5, r6, r8, ip, sp, pc}

0800dda8 <strncpy.isra.0>:
 800dda8:	1e4b      	subs	r3, r1, #1
 800ddaa:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ddae:	b909      	cbnz	r1, 800ddb4 <strncpy.isra.0+0xc>
 800ddb0:	f00a bb1c 	b.w	80183ec <memset>
 800ddb4:	3a01      	subs	r2, #1
 800ddb6:	f800 1b01 	strb.w	r1, [r0], #1
 800ddba:	d1f6      	bne.n	800ddaa <strncpy.isra.0+0x2>
 800ddbc:	4770      	bx	lr
	...

0800ddc0 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800ddc0:	b510      	push	{r4, lr}
 800ddc2:	2287      	movs	r2, #135	; 0x87
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	f840 1b04 	str.w	r1, [r0], #4
 800ddca:	2100      	movs	r1, #0
 800ddcc:	f00a fb0e 	bl	80183ec <memset>
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800ddd6:	f240 3302 	movw	r3, #770	; 0x302
 800ddda:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800ddde:	2355      	movs	r3, #85	; 0x55
 800dde0:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
 800dde4:	2300      	movs	r3, #0
 800dde6:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800ddea:	4b04      	ldr	r3, [pc, #16]	; (800ddfc <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x3c>)
 800ddec:	6819      	ldr	r1, [r3, #0]
 800ddee:	2204      	movs	r2, #4
 800ddf0:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
 800ddf4:	b901      	cbnz	r1, 800ddf8 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x38>
 800ddf6:	601a      	str	r2, [r3, #0]
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	bd10      	pop	{r4, pc}
 800ddfc:	200006e4 	andcs	r0, r0, r4, ror #13

0800de00 <ArtNetParams::Load()>:
 800de00:	b508      	push	{r3, lr}
 800de02:	2300      	movs	r3, #0
 800de04:	4601      	mov	r1, r0
 800de06:	6043      	str	r3, [r0, #4]
 800de08:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800de0c:	6800      	ldr	r0, [r0, #0]
 800de0e:	b120      	cbz	r0, 800de1a <ArtNetParams::Load()+0x1a>
 800de10:	6803      	ldr	r3, [r0, #0]
 800de12:	3104      	adds	r1, #4
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	4798      	blx	r3
 800de18:	2001      	movs	r0, #1
 800de1a:	bd08      	pop	{r3, pc}

0800de1c <ArtNetParams::Load(char const*, unsigned int)>:
 800de1c:	6803      	ldr	r3, [r0, #0]
 800de1e:	b1e3      	cbz	r3, 800de5a <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800de20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de22:	2300      	movs	r3, #0
 800de24:	6043      	str	r3, [r0, #4]
 800de26:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800de2a:	4604      	mov	r4, r0
 800de2c:	460d      	mov	r5, r1
 800de2e:	4616      	mov	r6, r2
 800de30:	490a      	ldr	r1, [pc, #40]	; (800de5c <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800de32:	4602      	mov	r2, r0
 800de34:	4668      	mov	r0, sp
 800de36:	f009 fbdf 	bl	80175f8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800de3a:	4632      	mov	r2, r6
 800de3c:	4629      	mov	r1, r5
 800de3e:	4668      	mov	r0, sp
 800de40:	f009 fbde 	bl	8017600 <ReadConfigFile::Read(char const*, unsigned int)>
 800de44:	4621      	mov	r1, r4
 800de46:	f851 0b04 	ldr.w	r0, [r1], #4
 800de4a:	6803      	ldr	r3, [r0, #0]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	4798      	blx	r3
 800de50:	4668      	mov	r0, sp
 800de52:	f009 fbd4 	bl	80175fe <ReadConfigFile::~ReadConfigFile()>
 800de56:	b002      	add	sp, #8
 800de58:	bd70      	pop	{r4, r5, r6, pc}
 800de5a:	4770      	bx	lr
 800de5c:	0800e245 	stmdaeq	r0, {r0, r2, r6, r9, sp, lr, pc}

0800de60 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800de60:	6843      	ldr	r3, [r0, #4]
 800de62:	b111      	cbz	r1, 800de6a <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800de64:	431a      	orrs	r2, r3
 800de66:	6042      	str	r2, [r0, #4]
 800de68:	4770      	bx	lr
 800de6a:	ea23 0202 	bic.w	r2, r3, r2
 800de6e:	e7fa      	b.n	800de66 <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800de70 <ArtNetParams::callbackFunction(char const*)>:
 800de70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de74:	460e      	mov	r6, r1
 800de76:	b0a7      	sub	sp, #156	; 0x9c
 800de78:	4604      	mov	r4, r0
 800de7a:	499e      	ldr	r1, [pc, #632]	; (800e0f4 <ArtNetParams::callbackFunction(char const*)+0x284>)
 800de7c:	f10d 020f 	add.w	r2, sp, #15
 800de80:	4630      	mov	r0, r6
 800de82:	f009 fcee 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800de86:	b940      	cbnz	r0, 800de9a <ArtNetParams::callbackFunction(char const*)+0x2a>
 800de88:	2220      	movs	r2, #32
 800de8a:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800de8e:	4620      	mov	r0, r4
 800de90:	b027      	add	sp, #156	; 0x9c
 800de92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de96:	f7ff bfe3 	b.w	800de60 <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800de9a:	2708      	movs	r7, #8
 800de9c:	4996      	ldr	r1, [pc, #600]	; (800e0f8 <ArtNetParams::callbackFunction(char const*)+0x288>)
 800de9e:	9705      	str	r7, [sp, #20]
 800dea0:	ab05      	add	r3, sp, #20
 800dea2:	aa06      	add	r2, sp, #24
 800dea4:	4630      	mov	r0, r6
 800dea6:	f009 fbdf 	bl	8017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800deaa:	bb40      	cbnz	r0, 800defe <ArtNetParams::callbackFunction(char const*)+0x8e>
 800deac:	4993      	ldr	r1, [pc, #588]	; (800e0fc <ArtNetParams::callbackFunction(char const*)+0x28c>)
 800deae:	2204      	movs	r2, #4
 800deb0:	a806      	add	r0, sp, #24
 800deb2:	f7ff feed 	bl	800dc90 <memcmp>
 800deb6:	6865      	ldr	r5, [r4, #4]
 800deb8:	b188      	cbz	r0, 800dede <ArtNetParams::callbackFunction(char const*)+0x6e>
 800deba:	4991      	ldr	r1, [pc, #580]	; (800e100 <ArtNetParams::callbackFunction(char const*)+0x290>)
 800debc:	2203      	movs	r2, #3
 800debe:	a806      	add	r0, sp, #24
 800dec0:	f7ff fee6 	bl	800dc90 <memcmp>
 800dec4:	b198      	cbz	r0, 800deee <ArtNetParams::callbackFunction(char const*)+0x7e>
 800dec6:	498f      	ldr	r1, [pc, #572]	; (800e104 <ArtNetParams::callbackFunction(char const*)+0x294>)
 800dec8:	2202      	movs	r2, #2
 800deca:	a806      	add	r0, sp, #24
 800decc:	f7ff fee0 	bl	800dc90 <memcmp>
 800ded0:	b188      	cbz	r0, 800def6 <ArtNetParams::callbackFunction(char const*)+0x86>
 800ded2:	498d      	ldr	r1, [pc, #564]	; (800e108 <ArtNetParams::callbackFunction(char const*)+0x298>)
 800ded4:	463a      	mov	r2, r7
 800ded6:	a806      	add	r0, sp, #24
 800ded8:	f7ff feda 	bl	800dc90 <memcmp>
 800dedc:	b168      	cbz	r0, 800defa <ArtNetParams::callbackFunction(char const*)+0x8a>
 800dede:	f025 0510 	bic.w	r5, r5, #16
 800dee2:	2300      	movs	r3, #0
 800dee4:	6065      	str	r5, [r4, #4]
 800dee6:	72a3      	strb	r3, [r4, #10]
 800dee8:	b027      	add	sp, #156	; 0x9c
 800deea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deee:	2301      	movs	r3, #1
 800def0:	f045 0510 	orr.w	r5, r5, #16
 800def4:	e7f6      	b.n	800dee4 <ArtNetParams::callbackFunction(char const*)+0x74>
 800def6:	2302      	movs	r3, #2
 800def8:	e7fa      	b.n	800def0 <ArtNetParams::callbackFunction(char const*)+0x80>
 800defa:	2303      	movs	r3, #3
 800defc:	e7f8      	b.n	800def0 <ArtNetParams::callbackFunction(char const*)+0x80>
 800defe:	2311      	movs	r3, #17
 800df00:	9305      	str	r3, [sp, #20]
 800df02:	4982      	ldr	r1, [pc, #520]	; (800e10c <ArtNetParams::callbackFunction(char const*)+0x29c>)
 800df04:	ab05      	add	r3, sp, #20
 800df06:	f104 0210 	add.w	r2, r4, #16
 800df0a:	4630      	mov	r0, r6
 800df0c:	f009 fbac 	bl	8017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800df10:	b938      	cbnz	r0, 800df22 <ArtNetParams::callbackFunction(char const*)+0xb2>
 800df12:	9b05      	ldr	r3, [sp, #20]
 800df14:	4423      	add	r3, r4
 800df16:	7418      	strb	r0, [r3, #16]
 800df18:	6863      	ldr	r3, [r4, #4]
 800df1a:	f043 0302 	orr.w	r3, r3, #2
 800df1e:	6063      	str	r3, [r4, #4]
 800df20:	e7e2      	b.n	800dee8 <ArtNetParams::callbackFunction(char const*)+0x78>
 800df22:	233f      	movs	r3, #63	; 0x3f
 800df24:	9305      	str	r3, [sp, #20]
 800df26:	497a      	ldr	r1, [pc, #488]	; (800e110 <ArtNetParams::callbackFunction(char const*)+0x2a0>)
 800df28:	ab05      	add	r3, sp, #20
 800df2a:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800df2e:	4630      	mov	r0, r6
 800df30:	f009 fb9a 	bl	8017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800df34:	b938      	cbnz	r0, 800df46 <ArtNetParams::callbackFunction(char const*)+0xd6>
 800df36:	9b05      	ldr	r3, [sp, #20]
 800df38:	4423      	add	r3, r4
 800df3a:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800df3e:	6863      	ldr	r3, [r4, #4]
 800df40:	f043 0301 	orr.w	r3, r3, #1
 800df44:	e7eb      	b.n	800df1e <ArtNetParams::callbackFunction(char const*)+0xae>
 800df46:	4973      	ldr	r1, [pc, #460]	; (800e114 <ArtNetParams::callbackFunction(char const*)+0x2a4>)
 800df48:	f10d 020f 	add.w	r2, sp, #15
 800df4c:	4630      	mov	r0, r6
 800df4e:	f009 fc88 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800df52:	b950      	cbnz	r0, 800df6a <ArtNetParams::callbackFunction(char const*)+0xfa>
 800df54:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800df58:	6863      	ldr	r3, [r4, #4]
 800df5a:	7222      	strb	r2, [r4, #8]
 800df5c:	b112      	cbz	r2, 800df64 <ArtNetParams::callbackFunction(char const*)+0xf4>
 800df5e:	f043 0304 	orr.w	r3, r3, #4
 800df62:	e7dc      	b.n	800df1e <ArtNetParams::callbackFunction(char const*)+0xae>
 800df64:	f023 0304 	bic.w	r3, r3, #4
 800df68:	e7d9      	b.n	800df1e <ArtNetParams::callbackFunction(char const*)+0xae>
 800df6a:	496b      	ldr	r1, [pc, #428]	; (800e118 <ArtNetParams::callbackFunction(char const*)+0x2a8>)
 800df6c:	f10d 020f 	add.w	r2, sp, #15
 800df70:	4630      	mov	r0, r6
 800df72:	f009 fc76 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800df76:	b950      	cbnz	r0, 800df8e <ArtNetParams::callbackFunction(char const*)+0x11e>
 800df78:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800df7c:	6863      	ldr	r3, [r4, #4]
 800df7e:	7262      	strb	r2, [r4, #9]
 800df80:	b112      	cbz	r2, 800df88 <ArtNetParams::callbackFunction(char const*)+0x118>
 800df82:	f043 0308 	orr.w	r3, r3, #8
 800df86:	e7ca      	b.n	800df1e <ArtNetParams::callbackFunction(char const*)+0xae>
 800df88:	f023 0308 	bic.w	r3, r3, #8
 800df8c:	e7c7      	b.n	800df1e <ArtNetParams::callbackFunction(char const*)+0xae>
 800df8e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 800e128 <ArtNetParams::callbackFunction(char const*)+0x2b8>
 800df92:	f8df 8198 	ldr.w	r8, [pc, #408]	; 800e12c <ArtNetParams::callbackFunction(char const*)+0x2bc>
 800df96:	f8df b198 	ldr.w	fp, [pc, #408]	; 800e130 <ArtNetParams::callbackFunction(char const*)+0x2c0>
 800df9a:	2500      	movs	r5, #0
 800df9c:	f10d 020f 	add.w	r2, sp, #15
 800dfa0:	4649      	mov	r1, r9
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	f009 fc5d 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800dfa8:	b9a8      	cbnz	r0, 800dfd6 <ArtNetParams::callbackFunction(char const*)+0x166>
 800dfaa:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800dfae:	6862      	ldr	r2, [r4, #4]
 800dfb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dfb4:	280f      	cmp	r0, #15
 800dfb6:	fa03 f305 	lsl.w	r3, r3, r5
 800dfba:	eb04 0105 	add.w	r1, r4, r5
 800dfbe:	d803      	bhi.n	800dfc8 <ArtNetParams::callbackFunction(char const*)+0x158>
 800dfc0:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	e7aa      	b.n	800df1e <ArtNetParams::callbackFunction(char const*)+0xae>
 800dfc8:	3501      	adds	r5, #1
 800dfca:	ea22 0203 	bic.w	r2, r2, r3
 800dfce:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800dfd2:	6062      	str	r2, [r4, #4]
 800dfd4:	e788      	b.n	800dee8 <ArtNetParams::callbackFunction(char const*)+0x78>
 800dfd6:	4951      	ldr	r1, [pc, #324]	; (800e11c <ArtNetParams::callbackFunction(char const*)+0x2ac>)
 800dfd8:	2712      	movs	r7, #18
 800dfda:	2303      	movs	r3, #3
 800dfdc:	436f      	muls	r7, r5
 800dfde:	9305      	str	r3, [sp, #20]
 800dfe0:	aa06      	add	r2, sp, #24
 800dfe2:	ab05      	add	r3, sp, #20
 800dfe4:	4439      	add	r1, r7
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f009 fb3e 	bl	8017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800dfec:	bb08      	cbnz	r0, 800e032 <ArtNetParams::callbackFunction(char const*)+0x1c2>
 800dfee:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800dff2:	6863      	ldr	r3, [r4, #4]
 800dff4:	f041 0120 	orr.w	r1, r1, #32
 800dff8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800dffc:	296c      	cmp	r1, #108	; 0x6c
 800dffe:	fa02 f205 	lsl.w	r2, r2, r5
 800e002:	4425      	add	r5, r4
 800e004:	d10f      	bne.n	800e026 <ArtNetParams::callbackFunction(char const*)+0x1b6>
 800e006:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800e00a:	f041 0120 	orr.w	r1, r1, #32
 800e00e:	2974      	cmp	r1, #116	; 0x74
 800e010:	d109      	bne.n	800e026 <ArtNetParams::callbackFunction(char const*)+0x1b6>
 800e012:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800e016:	f041 0120 	orr.w	r1, r1, #32
 800e01a:	2970      	cmp	r1, #112	; 0x70
 800e01c:	d103      	bne.n	800e026 <ArtNetParams::callbackFunction(char const*)+0x1b6>
 800e01e:	2101      	movs	r1, #1
 800e020:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800e024:	e7ce      	b.n	800dfc4 <ArtNetParams::callbackFunction(char const*)+0x154>
 800e026:	2100      	movs	r1, #0
 800e028:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800e02c:	ea23 0302 	bic.w	r3, r3, r2
 800e030:	e775      	b.n	800df1e <ArtNetParams::callbackFunction(char const*)+0xae>
 800e032:	493b      	ldr	r1, [pc, #236]	; (800e120 <ArtNetParams::callbackFunction(char const*)+0x2b0>)
 800e034:	f04f 0a04 	mov.w	sl, #4
 800e038:	ab05      	add	r3, sp, #20
 800e03a:	aa06      	add	r2, sp, #24
 800e03c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800e040:	4630      	mov	r0, r6
 800e042:	f8cd a014 	str.w	sl, [sp, #20]
 800e046:	f009 fb0f 	bl	8017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800e04a:	b9a0      	cbnz	r0, 800e076 <ArtNetParams::callbackFunction(char const*)+0x206>
 800e04c:	9001      	str	r0, [sp, #4]
 800e04e:	4652      	mov	r2, sl
 800e050:	4934      	ldr	r1, [pc, #208]	; (800e124 <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800e052:	a806      	add	r0, sp, #24
 800e054:	f7ff fe1c 	bl	800dc90 <memcmp>
 800e058:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800e05c:	40aa      	lsls	r2, r5
 800e05e:	9b01      	ldr	r3, [sp, #4]
 800e060:	4425      	add	r5, r4
 800e062:	b920      	cbnz	r0, 800e06e <ArtNetParams::callbackFunction(char const*)+0x1fe>
 800e064:	2301      	movs	r3, #1
 800e066:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800e06a:	6863      	ldr	r3, [r4, #4]
 800e06c:	e7aa      	b.n	800dfc4 <ArtNetParams::callbackFunction(char const*)+0x154>
 800e06e:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800e072:	6863      	ldr	r3, [r4, #4]
 800e074:	e7da      	b.n	800e02c <ArtNetParams::callbackFunction(char const*)+0x1bc>
 800e076:	2307      	movs	r3, #7
 800e078:	9305      	str	r3, [sp, #20]
 800e07a:	aa06      	add	r2, sp, #24
 800e07c:	ab05      	add	r3, sp, #20
 800e07e:	eb0b 0107 	add.w	r1, fp, r7
 800e082:	4630      	mov	r0, r6
 800e084:	f009 faf0 	bl	8017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800e088:	2800      	cmp	r0, #0
 800e08a:	d17e      	bne.n	800e18a <ArtNetParams::callbackFunction(char const*)+0x31a>
 800e08c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800e090:	f043 0320 	orr.w	r3, r3, #32
 800e094:	2b69      	cmp	r3, #105	; 0x69
 800e096:	d14d      	bne.n	800e134 <ArtNetParams::callbackFunction(char const*)+0x2c4>
 800e098:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e09c:	f043 0320 	orr.w	r3, r3, #32
 800e0a0:	2b6e      	cmp	r3, #110	; 0x6e
 800e0a2:	d170      	bne.n	800e186 <ArtNetParams::callbackFunction(char const*)+0x316>
 800e0a4:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800e0a8:	f043 0320 	orr.w	r3, r3, #32
 800e0ac:	2b70      	cmp	r3, #112	; 0x70
 800e0ae:	d16a      	bne.n	800e186 <ArtNetParams::callbackFunction(char const*)+0x316>
 800e0b0:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e0b4:	f043 0320 	orr.w	r3, r3, #32
 800e0b8:	2b75      	cmp	r3, #117	; 0x75
 800e0ba:	d164      	bne.n	800e186 <ArtNetParams::callbackFunction(char const*)+0x316>
 800e0bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800e0c0:	f043 0320 	orr.w	r3, r3, #32
 800e0c4:	3b74      	subs	r3, #116	; 0x74
 800e0c6:	bf18      	it	ne
 800e0c8:	2301      	movne	r3, #1
 800e0ca:	f8b4 2079 	ldrh.w	r2, [r4, #121]	; 0x79
 800e0ce:	006d      	lsls	r5, r5, #1
 800e0d0:	2103      	movs	r1, #3
 800e0d2:	40a9      	lsls	r1, r5
 800e0d4:	ea22 0201 	bic.w	r2, r2, r1
 800e0d8:	b143      	cbz	r3, 800e0ec <ArtNetParams::callbackFunction(char const*)+0x27c>
 800e0da:	2b02      	cmp	r3, #2
 800e0dc:	bf15      	itete	ne
 800e0de:	2301      	movne	r3, #1
 800e0e0:	40ab      	lsleq	r3, r5
 800e0e2:	fa03 f505 	lslne.w	r5, r3, r5
 800e0e6:	431a      	orreq	r2, r3
 800e0e8:	bf18      	it	ne
 800e0ea:	432a      	orrne	r2, r5
 800e0ec:	f8a4 2079 	strh.w	r2, [r4, #121]	; 0x79
 800e0f0:	e6fa      	b.n	800dee8 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e0f2:	bf00      	nop
 800e0f4:	0801c130 	stmdaeq	r1, {r4, r5, r8, lr, pc}
 800e0f8:	0801dd2a 	stmdaeq	r1, {r1, r3, r5, r8, sl, fp, ip, lr, pc}
 800e0fc:	0801c0da 	stmdaeq	r1, {r1, r3, r4, r6, r7, lr, pc}
 800e100:	0801c0df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, lr, pc}
 800e104:	0801b326 	stmdaeq	r1, {r1, r2, r5, r8, r9, ip, sp, pc}
 800e108:	0801c0e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, lr, pc}
 800e10c:	0801c193 	stmdaeq	r1, {r0, r1, r4, r7, r8, lr, pc}
 800e110:	0801c189 	stmdaeq	r1, {r0, r3, r7, r8, lr, pc}
 800e114:	0801c246 	stmdaeq	r1, {r1, r2, r6, r9, lr, pc}
 800e118:	0801c24a 	stmdaeq	r1, {r1, r3, r6, r9, lr, pc}
 800e11c:	0801dcba 	stmdaeq	r1, {r1, r3, r4, r5, r7, sl, fp, ip, lr, pc}
 800e120:	0801c149 	stmdaeq	r1, {r0, r3, r6, r8, lr, pc}
 800e124:	0801c0ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, lr, pc}
 800e128:	0801db3a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, fp, ip, lr, pc}
 800e12c:	0801c19e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, lr, pc}
 800e130:	0801dd3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, fp, ip, lr, pc}
 800e134:	2b64      	cmp	r3, #100	; 0x64
 800e136:	d126      	bne.n	800e186 <ArtNetParams::callbackFunction(char const*)+0x316>
 800e138:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e13c:	f043 0320 	orr.w	r3, r3, #32
 800e140:	2b69      	cmp	r3, #105	; 0x69
 800e142:	d120      	bne.n	800e186 <ArtNetParams::callbackFunction(char const*)+0x316>
 800e144:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800e148:	f043 0320 	orr.w	r3, r3, #32
 800e14c:	2b73      	cmp	r3, #115	; 0x73
 800e14e:	d11a      	bne.n	800e186 <ArtNetParams::callbackFunction(char const*)+0x316>
 800e150:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e154:	f043 0320 	orr.w	r3, r3, #32
 800e158:	2b61      	cmp	r3, #97	; 0x61
 800e15a:	d114      	bne.n	800e186 <ArtNetParams::callbackFunction(char const*)+0x316>
 800e15c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800e160:	f043 0320 	orr.w	r3, r3, #32
 800e164:	2b62      	cmp	r3, #98	; 0x62
 800e166:	d10e      	bne.n	800e186 <ArtNetParams::callbackFunction(char const*)+0x316>
 800e168:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e16c:	f043 0320 	orr.w	r3, r3, #32
 800e170:	2b6c      	cmp	r3, #108	; 0x6c
 800e172:	d108      	bne.n	800e186 <ArtNetParams::callbackFunction(char const*)+0x316>
 800e174:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e178:	f043 0320 	orr.w	r3, r3, #32
 800e17c:	2b65      	cmp	r3, #101	; 0x65
 800e17e:	bf14      	ite	ne
 800e180:	2301      	movne	r3, #1
 800e182:	2302      	moveq	r3, #2
 800e184:	e7a1      	b.n	800e0ca <ArtNetParams::callbackFunction(char const*)+0x25a>
 800e186:	2301      	movs	r3, #1
 800e188:	e79f      	b.n	800e0ca <ArtNetParams::callbackFunction(char const*)+0x25a>
 800e18a:	4b2b      	ldr	r3, [pc, #172]	; (800e238 <ArtNetParams::callbackFunction(char const*)+0x3c8>)
 800e18c:	2118      	movs	r1, #24
 800e18e:	aa04      	add	r2, sp, #16
 800e190:	fb01 3105 	mla	r1, r1, r5, r3
 800e194:	4630      	mov	r0, r6
 800e196:	f009 fadb 	bl	8017750 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800e19a:	b998      	cbnz	r0, 800e1c4 <ArtNetParams::callbackFunction(char const*)+0x354>
 800e19c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1a0:	9904      	ldr	r1, [sp, #16]
 800e1a2:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	40ab      	lsls	r3, r5
 800e1aa:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	b119      	cbz	r1, 800e1ba <ArtNetParams::callbackFunction(char const*)+0x34a>
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800e1b8:	e696      	b.n	800dee8 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e1ba:	ea22 0203 	bic.w	r2, r2, r3
 800e1be:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 800e1c2:	e691      	b.n	800dee8 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e1c4:	f10d 020f 	add.w	r2, sp, #15
 800e1c8:	4641      	mov	r1, r8
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	f009 fb49 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e1d0:	b998      	cbnz	r0, 800e1fa <ArtNetParams::callbackFunction(char const*)+0x38a>
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f105 0308 	add.w	r3, r5, #8
 800e1d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1dc:	40aa      	lsls	r2, r5
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	89a2      	ldrh	r2, [r4, #12]
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	ea22 0103 	bic.w	r1, r2, r3
 800e1e8:	81a1      	strh	r1, [r4, #12]
 800e1ea:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800e1ee:	2900      	cmp	r1, #0
 800e1f0:	f43f ae7a 	beq.w	800dee8 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e1f4:	431a      	orrs	r2, r3
 800e1f6:	81a2      	strh	r2, [r4, #12]
 800e1f8:	e676      	b.n	800dee8 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e1fa:	3501      	adds	r5, #1
 800e1fc:	2d04      	cmp	r5, #4
 800e1fe:	f109 0910 	add.w	r9, r9, #16
 800e202:	f108 0812 	add.w	r8, r8, #18
 800e206:	f47f aec9 	bne.w	800df9c <ArtNetParams::callbackFunction(char const*)+0x12c>
 800e20a:	490c      	ldr	r1, [pc, #48]	; (800e23c <ArtNetParams::callbackFunction(char const*)+0x3cc>)
 800e20c:	f10d 020f 	add.w	r2, sp, #15
 800e210:	4630      	mov	r0, r6
 800e212:	f009 fb26 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e216:	b910      	cbnz	r0, 800e21e <ArtNetParams::callbackFunction(char const*)+0x3ae>
 800e218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e21c:	e635      	b.n	800de8a <ArtNetParams::callbackFunction(char const*)+0x1a>
 800e21e:	4908      	ldr	r1, [pc, #32]	; (800e240 <ArtNetParams::callbackFunction(char const*)+0x3d0>)
 800e220:	f10d 020f 	add.w	r2, sp, #15
 800e224:	4630      	mov	r0, r6
 800e226:	f009 fb1c 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e22a:	2800      	cmp	r0, #0
 800e22c:	f47f ae5c 	bne.w	800dee8 <ArtNetParams::callbackFunction(char const*)+0x78>
 800e230:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e234:	e629      	b.n	800de8a <ArtNetParams::callbackFunction(char const*)+0x1a>
 800e236:	bf00      	nop
 800e238:	0801c1e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, lr, pc}
 800e23c:	0801c13b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, lr, pc}
 800e240:	0801dd14 	stmdaeq	r1, {r2, r4, r8, sl, fp, ip, lr, pc}

0800e244 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800e244:	f7ff be14 	b.w	800de70 <ArtNetParams::callbackFunction(char const*)>

0800e248 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800e248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24c:	4604      	mov	r4, r0
 800e24e:	b085      	sub	sp, #20
 800e250:	4615      	mov	r5, r2
 800e252:	461e      	mov	r6, r3
 800e254:	3004      	adds	r0, #4
 800e256:	2900      	cmp	r1, #0
 800e258:	f000 80a2 	beq.w	800e3a0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x158>
 800e25c:	2287      	movs	r2, #135	; 0x87
 800e25e:	f00a f8ae 	bl	80183be <memmove>
 800e262:	4633      	mov	r3, r6
 800e264:	462a      	mov	r2, r5
 800e266:	4994      	ldr	r1, [pc, #592]	; (800e4b8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800e268:	a801      	add	r0, sp, #4
 800e26a:	f009 f925 	bl	80174b8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800e26e:	6863      	ldr	r3, [r4, #4]
 800e270:	f013 0501 	ands.w	r5, r3, #1
 800e274:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800e278:	d108      	bne.n	800e28c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x44>
 800e27a:	4b90      	ldr	r3, [pc, #576]	; (800e4bc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800e27c:	6819      	ldr	r1, [r3, #0]
 800e27e:	223f      	movs	r2, #63	; 0x3f
 800e280:	316a      	adds	r1, #106	; 0x6a
 800e282:	4630      	mov	r0, r6
 800e284:	f7ff fd90 	bl	800dda8 <strncpy.isra.0>
 800e288:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800e28c:	6863      	ldr	r3, [r4, #4]
 800e28e:	498c      	ldr	r1, [pc, #560]	; (800e4c0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800e290:	f003 0301 	and.w	r3, r3, #1
 800e294:	4632      	mov	r2, r6
 800e296:	a801      	add	r0, sp, #4
 800e298:	f7ff fd36 	bl	800dd08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e29c:	6863      	ldr	r3, [r4, #4]
 800e29e:	f013 0502 	ands.w	r5, r3, #2
 800e2a2:	f104 0610 	add.w	r6, r4, #16
 800e2a6:	d108      	bne.n	800e2ba <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x72>
 800e2a8:	4b84      	ldr	r3, [pc, #528]	; (800e4bc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800e2aa:	6819      	ldr	r1, [r3, #0]
 800e2ac:	2211      	movs	r2, #17
 800e2ae:	3158      	adds	r1, #88	; 0x58
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f7ff fd79 	bl	800dda8 <strncpy.isra.0>
 800e2b6:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800e2ba:	6863      	ldr	r3, [r4, #4]
 800e2bc:	4981      	ldr	r1, [pc, #516]	; (800e4c4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800e2be:	4f82      	ldr	r7, [pc, #520]	; (800e4c8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800e2c0:	f8df 9254 	ldr.w	r9, [pc, #596]	; 800e518 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>
 800e2c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e2c8:	4632      	mov	r2, r6
 800e2ca:	a801      	add	r0, sp, #4
 800e2cc:	f7ff fd1c 	bl	800dd08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e2d0:	6863      	ldr	r3, [r4, #4]
 800e2d2:	7a22      	ldrb	r2, [r4, #8]
 800e2d4:	497d      	ldr	r1, [pc, #500]	; (800e4cc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800e2d6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e2da:	a801      	add	r0, sp, #4
 800e2dc:	f7ff fcec 	bl	800dcb8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800e2e0:	6863      	ldr	r3, [r4, #4]
 800e2e2:	7a62      	ldrb	r2, [r4, #9]
 800e2e4:	497a      	ldr	r1, [pc, #488]	; (800e4d0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800e2e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e2ea:	a801      	add	r0, sp, #4
 800e2ec:	f7ff fce4 	bl	800dcb8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800e2f0:	6862      	ldr	r2, [r4, #4]
 800e2f2:	4978      	ldr	r1, [pc, #480]	; (800e4d4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800e2f4:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800e2f8:	a801      	add	r0, sp, #4
 800e2fa:	f7ff fd2d 	bl	800dd58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e2fe:	f104 086a 	add.w	r8, r4, #106	; 0x6a
 800e302:	2500      	movs	r5, #0
 800e304:	f8d9 2000 	ldr.w	r2, [r9]
 800e308:	6863      	ldr	r3, [r4, #4]
 800e30a:	42aa      	cmp	r2, r5
 800e30c:	d84f      	bhi.n	800e3ae <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x166>
 800e30e:	7aa1      	ldrb	r1, [r4, #10]
 800e310:	4a71      	ldr	r2, [pc, #452]	; (800e4d8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800e312:	4e72      	ldr	r6, [pc, #456]	; (800e4dc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800e314:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e318:	4971      	ldr	r1, [pc, #452]	; (800e4e0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800e31a:	f8df 8200 	ldr.w	r8, [pc, #512]	; 800e51c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>
 800e31e:	f8df a200 	ldr.w	sl, [pc, #512]	; 800e520 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>
 800e322:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e326:	a801      	add	r0, sp, #4
 800e328:	f7ff fcee 	bl	800dd08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e32c:	496d      	ldr	r1, [pc, #436]	; (800e4e4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800e32e:	a801      	add	r0, sp, #4
 800e330:	f009 f948 	bl	80175c4 <PropertiesBuilder::AddComment(char const*)>
 800e334:	f104 0774 	add.w	r7, r4, #116	; 0x74
 800e338:	2500      	movs	r5, #0
 800e33a:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 800e33e:	f8d9 3000 	ldr.w	r3, [r9]
 800e342:	42ab      	cmp	r3, r5
 800e344:	6863      	ldr	r3, [r4, #4]
 800e346:	f200 80a3 	bhi.w	800e490 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x248>
 800e34a:	f3c3 62c0 	ubfx	r2, r3, #27, #1
 800e34e:	4966      	ldr	r1, [pc, #408]	; (800e4e8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800e350:	a801      	add	r0, sp, #4
 800e352:	f7ff fd01 	bl	800dd58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e356:	4965      	ldr	r1, [pc, #404]	; (800e4ec <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800e358:	a801      	add	r0, sp, #4
 800e35a:	f009 f933 	bl	80175c4 <PropertiesBuilder::AddComment(char const*)>
 800e35e:	6862      	ldr	r2, [r4, #4]
 800e360:	4963      	ldr	r1, [pc, #396]	; (800e4f0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 800e362:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800e366:	a801      	add	r0, sp, #4
 800e368:	f7ff fcf6 	bl	800dd58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e36c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e370:	b17b      	cbz	r3, 800e392 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x14a>
 800e372:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e376:	9b01      	ldr	r3, [sp, #4]
 800e378:	4413      	add	r3, r2
 800e37a:	227d      	movs	r2, #125	; 0x7d
 800e37c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e380:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e384:	9901      	ldr	r1, [sp, #4]
 800e386:	54ca      	strb	r2, [r1, r3]
 800e388:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e38c:	3301      	adds	r3, #1
 800e38e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e392:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e398:	601a      	str	r2, [r3, #0]
 800e39a:	b005      	add	sp, #20
 800e39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3a0:	6823      	ldr	r3, [r4, #0]
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	4601      	mov	r1, r0
 800e3a6:	68d2      	ldr	r2, [r2, #12]
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	4790      	blx	r2
 800e3ac:	e759      	b.n	800e262 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800e3ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e3b2:	40aa      	lsls	r2, r5
 800e3b4:	494f      	ldr	r1, [pc, #316]	; (800e4f4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 800e3b6:	439a      	bics	r2, r3
 800e3b8:	bf0c      	ite	eq
 800e3ba:	2301      	moveq	r3, #1
 800e3bc:	2300      	movne	r3, #0
 800e3be:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800e3c2:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800e3c6:	a801      	add	r0, sp, #4
 800e3c8:	f7ff fc76 	bl	800dcb8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800e3cc:	f8b4 3079 	ldrh.w	r3, [r4, #121]	; 0x79
 800e3d0:	4949      	ldr	r1, [pc, #292]	; (800e4f8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 800e3d2:	006a      	lsls	r2, r5, #1
 800e3d4:	40d3      	lsrs	r3, r2
 800e3d6:	2612      	movs	r6, #18
 800e3d8:	436e      	muls	r6, r5
 800e3da:	f013 0303 	ands.w	r3, r3, #3
 800e3de:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 800e3e2:	4431      	add	r1, r6
 800e3e4:	d052      	beq.n	800e48c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x244>
 800e3e6:	4a45      	ldr	r2, [pc, #276]	; (800e4fc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800e3e8:	4845      	ldr	r0, [pc, #276]	; (800e500 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	bf08      	it	eq
 800e3ee:	4602      	moveq	r2, r0
 800e3f0:	3b01      	subs	r3, #1
 800e3f2:	bf18      	it	ne
 800e3f4:	2301      	movne	r3, #1
 800e3f6:	a801      	add	r0, sp, #4
 800e3f8:	f7ff fc86 	bl	800dd08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e3fc:	6861      	ldr	r1, [r4, #4]
 800e3fe:	f898 2005 	ldrb.w	r2, [r8, #5]
 800e402:	4840      	ldr	r0, [pc, #256]	; (800e504 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800e404:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e408:	40ab      	lsls	r3, r5
 800e40a:	438b      	bics	r3, r1
 800e40c:	493e      	ldr	r1, [pc, #248]	; (800e508 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 800e40e:	bf0c      	ite	eq
 800e410:	2301      	moveq	r3, #1
 800e412:	2300      	movne	r3, #0
 800e414:	2a00      	cmp	r2, #0
 800e416:	bf0c      	ite	eq
 800e418:	4602      	moveq	r2, r0
 800e41a:	460a      	movne	r2, r1
 800e41c:	493b      	ldr	r1, [pc, #236]	; (800e50c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800e41e:	a801      	add	r0, sp, #4
 800e420:	4431      	add	r1, r6
 800e422:	f7ff fc71 	bl	800dd08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e426:	f04f 0a01 	mov.w	sl, #1
 800e42a:	f105 0208 	add.w	r2, r5, #8
 800e42e:	89a1      	ldrh	r1, [r4, #12]
 800e430:	fa0a f202 	lsl.w	r2, sl, r2
 800e434:	b292      	uxth	r2, r2
 800e436:	438a      	bics	r2, r1
 800e438:	4935      	ldr	r1, [pc, #212]	; (800e510 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800e43a:	bf0c      	ite	eq
 800e43c:	4652      	moveq	r2, sl
 800e43e:	2200      	movne	r2, #0
 800e440:	4431      	add	r1, r6
 800e442:	a801      	add	r0, sp, #4
 800e444:	f7ff fc88 	bl	800dd58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e448:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800e44c:	fa0a f305 	lsl.w	r3, sl, r5
 800e450:	b29b      	uxth	r3, r3
 800e452:	401a      	ands	r2, r3
 800e454:	4293      	cmp	r3, r2
 800e456:	bf0c      	ite	eq
 800e458:	4653      	moveq	r3, sl
 800e45a:	2300      	movne	r3, #0
 800e45c:	f105 021c 	add.w	r2, r5, #28
 800e460:	d009      	beq.n	800e476 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x22e>
 800e462:	4916      	ldr	r1, [pc, #88]	; (800e4bc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800e464:	6809      	ldr	r1, [r1, #0]
 800e466:	f241 4078 	movw	r0, #5240	; 0x1478
 800e46a:	4459      	add	r1, fp
 800e46c:	5808      	ldr	r0, [r1, r0]
 800e46e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800e472:	f8c1 000b 	str.w	r0, [r1, #11]
 800e476:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e47a:	4639      	mov	r1, r7
 800e47c:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800e480:	a801      	add	r0, sp, #4
 800e482:	f009 f85b 	bl	801753c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800e486:	3501      	adds	r5, #1
 800e488:	3718      	adds	r7, #24
 800e48a:	e73b      	b.n	800e304 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xbc>
 800e48c:	4a21      	ldr	r2, [pc, #132]	; (800e514 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800e48e:	e7af      	b.n	800e3f0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a8>
 800e490:	fa0b f105 	lsl.w	r1, fp, r5
 800e494:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800e498:	4399      	bics	r1, r3
 800e49a:	bf0c      	ite	eq
 800e49c:	2301      	moveq	r3, #1
 800e49e:	2300      	movne	r3, #0
 800e4a0:	4631      	mov	r1, r6
 800e4a2:	2a00      	cmp	r2, #0
 800e4a4:	bf0c      	ite	eq
 800e4a6:	4642      	moveq	r2, r8
 800e4a8:	4652      	movne	r2, sl
 800e4aa:	a801      	add	r0, sp, #4
 800e4ac:	f7ff fc2c 	bl	800dd08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e4b0:	3501      	adds	r5, #1
 800e4b2:	3610      	adds	r6, #16
 800e4b4:	e743      	b.n	800e33e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xf6>
 800e4b6:	bf00      	nop
 800e4b8:	0801c251 	stmdaeq	r1, {r0, r4, r6, r9, lr, pc}
 800e4bc:	200006d4 	ldrdcs	r0, [r0], -r4
 800e4c0:	0801c189 	stmdaeq	r1, {r0, r3, r7, r8, lr, pc}
 800e4c4:	0801c193 	stmdaeq	r1, {r0, r1, r4, r7, r8, lr, pc}
 800e4c8:	0801c1e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, lr, pc}
 800e4cc:	0801c246 	stmdaeq	r1, {r1, r2, r6, r9, lr, pc}
 800e4d0:	0801c24a 	stmdaeq	r1, {r1, r3, r6, r9, lr, pc}
 800e4d4:	0801c130 	stmdaeq	r1, {r4, r5, r8, lr, pc}
 800e4d8:	0801c120 	stmdaeq	r1, {r5, r8, lr, pc}
 800e4dc:	0801c149 	stmdaeq	r1, {r0, r3, r6, r8, lr, pc}
 800e4e0:	0801dd2a 	stmdaeq	r1, {r1, r3, r5, r8, sl, fp, ip, lr, pc}
 800e4e4:	0801c115 	stmdaeq	r1, {r0, r2, r4, r8, lr, pc}
 800e4e8:	0801c13b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, lr, pc}
 800e4ec:	0801af21 	stmdaeq	r1, {r0, r5, r8, r9, sl, fp, sp, pc}
 800e4f0:	0801dd14 	stmdaeq	r1, {r2, r4, r8, sl, fp, ip, lr, pc}
 800e4f4:	0801db3a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, fp, ip, lr, pc}
 800e4f8:	0801dd3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, fp, ip, lr, pc}
 800e4fc:	0801c0f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, lr, pc}
 800e500:	0801c0fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, lr, pc}
 800e504:	0801c10a 	stmdaeq	r1, {r1, r3, r8, lr, pc}
 800e508:	0801c106 	stmdaeq	r1, {r1, r2, r8, lr, pc}
 800e50c:	0801dcba 	stmdaeq	r1, {r1, r3, r4, r5, r7, sl, fp, ip, lr, pc}
 800e510:	0801c19e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, lr, pc}
 800e514:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 800e518:	200006e4 	andcs	r0, r0, r4, ror #13
 800e51c:	0801c10e 	stmdaeq	r1, {r1, r2, r3, r8, lr, pc}
 800e520:	0801c0ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, lr, pc}

0800e524 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800e524:	b513      	push	{r0, r1, r4, lr}
 800e526:	6804      	ldr	r4, [r0, #0]
 800e528:	b914      	cbnz	r4, 800e530 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800e52a:	601c      	str	r4, [r3, #0]
 800e52c:	b002      	add	sp, #8
 800e52e:	bd10      	pop	{r4, pc}
 800e530:	9300      	str	r3, [sp, #0]
 800e532:	4613      	mov	r3, r2
 800e534:	460a      	mov	r2, r1
 800e536:	2100      	movs	r1, #0
 800e538:	f7ff fe86 	bl	800e248 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800e53c:	e7f6      	b.n	800e52c <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800e540 <ArtNetParams::Set(unsigned int)>:
 800e540:	1e4b      	subs	r3, r1, #1
 800e542:	2b40      	cmp	r3, #64	; 0x40
 800e544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e548:	4604      	mov	r4, r0
 800e54a:	460f      	mov	r7, r1
 800e54c:	d807      	bhi.n	800e55e <ArtNetParams::Set(unsigned int)+0x1e>
 800e54e:	4a45      	ldr	r2, [pc, #276]	; (800e664 <ArtNetParams::Set(unsigned int)+0x124>)
 800e550:	f1c1 0342 	rsb	r3, r1, #66	; 0x42
 800e554:	6811      	ldr	r1, [r2, #0]
 800e556:	428b      	cmp	r3, r1
 800e558:	bf94      	ite	ls
 800e55a:	6013      	strls	r3, [r2, #0]
 800e55c:	6011      	strhi	r1, [r2, #0]
 800e55e:	6863      	ldr	r3, [r4, #4]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d07b      	beq.n	800e65c <ArtNetParams::Set(unsigned int)+0x11c>
 800e564:	4a40      	ldr	r2, [pc, #256]	; (800e668 <ArtNetParams::Set(unsigned int)+0x128>)
 800e566:	079b      	lsls	r3, r3, #30
 800e568:	6815      	ldr	r5, [r2, #0]
 800e56a:	d504      	bpl.n	800e576 <ArtNetParams::Set(unsigned int)+0x36>
 800e56c:	f104 0110 	add.w	r1, r4, #16
 800e570:	4628      	mov	r0, r5
 800e572:	f7fd fe5b 	bl	800c22c <ArtNetNode::SetShortName(char const*)>
 800e576:	6863      	ldr	r3, [r4, #4]
 800e578:	07de      	lsls	r6, r3, #31
 800e57a:	d504      	bpl.n	800e586 <ArtNetParams::Set(unsigned int)+0x46>
 800e57c:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800e580:	4628      	mov	r0, r5
 800e582:	f7fd fe74 	bl	800c26e <ArtNetNode::SetLongName(char const*)>
 800e586:	6863      	ldr	r3, [r4, #4]
 800e588:	0758      	lsls	r0, r3, #29
 800e58a:	d504      	bpl.n	800e596 <ArtNetParams::Set(unsigned int)+0x56>
 800e58c:	7a21      	ldrb	r1, [r4, #8]
 800e58e:	2200      	movs	r2, #0
 800e590:	4628      	mov	r0, r5
 800e592:	f7fe f9c5 	bl	800c920 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800e596:	6863      	ldr	r3, [r4, #4]
 800e598:	0719      	lsls	r1, r3, #28
 800e59a:	d504      	bpl.n	800e5a6 <ArtNetParams::Set(unsigned int)+0x66>
 800e59c:	7a61      	ldrb	r1, [r4, #9]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	4628      	mov	r0, r5
 800e5a2:	f7fe f98a 	bl	800c8ba <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800e5a6:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800e664 <ArtNetParams::Set(unsigned int)+0x124>
 800e5aa:	f104 0870 	add.w	r8, r4, #112	; 0x70
 800e5ae:	2600      	movs	r6, #0
 800e5b0:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 800e5b4:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 800e5b8:	e03b      	b.n	800e632 <ArtNetParams::Set(unsigned int)+0xf2>
 800e5ba:	19f1      	adds	r1, r6, r7
 800e5bc:	2941      	cmp	r1, #65	; 0x41
 800e5be:	d83c      	bhi.n	800e63a <ArtNetParams::Set(unsigned int)+0xfa>
 800e5c0:	6863      	ldr	r3, [r4, #4]
 800e5c2:	fa0a f206 	lsl.w	r2, sl, r6
 800e5c6:	439a      	bics	r2, r3
 800e5c8:	d106      	bne.n	800e5d8 <ArtNetParams::Set(unsigned int)+0x98>
 800e5ca:	f898 2005 	ldrb.w	r2, [r8, #5]
 800e5ce:	9101      	str	r1, [sp, #4]
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	f7fe f9d8 	bl	800c986 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800e5d6:	9901      	ldr	r1, [sp, #4]
 800e5d8:	6863      	ldr	r3, [r4, #4]
 800e5da:	fa0b f206 	lsl.w	r2, fp, r6
 800e5de:	439a      	bics	r2, r3
 800e5e0:	d106      	bne.n	800e5f0 <ArtNetParams::Set(unsigned int)+0xb0>
 800e5e2:	f898 2000 	ldrb.w	r2, [r8]
 800e5e6:	9101      	str	r1, [sp, #4]
 800e5e8:	4628      	mov	r0, r5
 800e5ea:	f7fe f9f3 	bl	800c9d4 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800e5ee:	9901      	ldr	r1, [sp, #4]
 800e5f0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	40b3      	lsls	r3, r6
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	4393      	bics	r3, r2
 800e5fc:	d10a      	bne.n	800e614 <ArtNetParams::Set(unsigned int)+0xd4>
 800e5fe:	f106 031c 	add.w	r3, r6, #28
 800e602:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e606:	4628      	mov	r0, r5
 800e608:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800e60c:	9101      	str	r1, [sp, #4]
 800e60e:	f7fe fd25 	bl	800d05c <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800e612:	9901      	ldr	r1, [sp, #4]
 800e614:	89a0      	ldrh	r0, [r4, #12]
 800e616:	f106 0308 	add.w	r3, r6, #8
 800e61a:	2201      	movs	r2, #1
 800e61c:	fa02 f303 	lsl.w	r3, r2, r3
 800e620:	b29b      	uxth	r3, r3
 800e622:	4383      	bics	r3, r0
 800e624:	d102      	bne.n	800e62c <ArtNetParams::Set(unsigned int)+0xec>
 800e626:	4628      	mov	r0, r5
 800e628:	f7ff f81b 	bl	800d662 <ArtNetNode::SetRmd(unsigned int, bool)>
 800e62c:	3601      	adds	r6, #1
 800e62e:	f108 0801 	add.w	r8, r8, #1
 800e632:	f8d9 3000 	ldr.w	r3, [r9]
 800e636:	42b3      	cmp	r3, r6
 800e638:	d8bf      	bhi.n	800e5ba <ArtNetParams::Set(unsigned int)+0x7a>
 800e63a:	7aa1      	ldrb	r1, [r4, #10]
 800e63c:	3108      	adds	r1, #8
 800e63e:	b2c9      	uxtb	r1, r1
 800e640:	4628      	mov	r0, r5
 800e642:	f7fe f9ee 	bl	800ca22 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800e646:	6863      	ldr	r3, [r4, #4]
 800e648:	011a      	lsls	r2, r3, #4
 800e64a:	bf44      	itt	mi
 800e64c:	2201      	movmi	r2, #1
 800e64e:	f885 20b4 	strbmi.w	r2, [r5, #180]	; 0xb4
 800e652:	04db      	lsls	r3, r3, #19
 800e654:	bf44      	itt	mi
 800e656:	2301      	movmi	r3, #1
 800e658:	f885 3a18 	strbmi.w	r3, [r5, #2584]	; 0xa18
 800e65c:	b003      	add	sp, #12
 800e65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e662:	bf00      	nop
 800e664:	200006e4 	andcs	r0, r0, r4, ror #13
 800e668:	200006d4 	ldrdcs	r0, [r0], -r4

0800e66c <ArtNetParams::Dump()>:
 800e66c:	4770      	bx	lr
	...

0800e670 <ArtNetNode::HandleTrigger()>:
 800e670:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
 800e674:	2aff      	cmp	r2, #255	; 0xff
 800e676:	4601      	mov	r1, r0
 800e678:	d103      	bne.n	800e682 <ArtNetNode::HandleTrigger()+0x12>
 800e67a:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 800e67e:	2bff      	cmp	r3, #255	; 0xff
 800e680:	d008      	beq.n	800e694 <ArtNetNode::HandleTrigger()+0x24>
 800e682:	4b07      	ldr	r3, [pc, #28]	; (800e6a0 <ArtNetNode::HandleTrigger()+0x30>)
 800e684:	7818      	ldrb	r0, [r3, #0]
 800e686:	4290      	cmp	r0, r2
 800e688:	d109      	bne.n	800e69e <ArtNetNode::HandleTrigger()+0x2e>
 800e68a:	f891 20c7 	ldrb.w	r2, [r1, #199]	; 0xc7
 800e68e:	785b      	ldrb	r3, [r3, #1]
 800e690:	429a      	cmp	r2, r3
 800e692:	d104      	bne.n	800e69e <ArtNetNode::HandleTrigger()+0x2e>
 800e694:	6948      	ldr	r0, [r1, #20]
 800e696:	6803      	ldr	r3, [r0, #0]
 800e698:	31c8      	adds	r1, #200	; 0xc8
 800e69a:	689b      	ldr	r3, [r3, #8]
 800e69c:	4718      	bx	r3
 800e69e:	4770      	bx	lr
 800e6a0:	0801c25c 	stmdaeq	r1, {r2, r3, r4, r6, r9, lr, pc}

0800e6a4 <e131::universe_to_multicast_ip(unsigned short)>:
 800e6a4:	b513      	push	{r0, r1, r4, lr}
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	a901      	add	r1, sp, #4
 800e6aa:	4806      	ldr	r0, [pc, #24]	; (800e6c4 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800e6ac:	f009 fdcc 	bl	8018248 <inet_aton>
 800e6b0:	9801      	ldr	r0, [sp, #4]
 800e6b2:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800e6b6:	0224      	lsls	r4, r4, #8
 800e6b8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800e6bc:	4320      	orrs	r0, r4
 800e6be:	b002      	add	sp, #8
 800e6c0:	bd10      	pop	{r4, pc}
 800e6c2:	bf00      	nop
 800e6c4:	0801c262 	stmdaeq	r1, {r1, r5, r6, r9, lr, pc}

0800e6c8 <memset.constprop.0.isra.0>:
 800e6c8:	4401      	add	r1, r0
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	4288      	cmp	r0, r1
 800e6ce:	d100      	bne.n	800e6d2 <memset.constprop.0.isra.0+0xa>
 800e6d0:	4770      	bx	lr
 800e6d2:	f800 3b01 	strb.w	r3, [r0], #1
 800e6d6:	e7f9      	b.n	800e6cc <memset.constprop.0.isra.0+0x4>

0800e6d8 <memcpy.isra.0>:
 800e6d8:	3801      	subs	r0, #1
 800e6da:	440a      	add	r2, r1
 800e6dc:	4291      	cmp	r1, r2
 800e6de:	d100      	bne.n	800e6e2 <memcpy.isra.0+0xa>
 800e6e0:	4770      	bx	lr
 800e6e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6e6:	f800 3f01 	strb.w	r3, [r0, #1]!
 800e6ea:	e7f7      	b.n	800e6dc <memcpy.isra.0+0x4>

0800e6ec <E131Bridge::E131Bridge()>:
 800e6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6f4:	e9c0 2300 	strd	r2, r3, [r0]
 800e6f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800e702:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800e706:	6743      	str	r3, [r0, #116]	; 0x74
 800e708:	4b28      	ldr	r3, [pc, #160]	; (800e7ac <E131Bridge::E131Bridge()+0xc0>)
 800e70a:	7202      	strb	r2, [r0, #8]
 800e70c:	f500 55cd 	add.w	r5, r0, #6560	; 0x19a0
 800e710:	f500 52b4 	add.w	r2, r0, #5760	; 0x1680
 800e714:	b093      	sub	sp, #76	; 0x4c
 800e716:	4604      	mov	r4, r0
 800e718:	6018      	str	r0, [r3, #0]
 800e71a:	f200 5614 	addw	r6, r0, #1300	; 0x514
 800e71e:	321c      	adds	r2, #28
 800e720:	3514      	adds	r5, #20
 800e722:	2764      	movs	r7, #100	; 0x64
 800e724:	4630      	mov	r0, r6
 800e726:	2144      	movs	r1, #68	; 0x44
 800e728:	f7ff ffce 	bl	800e6c8 <memset.constprop.0.isra.0>
 800e72c:	4610      	mov	r0, r2
 800e72e:	210c      	movs	r1, #12
 800e730:	f7ff ffca 	bl	800e6c8 <memset.constprop.0.isra.0>
 800e734:	320c      	adds	r2, #12
 800e736:	f802 7c03 	strb.w	r7, [r2, #-3]
 800e73a:	4295      	cmp	r5, r2
 800e73c:	f106 0644 	add.w	r6, r6, #68	; 0x44
 800e740:	d1f0      	bne.n	800e724 <E131Bridge::E131Bridge()+0x38>
 800e742:	2120      	movs	r1, #32
 800e744:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800e748:	4d19      	ldr	r5, [pc, #100]	; (800e7b0 <E131Bridge::E131Bridge()+0xc4>)
 800e74a:	4a1a      	ldr	r2, [pc, #104]	; (800e7b4 <E131Bridge::E131Bridge()+0xc8>)
 800e74c:	f7ff ffbc 	bl	800e6c8 <memset.constprop.0.isra.0>
 800e750:	2301      	movs	r3, #1
 800e752:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800e756:	682b      	ldr	r3, [r5, #0]
 800e758:	9200      	str	r2, [sp, #0]
 800e75a:	3320      	adds	r3, #32
 800e75c:	4a16      	ldr	r2, [pc, #88]	; (800e7b8 <E131Bridge::E131Bridge()+0xcc>)
 800e75e:	2140      	movs	r1, #64	; 0x40
 800e760:	a802      	add	r0, sp, #8
 800e762:	f7fb fec1 	bl	800a4e8 <snprintf>
 800e766:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800e76a:	a902      	add	r1, sp, #8
 800e76c:	233f      	movs	r3, #63	; 0x3f
 800e76e:	f811 0b01 	ldrb.w	r0, [r1], #1
 800e772:	b928      	cbnz	r0, 800e780 <E131Bridge::E131Bridge()+0x94>
 800e774:	4413      	add	r3, r2
 800e776:	429a      	cmp	r2, r3
 800e778:	d006      	beq.n	800e788 <E131Bridge::E131Bridge()+0x9c>
 800e77a:	f802 0b01 	strb.w	r0, [r2], #1
 800e77e:	e7fa      	b.n	800e776 <E131Bridge::E131Bridge()+0x8a>
 800e780:	3b01      	subs	r3, #1
 800e782:	f802 0b01 	strb.w	r0, [r2], #1
 800e786:	d1f2      	bne.n	800e76e <E131Bridge::E131Bridge()+0x82>
 800e788:	2300      	movs	r3, #0
 800e78a:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800e78e:	6828      	ldr	r0, [r5, #0]
 800e790:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800e794:	f006 fa51 	bl	8014c3a <Network::Begin(unsigned short)>
 800e798:	4b08      	ldr	r3, [pc, #32]	; (800e7bc <E131Bridge::E131Bridge()+0xd0>)
 800e79a:	4621      	mov	r1, r4
 800e79c:	f841 0b24 	str.w	r0, [r1], #36
 800e7a0:	6818      	ldr	r0, [r3, #0]
 800e7a2:	f009 fced 	bl	8018180 <Hardware::GetUuid(unsigned char*)>
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	b013      	add	sp, #76	; 0x4c
 800e7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ac:	200006e8 	andcs	r0, r0, r8, ror #13
 800e7b0:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 800e7b4:	0801b506 	stmdaeq	r1, {r1, r2, r8, sl, ip, sp, pc}
 800e7b8:	0801c26e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r9, lr, pc}
 800e7bc:	2001067c 	andcs	r0, r1, ip, ror r6

0800e7c0 <E131Bridge::~E131Bridge()>:
 800e7c0:	4770      	bx	lr
	...

0800e7c4 <E131Bridge::Start()>:
 800e7c4:	6943      	ldr	r3, [r0, #20]
 800e7c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7c8:	4604      	mov	r4, r0
 800e7ca:	b363      	cbz	r3, 800e826 <E131Bridge::Start()+0x62>
 800e7cc:	6983      	ldr	r3, [r0, #24]
 800e7ce:	b9cb      	cbnz	r3, 800e804 <E131Bridge::Start()+0x40>
 800e7d0:	a901      	add	r1, sp, #4
 800e7d2:	4819      	ldr	r0, [pc, #100]	; (800e838 <E131Bridge::Start()+0x74>)
 800e7d4:	f009 fd38 	bl	8018248 <inet_aton>
 800e7d8:	9b01      	ldr	r3, [sp, #4]
 800e7da:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800e7de:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800e7e2:	6223      	str	r3, [r4, #32]
 800e7e4:	f240 207e 	movw	r0, #638	; 0x27e
 800e7e8:	f009 fd2a 	bl	8018240 <operator new(unsigned int)>
 800e7ec:	61a0      	str	r0, [r4, #24]
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	f000 fd08 	bl	800f204 <E131Bridge::FillDataPacket()>
 800e7f4:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800e7f8:	f009 fd22 	bl	8018240 <operator new(unsigned int)>
 800e7fc:	61e0      	str	r0, [r4, #28]
 800e7fe:	4620      	mov	r0, r4
 800e800:	f000 fc58 	bl	800f0b4 <E131Bridge::FillDiscoveryPacket()>
 800e804:	f504 56b4 	add.w	r6, r4, #5760	; 0x1680
 800e808:	2500      	movs	r5, #0
 800e80a:	361e      	adds	r6, #30
 800e80c:	270c      	movs	r7, #12
 800e80e:	fb07 f305 	mul.w	r3, r7, r5
 800e812:	5cf3      	ldrb	r3, [r6, r3]
 800e814:	b123      	cbz	r3, 800e820 <E131Bridge::Start()+0x5c>
 800e816:	6960      	ldr	r0, [r4, #20]
 800e818:	6803      	ldr	r3, [r0, #0]
 800e81a:	4629      	mov	r1, r5
 800e81c:	689b      	ldr	r3, [r3, #8]
 800e81e:	4798      	blx	r3
 800e820:	3501      	adds	r5, #1
 800e822:	2d42      	cmp	r5, #66	; 0x42
 800e824:	d1f3      	bne.n	800e80e <E131Bridge::Start()+0x4a>
 800e826:	4b05      	ldr	r3, [pc, #20]	; (800e83c <E131Bridge::Start()+0x78>)
 800e828:	6818      	ldr	r0, [r3, #0]
 800e82a:	2102      	movs	r1, #2
 800e82c:	b003      	add	sp, #12
 800e82e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e832:	f009 bc03 	b.w	801803c <LedBlink::SetMode(ledblink::Mode)>
 800e836:	bf00      	nop
 800e838:	0801c262 	stmdaeq	r1, {r1, r5, r6, r9, lr, pc}
 800e83c:	20010678 	andcs	r0, r1, r8, ror r6

0800e840 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800e840:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e842:	2300      	movs	r3, #0
 800e844:	f200 5414 	addw	r4, r0, #1300	; 0x514
 800e848:	2544      	movs	r5, #68	; 0x44
 800e84a:	4299      	cmp	r1, r3
 800e84c:	d004      	beq.n	800e858 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x18>
 800e84e:	fb05 f603 	mul.w	r6, r5, r3
 800e852:	5ba6      	ldrh	r6, [r4, r6]
 800e854:	4296      	cmp	r6, r2
 800e856:	d011      	beq.n	800e87c <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>
 800e858:	3301      	adds	r3, #1
 800e85a:	2b42      	cmp	r3, #66	; 0x42
 800e85c:	d1f5      	bne.n	800e84a <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xa>
 800e85e:	4b08      	ldr	r3, [pc, #32]	; (800e880 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x40>)
 800e860:	6801      	ldr	r1, [r0, #0]
 800e862:	681c      	ldr	r4, [r3, #0]
 800e864:	9101      	str	r1, [sp, #4]
 800e866:	4610      	mov	r0, r2
 800e868:	f7ff ff1c 	bl	800e6a4 <e131::universe_to_multicast_ip(unsigned short)>
 800e86c:	9901      	ldr	r1, [sp, #4]
 800e86e:	4602      	mov	r2, r0
 800e870:	4620      	mov	r0, r4
 800e872:	b002      	add	sp, #8
 800e874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e878:	f006 b9f3 	b.w	8014c62 <Network::LeaveGroup(int, unsigned int)>
 800e87c:	b002      	add	sp, #8
 800e87e:	bd70      	pop	{r4, r5, r6, pc}
 800e880:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

0800e884 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800e884:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e886:	4604      	mov	r4, r0
 800e888:	461d      	mov	r5, r3
 800e88a:	b1d1      	cbz	r1, 800e8c2 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3e>
 800e88c:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800e890:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800e894:	b12a      	cbz	r2, 800e8a2 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800e896:	42aa      	cmp	r2, r5
 800e898:	d019      	beq.n	800e8ce <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4a>
 800e89a:	2142      	movs	r1, #66	; 0x42
 800e89c:	4620      	mov	r0, r4
 800e89e:	f7ff ffcf 	bl	800e840 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800e8a2:	4b0c      	ldr	r3, [pc, #48]	; (800e8d4 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x50>)
 800e8a4:	6821      	ldr	r1, [r4, #0]
 800e8a6:	8035      	strh	r5, [r6, #0]
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	681c      	ldr	r4, [r3, #0]
 800e8ac:	9101      	str	r1, [sp, #4]
 800e8ae:	f7ff fef9 	bl	800e6a4 <e131::universe_to_multicast_ip(unsigned short)>
 800e8b2:	9901      	ldr	r1, [sp, #4]
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	b002      	add	sp, #8
 800e8ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8be:	f006 b9cd 	b.w	8014c5c <Network::JoinGroup(int, unsigned int)>
 800e8c2:	b122      	cbz	r2, 800e8ce <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4a>
 800e8c4:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800e8c8:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800e8cc:	e7e2      	b.n	800e894 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800e8ce:	b002      	add	sp, #8
 800e8d0:	bd70      	pop	{r4, r5, r6, pc}
 800e8d2:	bf00      	nop
 800e8d4:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

0800e8d8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800e8d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8da:	4604      	mov	r4, r0
 800e8dc:	460d      	mov	r5, r1
 800e8de:	461e      	mov	r6, r3
 800e8e0:	bb1a      	cbnz	r2, 800e92a <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x52>
 800e8e2:	2941      	cmp	r1, #65	; 0x41
 800e8e4:	d846      	bhi.n	800e974 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x9c>
 800e8e6:	230c      	movs	r3, #12
 800e8e8:	fb03 0301 	mla	r3, r3, r1, r0
 800e8ec:	f241 619e 	movw	r1, #5790	; 0x169e
 800e8f0:	5c5a      	ldrb	r2, [r3, r1]
 800e8f2:	b132      	cbz	r2, 800e902 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2a>
 800e8f4:	f241 629c 	movw	r2, #5788	; 0x169c
 800e8f8:	5a9b      	ldrh	r3, [r3, r2]
 800e8fa:	42b3      	cmp	r3, r6
 800e8fc:	d108      	bne.n	800e910 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800e8fe:	b003      	add	sp, #12
 800e900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e902:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800e906:	3201      	adds	r2, #1
 800e908:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800e90c:	2201      	movs	r2, #1
 800e90e:	545a      	strb	r2, [r3, r1]
 800e910:	230c      	movs	r3, #12
 800e912:	fb03 4405 	mla	r4, r3, r5, r4
 800e916:	f241 639c 	movw	r3, #5788	; 0x169c
 800e91a:	4630      	mov	r0, r6
 800e91c:	52e6      	strh	r6, [r4, r3]
 800e91e:	f7ff fec1 	bl	800e6a4 <e131::universe_to_multicast_ip(unsigned short)>
 800e922:	f504 54b5 	add.w	r4, r4, #5792	; 0x16a0
 800e926:	6020      	str	r0, [r4, #0]
 800e928:	e7e9      	b.n	800e8fe <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e92a:	2a02      	cmp	r2, #2
 800e92c:	d122      	bne.n	800e974 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x9c>
 800e92e:	2941      	cmp	r1, #65	; 0x41
 800e930:	d8e5      	bhi.n	800e8fe <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e932:	2344      	movs	r3, #68	; 0x44
 800e934:	fb03 0301 	mla	r3, r3, r1, r0
 800e938:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800e93c:	b152      	cbz	r2, 800e954 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x7c>
 800e93e:	2200      	movs	r2, #0
 800e940:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800e944:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800e948:	3b01      	subs	r3, #1
 800e94a:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800e94e:	4632      	mov	r2, r6
 800e950:	f7ff ff76 	bl	800e840 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800e954:	230c      	movs	r3, #12
 800e956:	fb03 4505 	mla	r5, r3, r5, r4
 800e95a:	f241 639e 	movw	r3, #5790	; 0x169e
 800e95e:	5cea      	ldrb	r2, [r5, r3]
 800e960:	2a00      	cmp	r2, #0
 800e962:	d0cc      	beq.n	800e8fe <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e964:	2200      	movs	r2, #0
 800e966:	54ea      	strb	r2, [r5, r3]
 800e968:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800e96c:	3b01      	subs	r3, #1
 800e96e:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800e972:	e7c4      	b.n	800e8fe <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e974:	2344      	movs	r3, #68	; 0x44
 800e976:	fb03 4305 	mla	r3, r3, r5, r4
 800e97a:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800e97e:	b1d2      	cbz	r2, 800e9b6 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xde>
 800e980:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 800e984:	42b3      	cmp	r3, r6
 800e986:	d0ba      	beq.n	800e8fe <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e988:	4632      	mov	r2, r6
 800e98a:	4629      	mov	r1, r5
 800e98c:	4620      	mov	r0, r4
 800e98e:	f7ff ff57 	bl	800e840 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800e992:	4b0d      	ldr	r3, [pc, #52]	; (800e9c8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xf0>)
 800e994:	6821      	ldr	r1, [r4, #0]
 800e996:	681f      	ldr	r7, [r3, #0]
 800e998:	9101      	str	r1, [sp, #4]
 800e99a:	4630      	mov	r0, r6
 800e99c:	f7ff fe82 	bl	800e6a4 <e131::universe_to_multicast_ip(unsigned short)>
 800e9a0:	9901      	ldr	r1, [sp, #4]
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	4638      	mov	r0, r7
 800e9a6:	f006 f959 	bl	8014c5c <Network::JoinGroup(int, unsigned int)>
 800e9aa:	2344      	movs	r3, #68	; 0x44
 800e9ac:	fb03 4305 	mla	r3, r3, r5, r4
 800e9b0:	f8a3 6514 	strh.w	r6, [r3, #1300]	; 0x514
 800e9b4:	e7a3      	b.n	800e8fe <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x26>
 800e9b6:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800e9ba:	3201      	adds	r2, #1
 800e9bc:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800e9c6:	e7e4      	b.n	800e992 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xba>
 800e9c8:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

0800e9cc <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800e9cc:	b963      	cbnz	r3, 800e9e8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x1c>
 800e9ce:	2941      	cmp	r1, #65	; 0x41
 800e9d0:	d813      	bhi.n	800e9fa <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2e>
 800e9d2:	230c      	movs	r3, #12
 800e9d4:	fb03 0101 	mla	r1, r3, r1, r0
 800e9d8:	f241 639c 	movw	r3, #5788	; 0x169c
 800e9dc:	5acb      	ldrh	r3, [r1, r3]
 800e9de:	8013      	strh	r3, [r2, #0]
 800e9e0:	f241 639e 	movw	r3, #5790	; 0x169e
 800e9e4:	5cc8      	ldrb	r0, [r1, r3]
 800e9e6:	4770      	bx	lr
 800e9e8:	2344      	movs	r3, #68	; 0x44
 800e9ea:	fb03 0101 	mla	r1, r3, r1, r0
 800e9ee:	f8b1 3514 	ldrh.w	r3, [r1, #1300]	; 0x514
 800e9f2:	f891 0516 	ldrb.w	r0, [r1, #1302]	; 0x516
 800e9f6:	8013      	strh	r3, [r2, #0]
 800e9f8:	4770      	bx	lr
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	4770      	bx	lr

0800e9fe <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800e9fe:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800ea02:	b923      	cbnz	r3, 800ea0e <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800ea04:	2301      	movs	r3, #1
 800ea06:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800ea0a:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800ea0e:	2344      	movs	r3, #68	; 0x44
 800ea10:	fb03 0101 	mla	r1, r3, r1, r0
 800ea14:	2301      	movs	r3, #1
 800ea16:	f881 3555 	strb.w	r3, [r1, #1365]	; 0x555
 800ea1a:	4770      	bx	lr

0800ea1c <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	2044      	movs	r0, #68	; 0x44
 800ea20:	4348      	muls	r0, r1
 800ea22:	b570      	push	{r4, r5, r6, lr}
 800ea24:	1815      	adds	r5, r2, r0
 800ea26:	68d3      	ldr	r3, [r2, #12]
 800ea28:	460c      	mov	r4, r1
 800ea2a:	f8d5 1518 	ldr.w	r1, [r5, #1304]	; 0x518
 800ea2e:	1a5b      	subs	r3, r3, r1
 800ea30:	f242 7110 	movw	r1, #10000	; 0x2710
 800ea34:	428b      	cmp	r3, r1
 800ea36:	d90a      	bls.n	800ea4e <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800ea38:	2600      	movs	r6, #0
 800ea3a:	f500 60a4 	add.w	r0, r0, #1312	; 0x520
 800ea3e:	f8c5 651c 	str.w	r6, [r5, #1308]	; 0x51c
 800ea42:	2110      	movs	r1, #16
 800ea44:	4410      	add	r0, r2
 800ea46:	f7ff fe3f 	bl	800e6c8 <memset.constprop.0.isra.0>
 800ea4a:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800ea4e:	2344      	movs	r3, #68	; 0x44
 800ea50:	435c      	muls	r4, r3
 800ea52:	1915      	adds	r5, r2, r4
 800ea54:	68d3      	ldr	r3, [r2, #12]
 800ea56:	f8d5 1534 	ldr.w	r1, [r5, #1332]	; 0x534
 800ea5a:	1a5b      	subs	r3, r3, r1
 800ea5c:	f242 7110 	movw	r1, #10000	; 0x2710
 800ea60:	428b      	cmp	r3, r1
 800ea62:	d90a      	bls.n	800ea7a <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800ea64:	2600      	movs	r6, #0
 800ea66:	f204 543c 	addw	r4, r4, #1340	; 0x53c
 800ea6a:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
 800ea6e:	2110      	movs	r1, #16
 800ea70:	1910      	adds	r0, r2, r4
 800ea72:	f7ff fe29 	bl	800e6c8 <memset.constprop.0.isra.0>
 800ea76:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800ea7a:	f502 508c 	add.w	r0, r2, #4480	; 0x1180
 800ea7e:	4611      	mov	r1, r2
 800ea80:	3008      	adds	r0, #8
 800ea82:	2300      	movs	r3, #0
 800ea84:	f891 4555 	ldrb.w	r4, [r1, #1365]	; 0x555
 800ea88:	3144      	adds	r1, #68	; 0x44
 800ea8a:	4281      	cmp	r1, r0
 800ea8c:	ea43 0304 	orr.w	r3, r3, r4
 800ea90:	d1f8      	bne.n	800ea84 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x68>
 800ea92:	b923      	cbnz	r3, 800ea9e <E131Bridge::CheckMergeTimeouts(unsigned int)+0x82>
 800ea94:	2101      	movs	r1, #1
 800ea96:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800ea9a:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800ea9e:	bd70      	pop	{r4, r5, r6, pc}

0800eaa0 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800eaa0:	2244      	movs	r2, #68	; 0x44
 800eaa2:	fb02 0101 	mla	r1, r2, r1, r0
 800eaa6:	68c3      	ldr	r3, [r0, #12]
 800eaa8:	f8d1 2534 	ldr.w	r2, [r1, #1332]	; 0x534
 800eaac:	f8d1 0538 	ldr.w	r0, [r1, #1336]	; 0x538
 800eab0:	b510      	push	{r4, lr}
 800eab2:	f8d1 451c 	ldr.w	r4, [r1, #1308]	; 0x51c
 800eab6:	1a9a      	subs	r2, r3, r2
 800eab8:	b184      	cbz	r4, 800eadc <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800eaba:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800eabe:	1a5b      	subs	r3, r3, r1
 800eac0:	b128      	cbz	r0, 800eace <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800eac2:	f242 700f 	movw	r0, #9999	; 0x270f
 800eac6:	4283      	cmp	r3, r0
 800eac8:	d90d      	bls.n	800eae6 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800eaca:	4282      	cmp	r2, r0
 800eacc:	e002      	b.n	800ead4 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800eace:	f242 7010 	movw	r0, #10000	; 0x2710
 800ead2:	4283      	cmp	r3, r0
 800ead4:	bf94      	ite	ls
 800ead6:	2000      	movls	r0, #0
 800ead8:	2001      	movhi	r0, #1
 800eada:	bd10      	pop	{r4, pc}
 800eadc:	2800      	cmp	r0, #0
 800eade:	d0fc      	beq.n	800eada <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800eae0:	f242 7010 	movw	r0, #10000	; 0x2710
 800eae4:	e7f1      	b.n	800eaca <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800eae6:	2000      	movs	r0, #0
 800eae8:	e7f7      	b.n	800eada <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800eaea <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800eaea:	684a      	ldr	r2, [r1, #4]
 800eaec:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	b510      	push	{r4, lr}
 800eaf2:	d10d      	bne.n	800eb10 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800eaf4:	f100 0391 	add.w	r3, r0, #145	; 0x91
 800eaf8:	3107      	adds	r1, #7
 800eafa:	30a1      	adds	r0, #161	; 0xa1
 800eafc:	4283      	cmp	r3, r0
 800eafe:	d101      	bne.n	800eb04 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 800eb00:	2001      	movs	r0, #1
 800eb02:	bd10      	pop	{r4, pc}
 800eb04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eb08:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800eb0c:	4294      	cmp	r4, r2
 800eb0e:	d0f5      	beq.n	800eafc <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800eb10:	2000      	movs	r0, #0
 800eb12:	e7f6      	b.n	800eb02 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>

0800eb14 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800eb14:	2301      	movs	r3, #1
 800eb16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	4690      	mov	r8, r2
 800eb1e:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800eb22:	460f      	mov	r7, r1
 800eb24:	2900      	cmp	r1, #0
 800eb26:	d044      	beq.n	800ebb2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9e>
 800eb28:	2a00      	cmp	r2, #0
 800eb2a:	d042      	beq.n	800ebb2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9e>
 800eb2c:	2600      	movs	r6, #0
 800eb2e:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800eb32:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800eb36:	f500 65a4 	add.w	r5, r0, #1312	; 0x520
 800eb3a:	4632      	mov	r2, r6
 800eb3c:	4637      	mov	r7, r6
 800eb3e:	f240 6904 	movw	r9, #1540	; 0x604
 800eb42:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
 800eb46:	f1b8 0f00 	cmp.w	r8, #0
 800eb4a:	d018      	beq.n	800eb7e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800eb4c:	2110      	movs	r1, #16
 800eb4e:	4628      	mov	r0, r5
 800eb50:	f845 7c04 	str.w	r7, [r5, #-4]
 800eb54:	f7ff fdb8 	bl	800e6c8 <memset.constprop.0.isra.0>
 800eb58:	2110      	movs	r1, #16
 800eb5a:	f105 001c 	add.w	r0, r5, #28
 800eb5e:	61af      	str	r7, [r5, #24]
 800eb60:	f7ff fdb2 	bl	800e6c8 <memset.constprop.0.isra.0>
 800eb64:	f7fe f8de 	bl	800cd24 <lightset::Data::Get()>
 800eb68:	fb09 0006 	mla	r0, r9, r6, r0
 800eb6c:	4642      	mov	r2, r8
 800eb6e:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800eb72:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
 800eb76:	f885 7036 	strb.w	r7, [r5, #54]	; 0x36
 800eb7a:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
 800eb7e:	3601      	adds	r6, #1
 800eb80:	2e42      	cmp	r6, #66	; 0x42
 800eb82:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800eb86:	d1dc      	bne.n	800eb42 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2e>
 800eb88:	b12a      	cbz	r2, 800eb96 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800eb8a:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
 800eb8e:	2901      	cmp	r1, #1
 800eb90:	d04a      	beq.n	800ec28 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x114>
 800eb92:	2902      	cmp	r1, #2
 800eb94:	d04d      	beq.n	800ec32 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x11e>
 800eb96:	4b29      	ldr	r3, [pc, #164]	; (800ec3c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x128>)
 800eb98:	2102      	movs	r1, #2
 800eb9a:	6818      	ldr	r0, [r3, #0]
 800eb9c:	f009 fa4e 	bl	801803c <LedBlink::SetMode(ledblink::Mode)>
 800eba0:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800eba4:	f023 0302 	bic.w	r3, r3, #2
 800eba8:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800ebac:	b003      	add	sp, #12
 800ebae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb2:	2600      	movs	r6, #0
 800ebb4:	f204 553c 	addw	r5, r4, #1340	; 0x53c
 800ebb8:	4632      	mov	r2, r6
 800ebba:	f240 6b04 	movw	fp, #1540	; 0x604
 800ebbe:	46b1      	mov	r9, r6
 800ebc0:	f895 a01a 	ldrb.w	sl, [r5, #26]
 800ebc4:	f1ba 0f00 	cmp.w	sl, #0
 800ebc8:	d028      	beq.n	800ec1c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 800ebca:	b15f      	cbz	r7, 800ebe4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800ebcc:	f855 3c20 	ldr.w	r3, [r5, #-32]
 800ebd0:	b143      	cbz	r3, 800ebe4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800ebd2:	f845 9c20 	str.w	r9, [r5, #-32]
 800ebd6:	2110      	movs	r1, #16
 800ebd8:	f1a5 001c 	sub.w	r0, r5, #28
 800ebdc:	f7ff fd74 	bl	800e6c8 <memset.constprop.0.isra.0>
 800ebe0:	f885 9019 	strb.w	r9, [r5, #25]
 800ebe4:	f1b8 0f00 	cmp.w	r8, #0
 800ebe8:	d00a      	beq.n	800ec00 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800ebea:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800ebee:	b13b      	cbz	r3, 800ec00 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800ebf0:	f845 9c04 	str.w	r9, [r5, #-4]
 800ebf4:	2110      	movs	r1, #16
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	f7ff fd66 	bl	800e6c8 <memset.constprop.0.isra.0>
 800ebfc:	f885 9019 	strb.w	r9, [r5, #25]
 800ec00:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800ec04:	b953      	cbnz	r3, 800ec1c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 800ec06:	9301      	str	r3, [sp, #4]
 800ec08:	f7fe f88c 	bl	800cd24 <lightset::Data::Get()>
 800ec0c:	fb0b 0006 	mla	r0, fp, r6, r0
 800ec10:	9b01      	ldr	r3, [sp, #4]
 800ec12:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
 800ec16:	4652      	mov	r2, sl
 800ec18:	762b      	strb	r3, [r5, #24]
 800ec1a:	76ab      	strb	r3, [r5, #26]
 800ec1c:	3601      	adds	r6, #1
 800ec1e:	2e42      	cmp	r6, #66	; 0x42
 800ec20:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800ec24:	d1cc      	bne.n	800ebc0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xac>
 800ec26:	e7af      	b.n	800eb88 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x74>
 800ec28:	6860      	ldr	r0, [r4, #4]
 800ec2a:	6803      	ldr	r3, [r0, #0]
 800ec2c:	695b      	ldr	r3, [r3, #20]
 800ec2e:	4798      	blx	r3
 800ec30:	e7b1      	b.n	800eb96 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800ec32:	6860      	ldr	r0, [r4, #4]
 800ec34:	6803      	ldr	r3, [r0, #0]
 800ec36:	699b      	ldr	r3, [r3, #24]
 800ec38:	4798      	blx	r3
 800ec3a:	e7ac      	b.n	800eb96 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800ec3c:	20010678 	andcs	r0, r1, r8, ror r6

0800ec40 <E131Bridge::HandleDmx()>:
 800ec40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec44:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800ec48:	b085      	sub	sp, #20
 800ec4a:	ba7f      	rev16	r7, r7
 800ec4c:	b2bf      	uxth	r7, r7
 800ec4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec52:	4604      	mov	r4, r0
 800ec54:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800ec58:	3f01      	subs	r7, #1
 800ec5a:	f500 65a4 	add.w	r5, r0, #1312	; 0x520
 800ec5e:	9301      	str	r3, [sp, #4]
 800ec60:	2600      	movs	r6, #0
 800ec62:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800ec66:	b353      	cbz	r3, 800ecbe <E131Bridge::HandleDmx()+0x7e>
 800ec68:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800ec6c:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800ec70:	ba5b      	rev16	r3, r3
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d122      	bne.n	800ecbe <E131Bridge::HandleDmx()+0x7e>
 800ec78:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800ec7c:	9302      	str	r3, [sp, #8]
 800ec7e:	f1a5 0108 	sub.w	r1, r5, #8
 800ec82:	4620      	mov	r0, r4
 800ec84:	f7ff ff31 	bl	800eaea <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800ec88:	f105 0114 	add.w	r1, r5, #20
 800ec8c:	4682      	mov	sl, r0
 800ec8e:	4620      	mov	r0, r4
 800ec90:	f7ff ff2b 	bl	800eaea <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800ec94:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800ec98:	4680      	mov	r8, r0
 800ec9a:	f1ba 0f00 	cmp.w	sl, #0
 800ec9e:	d01a      	beq.n	800ecd6 <E131Bridge::HandleDmx()+0x96>
 800eca0:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800eca4:	7c2a      	ldrb	r2, [r5, #16]
 800eca6:	742b      	strb	r3, [r5, #16]
 800eca8:	3313      	adds	r3, #19
 800ecaa:	1a9b      	subs	r3, r3, r2
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	2b13      	cmp	r3, #19
 800ecb0:	d905      	bls.n	800ecbe <E131Bridge::HandleDmx()+0x7e>
 800ecb2:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800ecb6:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800ecba:	2a00      	cmp	r2, #0
 800ecbc:	da14      	bge.n	800ece8 <E131Bridge::HandleDmx()+0xa8>
 800ecbe:	9b01      	ldr	r3, [sp, #4]
 800ecc0:	3601      	adds	r6, #1
 800ecc2:	f203 6304 	addw	r3, r3, #1540	; 0x604
 800ecc6:	2e42      	cmp	r6, #66	; 0x42
 800ecc8:	9301      	str	r3, [sp, #4]
 800ecca:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800ecce:	d1c8      	bne.n	800ec62 <E131Bridge::HandleDmx()+0x22>
 800ecd0:	b005      	add	sp, #20
 800ecd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	d0eb      	beq.n	800ecb2 <E131Bridge::HandleDmx()+0x72>
 800ecda:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ecde:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800ece2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ece6:	e7df      	b.n	800eca8 <E131Bridge::HandleDmx()+0x68>
 800ece8:	065a      	lsls	r2, r3, #25
 800ecea:	d50b      	bpl.n	800ed04 <E131Bridge::HandleDmx()+0xc4>
 800ecec:	f1ba 0f00 	cmp.w	sl, #0
 800ecf0:	d102      	bne.n	800ecf8 <E131Bridge::HandleDmx()+0xb8>
 800ecf2:	f1b8 0f00 	cmp.w	r8, #0
 800ecf6:	d0e2      	beq.n	800ecbe <E131Bridge::HandleDmx()+0x7e>
 800ecf8:	4642      	mov	r2, r8
 800ecfa:	4651      	mov	r1, sl
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	f7ff ff09 	bl	800eb14 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800ed02:	e7dc      	b.n	800ecbe <E131Bridge::HandleDmx()+0x7e>
 800ed04:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800ed08:	b133      	cbz	r3, 800ed18 <E131Bridge::HandleDmx()+0xd8>
 800ed0a:	f894 34f9 	ldrb.w	r3, [r4, #1273]	; 0x4f9
 800ed0e:	b91b      	cbnz	r3, 800ed18 <E131Bridge::HandleDmx()+0xd8>
 800ed10:	4631      	mov	r1, r6
 800ed12:	4620      	mov	r0, r4
 800ed14:	f7ff fe82 	bl	800ea1c <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800ed18:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800ed1c:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d259      	bcs.n	800edd8 <E131Bridge::HandleDmx()+0x198>
 800ed24:	4631      	mov	r1, r6
 800ed26:	4620      	mov	r0, r4
 800ed28:	9303      	str	r3, [sp, #12]
 800ed2a:	f7ff feb9 	bl	800eaa0 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	d0c5      	beq.n	800ecbe <E131Bridge::HandleDmx()+0x7e>
 800ed32:	9b03      	ldr	r3, [sp, #12]
 800ed34:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800ed38:	9b02      	ldr	r3, [sp, #8]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d154      	bne.n	800ede8 <E131Bridge::HandleDmx()+0x1a8>
 800ed3e:	f1bb 0f00 	cmp.w	fp, #0
 800ed42:	d15c      	bne.n	800edfe <E131Bridge::HandleDmx()+0x1be>
 800ed44:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ed46:	f845 3c04 	str.w	r3, [r5, #-4]
 800ed4a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ed4e:	742b      	strb	r3, [r5, #16]
 800ed50:	2210      	movs	r2, #16
 800ed52:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800ed56:	4628      	mov	r0, r5
 800ed58:	f7ff fcbe 	bl	800e6d8 <memcpy.isra.0>
 800ed5c:	68e3      	ldr	r3, [r4, #12]
 800ed5e:	f845 3c08 	str.w	r3, [r5, #-8]
 800ed62:	463a      	mov	r2, r7
 800ed64:	4649      	mov	r1, r9
 800ed66:	4630      	mov	r0, r6
 800ed68:	f7fd ffe8 	bl	800cd3c <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800ed6c:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800ed70:	069b      	lsls	r3, r3, #26
 800ed72:	f100 80aa 	bmi.w	800eeca <E131Bridge::HandleDmx()+0x28a>
 800ed76:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	2a00      	cmp	r2, #0
 800ed7e:	f000 80a8 	beq.w	800eed2 <E131Bridge::HandleDmx()+0x292>
 800ed82:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800ed86:	2a00      	cmp	r2, #0
 800ed88:	f040 80a3 	bne.w	800eed2 <E131Bridge::HandleDmx()+0x292>
 800ed8c:	ba5b      	rev16	r3, r3
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	f1ba 0f00 	cmp.w	sl, #0
 800ed94:	f040 8096 	bne.w	800eec4 <E131Bridge::HandleDmx()+0x284>
 800ed98:	f1b8 0f00 	cmp.w	r8, #0
 800ed9c:	f040 8092 	bne.w	800eec4 <E131Bridge::HandleDmx()+0x284>
 800eda0:	69aa      	ldr	r2, [r5, #24]
 800eda2:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800eda6:	3a00      	subs	r2, #0
 800eda8:	bf18      	it	ne
 800edaa:	2201      	movne	r2, #1
 800edac:	3900      	subs	r1, #0
 800edae:	bf18      	it	ne
 800edb0:	2101      	movne	r1, #1
 800edb2:	4620      	mov	r0, r4
 800edb4:	f7ff fd66 	bl	800e884 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800edb8:	f240 1301 	movw	r3, #257	; 0x101
 800edbc:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800edc0:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f040 8089 	bne.w	800eedc <E131Bridge::HandleDmx()+0x29c>
 800edca:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800edce:	f043 0302 	orr.w	r3, r3, #2
 800edd2:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800edd6:	e772      	b.n	800ecbe <E131Bridge::HandleDmx()+0x7e>
 800edd8:	d9ae      	bls.n	800ed38 <E131Bridge::HandleDmx()+0xf8>
 800edda:	2200      	movs	r2, #0
 800eddc:	f845 2c04 	str.w	r2, [r5, #-4]
 800ede0:	61aa      	str	r2, [r5, #24]
 800ede2:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800ede6:	e7a5      	b.n	800ed34 <E131Bridge::HandleDmx()+0xf4>
 800ede8:	f1ba 0f00 	cmp.w	sl, #0
 800edec:	f000 809a 	beq.w	800ef24 <E131Bridge::HandleDmx()+0x2e4>
 800edf0:	f1bb 0f00 	cmp.w	fp, #0
 800edf4:	d159      	bne.n	800eeaa <E131Bridge::HandleDmx()+0x26a>
 800edf6:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800edfa:	742b      	strb	r3, [r5, #16]
 800edfc:	e7ae      	b.n	800ed5c <E131Bridge::HandleDmx()+0x11c>
 800edfe:	f1b8 0f00 	cmp.w	r8, #0
 800ee02:	d038      	beq.n	800ee76 <E131Bridge::HandleDmx()+0x236>
 800ee04:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ee08:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ee0c:	68e3      	ldr	r3, [r4, #12]
 800ee0e:	616b      	str	r3, [r5, #20]
 800ee10:	f7fd ff88 	bl	800cd24 <lightset::Data::Get()>
 800ee14:	9b01      	ldr	r3, [sp, #4]
 800ee16:	4683      	mov	fp, r0
 800ee18:	f5a3 7000 	sub.w	r0, r3, #512	; 0x200
 800ee1c:	463a      	mov	r2, r7
 800ee1e:	4649      	mov	r1, r9
 800ee20:	4458      	add	r0, fp
 800ee22:	f7ff fc59 	bl	800e6d8 <memcpy.isra.0>
 800ee26:	f240 6304 	movw	r3, #1540	; 0x604
 800ee2a:	fb03 b306 	mla	r3, r3, r6, fp
 800ee2e:	463a      	mov	r2, r7
 800ee30:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800ee34:	9b01      	ldr	r3, [sp, #4]
 800ee36:	4649      	mov	r1, r9
 800ee38:	eb0b 0003 	add.w	r0, fp, r3
 800ee3c:	f7ff fc4c 	bl	800e6d8 <memcpy.isra.0>
 800ee40:	e794      	b.n	800ed6c <E131Bridge::HandleDmx()+0x12c>
 800ee42:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ee44:	61ab      	str	r3, [r5, #24]
 800ee46:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ee4a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ee4e:	2210      	movs	r2, #16
 800ee50:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800ee54:	f105 001c 	add.w	r0, r5, #28
 800ee58:	f7ff fc3e 	bl	800e6d8 <memcpy.isra.0>
 800ee5c:	68e3      	ldr	r3, [r4, #12]
 800ee5e:	616b      	str	r3, [r5, #20]
 800ee60:	4631      	mov	r1, r6
 800ee62:	4620      	mov	r0, r4
 800ee64:	f7ff fdcb 	bl	800e9fe <E131Bridge::UpdateMergeStatus(unsigned int)>
 800ee68:	463a      	mov	r2, r7
 800ee6a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ee6c:	4649      	mov	r1, r9
 800ee6e:	4630      	mov	r0, r6
 800ee70:	f7fd ffab 	bl	800cdca <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800ee74:	e77a      	b.n	800ed6c <E131Bridge::HandleDmx()+0x12c>
 800ee76:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ee78:	f845 3c04 	str.w	r3, [r5, #-4]
 800ee7c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ee80:	742b      	strb	r3, [r5, #16]
 800ee82:	2210      	movs	r2, #16
 800ee84:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800ee88:	4628      	mov	r0, r5
 800ee8a:	f7ff fc25 	bl	800e6d8 <memcpy.isra.0>
 800ee8e:	68e3      	ldr	r3, [r4, #12]
 800ee90:	f845 3c08 	str.w	r3, [r5, #-8]
 800ee94:	4631      	mov	r1, r6
 800ee96:	4620      	mov	r0, r4
 800ee98:	f7ff fdb1 	bl	800e9fe <E131Bridge::UpdateMergeStatus(unsigned int)>
 800ee9c:	463a      	mov	r2, r7
 800ee9e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800eea0:	4649      	mov	r1, r9
 800eea2:	4630      	mov	r0, r6
 800eea4:	f7fd ff68 	bl	800cd78 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800eea8:	e760      	b.n	800ed6c <E131Bridge::HandleDmx()+0x12c>
 800eeaa:	f1b8 0f00 	cmp.w	r8, #0
 800eeae:	d103      	bne.n	800eeb8 <E131Bridge::HandleDmx()+0x278>
 800eeb0:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800eeb4:	742b      	strb	r3, [r5, #16]
 800eeb6:	e7ea      	b.n	800ee8e <E131Bridge::HandleDmx()+0x24e>
 800eeb8:	4820      	ldr	r0, [pc, #128]	; (800ef3c <E131Bridge::HandleDmx()+0x2fc>)
 800eeba:	b005      	add	sp, #20
 800eebc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec0:	f7fb baea 	b.w	800a498 <printf>
 800eec4:	4642      	mov	r2, r8
 800eec6:	4651      	mov	r1, sl
 800eec8:	e773      	b.n	800edb2 <E131Bridge::HandleDmx()+0x172>
 800eeca:	f04f 0300 	mov.w	r3, #0
 800eece:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800eed2:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	f47f af72 	bne.w	800edc0 <E131Bridge::HandleDmx()+0x180>
 800eedc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800eee0:	f7fd ff20 	bl	800cd24 <lightset::Data::Get()>
 800eee4:	f8d8 2000 	ldr.w	r2, [r8]
 800eee8:	f240 6304 	movw	r3, #1540	; 0x604
 800eeec:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800eef0:	9a01      	ldr	r2, [sp, #4]
 800eef2:	fb03 0306 	mla	r3, r3, r6, r0
 800eef6:	1882      	adds	r2, r0, r2
 800eef8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
 800eefc:	4631      	mov	r1, r6
 800eefe:	4640      	mov	r0, r8
 800ef00:	47d0      	blx	sl
 800ef02:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f47f af5f 	bne.w	800edca <E131Bridge::HandleDmx()+0x18a>
 800ef0c:	6860      	ldr	r0, [r4, #4]
 800ef0e:	6803      	ldr	r3, [r0, #0]
 800ef10:	4631      	mov	r1, r6
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	4798      	blx	r3
 800ef16:	f04f 0301 	mov.w	r3, #1
 800ef1a:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800ef1e:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800ef22:	e752      	b.n	800edca <E131Bridge::HandleDmx()+0x18a>
 800ef24:	f1bb 0f00 	cmp.w	fp, #0
 800ef28:	d08b      	beq.n	800ee42 <E131Bridge::HandleDmx()+0x202>
 800ef2a:	f1b8 0f00 	cmp.w	r8, #0
 800ef2e:	d0c3      	beq.n	800eeb8 <E131Bridge::HandleDmx()+0x278>
 800ef30:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ef34:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ef38:	e790      	b.n	800ee5c <E131Bridge::HandleDmx()+0x21c>
 800ef3a:	bf00      	nop
 800ef3c:	0801c277 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r9, lr, pc}

0800ef40 <E131Bridge::IsValidRoot()>:
 800ef40:	b530      	push	{r4, r5, lr}
 800ef42:	4a0d      	ldr	r2, [pc, #52]	; (800ef78 <E131Bridge::IsValidRoot()+0x38>)
 800ef44:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 800ef48:	f100 018b 	add.w	r1, r0, #139	; 0x8b
 800ef4c:	4299      	cmp	r1, r3
 800ef4e:	d109      	bne.n	800ef64 <E131Bridge::IsValidRoot()+0x24>
 800ef50:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800ef54:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800ef58:	d00c      	beq.n	800ef74 <E131Bridge::IsValidRoot()+0x34>
 800ef5a:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800ef5e:	4258      	negs	r0, r3
 800ef60:	4158      	adcs	r0, r3
 800ef62:	bd30      	pop	{r4, r5, pc}
 800ef64:	f812 4b01 	ldrb.w	r4, [r2], #1
 800ef68:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800ef6c:	42a5      	cmp	r5, r4
 800ef6e:	d0ed      	beq.n	800ef4c <E131Bridge::IsValidRoot()+0xc>
 800ef70:	2000      	movs	r0, #0
 800ef72:	e7f6      	b.n	800ef62 <E131Bridge::IsValidRoot()+0x22>
 800ef74:	2001      	movs	r0, #1
 800ef76:	e7f4      	b.n	800ef62 <E131Bridge::IsValidRoot()+0x22>
 800ef78:	0801c39d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, lr, pc}

0800ef7c <E131Bridge::IsValidDataPacket()>:
 800ef7c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	d10d      	bne.n	800efa0 <E131Bridge::IsValidDataPacket()+0x24>
 800ef84:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800ef88:	2ba1      	cmp	r3, #161	; 0xa1
 800ef8a:	d109      	bne.n	800efa0 <E131Bridge::IsValidDataPacket()+0x24>
 800ef8c:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800ef90:	b933      	cbnz	r3, 800efa0 <E131Bridge::IsValidDataPacket()+0x24>
 800ef92:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800ef96:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800ef9a:	4258      	negs	r0, r3
 800ef9c:	4158      	adcs	r0, r3
 800ef9e:	4770      	bx	lr
 800efa0:	2000      	movs	r0, #0
 800efa2:	4770      	bx	lr

0800efa4 <E131Bridge::Run()>:
 800efa4:	b530      	push	{r4, r5, lr}
 800efa6:	4601      	mov	r1, r0
 800efa8:	b085      	sub	sp, #20
 800efaa:	4604      	mov	r4, r0
 800efac:	f10d 030e 	add.w	r3, sp, #14
 800efb0:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800efb4:	9300      	str	r3, [sp, #0]
 800efb6:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800efba:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800efbe:	f005 f913 	bl	80141e8 <udp_recv>
 800efc2:	4b3a      	ldr	r3, [pc, #232]	; (800f0ac <E131Bridge::Run()+0x108>)
 800efc4:	681d      	ldr	r5, [r3, #0]
 800efc6:	60e5      	str	r5, [r4, #12]
 800efc8:	2800      	cmp	r0, #0
 800efca:	d138      	bne.n	800f03e <E131Bridge::Run()+0x9a>
 800efcc:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800efd0:	b16b      	cbz	r3, 800efee <E131Bridge::Run()+0x4a>
 800efd2:	6923      	ldr	r3, [r4, #16]
 800efd4:	1aed      	subs	r5, r5, r3
 800efd6:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800efda:	429d      	cmp	r5, r3
 800efdc:	d928      	bls.n	800f030 <E131Bridge::Run()+0x8c>
 800efde:	6863      	ldr	r3, [r4, #4]
 800efe0:	b9eb      	cbnz	r3, 800f01e <E131Bridge::Run()+0x7a>
 800efe2:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800efe6:	f023 0302 	bic.w	r3, r3, #2
 800efea:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800efee:	6963      	ldr	r3, [r4, #20]
 800eff0:	b12b      	cbz	r3, 800effe <E131Bridge::Run()+0x5a>
 800eff2:	4620      	mov	r0, r4
 800eff4:	f000 f94c 	bl	800f290 <E131Bridge::HandleDmxIn()>
 800eff8:	4620      	mov	r0, r4
 800effa:	f000 f8c7 	bl	800f18c <E131Bridge::SendDiscoveryPacket()>
 800effe:	7a23      	ldrb	r3, [r4, #8]
 800f000:	b15b      	cbz	r3, 800f01a <E131Bridge::Run()+0x76>
 800f002:	4b2b      	ldr	r3, [pc, #172]	; (800f0b0 <E131Bridge::Run()+0x10c>)
 800f004:	6818      	ldr	r0, [r3, #0]
 800f006:	6843      	ldr	r3, [r0, #4]
 800f008:	2b04      	cmp	r3, #4
 800f00a:	d006      	beq.n	800f01a <E131Bridge::Run()+0x76>
 800f00c:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800f010:	2b00      	cmp	r3, #0
 800f012:	d049      	beq.n	800f0a8 <E131Bridge::Run()+0x104>
 800f014:	2103      	movs	r1, #3
 800f016:	f009 f811 	bl	801803c <LedBlink::SetMode(ledblink::Mode)>
 800f01a:	b005      	add	sp, #20
 800f01c:	bd30      	pop	{r4, r5, pc}
 800f01e:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1dd      	bne.n	800efe2 <E131Bridge::Run()+0x3e>
 800f026:	2201      	movs	r2, #1
 800f028:	4611      	mov	r1, r2
 800f02a:	4620      	mov	r0, r4
 800f02c:	f7ff fd72 	bl	800eb14 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800f030:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800f034:	1a9b      	subs	r3, r3, r2
 800f036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f03a:	d3d8      	bcc.n	800efee <E131Bridge::Run()+0x4a>
 800f03c:	e7d1      	b.n	800efe2 <E131Bridge::Run()+0x3e>
 800f03e:	4620      	mov	r0, r4
 800f040:	f7ff ff7e 	bl	800ef40 <E131Bridge::IsValidRoot()>
 800f044:	2800      	cmp	r0, #0
 800f046:	d0e8      	beq.n	800f01a <E131Bridge::Run()+0x76>
 800f048:	2300      	movs	r3, #0
 800f04a:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800f04e:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800f052:	6125      	str	r5, [r4, #16]
 800f054:	b15b      	cbz	r3, 800f06e <E131Bridge::Run()+0xca>
 800f056:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800f05a:	b943      	cbnz	r3, 800f06e <E131Bridge::Run()+0xca>
 800f05c:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800f060:	1aad      	subs	r5, r5, r2
 800f062:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800f066:	4295      	cmp	r5, r2
 800f068:	bf88      	it	hi
 800f06a:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800f06e:	6863      	ldr	r3, [r4, #4]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d0bc      	beq.n	800efee <E131Bridge::Run()+0x4a>
 800f074:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800f078:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f07c:	ba1a      	rev	r2, r3
 800f07e:	d108      	bne.n	800f092 <E131Bridge::Run()+0xee>
 800f080:	4620      	mov	r0, r4
 800f082:	f7ff ff7b 	bl	800ef7c <E131Bridge::IsValidDataPacket()>
 800f086:	2800      	cmp	r0, #0
 800f088:	d0b1      	beq.n	800efee <E131Bridge::Run()+0x4a>
 800f08a:	4620      	mov	r0, r4
 800f08c:	f7ff fdd8 	bl	800ec40 <E131Bridge::HandleDmx()>
 800f090:	e7ad      	b.n	800efee <E131Bridge::Run()+0x4a>
 800f092:	2a08      	cmp	r2, #8
 800f094:	d1ab      	bne.n	800efee <E131Bridge::Run()+0x4a>
 800f096:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800f09a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f09e:	d1a6      	bne.n	800efee <E131Bridge::Run()+0x4a>
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	f000 f971 	bl	800f388 <E131Bridge::HandleSynchronization()>
 800f0a6:	e7a2      	b.n	800efee <E131Bridge::Run()+0x4a>
 800f0a8:	2102      	movs	r1, #2
 800f0aa:	e7b4      	b.n	800f016 <E131Bridge::Run()+0x72>
 800f0ac:	20010694 	mulcs	r1, r4, r6
 800f0b0:	20010678 	andcs	r0, r1, r8, ror r6

0800f0b4 <E131Bridge::FillDiscoveryPacket()>:
 800f0b4:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800f0b8:	b510      	push	{r4, lr}
 800f0ba:	333c      	adds	r3, #60	; 0x3c
 800f0bc:	005b      	lsls	r3, r3, #1
 800f0be:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800f0c2:	69c3      	ldr	r3, [r0, #28]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800f0ca:	428b      	cmp	r3, r1
 800f0cc:	d14a      	bne.n	800f164 <E131Bridge::FillDiscoveryPacket()+0xb0>
 800f0ce:	69c3      	ldr	r3, [r0, #28]
 800f0d0:	492d      	ldr	r1, [pc, #180]	; (800f188 <E131Bridge::FillDiscoveryPacket()+0xd4>)
 800f0d2:	701a      	strb	r2, [r3, #0]
 800f0d4:	2210      	movs	r2, #16
 800f0d6:	705a      	strb	r2, [r3, #1]
 800f0d8:	1cda      	adds	r2, r3, #3
 800f0da:	330f      	adds	r3, #15
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d144      	bne.n	800f16a <E131Bridge::FillDiscoveryPacket()+0xb6>
 800f0e0:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800f0e4:	69c3      	ldr	r3, [r0, #28]
 800f0e6:	3234      	adds	r2, #52	; 0x34
 800f0e8:	0052      	lsls	r2, r2, #1
 800f0ea:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800f0ee:	ba52      	rev16	r2, r2
 800f0f0:	821a      	strh	r2, [r3, #16]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	749a      	strb	r2, [r3, #18]
 800f0f6:	74da      	strb	r2, [r3, #19]
 800f0f8:	751a      	strb	r2, [r3, #20]
 800f0fa:	2208      	movs	r2, #8
 800f0fc:	f803 2f15 	strb.w	r2, [r3, #21]!
 800f100:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800f104:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800f108:	4291      	cmp	r1, r2
 800f10a:	d133      	bne.n	800f174 <E131Bridge::FillDiscoveryPacket()+0xc0>
 800f10c:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800f110:	69c3      	ldr	r3, [r0, #28]
 800f112:	3229      	adds	r2, #41	; 0x29
 800f114:	0052      	lsls	r2, r2, #1
 800f116:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800f11a:	ba52      	rev16	r2, r2
 800f11c:	84da      	strh	r2, [r3, #38]	; 0x26
 800f11e:	2200      	movs	r2, #0
 800f120:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800f124:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800f128:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800f12c:	2202      	movs	r2, #2
 800f12e:	f803 2f2b 	strb.w	r2, [r3, #43]!
 800f132:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800f136:	4291      	cmp	r1, r2
 800f138:	d121      	bne.n	800f17e <E131Bridge::FillDiscoveryPacket()+0xca>
 800f13a:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800f13e:	69c2      	ldr	r2, [r0, #28]
 800f140:	3304      	adds	r3, #4
 800f142:	005b      	lsls	r3, r3, #1
 800f144:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800f148:	ba5b      	rev16	r3, r3
 800f14a:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800f14e:	2300      	movs	r3, #0
 800f150:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800f154:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800f158:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800f15c:	2301      	movs	r3, #1
 800f15e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800f162:	bd10      	pop	{r4, pc}
 800f164:	f803 2b01 	strb.w	r2, [r3], #1
 800f168:	e7af      	b.n	800f0ca <E131Bridge::FillDiscoveryPacket()+0x16>
 800f16a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f16e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f172:	e7b3      	b.n	800f0dc <E131Bridge::FillDiscoveryPacket()+0x28>
 800f174:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f178:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f17c:	e7c4      	b.n	800f108 <E131Bridge::FillDiscoveryPacket()+0x54>
 800f17e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f182:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f186:	e7d6      	b.n	800f136 <E131Bridge::FillDiscoveryPacket()+0x82>
 800f188:	0801c39d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, lr, pc}

0800f18c <E131Bridge::SendDiscoveryPacket()>:
 800f18c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f18e:	68c2      	ldr	r2, [r0, #12]
 800f190:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800f194:	f242 710f 	movw	r1, #9999	; 0x270f
 800f198:	1ad3      	subs	r3, r2, r3
 800f19a:	428b      	cmp	r3, r1
 800f19c:	4604      	mov	r4, r0
 800f19e:	d924      	bls.n	800f1ea <E131Bridge::SendDiscoveryPacket()+0x5e>
 800f1a0:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800f1a4:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800f1a8:	b1ab      	cbz	r3, 800f1d6 <E131Bridge::SendDiscoveryPacket()+0x4a>
 800f1aa:	2500      	movs	r5, #0
 800f1ac:	462e      	mov	r6, r5
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	f10d 020e 	add.w	r2, sp, #14
 800f1b4:	4629      	mov	r1, r5
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	f7ff fc08 	bl	800e9cc <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800f1bc:	b140      	cbz	r0, 800f1d0 <E131Bridge::SendDiscoveryPacket()+0x44>
 800f1be:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f1c2:	69e2      	ldr	r2, [r4, #28]
 800f1c4:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800f1c8:	ba5b      	rev16	r3, r3
 800f1ca:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800f1ce:	3601      	adds	r6, #1
 800f1d0:	3501      	adds	r5, #1
 800f1d2:	2d42      	cmp	r5, #66	; 0x42
 800f1d4:	d1eb      	bne.n	800f1ae <E131Bridge::SendDiscoveryPacket()+0x22>
 800f1d6:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800f1da:	9300      	str	r3, [sp, #0]
 800f1dc:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800f1e0:	6a23      	ldr	r3, [r4, #32]
 800f1e2:	69e1      	ldr	r1, [r4, #28]
 800f1e4:	7820      	ldrb	r0, [r4, #0]
 800f1e6:	f005 f85b 	bl	80142a0 <udp_send>
 800f1ea:	b004      	add	sp, #16
 800f1ec:	bd70      	pop	{r4, r5, r6, pc}

0800f1ee <memcpy.isra.0>:
 800f1ee:	3801      	subs	r0, #1
 800f1f0:	440a      	add	r2, r1
 800f1f2:	4291      	cmp	r1, r2
 800f1f4:	d100      	bne.n	800f1f8 <memcpy.isra.0+0xa>
 800f1f6:	4770      	bx	lr
 800f1f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1fc:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f200:	e7f7      	b.n	800f1f2 <memcpy.isra.0+0x4>
	...

0800f204 <E131Bridge::FillDataPacket()>:
 800f204:	b570      	push	{r4, r5, r6, lr}
 800f206:	4605      	mov	r5, r0
 800f208:	6980      	ldr	r0, [r0, #24]
 800f20a:	4920      	ldr	r1, [pc, #128]	; (800f28c <E131Bridge::FillDataPacket()+0x88>)
 800f20c:	2400      	movs	r4, #0
 800f20e:	2610      	movs	r6, #16
 800f210:	7046      	strb	r6, [r0, #1]
 800f212:	7004      	strb	r4, [r0, #0]
 800f214:	7084      	strb	r4, [r0, #2]
 800f216:	70c4      	strb	r4, [r0, #3]
 800f218:	220c      	movs	r2, #12
 800f21a:	3004      	adds	r0, #4
 800f21c:	f7ff ffe7 	bl	800f1ee <memcpy.isra.0>
 800f220:	69a8      	ldr	r0, [r5, #24]
 800f222:	2304      	movs	r3, #4
 800f224:	7543      	strb	r3, [r0, #21]
 800f226:	7484      	strb	r4, [r0, #18]
 800f228:	74c4      	strb	r4, [r0, #19]
 800f22a:	7504      	strb	r4, [r0, #20]
 800f22c:	4632      	mov	r2, r6
 800f22e:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800f232:	3016      	adds	r0, #22
 800f234:	f7ff ffdb 	bl	800f1ee <memcpy.isra.0>
 800f238:	69a8      	ldr	r0, [r5, #24]
 800f23a:	2602      	movs	r6, #2
 800f23c:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800f240:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800f244:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800f248:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800f24c:	2240      	movs	r2, #64	; 0x40
 800f24e:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800f252:	302c      	adds	r0, #44	; 0x2c
 800f254:	f7ff ffcb 	bl	800f1ee <memcpy.isra.0>
 800f258:	69ab      	ldr	r3, [r5, #24]
 800f25a:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800f25e:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800f262:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800f266:	69ab      	ldr	r3, [r5, #24]
 800f268:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800f26c:	69ab      	ldr	r3, [r5, #24]
 800f26e:	22a1      	movs	r2, #161	; 0xa1
 800f270:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800f274:	69ab      	ldr	r3, [r5, #24]
 800f276:	2201      	movs	r2, #1
 800f278:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800f27c:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800f280:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800f284:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800f288:	bd70      	pop	{r4, r5, r6, pc}
 800f28a:	bf00      	nop
 800f28c:	0801c39d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, lr, pc}

0800f290 <E131Bridge::HandleDmxIn()>:
 800f290:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f294:	f500 55b4 	add.w	r5, r0, #5760	; 0x1680
 800f298:	4f3a      	ldr	r7, [pc, #232]	; (800f384 <E131Bridge::HandleDmxIn()+0xf4>)
 800f29a:	4604      	mov	r4, r0
 800f29c:	351c      	adds	r5, #28
 800f29e:	2600      	movs	r6, #0
 800f2a0:	78ab      	ldrb	r3, [r5, #2]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d056      	beq.n	800f354 <E131Bridge::HandleDmxIn()+0xc4>
 800f2a6:	6960      	ldr	r0, [r4, #20]
 800f2a8:	6803      	ldr	r3, [r0, #0]
 800f2aa:	4631      	mov	r1, r6
 800f2ac:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800f2b0:	aa02      	add	r2, sp, #8
 800f2b2:	ab03      	add	r3, sp, #12
 800f2b4:	47c0      	blx	r8
 800f2b6:	4601      	mov	r1, r0
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	d053      	beq.n	800f364 <E131Bridge::HandleDmxIn()+0xd4>
 800f2bc:	9a02      	ldr	r2, [sp, #8]
 800f2be:	69a0      	ldr	r0, [r4, #24]
 800f2c0:	b293      	uxth	r3, r2
 800f2c2:	f103 0c6d 	add.w	ip, r3, #109	; 0x6d
 800f2c6:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800f2ca:	fa9c fc9c 	rev16.w	ip, ip
 800f2ce:	f8a0 c010 	strh.w	ip, [r0, #16]
 800f2d2:	f103 0c57 	add.w	ip, r3, #87	; 0x57
 800f2d6:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800f2da:	fa9c fc9c 	rev16.w	ip, ip
 800f2de:	f8a0 c026 	strh.w	ip, [r0, #38]	; 0x26
 800f2e2:	f895 c009 	ldrb.w	ip, [r5, #9]
 800f2e6:	f880 c06c 	strb.w	ip, [r0, #108]	; 0x6c
 800f2ea:	f895 c008 	ldrb.w	ip, [r5, #8]
 800f2ee:	f10c 0001 	add.w	r0, ip, #1
 800f2f2:	7228      	strb	r0, [r5, #8]
 800f2f4:	69a0      	ldr	r0, [r4, #24]
 800f2f6:	f880 c06f 	strb.w	ip, [r0, #111]	; 0x6f
 800f2fa:	f8b5 c000 	ldrh.w	ip, [r5]
 800f2fe:	69a0      	ldr	r0, [r4, #24]
 800f300:	330a      	adds	r3, #10
 800f302:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800f306:	fa9c fc9c 	rev16.w	ip, ip
 800f30a:	ba5b      	rev16	r3, r3
 800f30c:	f8a0 c071 	strh.w	ip, [r0, #113]	; 0x71
 800f310:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800f314:	307d      	adds	r0, #125	; 0x7d
 800f316:	f7ff ff6a 	bl	800f1ee <memcpy.isra.0>
 800f31a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800f31e:	69a1      	ldr	r1, [r4, #24]
 800f320:	7820      	ldrb	r0, [r4, #0]
 800f322:	ba53      	rev16	r3, r2
 800f324:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800f328:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800f32c:	9300      	str	r3, [sp, #0]
 800f32e:	327d      	adds	r2, #125	; 0x7d
 800f330:	686b      	ldr	r3, [r5, #4]
 800f332:	b292      	uxth	r2, r2
 800f334:	f004 ffb4 	bl	80142a0 <udp_send>
 800f338:	683a      	ldr	r2, [r7, #0]
 800f33a:	2301      	movs	r3, #1
 800f33c:	40b3      	lsls	r3, r6
 800f33e:	ea33 0102 	bics.w	r1, r3, r2
 800f342:	d007      	beq.n	800f354 <E131Bridge::HandleDmxIn()+0xc4>
 800f344:	4313      	orrs	r3, r2
 800f346:	603b      	str	r3, [r7, #0]
 800f348:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800f34c:	f043 0301 	orr.w	r3, r3, #1
 800f350:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800f354:	3601      	adds	r6, #1
 800f356:	2e42      	cmp	r6, #66	; 0x42
 800f358:	f105 050c 	add.w	r5, r5, #12
 800f35c:	d1a0      	bne.n	800f2a0 <E131Bridge::HandleDmxIn()+0x10>
 800f35e:	b004      	add	sp, #16
 800f360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f364:	9b03      	ldr	r3, [sp, #12]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d1f4      	bne.n	800f354 <E131Bridge::HandleDmxIn()+0xc4>
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	2201      	movs	r2, #1
 800f36e:	40b2      	lsls	r2, r6
 800f370:	ea23 0302 	bic.w	r3, r3, r2
 800f374:	603b      	str	r3, [r7, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d1ec      	bne.n	800f354 <E131Bridge::HandleDmxIn()+0xc4>
 800f37a:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800f37e:	f023 0301 	bic.w	r3, r3, #1
 800f382:	e7e5      	b.n	800f350 <E131Bridge::HandleDmxIn()+0xc0>
 800f384:	200006ec 	andcs	r0, r0, ip, ror #13

0800f388 <E131Bridge::HandleSynchronization()>:
 800f388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f38c:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800f390:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800f394:	ba5b      	rev16	r3, r3
 800f396:	b29b      	uxth	r3, r3
 800f398:	429a      	cmp	r2, r3
 800f39a:	4604      	mov	r4, r0
 800f39c:	d00a      	beq.n	800f3b4 <E131Bridge::HandleSynchronization()+0x2c>
 800f39e:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d006      	beq.n	800f3b4 <E131Bridge::HandleSynchronization()+0x2c>
 800f3a6:	4b24      	ldr	r3, [pc, #144]	; (800f438 <E131Bridge::HandleSynchronization()+0xb0>)
 800f3a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3ac:	6818      	ldr	r0, [r3, #0]
 800f3ae:	2102      	movs	r1, #2
 800f3b0:	f008 be44 	b.w	801803c <LedBlink::SetMode(ledblink::Mode)>
 800f3b4:	68e3      	ldr	r3, [r4, #12]
 800f3b6:	4e21      	ldr	r6, [pc, #132]	; (800f43c <E131Bridge::HandleSynchronization()+0xb4>)
 800f3b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800f440 <E131Bridge::HandleSynchronization()+0xb8>
 800f3bc:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800f3c0:	2500      	movs	r5, #0
 800f3c2:	4627      	mov	r7, r4
 800f3c4:	46a9      	mov	r9, r5
 800f3c6:	f897 3516 	ldrb.w	r3, [r7, #1302]	; 0x516
 800f3ca:	b323      	cbz	r3, 800f416 <E131Bridge::HandleSynchronization()+0x8e>
 800f3cc:	f8d8 3000 	ldr.w	r3, [r8]
 800f3d0:	6860      	ldr	r0, [r4, #4]
 800f3d2:	07da      	lsls	r2, r3, #31
 800f3d4:	bf5c      	itt	pl
 800f3d6:	2301      	movpl	r3, #1
 800f3d8:	f8c8 3000 	strpl.w	r3, [r8]
 800f3dc:	6803      	ldr	r3, [r0, #0]
 800f3de:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800f3e2:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800f3e6:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800f3ea:	4629      	mov	r1, r5
 800f3ec:	47d0      	blx	sl
 800f3ee:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800f3f2:	b93b      	cbnz	r3, 800f404 <E131Bridge::HandleSynchronization()+0x7c>
 800f3f4:	6860      	ldr	r0, [r4, #4]
 800f3f6:	6803      	ldr	r3, [r0, #0]
 800f3f8:	4629      	mov	r1, r5
 800f3fa:	689b      	ldr	r3, [r3, #8]
 800f3fc:	4798      	blx	r3
 800f3fe:	2301      	movs	r3, #1
 800f400:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
 800f404:	f8d8 3000 	ldr.w	r3, [r8]
 800f408:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800f40c:	07db      	lsls	r3, r3, #31
 800f40e:	bf5c      	itt	pl
 800f410:	2301      	movpl	r3, #1
 800f412:	f8c8 3000 	strpl.w	r3, [r8]
 800f416:	3501      	adds	r5, #1
 800f418:	2d42      	cmp	r5, #66	; 0x42
 800f41a:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800f41e:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800f422:	d1d0      	bne.n	800f3c6 <E131Bridge::HandleSynchronization()+0x3e>
 800f424:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f426:	b120      	cbz	r0, 800f432 <E131Bridge::HandleSynchronization()+0xaa>
 800f428:	6803      	ldr	r3, [r0, #0]
 800f42a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f42e:	689b      	ldr	r3, [r3, #8]
 800f430:	4718      	bx	r3
 800f432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f436:	bf00      	nop
 800f438:	20010678 	andcs	r0, r1, r8, ror r6
 800f43c:	20030000 	andcs	r0, r3, r0
 800f440:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800f444 <E131Bridge::Print()>:
 800f444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f448:	b08c      	sub	sp, #48	; 0x30
 800f44a:	a902      	add	r1, sp, #8
 800f44c:	4604      	mov	r4, r0
 800f44e:	2500      	movs	r5, #0
 800f450:	3024      	adds	r0, #36	; 0x24
 800f452:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800f456:	f001 fe1d 	bl	8011094 <uuid_unparse>
 800f45a:	482c      	ldr	r0, [pc, #176]	; (800f50c <E131Bridge::Print()+0xc8>)
 800f45c:	f7fb f81c 	bl	800a498 <printf>
 800f460:	4b2b      	ldr	r3, [pc, #172]	; (800f510 <E131Bridge::Print()+0xcc>)
 800f462:	482c      	ldr	r0, [pc, #176]	; (800f514 <E131Bridge::Print()+0xd0>)
 800f464:	7819      	ldrb	r1, [r3, #0]
 800f466:	785a      	ldrb	r2, [r3, #1]
 800f468:	f7fb f816 	bl	800a498 <printf>
 800f46c:	482a      	ldr	r0, [pc, #168]	; (800f518 <E131Bridge::Print()+0xd4>)
 800f46e:	a902      	add	r1, sp, #8
 800f470:	f7fb f812 	bl	800a498 <printf>
 800f474:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800f478:	b303      	cbz	r3, 800f4bc <E131Bridge::Print()+0x78>
 800f47a:	4828      	ldr	r0, [pc, #160]	; (800f51c <E131Bridge::Print()+0xd8>)
 800f47c:	4e28      	ldr	r6, [pc, #160]	; (800f520 <E131Bridge::Print()+0xdc>)
 800f47e:	4f29      	ldr	r7, [pc, #164]	; (800f524 <E131Bridge::Print()+0xe0>)
 800f480:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800f534 <E131Bridge::Print()+0xf0>
 800f484:	f7fb f808 	bl	800a498 <printf>
 800f488:	2301      	movs	r3, #1
 800f48a:	f10d 0206 	add.w	r2, sp, #6
 800f48e:	4629      	mov	r1, r5
 800f490:	4620      	mov	r0, r4
 800f492:	f7ff fa9b 	bl	800e9cc <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800f496:	b170      	cbz	r0, 800f4b6 <E131Bridge::Print()+0x72>
 800f498:	2344      	movs	r3, #68	; 0x44
 800f49a:	f504 62aa 	add.w	r2, r4, #1360	; 0x550
 800f49e:	436b      	muls	r3, r5
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	58d3      	ldr	r3, [r2, r3]
 800f4a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	bf0c      	ite	eq
 800f4ac:	4633      	moveq	r3, r6
 800f4ae:	463b      	movne	r3, r7
 800f4b0:	4640      	mov	r0, r8
 800f4b2:	f7fa fff1 	bl	800a498 <printf>
 800f4b6:	3501      	adds	r5, #1
 800f4b8:	2d42      	cmp	r5, #66	; 0x42
 800f4ba:	d1e5      	bne.n	800f488 <E131Bridge::Print()+0x44>
 800f4bc:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800f4c0:	b1db      	cbz	r3, 800f4fa <E131Bridge::Print()+0xb6>
 800f4c2:	4819      	ldr	r0, [pc, #100]	; (800f528 <E131Bridge::Print()+0xe4>)
 800f4c4:	4f19      	ldr	r7, [pc, #100]	; (800f52c <E131Bridge::Print()+0xe8>)
 800f4c6:	f7fa ffe7 	bl	800a498 <printf>
 800f4ca:	f504 56b5 	add.w	r6, r4, #5792	; 0x16a0
 800f4ce:	2500      	movs	r5, #0
 800f4d0:	3605      	adds	r6, #5
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	f10d 0206 	add.w	r2, sp, #6
 800f4d8:	4629      	mov	r1, r5
 800f4da:	4620      	mov	r0, r4
 800f4dc:	f7ff fa76 	bl	800e9cc <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800f4e0:	b140      	cbz	r0, 800f4f4 <E131Bridge::Print()+0xb0>
 800f4e2:	230c      	movs	r3, #12
 800f4e4:	436b      	muls	r3, r5
 800f4e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f4ea:	5cf3      	ldrb	r3, [r6, r3]
 800f4ec:	4629      	mov	r1, r5
 800f4ee:	4638      	mov	r0, r7
 800f4f0:	f7fa ffd2 	bl	800a498 <printf>
 800f4f4:	3501      	adds	r5, #1
 800f4f6:	2d42      	cmp	r5, #66	; 0x42
 800f4f8:	d1eb      	bne.n	800f4d2 <E131Bridge::Print()+0x8e>
 800f4fa:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800f4fe:	b113      	cbz	r3, 800f506 <E131Bridge::Print()+0xc2>
 800f500:	480b      	ldr	r0, [pc, #44]	; (800f530 <E131Bridge::Print()+0xec>)
 800f502:	f7fa ffc9 	bl	800a498 <printf>
 800f506:	b00c      	add	sp, #48	; 0x30
 800f508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f50c:	0801c2a4 	stmdaeq	r1, {r2, r5, r7, r9, lr, pc}
 800f510:	0801c3a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, lr, pc}
 800f514:	0801c2ac 	stmdaeq	r1, {r2, r3, r5, r7, r9, lr, pc}
 800f518:	0801c2bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r9, lr, pc}
 800f51c:	0801c08f 	stmdaeq	r1, {r0, r1, r2, r3, r7, lr, pc}
 800f520:	0801c033 	stmdaeq	r1, {r0, r1, r4, r5, lr, pc}
 800f524:	0801c037 	stmdaeq	r1, {r0, r1, r2, r4, r5, lr, pc}
 800f528:	0801c0b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, lr, pc}
 800f52c:	0801c2ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r9, lr, pc}
 800f530:	0801c30d 	stmdaeq	r1, {r0, r2, r3, r8, r9, lr, pc}
 800f534:	0801c2cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r9, lr, pc}

0800f538 <memcmp>:
 800f538:	4402      	add	r2, r0
 800f53a:	4290      	cmp	r0, r2
 800f53c:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800f540:	d106      	bne.n	800f550 <memcmp+0x18>
 800f542:	2000      	movs	r0, #0
 800f544:	4770      	bx	lr
 800f546:	3001      	adds	r0, #1
 800f548:	4290      	cmp	r0, r2
 800f54a:	d102      	bne.n	800f552 <memcmp+0x1a>
 800f54c:	2000      	movs	r0, #0
 800f54e:	e006      	b.n	800f55e <memcmp+0x26>
 800f550:	b510      	push	{r4, lr}
 800f552:	7803      	ldrb	r3, [r0, #0]
 800f554:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f558:	42a3      	cmp	r3, r4
 800f55a:	d0f4      	beq.n	800f546 <memcmp+0xe>
 800f55c:	1b18      	subs	r0, r3, r4
 800f55e:	bd10      	pop	{r4, pc}

0800f560 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800f560:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f562:	88c6      	ldrh	r6, [r0, #6]
 800f564:	8885      	ldrh	r5, [r0, #4]
 800f566:	42ae      	cmp	r6, r5
 800f568:	d216      	bcs.n	800f598 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800f56a:	4604      	mov	r4, r0
 800f56c:	6800      	ldr	r0, [r0, #0]
 800f56e:	1bad      	subs	r5, r5, r6
 800f570:	4430      	add	r0, r6
 800f572:	7a26      	ldrb	r6, [r4, #8]
 800f574:	b923      	cbnz	r3, 800f580 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800f576:	b926      	cbnz	r6, 800f582 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800f578:	9200      	str	r2, [sp, #0]
 800f57a:	460b      	mov	r3, r1
 800f57c:	4a09      	ldr	r2, [pc, #36]	; (800f5a4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800f57e:	e003      	b.n	800f588 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800f580:	b166      	cbz	r6, 800f59c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800f582:	9200      	str	r2, [sp, #0]
 800f584:	4a08      	ldr	r2, [pc, #32]	; (800f5a8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800f586:	460b      	mov	r3, r1
 800f588:	4629      	mov	r1, r5
 800f58a:	f7fa ffad 	bl	800a4e8 <snprintf>
 800f58e:	4285      	cmp	r5, r0
 800f590:	bfa2      	ittt	ge
 800f592:	88e3      	ldrhge	r3, [r4, #6]
 800f594:	181b      	addge	r3, r3, r0
 800f596:	80e3      	strhge	r3, [r4, #6]
 800f598:	b002      	add	sp, #8
 800f59a:	bd70      	pop	{r4, r5, r6, pc}
 800f59c:	9200      	str	r2, [sp, #0]
 800f59e:	460b      	mov	r3, r1
 800f5a0:	4a02      	ldr	r2, [pc, #8]	; (800f5ac <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800f5a2:	e7f1      	b.n	800f588 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800f5a4:	0801b174 	stmdaeq	r1, {r2, r4, r5, r6, r8, ip, sp, pc}
 800f5a8:	0801b169 	stmdaeq	r1, {r0, r3, r5, r6, r8, ip, sp, pc}
 800f5ac:	0801b175 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, ip, sp, pc}

0800f5b0 <E131Params::E131Params(E131ParamsStore*)>:
 800f5b0:	b510      	push	{r4, lr}
 800f5b2:	2219      	movs	r2, #25
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	f840 1b04 	str.w	r1, [r0], #4
 800f5ba:	2100      	movs	r1, #0
 800f5bc:	f008 ff16 	bl	80183ec <memset>
 800f5c0:	f04f 3364 	mov.w	r3, #1684300900	; 0x64646464
 800f5c4:	f8c4 301f 	str.w	r3, [r4, #31]
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	7323      	strb	r3, [r4, #12]
 800f5ce:	77a3      	strb	r3, [r4, #30]
 800f5d0:	4b08      	ldr	r3, [pc, #32]	; (800f5f4 <E131Params::E131Params(E131ParamsStore*)+0x44>)
 800f5d2:	72e2      	strb	r2, [r4, #11]
 800f5d4:	2155      	movs	r1, #85	; 0x55
 800f5d6:	2202      	movs	r2, #2
 800f5d8:	f8a4 200d 	strh.w	r2, [r4, #13]
 800f5dc:	7761      	strb	r1, [r4, #29]
 800f5de:	2203      	movs	r2, #3
 800f5e0:	6819      	ldr	r1, [r3, #0]
 800f5e2:	f8a4 200f 	strh.w	r2, [r4, #15]
 800f5e6:	2204      	movs	r2, #4
 800f5e8:	f8a4 2011 	strh.w	r2, [r4, #17]
 800f5ec:	b901      	cbnz	r1, 800f5f0 <E131Params::E131Params(E131ParamsStore*)+0x40>
 800f5ee:	601a      	str	r2, [r3, #0]
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	bd10      	pop	{r4, pc}
 800f5f4:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800f5f8 <E131Params::Load(char const*, unsigned int)>:
 800f5f8:	6803      	ldr	r3, [r0, #0]
 800f5fa:	b1d3      	cbz	r3, 800f632 <E131Params::Load(char const*, unsigned int)+0x3a>
 800f5fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5fe:	2300      	movs	r3, #0
 800f600:	6043      	str	r3, [r0, #4]
 800f602:	4604      	mov	r4, r0
 800f604:	460d      	mov	r5, r1
 800f606:	4616      	mov	r6, r2
 800f608:	490a      	ldr	r1, [pc, #40]	; (800f634 <E131Params::Load(char const*, unsigned int)+0x3c>)
 800f60a:	4602      	mov	r2, r0
 800f60c:	4668      	mov	r0, sp
 800f60e:	f007 fff3 	bl	80175f8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800f612:	4632      	mov	r2, r6
 800f614:	4629      	mov	r1, r5
 800f616:	4668      	mov	r0, sp
 800f618:	f007 fff2 	bl	8017600 <ReadConfigFile::Read(char const*, unsigned int)>
 800f61c:	4621      	mov	r1, r4
 800f61e:	f851 0b04 	ldr.w	r0, [r1], #4
 800f622:	6803      	ldr	r3, [r0, #0]
 800f624:	689b      	ldr	r3, [r3, #8]
 800f626:	4798      	blx	r3
 800f628:	4668      	mov	r0, sp
 800f62a:	f007 ffe8 	bl	80175fe <ReadConfigFile::~ReadConfigFile()>
 800f62e:	b002      	add	sp, #8
 800f630:	bd70      	pop	{r4, r5, r6, pc}
 800f632:	4770      	bx	lr
 800f634:	0800f8d1 	stmdaeq	r0, {r0, r4, r6, r7, fp, ip, sp, lr, pc}

0800f638 <E131Params::callbackFunction(char const*)>:
 800f638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f63c:	460e      	mov	r6, r1
 800f63e:	b087      	sub	sp, #28
 800f640:	2708      	movs	r7, #8
 800f642:	4604      	mov	r4, r0
 800f644:	4998      	ldr	r1, [pc, #608]	; (800f8a8 <E131Params::callbackFunction(char const*)+0x270>)
 800f646:	9701      	str	r7, [sp, #4]
 800f648:	ab01      	add	r3, sp, #4
 800f64a:	eb0d 0207 	add.w	r2, sp, r7
 800f64e:	4630      	mov	r0, r6
 800f650:	f008 f80a 	bl	8017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800f654:	bb68      	cbnz	r0, 800f6b2 <E131Params::callbackFunction(char const*)+0x7a>
 800f656:	4995      	ldr	r1, [pc, #596]	; (800f8ac <E131Params::callbackFunction(char const*)+0x274>)
 800f658:	2204      	movs	r2, #4
 800f65a:	eb0d 0007 	add.w	r0, sp, r7
 800f65e:	f7ff ff6b 	bl	800f538 <memcmp>
 800f662:	6865      	ldr	r5, [r4, #4]
 800f664:	b1a0      	cbz	r0, 800f690 <E131Params::callbackFunction(char const*)+0x58>
 800f666:	4992      	ldr	r1, [pc, #584]	; (800f8b0 <E131Params::callbackFunction(char const*)+0x278>)
 800f668:	2203      	movs	r2, #3
 800f66a:	eb0d 0007 	add.w	r0, sp, r7
 800f66e:	f7ff ff63 	bl	800f538 <memcmp>
 800f672:	b1b0      	cbz	r0, 800f6a2 <E131Params::callbackFunction(char const*)+0x6a>
 800f674:	498f      	ldr	r1, [pc, #572]	; (800f8b4 <E131Params::callbackFunction(char const*)+0x27c>)
 800f676:	2202      	movs	r2, #2
 800f678:	eb0d 0007 	add.w	r0, sp, r7
 800f67c:	f7ff ff5c 	bl	800f538 <memcmp>
 800f680:	b198      	cbz	r0, 800f6aa <E131Params::callbackFunction(char const*)+0x72>
 800f682:	498d      	ldr	r1, [pc, #564]	; (800f8b8 <E131Params::callbackFunction(char const*)+0x280>)
 800f684:	463a      	mov	r2, r7
 800f686:	eb0d 0007 	add.w	r0, sp, r7
 800f68a:	f7ff ff55 	bl	800f538 <memcmp>
 800f68e:	b170      	cbz	r0, 800f6ae <E131Params::callbackFunction(char const*)+0x76>
 800f690:	f025 0501 	bic.w	r5, r5, #1
 800f694:	2300      	movs	r3, #0
 800f696:	6065      	str	r5, [r4, #4]
 800f698:	f8a4 3009 	strh.w	r3, [r4, #9]
 800f69c:	b007      	add	sp, #28
 800f69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	f045 0501 	orr.w	r5, r5, #1
 800f6a8:	e7f5      	b.n	800f696 <E131Params::callbackFunction(char const*)+0x5e>
 800f6aa:	2302      	movs	r3, #2
 800f6ac:	e7fa      	b.n	800f6a4 <E131Params::callbackFunction(char const*)+0x6c>
 800f6ae:	2303      	movs	r3, #3
 800f6b0:	e7f8      	b.n	800f6a4 <E131Params::callbackFunction(char const*)+0x6c>
 800f6b2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800f8c0 <E131Params::callbackFunction(char const*)+0x288>
 800f6b6:	f8df 820c 	ldr.w	r8, [pc, #524]	; 800f8c4 <E131Params::callbackFunction(char const*)+0x28c>
 800f6ba:	f8df a20c 	ldr.w	sl, [pc, #524]	; 800f8c8 <E131Params::callbackFunction(char const*)+0x290>
 800f6be:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800f8cc <E131Params::callbackFunction(char const*)+0x294>
 800f6c2:	2500      	movs	r5, #0
 800f6c4:	f10d 0202 	add.w	r2, sp, #2
 800f6c8:	4649      	mov	r1, r9
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	f008 f881 	bl	80177d2 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800f6d0:	b9d8      	cbnz	r0, 800f70a <E131Params::callbackFunction(char const*)+0xd2>
 800f6d2:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800f6d6:	6861      	ldr	r1, [r4, #4]
 800f6d8:	1e42      	subs	r2, r0, #1
 800f6da:	b292      	uxth	r2, r2
 800f6dc:	f64f 16fe 	movw	r6, #63998	; 0xf9fe
 800f6e0:	2310      	movs	r3, #16
 800f6e2:	42b2      	cmp	r2, r6
 800f6e4:	fa03 f305 	lsl.w	r3, r3, r5
 800f6e8:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800f6ec:	d907      	bls.n	800f6fe <E131Params::callbackFunction(char const*)+0xc6>
 800f6ee:	4422      	add	r2, r4
 800f6f0:	3501      	adds	r5, #1
 800f6f2:	ea21 0103 	bic.w	r1, r1, r3
 800f6f6:	f8a2 500b 	strh.w	r5, [r2, #11]
 800f6fa:	6061      	str	r1, [r4, #4]
 800f6fc:	e7ce      	b.n	800f69c <E131Params::callbackFunction(char const*)+0x64>
 800f6fe:	4422      	add	r2, r4
 800f700:	430b      	orrs	r3, r1
 800f702:	f8a2 000b 	strh.w	r0, [r2, #11]
 800f706:	6063      	str	r3, [r4, #4]
 800f708:	e7c8      	b.n	800f69c <E131Params::callbackFunction(char const*)+0x64>
 800f70a:	2712      	movs	r7, #18
 800f70c:	2303      	movs	r3, #3
 800f70e:	436f      	muls	r7, r5
 800f710:	9301      	str	r3, [sp, #4]
 800f712:	aa02      	add	r2, sp, #8
 800f714:	ab01      	add	r3, sp, #4
 800f716:	eb0a 0107 	add.w	r1, sl, r7
 800f71a:	4630      	mov	r0, r6
 800f71c:	f007 ffa4 	bl	8017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800f720:	bb08      	cbnz	r0, 800f766 <E131Params::callbackFunction(char const*)+0x12e>
 800f722:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800f726:	6862      	ldr	r2, [r4, #4]
 800f728:	f041 0120 	orr.w	r1, r1, #32
 800f72c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f730:	296c      	cmp	r1, #108	; 0x6c
 800f732:	fa03 f305 	lsl.w	r3, r3, r5
 800f736:	4425      	add	r5, r4
 800f738:	d10f      	bne.n	800f75a <E131Params::callbackFunction(char const*)+0x122>
 800f73a:	f89d 1009 	ldrb.w	r1, [sp, #9]
 800f73e:	f041 0120 	orr.w	r1, r1, #32
 800f742:	2974      	cmp	r1, #116	; 0x74
 800f744:	d109      	bne.n	800f75a <E131Params::callbackFunction(char const*)+0x122>
 800f746:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800f74a:	f041 0120 	orr.w	r1, r1, #32
 800f74e:	2970      	cmp	r1, #112	; 0x70
 800f750:	d103      	bne.n	800f75a <E131Params::callbackFunction(char const*)+0x122>
 800f752:	2101      	movs	r1, #1
 800f754:	7529      	strb	r1, [r5, #20]
 800f756:	4313      	orrs	r3, r2
 800f758:	e7d5      	b.n	800f706 <E131Params::callbackFunction(char const*)+0xce>
 800f75a:	2100      	movs	r1, #0
 800f75c:	ea22 0203 	bic.w	r2, r2, r3
 800f760:	7529      	strb	r1, [r5, #20]
 800f762:	6062      	str	r2, [r4, #4]
 800f764:	e79a      	b.n	800f69c <E131Params::callbackFunction(char const*)+0x64>
 800f766:	2307      	movs	r3, #7
 800f768:	9301      	str	r3, [sp, #4]
 800f76a:	aa02      	add	r2, sp, #8
 800f76c:	ab01      	add	r3, sp, #4
 800f76e:	eb0b 0107 	add.w	r1, fp, r7
 800f772:	4630      	mov	r0, r6
 800f774:	f007 ff78 	bl	8017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800f778:	2800      	cmp	r0, #0
 800f77a:	d15e      	bne.n	800f83a <E131Params::callbackFunction(char const*)+0x202>
 800f77c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f780:	f043 0320 	orr.w	r3, r3, #32
 800f784:	2b69      	cmp	r3, #105	; 0x69
 800f786:	d123      	bne.n	800f7d0 <E131Params::callbackFunction(char const*)+0x198>
 800f788:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f78c:	f043 0320 	orr.w	r3, r3, #32
 800f790:	2b6e      	cmp	r3, #110	; 0x6e
 800f792:	d146      	bne.n	800f822 <E131Params::callbackFunction(char const*)+0x1ea>
 800f794:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800f798:	f043 0320 	orr.w	r3, r3, #32
 800f79c:	2b70      	cmp	r3, #112	; 0x70
 800f79e:	d140      	bne.n	800f822 <E131Params::callbackFunction(char const*)+0x1ea>
 800f7a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f7a4:	f043 0320 	orr.w	r3, r3, #32
 800f7a8:	2b75      	cmp	r3, #117	; 0x75
 800f7aa:	d13a      	bne.n	800f822 <E131Params::callbackFunction(char const*)+0x1ea>
 800f7ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f7b0:	f043 0320 	orr.w	r3, r3, #32
 800f7b4:	3b74      	subs	r3, #116	; 0x74
 800f7b6:	bf18      	it	ne
 800f7b8:	2301      	movne	r3, #1
 800f7ba:	f8b4 201d 	ldrh.w	r2, [r4, #29]
 800f7be:	006d      	lsls	r5, r5, #1
 800f7c0:	2103      	movs	r1, #3
 800f7c2:	40a9      	lsls	r1, r5
 800f7c4:	ea22 0201 	bic.w	r2, r2, r1
 800f7c8:	bb6b      	cbnz	r3, 800f826 <E131Params::callbackFunction(char const*)+0x1ee>
 800f7ca:	f8a4 201d 	strh.w	r2, [r4, #29]
 800f7ce:	e765      	b.n	800f69c <E131Params::callbackFunction(char const*)+0x64>
 800f7d0:	2b64      	cmp	r3, #100	; 0x64
 800f7d2:	d126      	bne.n	800f822 <E131Params::callbackFunction(char const*)+0x1ea>
 800f7d4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f7d8:	f043 0320 	orr.w	r3, r3, #32
 800f7dc:	2b69      	cmp	r3, #105	; 0x69
 800f7de:	d120      	bne.n	800f822 <E131Params::callbackFunction(char const*)+0x1ea>
 800f7e0:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800f7e4:	f043 0320 	orr.w	r3, r3, #32
 800f7e8:	2b73      	cmp	r3, #115	; 0x73
 800f7ea:	d11a      	bne.n	800f822 <E131Params::callbackFunction(char const*)+0x1ea>
 800f7ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f7f0:	f043 0320 	orr.w	r3, r3, #32
 800f7f4:	2b61      	cmp	r3, #97	; 0x61
 800f7f6:	d114      	bne.n	800f822 <E131Params::callbackFunction(char const*)+0x1ea>
 800f7f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f7fc:	f043 0320 	orr.w	r3, r3, #32
 800f800:	2b62      	cmp	r3, #98	; 0x62
 800f802:	d10e      	bne.n	800f822 <E131Params::callbackFunction(char const*)+0x1ea>
 800f804:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800f808:	f043 0320 	orr.w	r3, r3, #32
 800f80c:	2b6c      	cmp	r3, #108	; 0x6c
 800f80e:	d108      	bne.n	800f822 <E131Params::callbackFunction(char const*)+0x1ea>
 800f810:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800f814:	f043 0320 	orr.w	r3, r3, #32
 800f818:	2b65      	cmp	r3, #101	; 0x65
 800f81a:	bf14      	ite	ne
 800f81c:	2301      	movne	r3, #1
 800f81e:	2302      	moveq	r3, #2
 800f820:	e7cb      	b.n	800f7ba <E131Params::callbackFunction(char const*)+0x182>
 800f822:	2301      	movs	r3, #1
 800f824:	e7c9      	b.n	800f7ba <E131Params::callbackFunction(char const*)+0x182>
 800f826:	2b02      	cmp	r3, #2
 800f828:	bf15      	itete	ne
 800f82a:	2301      	movne	r3, #1
 800f82c:	40ab      	lsleq	r3, r5
 800f82e:	fa03 f505 	lslne.w	r5, r3, r5
 800f832:	431a      	orreq	r2, r3
 800f834:	bf18      	it	ne
 800f836:	432a      	orrne	r2, r5
 800f838:	e7c7      	b.n	800f7ca <E131Params::callbackFunction(char const*)+0x192>
 800f83a:	f10d 0201 	add.w	r2, sp, #1
 800f83e:	4641      	mov	r1, r8
 800f840:	4630      	mov	r0, r6
 800f842:	f008 f80e 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f846:	b9a0      	cbnz	r0, 800f872 <E131Params::callbackFunction(char const*)+0x23a>
 800f848:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f84c:	6863      	ldr	r3, [r4, #4]
 800f84e:	1e48      	subs	r0, r1, #1
 800f850:	b2c0      	uxtb	r0, r0
 800f852:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f856:	28c7      	cmp	r0, #199	; 0xc7
 800f858:	fa02 f205 	lsl.w	r2, r2, r5
 800f85c:	4425      	add	r5, r4
 800f85e:	d803      	bhi.n	800f868 <E131Params::callbackFunction(char const*)+0x230>
 800f860:	2964      	cmp	r1, #100	; 0x64
 800f862:	d001      	beq.n	800f868 <E131Params::callbackFunction(char const*)+0x230>
 800f864:	77e9      	strb	r1, [r5, #31]
 800f866:	e776      	b.n	800f756 <E131Params::callbackFunction(char const*)+0x11e>
 800f868:	2164      	movs	r1, #100	; 0x64
 800f86a:	77e9      	strb	r1, [r5, #31]
 800f86c:	ea23 0302 	bic.w	r3, r3, r2
 800f870:	e749      	b.n	800f706 <E131Params::callbackFunction(char const*)+0xce>
 800f872:	3501      	adds	r5, #1
 800f874:	2d04      	cmp	r5, #4
 800f876:	f109 0910 	add.w	r9, r9, #16
 800f87a:	f108 0812 	add.w	r8, r8, #18
 800f87e:	f47f af21 	bne.w	800f6c4 <E131Params::callbackFunction(char const*)+0x8c>
 800f882:	490e      	ldr	r1, [pc, #56]	; (800f8bc <E131Params::callbackFunction(char const*)+0x284>)
 800f884:	f10d 0201 	add.w	r2, sp, #1
 800f888:	4630      	mov	r0, r6
 800f88a:	f007 ffea 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800f88e:	2800      	cmp	r0, #0
 800f890:	f47f af04 	bne.w	800f69c <E131Params::callbackFunction(char const*)+0x64>
 800f894:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f898:	6863      	ldr	r3, [r4, #4]
 800f89a:	b112      	cbz	r2, 800f8a2 <E131Params::callbackFunction(char const*)+0x26a>
 800f89c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f8a0:	e731      	b.n	800f706 <E131Params::callbackFunction(char const*)+0xce>
 800f8a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f8a6:	e72e      	b.n	800f706 <E131Params::callbackFunction(char const*)+0xce>
 800f8a8:	0801dd2a 	stmdaeq	r1, {r1, r3, r5, r8, sl, fp, ip, lr, pc}
 800f8ac:	0801c0da 	stmdaeq	r1, {r1, r3, r4, r6, r7, lr, pc}
 800f8b0:	0801c0df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, lr, pc}
 800f8b4:	0801b326 	stmdaeq	r1, {r1, r2, r5, r8, r9, ip, sp, pc}
 800f8b8:	0801c0e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, lr, pc}
 800f8bc:	0801dd14 	stmdaeq	r1, {r2, r4, r8, sl, fp, ip, lr, pc}
 800f8c0:	0801db3a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, fp, ip, lr, pc}
 800f8c4:	0801c34c 	stmdaeq	r1, {r2, r3, r6, r8, r9, lr, pc}
 800f8c8:	0801dcba 	stmdaeq	r1, {r1, r3, r4, r5, r7, sl, fp, ip, lr, pc}
 800f8cc:	0801dd3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, fp, ip, lr, pc}

0800f8d0 <E131Params::staticCallbackFunction(void*, char const*)>:
 800f8d0:	f7ff beb2 	b.w	800f638 <E131Params::callbackFunction(char const*)>

0800f8d4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
 800f8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d8:	4604      	mov	r4, r0
 800f8da:	b087      	sub	sp, #28
 800f8dc:	4615      	mov	r5, r2
 800f8de:	461e      	mov	r6, r3
 800f8e0:	3004      	adds	r0, #4
 800f8e2:	2900      	cmp	r1, #0
 800f8e4:	d05f      	beq.n	800f9a6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xd2>
 800f8e6:	221f      	movs	r2, #31
 800f8e8:	f008 fd69 	bl	80183be <memmove>
 800f8ec:	4633      	mov	r3, r6
 800f8ee:	462a      	mov	r2, r5
 800f8f0:	4990      	ldr	r1, [pc, #576]	; (800fb34 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x260>)
 800f8f2:	4f91      	ldr	r7, [pc, #580]	; (800fb38 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x264>)
 800f8f4:	4e91      	ldr	r6, [pc, #580]	; (800fb3c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x268>)
 800f8f6:	f8df 8280 	ldr.w	r8, [pc, #640]	; 800fb78 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a4>
 800f8fa:	f8df 9278 	ldr.w	r9, [pc, #632]	; 800fb74 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>
 800f8fe:	a803      	add	r0, sp, #12
 800f900:	f007 fdda 	bl	80174b8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800f904:	2500      	movs	r5, #0
 800f906:	f8d8 2000 	ldr.w	r2, [r8]
 800f90a:	6863      	ldr	r3, [r4, #4]
 800f90c:	42aa      	cmp	r2, r5
 800f90e:	d851      	bhi.n	800f9b4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xe0>
 800f910:	f8b4 1009 	ldrh.w	r1, [r4, #9]
 800f914:	4a8a      	ldr	r2, [pc, #552]	; (800fb40 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x26c>)
 800f916:	4e8b      	ldr	r6, [pc, #556]	; (800fb44 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800f918:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f91c:	498a      	ldr	r1, [pc, #552]	; (800fb48 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800f91e:	f8df 925c 	ldr.w	r9, [pc, #604]	; 800fb7c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a8>
 800f922:	f8df a25c 	ldr.w	sl, [pc, #604]	; 800fb80 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2ac>
 800f926:	f003 0301 	and.w	r3, r3, #1
 800f92a:	a803      	add	r0, sp, #12
 800f92c:	f7ff fe18 	bl	800f560 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800f930:	4986      	ldr	r1, [pc, #536]	; (800fb4c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800f932:	a803      	add	r0, sp, #12
 800f934:	f007 fe46 	bl	80175c4 <PropertiesBuilder::AddComment(char const*)>
 800f938:	f104 0713 	add.w	r7, r4, #19
 800f93c:	2500      	movs	r5, #0
 800f93e:	f44f 7b80 	mov.w	fp, #256	; 0x100
 800f942:	f8d8 3000 	ldr.w	r3, [r8]
 800f946:	42ab      	cmp	r3, r5
 800f948:	d87f      	bhi.n	800fa4a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x176>
 800f94a:	4981      	ldr	r1, [pc, #516]	; (800fb50 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800f94c:	4e81      	ldr	r6, [pc, #516]	; (800fb54 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800f94e:	f8df a21c 	ldr.w	sl, [pc, #540]	; 800fb6c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>
 800f952:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800fb60 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>
 800f956:	a803      	add	r0, sp, #12
 800f958:	f007 fe34 	bl	80175c4 <PropertiesBuilder::AddComment(char const*)>
 800f95c:	f104 091e 	add.w	r9, r4, #30
 800f960:	2700      	movs	r7, #0
 800f962:	f8d8 3000 	ldr.w	r3, [r8]
 800f966:	42bb      	cmp	r3, r7
 800f968:	f200 8083 	bhi.w	800fa72 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x19e>
 800f96c:	497a      	ldr	r1, [pc, #488]	; (800fb58 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800f96e:	a803      	add	r0, sp, #12
 800f970:	f007 fe28 	bl	80175c4 <PropertiesBuilder::AddComment(char const*)>
 800f974:	6863      	ldr	r3, [r4, #4]
 800f976:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f97a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800f97e:	42a2      	cmp	r2, r4
 800f980:	f080 80b8 	bcs.w	800faf4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x220>
 800f984:	9803      	ldr	r0, [sp, #12]
 800f986:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800f98a:	4410      	add	r0, r2
 800f98c:	eba4 0402 	sub.w	r4, r4, r2
 800f990:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800f994:	f040 809d 	bne.w	800fad2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1fe>
 800f998:	2a00      	cmp	r2, #0
 800f99a:	f040 809b 	bne.w	800fad4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x200>
 800f99e:	9200      	str	r2, [sp, #0]
 800f9a0:	4b6e      	ldr	r3, [pc, #440]	; (800fb5c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800f9a2:	4a6f      	ldr	r2, [pc, #444]	; (800fb60 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800f9a4:	e09c      	b.n	800fae0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800f9a6:	6823      	ldr	r3, [r4, #0]
 800f9a8:	681a      	ldr	r2, [r3, #0]
 800f9aa:	4601      	mov	r1, r0
 800f9ac:	68d2      	ldr	r2, [r2, #12]
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	4790      	blx	r2
 800f9b2:	e79b      	b.n	800f8ec <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x18>
 800f9b4:	f8bd c012 	ldrh.w	ip, [sp, #18]
 800f9b8:	f8bd b010 	ldrh.w	fp, [sp, #16]
 800f9bc:	eb04 0245 	add.w	r2, r4, r5, lsl #1
 800f9c0:	45dc      	cmp	ip, fp
 800f9c2:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800f9c6:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800f9ca:	d221      	bcs.n	800fa10 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x13c>
 800f9cc:	2110      	movs	r1, #16
 800f9ce:	9803      	ldr	r0, [sp, #12]
 800f9d0:	40a9      	lsls	r1, r5
 800f9d2:	ea31 0303 	bics.w	r3, r1, r3
 800f9d6:	4460      	add	r0, ip
 800f9d8:	ebab 0b0c 	sub.w	fp, fp, ip
 800f9dc:	f89d c014 	ldrb.w	ip, [sp, #20]
 800f9e0:	d006      	beq.n	800f9f0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 800f9e2:	f1bc 0f00 	cmp.w	ip, #0
 800f9e6:	d106      	bne.n	800f9f6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x122>
 800f9e8:	9200      	str	r2, [sp, #0]
 800f9ea:	4633      	mov	r3, r6
 800f9ec:	4a5c      	ldr	r2, [pc, #368]	; (800fb60 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800f9ee:	e005      	b.n	800f9fc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800f9f0:	f1bc 0f00 	cmp.w	ip, #0
 800f9f4:	d023      	beq.n	800fa3e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x16a>
 800f9f6:	9200      	str	r2, [sp, #0]
 800f9f8:	4633      	mov	r3, r6
 800f9fa:	464a      	mov	r2, r9
 800f9fc:	4659      	mov	r1, fp
 800f9fe:	f7fa fd73 	bl	800a4e8 <snprintf>
 800fa02:	4583      	cmp	fp, r0
 800fa04:	bfa2      	ittt	ge
 800fa06:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800fa0a:	18c0      	addge	r0, r0, r3
 800fa0c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800fa10:	f8b4 301d 	ldrh.w	r3, [r4, #29]
 800fa14:	fa23 f30a 	lsr.w	r3, r3, sl
 800fa18:	f013 0303 	ands.w	r3, r3, #3
 800fa1c:	d013      	beq.n	800fa46 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x172>
 800fa1e:	4a51      	ldr	r2, [pc, #324]	; (800fb64 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800fa20:	4951      	ldr	r1, [pc, #324]	; (800fb68 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800fa22:	2b02      	cmp	r3, #2
 800fa24:	bf08      	it	eq
 800fa26:	460a      	moveq	r2, r1
 800fa28:	3b01      	subs	r3, #1
 800fa2a:	4639      	mov	r1, r7
 800fa2c:	bf18      	it	ne
 800fa2e:	2301      	movne	r3, #1
 800fa30:	a803      	add	r0, sp, #12
 800fa32:	f7ff fd95 	bl	800f560 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800fa36:	3501      	adds	r5, #1
 800fa38:	3712      	adds	r7, #18
 800fa3a:	3610      	adds	r6, #16
 800fa3c:	e763      	b.n	800f906 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x32>
 800fa3e:	9200      	str	r2, [sp, #0]
 800fa40:	4633      	mov	r3, r6
 800fa42:	4a4a      	ldr	r2, [pc, #296]	; (800fb6c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800fa44:	e7da      	b.n	800f9fc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800fa46:	4a4a      	ldr	r2, [pc, #296]	; (800fb70 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800fa48:	e7ee      	b.n	800fa28 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x154>
 800fa4a:	6861      	ldr	r1, [r4, #4]
 800fa4c:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800fa50:	fa0b f305 	lsl.w	r3, fp, r5
 800fa54:	438b      	bics	r3, r1
 800fa56:	bf0c      	ite	eq
 800fa58:	2301      	moveq	r3, #1
 800fa5a:	2300      	movne	r3, #0
 800fa5c:	4631      	mov	r1, r6
 800fa5e:	2a00      	cmp	r2, #0
 800fa60:	bf0c      	ite	eq
 800fa62:	464a      	moveq	r2, r9
 800fa64:	4652      	movne	r2, sl
 800fa66:	a803      	add	r0, sp, #12
 800fa68:	f7ff fd7a 	bl	800f560 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800fa6c:	3501      	adds	r5, #1
 800fa6e:	3612      	adds	r6, #18
 800fa70:	e767      	b.n	800f942 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x6e>
 800fa72:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800fa76:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800fa7a:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800fa7e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800fa82:	42a9      	cmp	r1, r5
 800fa84:	d21e      	bcs.n	800fac4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f0>
 800fa86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fa8a:	9803      	ldr	r0, [sp, #12]
 800fa8c:	40ba      	lsls	r2, r7
 800fa8e:	ea32 0c0c 	bics.w	ip, r2, ip
 800fa92:	4408      	add	r0, r1
 800fa94:	eba5 0501 	sub.w	r5, r5, r1
 800fa98:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800fa9c:	d004      	beq.n	800faa8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d4>
 800fa9e:	b921      	cbnz	r1, 800faaa <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d6>
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	465a      	mov	r2, fp
 800faa4:	4633      	mov	r3, r6
 800faa6:	e003      	b.n	800fab0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800faa8:	b179      	cbz	r1, 800faca <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f6>
 800faaa:	4a32      	ldr	r2, [pc, #200]	; (800fb74 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800faac:	9300      	str	r3, [sp, #0]
 800faae:	4633      	mov	r3, r6
 800fab0:	4629      	mov	r1, r5
 800fab2:	f7fa fd19 	bl	800a4e8 <snprintf>
 800fab6:	4285      	cmp	r5, r0
 800fab8:	bfa2      	ittt	ge
 800faba:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800fabe:	18c0      	addge	r0, r0, r3
 800fac0:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800fac4:	3701      	adds	r7, #1
 800fac6:	3612      	adds	r6, #18
 800fac8:	e74b      	b.n	800f962 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800faca:	9300      	str	r3, [sp, #0]
 800facc:	4652      	mov	r2, sl
 800face:	4633      	mov	r3, r6
 800fad0:	e7ee      	b.n	800fab0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800fad2:	b34a      	cbz	r2, 800fb28 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x254>
 800fad4:	3b00      	subs	r3, #0
 800fad6:	bf18      	it	ne
 800fad8:	2301      	movne	r3, #1
 800fada:	9300      	str	r3, [sp, #0]
 800fadc:	4a25      	ldr	r2, [pc, #148]	; (800fb74 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800fade:	4b1f      	ldr	r3, [pc, #124]	; (800fb5c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800fae0:	4621      	mov	r1, r4
 800fae2:	f7fa fd01 	bl	800a4e8 <snprintf>
 800fae6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800faea:	4284      	cmp	r4, r0
 800faec:	bfa4      	itt	ge
 800faee:	181b      	addge	r3, r3, r0
 800faf0:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800faf4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800faf8:	b17b      	cbz	r3, 800fb1a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800fafa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800fafe:	9b03      	ldr	r3, [sp, #12]
 800fb00:	4413      	add	r3, r2
 800fb02:	227d      	movs	r2, #125	; 0x7d
 800fb04:	f803 2c01 	strb.w	r2, [r3, #-1]
 800fb08:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fb0c:	9903      	ldr	r1, [sp, #12]
 800fb0e:	54ca      	strb	r2, [r1, r3]
 800fb10:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fb14:	3301      	adds	r3, #1
 800fb16:	f8ad 3012 	strh.w	r3, [sp, #18]
 800fb1a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800fb1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb20:	601a      	str	r2, [r3, #0]
 800fb22:	b007      	add	sp, #28
 800fb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb28:	2301      	movs	r3, #1
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	4a0f      	ldr	r2, [pc, #60]	; (800fb6c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800fb2e:	4b0b      	ldr	r3, [pc, #44]	; (800fb5c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800fb30:	e7d6      	b.n	800fae0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800fb32:	bf00      	nop
 800fb34:	0801c394 	stmdaeq	r1, {r2, r4, r7, r8, r9, lr, pc}
 800fb38:	0801dd3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, fp, ip, lr, pc}
 800fb3c:	0801db3a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, fp, ip, lr, pc}
 800fb40:	0801c33c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, lr, pc}
 800fb44:	0801dcba 	stmdaeq	r1, {r1, r3, r4, r5, r7, sl, fp, ip, lr, pc}
 800fb48:	0801dd2a 	stmdaeq	r1, {r1, r3, r5, r8, sl, fp, ip, lr, pc}
 800fb4c:	0801c327 	stmdaeq	r1, {r0, r1, r2, r5, r8, r9, lr, pc}
 800fb50:	0801c332 	stmdaeq	r1, {r1, r4, r5, r8, r9, lr, pc}
 800fb54:	0801c34c 	stmdaeq	r1, {r2, r3, r6, r8, r9, lr, pc}
 800fb58:	0801af21 	stmdaeq	r1, {r0, r5, r8, r9, sl, fp, sp, pc}
 800fb5c:	0801dd14 	stmdaeq	r1, {r2, r4, r8, sl, fp, ip, lr, pc}
 800fb60:	0801b161 	stmdaeq	r1, {r0, r5, r6, r8, ip, sp, pc}
 800fb64:	0801c0f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, lr, pc}
 800fb68:	0801c0fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, lr, pc}
 800fb6c:	0801b162 	stmdaeq	r1, {r1, r5, r6, r8, ip, sp, pc}
 800fb70:	0801c0f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, lr, pc}
 800fb74:	0801b158 	stmdaeq	r1, {r3, r4, r6, r8, ip, sp, pc}
 800fb78:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800fb7c:	0801c10a 	stmdaeq	r1, {r1, r3, r8, lr, pc}
 800fb80:	0801c106 	stmdaeq	r1, {r1, r2, r8, lr, pc}

0800fb84 <E131Params::Save(char*, unsigned int, unsigned int&)>:
 800fb84:	b513      	push	{r0, r1, r4, lr}
 800fb86:	6804      	ldr	r4, [r0, #0]
 800fb88:	b914      	cbnz	r4, 800fb90 <E131Params::Save(char*, unsigned int, unsigned int&)+0xc>
 800fb8a:	601c      	str	r4, [r3, #0]
 800fb8c:	b002      	add	sp, #8
 800fb8e:	bd10      	pop	{r4, pc}
 800fb90:	9300      	str	r3, [sp, #0]
 800fb92:	4613      	mov	r3, r2
 800fb94:	460a      	mov	r2, r1
 800fb96:	2100      	movs	r1, #0
 800fb98:	f7ff fe9c 	bl	800f8d4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>
 800fb9c:	e7f6      	b.n	800fb8c <E131Params::Save(char*, unsigned int, unsigned int&)+0x8>

0800fb9e <LLRPDevice::~LLRPDevice()>:
 800fb9e:	4770      	bx	lr

0800fba0 <LLRPDevice::CopyUID(unsigned char*)>:
 800fba0:	4770      	bx	lr

0800fba2 <LLRPDevice::CopyCID(unsigned char*)>:
 800fba2:	4770      	bx	lr

0800fba4 <LLRPDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 800fba4:	2000      	movs	r0, #0
 800fba6:	4770      	bx	lr

0800fba8 <LLRPDevice::~LLRPDevice()>:
 800fba8:	b510      	push	{r4, lr}
 800fbaa:	4604      	mov	r4, r0
 800fbac:	f008 fb44 	bl	8018238 <operator delete(void*)>
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	bd10      	pop	{r4, pc}

0800fbb4 <memcpy.isra.0>:
 800fbb4:	3801      	subs	r0, #1
 800fbb6:	440a      	add	r2, r1
 800fbb8:	4291      	cmp	r1, r2
 800fbba:	d100      	bne.n	800fbbe <memcpy.isra.0+0xa>
 800fbbc:	4770      	bx	lr
 800fbbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbc2:	f800 3f01 	strb.w	r3, [r0, #1]!
 800fbc6:	e7f7      	b.n	800fbb8 <memcpy.isra.0+0x4>

0800fbc8 <LLRPDevice::LLRPDevice()>:
 800fbc8:	b513      	push	{r0, r1, r4, lr}
 800fbca:	4b0a      	ldr	r3, [pc, #40]	; (800fbf4 <LLRPDevice::LLRPDevice()+0x2c>)
 800fbcc:	6003      	str	r3, [r0, #0]
 800fbce:	4604      	mov	r4, r0
 800fbd0:	a901      	add	r1, sp, #4
 800fbd2:	4809      	ldr	r0, [pc, #36]	; (800fbf8 <LLRPDevice::LLRPDevice()+0x30>)
 800fbd4:	f008 fb38 	bl	8018248 <inet_aton>
 800fbd8:	4b08      	ldr	r3, [pc, #32]	; (800fbfc <LLRPDevice::LLRPDevice()+0x34>)
 800fbda:	9a01      	ldr	r2, [sp, #4]
 800fbdc:	4808      	ldr	r0, [pc, #32]	; (800fc00 <LLRPDevice::LLRPDevice()+0x38>)
 800fbde:	601a      	str	r2, [r3, #0]
 800fbe0:	a901      	add	r1, sp, #4
 800fbe2:	f008 fb31 	bl	8018248 <inet_aton>
 800fbe6:	4b07      	ldr	r3, [pc, #28]	; (800fc04 <LLRPDevice::LLRPDevice()+0x3c>)
 800fbe8:	9a01      	ldr	r2, [sp, #4]
 800fbea:	601a      	str	r2, [r3, #0]
 800fbec:	4620      	mov	r0, r4
 800fbee:	b002      	add	sp, #8
 800fbf0:	bd10      	pop	{r4, pc}
 800fbf2:	bf00      	nop
 800fbf4:	0801c45c 	stmdaeq	r1, {r2, r3, r4, r6, sl, lr, pc}
 800fbf8:	0801c3ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, lr, pc}
 800fbfc:	200006f8 	strdcs	r0, [r0], -r8
 800fc00:	0801c3bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, r9, lr, pc}
 800fc04:	200006fc 	strdcs	r0, [r0], -ip

0800fc08 <LLRPDevice::HandleRequestMessage()>:
 800fc08:	b530      	push	{r4, r5, lr}
 800fc0a:	4b24      	ldr	r3, [pc, #144]	; (800fc9c <LLRPDevice::HandleRequestMessage()+0x94>)
 800fc0c:	681c      	ldr	r4, [r3, #0]
 800fc0e:	b089      	sub	sp, #36	; 0x24
 800fc10:	2210      	movs	r2, #16
 800fc12:	4605      	mov	r5, r0
 800fc14:	f104 0117 	add.w	r1, r4, #23
 800fc18:	eb0d 0002 	add.w	r0, sp, r2
 800fc1c:	9103      	str	r1, [sp, #12]
 800fc1e:	f7ff ffc9 	bl	800fbb4 <memcpy.isra.0>
 800fc22:	2343      	movs	r3, #67	; 0x43
 800fc24:	74a3      	strb	r3, [r4, #18]
 800fc26:	682b      	ldr	r3, [r5, #0]
 800fc28:	9903      	ldr	r1, [sp, #12]
 800fc2a:	68db      	ldr	r3, [r3, #12]
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	4798      	blx	r3
 800fc30:	232c      	movs	r3, #44	; 0x2c
 800fc32:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800fc36:	2300      	movs	r3, #0
 800fc38:	2210      	movs	r2, #16
 800fc3a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 800fc3e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
 800fc42:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800fc46:	2302      	movs	r3, #2
 800fc48:	eb0d 0102 	add.w	r1, sp, r2
 800fc4c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fc50:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 800fc54:	f7ff ffae 	bl	800fbb4 <memcpy.isra.0>
 800fc58:	2311      	movs	r3, #17
 800fc5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800fc5e:	2301      	movs	r3, #1
 800fc60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc64:	682b      	ldr	r3, [r5, #0]
 800fc66:	f104 0146 	add.w	r1, r4, #70	; 0x46
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	689b      	ldr	r3, [r3, #8]
 800fc6e:	4798      	blx	r3
 800fc70:	4b0b      	ldr	r3, [pc, #44]	; (800fca0 <LLRPDevice::HandleRequestMessage()+0x98>)
 800fc72:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800fc76:	6818      	ldr	r0, [r3, #0]
 800fc78:	f004 ffe5 	bl	8014c46 <Network::MacAddressCopyTo(unsigned char*)>
 800fc7c:	23ff      	movs	r3, #255	; 0xff
 800fc7e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 800fc82:	f241 53c1 	movw	r3, #5569	; 0x15c1
 800fc86:	9300      	str	r3, [sp, #0]
 800fc88:	4806      	ldr	r0, [pc, #24]	; (800fca4 <LLRPDevice::HandleRequestMessage()+0x9c>)
 800fc8a:	4b07      	ldr	r3, [pc, #28]	; (800fca8 <LLRPDevice::HandleRequestMessage()+0xa0>)
 800fc8c:	7800      	ldrb	r0, [r0, #0]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	2253      	movs	r2, #83	; 0x53
 800fc92:	4621      	mov	r1, r4
 800fc94:	f004 fb04 	bl	80142a0 <udp_send>
 800fc98:	b009      	add	sp, #36	; 0x24
 800fc9a:	bd30      	pop	{r4, r5, pc}
 800fc9c:	20000700 	andcs	r0, r0, r0, lsl #14
 800fca0:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 800fca4:	20000000 	andcs	r0, r0, r0
 800fca8:	200006fc 	strdcs	r0, [r0], -ip

0800fcac <LLRPDevice::HandleRdmCommand()>:
 800fcac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcb0:	4b23      	ldr	r3, [pc, #140]	; (800fd40 <LLRPDevice::HandleRdmCommand()+0x94>)
 800fcb2:	681c      	ldr	r4, [r3, #0]
 800fcb4:	6803      	ldr	r3, [r0, #0]
 800fcb6:	f104 0946 	add.w	r9, r4, #70	; 0x46
 800fcba:	691b      	ldr	r3, [r3, #16]
 800fcbc:	b089      	sub	sp, #36	; 0x24
 800fcbe:	4649      	mov	r1, r9
 800fcc0:	4607      	mov	r7, r0
 800fcc2:	4798      	blx	r3
 800fcc4:	4605      	mov	r5, r0
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d036      	beq.n	800fd38 <LLRPDevice::HandleRdmCommand()+0x8c>
 800fcca:	7803      	ldrb	r3, [r0, #0]
 800fccc:	2bcc      	cmp	r3, #204	; 0xcc
 800fcce:	d133      	bne.n	800fd38 <LLRPDevice::HandleRdmCommand()+0x8c>
 800fcd0:	2210      	movs	r2, #16
 800fcd2:	eb0d 0002 	add.w	r0, sp, r2
 800fcd6:	f104 0117 	add.w	r1, r4, #23
 800fcda:	9103      	str	r1, [sp, #12]
 800fcdc:	f7ff ff6a 	bl	800fbb4 <memcpy.isra.0>
 800fce0:	78ae      	ldrb	r6, [r5, #2]
 800fce2:	9903      	ldr	r1, [sp, #12]
 800fce4:	f106 0837 	add.w	r8, r6, #55	; 0x37
 800fce8:	fa5f f888 	uxtb.w	r8, r8
 800fcec:	f884 8012 	strb.w	r8, [r4, #18]
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	4638      	mov	r0, r7
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	4798      	blx	r3
 800fcf8:	f106 0320 	add.w	r3, r6, #32
 800fcfc:	2210      	movs	r2, #16
 800fcfe:	eb0d 0102 	add.w	r1, sp, r2
 800fd02:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800fd06:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 800fd0a:	f7ff ff53 	bl	800fbb4 <memcpy.isra.0>
 800fd0e:	1d73      	adds	r3, r6, #5
 800fd10:	1c72      	adds	r2, r6, #1
 800fd12:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800fd16:	b2d2      	uxtb	r2, r2
 800fd18:	1c69      	adds	r1, r5, #1
 800fd1a:	4648      	mov	r0, r9
 800fd1c:	f7ff ff4a 	bl	800fbb4 <memcpy.isra.0>
 800fd20:	f241 53c1 	movw	r3, #5569	; 0x15c1
 800fd24:	9300      	str	r3, [sp, #0]
 800fd26:	4807      	ldr	r0, [pc, #28]	; (800fd44 <LLRPDevice::HandleRdmCommand()+0x98>)
 800fd28:	4b07      	ldr	r3, [pc, #28]	; (800fd48 <LLRPDevice::HandleRdmCommand()+0x9c>)
 800fd2a:	7800      	ldrb	r0, [r0, #0]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f108 0210 	add.w	r2, r8, #16
 800fd32:	4621      	mov	r1, r4
 800fd34:	f004 fab4 	bl	80142a0 <udp_send>
 800fd38:	b009      	add	sp, #36	; 0x24
 800fd3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd3e:	bf00      	nop
 800fd40:	20000700 	andcs	r0, r0, r0, lsl #14
 800fd44:	20000000 	andcs	r0, r0, r0
 800fd48:	200006fc 	strdcs	r0, [r0], -ip

0800fd4c <LLRPDevice::Run()>:
 800fd4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd4e:	4d0f      	ldr	r5, [pc, #60]	; (800fd8c <LLRPDevice::Run()+0x40>)
 800fd50:	4a0f      	ldr	r2, [pc, #60]	; (800fd90 <LLRPDevice::Run()+0x44>)
 800fd52:	4604      	mov	r4, r0
 800fd54:	480f      	ldr	r0, [pc, #60]	; (800fd94 <LLRPDevice::Run()+0x48>)
 800fd56:	f10d 0306 	add.w	r3, sp, #6
 800fd5a:	7800      	ldrb	r0, [r0, #0]
 800fd5c:	4629      	mov	r1, r5
 800fd5e:	f004 fa79 	bl	8014254 <udp_recv2>
 800fd62:	2841      	cmp	r0, #65	; 0x41
 800fd64:	d908      	bls.n	800fd78 <LLRPDevice::Run()+0x2c>
 800fd66:	682b      	ldr	r3, [r5, #0]
 800fd68:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800fd6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fd70:	ba1a      	rev	r2, r3
 800fd72:	d003      	beq.n	800fd7c <LLRPDevice::Run()+0x30>
 800fd74:	2a03      	cmp	r2, #3
 800fd76:	d005      	beq.n	800fd84 <LLRPDevice::Run()+0x38>
 800fd78:	b003      	add	sp, #12
 800fd7a:	bd30      	pop	{r4, r5, pc}
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	f7ff ff43 	bl	800fc08 <LLRPDevice::HandleRequestMessage()>
 800fd82:	e7f9      	b.n	800fd78 <LLRPDevice::Run()+0x2c>
 800fd84:	4620      	mov	r0, r4
 800fd86:	f7ff ff91 	bl	800fcac <LLRPDevice::HandleRdmCommand()>
 800fd8a:	e7f5      	b.n	800fd78 <LLRPDevice::Run()+0x2c>
 800fd8c:	20000700 	andcs	r0, r0, r0, lsl #14
 800fd90:	200006f4 	strdcs	r0, [r0], -r4
 800fd94:	20000000 	andcs	r0, r0, r0

0800fd98 <LLRPDevice::Print()>:
 800fd98:	b507      	push	{r0, r1, r2, lr}
 800fd9a:	4811      	ldr	r0, [pc, #68]	; (800fde0 <LLRPDevice::Print()+0x48>)
 800fd9c:	f7fa fb7c 	bl	800a498 <printf>
 800fda0:	f241 51c1 	movw	r1, #5569	; 0x15c1
 800fda4:	480f      	ldr	r0, [pc, #60]	; (800fde4 <LLRPDevice::Print()+0x4c>)
 800fda6:	f7fa fb77 	bl	800a498 <printf>
 800fdaa:	4b0f      	ldr	r3, [pc, #60]	; (800fde8 <LLRPDevice::Print()+0x50>)
 800fdac:	480f      	ldr	r0, [pc, #60]	; (800fdec <LLRPDevice::Print()+0x54>)
 800fdae:	6819      	ldr	r1, [r3, #0]
 800fdb0:	0e0b      	lsrs	r3, r1, #24
 800fdb2:	9300      	str	r3, [sp, #0]
 800fdb4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800fdb8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fdbc:	b2c9      	uxtb	r1, r1
 800fdbe:	f7fa fb6b 	bl	800a498 <printf>
 800fdc2:	4b0b      	ldr	r3, [pc, #44]	; (800fdf0 <LLRPDevice::Print()+0x58>)
 800fdc4:	480b      	ldr	r0, [pc, #44]	; (800fdf4 <LLRPDevice::Print()+0x5c>)
 800fdc6:	6819      	ldr	r1, [r3, #0]
 800fdc8:	0e0b      	lsrs	r3, r1, #24
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800fdd0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fdd4:	b2c9      	uxtb	r1, r1
 800fdd6:	f7fa fb5f 	bl	800a498 <printf>
 800fdda:	b003      	add	sp, #12
 800fddc:	f85d fb04 	ldr.w	pc, [sp], #4
 800fde0:	0801c3cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, r9, lr, pc}
 800fde4:	0801c3e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, r9, lr, pc}
 800fde8:	200006f8 	strdcs	r0, [r0], -r8
 800fdec:	0801c404 	stmdaeq	r1, {r2, sl, lr, pc}
 800fdf0:	200006fc 	strdcs	r0, [r0], -ip
 800fdf4:	0801c42b 	stmdaeq	r1, {r0, r1, r3, r5, sl, lr, pc}

0800fdf8 <RDMNetDevice::Print()>:
 800fdf8:	b510      	push	{r4, lr}
 800fdfa:	b08a      	sub	sp, #40	; 0x28
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	4604      	mov	r4, r0
 800fe00:	4669      	mov	r1, sp
 800fe02:	480a      	ldr	r0, [pc, #40]	; (800fe2c <RDMNetDevice::Print()+0x34>)
 800fe04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800fe08:	f001 f944 	bl	8011094 <uuid_unparse>
 800fe0c:	4808      	ldr	r0, [pc, #32]	; (800fe30 <RDMNetDevice::Print()+0x38>)
 800fe0e:	f7fa fb43 	bl	800a498 <printf>
 800fe12:	4669      	mov	r1, sp
 800fe14:	4807      	ldr	r0, [pc, #28]	; (800fe34 <RDMNetDevice::Print()+0x3c>)
 800fe16:	f7fa fb3f 	bl	800a498 <printf>
 800fe1a:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 800fe1e:	f7ff ffbb 	bl	800fd98 <LLRPDevice::Print()>
 800fe22:	4620      	mov	r0, r4
 800fe24:	f000 fa36 	bl	8010294 <RDMDeviceResponder::Print()>
 800fe28:	b00a      	add	sp, #40	; 0x28
 800fe2a:	bd10      	pop	{r4, pc}
 800fe2c:	20000805 	andcs	r0, r0, r5, lsl #16
 800fe30:	0801c4a2 	stmdaeq	r1, {r1, r5, r7, sl, lr, pc}
 800fe34:	0801c4aa 	stmdaeq	r1, {r1, r3, r5, r7, sl, lr, pc}

0800fe38 <RDMSensors::RDMSensors()>:
 800fe38:	2200      	movs	r2, #0
 800fe3a:	6002      	str	r2, [r0, #0]
 800fe3c:	7102      	strb	r2, [r0, #4]
 800fe3e:	4a01      	ldr	r2, [pc, #4]	; (800fe44 <RDMSensors::RDMSensors()+0xc>)
 800fe40:	6010      	str	r0, [r2, #0]
 800fe42:	4770      	bx	lr
 800fe44:	20000818 	andcs	r0, r0, r8, lsl r8

0800fe48 <RDMSensors::~RDMSensors()>:
 800fe48:	b570      	push	{r4, r5, r6, lr}
 800fe4a:	2500      	movs	r5, #0
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	462e      	mov	r6, r5
 800fe50:	7923      	ldrb	r3, [r4, #4]
 800fe52:	6820      	ldr	r0, [r4, #0]
 800fe54:	42ab      	cmp	r3, r5
 800fe56:	d804      	bhi.n	800fe62 <RDMSensors::~RDMSensors()+0x1a>
 800fe58:	b108      	cbz	r0, 800fe5e <RDMSensors::~RDMSensors()+0x16>
 800fe5a:	f008 f9ef 	bl	801823c <operator delete[](void*)>
 800fe5e:	4620      	mov	r0, r4
 800fe60:	bd70      	pop	{r4, r5, r6, pc}
 800fe62:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800fe66:	b128      	cbz	r0, 800fe74 <RDMSensors::~RDMSensors()+0x2c>
 800fe68:	6803      	ldr	r3, [r0, #0]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	4798      	blx	r3
 800fe6e:	6823      	ldr	r3, [r4, #0]
 800fe70:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 800fe74:	3501      	adds	r5, #1
 800fe76:	e7eb      	b.n	800fe50 <RDMSensors::~RDMSensors()+0x8>

0800fe78 <RDMSubDevices::RDMSubDevices()>:
 800fe78:	2200      	movs	r2, #0
 800fe7a:	6002      	str	r2, [r0, #0]
 800fe7c:	8082      	strh	r2, [r0, #4]
 800fe7e:	4a01      	ldr	r2, [pc, #4]	; (800fe84 <RDMSubDevices::RDMSubDevices()+0xc>)
 800fe80:	6010      	str	r0, [r2, #0]
 800fe82:	4770      	bx	lr
 800fe84:	2000081c 	andcs	r0, r0, ip, lsl r8

0800fe88 <RDMSubDevices::~RDMSubDevices()>:
 800fe88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe8a:	2500      	movs	r5, #0
 800fe8c:	4604      	mov	r4, r0
 800fe8e:	462e      	mov	r6, r5
 800fe90:	88a3      	ldrh	r3, [r4, #4]
 800fe92:	6820      	ldr	r0, [r4, #0]
 800fe94:	42ab      	cmp	r3, r5
 800fe96:	d804      	bhi.n	800fea2 <RDMSubDevices::~RDMSubDevices()+0x1a>
 800fe98:	b108      	cbz	r0, 800fe9e <RDMSubDevices::~RDMSubDevices()+0x16>
 800fe9a:	f008 f9cf 	bl	801823c <operator delete[](void*)>
 800fe9e:	4620      	mov	r0, r4
 800fea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fea2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800fea6:	00af      	lsls	r7, r5, #2
 800fea8:	b110      	cbz	r0, 800feb0 <RDMSubDevices::~RDMSubDevices()+0x28>
 800feaa:	6803      	ldr	r3, [r0, #0]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	4798      	blx	r3
 800feb0:	6823      	ldr	r3, [r4, #0]
 800feb2:	3501      	adds	r5, #1
 800feb4:	51de      	str	r6, [r3, r7]
 800feb6:	e7eb      	b.n	800fe90 <RDMSubDevices::~RDMSubDevices()+0x8>

0800feb8 <RDMSubDevices::GetInfo(unsigned short)>:
 800feb8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800febc:	6803      	ldr	r3, [r0, #0]
 800febe:	3901      	subs	r1, #1
 800fec0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800fec4:	3010      	adds	r0, #16
 800fec6:	4770      	bx	lr

0800fec8 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 800fec8:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800fecc:	6800      	ldr	r0, [r0, #0]
 800fece:	3b01      	subs	r3, #1
 800fed0:	4611      	mov	r1, r2
 800fed2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fed6:	f000 b830 	b.w	800ff3a <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

0800feda <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 800feda:	b410      	push	{r4}
 800fedc:	460c      	mov	r4, r1
 800fede:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800fee2:	3c01      	subs	r4, #1
 800fee4:	6800      	ldr	r0, [r0, #0]
 800fee6:	4611      	mov	r1, r2
 800fee8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800feec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fef0:	461a      	mov	r2, r3
 800fef2:	f000 b837 	b.w	800ff64 <RDMSubDevice::SetLabel(char const*, unsigned char)>

0800fef6 <RDMSubDevices::GetFactoryDefaults()>:
 800fef6:	b538      	push	{r3, r4, r5, lr}
 800fef8:	4605      	mov	r5, r0
 800fefa:	2400      	movs	r4, #0
 800fefc:	88ab      	ldrh	r3, [r5, #4]
 800fefe:	42a3      	cmp	r3, r4
 800ff00:	d801      	bhi.n	800ff06 <RDMSubDevices::GetFactoryDefaults()+0x10>
 800ff02:	2001      	movs	r0, #1
 800ff04:	e009      	b.n	800ff1a <RDMSubDevices::GetFactoryDefaults()+0x24>
 800ff06:	682b      	ldr	r3, [r5, #0]
 800ff08:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ff0c:	b908      	cbnz	r0, 800ff12 <RDMSubDevices::GetFactoryDefaults()+0x1c>
 800ff0e:	3401      	adds	r4, #1
 800ff10:	e7f4      	b.n	800fefc <RDMSubDevices::GetFactoryDefaults()+0x6>
 800ff12:	f000 f85c 	bl	800ffce <RDMSubDevice::GetFactoryDefaults()>
 800ff16:	2800      	cmp	r0, #0
 800ff18:	d1f9      	bne.n	800ff0e <RDMSubDevices::GetFactoryDefaults()+0x18>
 800ff1a:	bd38      	pop	{r3, r4, r5, pc}

0800ff1c <RDMSubDevices::SetFactoryDefaults()>:
 800ff1c:	b538      	push	{r3, r4, r5, lr}
 800ff1e:	4605      	mov	r5, r0
 800ff20:	2400      	movs	r4, #0
 800ff22:	88ab      	ldrh	r3, [r5, #4]
 800ff24:	42a3      	cmp	r3, r4
 800ff26:	d800      	bhi.n	800ff2a <RDMSubDevices::SetFactoryDefaults()+0xe>
 800ff28:	bd38      	pop	{r3, r4, r5, pc}
 800ff2a:	682b      	ldr	r3, [r5, #0]
 800ff2c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ff30:	b108      	cbz	r0, 800ff36 <RDMSubDevices::SetFactoryDefaults()+0x1a>
 800ff32:	f000 f826 	bl	800ff82 <RDMSubDevice::SetFactoryDefaults()>
 800ff36:	3401      	adds	r4, #1
 800ff38:	e7f3      	b.n	800ff22 <RDMSubDevices::SetFactoryDefaults()+0x6>

0800ff3a <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 800ff3a:	f100 0316 	add.w	r3, r0, #22
 800ff3e:	600b      	str	r3, [r1, #0]
 800ff40:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800ff44:	710b      	strb	r3, [r1, #4]
 800ff46:	4770      	bx	lr

0800ff48 <RDMSubDevice::SetLabel(char const*)>:
 800ff48:	b510      	push	{r4, lr}
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	f100 0415 	add.w	r4, r0, #21
 800ff50:	5cca      	ldrb	r2, [r1, r3]
 800ff52:	b122      	cbz	r2, 800ff5e <RDMSubDevice::SetLabel(char const*)+0x16>
 800ff54:	3301      	adds	r3, #1
 800ff56:	2b20      	cmp	r3, #32
 800ff58:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ff5c:	d1f8      	bne.n	800ff50 <RDMSubDevice::SetLabel(char const*)+0x8>
 800ff5e:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 800ff62:	bd10      	pop	{r4, pc}

0800ff64 <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 800ff64:	b530      	push	{r4, r5, lr}
 800ff66:	2300      	movs	r3, #0
 800ff68:	f100 0415 	add.w	r4, r0, #21
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d905      	bls.n	800ff7c <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 800ff70:	5ccd      	ldrb	r5, [r1, r3]
 800ff72:	f804 5f01 	strb.w	r5, [r4, #1]!
 800ff76:	3301      	adds	r3, #1
 800ff78:	2b20      	cmp	r3, #32
 800ff7a:	d1f7      	bne.n	800ff6c <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 800ff7c:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 800ff80:	bd30      	pop	{r4, r5, pc}

0800ff82 <RDMSubDevice::SetFactoryDefaults()>:
 800ff82:	7a03      	ldrb	r3, [r0, #8]
 800ff84:	b510      	push	{r4, lr}
 800ff86:	b94b      	cbnz	r3, 800ff9c <RDMSubDevice::SetFactoryDefaults()+0x1a>
 800ff88:	f100 0138 	add.w	r1, r0, #56	; 0x38
 800ff8c:	f7ff ffdc 	bl	800ff48 <RDMSubDevice::SetLabel(char const*)>
 800ff90:	8983      	ldrh	r3, [r0, #12]
 800ff92:	8243      	strh	r3, [r0, #18]
 800ff94:	7b83      	ldrb	r3, [r0, #14]
 800ff96:	7503      	strb	r3, [r0, #20]
 800ff98:	2301      	movs	r3, #1
 800ff9a:	7203      	strb	r3, [r0, #8]
 800ff9c:	bd10      	pop	{r4, pc}

0800ff9e <RDMSubDevice::CalculateChecksum()>:
 800ff9e:	b510      	push	{r4, lr}
 800ffa0:	8a43      	ldrh	r3, [r0, #18]
 800ffa2:	7d02      	ldrb	r2, [r0, #20]
 800ffa4:	f890 4036 	ldrb.w	r4, [r0, #54]	; 0x36
 800ffa8:	4413      	add	r3, r2
 800ffaa:	f100 0215 	add.w	r2, r0, #21
 800ffae:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
 800ffb2:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	30eb      	adds	r0, #235	; 0xeb
 800ffba:	1881      	adds	r1, r0, r2
 800ffbc:	428c      	cmp	r4, r1
 800ffbe:	d801      	bhi.n	800ffc4 <RDMSubDevice::CalculateChecksum()+0x26>
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	bd10      	pop	{r4, pc}
 800ffc4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800ffc8:	440b      	add	r3, r1
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	e7f5      	b.n	800ffba <RDMSubDevice::CalculateChecksum()+0x1c>

0800ffce <RDMSubDevice::GetFactoryDefaults()>:
 800ffce:	7a03      	ldrb	r3, [r0, #8]
 800ffd0:	b510      	push	{r4, lr}
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	b133      	cbz	r3, 800ffe4 <RDMSubDevice::GetFactoryDefaults()+0x16>
 800ffd6:	f7ff ffe2 	bl	800ff9e <RDMSubDevice::CalculateChecksum()>
 800ffda:	8963      	ldrh	r3, [r4, #10]
 800ffdc:	4283      	cmp	r3, r0
 800ffde:	bf1c      	itt	ne
 800ffe0:	2300      	movne	r3, #0
 800ffe2:	7223      	strbne	r3, [r4, #8]
 800ffe4:	7a20      	ldrb	r0, [r4, #8]
 800ffe6:	bd10      	pop	{r4, pc}

0800ffe8 <memcpy.isra.0>:
 800ffe8:	f008 b9de 	b.w	80183a8 <memcpy>

0800ffec <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 800ffec:	b510      	push	{r4, lr}
 800ffee:	6001      	str	r1, [r0, #0]
 800fff0:	2100      	movs	r1, #0
 800fff2:	4604      	mov	r4, r0
 800fff4:	6041      	str	r1, [r0, #4]
 800fff6:	2220      	movs	r2, #32
 800fff8:	3008      	adds	r0, #8
 800fffa:	f008 f9f7 	bl	80183ec <memset>
 800fffe:	4b03      	ldr	r3, [pc, #12]	; (801000c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 8010000:	62a3      	str	r3, [r4, #40]	; 0x28
 8010002:	237f      	movs	r3, #127	; 0x7f
 8010004:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8010008:	4620      	mov	r0, r4
 801000a:	bd10      	pop	{r4, pc}
 801000c:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

08010010 <RDMDeviceParams::Load()>:
 8010010:	4601      	mov	r1, r0
 8010012:	6800      	ldr	r0, [r0, #0]
 8010014:	b130      	cbz	r0, 8010024 <RDMDeviceParams::Load()+0x14>
 8010016:	b508      	push	{r3, lr}
 8010018:	6803      	ldr	r3, [r0, #0]
 801001a:	3104      	adds	r1, #4
 801001c:	68db      	ldr	r3, [r3, #12]
 801001e:	4798      	blx	r3
 8010020:	2001      	movs	r0, #1
 8010022:	bd08      	pop	{r3, pc}
 8010024:	4770      	bx	lr

08010026 <RDMDeviceParams::Set(RDMDevice*)>:
 8010026:	6843      	ldr	r3, [r0, #4]
 8010028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801002c:	460c      	mov	r4, r1
 801002e:	07d9      	lsls	r1, r3, #31
 8010030:	4605      	mov	r5, r0
 8010032:	d518      	bpl.n	8010066 <RDMDeviceParams::Set(RDMDevice*)+0x40>
 8010034:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 8010038:	7823      	ldrb	r3, [r4, #0]
 801003a:	2e20      	cmp	r6, #32
 801003c:	f100 0108 	add.w	r1, r0, #8
 8010040:	bf28      	it	cs
 8010042:	2620      	movcs	r6, #32
 8010044:	b1f3      	cbz	r3, 8010084 <RDMDeviceParams::Set(RDMDevice*)+0x5e>
 8010046:	f104 070b 	add.w	r7, r4, #11
 801004a:	4638      	mov	r0, r7
 801004c:	4632      	mov	r2, r6
 801004e:	f7ff ffcb 	bl	800ffe8 <memcpy.isra.0>
 8010052:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8010054:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
 8010058:	b128      	cbz	r0, 8010066 <RDMDeviceParams::Set(RDMDevice*)+0x40>
 801005a:	6802      	ldr	r2, [r0, #0]
 801005c:	4639      	mov	r1, r7
 801005e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8010062:	4632      	mov	r2, r6
 8010064:	47c0      	blx	r8
 8010066:	686b      	ldr	r3, [r5, #4]
 8010068:	079a      	lsls	r2, r3, #30
 801006a:	bf44      	itt	mi
 801006c:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 8010070:	f8a4 204e 	strhmi.w	r2, [r4, #78]	; 0x4e
 8010074:	075b      	lsls	r3, r3, #29
 8010076:	bf44      	itt	mi
 8010078:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 801007c:	f8a4 3050 	strhmi.w	r3, [r4, #80]	; 0x50
 8010080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010084:	4632      	mov	r2, r6
 8010086:	f104 0052 	add.w	r0, r4, #82	; 0x52
 801008a:	f7ff ffad 	bl	800ffe8 <memcpy.isra.0>
 801008e:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
 8010092:	e7e8      	b.n	8010066 <RDMDeviceParams::Set(RDMDevice*)+0x40>

08010094 <RDMDeviceParams::Dump()>:
 8010094:	4770      	bx	lr

08010096 <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 8010096:	4770      	bx	lr

08010098 <RDMDeviceResponder::DmxStartAddressUpdate()>:
 8010098:	4770      	bx	lr
	...

0801009c <RDMDeviceResponder::~RDMDeviceResponder()>:
 801009c:	b510      	push	{r4, lr}
 801009e:	4b06      	ldr	r3, [pc, #24]	; (80100b8 <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 80100a0:	4604      	mov	r4, r0
 80100a2:	f840 3b8c 	str.w	r3, [r0], #140
 80100a6:	f7ff feef 	bl	800fe88 <RDMSubDevices::~RDMSubDevices()>
 80100aa:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80100ae:	f7ff fecb 	bl	800fe48 <RDMSensors::~RDMSensors()>
 80100b2:	4620      	mov	r0, r4
 80100b4:	bd10      	pop	{r4, pc}
 80100b6:	bf00      	nop
 80100b8:	0801c574 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, lr, pc}

080100bc <RDMDeviceResponder::~RDMDeviceResponder()>:
 80100bc:	b510      	push	{r4, lr}
 80100be:	4604      	mov	r4, r0
 80100c0:	f7ff ffec 	bl	801009c <RDMDeviceResponder::~RDMDeviceResponder()>
 80100c4:	4620      	mov	r0, r4
 80100c6:	f008 f8b7 	bl	8018238 <operator delete(void*)>
 80100ca:	4620      	mov	r0, r4
 80100cc:	bd10      	pop	{r4, pc}
	...

080100d0 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
 80100d0:	b570      	push	{r4, r5, r6, lr}
 80100d2:	4604      	mov	r4, r0
 80100d4:	3004      	adds	r0, #4
 80100d6:	460e      	mov	r6, r1
 80100d8:	4615      	mov	r5, r2
 80100da:	f000 fee1 	bl	8010ea0 <RDMDevice::RDMDevice()>
 80100de:	4620      	mov	r0, r4
 80100e0:	4b20      	ldr	r3, [pc, #128]	; (8010164 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x94>)
 80100e2:	f840 3b80 	str.w	r3, [r0], #128
 80100e6:	f000 fceb 	bl	8010ac0 <RDMIdentify::RDMIdentify()>
 80100ea:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80100ee:	f7ff fea3 	bl	800fe38 <RDMSensors::RDMSensors()>
 80100f2:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80100f6:	f7ff febf 	bl	800fe78 <RDMSubDevices::RDMSubDevices()>
 80100fa:	4b1b      	ldr	r3, [pc, #108]	; (8010168 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x98>)
 80100fc:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 8010100:	601c      	str	r4, [r3, #0]
 8010102:	2365      	movs	r3, #101	; 0x65
 8010104:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
 8010108:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801010c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8010110:	2301      	movs	r3, #1
 8010112:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8010116:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 801011a:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 801011e:	2100      	movs	r1, #0
 8010120:	4293      	cmp	r3, r2
 8010122:	d119      	bne.n	8010158 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x88>
 8010124:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 8010128:	2100      	movs	r1, #0
 801012a:	4293      	cmp	r3, r2
 801012c:	d117      	bne.n	801015e <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x8e>
 801012e:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 8010132:	f7f9 feb1 	bl	8009e98 <RDMSoftwareVersion::GetVersion()>
 8010136:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 801013a:	f7f9 feb1 	bl	8009ea0 <RDMSoftwareVersion::GetVersionLength()>
 801013e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8010142:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	b91b      	cbnz	r3, 8010154 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x84>
 801014c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010150:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8010154:	4620      	mov	r0, r4
 8010156:	bd70      	pop	{r4, r5, r6, pc}
 8010158:	f803 1b01 	strb.w	r1, [r3], #1
 801015c:	e7e0      	b.n	8010120 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x50>
 801015e:	f803 1b01 	strb.w	r1, [r3], #1
 8010162:	e7e2      	b.n	801012a <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x5a>
 8010164:	0801c574 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, lr, pc}
 8010168:	20000820 	andcs	r0, r0, r0, lsr #16

0801016c <RDMDeviceResponder::Init()>:
 801016c:	b570      	push	{r4, r5, r6, lr}
 801016e:	2301      	movs	r3, #1
 8010170:	4604      	mov	r4, r0
 8010172:	7103      	strb	r3, [r0, #4]
 8010174:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8010178:	2a20      	cmp	r2, #32
 801017a:	bf28      	it	cs
 801017c:	2220      	movcs	r2, #32
 801017e:	3056      	adds	r0, #86	; 0x56
 8010180:	f104 010f 	add.w	r1, r4, #15
 8010184:	4613      	mov	r3, r2
 8010186:	3b01      	subs	r3, #1
 8010188:	d25d      	bcs.n	8010246 <RDMDeviceResponder::Init()+0xda>
 801018a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801018c:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
 8010190:	b110      	cbz	r0, 8010198 <RDMDeviceResponder::Init()+0x2c>
 8010192:	6803      	ldr	r3, [r0, #0]
 8010194:	689b      	ldr	r3, [r3, #8]
 8010196:	4798      	blx	r3
 8010198:	f06f 050d 	mvn.w	r5, #13
 801019c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80101a0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 80101a4:	f104 020e 	add.w	r2, r4, #14
 80101a8:	1b2d      	subs	r5, r5, r4
 80101aa:	18a9      	adds	r1, r5, r2
 80101ac:	4288      	cmp	r0, r1
 80101ae:	d84f      	bhi.n	8010250 <RDMDeviceResponder::Init()+0xe4>
 80101b0:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 80101b4:	f7f9 fe76 	bl	8009ea4 <RDMSoftwareVersion::GetVersionId()>
 80101b8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80101bc:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80101c0:	2201      	movs	r2, #1
 80101c2:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 80101c6:	2200      	movs	r2, #0
 80101c8:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 80101cc:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
 80101d0:	0a1a      	lsrs	r2, r3, #8
 80101d2:	0e03      	lsrs	r3, r0, #24
 80101d4:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 80101d8:	0c03      	lsrs	r3, r0, #16
 80101da:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 80101de:	0a03      	lsrs	r3, r0, #8
 80101e0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80101e4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80101e8:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
 80101ec:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f8b4 6090 	ldrh.w	r6, [r4, #144]	; 0x90
 80101f6:	685d      	ldr	r5, [r3, #4]
 80101f8:	bb7d      	cbnz	r5, 801025a <RDMDeviceResponder::Init()+0xee>
 80101fa:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
 80101fe:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 8010202:	0a03      	lsrs	r3, r0, #8
 8010204:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 8010208:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 801020c:	2301      	movs	r3, #1
 801020e:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 8010212:	0a33      	lsrs	r3, r6, #8
 8010214:	b2c0      	uxtb	r0, r0
 8010216:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 801021a:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801021e:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 8010222:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 8010226:	f884 60ae 	strb.w	r6, [r4, #174]	; 0xae
 801022a:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 801022e:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 8010232:	4293      	cmp	r3, r2
 8010234:	d12a      	bne.n	801028c <RDMDeviceResponder::Init()+0x120>
 8010236:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 801023a:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 801023e:	4413      	add	r3, r2
 8010240:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8010244:	bd70      	pop	{r4, r5, r6, pc}
 8010246:	f810 5b01 	ldrb.w	r5, [r0], #1
 801024a:	f800 5c48 	strb.w	r5, [r0, #-72]
 801024e:	e79a      	b.n	8010186 <RDMDeviceResponder::Init()+0x1a>
 8010250:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8010254:	440b      	add	r3, r1
 8010256:	b29b      	uxth	r3, r3
 8010258:	e7a7      	b.n	80101aa <RDMDeviceResponder::Init()+0x3e>
 801025a:	682b      	ldr	r3, [r5, #0]
 801025c:	4628      	mov	r0, r5
 801025e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010260:	4798      	blx	r3
 8010262:	0a00      	lsrs	r0, r0, #8
 8010264:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 8010268:	682b      	ldr	r3, [r5, #0]
 801026a:	4628      	mov	r0, r5
 801026c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801026e:	4798      	blx	r3
 8010270:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 8010274:	682b      	ldr	r3, [r5, #0]
 8010276:	4628      	mov	r0, r5
 8010278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801027a:	4798      	blx	r3
 801027c:	0a00      	lsrs	r0, r0, #8
 801027e:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 8010282:	682b      	ldr	r3, [r5, #0]
 8010284:	4628      	mov	r0, r5
 8010286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010288:	4798      	blx	r3
 801028a:	e7bf      	b.n	801020c <RDMDeviceResponder::Init()+0xa0>
 801028c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010290:	7499      	strb	r1, [r3, #18]
 8010292:	e7ce      	b.n	8010232 <RDMDeviceResponder::Init()+0xc6>

08010294 <RDMDeviceResponder::Print()>:
 8010294:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010296:	4604      	mov	r4, r0
 8010298:	3004      	adds	r0, #4
 801029a:	f000 fe75 	bl	8010f88 <RDMDevice::Print()>
 801029e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80102a2:	481c      	ldr	r0, [pc, #112]	; (8010314 <RDMDeviceResponder::Print()+0x80>)
 80102a4:	681d      	ldr	r5, [r3, #0]
 80102a6:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80102a8:	f7fa f8f6 	bl	800a498 <printf>
 80102ac:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
 80102b0:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
 80102b4:	4818      	ldr	r0, [pc, #96]	; (8010318 <RDMDeviceResponder::Print()+0x84>)
 80102b6:	f7fa f8ef 	bl	800a498 <printf>
 80102ba:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80102be:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 80102c2:	4816      	ldr	r0, [pc, #88]	; (801031c <RDMDeviceResponder::Print()+0x88>)
 80102c4:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80102c8:	f7fa f8e6 	bl	800a498 <printf>
 80102cc:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80102d0:	f894 10a7 	ldrb.w	r1, [r4, #167]	; 0xa7
 80102d4:	4812      	ldr	r0, [pc, #72]	; (8010320 <RDMDeviceResponder::Print()+0x8c>)
 80102d6:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80102da:	3508      	adds	r5, #8
 80102dc:	f7fa f8dc 	bl	800a498 <printf>
 80102e0:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
 80102e4:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 80102e8:	9500      	str	r5, [sp, #0]
 80102ea:	b2f3      	uxtb	r3, r6
 80102ec:	480d      	ldr	r0, [pc, #52]	; (8010324 <RDMDeviceResponder::Print()+0x90>)
 80102ee:	f7fa f8d3 	bl	800a498 <printf>
 80102f2:	f894 10ad 	ldrb.w	r1, [r4, #173]	; 0xad
 80102f6:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 80102fa:	480b      	ldr	r0, [pc, #44]	; (8010328 <RDMDeviceResponder::Print()+0x94>)
 80102fc:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8010300:	f7fa f8ca 	bl	800a498 <printf>
 8010304:	f894 10af 	ldrb.w	r1, [r4, #175]	; 0xaf
 8010308:	4808      	ldr	r0, [pc, #32]	; (801032c <RDMDeviceResponder::Print()+0x98>)
 801030a:	b002      	add	sp, #8
 801030c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010310:	f7fa b8c2 	b.w	800a498 <printf>
 8010314:	0801c4b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, sl, lr, pc}
 8010318:	0801c4d2 	stmdaeq	r1, {r1, r4, r6, r7, sl, lr, pc}
 801031c:	0801c4eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, sl, lr, pc}
 8010320:	0801c503 	stmdaeq	r1, {r0, r1, r8, sl, lr, pc}
 8010324:	0801c51b 	stmdaeq	r1, {r0, r1, r3, r4, r8, sl, lr, pc}
 8010328:	0801c539 	stmdaeq	r1, {r0, r3, r4, r5, r8, sl, lr, pc}
 801032c:	0801c551 	stmdaeq	r1, {r0, r4, r6, r8, sl, lr, pc}

08010330 <memcmp>:
 8010330:	b510      	push	{r4, lr}
 8010332:	3901      	subs	r1, #1
 8010334:	4402      	add	r2, r0
 8010336:	4290      	cmp	r0, r2
 8010338:	d101      	bne.n	801033e <memcmp+0xe>
 801033a:	2000      	movs	r0, #0
 801033c:	e005      	b.n	801034a <memcmp+0x1a>
 801033e:	7803      	ldrb	r3, [r0, #0]
 8010340:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010344:	42a3      	cmp	r3, r4
 8010346:	d001      	beq.n	801034c <memcmp+0x1c>
 8010348:	1b18      	subs	r0, r3, r4
 801034a:	bd10      	pop	{r4, pc}
 801034c:	3001      	adds	r0, #1
 801034e:	e7f2      	b.n	8010336 <memcmp+0x6>

08010350 <memcpy.isra.0>:
 8010350:	3801      	subs	r0, #1
 8010352:	440a      	add	r2, r1
 8010354:	4291      	cmp	r1, r2
 8010356:	d100      	bne.n	801035a <memcpy.isra.0+0xa>
 8010358:	4770      	bx	lr
 801035a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801035e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010362:	e7f7      	b.n	8010354 <memcpy.isra.0+0x4>

08010364 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 8010364:	b570      	push	{r4, r5, r6, lr}
 8010366:	790d      	ldrb	r5, [r1, #4]
 8010368:	7803      	ldrb	r3, [r0, #0]
 801036a:	6809      	ldr	r1, [r1, #0]
 801036c:	2d20      	cmp	r5, #32
 801036e:	4604      	mov	r4, r0
 8010370:	bf28      	it	cs
 8010372:	2520      	movcs	r5, #32
 8010374:	b18b      	cbz	r3, 801039a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x36>
 8010376:	f100 060b 	add.w	r6, r0, #11
 801037a:	4630      	mov	r0, r6
 801037c:	462a      	mov	r2, r5
 801037e:	f7ff ffe7 	bl	8010350 <memcpy.isra.0>
 8010382:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8010384:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
 8010388:	b168      	cbz	r0, 80103a6 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x42>
 801038a:	6802      	ldr	r2, [r0, #0]
 801038c:	6894      	ldr	r4, [r2, #8]
 801038e:	4631      	mov	r1, r6
 8010390:	462a      	mov	r2, r5
 8010392:	4623      	mov	r3, r4
 8010394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010398:	4718      	bx	r3
 801039a:	462a      	mov	r2, r5
 801039c:	3052      	adds	r0, #82	; 0x52
 801039e:	f7ff ffd7 	bl	8010350 <memcpy.isra.0>
 80103a2:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
 80103a6:	bd70      	pop	{r4, r5, r6, pc}

080103a8 <RDMDeviceResponder::SetFactoryDefaults()>:
 80103a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103aa:	f100 0356 	add.w	r3, r0, #86	; 0x56
 80103ae:	4604      	mov	r4, r0
 80103b0:	9300      	str	r3, [sp, #0]
 80103b2:	4669      	mov	r1, sp
 80103b4:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
 80103b8:	f88d 3004 	strb.w	r3, [sp, #4]
 80103bc:	3004      	adds	r0, #4
 80103be:	f7ff ffd1 	bl	8010364 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 80103c2:	f06f 050d 	mvn.w	r5, #13
 80103c6:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80103ca:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80103ce:	f104 020e 	add.w	r2, r4, #14
 80103d2:	1b2d      	subs	r5, r5, r4
 80103d4:	18a8      	adds	r0, r5, r2
 80103d6:	4288      	cmp	r0, r1
 80103d8:	d361      	bcc.n	801049e <RDMDeviceResponder::SetFactoryDefaults()+0xf6>
 80103da:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 80103de:	2301      	movs	r3, #1
 80103e0:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 80103e4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	685d      	ldr	r5, [r3, #4]
 80103ec:	b1f5      	cbz	r5, 801042c <RDMDeviceResponder::SetFactoryDefaults()+0x84>
 80103ee:	682b      	ldr	r3, [r5, #0]
 80103f0:	4628      	mov	r0, r5
 80103f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103f4:	4798      	blx	r3
 80103f6:	0a00      	lsrs	r0, r0, #8
 80103f8:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 80103fc:	682b      	ldr	r3, [r5, #0]
 80103fe:	4628      	mov	r0, r5
 8010400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010402:	4798      	blx	r3
 8010404:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 8010408:	682b      	ldr	r3, [r5, #0]
 801040a:	4628      	mov	r0, r5
 801040c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801040e:	4798      	blx	r3
 8010410:	0a00      	lsrs	r0, r0, #8
 8010412:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 8010416:	682b      	ldr	r3, [r5, #0]
 8010418:	4628      	mov	r0, r5
 801041a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801041c:	4798      	blx	r3
 801041e:	6823      	ldr	r3, [r4, #0]
 8010420:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 8010424:	689b      	ldr	r3, [r3, #8]
 8010426:	4629      	mov	r1, r5
 8010428:	4620      	mov	r0, r4
 801042a:	4798      	blx	r3
 801042c:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
 8010430:	1e6b      	subs	r3, r5, #1
 8010432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010436:	d218      	bcs.n	801046a <RDMDeviceResponder::SetFactoryDefaults()+0xc2>
 8010438:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 801043c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8010440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010444:	3b01      	subs	r3, #1
 8010446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801044a:	6858      	ldr	r0, [r3, #4]
 801044c:	b168      	cbz	r0, 801046a <RDMDeviceResponder::SetFactoryDefaults()+0xc2>
 801044e:	6803      	ldr	r3, [r0, #0]
 8010450:	4629      	mov	r1, r5
 8010452:	6a1b      	ldr	r3, [r3, #32]
 8010454:	4798      	blx	r3
 8010456:	b120      	cbz	r0, 8010462 <RDMDeviceResponder::SetFactoryDefaults()+0xba>
 8010458:	0a2b      	lsrs	r3, r5, #8
 801045a:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 801045e:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8010462:	6823      	ldr	r3, [r4, #0]
 8010464:	4620      	mov	r0, r4
 8010466:	68db      	ldr	r3, [r3, #12]
 8010468:	4798      	blx	r3
 801046a:	2213      	movs	r2, #19
 801046c:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 8010470:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8010474:	f7ff ff6c 	bl	8010350 <memcpy.isra.0>
 8010478:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801047c:	f7ff fd4e 	bl	800ff1c <RDMSubDevices::SetFactoryDefaults()>
 8010480:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8010484:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8010488:	4413      	add	r3, r2
 801048a:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 801048e:	2301      	movs	r3, #1
 8010490:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 8010494:	b003      	add	sp, #12
 8010496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801049a:	f7f9 bce5 	b.w	8009e68 <rdm::device::responder::factorydefaults()>
 801049e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80104a2:	4403      	add	r3, r0
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	e795      	b.n	80103d4 <RDMDeviceResponder::SetFactoryDefaults()+0x2c>

080104a8 <RDMHandler::RDMHandler(bool)>:
 80104a8:	2200      	movs	r2, #0
 80104aa:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80104ae:	7001      	strb	r1, [r0, #0]
 80104b0:	7042      	strb	r2, [r0, #1]
 80104b2:	4770      	bx	lr

080104b4 <RDMHandler::HandleString(char const*, unsigned int)>:
 80104b4:	6883      	ldr	r3, [r0, #8]
 80104b6:	f803 2f17 	strb.w	r2, [r3, #23]!
 80104ba:	440a      	add	r2, r1
 80104bc:	4291      	cmp	r1, r2
 80104be:	d100      	bne.n	80104c2 <RDMHandler::HandleString(char const*, unsigned int)+0xe>
 80104c0:	4770      	bx	lr
 80104c2:	f811 0b01 	ldrb.w	r0, [r1], #1
 80104c6:	f803 0f01 	strb.w	r0, [r3, #1]!
 80104ca:	e7f7      	b.n	80104bc <RDMHandler::HandleString(char const*, unsigned int)+0x8>

080104cc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 80104cc:	b570      	push	{r4, r5, r6, lr}
 80104ce:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 80104d2:	25cc      	movs	r5, #204	; 0xcc
 80104d4:	701d      	strb	r5, [r3, #0]
 80104d6:	7825      	ldrb	r5, [r4, #0]
 80104d8:	705d      	strb	r5, [r3, #1]
 80104da:	7ba5      	ldrb	r5, [r4, #14]
 80104dc:	73dd      	strb	r5, [r3, #15]
 80104de:	2500      	movs	r5, #0
 80104e0:	745d      	strb	r5, [r3, #17]
 80104e2:	7c65      	ldrb	r5, [r4, #17]
 80104e4:	749d      	strb	r5, [r3, #18]
 80104e6:	7ca5      	ldrb	r5, [r4, #18]
 80104e8:	74dd      	strb	r5, [r3, #19]
 80104ea:	7ce5      	ldrb	r5, [r4, #19]
 80104ec:	3501      	adds	r5, #1
 80104ee:	751d      	strb	r5, [r3, #20]
 80104f0:	7d25      	ldrb	r5, [r4, #20]
 80104f2:	755d      	strb	r5, [r3, #21]
 80104f4:	7d65      	ldrb	r5, [r4, #21]
 80104f6:	759d      	strb	r5, [r3, #22]
 80104f8:	b119      	cbz	r1, 8010502 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 80104fa:	1e4d      	subs	r5, r1, #1
 80104fc:	2d01      	cmp	r5, #1
 80104fe:	d921      	bls.n	8010544 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x78>
 8010500:	bd70      	pop	{r4, r5, r6, pc}
 8010502:	7dda      	ldrb	r2, [r3, #23]
 8010504:	7419      	strb	r1, [r3, #16]
 8010506:	3218      	adds	r2, #24
 8010508:	709a      	strb	r2, [r3, #2]
 801050a:	4a15      	ldr	r2, [pc, #84]	; (8010560 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x94>)
 801050c:	6812      	ldr	r2, [r2, #0]
 801050e:	1de1      	adds	r1, r4, #7
 8010510:	1c9d      	adds	r5, r3, #2
 8010512:	3204      	adds	r2, #4
 8010514:	340d      	adds	r4, #13
 8010516:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 801051a:	f805 6f01 	strb.w	r6, [r5, #1]!
 801051e:	42a1      	cmp	r1, r4
 8010520:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8010524:	71ae      	strb	r6, [r5, #6]
 8010526:	d1f6      	bne.n	8010516 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4a>
 8010528:	2200      	movs	r2, #0
 801052a:	6884      	ldr	r4, [r0, #8]
 801052c:	7899      	ldrb	r1, [r3, #2]
 801052e:	4613      	mov	r3, r2
 8010530:	428a      	cmp	r2, r1
 8010532:	eb04 0502 	add.w	r5, r4, r2
 8010536:	d30e      	bcc.n	8010556 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8a>
 8010538:	0a1a      	lsrs	r2, r3, #8
 801053a:	702a      	strb	r2, [r5, #0]
 801053c:	6882      	ldr	r2, [r0, #8]
 801053e:	440a      	add	r2, r1
 8010540:	7053      	strb	r3, [r2, #1]
 8010542:	e7dd      	b.n	8010500 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 8010544:	7419      	strb	r1, [r3, #16]
 8010546:	2102      	movs	r1, #2
 8010548:	251a      	movs	r5, #26
 801054a:	75d9      	strb	r1, [r3, #23]
 801054c:	0a11      	lsrs	r1, r2, #8
 801054e:	709d      	strb	r5, [r3, #2]
 8010550:	7619      	strb	r1, [r3, #24]
 8010552:	765a      	strb	r2, [r3, #25]
 8010554:	e7d9      	b.n	801050a <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 8010556:	5ca5      	ldrb	r5, [r4, r2]
 8010558:	442b      	add	r3, r5
 801055a:	b29b      	uxth	r3, r3
 801055c:	3201      	adds	r2, #1
 801055e:	e7e7      	b.n	8010530 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x64>
 8010560:	20000820 	andcs	r0, r0, r0, lsr #16

08010564 <RDMHandler::RespondMessageAck()>:
 8010564:	6843      	ldr	r3, [r0, #4]
 8010566:	7d9a      	ldrb	r2, [r3, #22]
 8010568:	b90a      	cbnz	r2, 801056e <RDMHandler::RespondMessageAck()+0xa>
 801056a:	2218      	movs	r2, #24
 801056c:	705a      	strb	r2, [r3, #1]
 801056e:	2200      	movs	r2, #0
 8010570:	4611      	mov	r1, r2
 8010572:	f7ff bfab 	b.w	80104cc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

08010578 <RDMHandler::GetDeviceInfo(unsigned short)>:
 8010578:	b538      	push	{r3, r4, r5, lr}
 801057a:	4b18      	ldr	r3, [pc, #96]	; (80105dc <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 801057c:	4605      	mov	r5, r0
 801057e:	681c      	ldr	r4, [r3, #0]
 8010580:	b349      	cbz	r1, 80105d6 <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 8010582:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8010586:	f7ff fc97 	bl	800feb8 <RDMSubDevices::GetInfo(unsigned short)>
 801058a:	b1b8      	cbz	r0, 80105bc <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 801058c:	8803      	ldrh	r3, [r0, #0]
 801058e:	0a1b      	lsrs	r3, r3, #8
 8010590:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 8010594:	8803      	ldrh	r3, [r0, #0]
 8010596:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 801059a:	7903      	ldrb	r3, [r0, #4]
 801059c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 80105a0:	7943      	ldrb	r3, [r0, #5]
 80105a2:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 80105a6:	8843      	ldrh	r3, [r0, #2]
 80105a8:	0a1b      	lsrs	r3, r3, #8
 80105aa:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 80105ae:	8843      	ldrh	r3, [r0, #2]
 80105b0:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 80105b4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80105b8:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
 80105bc:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 80105c0:	68a8      	ldr	r0, [r5, #8]
 80105c2:	2213      	movs	r2, #19
 80105c4:	75c2      	strb	r2, [r0, #23]
 80105c6:	3018      	adds	r0, #24
 80105c8:	f7ff fec2 	bl	8010350 <memcpy.isra.0>
 80105cc:	4628      	mov	r0, r5
 80105ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105d2:	f7ff bfc7 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 80105d6:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 80105da:	e7f1      	b.n	80105c0 <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 80105dc:	20000820 	andcs	r0, r0, r0, lsr #16

080105e0 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 80105e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105e2:	6886      	ldr	r6, [r0, #8]
 80105e4:	2301      	movs	r3, #1
 80105e6:	75f3      	strb	r3, [r6, #23]
 80105e8:	4b1c      	ldr	r3, [pc, #112]	; (801065c <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 80105ea:	681c      	ldr	r4, [r3, #0]
 80105ec:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 80105f0:	4605      	mov	r5, r0
 80105f2:	b37b      	cbz	r3, 8010654 <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 80105f4:	f06f 0c0d 	mvn.w	ip, #13
 80105f8:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
 80105fc:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8010600:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8010604:	f104 020e 	add.w	r2, r4, #14
 8010608:	ebac 0c04 	sub.w	ip, ip, r4
 801060c:	eb0c 0702 	add.w	r7, ip, r2
 8010610:	4287      	cmp	r7, r0
 8010612:	d30a      	bcc.n	801062a <RDMHandler::GetFactoryDefaults(unsigned short)+0x4a>
 8010614:	4299      	cmp	r1, r3
 8010616:	d00d      	beq.n	8010634 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 8010618:	2300      	movs	r3, #0
 801061a:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 801061e:	7633      	strb	r3, [r6, #24]
 8010620:	4628      	mov	r0, r5
 8010622:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010626:	f7ff bf9d 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 801062a:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 801062e:	443b      	add	r3, r7
 8010630:	b29b      	uxth	r3, r3
 8010632:	e7eb      	b.n	801060c <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 8010634:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8010638:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 801063c:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 8010640:	440b      	add	r3, r1
 8010642:	429a      	cmp	r2, r3
 8010644:	d1e8      	bne.n	8010618 <RDMHandler::GetFactoryDefaults(unsigned short)+0x38>
 8010646:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801064a:	f7ff fc54 	bl	800fef6 <RDMSubDevices::GetFactoryDefaults()>
 801064e:	4603      	mov	r3, r0
 8010650:	2800      	cmp	r0, #0
 8010652:	d0e2      	beq.n	801061a <RDMHandler::GetFactoryDefaults(unsigned short)+0x3a>
 8010654:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8010658:	e7e1      	b.n	801061e <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 801065a:	bf00      	nop
 801065c:	20000820 	andcs	r0, r0, r0, lsr #16

08010660 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 8010660:	b510      	push	{r4, lr}
 8010662:	4905      	ldr	r1, [pc, #20]	; (8010678 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 8010664:	4604      	mov	r4, r0
 8010666:	220a      	movs	r2, #10
 8010668:	f7ff ff24 	bl	80104b4 <RDMHandler::HandleString(char const*, unsigned int)>
 801066c:	4620      	mov	r0, r4
 801066e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010672:	f7ff bf77 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010676:	bf00      	nop
 8010678:	0801b506 	stmdaeq	r1, {r1, r2, r8, sl, ip, sp, pc}

0801067c <RDMHandler::GetManufacturerLabel(unsigned short)>:
 801067c:	b510      	push	{r4, lr}
 801067e:	4b06      	ldr	r3, [pc, #24]	; (8010698 <RDMHandler::GetManufacturerLabel(unsigned short)+0x1c>)
 8010680:	6819      	ldr	r1, [r3, #0]
 8010682:	4604      	mov	r4, r0
 8010684:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
 8010688:	3130      	adds	r1, #48	; 0x30
 801068a:	f7ff ff13 	bl	80104b4 <RDMHandler::HandleString(char const*, unsigned int)>
 801068e:	4620      	mov	r0, r4
 8010690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010694:	f7ff bf66 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010698:	20000820 	andcs	r0, r0, r0, lsr #16

0801069c <RDMHandler::GetDeviceLabel(unsigned short)>:
 801069c:	4b0d      	ldr	r3, [pc, #52]	; (80106d4 <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 801069e:	b513      	push	{r0, r1, r4, lr}
 80106a0:	4604      	mov	r4, r0
 80106a2:	6818      	ldr	r0, [r3, #0]
 80106a4:	b171      	cbz	r1, 80106c4 <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 80106a6:	466a      	mov	r2, sp
 80106a8:	308c      	adds	r0, #140	; 0x8c
 80106aa:	f7ff fc0d 	bl	800fec8 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 80106ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80106b2:	9900      	ldr	r1, [sp, #0]
 80106b4:	4620      	mov	r0, r4
 80106b6:	f7ff fefd 	bl	80104b4 <RDMHandler::HandleString(char const*, unsigned int)>
 80106ba:	4620      	mov	r0, r4
 80106bc:	f7ff ff52 	bl	8010564 <RDMHandler::RespondMessageAck()>
 80106c0:	b002      	add	sp, #8
 80106c2:	bd10      	pop	{r4, pc}
 80106c4:	f100 030f 	add.w	r3, r0, #15
 80106c8:	9300      	str	r3, [sp, #0]
 80106ca:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80106ce:	f88d 3004 	strb.w	r3, [sp, #4]
 80106d2:	e7ec      	b.n	80106ae <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 80106d4:	20000820 	andcs	r0, r0, r0, lsr #16

080106d8 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 80106d8:	6883      	ldr	r3, [r0, #8]
 80106da:	2201      	movs	r2, #1
 80106dc:	75da      	strb	r2, [r3, #23]
 80106de:	4a02      	ldr	r2, [pc, #8]	; (80106e8 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 80106e0:	7812      	ldrb	r2, [r2, #0]
 80106e2:	761a      	strb	r2, [r3, #24]
 80106e4:	f7ff bf3e 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 80106e8:	20000824 	andcs	r0, r0, r4, lsr #16

080106ec <RDMHandler::RespondMessageNack(unsigned short)>:
 80106ec:	460a      	mov	r2, r1
 80106ee:	2102      	movs	r1, #2
 80106f0:	f7ff beec 	b.w	80104cc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

080106f4 <RDMHandler::SetResetDevice(bool, unsigned short)>:
 80106f4:	b510      	push	{r4, lr}
 80106f6:	6843      	ldr	r3, [r0, #4]
 80106f8:	7d9a      	ldrb	r2, [r3, #22]
 80106fa:	2a01      	cmp	r2, #1
 80106fc:	4604      	mov	r4, r0
 80106fe:	d004      	beq.n	801070a <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 8010700:	2101      	movs	r1, #1
 8010702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010706:	f7ff bff1 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
 801070a:	7ddb      	ldrb	r3, [r3, #23]
 801070c:	2b01      	cmp	r3, #1
 801070e:	d003      	beq.n	8010718 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 8010710:	2bff      	cmp	r3, #255	; 0xff
 8010712:	d001      	beq.n	8010718 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 8010714:	2106      	movs	r1, #6
 8010716:	e7f4      	b.n	8010702 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8010718:	68a2      	ldr	r2, [r4, #8]
 801071a:	2100      	movs	r1, #0
 801071c:	2bff      	cmp	r3, #255	; 0xff
 801071e:	75d1      	strb	r1, [r2, #23]
 8010720:	d102      	bne.n	8010728 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 8010722:	2104      	movs	r1, #4
 8010724:	4620      	mov	r0, r4
 8010726:	e7ec      	b.n	8010702 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8010728:	4b03      	ldr	r3, [pc, #12]	; (8010738 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 801072a:	6818      	ldr	r0, [r3, #0]
 801072c:	f007 fd46 	bl	80181bc <Hardware::Reboot()>
 8010730:	2800      	cmp	r0, #0
 8010732:	d0f6      	beq.n	8010722 <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 8010734:	bd10      	pop	{r4, pc}
 8010736:	bf00      	nop
 8010738:	2001067c 	andcs	r0, r1, ip, ror r6

0801073c <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 801073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801073e:	6843      	ldr	r3, [r0, #4]
 8010740:	460d      	mov	r5, r1
 8010742:	7d99      	ldrb	r1, [r3, #22]
 8010744:	2901      	cmp	r1, #1
 8010746:	4604      	mov	r4, r0
 8010748:	d004      	beq.n	8010754 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 801074a:	2101      	movs	r1, #1
 801074c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010750:	f7ff bfcc 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
 8010754:	7ddb      	ldrb	r3, [r3, #23]
 8010756:	2b01      	cmp	r3, #1
 8010758:	d901      	bls.n	801075e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 801075a:	2106      	movs	r1, #6
 801075c:	e7f6      	b.n	801074c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 801075e:	4a12      	ldr	r2, [pc, #72]	; (80107a8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 8010760:	4f12      	ldr	r7, [pc, #72]	; (80107ac <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 8010762:	6816      	ldr	r6, [r2, #0]
 8010764:	4a12      	ldr	r2, [pc, #72]	; (80107b0 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 8010766:	6810      	ldr	r0, [r2, #0]
 8010768:	4a12      	ldr	r2, [pc, #72]	; (80107b4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 801076a:	b983      	cbnz	r3, 801078e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x52>
 801076c:	2102      	movs	r1, #2
 801076e:	7013      	strb	r3, [r2, #0]
 8010770:	f007 fc64 	bl	801803c <LedBlink::SetMode(ledblink::Mode)>
 8010774:	7839      	ldrb	r1, [r7, #0]
 8010776:	b111      	cbz	r1, 801077e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8010778:	4630      	mov	r0, r6
 801077a:	f000 f9a8 	bl	8010ace <RDMIdentify::Off(rdm::identify::Mode)>
 801077e:	b98d      	cbnz	r5, 80107a4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x68>
 8010780:	68a3      	ldr	r3, [r4, #8]
 8010782:	75dd      	strb	r5, [r3, #23]
 8010784:	4620      	mov	r0, r4
 8010786:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801078a:	f7ff beeb 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 801078e:	7011      	strb	r1, [r2, #0]
 8010790:	2104      	movs	r1, #4
 8010792:	f007 fc53 	bl	801803c <LedBlink::SetMode(ledblink::Mode)>
 8010796:	7839      	ldrb	r1, [r7, #0]
 8010798:	2900      	cmp	r1, #0
 801079a:	d0f0      	beq.n	801077e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 801079c:	4630      	mov	r0, r6
 801079e:	f000 f995 	bl	8010acc <RDMIdentify::On(rdm::identify::Mode)>
 80107a2:	e7ec      	b.n	801077e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 80107a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107a6:	bf00      	nop
 80107a8:	20000828 	andcs	r0, r0, r8, lsr #16
 80107ac:	20000825 	andcs	r0, r0, r5, lsr #16
 80107b0:	20010678 	andcs	r0, r1, r8, ror r6
 80107b4:	20000824 	andcs	r0, r0, r4, lsr #16

080107b8 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 80107b8:	b538      	push	{r3, r4, r5, lr}
 80107ba:	6843      	ldr	r3, [r0, #4]
 80107bc:	7d9b      	ldrb	r3, [r3, #22]
 80107be:	4604      	mov	r4, r0
 80107c0:	460d      	mov	r5, r1
 80107c2:	b123      	cbz	r3, 80107ce <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x16>
 80107c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107c8:	2101      	movs	r1, #1
 80107ca:	f7ff bf8f 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
 80107ce:	4b06      	ldr	r3, [pc, #24]	; (80107e8 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x30>)
 80107d0:	6818      	ldr	r0, [r3, #0]
 80107d2:	f7ff fde9 	bl	80103a8 <RDMDeviceResponder::SetFactoryDefaults()>
 80107d6:	b935      	cbnz	r5, 80107e6 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x2e>
 80107d8:	68a3      	ldr	r3, [r4, #8]
 80107da:	75dd      	strb	r5, [r3, #23]
 80107dc:	4620      	mov	r0, r4
 80107de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107e2:	f7ff bebf 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 80107e6:	bd38      	pop	{r3, r4, r5, pc}
 80107e8:	20000820 	andcs	r0, r0, r0, lsr #16

080107ec <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 80107ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80107ee:	6845      	ldr	r5, [r0, #4]
 80107f0:	7dab      	ldrb	r3, [r5, #22]
 80107f2:	2b20      	cmp	r3, #32
 80107f4:	460e      	mov	r6, r1
 80107f6:	4604      	mov	r4, r0
 80107f8:	4611      	mov	r1, r2
 80107fa:	d905      	bls.n	8010808 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 80107fc:	2101      	movs	r1, #1
 80107fe:	b002      	add	sp, #8
 8010800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010804:	f7ff bf72 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
 8010808:	4a0d      	ldr	r2, [pc, #52]	; (8010840 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 801080a:	6810      	ldr	r0, [r2, #0]
 801080c:	f105 0217 	add.w	r2, r5, #23
 8010810:	b159      	cbz	r1, 801082a <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 8010812:	308c      	adds	r0, #140	; 0x8c
 8010814:	f7ff fb61 	bl	800feda <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 8010818:	b97e      	cbnz	r6, 801083a <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 801081a:	68a3      	ldr	r3, [r4, #8]
 801081c:	4620      	mov	r0, r4
 801081e:	75de      	strb	r6, [r3, #23]
 8010820:	b002      	add	sp, #8
 8010822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010826:	f7ff be9d 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 801082a:	4669      	mov	r1, sp
 801082c:	3004      	adds	r0, #4
 801082e:	9200      	str	r2, [sp, #0]
 8010830:	f88d 3004 	strb.w	r3, [sp, #4]
 8010834:	f7ff fd96 	bl	8010364 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8010838:	e7ee      	b.n	8010818 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 801083a:	b002      	add	sp, #8
 801083c:	bd70      	pop	{r4, r5, r6, pc}
 801083e:	bf00      	nop
 8010840:	20000820 	andcs	r0, r0, r0, lsr #16

08010844 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 8010844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010848:	4616      	mov	r6, r2
 801084a:	4604      	mov	r4, r0
 801084c:	f006 00ef 	and.w	r0, r6, #239	; 0xef
 8010850:	2700      	movs	r7, #0
 8010852:	2820      	cmp	r0, #32
 8010854:	f89d 801c 	ldrb.w	r8, [sp, #28]
 8010858:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801085c:	46be      	mov	lr, r7
 801085e:	d005      	beq.n	801086c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x28>
 8010860:	2105      	movs	r1, #5
 8010862:	4620      	mov	r0, r4
 8010864:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010868:	f7ff bf40 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
 801086c:	482b      	ldr	r0, [pc, #172]	; (801091c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd8>)
 801086e:	6800      	ldr	r0, [r0, #0]
 8010870:	8880      	ldrh	r0, [r0, #4]
 8010872:	4290      	cmp	r0, r2
 8010874:	d205      	bcs.n	8010882 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3e>
 8010876:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801087a:	4282      	cmp	r2, r0
 801087c:	d001      	beq.n	8010882 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3e>
 801087e:	2109      	movs	r1, #9
 8010880:	e7ef      	b.n	8010862 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 8010882:	4d27      	ldr	r5, [pc, #156]	; (8010920 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xdc>)
 8010884:	f04f 0c14 	mov.w	ip, #20
 8010888:	2000      	movs	r0, #0
 801088a:	f8b5 9000 	ldrh.w	r9, [r5]
 801088e:	4599      	cmp	r9, r3
 8010890:	bf02      	ittt	eq
 8010892:	7daf      	ldrbeq	r7, [r5, #22]
 8010894:	f895 e017 	ldrbeq.w	lr, [r5, #23]
 8010898:	4628      	moveq	r0, r5
 801089a:	f1bc 0c01 	subs.w	ip, ip, #1
 801089e:	f105 0518 	add.w	r5, r5, #24
 80108a2:	d1f2      	bne.n	801088a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x46>
 80108a4:	b908      	cbnz	r0, 80108aa <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x66>
 80108a6:	2100      	movs	r1, #0
 80108a8:	e7db      	b.n	8010862 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 80108aa:	7823      	ldrb	r3, [r4, #0]
 80108ac:	b193      	cbz	r3, 80108d4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x90>
 80108ae:	2f00      	cmp	r7, #0
 80108b0:	d0f9      	beq.n	80108a6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 80108b2:	2e20      	cmp	r6, #32
 80108b4:	d11f      	bne.n	80108f6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb2>
 80108b6:	bb71      	cbnz	r1, 8010916 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd2>
 80108b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80108bc:	429a      	cmp	r2, r3
 80108be:	d0de      	beq.n	801087e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 80108c0:	6843      	ldr	r3, [r0, #4]
 80108c2:	b913      	cbnz	r3, 80108ca <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x86>
 80108c4:	6881      	ldr	r1, [r0, #8]
 80108c6:	07cd      	lsls	r5, r1, #31
 80108c8:	d5ca      	bpl.n	8010860 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 80108ca:	7d01      	ldrb	r1, [r0, #20]
 80108cc:	4541      	cmp	r1, r8
 80108ce:	d005      	beq.n	80108dc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x98>
 80108d0:	2101      	movs	r1, #1
 80108d2:	e7c6      	b.n	8010862 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e>
 80108d4:	f1be 0f00 	cmp.w	lr, #0
 80108d8:	d1eb      	bne.n	80108b2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x6e>
 80108da:	e7e4      	b.n	80108a6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 80108dc:	6881      	ldr	r1, [r0, #8]
 80108de:	104d      	asrs	r5, r1, #1
 80108e0:	eb04 0061 	add.w	r0, r4, r1, asr #1
 80108e4:	07c9      	lsls	r1, r1, #31
 80108e6:	bf48      	it	mi
 80108e8:	5961      	ldrmi	r1, [r4, r5]
 80108ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108ee:	bf48      	it	mi
 80108f0:	58cb      	ldrmi	r3, [r1, r3]
 80108f2:	4611      	mov	r1, r2
 80108f4:	4718      	bx	r3
 80108f6:	e9d0 3003 	ldrd	r3, r0, [r0, #12]
 80108fa:	f000 0501 	and.w	r5, r0, #1
 80108fe:	b90b      	cbnz	r3, 8010904 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>
 8010900:	2d00      	cmp	r5, #0
 8010902:	d0ad      	beq.n	8010860 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 8010904:	1046      	asrs	r6, r0, #1
 8010906:	eb04 0060 	add.w	r0, r4, r0, asr #1
 801090a:	b10d      	cbz	r5, 8010910 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcc>
 801090c:	59a4      	ldr	r4, [r4, r6]
 801090e:	58e3      	ldr	r3, [r4, r3]
 8010910:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010914:	4718      	bx	r3
 8010916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801091a:	bf00      	nop
 801091c:	2000081c 	andcs	r0, r0, ip, lsl r8
 8010920:	0801c58c 	stmdaeq	r1, {r2, r3, r7, r8, sl, lr, pc}

08010924 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 8010924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010928:	23ff      	movs	r3, #255	; 0xff
 801092a:	7013      	strb	r3, [r2, #0]
 801092c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8010930:	b085      	sub	sp, #20
 8010932:	7ccb      	ldrb	r3, [r1, #19]
 8010934:	7d4f      	ldrb	r7, [r1, #21]
 8010936:	9303      	str	r3, [sp, #12]
 8010938:	7d0b      	ldrb	r3, [r1, #20]
 801093a:	f101 0a02 	add.w	sl, r1, #2
 801093e:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 8010942:	4b5c      	ldr	r3, [pc, #368]	; (8010ab4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x190>)
 8010944:	4606      	mov	r6, r0
 8010946:	460d      	mov	r5, r1
 8010948:	4614      	mov	r4, r2
 801094a:	495b      	ldr	r1, [pc, #364]	; (8010ab8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 801094c:	f8d3 8000 	ldr.w	r8, [r3]
 8010950:	2206      	movs	r2, #6
 8010952:	4650      	mov	r0, sl
 8010954:	f7ff fcec 	bl	8010330 <memcmp>
 8010958:	f108 0905 	add.w	r9, r8, #5
 801095c:	4683      	mov	fp, r0
 801095e:	2202      	movs	r2, #2
 8010960:	4649      	mov	r1, r9
 8010962:	4650      	mov	r0, sl
 8010964:	b2bf      	uxth	r7, r7
 8010966:	f7ff fce3 	bl	8010330 <memcmp>
 801096a:	b928      	cbnz	r0, 8010978 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x54>
 801096c:	2204      	movs	r2, #4
 801096e:	4952      	ldr	r1, [pc, #328]	; (8010ab8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 8010970:	18a8      	adds	r0, r5, r2
 8010972:	f7ff fcdd 	bl	8010330 <memcmp>
 8010976:	b158      	cbz	r0, 8010990 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6c>
 8010978:	2206      	movs	r2, #6
 801097a:	4649      	mov	r1, r9
 801097c:	4650      	mov	r0, sl
 801097e:	f7ff fcd7 	bl	8010330 <memcmp>
 8010982:	b130      	cbz	r0, 8010992 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6e>
 8010984:	f1bb 0f00 	cmp.w	fp, #0
 8010988:	d04b      	beq.n	8010a22 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xfe>
 801098a:	b005      	add	sp, #20
 801098c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010990:	2001      	movs	r0, #1
 8010992:	2301      	movs	r3, #1
 8010994:	9a03      	ldr	r2, [sp, #12]
 8010996:	2a10      	cmp	r2, #16
 8010998:	d177      	bne.n	8010a8a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x166>
 801099a:	2f01      	cmp	r7, #1
 801099c:	d144      	bne.n	8010a28 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x104>
 801099e:	7873      	ldrb	r3, [r6, #1]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d1f2      	bne.n	801098a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80109a4:	2206      	movs	r2, #6
 80109a6:	4649      	mov	r1, r9
 80109a8:	f105 0017 	add.w	r0, r5, #23
 80109ac:	f7ff fcc0 	bl	8010330 <memcmp>
 80109b0:	2800      	cmp	r0, #0
 80109b2:	dcea      	bgt.n	801098a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80109b4:	2206      	movs	r2, #6
 80109b6:	f105 011d 	add.w	r1, r5, #29
 80109ba:	4648      	mov	r0, r9
 80109bc:	f7ff fcb8 	bl	8010330 <memcmp>
 80109c0:	2800      	cmp	r0, #0
 80109c2:	dce2      	bgt.n	801098a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80109c4:	23fe      	movs	r3, #254	; 0xfe
 80109c6:	7023      	strb	r3, [r4, #0]
 80109c8:	7063      	strb	r3, [r4, #1]
 80109ca:	70a3      	strb	r3, [r4, #2]
 80109cc:	70e3      	strb	r3, [r4, #3]
 80109ce:	7123      	strb	r3, [r4, #4]
 80109d0:	7163      	strb	r3, [r4, #5]
 80109d2:	71a3      	strb	r3, [r4, #6]
 80109d4:	23aa      	movs	r3, #170	; 0xaa
 80109d6:	71e3      	strb	r3, [r4, #7]
 80109d8:	f108 0204 	add.w	r2, r8, #4
 80109dc:	4621      	mov	r1, r4
 80109de:	f108 080a 	add.w	r8, r8, #10
 80109e2:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80109e6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80109ea:	f060 0055 	orn	r0, r0, #85	; 0x55
 80109ee:	7208      	strb	r0, [r1, #8]
 80109f0:	7810      	ldrb	r0, [r2, #0]
 80109f2:	f040 0055 	orr.w	r0, r0, #85	; 0x55
 80109f6:	7248      	strb	r0, [r1, #9]
 80109f8:	7810      	ldrb	r0, [r2, #0]
 80109fa:	4542      	cmp	r2, r8
 80109fc:	4403      	add	r3, r0
 80109fe:	b29b      	uxth	r3, r3
 8010a00:	f101 0102 	add.w	r1, r1, #2
 8010a04:	d1ef      	bne.n	80109e6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xc2>
 8010a06:	0a1a      	lsrs	r2, r3, #8
 8010a08:	f062 0155 	orn	r1, r2, #85	; 0x55
 8010a0c:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 8010a10:	7562      	strb	r2, [r4, #21]
 8010a12:	f063 0255 	orn	r2, r3, #85	; 0x55
 8010a16:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8010a1a:	7521      	strb	r1, [r4, #20]
 8010a1c:	75a2      	strb	r2, [r4, #22]
 8010a1e:	75e3      	strb	r3, [r4, #23]
 8010a20:	e7b3      	b.n	801098a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010a22:	4658      	mov	r0, fp
 8010a24:	465b      	mov	r3, fp
 8010a26:	e7b5      	b.n	8010994 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x70>
 8010a28:	2f03      	cmp	r7, #3
 8010a2a:	d11a      	bne.n	8010a62 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x13e>
 8010a2c:	7daa      	ldrb	r2, [r5, #22]
 8010a2e:	2a00      	cmp	r2, #0
 8010a30:	d1ab      	bne.n	801098a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010a32:	7072      	strb	r2, [r6, #1]
 8010a34:	f1bb 0f00 	cmp.w	fp, #0
 8010a38:	d0a7      	beq.n	801098a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d0a5      	beq.n	801098a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010a3e:	2302      	movs	r3, #2
 8010a40:	75e3      	strb	r3, [r4, #23]
 8010a42:	4b1e      	ldr	r3, [pc, #120]	; (8010abc <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 8010a44:	7622      	strb	r2, [r4, #24]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	7662      	strb	r2, [r4, #25]
 8010a4a:	889b      	ldrh	r3, [r3, #4]
 8010a4c:	3b00      	subs	r3, #0
 8010a4e:	bf18      	it	ne
 8010a50:	2301      	movne	r3, #1
 8010a52:	005b      	lsls	r3, r3, #1
 8010a54:	4630      	mov	r0, r6
 8010a56:	7663      	strb	r3, [r4, #25]
 8010a58:	b005      	add	sp, #20
 8010a5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a5e:	f7ff bd81 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010a62:	2f02      	cmp	r7, #2
 8010a64:	d191      	bne.n	801098a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010a66:	7daa      	ldrb	r2, [r5, #22]
 8010a68:	2a00      	cmp	r2, #0
 8010a6a:	d18e      	bne.n	801098a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010a6c:	2101      	movs	r1, #1
 8010a6e:	7071      	strb	r1, [r6, #1]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d08a      	beq.n	801098a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010a74:	4b11      	ldr	r3, [pc, #68]	; (8010abc <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 8010a76:	75e7      	strb	r7, [r4, #23]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	7622      	strb	r2, [r4, #24]
 8010a7c:	7662      	strb	r2, [r4, #25]
 8010a7e:	889b      	ldrh	r3, [r3, #4]
 8010a80:	3b00      	subs	r3, #0
 8010a82:	bf18      	it	ne
 8010a84:	2301      	movne	r3, #1
 8010a86:	408b      	lsls	r3, r1
 8010a88:	e7e4      	b.n	8010a54 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x130>
 8010a8a:	7c6a      	ldrb	r2, [r5, #17]
 8010a8c:	7cab      	ldrb	r3, [r5, #18]
 8010a8e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010a92:	b29b      	uxth	r3, r3
 8010a94:	f1bb 0f00 	cmp.w	fp, #0
 8010a98:	9301      	str	r3, [sp, #4]
 8010a9a:	7dab      	ldrb	r3, [r5, #22]
 8010a9c:	9300      	str	r3, [sp, #0]
 8010a9e:	bf18      	it	ne
 8010aa0:	4601      	movne	r1, r0
 8010aa2:	9a03      	ldr	r2, [sp, #12]
 8010aa4:	463b      	mov	r3, r7
 8010aa6:	bf08      	it	eq
 8010aa8:	2101      	moveq	r1, #1
 8010aaa:	4630      	mov	r0, r6
 8010aac:	f7ff feca 	bl	8010844 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 8010ab0:	e76b      	b.n	801098a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8010ab2:	bf00      	nop
 8010ab4:	20000820 	andcs	r0, r0, r0, lsr #16
 8010ab8:	0801c584 	stmdaeq	r1, {r2, r7, r8, sl, lr, pc}
 8010abc:	2000081c 	andcs	r0, r0, ip, lsl r8

08010ac0 <RDMIdentify::RDMIdentify()>:
 8010ac0:	4b01      	ldr	r3, [pc, #4]	; (8010ac8 <RDMIdentify::RDMIdentify()+0x8>)
 8010ac2:	6018      	str	r0, [r3, #0]
 8010ac4:	4770      	bx	lr
 8010ac6:	bf00      	nop
 8010ac8:	20000828 	andcs	r0, r0, r8, lsr #16

08010acc <RDMIdentify::On(rdm::identify::Mode)>:
 8010acc:	4770      	bx	lr

08010ace <RDMIdentify::Off(rdm::identify::Mode)>:
 8010ace:	4770      	bx	lr

08010ad0 <memcpy.constprop.0.isra.0>:
 8010ad0:	3801      	subs	r0, #1
 8010ad2:	1d0b      	adds	r3, r1, #4
 8010ad4:	4299      	cmp	r1, r3
 8010ad6:	d100      	bne.n	8010ada <memcpy.constprop.0.isra.0+0xa>
 8010ad8:	4770      	bx	lr
 8010ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ade:	f800 2f01 	strb.w	r2, [r0, #1]!
 8010ae2:	e7f7      	b.n	8010ad4 <memcpy.constprop.0.isra.0+0x4>

08010ae4 <RDMHandler::GetInterfaceList(unsigned short)>:
 8010ae4:	4a08      	ldr	r2, [pc, #32]	; (8010b08 <RDMHandler::GetInterfaceList(unsigned short)+0x24>)
 8010ae6:	6883      	ldr	r3, [r0, #8]
 8010ae8:	6812      	ldr	r2, [r2, #0]
 8010aea:	6892      	ldr	r2, [r2, #8]
 8010aec:	76da      	strb	r2, [r3, #27]
 8010aee:	0e11      	lsrs	r1, r2, #24
 8010af0:	7619      	strb	r1, [r3, #24]
 8010af2:	0c11      	lsrs	r1, r2, #16
 8010af4:	7659      	strb	r1, [r3, #25]
 8010af6:	0a11      	lsrs	r1, r2, #8
 8010af8:	2200      	movs	r2, #0
 8010afa:	771a      	strb	r2, [r3, #28]
 8010afc:	2206      	movs	r2, #6
 8010afe:	7699      	strb	r1, [r3, #26]
 8010b00:	775a      	strb	r2, [r3, #29]
 8010b02:	75da      	strb	r2, [r3, #23]
 8010b04:	f7ff bd2e 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010b08:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010b0c <RDMHandler::GetInterfaceName(unsigned short)>:
 8010b0c:	b538      	push	{r3, r4, r5, lr}
 8010b0e:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010b12:	4604      	mov	r4, r0
 8010b14:	3117      	adds	r1, #23
 8010b16:	f105 0018 	add.w	r0, r5, #24
 8010b1a:	f7ff ffd9 	bl	8010ad0 <memcpy.constprop.0.isra.0>
 8010b1e:	4a0d      	ldr	r2, [pc, #52]	; (8010b54 <RDMHandler::GetInterfaceName(unsigned short)+0x48>)
 8010b20:	6813      	ldr	r3, [r2, #0]
 8010b22:	f105 001b 	add.w	r0, r5, #27
 8010b26:	33a6      	adds	r3, #166	; 0xa6
 8010b28:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010b2c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010b30:	2900      	cmp	r1, #0
 8010b32:	d1f9      	bne.n	8010b28 <RDMHandler::GetInterfaceName(unsigned short)+0x1c>
 8010b34:	6812      	ldr	r2, [r2, #0]
 8010b36:	32a6      	adds	r2, #166	; 0xa6
 8010b38:	4611      	mov	r1, r2
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	3101      	adds	r1, #1
 8010b3e:	7818      	ldrb	r0, [r3, #0]
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d1fa      	bne.n	8010b3a <RDMHandler::GetInterfaceName(unsigned short)+0x2e>
 8010b44:	1a9b      	subs	r3, r3, r2
 8010b46:	3304      	adds	r3, #4
 8010b48:	75eb      	strb	r3, [r5, #23]
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b50:	f7ff bd08 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010b54:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010b58 <RDMHandler::GetHardwareAddress(unsigned short)>:
 8010b58:	b538      	push	{r3, r4, r5, lr}
 8010b5a:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010b5e:	4604      	mov	r4, r0
 8010b60:	3117      	adds	r1, #23
 8010b62:	f105 0018 	add.w	r0, r5, #24
 8010b66:	f7ff ffb3 	bl	8010ad0 <memcpy.constprop.0.isra.0>
 8010b6a:	4b06      	ldr	r3, [pc, #24]	; (8010b84 <RDMHandler::GetHardwareAddress(unsigned short)+0x2c>)
 8010b6c:	f105 011c 	add.w	r1, r5, #28
 8010b70:	6818      	ldr	r0, [r3, #0]
 8010b72:	f004 f868 	bl	8014c46 <Network::MacAddressCopyTo(unsigned char*)>
 8010b76:	230a      	movs	r3, #10
 8010b78:	75eb      	strb	r3, [r5, #23]
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b80:	f7ff bcf0 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010b84:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010b88 <RDMHandler::GetDHCPMode(unsigned short)>:
 8010b88:	b538      	push	{r3, r4, r5, lr}
 8010b8a:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010b8e:	4604      	mov	r4, r0
 8010b90:	3117      	adds	r1, #23
 8010b92:	f105 0018 	add.w	r0, r5, #24
 8010b96:	f7ff ff9b 	bl	8010ad0 <memcpy.constprop.0.isra.0>
 8010b9a:	4b05      	ldr	r3, [pc, #20]	; (8010bb0 <RDMHandler::GetDHCPMode(unsigned short)+0x28>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	795b      	ldrb	r3, [r3, #5]
 8010ba0:	772b      	strb	r3, [r5, #28]
 8010ba2:	2305      	movs	r3, #5
 8010ba4:	75eb      	strb	r3, [r5, #23]
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bac:	f7ff bcda 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010bb0:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010bb4 <RDMHandler::SetDHCPMode(bool, unsigned short)>:
 8010bb4:	4b10      	ldr	r3, [pc, #64]	; (8010bf8 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x44>)
 8010bb6:	6842      	ldr	r2, [r0, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	7919      	ldrb	r1, [r3, #4]
 8010bbc:	b510      	push	{r4, lr}
 8010bbe:	4604      	mov	r4, r0
 8010bc0:	b921      	cbnz	r1, 8010bcc <RDMHandler::SetDHCPMode(bool, unsigned short)+0x18>
 8010bc2:	210b      	movs	r1, #11
 8010bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bc8:	f7ff bd90 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
 8010bcc:	7ed2      	ldrb	r2, [r2, #27]
 8010bce:	2a01      	cmp	r2, #1
 8010bd0:	d109      	bne.n	8010be6 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x32>
 8010bd2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8010bd6:	f042 0204 	orr.w	r2, r2, #4
 8010bda:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8010bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010be2:	f7ff bcbf 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010be6:	b92a      	cbnz	r2, 8010bf4 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x40>
 8010be8:	4618      	mov	r0, r3
 8010bea:	4611      	mov	r1, r2
 8010bec:	f004 fa62 	bl	80150b4 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 8010bf0:	4620      	mov	r0, r4
 8010bf2:	e7f4      	b.n	8010bde <RDMHandler::SetDHCPMode(bool, unsigned short)+0x2a>
 8010bf4:	2106      	movs	r1, #6
 8010bf6:	e7e5      	b.n	8010bc4 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x10>
 8010bf8:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010bfc <RDMHandler::GetNameServers(unsigned short)>:
 8010bfc:	6842      	ldr	r2, [r0, #4]
 8010bfe:	7dd2      	ldrb	r2, [r2, #23]
 8010c00:	2a02      	cmp	r2, #2
 8010c02:	d902      	bls.n	8010c0a <RDMHandler::GetNameServers(unsigned short)+0xe>
 8010c04:	2106      	movs	r1, #6
 8010c06:	f7ff bd71 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
 8010c0a:	6883      	ldr	r3, [r0, #8]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	765a      	strb	r2, [r3, #25]
 8010c10:	769a      	strb	r2, [r3, #26]
 8010c12:	76da      	strb	r2, [r3, #27]
 8010c14:	771a      	strb	r2, [r3, #28]
 8010c16:	2205      	movs	r2, #5
 8010c18:	75da      	strb	r2, [r3, #23]
 8010c1a:	f7ff bca3 	b.w	8010564 <RDMHandler::RespondMessageAck()>
	...

08010c20 <RDMHandler::GetZeroconf(unsigned short)>:
 8010c20:	b538      	push	{r3, r4, r5, lr}
 8010c22:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010c26:	4604      	mov	r4, r0
 8010c28:	3117      	adds	r1, #23
 8010c2a:	f105 0018 	add.w	r0, r5, #24
 8010c2e:	f7ff ff4f 	bl	8010ad0 <memcpy.constprop.0.isra.0>
 8010c32:	4b06      	ldr	r3, [pc, #24]	; (8010c4c <RDMHandler::GetZeroconf(unsigned short)+0x2c>)
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	7993      	ldrb	r3, [r2, #6]
 8010c38:	b103      	cbz	r3, 8010c3c <RDMHandler::GetZeroconf(unsigned short)+0x1c>
 8010c3a:	79d3      	ldrb	r3, [r2, #7]
 8010c3c:	772b      	strb	r3, [r5, #28]
 8010c3e:	2305      	movs	r3, #5
 8010c40:	75eb      	strb	r3, [r5, #23]
 8010c42:	4620      	mov	r0, r4
 8010c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c48:	f7ff bc8c 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010c4c:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010c50 <RDMHandler::SetZeroconf(bool, unsigned short)>:
 8010c50:	4b10      	ldr	r3, [pc, #64]	; (8010c94 <RDMHandler::SetZeroconf(bool, unsigned short)+0x44>)
 8010c52:	6842      	ldr	r2, [r0, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	7999      	ldrb	r1, [r3, #6]
 8010c58:	b510      	push	{r4, lr}
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	b921      	cbnz	r1, 8010c68 <RDMHandler::SetZeroconf(bool, unsigned short)+0x18>
 8010c5e:	210b      	movs	r1, #11
 8010c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c64:	f7ff bd42 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
 8010c68:	7ed2      	ldrb	r2, [r2, #27]
 8010c6a:	2a01      	cmp	r2, #1
 8010c6c:	d109      	bne.n	8010c82 <RDMHandler::SetZeroconf(bool, unsigned short)+0x32>
 8010c6e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8010c72:	f042 0208 	orr.w	r2, r2, #8
 8010c76:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8010c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c7e:	f7ff bc71 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010c82:	b92a      	cbnz	r2, 8010c90 <RDMHandler::SetZeroconf(bool, unsigned short)+0x40>
 8010c84:	4618      	mov	r0, r3
 8010c86:	4611      	mov	r1, r2
 8010c88:	f004 fa14 	bl	80150b4 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	e7f4      	b.n	8010c7a <RDMHandler::SetZeroconf(bool, unsigned short)+0x2a>
 8010c90:	2106      	movs	r1, #6
 8010c92:	e7e5      	b.n	8010c60 <RDMHandler::SetZeroconf(bool, unsigned short)+0x10>
 8010c94:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010c98 <RDMHandler::RenewDhcp(bool, unsigned short)>:
 8010c98:	4b09      	ldr	r3, [pc, #36]	; (8010cc0 <RDMHandler::RenewDhcp(bool, unsigned short)+0x28>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	795a      	ldrb	r2, [r3, #5]
 8010c9e:	b510      	push	{r4, lr}
 8010ca0:	4604      	mov	r4, r0
 8010ca2:	b922      	cbnz	r2, 8010cae <RDMHandler::RenewDhcp(bool, unsigned short)+0x16>
 8010ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ca8:	210b      	movs	r1, #11
 8010caa:	f7ff bd1f 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f004 f9ba 	bl	8015028 <Network::EnableDhcp()>
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cba:	f7ff bc53 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010cbe:	bf00      	nop
 8010cc0:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010cc4 <RDMHandler::GetAddressNetmask(unsigned short)>:
 8010cc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010cc6:	4e10      	ldr	r6, [pc, #64]	; (8010d08 <RDMHandler::GetAddressNetmask(unsigned short)+0x44>)
 8010cc8:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010ccc:	6833      	ldr	r3, [r6, #0]
 8010cce:	4604      	mov	r4, r0
 8010cd0:	695b      	ldr	r3, [r3, #20]
 8010cd2:	9301      	str	r3, [sp, #4]
 8010cd4:	f105 0018 	add.w	r0, r5, #24
 8010cd8:	3117      	adds	r1, #23
 8010cda:	f7ff fef9 	bl	8010ad0 <memcpy.constprop.0.isra.0>
 8010cde:	a901      	add	r1, sp, #4
 8010ce0:	f105 001c 	add.w	r0, r5, #28
 8010ce4:	f7ff fef4 	bl	8010ad0 <memcpy.constprop.0.isra.0>
 8010ce8:	6836      	ldr	r6, [r6, #0]
 8010cea:	69f0      	ldr	r0, [r6, #28]
 8010cec:	f009 ff30 	bl	801ab50 <__popcountsi2>
 8010cf0:	f885 0020 	strb.w	r0, [r5, #32]
 8010cf4:	7973      	ldrb	r3, [r6, #5]
 8010cf6:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 8010cfa:	230a      	movs	r3, #10
 8010cfc:	75eb      	strb	r3, [r5, #23]
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f7ff fc30 	bl	8010564 <RDMHandler::RespondMessageAck()>
 8010d04:	b002      	add	sp, #8
 8010d06:	bd70      	pop	{r4, r5, r6, pc}
 8010d08:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010d0c <RDMHandler::GetStaticAddress(unsigned short)>:
 8010d0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d0e:	4e0f      	ldr	r6, [pc, #60]	; (8010d4c <RDMHandler::GetStaticAddress(unsigned short)+0x40>)
 8010d10:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010d14:	6833      	ldr	r3, [r6, #0]
 8010d16:	4604      	mov	r4, r0
 8010d18:	695b      	ldr	r3, [r3, #20]
 8010d1a:	9301      	str	r3, [sp, #4]
 8010d1c:	f105 0018 	add.w	r0, r5, #24
 8010d20:	3117      	adds	r1, #23
 8010d22:	f7ff fed5 	bl	8010ad0 <memcpy.constprop.0.isra.0>
 8010d26:	a901      	add	r1, sp, #4
 8010d28:	f105 001c 	add.w	r0, r5, #28
 8010d2c:	f7ff fed0 	bl	8010ad0 <memcpy.constprop.0.isra.0>
 8010d30:	6833      	ldr	r3, [r6, #0]
 8010d32:	69d8      	ldr	r0, [r3, #28]
 8010d34:	f009 ff0c 	bl	801ab50 <__popcountsi2>
 8010d38:	2309      	movs	r3, #9
 8010d3a:	f885 0020 	strb.w	r0, [r5, #32]
 8010d3e:	75eb      	strb	r3, [r5, #23]
 8010d40:	4620      	mov	r0, r4
 8010d42:	f7ff fc0f 	bl	8010564 <RDMHandler::RespondMessageAck()>
 8010d46:	b002      	add	sp, #8
 8010d48:	bd70      	pop	{r4, r5, r6, pc}
 8010d4a:	bf00      	nop
 8010d4c:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010d50 <RDMHandler::SetStaticAddress(bool, unsigned short)>:
 8010d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d52:	6845      	ldr	r5, [r0, #4]
 8010d54:	7dab      	ldrb	r3, [r5, #22]
 8010d56:	2b09      	cmp	r3, #9
 8010d58:	4604      	mov	r4, r0
 8010d5a:	d005      	beq.n	8010d68 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x18>
 8010d5c:	2101      	movs	r1, #1
 8010d5e:	b003      	add	sp, #12
 8010d60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d64:	f7ff bcc2 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
 8010d68:	f105 011b 	add.w	r1, r5, #27
 8010d6c:	a801      	add	r0, sp, #4
 8010d6e:	f7ff feaf 	bl	8010ad0 <memcpy.constprop.0.isra.0>
 8010d72:	4b09      	ldr	r3, [pc, #36]	; (8010d98 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x48>)
 8010d74:	7fea      	ldrb	r2, [r5, #31]
 8010d76:	6818      	ldr	r0, [r3, #0]
 8010d78:	9901      	ldr	r1, [sp, #4]
 8010d7a:	b12a      	cbz	r2, 8010d88 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x38>
 8010d7c:	f1c2 0220 	rsb	r2, r2, #32
 8010d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d84:	4093      	lsls	r3, r2
 8010d86:	ba1a      	rev	r2, r3
 8010d88:	f004 f994 	bl	80150b4 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	f7ff fbe9 	bl	8010564 <RDMHandler::RespondMessageAck()>
 8010d92:	b003      	add	sp, #12
 8010d94:	bd30      	pop	{r4, r5, pc}
 8010d96:	bf00      	nop
 8010d98:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010d9c <RDMHandler::ApplyConfiguration(bool, unsigned short)>:
 8010d9c:	4b08      	ldr	r3, [pc, #32]	; (8010dc0 <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x24>)
 8010d9e:	b510      	push	{r4, lr}
 8010da0:	4604      	mov	r4, r0
 8010da2:	6818      	ldr	r0, [r3, #0]
 8010da4:	f004 f993 	bl	80150ce <Network::ApplyQueuedConfig()>
 8010da8:	b120      	cbz	r0, 8010db4 <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x18>
 8010daa:	4620      	mov	r0, r4
 8010dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010db0:	f7ff bbd8 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010db4:	4620      	mov	r0, r4
 8010db6:	2101      	movs	r1, #1
 8010db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dbc:	f7ff bc96 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
 8010dc0:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010dc4 <RDMHandler::GetDefaultRoute(unsigned short)>:
 8010dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010dc6:	4b0c      	ldr	r3, [pc, #48]	; (8010df8 <RDMHandler::GetDefaultRoute(unsigned short)+0x34>)
 8010dc8:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	4604      	mov	r4, r0
 8010dd0:	699b      	ldr	r3, [r3, #24]
 8010dd2:	9301      	str	r3, [sp, #4]
 8010dd4:	f105 0018 	add.w	r0, r5, #24
 8010dd8:	3117      	adds	r1, #23
 8010dda:	f7ff fe79 	bl	8010ad0 <memcpy.constprop.0.isra.0>
 8010dde:	a901      	add	r1, sp, #4
 8010de0:	f105 001c 	add.w	r0, r5, #28
 8010de4:	f7ff fe74 	bl	8010ad0 <memcpy.constprop.0.isra.0>
 8010de8:	2308      	movs	r3, #8
 8010dea:	75eb      	strb	r3, [r5, #23]
 8010dec:	4620      	mov	r0, r4
 8010dee:	f7ff fbb9 	bl	8010564 <RDMHandler::RespondMessageAck()>
 8010df2:	b003      	add	sp, #12
 8010df4:	bd30      	pop	{r4, r5, pc}
 8010df6:	bf00      	nop
 8010df8:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010dfc <RDMHandler::SetDefaultRoute(bool, unsigned short)>:
 8010dfc:	210b      	movs	r1, #11
 8010dfe:	f7ff bc75 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
	...

08010e04 <RDMHandler::GetHostName(unsigned short)>:
 8010e04:	4b0a      	ldr	r3, [pc, #40]	; (8010e30 <RDMHandler::GetHostName(unsigned short)+0x2c>)
 8010e06:	b513      	push	{r0, r1, r4, lr}
 8010e08:	6819      	ldr	r1, [r3, #0]
 8010e0a:	3120      	adds	r1, #32
 8010e0c:	460b      	mov	r3, r1
 8010e0e:	461a      	mov	r2, r3
 8010e10:	3301      	adds	r3, #1
 8010e12:	7814      	ldrb	r4, [r2, #0]
 8010e14:	2c00      	cmp	r4, #0
 8010e16:	d1fa      	bne.n	8010e0e <RDMHandler::GetHostName(unsigned short)+0xa>
 8010e18:	1a52      	subs	r2, r2, r1
 8010e1a:	b292      	uxth	r2, r2
 8010e1c:	9001      	str	r0, [sp, #4]
 8010e1e:	f7ff fb49 	bl	80104b4 <RDMHandler::HandleString(char const*, unsigned int)>
 8010e22:	9801      	ldr	r0, [sp, #4]
 8010e24:	b002      	add	sp, #8
 8010e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e2a:	f7ff bb9b 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010e2e:	bf00      	nop
 8010e30:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010e34 <RDMHandler::SetHostName(bool, unsigned short)>:
 8010e34:	b510      	push	{r4, lr}
 8010e36:	6841      	ldr	r1, [r0, #4]
 8010e38:	7d8b      	ldrb	r3, [r1, #22]
 8010e3a:	2b3f      	cmp	r3, #63	; 0x3f
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	d904      	bls.n	8010e4a <RDMHandler::SetHostName(bool, unsigned short)+0x16>
 8010e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e44:	2102      	movs	r1, #2
 8010e46:	f7ff bc51 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
 8010e4a:	440b      	add	r3, r1
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	75da      	strb	r2, [r3, #23]
 8010e50:	4b04      	ldr	r3, [pc, #16]	; (8010e64 <RDMHandler::SetHostName(bool, unsigned short)+0x30>)
 8010e52:	3117      	adds	r1, #23
 8010e54:	6818      	ldr	r0, [r3, #0]
 8010e56:	f004 f8ad 	bl	8014fb4 <Network::SetHostName(char const*)>
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e60:	f7ff bb80 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010e64:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010e68 <RDMHandler::GetDomainName(unsigned short)>:
 8010e68:	4b0a      	ldr	r3, [pc, #40]	; (8010e94 <RDMHandler::GetDomainName(unsigned short)+0x2c>)
 8010e6a:	b513      	push	{r0, r1, r4, lr}
 8010e6c:	6819      	ldr	r1, [r3, #0]
 8010e6e:	3160      	adds	r1, #96	; 0x60
 8010e70:	460b      	mov	r3, r1
 8010e72:	461a      	mov	r2, r3
 8010e74:	3301      	adds	r3, #1
 8010e76:	7814      	ldrb	r4, [r2, #0]
 8010e78:	2c00      	cmp	r4, #0
 8010e7a:	d1fa      	bne.n	8010e72 <RDMHandler::GetDomainName(unsigned short)+0xa>
 8010e7c:	1a52      	subs	r2, r2, r1
 8010e7e:	b292      	uxth	r2, r2
 8010e80:	9001      	str	r0, [sp, #4]
 8010e82:	f7ff fb17 	bl	80104b4 <RDMHandler::HandleString(char const*, unsigned int)>
 8010e86:	9801      	ldr	r0, [sp, #4]
 8010e88:	b002      	add	sp, #8
 8010e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e8e:	f7ff bb69 	b.w	8010564 <RDMHandler::RespondMessageAck()>
 8010e92:	bf00      	nop
 8010e94:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08010e98 <RDMHandler::SetDomainName(bool, unsigned short)>:
 8010e98:	210b      	movs	r1, #11
 8010e9a:	f7ff bc27 	b.w	80106ec <RDMHandler::RespondMessageNack(unsigned short)>
	...

08010ea0 <RDMDevice::RDMDevice()>:
 8010ea0:	4a34      	ldr	r2, [pc, #208]	; (8010f74 <RDMDevice::RDMDevice()+0xd4>)
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ea6:	4604      	mov	r4, r0
 8010ea8:	7003      	strb	r3, [r0, #0]
 8010eaa:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
 8010eae:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
 8010eb2:	6783      	str	r3, [r0, #120]	; 0x78
 8010eb4:	4611      	mov	r1, r2
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	3201      	adds	r2, #1
 8010eba:	7818      	ldrb	r0, [r3, #0]
 8010ebc:	2800      	cmp	r0, #0
 8010ebe:	d1fa      	bne.n	8010eb6 <RDMDevice::RDMDevice()+0x16>
 8010ec0:	1a5b      	subs	r3, r3, r1
 8010ec2:	2b20      	cmp	r3, #32
 8010ec4:	bf28      	it	cs
 8010ec6:	2320      	movcs	r3, #32
 8010ec8:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 8010ecc:	4829      	ldr	r0, [pc, #164]	; (8010f74 <RDMDevice::RDMDevice()+0xd4>)
 8010ece:	4629      	mov	r1, r5
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	3a01      	subs	r2, #1
 8010ed4:	d23e      	bcs.n	8010f54 <RDMDevice::RDMDevice()+0xb4>
 8010ed6:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8010eda:	4b27      	ldr	r3, [pc, #156]	; (8010f78 <RDMDevice::RDMDevice()+0xd8>)
 8010edc:	4e27      	ldr	r6, [pc, #156]	; (8010f7c <RDMDevice::RDMDevice()+0xdc>)
 8010ede:	781a      	ldrb	r2, [r3, #0]
 8010ee0:	7062      	strb	r2, [r4, #1]
 8010ee2:	785b      	ldrb	r3, [r3, #1]
 8010ee4:	6830      	ldr	r0, [r6, #0]
 8010ee6:	70a3      	strb	r3, [r4, #2]
 8010ee8:	4669      	mov	r1, sp
 8010eea:	f003 feac 	bl	8014c46 <Network::MacAddressCopyTo(unsigned char*)>
 8010eee:	6833      	ldr	r3, [r6, #0]
 8010ef0:	695b      	ldr	r3, [r3, #20]
 8010ef2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010ef6:	0e18      	lsrs	r0, r3, #24
 8010ef8:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8010efc:	b2db      	uxtb	r3, r3
 8010efe:	70e3      	strb	r3, [r4, #3]
 8010f00:	72a3      	strb	r3, [r4, #10]
 8010f02:	4b1f      	ldr	r3, [pc, #124]	; (8010f80 <RDMDevice::RDMDevice()+0xe0>)
 8010f04:	7122      	strb	r2, [r4, #4]
 8010f06:	7262      	strb	r2, [r4, #9]
 8010f08:	71a0      	strb	r0, [r4, #6]
 8010f0a:	7161      	strb	r1, [r4, #5]
 8010f0c:	71e0      	strb	r0, [r4, #7]
 8010f0e:	7221      	strb	r1, [r4, #8]
 8010f10:	461a      	mov	r2, r3
 8010f12:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010f16:	2900      	cmp	r1, #0
 8010f18:	d1fb      	bne.n	8010f12 <RDMDevice::RDMDevice()+0x72>
 8010f1a:	1a9b      	subs	r3, r3, r2
 8010f1c:	2b20      	cmp	r3, #32
 8010f1e:	bf28      	it	cs
 8010f20:	2320      	movcs	r3, #32
 8010f22:	4917      	ldr	r1, [pc, #92]	; (8010f80 <RDMDevice::RDMDevice()+0xe0>)
 8010f24:	461a      	mov	r2, r3
 8010f26:	3a01      	subs	r2, #1
 8010f28:	d219      	bcs.n	8010f5e <RDMDevice::RDMDevice()+0xbe>
 8010f2a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8010f2e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010f32:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8010f36:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8010f3a:	4a12      	ldr	r2, [pc, #72]	; (8010f84 <RDMDevice::RDMDevice()+0xe4>)
 8010f3c:	2315      	movs	r3, #21
 8010f3e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
 8010f42:	f104 0166 	add.w	r1, r4, #102	; 0x66
 8010f46:	f104 0351 	add.w	r3, r4, #81	; 0x51
 8010f4a:	4299      	cmp	r1, r3
 8010f4c:	d10c      	bne.n	8010f68 <RDMDevice::RDMDevice()+0xc8>
 8010f4e:	4620      	mov	r0, r4
 8010f50:	b002      	add	sp, #8
 8010f52:	bd70      	pop	{r4, r5, r6, pc}
 8010f54:	f810 6b01 	ldrb.w	r6, [r0], #1
 8010f58:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010f5c:	e7b9      	b.n	8010ed2 <RDMDevice::RDMDevice()+0x32>
 8010f5e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8010f62:	f805 0f01 	strb.w	r0, [r5, #1]!
 8010f66:	e7de      	b.n	8010f26 <RDMDevice::RDMDevice()+0x86>
 8010f68:	f812 0b01 	ldrb.w	r0, [r2], #1
 8010f6c:	f803 0f01 	strb.w	r0, [r3, #1]!
 8010f70:	e7eb      	b.n	8010f4a <RDMDevice::RDMDevice()+0xaa>
 8010f72:	bf00      	nop
 8010f74:	0801c858 	stmdaeq	r1, {r3, r4, r6, fp, lr, pc}
 8010f78:	0801c856 	stmdaeq	r1, {r1, r2, r4, r6, fp, lr, pc}
 8010f7c:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 8010f80:	0801bfd1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 8010f84:	0801c840 	stmdaeq	r1, {r6, fp, lr, pc}

08010f88 <RDMDevice::Print()>:
 8010f88:	b513      	push	{r0, r1, r4, lr}
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	4818      	ldr	r0, [pc, #96]	; (8010ff0 <RDMDevice::Print()+0x68>)
 8010f8e:	f7f9 fa83 	bl	800a498 <printf>
 8010f92:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
 8010f96:	4817      	ldr	r0, [pc, #92]	; (8010ff4 <RDMDevice::Print()+0x6c>)
 8010f98:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 8010f9c:	f7f9 fa7c 	bl	800a498 <printf>
 8010fa0:	78a2      	ldrb	r2, [r4, #2]
 8010fa2:	7861      	ldrb	r1, [r4, #1]
 8010fa4:	4814      	ldr	r0, [pc, #80]	; (8010ff8 <RDMDevice::Print()+0x70>)
 8010fa6:	f7f9 fa77 	bl	800a498 <printf>
 8010faa:	79e3      	ldrb	r3, [r4, #7]
 8010fac:	7a62      	ldrb	r2, [r4, #9]
 8010fae:	7aa1      	ldrb	r1, [r4, #10]
 8010fb0:	9300      	str	r3, [sp, #0]
 8010fb2:	4812      	ldr	r0, [pc, #72]	; (8010ffc <RDMDevice::Print()+0x74>)
 8010fb4:	7a23      	ldrb	r3, [r4, #8]
 8010fb6:	f7f9 fa6f 	bl	800a498 <printf>
 8010fba:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 8010fbe:	4810      	ldr	r0, [pc, #64]	; (8011000 <RDMDevice::Print()+0x78>)
 8010fc0:	f104 020b 	add.w	r2, r4, #11
 8010fc4:	f7f9 fa68 	bl	800a498 <printf>
 8010fc8:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8010fcc:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 8010fd0:	480c      	ldr	r0, [pc, #48]	; (8011004 <RDMDevice::Print()+0x7c>)
 8010fd2:	0a09      	lsrs	r1, r1, #8
 8010fd4:	f7f9 fa60 	bl	800a498 <printf>
 8010fd8:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8010fdc:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8010fe0:	4809      	ldr	r0, [pc, #36]	; (8011008 <RDMDevice::Print()+0x80>)
 8010fe2:	0a09      	lsrs	r1, r1, #8
 8010fe4:	b002      	add	sp, #8
 8010fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fea:	f7f9 ba55 	b.w	800a498 <printf>
 8010fee:	bf00      	nop
 8010ff0:	0801c76c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, sl, lr, pc}
 8010ff4:	0801c786 	stmdaeq	r1, {r1, r2, r7, r8, r9, sl, lr, pc}
 8010ff8:	0801c7a1 	stmdaeq	r1, {r0, r5, r7, r8, r9, sl, lr, pc}
 8010ffc:	0801c7c0 	stmdaeq	r1, {r6, r7, r8, r9, sl, lr, pc}
 8011000:	0801c7e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, r9, sl, lr, pc}
 8011004:	0801c802 	stmdaeq	r1, {r1, fp, lr, pc}
 8011008:	0801c821 	stmdaeq	r1, {r0, r5, fp, lr, pc}

0801100c <uuid_unparse_x>:
 801100c:	b530      	push	{r4, r5, lr}
 801100e:	4603      	mov	r3, r0
 8011010:	4608      	mov	r0, r1
 8011012:	4611      	mov	r1, r2
 8011014:	681a      	ldr	r2, [r3, #0]
 8011016:	891c      	ldrh	r4, [r3, #8]
 8011018:	b08f      	sub	sp, #60	; 0x3c
 801101a:	ba12      	rev	r2, r2
 801101c:	920a      	str	r2, [sp, #40]	; 0x28
 801101e:	889a      	ldrh	r2, [r3, #4]
 8011020:	ba52      	rev16	r2, r2
 8011022:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8011026:	88da      	ldrh	r2, [r3, #6]
 8011028:	ba64      	rev16	r4, r4
 801102a:	ba52      	rev16	r2, r2
 801102c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8011030:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 8011034:	f103 020a 	add.w	r2, r3, #10
 8011038:	f10d 0431 	add.w	r4, sp, #49	; 0x31
 801103c:	3310      	adds	r3, #16
 801103e:	4293      	cmp	r3, r2
 8011040:	d122      	bne.n	8011088 <uuid_unparse_x+0x7c>
 8011042:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8011046:	9208      	str	r2, [sp, #32]
 8011048:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 801104c:	9207      	str	r2, [sp, #28]
 801104e:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8011052:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8011056:	9206      	str	r2, [sp, #24]
 8011058:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801105c:	9205      	str	r2, [sp, #20]
 801105e:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8011062:	9204      	str	r2, [sp, #16]
 8011064:	0a1b      	lsrs	r3, r3, #8
 8011066:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 801106a:	9203      	str	r2, [sp, #12]
 801106c:	9301      	str	r3, [sp, #4]
 801106e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8011072:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8011076:	9202      	str	r2, [sp, #8]
 8011078:	9300      	str	r3, [sp, #0]
 801107a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801107c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8011080:	f7f9 fa1a 	bl	800a4b8 <sprintf>
 8011084:	b00f      	add	sp, #60	; 0x3c
 8011086:	bd30      	pop	{r4, r5, pc}
 8011088:	f812 5b01 	ldrb.w	r5, [r2], #1
 801108c:	f804 5f01 	strb.w	r5, [r4, #1]!
 8011090:	e7d5      	b.n	801103e <uuid_unparse_x+0x32>
	...

08011094 <uuid_unparse>:
 8011094:	4a01      	ldr	r2, [pc, #4]	; (801109c <uuid_unparse+0x8>)
 8011096:	f7ff bfb9 	b.w	801100c <uuid_unparse_x>
 801109a:	bf00      	nop
 801109c:	0801c874 	stmdaeq	r1, {r2, r4, r5, r6, fp, lr, pc}

080110a0 <DmxSend::~DmxSend()>:
 80110a0:	4770      	bx	lr
	...

080110a4 <DmxSend::Start(unsigned int)>:
 80110a4:	b430      	push	{r4, r5}
 80110a6:	4c09      	ldr	r4, [pc, #36]	; (80110cc <DmxSend::Start(unsigned int)+0x28>)
 80110a8:	2301      	movs	r3, #1
 80110aa:	7822      	ldrb	r2, [r4, #0]
 80110ac:	fa03 f001 	lsl.w	r0, r3, r1
 80110b0:	ea30 0502 	bics.w	r5, r0, r2
 80110b4:	d007      	beq.n	80110c6 <DmxSend::Start(unsigned int)+0x22>
 80110b6:	4302      	orrs	r2, r0
 80110b8:	4805      	ldr	r0, [pc, #20]	; (80110d0 <DmxSend::Start(unsigned int)+0x2c>)
 80110ba:	7022      	strb	r2, [r4, #0]
 80110bc:	6800      	ldr	r0, [r0, #0]
 80110be:	bc30      	pop	{r4, r5}
 80110c0:	2200      	movs	r2, #0
 80110c2:	f000 bbab 	b.w	801181c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80110c6:	bc30      	pop	{r4, r5}
 80110c8:	4770      	bx	lr
 80110ca:	bf00      	nop
 80110cc:	2000082c 	andcs	r0, r0, ip, lsr #16
 80110d0:	20001064 	andcs	r1, r0, r4, rrx

080110d4 <DmxSend::Stop(unsigned int)>:
 80110d4:	b410      	push	{r4}
 80110d6:	480b      	ldr	r0, [pc, #44]	; (8011104 <DmxSend::Stop(unsigned int)+0x30>)
 80110d8:	2201      	movs	r2, #1
 80110da:	7803      	ldrb	r3, [r0, #0]
 80110dc:	408a      	lsls	r2, r1
 80110de:	ea03 0402 	and.w	r4, r3, r2
 80110e2:	439a      	bics	r2, r3
 80110e4:	d10a      	bne.n	80110fc <DmxSend::Stop(unsigned int)+0x28>
 80110e6:	ea23 0304 	bic.w	r3, r3, r4
 80110ea:	7003      	strb	r3, [r0, #0]
 80110ec:	4806      	ldr	r0, [pc, #24]	; (8011108 <DmxSend::Stop(unsigned int)+0x34>)
 80110ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110f2:	6800      	ldr	r0, [r0, #0]
 80110f4:	2300      	movs	r3, #0
 80110f6:	461a      	mov	r2, r3
 80110f8:	f000 bb90 	b.w	801181c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80110fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011100:	4770      	bx	lr
 8011102:	bf00      	nop
 8011104:	2000082c 	andcs	r0, r0, ip, lsr #16
 8011108:	20001064 	andcs	r1, r0, r4, rrx

0801110c <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)>:
 801110c:	b11b      	cbz	r3, 8011116 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xa>
 801110e:	4802      	ldr	r0, [pc, #8]	; (8011118 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xc>)
 8011110:	6800      	ldr	r0, [r0, #0]
 8011112:	f000 bcc5 	b.w	8011aa0 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>
 8011116:	4770      	bx	lr
 8011118:	20001064 	andcs	r1, r0, r4, rrx

0801111c <DmxSend::Blackout(bool)>:
 801111c:	4b01      	ldr	r3, [pc, #4]	; (8011124 <DmxSend::Blackout(bool)+0x8>)
 801111e:	6818      	ldr	r0, [r3, #0]
 8011120:	f000 bce4 	b.w	8011aec <Dmx::Blackout()>
 8011124:	20001064 	andcs	r1, r0, r4, rrx

08011128 <DmxSend::FullOn()>:
 8011128:	4b01      	ldr	r3, [pc, #4]	; (8011130 <DmxSend::FullOn()+0x8>)
 801112a:	6818      	ldr	r0, [r3, #0]
 801112c:	f000 bd22 	b.w	8011b74 <Dmx::FullOn()>
 8011130:	20001064 	andcs	r1, r0, r4, rrx

08011134 <DmxSend::Print()>:
 8011134:	b510      	push	{r4, lr}
 8011136:	4c0e      	ldr	r4, [pc, #56]	; (8011170 <DmxSend::Print()+0x3c>)
 8011138:	480e      	ldr	r0, [pc, #56]	; (8011174 <DmxSend::Print()+0x40>)
 801113a:	f7f9 f9ad 	bl	800a498 <printf>
 801113e:	6823      	ldr	r3, [r4, #0]
 8011140:	480d      	ldr	r0, [pc, #52]	; (8011178 <DmxSend::Print()+0x44>)
 8011142:	6819      	ldr	r1, [r3, #0]
 8011144:	f7f9 f9a8 	bl	800a498 <printf>
 8011148:	6823      	ldr	r3, [r4, #0]
 801114a:	480c      	ldr	r0, [pc, #48]	; (801117c <DmxSend::Print()+0x48>)
 801114c:	6859      	ldr	r1, [r3, #4]
 801114e:	f7f9 f9a3 	bl	800a498 <printf>
 8011152:	6823      	ldr	r3, [r4, #0]
 8011154:	490a      	ldr	r1, [pc, #40]	; (8011180 <DmxSend::Print()+0x4c>)
 8011156:	689b      	ldr	r3, [r3, #8]
 8011158:	480a      	ldr	r0, [pc, #40]	; (8011184 <DmxSend::Print()+0x50>)
 801115a:	fbb1 f1f3 	udiv	r1, r1, r3
 801115e:	f7f9 f99b 	bl	800a498 <printf>
 8011162:	6823      	ldr	r3, [r4, #0]
 8011164:	4808      	ldr	r0, [pc, #32]	; (8011188 <DmxSend::Print()+0x54>)
 8011166:	8a19      	ldrh	r1, [r3, #16]
 8011168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801116c:	f7f9 b994 	b.w	800a498 <printf>
 8011170:	20001064 	andcs	r1, r0, r4, rrx
 8011174:	0801c8a5 	stmdaeq	r1, {r0, r2, r5, r7, fp, lr, pc}
 8011178:	0801c8af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, fp, lr, pc}
 801117c:	0801c8c3 	stmdaeq	r1, {r0, r1, r6, r7, fp, lr, pc}
 8011180:	000f4240 	andeq	r4, pc, r0, asr #4
 8011184:	0801c8d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, fp, lr, pc}
 8011188:	0801c8eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, fp, lr, pc}

0801118c <DmxSend::~DmxSend()>:
 801118c:	b510      	push	{r4, lr}
 801118e:	4604      	mov	r4, r0
 8011190:	f007 f852 	bl	8018238 <operator delete(void*)>
 8011194:	4620      	mov	r0, r4
 8011196:	bd10      	pop	{r4, pc}

08011198 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 8011198:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801119a:	88c6      	ldrh	r6, [r0, #6]
 801119c:	8885      	ldrh	r5, [r0, #4]
 801119e:	42ae      	cmp	r6, r5
 80111a0:	d216      	bcs.n	80111d0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 80111a2:	4604      	mov	r4, r0
 80111a4:	6800      	ldr	r0, [r0, #0]
 80111a6:	1bad      	subs	r5, r5, r6
 80111a8:	4430      	add	r0, r6
 80111aa:	7a26      	ldrb	r6, [r4, #8]
 80111ac:	b923      	cbnz	r3, 80111b8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 80111ae:	b926      	cbnz	r6, 80111ba <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 80111b0:	9200      	str	r2, [sp, #0]
 80111b2:	460b      	mov	r3, r1
 80111b4:	4a09      	ldr	r2, [pc, #36]	; (80111dc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 80111b6:	e003      	b.n	80111c0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 80111b8:	b166      	cbz	r6, 80111d4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 80111ba:	9200      	str	r2, [sp, #0]
 80111bc:	4a08      	ldr	r2, [pc, #32]	; (80111e0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 80111be:	460b      	mov	r3, r1
 80111c0:	4629      	mov	r1, r5
 80111c2:	f7f9 f991 	bl	800a4e8 <snprintf>
 80111c6:	4285      	cmp	r5, r0
 80111c8:	bfa2      	ittt	ge
 80111ca:	88e3      	ldrhge	r3, [r4, #6]
 80111cc:	181b      	addge	r3, r3, r0
 80111ce:	80e3      	strhge	r3, [r4, #6]
 80111d0:	b002      	add	sp, #8
 80111d2:	bd70      	pop	{r4, r5, r6, pc}
 80111d4:	9200      	str	r2, [sp, #0]
 80111d6:	460b      	mov	r3, r1
 80111d8:	4a02      	ldr	r2, [pc, #8]	; (80111e4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 80111da:	e7f1      	b.n	80111c0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 80111dc:	0801b161 	stmdaeq	r1, {r0, r5, r6, r8, ip, sp, pc}
 80111e0:	0801b158 	stmdaeq	r1, {r3, r4, r6, r8, ip, sp, pc}
 80111e4:	0801b162 	stmdaeq	r1, {r1, r5, r6, r8, ip, sp, pc}

080111e8 <DmxParams::DmxParams(DmxParamsStore*)>:
 80111e8:	4a04      	ldr	r2, [pc, #16]	; (80111fc <DmxParams::DmxParams(DmxParamsStore*)+0x14>)
 80111ea:	6001      	str	r1, [r0, #0]
 80111ec:	2100      	movs	r1, #0
 80111ee:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80111f2:	f64f 7228 	movw	r2, #65320	; 0xff28
 80111f6:	8182      	strh	r2, [r0, #12]
 80111f8:	4770      	bx	lr
 80111fa:	bf00      	nop
 80111fc:	000c00b0 	strheq	r0, [ip], -r0	; <UNPREDICTABLE>

08011200 <DmxParams::Load()>:
 8011200:	b508      	push	{r3, lr}
 8011202:	2300      	movs	r3, #0
 8011204:	4601      	mov	r1, r0
 8011206:	6043      	str	r3, [r0, #4]
 8011208:	6800      	ldr	r0, [r0, #0]
 801120a:	b120      	cbz	r0, 8011216 <DmxParams::Load()+0x16>
 801120c:	6803      	ldr	r3, [r0, #0]
 801120e:	3104      	adds	r1, #4
 8011210:	68db      	ldr	r3, [r3, #12]
 8011212:	4798      	blx	r3
 8011214:	2001      	movs	r0, #1
 8011216:	bd08      	pop	{r3, pc}

08011218 <DmxParams::Load(char const*, unsigned int)>:
 8011218:	6803      	ldr	r3, [r0, #0]
 801121a:	b1d3      	cbz	r3, 8011252 <DmxParams::Load(char const*, unsigned int)+0x3a>
 801121c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801121e:	2300      	movs	r3, #0
 8011220:	6043      	str	r3, [r0, #4]
 8011222:	4604      	mov	r4, r0
 8011224:	460d      	mov	r5, r1
 8011226:	4616      	mov	r6, r2
 8011228:	490a      	ldr	r1, [pc, #40]	; (8011254 <DmxParams::Load(char const*, unsigned int)+0x3c>)
 801122a:	4602      	mov	r2, r0
 801122c:	4668      	mov	r0, sp
 801122e:	f006 f9e3 	bl	80175f8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8011232:	4632      	mov	r2, r6
 8011234:	4629      	mov	r1, r5
 8011236:	4668      	mov	r0, sp
 8011238:	f006 f9e2 	bl	8017600 <ReadConfigFile::Read(char const*, unsigned int)>
 801123c:	4621      	mov	r1, r4
 801123e:	f851 0b04 	ldr.w	r0, [r1], #4
 8011242:	6803      	ldr	r3, [r0, #0]
 8011244:	689b      	ldr	r3, [r3, #8]
 8011246:	4798      	blx	r3
 8011248:	4668      	mov	r0, sp
 801124a:	f006 f9d8 	bl	80175fe <ReadConfigFile::~ReadConfigFile()>
 801124e:	b002      	add	sp, #8
 8011250:	bd70      	pop	{r4, r5, r6, pc}
 8011252:	4770      	bx	lr
 8011254:	08011325 	stmdaeq	r1, {r0, r2, r5, r8, r9, ip}

08011258 <DmxParams::callbackFunction(char const*)>:
 8011258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801125a:	460d      	mov	r5, r1
 801125c:	4604      	mov	r4, r0
 801125e:	492d      	ldr	r1, [pc, #180]	; (8011314 <DmxParams::callbackFunction(char const*)+0xbc>)
 8011260:	f10d 0206 	add.w	r2, sp, #6
 8011264:	4628      	mov	r0, r5
 8011266:	f006 fab4 	bl	80177d2 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 801126a:	b988      	cbnz	r0, 8011290 <DmxParams::callbackFunction(char const*)+0x38>
 801126c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011270:	6863      	ldr	r3, [r4, #4]
 8011272:	2a5b      	cmp	r2, #91	; 0x5b
 8011274:	d907      	bls.n	8011286 <DmxParams::callbackFunction(char const*)+0x2e>
 8011276:	2ab0      	cmp	r2, #176	; 0xb0
 8011278:	d005      	beq.n	8011286 <DmxParams::callbackFunction(char const*)+0x2e>
 801127a:	8122      	strh	r2, [r4, #8]
 801127c:	f043 0301 	orr.w	r3, r3, #1
 8011280:	6063      	str	r3, [r4, #4]
 8011282:	b003      	add	sp, #12
 8011284:	bd30      	pop	{r4, r5, pc}
 8011286:	22b0      	movs	r2, #176	; 0xb0
 8011288:	8122      	strh	r2, [r4, #8]
 801128a:	f023 0301 	bic.w	r3, r3, #1
 801128e:	e7f7      	b.n	8011280 <DmxParams::callbackFunction(char const*)+0x28>
 8011290:	4921      	ldr	r1, [pc, #132]	; (8011318 <DmxParams::callbackFunction(char const*)+0xc0>)
 8011292:	f10d 0206 	add.w	r2, sp, #6
 8011296:	4628      	mov	r0, r5
 8011298:	f006 fa9b 	bl	80177d2 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 801129c:	b968      	cbnz	r0, 80112ba <DmxParams::callbackFunction(char const*)+0x62>
 801129e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80112a2:	6863      	ldr	r3, [r4, #4]
 80112a4:	2a0c      	cmp	r2, #12
 80112a6:	bf93      	iteet	ls
 80112a8:	220c      	movls	r2, #12
 80112aa:	8162      	strhhi	r2, [r4, #10]
 80112ac:	f043 0302 	orrhi.w	r3, r3, #2
 80112b0:	8162      	strhls	r2, [r4, #10]
 80112b2:	bf98      	it	ls
 80112b4:	f023 0302 	bicls.w	r3, r3, #2
 80112b8:	e7e2      	b.n	8011280 <DmxParams::callbackFunction(char const*)+0x28>
 80112ba:	4918      	ldr	r1, [pc, #96]	; (801131c <DmxParams::callbackFunction(char const*)+0xc4>)
 80112bc:	f10d 0205 	add.w	r2, sp, #5
 80112c0:	4628      	mov	r0, r5
 80112c2:	f006 face 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80112c6:	b950      	cbnz	r0, 80112de <DmxParams::callbackFunction(char const*)+0x86>
 80112c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80112cc:	6863      	ldr	r3, [r4, #4]
 80112ce:	7322      	strb	r2, [r4, #12]
 80112d0:	2a28      	cmp	r2, #40	; 0x28
 80112d2:	bf14      	ite	ne
 80112d4:	f043 0304 	orrne.w	r3, r3, #4
 80112d8:	f023 0304 	biceq.w	r3, r3, #4
 80112dc:	e7d0      	b.n	8011280 <DmxParams::callbackFunction(char const*)+0x28>
 80112de:	4910      	ldr	r1, [pc, #64]	; (8011320 <DmxParams::callbackFunction(char const*)+0xc8>)
 80112e0:	f10d 0206 	add.w	r2, sp, #6
 80112e4:	4628      	mov	r0, r5
 80112e6:	f006 fa74 	bl	80177d2 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 80112ea:	2800      	cmp	r0, #0
 80112ec:	d1c9      	bne.n	8011282 <DmxParams::callbackFunction(char const*)+0x2a>
 80112ee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80112f2:	6863      	ldr	r3, [r4, #4]
 80112f4:	1e91      	subs	r1, r2, #2
 80112f6:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 80112fa:	bf3b      	ittet	cc
 80112fc:	0852      	lsrcc	r2, r2, #1
 80112fe:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8011302:	22ff      	movcs	r2, #255	; 0xff
 8011304:	7362      	strbcc	r2, [r4, #13]
 8011306:	bf32      	itee	cc
 8011308:	f043 0308 	orrcc.w	r3, r3, #8
 801130c:	7362      	strbcs	r2, [r4, #13]
 801130e:	f023 0308 	biccs.w	r3, r3, #8
 8011312:	e7b5      	b.n	8011280 <DmxParams::callbackFunction(char const*)+0x28>
 8011314:	0801c938 	stmdaeq	r1, {r3, r4, r5, r8, fp, lr, pc}
 8011318:	0801c95c 	stmdaeq	r1, {r2, r3, r4, r6, r8, fp, lr, pc}
 801131c:	0801c94f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, fp, lr, pc}
 8011320:	0801c943 	stmdaeq	r1, {r0, r1, r6, r8, fp, lr, pc}

08011324 <DmxParams::staticCallbackFunction(void*, char const*)>:
 8011324:	f7ff bf98 	b.w	8011258 <DmxParams::callbackFunction(char const*)>

08011328 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>:
 8011328:	b570      	push	{r4, r5, r6, lr}
 801132a:	4604      	mov	r4, r0
 801132c:	b086      	sub	sp, #24
 801132e:	4615      	mov	r5, r2
 8011330:	461e      	mov	r6, r3
 8011332:	3004      	adds	r0, #4
 8011334:	b369      	cbz	r1, 8011392 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x6a>
 8011336:	220a      	movs	r2, #10
 8011338:	f007 f841 	bl	80183be <memmove>
 801133c:	462a      	mov	r2, r5
 801133e:	4933      	ldr	r1, [pc, #204]	; (801140c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe4>)
 8011340:	4633      	mov	r3, r6
 8011342:	a803      	add	r0, sp, #12
 8011344:	f006 f8b8 	bl	80174b8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8011348:	6863      	ldr	r3, [r4, #4]
 801134a:	8922      	ldrh	r2, [r4, #8]
 801134c:	4930      	ldr	r1, [pc, #192]	; (8011410 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe8>)
 801134e:	f003 0301 	and.w	r3, r3, #1
 8011352:	a803      	add	r0, sp, #12
 8011354:	f7ff ff20 	bl	8011198 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 8011358:	6863      	ldr	r3, [r4, #4]
 801135a:	8962      	ldrh	r2, [r4, #10]
 801135c:	492d      	ldr	r1, [pc, #180]	; (8011414 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xec>)
 801135e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011362:	a803      	add	r0, sp, #12
 8011364:	f7ff ff18 	bl	8011198 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 8011368:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801136c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8011370:	7b23      	ldrb	r3, [r4, #12]
 8011372:	6861      	ldr	r1, [r4, #4]
 8011374:	42aa      	cmp	r2, r5
 8011376:	d221      	bcs.n	80113bc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x94>
 8011378:	9803      	ldr	r0, [sp, #12]
 801137a:	0749      	lsls	r1, r1, #29
 801137c:	4410      	add	r0, r2
 801137e:	eba5 0502 	sub.w	r5, r5, r2
 8011382:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8011386:	d40b      	bmi.n	80113a0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x78>
 8011388:	b95a      	cbnz	r2, 80113a2 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x7a>
 801138a:	9300      	str	r3, [sp, #0]
 801138c:	4a22      	ldr	r2, [pc, #136]	; (8011418 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 801138e:	4b23      	ldr	r3, [pc, #140]	; (801141c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 8011390:	e00a      	b.n	80113a8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 8011392:	6823      	ldr	r3, [r4, #0]
 8011394:	681a      	ldr	r2, [r3, #0]
 8011396:	4601      	mov	r1, r0
 8011398:	68d2      	ldr	r2, [r2, #12]
 801139a:	4618      	mov	r0, r3
 801139c:	4790      	blx	r2
 801139e:	e7cd      	b.n	801133c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x14>
 80113a0:	b37a      	cbz	r2, 8011402 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xda>
 80113a2:	9300      	str	r3, [sp, #0]
 80113a4:	4a1e      	ldr	r2, [pc, #120]	; (8011420 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 80113a6:	4b1d      	ldr	r3, [pc, #116]	; (801141c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 80113a8:	4629      	mov	r1, r5
 80113aa:	f7f9 f89d 	bl	800a4e8 <snprintf>
 80113ae:	4285      	cmp	r5, r0
 80113b0:	bfa2      	ittt	ge
 80113b2:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80113b6:	18c0      	addge	r0, r0, r3
 80113b8:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80113bc:	7b62      	ldrb	r2, [r4, #13]
 80113be:	6863      	ldr	r3, [r4, #4]
 80113c0:	4918      	ldr	r1, [pc, #96]	; (8011424 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 80113c2:	3201      	adds	r2, #1
 80113c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80113c8:	0052      	lsls	r2, r2, #1
 80113ca:	a803      	add	r0, sp, #12
 80113cc:	f7ff fee4 	bl	8011198 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 80113d0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80113d4:	b17b      	cbz	r3, 80113f6 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xce>
 80113d6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80113da:	9b03      	ldr	r3, [sp, #12]
 80113dc:	4413      	add	r3, r2
 80113de:	227d      	movs	r2, #125	; 0x7d
 80113e0:	f803 2c01 	strb.w	r2, [r3, #-1]
 80113e4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80113e8:	9903      	ldr	r1, [sp, #12]
 80113ea:	54ca      	strb	r2, [r1, r3]
 80113ec:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80113f0:	3301      	adds	r3, #1
 80113f2:	f8ad 3012 	strh.w	r3, [sp, #18]
 80113f6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80113fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113fc:	601a      	str	r2, [r3, #0]
 80113fe:	b006      	add	sp, #24
 8011400:	bd70      	pop	{r4, r5, r6, pc}
 8011402:	9300      	str	r3, [sp, #0]
 8011404:	4a08      	ldr	r2, [pc, #32]	; (8011428 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x100>)
 8011406:	4b05      	ldr	r3, [pc, #20]	; (801141c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 8011408:	e7ce      	b.n	80113a8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 801140a:	bf00      	nop
 801140c:	0801c965 	stmdaeq	r1, {r0, r2, r5, r6, r8, fp, lr, pc}
 8011410:	0801c938 	stmdaeq	r1, {r3, r4, r5, r8, fp, lr, pc}
 8011414:	0801c95c 	stmdaeq	r1, {r2, r3, r4, r6, r8, fp, lr, pc}
 8011418:	0801b161 	stmdaeq	r1, {r0, r5, r6, r8, ip, sp, pc}
 801141c:	0801c94f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, fp, lr, pc}
 8011420:	0801b158 	stmdaeq	r1, {r3, r4, r6, r8, ip, sp, pc}
 8011424:	0801c943 	stmdaeq	r1, {r0, r1, r6, r8, fp, lr, pc}
 8011428:	0801b162 	stmdaeq	r1, {r1, r5, r6, r8, ip, sp, pc}

0801142c <DmxParams::Save(char*, unsigned int, unsigned int&)>:
 801142c:	b513      	push	{r0, r1, r4, lr}
 801142e:	6804      	ldr	r4, [r0, #0]
 8011430:	b914      	cbnz	r4, 8011438 <DmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8011432:	601c      	str	r4, [r3, #0]
 8011434:	b002      	add	sp, #8
 8011436:	bd10      	pop	{r4, pc}
 8011438:	9300      	str	r3, [sp, #0]
 801143a:	4613      	mov	r3, r2
 801143c:	460a      	mov	r2, r1
 801143e:	2100      	movs	r1, #0
 8011440:	f7ff ff72 	bl	8011328 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>
 8011444:	e7f6      	b.n	8011434 <DmxParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

08011448 <DmxParams::Set(Dmx*)>:
 8011448:	b513      	push	{r0, r1, r4, lr}
 801144a:	4604      	mov	r4, r0
 801144c:	4608      	mov	r0, r1
 801144e:	6863      	ldr	r3, [r4, #4]
 8011450:	07db      	lsls	r3, r3, #31
 8011452:	d504      	bpl.n	801145e <DmxParams::Set(Dmx*)+0x16>
 8011454:	8921      	ldrh	r1, [r4, #8]
 8011456:	9001      	str	r0, [sp, #4]
 8011458:	f000 faf8 	bl	8011a4c <Dmx::SetDmxBreakTime(unsigned int)>
 801145c:	9801      	ldr	r0, [sp, #4]
 801145e:	6863      	ldr	r3, [r4, #4]
 8011460:	0799      	lsls	r1, r3, #30
 8011462:	d504      	bpl.n	801146e <DmxParams::Set(Dmx*)+0x26>
 8011464:	8961      	ldrh	r1, [r4, #10]
 8011466:	9001      	str	r0, [sp, #4]
 8011468:	f000 fafa 	bl	8011a60 <Dmx::SetDmxMabTime(unsigned int)>
 801146c:	9801      	ldr	r0, [sp, #4]
 801146e:	6863      	ldr	r3, [r4, #4]
 8011470:	075a      	lsls	r2, r3, #29
 8011472:	d508      	bpl.n	8011486 <DmxParams::Set(Dmx*)+0x3e>
 8011474:	7b21      	ldrb	r1, [r4, #12]
 8011476:	b111      	cbz	r1, 801147e <DmxParams::Set(Dmx*)+0x36>
 8011478:	4b09      	ldr	r3, [pc, #36]	; (80114a0 <DmxParams::Set(Dmx*)+0x58>)
 801147a:	fbb3 f1f1 	udiv	r1, r3, r1
 801147e:	9001      	str	r0, [sp, #4]
 8011480:	f000 fabc 	bl	80119fc <Dmx::SetDmxPeriodTime(unsigned int)>
 8011484:	9801      	ldr	r0, [sp, #4]
 8011486:	6863      	ldr	r3, [r4, #4]
 8011488:	071b      	lsls	r3, r3, #28
 801148a:	d507      	bpl.n	801149c <DmxParams::Set(Dmx*)+0x54>
 801148c:	7b61      	ldrb	r1, [r4, #13]
 801148e:	3101      	adds	r1, #1
 8011490:	0049      	lsls	r1, r1, #1
 8011492:	b002      	add	sp, #8
 8011494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011498:	f000 baec 	b.w	8011a74 <Dmx::SetDmxSlots(unsigned short)>
 801149c:	b002      	add	sp, #8
 801149e:	bd10      	pop	{r4, pc}
 80114a0:	000f4240 	andeq	r4, pc, r0, asr #4

080114a4 <DmxParams::Dump()>:
 80114a4:	4770      	bx	lr

080114a6 <_gpio_mode_output(unsigned int, unsigned int)>:
 80114a6:	b513      	push	{r0, r1, r4, lr}
 80114a8:	460a      	mov	r2, r1
 80114aa:	9101      	str	r1, [sp, #4]
 80114ac:	2100      	movs	r1, #0
 80114ae:	4604      	mov	r4, r0
 80114b0:	f007 fed1 	bl	8019256 <gpio_af_set>
 80114b4:	9b01      	ldr	r3, [sp, #4]
 80114b6:	2200      	movs	r2, #0
 80114b8:	2101      	movs	r1, #1
 80114ba:	4620      	mov	r0, r4
 80114bc:	b002      	add	sp, #8
 80114be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114c2:	f007 be8d 	b.w	80191e0 <gpio_mode_set>
	...

080114c8 <_port_to_uart(unsigned int)>:
 80114c8:	4a03      	ldr	r2, [pc, #12]	; (80114d8 <_port_to_uart(unsigned int)+0x10>)
 80114ca:	4b04      	ldr	r3, [pc, #16]	; (80114dc <_port_to_uart(unsigned int)+0x14>)
 80114cc:	2800      	cmp	r0, #0
 80114ce:	bf14      	ite	ne
 80114d0:	4610      	movne	r0, r2
 80114d2:	4618      	moveq	r0, r3
 80114d4:	4770      	bx	lr
 80114d6:	bf00      	nop
 80114d8:	40011400 	andmi	r1, r1, r0, lsl #8
 80114dc:	40004800 	andmi	r4, r0, r0, lsl #16

080114e0 <TIMER1_IRQHandler>:
 80114e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80114e6:	4d47      	ldr	r5, [pc, #284]	; (8011604 <TIMER1_IRQHandler+0x124>)
 80114e8:	691e      	ldr	r6, [r3, #16]
 80114ea:	4f47      	ldr	r7, [pc, #284]	; (8011608 <TIMER1_IRQHandler+0x128>)
 80114ec:	882c      	ldrh	r4, [r5, #0]
 80114ee:	2308      	movs	r3, #8
 80114f0:	07b1      	lsls	r1, r6, #30
 80114f2:	b2a4      	uxth	r4, r4
 80114f4:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 80114f8:	d528      	bpl.n	801154c <TIMER1_IRQHandler+0x6c>
 80114fa:	07e2      	lsls	r2, r4, #31
 80114fc:	d50d      	bpl.n	801151a <TIMER1_IRQHandler+0x3a>
 80114fe:	882b      	ldrh	r3, [r5, #0]
 8011500:	4842      	ldr	r0, [pc, #264]	; (801160c <TIMER1_IRQHandler+0x12c>)
 8011502:	b29b      	uxth	r3, r3
 8011504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011508:	f44f 7180 	mov.w	r1, #256	; 0x100
 801150c:	802b      	strh	r3, [r5, #0]
 801150e:	f7ff ffca 	bl	80114a6 <_gpio_mode_output(unsigned int, unsigned int)>
 8011512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011516:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 801151a:	07a3      	lsls	r3, r4, #30
 801151c:	d50c      	bpl.n	8011538 <TIMER1_IRQHandler+0x58>
 801151e:	882b      	ldrh	r3, [r5, #0]
 8011520:	483b      	ldr	r0, [pc, #236]	; (8011610 <TIMER1_IRQHandler+0x130>)
 8011522:	b29b      	uxth	r3, r3
 8011524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011528:	2140      	movs	r1, #64	; 0x40
 801152a:	802b      	strh	r3, [r5, #0]
 801152c:	f7ff ffbb 	bl	80114a6 <_gpio_mode_output(unsigned int, unsigned int)>
 8011530:	4b35      	ldr	r3, [pc, #212]	; (8011608 <TIMER1_IRQHandler+0x128>)
 8011532:	2240      	movs	r2, #64	; 0x40
 8011534:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 8011538:	4631      	mov	r1, r6
 801153a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801153e:	f008 f874 	bl	801962a <timer_interrupt_flag_clear>
 8011542:	4b31      	ldr	r3, [pc, #196]	; (8011608 <TIMER1_IRQHandler+0x128>)
 8011544:	2208      	movs	r2, #8
 8011546:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 801154a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801154c:	0777      	lsls	r7, r6, #29
 801154e:	d51c      	bpl.n	801158a <TIMER1_IRQHandler+0xaa>
 8011550:	05e5      	lsls	r5, r4, #23
 8011552:	d50c      	bpl.n	801156e <TIMER1_IRQHandler+0x8e>
 8011554:	482d      	ldr	r0, [pc, #180]	; (801160c <TIMER1_IRQHandler+0x12c>)
 8011556:	2201      	movs	r2, #1
 8011558:	2102      	movs	r1, #2
 801155a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801155e:	f007 fe3f 	bl	80191e0 <gpio_mode_set>
 8011562:	482a      	ldr	r0, [pc, #168]	; (801160c <TIMER1_IRQHandler+0x12c>)
 8011564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011568:	2107      	movs	r1, #7
 801156a:	f007 fe74 	bl	8019256 <gpio_af_set>
 801156e:	05a0      	lsls	r0, r4, #22
 8011570:	d5e2      	bpl.n	8011538 <TIMER1_IRQHandler+0x58>
 8011572:	4827      	ldr	r0, [pc, #156]	; (8011610 <TIMER1_IRQHandler+0x130>)
 8011574:	2340      	movs	r3, #64	; 0x40
 8011576:	2201      	movs	r2, #1
 8011578:	2102      	movs	r1, #2
 801157a:	f007 fe31 	bl	80191e0 <gpio_mode_set>
 801157e:	4824      	ldr	r0, [pc, #144]	; (8011610 <TIMER1_IRQHandler+0x130>)
 8011580:	2240      	movs	r2, #64	; 0x40
 8011582:	2108      	movs	r1, #8
 8011584:	f007 fe67 	bl	8019256 <gpio_af_set>
 8011588:	e7d6      	b.n	8011538 <TIMER1_IRQHandler+0x58>
 801158a:	0731      	lsls	r1, r6, #28
 801158c:	d5d4      	bpl.n	8011538 <TIMER1_IRQHandler+0x58>
 801158e:	05e2      	lsls	r2, r4, #23
 8011590:	d516      	bpl.n	80115c0 <TIMER1_IRQHandler+0xe0>
 8011592:	4d20      	ldr	r5, [pc, #128]	; (8011614 <TIMER1_IRQHandler+0x134>)
 8011594:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011596:	f023 0301 	bic.w	r3, r3, #1
 801159a:	65ab      	str	r3, [r5, #88]	; 0x58
 801159c:	2103      	movs	r1, #3
 801159e:	4628      	mov	r0, r5
 80115a0:	2220      	movs	r2, #32
 80115a2:	f007 f9f1 	bl	8018988 <dma_interrupt_flag_clear>
 80115a6:	4b1c      	ldr	r3, [pc, #112]	; (8011618 <TIMER1_IRQHandler+0x138>)
 80115a8:	666b      	str	r3, [r5, #100]	; 0x64
 80115aa:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 80115ae:	65eb      	str	r3, [r5, #92]	; 0x5c
 80115b0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80115b2:	481a      	ldr	r0, [pc, #104]	; (801161c <TIMER1_IRQHandler+0x13c>)
 80115b4:	f043 0301 	orr.w	r3, r3, #1
 80115b8:	65ab      	str	r3, [r5, #88]	; 0x58
 80115ba:	2180      	movs	r1, #128	; 0x80
 80115bc:	f008 fa7c 	bl	8019ab8 <usart_dma_transmit_config>
 80115c0:	05a3      	lsls	r3, r4, #22
 80115c2:	d5b9      	bpl.n	8011538 <TIMER1_IRQHandler+0x58>
 80115c4:	4c13      	ldr	r4, [pc, #76]	; (8011614 <TIMER1_IRQHandler+0x134>)
 80115c6:	4816      	ldr	r0, [pc, #88]	; (8011620 <TIMER1_IRQHandler+0x140>)
 80115c8:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 80115cc:	f023 0301 	bic.w	r3, r3, #1
 80115d0:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
 80115d4:	2220      	movs	r2, #32
 80115d6:	2106      	movs	r1, #6
 80115d8:	f007 f9d6 	bl	8018988 <dma_interrupt_flag_clear>
 80115dc:	4b0e      	ldr	r3, [pc, #56]	; (8011618 <TIMER1_IRQHandler+0x138>)
 80115de:	4811      	ldr	r0, [pc, #68]	; (8011624 <TIMER1_IRQHandler+0x144>)
 80115e0:	f503 7201 	add.w	r2, r3, #516	; 0x204
 80115e4:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80115e8:	f8c4 24ac 	str.w	r2, [r4, #1196]	; 0x4ac
 80115ec:	f8c4 34a4 	str.w	r3, [r4, #1188]	; 0x4a4
 80115f0:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 80115f4:	f043 0301 	orr.w	r3, r3, #1
 80115f8:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
 80115fc:	2180      	movs	r1, #128	; 0x80
 80115fe:	f008 fa5b 	bl	8019ab8 <usart_dma_transmit_config>
 8011602:	e799      	b.n	8011538 <TIMER1_IRQHandler+0x58>
 8011604:	20001060 	andcs	r1, r0, r0, rrx
 8011608:	40020000 	andmi	r0, r2, r0
 801160c:	40020c00 	andmi	r0, r2, r0, lsl #24
 8011610:	40020800 	andmi	r0, r2, r0, lsl #16
 8011614:	40026000 	andmi	r6, r2, r0
 8011618:	20000c50 	andcs	r0, r0, r0, asr ip
 801161c:	40004800 	andmi	r4, r0, r0, lsl #16
 8011620:	40026400 	andmi	r6, r2, r0, lsl #8
 8011624:	40011400 	andmi	r1, r1, r0, lsl #8

08011628 <Dmx::ClearData(unsigned int)>:
 8011628:	4a0a      	ldr	r2, [pc, #40]	; (8011654 <Dmx::ClearData(unsigned int)+0x2c>)
 801162a:	f44f 7301 	mov.w	r3, #516	; 0x204
 801162e:	fb03 2301 	mla	r3, r3, r1, r2
 8011632:	b510      	push	{r4, lr}
 8011634:	f203 2002 	addw	r0, r3, #514	; 0x202
 8011638:	2400      	movs	r4, #0
 801163a:	f823 4b02 	strh.w	r4, [r3], #2
 801163e:	4283      	cmp	r3, r0
 8011640:	d1fb      	bne.n	801163a <Dmx::ClearData(unsigned int)+0x12>
 8011642:	f44f 7301 	mov.w	r3, #516	; 0x204
 8011646:	fb03 2101 	mla	r1, r3, r1, r2
 801164a:	f240 2301 	movw	r3, #513	; 0x201
 801164e:	f8a1 3202 	strh.w	r3, [r1, #514]	; 0x202
 8011652:	bd10      	pop	{r4, pc}
 8011654:	20000c50 	andcs	r0, r0, r0, asr ip

08011658 <Dmx::StartData(unsigned int, unsigned int)>:
 8011658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801165a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801165e:	b085      	sub	sp, #20
 8011660:	6943      	ldr	r3, [r0, #20]
 8011662:	460c      	mov	r4, r1
 8011664:	4615      	mov	r5, r2
 8011666:	2b00      	cmp	r3, #0
 8011668:	d168      	bne.n	801173c <Dmx::StartData(unsigned int, unsigned int)+0xe4>
 801166a:	4e41      	ldr	r6, [pc, #260]	; (8011770 <Dmx::StartData(unsigned int, unsigned int)+0x118>)
 801166c:	8834      	ldrh	r4, [r6, #0]
 801166e:	b2a4      	uxth	r4, r4
 8011670:	2c00      	cmp	r4, #0
 8011672:	d157      	bne.n	8011724 <Dmx::StartData(unsigned int, unsigned int)+0xcc>
 8011674:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011678:	f007 fe2e 	bl	80192d8 <rcu_periph_clock_enable>
 801167c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011680:	f007 fee6 	bl	8019450 <timer_deinit>
 8011684:	4b3b      	ldr	r3, [pc, #236]	; (8011774 <Dmx::StartData(unsigned int, unsigned int)+0x11c>)
 8011686:	f88d 400c 	strb.w	r4, [sp, #12]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	9302      	str	r3, [sp, #8]
 801168e:	4669      	mov	r1, sp
 8011690:	23c7      	movs	r3, #199	; 0xc7
 8011692:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011696:	e9cd 3400 	strd	r3, r4, [sp]
 801169a:	f007 ff7f 	bl	801959c <timer_init>
 801169e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80116a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80116a6:	f007 ffc3 	bl	8019630 <timer_flag_clear>
 80116aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80116ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80116b2:	f007 ffba 	bl	801962a <timer_interrupt_flag_clear>
 80116b6:	2210      	movs	r2, #16
 80116b8:	4621      	mov	r1, r4
 80116ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80116be:	f008 f8a7 	bl	8019810 <timer_channel_output_mode_config>
 80116c2:	2210      	movs	r2, #16
 80116c4:	2101      	movs	r1, #1
 80116c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80116ca:	f008 f8a1 	bl	8019810 <timer_channel_output_mode_config>
 80116ce:	4f2a      	ldr	r7, [pc, #168]	; (8011778 <Dmx::StartData(unsigned int, unsigned int)+0x120>)
 80116d0:	2210      	movs	r2, #16
 80116d2:	2102      	movs	r1, #2
 80116d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80116d8:	f008 f89a 	bl	8019810 <timer_channel_output_mode_config>
 80116dc:	4622      	mov	r2, r4
 80116de:	4621      	mov	r1, r4
 80116e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80116e4:	f008 f8ba 	bl	801985c <timer_channel_output_pulse_value_config>
 80116e8:	683a      	ldr	r2, [r7, #0]
 80116ea:	2101      	movs	r1, #1
 80116ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80116f0:	f008 f8b4 	bl	801985c <timer_channel_output_pulse_value_config>
 80116f4:	4b21      	ldr	r3, [pc, #132]	; (801177c <Dmx::StartData(unsigned int, unsigned int)+0x124>)
 80116f6:	683a      	ldr	r2, [r7, #0]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2102      	movs	r1, #2
 80116fc:	441a      	add	r2, r3
 80116fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8011702:	f008 f8ab 	bl	801985c <timer_channel_output_pulse_value_config>
 8011706:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801170a:	210e      	movs	r1, #14
 801170c:	f007 ff89 	bl	8019622 <timer_interrupt_enable>
 8011710:	4b1b      	ldr	r3, [pc, #108]	; (8011780 <Dmx::StartData(unsigned int, unsigned int)+0x128>)
 8011712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011716:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 801171a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801171e:	601a      	str	r2, [r3, #0]
 8011720:	f007 ff7a 	bl	8019618 <timer_enable>
 8011724:	8831      	ldrh	r1, [r6, #0]
 8011726:	2201      	movs	r2, #1
 8011728:	fa02 f305 	lsl.w	r3, r2, r5
 801172c:	430b      	orrs	r3, r1
 801172e:	b29b      	uxth	r3, r3
 8011730:	8033      	strh	r3, [r6, #0]
 8011732:	4b14      	ldr	r3, [pc, #80]	; (8011784 <Dmx::StartData(unsigned int, unsigned int)+0x12c>)
 8011734:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011738:	b005      	add	sp, #20
 801173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801173c:	4b12      	ldr	r3, [pc, #72]	; (8011788 <Dmx::StartData(unsigned int, unsigned int)+0x130>)
 801173e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8011742:	fb02 3305 	mla	r3, r2, r5, r3
 8011746:	2200      	movs	r2, #0
 8011748:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 801174c:	2107      	movs	r1, #7
 801174e:	4620      	mov	r0, r4
 8011750:	f008 f9b8 	bl	8019ac4 <usart_flag_get>
 8011754:	2800      	cmp	r0, #0
 8011756:	d0f9      	beq.n	801174c <Dmx::StartData(unsigned int, unsigned int)+0xf4>
 8011758:	490c      	ldr	r1, [pc, #48]	; (801178c <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 801175a:	4620      	mov	r0, r4
 801175c:	f008 f9d4 	bl	8019b08 <usart_interrupt_flag_clear>
 8011760:	f240 3105 	movw	r1, #773	; 0x305
 8011764:	4620      	mov	r0, r4
 8011766:	f008 f9c3 	bl	8019af0 <usart_interrupt_enable>
 801176a:	4b06      	ldr	r3, [pc, #24]	; (8011784 <Dmx::StartData(unsigned int, unsigned int)+0x12c>)
 801176c:	2202      	movs	r2, #2
 801176e:	e7e1      	b.n	8011734 <Dmx::StartData(unsigned int, unsigned int)+0xdc>
 8011770:	20001060 	andcs	r1, r0, r0, rrx
 8011774:	20000004 	andcs	r0, r0, r4
 8011778:	2000000c 	andcs	r0, r0, ip
 801177c:	20000008 	andcs	r0, r0, r8
 8011780:	e000e100 	and	lr, r0, r0, lsl #2
 8011784:	20001058 	andcs	r1, r0, r8, asr r0
 8011788:	20000830 	andcs	r0, r0, r0, lsr r8
 801178c:	00050305 	andeq	r0, r5, r5, lsl #6

08011790 <Dmx::StopData(unsigned int, unsigned int)>:
 8011790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011794:	4f1e      	ldr	r7, [pc, #120]	; (8011810 <Dmx::StopData(unsigned int, unsigned int)+0x80>)
 8011796:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 801179a:	4688      	mov	r8, r1
 801179c:	4614      	mov	r4, r2
 801179e:	b333      	cbz	r3, 80117ee <Dmx::StopData(unsigned int, unsigned int)+0x5e>
 80117a0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80117a4:	6943      	ldr	r3, [r0, #20]
 80117a6:	bb23      	cbnz	r3, 80117f2 <Dmx::StopData(unsigned int, unsigned int)+0x62>
 80117a8:	4d1a      	ldr	r5, [pc, #104]	; (8011814 <Dmx::StopData(unsigned int, unsigned int)+0x84>)
 80117aa:	882b      	ldrh	r3, [r5, #0]
 80117ac:	2601      	movs	r6, #1
 80117ae:	fa06 f202 	lsl.w	r2, r6, r2
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	ea23 0302 	bic.w	r3, r3, r2
 80117b8:	802b      	strh	r3, [r5, #0]
 80117ba:	f3bf 8f5f 	dmb	sy
 80117be:	882b      	ldrh	r3, [r5, #0]
 80117c0:	f104 0208 	add.w	r2, r4, #8
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	4096      	lsls	r6, r2
 80117c8:	ea36 0303 	bics.w	r3, r6, r3
 80117cc:	d105      	bne.n	80117da <Dmx::StopData(unsigned int, unsigned int)+0x4a>
 80117ce:	2107      	movs	r1, #7
 80117d0:	4640      	mov	r0, r8
 80117d2:	f008 f977 	bl	8019ac4 <usart_flag_get>
 80117d6:	2801      	cmp	r0, #1
 80117d8:	d1f9      	bne.n	80117ce <Dmx::StopData(unsigned int, unsigned int)+0x3e>
 80117da:	882b      	ldrh	r3, [r5, #0]
 80117dc:	b29b      	uxth	r3, r3
 80117de:	ea23 0306 	bic.w	r3, r3, r6
 80117e2:	802b      	strh	r3, [r5, #0]
 80117e4:	f3bf 8f4f 	dsb	sy
 80117e8:	2300      	movs	r3, #0
 80117ea:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
 80117ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117f2:	f240 3105 	movw	r1, #773	; 0x305
 80117f6:	4640      	mov	r0, r8
 80117f8:	f008 f984 	bl	8019b04 <usart_interrupt_disable>
 80117fc:	4b06      	ldr	r3, [pc, #24]	; (8011818 <Dmx::StopData(unsigned int, unsigned int)+0x88>)
 80117fe:	f44f 7204 	mov.w	r2, #528	; 0x210
 8011802:	fb02 3304 	mla	r3, r2, r4, r3
 8011806:	2200      	movs	r2, #0
 8011808:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 801180c:	e7ec      	b.n	80117e8 <Dmx::StopData(unsigned int, unsigned int)+0x58>
 801180e:	bf00      	nop
 8011810:	20001058 	andcs	r1, r0, r8, asr r0
 8011814:	20001060 	andcs	r1, r0, r0, rrx
 8011818:	20000830 	andcs	r0, r0, r0, lsr r8

0801181c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 801181c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801181e:	4605      	mov	r5, r0
 8011820:	460c      	mov	r4, r1
 8011822:	4608      	mov	r0, r1
 8011824:	4616      	mov	r6, r2
 8011826:	461f      	mov	r7, r3
 8011828:	f7ff fe4e 	bl	80114c8 <_port_to_uart(unsigned int)>
 801182c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011830:	4601      	mov	r1, r0
 8011832:	695a      	ldr	r2, [r3, #20]
 8011834:	42b2      	cmp	r2, r6
 8011836:	d01b      	beq.n	8011870 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>
 8011838:	9001      	str	r0, [sp, #4]
 801183a:	615e      	str	r6, [r3, #20]
 801183c:	4622      	mov	r2, r4
 801183e:	4628      	mov	r0, r5
 8011840:	f7ff ffa6 	bl	8011790 <Dmx::StopData(unsigned int, unsigned int)>
 8011844:	9901      	ldr	r1, [sp, #4]
 8011846:	b94e      	cbnz	r6, 801185c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x40>
 8011848:	4b11      	ldr	r3, [pc, #68]	; (8011890 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x74>)
 801184a:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 801184e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	6193      	str	r3, [r2, #24]
 8011856:	b967      	cbnz	r7, 8011872 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x56>
 8011858:	b003      	add	sp, #12
 801185a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801185c:	2e01      	cmp	r6, #1
 801185e:	d1fa      	bne.n	8011856 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 8011860:	4b0b      	ldr	r3, [pc, #44]	; (8011890 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x74>)
 8011862:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 8011866:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	6293      	str	r3, [r2, #40]	; 0x28
 801186e:	e7f2      	b.n	8011856 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 8011870:	b137      	cbz	r7, 8011880 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x64>
 8011872:	4622      	mov	r2, r4
 8011874:	4628      	mov	r0, r5
 8011876:	b003      	add	sp, #12
 8011878:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801187c:	f7ff beec 	b.w	8011658 <Dmx::StartData(unsigned int, unsigned int)>
 8011880:	4622      	mov	r2, r4
 8011882:	4628      	mov	r0, r5
 8011884:	b003      	add	sp, #12
 8011886:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801188a:	f7ff bf81 	b.w	8011790 <Dmx::StopData(unsigned int, unsigned int)>
 801188e:	bf00      	nop
 8011890:	0801c970 	stmdaeq	r1, {r4, r5, r6, r8, fp, lr, pc}

08011894 <Dmx::Dmx()>:
 8011894:	230c      	movs	r3, #12
 8011896:	225c      	movs	r2, #92	; 0x5c
 8011898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801189c:	e9c0 2300 	strd	r2, r3, [r0]
 80118a0:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80118a4:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80118a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80118ac:	8203      	strh	r3, [r0, #16]
 80118ae:	4b46      	ldr	r3, [pc, #280]	; (80119c8 <Dmx::Dmx()+0x134>)
 80118b0:	4f46      	ldr	r7, [pc, #280]	; (80119cc <Dmx::Dmx()+0x138>)
 80118b2:	6018      	str	r0, [r3, #0]
 80118b4:	4b46      	ldr	r3, [pc, #280]	; (80119d0 <Dmx::Dmx()+0x13c>)
 80118b6:	2400      	movs	r4, #0
 80118b8:	b08e      	sub	sp, #56	; 0x38
 80118ba:	4605      	mov	r5, r0
 80118bc:	801c      	strh	r4, [r3, #0]
 80118be:	4626      	mov	r6, r4
 80118c0:	e9d7 0800 	ldrd	r0, r8, [r7]
 80118c4:	2202      	movs	r2, #2
 80118c6:	4643      	mov	r3, r8
 80118c8:	2101      	movs	r1, #1
 80118ca:	9003      	str	r0, [sp, #12]
 80118cc:	f007 fc88 	bl	80191e0 <gpio_mode_set>
 80118d0:	4643      	mov	r3, r8
 80118d2:	9803      	ldr	r0, [sp, #12]
 80118d4:	2202      	movs	r2, #2
 80118d6:	2100      	movs	r1, #0
 80118d8:	f007 fca2 	bl	8019220 <gpio_output_options_set>
 80118dc:	4642      	mov	r2, r8
 80118de:	9803      	ldr	r0, [sp, #12]
 80118e0:	2100      	movs	r1, #0
 80118e2:	f007 fcb8 	bl	8019256 <gpio_af_set>
 80118e6:	4621      	mov	r1, r4
 80118e8:	4628      	mov	r0, r5
 80118ea:	f7ff fe9d 	bl	8011628 <Dmx::ClearData(unsigned int)>
 80118ee:	4b39      	ldr	r3, [pc, #228]	; (80119d4 <Dmx::Dmx()+0x140>)
 80118f0:	2201      	movs	r2, #1
 80118f2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80118f6:	4621      	mov	r1, r4
 80118f8:	2300      	movs	r3, #0
 80118fa:	4628      	mov	r0, r5
 80118fc:	f7ff ff8e 	bl	801181c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8011900:	4b35      	ldr	r3, [pc, #212]	; (80119d8 <Dmx::Dmx()+0x144>)
 8011902:	f44f 7204 	mov.w	r2, #528	; 0x210
 8011906:	fb02 3304 	mla	r3, r2, r4, r3
 801190a:	3708      	adds	r7, #8
 801190c:	f8c3 620c 	str.w	r6, [r3, #524]	; 0x20c
 8011910:	2c00      	cmp	r4, #0
 8011912:	d056      	beq.n	80119c2 <Dmx::Dmx()+0x12e>
 8011914:	f640 4015 	movw	r0, #3093	; 0xc15
 8011918:	f007 fcde 	bl	80192d8 <rcu_periph_clock_enable>
 801191c:	f640 4016 	movw	r0, #3094	; 0xc16
 8011920:	f007 fcda 	bl	80192d8 <rcu_periph_clock_enable>
 8011924:	482d      	ldr	r0, [pc, #180]	; (80119dc <Dmx::Dmx()+0x148>)
 8011926:	2103      	movs	r1, #3
 8011928:	f006 ff8c 	bl	8018844 <dma_deinit>
 801192c:	4b2c      	ldr	r3, [pc, #176]	; (80119e0 <Dmx::Dmx()+0x14c>)
 801192e:	482b      	ldr	r0, [pc, #172]	; (80119dc <Dmx::Dmx()+0x148>)
 8011930:	9608      	str	r6, [sp, #32]
 8011932:	aa05      	add	r2, sp, #20
 8011934:	f04f 0840 	mov.w	r8, #64	; 0x40
 8011938:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 801193c:	2103      	movs	r1, #3
 801193e:	e9cd 3405 	strd	r3, r4, [sp, #20]
 8011942:	9609      	str	r6, [sp, #36]	; 0x24
 8011944:	970d      	str	r7, [sp, #52]	; 0x34
 8011946:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801194a:	f006 ffb2 	bl	80188b2 <dma_single_data_mode_init>
 801194e:	4823      	ldr	r0, [pc, #140]	; (80119dc <Dmx::Dmx()+0x148>)
 8011950:	2103      	movs	r1, #3
 8011952:	f006 ffed 	bl	8018930 <dma_circulation_disable>
 8011956:	2204      	movs	r2, #4
 8011958:	4820      	ldr	r0, [pc, #128]	; (80119dc <Dmx::Dmx()+0x148>)
 801195a:	2103      	movs	r1, #3
 801195c:	f006 fff0 	bl	8018940 <dma_channel_subperipheral_select>
 8011960:	4820      	ldr	r0, [pc, #128]	; (80119e4 <Dmx::Dmx()+0x150>)
 8011962:	2106      	movs	r1, #6
 8011964:	f006 ff6e 	bl	8018844 <dma_deinit>
 8011968:	4b1f      	ldr	r3, [pc, #124]	; (80119e8 <Dmx::Dmx()+0x154>)
 801196a:	481e      	ldr	r0, [pc, #120]	; (80119e4 <Dmx::Dmx()+0x150>)
 801196c:	9608      	str	r6, [sp, #32]
 801196e:	aa05      	add	r2, sp, #20
 8011970:	2106      	movs	r1, #6
 8011972:	e9cd 3405 	strd	r3, r4, [sp, #20]
 8011976:	9609      	str	r6, [sp, #36]	; 0x24
 8011978:	970d      	str	r7, [sp, #52]	; 0x34
 801197a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801197e:	f006 ff98 	bl	80188b2 <dma_single_data_mode_init>
 8011982:	4818      	ldr	r0, [pc, #96]	; (80119e4 <Dmx::Dmx()+0x150>)
 8011984:	4c19      	ldr	r4, [pc, #100]	; (80119ec <Dmx::Dmx()+0x158>)
 8011986:	2106      	movs	r1, #6
 8011988:	f006 ffd2 	bl	8018930 <dma_circulation_disable>
 801198c:	2702      	movs	r7, #2
 801198e:	4815      	ldr	r0, [pc, #84]	; (80119e4 <Dmx::Dmx()+0x150>)
 8011990:	2205      	movs	r2, #5
 8011992:	2106      	movs	r1, #6
 8011994:	f006 ffd4 	bl	8018940 <dma_channel_subperipheral_select>
 8011998:	2680      	movs	r6, #128	; 0x80
 801199a:	4915      	ldr	r1, [pc, #84]	; (80119f0 <Dmx::Dmx()+0x15c>)
 801199c:	4815      	ldr	r0, [pc, #84]	; (80119f4 <Dmx::Dmx()+0x160>)
 801199e:	9700      	str	r7, [sp, #0]
 80119a0:	2300      	movs	r3, #0
 80119a2:	2208      	movs	r2, #8
 80119a4:	f008 fcca 	bl	801a33c <gd32_uart_begin>
 80119a8:	6066      	str	r6, [r4, #4]
 80119aa:	4911      	ldr	r1, [pc, #68]	; (80119f0 <Dmx::Dmx()+0x15c>)
 80119ac:	4812      	ldr	r0, [pc, #72]	; (80119f8 <Dmx::Dmx()+0x164>)
 80119ae:	9700      	str	r7, [sp, #0]
 80119b0:	2300      	movs	r3, #0
 80119b2:	2208      	movs	r2, #8
 80119b4:	f008 fcc2 	bl	801a33c <gd32_uart_begin>
 80119b8:	4628      	mov	r0, r5
 80119ba:	60a6      	str	r6, [r4, #8]
 80119bc:	b00e      	add	sp, #56	; 0x38
 80119be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119c2:	2401      	movs	r4, #1
 80119c4:	e77c      	b.n	80118c0 <Dmx::Dmx()+0x2c>
 80119c6:	bf00      	nop
 80119c8:	20001064 	andcs	r1, r0, r4, rrx
 80119cc:	0801c970 	stmdaeq	r1, {r4, r5, r6, r8, fp, lr, pc}
 80119d0:	20001060 	andcs	r1, r0, r0, rrx
 80119d4:	20001058 	andcs	r1, r0, r8, asr r0
 80119d8:	20000830 	andcs	r0, r0, r0, lsr r8
 80119dc:	40026000 	andmi	r6, r2, r0
 80119e0:	40004804 	andmi	r4, r0, r4, lsl #16
 80119e4:	40026400 	andmi	r6, r2, r0, lsl #8
 80119e8:	40011404 	andmi	r1, r1, r4, lsl #8
 80119ec:	e000e100 	and	lr, r0, r0, lsl #2
 80119f0:	0003d090 	muleq	r3, r0, r0
 80119f4:	40004800 	andmi	r4, r0, r0, lsl #16
 80119f8:	40011400 	andmi	r1, r1, r0, lsl #8

080119fc <Dmx::SetDmxPeriodTime(unsigned int)>:
 80119fc:	4b0f      	ldr	r3, [pc, #60]	; (8011a3c <Dmx::SetDmxPeriodTime(unsigned int)+0x40>)
 80119fe:	60c1      	str	r1, [r0, #12]
 8011a00:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8011a04:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8011a08:	480d      	ldr	r0, [pc, #52]	; (8011a40 <Dmx::SetDmxPeriodTime(unsigned int)+0x44>)
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	bf38      	it	cc
 8011a0e:	461a      	movcc	r2, r3
 8011a10:	4b0c      	ldr	r3, [pc, #48]	; (8011a44 <Dmx::SetDmxPeriodTime(unsigned int)+0x48>)
 8011a12:	6800      	ldr	r0, [r0, #0]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	4403      	add	r3, r0
 8011a18:	202c      	movs	r0, #44	; 0x2c
 8011a1a:	fb00 3302 	mla	r3, r0, r2, r3
 8011a1e:	b151      	cbz	r1, 8011a36 <Dmx::SetDmxPeriodTime(unsigned int)+0x3a>
 8011a20:	4299      	cmp	r1, r3
 8011a22:	d205      	bcs.n	8011a30 <Dmx::SetDmxPeriodTime(unsigned int)+0x34>
 8011a24:	1819      	adds	r1, r3, r0
 8011a26:	f240 43b4 	movw	r3, #1204	; 0x4b4
 8011a2a:	4299      	cmp	r1, r3
 8011a2c:	bf38      	it	cc
 8011a2e:	4619      	movcc	r1, r3
 8011a30:	4b05      	ldr	r3, [pc, #20]	; (8011a48 <Dmx::SetDmxPeriodTime(unsigned int)+0x4c>)
 8011a32:	6019      	str	r1, [r3, #0]
 8011a34:	4770      	bx	lr
 8011a36:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8011a3a:	e7f4      	b.n	8011a26 <Dmx::SetDmxPeriodTime(unsigned int)+0x2a>
 8011a3c:	20000c50 	andcs	r0, r0, r0, asr ip
 8011a40:	20000008 	andcs	r0, r0, r8
 8011a44:	2000000c 	andcs	r0, r0, ip
 8011a48:	20000004 	andcs	r0, r0, r4

08011a4c <Dmx::SetDmxBreakTime(unsigned int)>:
 8011a4c:	295c      	cmp	r1, #92	; 0x5c
 8011a4e:	4b03      	ldr	r3, [pc, #12]	; (8011a5c <Dmx::SetDmxBreakTime(unsigned int)+0x10>)
 8011a50:	bf38      	it	cc
 8011a52:	215c      	movcc	r1, #92	; 0x5c
 8011a54:	6019      	str	r1, [r3, #0]
 8011a56:	68c1      	ldr	r1, [r0, #12]
 8011a58:	f7ff bfd0 	b.w	80119fc <Dmx::SetDmxPeriodTime(unsigned int)>
 8011a5c:	2000000c 	andcs	r0, r0, ip

08011a60 <Dmx::SetDmxMabTime(unsigned int)>:
 8011a60:	290c      	cmp	r1, #12
 8011a62:	4b03      	ldr	r3, [pc, #12]	; (8011a70 <Dmx::SetDmxMabTime(unsigned int)+0x10>)
 8011a64:	bf38      	it	cc
 8011a66:	210c      	movcc	r1, #12
 8011a68:	6019      	str	r1, [r3, #0]
 8011a6a:	68c1      	ldr	r1, [r0, #12]
 8011a6c:	f7ff bfc6 	b.w	80119fc <Dmx::SetDmxPeriodTime(unsigned int)>
 8011a70:	20000008 	andcs	r0, r0, r8

08011a74 <Dmx::SetDmxSlots(unsigned short)>:
 8011a74:	1e8b      	subs	r3, r1, #2
 8011a76:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8011a7a:	d80f      	bhi.n	8011a9c <Dmx::SetDmxSlots(unsigned short)+0x28>
 8011a7c:	69c3      	ldr	r3, [r0, #28]
 8011a7e:	8201      	strh	r1, [r0, #16]
 8011a80:	b11b      	cbz	r3, 8011a8a <Dmx::SetDmxSlots(unsigned short)+0x16>
 8011a82:	4299      	cmp	r1, r3
 8011a84:	bf94      	ite	ls
 8011a86:	61c1      	strls	r1, [r0, #28]
 8011a88:	61c3      	strhi	r3, [r0, #28]
 8011a8a:	6a03      	ldr	r3, [r0, #32]
 8011a8c:	b11b      	cbz	r3, 8011a96 <Dmx::SetDmxSlots(unsigned short)+0x22>
 8011a8e:	4299      	cmp	r1, r3
 8011a90:	bf94      	ite	ls
 8011a92:	6201      	strls	r1, [r0, #32]
 8011a94:	6203      	strhi	r3, [r0, #32]
 8011a96:	68c1      	ldr	r1, [r0, #12]
 8011a98:	f7ff bfb0 	b.w	80119fc <Dmx::SetDmxPeriodTime(unsigned int)>
 8011a9c:	4770      	bx	lr
	...

08011aa0 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>:
 8011aa0:	b470      	push	{r4, r5, r6}
 8011aa2:	8a04      	ldrh	r4, [r0, #16]
 8011aa4:	f892 f000 	pld	[r2]
 8011aa8:	42a3      	cmp	r3, r4
 8011aaa:	bf28      	it	cs
 8011aac:	4623      	movcs	r3, r4
 8011aae:	4c0e      	ldr	r4, [pc, #56]	; (8011ae8 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x48>)
 8011ab0:	f44f 7501 	mov.w	r5, #516	; 0x204
 8011ab4:	fb05 4401 	mla	r4, r5, r1, r4
 8011ab8:	1c5d      	adds	r5, r3, #1
 8011aba:	f8a4 5202 	strh.w	r5, [r4, #514]	; 0x202
 8011abe:	18d5      	adds	r5, r2, r3
 8011ac0:	4295      	cmp	r5, r2
 8011ac2:	d109      	bne.n	8011ad8 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x38>
 8011ac4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011ac8:	69ca      	ldr	r2, [r1, #28]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d009      	beq.n	8011ae2 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x42>
 8011ace:	61cb      	str	r3, [r1, #28]
 8011ad0:	bc70      	pop	{r4, r5, r6}
 8011ad2:	68c1      	ldr	r1, [r0, #12]
 8011ad4:	f7ff bf92 	b.w	80119fc <Dmx::SetDmxPeriodTime(unsigned int)>
 8011ad8:	f812 6b01 	ldrb.w	r6, [r2], #1
 8011adc:	f804 6f01 	strb.w	r6, [r4, #1]!
 8011ae0:	e7ee      	b.n	8011ac0 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x20>
 8011ae2:	bc70      	pop	{r4, r5, r6}
 8011ae4:	4770      	bx	lr
 8011ae6:	bf00      	nop
 8011ae8:	20000c50 	andcs	r0, r0, r0, asr ip

08011aec <Dmx::Blackout()>:
 8011aec:	b538      	push	{r3, r4, r5, lr}
 8011aee:	4c1e      	ldr	r4, [pc, #120]	; (8011b68 <Dmx::Blackout()+0x7c>)
 8011af0:	8823      	ldrh	r3, [r4, #0]
 8011af2:	b29b      	uxth	r3, r3
 8011af4:	b3bb      	cbz	r3, 8011b66 <Dmx::Blackout()+0x7a>
 8011af6:	f3bf 8f5f 	dmb	sy
 8011afa:	8823      	ldrh	r3, [r4, #0]
 8011afc:	05da      	lsls	r2, r3, #23
 8011afe:	d515      	bpl.n	8011b2c <Dmx::Blackout()+0x40>
 8011b00:	2000      	movs	r0, #0
 8011b02:	f7ff fce1 	bl	80114c8 <_port_to_uart(unsigned int)>
 8011b06:	4605      	mov	r5, r0
 8011b08:	2107      	movs	r1, #7
 8011b0a:	4628      	mov	r0, r5
 8011b0c:	f007 ffda 	bl	8019ac4 <usart_flag_get>
 8011b10:	2801      	cmp	r0, #1
 8011b12:	d1f9      	bne.n	8011b08 <Dmx::Blackout()+0x1c>
 8011b14:	4b15      	ldr	r3, [pc, #84]	; (8011b6c <Dmx::Blackout()+0x80>)
 8011b16:	2000      	movs	r0, #0
 8011b18:	461a      	mov	r2, r3
 8011b1a:	f203 2102 	addw	r1, r3, #514	; 0x202
 8011b1e:	f823 0b02 	strh.w	r0, [r3], #2
 8011b22:	428b      	cmp	r3, r1
 8011b24:	d1fb      	bne.n	8011b1e <Dmx::Blackout()+0x32>
 8011b26:	f04f 0300 	mov.w	r3, #0
 8011b2a:	7013      	strb	r3, [r2, #0]
 8011b2c:	f3bf 8f5f 	dmb	sy
 8011b30:	8823      	ldrh	r3, [r4, #0]
 8011b32:	059b      	lsls	r3, r3, #22
 8011b34:	d517      	bpl.n	8011b66 <Dmx::Blackout()+0x7a>
 8011b36:	2001      	movs	r0, #1
 8011b38:	f7ff fcc6 	bl	80114c8 <_port_to_uart(unsigned int)>
 8011b3c:	4604      	mov	r4, r0
 8011b3e:	2107      	movs	r1, #7
 8011b40:	4620      	mov	r0, r4
 8011b42:	f007 ffbf 	bl	8019ac4 <usart_flag_get>
 8011b46:	2801      	cmp	r0, #1
 8011b48:	d1f9      	bne.n	8011b3e <Dmx::Blackout()+0x52>
 8011b4a:	4b09      	ldr	r3, [pc, #36]	; (8011b70 <Dmx::Blackout()+0x84>)
 8011b4c:	2000      	movs	r0, #0
 8011b4e:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8011b52:	f203 2102 	addw	r1, r3, #514	; 0x202
 8011b56:	f823 0b02 	strh.w	r0, [r3], #2
 8011b5a:	428b      	cmp	r3, r1
 8011b5c:	d1fb      	bne.n	8011b56 <Dmx::Blackout()+0x6a>
 8011b5e:	f04f 0300 	mov.w	r3, #0
 8011b62:	f882 3204 	strb.w	r3, [r2, #516]	; 0x204
 8011b66:	bd38      	pop	{r3, r4, r5, pc}
 8011b68:	20001060 	andcs	r1, r0, r0, rrx
 8011b6c:	20000c50 	andcs	r0, r0, r0, asr ip
 8011b70:	20000e54 	andcs	r0, r0, r4, asr lr

08011b74 <Dmx::FullOn()>:
 8011b74:	b538      	push	{r3, r4, r5, lr}
 8011b76:	4c1e      	ldr	r4, [pc, #120]	; (8011bf0 <Dmx::FullOn()+0x7c>)
 8011b78:	8823      	ldrh	r3, [r4, #0]
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	b3bb      	cbz	r3, 8011bee <Dmx::FullOn()+0x7a>
 8011b7e:	f3bf 8f5f 	dmb	sy
 8011b82:	8823      	ldrh	r3, [r4, #0]
 8011b84:	05da      	lsls	r2, r3, #23
 8011b86:	d515      	bpl.n	8011bb4 <Dmx::FullOn()+0x40>
 8011b88:	2000      	movs	r0, #0
 8011b8a:	f7ff fc9d 	bl	80114c8 <_port_to_uart(unsigned int)>
 8011b8e:	4605      	mov	r5, r0
 8011b90:	2107      	movs	r1, #7
 8011b92:	4628      	mov	r0, r5
 8011b94:	f007 ff96 	bl	8019ac4 <usart_flag_get>
 8011b98:	2801      	cmp	r0, #1
 8011b9a:	d1f9      	bne.n	8011b90 <Dmx::FullOn()+0x1c>
 8011b9c:	4b15      	ldr	r3, [pc, #84]	; (8011bf4 <Dmx::FullOn()+0x80>)
 8011b9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011ba2:	461a      	mov	r2, r3
 8011ba4:	f203 2102 	addw	r1, r3, #514	; 0x202
 8011ba8:	f823 0b02 	strh.w	r0, [r3], #2
 8011bac:	428b      	cmp	r3, r1
 8011bae:	d1fb      	bne.n	8011ba8 <Dmx::FullOn()+0x34>
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	7013      	strb	r3, [r2, #0]
 8011bb4:	f3bf 8f5f 	dmb	sy
 8011bb8:	8823      	ldrh	r3, [r4, #0]
 8011bba:	059b      	lsls	r3, r3, #22
 8011bbc:	d517      	bpl.n	8011bee <Dmx::FullOn()+0x7a>
 8011bbe:	2001      	movs	r0, #1
 8011bc0:	f7ff fc82 	bl	80114c8 <_port_to_uart(unsigned int)>
 8011bc4:	4604      	mov	r4, r0
 8011bc6:	2107      	movs	r1, #7
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f007 ff7b 	bl	8019ac4 <usart_flag_get>
 8011bce:	2801      	cmp	r0, #1
 8011bd0:	d1f9      	bne.n	8011bc6 <Dmx::FullOn()+0x52>
 8011bd2:	4b09      	ldr	r3, [pc, #36]	; (8011bf8 <Dmx::FullOn()+0x84>)
 8011bd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011bd8:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 8011bdc:	f203 2102 	addw	r1, r3, #514	; 0x202
 8011be0:	f823 0b02 	strh.w	r0, [r3], #2
 8011be4:	428b      	cmp	r3, r1
 8011be6:	d1fb      	bne.n	8011be0 <Dmx::FullOn()+0x6c>
 8011be8:	2300      	movs	r3, #0
 8011bea:	f882 3204 	strb.w	r3, [r2, #516]	; 0x204
 8011bee:	bd38      	pop	{r3, r4, r5, pc}
 8011bf0:	20001060 	andcs	r1, r0, r0, rrx
 8011bf4:	20000c50 	andcs	r0, r0, r0, asr ip
 8011bf8:	20000e54 	andcs	r0, r0, r4, asr lr

08011bfc <WS28xxDmxMulti::SetDmxStartAddress(unsigned short)>:
 8011bfc:	2000      	movs	r0, #0
 8011bfe:	4770      	bx	lr

08011c00 <WS28xxDmxMulti::GetDmxStartAddress()>:
 8011c00:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011c04:	4770      	bx	lr

08011c06 <WS28xxDmxMulti::GetDmxFootprint()>:
 8011c06:	2000      	movs	r0, #0
 8011c08:	4770      	bx	lr

08011c0a <WS28xxDmxMulti::Start(unsigned int)>:
 8011c0a:	b538      	push	{r3, r4, r5, lr}
 8011c0c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011c0e:	4604      	mov	r4, r0
 8011c10:	460d      	mov	r5, r1
 8011c12:	b923      	cbnz	r3, 8011c1e <WS28xxDmxMulti::Start(unsigned int)+0x14>
 8011c14:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8011c16:	b110      	cbz	r0, 8011c1e <WS28xxDmxMulti::Start(unsigned int)+0x14>
 8011c18:	6803      	ldr	r3, [r0, #0]
 8011c1a:	689b      	ldr	r3, [r3, #8]
 8011c1c:	4798      	blx	r3
 8011c1e:	2301      	movs	r3, #1
 8011c20:	fa03 f105 	lsl.w	r1, r3, r5
 8011c24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011c26:	430b      	orrs	r3, r1
 8011c28:	6523      	str	r3, [r4, #80]	; 0x50
 8011c2a:	bd38      	pop	{r3, r4, r5, pc}

08011c2c <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 8011c2c:	b538      	push	{r3, r4, r5, lr}
 8011c2e:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8011c30:	4b05      	ldr	r3, [pc, #20]	; (8011c48 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x1c>)
 8011c32:	6003      	str	r3, [r0, #0]
 8011c34:	4604      	mov	r4, r0
 8011c36:	b12d      	cbz	r5, 8011c44 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x18>
 8011c38:	4628      	mov	r0, r5
 8011c3a:	f001 fab3 	bl	80131a4 <WS28xxMulti::~WS28xxMulti()>
 8011c3e:	4628      	mov	r0, r5
 8011c40:	f006 fafa 	bl	8018238 <operator delete(void*)>
 8011c44:	4620      	mov	r0, r4
 8011c46:	bd38      	pop	{r3, r4, r5, pc}
 8011c48:	0801c988 	stmdaeq	r1, {r3, r7, r8, fp, lr, pc}

08011c4c <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 8011c4c:	b510      	push	{r4, lr}
 8011c4e:	4604      	mov	r4, r0
 8011c50:	f7ff ffec 	bl	8011c2c <WS28xxDmxMulti::~WS28xxDmxMulti()>
 8011c54:	4620      	mov	r0, r4
 8011c56:	f006 faef 	bl	8018238 <operator delete(void*)>
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	bd10      	pop	{r4, pc}

08011c5e <WS28xxDmxMulti::Blackout(bool)>:
 8011c5e:	b538      	push	{r3, r4, r5, lr}
 8011c60:	4604      	mov	r4, r0
 8011c62:	460d      	mov	r5, r1
 8011c64:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8011c68:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011c6a:	f001 fe81 	bl	8013970 <WS28xxMulti::IsUpdating()>
 8011c6e:	2800      	cmp	r0, #0
 8011c70:	d1fa      	bne.n	8011c68 <WS28xxDmxMulti::Blackout(bool)+0xa>
 8011c72:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011c74:	b11d      	cbz	r5, 8011c7e <WS28xxDmxMulti::Blackout(bool)+0x20>
 8011c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c7a:	f001 bdb7 	b.w	80137ec <WS28xxMulti::Blackout()>
 8011c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c82:	f001 bd0f 	b.w	80136a4 <WS28xxMulti::Update()>

08011c86 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8011c86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c8a:	b089      	sub	sp, #36	; 0x24
 8011c8c:	4691      	mov	r9, r2
 8011c8e:	9306      	str	r3, [sp, #24]
 8011c90:	460b      	mov	r3, r1
 8011c92:	f003 0203 	and.w	r2, r3, #3
 8011c96:	2a02      	cmp	r2, #2
 8011c98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011c9a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8011c9c:	9105      	str	r1, [sp, #20]
 8011c9e:	4604      	mov	r4, r0
 8011ca0:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8011ca4:	9806      	ldr	r0, [sp, #24]
 8011ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8011caa:	d032      	beq.n	8011d12 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x8c>
 8011cac:	2a03      	cmp	r2, #3
 8011cae:	d032      	beq.n	8011d16 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x90>
 8011cb0:	2a01      	cmp	r2, #1
 8011cb2:	d028      	beq.n	8011d06 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x80>
 8011cb4:	429e      	cmp	r6, r3
 8011cb6:	bf28      	it	cs
 8011cb8:	461e      	movcs	r6, r3
 8011cba:	2500      	movs	r5, #0
 8011cbc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011cbe:	9107      	str	r1, [sp, #28]
 8011cc0:	f001 fe56 	bl	8013970 <WS28xxMulti::IsUpdating()>
 8011cc4:	9907      	ldr	r1, [sp, #28]
 8011cc6:	2800      	cmp	r0, #0
 8011cc8:	d1f8      	bne.n	8011cbc <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x36>
 8011cca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011ccc:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
 8011cd0:	2b03      	cmp	r3, #3
 8011cd2:	46c8      	mov	r8, r9
 8011cd4:	fb0a f705 	mul.w	r7, sl, r5
 8011cd8:	d041      	beq.n	8011d5e <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xd8>
 8011cda:	42b5      	cmp	r5, r6
 8011cdc:	d241      	bcs.n	8011d62 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xdc>
 8011cde:	9a06      	ldr	r2, [sp, #24]
 8011ce0:	eba8 0309 	sub.w	r3, r8, r9
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d93c      	bls.n	8011d62 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xdc>
 8011ce8:	f898 f000 	pld	[r8]
 8011cec:	f04f 0b00 	mov.w	fp, #0
 8011cf0:	fa1f f28b 	uxth.w	r2, fp
 8011cf4:	4552      	cmp	r2, sl
 8011cf6:	f10b 0b01 	add.w	fp, fp, #1
 8011cfa:	d33c      	bcc.n	8011d76 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xf0>
 8011cfc:	3501      	adds	r5, #1
 8011cfe:	f108 0804 	add.w	r8, r8, #4
 8011d02:	4457      	add	r7, sl
 8011d04:	e7e9      	b.n	8011cda <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x54>
 8011d06:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8011d08:	442b      	add	r3, r5
 8011d0a:	429e      	cmp	r6, r3
 8011d0c:	bf28      	it	cs
 8011d0e:	461e      	movcs	r6, r3
 8011d10:	e7d4      	b.n	8011cbc <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x36>
 8011d12:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8011d14:	e7f8      	b.n	8011d08 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 8011d16:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8011d18:	e7f6      	b.n	8011d08 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 8011d1a:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011d1e:	9301      	str	r3, [sp, #4]
 8011d20:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011d24:	9300      	str	r3, [sp, #0]
 8011d26:	f898 3000 	ldrb.w	r3, [r8]
 8011d2a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011d2c:	9107      	str	r1, [sp, #28]
 8011d2e:	443a      	add	r2, r7
 8011d30:	f001 fe9e 	bl	8013a70 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8011d34:	9907      	ldr	r1, [sp, #28]
 8011d36:	e008      	b.n	8011d4a <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xc4>
 8011d38:	9a06      	ldr	r2, [sp, #24]
 8011d3a:	eba8 0309 	sub.w	r3, r8, r9
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d90f      	bls.n	8011d62 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xdc>
 8011d42:	f898 f000 	pld	[r8]
 8011d46:	f04f 0b00 	mov.w	fp, #0
 8011d4a:	fa1f f28b 	uxth.w	r2, fp
 8011d4e:	4552      	cmp	r2, sl
 8011d50:	f10b 0b01 	add.w	fp, fp, #1
 8011d54:	d3e1      	bcc.n	8011d1a <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x94>
 8011d56:	3501      	adds	r5, #1
 8011d58:	f108 0803 	add.w	r8, r8, #3
 8011d5c:	4457      	add	r7, sl
 8011d5e:	42b5      	cmp	r5, r6
 8011d60:	d3ea      	bcc.n	8011d38 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xb2>
 8011d62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d64:	9a05      	ldr	r2, [sp, #20]
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d117      	bne.n	8011d9a <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x114>
 8011d6a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011d6c:	b009      	add	sp, #36	; 0x24
 8011d6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d72:	f001 bc97 	b.w	80136a4 <WS28xxMulti::Update()>
 8011d76:	f898 3003 	ldrb.w	r3, [r8, #3]
 8011d7a:	9302      	str	r3, [sp, #8]
 8011d7c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011d80:	9301      	str	r3, [sp, #4]
 8011d82:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011d86:	9300      	str	r3, [sp, #0]
 8011d88:	f898 3000 	ldrb.w	r3, [r8]
 8011d8c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011d8e:	9107      	str	r1, [sp, #28]
 8011d90:	443a      	add	r2, r7
 8011d92:	f001 feef 	bl	8013b74 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8011d96:	9907      	ldr	r1, [sp, #28]
 8011d98:	e7aa      	b.n	8011cf0 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8011d9a:	b009      	add	sp, #36	; 0x24
 8011d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011da0 <WS28xxDmxMulti::FullOn()>:
 8011da0:	b510      	push	{r4, lr}
 8011da2:	4604      	mov	r4, r0
 8011da4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011da6:	f001 fde3 	bl	8013970 <WS28xxMulti::IsUpdating()>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	d1fa      	bne.n	8011da4 <WS28xxDmxMulti::FullOn()+0x4>
 8011dae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011db4:	f001 bd7c 	b.w	80138b0 <WS28xxMulti::FullOn()>

08011db8 <WS28xxDmxMulti::Print()>:
 8011db8:	3004      	adds	r0, #4
 8011dba:	f000 bcb1 	b.w	8012720 <PixelDmxConfiguration::Print()>

08011dbe <WS28xxDmxMulti::Stop(unsigned int)>:
 8011dbe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011dc0:	fa23 f201 	lsr.w	r2, r3, r1
 8011dc4:	07d2      	lsls	r2, r2, #31
 8011dc6:	bf41      	itttt	mi
 8011dc8:	2201      	movmi	r2, #1
 8011dca:	408a      	lslmi	r2, r1
 8011dcc:	4393      	bicmi	r3, r2
 8011dce:	6503      	strmi	r3, [r0, #80]	; 0x50
 8011dd0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011dd2:	b923      	cbnz	r3, 8011dde <WS28xxDmxMulti::Stop(unsigned int)+0x20>
 8011dd4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8011dd6:	b110      	cbz	r0, 8011dde <WS28xxDmxMulti::Stop(unsigned int)+0x20>
 8011dd8:	6803      	ldr	r3, [r0, #0]
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	4718      	bx	r3
 8011dde:	4770      	bx	lr

08011de0 <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)>:
 8011de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011de2:	4604      	mov	r4, r0
 8011de4:	4b14      	ldr	r3, [pc, #80]	; (8011e38 <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)+0x58>)
 8011de6:	f844 3b04 	str.w	r3, [r4], #4
 8011dea:	460d      	mov	r5, r1
 8011dec:	4606      	mov	r6, r0
 8011dee:	460f      	mov	r7, r1
 8011df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011df8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011e00:	2300      	movs	r3, #0
 8011e02:	f106 0244 	add.w	r2, r6, #68	; 0x44
 8011e06:	e9c6 3312 	strd	r3, r3, [r6, #72]	; 0x48
 8011e0a:	6533      	str	r3, [r6, #80]	; 0x50
 8011e0c:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
 8011e10:	2110      	movs	r1, #16
 8011e12:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8011e16:	1d30      	adds	r0, r6, #4
 8011e18:	f000 fc3f 	bl	801269a <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 8011e1c:	2020      	movs	r0, #32
 8011e1e:	f006 fa0f 	bl	8018240 <operator new(unsigned int)>
 8011e22:	4639      	mov	r1, r7
 8011e24:	4604      	mov	r4, r0
 8011e26:	f001 fbdf 	bl	80135e8 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)>
 8011e2a:	4620      	mov	r0, r4
 8011e2c:	64b4      	str	r4, [r6, #72]	; 0x48
 8011e2e:	f001 fcdd 	bl	80137ec <WS28xxMulti::Blackout()>
 8011e32:	4630      	mov	r0, r6
 8011e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e36:	bf00      	nop
 8011e38:	0801c988 	stmdaeq	r1, {r3, r7, r8, fp, lr, pc}

08011e3c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8011e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e3e:	88c6      	ldrh	r6, [r0, #6]
 8011e40:	8885      	ldrh	r5, [r0, #4]
 8011e42:	42ae      	cmp	r6, r5
 8011e44:	d216      	bcs.n	8011e74 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 8011e46:	4604      	mov	r4, r0
 8011e48:	6800      	ldr	r0, [r0, #0]
 8011e4a:	1bad      	subs	r5, r5, r6
 8011e4c:	4430      	add	r0, r6
 8011e4e:	7a26      	ldrb	r6, [r4, #8]
 8011e50:	b923      	cbnz	r3, 8011e5c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8011e52:	b926      	cbnz	r6, 8011e5e <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8011e54:	9200      	str	r2, [sp, #0]
 8011e56:	460b      	mov	r3, r1
 8011e58:	4a09      	ldr	r2, [pc, #36]	; (8011e80 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 8011e5a:	e003      	b.n	8011e64 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011e5c:	b166      	cbz	r6, 8011e78 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8011e5e:	9200      	str	r2, [sp, #0]
 8011e60:	4a08      	ldr	r2, [pc, #32]	; (8011e84 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8011e62:	460b      	mov	r3, r1
 8011e64:	4629      	mov	r1, r5
 8011e66:	f7f8 fb3f 	bl	800a4e8 <snprintf>
 8011e6a:	4285      	cmp	r5, r0
 8011e6c:	bfa2      	ittt	ge
 8011e6e:	88e3      	ldrhge	r3, [r4, #6]
 8011e70:	181b      	addge	r3, r3, r0
 8011e72:	80e3      	strhge	r3, [r4, #6]
 8011e74:	b002      	add	sp, #8
 8011e76:	bd70      	pop	{r4, r5, r6, pc}
 8011e78:	9200      	str	r2, [sp, #0]
 8011e7a:	460b      	mov	r3, r1
 8011e7c:	4a02      	ldr	r2, [pc, #8]	; (8011e88 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011e7e:	e7f1      	b.n	8011e64 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011e80:	0801b161 	stmdaeq	r1, {r0, r5, r6, r8, ip, sp, pc}
 8011e84:	0801b158 	stmdaeq	r1, {r3, r4, r6, r8, ip, sp, pc}
 8011e88:	0801b162 	stmdaeq	r1, {r1, r5, r6, r8, ip, sp, pc}

08011e8c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 8011e8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e8e:	88c6      	ldrh	r6, [r0, #6]
 8011e90:	8885      	ldrh	r5, [r0, #4]
 8011e92:	42ae      	cmp	r6, r5
 8011e94:	d216      	bcs.n	8011ec4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 8011e96:	4604      	mov	r4, r0
 8011e98:	6800      	ldr	r0, [r0, #0]
 8011e9a:	1bad      	subs	r5, r5, r6
 8011e9c:	4430      	add	r0, r6
 8011e9e:	7a26      	ldrb	r6, [r4, #8]
 8011ea0:	b923      	cbnz	r3, 8011eac <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 8011ea2:	b926      	cbnz	r6, 8011eae <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 8011ea4:	9200      	str	r2, [sp, #0]
 8011ea6:	460b      	mov	r3, r1
 8011ea8:	4a09      	ldr	r2, [pc, #36]	; (8011ed0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 8011eaa:	e003      	b.n	8011eb4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 8011eac:	b166      	cbz	r6, 8011ec8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 8011eae:	9200      	str	r2, [sp, #0]
 8011eb0:	4a08      	ldr	r2, [pc, #32]	; (8011ed4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 8011eb2:	460b      	mov	r3, r1
 8011eb4:	4629      	mov	r1, r5
 8011eb6:	f7f8 fb17 	bl	800a4e8 <snprintf>
 8011eba:	4285      	cmp	r5, r0
 8011ebc:	bfa2      	ittt	ge
 8011ebe:	88e3      	ldrhge	r3, [r4, #6]
 8011ec0:	181b      	addge	r3, r3, r0
 8011ec2:	80e3      	strhge	r3, [r4, #6]
 8011ec4:	b002      	add	sp, #8
 8011ec6:	bd70      	pop	{r4, r5, r6, pc}
 8011ec8:	9200      	str	r2, [sp, #0]
 8011eca:	460b      	mov	r3, r1
 8011ecc:	4a02      	ldr	r2, [pc, #8]	; (8011ed8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011ece:	e7f1      	b.n	8011eb4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 8011ed0:	0801b161 	stmdaeq	r1, {r0, r5, r6, r8, ip, sp, pc}
 8011ed4:	0801b158 	stmdaeq	r1, {r3, r4, r6, r8, ip, sp, pc}
 8011ed8:	0801b162 	stmdaeq	r1, {r1, r5, r6, r8, ip, sp, pc}

08011edc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 8011edc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ede:	88c6      	ldrh	r6, [r0, #6]
 8011ee0:	8885      	ldrh	r5, [r0, #4]
 8011ee2:	42ae      	cmp	r6, r5
 8011ee4:	d216      	bcs.n	8011f14 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 8011ee6:	4604      	mov	r4, r0
 8011ee8:	6800      	ldr	r0, [r0, #0]
 8011eea:	1bad      	subs	r5, r5, r6
 8011eec:	4430      	add	r0, r6
 8011eee:	7a26      	ldrb	r6, [r4, #8]
 8011ef0:	b923      	cbnz	r3, 8011efc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 8011ef2:	b926      	cbnz	r6, 8011efe <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 8011ef4:	9200      	str	r2, [sp, #0]
 8011ef6:	460b      	mov	r3, r1
 8011ef8:	4a09      	ldr	r2, [pc, #36]	; (8011f20 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 8011efa:	e003      	b.n	8011f04 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 8011efc:	b166      	cbz	r6, 8011f18 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 8011efe:	9200      	str	r2, [sp, #0]
 8011f00:	4a08      	ldr	r2, [pc, #32]	; (8011f24 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 8011f02:	460b      	mov	r3, r1
 8011f04:	4629      	mov	r1, r5
 8011f06:	f7f8 faef 	bl	800a4e8 <snprintf>
 8011f0a:	4285      	cmp	r5, r0
 8011f0c:	bfa2      	ittt	ge
 8011f0e:	88e3      	ldrhge	r3, [r4, #6]
 8011f10:	181b      	addge	r3, r3, r0
 8011f12:	80e3      	strhge	r3, [r4, #6]
 8011f14:	b002      	add	sp, #8
 8011f16:	bd70      	pop	{r4, r5, r6, pc}
 8011f18:	9200      	str	r2, [sp, #0]
 8011f1a:	460b      	mov	r3, r1
 8011f1c:	4a02      	ldr	r2, [pc, #8]	; (8011f28 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011f1e:	e7f1      	b.n	8011f04 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 8011f20:	0801b174 	stmdaeq	r1, {r2, r4, r5, r6, r8, ip, sp, pc}
 8011f24:	0801b169 	stmdaeq	r1, {r0, r3, r5, r6, r8, ip, sp, pc}
 8011f28:	0801b175 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, ip, sp, pc}

08011f2c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 8011f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f30:	8885      	ldrh	r5, [r0, #4]
 8011f32:	4698      	mov	r8, r3
 8011f34:	88c3      	ldrh	r3, [r0, #6]
 8011f36:	42ab      	cmp	r3, r5
 8011f38:	4604      	mov	r4, r0
 8011f3a:	d229      	bcs.n	8011f90 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 8011f3c:	6826      	ldr	r6, [r4, #0]
 8011f3e:	f894 9008 	ldrb.w	r9, [r4, #8]
 8011f42:	4692      	mov	sl, r2
 8011f44:	ee10 0a10 	vmov	r0, s0
 8011f48:	460f      	mov	r7, r1
 8011f4a:	441e      	add	r6, r3
 8011f4c:	1aed      	subs	r5, r5, r3
 8011f4e:	f7f7 f821 	bl	8008f94 <__aeabi_f2d>
 8011f52:	f1ba 0f00 	cmp.w	sl, #0
 8011f56:	d109      	bne.n	8011f6c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 8011f58:	f1b9 0f00 	cmp.w	r9, #0
 8011f5c:	d109      	bne.n	8011f72 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 8011f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f62:	4a10      	ldr	r2, [pc, #64]	; (8011fa4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 8011f64:	f8cd 8000 	str.w	r8, [sp]
 8011f68:	463b      	mov	r3, r7
 8011f6a:	e008      	b.n	8011f7e <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 8011f6c:	f1b9 0f00 	cmp.w	r9, #0
 8011f70:	d011      	beq.n	8011f96 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 8011f72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f76:	4a0c      	ldr	r2, [pc, #48]	; (8011fa8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 8011f78:	f8cd 8000 	str.w	r8, [sp]
 8011f7c:	463b      	mov	r3, r7
 8011f7e:	4629      	mov	r1, r5
 8011f80:	4630      	mov	r0, r6
 8011f82:	f7f8 fab1 	bl	800a4e8 <snprintf>
 8011f86:	4285      	cmp	r5, r0
 8011f88:	bfa2      	ittt	ge
 8011f8a:	88e3      	ldrhge	r3, [r4, #6]
 8011f8c:	18c0      	addge	r0, r0, r3
 8011f8e:	80e0      	strhge	r0, [r4, #6]
 8011f90:	b004      	add	sp, #16
 8011f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f9a:	4a04      	ldr	r2, [pc, #16]	; (8011fac <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 8011f9c:	f8cd 8000 	str.w	r8, [sp]
 8011fa0:	463b      	mov	r3, r7
 8011fa2:	e7ec      	b.n	8011f7e <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 8011fa4:	0801c9c3 	stmdaeq	r1, {r0, r1, r6, r7, r8, fp, lr, pc}
 8011fa8:	0801c9b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, fp, lr, pc}
 8011fac:	0801c9c4 	stmdaeq	r1, {r2, r6, r7, r8, fp, lr, pc}

08011fb0 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>:
 8011fb0:	6001      	str	r1, [r0, #0]
 8011fb2:	2106      	movs	r1, #6
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	75c1      	strb	r1, [r0, #23]
 8011fb8:	490b      	ldr	r1, [pc, #44]	; (8011fe8 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x38>)
 8011fba:	7582      	strb	r2, [r0, #22]
 8011fbc:	8302      	strh	r2, [r0, #24]
 8011fbe:	6042      	str	r2, [r0, #4]
 8011fc0:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8011fc4:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8011fc8:	2301      	movs	r3, #1
 8011fca:	4a08      	ldr	r2, [pc, #32]	; (8011fec <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x3c>)
 8011fcc:	6102      	str	r2, [r0, #16]
 8011fce:	7543      	strb	r3, [r0, #21]
 8011fd0:	f100 0218 	add.w	r2, r0, #24
 8011fd4:	f822 3f02 	strh.w	r3, [r2, #2]!
 8011fd8:	3304      	adds	r3, #4
 8011fda:	b29b      	uxth	r3, r3
 8011fdc:	2b41      	cmp	r3, #65	; 0x41
 8011fde:	d1f9      	bne.n	8011fd4 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x24>
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	7503      	strb	r3, [r0, #20]
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop
 8011fe8:	0100aa03 	tsteq	r0, r3, lsl #20
 8011fec:	01ff003d 	mvnseq	r0, sp, lsr r0

08011ff0 <PixelDmxParams::Load()>:
 8011ff0:	b508      	push	{r3, lr}
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	4601      	mov	r1, r0
 8011ff6:	6043      	str	r3, [r0, #4]
 8011ff8:	6800      	ldr	r0, [r0, #0]
 8011ffa:	b120      	cbz	r0, 8012006 <PixelDmxParams::Load()+0x16>
 8011ffc:	6803      	ldr	r3, [r0, #0]
 8011ffe:	3104      	adds	r1, #4
 8012000:	68db      	ldr	r3, [r3, #12]
 8012002:	4798      	blx	r3
 8012004:	2001      	movs	r0, #1
 8012006:	bd08      	pop	{r3, pc}

08012008 <PixelDmxParams::Load(char const*, unsigned int)>:
 8012008:	6803      	ldr	r3, [r0, #0]
 801200a:	b1d3      	cbz	r3, 8012042 <PixelDmxParams::Load(char const*, unsigned int)+0x3a>
 801200c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801200e:	2300      	movs	r3, #0
 8012010:	6043      	str	r3, [r0, #4]
 8012012:	4604      	mov	r4, r0
 8012014:	460d      	mov	r5, r1
 8012016:	4616      	mov	r6, r2
 8012018:	490a      	ldr	r1, [pc, #40]	; (8012044 <PixelDmxParams::Load(char const*, unsigned int)+0x3c>)
 801201a:	4602      	mov	r2, r0
 801201c:	4668      	mov	r0, sp
 801201e:	f005 faeb 	bl	80175f8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8012022:	4632      	mov	r2, r6
 8012024:	4629      	mov	r1, r5
 8012026:	4668      	mov	r0, sp
 8012028:	f005 faea 	bl	8017600 <ReadConfigFile::Read(char const*, unsigned int)>
 801202c:	4621      	mov	r1, r4
 801202e:	f851 0b04 	ldr.w	r0, [r1], #4
 8012032:	6803      	ldr	r3, [r0, #0]
 8012034:	689b      	ldr	r3, [r3, #8]
 8012036:	4798      	blx	r3
 8012038:	4668      	mov	r0, sp
 801203a:	f005 fae0 	bl	80175fe <ReadConfigFile::~ReadConfigFile()>
 801203e:	b002      	add	sp, #8
 8012040:	bd70      	pop	{r4, r5, r6, pc}
 8012042:	4770      	bx	lr
 8012044:	08012309 	stmdaeq	r1, {r0, r3, r8, r9, sp}

08012048 <PixelDmxParams::callbackFunction(char const*)>:
 8012048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801204c:	b08a      	sub	sp, #40	; 0x28
 801204e:	460d      	mov	r5, r1
 8012050:	2308      	movs	r3, #8
 8012052:	4604      	mov	r4, r0
 8012054:	9304      	str	r3, [sp, #16]
 8012056:	499e      	ldr	r1, [pc, #632]	; (80122d0 <PixelDmxParams::callbackFunction(char const*)+0x288>)
 8012058:	ab04      	add	r3, sp, #16
 801205a:	aa06      	add	r2, sp, #24
 801205c:	4628      	mov	r0, r5
 801205e:	f005 fb03 	bl	8017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8012062:	b9a0      	cbnz	r0, 801208e <PixelDmxParams::callbackFunction(char const*)+0x46>
 8012064:	9b04      	ldr	r3, [sp, #16]
 8012066:	3328      	adds	r3, #40	; 0x28
 8012068:	446b      	add	r3, sp
 801206a:	f803 0c10 	strb.w	r0, [r3, #-16]
 801206e:	a806      	add	r0, sp, #24
 8012070:	f000 fc86 	bl	8012980 <PixelType::GetType(char const*)>
 8012074:	6863      	ldr	r3, [r4, #4]
 8012076:	280e      	cmp	r0, #14
 8012078:	bf0d      	iteet	eq
 801207a:	2203      	moveq	r2, #3
 801207c:	7220      	strbne	r0, [r4, #8]
 801207e:	f043 0301 	orrne.w	r3, r3, #1
 8012082:	7222      	strbeq	r2, [r4, #8]
 8012084:	bf08      	it	eq
 8012086:	f023 0301 	biceq.w	r3, r3, #1
 801208a:	6063      	str	r3, [r4, #4]
 801208c:	e033      	b.n	80120f6 <PixelDmxParams::callbackFunction(char const*)+0xae>
 801208e:	4991      	ldr	r1, [pc, #580]	; (80122d4 <PixelDmxParams::callbackFunction(char const*)+0x28c>)
 8012090:	f10d 020a 	add.w	r2, sp, #10
 8012094:	4628      	mov	r0, r5
 8012096:	f005 fb9c 	bl	80177d2 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 801209a:	b990      	cbnz	r0, 80120c2 <PixelDmxParams::callbackFunction(char const*)+0x7a>
 801209c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80120a0:	6863      	ldr	r3, [r4, #4]
 80120a2:	1e51      	subs	r1, r2, #1
 80120a4:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 80120a8:	bf2d      	iteet	cs
 80120aa:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 80120ae:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 80120b2:	f043 0302 	orrcc.w	r3, r3, #2
 80120b6:	7262      	strbcs	r2, [r4, #9]
 80120b8:	bf24      	itt	cs
 80120ba:	72a0      	strbcs	r0, [r4, #10]
 80120bc:	f023 0302 	biccs.w	r3, r3, #2
 80120c0:	e7e3      	b.n	801208a <PixelDmxParams::callbackFunction(char const*)+0x42>
 80120c2:	2303      	movs	r3, #3
 80120c4:	9304      	str	r3, [sp, #16]
 80120c6:	4984      	ldr	r1, [pc, #528]	; (80122d8 <PixelDmxParams::callbackFunction(char const*)+0x290>)
 80120c8:	ab04      	add	r3, sp, #16
 80120ca:	aa06      	add	r2, sp, #24
 80120cc:	4628      	mov	r0, r5
 80120ce:	f005 facb 	bl	8017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 80120d2:	b998      	cbnz	r0, 80120fc <PixelDmxParams::callbackFunction(char const*)+0xb4>
 80120d4:	9b04      	ldr	r3, [sp, #16]
 80120d6:	3328      	adds	r3, #40	; 0x28
 80120d8:	446b      	add	r3, sp
 80120da:	f803 0c10 	strb.w	r0, [r3, #-16]
 80120de:	a806      	add	r0, sp, #24
 80120e0:	f000 fc72 	bl	80129c8 <PixelType::GetMap(char const*)>
 80120e4:	6863      	ldr	r3, [r4, #4]
 80120e6:	75e0      	strb	r0, [r4, #23]
 80120e8:	2806      	cmp	r0, #6
 80120ea:	bf14      	ite	ne
 80120ec:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 80120f0:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 80120f4:	6063      	str	r3, [r4, #4]
 80120f6:	b00a      	add	sp, #40	; 0x28
 80120f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120fc:	4977      	ldr	r1, [pc, #476]	; (80122dc <PixelDmxParams::callbackFunction(char const*)+0x294>)
 80120fe:	aa03      	add	r2, sp, #12
 8012100:	4628      	mov	r0, r5
 8012102:	f005 faca 	bl	801769a <Sscan::Float(char const*, char const*, float&)>
 8012106:	b968      	cbnz	r0, 8012124 <PixelDmxParams::callbackFunction(char const*)+0xdc>
 8012108:	ed9d 0a03 	vldr	s0, [sp, #12]
 801210c:	f000 fcc8 	bl	8012aa0 <PixelType::ConvertTxH(float)>
 8012110:	6863      	ldr	r3, [r4, #4]
 8012112:	b120      	cbz	r0, 801211e <PixelDmxParams::callbackFunction(char const*)+0xd6>
 8012114:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012118:	6063      	str	r3, [r4, #4]
 801211a:	7620      	strb	r0, [r4, #24]
 801211c:	e7eb      	b.n	80120f6 <PixelDmxParams::callbackFunction(char const*)+0xae>
 801211e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012122:	e7f9      	b.n	8012118 <PixelDmxParams::callbackFunction(char const*)+0xd0>
 8012124:	496e      	ldr	r1, [pc, #440]	; (80122e0 <PixelDmxParams::callbackFunction(char const*)+0x298>)
 8012126:	aa03      	add	r2, sp, #12
 8012128:	4628      	mov	r0, r5
 801212a:	f005 fab6 	bl	801769a <Sscan::Float(char const*, char const*, float&)>
 801212e:	b968      	cbnz	r0, 801214c <PixelDmxParams::callbackFunction(char const*)+0x104>
 8012130:	ed9d 0a03 	vldr	s0, [sp, #12]
 8012134:	f000 fcb4 	bl	8012aa0 <PixelType::ConvertTxH(float)>
 8012138:	6863      	ldr	r3, [r4, #4]
 801213a:	b120      	cbz	r0, 8012146 <PixelDmxParams::callbackFunction(char const*)+0xfe>
 801213c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012140:	6063      	str	r3, [r4, #4]
 8012142:	7660      	strb	r0, [r4, #25]
 8012144:	e7d7      	b.n	80120f6 <PixelDmxParams::callbackFunction(char const*)+0xae>
 8012146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801214a:	e7f9      	b.n	8012140 <PixelDmxParams::callbackFunction(char const*)+0xf8>
 801214c:	4965      	ldr	r1, [pc, #404]	; (80122e4 <PixelDmxParams::callbackFunction(char const*)+0x29c>)
 801214e:	f10d 020a 	add.w	r2, sp, #10
 8012152:	4628      	mov	r0, r5
 8012154:	f005 fb3d 	bl	80177d2 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 8012158:	b998      	cbnz	r0, 8012182 <PixelDmxParams::callbackFunction(char const*)+0x13a>
 801215a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801215e:	6863      	ldr	r3, [r4, #4]
 8012160:	1e8a      	subs	r2, r1, #2
 8012162:	b292      	uxth	r2, r2
 8012164:	f240 25a6 	movw	r5, #678	; 0x2a6
 8012168:	42aa      	cmp	r2, r5
 801216a:	bf81      	itttt	hi
 801216c:	2201      	movhi	r2, #1
 801216e:	7562      	strbhi	r2, [r4, #21]
 8012170:	75a0      	strbhi	r0, [r4, #22]
 8012172:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 8012176:	bf9c      	itt	ls
 8012178:	f8a4 1015 	strhls.w	r1, [r4, #21]
 801217c:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 8012180:	e783      	b.n	801208a <PixelDmxParams::callbackFunction(char const*)+0x42>
 8012182:	4959      	ldr	r1, [pc, #356]	; (80122e8 <PixelDmxParams::callbackFunction(char const*)+0x2a0>)
 8012184:	aa05      	add	r2, sp, #20
 8012186:	4628      	mov	r0, r5
 8012188:	f005 fb42 	bl	8017810 <Sscan::Uint32(char const*, char const*, unsigned int&)>
 801218c:	b960      	cbnz	r0, 80121a8 <PixelDmxParams::callbackFunction(char const*)+0x160>
 801218e:	9a05      	ldr	r2, [sp, #20]
 8012190:	4956      	ldr	r1, [pc, #344]	; (80122ec <PixelDmxParams::callbackFunction(char const*)+0x2a4>)
 8012192:	6863      	ldr	r3, [r4, #4]
 8012194:	f8c4 200e 	str.w	r2, [r4, #14]
 8012198:	428a      	cmp	r2, r1
 801219a:	bf14      	ite	ne
 801219c:	f043 0310 	orrne.w	r3, r3, #16
 80121a0:	f023 0310 	biceq.w	r3, r3, #16
 80121a4:	6063      	str	r3, [r4, #4]
 80121a6:	e7a6      	b.n	80120f6 <PixelDmxParams::callbackFunction(char const*)+0xae>
 80121a8:	4951      	ldr	r1, [pc, #324]	; (80122f0 <PixelDmxParams::callbackFunction(char const*)+0x2a8>)
 80121aa:	f10d 0209 	add.w	r2, sp, #9
 80121ae:	4628      	mov	r0, r5
 80121b0:	f005 fb57 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80121b4:	b988      	cbnz	r0, 80121da <PixelDmxParams::callbackFunction(char const*)+0x192>
 80121b6:	f89d 1009 	ldrb.w	r1, [sp, #9]
 80121ba:	6863      	ldr	r3, [r4, #4]
 80121bc:	1e4a      	subs	r2, r1, #1
 80121be:	b2d2      	uxtb	r2, r2
 80121c0:	2afd      	cmp	r2, #253	; 0xfd
 80121c2:	bf89      	itett	hi
 80121c4:	f023 0320 	bichi.w	r3, r3, #32
 80121c8:	f043 0320 	orrls.w	r3, r3, #32
 80121cc:	6063      	strhi	r3, [r4, #4]
 80121ce:	23ff      	movhi	r3, #255	; 0xff
 80121d0:	bf9a      	itte	ls
 80121d2:	6063      	strls	r3, [r4, #4]
 80121d4:	74a1      	strbls	r1, [r4, #18]
 80121d6:	74a3      	strbhi	r3, [r4, #18]
 80121d8:	e78d      	b.n	80120f6 <PixelDmxParams::callbackFunction(char const*)+0xae>
 80121da:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8012304 <PixelDmxParams::callbackFunction(char const*)+0x2bc>
 80121de:	f104 071a 	add.w	r7, r4, #26
 80121e2:	2600      	movs	r6, #0
 80121e4:	f04f 0814 	mov.w	r8, #20
 80121e8:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 80121ec:	f10d 020a 	add.w	r2, sp, #10
 80121f0:	fb08 9106 	mla	r1, r8, r6, r9
 80121f4:	4628      	mov	r0, r5
 80121f6:	f005 faec 	bl	80177d2 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 80121fa:	b940      	cbnz	r0, 801220e <PixelDmxParams::callbackFunction(char const*)+0x1c6>
 80121fc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8012200:	6863      	ldr	r3, [r4, #4]
 8012202:	fa0a f106 	lsl.w	r1, sl, r6
 8012206:	b1ea      	cbz	r2, 8012244 <PixelDmxParams::callbackFunction(char const*)+0x1fc>
 8012208:	803a      	strh	r2, [r7, #0]
 801220a:	430b      	orrs	r3, r1
 801220c:	6063      	str	r3, [r4, #4]
 801220e:	3601      	adds	r6, #1
 8012210:	2e10      	cmp	r6, #16
 8012212:	f107 0702 	add.w	r7, r7, #2
 8012216:	d1e9      	bne.n	80121ec <PixelDmxParams::callbackFunction(char const*)+0x1a4>
 8012218:	4936      	ldr	r1, [pc, #216]	; (80122f4 <PixelDmxParams::callbackFunction(char const*)+0x2ac>)
 801221a:	f10d 0209 	add.w	r2, sp, #9
 801221e:	4628      	mov	r0, r5
 8012220:	f005 fb1f 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012224:	b9a0      	cbnz	r0, 8012250 <PixelDmxParams::callbackFunction(char const*)+0x208>
 8012226:	f89d 2009 	ldrb.w	r2, [sp, #9]
 801222a:	6863      	ldr	r3, [r4, #4]
 801222c:	1e91      	subs	r1, r2, #2
 801222e:	290e      	cmp	r1, #14
 8012230:	bf8d      	iteet	hi
 8012232:	2201      	movhi	r2, #1
 8012234:	74e2      	strbls	r2, [r4, #19]
 8012236:	f043 0340 	orrls.w	r3, r3, #64	; 0x40
 801223a:	74e2      	strbhi	r2, [r4, #19]
 801223c:	bf88      	it	hi
 801223e:	f023 0340 	bichi.w	r3, r3, #64	; 0x40
 8012242:	e722      	b.n	801208a <PixelDmxParams::callbackFunction(char const*)+0x42>
 8012244:	00b2      	lsls	r2, r6, #2
 8012246:	3201      	adds	r2, #1
 8012248:	803a      	strh	r2, [r7, #0]
 801224a:	ea23 0301 	bic.w	r3, r3, r1
 801224e:	e7dd      	b.n	801220c <PixelDmxParams::callbackFunction(char const*)+0x1c4>
 8012250:	4929      	ldr	r1, [pc, #164]	; (80122f8 <PixelDmxParams::callbackFunction(char const*)+0x2b0>)
 8012252:	f10d 0209 	add.w	r2, sp, #9
 8012256:	4628      	mov	r0, r5
 8012258:	f005 fb03 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801225c:	b960      	cbnz	r0, 8012278 <PixelDmxParams::callbackFunction(char const*)+0x230>
 801225e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8012262:	6863      	ldr	r3, [r4, #4]
 8012264:	1e51      	subs	r1, r2, #1
 8012266:	2904      	cmp	r1, #4
 8012268:	bf99      	ittee	ls
 801226a:	7522      	strbls	r2, [r4, #20]
 801226c:	f043 0308 	orrls.w	r3, r3, #8
 8012270:	7520      	strbhi	r0, [r4, #20]
 8012272:	f023 0308 	bichi.w	r3, r3, #8
 8012276:	e708      	b.n	801208a <PixelDmxParams::callbackFunction(char const*)+0x42>
 8012278:	4920      	ldr	r1, [pc, #128]	; (80122fc <PixelDmxParams::callbackFunction(char const*)+0x2b4>)
 801227a:	f10d 0209 	add.w	r2, sp, #9
 801227e:	4628      	mov	r0, r5
 8012280:	f005 faef 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012284:	b948      	cbnz	r0, 801229a <PixelDmxParams::callbackFunction(char const*)+0x252>
 8012286:	f89d 2009 	ldrb.w	r2, [sp, #9]
 801228a:	6863      	ldr	r3, [r4, #4]
 801228c:	b112      	cbz	r2, 8012294 <PixelDmxParams::callbackFunction(char const*)+0x24c>
 801228e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012292:	e6fa      	b.n	801208a <PixelDmxParams::callbackFunction(char const*)+0x42>
 8012294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012298:	e6f7      	b.n	801208a <PixelDmxParams::callbackFunction(char const*)+0x42>
 801229a:	4919      	ldr	r1, [pc, #100]	; (8012300 <PixelDmxParams::callbackFunction(char const*)+0x2b8>)
 801229c:	aa03      	add	r2, sp, #12
 801229e:	4628      	mov	r0, r5
 80122a0:	f005 f9fb 	bl	801769a <Sscan::Float(char const*, char const*, float&)>
 80122a4:	2800      	cmp	r0, #0
 80122a6:	f47f af26 	bne.w	80120f6 <PixelDmxParams::callbackFunction(char const*)+0xae>
 80122aa:	eddd 7a03 	vldr	s15, [sp, #12]
 80122ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80122b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80122ba:	edcd 7a01 	vstr	s15, [sp, #4]
 80122be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80122c2:	f1a3 0214 	sub.w	r2, r3, #20
 80122c6:	2a05      	cmp	r2, #5
 80122c8:	bf8c      	ite	hi
 80122ca:	7360      	strbhi	r0, [r4, #13]
 80122cc:	7363      	strbls	r3, [r4, #13]
 80122ce:	e712      	b.n	80120f6 <PixelDmxParams::callbackFunction(char const*)+0xae>
 80122d0:	0801dade 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r9, fp, ip, lr, pc}
 80122d4:	0801dae7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, fp, ip, lr, pc}
 80122d8:	0801dace 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, fp, ip, lr, pc}
 80122dc:	0801daf1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, fp, ip, lr, pc}
 80122e0:	0801daf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, ip, lr, pc}
 80122e4:	0801da9b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r9, fp, ip, lr, pc}
 80122e8:	0801da7f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r9, fp, ip, lr, pc}
 80122ec:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80122f0:	0801dabc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, fp, ip, lr, pc}
 80122f4:	0801da68 	stmdaeq	r1, {r3, r5, r6, r9, fp, ip, lr, pc}
 80122f8:	0801da8e 	stmdaeq	r1, {r1, r2, r3, r7, r9, fp, ip, lr, pc}
 80122fc:	0801daab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, fp, ip, lr, pc}
 8012300:	0801da73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r9, fp, ip, lr, pc}
 8012304:	0801db7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, r9, fp, ip, lr, pc}

08012308 <PixelDmxParams::staticCallbackFunction(void*, char const*)>:
 8012308:	f7ff be9e 	b.w	8012048 <PixelDmxParams::callbackFunction(char const*)>

0801230c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)>:
 801230c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012310:	4604      	mov	r4, r0
 8012312:	b086      	sub	sp, #24
 8012314:	4615      	mov	r5, r2
 8012316:	461e      	mov	r6, r3
 8012318:	3004      	adds	r0, #4
 801231a:	b389      	cbz	r1, 8012380 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x74>
 801231c:	2236      	movs	r2, #54	; 0x36
 801231e:	f006 f84e 	bl	80183be <memmove>
 8012322:	462a      	mov	r2, r5
 8012324:	499b      	ldr	r1, [pc, #620]	; (8012594 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 8012326:	4633      	mov	r3, r6
 8012328:	a803      	add	r0, sp, #12
 801232a:	f005 f8c5 	bl	80174b8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 801232e:	7a20      	ldrb	r0, [r4, #8]
 8012330:	f000 fb1a 	bl	8012968 <PixelType::GetType(pixel::Type)>
 8012334:	6863      	ldr	r3, [r4, #4]
 8012336:	4998      	ldr	r1, [pc, #608]	; (8012598 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 8012338:	4602      	mov	r2, r0
 801233a:	f003 0301 	and.w	r3, r3, #1
 801233e:	a803      	add	r0, sp, #12
 8012340:	f7ff fdcc 	bl	8011edc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 8012344:	6863      	ldr	r3, [r4, #4]
 8012346:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 801234a:	4994      	ldr	r1, [pc, #592]	; (801259c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 801234c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8012350:	a803      	add	r0, sp, #12
 8012352:	f7ff fd9b 	bl	8011e8c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 8012356:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801235a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801235e:	6863      	ldr	r3, [r4, #4]
 8012360:	42aa      	cmp	r2, r5
 8012362:	d227      	bcs.n	80123b4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xa8>
 8012364:	9803      	ldr	r0, [sp, #12]
 8012366:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 801236a:	4410      	add	r0, r2
 801236c:	eba5 0502 	sub.w	r5, r5, r2
 8012370:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8012374:	d10b      	bne.n	801238e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 8012376:	b96a      	cbnz	r2, 8012394 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x88>
 8012378:	9200      	str	r2, [sp, #0]
 801237a:	4b89      	ldr	r3, [pc, #548]	; (80125a0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 801237c:	4a89      	ldr	r2, [pc, #548]	; (80125a4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 801237e:	e00f      	b.n	80123a0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x94>
 8012380:	6823      	ldr	r3, [r4, #0]
 8012382:	681a      	ldr	r2, [r3, #0]
 8012384:	4601      	mov	r1, r0
 8012386:	68d2      	ldr	r2, [r2, #12]
 8012388:	4618      	mov	r0, r3
 801238a:	4790      	blx	r2
 801238c:	e7c9      	b.n	8012322 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 801238e:	2a00      	cmp	r2, #0
 8012390:	f000 8087 	beq.w	80124a2 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x196>
 8012394:	3b00      	subs	r3, #0
 8012396:	bf18      	it	ne
 8012398:	2301      	movne	r3, #1
 801239a:	9300      	str	r3, [sp, #0]
 801239c:	4a82      	ldr	r2, [pc, #520]	; (80125a8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 801239e:	4b80      	ldr	r3, [pc, #512]	; (80125a0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 80123a0:	4629      	mov	r1, r5
 80123a2:	f7f8 f8a1 	bl	800a4e8 <snprintf>
 80123a6:	4285      	cmp	r5, r0
 80123a8:	bfa2      	ittt	ge
 80123aa:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80123ae:	18c0      	addge	r0, r0, r3
 80123b0:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80123b4:	7b63      	ldrb	r3, [r4, #13]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d178      	bne.n	80124ac <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1a0>
 80123ba:	4a7c      	ldr	r2, [pc, #496]	; (80125ac <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 80123bc:	497c      	ldr	r1, [pc, #496]	; (80125b0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 80123be:	a803      	add	r0, sp, #12
 80123c0:	f7ff fd8c 	bl	8011edc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 80123c4:	497b      	ldr	r1, [pc, #492]	; (80125b4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 80123c6:	a803      	add	r0, sp, #12
 80123c8:	f005 f8fc 	bl	80175c4 <PropertiesBuilder::AddComment(char const*)>
 80123cc:	6863      	ldr	r3, [r4, #4]
 80123ce:	059e      	lsls	r6, r3, #22
 80123d0:	d403      	bmi.n	80123da <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xce>
 80123d2:	7a20      	ldrb	r0, [r4, #8]
 80123d4:	f000 fb2c 	bl	8012a30 <PixelType::GetMap(pixel::Type)>
 80123d8:	75e0      	strb	r0, [r4, #23]
 80123da:	7de0      	ldrb	r0, [r4, #23]
 80123dc:	f000 fb1c 	bl	8012a18 <PixelType::GetMap(pixel::Map)>
 80123e0:	6863      	ldr	r3, [r4, #4]
 80123e2:	4975      	ldr	r1, [pc, #468]	; (80125b8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 80123e4:	4602      	mov	r2, r0
 80123e6:	f3c3 2340 	ubfx	r3, r3, #9, #1
 80123ea:	a803      	add	r0, sp, #12
 80123ec:	f7ff fd76 	bl	8011edc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 80123f0:	6863      	ldr	r3, [r4, #4]
 80123f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80123f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80123fa:	d011      	beq.n	8012420 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x114>
 80123fc:	f10d 020b 	add.w	r2, sp, #11
 8012400:	7a20      	ldrb	r0, [r4, #8]
 8012402:	f10d 010a 	add.w	r1, sp, #10
 8012406:	f000 f9a3 	bl	8012750 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 801240a:	6863      	ldr	r3, [r4, #4]
 801240c:	055d      	lsls	r5, r3, #21
 801240e:	bf5c      	itt	pl
 8012410:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 8012414:	7622      	strbpl	r2, [r4, #24]
 8012416:	0518      	lsls	r0, r3, #20
 8012418:	bf5c      	itt	pl
 801241a:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 801241e:	7663      	strbpl	r3, [r4, #25]
 8012420:	4966      	ldr	r1, [pc, #408]	; (80125bc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 8012422:	a803      	add	r0, sp, #12
 8012424:	f005 f8ce 	bl	80175c4 <PropertiesBuilder::AddComment(char const*)>
 8012428:	7e20      	ldrb	r0, [r4, #24]
 801242a:	f000 fb0b 	bl	8012a44 <PixelType::ConvertTxH(unsigned char)>
 801242e:	6862      	ldr	r2, [r4, #4]
 8012430:	4963      	ldr	r1, [pc, #396]	; (80125c0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 8012432:	2302      	movs	r3, #2
 8012434:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8012438:	a803      	add	r0, sp, #12
 801243a:	f7ff fd77 	bl	8011f2c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 801243e:	7e60      	ldrb	r0, [r4, #25]
 8012440:	f000 fb00 	bl	8012a44 <PixelType::ConvertTxH(unsigned char)>
 8012444:	6862      	ldr	r2, [r4, #4]
 8012446:	495f      	ldr	r1, [pc, #380]	; (80125c4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 8012448:	2302      	movs	r3, #2
 801244a:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 801244e:	a803      	add	r0, sp, #12
 8012450:	f7ff fd6c 	bl	8011f2c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 8012454:	495c      	ldr	r1, [pc, #368]	; (80125c8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 8012456:	a803      	add	r0, sp, #12
 8012458:	f005 f8b4 	bl	80175c4 <PropertiesBuilder::AddComment(char const*)>
 801245c:	6863      	ldr	r3, [r4, #4]
 801245e:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 8012462:	495a      	ldr	r1, [pc, #360]	; (80125cc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 8012464:	f3c3 2300 	ubfx	r3, r3, #8, #1
 8012468:	a803      	add	r0, sp, #12
 801246a:	f7ff fd0f 	bl	8011e8c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 801246e:	4958      	ldr	r1, [pc, #352]	; (80125d0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 8012470:	a803      	add	r0, sp, #12
 8012472:	f005 f8a7 	bl	80175c4 <PropertiesBuilder::AddComment(char const*)>
 8012476:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801247a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801247e:	f8d4 300e 	ldr.w	r3, [r4, #14]
 8012482:	6861      	ldr	r1, [r4, #4]
 8012484:	42aa      	cmp	r2, r5
 8012486:	d22f      	bcs.n	80124e8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 8012488:	9803      	ldr	r0, [sp, #12]
 801248a:	06c9      	lsls	r1, r1, #27
 801248c:	4410      	add	r0, r2
 801248e:	eba5 0502 	sub.w	r5, r5, r2
 8012492:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8012496:	d418      	bmi.n	80124ca <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1be>
 8012498:	b9ca      	cbnz	r2, 80124ce <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c2>
 801249a:	9300      	str	r3, [sp, #0]
 801249c:	4a41      	ldr	r2, [pc, #260]	; (80125a4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 801249e:	4b4d      	ldr	r3, [pc, #308]	; (80125d4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 80124a0:	e018      	b.n	80124d4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c8>
 80124a2:	2301      	movs	r3, #1
 80124a4:	9300      	str	r3, [sp, #0]
 80124a6:	4a4c      	ldr	r2, [pc, #304]	; (80125d8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 80124a8:	4b3d      	ldr	r3, [pc, #244]	; (80125a0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 80124aa:	e779      	b.n	80123a0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x94>
 80124ac:	ee07 3a90 	vmov	s15, r3
 80124b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124b4:	2301      	movs	r3, #1
 80124b6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80124ba:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80124be:	493c      	ldr	r1, [pc, #240]	; (80125b0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 80124c0:	461a      	mov	r2, r3
 80124c2:	a803      	add	r0, sp, #12
 80124c4:	f7ff fd32 	bl	8011f2c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 80124c8:	e77c      	b.n	80123c4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xb8>
 80124ca:	2a00      	cmp	r2, #0
 80124cc:	d05e      	beq.n	801258c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x280>
 80124ce:	9300      	str	r3, [sp, #0]
 80124d0:	4a35      	ldr	r2, [pc, #212]	; (80125a8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 80124d2:	4b40      	ldr	r3, [pc, #256]	; (80125d4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 80124d4:	4629      	mov	r1, r5
 80124d6:	f7f8 f807 	bl	800a4e8 <snprintf>
 80124da:	4285      	cmp	r5, r0
 80124dc:	bfa2      	ittt	ge
 80124de:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80124e2:	18c0      	addge	r0, r0, r3
 80124e4:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80124e8:	493c      	ldr	r1, [pc, #240]	; (80125dc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 80124ea:	4e3d      	ldr	r6, [pc, #244]	; (80125e0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 80124ec:	a803      	add	r0, sp, #12
 80124ee:	f005 f869 	bl	80175c4 <PropertiesBuilder::AddComment(char const*)>
 80124f2:	6863      	ldr	r3, [r4, #4]
 80124f4:	7ca2      	ldrb	r2, [r4, #18]
 80124f6:	493b      	ldr	r1, [pc, #236]	; (80125e4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 80124f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80124fc:	a803      	add	r0, sp, #12
 80124fe:	f7ff fc9d 	bl	8011e3c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8012502:	f104 0718 	add.w	r7, r4, #24
 8012506:	2500      	movs	r5, #0
 8012508:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 801250c:	6862      	ldr	r2, [r4, #4]
 801250e:	fa08 f305 	lsl.w	r3, r8, r5
 8012512:	4393      	bics	r3, r2
 8012514:	bf0c      	ite	eq
 8012516:	2301      	moveq	r3, #1
 8012518:	2300      	movne	r3, #0
 801251a:	4631      	mov	r1, r6
 801251c:	f837 2f02 	ldrh.w	r2, [r7, #2]!
 8012520:	a803      	add	r0, sp, #12
 8012522:	3501      	adds	r5, #1
 8012524:	f7ff fcb2 	bl	8011e8c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 8012528:	2d10      	cmp	r5, #16
 801252a:	f106 0614 	add.w	r6, r6, #20
 801252e:	d1ed      	bne.n	801250c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x200>
 8012530:	6863      	ldr	r3, [r4, #4]
 8012532:	7ce2      	ldrb	r2, [r4, #19]
 8012534:	492c      	ldr	r1, [pc, #176]	; (80125e8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 8012536:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801253a:	a803      	add	r0, sp, #12
 801253c:	f7ff fc7e 	bl	8011e3c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8012540:	492a      	ldr	r1, [pc, #168]	; (80125ec <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2e0>)
 8012542:	a803      	add	r0, sp, #12
 8012544:	f005 f83e 	bl	80175c4 <PropertiesBuilder::AddComment(char const*)>
 8012548:	6863      	ldr	r3, [r4, #4]
 801254a:	7d22      	ldrb	r2, [r4, #20]
 801254c:	4928      	ldr	r1, [pc, #160]	; (80125f0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2e4>)
 801254e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8012552:	a803      	add	r0, sp, #12
 8012554:	f7ff fc72 	bl	8011e3c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8012558:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801255c:	b17b      	cbz	r3, 801257e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x272>
 801255e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012562:	9b03      	ldr	r3, [sp, #12]
 8012564:	4413      	add	r3, r2
 8012566:	227d      	movs	r2, #125	; 0x7d
 8012568:	f803 2c01 	strb.w	r2, [r3, #-1]
 801256c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012570:	9903      	ldr	r1, [sp, #12]
 8012572:	54ca      	strb	r2, [r1, r3]
 8012574:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012578:	3301      	adds	r3, #1
 801257a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801257e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012584:	601a      	str	r2, [r3, #0]
 8012586:	b006      	add	sp, #24
 8012588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801258c:	9300      	str	r3, [sp, #0]
 801258e:	4a12      	ldr	r2, [pc, #72]	; (80125d8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 8012590:	4b10      	ldr	r3, [pc, #64]	; (80125d4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 8012592:	e79f      	b.n	80124d4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c8>
 8012594:	0801db01 	stmdaeq	r1, {r0, r8, r9, fp, ip, lr, pc}
 8012598:	0801dade 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r9, fp, ip, lr, pc}
 801259c:	0801dae7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, fp, ip, lr, pc}
 80125a0:	0801daab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, fp, ip, lr, pc}
 80125a4:	0801b161 	stmdaeq	r1, {r0, r5, r6, r8, ip, sp, pc}
 80125a8:	0801b158 	stmdaeq	r1, {r3, r4, r6, r8, ip, sp, pc}
 80125ac:	0801c9cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, fp, lr, pc}
 80125b0:	0801da73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r9, fp, ip, lr, pc}
 80125b4:	0801c9d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, fp, lr, pc}
 80125b8:	0801dace 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, fp, ip, lr, pc}
 80125bc:	0801c9eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, fp, lr, pc}
 80125c0:	0801daf1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, fp, ip, lr, pc}
 80125c4:	0801daf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, ip, lr, pc}
 80125c8:	0801ca01 	stmdaeq	r1, {r0, r9, fp, lr, pc}
 80125cc:	0801da9b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r9, fp, ip, lr, pc}
 80125d0:	0801ca0a 	stmdaeq	r1, {r1, r3, r9, fp, lr, pc}
 80125d4:	0801da7f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r9, fp, ip, lr, pc}
 80125d8:	0801b162 	stmdaeq	r1, {r1, r5, r6, r8, ip, sp, pc}
 80125dc:	0801ca1c 	stmdaeq	r1, {r2, r3, r4, r9, fp, lr, pc}
 80125e0:	0801db7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, r9, fp, ip, lr, pc}
 80125e4:	0801dabc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, fp, ip, lr, pc}
 80125e8:	0801da68 	stmdaeq	r1, {r3, r5, r6, r9, fp, ip, lr, pc}
 80125ec:	0801ca2a 	stmdaeq	r1, {r1, r3, r5, r9, fp, lr, pc}
 80125f0:	0801da8e 	stmdaeq	r1, {r1, r2, r3, r7, r9, fp, ip, lr, pc}

080125f4 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)>:
 80125f4:	b513      	push	{r0, r1, r4, lr}
 80125f6:	6804      	ldr	r4, [r0, #0]
 80125f8:	b914      	cbnz	r4, 8012600 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80125fa:	601c      	str	r4, [r3, #0]
 80125fc:	b002      	add	sp, #8
 80125fe:	bd10      	pop	{r4, pc}
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	4613      	mov	r3, r2
 8012604:	460a      	mov	r2, r1
 8012606:	2100      	movs	r1, #0
 8012608:	f7ff fe80 	bl	801230c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)>
 801260c:	e7f6      	b.n	80125fc <PixelDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

0801260e <PixelDmxParams::Set(PixelDmxConfiguration*)>:
 801260e:	6843      	ldr	r3, [r0, #4]
 8012610:	07da      	lsls	r2, r3, #31
 8012612:	bf44      	itt	mi
 8012614:	7a02      	ldrbmi	r2, [r0, #8]
 8012616:	600a      	strmi	r2, [r1, #0]
 8012618:	079a      	lsls	r2, r3, #30
 801261a:	d505      	bpl.n	8012628 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 801261c:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 8012620:	2a00      	cmp	r2, #0
 8012622:	bf08      	it	eq
 8012624:	22aa      	moveq	r2, #170	; 0xaa
 8012626:	604a      	str	r2, [r1, #4]
 8012628:	059a      	lsls	r2, r3, #22
 801262a:	bf44      	itt	mi
 801262c:	7dc2      	ldrbmi	r2, [r0, #23]
 801262e:	608a      	strmi	r2, [r1, #8]
 8012630:	055a      	lsls	r2, r3, #21
 8012632:	bf44      	itt	mi
 8012634:	7e02      	ldrbmi	r2, [r0, #24]
 8012636:	740a      	strbmi	r2, [r1, #16]
 8012638:	051a      	lsls	r2, r3, #20
 801263a:	bf44      	itt	mi
 801263c:	7e42      	ldrbmi	r2, [r0, #25]
 801263e:	744a      	strbmi	r2, [r1, #17]
 8012640:	06da      	lsls	r2, r3, #27
 8012642:	bf44      	itt	mi
 8012644:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 8012648:	60ca      	strmi	r2, [r1, #12]
 801264a:	069a      	lsls	r2, r3, #26
 801264c:	bf44      	itt	mi
 801264e:	7c82      	ldrbmi	r2, [r0, #18]
 8012650:	748a      	strbmi	r2, [r1, #18]
 8012652:	061a      	lsls	r2, r3, #24
 8012654:	d504      	bpl.n	8012660 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 8012656:	2201      	movs	r2, #1
 8012658:	750a      	strb	r2, [r1, #20]
 801265a:	7b42      	ldrb	r2, [r0, #13]
 801265c:	b102      	cbz	r2, 8012660 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 801265e:	74ca      	strb	r2, [r1, #19]
 8012660:	075a      	lsls	r2, r3, #29
 8012662:	d50f      	bpl.n	8012684 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x76>
 8012664:	7ac2      	ldrb	r2, [r0, #11]
 8012666:	b510      	push	{r4, lr}
 8012668:	7b04      	ldrb	r4, [r0, #12]
 801266a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 801266e:	858a      	strh	r2, [r1, #44]	; 0x2c
 8012670:	05da      	lsls	r2, r3, #23
 8012672:	bf44      	itt	mi
 8012674:	f8b0 2015 	ldrhmi.w	r2, [r0, #21]
 8012678:	620a      	strmi	r2, [r1, #32]
 801267a:	065c      	lsls	r4, r3, #25
 801267c:	bf44      	itt	mi
 801267e:	7cc3      	ldrbmi	r3, [r0, #19]
 8012680:	61cb      	strmi	r3, [r1, #28]
 8012682:	bd10      	pop	{r4, pc}
 8012684:	05da      	lsls	r2, r3, #23
 8012686:	bf44      	itt	mi
 8012688:	f8b0 2015 	ldrhmi.w	r2, [r0, #21]
 801268c:	620a      	strmi	r2, [r1, #32]
 801268e:	065b      	lsls	r3, r3, #25
 8012690:	bf44      	itt	mi
 8012692:	7cc3      	ldrbmi	r3, [r0, #19]
 8012694:	61cb      	strmi	r3, [r1, #28]
 8012696:	4770      	bx	lr

08012698 <PixelDmxParams::Dump()>:
 8012698:	4770      	bx	lr

0801269a <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>:
 801269a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801269c:	4604      	mov	r4, r0
 801269e:	460e      	mov	r6, r1
 80126a0:	4611      	mov	r1, r2
 80126a2:	9201      	str	r2, [sp, #4]
 80126a4:	461d      	mov	r5, r3
 80126a6:	f000 f861 	bl	801276c <PixelConfiguration::Validate(unsigned int&)>
 80126aa:	7d62      	ldrb	r2, [r4, #21]
 80126ac:	b94a      	cbnz	r2, 80126c2 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x28>
 80126ae:	6823      	ldr	r3, [r4, #0]
 80126b0:	9901      	ldr	r1, [sp, #4]
 80126b2:	b11b      	cbz	r3, 80126bc <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x22>
 80126b4:	3b0b      	subs	r3, #11
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	bf88      	it	hi
 80126ba:	6022      	strhi	r2, [r4, #0]
 80126bc:	4620      	mov	r0, r4
 80126be:	f000 f855 	bl	801276c <PixelConfiguration::Validate(unsigned int&)>
 80126c2:	6823      	ldr	r3, [r4, #0]
 80126c4:	2b07      	cmp	r3, #7
 80126c6:	bf15      	itete	ne
 80126c8:	f44f 71aa 	movne.w	r1, #340	; 0x154
 80126cc:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80126d0:	23aa      	movne	r3, #170	; 0xaa
 80126d2:	2380      	moveq	r3, #128	; 0x80
 80126d4:	e9c5 3100 	strd	r3, r1, [r5]
 80126d8:	6a21      	ldr	r1, [r4, #32]
 80126da:	bf14      	ite	ne
 80126dc:	f44f 72ff 	movne.w	r2, #510	; 0x1fe
 80126e0:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 80126e4:	60aa      	str	r2, [r5, #8]
 80126e6:	6862      	ldr	r2, [r4, #4]
 80126e8:	b109      	cbz	r1, 80126ee <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x54>
 80126ea:	4291      	cmp	r1, r2
 80126ec:	d900      	bls.n	80126f0 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x56>
 80126ee:	6222      	str	r2, [r4, #32]
 80126f0:	69e0      	ldr	r0, [r4, #28]
 80126f2:	6a21      	ldr	r1, [r4, #32]
 80126f4:	fbb2 f2f1 	udiv	r2, r2, r1
 80126f8:	42b0      	cmp	r0, r6
 80126fa:	bf28      	it	cs
 80126fc:	4630      	movcs	r0, r6
 80126fe:	6262      	str	r2, [r4, #36]	; 0x24
 8012700:	2e01      	cmp	r6, #1
 8012702:	f103 0301 	add.w	r3, r3, #1
 8012706:	fbb2 f2f3 	udiv	r2, r2, r3
 801270a:	f102 0301 	add.w	r3, r2, #1
 801270e:	62a3      	str	r3, [r4, #40]	; 0x28
 8012710:	bf1c      	itt	ne
 8012712:	eb03 0380 	addne.w	r3, r3, r0, lsl #2
 8012716:	1f5a      	subne	r2, r3, #5
 8012718:	61e0      	str	r0, [r4, #28]
 801271a:	60ea      	str	r2, [r5, #12]
 801271c:	b002      	add	sp, #8
 801271e:	bd70      	pop	{r4, r5, r6, pc}

08012720 <PixelDmxConfiguration::Print()>:
 8012720:	b510      	push	{r4, lr}
 8012722:	4604      	mov	r4, r0
 8012724:	f000 f8b8 	bl	8012898 <PixelConfiguration::Print()>
 8012728:	4806      	ldr	r0, [pc, #24]	; (8012744 <PixelDmxConfiguration::Print()+0x24>)
 801272a:	f7f7 feb5 	bl	800a498 <printf>
 801272e:	69e1      	ldr	r1, [r4, #28]
 8012730:	4805      	ldr	r0, [pc, #20]	; (8012748 <PixelDmxConfiguration::Print()+0x28>)
 8012732:	f7f7 feb1 	bl	800a498 <printf>
 8012736:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 801273a:	4804      	ldr	r0, [pc, #16]	; (801274c <PixelDmxConfiguration::Print()+0x2c>)
 801273c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012740:	f7f7 beaa 	b.w	800a498 <printf>
 8012744:	0801ca37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r9, fp, lr, pc}
 8012748:	0801ca50 	stmdaeq	r1, {r4, r6, r9, fp, lr, pc}
 801274c:	0801ca5f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r9, fp, lr, pc}

08012750 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 8012750:	23c0      	movs	r3, #192	; 0xc0
 8012752:	2803      	cmp	r0, #3
 8012754:	700b      	strb	r3, [r1, #0]
 8012756:	d006      	beq.n	8012766 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 8012758:	3808      	subs	r0, #8
 801275a:	2803      	cmp	r0, #3
 801275c:	bf34      	ite	cc
 801275e:	23fc      	movcc	r3, #252	; 0xfc
 8012760:	23f0      	movcs	r3, #240	; 0xf0
 8012762:	7013      	strb	r3, [r2, #0]
 8012764:	4770      	bx	lr
 8012766:	23f8      	movs	r3, #248	; 0xf8
 8012768:	e7fb      	b.n	8012762 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

0801276c <PixelConfiguration::Validate(unsigned int&)>:
 801276c:	b513      	push	{r0, r1, r4, lr}
 801276e:	4604      	mov	r4, r0
 8012770:	6800      	ldr	r0, [r0, #0]
 8012772:	6863      	ldr	r3, [r4, #4]
 8012774:	68a2      	ldr	r2, [r4, #8]
 8012776:	2807      	cmp	r0, #7
 8012778:	d127      	bne.n	80127ca <PixelConfiguration::Validate(unsigned int&)+0x5e>
 801277a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801277e:	bf28      	it	cs
 8012780:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012784:	6063      	str	r3, [r4, #4]
 8012786:	2304      	movs	r3, #4
 8012788:	600b      	str	r3, [r1, #0]
 801278a:	2301      	movs	r3, #1
 801278c:	2a06      	cmp	r2, #6
 801278e:	7563      	strb	r3, [r4, #21]
 8012790:	d102      	bne.n	8012798 <PixelConfiguration::Validate(unsigned int&)+0x2c>
 8012792:	f000 f94d 	bl	8012a30 <PixelType::GetMap(pixel::Type)>
 8012796:	60a0      	str	r0, [r4, #8]
 8012798:	7c63      	ldrb	r3, [r4, #17]
 801279a:	7c22      	ldrb	r2, [r4, #16]
 801279c:	6820      	ldr	r0, [r4, #0]
 801279e:	429a      	cmp	r2, r3
 80127a0:	bf24      	itt	cs
 80127a2:	2300      	movcs	r3, #0
 80127a4:	8223      	strhcs	r3, [r4, #16]
 80127a6:	f10d 0207 	add.w	r2, sp, #7
 80127aa:	f10d 0106 	add.w	r1, sp, #6
 80127ae:	f7ff ffcf 	bl	8012750 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 80127b2:	7c23      	ldrb	r3, [r4, #16]
 80127b4:	b913      	cbnz	r3, 80127bc <PixelConfiguration::Validate(unsigned int&)+0x50>
 80127b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80127ba:	7423      	strb	r3, [r4, #16]
 80127bc:	7c63      	ldrb	r3, [r4, #17]
 80127be:	b913      	cbnz	r3, 80127c6 <PixelConfiguration::Validate(unsigned int&)+0x5a>
 80127c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80127c4:	7463      	strb	r3, [r4, #17]
 80127c6:	4b2a      	ldr	r3, [pc, #168]	; (8012870 <PixelConfiguration::Validate(unsigned int&)+0x104>)
 80127c8:	e01e      	b.n	8012808 <PixelConfiguration::Validate(unsigned int&)+0x9c>
 80127ca:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 80127ce:	bf28      	it	cs
 80127d0:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 80127d4:	6063      	str	r3, [r4, #4]
 80127d6:	2303      	movs	r3, #3
 80127d8:	600b      	str	r3, [r1, #0]
 80127da:	f1a0 030b 	sub.w	r3, r0, #11
 80127de:	2b01      	cmp	r3, #1
 80127e0:	d806      	bhi.n	80127f0 <PixelConfiguration::Validate(unsigned int&)+0x84>
 80127e2:	7ca3      	ldrb	r3, [r4, #18]
 80127e4:	2b1f      	cmp	r3, #31
 80127e6:	d83d      	bhi.n	8012864 <PixelConfiguration::Validate(unsigned int&)+0xf8>
 80127e8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80127ec:	74a3      	strb	r3, [r4, #18]
 80127ee:	e001      	b.n	80127f4 <PixelConfiguration::Validate(unsigned int&)+0x88>
 80127f0:	2800      	cmp	r0, #0
 80127f2:	d139      	bne.n	8012868 <PixelConfiguration::Validate(unsigned int&)+0xfc>
 80127f4:	2300      	movs	r3, #0
 80127f6:	2a06      	cmp	r2, #6
 80127f8:	bf08      	it	eq
 80127fa:	60a3      	streq	r3, [r4, #8]
 80127fc:	280d      	cmp	r0, #13
 80127fe:	7563      	strb	r3, [r4, #21]
 8012800:	68e3      	ldr	r3, [r4, #12]
 8012802:	d119      	bne.n	8012838 <PixelConfiguration::Validate(unsigned int&)+0xcc>
 8012804:	b913      	cbnz	r3, 801280c <PixelConfiguration::Validate(unsigned int&)+0xa0>
 8012806:	4b1b      	ldr	r3, [pc, #108]	; (8012874 <PixelConfiguration::Validate(unsigned int&)+0x108>)
 8012808:	60e3      	str	r3, [r4, #12]
 801280a:	e003      	b.n	8012814 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 801280c:	4a1a      	ldr	r2, [pc, #104]	; (8012878 <PixelConfiguration::Validate(unsigned int&)+0x10c>)
 801280e:	4293      	cmp	r3, r2
 8012810:	d900      	bls.n	8012814 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 8012812:	60e2      	str	r2, [r4, #12]
 8012814:	7d23      	ldrb	r3, [r4, #20]
 8012816:	b31b      	cbz	r3, 8012860 <PixelConfiguration::Validate(unsigned int&)+0xf4>
 8012818:	7ce3      	ldrb	r3, [r4, #19]
 801281a:	b9ab      	cbnz	r3, 8012848 <PixelConfiguration::Validate(unsigned int&)+0xdc>
 801281c:	6822      	ldr	r2, [r4, #0]
 801281e:	b17a      	cbz	r2, 8012840 <PixelConfiguration::Validate(unsigned int&)+0xd4>
 8012820:	f1a2 030b 	sub.w	r3, r2, #11
 8012824:	2b01      	cmp	r3, #1
 8012826:	d90d      	bls.n	8012844 <PixelConfiguration::Validate(unsigned int&)+0xd8>
 8012828:	4b14      	ldr	r3, [pc, #80]	; (801287c <PixelConfiguration::Validate(unsigned int&)+0x110>)
 801282a:	4915      	ldr	r1, [pc, #84]	; (8012880 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 801282c:	2a0d      	cmp	r2, #13
 801282e:	bf08      	it	eq
 8012830:	460b      	moveq	r3, r1
 8012832:	61a3      	str	r3, [r4, #24]
 8012834:	b002      	add	sp, #8
 8012836:	bd10      	pop	{r4, pc}
 8012838:	2b00      	cmp	r3, #0
 801283a:	d0e4      	beq.n	8012806 <PixelConfiguration::Validate(unsigned int&)+0x9a>
 801283c:	4a11      	ldr	r2, [pc, #68]	; (8012884 <PixelConfiguration::Validate(unsigned int&)+0x118>)
 801283e:	e7e6      	b.n	801280e <PixelConfiguration::Validate(unsigned int&)+0xa2>
 8012840:	4b11      	ldr	r3, [pc, #68]	; (8012888 <PixelConfiguration::Validate(unsigned int&)+0x11c>)
 8012842:	e7f6      	b.n	8012832 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 8012844:	4b11      	ldr	r3, [pc, #68]	; (801288c <PixelConfiguration::Validate(unsigned int&)+0x120>)
 8012846:	e7f4      	b.n	8012832 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 8012848:	f1a3 0214 	sub.w	r2, r3, #20
 801284c:	2a05      	cmp	r2, #5
 801284e:	d807      	bhi.n	8012860 <PixelConfiguration::Validate(unsigned int&)+0xf4>
 8012850:	3b15      	subs	r3, #21
 8012852:	2b04      	cmp	r3, #4
 8012854:	bf96      	itet	ls
 8012856:	4a0e      	ldrls	r2, [pc, #56]	; (8012890 <PixelConfiguration::Validate(unsigned int&)+0x124>)
 8012858:	4b0e      	ldrhi	r3, [pc, #56]	; (8012894 <PixelConfiguration::Validate(unsigned int&)+0x128>)
 801285a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 801285e:	e7e8      	b.n	8012832 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 8012860:	4b07      	ldr	r3, [pc, #28]	; (8012880 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 8012862:	e7e6      	b.n	8012832 <PixelConfiguration::Validate(unsigned int&)+0xc6>
 8012864:	23ff      	movs	r3, #255	; 0xff
 8012866:	e7c1      	b.n	80127ec <PixelConfiguration::Validate(unsigned int&)+0x80>
 8012868:	280d      	cmp	r0, #13
 801286a:	d18e      	bne.n	801278a <PixelConfiguration::Validate(unsigned int&)+0x1e>
 801286c:	e7c2      	b.n	80127f4 <PixelConfiguration::Validate(unsigned int&)+0x88>
 801286e:	bf00      	nop
 8012870:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8012874:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8012878:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 801287c:	0801ce58 	stmdaeq	r1, {r3, r4, r6, r9, sl, fp, lr, pc}
 8012880:	0801cb58 	stmdaeq	r1, {r3, r4, r6, r8, r9, fp, lr, pc}
 8012884:	017d7840 	cmneq	sp, r0, asr #16
 8012888:	0801d158 	stmdaeq	r1, {r3, r4, r6, r8, ip, lr, pc}
 801288c:	0801d258 	stmdaeq	r1, {r3, r4, r6, r9, ip, lr, pc}
 8012890:	0801cb44 	stmdaeq	r1, {r2, r6, r8, r9, fp, lr, pc}
 8012894:	0801cc58 	stmdaeq	r1, {r3, r4, r6, sl, fp, lr, pc}

08012898 <PixelConfiguration::Print()>:
 8012898:	b513      	push	{r0, r1, r4, lr}
 801289a:	4604      	mov	r4, r0
 801289c:	4827      	ldr	r0, [pc, #156]	; (801293c <PixelConfiguration::Print()+0xa4>)
 801289e:	f7f7 fdfb 	bl	800a498 <printf>
 80128a2:	6820      	ldr	r0, [r4, #0]
 80128a4:	f000 f860 	bl	8012968 <PixelType::GetType(pixel::Type)>
 80128a8:	6822      	ldr	r2, [r4, #0]
 80128aa:	4601      	mov	r1, r0
 80128ac:	4824      	ldr	r0, [pc, #144]	; (8012940 <PixelConfiguration::Print()+0xa8>)
 80128ae:	f7f7 fdf3 	bl	800a498 <printf>
 80128b2:	6861      	ldr	r1, [r4, #4]
 80128b4:	4823      	ldr	r0, [pc, #140]	; (8012944 <PixelConfiguration::Print()+0xac>)
 80128b6:	f7f7 fdef 	bl	800a498 <printf>
 80128ba:	7d63      	ldrb	r3, [r4, #21]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d034      	beq.n	801292a <PixelConfiguration::Print()+0x92>
 80128c0:	68a0      	ldr	r0, [r4, #8]
 80128c2:	f000 f8a9 	bl	8012a18 <PixelType::GetMap(pixel::Map)>
 80128c6:	68a2      	ldr	r2, [r4, #8]
 80128c8:	4601      	mov	r1, r0
 80128ca:	481f      	ldr	r0, [pc, #124]	; (8012948 <PixelConfiguration::Print()+0xb0>)
 80128cc:	f7f7 fde4 	bl	800a498 <printf>
 80128d0:	7c20      	ldrb	r0, [r4, #16]
 80128d2:	f000 f8b7 	bl	8012a44 <PixelType::ConvertTxH(unsigned char)>
 80128d6:	ee10 0a10 	vmov	r0, s0
 80128da:	f7f6 fb5b 	bl	8008f94 <__aeabi_f2d>
 80128de:	460b      	mov	r3, r1
 80128e0:	7c21      	ldrb	r1, [r4, #16]
 80128e2:	9100      	str	r1, [sp, #0]
 80128e4:	4602      	mov	r2, r0
 80128e6:	4819      	ldr	r0, [pc, #100]	; (801294c <PixelConfiguration::Print()+0xb4>)
 80128e8:	f7f7 fdd6 	bl	800a498 <printf>
 80128ec:	7c60      	ldrb	r0, [r4, #17]
 80128ee:	f000 f8a9 	bl	8012a44 <PixelType::ConvertTxH(unsigned char)>
 80128f2:	ee10 0a10 	vmov	r0, s0
 80128f6:	f7f6 fb4d 	bl	8008f94 <__aeabi_f2d>
 80128fa:	460b      	mov	r3, r1
 80128fc:	7c61      	ldrb	r1, [r4, #17]
 80128fe:	9100      	str	r1, [sp, #0]
 8012900:	4602      	mov	r2, r0
 8012902:	4813      	ldr	r0, [pc, #76]	; (8012950 <PixelConfiguration::Print()+0xb8>)
 8012904:	f7f7 fdc8 	bl	800a498 <printf>
 8012908:	7d21      	ldrb	r1, [r4, #20]
 801290a:	4a12      	ldr	r2, [pc, #72]	; (8012954 <PixelConfiguration::Print()+0xbc>)
 801290c:	4b12      	ldr	r3, [pc, #72]	; (8012958 <PixelConfiguration::Print()+0xc0>)
 801290e:	4813      	ldr	r0, [pc, #76]	; (801295c <PixelConfiguration::Print()+0xc4>)
 8012910:	2900      	cmp	r1, #0
 8012912:	bf14      	ite	ne
 8012914:	4611      	movne	r1, r2
 8012916:	4619      	moveq	r1, r3
 8012918:	f7f7 fdbe 	bl	800a498 <printf>
 801291c:	68e1      	ldr	r1, [r4, #12]
 801291e:	4810      	ldr	r0, [pc, #64]	; (8012960 <PixelConfiguration::Print()+0xc8>)
 8012920:	b002      	add	sp, #8
 8012922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012926:	f7f7 bdb7 	b.w	800a498 <printf>
 801292a:	6823      	ldr	r3, [r4, #0]
 801292c:	3b0b      	subs	r3, #11
 801292e:	2b01      	cmp	r3, #1
 8012930:	d8ea      	bhi.n	8012908 <PixelConfiguration::Print()+0x70>
 8012932:	7ca1      	ldrb	r1, [r4, #18]
 8012934:	480b      	ldr	r0, [pc, #44]	; (8012964 <PixelConfiguration::Print()+0xcc>)
 8012936:	f7f7 fdaf 	bl	800a498 <printf>
 801293a:	e7e5      	b.n	8012908 <PixelConfiguration::Print()+0x70>
 801293c:	0801ca8a 	stmdaeq	r1, {r1, r3, r7, r9, fp, lr, pc}
 8012940:	0801ca9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r9, fp, lr, pc}
 8012944:	0801cab3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r9, fp, lr, pc}
 8012948:	0801cac2 	stmdaeq	r1, {r1, r6, r7, r9, fp, lr, pc}
 801294c:	0801cad6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r9, fp, lr, pc}
 8012950:	0801caee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r9, fp, lr, pc}
 8012954:	0801ca83 	stmdaeq	r1, {r0, r1, r7, r9, fp, lr, pc}
 8012958:	0801ca87 	stmdaeq	r1, {r0, r1, r2, r7, r9, fp, lr, pc}
 801295c:	0801cb1d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, fp, lr, pc}
 8012960:	0801cb33 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, fp, lr, pc}
 8012964:	0801cb06 	stmdaeq	r1, {r1, r2, r8, r9, fp, lr, pc}

08012968 <PixelType::GetType(pixel::Type)>:
 8012968:	280d      	cmp	r0, #13
 801296a:	bfda      	itte	le
 801296c:	4b02      	ldrle	r3, [pc, #8]	; (8012978 <PixelType::GetType(pixel::Type)+0x10>)
 801296e:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 8012972:	4802      	ldrgt	r0, [pc, #8]	; (801297c <PixelType::GetType(pixel::Type)+0x14>)
 8012974:	4770      	bx	lr
 8012976:	bf00      	nop
 8012978:	0801d38c 	stmdaeq	r1, {r2, r3, r7, r8, r9, ip, lr, pc}
 801297c:	0801d358 	stmdaeq	r1, {r3, r4, r6, r8, r9, ip, lr, pc}

08012980 <PixelType::GetType(char const*)>:
 8012980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012982:	4c10      	ldr	r4, [pc, #64]	; (80129c4 <PixelType::GetType(char const*)+0x44>)
 8012984:	2300      	movs	r3, #0
 8012986:	1e47      	subs	r7, r0, #1
 8012988:	1e66      	subs	r6, r4, #1
 801298a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 801298e:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 8012992:	2a19      	cmp	r2, #25
 8012994:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012998:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
 801299c:	460d      	mov	r5, r1
 801299e:	bf98      	it	ls
 80129a0:	f101 0520 	addls.w	r5, r1, #32
 80129a4:	f1bc 0f19 	cmp.w	ip, #25
 80129a8:	bf98      	it	ls
 80129aa:	3220      	addls	r2, #32
 80129ac:	42aa      	cmp	r2, r5
 80129ae:	d005      	beq.n	80129bc <PixelType::GetType(char const*)+0x3c>
 80129b0:	3301      	adds	r3, #1
 80129b2:	2b0e      	cmp	r3, #14
 80129b4:	f104 0408 	add.w	r4, r4, #8
 80129b8:	d1e5      	bne.n	8012986 <PixelType::GetType(char const*)+0x6>
 80129ba:	e001      	b.n	80129c0 <PixelType::GetType(char const*)+0x40>
 80129bc:	2900      	cmp	r1, #0
 80129be:	d1e4      	bne.n	801298a <PixelType::GetType(char const*)+0xa>
 80129c0:	4618      	mov	r0, r3
 80129c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129c4:	0801d38c 	stmdaeq	r1, {r2, r3, r7, r8, r9, ip, lr, pc}

080129c8 <PixelType::GetMap(char const*)>:
 80129c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129ca:	4a12      	ldr	r2, [pc, #72]	; (8012a14 <PixelType::GetMap(char const*)+0x4c>)
 80129cc:	2300      	movs	r3, #0
 80129ce:	1e55      	subs	r5, r2, #1
 80129d0:	1e46      	subs	r6, r0, #1
 80129d2:	f102 0c02 	add.w	ip, r2, #2
 80129d6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80129da:	f1a1 0441 	sub.w	r4, r1, #65	; 0x41
 80129de:	2c19      	cmp	r4, #25
 80129e0:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 80129e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80129e8:	460f      	mov	r7, r1
 80129ea:	bf98      	it	ls
 80129ec:	f101 0720 	addls.w	r7, r1, #32
 80129f0:	f1be 0f19 	cmp.w	lr, #25
 80129f4:	bf98      	it	ls
 80129f6:	3420      	addls	r4, #32
 80129f8:	42bc      	cmp	r4, r7
 80129fa:	d006      	beq.n	8012a0a <PixelType::GetMap(char const*)+0x42>
 80129fc:	3301      	adds	r3, #1
 80129fe:	2b06      	cmp	r3, #6
 8012a00:	f102 0204 	add.w	r2, r2, #4
 8012a04:	d1e3      	bne.n	80129ce <PixelType::GetMap(char const*)+0x6>
 8012a06:	4618      	mov	r0, r3
 8012a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a0a:	2900      	cmp	r1, #0
 8012a0c:	d0fb      	beq.n	8012a06 <PixelType::GetMap(char const*)+0x3e>
 8012a0e:	4565      	cmp	r5, ip
 8012a10:	d1e1      	bne.n	80129d6 <PixelType::GetMap(char const*)+0xe>
 8012a12:	e7f8      	b.n	8012a06 <PixelType::GetMap(char const*)+0x3e>
 8012a14:	0801d374 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, ip, lr, pc}

08012a18 <PixelType::GetMap(pixel::Map)>:
 8012a18:	2805      	cmp	r0, #5
 8012a1a:	bfda      	itte	le
 8012a1c:	4b02      	ldrle	r3, [pc, #8]	; (8012a28 <PixelType::GetMap(pixel::Map)+0x10>)
 8012a1e:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 8012a22:	4802      	ldrgt	r0, [pc, #8]	; (8012a2c <PixelType::GetMap(pixel::Map)+0x14>)
 8012a24:	4770      	bx	lr
 8012a26:	bf00      	nop
 8012a28:	0801d374 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, ip, lr, pc}
 8012a2c:	0801d360 	stmdaeq	r1, {r5, r6, r8, r9, ip, lr, pc}

08012a30 <PixelType::GetMap(pixel::Type)>:
 8012a30:	3801      	subs	r0, #1
 8012a32:	2809      	cmp	r0, #9
 8012a34:	bf9a      	itte	ls
 8012a36:	4b02      	ldrls	r3, [pc, #8]	; (8012a40 <PixelType::GetMap(pixel::Type)+0x10>)
 8012a38:	5618      	ldrsbls	r0, [r3, r0]
 8012a3a:	2002      	movhi	r0, #2
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop
 8012a40:	0801d36a 	stmdaeq	r1, {r1, r3, r5, r6, r8, r9, ip, lr, pc}

08012a44 <PixelType::ConvertTxH(unsigned char)>:
 8012a44:	28f0      	cmp	r0, #240	; 0xf0
 8012a46:	d017      	beq.n	8012a78 <PixelType::ConvertTxH(unsigned char)+0x34>
 8012a48:	d80c      	bhi.n	8012a64 <PixelType::ConvertTxH(unsigned char)+0x20>
 8012a4a:	28c0      	cmp	r0, #192	; 0xc0
 8012a4c:	d017      	beq.n	8012a7e <PixelType::ConvertTxH(unsigned char)+0x3a>
 8012a4e:	28e0      	cmp	r0, #224	; 0xe0
 8012a50:	d018      	beq.n	8012a84 <PixelType::ConvertTxH(unsigned char)+0x40>
 8012a52:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8012a98 <PixelType::ConvertTxH(unsigned char)+0x54>
 8012a56:	2880      	cmp	r0, #128	; 0x80
 8012a58:	eef4 7a04 	vmov.f32	s15, #68	; 0x3e200000  0.1562500
 8012a5c:	bf08      	it	eq
 8012a5e:	eeb0 0a67 	vmoveq.f32	s0, s15
 8012a62:	4770      	bx	lr
 8012a64:	28fc      	cmp	r0, #252	; 0xfc
 8012a66:	d010      	beq.n	8012a8a <PixelType::ConvertTxH(unsigned char)+0x46>
 8012a68:	28fe      	cmp	r0, #254	; 0xfe
 8012a6a:	d011      	beq.n	8012a90 <PixelType::ConvertTxH(unsigned char)+0x4c>
 8012a6c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8012a98 <PixelType::ConvertTxH(unsigned char)+0x54>
 8012a70:	28f8      	cmp	r0, #248	; 0xf8
 8012a72:	eef6 7a09 	vmov.f32	s15, #105	; 0x3f480000  0.7812500
 8012a76:	e7f1      	b.n	8012a5c <PixelType::ConvertTxH(unsigned char)+0x18>
 8012a78:	eeb6 0a04 	vmov.f32	s0, #100	; 0x3f200000  0.625
 8012a7c:	4770      	bx	lr
 8012a7e:	eeb5 0a04 	vmov.f32	s0, #84	; 0x3ea00000  0.3125000
 8012a82:	4770      	bx	lr
 8012a84:	eeb5 0a0e 	vmov.f32	s0, #94	; 0x3ef00000  0.4687500
 8012a88:	4770      	bx	lr
 8012a8a:	eeb6 0a0e 	vmov.f32	s0, #110	; 0x3f700000  0.9375000
 8012a8e:	4770      	bx	lr
 8012a90:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8012a9c <PixelType::ConvertTxH(unsigned char)+0x58>
 8012a94:	4770      	bx	lr
 8012a96:	bf00      	nop
 8012a98:	00000000 	andeq	r0, r0, r0
 8012a9c:	3f8c0000 	svccc	0x008c0000

08012aa0 <PixelType::ConvertTxH(float)>:
 8012aa0:	eddf 7a24 	vldr	s15, [pc, #144]	; 8012b34 <PixelType::ConvertTxH(float)+0x94>
 8012aa4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aac:	d433      	bmi.n	8012b16 <PixelType::ConvertTxH(float)+0x76>
 8012aae:	eef4 7a0e 	vmov.f32	s15, #78	; 0x3e700000  0.2343750
 8012ab2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aba:	d42e      	bmi.n	8012b1a <PixelType::ConvertTxH(float)+0x7a>
 8012abc:	eef5 7a09 	vmov.f32	s15, #89	; 0x3ec80000  0.3906250
 8012ac0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac8:	d429      	bmi.n	8012b1e <PixelType::ConvertTxH(float)+0x7e>
 8012aca:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8012b38 <PixelType::ConvertTxH(float)+0x98>
 8012ace:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad6:	d424      	bmi.n	8012b22 <PixelType::ConvertTxH(float)+0x82>
 8012ad8:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012b3c <PixelType::ConvertTxH(float)+0x9c>
 8012adc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ae4:	d41f      	bmi.n	8012b26 <PixelType::ConvertTxH(float)+0x86>
 8012ae6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8012b40 <PixelType::ConvertTxH(float)+0xa0>
 8012aea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af2:	d41a      	bmi.n	8012b2a <PixelType::ConvertTxH(float)+0x8a>
 8012af4:	eddf 7a13 	vldr	s15, [pc, #76]	; 8012b44 <PixelType::ConvertTxH(float)+0xa4>
 8012af8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b00:	d415      	bmi.n	8012b2e <PixelType::ConvertTxH(float)+0x8e>
 8012b02:	eddf 7a11 	vldr	s15, [pc, #68]	; 8012b48 <PixelType::ConvertTxH(float)+0xa8>
 8012b06:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b0e:	bf4c      	ite	mi
 8012b10:	20fe      	movmi	r0, #254	; 0xfe
 8012b12:	2000      	movpl	r0, #0
 8012b14:	4770      	bx	lr
 8012b16:	2000      	movs	r0, #0
 8012b18:	4770      	bx	lr
 8012b1a:	2080      	movs	r0, #128	; 0x80
 8012b1c:	4770      	bx	lr
 8012b1e:	20c0      	movs	r0, #192	; 0xc0
 8012b20:	4770      	bx	lr
 8012b22:	20e0      	movs	r0, #224	; 0xe0
 8012b24:	4770      	bx	lr
 8012b26:	20f0      	movs	r0, #240	; 0xf0
 8012b28:	4770      	bx	lr
 8012b2a:	20f8      	movs	r0, #248	; 0xf8
 8012b2c:	4770      	bx	lr
 8012b2e:	20fc      	movs	r0, #252	; 0xfc
 8012b30:	4770      	bx	lr
 8012b32:	bf00      	nop
 8012b34:	3da00000 	stccc	0, cr0, [r0]
 8012b38:	3f0c0000 	svccc	0x000c0000
 8012b3c:	3f340000 	svccc	0x00340000
 8012b40:	3f5c0000 	svccc	0x005c0000
 8012b44:	3f820000 	svccc	0x00820000
 8012b48:	3f960000 	svccc	0x00960000

08012b4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>:
 8012b4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012b4e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8012b52:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8012b56:	b2d4      	uxtb	r4, r2
 8012b58:	4a10      	ldr	r2, [pc, #64]	; (8012b9c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x50>)
 8012b5a:	4605      	mov	r5, r0
 8012b5c:	6810      	ldr	r0, [r2, #0]
 8012b5e:	6802      	ldr	r2, [r0, #0]
 8012b60:	2a07      	cmp	r2, #7
 8012b62:	d007      	beq.n	8012b74 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x28>
 8012b64:	460a      	mov	r2, r1
 8012b66:	e9cd 6400 	strd	r6, r4, [sp]
 8012b6a:	4629      	mov	r1, r5
 8012b6c:	f000 ff80 	bl	8013a70 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8012b70:	b004      	add	sp, #16
 8012b72:	bd70      	pop	{r4, r5, r6, pc}
 8012b74:	42b3      	cmp	r3, r6
 8012b76:	f04f 0200 	mov.w	r2, #0
 8012b7a:	d10a      	bne.n	8012b92 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x46>
 8012b7c:	42a3      	cmp	r3, r4
 8012b7e:	d108      	bne.n	8012b92 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x46>
 8012b80:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8012b84:	9200      	str	r2, [sp, #0]
 8012b86:	4613      	mov	r3, r2
 8012b88:	460a      	mov	r2, r1
 8012b8a:	4629      	mov	r1, r5
 8012b8c:	f000 fff2 	bl	8013b74 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8012b90:	e7ee      	b.n	8012b70 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x24>
 8012b92:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8012b96:	9600      	str	r6, [sp, #0]
 8012b98:	e7f6      	b.n	8012b88 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x3c>
 8012b9a:	bf00      	nop
 8012b9c:	20001278 	andcs	r1, r0, r8, ror r2

08012ba0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 8012ba0:	b570      	push	{r4, r5, r6, lr}
 8012ba2:	4d07      	ldr	r5, [pc, #28]	; (8012bc0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x20>)
 8012ba4:	4606      	mov	r6, r0
 8012ba6:	2400      	movs	r4, #0
 8012ba8:	682b      	ldr	r3, [r5, #0]
 8012baa:	429c      	cmp	r4, r3
 8012bac:	d300      	bcc.n	8012bb0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x10>
 8012bae:	bd70      	pop	{r4, r5, r6, pc}
 8012bb0:	4621      	mov	r1, r4
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	4630      	mov	r0, r6
 8012bb6:	f7ff ffc9 	bl	8012b4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012bba:	3401      	adds	r4, #1
 8012bbc:	e7f4      	b.n	8012ba8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x8>
 8012bbe:	bf00      	nop
 8012bc0:	20001274 	andcs	r1, r0, r4, ror r2

08012bc4 <PixelPatterns::PixelPatterns(unsigned int)>:
 8012bc4:	4b0c      	ldr	r3, [pc, #48]	; (8012bf8 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 8012bc6:	4a0d      	ldr	r2, [pc, #52]	; (8012bfc <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	b510      	push	{r4, lr}
 8012bcc:	2910      	cmp	r1, #16
 8012bce:	6013      	str	r3, [r2, #0]
 8012bd0:	4a0b      	ldr	r2, [pc, #44]	; (8012c00 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 8012bd2:	bf28      	it	cs
 8012bd4:	2110      	movcs	r1, #16
 8012bd6:	6011      	str	r1, [r2, #0]
 8012bd8:	685a      	ldr	r2, [r3, #4]
 8012bda:	4b0a      	ldr	r3, [pc, #40]	; (8012c04 <PixelPatterns::PixelPatterns(unsigned int)+0x40>)
 8012bdc:	601a      	str	r2, [r3, #0]
 8012bde:	4b0a      	ldr	r3, [pc, #40]	; (8012c08 <PixelPatterns::PixelPatterns(unsigned int)+0x44>)
 8012be0:	681c      	ldr	r4, [r3, #0]
 8012be2:	4b0a      	ldr	r3, [pc, #40]	; (8012c0c <PixelPatterns::PixelPatterns(unsigned int)+0x48>)
 8012be4:	2210      	movs	r2, #16
 8012be6:	2100      	movs	r1, #0
 8012be8:	3a01      	subs	r2, #1
 8012bea:	61d9      	str	r1, [r3, #28]
 8012bec:	601c      	str	r4, [r3, #0]
 8012bee:	6199      	str	r1, [r3, #24]
 8012bf0:	f103 0320 	add.w	r3, r3, #32
 8012bf4:	d1f8      	bne.n	8012be8 <PixelPatterns::PixelPatterns(unsigned int)+0x24>
 8012bf6:	bd10      	pop	{r4, pc}
 8012bf8:	20001288 	andcs	r1, r0, r8, lsl #5
 8012bfc:	20001278 	andcs	r1, r0, r8, ror r2
 8012c00:	2000126c 	andcs	r1, r0, ip, ror #4
 8012c04:	20001274 	andcs	r1, r0, r4, ror r2
 8012c08:	20010694 	mulcs	r1, r4, r6
 8012c0c:	2000106c 	andcs	r1, r0, ip, rrx

08012c10 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8012c10:	2805      	cmp	r0, #5
 8012c12:	bfdd      	ittte	le
 8012c14:	4b02      	ldrle	r3, [pc, #8]	; (8012c20 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8012c16:	220e      	movle	r2, #14
 8012c18:	fb02 3000 	mlale	r0, r2, r0, r3
 8012c1c:	4801      	ldrgt	r0, [pc, #4]	; (8012c24 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 8012c1e:	4770      	bx	lr
 8012c20:	0801d3fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, ip, lr, pc}
 8012c24:	0801d358 	stmdaeq	r1, {r3, r4, r6, r8, r9, ip, lr, pc}

08012c28 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 8012c28:	b5e0      	push	{r5, r6, r7, lr}
 8012c2a:	4608      	mov	r0, r1
 8012c2c:	460d      	mov	r5, r1
 8012c2e:	4617      	mov	r7, r2
 8012c30:	461e      	mov	r6, r3
 8012c32:	f7ff ffb5 	bl	8012ba0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012c36:	4906      	ldr	r1, [pc, #24]	; (8012c50 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x28>)
 8012c38:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	61cb      	str	r3, [r1, #28]
 8012c40:	22ff      	movs	r2, #255	; 0xff
 8012c42:	2300      	movs	r3, #0
 8012c44:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8012c48:	604f      	str	r7, [r1, #4]
 8012c4a:	618e      	str	r6, [r1, #24]
 8012c4c:	bde0      	pop	{r5, r6, r7, pc}
 8012c4e:	bf00      	nop
 8012c50:	2000106c 	andcs	r1, r0, ip, rrx

08012c54 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8012c54:	b5e0      	push	{r5, r6, r7, lr}
 8012c56:	4608      	mov	r0, r1
 8012c58:	460d      	mov	r5, r1
 8012c5a:	461e      	mov	r6, r3
 8012c5c:	4617      	mov	r7, r2
 8012c5e:	f7ff ff9f 	bl	8012ba0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012c62:	4908      	ldr	r1, [pc, #32]	; (8012c84 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8012c64:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012c68:	2302      	movs	r3, #2
 8012c6a:	61cb      	str	r3, [r1, #28]
 8012c6c:	9b04      	ldr	r3, [sp, #16]
 8012c6e:	604b      	str	r3, [r1, #4]
 8012c70:	4b05      	ldr	r3, [pc, #20]	; (8012c88 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	610b      	str	r3, [r1, #16]
 8012c76:	2300      	movs	r3, #0
 8012c78:	614b      	str	r3, [r1, #20]
 8012c7a:	9b05      	ldr	r3, [sp, #20]
 8012c7c:	618b      	str	r3, [r1, #24]
 8012c7e:	e9c1 7602 	strd	r7, r6, [r1, #8]
 8012c82:	bde0      	pop	{r5, r6, r7, pc}
 8012c84:	2000106c 	andcs	r1, r0, ip, rrx
 8012c88:	20001274 	andcs	r1, r0, r4, ror r2

08012c8c <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8012c8c:	b5e0      	push	{r5, r6, r7, lr}
 8012c8e:	4608      	mov	r0, r1
 8012c90:	460d      	mov	r5, r1
 8012c92:	461f      	mov	r7, r3
 8012c94:	4616      	mov	r6, r2
 8012c96:	f7ff ff83 	bl	8012ba0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012c9a:	4907      	ldr	r1, [pc, #28]	; (8012cb8 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8012c9c:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012ca0:	2303      	movs	r3, #3
 8012ca2:	61cb      	str	r3, [r1, #28]
 8012ca4:	4b05      	ldr	r3, [pc, #20]	; (8012cbc <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8012ca6:	604f      	str	r7, [r1, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	610b      	str	r3, [r1, #16]
 8012cac:	2300      	movs	r3, #0
 8012cae:	614b      	str	r3, [r1, #20]
 8012cb0:	9b04      	ldr	r3, [sp, #16]
 8012cb2:	608e      	str	r6, [r1, #8]
 8012cb4:	618b      	str	r3, [r1, #24]
 8012cb6:	bde0      	pop	{r5, r6, r7, pc}
 8012cb8:	2000106c 	andcs	r1, r0, ip, rrx
 8012cbc:	20001274 	andcs	r1, r0, r4, ror r2

08012cc0 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 8012cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cc2:	4608      	mov	r0, r1
 8012cc4:	460d      	mov	r5, r1
 8012cc6:	461f      	mov	r7, r3
 8012cc8:	4616      	mov	r6, r2
 8012cca:	4c14      	ldr	r4, [pc, #80]	; (8012d1c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 8012ccc:	f7ff ff68 	bl	8012ba0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012cd0:	4913      	ldr	r1, [pc, #76]	; (8012d20 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 8012cd2:	6820      	ldr	r0, [r4, #0]
 8012cd4:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012cd8:	2304      	movs	r3, #4
 8012cda:	61cb      	str	r3, [r1, #28]
 8012cdc:	1e43      	subs	r3, r0, #1
 8012cde:	005b      	lsls	r3, r3, #1
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	4d10      	ldr	r5, [pc, #64]	; (8012d24 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x64>)
 8012ce4:	610b      	str	r3, [r1, #16]
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	614b      	str	r3, [r1, #20]
 8012cea:	682b      	ldr	r3, [r5, #0]
 8012cec:	604f      	str	r7, [r1, #4]
 8012cee:	608e      	str	r6, [r1, #8]
 8012cf0:	b97b      	cbnz	r3, 8012d12 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 8012cf2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012cf6:	4298      	cmp	r0, r3
 8012cf8:	bf34      	ite	cc
 8012cfa:	0080      	lslcc	r0, r0, #2
 8012cfc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8012d00:	f005 faa0 	bl	8018244 <operator new[](unsigned int)>
 8012d04:	6823      	ldr	r3, [r4, #0]
 8012d06:	6028      	str	r0, [r5, #0]
 8012d08:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	4298      	cmp	r0, r3
 8012d10:	d100      	bne.n	8012d14 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x54>
 8012d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d14:	f840 2b04 	str.w	r2, [r0], #4
 8012d18:	e7f9      	b.n	8012d0e <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4e>
 8012d1a:	bf00      	nop
 8012d1c:	20001274 	andcs	r1, r0, r4, ror r2
 8012d20:	2000106c 	andcs	r1, r0, ip, rrx
 8012d24:	20001270 	andcs	r1, r0, r0, ror r2

08012d28 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8012d28:	b5e0      	push	{r5, r6, r7, lr}
 8012d2a:	4608      	mov	r0, r1
 8012d2c:	460d      	mov	r5, r1
 8012d2e:	461e      	mov	r6, r3
 8012d30:	4617      	mov	r7, r2
 8012d32:	f7ff ff35 	bl	8012ba0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8012d36:	4908      	ldr	r1, [pc, #32]	; (8012d58 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8012d38:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8012d3c:	2305      	movs	r3, #5
 8012d3e:	61cb      	str	r3, [r1, #28]
 8012d40:	9b05      	ldr	r3, [sp, #20]
 8012d42:	604b      	str	r3, [r1, #4]
 8012d44:	9b04      	ldr	r3, [sp, #16]
 8012d46:	610b      	str	r3, [r1, #16]
 8012d48:	2300      	movs	r3, #0
 8012d4a:	614b      	str	r3, [r1, #20]
 8012d4c:	9b06      	ldr	r3, [sp, #24]
 8012d4e:	618b      	str	r3, [r1, #24]
 8012d50:	e9c1 7602 	strd	r7, r6, [r1, #8]
 8012d54:	bde0      	pop	{r5, r6, r7, pc}
 8012d56:	bf00      	nop
 8012d58:	2000106c 	andcs	r1, r0, ip, rrx

08012d5c <PixelPatterns::Wheel(unsigned char)>:
 8012d5c:	43cb      	mvns	r3, r1
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	2b54      	cmp	r3, #84	; 0x54
 8012d62:	d809      	bhi.n	8012d78 <PixelPatterns::Wheel(unsigned char)+0x1c>
 8012d64:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8012d68:	b2db      	uxtb	r3, r3
 8012d6a:	1e5a      	subs	r2, r3, #1
 8012d6c:	4258      	negs	r0, r3
 8012d6e:	b2d2      	uxtb	r2, r2
 8012d70:	b2c0      	uxtb	r0, r0
 8012d72:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8012d76:	4770      	bx	lr
 8012d78:	2ba9      	cmp	r3, #169	; 0xa9
 8012d7a:	d809      	bhi.n	8012d90 <PixelPatterns::Wheel(unsigned char)+0x34>
 8012d7c:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 8012d80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012d84:	b2c9      	uxtb	r1, r1
 8012d86:	43c8      	mvns	r0, r1
 8012d88:	b2c0      	uxtb	r0, r0
 8012d8a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8012d8e:	4770      	bx	lr
 8012d90:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 8012d94:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012d98:	b2c9      	uxtb	r1, r1
 8012d9a:	0208      	lsls	r0, r1, #8
 8012d9c:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 8012da0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8012da4:	4770      	bx	lr
	...

08012da8 <PixelPatterns::Increment(unsigned int)>:
 8012da8:	4a0d      	ldr	r2, [pc, #52]	; (8012de0 <PixelPatterns::Increment(unsigned int)+0x38>)
 8012daa:	b510      	push	{r4, lr}
 8012dac:	014c      	lsls	r4, r1, #5
 8012dae:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8012db2:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 8012db6:	b930      	cbnz	r0, 8012dc6 <PixelPatterns::Increment(unsigned int)+0x1e>
 8012db8:	690a      	ldr	r2, [r1, #16]
 8012dba:	3301      	adds	r3, #1
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	bf18      	it	ne
 8012dc0:	4618      	movne	r0, r3
 8012dc2:	6148      	str	r0, [r1, #20]
 8012dc4:	bd10      	pop	{r4, pc}
 8012dc6:	b92b      	cbnz	r3, 8012dd4 <PixelPatterns::Increment(unsigned int)+0x2c>
 8012dc8:	4422      	add	r2, r4
 8012dca:	6913      	ldr	r3, [r2, #16]
 8012dcc:	3b01      	subs	r3, #1
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	6153      	str	r3, [r2, #20]
 8012dd2:	e7f7      	b.n	8012dc4 <PixelPatterns::Increment(unsigned int)+0x1c>
 8012dd4:	3b01      	subs	r3, #1
 8012dd6:	614b      	str	r3, [r1, #20]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d1f3      	bne.n	8012dc4 <PixelPatterns::Increment(unsigned int)+0x1c>
 8012ddc:	e7f4      	b.n	8012dc8 <PixelPatterns::Increment(unsigned int)+0x20>
 8012dde:	bf00      	nop
 8012de0:	2000106c 	andcs	r1, r0, ip, rrx

08012de4 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 8012de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012de8:	4b12      	ldr	r3, [pc, #72]	; (8012e34 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>)
 8012dea:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8012e38 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x54>
 8012dee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012df2:	4605      	mov	r5, r0
 8012df4:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8012df8:	460c      	mov	r4, r1
 8012dfa:	2700      	movs	r7, #0
 8012dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8012e00:	b2be      	uxth	r6, r7
 8012e02:	42b3      	cmp	r3, r6
 8012e04:	f107 0701 	add.w	r7, r7, #1
 8012e08:	d805      	bhi.n	8012e16 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 8012e0a:	4621      	mov	r1, r4
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e12:	f7ff bfc9 	b.w	8012da8 <PixelPatterns::Increment(unsigned int)>
 8012e16:	0231      	lsls	r1, r6, #8
 8012e18:	fbb1 f1f3 	udiv	r1, r1, r3
 8012e1c:	4449      	add	r1, r9
 8012e1e:	b2c9      	uxtb	r1, r1
 8012e20:	4628      	mov	r0, r5
 8012e22:	f7ff ff9b 	bl	8012d5c <PixelPatterns::Wheel(unsigned char)>
 8012e26:	4631      	mov	r1, r6
 8012e28:	4602      	mov	r2, r0
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f7ff fe8e 	bl	8012b4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012e30:	e7e4      	b.n	8012dfc <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 8012e32:	bf00      	nop
 8012e34:	2000106c 	andcs	r1, r0, ip, rrx
 8012e38:	20001274 	andcs	r1, r0, r4, ror r2

08012e3c <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 8012e3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e40:	4b13      	ldr	r3, [pc, #76]	; (8012e90 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 8012e42:	4e14      	ldr	r6, [pc, #80]	; (8012e94 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 8012e44:	f8df a050 	ldr.w	sl, [pc, #80]	; 8012e98 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 8012e48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012e4c:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 8012e50:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8012e54:	4605      	mov	r5, r0
 8012e56:	460c      	mov	r4, r1
 8012e58:	f04f 0b00 	mov.w	fp, #0
 8012e5c:	6833      	ldr	r3, [r6, #0]
 8012e5e:	fa1f f18b 	uxth.w	r1, fp
 8012e62:	428b      	cmp	r3, r1
 8012e64:	d805      	bhi.n	8012e72 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 8012e66:	4621      	mov	r1, r4
 8012e68:	4628      	mov	r0, r5
 8012e6a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e6e:	f7ff bf9b 	b.w	8012da8 <PixelPatterns::Increment(unsigned int)>
 8012e72:	eb09 0301 	add.w	r3, r9, r1
 8012e76:	fb0a f303 	mul.w	r3, sl, r3
 8012e7a:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8012e7e:	bf94      	ite	ls
 8012e80:	463a      	movls	r2, r7
 8012e82:	4642      	movhi	r2, r8
 8012e84:	4620      	mov	r0, r4
 8012e86:	f7ff fe61 	bl	8012b4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012e8a:	f10b 0b01 	add.w	fp, fp, #1
 8012e8e:	e7e5      	b.n	8012e5c <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 8012e90:	2000106c 	andcs	r1, r0, ip, rrx
 8012e94:	20001274 	andcs	r1, r0, r4, ror r2
 8012e98:	aaaaaaab 	bge	6abd94c <__stack_size+0x6ab994c>

08012e9c <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 8012e9c:	b538      	push	{r3, r4, r5, lr}
 8012e9e:	4b08      	ldr	r3, [pc, #32]	; (8012ec0 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x24>)
 8012ea0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012ea4:	460c      	mov	r4, r1
 8012ea6:	4605      	mov	r5, r0
 8012ea8:	6959      	ldr	r1, [r3, #20]
 8012eaa:	689a      	ldr	r2, [r3, #8]
 8012eac:	4620      	mov	r0, r4
 8012eae:	f7ff fe4d 	bl	8012b4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012eb2:	4621      	mov	r1, r4
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eba:	f7ff bf75 	b.w	8012da8 <PixelPatterns::Increment(unsigned int)>
 8012ebe:	bf00      	nop
 8012ec0:	2000106c 	andcs	r1, r0, ip, rrx

08012ec4 <PixelPatterns::ScannerUpdate(unsigned int)>:
 8012ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ec8:	4b29      	ldr	r3, [pc, #164]	; (8012f70 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>)
 8012eca:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8012f74 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 8012ece:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8012f78 <PixelPatterns::ScannerUpdate(unsigned int)+0xb4>
 8012ed2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012ed6:	e9d3 7604 	ldrd	r7, r6, [r3, #16]
 8012eda:	b085      	sub	sp, #20
 8012edc:	689d      	ldr	r5, [r3, #8]
 8012ede:	00b3      	lsls	r3, r6, #2
 8012ee0:	4680      	mov	r8, r0
 8012ee2:	9301      	str	r3, [sp, #4]
 8012ee4:	4608      	mov	r0, r1
 8012ee6:	f04f 0900 	mov.w	r9, #0
 8012eea:	1bbf      	subs	r7, r7, r6
 8012eec:	f8da 2000 	ldr.w	r2, [sl]
 8012ef0:	fa1f f489 	uxth.w	r4, r9
 8012ef4:	42a2      	cmp	r2, r4
 8012ef6:	d806      	bhi.n	8012f06 <PixelPatterns::ScannerUpdate(unsigned int)+0x42>
 8012ef8:	4601      	mov	r1, r0
 8012efa:	4640      	mov	r0, r8
 8012efc:	b005      	add	sp, #20
 8012efe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f02:	f7ff bf51 	b.w	8012da8 <PixelPatterns::Increment(unsigned int)>
 8012f06:	42a6      	cmp	r6, r4
 8012f08:	d10c      	bne.n	8012f24 <PixelPatterns::ScannerUpdate(unsigned int)+0x60>
 8012f0a:	462a      	mov	r2, r5
 8012f0c:	4631      	mov	r1, r6
 8012f0e:	9002      	str	r0, [sp, #8]
 8012f10:	f7ff fe1c 	bl	8012b4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012f14:	f8db 2000 	ldr.w	r2, [fp]
 8012f18:	9b01      	ldr	r3, [sp, #4]
 8012f1a:	50d5      	str	r5, [r2, r3]
 8012f1c:	9802      	ldr	r0, [sp, #8]
 8012f1e:	f109 0901 	add.w	r9, r9, #1
 8012f22:	e7e3      	b.n	8012eec <PixelPatterns::ScannerUpdate(unsigned int)+0x28>
 8012f24:	42a7      	cmp	r7, r4
 8012f26:	d109      	bne.n	8012f3c <PixelPatterns::ScannerUpdate(unsigned int)+0x78>
 8012f28:	462a      	mov	r2, r5
 8012f2a:	4639      	mov	r1, r7
 8012f2c:	9002      	str	r0, [sp, #8]
 8012f2e:	f7ff fe0d 	bl	8012b4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012f32:	f8db 2000 	ldr.w	r2, [fp]
 8012f36:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8012f3a:	e7ef      	b.n	8012f1c <PixelPatterns::ScannerUpdate(unsigned int)+0x58>
 8012f3c:	f8db 2000 	ldr.w	r2, [fp]
 8012f40:	9002      	str	r0, [sp, #8]
 8012f42:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8012f46:	f3c1 2246 	ubfx	r2, r1, #9, #7
 8012f4a:	f3c1 4c46 	ubfx	ip, r1, #17, #7
 8012f4e:	0212      	lsls	r2, r2, #8
 8012f50:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8012f54:	f3c1 0146 	ubfx	r1, r1, #1, #7
 8012f58:	430a      	orrs	r2, r1
 8012f5a:	4621      	mov	r1, r4
 8012f5c:	9203      	str	r2, [sp, #12]
 8012f5e:	f7ff fdf5 	bl	8012b4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012f62:	f8db 1000 	ldr.w	r1, [fp]
 8012f66:	9a03      	ldr	r2, [sp, #12]
 8012f68:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8012f6c:	e7d6      	b.n	8012f1c <PixelPatterns::ScannerUpdate(unsigned int)+0x58>
 8012f6e:	bf00      	nop
 8012f70:	2000106c 	andcs	r1, r0, ip, rrx
 8012f74:	20001274 	andcs	r1, r0, r4, ror r2
 8012f78:	20001270 	andcs	r1, r0, r0, ror r2

08012f7c <PixelPatterns::FadeUpdate(unsigned int)>:
 8012f7c:	4a20      	ldr	r2, [pc, #128]	; (8013000 <PixelPatterns::FadeUpdate(unsigned int)+0x84>)
 8012f7e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8012f82:	e9d2 c302 	ldrd	ip, r3, [r2, #8]
 8012f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f8a:	460e      	mov	r6, r1
 8012f8c:	e9d2 1704 	ldrd	r1, r7, [r2, #16]
 8012f90:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012f94:	f3cc 2407 	ubfx	r4, ip, #8, #8
 8012f98:	437a      	muls	r2, r7
 8012f9a:	4605      	mov	r5, r0
 8012f9c:	1bc8      	subs	r0, r1, r7
 8012f9e:	fb00 2204 	mla	r2, r0, r4, r2
 8012fa2:	f3c3 4407 	ubfx	r4, r3, #16, #8
 8012fa6:	f3cc 4e07 	ubfx	lr, ip, #16, #8
 8012faa:	437c      	muls	r4, r7
 8012fac:	fb00 440e 	mla	r4, r0, lr, r4
 8012fb0:	b2db      	uxtb	r3, r3
 8012fb2:	fbb2 f2f1 	udiv	r2, r2, r1
 8012fb6:	fbb4 f4f1 	udiv	r4, r4, r1
 8012fba:	0212      	lsls	r2, r2, #8
 8012fbc:	0424      	lsls	r4, r4, #16
 8012fbe:	437b      	muls	r3, r7
 8012fc0:	b292      	uxth	r2, r2
 8012fc2:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8012fc6:	fa5f fc8c 	uxtb.w	ip, ip
 8012fca:	4314      	orrs	r4, r2
 8012fcc:	fb00 330c 	mla	r3, r0, ip, r3
 8012fd0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8013004 <PixelPatterns::FadeUpdate(unsigned int)+0x88>
 8012fd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8012fd8:	b2db      	uxtb	r3, r3
 8012fda:	431c      	orrs	r4, r3
 8012fdc:	2700      	movs	r7, #0
 8012fde:	f8d8 3000 	ldr.w	r3, [r8]
 8012fe2:	429f      	cmp	r7, r3
 8012fe4:	d305      	bcc.n	8012ff2 <PixelPatterns::FadeUpdate(unsigned int)+0x76>
 8012fe6:	4631      	mov	r1, r6
 8012fe8:	4628      	mov	r0, r5
 8012fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fee:	f7ff bedb 	b.w	8012da8 <PixelPatterns::Increment(unsigned int)>
 8012ff2:	4639      	mov	r1, r7
 8012ff4:	4622      	mov	r2, r4
 8012ff6:	4630      	mov	r0, r6
 8012ff8:	f7ff fda8 	bl	8012b4c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8012ffc:	3701      	adds	r7, #1
 8012ffe:	e7ee      	b.n	8012fde <PixelPatterns::FadeUpdate(unsigned int)+0x62>
 8013000:	2000106c 	andcs	r1, r0, ip, rrx
 8013004:	20001274 	andcs	r1, r0, r4, ror r2

08013008 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 8013008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801300a:	4b12      	ldr	r3, [pc, #72]	; (8013054 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 801300c:	014e      	lsls	r6, r1, #5
 801300e:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 8013012:	599c      	ldr	r4, [r3, r6]
 8013014:	686f      	ldr	r7, [r5, #4]
 8013016:	1b14      	subs	r4, r2, r4
 8013018:	42bc      	cmp	r4, r7
 801301a:	d319      	bcc.n	8013050 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 801301c:	519a      	str	r2, [r3, r6]
 801301e:	69eb      	ldr	r3, [r5, #28]
 8013020:	3b01      	subs	r3, #1
 8013022:	2b04      	cmp	r3, #4
 8013024:	d814      	bhi.n	8013050 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8013026:	e8df f003 	tbb	[pc, r3]
 801302a:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 801302e:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 8013032:	fed8 2001 	cdp2	0, 13, cr2, cr8, cr1, {0}
 8013036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013038:	f7ff ff00 	bl	8012e3c <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 801303c:	e7fa      	b.n	8013034 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 801303e:	f7ff ff2d 	bl	8012e9c <PixelPatterns::ColourWipeUpdate(unsigned int)>
 8013042:	e7f7      	b.n	8013034 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8013044:	f7ff ff3e 	bl	8012ec4 <PixelPatterns::ScannerUpdate(unsigned int)>
 8013048:	e7f4      	b.n	8013034 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 801304a:	f7ff ff97 	bl	8012f7c <PixelPatterns::FadeUpdate(unsigned int)>
 801304e:	e7f1      	b.n	8013034 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8013050:	2000      	movs	r0, #0
 8013052:	e7f0      	b.n	8013036 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 8013054:	2000106c 	andcs	r1, r0, ip, rrx

08013058 <PixelPatterns::Run()>:
 8013058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801305c:	4f11      	ldr	r7, [pc, #68]	; (80130a4 <PixelPatterns::Run()+0x4c>)
 801305e:	4606      	mov	r6, r0
 8013060:	6838      	ldr	r0, [r7, #0]
 8013062:	f000 fc85 	bl	8013970 <WS28xxMulti::IsUpdating()>
 8013066:	4604      	mov	r4, r0
 8013068:	b9c8      	cbnz	r0, 801309e <PixelPatterns::Run()+0x46>
 801306a:	4b0f      	ldr	r3, [pc, #60]	; (80130a8 <PixelPatterns::Run()+0x50>)
 801306c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80130ac <PixelPatterns::Run()+0x54>
 8013070:	f8d3 9000 	ldr.w	r9, [r3]
 8013074:	4605      	mov	r5, r0
 8013076:	f8d8 3000 	ldr.w	r3, [r8]
 801307a:	b2e9      	uxtb	r1, r5
 801307c:	428b      	cmp	r3, r1
 801307e:	f105 0501 	add.w	r5, r5, #1
 8013082:	d805      	bhi.n	8013090 <PixelPatterns::Run()+0x38>
 8013084:	b15c      	cbz	r4, 801309e <PixelPatterns::Run()+0x46>
 8013086:	6838      	ldr	r0, [r7, #0]
 8013088:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801308c:	f000 bb0a 	b.w	80136a4 <WS28xxMulti::Update()>
 8013090:	464a      	mov	r2, r9
 8013092:	4630      	mov	r0, r6
 8013094:	f7ff ffb8 	bl	8013008 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 8013098:	4320      	orrs	r0, r4
 801309a:	b2c4      	uxtb	r4, r0
 801309c:	e7eb      	b.n	8013076 <PixelPatterns::Run()+0x1e>
 801309e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130a2:	bf00      	nop
 80130a4:	20001278 	andcs	r1, r0, r8, ror r2
 80130a8:	20010694 	mulcs	r1, r4, r6
 80130ac:	2000126c 	andcs	r1, r0, ip, ror #4

080130b0 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>:
 80130b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130b2:	4c20      	ldr	r4, [pc, #128]	; (8013134 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]+0x84>)
 80130b4:	f89d e014 	ldrb.w	lr, [sp, #20]
 80130b8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80130bc:	eb04 1181 	add.w	r1, r4, r1, lsl #6
 80130c0:	4c1d      	ldr	r4, [pc, #116]	; (8013138 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]+0x88>)
 80130c2:	b2c0      	uxtb	r0, r0
 80130c4:	440c      	add	r4, r1
 80130c6:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 80130ca:	f100 6008 	add.w	r0, r0, #142606336	; 0x8800000
 80130ce:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80130d2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80130d6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80130da:	0089      	lsls	r1, r1, #2
 80130dc:	2080      	movs	r0, #128	; 0x80
 80130de:	2601      	movs	r6, #1
 80130e0:	ea12 0400 	ands.w	r4, r2, r0
 80130e4:	bf0b      	itete	eq
 80130e6:	f5ac 67c0 	subeq.w	r7, ip, #1536	; 0x600
 80130ea:	f5ac 64c0 	subne.w	r4, ip, #1536	; 0x600
 80130ee:	603c      	streq	r4, [r7, #0]
 80130f0:	6026      	strne	r6, [r4, #0]
 80130f2:	ea13 0400 	ands.w	r4, r3, r0
 80130f6:	bf0b      	itete	eq
 80130f8:	f5ac 6780 	subeq.w	r7, ip, #1024	; 0x400
 80130fc:	f5ac 6480 	subne.w	r4, ip, #1024	; 0x400
 8013100:	603c      	streq	r4, [r7, #0]
 8013102:	6026      	strne	r6, [r4, #0]
 8013104:	ea1e 0400 	ands.w	r4, lr, r0
 8013108:	bf15      	itete	ne
 801310a:	f5ac 7400 	subne.w	r4, ip, #512	; 0x200
 801310e:	f5ac 7700 	subeq.w	r7, ip, #512	; 0x200
 8013112:	6026      	strne	r6, [r4, #0]
 8013114:	603c      	streq	r4, [r7, #0]
 8013116:	ea15 0400 	ands.w	r4, r5, r0
 801311a:	bf14      	ite	ne
 801311c:	f8cc 6000 	strne.w	r6, [ip]
 8013120:	f8cc 4000 	streq.w	r4, [ip]
 8013124:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8013128:	4561      	cmp	r1, ip
 801312a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801312e:	d1d7      	bne.n	80130e0 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]+0x30>
 8013130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013132:	bf00      	nop
 8013134:	2000128c 	andcs	r1, r0, ip, lsl #5
 8013138:	e1100030 	tst	r0, r0, lsr r0

0801313c <TIMER3_IRQHandler>:
 801313c:	f3bf 8f5f 	dmb	sy
 8013140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013144:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 8013148:	0791      	lsls	r1, r2, #30
 801314a:	d51e      	bpl.n	801318a <TIMER3_IRQHandler+0x4e>
 801314c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8013150:	f021 0101 	bic.w	r1, r1, #1
 8013154:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
 8013158:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 801315c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8013160:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 8013164:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 8013168:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 801316c:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 8013170:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 8013174:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8013178:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 801317c:	4b07      	ldr	r3, [pc, #28]	; (801319c <TIMER3_IRQHandler+0x60>)
 801317e:	2100      	movs	r1, #0
 8013180:	7019      	strb	r1, [r3, #0]
 8013182:	4b07      	ldr	r3, [pc, #28]	; (80131a0 <TIMER3_IRQHandler+0x64>)
 8013184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013188:	6299      	str	r1, [r3, #40]	; 0x28
 801318a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801318e:	43d2      	mvns	r2, r2
 8013190:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
 8013194:	f3bf 8f5f 	dmb	sy
 8013198:	4770      	bx	lr
 801319a:	bf00      	nop
 801319c:	20001284 	andcs	r1, r0, r4, lsl #5
 80131a0:	40021000 	andmi	r1, r2, r0

080131a4 <WS28xxMulti::~WS28xxMulti()>:
 80131a4:	4b01      	ldr	r3, [pc, #4]	; (80131ac <WS28xxMulti::~WS28xxMulti()+0x8>)
 80131a6:	2200      	movs	r2, #0
 80131a8:	601a      	str	r2, [r3, #0]
 80131aa:	4770      	bx	lr
 80131ac:	20001288 	andcs	r1, r0, r8, lsl #5

080131b0 <WS28xxMulti::Setup(unsigned char, unsigned char)>:
 80131b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131b4:	4680      	mov	r8, r0
 80131b6:	b08e      	sub	sp, #56	; 0x38
 80131b8:	4608      	mov	r0, r1
 80131ba:	4614      	mov	r4, r2
 80131bc:	f007 fcc8 	bl	801ab50 <__popcountsi2>
 80131c0:	4607      	mov	r7, r0
 80131c2:	4620      	mov	r0, r4
 80131c4:	f007 fcc4 	bl	801ab50 <__popcountsi2>
 80131c8:	4c70      	ldr	r4, [pc, #448]	; (801338c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1dc>)
 80131ca:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80133a0 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1f0>
 80131ce:	4606      	mov	r6, r0
 80131d0:	f241 0001 	movw	r0, #4097	; 0x1001
 80131d4:	f006 f880 	bl	80192d8 <rcu_periph_clock_enable>
 80131d8:	4620      	mov	r0, r4
 80131da:	f006 f939 	bl	8019450 <timer_deinit>
 80131de:	2500      	movs	r5, #0
 80131e0:	23f9      	movs	r3, #249	; 0xf9
 80131e2:	a901      	add	r1, sp, #4
 80131e4:	4620      	mov	r0, r4
 80131e6:	9303      	str	r3, [sp, #12]
 80131e8:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80131ec:	f006 f9d6 	bl	801959c <timer_init>
 80131f0:	4620      	mov	r0, r4
 80131f2:	2101      	movs	r1, #1
 80131f4:	f006 fb7e 	bl	80198f4 <timer_master_slave_mode_config>
 80131f8:	4620      	mov	r0, r4
 80131fa:	2130      	movs	r1, #48	; 0x30
 80131fc:	f006 fb6a 	bl	80198d4 <timer_master_output_trigger_source_select>
 8013200:	4629      	mov	r1, r5
 8013202:	4620      	mov	r0, r4
 8013204:	2210      	movs	r2, #16
 8013206:	f006 fb03 	bl	8019810 <timer_channel_output_mode_config>
 801320a:	4620      	mov	r0, r4
 801320c:	2210      	movs	r2, #16
 801320e:	2102      	movs	r1, #2
 8013210:	f006 fafe 	bl	8019810 <timer_channel_output_mode_config>
 8013214:	4620      	mov	r0, r4
 8013216:	2210      	movs	r2, #16
 8013218:	2103      	movs	r1, #3
 801321a:	f006 faf9 	bl	8019810 <timer_channel_output_mode_config>
 801321e:	f04f 09fa 	mov.w	r9, #250	; 0xfa
 8013222:	4629      	mov	r1, r5
 8013224:	4620      	mov	r0, r4
 8013226:	2201      	movs	r2, #1
 8013228:	f006 fb18 	bl	801985c <timer_channel_output_pulse_value_config>
 801322c:	fb09 f207 	mul.w	r2, r9, r7
 8013230:	4620      	mov	r0, r4
 8013232:	08d2      	lsrs	r2, r2, #3
 8013234:	2102      	movs	r1, #2
 8013236:	f006 fb11 	bl	801985c <timer_channel_output_pulse_value_config>
 801323a:	fb09 f206 	mul.w	r2, r9, r6
 801323e:	08d2      	lsrs	r2, r2, #3
 8013240:	2103      	movs	r1, #3
 8013242:	4620      	mov	r0, r4
 8013244:	f006 fb0a 	bl	801985c <timer_channel_output_pulse_value_config>
 8013248:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 801324c:	f241 0002 	movw	r0, #4098	; 0x1002
 8013250:	f006 f842 	bl	80192d8 <rcu_periph_clock_enable>
 8013254:	4620      	mov	r0, r4
 8013256:	f006 f8fb 	bl	8019450 <timer_deinit>
 801325a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801325e:	a901      	add	r1, sp, #4
 8013260:	4620      	mov	r0, r4
 8013262:	9303      	str	r3, [sp, #12]
 8013264:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8013268:	f006 f998 	bl	801959c <timer_init>
 801326c:	4620      	mov	r0, r4
 801326e:	2101      	movs	r1, #1
 8013270:	f006 fb40 	bl	80198f4 <timer_master_slave_mode_config>
 8013274:	4620      	mov	r0, r4
 8013276:	2107      	movs	r1, #7
 8013278:	f006 fb34 	bl	80198e4 <timer_slave_mode_select>
 801327c:	4620      	mov	r0, r4
 801327e:	2120      	movs	r1, #32
 8013280:	f006 fb20 	bl	80198c4 <timer_input_trigger_source_select>
 8013284:	4629      	mov	r1, r5
 8013286:	4620      	mov	r0, r4
 8013288:	2210      	movs	r2, #16
 801328a:	f006 fac1 	bl	8019810 <timer_channel_output_mode_config>
 801328e:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8013292:	4629      	mov	r1, r5
 8013294:	3201      	adds	r2, #1
 8013296:	4620      	mov	r0, r4
 8013298:	f006 fae0 	bl	801985c <timer_channel_output_pulse_value_config>
 801329c:	2102      	movs	r1, #2
 801329e:	4620      	mov	r0, r4
 80132a0:	f006 f9bf 	bl	8019622 <timer_interrupt_enable>
 80132a4:	4b3a      	ldr	r3, [pc, #232]	; (8013390 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1e0>)
 80132a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80132aa:	f504 3416 	add.w	r4, r4, #153600	; 0x25800
 80132ae:	f883 531e 	strb.w	r5, [r3, #798]	; 0x31e
 80132b2:	f640 4015 	movw	r0, #3093	; 0xc15
 80132b6:	601a      	str	r2, [r3, #0]
 80132b8:	f006 f80e 	bl	80192d8 <rcu_periph_clock_enable>
 80132bc:	2104      	movs	r1, #4
 80132be:	4620      	mov	r0, r4
 80132c0:	f005 fac0 	bl	8018844 <dma_deinit>
 80132c4:	a805      	add	r0, sp, #20
 80132c6:	f005 fae8 	bl	801889a <dma_single_data_para_struct_init>
 80132ca:	4b32      	ldr	r3, [pc, #200]	; (8013394 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1e4>)
 80132cc:	f8cd a01c 	str.w	sl, [sp, #28]
 80132d0:	2601      	movs	r6, #1
 80132d2:	f04f 0940 	mov.w	r9, #64	; 0x40
 80132d6:	f44f 6800 	mov.w	r8, #2048	; 0x800
 80132da:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 80132de:	aa05      	add	r2, sp, #20
 80132e0:	4620      	mov	r0, r4
 80132e2:	2104      	movs	r1, #4
 80132e4:	e9cd 3605 	strd	r3, r6, [sp, #20]
 80132e8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80132ec:	9608      	str	r6, [sp, #32]
 80132ee:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80132f2:	970d      	str	r7, [sp, #52]	; 0x34
 80132f4:	f005 fadd 	bl	80188b2 <dma_single_data_mode_init>
 80132f8:	4620      	mov	r0, r4
 80132fa:	2104      	movs	r1, #4
 80132fc:	f005 fb18 	bl	8018930 <dma_circulation_disable>
 8013300:	2205      	movs	r2, #5
 8013302:	4620      	mov	r0, r4
 8013304:	2104      	movs	r1, #4
 8013306:	f005 fb1b 	bl	8018940 <dma_channel_subperipheral_select>
 801330a:	2107      	movs	r1, #7
 801330c:	4620      	mov	r0, r4
 801330e:	f005 fa99 	bl	8018844 <dma_deinit>
 8013312:	a805      	add	r0, sp, #20
 8013314:	f005 fac1 	bl	801889a <dma_single_data_para_struct_init>
 8013318:	4b1f      	ldr	r3, [pc, #124]	; (8013398 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1e8>)
 801331a:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 801331e:	e9cd 3507 	strd	r3, r5, [sp, #28]
 8013322:	4d1e      	ldr	r5, [pc, #120]	; (801339c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1ec>)
 8013324:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8013328:	aa05      	add	r2, sp, #20
 801332a:	4620      	mov	r0, r4
 801332c:	2107      	movs	r1, #7
 801332e:	e9cd 5605 	strd	r5, r6, [sp, #20]
 8013332:	970d      	str	r7, [sp, #52]	; 0x34
 8013334:	f005 fabd 	bl	80188b2 <dma_single_data_mode_init>
 8013338:	4620      	mov	r0, r4
 801333a:	2107      	movs	r1, #7
 801333c:	f005 faf8 	bl	8018930 <dma_circulation_disable>
 8013340:	2205      	movs	r2, #5
 8013342:	4620      	mov	r0, r4
 8013344:	2107      	movs	r1, #7
 8013346:	f005 fafb 	bl	8018940 <dma_channel_subperipheral_select>
 801334a:	2102      	movs	r1, #2
 801334c:	4620      	mov	r0, r4
 801334e:	f005 fa79 	bl	8018844 <dma_deinit>
 8013352:	a805      	add	r0, sp, #20
 8013354:	f005 faa1 	bl	801889a <dma_single_data_para_struct_init>
 8013358:	aa05      	add	r2, sp, #20
 801335a:	4620      	mov	r0, r4
 801335c:	2102      	movs	r1, #2
 801335e:	e9cd a607 	strd	sl, r6, [sp, #28]
 8013362:	e9cd 5605 	strd	r5, r6, [sp, #20]
 8013366:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 801336a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801336e:	970d      	str	r7, [sp, #52]	; 0x34
 8013370:	f005 fa9f 	bl	80188b2 <dma_single_data_mode_init>
 8013374:	4620      	mov	r0, r4
 8013376:	2102      	movs	r1, #2
 8013378:	f005 fada 	bl	8018930 <dma_circulation_disable>
 801337c:	2205      	movs	r2, #5
 801337e:	2102      	movs	r1, #2
 8013380:	4620      	mov	r0, r4
 8013382:	f005 fadd 	bl	8018940 <dma_channel_subperipheral_select>
 8013386:	b00e      	add	sp, #56	; 0x38
 8013388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801338c:	40000400 	andmi	r0, r0, r0, lsl #8
 8013390:	e000e100 	and	lr, r0, r0, lsl #2
 8013394:	40021018 	andmi	r1, r2, r8, lsl r0
 8013398:	2000128c 	andcs	r1, r0, ip, lsl #5
 801339c:	40021028 	andmi	r1, r2, r8, lsr #32
 80133a0:	0801d450 	stmdaeq	r1, {r4, r6, sl, ip, lr, pc}

080133a4 <WS28xxMulti::Setup(unsigned int)>:
 80133a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133a8:	4680      	mov	r8, r0
 80133aa:	b092      	sub	sp, #72	; 0x48
 80133ac:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80133b0:	460c      	mov	r4, r1
 80133b2:	f005 ff91 	bl	80192d8 <rcu_periph_clock_enable>
 80133b6:	4882      	ldr	r0, [pc, #520]	; (80135c0 <WS28xxMulti::Setup(unsigned int)+0x21c>)
 80133b8:	4d82      	ldr	r5, [pc, #520]	; (80135c4 <WS28xxMulti::Setup(unsigned int)+0x220>)
 80133ba:	2340      	movs	r3, #64	; 0x40
 80133bc:	2200      	movs	r2, #0
 80133be:	2102      	movs	r1, #2
 80133c0:	f005 ff0e 	bl	80191e0 <gpio_mode_set>
 80133c4:	2340      	movs	r3, #64	; 0x40
 80133c6:	487e      	ldr	r0, [pc, #504]	; (80135c0 <WS28xxMulti::Setup(unsigned int)+0x21c>)
 80133c8:	2202      	movs	r2, #2
 80133ca:	2100      	movs	r1, #0
 80133cc:	f005 ff28 	bl	8019220 <gpio_output_options_set>
 80133d0:	2240      	movs	r2, #64	; 0x40
 80133d2:	2102      	movs	r1, #2
 80133d4:	487a      	ldr	r0, [pc, #488]	; (80135c0 <WS28xxMulti::Setup(unsigned int)+0x21c>)
 80133d6:	f005 ff3e 	bl	8019256 <gpio_af_set>
 80133da:	fbb5 f5f4 	udiv	r5, r5, r4
 80133de:	f241 0001 	movw	r0, #4097	; 0x1001
 80133e2:	2d0c      	cmp	r5, #12
 80133e4:	bf38      	it	cc
 80133e6:	250c      	movcc	r5, #12
 80133e8:	f005 ff76 	bl	80192d8 <rcu_periph_clock_enable>
 80133ec:	4876      	ldr	r0, [pc, #472]	; (80135c8 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80133ee:	2400      	movs	r4, #0
 80133f0:	f006 f82e 	bl	8019450 <timer_deinit>
 80133f4:	1e6b      	subs	r3, r5, #1
 80133f6:	4874      	ldr	r0, [pc, #464]	; (80135c8 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80133f8:	9307      	str	r3, [sp, #28]
 80133fa:	a905      	add	r1, sp, #20
 80133fc:	2602      	movs	r6, #2
 80133fe:	2701      	movs	r7, #1
 8013400:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8013404:	f88d 4020 	strb.w	r4, [sp, #32]
 8013408:	f006 f8c8 	bl	801959c <timer_init>
 801340c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013410:	486d      	ldr	r0, [pc, #436]	; (80135c8 <WS28xxMulti::Setup(unsigned int)+0x224>)
 8013412:	9304      	str	r3, [sp, #16]
 8013414:	aa02      	add	r2, sp, #8
 8013416:	4621      	mov	r1, r4
 8013418:	e9cd 7602 	strd	r7, r6, [sp, #8]
 801341c:	f006 f910 	bl	8019640 <timer_channel_output_config>
 8013420:	fa25 f207 	lsr.w	r2, r5, r7
 8013424:	4868      	ldr	r0, [pc, #416]	; (80135c8 <WS28xxMulti::Setup(unsigned int)+0x224>)
 8013426:	3a01      	subs	r2, #1
 8013428:	4621      	mov	r1, r4
 801342a:	f006 fa17 	bl	801985c <timer_channel_output_pulse_value_config>
 801342e:	4866      	ldr	r0, [pc, #408]	; (80135c8 <WS28xxMulti::Setup(unsigned int)+0x224>)
 8013430:	2260      	movs	r2, #96	; 0x60
 8013432:	4621      	mov	r1, r4
 8013434:	f006 f9ec 	bl	8019810 <timer_channel_output_mode_config>
 8013438:	4863      	ldr	r0, [pc, #396]	; (80135c8 <WS28xxMulti::Setup(unsigned int)+0x224>)
 801343a:	4622      	mov	r2, r4
 801343c:	4621      	mov	r1, r4
 801343e:	f006 fa1b 	bl	8019878 <timer_channel_output_shadow_config>
 8013442:	4861      	ldr	r0, [pc, #388]	; (80135c8 <WS28xxMulti::Setup(unsigned int)+0x224>)
 8013444:	2210      	movs	r2, #16
 8013446:	4631      	mov	r1, r6
 8013448:	f006 f9e2 	bl	8019810 <timer_channel_output_mode_config>
 801344c:	485e      	ldr	r0, [pc, #376]	; (80135c8 <WS28xxMulti::Setup(unsigned int)+0x224>)
 801344e:	2210      	movs	r2, #16
 8013450:	2103      	movs	r1, #3
 8013452:	f006 f9dd 	bl	8019810 <timer_channel_output_mode_config>
 8013456:	485c      	ldr	r0, [pc, #368]	; (80135c8 <WS28xxMulti::Setup(unsigned int)+0x224>)
 8013458:	463a      	mov	r2, r7
 801345a:	4631      	mov	r1, r6
 801345c:	f006 f9fe 	bl	801985c <timer_channel_output_pulse_value_config>
 8013460:	fa25 f206 	lsr.w	r2, r5, r6
 8013464:	3a01      	subs	r2, #1
 8013466:	4858      	ldr	r0, [pc, #352]	; (80135c8 <WS28xxMulti::Setup(unsigned int)+0x224>)
 8013468:	2103      	movs	r1, #3
 801346a:	f006 f9f7 	bl	801985c <timer_channel_output_pulse_value_config>
 801346e:	4856      	ldr	r0, [pc, #344]	; (80135c8 <WS28xxMulti::Setup(unsigned int)+0x224>)
 8013470:	4639      	mov	r1, r7
 8013472:	f006 fa3f 	bl	80198f4 <timer_master_slave_mode_config>
 8013476:	2130      	movs	r1, #48	; 0x30
 8013478:	4853      	ldr	r0, [pc, #332]	; (80135c8 <WS28xxMulti::Setup(unsigned int)+0x224>)
 801347a:	f006 fa2b 	bl	80198d4 <timer_master_output_trigger_source_select>
 801347e:	f241 0002 	movw	r0, #4098	; 0x1002
 8013482:	f005 ff29 	bl	80192d8 <rcu_periph_clock_enable>
 8013486:	4851      	ldr	r0, [pc, #324]	; (80135cc <WS28xxMulti::Setup(unsigned int)+0x228>)
 8013488:	f005 ffe2 	bl	8019450 <timer_deinit>
 801348c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013490:	484e      	ldr	r0, [pc, #312]	; (80135cc <WS28xxMulti::Setup(unsigned int)+0x228>)
 8013492:	9307      	str	r3, [sp, #28]
 8013494:	a905      	add	r1, sp, #20
 8013496:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801349a:	f006 f87f 	bl	801959c <timer_init>
 801349e:	484b      	ldr	r0, [pc, #300]	; (80135cc <WS28xxMulti::Setup(unsigned int)+0x228>)
 80134a0:	4639      	mov	r1, r7
 80134a2:	f006 fa27 	bl	80198f4 <timer_master_slave_mode_config>
 80134a6:	4849      	ldr	r0, [pc, #292]	; (80135cc <WS28xxMulti::Setup(unsigned int)+0x228>)
 80134a8:	2107      	movs	r1, #7
 80134aa:	f006 fa1b 	bl	80198e4 <timer_slave_mode_select>
 80134ae:	4847      	ldr	r0, [pc, #284]	; (80135cc <WS28xxMulti::Setup(unsigned int)+0x228>)
 80134b0:	2120      	movs	r1, #32
 80134b2:	f006 fa07 	bl	80198c4 <timer_input_trigger_source_select>
 80134b6:	4845      	ldr	r0, [pc, #276]	; (80135cc <WS28xxMulti::Setup(unsigned int)+0x228>)
 80134b8:	2210      	movs	r2, #16
 80134ba:	4621      	mov	r1, r4
 80134bc:	f006 f9a8 	bl	8019810 <timer_channel_output_mode_config>
 80134c0:	f8d8 201c 	ldr.w	r2, [r8, #28]
 80134c4:	4841      	ldr	r0, [pc, #260]	; (80135cc <WS28xxMulti::Setup(unsigned int)+0x228>)
 80134c6:	4621      	mov	r1, r4
 80134c8:	f006 f9c8 	bl	801985c <timer_channel_output_pulse_value_config>
 80134cc:	4631      	mov	r1, r6
 80134ce:	483f      	ldr	r0, [pc, #252]	; (80135cc <WS28xxMulti::Setup(unsigned int)+0x228>)
 80134d0:	f006 f8a7 	bl	8019622 <timer_interrupt_enable>
 80134d4:	4b3e      	ldr	r3, [pc, #248]	; (80135d0 <WS28xxMulti::Setup(unsigned int)+0x22c>)
 80134d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80134da:	f883 431e 	strb.w	r4, [r3, #798]	; 0x31e
 80134de:	f640 4015 	movw	r0, #3093	; 0xc15
 80134e2:	601a      	str	r2, [r3, #0]
 80134e4:	f005 fef8 	bl	80192d8 <rcu_periph_clock_enable>
 80134e8:	2107      	movs	r1, #7
 80134ea:	483a      	ldr	r0, [pc, #232]	; (80135d4 <WS28xxMulti::Setup(unsigned int)+0x230>)
 80134ec:	f005 f9aa 	bl	8018844 <dma_deinit>
 80134f0:	a809      	add	r0, sp, #36	; 0x24
 80134f2:	f005 f9d2 	bl	801889a <dma_single_data_para_struct_init>
 80134f6:	4b38      	ldr	r3, [pc, #224]	; (80135d8 <WS28xxMulti::Setup(unsigned int)+0x234>)
 80134f8:	4836      	ldr	r0, [pc, #216]	; (80135d4 <WS28xxMulti::Setup(unsigned int)+0x230>)
 80134fa:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
 80134fe:	4b37      	ldr	r3, [pc, #220]	; (80135dc <WS28xxMulti::Setup(unsigned int)+0x238>)
 8013500:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8013504:	aa09      	add	r2, sp, #36	; 0x24
 8013506:	f04f 0a40 	mov.w	sl, #64	; 0x40
 801350a:	f44f 6900 	mov.w	r9, #2048	; 0x800
 801350e:	2107      	movs	r1, #7
 8013510:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
 8013514:	9511      	str	r5, [sp, #68]	; 0x44
 8013516:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801351a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801351e:	f005 f9c8 	bl	80188b2 <dma_single_data_mode_init>
 8013522:	482c      	ldr	r0, [pc, #176]	; (80135d4 <WS28xxMulti::Setup(unsigned int)+0x230>)
 8013524:	2107      	movs	r1, #7
 8013526:	f005 fa03 	bl	8018930 <dma_circulation_disable>
 801352a:	2205      	movs	r2, #5
 801352c:	4829      	ldr	r0, [pc, #164]	; (80135d4 <WS28xxMulti::Setup(unsigned int)+0x230>)
 801352e:	2107      	movs	r1, #7
 8013530:	f005 fa06 	bl	8018940 <dma_channel_subperipheral_select>
 8013534:	4631      	mov	r1, r6
 8013536:	4827      	ldr	r0, [pc, #156]	; (80135d4 <WS28xxMulti::Setup(unsigned int)+0x230>)
 8013538:	f005 f984 	bl	8018844 <dma_deinit>
 801353c:	a809      	add	r0, sp, #36	; 0x24
 801353e:	f005 f9ac 	bl	801889a <dma_single_data_para_struct_init>
 8013542:	4b27      	ldr	r3, [pc, #156]	; (80135e0 <WS28xxMulti::Setup(unsigned int)+0x23c>)
 8013544:	4823      	ldr	r0, [pc, #140]	; (80135d4 <WS28xxMulti::Setup(unsigned int)+0x230>)
 8013546:	9511      	str	r5, [sp, #68]	; 0x44
 8013548:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
 801354c:	4b25      	ldr	r3, [pc, #148]	; (80135e4 <WS28xxMulti::Setup(unsigned int)+0x240>)
 801354e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8013552:	aa09      	add	r2, sp, #36	; 0x24
 8013554:	4631      	mov	r1, r6
 8013556:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
 801355a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801355e:	f005 f9a8 	bl	80188b2 <dma_single_data_mode_init>
 8013562:	481c      	ldr	r0, [pc, #112]	; (80135d4 <WS28xxMulti::Setup(unsigned int)+0x230>)
 8013564:	4631      	mov	r1, r6
 8013566:	f005 f9e3 	bl	8018930 <dma_circulation_disable>
 801356a:	481a      	ldr	r0, [pc, #104]	; (80135d4 <WS28xxMulti::Setup(unsigned int)+0x230>)
 801356c:	2205      	movs	r2, #5
 801356e:	4631      	mov	r1, r6
 8013570:	f005 f9e6 	bl	8018940 <dma_channel_subperipheral_select>
 8013574:	f8d8 5000 	ldr.w	r5, [r8]
 8013578:	3d0b      	subs	r5, #11
 801357a:	42b5      	cmp	r5, r6
 801357c:	d81c      	bhi.n	80135b8 <WS28xxMulti::Setup(unsigned int)+0x214>
 801357e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8013582:	4627      	mov	r7, r4
 8013584:	3601      	adds	r6, #1
 8013586:	f04f 08ff 	mov.w	r8, #255	; 0xff
 801358a:	2300      	movs	r3, #0
 801358c:	461a      	mov	r2, r3
 801358e:	4619      	mov	r1, r3
 8013590:	4620      	mov	r0, r4
 8013592:	e9cd 7700 	strd	r7, r7, [sp]
 8013596:	f7ff fd8b 	bl	80130b0 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 801359a:	2d02      	cmp	r5, #2
 801359c:	bf1b      	ittet	ne
 801359e:	23ff      	movne	r3, #255	; 0xff
 80135a0:	e9cd 8800 	strdne	r8, r8, [sp]
 80135a4:	e9cd 7700 	strdeq	r7, r7, [sp]
 80135a8:	461a      	movne	r2, r3
 80135aa:	4620      	mov	r0, r4
 80135ac:	4631      	mov	r1, r6
 80135ae:	3401      	adds	r4, #1
 80135b0:	f7ff fd7e 	bl	80130b0 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 80135b4:	2c10      	cmp	r4, #16
 80135b6:	d1e8      	bne.n	801358a <WS28xxMulti::Setup(unsigned int)+0x1e6>
 80135b8:	b012      	add	sp, #72	; 0x48
 80135ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135be:	bf00      	nop
 80135c0:	40020000 	andmi	r0, r2, r0
 80135c4:	0bebc200 	bleq	7b03dcc <__stack_size+0x7affdcc>
 80135c8:	40000400 	andmi	r0, r0, r0, lsl #8
 80135cc:	40000800 	andmi	r0, r0, r0, lsl #16
 80135d0:	e000e100 	and	lr, r0, r0, lsl #2
 80135d4:	40026000 	andmi	r6, r2, r0
 80135d8:	0801d450 	stmdaeq	r1, {r4, r6, sl, ip, lr, pc}
 80135dc:	40021028 	andmi	r1, r2, r8, lsr #32
 80135e0:	2000128c 	andcs	r1, r0, ip, lsl #5
 80135e4:	40021018 	andmi	r1, r2, r8, lsl r0

080135e8 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)>:
 80135e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80135ea:	460f      	mov	r7, r1
 80135ec:	4604      	mov	r4, r0
 80135ee:	460d      	mov	r5, r1
 80135f0:	4606      	mov	r6, r0
 80135f2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80135f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80135f6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80135fa:	2300      	movs	r3, #0
 80135fc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8013600:	61e3      	str	r3, [r4, #28]
 8013602:	4b26      	ldr	r3, [pc, #152]	; (801369c <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0xb4>)
 8013604:	a901      	add	r1, sp, #4
 8013606:	4628      	mov	r0, r5
 8013608:	601c      	str	r4, [r3, #0]
 801360a:	f7ff f8af 	bl	801276c <PixelConfiguration::Validate(unsigned int&)>
 801360e:	6826      	ldr	r6, [r4, #0]
 8013610:	3e0b      	subs	r6, #11
 8013612:	2e02      	cmp	r6, #2
 8013614:	d80a      	bhi.n	801362c <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x44>
 8013616:	686b      	ldr	r3, [r5, #4]
 8013618:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 801361c:	d906      	bls.n	801362c <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x44>
 801361e:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8013622:	606b      	str	r3, [r5, #4]
 8013624:	a901      	add	r1, sp, #4
 8013626:	4628      	mov	r0, r5
 8013628:	f7ff f8a0 	bl	801276c <PixelConfiguration::Validate(unsigned int&)>
 801362c:	6863      	ldr	r3, [r4, #4]
 801362e:	9a01      	ldr	r2, [sp, #4]
 8013630:	2e02      	cmp	r6, #2
 8013632:	fb03 f202 	mul.w	r2, r3, r2
 8013636:	bf9b      	ittet	ls
 8013638:	3308      	addls	r3, #8
 801363a:	189b      	addls	r3, r3, r2
 801363c:	61e2      	strhi	r2, [r4, #28]
 801363e:	61e3      	strls	r3, [r4, #28]
 8013640:	69e3      	ldr	r3, [r4, #28]
 8013642:	4e17      	ldr	r6, [pc, #92]	; (80136a0 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0xb8>)
 8013644:	00db      	lsls	r3, r3, #3
 8013646:	61e3      	str	r3, [r4, #28]
 8013648:	f640 4004 	movw	r0, #3076	; 0xc04
 801364c:	f005 fe44 	bl	80192d8 <rcu_periph_clock_enable>
 8013650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013654:	2100      	movs	r1, #0
 8013656:	4630      	mov	r0, r6
 8013658:	f005 fdfd 	bl	8019256 <gpio_af_set>
 801365c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013660:	2202      	movs	r2, #2
 8013662:	2101      	movs	r1, #1
 8013664:	4630      	mov	r0, r6
 8013666:	f005 fdbb 	bl	80191e0 <gpio_mode_set>
 801366a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801366e:	2202      	movs	r2, #2
 8013670:	2100      	movs	r1, #0
 8013672:	4630      	mov	r0, r6
 8013674:	f005 fdd4 	bl	8019220 <gpio_output_options_set>
 8013678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801367c:	62b3      	str	r3, [r6, #40]	; 0x28
 801367e:	7d6b      	ldrb	r3, [r5, #21]
 8013680:	b13b      	cbz	r3, 8013692 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0xaa>
 8013682:	7c6a      	ldrb	r2, [r5, #17]
 8013684:	7c29      	ldrb	r1, [r5, #16]
 8013686:	4620      	mov	r0, r4
 8013688:	f7ff fd92 	bl	80131b0 <WS28xxMulti::Setup(unsigned char, unsigned char)>
 801368c:	4620      	mov	r0, r4
 801368e:	b003      	add	sp, #12
 8013690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013692:	68e9      	ldr	r1, [r5, #12]
 8013694:	4620      	mov	r0, r4
 8013696:	f7ff fe85 	bl	80133a4 <WS28xxMulti::Setup(unsigned int)>
 801369a:	e7f7      	b.n	801368c <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0xa4>
 801369c:	20001288 	andcs	r1, r0, r8, lsl #5
 80136a0:	40021000 	andmi	r1, r2, r0

080136a4 <WS28xxMulti::Update()>:
 80136a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136a6:	4b4c      	ldr	r3, [pc, #304]	; (80137d8 <WS28xxMulti::Update()+0x134>)
 80136a8:	4e4c      	ldr	r6, [pc, #304]	; (80137dc <WS28xxMulti::Update()+0x138>)
 80136aa:	4c4d      	ldr	r4, [pc, #308]	; (80137e0 <WS28xxMulti::Update()+0x13c>)
 80136ac:	4f4d      	ldr	r7, [pc, #308]	; (80137e4 <WS28xxMulti::Update()+0x140>)
 80136ae:	2201      	movs	r2, #1
 80136b0:	701a      	strb	r2, [r3, #0]
 80136b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80136b6:	2100      	movs	r1, #0
 80136b8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80136bc:	f022 0201 	bic.w	r2, r2, #1
 80136c0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 80136c4:	f8c3 1824 	str.w	r1, [r3, #2084]	; 0x824
 80136c8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80136cc:	f022 0201 	bic.w	r2, r2, #1
 80136d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80136d4:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
 80136d8:	7d43      	ldrb	r3, [r0, #21]
 80136da:	4605      	mov	r5, r0
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d053      	beq.n	8013788 <WS28xxMulti::Update()+0xe4>
 80136e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80136e2:	f023 0301 	bic.w	r3, r3, #1
 80136e6:	6723      	str	r3, [r4, #112]	; 0x70
 80136e8:	2220      	movs	r2, #32
 80136ea:	2104      	movs	r1, #4
 80136ec:	4620      	mov	r0, r4
 80136ee:	f005 f94b 	bl	8018988 <dma_interrupt_flag_clear>
 80136f2:	67e6      	str	r6, [r4, #124]	; 0x7c
 80136f4:	8bab      	ldrh	r3, [r5, #28]
 80136f6:	6763      	str	r3, [r4, #116]	; 0x74
 80136f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80136fa:	f043 0301 	orr.w	r3, r3, #1
 80136fe:	6723      	str	r3, [r4, #112]	; 0x70
 8013700:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8013704:	f023 0301 	bic.w	r3, r3, #1
 8013708:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 801370c:	2220      	movs	r2, #32
 801370e:	2107      	movs	r1, #7
 8013710:	4620      	mov	r0, r4
 8013712:	f005 f939 	bl	8018988 <dma_interrupt_flag_clear>
 8013716:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
 801371a:	8bab      	ldrh	r3, [r5, #28]
 801371c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8013720:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8013724:	f043 0301 	orr.w	r3, r3, #1
 8013728:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 801372c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801372e:	f023 0301 	bic.w	r3, r3, #1
 8013732:	6423      	str	r3, [r4, #64]	; 0x40
 8013734:	2102      	movs	r1, #2
 8013736:	4620      	mov	r0, r4
 8013738:	2220      	movs	r2, #32
 801373a:	f005 f925 	bl	8018988 <dma_interrupt_flag_clear>
 801373e:	64e6      	str	r6, [r4, #76]	; 0x4c
 8013740:	8bab      	ldrh	r3, [r5, #28]
 8013742:	6463      	str	r3, [r4, #68]	; 0x44
 8013744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013746:	4828      	ldr	r0, [pc, #160]	; (80137e8 <WS28xxMulti::Update()+0x144>)
 8013748:	f043 0301 	orr.w	r3, r3, #1
 801374c:	6423      	str	r3, [r4, #64]	; 0x40
 801374e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013752:	f005 ff70 	bl	8019636 <timer_dma_enable>
 8013756:	4824      	ldr	r0, [pc, #144]	; (80137e8 <WS28xxMulti::Update()+0x144>)
 8013758:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801375c:	f005 ff6b 	bl	8019636 <timer_dma_enable>
 8013760:	4821      	ldr	r0, [pc, #132]	; (80137e8 <WS28xxMulti::Update()+0x144>)
 8013762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013766:	f005 ff66 	bl	8019636 <timer_dma_enable>
 801376a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801376e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8013772:	f042 0201 	orr.w	r2, r2, #1
 8013776:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 801377a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 801377e:	f042 0201 	orr.w	r2, r2, #1
 8013782:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8013786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013788:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 801378c:	f023 0301 	bic.w	r3, r3, #1
 8013790:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8013794:	2220      	movs	r2, #32
 8013796:	2107      	movs	r1, #7
 8013798:	4620      	mov	r0, r4
 801379a:	f005 f8f5 	bl	8018988 <dma_interrupt_flag_clear>
 801379e:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
 80137a2:	8bab      	ldrh	r3, [r5, #28]
 80137a4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80137a8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80137ac:	f043 0301 	orr.w	r3, r3, #1
 80137b0:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80137b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80137b6:	f023 0301 	bic.w	r3, r3, #1
 80137ba:	6423      	str	r3, [r4, #64]	; 0x40
 80137bc:	2220      	movs	r2, #32
 80137be:	2102      	movs	r1, #2
 80137c0:	4620      	mov	r0, r4
 80137c2:	f005 f8e1 	bl	8018988 <dma_interrupt_flag_clear>
 80137c6:	64e7      	str	r7, [r4, #76]	; 0x4c
 80137c8:	8bab      	ldrh	r3, [r5, #28]
 80137ca:	6463      	str	r3, [r4, #68]	; 0x44
 80137cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80137ce:	f043 0301 	orr.w	r3, r3, #1
 80137d2:	6423      	str	r3, [r4, #64]	; 0x40
 80137d4:	e7bf      	b.n	8013756 <WS28xxMulti::Update()+0xb2>
 80137d6:	bf00      	nop
 80137d8:	20001284 	andcs	r1, r0, r4, lsl #5
 80137dc:	0801d450 	stmdaeq	r1, {r4, r6, sl, ip, lr, pc}
 80137e0:	40026000 	andmi	r6, r2, r0
 80137e4:	2000128c 	andcs	r1, r0, ip, lsl #5
 80137e8:	40000400 	andmi	r0, r0, r0, lsl #8

080137ec <WS28xxMulti::Blackout()>:
 80137ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137f0:	4f2d      	ldr	r7, [pc, #180]	; (80138a8 <WS28xxMulti::Blackout()+0xbc>)
 80137f2:	4605      	mov	r5, r0
 80137f4:	f3bf 8f5f 	dmb	sy
 80137f8:	783a      	ldrb	r2, [r7, #0]
 80137fa:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80137fe:	2a00      	cmp	r2, #0
 8013800:	d1f8      	bne.n	80137f4 <WS28xxMulti::Blackout()+0x8>
 8013802:	7d6c      	ldrb	r4, [r5, #21]
 8013804:	b19c      	cbz	r4, 801382e <WS28xxMulti::Blackout()+0x42>
 8013806:	4a29      	ldr	r2, [pc, #164]	; (80138ac <WS28xxMulti::Blackout()+0xc0>)
 8013808:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801380c:	3301      	adds	r3, #1
 801380e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013812:	f842 1b04 	str.w	r1, [r2], #4
 8013816:	d1f9      	bne.n	801380c <WS28xxMulti::Blackout()+0x20>
 8013818:	4628      	mov	r0, r5
 801381a:	f7ff ff43 	bl	80136a4 <WS28xxMulti::Update()>
 801381e:	f3bf 8f5f 	dmb	sy
 8013822:	783b      	ldrb	r3, [r7, #0]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d1fa      	bne.n	801381e <WS28xxMulti::Blackout()+0x32>
 8013828:	b003      	add	sp, #12
 801382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801382e:	682b      	ldr	r3, [r5, #0]
 8013830:	f1a3 080b 	sub.w	r8, r3, #11
 8013834:	f1b8 0f02 	cmp.w	r8, #2
 8013838:	d908      	bls.n	801384c <WS28xxMulti::Blackout()+0x60>
 801383a:	4b1c      	ldr	r3, [pc, #112]	; (80138ac <WS28xxMulti::Blackout()+0xc0>)
 801383c:	4622      	mov	r2, r4
 801383e:	3401      	adds	r4, #1
 8013840:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8013844:	f843 2b04 	str.w	r2, [r3], #4
 8013848:	d1f9      	bne.n	801383e <WS28xxMulti::Blackout()+0x52>
 801384a:	e7e5      	b.n	8013818 <WS28xxMulti::Blackout()+0x2c>
 801384c:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8013850:	4626      	mov	r6, r4
 8013852:	f10a 0b01 	add.w	fp, sl, #1
 8013856:	2300      	movs	r3, #0
 8013858:	e9cd 6600 	strd	r6, r6, [sp]
 801385c:	461a      	mov	r2, r3
 801385e:	4619      	mov	r1, r3
 8013860:	4620      	mov	r0, r4
 8013862:	f7ff fc25 	bl	80130b0 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013866:	f04f 0901 	mov.w	r9, #1
 801386a:	45ca      	cmp	sl, r9
 801386c:	d211      	bcs.n	8013892 <WS28xxMulti::Blackout()+0xa6>
 801386e:	f1b8 0f02 	cmp.w	r8, #2
 8013872:	bf15      	itete	ne
 8013874:	23ff      	movne	r3, #255	; 0xff
 8013876:	2300      	moveq	r3, #0
 8013878:	e9cd 3300 	strdne	r3, r3, [sp]
 801387c:	e9cd 6600 	strdeq	r6, r6, [sp]
 8013880:	4620      	mov	r0, r4
 8013882:	461a      	mov	r2, r3
 8013884:	4659      	mov	r1, fp
 8013886:	3401      	adds	r4, #1
 8013888:	f7ff fc12 	bl	80130b0 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 801388c:	2c10      	cmp	r4, #16
 801388e:	d1e2      	bne.n	8013856 <WS28xxMulti::Blackout()+0x6a>
 8013890:	e7c2      	b.n	8013818 <WS28xxMulti::Blackout()+0x2c>
 8013892:	4649      	mov	r1, r9
 8013894:	e9cd 6600 	strd	r6, r6, [sp]
 8013898:	2300      	movs	r3, #0
 801389a:	22e0      	movs	r2, #224	; 0xe0
 801389c:	4620      	mov	r0, r4
 801389e:	f7ff fc07 	bl	80130b0 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 80138a2:	f109 0901 	add.w	r9, r9, #1
 80138a6:	e7e0      	b.n	801386a <WS28xxMulti::Blackout()+0x7e>
 80138a8:	20001284 	andcs	r1, r0, r4, lsl #5
 80138ac:	2000128c 	andcs	r1, r0, ip, lsl #5

080138b0 <WS28xxMulti::FullOn()>:
 80138b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138b4:	4f2c      	ldr	r7, [pc, #176]	; (8013968 <WS28xxMulti::FullOn()+0xb8>)
 80138b6:	4605      	mov	r5, r0
 80138b8:	f3bf 8f5f 	dmb	sy
 80138bc:	783a      	ldrb	r2, [r7, #0]
 80138be:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80138c2:	2a00      	cmp	r2, #0
 80138c4:	d1f8      	bne.n	80138b8 <WS28xxMulti::FullOn()+0x8>
 80138c6:	7d6c      	ldrb	r4, [r5, #21]
 80138c8:	b194      	cbz	r4, 80138f0 <WS28xxMulti::FullOn()+0x40>
 80138ca:	4a28      	ldr	r2, [pc, #160]	; (801396c <WS28xxMulti::FullOn()+0xbc>)
 80138cc:	4619      	mov	r1, r3
 80138ce:	3301      	adds	r3, #1
 80138d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80138d4:	f842 1b04 	str.w	r1, [r2], #4
 80138d8:	d1f9      	bne.n	80138ce <WS28xxMulti::FullOn()+0x1e>
 80138da:	4628      	mov	r0, r5
 80138dc:	f7ff fee2 	bl	80136a4 <WS28xxMulti::Update()>
 80138e0:	f3bf 8f5f 	dmb	sy
 80138e4:	783b      	ldrb	r3, [r7, #0]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d1fa      	bne.n	80138e0 <WS28xxMulti::FullOn()+0x30>
 80138ea:	b003      	add	sp, #12
 80138ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138f0:	682e      	ldr	r6, [r5, #0]
 80138f2:	3e0b      	subs	r6, #11
 80138f4:	2e02      	cmp	r6, #2
 80138f6:	d908      	bls.n	801390a <WS28xxMulti::FullOn()+0x5a>
 80138f8:	4b1c      	ldr	r3, [pc, #112]	; (801396c <WS28xxMulti::FullOn()+0xbc>)
 80138fa:	22ff      	movs	r2, #255	; 0xff
 80138fc:	3401      	adds	r4, #1
 80138fe:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8013902:	f843 2b04 	str.w	r2, [r3], #4
 8013906:	d1f9      	bne.n	80138fc <WS28xxMulti::FullOn()+0x4c>
 8013908:	e7e7      	b.n	80138da <WS28xxMulti::FullOn()+0x2a>
 801390a:	f8d5 a004 	ldr.w	sl, [r5, #4]
 801390e:	46a0      	mov	r8, r4
 8013910:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8013914:	2300      	movs	r3, #0
 8013916:	e9cd 8800 	strd	r8, r8, [sp]
 801391a:	461a      	mov	r2, r3
 801391c:	4619      	mov	r1, r3
 801391e:	4620      	mov	r0, r4
 8013920:	f7ff fbc6 	bl	80130b0 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013924:	f04f 0b01 	mov.w	fp, #1
 8013928:	45da      	cmp	sl, fp
 801392a:	d211      	bcs.n	8013950 <WS28xxMulti::FullOn()+0xa0>
 801392c:	2e02      	cmp	r6, #2
 801392e:	bf15      	itete	ne
 8013930:	23ff      	movne	r3, #255	; 0xff
 8013932:	2300      	moveq	r3, #0
 8013934:	e9cd 9900 	strdne	r9, r9, [sp]
 8013938:	e9cd 8800 	strdeq	r8, r8, [sp]
 801393c:	4620      	mov	r0, r4
 801393e:	f10a 0101 	add.w	r1, sl, #1
 8013942:	461a      	mov	r2, r3
 8013944:	3401      	adds	r4, #1
 8013946:	f7ff fbb3 	bl	80130b0 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 801394a:	2c10      	cmp	r4, #16
 801394c:	d1e2      	bne.n	8013914 <WS28xxMulti::FullOn()+0x64>
 801394e:	e7c4      	b.n	80138da <WS28xxMulti::FullOn()+0x2a>
 8013950:	4659      	mov	r1, fp
 8013952:	e9cd 9900 	strd	r9, r9, [sp]
 8013956:	23ff      	movs	r3, #255	; 0xff
 8013958:	22e0      	movs	r2, #224	; 0xe0
 801395a:	4620      	mov	r0, r4
 801395c:	f7ff fba8 	bl	80130b0 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013960:	f10b 0b01 	add.w	fp, fp, #1
 8013964:	e7e0      	b.n	8013928 <WS28xxMulti::FullOn()+0x78>
 8013966:	bf00      	nop
 8013968:	20001284 	andcs	r1, r0, r4, lsl #5
 801396c:	2000128c 	andcs	r1, r0, ip, lsl #5

08013970 <WS28xxMulti::IsUpdating()>:
 8013970:	f3bf 8f5f 	dmb	sy
 8013974:	4b01      	ldr	r3, [pc, #4]	; (801397c <WS28xxMulti::IsUpdating()+0xc>)
 8013976:	7818      	ldrb	r0, [r3, #0]
 8013978:	4770      	bx	lr
 801397a:	bf00      	nop
 801397c:	20001284 	andcs	r1, r0, r4, lsl #5

08013980 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 8013980:	b2c8      	uxtb	r0, r1
 8013982:	491c      	ldr	r1, [pc, #112]	; (80139f4 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x74>)
 8013984:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013988:	b570      	push	{r4, r5, r6, lr}
 801398a:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 801398e:	4a1a      	ldr	r2, [pc, #104]	; (80139f8 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x78>)
 8013990:	f89d e010 	ldrb.w	lr, [sp, #16]
 8013994:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8013998:	440a      	add	r2, r1
 801399a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 801399e:	f100 6008 	add.w	r0, r0, #142606336	; 0x8800000
 80139a2:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 80139a6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80139aa:	0092      	lsls	r2, r2, #2
 80139ac:	0080      	lsls	r0, r0, #2
 80139ae:	2180      	movs	r1, #128	; 0x80
 80139b0:	2400      	movs	r4, #0
 80139b2:	2501      	movs	r5, #1
 80139b4:	420b      	tst	r3, r1
 80139b6:	f5a2 6c80 	sub.w	ip, r2, #1024	; 0x400
 80139ba:	bf16      	itet	ne
 80139bc:	f5a2 6c80 	subne.w	ip, r2, #1024	; 0x400
 80139c0:	f8cc 5000 	streq.w	r5, [ip]
 80139c4:	f8cc 4000 	strne.w	r4, [ip]
 80139c8:	ea1e 0f01 	tst.w	lr, r1
 80139cc:	f5a2 7c00 	sub.w	ip, r2, #512	; 0x200
 80139d0:	bf16      	itet	ne
 80139d2:	f5a2 7c00 	subne.w	ip, r2, #512	; 0x200
 80139d6:	f8cc 5000 	streq.w	r5, [ip]
 80139da:	f8cc 4000 	strne.w	r4, [ip]
 80139de:	420e      	tst	r6, r1
 80139e0:	bf0c      	ite	eq
 80139e2:	6015      	streq	r5, [r2, #0]
 80139e4:	6014      	strne	r4, [r2, #0]
 80139e6:	3240      	adds	r2, #64	; 0x40
 80139e8:	4290      	cmp	r0, r2
 80139ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80139ee:	d1e1      	bne.n	80139b4 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x34>
 80139f0:	bd70      	pop	{r4, r5, r6, pc}
 80139f2:	bf00      	nop
 80139f4:	2000128c 	andcs	r1, r0, ip, lsl #5
 80139f8:	e1100020 	tst	r0, r0, lsr #32

080139fc <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 80139fc:	b2c8      	uxtb	r0, r1
 80139fe:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8013a02:	4a19      	ldr	r2, [pc, #100]	; (8013a68 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x6c>)
 8013a04:	b570      	push	{r4, r5, r6, lr}
 8013a06:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8013a0a:	4918      	ldr	r1, [pc, #96]	; (8013a6c <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x70>)
 8013a0c:	f89d c010 	ldrb.w	ip, [sp, #16]
 8013a10:	f89d e014 	ldrb.w	lr, [sp, #20]
 8013a14:	4411      	add	r1, r2
 8013a16:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013a1a:	f100 6008 	add.w	r0, r0, #142606336	; 0x8800000
 8013a1e:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8013a22:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8013a26:	0089      	lsls	r1, r1, #2
 8013a28:	0080      	lsls	r0, r0, #2
 8013a2a:	2280      	movs	r2, #128	; 0x80
 8013a2c:	2401      	movs	r4, #1
 8013a2e:	ea13 0502 	ands.w	r5, r3, r2
 8013a32:	f5a1 6680 	sub.w	r6, r1, #1024	; 0x400
 8013a36:	bf0a      	itet	eq
 8013a38:	f5a1 6680 	subeq.w	r6, r1, #1024	; 0x400
 8013a3c:	6034      	strne	r4, [r6, #0]
 8013a3e:	6035      	streq	r5, [r6, #0]
 8013a40:	ea1c 0502 	ands.w	r5, ip, r2
 8013a44:	f5a1 7600 	sub.w	r6, r1, #512	; 0x200
 8013a48:	bf0a      	itet	eq
 8013a4a:	f5a1 7600 	subeq.w	r6, r1, #512	; 0x200
 8013a4e:	6034      	strne	r4, [r6, #0]
 8013a50:	6035      	streq	r5, [r6, #0]
 8013a52:	ea1e 0502 	ands.w	r5, lr, r2
 8013a56:	bf14      	ite	ne
 8013a58:	600c      	strne	r4, [r1, #0]
 8013a5a:	600d      	streq	r5, [r1, #0]
 8013a5c:	3140      	adds	r1, #64	; 0x40
 8013a5e:	4288      	cmp	r0, r1
 8013a60:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013a64:	d1e3      	bne.n	8013a2e <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x32>
 8013a66:	bd70      	pop	{r4, r5, r6, pc}
 8013a68:	2000128c 	andcs	r1, r0, ip, lsl #5
 8013a6c:	e1100020 	tst	r0, r0, lsr #32

08013a70 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 8013a70:	b530      	push	{r4, r5, lr}
 8013a72:	6984      	ldr	r4, [r0, #24]
 8013a74:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8013a78:	468c      	mov	ip, r1
 8013a7a:	4611      	mov	r1, r2
 8013a7c:	5ce2      	ldrb	r2, [r4, r3]
 8013a7e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013a82:	5d65      	ldrb	r5, [r4, r5]
 8013a84:	5ce3      	ldrb	r3, [r4, r3]
 8013a86:	7d44      	ldrb	r4, [r0, #21]
 8013a88:	bb1c      	cbnz	r4, 8013ad2 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x62>
 8013a8a:	6804      	ldr	r4, [r0, #0]
 8013a8c:	b1cc      	cbz	r4, 8013ac2 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x52>
 8013a8e:	3c0b      	subs	r4, #11
 8013a90:	2c01      	cmp	r4, #1
 8013a92:	9204      	str	r2, [sp, #16]
 8013a94:	d94a      	bls.n	8013b2c <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xbc>
 8013a96:	ea6f 0493 	mvn.w	r4, r3, lsr #2
 8013a9a:	9503      	str	r5, [sp, #12]
 8013a9c:	f004 0430 	and.w	r4, r4, #48	; 0x30
 8013aa0:	f082 02c0 	eor.w	r2, r2, #192	; 0xc0
 8013aa4:	ea6f 1515 	mvn.w	r5, r5, lsr #4
 8013aa8:	f005 050c 	and.w	r5, r5, #12
 8013aac:	ea44 1292 	orr.w	r2, r4, r2, lsr #6
 8013ab0:	432a      	orrs	r2, r5
 8013ab2:	3101      	adds	r1, #1
 8013ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ab8:	4660      	mov	r0, ip
 8013aba:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8013abe:	f7ff baf7 	b.w	80130b0 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013ac2:	6884      	ldr	r4, [r0, #8]
 8013ac4:	2c05      	cmp	r4, #5
 8013ac6:	d854      	bhi.n	8013b72 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x102>
 8013ac8:	e8df f004 	tbb	[pc, r4]
 8013acc:	4c484440 	cfstrdmi	mvd4, [r8], {64}	; 0x40
 8013ad0:	68843850 	stmvs	r4, {r4, r6, fp, ip, sp}
 8013ad4:	2c05      	cmp	r4, #5
 8013ad6:	d826      	bhi.n	8013b26 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xb6>
 8013ad8:	e8df f004 	tbb	[pc, r4]
 8013adc:	0b141821 	bleq	8519b68 <__exidx_end+0x4faadc>
 8013ae0:	e9cd2503 	stmib	sp, {r0, r1, r8, sl, sp}^
 8013ae4:	2503      	movs	r5, #3
 8013ae6:	460a      	mov	r2, r1
 8013ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013aec:	4661      	mov	r1, ip
 8013aee:	f7ff bf47 	b.w	8013980 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8013af2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013af6:	462b      	mov	r3, r5
 8013af8:	460a      	mov	r2, r1
 8013afa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013afe:	4661      	mov	r1, ip
 8013b00:	f7ff bf3e 	b.w	8013980 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8013b04:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8013b08:	462b      	mov	r3, r5
 8013b0a:	e7f5      	b.n	8013af8 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x88>
 8013b0c:	e9cd 3503 	strd	r3, r5, [sp, #12]
 8013b10:	4613      	mov	r3, r2
 8013b12:	460a      	mov	r2, r1
 8013b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b18:	4661      	mov	r1, ip
 8013b1a:	f7ff bf31 	b.w	8013980 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8013b1e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8013b22:	4613      	mov	r3, r2
 8013b24:	e7f5      	b.n	8013b12 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xa2>
 8013b26:	e9cd 5203 	strd	r5, r2, [sp, #12]
 8013b2a:	e7dc      	b.n	8013ae6 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x76>
 8013b2c:	7c82      	ldrb	r2, [r0, #18]
 8013b2e:	9503      	str	r5, [sp, #12]
 8013b30:	3101      	adds	r1, #1
 8013b32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b36:	4660      	mov	r0, ip
 8013b38:	f7ff baba 	b.w	80130b0 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8013b3c:	e9cd 5203 	strd	r5, r2, [sp, #12]
 8013b40:	460a      	mov	r2, r1
 8013b42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b46:	4661      	mov	r1, ip
 8013b48:	f7ff bf58 	b.w	80139fc <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8013b4c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8013b50:	4613      	mov	r3, r2
 8013b52:	e7f5      	b.n	8013b40 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013b54:	e9cd 3503 	strd	r3, r5, [sp, #12]
 8013b58:	4613      	mov	r3, r2
 8013b5a:	e7f1      	b.n	8013b40 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013b5c:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8013b60:	462b      	mov	r3, r5
 8013b62:	e7ed      	b.n	8013b40 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013b64:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013b68:	462b      	mov	r3, r5
 8013b6a:	e7e9      	b.n	8013b40 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013b6c:	e9cd 2503 	strd	r2, r5, [sp, #12]
 8013b70:	e7e6      	b.n	8013b40 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd0>
 8013b72:	bf00      	nop

08013b74 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 8013b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b76:	6980      	ldr	r0, [r0, #24]
 8013b78:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8013b7c:	f810 c003 	ldrb.w	ip, [r0, r3]
 8013b80:	4b1c      	ldr	r3, [pc, #112]	; (8013bf4 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x80>)
 8013b82:	f810 e004 	ldrb.w	lr, [r0, r4]
 8013b86:	eb03 1282 	add.w	r2, r3, r2, lsl #6
 8013b8a:	4b1b      	ldr	r3, [pc, #108]	; (8013bf8 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x84>)
 8013b8c:	b2c9      	uxtb	r1, r1
 8013b8e:	4413      	add	r3, r2
 8013b90:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8013b94:	f101 6108 	add.w	r1, r1, #142606336	; 0x8800000
 8013b98:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8013b9c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013ba0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013ba4:	5c45      	ldrb	r5, [r0, r1]
 8013ba6:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8013baa:	009b      	lsls	r3, r3, #2
 8013bac:	5c46      	ldrb	r6, [r0, r1]
 8013bae:	0092      	lsls	r2, r2, #2
 8013bb0:	2180      	movs	r1, #128	; 0x80
 8013bb2:	2000      	movs	r0, #0
 8013bb4:	2401      	movs	r4, #1
 8013bb6:	f5a3 67c0 	sub.w	r7, r3, #1536	; 0x600
 8013bba:	ea1e 0f01 	tst.w	lr, r1
 8013bbe:	bf0c      	ite	eq
 8013bc0:	603c      	streq	r4, [r7, #0]
 8013bc2:	6038      	strne	r0, [r7, #0]
 8013bc4:	f5a3 6780 	sub.w	r7, r3, #1024	; 0x400
 8013bc8:	ea1c 0f01 	tst.w	ip, r1
 8013bcc:	bf0c      	ite	eq
 8013bce:	603c      	streq	r4, [r7, #0]
 8013bd0:	6038      	strne	r0, [r7, #0]
 8013bd2:	f5a3 7700 	sub.w	r7, r3, #512	; 0x200
 8013bd6:	420d      	tst	r5, r1
 8013bd8:	bf0c      	ite	eq
 8013bda:	603c      	streq	r4, [r7, #0]
 8013bdc:	6038      	strne	r0, [r7, #0]
 8013bde:	420e      	tst	r6, r1
 8013be0:	bf0c      	ite	eq
 8013be2:	601c      	streq	r4, [r3, #0]
 8013be4:	6018      	strne	r0, [r3, #0]
 8013be6:	3340      	adds	r3, #64	; 0x40
 8013be8:	429a      	cmp	r2, r3
 8013bea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013bee:	d1e2      	bne.n	8013bb6 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
 8013bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bf2:	bf00      	nop
 8013bf4:	2000128c 	andcs	r1, r0, ip, lsl #5
 8013bf8:	e1100030 	tst	r0, r0, lsr r0

08013bfc <net_set_ip>:
 8013bfc:	b510      	push	{r4, lr}
 8013bfe:	4c05      	ldr	r4, [pc, #20]	; (8013c14 <net_set_ip+0x18>)
 8013c00:	6020      	str	r0, [r4, #0]
 8013c02:	4621      	mov	r1, r4
 8013c04:	4804      	ldr	r0, [pc, #16]	; (8013c18 <net_set_ip+0x1c>)
 8013c06:	f7f4 fb87 	bl	8008318 <arp_init>
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c10:	f002 b8a6 	b.w	8015d60 <ip_set_ip>
 8013c14:	2000928c 	andcs	r9, r0, ip, lsl #5
 8013c18:	20009298 	mulcs	r0, r8, r2

08013c1c <net_set_gw>:
 8013c1c:	4b02      	ldr	r3, [pc, #8]	; (8013c28 <net_set_gw+0xc>)
 8013c1e:	6098      	str	r0, [r3, #8]
 8013c20:	4618      	mov	r0, r3
 8013c22:	f002 b89d 	b.w	8015d60 <ip_set_ip>
 8013c26:	bf00      	nop
 8013c28:	2000928c 	andcs	r9, r0, ip, lsl #5

08013c2c <net_set_dhcp>:
 8013c2c:	b570      	push	{r4, r5, r6, lr}
 8013c2e:	2400      	movs	r4, #0
 8013c30:	7014      	strb	r4, [r2, #0]
 8013c32:	4605      	mov	r5, r0
 8013c34:	4616      	mov	r6, r2
 8013c36:	4810      	ldr	r0, [pc, #64]	; (8013c78 <net_set_dhcp+0x4c>)
 8013c38:	460a      	mov	r2, r1
 8013c3a:	4910      	ldr	r1, [pc, #64]	; (8013c7c <net_set_dhcp+0x50>)
 8013c3c:	f001 fe76 	bl	801592c <dhcp_client>
 8013c40:	42a0      	cmp	r0, r4
 8013c42:	da17      	bge.n	8013c74 <net_set_dhcp+0x48>
 8013c44:	480d      	ldr	r0, [pc, #52]	; (8013c7c <net_set_dhcp+0x50>)
 8013c46:	f000 f859 	bl	8013cfc <rfc3927>
 8013c4a:	7030      	strb	r0, [r6, #0]
 8013c4c:	490b      	ldr	r1, [pc, #44]	; (8013c7c <net_set_dhcp+0x50>)
 8013c4e:	480a      	ldr	r0, [pc, #40]	; (8013c78 <net_set_dhcp+0x4c>)
 8013c50:	f7f4 fb62 	bl	8008318 <arp_init>
 8013c54:	4809      	ldr	r0, [pc, #36]	; (8013c7c <net_set_dhcp+0x50>)
 8013c56:	f002 f883 	bl	8015d60 <ip_set_ip>
 8013c5a:	4a08      	ldr	r2, [pc, #32]	; (8013c7c <net_set_dhcp+0x50>)
 8013c5c:	1e6b      	subs	r3, r5, #1
 8013c5e:	350b      	adds	r5, #11
 8013c60:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013c64:	f803 1f01 	strb.w	r1, [r3, #1]!
 8013c68:	42ab      	cmp	r3, r5
 8013c6a:	d1f9      	bne.n	8013c60 <net_set_dhcp+0x34>
 8013c6c:	4b04      	ldr	r3, [pc, #16]	; (8013c80 <net_set_dhcp+0x54>)
 8013c6e:	4620      	mov	r0, r4
 8013c70:	701c      	strb	r4, [r3, #0]
 8013c72:	bd70      	pop	{r4, r5, r6, pc}
 8013c74:	2401      	movs	r4, #1
 8013c76:	e7e9      	b.n	8013c4c <net_set_dhcp+0x20>
 8013c78:	20009298 	mulcs	r0, r8, r2
 8013c7c:	2000928c 	andcs	r9, r0, ip, lsl #5
 8013c80:	2000929e 	mulcs	r0, lr, r2

08013c84 <net_dhcp_release>:
 8013c84:	b508      	push	{r3, lr}
 8013c86:	f001 ff59 	bl	8015b3c <dhcp_client_release>
 8013c8a:	4b02      	ldr	r3, [pc, #8]	; (8013c94 <net_dhcp_release+0x10>)
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	701a      	strb	r2, [r3, #0]
 8013c90:	bd08      	pop	{r3, pc}
 8013c92:	bf00      	nop
 8013c94:	2000929e 	mulcs	r0, lr, r2

08013c98 <net_set_zeroconf>:
 8013c98:	b538      	push	{r3, r4, r5, lr}
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	480c      	ldr	r0, [pc, #48]	; (8013cd0 <net_set_zeroconf+0x38>)
 8013c9e:	f000 f82d 	bl	8013cfc <rfc3927>
 8013ca2:	4605      	mov	r5, r0
 8013ca4:	b190      	cbz	r0, 8013ccc <net_set_zeroconf+0x34>
 8013ca6:	490a      	ldr	r1, [pc, #40]	; (8013cd0 <net_set_zeroconf+0x38>)
 8013ca8:	480a      	ldr	r0, [pc, #40]	; (8013cd4 <net_set_zeroconf+0x3c>)
 8013caa:	f7f4 fb35 	bl	8008318 <arp_init>
 8013cae:	4808      	ldr	r0, [pc, #32]	; (8013cd0 <net_set_zeroconf+0x38>)
 8013cb0:	f002 f856 	bl	8015d60 <ip_set_ip>
 8013cb4:	4a06      	ldr	r2, [pc, #24]	; (8013cd0 <net_set_zeroconf+0x38>)
 8013cb6:	1e63      	subs	r3, r4, #1
 8013cb8:	340b      	adds	r4, #11
 8013cba:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013cbe:	f803 1f01 	strb.w	r1, [r3, #1]!
 8013cc2:	42a3      	cmp	r3, r4
 8013cc4:	d1f9      	bne.n	8013cba <net_set_zeroconf+0x22>
 8013cc6:	4b04      	ldr	r3, [pc, #16]	; (8013cd8 <net_set_zeroconf+0x40>)
 8013cc8:	2200      	movs	r2, #0
 8013cca:	701a      	strb	r2, [r3, #0]
 8013ccc:	4628      	mov	r0, r5
 8013cce:	bd38      	pop	{r3, r4, r5, pc}
 8013cd0:	2000928c 	andcs	r9, r0, ip, lsl #5
 8013cd4:	20009298 	mulcs	r0, r8, r2
 8013cd8:	2000929e 	mulcs	r0, lr, r2

08013cdc <net_timers_run>:
 8013cdc:	4b05      	ldr	r3, [pc, #20]	; (8013cf4 <net_timers_run+0x18>)
 8013cde:	4a06      	ldr	r2, [pc, #24]	; (8013cf8 <net_timers_run+0x1c>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	6811      	ldr	r1, [r2, #0]
 8013ce4:	4299      	cmp	r1, r3
 8013ce6:	d803      	bhi.n	8013cf0 <net_timers_run+0x14>
 8013ce8:	3364      	adds	r3, #100	; 0x64
 8013cea:	6013      	str	r3, [r2, #0]
 8013cec:	f001 bfb2 	b.w	8015c54 <igmp_timer>
 8013cf0:	4770      	bx	lr
 8013cf2:	bf00      	nop
 8013cf4:	20010694 	mulcs	r1, r4, r6
 8013cf8:	200092a4 	andcs	r9, r0, r4, lsr #5

08013cfc <rfc3927>:
 8013cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d00:	4b19      	ldr	r3, [pc, #100]	; (8013d68 <rfc3927+0x6c>)
 8013d02:	4f1a      	ldr	r7, [pc, #104]	; (8013d6c <rfc3927+0x70>)
 8013d04:	791a      	ldrb	r2, [r3, #4]
 8013d06:	78dc      	ldrb	r4, [r3, #3]
 8013d08:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8013d70 <rfc3927+0x74>
 8013d0c:	f8d7 9000 	ldr.w	r9, [r7]
 8013d10:	f8df b060 	ldr.w	fp, [pc, #96]	; 8013d74 <rfc3927+0x78>
 8013d14:	f8df a060 	ldr.w	sl, [pc, #96]	; 8013d78 <rfc3927+0x7c>
 8013d18:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8013d1c:	4606      	mov	r6, r0
 8013d1e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8013d22:	25ff      	movs	r5, #255	; 0xff
 8013d24:	4659      	mov	r1, fp
 8013d26:	4620      	mov	r0, r4
 8013d28:	f001 fcf4 	bl	8015714 <arp_cache_lookup>
 8013d2c:	b190      	cbz	r0, 8013d54 <rfc3927+0x58>
 8013d2e:	ba24      	rev	r4, r4
 8013d30:	3401      	adds	r4, #1
 8013d32:	3d01      	subs	r5, #1
 8013d34:	ba24      	rev	r4, r4
 8013d36:	b2ad      	uxth	r5, r5
 8013d38:	4554      	cmp	r4, sl
 8013d3a:	bf08      	it	eq
 8013d3c:	4644      	moveq	r4, r8
 8013d3e:	b18d      	cbz	r5, 8013d64 <rfc3927+0x68>
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	eba3 0309 	sub.w	r3, r3, r9
 8013d46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8013d4a:	d3eb      	bcc.n	8013d24 <rfc3927+0x28>
 8013d4c:	2400      	movs	r4, #0
 8013d4e:	4623      	mov	r3, r4
 8013d50:	4620      	mov	r0, r4
 8013d52:	e002      	b.n	8013d5a <rfc3927+0x5e>
 8013d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013d58:	2001      	movs	r0, #1
 8013d5a:	e9c6 3401 	strd	r3, r4, [r6, #4]
 8013d5e:	6034      	str	r4, [r6, #0]
 8013d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d64:	462c      	mov	r4, r5
 8013d66:	e7f2      	b.n	8013d4e <rfc3927+0x52>
 8013d68:	200092a8 	andcs	r9, r0, r8, lsr #5
 8013d6c:	20010694 	mulcs	r1, r4, r6
 8013d70:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 8013d74:	200092b0 			; <UNDEFINED> instruction: 0x200092b0
 8013d78:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

08013d7c <_init_tcb>:
 8013d7c:	b510      	push	{r4, lr}
 8013d7e:	f100 0244 	add.w	r2, r0, #68	; 0x44
 8013d82:	4603      	mov	r3, r0
 8013d84:	2400      	movs	r4, #0
 8013d86:	4293      	cmp	r3, r2
 8013d88:	d10d      	bne.n	8013da6 <_init_tcb+0x2a>
 8013d8a:	4b08      	ldr	r3, [pc, #32]	; (8013dac <_init_tcb+0x30>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	6283      	str	r3, [r0, #40]	; 0x28
 8013d90:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d94:	f640 3268 	movw	r2, #2920	; 0xb68
 8013d98:	6243      	str	r3, [r0, #36]	; 0x24
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	8001      	strh	r1, [r0, #0]
 8013d9e:	8702      	strh	r2, [r0, #56]	; 0x38
 8013da0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8013da4:	bd10      	pop	{r4, pc}
 8013da6:	f803 4b01 	strb.w	r4, [r3], #1
 8013daa:	e7ec      	b.n	8013d86 <_init_tcb+0xa>
 8013dac:	20010694 	mulcs	r1, r4, r6

08013db0 <memcpy.isra.0>:
 8013db0:	3801      	subs	r0, #1
 8013db2:	440a      	add	r2, r1
 8013db4:	4291      	cmp	r1, r2
 8013db6:	d100      	bne.n	8013dba <memcpy.isra.0+0xa>
 8013db8:	4770      	bx	lr
 8013dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013dbe:	f800 3f01 	strb.w	r3, [r0, #1]!
 8013dc2:	e7f7      	b.n	8013db4 <memcpy.isra.0+0x4>

08013dc4 <_bswap32>:
 8013dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013dc6:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 8013dca:	2204      	movs	r2, #4
 8013dcc:	4629      	mov	r1, r5
 8013dce:	4604      	mov	r4, r0
 8013dd0:	eb0d 0002 	add.w	r0, sp, r2
 8013dd4:	f7ff ffec 	bl	8013db0 <memcpy.isra.0>
 8013dd8:	9b01      	ldr	r3, [sp, #4]
 8013dda:	2204      	movs	r2, #4
 8013ddc:	ba1b      	rev	r3, r3
 8013dde:	eb0d 0102 	add.w	r1, sp, r2
 8013de2:	4628      	mov	r0, r5
 8013de4:	9301      	str	r3, [sp, #4]
 8013de6:	3426      	adds	r4, #38	; 0x26
 8013de8:	f7ff ffe2 	bl	8013db0 <memcpy.isra.0>
 8013dec:	2204      	movs	r2, #4
 8013dee:	eb0d 0002 	add.w	r0, sp, r2
 8013df2:	4621      	mov	r1, r4
 8013df4:	f7ff ffdc 	bl	8013db0 <memcpy.isra.0>
 8013df8:	9b01      	ldr	r3, [sp, #4]
 8013dfa:	2204      	movs	r2, #4
 8013dfc:	ba1b      	rev	r3, r3
 8013dfe:	eb0d 0102 	add.w	r1, sp, r2
 8013e02:	4620      	mov	r0, r4
 8013e04:	9301      	str	r3, [sp, #4]
 8013e06:	f7ff ffd3 	bl	8013db0 <memcpy.isra.0>
 8013e0a:	b003      	add	sp, #12
 8013e0c:	bd30      	pop	{r4, r5, pc}
	...

08013e10 <_tcp_send_package>:
 8013e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e14:	7a0b      	ldrb	r3, [r1, #8]
 8013e16:	4c4c      	ldr	r4, [pc, #304]	; (8013f48 <_tcp_send_package+0x138>)
 8013e18:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8013e1a:	f013 0f02 	tst.w	r3, #2
 8013e1e:	4605      	mov	r5, r0
 8013e20:	bf0c      	ite	eq
 8013e22:	f04f 0805 	moveq.w	r8, #5
 8013e26:	f04f 0806 	movne.w	r8, #6
 8013e2a:	460f      	mov	r7, r1
 8013e2c:	2206      	movs	r2, #6
 8013e2e:	f100 0108 	add.w	r1, r0, #8
 8013e32:	4620      	mov	r0, r4
 8013e34:	f7ff ffbc 	bl	8013db0 <memcpy.isra.0>
 8013e38:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8013e3c:	f8b4 35ec 	ldrh.w	r3, [r4, #1516]	; 0x5ec
 8013e40:	8263      	strh	r3, [r4, #18]
 8013e42:	b2b6      	uxth	r6, r6
 8013e44:	1c5a      	adds	r2, r3, #1
 8013e46:	f105 0904 	add.w	r9, r5, #4
 8013e4a:	f106 0314 	add.w	r3, r6, #20
 8013e4e:	ba5b      	rev16	r3, r3
 8013e50:	f8a4 25ec 	strh.w	r2, [r4, #1516]	; 0x5ec
 8013e54:	4649      	mov	r1, r9
 8013e56:	2204      	movs	r2, #4
 8013e58:	f104 001e 	add.w	r0, r4, #30
 8013e5c:	8223      	strh	r3, [r4, #16]
 8013e5e:	f04f 0a00 	mov.w	sl, #0
 8013e62:	f7ff ffa5 	bl	8013db0 <memcpy.isra.0>
 8013e66:	2114      	movs	r1, #20
 8013e68:	f104 000e 	add.w	r0, r4, #14
 8013e6c:	f8a4 a018 	strh.w	sl, [r4, #24]
 8013e70:	f001 ff7f 	bl	8015d72 <net_chksum>
 8013e74:	882b      	ldrh	r3, [r5, #0]
 8013e76:	8463      	strh	r3, [r4, #34]	; 0x22
 8013e78:	886b      	ldrh	r3, [r5, #2]
 8013e7a:	84a3      	strh	r3, [r4, #36]	; 0x24
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 8013e82:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	8320      	strh	r0, [r4, #24]
 8013e8a:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
 8013e8e:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 8013e92:	7a3b      	ldrb	r3, [r7, #8]
 8013e94:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8013e98:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 8013e9a:	8622      	strh	r2, [r4, #48]	; 0x30
 8013e9c:	079b      	lsls	r3, r3, #30
 8013e9e:	8baa      	ldrh	r2, [r5, #28]
 8013ea0:	86a2      	strh	r2, [r4, #52]	; 0x34
 8013ea2:	bf41      	itttt	mi
 8013ea4:	f240 4302 	movwmi	r3, #1026	; 0x402
 8013ea8:	4622      	movmi	r2, r4
 8013eaa:	86e3      	strhmi	r3, [r4, #54]	; 0x36
 8013eac:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 8013eb0:	bf48      	it	mi
 8013eb2:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 8013eb6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8013eb8:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
 8013ebc:	bf58      	it	pl
 8013ebe:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d13e      	bne.n	8013f44 <_tcp_send_package+0x134>
 8013ec6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8013ec8:	481f      	ldr	r0, [pc, #124]	; (8013f48 <_tcp_send_package+0x138>)
 8013eca:	ba5b      	rev16	r3, r3
 8013ecc:	8463      	strh	r3, [r4, #34]	; 0x22
 8013ece:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8013ed0:	ba5b      	rev16	r3, r3
 8013ed2:	84a3      	strh	r3, [r4, #36]	; 0x24
 8013ed4:	f7ff ff76 	bl	8013dc4 <_bswap32>
 8013ed8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013eda:	491c      	ldr	r1, [pc, #112]	; (8013f4c <_tcp_send_package+0x13c>)
 8013edc:	ba5b      	rev16	r3, r3
 8013ede:	8623      	strh	r3, [r4, #48]	; 0x30
 8013ee0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013ee2:	a801      	add	r0, sp, #4
 8013ee4:	ba5b      	rev16	r3, r3
 8013ee6:	220c      	movs	r2, #12
 8013ee8:	86a3      	strh	r3, [r4, #52]	; 0x34
 8013eea:	f7ff ff61 	bl	8013db0 <memcpy.isra.0>
 8013eee:	4918      	ldr	r1, [pc, #96]	; (8013f50 <_tcp_send_package+0x140>)
 8013ef0:	4816      	ldr	r0, [pc, #88]	; (8013f4c <_tcp_send_package+0x13c>)
 8013ef2:	2204      	movs	r2, #4
 8013ef4:	f7ff ff5c 	bl	8013db0 <memcpy.isra.0>
 8013ef8:	2204      	movs	r2, #4
 8013efa:	4649      	mov	r1, r9
 8013efc:	4815      	ldr	r0, [pc, #84]	; (8013f54 <_tcp_send_package+0x144>)
 8013efe:	f7ff ff57 	bl	8013db0 <memcpy.isra.0>
 8013f02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8013f06:	83e3      	strh	r3, [r4, #30]
 8013f08:	f106 010c 	add.w	r1, r6, #12
 8013f0c:	ba73      	rev16	r3, r6
 8013f0e:	480f      	ldr	r0, [pc, #60]	; (8013f4c <_tcp_send_package+0x13c>)
 8013f10:	8423      	strh	r3, [r4, #32]
 8013f12:	f001 ff2e 	bl	8015d72 <net_chksum>
 8013f16:	a901      	add	r1, sp, #4
 8013f18:	4605      	mov	r5, r0
 8013f1a:	220c      	movs	r2, #12
 8013f1c:	480b      	ldr	r0, [pc, #44]	; (8013f4c <_tcp_send_package+0x13c>)
 8013f1e:	f7ff ff47 	bl	8013db0 <memcpy.isra.0>
 8013f22:	4809      	ldr	r0, [pc, #36]	; (8013f48 <_tcp_send_package+0x138>)
 8013f24:	8665      	strh	r5, [r4, #50]	; 0x32
 8013f26:	f106 0122 	add.w	r1, r6, #34	; 0x22
 8013f2a:	b004      	add	sp, #16
 8013f2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f30:	f005 be0e 	b.w	8019b50 <emac_eth_send>
 8013f34:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8013f36:	5cc9      	ldrb	r1, [r1, r3]
 8013f38:	54d1      	strb	r1, [r2, r3]
 8013f3a:	3301      	adds	r3, #1
 8013f3c:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8013f3e:	4299      	cmp	r1, r3
 8013f40:	d8f8      	bhi.n	8013f34 <_tcp_send_package+0x124>
 8013f42:	e7c0      	b.n	8013ec6 <_tcp_send_package+0xb6>
 8013f44:	2300      	movs	r3, #0
 8013f46:	e7f9      	b.n	8013f3c <_tcp_send_package+0x12c>
 8013f48:	10000000 	andne	r0, r0, r0
 8013f4c:	10000016 	andne	r0, r0, r6, lsl r0
 8013f50:	2000928c 	andcs	r9, r0, ip, lsl #5
 8013f54:	1000001a 	andne	r0, r0, sl, lsl r0

08013f58 <_send_reset>:
 8013f58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013f5a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8013f5e:	075a      	lsls	r2, r3, #29
 8013f60:	4604      	mov	r4, r0
 8013f62:	460e      	mov	r6, r1
 8013f64:	d421      	bmi.n	8013faa <_send_reset+0x52>
 8013f66:	2204      	movs	r2, #4
 8013f68:	f013 0310 	ands.w	r3, r3, #16
 8013f6c:	f88d 200c 	strb.w	r2, [sp, #12]
 8013f70:	d01d      	beq.n	8013fae <_send_reset+0x56>
 8013f72:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 8013f76:	4668      	mov	r0, sp
 8013f78:	f7ff ff1a 	bl	8013db0 <memcpy.isra.0>
 8013f7c:	9b00      	ldr	r3, [sp, #0]
 8013f7e:	9301      	str	r3, [sp, #4]
 8013f80:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8013f84:	f104 0126 	add.w	r1, r4, #38	; 0x26
 8013f88:	f3c3 0540 	ubfx	r5, r3, #1, #1
 8013f8c:	4668      	mov	r0, sp
 8013f8e:	07db      	lsls	r3, r3, #31
 8013f90:	f04f 0204 	mov.w	r2, #4
 8013f94:	bf48      	it	mi
 8013f96:	3501      	addmi	r5, #1
 8013f98:	f7ff ff0a 	bl	8013db0 <memcpy.isra.0>
 8013f9c:	9b00      	ldr	r3, [sp, #0]
 8013f9e:	a901      	add	r1, sp, #4
 8013fa0:	441d      	add	r5, r3
 8013fa2:	4630      	mov	r0, r6
 8013fa4:	9502      	str	r5, [sp, #8]
 8013fa6:	f7ff ff33 	bl	8013e10 <_tcp_send_package>
 8013faa:	b004      	add	sp, #16
 8013fac:	bd70      	pop	{r4, r5, r6, pc}
 8013fae:	9301      	str	r3, [sp, #4]
 8013fb0:	2314      	movs	r3, #20
 8013fb2:	f88d 300c 	strb.w	r3, [sp, #12]
 8013fb6:	e7e3      	b.n	8013f80 <_send_reset+0x28>

08013fb8 <tcp_begin>:
 8013fb8:	b508      	push	{r3, lr}
 8013fba:	4b0b      	ldr	r3, [pc, #44]	; (8013fe8 <tcp_begin+0x30>)
 8013fbc:	f8b3 25f0 	ldrh.w	r2, [r3, #1520]	; 0x5f0
 8013fc0:	4282      	cmp	r2, r0
 8013fc2:	4601      	mov	r1, r0
 8013fc4:	d102      	bne.n	8013fcc <tcp_begin+0x14>
 8013fc6:	f893 0630 	ldrb.w	r0, [r3, #1584]	; 0x630
 8013fca:	b130      	cbz	r0, 8013fda <tcp_begin+0x22>
 8013fcc:	b12a      	cbz	r2, 8013fda <tcp_begin+0x22>
 8013fce:	4807      	ldr	r0, [pc, #28]	; (8013fec <tcp_begin+0x34>)
 8013fd0:	f003 ff9a 	bl	8017f08 <console_error>
 8013fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fd8:	bd08      	pop	{r3, pc}
 8013fda:	4805      	ldr	r0, [pc, #20]	; (8013ff0 <tcp_begin+0x38>)
 8013fdc:	f8a3 15f0 	strh.w	r1, [r3, #1520]	; 0x5f0
 8013fe0:	f7ff fecc 	bl	8013d7c <_init_tcb>
 8013fe4:	2000      	movs	r0, #0
 8013fe6:	e7f7      	b.n	8013fd8 <tcp_begin+0x20>
 8013fe8:	10000000 	andne	r0, r0, r0
 8013fec:	0801d452 	stmdaeq	r1, {r1, r4, r6, sl, ip, lr, pc}
 8013ff0:	100005f0 	strdne	r0, [r0], -r0	; <UNPREDICTABLE>

08013ff4 <tcp_write>:
 8013ff4:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8013ff8:	b530      	push	{r4, r5, lr}
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	bf28      	it	cs
 8013ffe:	461a      	movcs	r2, r3
 8014000:	4615      	mov	r5, r2
 8014002:	4b12      	ldr	r3, [pc, #72]	; (801404c <tcp_write+0x58>)
 8014004:	2244      	movs	r2, #68	; 0x44
 8014006:	4350      	muls	r0, r2
 8014008:	181c      	adds	r4, r3, r0
 801400a:	b085      	sub	sp, #20
 801400c:	f8d4 2604 	ldr.w	r2, [r4, #1540]	; 0x604
 8014010:	9201      	str	r2, [sp, #4]
 8014012:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8014016:	f8d4 2624 	ldr.w	r2, [r4, #1572]	; 0x624
 801401a:	f8c4 161c 	str.w	r1, [r4, #1564]	; 0x61c
 801401e:	9202      	str	r2, [sp, #8]
 8014020:	4418      	add	r0, r3
 8014022:	2218      	movs	r2, #24
 8014024:	f8a4 5620 	strh.w	r5, [r4, #1568]	; 0x620
 8014028:	a901      	add	r1, sp, #4
 801402a:	f88d 200c 	strb.w	r2, [sp, #12]
 801402e:	f7ff feef 	bl	8013e10 <_tcp_send_package>
 8014032:	2300      	movs	r3, #0
 8014034:	f8c4 361c 	str.w	r3, [r4, #1564]	; 0x61c
 8014038:	f8a4 3620 	strh.w	r3, [r4, #1568]	; 0x620
 801403c:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8014040:	442b      	add	r3, r5
 8014042:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
 8014046:	b005      	add	sp, #20
 8014048:	bd30      	pop	{r4, r5, pc}
 801404a:	bf00      	nop
 801404c:	10000000 	andne	r0, r0, r0

08014050 <tcp_read>:
 8014050:	4b23      	ldr	r3, [pc, #140]	; (80140e0 <tcp_read+0x90>)
 8014052:	2244      	movs	r2, #68	; 0x44
 8014054:	4342      	muls	r2, r0
 8014056:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014058:	189c      	adds	r4, r3, r2
 801405a:	b085      	sub	sp, #20
 801405c:	f894 5630 	ldrb.w	r5, [r4, #1584]	; 0x630
 8014060:	2d07      	cmp	r5, #7
 8014062:	d118      	bne.n	8014096 <tcp_read+0x46>
 8014064:	f8d4 1604 	ldr.w	r1, [r4, #1540]	; 0x604
 8014068:	9101      	str	r1, [sp, #4]
 801406a:	f8d4 1624 	ldr.w	r1, [r4, #1572]	; 0x624
 801406e:	9102      	str	r1, [sp, #8]
 8014070:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8014074:	2111      	movs	r1, #17
 8014076:	f88d 100c 	strb.w	r1, [sp, #12]
 801407a:	1898      	adds	r0, r3, r2
 801407c:	a901      	add	r1, sp, #4
 801407e:	f7ff fec7 	bl	8013e10 <_tcp_send_package>
 8014082:	2309      	movs	r3, #9
 8014084:	f884 3630 	strb.w	r3, [r4, #1584]	; 0x630
 8014088:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 801408c:	3301      	adds	r3, #1
 801408e:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
 8014092:	2000      	movs	r0, #0
 8014094:	e022      	b.n	80140dc <tcp_read+0x8c>
 8014096:	f44f 6237 	mov.w	r2, #2928	; 0xb70
 801409a:	4350      	muls	r0, r2
 801409c:	181e      	adds	r6, r3, r0
 801409e:	f8b6 5636 	ldrh.w	r5, [r6, #1590]	; 0x636
 80140a2:	f8b6 2634 	ldrh.w	r2, [r6, #1588]	; 0x634
 80140a6:	42aa      	cmp	r2, r5
 80140a8:	d0f3      	beq.n	8014092 <tcp_read+0x42>
 80140aa:	f240 52b6 	movw	r2, #1462	; 0x5b6
 80140ae:	f100 0c04 	add.w	ip, r0, #4
 80140b2:	436a      	muls	r2, r5
 80140b4:	f203 6734 	addw	r7, r3, #1588	; 0x634
 80140b8:	4494      	add	ip, r2
 80140ba:	4467      	add	r7, ip
 80140bc:	600f      	str	r7, [r1, #0]
 80140be:	4402      	add	r2, r0
 80140c0:	441a      	add	r2, r3
 80140c2:	f8b4 3628 	ldrh.w	r3, [r4, #1576]	; 0x628
 80140c6:	f8b2 0bec 	ldrh.w	r0, [r2, #3052]	; 0xbec
 80140ca:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 80140ce:	f8a4 3628 	strh.w	r3, [r4, #1576]	; 0x628
 80140d2:	1c6b      	adds	r3, r5, #1
 80140d4:	f003 0301 	and.w	r3, r3, #1
 80140d8:	f8a6 3636 	strh.w	r3, [r6, #1590]	; 0x636
 80140dc:	b005      	add	sp, #20
 80140de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140e0:	10000000 	andne	r0, r0, r0

080140e4 <memcpy.isra.0>:
 80140e4:	3801      	subs	r0, #1
 80140e6:	440a      	add	r2, r1
 80140e8:	4291      	cmp	r1, r2
 80140ea:	d100      	bne.n	80140ee <memcpy.isra.0+0xa>
 80140ec:	4770      	bx	lr
 80140ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80140f2:	f800 3f01 	strb.w	r3, [r0, #1]!
 80140f6:	e7f7      	b.n	80140e8 <memcpy.isra.0+0x4>

080140f8 <net_memcpy>:
 80140f8:	ea40 0301 	orr.w	r3, r0, r1
 80140fc:	079b      	lsls	r3, r3, #30
 80140fe:	b570      	push	{r4, r5, r6, lr}
 8014100:	d108      	bne.n	8014114 <net_memcpy+0x1c>
 8014102:	f022 0303 	bic.w	r3, r2, #3
 8014106:	1f04      	subs	r4, r0, #4
 8014108:	18cd      	adds	r5, r1, r3
 801410a:	42a9      	cmp	r1, r5
 801410c:	d108      	bne.n	8014120 <net_memcpy+0x28>
 801410e:	1ad2      	subs	r2, r2, r3
 8014110:	4403      	add	r3, r0
 8014112:	e000      	b.n	8014116 <net_memcpy+0x1e>
 8014114:	4603      	mov	r3, r0
 8014116:	3b01      	subs	r3, #1
 8014118:	440a      	add	r2, r1
 801411a:	4291      	cmp	r1, r2
 801411c:	d105      	bne.n	801412a <net_memcpy+0x32>
 801411e:	bd70      	pop	{r4, r5, r6, pc}
 8014120:	f851 6b04 	ldr.w	r6, [r1], #4
 8014124:	f844 6f04 	str.w	r6, [r4, #4]!
 8014128:	e7ef      	b.n	801410a <net_memcpy+0x12>
 801412a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801412e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014132:	e7f2      	b.n	801411a <net_memcpy+0x22>

08014134 <udp_set_ip>:
 8014134:	b513      	push	{r0, r1, r4, lr}
 8014136:	2204      	movs	r2, #4
 8014138:	4604      	mov	r4, r0
 801413a:	6803      	ldr	r3, [r0, #0]
 801413c:	4809      	ldr	r0, [pc, #36]	; (8014164 <udp_set_ip+0x30>)
 801413e:	9301      	str	r3, [sp, #4]
 8014140:	eb0d 0102 	add.w	r1, sp, r2
 8014144:	f7ff ffce 	bl	80140e4 <memcpy.isra.0>
 8014148:	6862      	ldr	r2, [r4, #4]
 801414a:	4b07      	ldr	r3, [pc, #28]	; (8014168 <udp_set_ip+0x34>)
 801414c:	43d1      	mvns	r1, r2
 801414e:	6019      	str	r1, [r3, #0]
 8014150:	6823      	ldr	r3, [r4, #0]
 8014152:	4013      	ands	r3, r2
 8014154:	4a05      	ldr	r2, [pc, #20]	; (801416c <udp_set_ip+0x38>)
 8014156:	6013      	str	r3, [r2, #0]
 8014158:	68a2      	ldr	r2, [r4, #8]
 801415a:	4b05      	ldr	r3, [pc, #20]	; (8014170 <udp_set_ip+0x3c>)
 801415c:	601a      	str	r2, [r3, #0]
 801415e:	b002      	add	sp, #8
 8014160:	bd10      	pop	{r4, pc}
 8014162:	bf00      	nop
 8014164:	2000efa2 	andcs	lr, r0, r2, lsr #31
 8014168:	200092b8 			; <UNDEFINED> instruction: 0x200092b8
 801416c:	200092c0 	andcs	r9, r0, r0, asr #5
 8014170:	200092bc 			; <UNDEFINED> instruction: 0x200092bc

08014174 <udp_bind>:
 8014174:	4a0a      	ldr	r2, [pc, #40]	; (80141a0 <udp_bind+0x2c>)
 8014176:	b510      	push	{r4, lr}
 8014178:	2300      	movs	r3, #0
 801417a:	4614      	mov	r4, r2
 801417c:	f852 1b04 	ldr.w	r1, [r2], #4
 8014180:	4281      	cmp	r1, r0
 8014182:	d008      	beq.n	8014196 <udp_bind+0x22>
 8014184:	b149      	cbz	r1, 801419a <udp_bind+0x26>
 8014186:	3301      	adds	r3, #1
 8014188:	2b08      	cmp	r3, #8
 801418a:	d1f7      	bne.n	801417c <udp_bind+0x8>
 801418c:	4805      	ldr	r0, [pc, #20]	; (80141a4 <udp_bind+0x30>)
 801418e:	f003 febb 	bl	8017f08 <console_error>
 8014192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014196:	4618      	mov	r0, r3
 8014198:	bd10      	pop	{r4, pc}
 801419a:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 801419e:	e7fa      	b.n	8014196 <udp_bind+0x22>
 80141a0:	200092c8 	andcs	r9, r0, r8, asr #5
 80141a4:	0801d472 	stmdaeq	r1, {r1, r4, r5, r6, sl, ip, lr, pc}

080141a8 <udp_unbind>:
 80141a8:	b510      	push	{r4, lr}
 80141aa:	4a0c      	ldr	r2, [pc, #48]	; (80141dc <udp_unbind+0x34>)
 80141ac:	2300      	movs	r3, #0
 80141ae:	4611      	mov	r1, r2
 80141b0:	f852 4b04 	ldr.w	r4, [r2], #4
 80141b4:	4284      	cmp	r4, r0
 80141b6:	d108      	bne.n	80141ca <udp_unbind+0x22>
 80141b8:	2000      	movs	r0, #0
 80141ba:	f640 3294 	movw	r2, #2964	; 0xb94
 80141be:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80141c2:	4353      	muls	r3, r2
 80141c4:	4a06      	ldr	r2, [pc, #24]	; (80141e0 <udp_unbind+0x38>)
 80141c6:	50d0      	str	r0, [r2, r3]
 80141c8:	bd10      	pop	{r4, pc}
 80141ca:	3301      	adds	r3, #1
 80141cc:	2b08      	cmp	r3, #8
 80141ce:	d1ef      	bne.n	80141b0 <udp_unbind+0x8>
 80141d0:	4804      	ldr	r0, [pc, #16]	; (80141e4 <udp_unbind+0x3c>)
 80141d2:	f003 fe99 	bl	8017f08 <console_error>
 80141d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141da:	e7f5      	b.n	80141c8 <udp_unbind+0x20>
 80141dc:	200092c8 	andcs	r9, r0, r8, asr #5
 80141e0:	200092e8 	andcs	r9, r0, r8, ror #5
 80141e4:	0801d477 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, ip, lr, pc}

080141e8 <udp_recv>:
 80141e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141ec:	4604      	mov	r4, r0
 80141ee:	4698      	mov	r8, r3
 80141f0:	4608      	mov	r0, r1
 80141f2:	f640 3394 	movw	r3, #2964	; 0xb94
 80141f6:	4916      	ldr	r1, [pc, #88]	; (8014250 <udp_recv+0x68>)
 80141f8:	435c      	muls	r4, r3
 80141fa:	190f      	adds	r7, r1, r4
 80141fc:	5b0b      	ldrh	r3, [r1, r4]
 80141fe:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8014202:	4563      	cmp	r3, ip
 8014204:	d021      	beq.n	801424a <udp_recv+0x62>
 8014206:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 801420a:	fb03 fc0c 	mul.w	ip, r3, ip
 801420e:	eb0c 0604 	add.w	r6, ip, r4
 8014212:	440e      	add	r6, r1
 8014214:	3404      	adds	r4, #4
 8014216:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 801421a:	4295      	cmp	r5, r2
 801421c:	bf28      	it	cs
 801421e:	4615      	movcs	r5, r2
 8014220:	4464      	add	r4, ip
 8014222:	462a      	mov	r2, r5
 8014224:	4421      	add	r1, r4
 8014226:	f7ff ff67 	bl	80140f8 <net_memcpy>
 801422a:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 801422e:	f8c8 3000 	str.w	r3, [r8]
 8014232:	9b06      	ldr	r3, [sp, #24]
 8014234:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 8014238:	801a      	strh	r2, [r3, #0]
 801423a:	887b      	ldrh	r3, [r7, #2]
 801423c:	3301      	adds	r3, #1
 801423e:	f003 0301 	and.w	r3, r3, #1
 8014242:	807b      	strh	r3, [r7, #2]
 8014244:	4628      	mov	r0, r5
 8014246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801424a:	2500      	movs	r5, #0
 801424c:	e7fa      	b.n	8014244 <udp_recv+0x5c>
 801424e:	bf00      	nop
 8014250:	200092e8 	andcs	r9, r0, r8, ror #5

08014254 <udp_recv2>:
 8014254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014256:	4c11      	ldr	r4, [pc, #68]	; (801429c <udp_recv2+0x48>)
 8014258:	f640 3594 	movw	r5, #2964	; 0xb94
 801425c:	4368      	muls	r0, r5
 801425e:	1827      	adds	r7, r4, r0
 8014260:	5a26      	ldrh	r6, [r4, r0]
 8014262:	887d      	ldrh	r5, [r7, #2]
 8014264:	42ae      	cmp	r6, r5
 8014266:	d017      	beq.n	8014298 <udp_recv2+0x44>
 8014268:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 801426c:	1d06      	adds	r6, r0, #4
 801426e:	fb0c f505 	mul.w	r5, ip, r5
 8014272:	442e      	add	r6, r5
 8014274:	4405      	add	r5, r0
 8014276:	4426      	add	r6, r4
 8014278:	442c      	add	r4, r5
 801427a:	600e      	str	r6, [r1, #0]
 801427c:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 8014280:	6011      	str	r1, [r2, #0]
 8014282:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 8014286:	801a      	strh	r2, [r3, #0]
 8014288:	887b      	ldrh	r3, [r7, #2]
 801428a:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 801428e:	3301      	adds	r3, #1
 8014290:	f003 0301 	and.w	r3, r3, #1
 8014294:	807b      	strh	r3, [r7, #2]
 8014296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014298:	2000      	movs	r0, #0
 801429a:	e7fc      	b.n	8014296 <udp_recv2+0x42>
 801429c:	200092e8 	andcs	r9, r0, r8, ror #5

080142a0 <udp_send>:
 80142a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80142a4:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80143f8 <udp_send+0x158>
 80142a8:	461c      	mov	r4, r3
 80142aa:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 80142ae:	4607      	mov	r7, r0
 80142b0:	4688      	mov	r8, r1
 80142b2:	4616      	mov	r6, r2
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	f000 808b 	beq.w	80143d0 <udp_send+0x130>
 80142ba:	1c63      	adds	r3, r4, #1
 80142bc:	d141      	bne.n	8014342 <udp_send+0xa2>
 80142be:	4a46      	ldr	r2, [pc, #280]	; (80143d8 <udp_send+0x138>)
 80142c0:	2307      	movs	r3, #7
 80142c2:	4611      	mov	r1, r2
 80142c4:	20ff      	movs	r0, #255	; 0xff
 80142c6:	e001      	b.n	80142cc <udp_send+0x2c>
 80142c8:	f802 0b01 	strb.w	r0, [r2], #1
 80142cc:	3b01      	subs	r3, #1
 80142ce:	d1fb      	bne.n	80142c8 <udp_send+0x28>
 80142d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142d4:	83cb      	strh	r3, [r1, #30]
 80142d6:	840b      	strh	r3, [r1, #32]
 80142d8:	f8df a120 	ldr.w	sl, [pc, #288]	; 80143fc <udp_send+0x15c>
 80142dc:	4c3e      	ldr	r4, [pc, #248]	; (80143d8 <udp_send+0x138>)
 80142de:	f8ba 3000 	ldrh.w	r3, [sl]
 80142e2:	8263      	strh	r3, [r4, #18]
 80142e4:	f106 031c 	add.w	r3, r6, #28
 80142e8:	ba5b      	rev16	r3, r3
 80142ea:	2500      	movs	r5, #0
 80142ec:	2114      	movs	r1, #20
 80142ee:	f104 000e 	add.w	r0, r4, #14
 80142f2:	8223      	strh	r3, [r4, #16]
 80142f4:	8325      	strh	r5, [r4, #24]
 80142f6:	f001 fd3c 	bl	8015d72 <net_chksum>
 80142fa:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 80142fe:	8320      	strh	r0, [r4, #24]
 8014300:	ba5b      	rev16	r3, r3
 8014302:	8463      	strh	r3, [r4, #34]	; 0x22
 8014304:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8014308:	ba5b      	rev16	r3, r3
 801430a:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 801430e:	84a3      	strh	r3, [r4, #36]	; 0x24
 8014310:	f106 0308 	add.w	r3, r6, #8
 8014314:	ba5b      	rev16	r3, r3
 8014316:	4632      	mov	r2, r6
 8014318:	4641      	mov	r1, r8
 801431a:	bf28      	it	cs
 801431c:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 8014320:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8014324:	84e3      	strh	r3, [r4, #38]	; 0x26
 8014326:	f7ff fee7 	bl	80140f8 <net_memcpy>
 801432a:	4620      	mov	r0, r4
 801432c:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 8014330:	f005 fc0e 	bl	8019b50 <emac_eth_send>
 8014334:	f8ba 3000 	ldrh.w	r3, [sl]
 8014338:	3301      	adds	r3, #1
 801433a:	f8aa 3000 	strh.w	r3, [sl]
 801433e:	4628      	mov	r0, r5
 8014340:	e037      	b.n	80143b2 <udp_send+0x112>
 8014342:	4b26      	ldr	r3, [pc, #152]	; (80143dc <udp_send+0x13c>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	43a3      	bics	r3, r4
 8014348:	d10f      	bne.n	801436a <udp_send+0xca>
 801434a:	4a23      	ldr	r2, [pc, #140]	; (80143d8 <udp_send+0x138>)
 801434c:	2307      	movs	r3, #7
 801434e:	21ff      	movs	r1, #255	; 0xff
 8014350:	e001      	b.n	8014356 <udp_send+0xb6>
 8014352:	f802 1b01 	strb.w	r1, [r2], #1
 8014356:	3b01      	subs	r3, #1
 8014358:	d1fb      	bne.n	8014352 <udp_send+0xb2>
 801435a:	2204      	movs	r2, #4
 801435c:	4820      	ldr	r0, [pc, #128]	; (80143e0 <udp_send+0x140>)
 801435e:	9401      	str	r4, [sp, #4]
 8014360:	eb0d 0102 	add.w	r1, sp, r2
 8014364:	f7ff febe 	bl	80140e4 <memcpy.isra.0>
 8014368:	e7b6      	b.n	80142d8 <udp_send+0x38>
 801436a:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 801436e:	2be0      	cmp	r3, #224	; 0xe0
 8014370:	d10e      	bne.n	8014390 <udp_send+0xf0>
 8014372:	491c      	ldr	r1, [pc, #112]	; (80143e4 <udp_send+0x144>)
 8014374:	4818      	ldr	r0, [pc, #96]	; (80143d8 <udp_send+0x138>)
 8014376:	f3c4 2206 	ubfx	r2, r4, #8, #7
 801437a:	70ca      	strb	r2, [r1, #3]
 801437c:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8014380:	710a      	strb	r2, [r1, #4]
 8014382:	f3c4 6207 	ubfx	r2, r4, #24, #8
 8014386:	714a      	strb	r2, [r1, #5]
 8014388:	2206      	movs	r2, #6
 801438a:	f7ff feab 	bl	80140e4 <memcpy.isra.0>
 801438e:	e7e4      	b.n	801435a <udp_send+0xba>
 8014390:	4b15      	ldr	r3, [pc, #84]	; (80143e8 <udp_send+0x148>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	43a3      	bics	r3, r4
 8014396:	d00f      	beq.n	80143b8 <udp_send+0x118>
 8014398:	4d14      	ldr	r5, [pc, #80]	; (80143ec <udp_send+0x14c>)
 801439a:	490f      	ldr	r1, [pc, #60]	; (80143d8 <udp_send+0x138>)
 801439c:	6828      	ldr	r0, [r5, #0]
 801439e:	f001 f9b9 	bl	8015714 <arp_cache_lookup>
 80143a2:	682b      	ldr	r3, [r5, #0]
 80143a4:	4298      	cmp	r0, r3
 80143a6:	d0d8      	beq.n	801435a <udp_send+0xba>
 80143a8:	4811      	ldr	r0, [pc, #68]	; (80143f0 <udp_send+0x150>)
 80143aa:	f003 fdad 	bl	8017f08 <console_error>
 80143ae:	f06f 0002 	mvn.w	r0, #2
 80143b2:	b002      	add	sp, #8
 80143b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143b8:	4907      	ldr	r1, [pc, #28]	; (80143d8 <udp_send+0x138>)
 80143ba:	4620      	mov	r0, r4
 80143bc:	f001 f9aa 	bl	8015714 <arp_cache_lookup>
 80143c0:	42a0      	cmp	r0, r4
 80143c2:	d0ca      	beq.n	801435a <udp_send+0xba>
 80143c4:	480b      	ldr	r0, [pc, #44]	; (80143f4 <udp_send+0x154>)
 80143c6:	f003 fd9f 	bl	8017f08 <console_error>
 80143ca:	f06f 0001 	mvn.w	r0, #1
 80143ce:	e7f0      	b.n	80143b2 <udp_send+0x112>
 80143d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80143d4:	e7ed      	b.n	80143b2 <udp_send+0x112>
 80143d6:	bf00      	nop
 80143d8:	2000ef88 	andcs	lr, r0, r8, lsl #31
 80143dc:	200092b8 			; <UNDEFINED> instruction: 0x200092b8
 80143e0:	2000efa6 	andcs	lr, r0, r6, lsr #31
 80143e4:	20000014 	andcs	r0, r0, r4, lsl r0
 80143e8:	200092c0 	andcs	r9, r0, r0, asr #5
 80143ec:	200092bc 			; <UNDEFINED> instruction: 0x200092bc
 80143f0:	0801d47f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, sl, ip, lr, pc}
 80143f4:	0801d4a5 	stmdaeq	r1, {r0, r2, r5, r7, sl, ip, lr, pc}
 80143f8:	200092c8 	andcs	r9, r0, r8, asr #5
 80143fc:	200092c4 	andcs	r9, r0, r4, asr #5

08014400 <strlen>:
 8014400:	4603      	mov	r3, r0
 8014402:	461a      	mov	r2, r3
 8014404:	3301      	adds	r3, #1
 8014406:	7811      	ldrb	r1, [r2, #0]
 8014408:	2900      	cmp	r1, #0
 801440a:	d1fa      	bne.n	8014402 <strlen+0x2>
 801440c:	1a10      	subs	r0, r2, r0
 801440e:	4770      	bx	lr

08014410 <strcmp>:
 8014410:	1e43      	subs	r3, r0, #1
 8014412:	3901      	subs	r1, #1
 8014414:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8014418:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801441c:	4290      	cmp	r0, r2
 801441e:	d001      	beq.n	8014424 <strcmp+0x14>
 8014420:	1a80      	subs	r0, r0, r2
 8014422:	e001      	b.n	8014428 <strcmp+0x18>
 8014424:	2800      	cmp	r0, #0
 8014426:	d1f5      	bne.n	8014414 <strcmp+0x4>
 8014428:	4770      	bx	lr

0801442a <strcpy.isra.0>:
 801442a:	3801      	subs	r0, #1
 801442c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014430:	f800 3f01 	strb.w	r3, [r0, #1]!
 8014434:	2b00      	cmp	r3, #0
 8014436:	d1f9      	bne.n	801442c <strcpy.isra.0+0x2>
 8014438:	4770      	bx	lr

0801443a <strcat.isra.0>:
 801443a:	b513      	push	{r0, r1, r4, lr}
 801443c:	4604      	mov	r4, r0
 801443e:	9101      	str	r1, [sp, #4]
 8014440:	f7ff ffde 	bl	8014400 <strlen>
 8014444:	9901      	ldr	r1, [sp, #4]
 8014446:	4420      	add	r0, r4
 8014448:	b002      	add	sp, #8
 801444a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801444e:	f7ff bfec 	b.w	801442a <strcpy.isra.0>
	...

08014454 <MDNS::MDNS()>:
 8014454:	b513      	push	{r0, r1, r4, lr}
 8014456:	4604      	mov	r4, r0
 8014458:	a901      	add	r1, sp, #4
 801445a:	4804      	ldr	r0, [pc, #16]	; (801446c <MDNS::MDNS()+0x18>)
 801445c:	f003 fef4 	bl	8018248 <inet_aton>
 8014460:	4b03      	ldr	r3, [pc, #12]	; (8014470 <MDNS::MDNS()+0x1c>)
 8014462:	9a01      	ldr	r2, [sp, #4]
 8014464:	601a      	str	r2, [r3, #0]
 8014466:	4620      	mov	r0, r4
 8014468:	b002      	add	sp, #8
 801446a:	bd10      	pop	{r4, pc}
 801446c:	0801d4d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, sl, ip, lr, pc}
 8014470:	2000f57c 	andcs	pc, r0, ip, ror r5	; <UNPREDICTABLE>

08014474 <MDNS::SetName(char const*)>:
 8014474:	b538      	push	{r3, r4, r5, lr}
 8014476:	4d0b      	ldr	r5, [pc, #44]	; (80144a4 <MDNS::SetName(char const*)+0x30>)
 8014478:	6828      	ldr	r0, [r5, #0]
 801447a:	460c      	mov	r4, r1
 801447c:	b108      	cbz	r0, 8014482 <MDNS::SetName(char const*)+0xe>
 801447e:	f003 fedd 	bl	801823c <operator delete[](void*)>
 8014482:	4620      	mov	r0, r4
 8014484:	f7ff ffbc 	bl	8014400 <strlen>
 8014488:	3007      	adds	r0, #7
 801448a:	f003 fedb 	bl	8018244 <operator new[](unsigned int)>
 801448e:	4621      	mov	r1, r4
 8014490:	6028      	str	r0, [r5, #0]
 8014492:	f7ff ffca 	bl	801442a <strcpy.isra.0>
 8014496:	6828      	ldr	r0, [r5, #0]
 8014498:	4903      	ldr	r1, [pc, #12]	; (80144a8 <MDNS::SetName(char const*)+0x34>)
 801449a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801449e:	f7ff bfcc 	b.w	801443a <strcat.isra.0>
 80144a2:	bf00      	nop
 80144a4:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 80144a8:	0801d4e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, sl, ip, lr, pc}

080144ac <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 80144ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144b0:	f04f 0e00 	mov.w	lr, #0
 80144b4:	4e1c      	ldr	r6, [pc, #112]	; (8014528 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 80144b6:	4f1d      	ldr	r7, [pc, #116]	; (801452c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 80144b8:	4675      	mov	r5, lr
 80144ba:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 80144be:	780b      	ldrb	r3, [r1, #0]
 80144c0:	1c68      	adds	r0, r5, #1
 80144c2:	b913      	cbnz	r3, 80144ca <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 80144c4:	7013      	strb	r3, [r2, #0]
 80144c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144ca:	2b3f      	cmp	r3, #63	; 0x3f
 80144cc:	d91c      	bls.n	8014508 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 80144ce:	7849      	ldrb	r1, [r1, #1]
 80144d0:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 80144d4:	430b      	orrs	r3, r1
 80144d6:	6839      	ldr	r1, [r7, #0]
 80144d8:	5ccc      	ldrb	r4, [r1, r3]
 80144da:	3301      	adds	r3, #1
 80144dc:	4419      	add	r1, r3
 80144de:	f1be 0f00 	cmp.w	lr, #0
 80144e2:	bf08      	it	eq
 80144e4:	4605      	moveq	r5, r0
 80144e6:	2300      	movs	r3, #0
 80144e8:	42a3      	cmp	r3, r4
 80144ea:	5cc8      	ldrb	r0, [r1, r3]
 80144ec:	d309      	bcc.n	8014502 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 80144ee:	4421      	add	r1, r4
 80144f0:	f04f 0e01 	mov.w	lr, #1
 80144f4:	4414      	add	r4, r2
 80144f6:	780b      	ldrb	r3, [r1, #0]
 80144f8:	b10b      	cbz	r3, 80144fe <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 80144fa:	f804 cb01 	strb.w	ip, [r4], #1
 80144fe:	4622      	mov	r2, r4
 8014500:	e7dd      	b.n	80144be <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 8014502:	54d0      	strb	r0, [r2, r3]
 8014504:	3301      	adds	r3, #1
 8014506:	e7ef      	b.n	80144e8 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 8014508:	4688      	mov	r8, r1
 801450a:	18d4      	adds	r4, r2, r3
 801450c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8014510:	f802 9b01 	strb.w	r9, [r2], #1
 8014514:	4294      	cmp	r4, r2
 8014516:	d1f9      	bne.n	801450c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 8014518:	1c5a      	adds	r2, r3, #1
 801451a:	4411      	add	r1, r2
 801451c:	f1be 0f00 	cmp.w	lr, #0
 8014520:	d1e9      	bne.n	80144f6 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 8014522:	181d      	adds	r5, r3, r0
 8014524:	e7e7      	b.n	80144f6 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 8014526:	bf00      	nop
 8014528:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 801452c:	2000f9b0 			; <UNDEFINED> instruction: 0x2000f9b0

08014530 <MDNS::FindFirstDotFromRight(char const*) const>:
 8014530:	b510      	push	{r4, lr}
 8014532:	4608      	mov	r0, r1
 8014534:	460c      	mov	r4, r1
 8014536:	f7ff ff63 	bl	8014400 <strlen>
 801453a:	4420      	add	r0, r4
 801453c:	42a0      	cmp	r0, r4
 801453e:	d903      	bls.n	8014548 <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 8014540:	f810 3901 	ldrb.w	r3, [r0], #-1
 8014544:	2b2e      	cmp	r3, #46	; 0x2e
 8014546:	d1f9      	bne.n	801453c <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 8014548:	3001      	adds	r0, #1
 801454a:	bd10      	pop	{r4, pc}

0801454c <MDNS::WriteDnsName(char const*, char*, bool)>:
 801454c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801454e:	4610      	mov	r0, r2
 8014550:	1c44      	adds	r4, r0, #1
 8014552:	460f      	mov	r7, r1
 8014554:	463d      	mov	r5, r7
 8014556:	f817 6b01 	ldrb.w	r6, [r7], #1
 801455a:	b946      	cbnz	r6, 801456e <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 801455c:	1a69      	subs	r1, r5, r1
 801455e:	7001      	strb	r1, [r0, #0]
 8014560:	7829      	ldrb	r1, [r5, #0]
 8014562:	b949      	cbnz	r1, 8014578 <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 8014564:	b10b      	cbz	r3, 801456a <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 8014566:	f804 1b01 	strb.w	r1, [r4], #1
 801456a:	1aa0      	subs	r0, r4, r2
 801456c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801456e:	2e2e      	cmp	r6, #46	; 0x2e
 8014570:	d0f4      	beq.n	801455c <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 8014572:	f804 6b01 	strb.w	r6, [r4], #1
 8014576:	e7ed      	b.n	8014554 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 8014578:	1c69      	adds	r1, r5, #1
 801457a:	4620      	mov	r0, r4
 801457c:	e7e8      	b.n	8014550 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

08014580 <MDNS::CreateAnswerLocalIpAddress()>:
 8014580:	b510      	push	{r4, lr}
 8014582:	4c10      	ldr	r4, [pc, #64]	; (80145c4 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 8014584:	4910      	ldr	r1, [pc, #64]	; (80145c8 <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 8014586:	2384      	movs	r3, #132	; 0x84
 8014588:	80e3      	strh	r3, [r4, #6]
 801458a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801458e:	2300      	movs	r3, #0
 8014590:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8014594:	6809      	ldr	r1, [r1, #0]
 8014596:	f104 0210 	add.w	r2, r4, #16
 801459a:	2301      	movs	r3, #1
 801459c:	f7ff ffd6 	bl	801454c <MDNS::WriteDnsName(char const*, char*, bool)>
 80145a0:	490a      	ldr	r1, [pc, #40]	; (80145cc <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 80145a2:	5011      	str	r1, [r2, r0]
 80145a4:	1813      	adds	r3, r2, r0
 80145a6:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80145aa:	605a      	str	r2, [r3, #4]
 80145ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80145b0:	811a      	strh	r2, [r3, #8]
 80145b2:	4a07      	ldr	r2, [pc, #28]	; (80145d0 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 80145b4:	6812      	ldr	r2, [r2, #0]
 80145b6:	6952      	ldr	r2, [r2, #20]
 80145b8:	f8c3 200a 	str.w	r2, [r3, #10]
 80145bc:	1b1b      	subs	r3, r3, r4
 80145be:	330a      	adds	r3, #10
 80145c0:	6023      	str	r3, [r4, #0]
 80145c2:	bd10      	pop	{r4, pc}
 80145c4:	2000f580 	andcs	pc, r0, r0, lsl #11
 80145c8:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 80145cc:	01800100 	orreq	r0, r0, r0, lsl #2
 80145d0:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

080145d4 <MDNS::Start()>:
 80145d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80145d6:	4c1d      	ldr	r4, [pc, #116]	; (801464c <MDNS::Start()+0x78>)
 80145d8:	4e1d      	ldr	r6, [pc, #116]	; (8014650 <MDNS::Start()+0x7c>)
 80145da:	4f1e      	ldr	r7, [pc, #120]	; (8014654 <MDNS::Start()+0x80>)
 80145dc:	f241 41e9 	movw	r1, #5353	; 0x14e9
 80145e0:	4605      	mov	r5, r0
 80145e2:	6820      	ldr	r0, [r4, #0]
 80145e4:	f000 fb29 	bl	8014c3a <Network::Begin(unsigned short)>
 80145e8:	683a      	ldr	r2, [r7, #0]
 80145ea:	6030      	str	r0, [r6, #0]
 80145ec:	4601      	mov	r1, r0
 80145ee:	6820      	ldr	r0, [r4, #0]
 80145f0:	f000 fb34 	bl	8014c5c <Network::JoinGroup(int, unsigned int)>
 80145f4:	4b18      	ldr	r3, [pc, #96]	; (8014658 <MDNS::Start()+0x84>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	b923      	cbnz	r3, 8014604 <MDNS::Start()+0x30>
 80145fa:	6821      	ldr	r1, [r4, #0]
 80145fc:	4628      	mov	r0, r5
 80145fe:	3120      	adds	r1, #32
 8014600:	f7ff ff38 	bl	8014474 <MDNS::SetName(char const*)>
 8014604:	4628      	mov	r0, r5
 8014606:	f7ff ffbb 	bl	8014580 <MDNS::CreateAnswerLocalIpAddress()>
 801460a:	4914      	ldr	r1, [pc, #80]	; (801465c <MDNS::Start()+0x88>)
 801460c:	7830      	ldrb	r0, [r6, #0]
 801460e:	f831 2b04 	ldrh.w	r2, [r1], #4
 8014612:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8014616:	9300      	str	r3, [sp, #0]
 8014618:	683b      	ldr	r3, [r7, #0]
 801461a:	f7ff fe41 	bl	80142a0 <udp_send>
 801461e:	6820      	ldr	r0, [r4, #0]
 8014620:	4c0f      	ldr	r4, [pc, #60]	; (8014660 <MDNS::Start()+0x8c>)
 8014622:	f100 0260 	add.w	r2, r0, #96	; 0x60
 8014626:	233f      	movs	r3, #63	; 0x3f
 8014628:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 801462c:	b929      	cbnz	r1, 801463a <MDNS::Start()+0x66>
 801462e:	4413      	add	r3, r2
 8014630:	429a      	cmp	r2, r3
 8014632:	d006      	beq.n	8014642 <MDNS::Start()+0x6e>
 8014634:	f802 1b01 	strb.w	r1, [r2], #1
 8014638:	e7fa      	b.n	8014630 <MDNS::Start()+0x5c>
 801463a:	3b01      	subs	r3, #1
 801463c:	f802 1b01 	strb.w	r1, [r2], #1
 8014640:	d1f2      	bne.n	8014628 <MDNS::Start()+0x54>
 8014642:	2300      	movs	r3, #0
 8014644:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
 8014648:	b003      	add	sp, #12
 801464a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801464c:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 8014650:	2000001c 	andcs	r0, r0, ip, lsl r0
 8014654:	2000f57c 	andcs	pc, r0, ip, ror r5	; <UNPREDICTABLE>
 8014658:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 801465c:	2000f580 	andcs	pc, r0, r0, lsl #11
 8014660:	0801d4e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, sl, ip, lr, pc}

08014664 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 8014664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014666:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 801466a:	4c1b      	ldr	r4, [pc, #108]	; (80146d8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 801466c:	2300      	movs	r3, #0
 801466e:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 8014672:	f854 100c 	ldr.w	r1, [r4, ip]
 8014676:	4607      	mov	r7, r0
 8014678:	f7ff ff68 	bl	801454c <MDNS::WriteDnsName(char const*, char*, bool)>
 801467c:	4616      	mov	r6, r2
 801467e:	7bac      	ldrb	r4, [r5, #14]
 8014680:	4916      	ldr	r1, [pc, #88]	; (80146dc <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 8014682:	4402      	add	r2, r0
 8014684:	4816      	ldr	r0, [pc, #88]	; (80146e0 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 8014686:	2301      	movs	r3, #1
 8014688:	429c      	cmp	r4, r3
 801468a:	bf18      	it	ne
 801468c:	4601      	movne	r1, r0
 801468e:	4638      	mov	r0, r7
 8014690:	f7ff ff5c 	bl	801454c <MDNS::WriteDnsName(char const*, char*, bool)>
 8014694:	4b13      	ldr	r3, [pc, #76]	; (80146e4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 8014696:	5013      	str	r3, [r2, r0]
 8014698:	1814      	adds	r4, r2, r0
 801469a:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 801469e:	6063      	str	r3, [r4, #4]
 80146a0:	4b11      	ldr	r3, [pc, #68]	; (80146e8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 80146a2:	6819      	ldr	r1, [r3, #0]
 80146a4:	9101      	str	r1, [sp, #4]
 80146a6:	4608      	mov	r0, r1
 80146a8:	f7ff feaa 	bl	8014400 <strlen>
 80146ac:	f100 0308 	add.w	r3, r0, #8
 80146b0:	ba5b      	rev16	r3, r3
 80146b2:	8123      	strh	r3, [r4, #8]
 80146b4:	2300      	movs	r3, #0
 80146b6:	f8c4 300a 	str.w	r3, [r4, #10]
 80146ba:	89ab      	ldrh	r3, [r5, #12]
 80146bc:	9901      	ldr	r1, [sp, #4]
 80146be:	ba5b      	rev16	r3, r3
 80146c0:	81e3      	strh	r3, [r4, #14]
 80146c2:	f104 0210 	add.w	r2, r4, #16
 80146c6:	2301      	movs	r3, #1
 80146c8:	4638      	mov	r0, r7
 80146ca:	f7ff ff3f 	bl	801454c <MDNS::WriteDnsName(char const*, char*, bool)>
 80146ce:	4410      	add	r0, r2
 80146d0:	1b80      	subs	r0, r0, r6
 80146d2:	b003      	add	sp, #12
 80146d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146d6:	bf00      	nop
 80146d8:	2000f784 	andcs	pc, r0, r4, lsl #15
 80146dc:	0801d4e2 	stmdaeq	r1, {r1, r5, r6, r7, sl, ip, lr, pc}
 80146e0:	0801d4ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, sl, ip, lr, pc}
 80146e4:	01802100 	orreq	r2, r0, r0, lsl #2
 80146e8:	2000f9ac 	andcs	pc, r0, ip, lsr #19

080146ec <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 80146ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146f0:	4e19      	ldr	r6, [pc, #100]	; (8014758 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 80146f2:	010f      	lsls	r7, r1, #4
 80146f4:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 80146f8:	2300      	movs	r3, #0
 80146fa:	59f1      	ldr	r1, [r6, r7]
 80146fc:	4604      	mov	r4, r0
 80146fe:	f7ff ff25 	bl	801454c <MDNS::WriteDnsName(char const*, char*, bool)>
 8014702:	4690      	mov	r8, r2
 8014704:	7bae      	ldrb	r6, [r5, #14]
 8014706:	4915      	ldr	r1, [pc, #84]	; (801475c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 8014708:	4402      	add	r2, r0
 801470a:	4815      	ldr	r0, [pc, #84]	; (8014760 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 801470c:	2301      	movs	r3, #1
 801470e:	429e      	cmp	r6, r3
 8014710:	bf18      	it	ne
 8014712:	4601      	movne	r1, r0
 8014714:	4620      	mov	r0, r4
 8014716:	f7ff ff19 	bl	801454c <MDNS::WriteDnsName(char const*, char*, bool)>
 801471a:	4b12      	ldr	r3, [pc, #72]	; (8014764 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 801471c:	5013      	str	r3, [r2, r0]
 801471e:	1816      	adds	r6, r2, r0
 8014720:	68a8      	ldr	r0, [r5, #8]
 8014722:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8014726:	6073      	str	r3, [r6, #4]
 8014728:	f106 040b 	add.w	r4, r6, #11
 801472c:	b938      	cbnz	r0, 801473e <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 801472e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014732:	8133      	strh	r3, [r6, #8]
 8014734:	72b0      	strb	r0, [r6, #10]
 8014736:	eba4 0008 	sub.w	r0, r4, r8
 801473a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801473e:	f7ff fe5f 	bl	8014400 <strlen>
 8014742:	1c43      	adds	r3, r0, #1
 8014744:	72b0      	strb	r0, [r6, #10]
 8014746:	ba5b      	rev16	r3, r3
 8014748:	4607      	mov	r7, r0
 801474a:	68a9      	ldr	r1, [r5, #8]
 801474c:	8133      	strh	r3, [r6, #8]
 801474e:	4620      	mov	r0, r4
 8014750:	f7ff fe6b 	bl	801442a <strcpy.isra.0>
 8014754:	443c      	add	r4, r7
 8014756:	e7ee      	b.n	8014736 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 8014758:	2000f784 	andcs	pc, r0, r4, lsl #15
 801475c:	0801d4e2 	stmdaeq	r1, {r1, r5, r6, r7, sl, ip, lr, pc}
 8014760:	0801d4ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, sl, ip, lr, pc}
 8014764:	01801000 	orreq	r1, r0, r0

08014768 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 8014768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801476c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80147e0 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x78>
 8014770:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 8014774:	ea4f 1901 	mov.w	r9, r1, lsl #4
 8014778:	2301      	movs	r3, #1
 801477a:	6869      	ldr	r1, [r5, #4]
 801477c:	4607      	mov	r7, r0
 801477e:	f7ff fee5 	bl	801454c <MDNS::WriteDnsName(char const*, char*, bool)>
 8014782:	f858 1009 	ldr.w	r1, [r8, r9]
 8014786:	4b13      	ldr	r3, [pc, #76]	; (80147d4 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 8014788:	5013      	str	r3, [r2, r0]
 801478a:	1816      	adds	r6, r2, r0
 801478c:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8014790:	6073      	str	r3, [r6, #4]
 8014792:	4608      	mov	r0, r1
 8014794:	4614      	mov	r4, r2
 8014796:	9101      	str	r1, [sp, #4]
 8014798:	f7ff fe32 	bl	8014400 <strlen>
 801479c:	f100 030d 	add.w	r3, r0, #13
 80147a0:	ba5b      	rev16	r3, r3
 80147a2:	9901      	ldr	r1, [sp, #4]
 80147a4:	8133      	strh	r3, [r6, #8]
 80147a6:	f106 020a 	add.w	r2, r6, #10
 80147aa:	2300      	movs	r3, #0
 80147ac:	4638      	mov	r0, r7
 80147ae:	f7ff fecd 	bl	801454c <MDNS::WriteDnsName(char const*, char*, bool)>
 80147b2:	7bad      	ldrb	r5, [r5, #14]
 80147b4:	4908      	ldr	r1, [pc, #32]	; (80147d8 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 80147b6:	4402      	add	r2, r0
 80147b8:	4808      	ldr	r0, [pc, #32]	; (80147dc <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 80147ba:	2301      	movs	r3, #1
 80147bc:	429d      	cmp	r5, r3
 80147be:	bf18      	it	ne
 80147c0:	4601      	movne	r1, r0
 80147c2:	4638      	mov	r0, r7
 80147c4:	f7ff fec2 	bl	801454c <MDNS::WriteDnsName(char const*, char*, bool)>
 80147c8:	4410      	add	r0, r2
 80147ca:	1b00      	subs	r0, r0, r4
 80147cc:	b003      	add	sp, #12
 80147ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147d2:	bf00      	nop
 80147d4:	01000c00 	tsteq	r0, r0, lsl #24
 80147d8:	0801d4e2 	stmdaeq	r1, {r1, r5, r6, r7, sl, ip, lr, pc}
 80147dc:	0801d4ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, sl, ip, lr, pc}
 80147e0:	2000f784 	andcs	pc, r0, r4, lsl #15

080147e4 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 80147e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147e6:	2301      	movs	r3, #1
 80147e8:	460f      	mov	r7, r1
 80147ea:	4910      	ldr	r1, [pc, #64]	; (801482c <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 80147ec:	4606      	mov	r6, r0
 80147ee:	f7ff fead 	bl	801454c <MDNS::WriteDnsName(char const*, char*, bool)>
 80147f2:	490f      	ldr	r1, [pc, #60]	; (8014830 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 80147f4:	4b0f      	ldr	r3, [pc, #60]	; (8014834 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x50>)
 80147f6:	5013      	str	r3, [r2, r0]
 80147f8:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80147fc:	1815      	adds	r5, r2, r0
 80147fe:	6849      	ldr	r1, [r1, #4]
 8014800:	9101      	str	r1, [sp, #4]
 8014802:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8014806:	606b      	str	r3, [r5, #4]
 8014808:	4608      	mov	r0, r1
 801480a:	4614      	mov	r4, r2
 801480c:	f7ff fdf8 	bl	8014400 <strlen>
 8014810:	1c83      	adds	r3, r0, #2
 8014812:	ba5b      	rev16	r3, r3
 8014814:	812b      	strh	r3, [r5, #8]
 8014816:	f105 020a 	add.w	r2, r5, #10
 801481a:	9901      	ldr	r1, [sp, #4]
 801481c:	2301      	movs	r3, #1
 801481e:	4630      	mov	r0, r6
 8014820:	f7ff fe94 	bl	801454c <MDNS::WriteDnsName(char const*, char*, bool)>
 8014824:	4410      	add	r0, r2
 8014826:	1b00      	subs	r0, r0, r4
 8014828:	b003      	add	sp, #12
 801482a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801482c:	0801d4ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, sl, ip, lr, pc}
 8014830:	2000f784 	andcs	pc, r0, r4, lsl #15
 8014834:	01000c00 	tsteq	r0, r0, lsl #24

08014838 <MDNS::CreateMDNSMessage(unsigned int)>:
 8014838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801483a:	4d1a      	ldr	r5, [pc, #104]	; (80148a4 <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 801483c:	2384      	movs	r3, #132	; 0x84
 801483e:	80eb      	strh	r3, [r5, #6]
 8014840:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8014844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014848:	f105 0410 	add.w	r4, r5, #16
 801484c:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8014850:	4622      	mov	r2, r4
 8014852:	4606      	mov	r6, r0
 8014854:	460f      	mov	r7, r1
 8014856:	f7ff ff05 	bl	8014664 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 801485a:	4404      	add	r4, r0
 801485c:	4622      	mov	r2, r4
 801485e:	4639      	mov	r1, r7
 8014860:	4630      	mov	r0, r6
 8014862:	f7ff ff43 	bl	80146ec <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 8014866:	4404      	add	r4, r0
 8014868:	4622      	mov	r2, r4
 801486a:	4639      	mov	r1, r7
 801486c:	4630      	mov	r0, r6
 801486e:	f7ff ffb9 	bl	80147e4 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 8014872:	4404      	add	r4, r0
 8014874:	4622      	mov	r2, r4
 8014876:	4639      	mov	r1, r7
 8014878:	4630      	mov	r0, r6
 801487a:	f7ff ff75 	bl	8014768 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 801487e:	4a0a      	ldr	r2, [pc, #40]	; (80148a8 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 8014880:	f852 3b10 	ldr.w	r3, [r2], #16
 8014884:	4420      	add	r0, r4
 8014886:	3b0c      	subs	r3, #12
 8014888:	1e44      	subs	r4, r0, #1
 801488a:	4619      	mov	r1, r3
 801488c:	3901      	subs	r1, #1
 801488e:	d204      	bcs.n	801489a <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 8014890:	18c4      	adds	r4, r0, r3
 8014892:	4b06      	ldr	r3, [pc, #24]	; (80148ac <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 8014894:	1ae4      	subs	r4, r4, r3
 8014896:	602c      	str	r4, [r5, #0]
 8014898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801489a:	f812 6b01 	ldrb.w	r6, [r2], #1
 801489e:	f804 6f01 	strb.w	r6, [r4, #1]!
 80148a2:	e7f3      	b.n	801488c <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 80148a4:	2000f7a8 	andcs	pc, r0, r8, lsr #15
 80148a8:	2000f580 	andcs	pc, r0, r0, lsl #11
 80148ac:	2000f7ac 	andcs	pc, r0, ip, lsr #15

080148b0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 80148b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b4:	4d41      	ldr	r5, [pc, #260]	; (80149bc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 80148b6:	b085      	sub	sp, #20
 80148b8:	682c      	ldr	r4, [r5, #0]
 80148ba:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 80148be:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80148c2:	4607      	mov	r7, r0
 80148c4:	4616      	mov	r6, r2
 80148c6:	b11c      	cbz	r4, 80148d0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x20>
 80148c8:	692a      	ldr	r2, [r5, #16]
 80148ca:	2a00      	cmp	r2, #0
 80148cc:	d172      	bne.n	80149b4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x104>
 80148ce:	2401      	movs	r4, #1
 80148d0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 80148d4:	ea4f 1804 	mov.w	r8, r4, lsl #4
 80148d8:	8193      	strh	r3, [r2, #12]
 80148da:	f882 a00e 	strb.w	sl, [r2, #14]
 80148de:	2900      	cmp	r1, #0
 80148e0:	d158      	bne.n	8014994 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xe4>
 80148e2:	4b37      	ldr	r3, [pc, #220]	; (80149c0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 80148e4:	6818      	ldr	r0, [r3, #0]
 80148e6:	3020      	adds	r0, #32
 80148e8:	f7ff fd8a 	bl	8014400 <strlen>
 80148ec:	4683      	mov	fp, r0
 80148ee:	4630      	mov	r0, r6
 80148f0:	f7ff fd86 	bl	8014400 <strlen>
 80148f4:	4458      	add	r0, fp
 80148f6:	3001      	adds	r0, #1
 80148f8:	f003 fca4 	bl	8018244 <operator new[](unsigned int)>
 80148fc:	4b30      	ldr	r3, [pc, #192]	; (80149c0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 80148fe:	f845 0008 	str.w	r0, [r5, r8]
 8014902:	6819      	ldr	r1, [r3, #0]
 8014904:	3120      	adds	r1, #32
 8014906:	f7ff fd90 	bl	801442a <strcpy.isra.0>
 801490a:	f855 0008 	ldr.w	r0, [r5, r8]
 801490e:	4631      	mov	r1, r6
 8014910:	f7ff fd93 	bl	801443a <strcat.isra.0>
 8014914:	4631      	mov	r1, r6
 8014916:	4638      	mov	r0, r7
 8014918:	f7ff fe0a 	bl	8014530 <MDNS::FindFirstDotFromRight(char const*) const>
 801491c:	9003      	str	r0, [sp, #12]
 801491e:	f7ff fd6f 	bl	8014400 <strlen>
 8014922:	300d      	adds	r0, #13
 8014924:	f003 fc8e 	bl	8018244 <operator new[](unsigned int)>
 8014928:	eb05 0b08 	add.w	fp, r5, r8
 801492c:	9903      	ldr	r1, [sp, #12]
 801492e:	f8cb 0004 	str.w	r0, [fp, #4]
 8014932:	f7ff fd7a 	bl	801442a <strcpy.isra.0>
 8014936:	4923      	ldr	r1, [pc, #140]	; (80149c4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 8014938:	f8db 0004 	ldr.w	r0, [fp, #4]
 801493c:	f7ff fd7d 	bl	801443a <strcat.isra.0>
 8014940:	4921      	ldr	r1, [pc, #132]	; (80149c8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 8014942:	4b22      	ldr	r3, [pc, #136]	; (80149cc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 8014944:	f8db 0004 	ldr.w	r0, [fp, #4]
 8014948:	f1ba 0f01 	cmp.w	sl, #1
 801494c:	bf18      	it	ne
 801494e:	4619      	movne	r1, r3
 8014950:	f7ff fd73 	bl	801443a <strcat.isra.0>
 8014954:	f1b9 0f00 	cmp.w	r9, #0
 8014958:	d00a      	beq.n	8014970 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xc0>
 801495a:	4648      	mov	r0, r9
 801495c:	f7ff fd50 	bl	8014400 <strlen>
 8014960:	3001      	adds	r0, #1
 8014962:	f003 fc6f 	bl	8018244 <operator new[](unsigned int)>
 8014966:	4649      	mov	r1, r9
 8014968:	f8cb 0008 	str.w	r0, [fp, #8]
 801496c:	f7ff fd5d 	bl	801442a <strcpy.isra.0>
 8014970:	4621      	mov	r1, r4
 8014972:	4638      	mov	r0, r7
 8014974:	f7ff ff60 	bl	8014838 <MDNS::CreateMDNSMessage(unsigned int)>
 8014978:	4915      	ldr	r1, [pc, #84]	; (80149d0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 801497a:	4816      	ldr	r0, [pc, #88]	; (80149d4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 801497c:	f831 2b04 	ldrh.w	r2, [r1], #4
 8014980:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8014984:	9300      	str	r3, [sp, #0]
 8014986:	4b14      	ldr	r3, [pc, #80]	; (80149d8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x128>)
 8014988:	7800      	ldrb	r0, [r0, #0]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	f7ff fc88 	bl	80142a0 <udp_send>
 8014990:	2001      	movs	r0, #1
 8014992:	e010      	b.n	80149b6 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x106>
 8014994:	4608      	mov	r0, r1
 8014996:	9103      	str	r1, [sp, #12]
 8014998:	f7ff fd32 	bl	8014400 <strlen>
 801499c:	4683      	mov	fp, r0
 801499e:	4630      	mov	r0, r6
 80149a0:	f7ff fd2e 	bl	8014400 <strlen>
 80149a4:	4458      	add	r0, fp
 80149a6:	3001      	adds	r0, #1
 80149a8:	f003 fc4c 	bl	8018244 <operator new[](unsigned int)>
 80149ac:	9903      	ldr	r1, [sp, #12]
 80149ae:	f845 0008 	str.w	r0, [r5, r8]
 80149b2:	e7a8      	b.n	8014906 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x56>
 80149b4:	2000      	movs	r0, #0
 80149b6:	b005      	add	sp, #20
 80149b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149bc:	2000f784 	andcs	pc, r0, r4, lsl #15
 80149c0:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 80149c4:	0801b188 	stmdaeq	r1, {r3, r7, r8, ip, sp, pc}
 80149c8:	0801d4e2 	stmdaeq	r1, {r1, r5, r6, r7, sl, ip, lr, pc}
 80149cc:	0801d4ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, sl, ip, lr, pc}
 80149d0:	2000f7a8 	andcs	pc, r0, r8, lsr #15
 80149d4:	2000001c 	andcs	r0, r0, ip, lsl r0
 80149d8:	2000f57c 	andcs	pc, r0, ip, ror r5	; <UNPREDICTABLE>

080149dc <MDNS::HandleRequest(unsigned short)>:
 80149dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149e0:	b0c5      	sub	sp, #276	; 0x114
 80149e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014ac8 <MDNS::HandleRequest(unsigned short)+0xec>
 80149e6:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8014acc <MDNS::HandleRequest(unsigned short)+0xf0>
 80149ea:	9103      	str	r1, [sp, #12]
 80149ec:	4605      	mov	r5, r0
 80149ee:	2700      	movs	r7, #0
 80149f0:	f04f 080c 	mov.w	r8, #12
 80149f4:	9b03      	ldr	r3, [sp, #12]
 80149f6:	42bb      	cmp	r3, r7
 80149f8:	d802      	bhi.n	8014a00 <MDNS::HandleRequest(unsigned short)+0x24>
 80149fa:	b045      	add	sp, #276	; 0x114
 80149fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a00:	f8da 1000 	ldr.w	r1, [sl]
 8014a04:	aa04      	add	r2, sp, #16
 8014a06:	4441      	add	r1, r8
 8014a08:	4628      	mov	r0, r5
 8014a0a:	f7ff fd4f 	bl	80144ac <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8014a0e:	f8da 2000 	ldr.w	r2, [sl]
 8014a12:	4440      	add	r0, r8
 8014a14:	1813      	adds	r3, r2, r0
 8014a16:	f100 0804 	add.w	r8, r0, #4
 8014a1a:	885b      	ldrh	r3, [r3, #2]
 8014a1c:	ba5b      	rev16	r3, r3
 8014a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a22:	2b01      	cmp	r3, #1
 8014a24:	d13d      	bne.n	8014aa2 <MDNS::HandleRequest(unsigned short)+0xc6>
 8014a26:	5a14      	ldrh	r4, [r2, r0]
 8014a28:	4b20      	ldr	r3, [pc, #128]	; (8014aac <MDNS::HandleRequest(unsigned short)+0xd0>)
 8014a2a:	ba64      	rev16	r4, r4
 8014a2c:	6818      	ldr	r0, [r3, #0]
 8014a2e:	a904      	add	r1, sp, #16
 8014a30:	b2a4      	uxth	r4, r4
 8014a32:	f7ff fced 	bl	8014410 <strcmp>
 8014a36:	b968      	cbnz	r0, 8014a54 <MDNS::HandleRequest(unsigned short)+0x78>
 8014a38:	2c01      	cmp	r4, #1
 8014a3a:	d10b      	bne.n	8014a54 <MDNS::HandleRequest(unsigned short)+0x78>
 8014a3c:	491c      	ldr	r1, [pc, #112]	; (8014ab0 <MDNS::HandleRequest(unsigned short)+0xd4>)
 8014a3e:	481d      	ldr	r0, [pc, #116]	; (8014ab4 <MDNS::HandleRequest(unsigned short)+0xd8>)
 8014a40:	f831 2b04 	ldrh.w	r2, [r1], #4
 8014a44:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8014a48:	9300      	str	r3, [sp, #0]
 8014a4a:	4b1b      	ldr	r3, [pc, #108]	; (8014ab8 <MDNS::HandleRequest(unsigned short)+0xdc>)
 8014a4c:	7800      	ldrb	r0, [r0, #0]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	f7ff fc26 	bl	80142a0 <udp_send>
 8014a54:	4819      	ldr	r0, [pc, #100]	; (8014abc <MDNS::HandleRequest(unsigned short)+0xe0>)
 8014a56:	4e1a      	ldr	r6, [pc, #104]	; (8014ac0 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8014a58:	a904      	add	r1, sp, #16
 8014a5a:	f7ff fcd9 	bl	8014410 <strcmp>
 8014a5e:	f04f 0900 	mov.w	r9, #0
 8014a62:	9002      	str	r0, [sp, #8]
 8014a64:	6833      	ldr	r3, [r6, #0]
 8014a66:	b1c3      	cbz	r3, 8014a9a <MDNS::HandleRequest(unsigned short)+0xbe>
 8014a68:	9b02      	ldr	r3, [sp, #8]
 8014a6a:	b123      	cbz	r3, 8014a76 <MDNS::HandleRequest(unsigned short)+0x9a>
 8014a6c:	6870      	ldr	r0, [r6, #4]
 8014a6e:	a904      	add	r1, sp, #16
 8014a70:	f7ff fcce 	bl	8014410 <strcmp>
 8014a74:	b988      	cbnz	r0, 8014a9a <MDNS::HandleRequest(unsigned short)+0xbe>
 8014a76:	2c0c      	cmp	r4, #12
 8014a78:	d10f      	bne.n	8014a9a <MDNS::HandleRequest(unsigned short)+0xbe>
 8014a7a:	4649      	mov	r1, r9
 8014a7c:	4628      	mov	r0, r5
 8014a7e:	f7ff fedb 	bl	8014838 <MDNS::CreateMDNSMessage(unsigned int)>
 8014a82:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8014a86:	9300      	str	r3, [sp, #0]
 8014a88:	480a      	ldr	r0, [pc, #40]	; (8014ab4 <MDNS::HandleRequest(unsigned short)+0xd8>)
 8014a8a:	4b0b      	ldr	r3, [pc, #44]	; (8014ab8 <MDNS::HandleRequest(unsigned short)+0xdc>)
 8014a8c:	f8bb 2000 	ldrh.w	r2, [fp]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	490c      	ldr	r1, [pc, #48]	; (8014ac4 <MDNS::HandleRequest(unsigned short)+0xe8>)
 8014a94:	7800      	ldrb	r0, [r0, #0]
 8014a96:	f7ff fc03 	bl	80142a0 <udp_send>
 8014a9a:	3610      	adds	r6, #16
 8014a9c:	f1b9 0f00 	cmp.w	r9, #0
 8014aa0:	d001      	beq.n	8014aa6 <MDNS::HandleRequest(unsigned short)+0xca>
 8014aa2:	3701      	adds	r7, #1
 8014aa4:	e7a6      	b.n	80149f4 <MDNS::HandleRequest(unsigned short)+0x18>
 8014aa6:	f04f 0901 	mov.w	r9, #1
 8014aaa:	e7db      	b.n	8014a64 <MDNS::HandleRequest(unsigned short)+0x88>
 8014aac:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 8014ab0:	2000f580 	andcs	pc, r0, r0, lsl #11
 8014ab4:	2000001c 	andcs	r0, r0, ip, lsl r0
 8014ab8:	2000f57c 	andcs	pc, r0, ip, ror r5	; <UNPREDICTABLE>
 8014abc:	0801d4ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, sl, ip, lr, pc}
 8014ac0:	2000f784 	andcs	pc, r0, r4, lsl #15
 8014ac4:	2000f7ac 	andcs	pc, r0, ip, lsr #15
 8014ac8:	2000f9b0 			; <UNDEFINED> instruction: 0x2000f9b0
 8014acc:	2000f7a8 	andcs	pc, r0, r8, lsr #15

08014ad0 <MDNS::Parse()>:
 8014ad0:	4b08      	ldr	r3, [pc, #32]	; (8014af4 <MDNS::Parse()+0x24>)
 8014ad2:	681a      	ldr	r2, [r3, #0]
 8014ad4:	8853      	ldrh	r3, [r2, #2]
 8014ad6:	ba5b      	rev16	r3, r3
 8014ad8:	b299      	uxth	r1, r3
 8014ada:	041b      	lsls	r3, r3, #16
 8014adc:	d408      	bmi.n	8014af0 <MDNS::Parse()+0x20>
 8014ade:	0b89      	lsrs	r1, r1, #14
 8014ae0:	d106      	bne.n	8014af0 <MDNS::Parse()+0x20>
 8014ae2:	8891      	ldrh	r1, [r2, #4]
 8014ae4:	b28b      	uxth	r3, r1
 8014ae6:	b11b      	cbz	r3, 8014af0 <MDNS::Parse()+0x20>
 8014ae8:	ba49      	rev16	r1, r1
 8014aea:	b289      	uxth	r1, r1
 8014aec:	f7ff bf76 	b.w	80149dc <MDNS::HandleRequest(unsigned short)>
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop
 8014af4:	2000f9b0 			; <UNDEFINED> instruction: 0x2000f9b0

08014af8 <MDNS::Run()>:
 8014af8:	b538      	push	{r3, r4, r5, lr}
 8014afa:	4d0c      	ldr	r5, [pc, #48]	; (8014b2c <MDNS::Run()+0x34>)
 8014afc:	490c      	ldr	r1, [pc, #48]	; (8014b30 <MDNS::Run()+0x38>)
 8014afe:	4a0d      	ldr	r2, [pc, #52]	; (8014b34 <MDNS::Run()+0x3c>)
 8014b00:	4604      	mov	r4, r0
 8014b02:	480d      	ldr	r0, [pc, #52]	; (8014b38 <MDNS::Run()+0x40>)
 8014b04:	462b      	mov	r3, r5
 8014b06:	7800      	ldrb	r0, [r0, #0]
 8014b08:	f7ff fba4 	bl	8014254 <udp_recv2>
 8014b0c:	4b0b      	ldr	r3, [pc, #44]	; (8014b3c <MDNS::Run()+0x44>)
 8014b0e:	8829      	ldrh	r1, [r5, #0]
 8014b10:	8018      	strh	r0, [r3, #0]
 8014b12:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8014b16:	4299      	cmp	r1, r3
 8014b18:	d106      	bne.n	8014b28 <MDNS::Run()+0x30>
 8014b1a:	280c      	cmp	r0, #12
 8014b1c:	d904      	bls.n	8014b28 <MDNS::Run()+0x30>
 8014b1e:	4620      	mov	r0, r4
 8014b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b24:	f7ff bfd4 	b.w	8014ad0 <MDNS::Parse()>
 8014b28:	bd38      	pop	{r3, r4, r5, pc}
 8014b2a:	bf00      	nop
 8014b2c:	2000f578 	andcs	pc, r0, r8, ror r5	; <UNPREDICTABLE>
 8014b30:	2000f9b0 			; <UNDEFINED> instruction: 0x2000f9b0
 8014b34:	2000f574 	andcs	pc, r0, r4, ror r5	; <UNPREDICTABLE>
 8014b38:	2000001c 	andcs	r0, r0, ip, lsl r0
 8014b3c:	2000f7a4 	andcs	pc, r0, r4, lsr #15

08014b40 <MDNS::Print()>:
 8014b40:	b510      	push	{r4, lr}
 8014b42:	4816      	ldr	r0, [pc, #88]	; (8014b9c <MDNS::Print()+0x5c>)
 8014b44:	f7f5 fca8 	bl	800a498 <printf>
 8014b48:	4b15      	ldr	r3, [pc, #84]	; (8014ba0 <MDNS::Print()+0x60>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	3301      	adds	r3, #1
 8014b4e:	d104      	bne.n	8014b5a <MDNS::Print()+0x1a>
 8014b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b54:	4813      	ldr	r0, [pc, #76]	; (8014ba4 <MDNS::Print()+0x64>)
 8014b56:	f7f5 bc9f 	b.w	800a498 <printf>
 8014b5a:	4b13      	ldr	r3, [pc, #76]	; (8014ba8 <MDNS::Print()+0x68>)
 8014b5c:	4c13      	ldr	r4, [pc, #76]	; (8014bac <MDNS::Print()+0x6c>)
 8014b5e:	6819      	ldr	r1, [r3, #0]
 8014b60:	4813      	ldr	r0, [pc, #76]	; (8014bb0 <MDNS::Print()+0x70>)
 8014b62:	f7f5 fc99 	bl	800a498 <printf>
 8014b66:	6823      	ldr	r3, [r4, #0]
 8014b68:	b14b      	cbz	r3, 8014b7e <MDNS::Print()+0x3e>
 8014b6a:	4a12      	ldr	r2, [pc, #72]	; (8014bb4 <MDNS::Print()+0x74>)
 8014b6c:	68a3      	ldr	r3, [r4, #8]
 8014b6e:	6861      	ldr	r1, [r4, #4]
 8014b70:	4811      	ldr	r0, [pc, #68]	; (8014bb8 <MDNS::Print()+0x78>)
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	bf08      	it	eq
 8014b76:	4613      	moveq	r3, r2
 8014b78:	89a2      	ldrh	r2, [r4, #12]
 8014b7a:	f7f5 fc8d 	bl	800a498 <printf>
 8014b7e:	6923      	ldr	r3, [r4, #16]
 8014b80:	b15b      	cbz	r3, 8014b9a <MDNS::Print()+0x5a>
 8014b82:	69a3      	ldr	r3, [r4, #24]
 8014b84:	4a0b      	ldr	r2, [pc, #44]	; (8014bb4 <MDNS::Print()+0x74>)
 8014b86:	6961      	ldr	r1, [r4, #20]
 8014b88:	480b      	ldr	r0, [pc, #44]	; (8014bb8 <MDNS::Print()+0x78>)
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	bf08      	it	eq
 8014b8e:	4613      	moveq	r3, r2
 8014b90:	8ba2      	ldrh	r2, [r4, #28]
 8014b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b96:	f7f5 bc7f 	b.w	800a498 <printf>
 8014b9a:	bd10      	pop	{r4, pc}
 8014b9c:	0801d50a 	stmdaeq	r1, {r1, r3, r8, sl, ip, lr, pc}
 8014ba0:	2000001c 	andcs	r0, r0, ip, lsl r0
 8014ba4:	0801d510 	stmdaeq	r1, {r4, r8, sl, ip, lr, pc}
 8014ba8:	2000f9ac 	andcs	pc, r0, ip, lsr #19
 8014bac:	2000f784 	andcs	pc, r0, r4, lsl #15
 8014bb0:	0801d51e 	stmdaeq	r1, {r1, r2, r3, r4, r8, sl, ip, lr, pc}
 8014bb4:	0801b505 	stmdaeq	r1, {r0, r2, r8, sl, ip, sp, pc}
 8014bb8:	0801d52a 	stmdaeq	r1, {r1, r3, r5, r8, sl, ip, lr, pc}

08014bbc <strncpy.constprop.0.isra.0>:
 8014bbc:	3901      	subs	r1, #1
 8014bbe:	233f      	movs	r3, #63	; 0x3f
 8014bc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014bc4:	b92a      	cbnz	r2, 8014bd2 <strncpy.constprop.0.isra.0+0x16>
 8014bc6:	4403      	add	r3, r0
 8014bc8:	4298      	cmp	r0, r3
 8014bca:	d006      	beq.n	8014bda <strncpy.constprop.0.isra.0+0x1e>
 8014bcc:	f800 2b01 	strb.w	r2, [r0], #1
 8014bd0:	e7fa      	b.n	8014bc8 <strncpy.constprop.0.isra.0+0xc>
 8014bd2:	3b01      	subs	r3, #1
 8014bd4:	f800 2b01 	strb.w	r2, [r0], #1
 8014bd8:	d1f2      	bne.n	8014bc0 <strncpy.constprop.0.isra.0+0x4>
 8014bda:	4770      	bx	lr

08014bdc <Network::Network()>:
 8014bdc:	4a11      	ldr	r2, [pc, #68]	; (8014c24 <Network::Network()+0x48>)
 8014bde:	2300      	movs	r3, #0
 8014be0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8014be4:	6010      	str	r0, [r2, #0]
 8014be6:	e9c0 332e 	strd	r3, r3, [r0, #184]	; 0xb8
 8014bea:	2201      	movs	r2, #1
 8014bec:	e9c0 3330 	strd	r3, r3, [r0, #192]	; 0xc0
 8014bf0:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8014bf4:	e9c0 2100 	strd	r2, r1, [r0]
 8014bf8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014bfc:	490a      	ldr	r1, [pc, #40]	; (8014c28 <Network::Network()+0x4c>)
 8014bfe:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8014c02:	2200      	movs	r2, #0
 8014c04:	6102      	str	r2, [r0, #16]
 8014c06:	61c3      	str	r3, [r0, #28]
 8014c08:	f880 3020 	strb.w	r3, [r0, #32]
 8014c0c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8014c10:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
 8014c14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c18:	f802 3f01 	strb.w	r3, [r2, #1]!
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d1f9      	bne.n	8014c14 <Network::Network()+0x38>
 8014c20:	4770      	bx	lr
 8014c22:	bf00      	nop
 8014c24:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 8014c28:	0801d535 	stmdaeq	r1, {r0, r2, r4, r5, r8, sl, ip, lr, pc}

08014c2c <Network::Shutdown()>:
 8014c2c:	b508      	push	{r3, lr}
 8014c2e:	f001 fd47 	bl	80166c0 <network::display_emac_shutdown()>
 8014c32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014c36:	f7f3 bb05 	b.w	8008244 <net_shutdown>

08014c3a <Network::Begin(unsigned short)>:
 8014c3a:	4608      	mov	r0, r1
 8014c3c:	f7ff ba9a 	b.w	8014174 <udp_bind>

08014c40 <Network::End(unsigned short)>:
 8014c40:	4608      	mov	r0, r1
 8014c42:	f7ff bab1 	b.w	80141a8 <udp_unbind>

08014c46 <Network::MacAddressCopyTo(unsigned char*)>:
 8014c46:	f100 039f 	add.w	r3, r0, #159	; 0x9f
 8014c4a:	3901      	subs	r1, #1
 8014c4c:	30a5      	adds	r0, #165	; 0xa5
 8014c4e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8014c52:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014c56:	4283      	cmp	r3, r0
 8014c58:	d1f9      	bne.n	8014c4e <Network::MacAddressCopyTo(unsigned char*)+0x8>
 8014c5a:	4770      	bx	lr

08014c5c <Network::JoinGroup(int, unsigned int)>:
 8014c5c:	4610      	mov	r0, r2
 8014c5e:	f001 b813 	b.w	8015c88 <igmp_join>

08014c62 <Network::LeaveGroup(int, unsigned int)>:
 8014c62:	4610      	mov	r0, r2
 8014c64:	f001 b83c 	b.w	8015ce0 <igmp_leave>

08014c68 <Network::SetDefaultIp()>:
 8014c68:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8014c6c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 8014c70:	041b      	lsls	r3, r3, #16
 8014c72:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014c76:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 8014c7a:	3302      	adds	r3, #2
 8014c7c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8014c80:	22ff      	movs	r2, #255	; 0xff
 8014c82:	e9c0 3206 	strd	r3, r2, [r0, #24]
 8014c86:	6143      	str	r3, [r0, #20]
 8014c88:	4770      	bx	lr
	...

08014c8c <Network::Init(NetworkParamsStore*)>:
 8014c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c90:	b0a5      	sub	sp, #148	; 0x94
 8014c92:	4604      	mov	r4, r0
 8014c94:	a80b      	add	r0, sp, #44	; 0x2c
 8014c96:	f000 fae3 	bl	8015260 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8014c9a:	a80b      	add	r0, sp, #44	; 0x2c
 8014c9c:	f000 faec 	bl	8015278 <NetworkParams::Load()>
 8014ca0:	b110      	cbz	r0, 8014ca8 <Network::Init(NetworkParamsStore*)+0x1c>
 8014ca2:	a80b      	add	r0, sp, #44	; 0x2c
 8014ca4:	f000 fcc3 	bl	801562e <NetworkParams::Dump()>
 8014ca8:	f001 fcec 	bl	8016684 <network::display_emac_start()>
 8014cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cae:	9308      	str	r3, [sp, #32]
 8014cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8014cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8014cb8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8014cbc:	7163      	strb	r3, [r4, #5]
 8014cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cc0:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8014cc4:	bf18      	it	ne
 8014cc6:	f8dd 2085 	ldrne.w	r2, [sp, #133]	; 0x85
 8014cca:	60e2      	str	r2, [r4, #12]
 8014ccc:	061b      	lsls	r3, r3, #24
 8014cce:	bf4c      	ite	mi
 8014cd0:	f8dd 3089 	ldrmi.w	r3, [sp, #137]	; 0x89
 8014cd4:	2300      	movpl	r3, #0
 8014cd6:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8014cda:	6123      	str	r3, [r4, #16]
 8014cdc:	4630      	mov	r0, r6
 8014cde:	f005 fc09 	bl	801a4f4 <emac_start(unsigned char*)>
 8014ce2:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8014ce6:	f104 0720 	add.w	r7, r4, #32
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	f040 80c5 	bne.w	8014e7a <Network::Init(NetworkParamsStore*)+0x1ee>
 8014cf0:	4982      	ldr	r1, [pc, #520]	; (8014efc <Network::Init(NetworkParamsStore*)+0x270>)
 8014cf2:	f104 001f 	add.w	r0, r4, #31
 8014cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014cfa:	1c5d      	adds	r5, r3, #1
 8014cfc:	2a00      	cmp	r2, #0
 8014cfe:	f040 80b8 	bne.w	8014e72 <Network::Init(NetworkParamsStore*)+0x1e6>
 8014d02:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
 8014d06:	0910      	lsrs	r0, r2, #4
 8014d08:	2a9f      	cmp	r2, #159	; 0x9f
 8014d0a:	f002 020f 	and.w	r2, r2, #15
 8014d0e:	bf94      	ite	ls
 8014d10:	3030      	addls	r0, #48	; 0x30
 8014d12:	3037      	addhi	r0, #55	; 0x37
 8014d14:	18e1      	adds	r1, r4, r3
 8014d16:	2a09      	cmp	r2, #9
 8014d18:	4425      	add	r5, r4
 8014d1a:	bf94      	ite	ls
 8014d1c:	3230      	addls	r2, #48	; 0x30
 8014d1e:	3237      	addhi	r2, #55	; 0x37
 8014d20:	f881 0020 	strb.w	r0, [r1, #32]
 8014d24:	f885 2020 	strb.w	r2, [r5, #32]
 8014d28:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
 8014d2c:	f103 0e02 	add.w	lr, r3, #2
 8014d30:	0910      	lsrs	r0, r2, #4
 8014d32:	2a9f      	cmp	r2, #159	; 0x9f
 8014d34:	eb04 050e 	add.w	r5, r4, lr
 8014d38:	f002 020f 	and.w	r2, r2, #15
 8014d3c:	bf94      	ite	ls
 8014d3e:	3030      	addls	r0, #48	; 0x30
 8014d40:	3037      	addhi	r0, #55	; 0x37
 8014d42:	f103 0c03 	add.w	ip, r3, #3
 8014d46:	f885 0020 	strb.w	r0, [r5, #32]
 8014d4a:	2a09      	cmp	r2, #9
 8014d4c:	eb04 000c 	add.w	r0, r4, ip
 8014d50:	bf94      	ite	ls
 8014d52:	3230      	addls	r2, #48	; 0x30
 8014d54:	3237      	addhi	r2, #55	; 0x37
 8014d56:	f880 2020 	strb.w	r2, [r0, #32]
 8014d5a:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8014d5e:	1d1d      	adds	r5, r3, #4
 8014d60:	0910      	lsrs	r0, r2, #4
 8014d62:	2a9f      	cmp	r2, #159	; 0x9f
 8014d64:	f103 0305 	add.w	r3, r3, #5
 8014d68:	f002 020f 	and.w	r2, r2, #15
 8014d6c:	bf94      	ite	ls
 8014d6e:	3030      	addls	r0, #48	; 0x30
 8014d70:	3037      	addhi	r0, #55	; 0x37
 8014d72:	4423      	add	r3, r4
 8014d74:	2a09      	cmp	r2, #9
 8014d76:	4425      	add	r5, r4
 8014d78:	bf94      	ite	ls
 8014d7a:	3230      	addls	r2, #48	; 0x30
 8014d7c:	3237      	addhi	r2, #55	; 0x37
 8014d7e:	f885 0020 	strb.w	r0, [r5, #32]
 8014d82:	f883 2020 	strb.w	r2, [r3, #32]
 8014d86:	2300      	movs	r3, #0
 8014d88:	f881 3026 	strb.w	r3, [r1, #38]	; 0x26
 8014d8c:	f001 f80b 	bl	8015da6 <net::link_register_read()>
 8014d90:	7963      	ldrb	r3, [r4, #5]
 8014d92:	6020      	str	r0, [r4, #0]
 8014d94:	2800      	cmp	r0, #0
 8014d96:	f040 809b 	bne.w	8014ed0 <Network::Init(NetworkParamsStore*)+0x244>
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	f040 80a9 	bne.w	8014ef2 <Network::Init(NetworkParamsStore*)+0x266>
 8014da0:	9b08      	ldr	r3, [sp, #32]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d172      	bne.n	8014e8c <Network::Init(NetworkParamsStore*)+0x200>
 8014da6:	4620      	mov	r0, r4
 8014da8:	f7ff ff5e 	bl	8014c68 <Network::SetDefaultIp()>
 8014dac:	6963      	ldr	r3, [r4, #20]
 8014dae:	69e2      	ldr	r2, [r4, #28]
 8014db0:	9308      	str	r3, [sp, #32]
 8014db2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 8014db6:	f104 0905 	add.w	r9, r4, #5
 8014dba:	f104 0a07 	add.w	sl, r4, #7
 8014dbe:	464b      	mov	r3, r9
 8014dc0:	f8cd a000 	str.w	sl, [sp]
 8014dc4:	463a      	mov	r2, r7
 8014dc6:	a908      	add	r1, sp, #32
 8014dc8:	4630      	mov	r0, r6
 8014dca:	f7f3 f9ef 	bl	80081ac <net_init>
 8014dce:	79e3      	ldrb	r3, [r4, #7]
 8014dd0:	b113      	cbz	r3, 8014dd8 <Network::Init(NetworkParamsStore*)+0x14c>
 8014dd2:	2004      	movs	r0, #4
 8014dd4:	f001 fc7a 	bl	80166cc <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8014dd8:	f89d 508d 	ldrb.w	r5, [sp, #141]	; 0x8d
 8014ddc:	f89d 308d 	ldrb.w	r3, [sp, #141]	; 0x8d
 8014de0:	9302      	str	r3, [sp, #8]
 8014de2:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8014de6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8014dea:	9303      	str	r3, [sp, #12]
 8014dec:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8014f04 <Network::Init(NetworkParamsStore*)+0x278>
 8014df0:	f8df b114 	ldr.w	fp, [pc, #276]	; 8014f08 <Network::Init(NetworkParamsStore*)+0x27c>
 8014df4:	00ab      	lsls	r3, r5, #2
 8014df6:	9305      	str	r3, [sp, #20]
 8014df8:	79e3      	ldrb	r3, [r4, #7]
 8014dfa:	b37b      	cbz	r3, 8014e5c <Network::Init(NetworkParamsStore*)+0x1d0>
 8014dfc:	9b02      	ldr	r3, [sp, #8]
 8014dfe:	b36b      	cbz	r3, 8014e5c <Network::Init(NetworkParamsStore*)+0x1d0>
 8014e00:	9b03      	ldr	r3, [sp, #12]
 8014e02:	b35b      	cbz	r3, 8014e5c <Network::Init(NetworkParamsStore*)+0x1d0>
 8014e04:	2104      	movs	r1, #4
 8014e06:	f8d8 0000 	ldr.w	r0, [r8]
 8014e0a:	f003 f917 	bl	801803c <LedBlink::SetMode(ledblink::Mode)>
 8014e0e:	2003      	movs	r0, #3
 8014e10:	f001 fc5c 	bl	80166cc <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8014e14:	2000      	movs	r0, #0
 8014e16:	f003 fbf1 	bl	80185fc <time>
 8014e1a:	9004      	str	r0, [sp, #16]
 8014e1c:	2000      	movs	r0, #0
 8014e1e:	f003 fbed 	bl	80185fc <time>
 8014e22:	9b04      	ldr	r3, [sp, #16]
 8014e24:	4936      	ldr	r1, [pc, #216]	; (8014f00 <Network::Init(NetworkParamsStore*)+0x274>)
 8014e26:	1ac0      	subs	r0, r0, r3
 8014e28:	9b05      	ldr	r3, [sp, #20]
 8014e2a:	4298      	cmp	r0, r3
 8014e2c:	db36      	blt.n	8014e9c <Network::Init(NetworkParamsStore*)+0x210>
 8014e2e:	2001      	movs	r0, #1
 8014e30:	f001 fc4c 	bl	80166cc <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8014e34:	f8d8 0000 	ldr.w	r0, [r8]
 8014e38:	2101      	movs	r1, #1
 8014e3a:	f003 f8ff 	bl	801803c <LedBlink::SetMode(ledblink::Mode)>
 8014e3e:	2301      	movs	r3, #1
 8014e40:	7163      	strb	r3, [r4, #5]
 8014e42:	2300      	movs	r3, #0
 8014e44:	71e3      	strb	r3, [r4, #7]
 8014e46:	f8cd a000 	str.w	sl, [sp]
 8014e4a:	464b      	mov	r3, r9
 8014e4c:	463a      	mov	r2, r7
 8014e4e:	a908      	add	r1, sp, #32
 8014e50:	4630      	mov	r0, r6
 8014e52:	f7f3 f9ab 	bl	80081ac <net_init>
 8014e56:	7963      	ldrb	r3, [r4, #5]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d0cd      	beq.n	8014df8 <Network::Init(NetworkParamsStore*)+0x16c>
 8014e5c:	9b08      	ldr	r3, [sp, #32]
 8014e5e:	6163      	str	r3, [r4, #20]
 8014e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e62:	61e3      	str	r3, [r4, #28]
 8014e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e66:	61a3      	str	r3, [r4, #24]
 8014e68:	f001 fc12 	bl	8016690 <network::display_ip()>
 8014e6c:	b025      	add	sp, #148	; 0x94
 8014e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e72:	f800 2f01 	strb.w	r2, [r0, #1]!
 8014e76:	462b      	mov	r3, r5
 8014e78:	e73d      	b.n	8014cf6 <Network::Init(NetworkParamsStore*)+0x6a>
 8014e7a:	f10d 0145 	add.w	r1, sp, #69	; 0x45
 8014e7e:	4638      	mov	r0, r7
 8014e80:	f7ff fe9c 	bl	8014bbc <strncpy.constprop.0.isra.0>
 8014e84:	2300      	movs	r3, #0
 8014e86:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 8014e8a:	e77f      	b.n	8014d8c <Network::Init(NetworkParamsStore*)+0x100>
 8014e8c:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8014e90:	69e1      	ldr	r1, [r4, #28]
 8014e92:	4053      	eors	r3, r2
 8014e94:	420b      	tst	r3, r1
 8014e96:	bf18      	it	ne
 8014e98:	920a      	strne	r2, [sp, #40]	; 0x28
 8014e9a:	e78c      	b.n	8014db6 <Network::Init(NetworkParamsStore*)+0x12a>
 8014e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8014ea0:	68da      	ldr	r2, [r3, #12]
 8014ea2:	2a00      	cmp	r2, #0
 8014ea4:	d0ba      	beq.n	8014e1c <Network::Init(NetworkParamsStore*)+0x190>
 8014ea6:	f8db 0000 	ldr.w	r0, [fp]
 8014eaa:	695d      	ldr	r5, [r3, #20]
 8014eac:	1b40      	subs	r0, r0, r5
 8014eae:	4282      	cmp	r2, r0
 8014eb0:	d8b4      	bhi.n	8014e1c <Network::Init(NetworkParamsStore*)+0x190>
 8014eb2:	f8db 0000 	ldr.w	r0, [fp]
 8014eb6:	6158      	str	r0, [r3, #20]
 8014eb8:	6918      	ldr	r0, [r3, #16]
 8014eba:	2801      	cmp	r0, #1
 8014ebc:	f080 0201 	eor.w	r2, r0, #1
 8014ec0:	611a      	str	r2, [r3, #16]
 8014ec2:	bf1a      	itte	ne
 8014ec4:	2301      	movne	r3, #1
 8014ec6:	f8c1 3818 	strne.w	r3, [r1, #2072]	; 0x818
 8014eca:	f8c1 0828 	streq.w	r0, [r1, #2088]	; 0x828
 8014ece:	e7a5      	b.n	8014e1c <Network::Init(NetworkParamsStore*)+0x190>
 8014ed0:	b11b      	cbz	r3, 8014eda <Network::Init(NetworkParamsStore*)+0x24e>
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8014ed8:	9308      	str	r3, [sp, #32]
 8014eda:	2300      	movs	r3, #0
 8014edc:	f88d 301f 	strb.w	r3, [sp, #31]
 8014ee0:	f10d 031f 	add.w	r3, sp, #31
 8014ee4:	9300      	str	r3, [sp, #0]
 8014ee6:	463a      	mov	r2, r7
 8014ee8:	a908      	add	r1, sp, #32
 8014eea:	4630      	mov	r0, r6
 8014eec:	f7f3 f95e 	bl	80081ac <net_init>
 8014ef0:	e7b4      	b.n	8014e5c <Network::Init(NetworkParamsStore*)+0x1d0>
 8014ef2:	2001      	movs	r0, #1
 8014ef4:	f001 fbea 	bl	80166cc <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8014ef8:	e75d      	b.n	8014db6 <Network::Init(NetworkParamsStore*)+0x12a>
 8014efa:	bf00      	nop
 8014efc:	0801d53a 	stmdaeq	r1, {r1, r3, r4, r5, r8, sl, ip, lr, pc}
 8014f00:	40020000 	andmi	r0, r2, r0
 8014f04:	20010678 	andcs	r0, r1, r8, ror r6
 8014f08:	20010694 	mulcs	r1, r4, r6

08014f0c <Network::SetIp(unsigned int)>:
 8014f0c:	7943      	ldrb	r3, [r0, #5]
 8014f0e:	b570      	push	{r4, r5, r6, lr}
 8014f10:	4604      	mov	r4, r0
 8014f12:	460d      	mov	r5, r1
 8014f14:	2600      	movs	r6, #0
 8014f16:	b113      	cbz	r3, 8014f1e <Network::SetIp(unsigned int)+0x12>
 8014f18:	7146      	strb	r6, [r0, #5]
 8014f1a:	f7fe feb3 	bl	8013c84 <net_dhcp_release>
 8014f1e:	71e6      	strb	r6, [r4, #7]
 8014f20:	b95d      	cbnz	r5, 8014f3a <Network::SetIp(unsigned int)+0x2e>
 8014f22:	4620      	mov	r0, r4
 8014f24:	f7ff fea0 	bl	8014c68 <Network::SetDefaultIp()>
 8014f28:	6960      	ldr	r0, [r4, #20]
 8014f2a:	f7fe fe67 	bl	8013bfc <net_set_ip>
 8014f2e:	f001 fbaf 	bl	8016690 <network::display_ip()>
 8014f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f36:	f001 bbb1 	b.w	801669c <network::display_netmask()>
 8014f3a:	4628      	mov	r0, r5
 8014f3c:	f7fe fe5e 	bl	8013bfc <net_set_ip>
 8014f40:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8014f44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014f48:	2800      	cmp	r0, #0
 8014f4a:	d0f0      	beq.n	8014f2e <Network::SetIp(unsigned int)+0x22>
 8014f4c:	6803      	ldr	r3, [r0, #0]
 8014f4e:	4629      	mov	r1, r5
 8014f50:	689b      	ldr	r3, [r3, #8]
 8014f52:	4798      	blx	r3
 8014f54:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8014f58:	6803      	ldr	r3, [r0, #0]
 8014f5a:	2100      	movs	r1, #0
 8014f5c:	699b      	ldr	r3, [r3, #24]
 8014f5e:	4798      	blx	r3
 8014f60:	e7e5      	b.n	8014f2e <Network::SetIp(unsigned int)+0x22>

08014f62 <Network::SetNetmask(unsigned int)>:
 8014f62:	69c2      	ldr	r2, [r0, #28]
 8014f64:	428a      	cmp	r2, r1
 8014f66:	b508      	push	{r3, lr}
 8014f68:	d00c      	beq.n	8014f84 <Network::SetNetmask(unsigned int)+0x22>
 8014f6a:	61c1      	str	r1, [r0, #28]
 8014f6c:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8014f70:	b110      	cbz	r0, 8014f78 <Network::SetNetmask(unsigned int)+0x16>
 8014f72:	6803      	ldr	r3, [r0, #0]
 8014f74:	68db      	ldr	r3, [r3, #12]
 8014f76:	4798      	blx	r3
 8014f78:	f001 fb8a 	bl	8016690 <network::display_ip()>
 8014f7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014f80:	f001 bb8c 	b.w	801669c <network::display_netmask()>
 8014f84:	bd08      	pop	{r3, pc}

08014f86 <Network::SetGatewayIp(unsigned int)>:
 8014f86:	6983      	ldr	r3, [r0, #24]
 8014f88:	428b      	cmp	r3, r1
 8014f8a:	b513      	push	{r0, r1, r4, lr}
 8014f8c:	4604      	mov	r4, r0
 8014f8e:	d00f      	beq.n	8014fb0 <Network::SetGatewayIp(unsigned int)+0x2a>
 8014f90:	4608      	mov	r0, r1
 8014f92:	9101      	str	r1, [sp, #4]
 8014f94:	f7fe fe42 	bl	8013c1c <net_set_gw>
 8014f98:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8014f9c:	b118      	cbz	r0, 8014fa6 <Network::SetGatewayIp(unsigned int)+0x20>
 8014f9e:	6803      	ldr	r3, [r0, #0]
 8014fa0:	9901      	ldr	r1, [sp, #4]
 8014fa2:	691b      	ldr	r3, [r3, #16]
 8014fa4:	4798      	blx	r3
 8014fa6:	b002      	add	sp, #8
 8014fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fac:	f001 bb7c 	b.w	80166a8 <network::display_gateway()>
 8014fb0:	b002      	add	sp, #8
 8014fb2:	bd10      	pop	{r4, pc}

08014fb4 <Network::SetHostName(char const*)>:
 8014fb4:	b538      	push	{r3, r4, r5, lr}
 8014fb6:	4604      	mov	r4, r0
 8014fb8:	f100 0520 	add.w	r5, r0, #32
 8014fbc:	4628      	mov	r0, r5
 8014fbe:	f7ff fdfd 	bl	8014bbc <strncpy.constprop.0.isra.0>
 8014fc2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 8014fcc:	b158      	cbz	r0, 8014fe6 <Network::SetHostName(char const*)+0x32>
 8014fce:	6803      	ldr	r3, [r0, #0]
 8014fd0:	695c      	ldr	r4, [r3, #20]
 8014fd2:	462b      	mov	r3, r5
 8014fd4:	461a      	mov	r2, r3
 8014fd6:	3301      	adds	r3, #1
 8014fd8:	7811      	ldrb	r1, [r2, #0]
 8014fda:	2900      	cmp	r1, #0
 8014fdc:	d1fa      	bne.n	8014fd4 <Network::SetHostName(char const*)+0x20>
 8014fde:	1b52      	subs	r2, r2, r5
 8014fe0:	b292      	uxth	r2, r2
 8014fe2:	4629      	mov	r1, r5
 8014fe4:	47a0      	blx	r4
 8014fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014fea:	f001 bb63 	b.w	80166b4 <network::display_hostname()>

08014fee <Network::SetZeroconf()>:
 8014fee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014ff0:	4604      	mov	r4, r0
 8014ff2:	a801      	add	r0, sp, #4
 8014ff4:	f7fe fe50 	bl	8013c98 <net_set_zeroconf>
 8014ff8:	71e0      	strb	r0, [r4, #7]
 8014ffa:	b170      	cbz	r0, 801501a <Network::SetZeroconf()+0x2c>
 8014ffc:	9b01      	ldr	r3, [sp, #4]
 8014ffe:	6163      	str	r3, [r4, #20]
 8015000:	9b02      	ldr	r3, [sp, #8]
 8015002:	61e3      	str	r3, [r4, #28]
 8015004:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8015008:	9b03      	ldr	r3, [sp, #12]
 801500a:	61a3      	str	r3, [r4, #24]
 801500c:	2300      	movs	r3, #0
 801500e:	7163      	strb	r3, [r4, #5]
 8015010:	b118      	cbz	r0, 801501a <Network::SetZeroconf()+0x2c>
 8015012:	6803      	ldr	r3, [r0, #0]
 8015014:	2101      	movs	r1, #1
 8015016:	699b      	ldr	r3, [r3, #24]
 8015018:	4798      	blx	r3
 801501a:	f001 fb39 	bl	8016690 <network::display_ip()>
 801501e:	f001 fb3d 	bl	801669c <network::display_netmask()>
 8015022:	79e0      	ldrb	r0, [r4, #7]
 8015024:	b004      	add	sp, #16
 8015026:	bd10      	pop	{r4, pc}

08015028 <Network::EnableDhcp()>:
 8015028:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801502a:	4d21      	ldr	r5, [pc, #132]	; (80150b0 <Network::EnableDhcp()+0x88>)
 801502c:	682b      	ldr	r3, [r5, #0]
 801502e:	781e      	ldrb	r6, [r3, #0]
 8015030:	4604      	mov	r4, r0
 8015032:	b136      	cbz	r6, 8015042 <Network::EnableDhcp()+0x1a>
 8015034:	2200      	movs	r2, #0
 8015036:	701a      	strb	r2, [r3, #0]
 8015038:	2104      	movs	r1, #4
 801503a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801503e:	f004 f8a5 	bl	801918c <fwdgt_config>
 8015042:	2001      	movs	r0, #1
 8015044:	f001 fb42 	bl	80166cc <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8015048:	1de2      	adds	r2, r4, #7
 801504a:	f104 0120 	add.w	r1, r4, #32
 801504e:	a801      	add	r0, sp, #4
 8015050:	f7fe fdec 	bl	8013c2c <net_set_dhcp>
 8015054:	79e3      	ldrb	r3, [r4, #7]
 8015056:	7160      	strb	r0, [r4, #5]
 8015058:	b33b      	cbz	r3, 80150aa <Network::EnableDhcp()+0x82>
 801505a:	2004      	movs	r0, #4
 801505c:	f001 fb36 	bl	80166cc <network::display_dhcp_status(network::dhcp::ClientStatus)>
 8015060:	b16e      	cbz	r6, 801507e <Network::EnableDhcp()+0x56>
 8015062:	2102      	movs	r1, #2
 8015064:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015068:	682d      	ldr	r5, [r5, #0]
 801506a:	f004 f88f 	bl	801918c <fwdgt_config>
 801506e:	2801      	cmp	r0, #1
 8015070:	bf0c      	ite	eq
 8015072:	2301      	moveq	r3, #1
 8015074:	2300      	movne	r3, #0
 8015076:	702b      	strb	r3, [r5, #0]
 8015078:	d101      	bne.n	801507e <Network::EnableDhcp()+0x56>
 801507a:	f004 f877 	bl	801916c <fwdgt_enable>
 801507e:	9b01      	ldr	r3, [sp, #4]
 8015080:	6163      	str	r3, [r4, #20]
 8015082:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8015086:	9b02      	ldr	r3, [sp, #8]
 8015088:	61e3      	str	r3, [r4, #28]
 801508a:	9b03      	ldr	r3, [sp, #12]
 801508c:	61a3      	str	r3, [r4, #24]
 801508e:	b118      	cbz	r0, 8015098 <Network::EnableDhcp()+0x70>
 8015090:	6803      	ldr	r3, [r0, #0]
 8015092:	7961      	ldrb	r1, [r4, #5]
 8015094:	699b      	ldr	r3, [r3, #24]
 8015096:	4798      	blx	r3
 8015098:	f001 fafa 	bl	8016690 <network::display_ip()>
 801509c:	f001 fafe 	bl	801669c <network::display_netmask()>
 80150a0:	f001 fb02 	bl	80166a8 <network::display_gateway()>
 80150a4:	7960      	ldrb	r0, [r4, #5]
 80150a6:	b004      	add	sp, #16
 80150a8:	bd70      	pop	{r4, r5, r6, pc}
 80150aa:	2002      	movs	r0, #2
 80150ac:	e7d6      	b.n	801505c <Network::EnableDhcp()+0x34>
 80150ae:	bf00      	nop
 80150b0:	2001067c 	andcs	r0, r1, ip, ror r6

080150b4 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>:
 80150b4:	b109      	cbz	r1, 80150ba <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0x6>
 80150b6:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
 80150ba:	b10a      	cbz	r2, 80150c0 <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0xc>
 80150bc:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
 80150c0:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 80150c4:	f043 0303 	orr.w	r3, r3, #3
 80150c8:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
 80150cc:	4770      	bx	lr

080150ce <Network::ApplyQueuedConfig()>:
 80150ce:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 80150d2:	b510      	push	{r4, lr}
 80150d4:	4604      	mov	r4, r0
 80150d6:	b3c3      	cbz	r3, 801514a <Network::ApplyQueuedConfig()+0x7c>
 80150d8:	079a      	lsls	r2, r3, #30
 80150da:	d01a      	beq.n	8015112 <Network::ApplyQueuedConfig()+0x44>
 80150dc:	079b      	lsls	r3, r3, #30
 80150de:	d509      	bpl.n	80150f4 <Network::ApplyQueuedConfig()+0x26>
 80150e0:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
 80150e4:	f7ff ff3d 	bl	8014f62 <Network::SetNetmask(unsigned int)>
 80150e8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80150ec:	f023 0302 	bic.w	r3, r3, #2
 80150f0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80150f4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80150f8:	07d9      	lsls	r1, r3, #31
 80150fa:	d50a      	bpl.n	8015112 <Network::ApplyQueuedConfig()+0x44>
 80150fc:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8015100:	4620      	mov	r0, r4
 8015102:	f7ff ff03 	bl	8014f0c <Network::SetIp(unsigned int)>
 8015106:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801510a:	f023 0301 	bic.w	r3, r3, #1
 801510e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8015112:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8015116:	075a      	lsls	r2, r3, #29
 8015118:	d508      	bpl.n	801512c <Network::ApplyQueuedConfig()+0x5e>
 801511a:	4620      	mov	r0, r4
 801511c:	f7ff ff84 	bl	8015028 <Network::EnableDhcp()>
 8015120:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8015124:	f023 0304 	bic.w	r3, r3, #4
 8015128:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 801512c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8015130:	071b      	lsls	r3, r3, #28
 8015132:	d508      	bpl.n	8015146 <Network::ApplyQueuedConfig()+0x78>
 8015134:	4620      	mov	r0, r4
 8015136:	f7ff ff5a 	bl	8014fee <Network::SetZeroconf()>
 801513a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801513e:	f023 0308 	bic.w	r3, r3, #8
 8015142:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8015146:	2001      	movs	r0, #1
 8015148:	e000      	b.n	801514c <Network::ApplyQueuedConfig()+0x7e>
 801514a:	4618      	mov	r0, r3
 801514c:	bd10      	pop	{r4, pc}
	...

08015150 <Network::Print()>:
 8015150:	b530      	push	{r4, r5, lr}
 8015152:	4604      	mov	r4, r0
 8015154:	b085      	sub	sp, #20
 8015156:	4832      	ldr	r0, [pc, #200]	; (8015220 <Network::Print()+0xd0>)
 8015158:	f7f5 f99e 	bl	800a498 <printf>
 801515c:	f104 0120 	add.w	r1, r4, #32
 8015160:	4830      	ldr	r0, [pc, #192]	; (8015224 <Network::Print()+0xd4>)
 8015162:	f7f5 f999 	bl	800a498 <printf>
 8015166:	68a1      	ldr	r1, [r4, #8]
 8015168:	482f      	ldr	r0, [pc, #188]	; (8015228 <Network::Print()+0xd8>)
 801516a:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
 801516e:	f7f5 f993 	bl	800a498 <printf>
 8015172:	69e0      	ldr	r0, [r4, #28]
 8015174:	6965      	ldr	r5, [r4, #20]
 8015176:	f005 fceb 	bl	801ab50 <__popcountsi2>
 801517a:	0e2b      	lsrs	r3, r5, #24
 801517c:	9001      	str	r0, [sp, #4]
 801517e:	9300      	str	r3, [sp, #0]
 8015180:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8015184:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8015188:	b2e9      	uxtb	r1, r5
 801518a:	4828      	ldr	r0, [pc, #160]	; (801522c <Network::Print()+0xdc>)
 801518c:	f7f5 f984 	bl	800a498 <printf>
 8015190:	69e1      	ldr	r1, [r4, #28]
 8015192:	4827      	ldr	r0, [pc, #156]	; (8015230 <Network::Print()+0xe0>)
 8015194:	0e0b      	lsrs	r3, r1, #24
 8015196:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801519a:	9300      	str	r3, [sp, #0]
 801519c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80151a0:	b2c9      	uxtb	r1, r1
 80151a2:	f7f5 f979 	bl	800a498 <printf>
 80151a6:	69a1      	ldr	r1, [r4, #24]
 80151a8:	4822      	ldr	r0, [pc, #136]	; (8015234 <Network::Print()+0xe4>)
 80151aa:	0e0b      	lsrs	r3, r1, #24
 80151ac:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80151b0:	9300      	str	r3, [sp, #0]
 80151b2:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80151b6:	b2c9      	uxtb	r1, r1
 80151b8:	f7f5 f96e 	bl	800a498 <printf>
 80151bc:	69e3      	ldr	r3, [r4, #28]
 80151be:	6961      	ldr	r1, [r4, #20]
 80151c0:	481d      	ldr	r0, [pc, #116]	; (8015238 <Network::Print()+0xe8>)
 80151c2:	ea61 0103 	orn	r1, r1, r3
 80151c6:	0e0b      	lsrs	r3, r1, #24
 80151c8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80151cc:	9300      	str	r3, [sp, #0]
 80151ce:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80151d2:	b2c9      	uxtb	r1, r1
 80151d4:	f7f5 f960 	bl	800a498 <printf>
 80151d8:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80151dc:	9302      	str	r3, [sp, #8]
 80151de:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80151e2:	9301      	str	r3, [sp, #4]
 80151e4:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 80151e8:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 80151ec:	9300      	str	r3, [sp, #0]
 80151ee:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
 80151f2:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 80151f6:	4811      	ldr	r0, [pc, #68]	; (801523c <Network::Print()+0xec>)
 80151f8:	f7f5 f94e 	bl	800a498 <printf>
 80151fc:	4b10      	ldr	r3, [pc, #64]	; (8015240 <Network::Print()+0xf0>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	79da      	ldrb	r2, [r3, #7]
 8015202:	b952      	cbnz	r2, 801521a <Network::Print()+0xca>
 8015204:	795b      	ldrb	r3, [r3, #5]
 8015206:	2b00      	cmp	r3, #0
 8015208:	bf14      	ite	ne
 801520a:	2144      	movne	r1, #68	; 0x44
 801520c:	2153      	moveq	r1, #83	; 0x53
 801520e:	480d      	ldr	r0, [pc, #52]	; (8015244 <Network::Print()+0xf4>)
 8015210:	b005      	add	sp, #20
 8015212:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015216:	f7f5 b93f 	b.w	800a498 <printf>
 801521a:	215a      	movs	r1, #90	; 0x5a
 801521c:	e7f7      	b.n	801520e <Network::Print()+0xbe>
 801521e:	bf00      	nop
 8015220:	0801d546 	stmdaeq	r1, {r1, r2, r6, r8, sl, ip, lr, pc}
 8015224:	0801d54f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, sl, ip, lr, pc}
 8015228:	0801d560 	stmdaeq	r1, {r5, r6, r8, sl, ip, lr, pc}
 801522c:	0801d575 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, sl, ip, lr, pc}
 8015230:	0801d592 	stmdaeq	r1, {r1, r4, r7, r8, sl, ip, lr, pc}
 8015234:	0801d5ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8015238:	0801d5c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, sl, ip, lr, pc}
 801523c:	0801d5e0 	stmdaeq	r1, {r5, r6, r7, r8, sl, ip, lr, pc}
 8015240:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 8015244:	0801d60c 	stmdaeq	r1, {r2, r3, r9, sl, ip, lr, pc}

08015248 <Network::TcpBegin(unsigned short)>:
 8015248:	4608      	mov	r0, r1
 801524a:	f7fe beb5 	b.w	8013fb8 <tcp_begin>

0801524e <Network::TcpRead(int, unsigned char const**)>:
 801524e:	4608      	mov	r0, r1
 8015250:	4611      	mov	r1, r2
 8015252:	f7fe befd 	b.w	8014050 <tcp_read>

08015256 <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 8015256:	4608      	mov	r0, r1
 8015258:	4611      	mov	r1, r2
 801525a:	461a      	mov	r2, r3
 801525c:	f7fe beca 	b.w	8013ff4 <tcp_write>

08015260 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 8015260:	b510      	push	{r4, lr}
 8015262:	225e      	movs	r2, #94	; 0x5e
 8015264:	4604      	mov	r4, r0
 8015266:	f840 1b04 	str.w	r1, [r0], #4
 801526a:	2100      	movs	r1, #0
 801526c:	f003 f8be 	bl	80183ec <memset>
 8015270:	2301      	movs	r3, #1
 8015272:	7623      	strb	r3, [r4, #24]
 8015274:	4620      	mov	r0, r4
 8015276:	bd10      	pop	{r4, pc}

08015278 <NetworkParams::Load()>:
 8015278:	b508      	push	{r3, lr}
 801527a:	2300      	movs	r3, #0
 801527c:	4601      	mov	r1, r0
 801527e:	6043      	str	r3, [r0, #4]
 8015280:	6800      	ldr	r0, [r0, #0]
 8015282:	b120      	cbz	r0, 801528e <NetworkParams::Load()+0x16>
 8015284:	6803      	ldr	r3, [r0, #0]
 8015286:	3104      	adds	r1, #4
 8015288:	68db      	ldr	r3, [r3, #12]
 801528a:	4798      	blx	r3
 801528c:	2001      	movs	r0, #1
 801528e:	bd08      	pop	{r3, pc}

08015290 <NetworkParams::Load(char const*, unsigned int)>:
 8015290:	6803      	ldr	r3, [r0, #0]
 8015292:	b1d3      	cbz	r3, 80152ca <NetworkParams::Load(char const*, unsigned int)+0x3a>
 8015294:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015296:	2300      	movs	r3, #0
 8015298:	6043      	str	r3, [r0, #4]
 801529a:	4604      	mov	r4, r0
 801529c:	460d      	mov	r5, r1
 801529e:	4616      	mov	r6, r2
 80152a0:	490a      	ldr	r1, [pc, #40]	; (80152cc <NetworkParams::Load(char const*, unsigned int)+0x3c>)
 80152a2:	4602      	mov	r2, r0
 80152a4:	4668      	mov	r0, sp
 80152a6:	f002 f9a7 	bl	80175f8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 80152aa:	4632      	mov	r2, r6
 80152ac:	4629      	mov	r1, r5
 80152ae:	4668      	mov	r0, sp
 80152b0:	f002 f9a6 	bl	8017600 <ReadConfigFile::Read(char const*, unsigned int)>
 80152b4:	4621      	mov	r1, r4
 80152b6:	f851 0b04 	ldr.w	r0, [r1], #4
 80152ba:	6803      	ldr	r3, [r0, #0]
 80152bc:	689b      	ldr	r3, [r3, #8]
 80152be:	4798      	blx	r3
 80152c0:	4668      	mov	r0, sp
 80152c2:	f002 f99c 	bl	80175fe <ReadConfigFile::~ReadConfigFile()>
 80152c6:	b002      	add	sp, #8
 80152c8:	bd70      	pop	{r4, r5, r6, pc}
 80152ca:	4770      	bx	lr
 80152cc:	080153fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, ip, lr}

080152d0 <NetworkParams::callbackFunction(char const*)>:
 80152d0:	b530      	push	{r4, r5, lr}
 80152d2:	460d      	mov	r5, r1
 80152d4:	b085      	sub	sp, #20
 80152d6:	4604      	mov	r4, r0
 80152d8:	4942      	ldr	r1, [pc, #264]	; (80153e4 <NetworkParams::callbackFunction(char const*)+0x114>)
 80152da:	f10d 0207 	add.w	r2, sp, #7
 80152de:	4628      	mov	r0, r5
 80152e0:	f002 fabf 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80152e4:	b978      	cbnz	r0, 8015306 <NetworkParams::callbackFunction(char const*)+0x36>
 80152e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80152ea:	6863      	ldr	r3, [r4, #4]
 80152ec:	b142      	cbz	r2, 8015300 <NetworkParams::callbackFunction(char const*)+0x30>
 80152ee:	f023 0301 	bic.w	r3, r3, #1
 80152f2:	3a00      	subs	r2, #0
 80152f4:	bf18      	it	ne
 80152f6:	2201      	movne	r2, #1
 80152f8:	6063      	str	r3, [r4, #4]
 80152fa:	7622      	strb	r2, [r4, #24]
 80152fc:	b005      	add	sp, #20
 80152fe:	bd30      	pop	{r4, r5, pc}
 8015300:	f043 0301 	orr.w	r3, r3, #1
 8015304:	e7f5      	b.n	80152f2 <NetworkParams::callbackFunction(char const*)+0x22>
 8015306:	4938      	ldr	r1, [pc, #224]	; (80153e8 <NetworkParams::callbackFunction(char const*)+0x118>)
 8015308:	f10d 0207 	add.w	r2, sp, #7
 801530c:	4628      	mov	r0, r5
 801530e:	f002 faa8 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8015312:	b980      	cbnz	r0, 8015336 <NetworkParams::callbackFunction(char const*)+0x66>
 8015314:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015318:	6863      	ldr	r3, [r4, #4]
 801531a:	1e51      	subs	r1, r2, #1
 801531c:	2904      	cmp	r1, #4
 801531e:	bf97      	itett	ls
 8015320:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 8015324:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 8015328:	6063      	strls	r3, [r4, #4]
 801532a:	f884 2061 	strbls.w	r2, [r4, #97]	; 0x61
 801532e:	bf84      	itt	hi
 8015330:	6063      	strhi	r3, [r4, #4]
 8015332:	f884 0061 	strbhi.w	r0, [r4, #97]	; 0x61
 8015336:	492d      	ldr	r1, [pc, #180]	; (80153ec <NetworkParams::callbackFunction(char const*)+0x11c>)
 8015338:	aa02      	add	r2, sp, #8
 801533a:	4628      	mov	r0, r5
 801533c:	f002 fa08 	bl	8017750 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8015340:	b9e8      	cbnz	r0, 801537e <NetworkParams::callbackFunction(char const*)+0xae>
 8015342:	9a02      	ldr	r2, [sp, #8]
 8015344:	6863      	ldr	r3, [r4, #4]
 8015346:	b2d1      	uxtb	r1, r2
 8015348:	29ac      	cmp	r1, #172	; 0xac
 801534a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801534e:	d007      	beq.n	8015360 <NetworkParams::callbackFunction(char const*)+0x90>
 8015350:	29c0      	cmp	r1, #192	; 0xc0
 8015352:	d00c      	beq.n	801536e <NetworkParams::callbackFunction(char const*)+0x9e>
 8015354:	290a      	cmp	r1, #10
 8015356:	d10d      	bne.n	8015374 <NetworkParams::callbackFunction(char const*)+0xa4>
 8015358:	60a2      	str	r2, [r4, #8]
 801535a:	f043 0302 	orr.w	r3, r3, #2
 801535e:	e004      	b.n	801536a <NetworkParams::callbackFunction(char const*)+0x9a>
 8015360:	3810      	subs	r0, #16
 8015362:	280f      	cmp	r0, #15
 8015364:	d9f8      	bls.n	8015358 <NetworkParams::callbackFunction(char const*)+0x88>
 8015366:	f023 0302 	bic.w	r3, r3, #2
 801536a:	6063      	str	r3, [r4, #4]
 801536c:	e7c6      	b.n	80152fc <NetworkParams::callbackFunction(char const*)+0x2c>
 801536e:	28a8      	cmp	r0, #168	; 0xa8
 8015370:	d1f9      	bne.n	8015366 <NetworkParams::callbackFunction(char const*)+0x96>
 8015372:	e7f1      	b.n	8015358 <NetworkParams::callbackFunction(char const*)+0x88>
 8015374:	2902      	cmp	r1, #2
 8015376:	d0ef      	beq.n	8015358 <NetworkParams::callbackFunction(char const*)+0x88>
 8015378:	2a00      	cmp	r2, #0
 801537a:	d0ed      	beq.n	8015358 <NetworkParams::callbackFunction(char const*)+0x88>
 801537c:	e7f3      	b.n	8015366 <NetworkParams::callbackFunction(char const*)+0x96>
 801537e:	491c      	ldr	r1, [pc, #112]	; (80153f0 <NetworkParams::callbackFunction(char const*)+0x120>)
 8015380:	aa02      	add	r2, sp, #8
 8015382:	4628      	mov	r0, r5
 8015384:	f002 f9e4 	bl	8017750 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8015388:	b970      	cbnz	r0, 80153a8 <NetworkParams::callbackFunction(char const*)+0xd8>
 801538a:	9a02      	ldr	r2, [sp, #8]
 801538c:	6863      	ldr	r3, [r4, #4]
 801538e:	b142      	cbz	r2, 80153a2 <NetworkParams::callbackFunction(char const*)+0xd2>
 8015390:	ba11      	rev	r1, r2
 8015392:	43c8      	mvns	r0, r1
 8015394:	ea11 0150 	ands.w	r1, r1, r0, lsr #1
 8015398:	d103      	bne.n	80153a2 <NetworkParams::callbackFunction(char const*)+0xd2>
 801539a:	60e2      	str	r2, [r4, #12]
 801539c:	f043 0304 	orr.w	r3, r3, #4
 80153a0:	e7e3      	b.n	801536a <NetworkParams::callbackFunction(char const*)+0x9a>
 80153a2:	f023 0304 	bic.w	r3, r3, #4
 80153a6:	e7e0      	b.n	801536a <NetworkParams::callbackFunction(char const*)+0x9a>
 80153a8:	4912      	ldr	r1, [pc, #72]	; (80153f4 <NetworkParams::callbackFunction(char const*)+0x124>)
 80153aa:	aa02      	add	r2, sp, #8
 80153ac:	4628      	mov	r0, r5
 80153ae:	f002 f9cf 	bl	8017750 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80153b2:	b928      	cbnz	r0, 80153c0 <NetworkParams::callbackFunction(char const*)+0xf0>
 80153b4:	9b02      	ldr	r3, [sp, #8]
 80153b6:	6123      	str	r3, [r4, #16]
 80153b8:	6863      	ldr	r3, [r4, #4]
 80153ba:	f043 0308 	orr.w	r3, r3, #8
 80153be:	e7d4      	b.n	801536a <NetworkParams::callbackFunction(char const*)+0x9a>
 80153c0:	233f      	movs	r3, #63	; 0x3f
 80153c2:	9303      	str	r3, [sp, #12]
 80153c4:	490c      	ldr	r1, [pc, #48]	; (80153f8 <NetworkParams::callbackFunction(char const*)+0x128>)
 80153c6:	ab03      	add	r3, sp, #12
 80153c8:	f104 0219 	add.w	r2, r4, #25
 80153cc:	4628      	mov	r0, r5
 80153ce:	f002 f94b 	bl	8017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 80153d2:	2800      	cmp	r0, #0
 80153d4:	d192      	bne.n	80152fc <NetworkParams::callbackFunction(char const*)+0x2c>
 80153d6:	9b03      	ldr	r3, [sp, #12]
 80153d8:	4423      	add	r3, r4
 80153da:	7658      	strb	r0, [r3, #25]
 80153dc:	6863      	ldr	r3, [r4, #4]
 80153de:	f043 0320 	orr.w	r3, r3, #32
 80153e2:	e7c2      	b.n	801536a <NetworkParams::callbackFunction(char const*)+0x9a>
 80153e4:	0801d664 	stmdaeq	r1, {r2, r5, r6, r9, sl, ip, lr, pc}
 80153e8:	0801d642 	stmdaeq	r1, {r1, r6, r9, sl, ip, lr, pc}
 80153ec:	0801d627 	stmdaeq	r1, {r0, r1, r2, r5, r9, sl, ip, lr, pc}
 80153f0:	0801d65b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, sl, ip, lr, pc}
 80153f4:	0801d632 	stmdaeq	r1, {r1, r4, r5, r9, sl, ip, lr, pc}
 80153f8:	0801d652 	stmdaeq	r1, {r1, r4, r6, r9, sl, ip, lr, pc}

080153fc <NetworkParams::staticCallbackFunction(void*, char const*)>:
 80153fc:	f7ff bf68 	b.w	80152d0 <NetworkParams::callbackFunction(char const*)>

08015400 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>:
 8015400:	b570      	push	{r4, r5, r6, lr}
 8015402:	4604      	mov	r4, r0
 8015404:	b086      	sub	sp, #24
 8015406:	4615      	mov	r5, r2
 8015408:	461e      	mov	r6, r3
 801540a:	3004      	adds	r0, #4
 801540c:	2900      	cmp	r1, #0
 801540e:	d02a      	beq.n	8015466 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x66>
 8015410:	225e      	movs	r2, #94	; 0x5e
 8015412:	f002 ffd4 	bl	80183be <memmove>
 8015416:	462a      	mov	r2, r5
 8015418:	4633      	mov	r3, r6
 801541a:	496f      	ldr	r1, [pc, #444]	; (80155d8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d8>)
 801541c:	a803      	add	r0, sp, #12
 801541e:	f002 f84b 	bl	80174b8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8015422:	6863      	ldr	r3, [r4, #4]
 8015424:	079a      	lsls	r2, r3, #30
 8015426:	bf5f      	itttt	pl
 8015428:	4a6c      	ldrpl	r2, [pc, #432]	; (80155dc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 801542a:	6812      	ldrpl	r2, [r2, #0]
 801542c:	6952      	ldrpl	r2, [r2, #20]
 801542e:	60a2      	strpl	r2, [r4, #8]
 8015430:	075e      	lsls	r6, r3, #29
 8015432:	bf5f      	itttt	pl
 8015434:	4a69      	ldrpl	r2, [pc, #420]	; (80155dc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8015436:	6812      	ldrpl	r2, [r2, #0]
 8015438:	69d2      	ldrpl	r2, [r2, #28]
 801543a:	60e2      	strpl	r2, [r4, #12]
 801543c:	071d      	lsls	r5, r3, #28
 801543e:	bf5f      	itttt	pl
 8015440:	4a66      	ldrpl	r2, [pc, #408]	; (80155dc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8015442:	6812      	ldrpl	r2, [r2, #0]
 8015444:	6992      	ldrpl	r2, [r2, #24]
 8015446:	6122      	strpl	r2, [r4, #16]
 8015448:	0698      	lsls	r0, r3, #26
 801544a:	f104 0519 	add.w	r5, r4, #25
 801544e:	d418      	bmi.n	8015482 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 8015450:	4b62      	ldr	r3, [pc, #392]	; (80155dc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	4628      	mov	r0, r5
 8015456:	331f      	adds	r3, #31
 8015458:	223f      	movs	r2, #63	; 0x3f
 801545a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801545e:	b949      	cbnz	r1, 8015474 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x74>
 8015460:	f002 ffc4 	bl	80183ec <memset>
 8015464:	e00a      	b.n	801547c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x7c>
 8015466:	6823      	ldr	r3, [r4, #0]
 8015468:	681a      	ldr	r2, [r3, #0]
 801546a:	4601      	mov	r1, r0
 801546c:	68d2      	ldr	r2, [r2, #12]
 801546e:	4618      	mov	r0, r3
 8015470:	4790      	blx	r2
 8015472:	e7d0      	b.n	8015416 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 8015474:	3a01      	subs	r2, #1
 8015476:	f800 1b01 	strb.w	r1, [r0], #1
 801547a:	d1ee      	bne.n	801545a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x5a>
 801547c:	2300      	movs	r3, #0
 801547e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8015482:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015486:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 801548a:	7e23      	ldrb	r3, [r4, #24]
 801548c:	6861      	ldr	r1, [r4, #4]
 801548e:	42b2      	cmp	r2, r6
 8015490:	d21a      	bcs.n	80154c8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xc8>
 8015492:	9803      	ldr	r0, [sp, #12]
 8015494:	07c9      	lsls	r1, r1, #31
 8015496:	4410      	add	r0, r2
 8015498:	eba6 0602 	sub.w	r6, r6, r2
 801549c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80154a0:	d404      	bmi.n	80154ac <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 80154a2:	b922      	cbnz	r2, 80154ae <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xae>
 80154a4:	9300      	str	r3, [sp, #0]
 80154a6:	4a4e      	ldr	r2, [pc, #312]	; (80155e0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80154a8:	4b4e      	ldr	r3, [pc, #312]	; (80155e4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 80154aa:	e003      	b.n	80154b4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb4>
 80154ac:	b312      	cbz	r2, 80154f4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xf4>
 80154ae:	9300      	str	r3, [sp, #0]
 80154b0:	4a4d      	ldr	r2, [pc, #308]	; (80155e8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 80154b2:	4b4c      	ldr	r3, [pc, #304]	; (80155e4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 80154b4:	4631      	mov	r1, r6
 80154b6:	f7f5 f817 	bl	800a4e8 <snprintf>
 80154ba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80154be:	4286      	cmp	r6, r0
 80154c0:	bfa4      	itt	ge
 80154c2:	181b      	addge	r3, r3, r0
 80154c4:	f8ad 3012 	strhge.w	r3, [sp, #18]
 80154c8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80154cc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 80154d0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80154d4:	6861      	ldr	r1, [r4, #4]
 80154d6:	42b2      	cmp	r2, r6
 80154d8:	d21f      	bcs.n	801551a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x11a>
 80154da:	9803      	ldr	r0, [sp, #12]
 80154dc:	05c9      	lsls	r1, r1, #23
 80154de:	4410      	add	r0, r2
 80154e0:	eba6 0602 	sub.w	r6, r6, r2
 80154e4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80154e8:	d408      	bmi.n	80154fc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xfc>
 80154ea:	b94a      	cbnz	r2, 8015500 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x100>
 80154ec:	9300      	str	r3, [sp, #0]
 80154ee:	4a3c      	ldr	r2, [pc, #240]	; (80155e0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80154f0:	4b3e      	ldr	r3, [pc, #248]	; (80155ec <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 80154f2:	e008      	b.n	8015506 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 80154f4:	9300      	str	r3, [sp, #0]
 80154f6:	4a3e      	ldr	r2, [pc, #248]	; (80155f0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 80154f8:	4b3a      	ldr	r3, [pc, #232]	; (80155e4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 80154fa:	e7db      	b.n	80154b4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb4>
 80154fc:	2a00      	cmp	r2, #0
 80154fe:	d03c      	beq.n	801557a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x17a>
 8015500:	9300      	str	r3, [sp, #0]
 8015502:	4a39      	ldr	r2, [pc, #228]	; (80155e8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8015504:	4b39      	ldr	r3, [pc, #228]	; (80155ec <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8015506:	4631      	mov	r1, r6
 8015508:	f7f4 ffee 	bl	800a4e8 <snprintf>
 801550c:	4286      	cmp	r6, r0
 801550e:	bfa2      	ittt	ge
 8015510:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8015514:	18c0      	addge	r0, r0, r3
 8015516:	f8ad 0012 	strhge.w	r0, [sp, #18]
 801551a:	4936      	ldr	r1, [pc, #216]	; (80155f4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 801551c:	a803      	add	r0, sp, #12
 801551e:	f002 f851 	bl	80175c4 <PropertiesBuilder::AddComment(char const*)>
 8015522:	6863      	ldr	r3, [r4, #4]
 8015524:	68a2      	ldr	r2, [r4, #8]
 8015526:	4934      	ldr	r1, [pc, #208]	; (80155f8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f8>)
 8015528:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801552c:	a803      	add	r0, sp, #12
 801552e:	f002 f805 	bl	801753c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8015532:	6863      	ldr	r3, [r4, #4]
 8015534:	68e2      	ldr	r2, [r4, #12]
 8015536:	4931      	ldr	r1, [pc, #196]	; (80155fc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1fc>)
 8015538:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801553c:	a803      	add	r0, sp, #12
 801553e:	f001 fffd 	bl	801753c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8015542:	6863      	ldr	r3, [r4, #4]
 8015544:	6922      	ldr	r2, [r4, #16]
 8015546:	492e      	ldr	r1, [pc, #184]	; (8015600 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x200>)
 8015548:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801554c:	a803      	add	r0, sp, #12
 801554e:	f001 fff5 	bl	801753c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8015552:	6862      	ldr	r2, [r4, #4]
 8015554:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015558:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 801555c:	42a3      	cmp	r3, r4
 801555e:	d21e      	bcs.n	801559e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x19e>
 8015560:	9803      	ldr	r0, [sp, #12]
 8015562:	0692      	lsls	r2, r2, #26
 8015564:	4418      	add	r0, r3
 8015566:	eba4 0403 	sub.w	r4, r4, r3
 801556a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801556e:	d408      	bmi.n	8015582 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x182>
 8015570:	b943      	cbnz	r3, 8015584 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x184>
 8015572:	4b24      	ldr	r3, [pc, #144]	; (8015604 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 8015574:	4a24      	ldr	r2, [pc, #144]	; (8015608 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 8015576:	9500      	str	r5, [sp, #0]
 8015578:	e007      	b.n	801558a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18a>
 801557a:	9300      	str	r3, [sp, #0]
 801557c:	4a1c      	ldr	r2, [pc, #112]	; (80155f0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 801557e:	4b1b      	ldr	r3, [pc, #108]	; (80155ec <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8015580:	e7c1      	b.n	8015506 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 8015582:	b32b      	cbz	r3, 80155d0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d0>
 8015584:	4b1f      	ldr	r3, [pc, #124]	; (8015604 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 8015586:	4a21      	ldr	r2, [pc, #132]	; (801560c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x20c>)
 8015588:	9500      	str	r5, [sp, #0]
 801558a:	4621      	mov	r1, r4
 801558c:	f7f4 ffac 	bl	800a4e8 <snprintf>
 8015590:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015594:	4284      	cmp	r4, r0
 8015596:	bfa4      	itt	ge
 8015598:	181b      	addge	r3, r3, r0
 801559a:	f8ad 3012 	strhge.w	r3, [sp, #18]
 801559e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80155a2:	b17b      	cbz	r3, 80155c4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1c4>
 80155a4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80155a8:	9b03      	ldr	r3, [sp, #12]
 80155aa:	4413      	add	r3, r2
 80155ac:	227d      	movs	r2, #125	; 0x7d
 80155ae:	f803 2c01 	strb.w	r2, [r3, #-1]
 80155b2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80155b6:	9903      	ldr	r1, [sp, #12]
 80155b8:	54ca      	strb	r2, [r1, r3]
 80155ba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80155be:	3301      	adds	r3, #1
 80155c0:	f8ad 3012 	strh.w	r3, [sp, #18]
 80155c4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80155c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155ca:	601a      	str	r2, [r3, #0]
 80155cc:	b006      	add	sp, #24
 80155ce:	bd70      	pop	{r4, r5, r6, pc}
 80155d0:	4b0c      	ldr	r3, [pc, #48]	; (8015604 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 80155d2:	4a0f      	ldr	r2, [pc, #60]	; (8015610 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x210>)
 80155d4:	9500      	str	r5, [sp, #0]
 80155d6:	e7d8      	b.n	801558a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18a>
 80155d8:	0801d66d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r9, sl, ip, lr, pc}
 80155dc:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 80155e0:	0801b161 	stmdaeq	r1, {r0, r5, r6, r8, ip, sp, pc}
 80155e4:	0801d664 	stmdaeq	r1, {r2, r5, r6, r9, sl, ip, lr, pc}
 80155e8:	0801b158 	stmdaeq	r1, {r3, r4, r6, r8, ip, sp, pc}
 80155ec:	0801d642 	stmdaeq	r1, {r1, r6, r9, sl, ip, lr, pc}
 80155f0:	0801b162 	stmdaeq	r1, {r1, r5, r6, r8, ip, sp, pc}
 80155f4:	0801d61d 	stmdaeq	r1, {r0, r2, r3, r4, r9, sl, ip, lr, pc}
 80155f8:	0801d627 	stmdaeq	r1, {r0, r1, r2, r5, r9, sl, ip, lr, pc}
 80155fc:	0801d65b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, sl, ip, lr, pc}
 8015600:	0801d632 	stmdaeq	r1, {r1, r4, r5, r9, sl, ip, lr, pc}
 8015604:	0801d652 	stmdaeq	r1, {r1, r4, r6, r9, sl, ip, lr, pc}
 8015608:	0801b174 	stmdaeq	r1, {r2, r4, r5, r6, r8, ip, sp, pc}
 801560c:	0801b169 	stmdaeq	r1, {r0, r3, r5, r6, r8, ip, sp, pc}
 8015610:	0801b175 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, ip, sp, pc}

08015614 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 8015614:	b513      	push	{r0, r1, r4, lr}
 8015616:	6804      	ldr	r4, [r0, #0]
 8015618:	b914      	cbnz	r4, 8015620 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 801561a:	601c      	str	r4, [r3, #0]
 801561c:	b002      	add	sp, #8
 801561e:	bd10      	pop	{r4, pc}
 8015620:	9300      	str	r3, [sp, #0]
 8015622:	4613      	mov	r3, r2
 8015624:	460a      	mov	r2, r1
 8015626:	2100      	movs	r1, #0
 8015628:	f7ff feea 	bl	8015400 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>
 801562c:	e7f6      	b.n	801561c <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

0801562e <NetworkParams::Dump()>:
 801562e:	4770      	bx	lr

08015630 <memcpy.isra.0>:
 8015630:	3801      	subs	r0, #1
 8015632:	440a      	add	r2, r1
 8015634:	4291      	cmp	r1, r2
 8015636:	d100      	bne.n	801563a <memcpy.isra.0+0xa>
 8015638:	4770      	bx	lr
 801563a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801563e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8015642:	e7f7      	b.n	8015634 <memcpy.isra.0+0x4>

08015644 <arp_announce>:
 8015644:	4803      	ldr	r0, [pc, #12]	; (8015654 <arp_announce+0x10>)
 8015646:	69c3      	ldr	r3, [r0, #28]
 8015648:	b113      	cbz	r3, 8015650 <arp_announce+0xc>
 801564a:	212a      	movs	r1, #42	; 0x2a
 801564c:	f004 ba80 	b.w	8019b50 <emac_eth_send>
 8015650:	4770      	bx	lr
 8015652:	bf00      	nop
 8015654:	2000f9b8 			; <UNDEFINED> instruction: 0x2000f9b8

08015658 <arp_handle_request>:
 8015658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801565a:	2204      	movs	r2, #4
 801565c:	f100 0126 	add.w	r1, r0, #38	; 0x26
 8015660:	4604      	mov	r4, r0
 8015662:	eb0d 0002 	add.w	r0, sp, r2
 8015666:	f7ff ffe3 	bl	8015630 <memcpy.isra.0>
 801566a:	4b0d      	ldr	r3, [pc, #52]	; (80156a0 <arp_handle_request+0x48>)
 801566c:	9a01      	ldr	r2, [sp, #4]
 801566e:	69db      	ldr	r3, [r3, #28]
 8015670:	429a      	cmp	r2, r3
 8015672:	d113      	bne.n	801569c <arp_handle_request+0x44>
 8015674:	4d0b      	ldr	r5, [pc, #44]	; (80156a4 <arp_handle_request+0x4c>)
 8015676:	2206      	movs	r2, #6
 8015678:	18a1      	adds	r1, r4, r2
 801567a:	4628      	mov	r0, r5
 801567c:	f7ff ffd8 	bl	8015630 <memcpy.isra.0>
 8015680:	f104 0116 	add.w	r1, r4, #22
 8015684:	f105 0020 	add.w	r0, r5, #32
 8015688:	2206      	movs	r2, #6
 801568a:	f7ff ffd1 	bl	8015630 <memcpy.isra.0>
 801568e:	69e3      	ldr	r3, [r4, #28]
 8015690:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 8015694:	212a      	movs	r1, #42	; 0x2a
 8015696:	4628      	mov	r0, r5
 8015698:	f004 fa5a 	bl	8019b50 <emac_eth_send>
 801569c:	b003      	add	sp, #12
 801569e:	bd30      	pop	{r4, r5, pc}
 80156a0:	2000f9b8 			; <UNDEFINED> instruction: 0x2000f9b8
 80156a4:	2000f9e4 	andcs	pc, r0, r4, ror #19

080156a8 <arp_handle_reply>:
 80156a8:	69c1      	ldr	r1, [r0, #28]
 80156aa:	3016      	adds	r0, #22
 80156ac:	f000 b80a 	b.w	80156c4 <arp_cache_update>

080156b0 <arp_send_request>:
 80156b0:	4b03      	ldr	r3, [pc, #12]	; (80156c0 <arp_send_request+0x10>)
 80156b2:	212a      	movs	r1, #42	; 0x2a
 80156b4:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 80156b8:	4618      	mov	r0, r3
 80156ba:	f004 ba49 	b.w	8019b50 <emac_eth_send>
 80156be:	bf00      	nop
 80156c0:	2000fa10 	andcs	pc, r0, r0, lsl sl	; <UNPREDICTABLE>

080156c4 <arp_cache_update>:
 80156c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156c6:	4c12      	ldr	r4, [pc, #72]	; (8015710 <arp_cache_update+0x4c>)
 80156c8:	8823      	ldrh	r3, [r4, #0]
 80156ca:	2b20      	cmp	r3, #32
 80156cc:	d019      	beq.n	8015702 <arp_cache_update+0x3e>
 80156ce:	2500      	movs	r5, #0
 80156d0:	1d22      	adds	r2, r4, #4
 80156d2:	260c      	movs	r6, #12
 80156d4:	b2af      	uxth	r7, r5
 80156d6:	42bb      	cmp	r3, r7
 80156d8:	d80c      	bhi.n	80156f4 <arp_cache_update+0x30>
 80156da:	fb06 2203 	mla	r2, r6, r3, r2
 80156de:	3203      	adds	r2, #3
 80156e0:	1d85      	adds	r5, r0, #6
 80156e2:	42a8      	cmp	r0, r5
 80156e4:	d10e      	bne.n	8015704 <arp_cache_update+0x40>
 80156e6:	220c      	movs	r2, #12
 80156e8:	fb02 4203 	mla	r2, r2, r3, r4
 80156ec:	3301      	adds	r3, #1
 80156ee:	6051      	str	r1, [r2, #4]
 80156f0:	8023      	strh	r3, [r4, #0]
 80156f2:	e006      	b.n	8015702 <arp_cache_update+0x3e>
 80156f4:	3501      	adds	r5, #1
 80156f6:	fb06 2705 	mla	r7, r6, r5, r2
 80156fa:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 80156fe:	428f      	cmp	r7, r1
 8015700:	d1e8      	bne.n	80156d4 <arp_cache_update+0x10>
 8015702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015704:	f810 6b01 	ldrb.w	r6, [r0], #1
 8015708:	f802 6f01 	strb.w	r6, [r2, #1]!
 801570c:	e7e9      	b.n	80156e2 <arp_cache_update+0x1e>
 801570e:	bf00      	nop
 8015710:	100011a4 	andne	r1, r0, r4, lsr #3

08015714 <arp_cache_lookup>:
 8015714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015718:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80157a8 <arp_cache_lookup+0x94>
 801571c:	4606      	mov	r6, r0
 801571e:	460c      	mov	r4, r1
 8015720:	2200      	movs	r2, #0
 8015722:	200c      	movs	r0, #12
 8015724:	fb00 f302 	mul.w	r3, r0, r2
 8015728:	f853 1008 	ldr.w	r1, [r3, r8]
 801572c:	42b1      	cmp	r1, r6
 801572e:	d10d      	bne.n	801574c <arp_cache_lookup+0x38>
 8015730:	3304      	adds	r3, #4
 8015732:	4443      	add	r3, r8
 8015734:	3c01      	subs	r4, #1
 8015736:	1d9a      	adds	r2, r3, #6
 8015738:	4293      	cmp	r3, r2
 801573a:	d102      	bne.n	8015742 <arp_cache_lookup+0x2e>
 801573c:	4630      	mov	r0, r6
 801573e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015742:	f813 1b01 	ldrb.w	r1, [r3], #1
 8015746:	f804 1f01 	strb.w	r1, [r4, #1]!
 801574a:	e7f5      	b.n	8015738 <arp_cache_lookup+0x24>
 801574c:	b111      	cbz	r1, 8015754 <arp_cache_lookup+0x40>
 801574e:	3201      	adds	r2, #1
 8015750:	2a20      	cmp	r2, #32
 8015752:	d1e7      	bne.n	8015724 <arp_cache_lookup+0x10>
 8015754:	f8df a054 	ldr.w	sl, [pc, #84]	; 80157ac <arp_cache_lookup+0x98>
 8015758:	f8ba 5000 	ldrh.w	r5, [sl]
 801575c:	2704      	movs	r7, #4
 801575e:	3f01      	subs	r7, #1
 8015760:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8015764:	d101      	bne.n	801576a <arp_cache_lookup+0x56>
 8015766:	463e      	mov	r6, r7
 8015768:	e7e8      	b.n	801573c <arp_cache_lookup+0x28>
 801576a:	4630      	mov	r0, r6
 801576c:	f7ff ffa0 	bl	80156b0 <arp_send_request>
 8015770:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8015774:	f1b9 0901 	subs.w	r9, r9, #1
 8015778:	f8ba 3000 	ldrh.w	r3, [sl]
 801577c:	d011      	beq.n	80157a2 <arp_cache_lookup+0x8e>
 801577e:	429d      	cmp	r5, r3
 8015780:	d00c      	beq.n	801579c <arp_cache_lookup+0x88>
 8015782:	230c      	movs	r3, #12
 8015784:	fb03 8505 	mla	r5, r3, r5, r8
 8015788:	1d2b      	adds	r3, r5, #4
 801578a:	3c01      	subs	r4, #1
 801578c:	350a      	adds	r5, #10
 801578e:	42ab      	cmp	r3, r5
 8015790:	d0d4      	beq.n	801573c <arp_cache_lookup+0x28>
 8015792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015796:	f804 2f01 	strb.w	r2, [r4, #1]!
 801579a:	e7f8      	b.n	801578e <arp_cache_lookup+0x7a>
 801579c:	f7f2 fee2 	bl	8008564 <net_handle>
 80157a0:	e7e8      	b.n	8015774 <arp_cache_lookup+0x60>
 80157a2:	429d      	cmp	r5, r3
 80157a4:	d0db      	beq.n	801575e <arp_cache_lookup+0x4a>
 80157a6:	e7ec      	b.n	8015782 <arp_cache_lookup+0x6e>
 80157a8:	100011a8 	andne	r1, r0, r8, lsr #3
 80157ac:	100011a4 	andne	r1, r0, r4, lsr #3

080157b0 <_parse_response>:
 80157b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157b4:	2400      	movs	r4, #0
 80157b6:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 80157ba:	4e52      	ldr	r6, [pc, #328]	; (8015904 <_parse_response+0x154>)
 80157bc:	9009      	str	r0, [sp, #36]	; 0x24
 80157be:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80157c2:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80157c6:	6833      	ldr	r3, [r6, #0]
 80157c8:	9402      	str	r4, [sp, #8]
 80157ca:	460d      	mov	r5, r1
 80157cc:	46a3      	mov	fp, r4
 80157ce:	4627      	mov	r7, r4
 80157d0:	46a2      	mov	sl, r4
 80157d2:	46a1      	mov	r9, r4
 80157d4:	9407      	str	r4, [sp, #28]
 80157d6:	46a0      	mov	r8, r4
 80157d8:	9308      	str	r3, [sp, #32]
 80157da:	f7f2 fec3 	bl	8008564 <net_handle>
 80157de:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80157e2:	9300      	str	r3, [sp, #0]
 80157e4:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 80157e8:	ab0c      	add	r3, sp, #48	; 0x30
 80157ea:	f44f 7209 	mov.w	r2, #548	; 0x224
 80157ee:	a90d      	add	r1, sp, #52	; 0x34
 80157f0:	f7fe fcfa 	bl	80141e8 <udp_recv>
 80157f4:	2800      	cmp	r0, #0
 80157f6:	d040      	beq.n	801587a <_parse_response+0xca>
 80157f8:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80157fc:	2b43      	cmp	r3, #67	; 0x43
 80157fe:	d13c      	bne.n	801587a <_parse_response+0xca>
 8015800:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8015804:	1e6b      	subs	r3, r5, #1
 8015806:	1d69      	adds	r1, r5, #5
 8015808:	4299      	cmp	r1, r3
 801580a:	d130      	bne.n	801586e <_parse_response+0xbe>
 801580c:	2500      	movs	r5, #0
 801580e:	ab0d      	add	r3, sp, #52	; 0x34
 8015810:	4418      	add	r0, r3
 8015812:	46ac      	mov	ip, r5
 8015814:	462e      	mov	r6, r5
 8015816:	ab49      	add	r3, sp, #292	; 0x124
 8015818:	4629      	mov	r1, r5
 801581a:	4283      	cmp	r3, r0
 801581c:	d338      	bcc.n	8015890 <_parse_response+0xe0>
 801581e:	b145      	cbz	r5, 8015832 <_parse_response+0x82>
 8015820:	4b39      	ldr	r3, [pc, #228]	; (8015908 <_parse_response+0x158>)
 8015822:	9a07      	ldr	r2, [sp, #28]
 8015824:	709a      	strb	r2, [r3, #2]
 8015826:	9a06      	ldr	r2, [sp, #24]
 8015828:	705a      	strb	r2, [r3, #1]
 801582a:	9a05      	ldr	r2, [sp, #20]
 801582c:	f883 8003 	strb.w	r8, [r3, #3]
 8015830:	701a      	strb	r2, [r3, #0]
 8015832:	f1bc 0f00 	cmp.w	ip, #0
 8015836:	d007      	beq.n	8015848 <_parse_response+0x98>
 8015838:	4b34      	ldr	r3, [pc, #208]	; (801590c <_parse_response+0x15c>)
 801583a:	9a04      	ldr	r2, [sp, #16]
 801583c:	70da      	strb	r2, [r3, #3]
 801583e:	9a03      	ldr	r2, [sp, #12]
 8015840:	709a      	strb	r2, [r3, #2]
 8015842:	9a02      	ldr	r2, [sp, #8]
 8015844:	705c      	strb	r4, [r3, #1]
 8015846:	701a      	strb	r2, [r3, #0]
 8015848:	b13e      	cbz	r6, 801585a <_parse_response+0xaa>
 801584a:	4b31      	ldr	r3, [pc, #196]	; (8015910 <_parse_response+0x160>)
 801584c:	70df      	strb	r7, [r3, #3]
 801584e:	f883 a002 	strb.w	sl, [r3, #2]
 8015852:	f883 9001 	strb.w	r9, [r3, #1]
 8015856:	f883 b000 	strb.w	fp, [r3]
 801585a:	2902      	cmp	r1, #2
 801585c:	bf02      	ittt	eq
 801585e:	4b2d      	ldreq	r3, [pc, #180]	; (8015914 <_parse_response+0x164>)
 8015860:	9a11      	ldreq	r2, [sp, #68]	; 0x44
 8015862:	601a      	streq	r2, [r3, #0]
 8015864:	4608      	mov	r0, r1
 8015866:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 801586a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801586e:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 8015872:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 8015876:	45e6      	cmp	lr, ip
 8015878:	d0c6      	beq.n	8015808 <_parse_response+0x58>
 801587a:	6833      	ldr	r3, [r6, #0]
 801587c:	9a08      	ldr	r2, [sp, #32]
 801587e:	1a9b      	subs	r3, r3, r2
 8015880:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015884:	d3a9      	bcc.n	80157da <_parse_response+0x2a>
 8015886:	2800      	cmp	r0, #0
 8015888:	d1c0      	bne.n	801580c <_parse_response+0x5c>
 801588a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801588e:	e7ea      	b.n	8015866 <_parse_response+0xb6>
 8015890:	781a      	ldrb	r2, [r3, #0]
 8015892:	2a35      	cmp	r2, #53	; 0x35
 8015894:	d011      	beq.n	80158ba <_parse_response+0x10a>
 8015896:	d808      	bhi.n	80158aa <_parse_response+0xfa>
 8015898:	2a01      	cmp	r2, #1
 801589a:	d011      	beq.n	80158c0 <_parse_response+0x110>
 801589c:	2a03      	cmp	r2, #3
 801589e:	d019      	beq.n	80158d4 <_parse_response+0x124>
 80158a0:	b14a      	cbz	r2, 80158b6 <_parse_response+0x106>
 80158a2:	1c9a      	adds	r2, r3, #2
 80158a4:	785b      	ldrb	r3, [r3, #1]
 80158a6:	4413      	add	r3, r2
 80158a8:	e7b7      	b.n	801581a <_parse_response+0x6a>
 80158aa:	2a36      	cmp	r2, #54	; 0x36
 80158ac:	d01f      	beq.n	80158ee <_parse_response+0x13e>
 80158ae:	2aff      	cmp	r2, #255	; 0xff
 80158b0:	d1f7      	bne.n	80158a2 <_parse_response+0xf2>
 80158b2:	4603      	mov	r3, r0
 80158b4:	e7b1      	b.n	801581a <_parse_response+0x6a>
 80158b6:	3301      	adds	r3, #1
 80158b8:	e7af      	b.n	801581a <_parse_response+0x6a>
 80158ba:	7899      	ldrb	r1, [r3, #2]
 80158bc:	3303      	adds	r3, #3
 80158be:	e7ac      	b.n	801581a <_parse_response+0x6a>
 80158c0:	f893 b002 	ldrb.w	fp, [r3, #2]
 80158c4:	f893 9003 	ldrb.w	r9, [r3, #3]
 80158c8:	f893 a004 	ldrb.w	sl, [r3, #4]
 80158cc:	795f      	ldrb	r7, [r3, #5]
 80158ce:	4616      	mov	r6, r2
 80158d0:	3306      	adds	r3, #6
 80158d2:	e7a2      	b.n	801581a <_parse_response+0x6a>
 80158d4:	789a      	ldrb	r2, [r3, #2]
 80158d6:	9202      	str	r2, [sp, #8]
 80158d8:	791a      	ldrb	r2, [r3, #4]
 80158da:	9203      	str	r2, [sp, #12]
 80158dc:	795a      	ldrb	r2, [r3, #5]
 80158de:	9204      	str	r2, [sp, #16]
 80158e0:	785a      	ldrb	r2, [r3, #1]
 80158e2:	78dc      	ldrb	r4, [r3, #3]
 80158e4:	4413      	add	r3, r2
 80158e6:	3302      	adds	r3, #2
 80158e8:	f04f 0c01 	mov.w	ip, #1
 80158ec:	e795      	b.n	801581a <_parse_response+0x6a>
 80158ee:	789a      	ldrb	r2, [r3, #2]
 80158f0:	9205      	str	r2, [sp, #20]
 80158f2:	78da      	ldrb	r2, [r3, #3]
 80158f4:	9206      	str	r2, [sp, #24]
 80158f6:	791a      	ldrb	r2, [r3, #4]
 80158f8:	f893 8005 	ldrb.w	r8, [r3, #5]
 80158fc:	9207      	str	r2, [sp, #28]
 80158fe:	3306      	adds	r3, #6
 8015900:	2501      	movs	r5, #1
 8015902:	e78a      	b.n	801581a <_parse_response+0x6a>
 8015904:	20010694 	mulcs	r1, r4, r6
 8015908:	2000fc6c 	andcs	pc, r0, ip, ror #24
 801590c:	2000fa3c 	andcs	pc, r0, ip, lsr sl	; <UNPREDICTABLE>
 8015910:	2000fa44 	andcs	pc, r0, r4, asr #20
 8015914:	2000fa40 	andcs	pc, r0, r0, asr #20

08015918 <memcpy.isra.0>:
 8015918:	3801      	subs	r0, #1
 801591a:	440a      	add	r2, r1
 801591c:	4291      	cmp	r1, r2
 801591e:	d100      	bne.n	8015922 <memcpy.isra.0+0xa>
 8015920:	4770      	bx	lr
 8015922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015926:	f800 3f01 	strb.w	r3, [r0, #1]!
 801592a:	e7f7      	b.n	801591c <memcpy.isra.0+0x4>

0801592c <dhcp_client>:
 801592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015930:	b087      	sub	sp, #28
 8015932:	460f      	mov	r7, r1
 8015934:	9203      	str	r2, [sp, #12]
 8015936:	4a77      	ldr	r2, [pc, #476]	; (8015b14 <dhcp_client+0x1e8>)
 8015938:	4605      	mov	r5, r0
 801593a:	f44f 7309 	mov.w	r3, #548	; 0x224
 801593e:	4614      	mov	r4, r2
 8015940:	2100      	movs	r1, #0
 8015942:	3b01      	subs	r3, #1
 8015944:	f802 1b01 	strb.w	r1, [r2], #1
 8015948:	d1fb      	bne.n	8015942 <dhcp_client+0x16>
 801594a:	f240 1301 	movw	r3, #257	; 0x101
 801594e:	2206      	movs	r2, #6
 8015950:	4871      	ldr	r0, [pc, #452]	; (8015b18 <dhcp_client+0x1ec>)
 8015952:	8023      	strh	r3, [r4, #0]
 8015954:	4629      	mov	r1, r5
 8015956:	70a2      	strb	r2, [r4, #2]
 8015958:	f7ff ffde 	bl	8015918 <memcpy.isra.0>
 801595c:	4b6f      	ldr	r3, [pc, #444]	; (8015b1c <dhcp_client+0x1f0>)
 801595e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8015962:	f240 1335 	movw	r3, #309	; 0x135
 8015966:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 801596a:	2044      	movs	r0, #68	; 0x44
 801596c:	f7fe fc02 	bl	8014174 <udp_bind>
 8015970:	1e06      	subs	r6, r0, #0
 8015972:	f2c0 80c9 	blt.w	8015b08 <dhcp_client+0x1dc>
 8015976:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8015b14 <dhcp_client+0x1e8>
 801597a:	f04f 0915 	mov.w	r9, #21
 801597e:	f1b9 0901 	subs.w	r9, r9, #1
 8015982:	d11f      	bne.n	80159c4 <dhcp_client+0x98>
 8015984:	464c      	mov	r4, r9
 8015986:	2044      	movs	r0, #68	; 0x44
 8015988:	f7fe fc0e 	bl	80141a8 <udp_unbind>
 801598c:	2c00      	cmp	r4, #0
 801598e:	f000 80be 	beq.w	8015b0e <dhcp_client+0x1e2>
 8015992:	4963      	ldr	r1, [pc, #396]	; (8015b20 <dhcp_client+0x1f4>)
 8015994:	2204      	movs	r2, #4
 8015996:	a805      	add	r0, sp, #20
 8015998:	f7ff ffbe 	bl	8015918 <memcpy.isra.0>
 801599c:	9b05      	ldr	r3, [sp, #20]
 801599e:	4961      	ldr	r1, [pc, #388]	; (8015b24 <dhcp_client+0x1f8>)
 80159a0:	603b      	str	r3, [r7, #0]
 80159a2:	2204      	movs	r2, #4
 80159a4:	a805      	add	r0, sp, #20
 80159a6:	f7ff ffb7 	bl	8015918 <memcpy.isra.0>
 80159aa:	9b05      	ldr	r3, [sp, #20]
 80159ac:	60bb      	str	r3, [r7, #8]
 80159ae:	a805      	add	r0, sp, #20
 80159b0:	495d      	ldr	r1, [pc, #372]	; (8015b28 <dhcp_client+0x1fc>)
 80159b2:	2204      	movs	r2, #4
 80159b4:	f7ff ffb0 	bl	8015918 <memcpy.isra.0>
 80159b8:	9b05      	ldr	r3, [sp, #20]
 80159ba:	607b      	str	r3, [r7, #4]
 80159bc:	2000      	movs	r0, #0
 80159be:	b007      	add	sp, #28
 80159c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159c4:	f643 5301 	movw	r3, #15617	; 0x3d01
 80159c8:	f240 1807 	movw	r8, #263	; 0x107
 80159cc:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 80159d0:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 80159d4:	782b      	ldrb	r3, [r5, #0]
 80159d6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 80159da:	786b      	ldrb	r3, [r5, #1]
 80159dc:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 80159e0:	78ab      	ldrb	r3, [r5, #2]
 80159e2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 80159e6:	78eb      	ldrb	r3, [r5, #3]
 80159e8:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 80159ec:	792b      	ldrb	r3, [r5, #4]
 80159ee:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 80159f2:	796b      	ldrb	r3, [r5, #5]
 80159f4:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 80159f8:	4a4c      	ldr	r2, [pc, #304]	; (8015b2c <dhcp_client+0x200>)
 80159fa:	4b4d      	ldr	r3, [pc, #308]	; (8015b30 <dhcp_client+0x204>)
 80159fc:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8015a00:	23ff      	movs	r3, #255	; 0xff
 8015a02:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8015a06:	fa5f fb86 	uxtb.w	fp, r6
 8015a0a:	2343      	movs	r3, #67	; 0x43
 8015a0c:	9300      	str	r3, [sp, #0]
 8015a0e:	f240 1205 	movw	r2, #261	; 0x105
 8015a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a16:	4651      	mov	r1, sl
 8015a18:	4658      	mov	r0, fp
 8015a1a:	f7fe fc41 	bl	80142a0 <udp_send>
 8015a1e:	4629      	mov	r1, r5
 8015a20:	4630      	mov	r0, r6
 8015a22:	f7ff fec5 	bl	80157b0 <_parse_response>
 8015a26:	2802      	cmp	r0, #2
 8015a28:	d1a9      	bne.n	801597e <dhcp_client+0x52>
 8015a2a:	f643 5303 	movw	r3, #15619	; 0x3d03
 8015a2e:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8015a32:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8015a36:	782b      	ldrb	r3, [r5, #0]
 8015a38:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8015a3c:	786b      	ldrb	r3, [r5, #1]
 8015a3e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8015a42:	78ab      	ldrb	r3, [r5, #2]
 8015a44:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8015a48:	78eb      	ldrb	r3, [r5, #3]
 8015a4a:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8015a4e:	792b      	ldrb	r3, [r5, #4]
 8015a50:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8015a54:	796b      	ldrb	r3, [r5, #5]
 8015a56:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8015a5a:	f240 4332 	movw	r3, #1074	; 0x432
 8015a5e:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 8015a62:	4b2f      	ldr	r3, [pc, #188]	; (8015b20 <dhcp_client+0x1f4>)
 8015a64:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8015b38 <dhcp_client+0x20c>
 8015a68:	881a      	ldrh	r2, [r3, #0]
 8015a6a:	885b      	ldrh	r3, [r3, #2]
 8015a6c:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8015a70:	f240 4336 	movw	r3, #1078	; 0x436
 8015a74:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 8015a78:	4b2e      	ldr	r3, [pc, #184]	; (8015b34 <dhcp_client+0x208>)
 8015a7a:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8015a84:	230c      	movs	r3, #12
 8015a86:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 8015a8a:	9b03      	ldr	r3, [sp, #12]
 8015a8c:	221e      	movs	r2, #30
 8015a8e:	1e58      	subs	r0, r3, #1
 8015a90:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8015a94:	f1a2 0e1e 	sub.w	lr, r2, #30
 8015a98:	1c51      	adds	r1, r2, #1
 8015a9a:	bb8b      	cbnz	r3, 8015b00 <dhcp_client+0x1d4>
 8015a9c:	18a3      	adds	r3, r4, r2
 8015a9e:	2037      	movs	r0, #55	; 0x37
 8015aa0:	4421      	add	r1, r4
 8015aa2:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8015aa6:	2006      	movs	r0, #6
 8015aa8:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8015aac:	2103      	movs	r1, #3
 8015aae:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 8015ab2:	210f      	movs	r1, #15
 8015ab4:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8015ab8:	213a      	movs	r1, #58	; 0x3a
 8015aba:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8015abe:	213b      	movs	r1, #59	; 0x3b
 8015ac0:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8015ac4:	f04f 0801 	mov.w	r8, #1
 8015ac8:	21ff      	movs	r1, #255	; 0xff
 8015aca:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8015ace:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8015ad2:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8015ad6:	32f5      	adds	r2, #245	; 0xf5
 8015ad8:	2343      	movs	r3, #67	; 0x43
 8015ada:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8015ade:	b292      	uxth	r2, r2
 8015ae0:	9300      	str	r3, [sp, #0]
 8015ae2:	4651      	mov	r1, sl
 8015ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ae8:	4658      	mov	r0, fp
 8015aea:	f7fe fbd9 	bl	80142a0 <udp_send>
 8015aee:	4629      	mov	r1, r5
 8015af0:	4630      	mov	r0, r6
 8015af2:	f7ff fe5d 	bl	80157b0 <_parse_response>
 8015af6:	2805      	cmp	r0, #5
 8015af8:	f47f af41 	bne.w	801597e <dhcp_client+0x52>
 8015afc:	4644      	mov	r4, r8
 8015afe:	e742      	b.n	8015986 <dhcp_client+0x5a>
 8015b00:	f80c 3f01 	strb.w	r3, [ip, #1]!
 8015b04:	460a      	mov	r2, r1
 8015b06:	e7c3      	b.n	8015a90 <dhcp_client+0x164>
 8015b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b0c:	e757      	b.n	80159be <dhcp_client+0x92>
 8015b0e:	f06f 0001 	mvn.w	r0, #1
 8015b12:	e754      	b.n	80159be <dhcp_client+0x92>
 8015b14:	2000fa48 	andcs	pc, r0, r8, asr #20
 8015b18:	2000fa64 	andcs	pc, r0, r4, ror #20
 8015b1c:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8015b20:	2000fa40 	andcs	pc, r0, r0, asr #20
 8015b24:	2000fa3c 	andcs	pc, r0, ip, lsr sl	; <UNPREDICTABLE>
 8015b28:	2000fa44 	andcs	pc, r0, r4, asr #20
 8015b2c:	03010637 	movweq	r0, #5687	; 0x1637
 8015b30:	3b3a0f06 	blcc	8e99750 <__exidx_end+0xe7a6c4>
 8015b34:	2000fc6c 	andcs	pc, r0, ip, ror #24
 8015b38:	2000fb51 	andcs	pc, r0, r1, asr fp	; <UNPREDICTABLE>

08015b3c <dhcp_client_release>:
 8015b3c:	b507      	push	{r0, r1, r2, lr}
 8015b3e:	2044      	movs	r0, #68	; 0x44
 8015b40:	f7fe fb18 	bl	8014174 <udp_bind>
 8015b44:	4912      	ldr	r1, [pc, #72]	; (8015b90 <dhcp_client_release+0x54>)
 8015b46:	f243 6307 	movw	r3, #13831	; 0x3607
 8015b4a:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8015b4e:	2304      	movs	r3, #4
 8015b50:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8015b54:	4b0f      	ldr	r3, [pc, #60]	; (8015b94 <dhcp_client_release+0x58>)
 8015b56:	781a      	ldrb	r2, [r3, #0]
 8015b58:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 8015b5c:	785a      	ldrb	r2, [r3, #1]
 8015b5e:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 8015b62:	789a      	ldrb	r2, [r3, #2]
 8015b64:	78db      	ldrb	r3, [r3, #3]
 8015b66:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 8015b6a:	23ff      	movs	r3, #255	; 0xff
 8015b6c:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 8015b70:	2343      	movs	r3, #67	; 0x43
 8015b72:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 8015b76:	b2c0      	uxtb	r0, r0
 8015b78:	9300      	str	r3, [sp, #0]
 8015b7a:	22fa      	movs	r2, #250	; 0xfa
 8015b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b80:	f7fe fb8e 	bl	80142a0 <udp_send>
 8015b84:	2044      	movs	r0, #68	; 0x44
 8015b86:	b003      	add	sp, #12
 8015b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b8c:	f7fe bb0c 	b.w	80141a8 <udp_unbind>
 8015b90:	2000fa48 	andcs	pc, r0, r8, asr #20
 8015b94:	2000fc6c 	andcs	pc, r0, ip, ror #24

08015b98 <memcpy.isra.0>:
 8015b98:	3801      	subs	r0, #1
 8015b9a:	440a      	add	r2, r1
 8015b9c:	4291      	cmp	r1, r2
 8015b9e:	d100      	bne.n	8015ba2 <memcpy.isra.0+0xa>
 8015ba0:	4770      	bx	lr
 8015ba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ba6:	f800 3f01 	strb.w	r3, [r0, #1]!
 8015baa:	e7f7      	b.n	8015b9c <memcpy.isra.0+0x4>

08015bac <_send_report>:
 8015bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015bae:	4c1d      	ldr	r4, [pc, #116]	; (8015c24 <_send_report+0x78>)
 8015bb0:	9001      	str	r0, [sp, #4]
 8015bb2:	f3c0 2306 	ubfx	r3, r0, #8, #7
 8015bb6:	70e3      	strb	r3, [r4, #3]
 8015bb8:	f104 0508 	add.w	r5, r4, #8
 8015bbc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015bc0:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8015bc4:	7160      	strb	r0, [r4, #5]
 8015bc6:	4621      	mov	r1, r4
 8015bc8:	4628      	mov	r0, r5
 8015bca:	2206      	movs	r2, #6
 8015bcc:	7123      	strb	r3, [r4, #4]
 8015bce:	f7ff ffe3 	bl	8015b98 <memcpy.isra.0>
 8015bd2:	2204      	movs	r2, #4
 8015bd4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015bd6:	8363      	strh	r3, [r4, #26]
 8015bd8:	eb0d 0102 	add.w	r1, sp, r2
 8015bdc:	f104 0026 	add.w	r0, r4, #38	; 0x26
 8015be0:	f104 0616 	add.w	r6, r4, #22
 8015be4:	f7ff ffd8 	bl	8015b98 <memcpy.isra.0>
 8015be8:	2700      	movs	r7, #0
 8015bea:	2118      	movs	r1, #24
 8015bec:	4630      	mov	r0, r6
 8015bee:	8427      	strh	r7, [r4, #32]
 8015bf0:	f000 f8bf 	bl	8015d72 <net_chksum>
 8015bf4:	2204      	movs	r2, #4
 8015bf6:	eb0d 0102 	add.w	r1, sp, r2
 8015bfa:	8420      	strh	r0, [r4, #32]
 8015bfc:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8015c00:	f7ff ffca 	bl	8015b98 <memcpy.isra.0>
 8015c04:	2120      	movs	r1, #32
 8015c06:	4630      	mov	r0, r6
 8015c08:	8627      	strh	r7, [r4, #48]	; 0x30
 8015c0a:	f000 f8b2 	bl	8015d72 <net_chksum>
 8015c0e:	212e      	movs	r1, #46	; 0x2e
 8015c10:	8620      	strh	r0, [r4, #48]	; 0x30
 8015c12:	4628      	mov	r0, r5
 8015c14:	f003 ff9c 	bl	8019b50 <emac_eth_send>
 8015c18:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015c1a:	3301      	adds	r3, #1
 8015c1c:	8723      	strh	r3, [r4, #56]	; 0x38
 8015c1e:	b003      	add	sp, #12
 8015c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c22:	bf00      	nop
 8015c24:	10001328 	andne	r1, r0, r8, lsr #6

08015c28 <igmp_set_ip>:
 8015c28:	b513      	push	{r0, r1, r4, lr}
 8015c2a:	4c09      	ldr	r4, [pc, #36]	; (8015c50 <igmp_set_ip+0x28>)
 8015c2c:	6803      	ldr	r3, [r0, #0]
 8015c2e:	9301      	str	r3, [sp, #4]
 8015c30:	2204      	movs	r2, #4
 8015c32:	eb0d 0102 	add.w	r1, sp, r2
 8015c36:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8015c3a:	f7ff ffad 	bl	8015b98 <memcpy.isra.0>
 8015c3e:	2204      	movs	r2, #4
 8015c40:	eb0d 0102 	add.w	r1, sp, r2
 8015c44:	f104 0056 	add.w	r0, r4, #86	; 0x56
 8015c48:	f7ff ffa6 	bl	8015b98 <memcpy.isra.0>
 8015c4c:	b002      	add	sp, #8
 8015c4e:	bd10      	pop	{r4, pc}
 8015c50:	10001328 	andne	r1, r0, r8, lsr #6

08015c54 <igmp_timer>:
 8015c54:	b570      	push	{r4, r5, r6, lr}
 8015c56:	4c0b      	ldr	r4, [pc, #44]	; (8015c84 <igmp_timer+0x30>)
 8015c58:	2500      	movs	r5, #0
 8015c5a:	2602      	movs	r6, #2
 8015c5c:	7963      	ldrb	r3, [r4, #5]
 8015c5e:	2b01      	cmp	r3, #1
 8015c60:	d109      	bne.n	8015c76 <igmp_timer+0x22>
 8015c62:	7923      	ldrb	r3, [r4, #4]
 8015c64:	b13b      	cbz	r3, 8015c76 <igmp_timer+0x22>
 8015c66:	3b01      	subs	r3, #1
 8015c68:	b2db      	uxtb	r3, r3
 8015c6a:	7123      	strb	r3, [r4, #4]
 8015c6c:	b91b      	cbnz	r3, 8015c76 <igmp_timer+0x22>
 8015c6e:	6820      	ldr	r0, [r4, #0]
 8015c70:	f7ff ff9c 	bl	8015bac <_send_report>
 8015c74:	7166      	strb	r6, [r4, #5]
 8015c76:	3501      	adds	r5, #1
 8015c78:	2d24      	cmp	r5, #36	; 0x24
 8015c7a:	f104 0408 	add.w	r4, r4, #8
 8015c7e:	d1ed      	bne.n	8015c5c <igmp_timer+0x8>
 8015c80:	bd70      	pop	{r4, r5, r6, pc}
 8015c82:	bf00      	nop
 8015c84:	10001394 	mulne	r0, r4, r3

08015c88 <igmp_join>:
 8015c88:	b538      	push	{r3, r4, r5, lr}
 8015c8a:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8015c8e:	2be0      	cmp	r3, #224	; 0xe0
 8015c90:	d11e      	bne.n	8015cd0 <igmp_join+0x48>
 8015c92:	4a12      	ldr	r2, [pc, #72]	; (8015cdc <igmp_join+0x54>)
 8015c94:	f8d2 418c 	ldr.w	r4, [r2, #396]	; 0x18c
 8015c98:	2c24      	cmp	r4, #36	; 0x24
 8015c9a:	d01c      	beq.n	8015cd6 <igmp_join+0x4e>
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	f102 016c 	add.w	r1, r2, #108	; 0x6c
 8015ca2:	429c      	cmp	r4, r3
 8015ca4:	dc0e      	bgt.n	8015cc4 <igmp_join+0x3c>
 8015ca6:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 8015caa:	f44f 7181 	mov.w	r1, #258	; 0x102
 8015cae:	66d8      	str	r0, [r3, #108]	; 0x6c
 8015cb0:	f8a3 1070 	strh.w	r1, [r3, #112]	; 0x70
 8015cb4:	1c63      	adds	r3, r4, #1
 8015cb6:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
 8015cba:	f7ff ff77 	bl	8015bac <_send_report>
 8015cbe:	4623      	mov	r3, r4
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	bd38      	pop	{r3, r4, r5, pc}
 8015cc4:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
 8015cc8:	4285      	cmp	r5, r0
 8015cca:	d0f9      	beq.n	8015cc0 <igmp_join+0x38>
 8015ccc:	3301      	adds	r3, #1
 8015cce:	e7e8      	b.n	8015ca2 <igmp_join+0x1a>
 8015cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015cd4:	e7f4      	b.n	8015cc0 <igmp_join+0x38>
 8015cd6:	f06f 0301 	mvn.w	r3, #1
 8015cda:	e7f1      	b.n	8015cc0 <igmp_join+0x38>
 8015cdc:	10001328 	andne	r1, r0, r8, lsr #6

08015ce0 <igmp_leave>:
 8015ce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ce2:	4c1d      	ldr	r4, [pc, #116]	; (8015d58 <igmp_leave+0x78>)
 8015ce4:	2600      	movs	r6, #0
 8015ce6:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8015cea:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
 8015cee:	4282      	cmp	r2, r0
 8015cf0:	d006      	beq.n	8015d00 <igmp_leave+0x20>
 8015cf2:	3601      	adds	r6, #1
 8015cf4:	2e24      	cmp	r6, #36	; 0x24
 8015cf6:	d1f8      	bne.n	8015cea <igmp_leave+0xa>
 8015cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015cfc:	b002      	add	sp, #8
 8015cfe:	bd70      	pop	{r4, r5, r6, pc}
 8015d00:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015d02:	9001      	str	r0, [sp, #4]
 8015d04:	2500      	movs	r5, #0
 8015d06:	2118      	movs	r1, #24
 8015d08:	f104 0016 	add.w	r0, r4, #22
 8015d0c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8015d10:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8015d14:	f000 f82d 	bl	8015d72 <net_chksum>
 8015d18:	2204      	movs	r2, #4
 8015d1a:	eb0d 0102 	add.w	r1, sp, r2
 8015d1e:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
 8015d22:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8015d26:	f7ff ff37 	bl	8015b98 <memcpy.isra.0>
 8015d2a:	2120      	movs	r1, #32
 8015d2c:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 8015d30:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8015d34:	f000 f81d 	bl	8015d72 <net_chksum>
 8015d38:	212e      	movs	r1, #46	; 0x2e
 8015d3a:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
 8015d3e:	4807      	ldr	r0, [pc, #28]	; (8015d5c <igmp_leave+0x7c>)
 8015d40:	f003 ff06 	bl	8019b50 <emac_eth_send>
 8015d44:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8015d46:	3301      	adds	r3, #1
 8015d48:	8723      	strh	r3, [r4, #56]	; 0x38
 8015d4a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8015d4e:	4628      	mov	r0, r5
 8015d50:	66e5      	str	r5, [r4, #108]	; 0x6c
 8015d52:	f8a4 5070 	strh.w	r5, [r4, #112]	; 0x70
 8015d56:	e7d1      	b.n	8015cfc <igmp_leave+0x1c>
 8015d58:	10001328 	andne	r1, r0, r8, lsr #6
 8015d5c:	10001364 	andne	r1, r0, r4, ror #6

08015d60 <ip_set_ip>:
 8015d60:	b510      	push	{r4, lr}
 8015d62:	4604      	mov	r4, r0
 8015d64:	f7fe f9e6 	bl	8014134 <udp_set_ip>
 8015d68:	4620      	mov	r0, r4
 8015d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d6e:	f7ff bf5b 	b.w	8015c28 <igmp_set_ip>

08015d72 <net_chksum>:
 8015d72:	f021 0201 	bic.w	r2, r1, #1
 8015d76:	b530      	push	{r4, r5, lr}
 8015d78:	2300      	movs	r3, #0
 8015d7a:	1884      	adds	r4, r0, r2
 8015d7c:	42a0      	cmp	r0, r4
 8015d7e:	d10b      	bne.n	8015d98 <net_chksum+0x26>
 8015d80:	4291      	cmp	r1, r2
 8015d82:	d004      	beq.n	8015d8e <net_chksum+0x1c>
 8015d84:	7802      	ldrb	r2, [r0, #0]
 8015d86:	0212      	lsls	r2, r2, #8
 8015d88:	ba52      	rev16	r2, r2
 8015d8a:	fa13 f382 	uxtah	r3, r3, r2
 8015d8e:	0c1a      	lsrs	r2, r3, #16
 8015d90:	d106      	bne.n	8015da0 <net_chksum+0x2e>
 8015d92:	43d8      	mvns	r0, r3
 8015d94:	b280      	uxth	r0, r0
 8015d96:	bd30      	pop	{r4, r5, pc}
 8015d98:	f830 5b02 	ldrh.w	r5, [r0], #2
 8015d9c:	442b      	add	r3, r5
 8015d9e:	e7ed      	b.n	8015d7c <net_chksum+0xa>
 8015da0:	fa12 f383 	uxtah	r3, r2, r3
 8015da4:	e7f3      	b.n	8015d8e <net_chksum+0x1c>

08015da6 <net::link_register_read()>:
 8015da6:	b507      	push	{r0, r1, r2, lr}
 8015da8:	2201      	movs	r2, #1
 8015daa:	f10d 0306 	add.w	r3, sp, #6
 8015dae:	4611      	mov	r1, r2
 8015db0:	2000      	movs	r0, #0
 8015db2:	f002 feff 	bl	8018bb4 <enet_phy_write_read>
 8015db6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015dba:	f080 0004 	eor.w	r0, r0, #4
 8015dbe:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8015dc2:	b003      	add	sp, #12
 8015dc4:	f85d fb04 	ldr.w	pc, [sp], #4

08015dc8 <memcpy.isra.0>:
 8015dc8:	3801      	subs	r0, #1
 8015dca:	440a      	add	r2, r1
 8015dcc:	4291      	cmp	r1, r2
 8015dce:	d100      	bne.n	8015dd2 <memcpy.isra.0+0xa>
 8015dd0:	4770      	bx	lr
 8015dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015dd6:	f800 3f01 	strb.w	r3, [r0, #1]!
 8015dda:	e7f7      	b.n	8015dcc <memcpy.isra.0+0x4>

08015ddc <Display::Write(unsigned int, char const*) [clone .isra.0]>:
 8015ddc:	b538      	push	{r3, r4, r5, lr}
 8015dde:	7d05      	ldrb	r5, [r0, #20]
 8015de0:	2300      	movs	r3, #0
 8015de2:	5cd4      	ldrb	r4, [r2, r3]
 8015de4:	b11c      	cbz	r4, 8015dee <Display::Write(unsigned int, char const*) [clone .isra.0]+0x12>
 8015de6:	1c5c      	adds	r4, r3, #1
 8015de8:	429d      	cmp	r5, r3
 8015dea:	4623      	mov	r3, r4
 8015dec:	dcf9      	bgt.n	8015de2 <Display::Write(unsigned int, char const*) [clone .isra.0]+0x6>
 8015dee:	b2db      	uxtb	r3, r3
 8015df0:	f7f3 fa6d 	bl	80092ce <Display::TextLine(unsigned int, char const*, unsigned int)>
 8015df4:	bd38      	pop	{r3, r4, r5, pc}
	...

08015df8 <DisplayUdf::DisplayUdf()>:
 8015df8:	b510      	push	{r4, lr}
 8015dfa:	4604      	mov	r4, r0
 8015dfc:	f001 fd84 	bl	8017908 <Display::Display()>
 8015e00:	2202      	movs	r2, #2
 8015e02:	2300      	movs	r3, #0
 8015e04:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
 8015e08:	4b05      	ldr	r3, [pc, #20]	; (8015e20 <DisplayUdf::DisplayUdf()+0x28>)
 8015e0a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8015e0e:	601c      	str	r4, [r3, #0]
 8015e10:	2301      	movs	r3, #1
 8015e12:	f802 3f01 	strb.w	r3, [r2, #1]!
 8015e16:	3301      	adds	r3, #1
 8015e18:	2b15      	cmp	r3, #21
 8015e1a:	d1fa      	bne.n	8015e12 <DisplayUdf::DisplayUdf()+0x1a>
 8015e1c:	4620      	mov	r0, r4
 8015e1e:	bd10      	pop	{r4, pc}
 8015e20:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>

08015e24 <DisplayUdf::SetTitle(char const*, ...)>:
 8015e24:	b40e      	push	{r1, r2, r3}
 8015e26:	b517      	push	{r0, r1, r2, r4, lr}
 8015e28:	ab05      	add	r3, sp, #20
 8015e2a:	4604      	mov	r4, r0
 8015e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e30:	9301      	str	r3, [sp, #4]
 8015e32:	211f      	movs	r1, #31
 8015e34:	3028      	adds	r0, #40	; 0x28
 8015e36:	f7f4 fb6f 	bl	800a518 <vsnprintf>
 8015e3a:	4420      	add	r0, r4
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8015e42:	b003      	add	sp, #12
 8015e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e48:	b003      	add	sp, #12
 8015e4a:	4770      	bx	lr

08015e4c <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 8015e4c:	1e4b      	subs	r3, r1, #1
 8015e4e:	2b05      	cmp	r3, #5
 8015e50:	b530      	push	{r4, r5, lr}
 8015e52:	d80f      	bhi.n	8015e74 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8015e54:	f100 0447 	add.w	r4, r0, #71	; 0x47
 8015e58:	2300      	movs	r3, #0
 8015e5a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8015e5e:	428d      	cmp	r5, r1
 8015e60:	d109      	bne.n	8015e76 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8015e62:	1884      	adds	r4, r0, r2
 8015e64:	4403      	add	r3, r0
 8015e66:	f894 4048 	ldrb.w	r4, [r4, #72]	; 0x48
 8015e6a:	f883 4048 	strb.w	r4, [r3, #72]	; 0x48
 8015e6e:	4402      	add	r2, r0
 8015e70:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
 8015e74:	bd30      	pop	{r4, r5, pc}
 8015e76:	3301      	adds	r3, #1
 8015e78:	2b14      	cmp	r3, #20
 8015e7a:	d1ee      	bne.n	8015e5a <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8015e7c:	e7f7      	b.n	8015e6e <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>
	...

08015e80 <DisplayUdf::ShowEmacStart()>:
 8015e80:	b510      	push	{r4, lr}
 8015e82:	4604      	mov	r4, r0
 8015e84:	f890 104a 	ldrb.w	r1, [r0, #74]	; 0x4a
 8015e88:	f7f3 fa02 	bl	8009290 <Display::ClearLine(unsigned int)>
 8015e8c:	4a03      	ldr	r2, [pc, #12]	; (8015e9c <DisplayUdf::ShowEmacStart()+0x1c>)
 8015e8e:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
 8015e92:	4620      	mov	r0, r4
 8015e94:	f7f3 fa34 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 8015e98:	bd10      	pop	{r4, pc}
 8015e9a:	bf00      	nop
 8015e9c:	0801d679 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, sl, ip, lr, pc}

08015ea0 <DisplayUdf::ShowIpAddress()>:
 8015ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ea4:	b088      	sub	sp, #32
 8015ea6:	f890 104a 	ldrb.w	r1, [r0, #74]	; 0x4a
 8015eaa:	4606      	mov	r6, r0
 8015eac:	f7f3 f9f0 	bl	8009290 <Display::ClearLine(unsigned int)>
 8015eb0:	4b13      	ldr	r3, [pc, #76]	; (8015f00 <DisplayUdf::ShowIpAddress()+0x60>)
 8015eb2:	f896 104a 	ldrb.w	r1, [r6, #74]	; 0x4a
 8015eb6:	681c      	ldr	r4, [r3, #0]
 8015eb8:	9107      	str	r1, [sp, #28]
 8015eba:	6965      	ldr	r5, [r4, #20]
 8015ebc:	69e0      	ldr	r0, [r4, #28]
 8015ebe:	b2eb      	uxtb	r3, r5
 8015ec0:	9306      	str	r3, [sp, #24]
 8015ec2:	f004 fe45 	bl	801ab50 <__popcountsi2>
 8015ec6:	79e2      	ldrb	r2, [r4, #7]
 8015ec8:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8015ecc:	f3c5 4807 	ubfx	r8, r5, #16, #8
 8015ed0:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
 8015ed4:	0e2d      	lsrs	r5, r5, #24
 8015ed6:	b982      	cbnz	r2, 8015efa <DisplayUdf::ShowIpAddress()+0x5a>
 8015ed8:	7962      	ldrb	r2, [r4, #5]
 8015eda:	2a00      	cmp	r2, #0
 8015edc:	bf14      	ite	ne
 8015ede:	2244      	movne	r2, #68	; 0x44
 8015ee0:	2253      	moveq	r2, #83	; 0x53
 8015ee2:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8015ee6:	e9cd 8501 	strd	r8, r5, [sp, #4]
 8015eea:	4a06      	ldr	r2, [pc, #24]	; (8015f04 <DisplayUdf::ShowIpAddress()+0x64>)
 8015eec:	9700      	str	r7, [sp, #0]
 8015eee:	4630      	mov	r0, r6
 8015ef0:	f7f3 fa06 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 8015ef4:	b008      	add	sp, #32
 8015ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015efa:	225a      	movs	r2, #90	; 0x5a
 8015efc:	e7f1      	b.n	8015ee2 <DisplayUdf::ShowIpAddress()+0x42>
 8015efe:	bf00      	nop
 8015f00:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 8015f04:	0801d688 	stmdaeq	r1, {r3, r7, r9, sl, ip, lr, pc}

08015f08 <DisplayUdf::ShowNetmask()>:
 8015f08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015f0a:	4b0c      	ldr	r3, [pc, #48]	; (8015f3c <DisplayUdf::ShowNetmask()+0x34>)
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	69db      	ldr	r3, [r3, #28]
 8015f10:	0e1a      	lsrs	r2, r3, #24
 8015f12:	9202      	str	r2, [sp, #8]
 8015f14:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015f18:	9201      	str	r2, [sp, #4]
 8015f1a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015f1e:	9200      	str	r2, [sp, #0]
 8015f20:	f890 1054 	ldrb.w	r1, [r0, #84]	; 0x54
 8015f24:	4a06      	ldr	r2, [pc, #24]	; (8015f40 <DisplayUdf::ShowNetmask()+0x38>)
 8015f26:	b2db      	uxtb	r3, r3
 8015f28:	4604      	mov	r4, r0
 8015f2a:	f7f3 f9e9 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 8015f2e:	4620      	mov	r0, r4
 8015f30:	b004      	add	sp, #16
 8015f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f36:	f7ff bfb3 	b.w	8015ea0 <DisplayUdf::ShowIpAddress()>
 8015f3a:	bf00      	nop
 8015f3c:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 8015f40:	0801d69a 	stmdaeq	r1, {r1, r3, r4, r7, r9, sl, ip, lr, pc}

08015f44 <DisplayUdf::ShowGatewayIp()>:
 8015f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015f46:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
 8015f4a:	4604      	mov	r4, r0
 8015f4c:	f7f3 f9a0 	bl	8009290 <Display::ClearLine(unsigned int)>
 8015f50:	4b09      	ldr	r3, [pc, #36]	; (8015f78 <DisplayUdf::ShowGatewayIp()+0x34>)
 8015f52:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	699b      	ldr	r3, [r3, #24]
 8015f5a:	0e1a      	lsrs	r2, r3, #24
 8015f5c:	9202      	str	r2, [sp, #8]
 8015f5e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015f62:	9201      	str	r2, [sp, #4]
 8015f64:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015f68:	9200      	str	r2, [sp, #0]
 8015f6a:	b2db      	uxtb	r3, r3
 8015f6c:	4a03      	ldr	r2, [pc, #12]	; (8015f7c <DisplayUdf::ShowGatewayIp()+0x38>)
 8015f6e:	4620      	mov	r0, r4
 8015f70:	f7f3 f9c6 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 8015f74:	b004      	add	sp, #16
 8015f76:	bd10      	pop	{r4, pc}
 8015f78:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4
 8015f7c:	0801d6a9 	stmdaeq	r1, {r0, r3, r5, r7, r9, sl, ip, lr, pc}

08015f80 <DisplayUdf::ShowHostName()>:
 8015f80:	b510      	push	{r4, lr}
 8015f82:	f890 104f 	ldrb.w	r1, [r0, #79]	; 0x4f
 8015f86:	4604      	mov	r4, r0
 8015f88:	f7f3 f982 	bl	8009290 <Display::ClearLine(unsigned int)>
 8015f8c:	4b04      	ldr	r3, [pc, #16]	; (8015fa0 <DisplayUdf::ShowHostName()+0x20>)
 8015f8e:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 8015f92:	681a      	ldr	r2, [r3, #0]
 8015f94:	4620      	mov	r0, r4
 8015f96:	3220      	adds	r2, #32
 8015f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f9c:	f7ff bf1e 	b.w	8015ddc <Display::Write(unsigned int, char const*) [clone .isra.0]>
 8015fa0:	2000f9b4 			; <UNDEFINED> instruction: 0x2000f9b4

08015fa4 <DisplayUdf::Show()>:
 8015fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015fa6:	f100 0347 	add.w	r3, r0, #71	; 0x47
 8015faa:	4604      	mov	r4, r0
 8015fac:	f100 025b 	add.w	r2, r0, #91	; 0x5b
 8015fb0:	21ff      	movs	r1, #255	; 0xff
 8015fb2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8015fb6:	2806      	cmp	r0, #6
 8015fb8:	bf88      	it	hi
 8015fba:	7019      	strbhi	r1, [r3, #0]
 8015fbc:	4293      	cmp	r3, r2
 8015fbe:	d1f8      	bne.n	8015fb2 <DisplayUdf::Show()+0xe>
 8015fc0:	2501      	movs	r5, #1
 8015fc2:	4629      	mov	r1, r5
 8015fc4:	4620      	mov	r0, r4
 8015fc6:	3501      	adds	r5, #1
 8015fc8:	f7f3 f962 	bl	8009290 <Display::ClearLine(unsigned int)>
 8015fcc:	2d06      	cmp	r5, #6
 8015fce:	d1f8      	bne.n	8015fc2 <DisplayUdf::Show()+0x1e>
 8015fd0:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8015fd4:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8015fd8:	4620      	mov	r0, r4
 8015fda:	f7ff feff 	bl	8015ddc <Display::Write(unsigned int, char const*) [clone .isra.0]>
 8015fde:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
 8015fe2:	4a0e      	ldr	r2, [pc, #56]	; (801601c <DisplayUdf::Show()+0x78>)
 8015fe4:	4620      	mov	r0, r4
 8015fe6:	f7ff fef9 	bl	8015ddc <Display::Write(unsigned int, char const*) [clone .isra.0]>
 8015fea:	4b0d      	ldr	r3, [pc, #52]	; (8016020 <DisplayUdf::Show()+0x7c>)
 8015fec:	4a0d      	ldr	r2, [pc, #52]	; (8016024 <DisplayUdf::Show()+0x80>)
 8015fee:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 8015ff2:	9300      	str	r3, [sp, #0]
 8015ff4:	4620      	mov	r0, r4
 8015ff6:	2303      	movs	r3, #3
 8015ff8:	f7f3 f982 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 8015ffc:	4620      	mov	r0, r4
 8015ffe:	f7ff ff4f 	bl	8015ea0 <DisplayUdf::ShowIpAddress()>
 8016002:	4620      	mov	r0, r4
 8016004:	f7ff ff9e 	bl	8015f44 <DisplayUdf::ShowGatewayIp()>
 8016008:	4620      	mov	r0, r4
 801600a:	f7ff ff7d 	bl	8015f08 <DisplayUdf::ShowNetmask()>
 801600e:	4620      	mov	r0, r4
 8016010:	b003      	add	sp, #12
 8016012:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016016:	f7ff bfb3 	b.w	8015f80 <DisplayUdf::ShowHostName()>
 801601a:	bf00      	nop
 801601c:	0801b506 	stmdaeq	r1, {r1, r2, r8, sl, ip, sp, pc}
 8016020:	2001061c 	andcs	r0, r1, ip, lsl r6
 8016024:	0801d6b8 	stmdaeq	r1, {r3, r4, r5, r7, r9, sl, ip, lr, pc}

08016028 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8016028:	3901      	subs	r1, #1
 801602a:	b510      	push	{r4, lr}
 801602c:	4604      	mov	r4, r0
 801602e:	2903      	cmp	r1, #3
 8016030:	d813      	bhi.n	801605a <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x32>
 8016032:	e8df f001 	tbb	[pc, r1]
 8016036:	261a1302 	ldrcs	r1, [sl], -r2, lsl #6
 801603a:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 801603e:	4812      	ldr	r0, [pc, #72]	; (8016088 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x60>)
 8016040:	f7f4 fa2a 	bl	800a498 <printf>
 8016044:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
 8016048:	4620      	mov	r0, r4
 801604a:	f7f3 f921 	bl	8009290 <Display::ClearLine(unsigned int)>
 801604e:	4a0f      	ldr	r2, [pc, #60]	; (801608c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8016050:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
 8016054:	4620      	mov	r0, r4
 8016056:	f7f3 f953 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 801605a:	bd10      	pop	{r4, pc}
 801605c:	f248 0180 	movw	r1, #32896	; 0x8080
 8016060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016064:	4808      	ldr	r0, [pc, #32]	; (8016088 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x60>)
 8016066:	f7f4 ba17 	b.w	800a498 <printf>
 801606a:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 801606e:	4806      	ldr	r0, [pc, #24]	; (8016088 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x60>)
 8016070:	f7f4 fa12 	bl	800a498 <printf>
 8016074:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
 8016078:	4620      	mov	r0, r4
 801607a:	f7f3 f909 	bl	8009290 <Display::ClearLine(unsigned int)>
 801607e:	4a04      	ldr	r2, [pc, #16]	; (8016090 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 8016080:	e7e6      	b.n	8016050 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x28>
 8016082:	f645 3179 	movw	r1, #23417	; 0x5b79
 8016086:	e7eb      	b.n	8016060 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x38>
 8016088:	0801ab99 	stmdaeq	r1, {r0, r3, r4, r7, r8, r9, fp, sp, pc}
 801608c:	0801d6c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r9, sl, ip, lr, pc}
 8016090:	0801d6d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, sl, ip, lr, pc}

08016094 <DisplayUdf::ShowShutdown()>:
 8016094:	b538      	push	{r3, r4, r5, lr}
 8016096:	7d42      	ldrb	r2, [r0, #21]
 8016098:	3a01      	subs	r2, #1
 801609a:	b2d2      	uxtb	r2, r2
 801609c:	2100      	movs	r1, #0
 801609e:	4604      	mov	r4, r0
 80160a0:	f001 fc92 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 80160a4:	2500      	movs	r5, #0
 80160a6:	7d23      	ldrb	r3, [r4, #20]
 80160a8:	3b01      	subs	r3, #1
 80160aa:	429d      	cmp	r5, r3
 80160ac:	d312      	bcc.n	80160d4 <DisplayUdf::ShowShutdown()+0x40>
 80160ae:	7d62      	ldrb	r2, [r4, #21]
 80160b0:	3a01      	subs	r2, #1
 80160b2:	4620      	mov	r0, r4
 80160b4:	b2d2      	uxtb	r2, r2
 80160b6:	2100      	movs	r1, #0
 80160b8:	f001 fc86 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 80160bc:	7d61      	ldrb	r1, [r4, #21]
 80160be:	4a08      	ldr	r2, [pc, #32]	; (80160e0 <DisplayUdf::ShowShutdown()+0x4c>)
 80160c0:	4620      	mov	r0, r4
 80160c2:	f7ff fe8b 	bl	8015ddc <Display::Write(unsigned int, char const*) [clone .isra.0]>
 80160c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80160ca:	4806      	ldr	r0, [pc, #24]	; (80160e4 <DisplayUdf::ShowShutdown()+0x50>)
 80160cc:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 80160d0:	f7f4 b9e2 	b.w	800a498 <printf>
 80160d4:	2120      	movs	r1, #32
 80160d6:	4620      	mov	r0, r4
 80160d8:	f001 fc84 	bl	80179e4 <Display::PutChar(int)>
 80160dc:	3501      	adds	r5, #1
 80160de:	e7e2      	b.n	80160a6 <DisplayUdf::ShowShutdown()+0x12>
 80160e0:	0801d6e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r9, sl, ip, lr, pc}
 80160e4:	0801ab99 	stmdaeq	r1, {r0, r3, r4, r7, r8, r9, fp, sp, pc}

080160e8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 80160e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80160ea:	88c6      	ldrh	r6, [r0, #6]
 80160ec:	8885      	ldrh	r5, [r0, #4]
 80160ee:	42ae      	cmp	r6, r5
 80160f0:	d216      	bcs.n	8016120 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 80160f2:	4604      	mov	r4, r0
 80160f4:	6800      	ldr	r0, [r0, #0]
 80160f6:	1bad      	subs	r5, r5, r6
 80160f8:	4430      	add	r0, r6
 80160fa:	7a26      	ldrb	r6, [r4, #8]
 80160fc:	b923      	cbnz	r3, 8016108 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 80160fe:	b926      	cbnz	r6, 801610a <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8016100:	9200      	str	r2, [sp, #0]
 8016102:	460b      	mov	r3, r1
 8016104:	4a09      	ldr	r2, [pc, #36]	; (801612c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 8016106:	e003      	b.n	8016110 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8016108:	b166      	cbz	r6, 8016124 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 801610a:	9200      	str	r2, [sp, #0]
 801610c:	4a08      	ldr	r2, [pc, #32]	; (8016130 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 801610e:	460b      	mov	r3, r1
 8016110:	4629      	mov	r1, r5
 8016112:	f7f4 f9e9 	bl	800a4e8 <snprintf>
 8016116:	4285      	cmp	r5, r0
 8016118:	bfa2      	ittt	ge
 801611a:	88e3      	ldrhge	r3, [r4, #6]
 801611c:	181b      	addge	r3, r3, r0
 801611e:	80e3      	strhge	r3, [r4, #6]
 8016120:	b002      	add	sp, #8
 8016122:	bd70      	pop	{r4, r5, r6, pc}
 8016124:	9200      	str	r2, [sp, #0]
 8016126:	460b      	mov	r3, r1
 8016128:	4a02      	ldr	r2, [pc, #8]	; (8016134 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 801612a:	e7f1      	b.n	8016110 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 801612c:	0801b161 	stmdaeq	r1, {r0, r5, r6, r8, ip, sp, pc}
 8016130:	0801b158 	stmdaeq	r1, {r3, r4, r6, r8, ip, sp, pc}
 8016134:	0801b162 	stmdaeq	r1, {r1, r5, r6, r8, ip, sp, pc}

08016138 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8016138:	b510      	push	{r4, lr}
 801613a:	2220      	movs	r2, #32
 801613c:	4604      	mov	r4, r0
 801613e:	f840 1b04 	str.w	r1, [r0], #4
 8016142:	2100      	movs	r1, #0
 8016144:	f002 f952 	bl	80183ec <memset>
 8016148:	f647 7305 	movw	r3, #32517	; 0x7f05
 801614c:	84a3      	strh	r3, [r4, #36]	; 0x24
 801614e:	4620      	mov	r0, r4
 8016150:	bd10      	pop	{r4, pc}

08016152 <DisplayUdfParams::Load()>:
 8016152:	b508      	push	{r3, lr}
 8016154:	2300      	movs	r3, #0
 8016156:	4601      	mov	r1, r0
 8016158:	6043      	str	r3, [r0, #4]
 801615a:	6800      	ldr	r0, [r0, #0]
 801615c:	b120      	cbz	r0, 8016168 <DisplayUdfParams::Load()+0x16>
 801615e:	6803      	ldr	r3, [r0, #0]
 8016160:	3104      	adds	r1, #4
 8016162:	68db      	ldr	r3, [r3, #12]
 8016164:	4798      	blx	r3
 8016166:	2001      	movs	r0, #1
 8016168:	bd08      	pop	{r3, pc}
	...

0801616c <DisplayUdfParams::Load(char const*, unsigned int)>:
 801616c:	6803      	ldr	r3, [r0, #0]
 801616e:	b1d3      	cbz	r3, 80161a6 <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 8016170:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016172:	2300      	movs	r3, #0
 8016174:	6043      	str	r3, [r0, #4]
 8016176:	4604      	mov	r4, r0
 8016178:	460d      	mov	r5, r1
 801617a:	4616      	mov	r6, r2
 801617c:	490a      	ldr	r1, [pc, #40]	; (80161a8 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 801617e:	4602      	mov	r2, r0
 8016180:	4668      	mov	r0, sp
 8016182:	f001 fa39 	bl	80175f8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8016186:	4632      	mov	r2, r6
 8016188:	4629      	mov	r1, r5
 801618a:	4668      	mov	r0, sp
 801618c:	f001 fa38 	bl	8017600 <ReadConfigFile::Read(char const*, unsigned int)>
 8016190:	4621      	mov	r1, r4
 8016192:	f851 0b04 	ldr.w	r0, [r1], #4
 8016196:	6803      	ldr	r3, [r0, #0]
 8016198:	689b      	ldr	r3, [r3, #8]
 801619a:	4798      	blx	r3
 801619c:	4668      	mov	r0, sp
 801619e:	f001 fa2e 	bl	80175fe <ReadConfigFile::~ReadConfigFile()>
 80161a2:	b002      	add	sp, #8
 80161a4:	bd70      	pop	{r4, r5, r6, pc}
 80161a6:	4770      	bx	lr
 80161a8:	08016275 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9, sp, lr}

080161ac <DisplayUdfParams::callbackFunction(char const*)>:
 80161ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161ae:	460e      	mov	r6, r1
 80161b0:	4604      	mov	r4, r0
 80161b2:	492c      	ldr	r1, [pc, #176]	; (8016264 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 80161b4:	f10d 0207 	add.w	r2, sp, #7
 80161b8:	4630      	mov	r0, r6
 80161ba:	f001 fb52 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80161be:	b968      	cbnz	r0, 80161dc <DisplayUdfParams::callbackFunction(char const*)+0x30>
 80161c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80161c4:	6863      	ldr	r3, [r4, #4]
 80161c6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80161ca:	2a7f      	cmp	r2, #127	; 0x7f
 80161cc:	bf14      	ite	ne
 80161ce:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 80161d2:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 80161d6:	6063      	str	r3, [r4, #4]
 80161d8:	b003      	add	sp, #12
 80161da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161dc:	4922      	ldr	r1, [pc, #136]	; (8016268 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 80161de:	f10d 0207 	add.w	r2, sp, #7
 80161e2:	4630      	mov	r0, r6
 80161e4:	f001 fb3d 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80161e8:	b958      	cbnz	r0, 8016202 <DisplayUdfParams::callbackFunction(char const*)+0x56>
 80161ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80161ee:	6863      	ldr	r3, [r4, #4]
 80161f0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80161f4:	2a05      	cmp	r2, #5
 80161f6:	bf14      	ite	ne
 80161f8:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80161fc:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 8016200:	e7e9      	b.n	80161d6 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8016202:	491a      	ldr	r1, [pc, #104]	; (801626c <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 8016204:	f10d 0207 	add.w	r2, sp, #7
 8016208:	4630      	mov	r0, r6
 801620a:	f001 fb2a 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801620e:	b948      	cbnz	r0, 8016224 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8016210:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016214:	6863      	ldr	r3, [r4, #4]
 8016216:	b112      	cbz	r2, 801621e <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8016218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801621c:	e7db      	b.n	80161d6 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801621e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8016222:	e7d8      	b.n	80161d6 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8016224:	4f12      	ldr	r7, [pc, #72]	; (8016270 <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 8016226:	2500      	movs	r5, #0
 8016228:	f857 1b04 	ldr.w	r1, [r7], #4
 801622c:	f10d 0207 	add.w	r2, sp, #7
 8016230:	4630      	mov	r0, r6
 8016232:	f001 fb16 	bl	8017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8016236:	b988      	cbnz	r0, 801625c <DisplayUdfParams::callbackFunction(char const*)+0xb0>
 8016238:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801623c:	6862      	ldr	r2, [r4, #4]
 801623e:	1e4e      	subs	r6, r1, #1
 8016240:	2301      	movs	r3, #1
 8016242:	2e05      	cmp	r6, #5
 8016244:	fa03 f305 	lsl.w	r3, r3, r5
 8016248:	4425      	add	r5, r4
 801624a:	d802      	bhi.n	8016252 <DisplayUdfParams::callbackFunction(char const*)+0xa6>
 801624c:	7229      	strb	r1, [r5, #8]
 801624e:	4313      	orrs	r3, r2
 8016250:	e7c1      	b.n	80161d6 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8016252:	ea22 0203 	bic.w	r2, r2, r3
 8016256:	7228      	strb	r0, [r5, #8]
 8016258:	6062      	str	r2, [r4, #4]
 801625a:	e7bd      	b.n	80161d8 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 801625c:	3501      	adds	r5, #1
 801625e:	2d14      	cmp	r5, #20
 8016260:	d1e2      	bne.n	8016228 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 8016262:	e7b9      	b.n	80161d8 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8016264:	0801d7a2 	stmdaeq	r1, {r1, r5, r7, r8, r9, sl, ip, lr, pc}
 8016268:	0801d76a 	stmdaeq	r1, {r1, r3, r5, r6, r8, r9, sl, ip, lr, pc}
 801626c:	0801d778 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, sl, ip, lr, pc}
 8016270:	0801d6f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, sl, ip, lr, pc}

08016274 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 8016274:	f7ff bf9a 	b.w	80161ac <DisplayUdfParams::callbackFunction(char const*)>

08016278 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 8016278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801627c:	4604      	mov	r4, r0
 801627e:	b086      	sub	sp, #24
 8016280:	4615      	mov	r5, r2
 8016282:	461e      	mov	r6, r3
 8016284:	3004      	adds	r0, #4
 8016286:	b379      	cbz	r1, 80162e8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 8016288:	2222      	movs	r2, #34	; 0x22
 801628a:	f002 f898 	bl	80183be <memmove>
 801628e:	462a      	mov	r2, r5
 8016290:	493e      	ldr	r1, [pc, #248]	; (801638c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 8016292:	4633      	mov	r3, r6
 8016294:	a803      	add	r0, sp, #12
 8016296:	f001 f90f 	bl	80174b8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 801629a:	6863      	ldr	r3, [r4, #4]
 801629c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80162a0:	493b      	ldr	r1, [pc, #236]	; (8016390 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 80162a2:	f3c3 7340 	ubfx	r3, r3, #29, #1
 80162a6:	a803      	add	r0, sp, #12
 80162a8:	f7ff ff1e 	bl	80160e8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80162ac:	6863      	ldr	r3, [r4, #4]
 80162ae:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80162b2:	4938      	ldr	r1, [pc, #224]	; (8016394 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 80162b4:	f3c3 7300 	ubfx	r3, r3, #28, #1
 80162b8:	a803      	add	r0, sp, #12
 80162ba:	f7ff ff15 	bl	80160e8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80162be:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80162c2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80162c6:	6863      	ldr	r3, [r4, #4]
 80162c8:	42aa      	cmp	r2, r5
 80162ca:	d226      	bcs.n	801631a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 80162cc:	9803      	ldr	r0, [sp, #12]
 80162ce:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 80162d2:	4410      	add	r0, r2
 80162d4:	eba5 0502 	sub.w	r5, r5, r2
 80162d8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80162dc:	d10b      	bne.n	80162f6 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 80162de:	b962      	cbnz	r2, 80162fa <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 80162e0:	9200      	str	r2, [sp, #0]
 80162e2:	4b2d      	ldr	r3, [pc, #180]	; (8016398 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 80162e4:	4a2d      	ldr	r2, [pc, #180]	; (801639c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 80162e6:	e00e      	b.n	8016306 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 80162e8:	6823      	ldr	r3, [r4, #0]
 80162ea:	681a      	ldr	r2, [r3, #0]
 80162ec:	4601      	mov	r1, r0
 80162ee:	68d2      	ldr	r2, [r2, #12]
 80162f0:	4618      	mov	r0, r3
 80162f2:	4790      	blx	r2
 80162f4:	e7cb      	b.n	801628e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 80162f6:	2a00      	cmp	r2, #0
 80162f8:	d042      	beq.n	8016380 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 80162fa:	3b00      	subs	r3, #0
 80162fc:	bf18      	it	ne
 80162fe:	2301      	movne	r3, #1
 8016300:	9300      	str	r3, [sp, #0]
 8016302:	4a27      	ldr	r2, [pc, #156]	; (80163a0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 8016304:	4b24      	ldr	r3, [pc, #144]	; (8016398 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 8016306:	4629      	mov	r1, r5
 8016308:	f7f4 f8ee 	bl	800a4e8 <snprintf>
 801630c:	4285      	cmp	r5, r0
 801630e:	bfa2      	ittt	ge
 8016310:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8016314:	181b      	addge	r3, r3, r0
 8016316:	f8ad 3012 	strhge.w	r3, [sp, #18]
 801631a:	4e22      	ldr	r6, [pc, #136]	; (80163a4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 801631c:	2500      	movs	r5, #0
 801631e:	2701      	movs	r7, #1
 8016320:	f104 0808 	add.w	r8, r4, #8
 8016324:	f856 1b04 	ldr.w	r1, [r6], #4
 8016328:	780b      	ldrb	r3, [r1, #0]
 801632a:	b163      	cbz	r3, 8016346 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xce>
 801632c:	6862      	ldr	r2, [r4, #4]
 801632e:	fa07 f305 	lsl.w	r3, r7, r5
 8016332:	4393      	bics	r3, r2
 8016334:	bf08      	it	eq
 8016336:	2301      	moveq	r3, #1
 8016338:	f818 2005 	ldrb.w	r2, [r8, r5]
 801633c:	bf18      	it	ne
 801633e:	2300      	movne	r3, #0
 8016340:	a803      	add	r0, sp, #12
 8016342:	f7ff fed1 	bl	80160e8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8016346:	3501      	adds	r5, #1
 8016348:	2d14      	cmp	r5, #20
 801634a:	d1eb      	bne.n	8016324 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 801634c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016350:	b17b      	cbz	r3, 8016372 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xfa>
 8016352:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8016356:	9b03      	ldr	r3, [sp, #12]
 8016358:	4413      	add	r3, r2
 801635a:	227d      	movs	r2, #125	; 0x7d
 801635c:	f803 2c01 	strb.w	r2, [r3, #-1]
 8016360:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016364:	9903      	ldr	r1, [sp, #12]
 8016366:	54ca      	strb	r2, [r1, r3]
 8016368:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801636c:	3301      	adds	r3, #1
 801636e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016372:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8016376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016378:	601a      	str	r2, [r3, #0]
 801637a:	b006      	add	sp, #24
 801637c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016380:	2301      	movs	r3, #1
 8016382:	9300      	str	r3, [sp, #0]
 8016384:	4a08      	ldr	r2, [pc, #32]	; (80163a8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x130>)
 8016386:	4b04      	ldr	r3, [pc, #16]	; (8016398 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 8016388:	e7bd      	b.n	8016306 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 801638a:	bf00      	nop
 801638c:	0801d796 	stmdaeq	r1, {r1, r2, r4, r7, r8, r9, sl, ip, lr, pc}
 8016390:	0801d7a2 	stmdaeq	r1, {r1, r5, r7, r8, r9, sl, ip, lr, pc}
 8016394:	0801d76a 	stmdaeq	r1, {r1, r3, r5, r6, r8, r9, sl, ip, lr, pc}
 8016398:	0801d778 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, sl, ip, lr, pc}
 801639c:	0801b161 	stmdaeq	r1, {r0, r5, r6, r8, ip, sp, pc}
 80163a0:	0801b158 	stmdaeq	r1, {r3, r4, r6, r8, ip, sp, pc}
 80163a4:	0801d6f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, sl, ip, lr, pc}
 80163a8:	0801b162 	stmdaeq	r1, {r1, r5, r6, r8, ip, sp, pc}

080163ac <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 80163ac:	b513      	push	{r0, r1, r4, lr}
 80163ae:	6804      	ldr	r4, [r0, #0]
 80163b0:	b914      	cbnz	r4, 80163b8 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80163b2:	601c      	str	r4, [r3, #0]
 80163b4:	b002      	add	sp, #8
 80163b6:	bd10      	pop	{r4, pc}
 80163b8:	9300      	str	r3, [sp, #0]
 80163ba:	4613      	mov	r3, r2
 80163bc:	460a      	mov	r2, r1
 80163be:	2100      	movs	r1, #0
 80163c0:	f7ff ff5a 	bl	8016278 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 80163c4:	e7f6      	b.n	80163b4 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

080163c6 <DisplayUdfParams::Set(DisplayUdf*)>:
 80163c6:	6843      	ldr	r3, [r0, #4]
 80163c8:	009a      	lsls	r2, r3, #2
 80163ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163ce:	4604      	mov	r4, r0
 80163d0:	460e      	mov	r6, r1
 80163d2:	d504      	bpl.n	80163de <DisplayUdfParams::Set(DisplayUdf*)+0x18>
 80163d4:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
 80163d8:	4630      	mov	r0, r6
 80163da:	f001 fc93 	bl	8017d04 <ILI9341::SetBackLight(unsigned int)>
 80163de:	6863      	ldr	r3, [r4, #4]
 80163e0:	00db      	lsls	r3, r3, #3
 80163e2:	bf41      	itttt	mi
 80163e4:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 80163e8:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 80163ec:	4353      	mulmi	r3, r2
 80163ee:	61f3      	strmi	r3, [r6, #28]
 80163f0:	6863      	ldr	r3, [r4, #4]
 80163f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80163f6:	bf14      	ite	ne
 80163f8:	2103      	movne	r1, #3
 80163fa:	2101      	moveq	r1, #1
 80163fc:	4630      	mov	r0, r6
 80163fe:	f001 fb99 	bl	8017b34 <ILI9341::SetRotation(unsigned int)>
 8016402:	2500      	movs	r5, #0
 8016404:	2701      	movs	r7, #1
 8016406:	f104 0808 	add.w	r8, r4, #8
 801640a:	6862      	ldr	r2, [r4, #4]
 801640c:	fa07 f305 	lsl.w	r3, r7, r5
 8016410:	4393      	bics	r3, r2
 8016412:	d105      	bne.n	8016420 <DisplayUdfParams::Set(DisplayUdf*)+0x5a>
 8016414:	f818 1005 	ldrb.w	r1, [r8, r5]
 8016418:	462a      	mov	r2, r5
 801641a:	4630      	mov	r0, r6
 801641c:	f7ff fd16 	bl	8015e4c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8016420:	3501      	adds	r5, #1
 8016422:	2d14      	cmp	r5, #20
 8016424:	d1f1      	bne.n	801640a <DisplayUdfParams::Set(DisplayUdf*)+0x44>
 8016426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801642a <DisplayUdfParams::Dump()>:
 801642a:	4770      	bx	lr

0801642c <artnet::display_shortname(char const*)>:
 801642c:	4b02      	ldr	r3, [pc, #8]	; (8016438 <artnet::display_shortname(char const*)+0xc>)
 801642e:	6819      	ldr	r1, [r3, #0]
 8016430:	4b02      	ldr	r3, [pc, #8]	; (801643c <artnet::display_shortname(char const*)+0x10>)
 8016432:	6818      	ldr	r0, [r3, #0]
 8016434:	f000 b81e 	b.w	8016474 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8016438:	200006d4 	ldrdcs	r0, [r0], -r4
 801643c:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>

08016440 <artnet::display_longname(char const*)>:
 8016440:	4770      	bx	lr
	...

08016444 <artnet::display_universe_switch(unsigned int, unsigned char)>:
 8016444:	4b02      	ldr	r3, [pc, #8]	; (8016450 <artnet::display_universe_switch(unsigned int, unsigned char)+0xc>)
 8016446:	6819      	ldr	r1, [r3, #0]
 8016448:	4b02      	ldr	r3, [pc, #8]	; (8016454 <artnet::display_universe_switch(unsigned int, unsigned char)+0x10>)
 801644a:	6818      	ldr	r0, [r3, #0]
 801644c:	f000 b844 	b.w	80164d8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8016450:	200006d4 	ldrdcs	r0, [r0], -r4
 8016454:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>

08016458 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>:
 8016458:	4b02      	ldr	r3, [pc, #8]	; (8016464 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0xc>)
 801645a:	6819      	ldr	r1, [r3, #0]
 801645c:	4b02      	ldr	r3, [pc, #8]	; (8016468 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0x10>)
 801645e:	6818      	ldr	r0, [r3, #0]
 8016460:	f000 b83a 	b.w	80164d8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8016464:	200006d4 	ldrdcs	r0, [r0], -r4
 8016468:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>

0801646c <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)>:
 801646c:	f7ff bff4 	b.w	8016458 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>

08016470 <artnet::display_rdm_enabled(unsigned int, bool)>:
 8016470:	4770      	bx	lr

08016472 <artnet::display_failsafe(unsigned char)>:
 8016472:	4770      	bx	lr

08016474 <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 8016474:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016476:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
 801647a:	7d43      	ldrb	r3, [r0, #21]
 801647c:	429a      	cmp	r2, r3
 801647e:	4604      	mov	r4, r0
 8016480:	460d      	mov	r5, r1
 8016482:	d80d      	bhi.n	80164a0 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x2c>
 8016484:	3a01      	subs	r2, #1
 8016486:	2100      	movs	r1, #0
 8016488:	9201      	str	r2, [sp, #4]
 801648a:	f001 fa9d 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 801648e:	2600      	movs	r6, #0
 8016490:	7d23      	ldrb	r3, [r4, #20]
 8016492:	9a01      	ldr	r2, [sp, #4]
 8016494:	429e      	cmp	r6, r3
 8016496:	d317      	bcc.n	80164c8 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x54>
 8016498:	2100      	movs	r1, #0
 801649a:	4620      	mov	r0, r4
 801649c:	f001 fa94 	bl	80179c8 <Display::SetCursorPos(unsigned int, unsigned int)>
 80164a0:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 80164a4:	7d26      	ldrb	r6, [r4, #20]
 80164a6:	f105 0258 	add.w	r2, r5, #88	; 0x58
 80164aa:	2300      	movs	r3, #0
 80164ac:	3557      	adds	r5, #87	; 0x57
 80164ae:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80164b2:	b118      	cbz	r0, 80164bc <DisplayUdf::ShowNodeName(ArtNetNode*)+0x48>
 80164b4:	1c58      	adds	r0, r3, #1
 80164b6:	429e      	cmp	r6, r3
 80164b8:	4603      	mov	r3, r0
 80164ba:	dcf8      	bgt.n	80164ae <DisplayUdf::ShowNodeName(ArtNetNode*)+0x3a>
 80164bc:	b2db      	uxtb	r3, r3
 80164be:	4620      	mov	r0, r4
 80164c0:	f7f2 ff05 	bl	80092ce <Display::TextLine(unsigned int, char const*, unsigned int)>
 80164c4:	b002      	add	sp, #8
 80164c6:	bd70      	pop	{r4, r5, r6, pc}
 80164c8:	2120      	movs	r1, #32
 80164ca:	4620      	mov	r0, r4
 80164cc:	9201      	str	r2, [sp, #4]
 80164ce:	3601      	adds	r6, #1
 80164d0:	f001 fa88 	bl	80179e4 <Display::PutChar(int)>
 80164d4:	e7dc      	b.n	8016490 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x1c>
	...

080164d8 <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 80164d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164dc:	460c      	mov	r4, r1
 80164de:	b089      	sub	sp, #36	; 0x24
 80164e0:	4606      	mov	r6, r0
 80164e2:	2301      	movs	r3, #1
 80164e4:	f10d 021f 	add.w	r2, sp, #31
 80164e8:	2100      	movs	r1, #0
 80164ea:	4620      	mov	r0, r4
 80164ec:	f7f6 f9cb 	bl	800c886 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 80164f0:	b1e8      	cbz	r0, 801652e <DisplayUdf::ShowUniverse(ArtNetNode*)+0x56>
 80164f2:	f8d4 5a38 	ldr.w	r5, [r4, #2616]	; 0xa38
 80164f6:	4a2a      	ldr	r2, [pc, #168]	; (80165a0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xc8>)
 80164f8:	4b2a      	ldr	r3, [pc, #168]	; (80165a4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>)
 80164fa:	4f2b      	ldr	r7, [pc, #172]	; (80165a8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>)
 80164fc:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 8016500:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8016504:	2d00      	cmp	r5, #0
 8016506:	bf18      	it	ne
 8016508:	4613      	movne	r3, r2
 801650a:	f8d4 5a40 	ldr.w	r5, [r4, #2624]	; 0xa40
 801650e:	4a27      	ldr	r2, [pc, #156]	; (80165ac <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>)
 8016510:	2d00      	cmp	r5, #0
 8016512:	bf18      	it	ne
 8016514:	463a      	movne	r2, r7
 8016516:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801651a:	e9cd 1000 	strd	r1, r0, [sp]
 801651e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8016522:	4a23      	ldr	r2, [pc, #140]	; (80165b0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>)
 8016524:	f896 104c 	ldrb.w	r1, [r6, #76]	; 0x4c
 8016528:	4630      	mov	r0, r6
 801652a:	f7f2 fee9 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 801652e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80165a4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>
 8016532:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80165a0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xc8>
 8016536:	f8df a074 	ldr.w	sl, [pc, #116]	; 80165ac <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>
 801653a:	4627      	mov	r7, r4
 801653c:	2500      	movs	r5, #0
 801653e:	4629      	mov	r1, r5
 8016540:	2301      	movs	r3, #1
 8016542:	f10d 021f 	add.w	r2, sp, #31
 8016546:	4620      	mov	r0, r4
 8016548:	f7f6 f99d 	bl	800c886 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 801654c:	3501      	adds	r5, #1
 801654e:	b300      	cbz	r0, 8016592 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xba>
 8016550:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 8016554:	f8df b050 	ldr.w	fp, [pc, #80]	; 80165a8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>
 8016558:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 801655c:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8016560:	f894 c036 	ldrb.w	ip, [r4, #54]	; 0x36
 8016564:	2b00      	cmp	r3, #0
 8016566:	bf0c      	ite	eq
 8016568:	46c6      	moveq	lr, r8
 801656a:	46ce      	movne	lr, r9
 801656c:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	; 0xa40
 8016570:	f8cd c000 	str.w	ip, [sp]
 8016574:	2b00      	cmp	r3, #0
 8016576:	bf08      	it	eq
 8016578:	46d3      	moveq	fp, sl
 801657a:	e9cd 2001 	strd	r2, r0, [sp, #4]
 801657e:	e9cd eb03 	strd	lr, fp, [sp, #12]
 8016582:	f106 014f 	add.w	r1, r6, #79	; 0x4f
 8016586:	4a0b      	ldr	r2, [pc, #44]	; (80165b4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xdc>)
 8016588:	5d49      	ldrb	r1, [r1, r5]
 801658a:	462b      	mov	r3, r5
 801658c:	4630      	mov	r0, r6
 801658e:	f7f2 feb7 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 8016592:	2d04      	cmp	r5, #4
 8016594:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8016598:	d1d1      	bne.n	801653e <DisplayUdf::ShowUniverse(ArtNetNode*)+0x66>
 801659a:	b009      	add	sp, #36	; 0x24
 801659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165a0:	0801c037 	stmdaeq	r1, {r0, r1, r2, r4, r5, lr, pc}
 80165a4:	0801c033 	stmdaeq	r1, {r0, r1, r4, r5, lr, pc}
 80165a8:	0801c043 	stmdaeq	r1, {r0, r1, r6, lr, pc}
 80165ac:	0801d7ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, r9, sl, ip, lr, pc}
 80165b0:	0801d7b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, r9, sl, ip, lr, pc}
 80165b4:	0801d7c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, sl, ip, lr, pc}

080165b8 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 80165b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165bc:	f501 5683 	add.w	r6, r1, #4192	; 0x1060
 80165c0:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8016604 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x4c>
 80165c4:	b085      	sub	sp, #20
 80165c6:	4607      	mov	r7, r0
 80165c8:	f100 0855 	add.w	r8, r0, #85	; 0x55
 80165cc:	2541      	movs	r5, #65	; 0x41
 80165ce:	3608      	adds	r6, #8
 80165d0:	012b      	lsls	r3, r5, #4
 80165d2:	464a      	mov	r2, r9
 80165d4:	58f4      	ldr	r4, [r6, r3]
 80165d6:	0e23      	lsrs	r3, r4, #24
 80165d8:	9303      	str	r3, [sp, #12]
 80165da:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80165de:	9302      	str	r3, [sp, #8]
 80165e0:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80165e4:	b2e4      	uxtb	r4, r4
 80165e6:	9301      	str	r3, [sp, #4]
 80165e8:	9400      	str	r4, [sp, #0]
 80165ea:	462b      	mov	r3, r5
 80165ec:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80165f0:	4638      	mov	r0, r7
 80165f2:	3501      	adds	r5, #1
 80165f4:	f7f2 fe84 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 80165f8:	2d45      	cmp	r5, #69	; 0x45
 80165fa:	d1e9      	bne.n	80165d0 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x18>
 80165fc:	b005      	add	sp, #20
 80165fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016602:	bf00      	nop
 8016604:	0801d7db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r8, r9, sl, ip, lr, pc}

08016608 <DisplayUdf::Show(ArtNetNode*)>:
 8016608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801660a:	4604      	mov	r4, r0
 801660c:	460d      	mov	r5, r1
 801660e:	f7ff fcc9 	bl	8015fa4 <DisplayUdf::Show()>
 8016612:	4629      	mov	r1, r5
 8016614:	4620      	mov	r0, r4
 8016616:	f7ff ff2d 	bl	8016474 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 801661a:	4629      	mov	r1, r5
 801661c:	4620      	mov	r0, r4
 801661e:	f7ff ff5b 	bl	80164d8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8016622:	4629      	mov	r1, r5
 8016624:	4620      	mov	r0, r4
 8016626:	f7ff ffc7 	bl	80165b8 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 801662a:	f895 2a1b 	ldrb.w	r2, [r5, #2587]	; 0xa1b
 801662e:	f895 3a1a 	ldrb.w	r3, [r5, #2586]	; 0xa1a
 8016632:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8016636:	4413      	add	r3, r2
 8016638:	4620      	mov	r0, r4
 801663a:	4a0d      	ldr	r2, [pc, #52]	; (8016670 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 801663c:	f7f2 fe60 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 8016640:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8016642:	f894 105b 	ldrb.w	r1, [r4, #91]	; 0x5b
 8016646:	2a02      	cmp	r2, #2
 8016648:	d001      	beq.n	801664e <DisplayUdf::Show(ArtNetNode*)+0x46>
 801664a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801664c:	b92b      	cbnz	r3, 801665a <DisplayUdf::Show(ArtNetNode*)+0x52>
 801664e:	4a09      	ldr	r2, [pc, #36]	; (8016674 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 8016650:	4620      	mov	r0, r4
 8016652:	f7f2 fe55 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 8016656:	b003      	add	sp, #12
 8016658:	bd30      	pop	{r4, r5, pc}
 801665a:	4807      	ldr	r0, [pc, #28]	; (8016678 <DisplayUdf::Show(ArtNetNode*)+0x70>)
 801665c:	9300      	str	r3, [sp, #0]
 801665e:	4b07      	ldr	r3, [pc, #28]	; (801667c <DisplayUdf::Show(ArtNetNode*)+0x74>)
 8016660:	2a00      	cmp	r2, #0
 8016662:	bf08      	it	eq
 8016664:	4603      	moveq	r3, r0
 8016666:	4a06      	ldr	r2, [pc, #24]	; (8016680 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 8016668:	4620      	mov	r0, r4
 801666a:	f7f2 fe49 	bl	8009300 <Display::Printf(unsigned char, char const*, ...)>
 801666e:	e7f2      	b.n	8016656 <DisplayUdf::Show(ArtNetNode*)+0x4e>
 8016670:	0801d7eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, sl, ip, lr, pc}
 8016674:	0801d7f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r8, r9, sl, ip, lr, pc}
 8016678:	0801c336 	stmdaeq	r1, {r1, r2, r4, r5, r8, r9, lr, pc}
 801667c:	0801c32b 	stmdaeq	r1, {r0, r1, r3, r5, r8, r9, lr, pc}
 8016680:	0801d7f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, sl, ip, lr, pc}

08016684 <network::display_emac_start()>:
 8016684:	4b01      	ldr	r3, [pc, #4]	; (801668c <network::display_emac_start()+0x8>)
 8016686:	6818      	ldr	r0, [r3, #0]
 8016688:	f7ff bbfa 	b.w	8015e80 <DisplayUdf::ShowEmacStart()>
 801668c:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>

08016690 <network::display_ip()>:
 8016690:	4b01      	ldr	r3, [pc, #4]	; (8016698 <network::display_ip()+0x8>)
 8016692:	6818      	ldr	r0, [r3, #0]
 8016694:	f7ff bc04 	b.w	8015ea0 <DisplayUdf::ShowIpAddress()>
 8016698:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>

0801669c <network::display_netmask()>:
 801669c:	4b01      	ldr	r3, [pc, #4]	; (80166a4 <network::display_netmask()+0x8>)
 801669e:	6818      	ldr	r0, [r3, #0]
 80166a0:	f7ff bc32 	b.w	8015f08 <DisplayUdf::ShowNetmask()>
 80166a4:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>

080166a8 <network::display_gateway()>:
 80166a8:	4b01      	ldr	r3, [pc, #4]	; (80166b0 <network::display_gateway()+0x8>)
 80166aa:	6818      	ldr	r0, [r3, #0]
 80166ac:	f7ff bc4a 	b.w	8015f44 <DisplayUdf::ShowGatewayIp()>
 80166b0:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>

080166b4 <network::display_hostname()>:
 80166b4:	4b01      	ldr	r3, [pc, #4]	; (80166bc <network::display_hostname()+0x8>)
 80166b6:	6818      	ldr	r0, [r3, #0]
 80166b8:	f7ff bc62 	b.w	8015f80 <DisplayUdf::ShowHostName()>
 80166bc:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>

080166c0 <network::display_emac_shutdown()>:
 80166c0:	4b01      	ldr	r3, [pc, #4]	; (80166c8 <network::display_emac_shutdown()+0x8>)
 80166c2:	6818      	ldr	r0, [r3, #0]
 80166c4:	f7ff bce6 	b.w	8016094 <DisplayUdf::ShowShutdown()>
 80166c8:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>

080166cc <network::display_dhcp_status(network::dhcp::ClientStatus)>:
 80166cc:	4b02      	ldr	r3, [pc, #8]	; (80166d8 <network::display_dhcp_status(network::dhcp::ClientStatus)+0xc>)
 80166ce:	4601      	mov	r1, r0
 80166d0:	6818      	ldr	r0, [r3, #0]
 80166d2:	f7ff bca9 	b.w	8016028 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80166d6:	bf00      	nop
 80166d8:	2000fc70 	andcs	pc, r0, r0, ror ip	; <UNPREDICTABLE>

080166dc <ConfigStore::GetStoreOffset(configstore::Store)>:
 80166dc:	b510      	push	{r4, lr}
 80166de:	4a05      	ldr	r2, [pc, #20]	; (80166f4 <ConfigStore::GetStoreOffset(configstore::Store)+0x18>)
 80166e0:	2300      	movs	r3, #0
 80166e2:	2020      	movs	r0, #32
 80166e4:	428b      	cmp	r3, r1
 80166e6:	d100      	bne.n	80166ea <ConfigStore::GetStoreOffset(configstore::Store)+0xe>
 80166e8:	bd10      	pop	{r4, pc}
 80166ea:	f852 4b04 	ldr.w	r4, [r2], #4
 80166ee:	3301      	adds	r3, #1
 80166f0:	4420      	add	r0, r4
 80166f2:	e7f7      	b.n	80166e4 <ConfigStore::GetStoreOffset(configstore::Store)+0x8>
 80166f4:	0801d804 	stmdaeq	r1, {r2, fp, ip, lr, pc}

080166f8 <ConfigStore::Init()>:
 80166f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166fc:	b085      	sub	sp, #20
 80166fe:	4607      	mov	r7, r0
 8016700:	f000 fb4f 	bl	8016da2 <StoreDevice::GetSectorSize() const>
 8016704:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8016708:	4605      	mov	r5, r0
 801670a:	d004      	beq.n	8016716 <ConfigStore::Init()+0x1e>
 801670c:	2500      	movs	r5, #0
 801670e:	4628      	mov	r0, r5
 8016710:	b005      	add	sp, #20
 8016712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016716:	4638      	mov	r0, r7
 8016718:	f000 fb40 	bl	8016d9c <StoreDevice::GetSize() const>
 801671c:	4b3a      	ldr	r3, [pc, #232]	; (8016808 <ConfigStore::Init()+0x110>)
 801671e:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 8016722:	f3c1 060b 	ubfx	r6, r1, #0, #12
 8016726:	6019      	str	r1, [r3, #0]
 8016728:	2e00      	cmp	r6, #0
 801672a:	d1ef      	bne.n	801670c <ConfigStore::Init()+0x14>
 801672c:	4c37      	ldr	r4, [pc, #220]	; (801680c <ConfigStore::Init()+0x114>)
 801672e:	ab03      	add	r3, sp, #12
 8016730:	462a      	mov	r2, r5
 8016732:	9300      	str	r3, [sp, #0]
 8016734:	4638      	mov	r0, r7
 8016736:	4623      	mov	r3, r4
 8016738:	f000 fb36 	bl	8016da8 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>
 801673c:	7823      	ldrb	r3, [r4, #0]
 801673e:	2b41      	cmp	r3, #65	; 0x41
 8016740:	bf1c      	itt	ne
 8016742:	2341      	movne	r3, #65	; 0x41
 8016744:	7023      	strbne	r3, [r4, #0]
 8016746:	7863      	ldrb	r3, [r4, #1]
 8016748:	bf14      	ite	ne
 801674a:	4635      	movne	r5, r6
 801674c:	2501      	moveq	r5, #1
 801674e:	2b76      	cmp	r3, #118	; 0x76
 8016750:	bf1c      	itt	ne
 8016752:	2376      	movne	r3, #118	; 0x76
 8016754:	7063      	strbne	r3, [r4, #1]
 8016756:	78a3      	ldrb	r3, [r4, #2]
 8016758:	bf18      	it	ne
 801675a:	2500      	movne	r5, #0
 801675c:	2b56      	cmp	r3, #86	; 0x56
 801675e:	bf1c      	itt	ne
 8016760:	2356      	movne	r3, #86	; 0x56
 8016762:	70a3      	strbne	r3, [r4, #2]
 8016764:	78e3      	ldrb	r3, [r4, #3]
 8016766:	bf18      	it	ne
 8016768:	2500      	movne	r5, #0
 801676a:	2b10      	cmp	r3, #16
 801676c:	d01f      	beq.n	80167ae <ConfigStore::Init()+0xb6>
 801676e:	2310      	movs	r3, #16
 8016770:	70e3      	strb	r3, [r4, #3]
 8016772:	4b27      	ldr	r3, [pc, #156]	; (8016810 <ConfigStore::Init()+0x118>)
 8016774:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8016818 <ConfigStore::Init()+0x120>
 8016778:	2201      	movs	r2, #1
 801677a:	701a      	strb	r2, [r3, #0]
 801677c:	2500      	movs	r5, #0
 801677e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8016782:	4631      	mov	r1, r6
 8016784:	4638      	mov	r0, r7
 8016786:	f7ff ffa9 	bl	80166dc <ConfigStore::GetStoreOffset(configstore::Store)>
 801678a:	1823      	adds	r3, r4, r0
 801678c:	5425      	strb	r5, [r4, r0]
 801678e:	705d      	strb	r5, [r3, #1]
 8016790:	709d      	strb	r5, [r3, #2]
 8016792:	70dd      	strb	r5, [r3, #3]
 8016794:	f858 3b04 	ldr.w	r3, [r8], #4
 8016798:	1d02      	adds	r2, r0, #4
 801679a:	4403      	add	r3, r0
 801679c:	429a      	cmp	r2, r3
 801679e:	d32f      	bcc.n	8016800 <ConfigStore::Init()+0x108>
 80167a0:	3601      	adds	r6, #1
 80167a2:	2e1c      	cmp	r6, #28
 80167a4:	d1ed      	bne.n	8016782 <ConfigStore::Init()+0x8a>
 80167a6:	4b1b      	ldr	r3, [pc, #108]	; (8016814 <ConfigStore::Init()+0x11c>)
 80167a8:	2501      	movs	r5, #1
 80167aa:	601d      	str	r5, [r3, #0]
 80167ac:	e7af      	b.n	801670e <ConfigStore::Init()+0x16>
 80167ae:	2d00      	cmp	r5, #0
 80167b0:	d0df      	beq.n	8016772 <ConfigStore::Init()+0x7a>
 80167b2:	f04f 0900 	mov.w	r9, #0
 80167b6:	46c8      	mov	r8, r9
 80167b8:	4631      	mov	r1, r6
 80167ba:	4638      	mov	r0, r7
 80167bc:	f7ff ff8e 	bl	80166dc <ConfigStore::GetStoreOffset(configstore::Store)>
 80167c0:	5c23      	ldrb	r3, [r4, r0]
 80167c2:	2bff      	cmp	r3, #255	; 0xff
 80167c4:	d112      	bne.n	80167ec <ConfigStore::Init()+0xf4>
 80167c6:	1823      	adds	r3, r4, r0
 80167c8:	785a      	ldrb	r2, [r3, #1]
 80167ca:	2aff      	cmp	r2, #255	; 0xff
 80167cc:	d10e      	bne.n	80167ec <ConfigStore::Init()+0xf4>
 80167ce:	789a      	ldrb	r2, [r3, #2]
 80167d0:	2aff      	cmp	r2, #255	; 0xff
 80167d2:	d10b      	bne.n	80167ec <ConfigStore::Init()+0xf4>
 80167d4:	78da      	ldrb	r2, [r3, #3]
 80167d6:	2aff      	cmp	r2, #255	; 0xff
 80167d8:	d108      	bne.n	80167ec <ConfigStore::Init()+0xf4>
 80167da:	f804 8000 	strb.w	r8, [r4, r0]
 80167de:	46a9      	mov	r9, r5
 80167e0:	f883 8001 	strb.w	r8, [r3, #1]
 80167e4:	f883 8002 	strb.w	r8, [r3, #2]
 80167e8:	f883 8003 	strb.w	r8, [r3, #3]
 80167ec:	3601      	adds	r6, #1
 80167ee:	2e1c      	cmp	r6, #28
 80167f0:	d1e2      	bne.n	80167b8 <ConfigStore::Init()+0xc0>
 80167f2:	f1b9 0f00 	cmp.w	r9, #0
 80167f6:	d08a      	beq.n	801670e <ConfigStore::Init()+0x16>
 80167f8:	4b06      	ldr	r3, [pc, #24]	; (8016814 <ConfigStore::Init()+0x11c>)
 80167fa:	2201      	movs	r2, #1
 80167fc:	601a      	str	r2, [r3, #0]
 80167fe:	e786      	b.n	801670e <ConfigStore::Init()+0x16>
 8016800:	f804 9002 	strb.w	r9, [r4, r2]
 8016804:	3201      	adds	r2, #1
 8016806:	e7c9      	b.n	801679c <ConfigStore::Init()+0xa4>
 8016808:	2000fc78 	andcs	pc, r0, r8, ror ip	; <UNPREDICTABLE>
 801680c:	40024000 	andmi	r4, r2, r0
 8016810:	2000fc8c 	andcs	pc, r0, ip, lsl #25
 8016814:	2000fc84 	andcs	pc, r0, r4, lsl #25
 8016818:	0801d804 	stmdaeq	r1, {r2, fp, ip, lr, pc}

0801681c <ConfigStore::ConfigStore()>:
 801681c:	b538      	push	{r3, r4, r5, lr}
 801681e:	4604      	mov	r4, r0
 8016820:	f000 fa8e 	bl	8016d40 <StoreDevice::StoreDevice()>
 8016824:	4b0b      	ldr	r3, [pc, #44]	; (8016854 <ConfigStore::ConfigStore()+0x38>)
 8016826:	4d0c      	ldr	r5, [pc, #48]	; (8016858 <ConfigStore::ConfigStore()+0x3c>)
 8016828:	601c      	str	r4, [r3, #0]
 801682a:	7aa3      	ldrb	r3, [r4, #10]
 801682c:	b11b      	cbz	r3, 8016836 <ConfigStore::ConfigStore()+0x1a>
 801682e:	4620      	mov	r0, r4
 8016830:	f7ff ff62 	bl	80166f8 <ConfigStore::Init()>
 8016834:	7028      	strb	r0, [r5, #0]
 8016836:	782b      	ldrb	r3, [r5, #0]
 8016838:	b153      	cbz	r3, 8016850 <ConfigStore::ConfigStore()+0x34>
 801683a:	4908      	ldr	r1, [pc, #32]	; (801685c <ConfigStore::ConfigStore()+0x40>)
 801683c:	2320      	movs	r3, #32
 801683e:	2200      	movs	r2, #0
 8016840:	f851 0b04 	ldr.w	r0, [r1], #4
 8016844:	3201      	adds	r2, #1
 8016846:	2a1c      	cmp	r2, #28
 8016848:	4403      	add	r3, r0
 801684a:	d1f9      	bne.n	8016840 <ConfigStore::ConfigStore()+0x24>
 801684c:	4a04      	ldr	r2, [pc, #16]	; (8016860 <ConfigStore::ConfigStore()+0x44>)
 801684e:	6013      	str	r3, [r2, #0]
 8016850:	4620      	mov	r0, r4
 8016852:	bd38      	pop	{r3, r4, r5, pc}
 8016854:	2000fc88 	andcs	pc, r0, r8, lsl #25
 8016858:	2000fc7c 	andcs	pc, r0, ip, ror ip	; <UNPREDICTABLE>
 801685c:	0801d804 	stmdaeq	r1, {r2, fp, ip, lr, pc}
 8016860:	2000fc80 	andcs	pc, r0, r0, lsl #25

08016864 <ConfigStore::ResetSetList(configstore::Store)>:
 8016864:	b508      	push	{r3, lr}
 8016866:	f7ff ff39 	bl	80166dc <ConfigStore::GetStoreOffset(configstore::Store)>
 801686a:	4905      	ldr	r1, [pc, #20]	; (8016880 <ConfigStore::ResetSetList(configstore::Store)+0x1c>)
 801686c:	1842      	adds	r2, r0, r1
 801686e:	2300      	movs	r3, #0
 8016870:	540b      	strb	r3, [r1, r0]
 8016872:	7053      	strb	r3, [r2, #1]
 8016874:	7093      	strb	r3, [r2, #2]
 8016876:	70d3      	strb	r3, [r2, #3]
 8016878:	4b02      	ldr	r3, [pc, #8]	; (8016884 <ConfigStore::ResetSetList(configstore::Store)+0x20>)
 801687a:	2201      	movs	r2, #1
 801687c:	601a      	str	r2, [r3, #0]
 801687e:	bd08      	pop	{r3, pc}
 8016880:	40024000 	andmi	r4, r2, r0
 8016884:	2000fc84 	andcs	pc, r0, r4, lsl #25

08016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 8016888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801688c:	461c      	mov	r4, r3
 801688e:	4b19      	ldr	r3, [pc, #100]	; (80168f4 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8016890:	9d07      	ldr	r5, [sp, #28]
 8016892:	781f      	ldrb	r7, [r3, #0]
 8016894:	4616      	mov	r6, r2
 8016896:	b307      	cbz	r7, 80168da <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8016898:	f7ff ff20 	bl	80166dc <ConfigStore::GetStoreOffset(configstore::Store)>
 801689c:	4a16      	ldr	r2, [pc, #88]	; (80168f8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 801689e:	1831      	adds	r1, r6, r0
 80168a0:	1e63      	subs	r3, r4, #1
 80168a2:	9c06      	ldr	r4, [sp, #24]
 80168a4:	4411      	add	r1, r2
 80168a6:	440c      	add	r4, r1
 80168a8:	f04f 0c00 	mov.w	ip, #0
 80168ac:	42a1      	cmp	r1, r4
 80168ae:	d116      	bne.n	80168de <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 80168b0:	f1bc 0f00 	cmp.w	ip, #0
 80168b4:	d011      	beq.n	80168da <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80168b6:	4b11      	ldr	r3, [pc, #68]	; (80168fc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 80168b8:	6819      	ldr	r1, [r3, #0]
 80168ba:	b109      	cbz	r1, 80168c0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 80168bc:	2906      	cmp	r1, #6
 80168be:	d101      	bne.n	80168c4 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 80168c0:	2101      	movs	r1, #1
 80168c2:	6019      	str	r1, [r3, #0]
 80168c4:	4b0e      	ldr	r3, [pc, #56]	; (8016900 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 80168c6:	6819      	ldr	r1, [r3, #0]
 80168c8:	4b0e      	ldr	r3, [pc, #56]	; (8016904 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 80168ca:	6019      	str	r1, [r3, #0]
 80168cc:	b12e      	cbz	r6, 80168da <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80168ce:	b125      	cbz	r5, 80168da <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80168d0:	9b08      	ldr	r3, [sp, #32]
 80168d2:	4418      	add	r0, r3
 80168d4:	5813      	ldr	r3, [r2, r0]
 80168d6:	432b      	orrs	r3, r5
 80168d8:	5013      	str	r3, [r2, r0]
 80168da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168de:	f891 8000 	ldrb.w	r8, [r1]
 80168e2:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80168e6:	45f0      	cmp	r8, lr
 80168e8:	bf1c      	itt	ne
 80168ea:	f881 e000 	strbne.w	lr, [r1]
 80168ee:	46bc      	movne	ip, r7
 80168f0:	3101      	adds	r1, #1
 80168f2:	e7db      	b.n	80168ac <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 80168f4:	2000fc7c 	andcs	pc, r0, ip, ror ip	; <UNPREDICTABLE>
 80168f8:	40024000 	andmi	r4, r2, r0
 80168fc:	2000fc84 	andcs	pc, r0, r4, lsl #25
 8016900:	20010694 	mulcs	r1, r4, r6
 8016904:	2000fc74 	andcs	pc, r0, r4, ror ip	; <UNPREDICTABLE>

08016908 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>:
 8016908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801690c:	461d      	mov	r5, r3
 801690e:	4b15      	ldr	r3, [pc, #84]	; (8016964 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x5c>)
 8016910:	b085      	sub	sp, #20
 8016912:	781b      	ldrb	r3, [r3, #0]
 8016914:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8016918:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801691c:	4607      	mov	r7, r0
 801691e:	4614      	mov	r4, r2
 8016920:	b193      	cbz	r3, 8016948 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 8016922:	f7ff fedb 	bl	80166dc <ConfigStore::GetStoreOffset(configstore::Store)>
 8016926:	4a10      	ldr	r2, [pc, #64]	; (8016968 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x60>)
 8016928:	eb08 0600 	add.w	r6, r8, r0
 801692c:	18b3      	adds	r3, r6, r2
 801692e:	f1b9 0f00 	cmp.w	r9, #0
 8016932:	d013      	beq.n	801695c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 8016934:	5990      	ldr	r0, [r2, r6]
 8016936:	b988      	cbnz	r0, 801695c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 8016938:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801693c:	9500      	str	r5, [sp, #0]
 801693e:	4623      	mov	r3, r4
 8016940:	4642      	mov	r2, r8
 8016942:	4638      	mov	r0, r7
 8016944:	f7ff ffa0 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016948:	b005      	add	sp, #20
 801694a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801694e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016952:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016956:	429d      	cmp	r5, r3
 8016958:	d1f9      	bne.n	801694e <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x46>
 801695a:	e7f5      	b.n	8016948 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 801695c:	3c01      	subs	r4, #1
 801695e:	441d      	add	r5, r3
 8016960:	e7f9      	b.n	8016956 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x4e>
 8016962:	bf00      	nop
 8016964:	2000fc7c 	andcs	pc, r0, ip, ror ip	; <UNPREDICTABLE>
 8016968:	40024000 	andmi	r4, r2, r0

0801696c <ConfigStore::Flash()>:
 801696c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801696e:	4c24      	ldr	r4, [pc, #144]	; (8016a00 <ConfigStore::Flash()+0x94>)
 8016970:	6823      	ldr	r3, [r4, #0]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d041      	beq.n	80169fa <ConfigStore::Flash()+0x8e>
 8016976:	3b01      	subs	r3, #1
 8016978:	2b05      	cmp	r3, #5
 801697a:	d82f      	bhi.n	80169dc <ConfigStore::Flash()+0x70>
 801697c:	e8df f003 	tbb	[pc, r3]
 8016980:	2c140b03 			; <UNDEFINED> instruction: 0x2c140b03
 8016984:	4b1f2e23 	blmi	87e2218 <__exidx_end+0x7c318c>
 8016988:	681a      	ldr	r2, [r3, #0]
 801698a:	4b1f      	ldr	r3, [pc, #124]	; (8016a08 <ConfigStore::Flash()+0x9c>)
 801698c:	601a      	str	r2, [r3, #0]
 801698e:	2302      	movs	r3, #2
 8016990:	6023      	str	r3, [r4, #0]
 8016992:	2001      	movs	r0, #1
 8016994:	e02f      	b.n	80169f6 <ConfigStore::Flash()+0x8a>
 8016996:	4b1b      	ldr	r3, [pc, #108]	; (8016a04 <ConfigStore::Flash()+0x98>)
 8016998:	4a1b      	ldr	r2, [pc, #108]	; (8016a08 <ConfigStore::Flash()+0x9c>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	6812      	ldr	r2, [r2, #0]
 801699e:	1a9b      	subs	r3, r3, r2
 80169a0:	2b63      	cmp	r3, #99	; 0x63
 80169a2:	d9f6      	bls.n	8016992 <ConfigStore::Flash()+0x26>
 80169a4:	2303      	movs	r3, #3
 80169a6:	e7f3      	b.n	8016990 <ConfigStore::Flash()+0x24>
 80169a8:	4918      	ldr	r1, [pc, #96]	; (8016a0c <ConfigStore::Flash()+0xa0>)
 80169aa:	ab03      	add	r3, sp, #12
 80169ac:	6809      	ldr	r1, [r1, #0]
 80169ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80169b2:	f000 fa1d 	bl	8016df0 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>
 80169b6:	2800      	cmp	r0, #0
 80169b8:	d0eb      	beq.n	8016992 <ConfigStore::Flash()+0x26>
 80169ba:	4b12      	ldr	r3, [pc, #72]	; (8016a04 <ConfigStore::Flash()+0x98>)
 80169bc:	681a      	ldr	r2, [r3, #0]
 80169be:	4b12      	ldr	r3, [pc, #72]	; (8016a08 <ConfigStore::Flash()+0x9c>)
 80169c0:	601a      	str	r2, [r3, #0]
 80169c2:	2305      	movs	r3, #5
 80169c4:	e7e4      	b.n	8016990 <ConfigStore::Flash()+0x24>
 80169c6:	4b0f      	ldr	r3, [pc, #60]	; (8016a04 <ConfigStore::Flash()+0x98>)
 80169c8:	4a0f      	ldr	r2, [pc, #60]	; (8016a08 <ConfigStore::Flash()+0x9c>)
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	6812      	ldr	r2, [r2, #0]
 80169ce:	1a9b      	subs	r3, r3, r2
 80169d0:	2b63      	cmp	r3, #99	; 0x63
 80169d2:	d9de      	bls.n	8016992 <ConfigStore::Flash()+0x26>
 80169d4:	2304      	movs	r3, #4
 80169d6:	e7db      	b.n	8016990 <ConfigStore::Flash()+0x24>
 80169d8:	2306      	movs	r3, #6
 80169da:	e7d9      	b.n	8016990 <ConfigStore::Flash()+0x24>
 80169dc:	ab03      	add	r3, sp, #12
 80169de:	4a0c      	ldr	r2, [pc, #48]	; (8016a10 <ConfigStore::Flash()+0xa4>)
 80169e0:	490a      	ldr	r1, [pc, #40]	; (8016a0c <ConfigStore::Flash()+0xa0>)
 80169e2:	9300      	str	r3, [sp, #0]
 80169e4:	6812      	ldr	r2, [r2, #0]
 80169e6:	4b0b      	ldr	r3, [pc, #44]	; (8016a14 <ConfigStore::Flash()+0xa8>)
 80169e8:	6809      	ldr	r1, [r1, #0]
 80169ea:	f000 fa05 	bl	8016df8 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>
 80169ee:	2800      	cmp	r0, #0
 80169f0:	d0cf      	beq.n	8016992 <ConfigStore::Flash()+0x26>
 80169f2:	2000      	movs	r0, #0
 80169f4:	6020      	str	r0, [r4, #0]
 80169f6:	b004      	add	sp, #16
 80169f8:	bd10      	pop	{r4, pc}
 80169fa:	4618      	mov	r0, r3
 80169fc:	e7fb      	b.n	80169f6 <ConfigStore::Flash()+0x8a>
 80169fe:	bf00      	nop
 8016a00:	2000fc84 	andcs	pc, r0, r4, lsl #25
 8016a04:	20010694 	mulcs	r1, r4, r6
 8016a08:	2000fc74 	andcs	pc, r0, r4, ror ip	; <UNPREDICTABLE>
 8016a0c:	2000fc78 	andcs	pc, r0, r8, ror ip	; <UNPREDICTABLE>
 8016a10:	2000fc80 	andcs	pc, r0, r0, lsl #25
 8016a14:	40024000 	andmi	r4, r2, r0

08016a18 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8016a18:	4770      	bx	lr
	...

08016a1c <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 8016a1c:	b507      	push	{r0, r1, r2, lr}
 8016a1e:	2300      	movs	r3, #0
 8016a20:	460a      	mov	r2, r1
 8016a22:	2101      	movs	r1, #1
 8016a24:	e9cd 3100 	strd	r3, r1, [sp]
 8016a28:	4804      	ldr	r0, [pc, #16]	; (8016a3c <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x20>)
 8016a2a:	2322      	movs	r3, #34	; 0x22
 8016a2c:	6800      	ldr	r0, [r0, #0]
 8016a2e:	210f      	movs	r1, #15
 8016a30:	f7ff ff6a 	bl	8016908 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8016a34:	b003      	add	sp, #12
 8016a36:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a3a:	bf00      	nop
 8016a3c:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016a40 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 8016a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a42:	2200      	movs	r2, #0
 8016a44:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8016a48:	460b      	mov	r3, r1
 8016a4a:	4805      	ldr	r0, [pc, #20]	; (8016a60 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 8016a4c:	2122      	movs	r1, #34	; 0x22
 8016a4e:	9100      	str	r1, [sp, #0]
 8016a50:	6800      	ldr	r0, [r0, #0]
 8016a52:	210f      	movs	r1, #15
 8016a54:	f7ff ff18 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016a58:	b005      	add	sp, #20
 8016a5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a5e:	bf00      	nop
 8016a60:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016a64 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8016a64:	b510      	push	{r4, lr}
 8016a66:	4604      	mov	r4, r0
 8016a68:	f001 fbe6 	bl	8018238 <operator delete(void*)>
 8016a6c:	4620      	mov	r0, r4
 8016a6e:	bd10      	pop	{r4, pc}

08016a70 <StoreDisplayUdf::StoreDisplayUdf()>:
 8016a70:	4a02      	ldr	r2, [pc, #8]	; (8016a7c <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 8016a72:	6002      	str	r2, [r0, #0]
 8016a74:	4a02      	ldr	r2, [pc, #8]	; (8016a80 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 8016a76:	6010      	str	r0, [r2, #0]
 8016a78:	4770      	bx	lr
 8016a7a:	bf00      	nop
 8016a7c:	0801d87c 	stmdaeq	r1, {r2, r3, r4, r5, r6, fp, ip, lr, pc}
 8016a80:	2000fc90 	mulcs	r0, r0, ip

08016a84 <StoreDmxSend::~StoreDmxSend()>:
 8016a84:	4770      	bx	lr
	...

08016a88 <StoreDmxSend::Copy(TDmxParams*)>:
 8016a88:	b507      	push	{r0, r1, r2, lr}
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	460a      	mov	r2, r1
 8016a8e:	2101      	movs	r1, #1
 8016a90:	e9cd 3100 	strd	r3, r1, [sp]
 8016a94:	4804      	ldr	r0, [pc, #16]	; (8016aa8 <StoreDmxSend::Copy(TDmxParams*)+0x20>)
 8016a96:	230a      	movs	r3, #10
 8016a98:	6800      	ldr	r0, [r0, #0]
 8016a9a:	2102      	movs	r1, #2
 8016a9c:	f7ff ff34 	bl	8016908 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8016aa0:	b003      	add	sp, #12
 8016aa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8016aa6:	bf00      	nop
 8016aa8:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016aac <StoreDmxSend::Update(TDmxParams const*)>:
 8016aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016aae:	2200      	movs	r2, #0
 8016ab0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8016ab4:	460b      	mov	r3, r1
 8016ab6:	4805      	ldr	r0, [pc, #20]	; (8016acc <StoreDmxSend::Update(TDmxParams const*)+0x20>)
 8016ab8:	210a      	movs	r1, #10
 8016aba:	9100      	str	r1, [sp, #0]
 8016abc:	6800      	ldr	r0, [r0, #0]
 8016abe:	2102      	movs	r1, #2
 8016ac0:	f7ff fee2 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016ac4:	b005      	add	sp, #20
 8016ac6:	f85d fb04 	ldr.w	pc, [sp], #4
 8016aca:	bf00      	nop
 8016acc:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016ad0 <StoreDmxSend::~StoreDmxSend()>:
 8016ad0:	b510      	push	{r4, lr}
 8016ad2:	4604      	mov	r4, r0
 8016ad4:	f001 fbb0 	bl	8018238 <operator delete(void*)>
 8016ad8:	4620      	mov	r0, r4
 8016ada:	bd10      	pop	{r4, pc}

08016adc <StoreDmxSend::StoreDmxSend()>:
 8016adc:	4a02      	ldr	r2, [pc, #8]	; (8016ae8 <StoreDmxSend::StoreDmxSend()+0xc>)
 8016ade:	6002      	str	r2, [r0, #0]
 8016ae0:	4a02      	ldr	r2, [pc, #8]	; (8016aec <StoreDmxSend::StoreDmxSend()+0x10>)
 8016ae2:	6010      	str	r0, [r2, #0]
 8016ae4:	4770      	bx	lr
 8016ae6:	bf00      	nop
 8016ae8:	0801d894 	stmdaeq	r1, {r2, r4, r7, fp, ip, lr, pc}
 8016aec:	2000fc94 	mulcs	r0, r4, ip

08016af0 <StoreNetwork::~StoreNetwork()>:
 8016af0:	4770      	bx	lr

08016af2 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 8016af2:	3804      	subs	r0, #4
 8016af4:	4770      	bx	lr
	...

08016af8 <StoreNetwork::Update(networkparams::Params const*)>:
 8016af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016afa:	2200      	movs	r2, #0
 8016afc:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8016b00:	460b      	mov	r3, r1
 8016b02:	4805      	ldr	r0, [pc, #20]	; (8016b18 <StoreNetwork::Update(networkparams::Params const*)+0x20>)
 8016b04:	215e      	movs	r1, #94	; 0x5e
 8016b06:	9100      	str	r1, [sp, #0]
 8016b08:	6800      	ldr	r0, [r0, #0]
 8016b0a:	4611      	mov	r1, r2
 8016b0c:	f7ff febc 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016b10:	b005      	add	sp, #20
 8016b12:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b16:	bf00      	nop
 8016b18:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016b1c <StoreNetwork::SaveGatewayIp(unsigned int)>:
 8016b1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016b1e:	2308      	movs	r3, #8
 8016b20:	9105      	str	r1, [sp, #20]
 8016b22:	2100      	movs	r1, #0
 8016b24:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016b28:	4805      	ldr	r0, [pc, #20]	; (8016b40 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 8016b2a:	2304      	movs	r3, #4
 8016b2c:	9300      	str	r3, [sp, #0]
 8016b2e:	6800      	ldr	r0, [r0, #0]
 8016b30:	ab05      	add	r3, sp, #20
 8016b32:	220c      	movs	r2, #12
 8016b34:	f7ff fea8 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016b38:	b007      	add	sp, #28
 8016b3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b3e:	bf00      	nop
 8016b40:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016b44 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 8016b44:	f1a0 0004 	sub.w	r0, r0, #4
 8016b48:	e7e8      	b.n	8016b1c <StoreNetwork::SaveGatewayIp(unsigned int)>
 8016b4a:	bf00      	nop

08016b4c <StoreNetwork::SaveNetMask(unsigned int)>:
 8016b4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016b4e:	2304      	movs	r3, #4
 8016b50:	9105      	str	r1, [sp, #20]
 8016b52:	2100      	movs	r1, #0
 8016b54:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016b58:	4804      	ldr	r0, [pc, #16]	; (8016b6c <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 8016b5a:	9300      	str	r3, [sp, #0]
 8016b5c:	6800      	ldr	r0, [r0, #0]
 8016b5e:	ab05      	add	r3, sp, #20
 8016b60:	2208      	movs	r2, #8
 8016b62:	f7ff fe91 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016b66:	b007      	add	sp, #28
 8016b68:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b6c:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016b70 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 8016b70:	f1a0 0004 	sub.w	r0, r0, #4
 8016b74:	e7ea      	b.n	8016b4c <StoreNetwork::SaveNetMask(unsigned int)>
 8016b76:	bf00      	nop

08016b78 <StoreNetwork::SaveIp(unsigned int)>:
 8016b78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016b7a:	2302      	movs	r3, #2
 8016b7c:	9105      	str	r1, [sp, #20]
 8016b7e:	2100      	movs	r1, #0
 8016b80:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016b84:	2204      	movs	r2, #4
 8016b86:	4804      	ldr	r0, [pc, #16]	; (8016b98 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 8016b88:	9200      	str	r2, [sp, #0]
 8016b8a:	6800      	ldr	r0, [r0, #0]
 8016b8c:	ab05      	add	r3, sp, #20
 8016b8e:	f7ff fe7b 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016b92:	b007      	add	sp, #28
 8016b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b98:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016b9c <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 8016b9c:	f1a0 0004 	sub.w	r0, r0, #4
 8016ba0:	e7ea      	b.n	8016b78 <StoreNetwork::SaveIp(unsigned int)>
 8016ba2:	bf00      	nop

08016ba4 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 8016ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016ba6:	460b      	mov	r3, r1
 8016ba8:	2000      	movs	r0, #0
 8016baa:	2120      	movs	r1, #32
 8016bac:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8016bb0:	2a40      	cmp	r2, #64	; 0x40
 8016bb2:	bf28      	it	cs
 8016bb4:	2240      	movcs	r2, #64	; 0x40
 8016bb6:	4601      	mov	r1, r0
 8016bb8:	4804      	ldr	r0, [pc, #16]	; (8016bcc <StoreNetwork::SaveHostName(char const*, unsigned int)+0x28>)
 8016bba:	9200      	str	r2, [sp, #0]
 8016bbc:	6800      	ldr	r0, [r0, #0]
 8016bbe:	2215      	movs	r2, #21
 8016bc0:	f7ff fe62 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016bc4:	b005      	add	sp, #20
 8016bc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8016bca:	bf00      	nop
 8016bcc:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016bd0 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 8016bd0:	f1a0 0004 	sub.w	r0, r0, #4
 8016bd4:	e7e6      	b.n	8016ba4 <StoreNetwork::SaveHostName(char const*, unsigned int)>
 8016bd6:	bf00      	nop

08016bd8 <StoreNetwork::~StoreNetwork()>:
 8016bd8:	b510      	push	{r4, lr}
 8016bda:	4604      	mov	r4, r0
 8016bdc:	f001 fb2c 	bl	8018238 <operator delete(void*)>
 8016be0:	4620      	mov	r0, r4
 8016be2:	bd10      	pop	{r4, pc}

08016be4 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 8016be4:	f1a0 0004 	sub.w	r0, r0, #4
 8016be8:	e7f6      	b.n	8016bd8 <StoreNetwork::~StoreNetwork()>
	...

08016bec <StoreNetwork::Copy(networkparams::Params*)>:
 8016bec:	b507      	push	{r0, r1, r2, lr}
 8016bee:	2301      	movs	r3, #1
 8016bf0:	460a      	mov	r2, r1
 8016bf2:	2100      	movs	r1, #0
 8016bf4:	e9cd 1300 	strd	r1, r3, [sp]
 8016bf8:	4803      	ldr	r0, [pc, #12]	; (8016c08 <StoreNetwork::Copy(networkparams::Params*)+0x1c>)
 8016bfa:	235e      	movs	r3, #94	; 0x5e
 8016bfc:	6800      	ldr	r0, [r0, #0]
 8016bfe:	f7ff fe83 	bl	8016908 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8016c02:	b003      	add	sp, #12
 8016c04:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c08:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016c0c <StoreNetwork::StoreNetwork()>:
 8016c0c:	4a03      	ldr	r2, [pc, #12]	; (8016c1c <StoreNetwork::StoreNetwork()+0x10>)
 8016c0e:	6002      	str	r2, [r0, #0]
 8016c10:	322c      	adds	r2, #44	; 0x2c
 8016c12:	6042      	str	r2, [r0, #4]
 8016c14:	4a02      	ldr	r2, [pc, #8]	; (8016c20 <StoreNetwork::StoreNetwork()+0x14>)
 8016c16:	6010      	str	r0, [r2, #0]
 8016c18:	4770      	bx	lr
 8016c1a:	bf00      	nop
 8016c1c:	0801d8ac 	stmdaeq	r1, {r2, r3, r5, r7, fp, ip, lr, pc}
 8016c20:	2000fc98 	mulcs	r0, r8, ip

08016c24 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8016c24:	4770      	bx	lr
	...

08016c28 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 8016c28:	b507      	push	{r0, r1, r2, lr}
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	460a      	mov	r2, r1
 8016c2e:	2101      	movs	r1, #1
 8016c30:	e9cd 3100 	strd	r3, r1, [sp]
 8016c34:	4804      	ldr	r0, [pc, #16]	; (8016c48 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x20>)
 8016c36:	2320      	movs	r3, #32
 8016c38:	6800      	ldr	r0, [r0, #0]
 8016c3a:	210c      	movs	r1, #12
 8016c3c:	f7ff fe64 	bl	8016908 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8016c40:	b003      	add	sp, #12
 8016c42:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c46:	bf00      	nop
 8016c48:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016c4c <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 8016c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016c4e:	2200      	movs	r2, #0
 8016c50:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8016c54:	460b      	mov	r3, r1
 8016c56:	4805      	ldr	r0, [pc, #20]	; (8016c6c <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 8016c58:	2120      	movs	r1, #32
 8016c5a:	9100      	str	r1, [sp, #0]
 8016c5c:	6800      	ldr	r0, [r0, #0]
 8016c5e:	210c      	movs	r1, #12
 8016c60:	f7ff fe12 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016c64:	b005      	add	sp, #20
 8016c66:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c6a:	bf00      	nop
 8016c6c:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016c70 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8016c70:	b510      	push	{r4, lr}
 8016c72:	4604      	mov	r4, r0
 8016c74:	f001 fae0 	bl	8018238 <operator delete(void*)>
 8016c78:	4620      	mov	r0, r4
 8016c7a:	bd10      	pop	{r4, pc}

08016c7c <StoreRemoteConfig::StoreRemoteConfig()>:
 8016c7c:	4a02      	ldr	r2, [pc, #8]	; (8016c88 <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 8016c7e:	6002      	str	r2, [r0, #0]
 8016c80:	4a02      	ldr	r2, [pc, #8]	; (8016c8c <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 8016c82:	6010      	str	r0, [r2, #0]
 8016c84:	4770      	bx	lr
 8016c86:	bf00      	nop
 8016c88:	0801d8fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, fp, ip, lr, pc}
 8016c8c:	2000fc9c 	mulcs	r0, ip, ip

08016c90 <HAL_I2C::Setup()>:
 8016c90:	b510      	push	{r4, lr}
 8016c92:	4604      	mov	r4, r0
 8016c94:	7800      	ldrb	r0, [r0, #0]
 8016c96:	f003 f821 	bl	8019cdc <gd32_i2c_set_address>
 8016c9a:	6860      	ldr	r0, [r4, #4]
 8016c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ca0:	f003 b814 	b.w	8019ccc <gd32_i2c_set_baudrate>

08016ca4 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)>:
 8016ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ca8:	b08d      	sub	sp, #52	; 0x34
 8016caa:	4606      	mov	r6, r0
 8016cac:	9301      	str	r3, [sp, #4]
 8016cae:	7a03      	ldrb	r3, [r0, #8]
 8016cb0:	460c      	mov	r4, r1
 8016cb2:	4617      	mov	r7, r2
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d13c      	bne.n	8016d32 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x8e>
 8016cb8:	b00d      	add	sp, #52	; 0x34
 8016cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cbe:	2101      	movs	r1, #1
 8016cc0:	4640      	mov	r0, r8
 8016cc2:	f003 f877 	bl	8019db4 <gd32_i2c_read>
 8016cc6:	2800      	cmp	r0, #0
 8016cc8:	d1f9      	bne.n	8016cbe <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x1a>
 8016cca:	7a73      	ldrb	r3, [r6, #9]
 8016ccc:	f8cd 9008 	str.w	r9, [sp, #8]
 8016cd0:	2d1d      	cmp	r5, #29
 8016cd2:	bf8c      	ite	hi
 8016cd4:	a902      	addhi	r1, sp, #8
 8016cd6:	a901      	addls	r1, sp, #4
 8016cd8:	fbb4 f2f3 	udiv	r2, r4, r3
 8016cdc:	fb03 4212 	mls	r2, r3, r2, r4
 8016ce0:	1a9b      	subs	r3, r3, r2
 8016ce2:	680a      	ldr	r2, [r1, #0]
 8016ce4:	9303      	str	r3, [sp, #12]
 8016ce6:	4293      	cmp	r3, r2
 8016ce8:	bf98      	it	ls
 8016cea:	4641      	movls	r1, r8
 8016cec:	ba63      	rev16	r3, r4
 8016cee:	f8d1 a000 	ldr.w	sl, [r1]
 8016cf2:	f8ad 3010 	strh.w	r3, [sp, #16]
 8016cf6:	eb07 030b 	add.w	r3, r7, fp
 8016cfa:	f10d 0211 	add.w	r2, sp, #17
 8016cfe:	eb03 010a 	add.w	r1, r3, sl
 8016d02:	428b      	cmp	r3, r1
 8016d04:	d110      	bne.n	8016d28 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x84>
 8016d06:	4630      	mov	r0, r6
 8016d08:	f7ff ffc2 	bl	8016c90 <HAL_I2C::Setup()>
 8016d0c:	eba5 050a 	sub.w	r5, r5, sl
 8016d10:	f10a 0102 	add.w	r1, sl, #2
 8016d14:	a804      	add	r0, sp, #16
 8016d16:	f002 ffe7 	bl	8019ce8 <gd32_i2c_write>
 8016d1a:	4454      	add	r4, sl
 8016d1c:	9501      	str	r5, [sp, #4]
 8016d1e:	44d3      	add	fp, sl
 8016d20:	9d01      	ldr	r5, [sp, #4]
 8016d22:	2d00      	cmp	r5, #0
 8016d24:	d1cb      	bne.n	8016cbe <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x1a>
 8016d26:	e7c7      	b.n	8016cb8 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x14>
 8016d28:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016d2c:	f802 0f01 	strb.w	r0, [r2, #1]!
 8016d30:	e7e7      	b.n	8016d02 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x5e>
 8016d32:	f04f 0b00 	mov.w	fp, #0
 8016d36:	f10d 080c 	add.w	r8, sp, #12
 8016d3a:	f04f 091e 	mov.w	r9, #30
 8016d3e:	e7ef      	b.n	8016d20 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)+0x7c>

08016d40 <StoreDevice::StoreDevice()>:
 8016d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d42:	4604      	mov	r4, r0
 8016d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016d48:	2050      	movs	r0, #80	; 0x50
 8016d4a:	4d11      	ldr	r5, [pc, #68]	; (8016d90 <StoreDevice::StoreDevice()+0x50>)
 8016d4c:	8123      	strh	r3, [r4, #8]
 8016d4e:	7020      	strb	r0, [r4, #0]
 8016d50:	6065      	str	r5, [r4, #4]
 8016d52:	f002 ffc3 	bl	8019cdc <gd32_i2c_set_address>
 8016d56:	4628      	mov	r0, r5
 8016d58:	f002 ffb8 	bl	8019ccc <gd32_i2c_set_baudrate>
 8016d5c:	2101      	movs	r1, #1
 8016d5e:	f10d 0007 	add.w	r0, sp, #7
 8016d62:	f003 f827 	bl	8019db4 <gd32_i2c_read>
 8016d66:	2800      	cmp	r0, #0
 8016d68:	bf0c      	ite	eq
 8016d6a:	2301      	moveq	r3, #1
 8016d6c:	2300      	movne	r3, #0
 8016d6e:	7223      	strb	r3, [r4, #8]
 8016d70:	72a3      	strb	r3, [r4, #10]
 8016d72:	d006      	beq.n	8016d82 <StoreDevice::StoreDevice()+0x42>
 8016d74:	7821      	ldrb	r1, [r4, #0]
 8016d76:	4807      	ldr	r0, [pc, #28]	; (8016d94 <StoreDevice::StoreDevice()+0x54>)
 8016d78:	f7f3 fb8e 	bl	800a498 <printf>
 8016d7c:	4620      	mov	r0, r4
 8016d7e:	b003      	add	sp, #12
 8016d80:	bd30      	pop	{r4, r5, pc}
 8016d82:	2204      	movs	r2, #4
 8016d84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8016d88:	4803      	ldr	r0, [pc, #12]	; (8016d98 <StoreDevice::StoreDevice()+0x58>)
 8016d8a:	f7f3 fb85 	bl	800a498 <printf>
 8016d8e:	e7f5      	b.n	8016d7c <StoreDevice::StoreDevice()+0x3c>
 8016d90:	00061a80 	andeq	r1, r6, r0, lsl #21
 8016d94:	0801d90c 	stmdaeq	r1, {r2, r3, r8, fp, ip, lr, pc}
 8016d98:	0801d92b 	stmdaeq	r1, {r0, r1, r3, r5, r8, fp, ip, lr, pc}

08016d9c <StoreDevice::GetSize() const>:
 8016d9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8016da0:	4770      	bx	lr

08016da2 <StoreDevice::GetSectorSize() const>:
 8016da2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8016da6:	4770      	bx	lr

08016da8 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>:
 8016da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016daa:	461e      	mov	r6, r3
 8016dac:	7a03      	ldrb	r3, [r0, #8]
 8016dae:	4604      	mov	r4, r0
 8016db0:	460d      	mov	r5, r1
 8016db2:	4617      	mov	r7, r2
 8016db4:	b1b3      	cbz	r3, 8016de4 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0x3c>
 8016db6:	2101      	movs	r1, #1
 8016db8:	a801      	add	r0, sp, #4
 8016dba:	f002 fffb 	bl	8019db4 <gd32_i2c_read>
 8016dbe:	2800      	cmp	r0, #0
 8016dc0:	d1f9      	bne.n	8016db6 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xe>
 8016dc2:	4620      	mov	r0, r4
 8016dc4:	ba6d      	rev16	r5, r5
 8016dc6:	f8ad 5004 	strh.w	r5, [sp, #4]
 8016dca:	f7ff ff61 	bl	8016c90 <HAL_I2C::Setup()>
 8016dce:	2102      	movs	r1, #2
 8016dd0:	a801      	add	r0, sp, #4
 8016dd2:	f002 ff89 	bl	8019ce8 <gd32_i2c_write>
 8016dd6:	4620      	mov	r0, r4
 8016dd8:	f7ff ff5a 	bl	8016c90 <HAL_I2C::Setup()>
 8016ddc:	4639      	mov	r1, r7
 8016dde:	4630      	mov	r0, r6
 8016de0:	f002 ffe8 	bl	8019db4 <gd32_i2c_read>
 8016de4:	9b08      	ldr	r3, [sp, #32]
 8016de6:	2200      	movs	r2, #0
 8016de8:	2001      	movs	r0, #1
 8016dea:	601a      	str	r2, [r3, #0]
 8016dec:	b003      	add	sp, #12
 8016dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016df0 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>:
 8016df0:	2200      	movs	r2, #0
 8016df2:	601a      	str	r2, [r3, #0]
 8016df4:	2001      	movs	r0, #1
 8016df6:	4770      	bx	lr

08016df8 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>:
 8016df8:	b510      	push	{r4, lr}
 8016dfa:	4614      	mov	r4, r2
 8016dfc:	461a      	mov	r2, r3
 8016dfe:	4623      	mov	r3, r4
 8016e00:	f7ff ff50 	bl	8016ca4 <AT24Cxx::Write(unsigned int, unsigned char const*, unsigned int)>
 8016e04:	9b02      	ldr	r3, [sp, #8]
 8016e06:	2200      	movs	r2, #0
 8016e08:	601a      	str	r2, [r3, #0]
 8016e0a:	2001      	movs	r0, #1
 8016e0c:	bd10      	pop	{r4, pc}

08016e0e <StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 8016e0e:	4770      	bx	lr

08016e10 <non-virtual thunk to StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 8016e10:	4770      	bx	lr

08016e12 <StoreArtNet::~StoreArtNet()>:
 8016e12:	4770      	bx	lr

08016e14 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 8016e14:	3804      	subs	r0, #4
 8016e16:	4770      	bx	lr

08016e18 <StoreArtNet::Update(artnetparams::Params const*)>:
 8016e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8016e20:	460b      	mov	r3, r1
 8016e22:	4805      	ldr	r0, [pc, #20]	; (8016e38 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 8016e24:	2187      	movs	r1, #135	; 0x87
 8016e26:	9100      	str	r1, [sp, #0]
 8016e28:	6800      	ldr	r0, [r0, #0]
 8016e2a:	2101      	movs	r1, #1
 8016e2c:	f7ff fd2c 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016e30:	b005      	add	sp, #20
 8016e32:	f85d fb04 	ldr.w	pc, [sp], #4
 8016e36:	bf00      	nop
 8016e38:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016e3c <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 8016e3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016e3e:	4b0d      	ldr	r3, [pc, #52]	; (8016e74 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x38>)
 8016e40:	f88d 2017 	strb.w	r2, [sp, #23]
 8016e44:	681a      	ldr	r2, [r3, #0]
 8016e46:	428a      	cmp	r2, r1
 8016e48:	d811      	bhi.n	8016e6e <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 8016e4a:	1a8a      	subs	r2, r1, r2
 8016e4c:	2a03      	cmp	r2, #3
 8016e4e:	d80e      	bhi.n	8016e6e <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 8016e50:	2300      	movs	r3, #0
 8016e52:	9302      	str	r3, [sp, #8]
 8016e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016e58:	4093      	lsls	r3, r2
 8016e5a:	4807      	ldr	r0, [pc, #28]	; (8016e78 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x3c>)
 8016e5c:	9301      	str	r3, [sp, #4]
 8016e5e:	2101      	movs	r1, #1
 8016e60:	9100      	str	r1, [sp, #0]
 8016e62:	6800      	ldr	r0, [r0, #0]
 8016e64:	f10d 0317 	add.w	r3, sp, #23
 8016e68:	3267      	adds	r2, #103	; 0x67
 8016e6a:	f7ff fd0d 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016e6e:	b007      	add	sp, #28
 8016e70:	f85d fb04 	ldr.w	pc, [sp], #4
 8016e74:	2000fca0 	andcs	pc, r0, r0, lsr #25
 8016e78:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016e7c <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 8016e7c:	f1a0 0004 	sub.w	r0, r0, #4
 8016e80:	f7ff bfdc 	b.w	8016e3c <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

08016e84 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 8016e84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016e86:	f88d 2017 	strb.w	r2, [sp, #23]
 8016e8a:	b951      	cbnz	r1, 8016ea2 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x1e>
 8016e8c:	9102      	str	r1, [sp, #8]
 8016e8e:	2204      	movs	r2, #4
 8016e90:	2101      	movs	r1, #1
 8016e92:	e9cd 1200 	strd	r1, r2, [sp]
 8016e96:	4804      	ldr	r0, [pc, #16]	; (8016ea8 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x24>)
 8016e98:	f10d 0317 	add.w	r3, sp, #23
 8016e9c:	6800      	ldr	r0, [r0, #0]
 8016e9e:	f7ff fcf3 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016ea2:	b007      	add	sp, #28
 8016ea4:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ea8:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016eac <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 8016eac:	f1a0 0004 	sub.w	r0, r0, #4
 8016eb0:	f7ff bfe8 	b.w	8016e84 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>

08016eb4 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 8016eb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016eb6:	f88d 2017 	strb.w	r2, [sp, #23]
 8016eba:	b959      	cbnz	r1, 8016ed4 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x20>
 8016ebc:	9102      	str	r1, [sp, #8]
 8016ebe:	2308      	movs	r3, #8
 8016ec0:	2101      	movs	r1, #1
 8016ec2:	e9cd 1300 	strd	r1, r3, [sp]
 8016ec6:	4805      	ldr	r0, [pc, #20]	; (8016edc <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x28>)
 8016ec8:	f10d 0317 	add.w	r3, sp, #23
 8016ecc:	6800      	ldr	r0, [r0, #0]
 8016ece:	2205      	movs	r2, #5
 8016ed0:	f7ff fcda 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016ed4:	b007      	add	sp, #28
 8016ed6:	f85d fb04 	ldr.w	pc, [sp], #4
 8016eda:	bf00      	nop
 8016edc:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016ee0 <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 8016ee0:	f1a0 0004 	sub.w	r0, r0, #4
 8016ee4:	f7ff bfe6 	b.w	8016eb4 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>

08016ee8 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8016ee8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016eea:	4b0c      	ldr	r3, [pc, #48]	; (8016f1c <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x34>)
 8016eec:	9205      	str	r2, [sp, #20]
 8016eee:	681a      	ldr	r2, [r3, #0]
 8016ef0:	428a      	cmp	r2, r1
 8016ef2:	d810      	bhi.n	8016f16 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 8016ef4:	1a8a      	subs	r2, r1, r2
 8016ef6:	2a03      	cmp	r2, #3
 8016ef8:	d80d      	bhi.n	8016f16 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 8016efa:	2300      	movs	r3, #0
 8016efc:	9302      	str	r3, [sp, #8]
 8016efe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016f02:	4093      	lsls	r3, r2
 8016f04:	4806      	ldr	r0, [pc, #24]	; (8016f20 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x38>)
 8016f06:	9301      	str	r3, [sp, #4]
 8016f08:	2101      	movs	r1, #1
 8016f0a:	9100      	str	r1, [sp, #0]
 8016f0c:	6800      	ldr	r0, [r0, #0]
 8016f0e:	ab05      	add	r3, sp, #20
 8016f10:	326c      	adds	r2, #108	; 0x6c
 8016f12:	f7ff fcb9 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016f16:	b007      	add	sp, #28
 8016f18:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f1c:	2000fca0 	andcs	pc, r0, r0, lsr #25
 8016f20:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016f24 <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8016f24:	f1a0 0004 	sub.w	r0, r0, #4
 8016f28:	f7ff bfde 	b.w	8016ee8 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

08016f2c <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8016f2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016f2e:	4b0c      	ldr	r3, [pc, #48]	; (8016f60 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x34>)
 8016f30:	9205      	str	r2, [sp, #20]
 8016f32:	681a      	ldr	r2, [r3, #0]
 8016f34:	428a      	cmp	r2, r1
 8016f36:	d810      	bhi.n	8016f5a <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 8016f38:	1a8a      	subs	r2, r1, r2
 8016f3a:	2a03      	cmp	r2, #3
 8016f3c:	d80d      	bhi.n	8016f5a <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 8016f3e:	2300      	movs	r3, #0
 8016f40:	9302      	str	r3, [sp, #8]
 8016f42:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8016f46:	4093      	lsls	r3, r2
 8016f48:	4806      	ldr	r0, [pc, #24]	; (8016f64 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x38>)
 8016f4a:	9301      	str	r3, [sp, #4]
 8016f4c:	2101      	movs	r1, #1
 8016f4e:	9100      	str	r1, [sp, #0]
 8016f50:	6800      	ldr	r0, [r0, #0]
 8016f52:	ab05      	add	r3, sp, #20
 8016f54:	3271      	adds	r2, #113	; 0x71
 8016f56:	f7ff fc97 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016f5a:	b007      	add	sp, #28
 8016f5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f60:	2000fca0 	andcs	pc, r0, r0, lsr #25
 8016f64:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016f68 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8016f68:	f1a0 0004 	sub.w	r0, r0, #4
 8016f6c:	f7ff bfde 	b.w	8016f2c <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

08016f70 <StoreArtNet::SaveLongName(char const*)>:
 8016f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016f72:	460b      	mov	r3, r1
 8016f74:	2200      	movs	r2, #0
 8016f76:	2101      	movs	r1, #1
 8016f78:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016f7c:	4804      	ldr	r0, [pc, #16]	; (8016f90 <StoreArtNet::SaveLongName(char const*)+0x20>)
 8016f7e:	2240      	movs	r2, #64	; 0x40
 8016f80:	9200      	str	r2, [sp, #0]
 8016f82:	6800      	ldr	r0, [r0, #0]
 8016f84:	221e      	movs	r2, #30
 8016f86:	f7ff fc7f 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016f8a:	b005      	add	sp, #20
 8016f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f90:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016f94 <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 8016f94:	f1a0 0004 	sub.w	r0, r0, #4
 8016f98:	e7ea      	b.n	8016f70 <StoreArtNet::SaveLongName(char const*)>
 8016f9a:	bf00      	nop

08016f9c <StoreArtNet::SaveShortName(char const*)>:
 8016f9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016f9e:	460b      	mov	r3, r1
 8016fa0:	2202      	movs	r2, #2
 8016fa2:	2100      	movs	r1, #0
 8016fa4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8016fa8:	4805      	ldr	r0, [pc, #20]	; (8016fc0 <StoreArtNet::SaveShortName(char const*)+0x24>)
 8016faa:	2212      	movs	r2, #18
 8016fac:	9200      	str	r2, [sp, #0]
 8016fae:	6800      	ldr	r0, [r0, #0]
 8016fb0:	220c      	movs	r2, #12
 8016fb2:	2101      	movs	r1, #1
 8016fb4:	f7ff fc68 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016fb8:	b005      	add	sp, #20
 8016fba:	f85d fb04 	ldr.w	pc, [sp], #4
 8016fbe:	bf00      	nop
 8016fc0:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016fc4 <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 8016fc4:	f1a0 0004 	sub.w	r0, r0, #4
 8016fc8:	e7e8      	b.n	8016f9c <StoreArtNet::SaveShortName(char const*)>
 8016fca:	bf00      	nop

08016fcc <StoreArtNet::SaveFailSafe(unsigned char)>:
 8016fcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016fce:	2310      	movs	r3, #16
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8016fd6:	f88d 1017 	strb.w	r1, [sp, #23]
 8016fda:	4806      	ldr	r0, [pc, #24]	; (8016ff4 <StoreArtNet::SaveFailSafe(unsigned char)+0x28>)
 8016fdc:	2101      	movs	r1, #1
 8016fde:	9100      	str	r1, [sp, #0]
 8016fe0:	6800      	ldr	r0, [r0, #0]
 8016fe2:	f10d 0317 	add.w	r3, sp, #23
 8016fe6:	2206      	movs	r2, #6
 8016fe8:	f7ff fc4e 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8016fec:	b007      	add	sp, #28
 8016fee:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ff2:	bf00      	nop
 8016ff4:	2000fc88 	andcs	pc, r0, r8, lsl #25

08016ff8 <non-virtual thunk to StoreArtNet::SaveFailSafe(unsigned char)>:
 8016ff8:	f1a0 0004 	sub.w	r0, r0, #4
 8016ffc:	e7e6      	b.n	8016fcc <StoreArtNet::SaveFailSafe(unsigned char)>
 8016ffe:	bf00      	nop

08017000 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 8017000:	b570      	push	{r4, r5, r6, lr}
 8017002:	4b1b      	ldr	r3, [pc, #108]	; (8017070 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x70>)
 8017004:	681c      	ldr	r4, [r3, #0]
 8017006:	428c      	cmp	r4, r1
 8017008:	b086      	sub	sp, #24
 801700a:	4615      	mov	r5, r2
 801700c:	d829      	bhi.n	8017062 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 801700e:	1b0c      	subs	r4, r1, r4
 8017010:	2c03      	cmp	r4, #3
 8017012:	d826      	bhi.n	8017062 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 8017014:	4e17      	ldr	r6, [pc, #92]	; (8017074 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x74>)
 8017016:	2308      	movs	r3, #8
 8017018:	2200      	movs	r2, #0
 801701a:	e9cd 3200 	strd	r3, r2, [sp]
 801701e:	2101      	movs	r1, #1
 8017020:	2302      	movs	r3, #2
 8017022:	f10d 0216 	add.w	r2, sp, #22
 8017026:	6830      	ldr	r0, [r6, #0]
 8017028:	f7ff fc6e 	bl	8016908 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 801702c:	2201      	movs	r2, #1
 801702e:	f104 0308 	add.w	r3, r4, #8
 8017032:	fa02 f303 	lsl.w	r3, r2, r3
 8017036:	40a2      	lsls	r2, r4
 8017038:	4313      	orrs	r3, r2
 801703a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801703e:	b29b      	uxth	r3, r3
 8017040:	ea21 0203 	bic.w	r2, r1, r3
 8017044:	b97d      	cbnz	r5, 8017066 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x66>
 8017046:	f8ad 2016 	strh.w	r2, [sp, #22]
 801704a:	2300      	movs	r3, #0
 801704c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8017050:	2302      	movs	r3, #2
 8017052:	9300      	str	r3, [sp, #0]
 8017054:	6830      	ldr	r0, [r6, #0]
 8017056:	f10d 0316 	add.w	r3, sp, #22
 801705a:	2208      	movs	r2, #8
 801705c:	2101      	movs	r1, #1
 801705e:	f7ff fc13 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8017062:	b006      	add	sp, #24
 8017064:	bd70      	pop	{r4, r5, r6, pc}
 8017066:	4319      	orrs	r1, r3
 8017068:	f8ad 1016 	strh.w	r1, [sp, #22]
 801706c:	e7ed      	b.n	801704a <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x4a>
 801706e:	bf00      	nop
 8017070:	2000fca0 	andcs	pc, r0, r0, lsr #25
 8017074:	2000fc88 	andcs	pc, r0, r8, lsl #25

08017078 <non-virtual thunk to StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 8017078:	f1a0 0004 	sub.w	r0, r0, #4
 801707c:	f7ff bfc0 	b.w	8017000 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>

08017080 <StoreArtNet::Copy(artnetparams::Params*)>:
 8017080:	b507      	push	{r0, r1, r2, lr}
 8017082:	2300      	movs	r3, #0
 8017084:	460a      	mov	r2, r1
 8017086:	2101      	movs	r1, #1
 8017088:	e9cd 3100 	strd	r3, r1, [sp]
 801708c:	4803      	ldr	r0, [pc, #12]	; (801709c <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 801708e:	2387      	movs	r3, #135	; 0x87
 8017090:	6800      	ldr	r0, [r0, #0]
 8017092:	f7ff fc39 	bl	8016908 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8017096:	b003      	add	sp, #12
 8017098:	f85d fb04 	ldr.w	pc, [sp], #4
 801709c:	2000fc88 	andcs	pc, r0, r8, lsl #25

080170a0 <StoreArtNet::~StoreArtNet()>:
 80170a0:	b510      	push	{r4, lr}
 80170a2:	4604      	mov	r4, r0
 80170a4:	f001 f8c8 	bl	8018238 <operator delete(void*)>
 80170a8:	4620      	mov	r0, r4
 80170aa:	bd10      	pop	{r4, pc}

080170ac <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 80170ac:	f1a0 0004 	sub.w	r0, r0, #4
 80170b0:	e7f6      	b.n	80170a0 <StoreArtNet::~StoreArtNet()>
	...

080170b4 <StoreArtNet::StoreArtNet(unsigned int)>:
 80170b4:	b510      	push	{r4, lr}
 80170b6:	4a05      	ldr	r2, [pc, #20]	; (80170cc <StoreArtNet::StoreArtNet(unsigned int)+0x18>)
 80170b8:	4b05      	ldr	r3, [pc, #20]	; (80170d0 <StoreArtNet::StoreArtNet(unsigned int)+0x1c>)
 80170ba:	f102 0408 	add.w	r4, r2, #8
 80170be:	3248      	adds	r2, #72	; 0x48
 80170c0:	6042      	str	r2, [r0, #4]
 80170c2:	4a04      	ldr	r2, [pc, #16]	; (80170d4 <StoreArtNet::StoreArtNet(unsigned int)+0x20>)
 80170c4:	6004      	str	r4, [r0, #0]
 80170c6:	6010      	str	r0, [r2, #0]
 80170c8:	6019      	str	r1, [r3, #0]
 80170ca:	bd10      	pop	{r4, pc}
 80170cc:	0801d968 	stmdaeq	r1, {r3, r5, r6, r8, fp, ip, lr, pc}
 80170d0:	2000fca0 	andcs	pc, r0, r0, lsr #25
 80170d4:	2000fca4 	andcs	pc, r0, r4, lsr #25

080170d8 <StoreRDMDevice::~StoreRDMDevice()>:
 80170d8:	4770      	bx	lr

080170da <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 80170da:	3804      	subs	r0, #4
 80170dc:	4770      	bx	lr
	...

080170e0 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 80170e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80170e2:	2200      	movs	r2, #0
 80170e4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80170e8:	460b      	mov	r3, r1
 80170ea:	4805      	ldr	r0, [pc, #20]	; (8017100 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 80170ec:	2129      	movs	r1, #41	; 0x29
 80170ee:	9100      	str	r1, [sp, #0]
 80170f0:	6800      	ldr	r0, [r0, #0]
 80170f2:	210b      	movs	r1, #11
 80170f4:	f7ff fbc8 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80170f8:	b005      	add	sp, #20
 80170fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80170fe:	bf00      	nop
 8017100:	2000fc88 	andcs	pc, r0, r8, lsl #25

08017104 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8017104:	b570      	push	{r4, r5, r6, lr}
 8017106:	4d0d      	ldr	r5, [pc, #52]	; (801713c <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 8017108:	b086      	sub	sp, #24
 801710a:	2401      	movs	r4, #1
 801710c:	2600      	movs	r6, #0
 801710e:	6828      	ldr	r0, [r5, #0]
 8017110:	f88d 2017 	strb.w	r2, [sp, #23]
 8017114:	460b      	mov	r3, r1
 8017116:	9200      	str	r2, [sp, #0]
 8017118:	e9cd 4601 	strd	r4, r6, [sp, #4]
 801711c:	2204      	movs	r2, #4
 801711e:	210b      	movs	r1, #11
 8017120:	f7ff fbb2 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8017124:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8017128:	6828      	ldr	r0, [r5, #0]
 801712a:	9400      	str	r4, [sp, #0]
 801712c:	f10d 0317 	add.w	r3, sp, #23
 8017130:	2224      	movs	r2, #36	; 0x24
 8017132:	210b      	movs	r1, #11
 8017134:	f7ff fba8 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8017138:	b006      	add	sp, #24
 801713a:	bd70      	pop	{r4, r5, r6, pc}
 801713c:	2000fc88 	andcs	pc, r0, r8, lsl #25

08017140 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8017140:	f1a0 0004 	sub.w	r0, r0, #4
 8017144:	e7de      	b.n	8017104 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 8017146:	bf00      	nop

08017148 <StoreRDMDevice::~StoreRDMDevice()>:
 8017148:	b510      	push	{r4, lr}
 801714a:	4604      	mov	r4, r0
 801714c:	f001 f874 	bl	8018238 <operator delete(void*)>
 8017150:	4620      	mov	r0, r4
 8017152:	bd10      	pop	{r4, pc}

08017154 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8017154:	f1a0 0004 	sub.w	r0, r0, #4
 8017158:	e7f6      	b.n	8017148 <StoreRDMDevice::~StoreRDMDevice()>
	...

0801715c <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 801715c:	b507      	push	{r0, r1, r2, lr}
 801715e:	2300      	movs	r3, #0
 8017160:	460a      	mov	r2, r1
 8017162:	2101      	movs	r1, #1
 8017164:	e9cd 3100 	strd	r3, r1, [sp]
 8017168:	4804      	ldr	r0, [pc, #16]	; (801717c <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x20>)
 801716a:	2329      	movs	r3, #41	; 0x29
 801716c:	6800      	ldr	r0, [r0, #0]
 801716e:	210b      	movs	r1, #11
 8017170:	f7ff fbca 	bl	8016908 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8017174:	b003      	add	sp, #12
 8017176:	f85d fb04 	ldr.w	pc, [sp], #4
 801717a:	bf00      	nop
 801717c:	2000fc88 	andcs	pc, r0, r8, lsl #25

08017180 <StoreRDMDevice::StoreRDMDevice()>:
 8017180:	4a03      	ldr	r2, [pc, #12]	; (8017190 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 8017182:	6002      	str	r2, [r0, #0]
 8017184:	321c      	adds	r2, #28
 8017186:	6042      	str	r2, [r0, #4]
 8017188:	4a02      	ldr	r2, [pc, #8]	; (8017194 <StoreRDMDevice::StoreRDMDevice()+0x14>)
 801718a:	6010      	str	r0, [r2, #0]
 801718c:	4770      	bx	lr
 801718e:	bf00      	nop
 8017190:	0801d9e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, fp, ip, lr, pc}
 8017194:	2000fca8 	andcs	pc, r0, r8, lsr #25

08017198 <StorePixelDmx::~StorePixelDmx()>:
 8017198:	4770      	bx	lr

0801719a <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 801719a:	3804      	subs	r0, #4
 801719c:	4770      	bx	lr
	...

080171a0 <StorePixelDmx::Update(pixeldmxparams::Params const*)>:
 80171a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80171a2:	2200      	movs	r2, #0
 80171a4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80171a8:	460b      	mov	r3, r1
 80171aa:	4805      	ldr	r0, [pc, #20]	; (80171c0 <StorePixelDmx::Update(pixeldmxparams::Params const*)+0x20>)
 80171ac:	2136      	movs	r1, #54	; 0x36
 80171ae:	9100      	str	r1, [sp, #0]
 80171b0:	6800      	ldr	r0, [r0, #0]
 80171b2:	2103      	movs	r1, #3
 80171b4:	f7ff fb68 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80171b8:	b005      	add	sp, #20
 80171ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80171be:	bf00      	nop
 80171c0:	2000fc88 	andcs	pc, r0, r8, lsl #25

080171c4 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 80171c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80171c6:	2304      	movs	r3, #4
 80171c8:	2200      	movs	r2, #0
 80171ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80171ce:	4807      	ldr	r0, [pc, #28]	; (80171ec <StorePixelDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 80171d0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80171d4:	2302      	movs	r3, #2
 80171d6:	9300      	str	r3, [sp, #0]
 80171d8:	6800      	ldr	r0, [r0, #0]
 80171da:	f10d 0316 	add.w	r3, sp, #22
 80171de:	2207      	movs	r2, #7
 80171e0:	2103      	movs	r1, #3
 80171e2:	f7ff fb51 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80171e6:	b007      	add	sp, #28
 80171e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80171ec:	2000fc88 	andcs	pc, r0, r8, lsl #25

080171f0 <non-virtual thunk to StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 80171f0:	f1a0 0004 	sub.w	r0, r0, #4
 80171f4:	e7e6      	b.n	80171c4 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>
 80171f6:	bf00      	nop

080171f8 <StorePixelDmx::SaveTestPattern(unsigned char)>:
 80171f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80171fa:	2308      	movs	r3, #8
 80171fc:	2200      	movs	r2, #0
 80171fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8017202:	4807      	ldr	r0, [pc, #28]	; (8017220 <StorePixelDmx::SaveTestPattern(unsigned char)+0x28>)
 8017204:	f88d 1017 	strb.w	r1, [sp, #23]
 8017208:	2301      	movs	r3, #1
 801720a:	9300      	str	r3, [sp, #0]
 801720c:	6800      	ldr	r0, [r0, #0]
 801720e:	f10d 0317 	add.w	r3, sp, #23
 8017212:	2210      	movs	r2, #16
 8017214:	2103      	movs	r1, #3
 8017216:	f7ff fb37 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801721a:	b007      	add	sp, #28
 801721c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017220:	2000fc88 	andcs	pc, r0, r8, lsl #25

08017224 <non-virtual thunk to StorePixelDmx::SaveTestPattern(unsigned char)>:
 8017224:	f1a0 0004 	sub.w	r0, r0, #4
 8017228:	e7e6      	b.n	80171f8 <StorePixelDmx::SaveTestPattern(unsigned char)>
 801722a:	bf00      	nop

0801722c <StorePixelDmx::SaveMap(unsigned char)>:
 801722c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801722e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017232:	2200      	movs	r2, #0
 8017234:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8017238:	4807      	ldr	r0, [pc, #28]	; (8017258 <StorePixelDmx::SaveMap(unsigned char)+0x2c>)
 801723a:	f88d 1017 	strb.w	r1, [sp, #23]
 801723e:	2301      	movs	r3, #1
 8017240:	9300      	str	r3, [sp, #0]
 8017242:	6800      	ldr	r0, [r0, #0]
 8017244:	f10d 0317 	add.w	r3, sp, #23
 8017248:	2213      	movs	r2, #19
 801724a:	2103      	movs	r1, #3
 801724c:	f7ff fb1c 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8017250:	b007      	add	sp, #28
 8017252:	f85d fb04 	ldr.w	pc, [sp], #4
 8017256:	bf00      	nop
 8017258:	2000fc88 	andcs	pc, r0, r8, lsl #25

0801725c <non-virtual thunk to StorePixelDmx::SaveMap(unsigned char)>:
 801725c:	f1a0 0004 	sub.w	r0, r0, #4
 8017260:	e7e4      	b.n	801722c <StorePixelDmx::SaveMap(unsigned char)>
 8017262:	bf00      	nop

08017264 <StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8017264:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017266:	f44f 7380 	mov.w	r3, #256	; 0x100
 801726a:	2200      	movs	r2, #0
 801726c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8017270:	4807      	ldr	r0, [pc, #28]	; (8017290 <StorePixelDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8017272:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017276:	2302      	movs	r3, #2
 8017278:	9300      	str	r3, [sp, #0]
 801727a:	6800      	ldr	r0, [r0, #0]
 801727c:	f10d 0316 	add.w	r3, sp, #22
 8017280:	2211      	movs	r2, #17
 8017282:	2103      	movs	r1, #3
 8017284:	f7ff fb00 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8017288:	b007      	add	sp, #28
 801728a:	f85d fb04 	ldr.w	pc, [sp], #4
 801728e:	bf00      	nop
 8017290:	2000fc88 	andcs	pc, r0, r8, lsl #25

08017294 <non-virtual thunk to StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8017294:	f1a0 0004 	sub.w	r0, r0, #4
 8017298:	e7e4      	b.n	8017264 <StorePixelDmx::SaveGroupingCount(unsigned short)>
 801729a:	bf00      	nop

0801729c <StorePixelDmx::SaveCount(unsigned short)>:
 801729c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801729e:	2302      	movs	r3, #2
 80172a0:	2200      	movs	r2, #0
 80172a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80172a6:	4807      	ldr	r0, [pc, #28]	; (80172c4 <StorePixelDmx::SaveCount(unsigned short)+0x28>)
 80172a8:	9300      	str	r3, [sp, #0]
 80172aa:	f8ad 1016 	strh.w	r1, [sp, #22]
 80172ae:	6800      	ldr	r0, [r0, #0]
 80172b0:	f10d 0316 	add.w	r3, sp, #22
 80172b4:	2205      	movs	r2, #5
 80172b6:	2103      	movs	r1, #3
 80172b8:	f7ff fae6 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80172bc:	b007      	add	sp, #28
 80172be:	f85d fb04 	ldr.w	pc, [sp], #4
 80172c2:	bf00      	nop
 80172c4:	2000fc88 	andcs	pc, r0, r8, lsl #25

080172c8 <non-virtual thunk to StorePixelDmx::SaveCount(unsigned short)>:
 80172c8:	f1a0 0004 	sub.w	r0, r0, #4
 80172cc:	e7e6      	b.n	801729c <StorePixelDmx::SaveCount(unsigned short)>
 80172ce:	bf00      	nop

080172d0 <StorePixelDmx::SaveType(unsigned char)>:
 80172d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80172d2:	2301      	movs	r3, #1
 80172d4:	2200      	movs	r2, #0
 80172d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80172da:	4807      	ldr	r0, [pc, #28]	; (80172f8 <StorePixelDmx::SaveType(unsigned char)+0x28>)
 80172dc:	9300      	str	r3, [sp, #0]
 80172de:	f88d 1017 	strb.w	r1, [sp, #23]
 80172e2:	6800      	ldr	r0, [r0, #0]
 80172e4:	f10d 0317 	add.w	r3, sp, #23
 80172e8:	2204      	movs	r2, #4
 80172ea:	2103      	movs	r1, #3
 80172ec:	f7ff facc 	bl	8016888 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80172f0:	b007      	add	sp, #28
 80172f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80172f6:	bf00      	nop
 80172f8:	2000fc88 	andcs	pc, r0, r8, lsl #25

080172fc <non-virtual thunk to StorePixelDmx::SaveType(unsigned char)>:
 80172fc:	f1a0 0004 	sub.w	r0, r0, #4
 8017300:	e7e6      	b.n	80172d0 <StorePixelDmx::SaveType(unsigned char)>
 8017302:	bf00      	nop

08017304 <StorePixelDmx::~StorePixelDmx()>:
 8017304:	b510      	push	{r4, lr}
 8017306:	4604      	mov	r4, r0
 8017308:	f000 ff96 	bl	8018238 <operator delete(void*)>
 801730c:	4620      	mov	r0, r4
 801730e:	bd10      	pop	{r4, pc}

08017310 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 8017310:	f1a0 0004 	sub.w	r0, r0, #4
 8017314:	e7f6      	b.n	8017304 <StorePixelDmx::~StorePixelDmx()>
	...

08017318 <StorePixelDmx::Copy(pixeldmxparams::Params*)>:
 8017318:	b507      	push	{r0, r1, r2, lr}
 801731a:	2300      	movs	r3, #0
 801731c:	460a      	mov	r2, r1
 801731e:	2101      	movs	r1, #1
 8017320:	e9cd 3100 	strd	r3, r1, [sp]
 8017324:	4804      	ldr	r0, [pc, #16]	; (8017338 <StorePixelDmx::Copy(pixeldmxparams::Params*)+0x20>)
 8017326:	2336      	movs	r3, #54	; 0x36
 8017328:	6800      	ldr	r0, [r0, #0]
 801732a:	2103      	movs	r1, #3
 801732c:	f7ff faec 	bl	8016908 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8017330:	b003      	add	sp, #12
 8017332:	f85d fb04 	ldr.w	pc, [sp], #4
 8017336:	bf00      	nop
 8017338:	2000fc88 	andcs	pc, r0, r8, lsl #25

0801733c <StorePixelDmx::StorePixelDmx()>:
 801733c:	4a03      	ldr	r2, [pc, #12]	; (801734c <StorePixelDmx::StorePixelDmx()+0x10>)
 801733e:	6002      	str	r2, [r0, #0]
 8017340:	3230      	adds	r2, #48	; 0x30
 8017342:	6042      	str	r2, [r0, #4]
 8017344:	4a02      	ldr	r2, [pc, #8]	; (8017350 <StorePixelDmx::StorePixelDmx()+0x14>)
 8017346:	6010      	str	r0, [r2, #0]
 8017348:	4770      	bx	lr
 801734a:	bf00      	nop
 801734c:	0801da18 	stmdaeq	r1, {r3, r4, r9, fp, ip, lr, pc}
 8017350:	2000fcb0 			; <UNDEFINED> instruction: 0x2000fcb0

08017354 <properties::convert_json_file(char*, unsigned short, bool)>:
 8017354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017358:	7803      	ldrb	r3, [r0, #0]
 801735a:	2b7b      	cmp	r3, #123	; 0x7b
 801735c:	f040 80a4 	bne.w	80174a8 <properties::convert_json_file(char*, unsigned short, bool)+0x154>
 8017360:	b182      	cbz	r2, 8017384 <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 8017362:	2401      	movs	r4, #1
 8017364:	4606      	mov	r6, r0
 8017366:	4623      	mov	r3, r4
 8017368:	2a00      	cmp	r2, #0
 801736a:	bf0c      	ite	eq
 801736c:	f04f 0c0a 	moveq.w	ip, #10
 8017370:	f04f 0c00 	movne.w	ip, #0
 8017374:	273d      	movs	r7, #61	; 0x3d
 8017376:	42a1      	cmp	r1, r4
 8017378:	d852      	bhi.n	8017420 <properties::convert_json_file(char*, unsigned short, bool)+0xcc>
 801737a:	4618      	mov	r0, r3
 801737c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017380:	463c      	mov	r4, r7
 8017382:	e7f1      	b.n	8017368 <properties::convert_json_file(char*, unsigned short, bool)+0x14>
 8017384:	2323      	movs	r3, #35	; 0x23
 8017386:	f800 3b01 	strb.w	r3, [r0], #1
 801738a:	2701      	movs	r7, #1
 801738c:	4604      	mov	r4, r0
 801738e:	42b9      	cmp	r1, r7
 8017390:	d811      	bhi.n	80173b6 <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 8017392:	2301      	movs	r3, #1
 8017394:	4606      	mov	r6, r0
 8017396:	200a      	movs	r0, #10
 8017398:	f806 0b01 	strb.w	r0, [r6], #1
 801739c:	3301      	adds	r3, #1
 801739e:	4625      	mov	r5, r4
 80173a0:	4628      	mov	r0, r5
 80173a2:	3501      	adds	r5, #1
 80173a4:	7804      	ldrb	r4, [r0, #0]
 80173a6:	2c7b      	cmp	r4, #123	; 0x7b
 80173a8:	d0ea      	beq.n	8017380 <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 80173aa:	42b9      	cmp	r1, r7
 80173ac:	f107 0401 	add.w	r4, r7, #1
 80173b0:	d9da      	bls.n	8017368 <properties::convert_json_file(char*, unsigned short, bool)+0x14>
 80173b2:	4627      	mov	r7, r4
 80173b4:	e7f4      	b.n	80173a0 <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 80173b6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80173ba:	2b22      	cmp	r3, #34	; 0x22
 80173bc:	d119      	bne.n	80173f2 <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 80173be:	46a4      	mov	ip, r4
 80173c0:	4605      	mov	r5, r0
 80173c2:	2601      	movs	r6, #1
 80173c4:	f89c e000 	ldrb.w	lr, [ip]
 80173c8:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 80173cc:	4664      	mov	r4, ip
 80173ce:	4628      	mov	r0, r5
 80173d0:	4633      	mov	r3, r6
 80173d2:	f10c 0c01 	add.w	ip, ip, #1
 80173d6:	f105 0501 	add.w	r5, r5, #1
 80173da:	f106 0601 	add.w	r6, r6, #1
 80173de:	d0d9      	beq.n	8017394 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 80173e0:	3701      	adds	r7, #1
 80173e2:	42b9      	cmp	r1, r7
 80173e4:	4664      	mov	r4, ip
 80173e6:	f805 ec01 	strb.w	lr, [r5, #-1]
 80173ea:	d8eb      	bhi.n	80173c4 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 80173ec:	4633      	mov	r3, r6
 80173ee:	4628      	mov	r0, r5
 80173f0:	e7d0      	b.n	8017394 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 80173f2:	3701      	adds	r7, #1
 80173f4:	e7cb      	b.n	801738e <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 80173f6:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 80173fa:	d111      	bne.n	8017420 <properties::convert_json_file(char*, unsigned short, bool)+0xcc>
 80173fc:	eba3 0800 	sub.w	r8, r3, r0
 8017400:	eb08 0300 	add.w	r3, r8, r0
 8017404:	4602      	mov	r2, r0
 8017406:	f810 eb01 	ldrb.w	lr, [r0], #1
 801740a:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 801740e:	f104 0501 	add.w	r5, r4, #1
 8017412:	d04c      	beq.n	80174ae <properties::convert_json_file(char*, unsigned short, bool)+0x15a>
 8017414:	42a1      	cmp	r1, r4
 8017416:	d911      	bls.n	801743c <properties::convert_json_file(char*, unsigned short, bool)+0xe8>
 8017418:	f806 eb01 	strb.w	lr, [r6], #1
 801741c:	462c      	mov	r4, r5
 801741e:	e7ef      	b.n	8017400 <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 8017420:	42a1      	cmp	r1, r4
 8017422:	f890 e000 	ldrb.w	lr, [r0]
 8017426:	4605      	mov	r5, r0
 8017428:	f104 0401 	add.w	r4, r4, #1
 801742c:	f100 0001 	add.w	r0, r0, #1
 8017430:	d8e1      	bhi.n	80173f6 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8017432:	4628      	mov	r0, r5
 8017434:	e7e2      	b.n	80173fc <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 8017436:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 801743a:	d009      	beq.n	8017450 <properties::convert_json_file(char*, unsigned short, bool)+0xfc>
 801743c:	42a9      	cmp	r1, r5
 801743e:	f892 e000 	ldrb.w	lr, [r2]
 8017442:	4614      	mov	r4, r2
 8017444:	f105 0501 	add.w	r5, r5, #1
 8017448:	f102 0201 	add.w	r2, r2, #1
 801744c:	d8f3      	bhi.n	8017436 <properties::convert_json_file(char*, unsigned short, bool)+0xe2>
 801744e:	4622      	mov	r2, r4
 8017450:	7814      	ldrb	r4, [r2, #0]
 8017452:	2c2f      	cmp	r4, #47	; 0x2f
 8017454:	4696      	mov	lr, r2
 8017456:	4628      	mov	r0, r5
 8017458:	f102 0201 	add.w	r2, r2, #1
 801745c:	f105 0501 	add.w	r5, r5, #1
 8017460:	d81a      	bhi.n	8017498 <properties::convert_json_file(char*, unsigned short, bool)+0x144>
 8017462:	4281      	cmp	r1, r0
 8017464:	d8f4      	bhi.n	8017450 <properties::convert_json_file(char*, unsigned short, bool)+0xfc>
 8017466:	2c22      	cmp	r4, #34	; 0x22
 8017468:	bf08      	it	eq
 801746a:	4696      	moveq	lr, r2
 801746c:	4670      	mov	r0, lr
 801746e:	1c6c      	adds	r4, r5, #1
 8017470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017474:	2a22      	cmp	r2, #34	; 0x22
 8017476:	d011      	beq.n	801749c <properties::convert_json_file(char*, unsigned short, bool)+0x148>
 8017478:	2a2c      	cmp	r2, #44	; 0x2c
 801747a:	d00f      	beq.n	801749c <properties::convert_json_file(char*, unsigned short, bool)+0x148>
 801747c:	2a7d      	cmp	r2, #125	; 0x7d
 801747e:	d00d      	beq.n	801749c <properties::convert_json_file(char*, unsigned short, bool)+0x148>
 8017480:	42a9      	cmp	r1, r5
 8017482:	d90f      	bls.n	80174a4 <properties::convert_json_file(char*, unsigned short, bool)+0x150>
 8017484:	f1a2 0520 	sub.w	r5, r2, #32
 8017488:	2d5a      	cmp	r5, #90	; 0x5a
 801748a:	d803      	bhi.n	8017494 <properties::convert_json_file(char*, unsigned short, bool)+0x140>
 801748c:	f806 2b01 	strb.w	r2, [r6], #1
 8017490:	3301      	adds	r3, #1
 8017492:	4686      	mov	lr, r0
 8017494:	4625      	mov	r5, r4
 8017496:	e7e9      	b.n	801746c <properties::convert_json_file(char*, unsigned short, bool)+0x118>
 8017498:	4605      	mov	r5, r0
 801749a:	e7e7      	b.n	801746c <properties::convert_json_file(char*, unsigned short, bool)+0x118>
 801749c:	f806 cb01 	strb.w	ip, [r6], #1
 80174a0:	3301      	adds	r3, #1
 80174a2:	462c      	mov	r4, r5
 80174a4:	3401      	adds	r4, #1
 80174a6:	e766      	b.n	8017376 <properties::convert_json_file(char*, unsigned short, bool)+0x22>
 80174a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174ac:	e766      	b.n	801737c <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 80174ae:	f806 7b01 	strb.w	r7, [r6], #1
 80174b2:	3301      	adds	r3, #1
 80174b4:	4625      	mov	r5, r4
 80174b6:	e7c1      	b.n	801743c <properties::convert_json_file(char*, unsigned short, bool)+0xe8>

080174b8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 80174b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174bc:	6002      	str	r2, [r0, #0]
 80174be:	4614      	mov	r4, r2
 80174c0:	2200      	movs	r2, #0
 80174c2:	80c2      	strh	r2, [r0, #6]
 80174c4:	4a1c      	ldr	r2, [pc, #112]	; (8017538 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 80174c6:	8083      	strh	r3, [r0, #4]
 80174c8:	7812      	ldrb	r2, [r2, #0]
 80174ca:	f002 0201 	and.w	r2, r2, #1
 80174ce:	4606      	mov	r6, r0
 80174d0:	7202      	strb	r2, [r0, #8]
 80174d2:	4608      	mov	r0, r1
 80174d4:	4605      	mov	r5, r0
 80174d6:	3001      	adds	r0, #1
 80174d8:	782f      	ldrb	r7, [r5, #0]
 80174da:	2f00      	cmp	r7, #0
 80174dc:	d1fa      	bne.n	80174d4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 80174de:	1a6d      	subs	r5, r5, r1
 80174e0:	b29b      	uxth	r3, r3
 80174e2:	b1d2      	cbz	r2, 801751a <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 80174e4:	1d2f      	adds	r7, r5, #4
 80174e6:	429f      	cmp	r7, r3
 80174e8:	d814      	bhi.n	8017514 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 80174ea:	f04f 087b 	mov.w	r8, #123	; 0x7b
 80174ee:	f04f 0922 	mov.w	r9, #34	; 0x22
 80174f2:	462a      	mov	r2, r5
 80174f4:	f884 8000 	strb.w	r8, [r4]
 80174f8:	f884 9001 	strb.w	r9, [r4, #1]
 80174fc:	1ca0      	adds	r0, r4, #2
 80174fe:	f000 ff5e 	bl	80183be <memmove>
 8017502:	1963      	adds	r3, r4, r5
 8017504:	223a      	movs	r2, #58	; 0x3a
 8017506:	f883 9002 	strb.w	r9, [r3, #2]
 801750a:	70da      	strb	r2, [r3, #3]
 801750c:	3505      	adds	r5, #5
 801750e:	f804 8007 	strb.w	r8, [r4, r7]
 8017512:	80f5      	strh	r5, [r6, #6]
 8017514:	4630      	mov	r0, r6
 8017516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801751a:	1caf      	adds	r7, r5, #2
 801751c:	429f      	cmp	r7, r3
 801751e:	d8f9      	bhi.n	8017514 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8017520:	4620      	mov	r0, r4
 8017522:	2323      	movs	r3, #35	; 0x23
 8017524:	f800 3b01 	strb.w	r3, [r0], #1
 8017528:	462a      	mov	r2, r5
 801752a:	442c      	add	r4, r5
 801752c:	f000 ff47 	bl	80183be <memmove>
 8017530:	230a      	movs	r3, #10
 8017532:	7063      	strb	r3, [r4, #1]
 8017534:	80f7      	strh	r7, [r6, #6]
 8017536:	e7ed      	b.n	8017514 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8017538:	2000fcb4 			; <UNDEFINED> instruction: 0x2000fcb4

0801753c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 801753c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801753e:	469c      	mov	ip, r3
 8017540:	8885      	ldrh	r5, [r0, #4]
 8017542:	88c3      	ldrh	r3, [r0, #6]
 8017544:	42ab      	cmp	r3, r5
 8017546:	b085      	sub	sp, #20
 8017548:	d302      	bcc.n	8017550 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 801754a:	2000      	movs	r0, #0
 801754c:	b005      	add	sp, #20
 801754e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017550:	4604      	mov	r4, r0
 8017552:	6800      	ldr	r0, [r0, #0]
 8017554:	f894 e008 	ldrb.w	lr, [r4, #8]
 8017558:	4418      	add	r0, r3
 801755a:	1aed      	subs	r5, r5, r3
 801755c:	b2d6      	uxtb	r6, r2
 801755e:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8017562:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8017566:	0e12      	lsrs	r2, r2, #24
 8017568:	f1bc 0f00 	cmp.w	ip, #0
 801756c:	d109      	bne.n	8017582 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 801756e:	f1be 0f00 	cmp.w	lr, #0
 8017572:	d109      	bne.n	8017588 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8017574:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017578:	e9cd 6700 	strd	r6, r7, [sp]
 801757c:	4a0e      	ldr	r2, [pc, #56]	; (80175b8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 801757e:	460b      	mov	r3, r1
 8017580:	e008      	b.n	8017594 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8017582:	f1be 0f00 	cmp.w	lr, #0
 8017586:	d00f      	beq.n	80175a8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 8017588:	e9cd 6700 	strd	r6, r7, [sp]
 801758c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017590:	4a0a      	ldr	r2, [pc, #40]	; (80175bc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8017592:	460b      	mov	r3, r1
 8017594:	4629      	mov	r1, r5
 8017596:	f7f2 ffa7 	bl	800a4e8 <snprintf>
 801759a:	4285      	cmp	r5, r0
 801759c:	dbd5      	blt.n	801754a <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 801759e:	88e3      	ldrh	r3, [r4, #6]
 80175a0:	4403      	add	r3, r0
 80175a2:	80e3      	strh	r3, [r4, #6]
 80175a4:	2001      	movs	r0, #1
 80175a6:	e7d1      	b.n	801754c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 80175a8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80175ac:	e9cd 6700 	strd	r6, r7, [sp]
 80175b0:	4a03      	ldr	r2, [pc, #12]	; (80175c0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 80175b2:	460b      	mov	r3, r1
 80175b4:	e7ee      	b.n	8017594 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 80175b6:	bf00      	nop
 80175b8:	0801db21 	stmdaeq	r1, {r0, r5, r8, r9, fp, ip, lr, pc}
 80175bc:	0801db0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, fp, ip, lr, pc}
 80175c0:	0801db22 	stmdaeq	r1, {r1, r5, r8, r9, fp, ip, lr, pc}

080175c4 <PropertiesBuilder::AddComment(char const*)>:
 80175c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175c6:	7a06      	ldrb	r6, [r0, #8]
 80175c8:	b996      	cbnz	r6, 80175f0 <PropertiesBuilder::AddComment(char const*)+0x2c>
 80175ca:	4604      	mov	r4, r0
 80175cc:	88c0      	ldrh	r0, [r0, #6]
 80175ce:	88a5      	ldrh	r5, [r4, #4]
 80175d0:	42a8      	cmp	r0, r5
 80175d2:	d20d      	bcs.n	80175f0 <PropertiesBuilder::AddComment(char const*)+0x2c>
 80175d4:	6827      	ldr	r7, [r4, #0]
 80175d6:	4a07      	ldr	r2, [pc, #28]	; (80175f4 <PropertiesBuilder::AddComment(char const*)+0x30>)
 80175d8:	1a2d      	subs	r5, r5, r0
 80175da:	460b      	mov	r3, r1
 80175dc:	4438      	add	r0, r7
 80175de:	4629      	mov	r1, r5
 80175e0:	f7f2 ff82 	bl	800a4e8 <snprintf>
 80175e4:	4285      	cmp	r5, r0
 80175e6:	bfa1      	itttt	ge
 80175e8:	88e3      	ldrhge	r3, [r4, #6]
 80175ea:	18c0      	addge	r0, r0, r3
 80175ec:	80e0      	strhge	r0, [r4, #6]
 80175ee:	2601      	movge	r6, #1
 80175f0:	4630      	mov	r0, r6
 80175f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175f4:	0801db32 	stmdaeq	r1, {r1, r4, r5, r8, r9, fp, ip, lr, pc}

080175f8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 80175f8:	e9c0 1200 	strd	r1, r2, [r0]
 80175fc:	4770      	bx	lr

080175fe <ReadConfigFile::~ReadConfigFile()>:
 80175fe:	4770      	bx	lr

08017600 <ReadConfigFile::Read(char const*, unsigned int)>:
 8017600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017604:	4606      	mov	r6, r0
 8017606:	b0a0      	sub	sp, #128	; 0x80
 8017608:	460d      	mov	r5, r1
 801760a:	4614      	mov	r4, r2
 801760c:	f04f 0800 	mov.w	r8, #0
 8017610:	b33c      	cbz	r4, 8017662 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8017612:	466b      	mov	r3, sp
 8017614:	462a      	mov	r2, r5
 8017616:	4619      	mov	r1, r3
 8017618:	e007      	b.n	801762a <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 801761a:	f803 7b01 	strb.w	r7, [r3], #1
 801761e:	1a58      	subs	r0, r3, r1
 8017620:	287f      	cmp	r0, #127	; 0x7f
 8017622:	4615      	mov	r5, r2
 8017624:	dc1d      	bgt.n	8017662 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8017626:	3c01      	subs	r4, #1
 8017628:	d00f      	beq.n	801764a <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 801762a:	7817      	ldrb	r7, [r2, #0]
 801762c:	2f0d      	cmp	r7, #13
 801762e:	4610      	mov	r0, r2
 8017630:	f102 0201 	add.w	r2, r2, #1
 8017634:	d001      	beq.n	801763a <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8017636:	2f0a      	cmp	r7, #10
 8017638:	d1ef      	bne.n	801761a <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 801763a:	4605      	mov	r5, r0
 801763c:	b12c      	cbz	r4, 801764a <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 801763e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017642:	2a0d      	cmp	r2, #13
 8017644:	d00b      	beq.n	801765e <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8017646:	2a0a      	cmp	r2, #10
 8017648:	d009      	beq.n	801765e <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 801764a:	f89d 2000 	ldrb.w	r2, [sp]
 801764e:	2a60      	cmp	r2, #96	; 0x60
 8017650:	d9de      	bls.n	8017610 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8017652:	f883 8000 	strb.w	r8, [r3]
 8017656:	e9d6 3000 	ldrd	r3, r0, [r6]
 801765a:	4798      	blx	r3
 801765c:	e7d8      	b.n	8017610 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 801765e:	3c01      	subs	r4, #1
 8017660:	e7eb      	b.n	801763a <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8017662:	b020      	add	sp, #128	; 0x80
 8017664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017668 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8017668:	b570      	push	{r4, r5, r6, lr}
 801766a:	4615      	mov	r5, r2
 801766c:	461c      	mov	r4, r3
 801766e:	f000 f916 	bl	801789e <Sscan::checkName(char const*, char const*)>
 8017672:	b180      	cbz	r0, 8017696 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 8017674:	2100      	movs	r1, #0
 8017676:	5c43      	ldrb	r3, [r0, r1]
 8017678:	6826      	ldr	r6, [r4, #0]
 801767a:	b28a      	uxth	r2, r1
 801767c:	b143      	cbz	r3, 8017690 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 801767e:	42b2      	cmp	r2, r6
 8017680:	d303      	bcc.n	801768a <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 8017682:	2b0a      	cmp	r3, #10
 8017684:	d004      	beq.n	8017690 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8017686:	2002      	movs	r0, #2
 8017688:	e004      	b.n	8017694 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 801768a:	546b      	strb	r3, [r5, r1]
 801768c:	3101      	adds	r1, #1
 801768e:	e7f2      	b.n	8017676 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 8017690:	6022      	str	r2, [r4, #0]
 8017692:	2000      	movs	r0, #0
 8017694:	bd70      	pop	{r4, r5, r6, pc}
 8017696:	2001      	movs	r0, #1
 8017698:	e7fc      	b.n	8017694 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

0801769a <Sscan::Float(char const*, char const*, float&)>:
 801769a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801769c:	4614      	mov	r4, r2
 801769e:	f000 f8fe 	bl	801789e <Sscan::checkName(char const*, char const*)>
 80176a2:	2800      	cmp	r0, #0
 80176a4:	d052      	beq.n	801774c <Sscan::Float(char const*, char const*, float&)+0xb2>
 80176a6:	7803      	ldrb	r3, [r0, #0]
 80176a8:	2b2d      	cmp	r3, #45	; 0x2d
 80176aa:	bf04      	itt	eq
 80176ac:	3001      	addeq	r0, #1
 80176ae:	2601      	moveq	r6, #1
 80176b0:	7803      	ldrb	r3, [r0, #0]
 80176b2:	bf18      	it	ne
 80176b4:	2600      	movne	r6, #0
 80176b6:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80176ba:	d101      	bne.n	80176c0 <Sscan::Float(char const*, char const*, float&)+0x26>
 80176bc:	2002      	movs	r0, #2
 80176be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176c0:	2300      	movs	r3, #0
 80176c2:	210a      	movs	r1, #10
 80176c4:	7802      	ldrb	r2, [r0, #0]
 80176c6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80176ca:	2d09      	cmp	r5, #9
 80176cc:	d8f6      	bhi.n	80176bc <Sscan::Float(char const*, char const*, float&)+0x22>
 80176ce:	fb01 2303 	mla	r3, r1, r3, r2
 80176d2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80176d6:	2a2e      	cmp	r2, #46	; 0x2e
 80176d8:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 80176dc:	d002      	beq.n	80176e4 <Sscan::Float(char const*, char const*, float&)+0x4a>
 80176de:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80176e2:	d1ef      	bne.n	80176c4 <Sscan::Float(char const*, char const*, float&)+0x2a>
 80176e4:	ee07 3a90 	vmov	s15, r3
 80176e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80176ec:	edc4 7a00 	vstr	s15, [r4]
 80176f0:	7803      	ldrb	r3, [r0, #0]
 80176f2:	2b2e      	cmp	r3, #46	; 0x2e
 80176f4:	d007      	beq.n	8017706 <Sscan::Float(char const*, char const*, float&)+0x6c>
 80176f6:	b90e      	cbnz	r6, 80176fc <Sscan::Float(char const*, char const*, float&)+0x62>
 80176f8:	2000      	movs	r0, #0
 80176fa:	e7e0      	b.n	80176be <Sscan::Float(char const*, char const*, float&)+0x24>
 80176fc:	eef1 7a67 	vneg.f32	s15, s15
 8017700:	edc4 7a00 	vstr	s15, [r4]
 8017704:	e7f8      	b.n	80176f8 <Sscan::Float(char const*, char const*, float&)+0x5e>
 8017706:	4603      	mov	r3, r0
 8017708:	2101      	movs	r1, #1
 801770a:	2500      	movs	r5, #0
 801770c:	270a      	movs	r7, #10
 801770e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8017712:	f012 00df 	ands.w	r0, r2, #223	; 0xdf
 8017716:	d112      	bne.n	801773e <Sscan::Float(char const*, char const*, float&)+0xa4>
 8017718:	ee07 5a10 	vmov	s14, r5
 801771c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8017720:	ee07 1a10 	vmov	s14, r1
 8017724:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8017728:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801772c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017730:	2e00      	cmp	r6, #0
 8017732:	d0e5      	beq.n	8017700 <Sscan::Float(char const*, char const*, float&)+0x66>
 8017734:	eef1 7a67 	vneg.f32	s15, s15
 8017738:	edc4 7a00 	vstr	s15, [r4]
 801773c:	e7bf      	b.n	80176be <Sscan::Float(char const*, char const*, float&)+0x24>
 801773e:	3a30      	subs	r2, #48	; 0x30
 8017740:	2a09      	cmp	r2, #9
 8017742:	d8bb      	bhi.n	80176bc <Sscan::Float(char const*, char const*, float&)+0x22>
 8017744:	fb07 2505 	mla	r5, r7, r5, r2
 8017748:	4379      	muls	r1, r7
 801774a:	e7e0      	b.n	801770e <Sscan::Float(char const*, char const*, float&)+0x74>
 801774c:	2001      	movs	r0, #1
 801774e:	e7b6      	b.n	80176be <Sscan::Float(char const*, char const*, float&)+0x24>

08017750 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 8017750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017752:	4615      	mov	r5, r2
 8017754:	f000 f8a3 	bl	801789e <Sscan::checkName(char const*, char const*)>
 8017758:	bb58      	cbnz	r0, 80177b2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 801775a:	2001      	movs	r0, #1
 801775c:	e027      	b.n	80177ae <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 801775e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8017762:	2b09      	cmp	r3, #9
 8017764:	d822      	bhi.n	80177ac <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8017766:	fb0c 2101 	mla	r1, ip, r1, r2
 801776a:	3930      	subs	r1, #48	; 0x30
 801776c:	4603      	mov	r3, r0
 801776e:	4618      	mov	r0, r3
 8017770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017774:	2a2e      	cmp	r2, #46	; 0x2e
 8017776:	d115      	bne.n	80177a4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8017778:	29ff      	cmp	r1, #255	; 0xff
 801777a:	d817      	bhi.n	80177ac <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801777c:	3401      	adds	r4, #1
 801777e:	2c03      	cmp	r4, #3
 8017780:	f806 1b01 	strb.w	r1, [r6], #1
 8017784:	d119      	bne.n	80177ba <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 8017786:	1d1a      	adds	r2, r3, #4
 8017788:	2400      	movs	r4, #0
 801778a:	260a      	movs	r6, #10
 801778c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8017790:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8017794:	d115      	bne.n	80177c2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 8017796:	2cff      	cmp	r4, #255	; 0xff
 8017798:	d808      	bhi.n	80177ac <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801779a:	f88d 4007 	strb.w	r4, [sp, #7]
 801779e:	9b01      	ldr	r3, [sp, #4]
 80177a0:	602b      	str	r3, [r5, #0]
 80177a2:	e004      	b.n	80177ae <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 80177a4:	2a00      	cmp	r2, #0
 80177a6:	d0e7      	beq.n	8017778 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 80177a8:	42b8      	cmp	r0, r7
 80177aa:	d1d8      	bne.n	801775e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 80177ac:	2002      	movs	r0, #2
 80177ae:	b003      	add	sp, #12
 80177b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177b2:	ae01      	add	r6, sp, #4
 80177b4:	2400      	movs	r4, #0
 80177b6:	f04f 0c0a 	mov.w	ip, #10
 80177ba:	4603      	mov	r3, r0
 80177bc:	1d07      	adds	r7, r0, #4
 80177be:	2100      	movs	r1, #0
 80177c0:	e7d5      	b.n	801776e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 80177c2:	4293      	cmp	r3, r2
 80177c4:	d0f2      	beq.n	80177ac <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80177c6:	3930      	subs	r1, #48	; 0x30
 80177c8:	2909      	cmp	r1, #9
 80177ca:	d8ef      	bhi.n	80177ac <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80177cc:	fb06 1404 	mla	r4, r6, r4, r1
 80177d0:	e7dc      	b.n	801778c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

080177d2 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 80177d2:	b538      	push	{r3, r4, r5, lr}
 80177d4:	4614      	mov	r4, r2
 80177d6:	f000 f862 	bl	801789e <Sscan::checkName(char const*, char const*)>
 80177da:	b1a8      	cbz	r0, 8017808 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x36>
 80177dc:	2100      	movs	r1, #0
 80177de:	220a      	movs	r2, #10
 80177e0:	7803      	ldrb	r3, [r0, #0]
 80177e2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80177e6:	2d09      	cmp	r5, #9
 80177e8:	d810      	bhi.n	801780c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x3a>
 80177ea:	fb02 3101 	mla	r1, r2, r1, r3
 80177ee:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80177f2:	f013 03df 	ands.w	r3, r3, #223	; 0xdf
 80177f6:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
 80177fa:	d1f1      	bne.n	80177e0 <Sscan::Uint16(char const*, char const*, unsigned short&)+0xe>
 80177fc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8017800:	d204      	bcs.n	801780c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x3a>
 8017802:	8021      	strh	r1, [r4, #0]
 8017804:	4618      	mov	r0, r3
 8017806:	bd38      	pop	{r3, r4, r5, pc}
 8017808:	2301      	movs	r3, #1
 801780a:	e7fb      	b.n	8017804 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 801780c:	2302      	movs	r3, #2
 801780e:	e7f9      	b.n	8017804 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08017810 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 8017810:	b570      	push	{r4, r5, r6, lr}
 8017812:	4614      	mov	r4, r2
 8017814:	f000 f843 	bl	801789e <Sscan::checkName(char const*, char const*)>
 8017818:	b1f8      	cbz	r0, 801785a <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 801781a:	2300      	movs	r3, #0
 801781c:	461a      	mov	r2, r3
 801781e:	260a      	movs	r6, #10
 8017820:	7805      	ldrb	r5, [r0, #0]
 8017822:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 8017826:	2909      	cmp	r1, #9
 8017828:	d819      	bhi.n	801785e <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 801782a:	fba3 3106 	umull	r3, r1, r3, r6
 801782e:	fb06 1102 	mla	r1, r6, r2, r1
 8017832:	3b30      	subs	r3, #48	; 0x30
 8017834:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8017838:	18eb      	adds	r3, r5, r3
 801783a:	f141 0200 	adc.w	r2, r1, #0
 801783e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8017842:	f011 01df 	ands.w	r1, r1, #223	; 0xdf
 8017846:	d1eb      	bne.n	8017820 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x10>
 8017848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801784c:	4298      	cmp	r0, r3
 801784e:	eb71 0202 	sbcs.w	r2, r1, r2
 8017852:	d304      	bcc.n	801785e <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8017854:	6023      	str	r3, [r4, #0]
 8017856:	4608      	mov	r0, r1
 8017858:	bd70      	pop	{r4, r5, r6, pc}
 801785a:	2101      	movs	r1, #1
 801785c:	e7fb      	b.n	8017856 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x46>
 801785e:	2102      	movs	r1, #2
 8017860:	e7f9      	b.n	8017856 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x46>

08017862 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 8017862:	b538      	push	{r3, r4, r5, lr}
 8017864:	4614      	mov	r4, r2
 8017866:	f000 f81a 	bl	801789e <Sscan::checkName(char const*, char const*)>
 801786a:	b1a0      	cbz	r0, 8017896 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x34>
 801786c:	2100      	movs	r1, #0
 801786e:	220a      	movs	r2, #10
 8017870:	7803      	ldrb	r3, [r0, #0]
 8017872:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8017876:	2d09      	cmp	r5, #9
 8017878:	d80f      	bhi.n	801789a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x38>
 801787a:	fb02 3101 	mla	r1, r2, r1, r3
 801787e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8017882:	f013 03df 	ands.w	r3, r3, #223	; 0xdf
 8017886:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
 801788a:	d1f1      	bne.n	8017870 <Sscan::Uint8(char const*, char const*, unsigned char&)+0xe>
 801788c:	29ff      	cmp	r1, #255	; 0xff
 801788e:	d804      	bhi.n	801789a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x38>
 8017890:	7021      	strb	r1, [r4, #0]
 8017892:	4618      	mov	r0, r3
 8017894:	bd38      	pop	{r3, r4, r5, pc}
 8017896:	2301      	movs	r3, #1
 8017898:	e7fb      	b.n	8017892 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 801789a:	2302      	movs	r3, #2
 801789c:	e7f9      	b.n	8017892 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

0801789e <Sscan::checkName(char const*, char const*)>:
 801789e:	b510      	push	{r4, lr}
 80178a0:	3901      	subs	r1, #1
 80178a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80178a6:	4604      	mov	r4, r0
 80178a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178ac:	b123      	cbz	r3, 80178b8 <Sscan::checkName(char const*, char const*)+0x1a>
 80178ae:	b10a      	cbz	r2, 80178b4 <Sscan::checkName(char const*, char const*)+0x16>
 80178b0:	4293      	cmp	r3, r2
 80178b2:	d0f6      	beq.n	80178a2 <Sscan::checkName(char const*, char const*)+0x4>
 80178b4:	2000      	movs	r0, #0
 80178b6:	e006      	b.n	80178c6 <Sscan::checkName(char const*, char const*)+0x28>
 80178b8:	2a3d      	cmp	r2, #61	; 0x3d
 80178ba:	d1fb      	bne.n	80178b4 <Sscan::checkName(char const*, char const*)+0x16>
 80178bc:	7860      	ldrb	r0, [r4, #1]
 80178be:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 80178c2:	d000      	beq.n	80178c6 <Sscan::checkName(char const*, char const*)+0x28>
 80178c4:	1c60      	adds	r0, r4, #1
 80178c6:	bd10      	pop	{r4, pc}

080178c8 <LightSet::GetDmxStartAddress()>:
 80178c8:	2001      	movs	r0, #1
 80178ca:	4770      	bx	lr

080178cc <LightSet::GetDmxFootprint()>:
 80178cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80178d0:	4770      	bx	lr

080178d2 <LightSet::SetDmxStartAddress(unsigned short)>:
 80178d2:	2000      	movs	r0, #0
 80178d4:	4770      	bx	lr

080178d6 <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 80178d6:	2300      	movs	r3, #0
 80178d8:	2001      	movs	r0, #1
 80178da:	7093      	strb	r3, [r2, #2]
 80178dc:	8010      	strh	r0, [r2, #0]
 80178de:	4770      	bx	lr

080178e0 <gd32_gpio_fsel.constprop.0>:
 80178e0:	b507      	push	{r0, r1, r2, lr}
 80178e2:	2101      	movs	r1, #1
 80178e4:	fa01 f300 	lsl.w	r3, r1, r0
 80178e8:	2200      	movs	r2, #0
 80178ea:	4806      	ldr	r0, [pc, #24]	; (8017904 <gd32_gpio_fsel.constprop.0+0x24>)
 80178ec:	9301      	str	r3, [sp, #4]
 80178ee:	f001 fc77 	bl	80191e0 <gpio_mode_set>
 80178f2:	9b01      	ldr	r3, [sp, #4]
 80178f4:	4803      	ldr	r0, [pc, #12]	; (8017904 <gd32_gpio_fsel.constprop.0+0x24>)
 80178f6:	2202      	movs	r2, #2
 80178f8:	2100      	movs	r1, #0
 80178fa:	b003      	add	sp, #12
 80178fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017900:	f001 bc8e 	b.w	8019220 <gpio_output_options_set>
 8017904:	40020000 	andmi	r0, r2, r0

08017908 <Display::Display()>:
 8017908:	b538      	push	{r3, r4, r5, lr}
 801790a:	4604      	mov	r4, r0
 801790c:	f000 f904 	bl	8017b18 <ILI9341::ILI9341()>
 8017910:	237f      	movs	r3, #127	; 0x7f
 8017912:	82e3      	strh	r3, [r4, #22]
 8017914:	4b23      	ldr	r3, [pc, #140]	; (80179a4 <Display::Display()+0x9c>)
 8017916:	61e3      	str	r3, [r4, #28]
 8017918:	4b23      	ldr	r3, [pc, #140]	; (80179a8 <Display::Display()+0xa0>)
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	2500      	movs	r5, #0
 801791e:	e9c4 3508 	strd	r3, r5, [r4, #32]
 8017922:	4b22      	ldr	r3, [pc, #136]	; (80179ac <Display::Display()+0xa4>)
 8017924:	7625      	strb	r5, [r4, #24]
 8017926:	601c      	str	r4, [r3, #0]
 8017928:	f002 fb12 	bl	8019f50 <gd32_spi_begin()>
 801792c:	2001      	movs	r0, #1
 801792e:	f002 fbb3 	bl	801a098 <gd32_spi_chipSelect(unsigned char)>
 8017932:	481f      	ldr	r0, [pc, #124]	; (80179b0 <Display::Display()+0xa8>)
 8017934:	f002 fb5e 	bl	8019ff4 <gd32_spi_set_speed_hz(unsigned int)>
 8017938:	4628      	mov	r0, r5
 801793a:	f002 fb95 	bl	801a068 <gd32_spi_setDataMode(unsigned char)>
 801793e:	200e      	movs	r0, #14
 8017940:	f7ff ffce 	bl	80178e0 <gd32_gpio_fsel.constprop.0>
 8017944:	200b      	movs	r0, #11
 8017946:	f7ff ffcb 	bl	80178e0 <gd32_gpio_fsel.constprop.0>
 801794a:	200c      	movs	r0, #12
 801794c:	f7ff ffc8 	bl	80178e0 <gd32_gpio_fsel.constprop.0>
 8017950:	200d      	movs	r0, #13
 8017952:	f7ff ffc5 	bl	80178e0 <gd32_gpio_fsel.constprop.0>
 8017956:	2101      	movs	r1, #1
 8017958:	4620      	mov	r0, r4
 801795a:	f000 f9d3 	bl	8017d04 <ILI9341::SetBackLight(unsigned int)>
 801795e:	4620      	mov	r0, r4
 8017960:	f000 f90a 	bl	8017b78 <ILI9341::Init()>
 8017964:	4620      	mov	r0, r4
 8017966:	2101      	movs	r1, #1
 8017968:	f000 f8e4 	bl	8017b34 <ILI9341::SetRotation(unsigned int)>
 801796c:	4620      	mov	r0, r4
 801796e:	211f      	movs	r1, #31
 8017970:	f000 f9e2 	bl	8017d38 <Paint::FillColour(unsigned short)>
 8017974:	4a0f      	ldr	r2, [pc, #60]	; (80179b4 <Display::Display()+0xac>)
 8017976:	88a3      	ldrh	r3, [r4, #4]
 8017978:	8891      	ldrh	r1, [r2, #4]
 801797a:	88d2      	ldrh	r2, [r2, #6]
 801797c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017980:	7523      	strb	r3, [r4, #20]
 8017982:	88e3      	ldrh	r3, [r4, #6]
 8017984:	fbb3 f3f2 	udiv	r3, r3, r2
 8017988:	7563      	strb	r3, [r4, #21]
 801798a:	f7f1 fd0f 	bl	80093ac <display::timeout::gpio_init()>
 801798e:	480a      	ldr	r0, [pc, #40]	; (80179b8 <Display::Display()+0xb0>)
 8017990:	f7f2 fd82 	bl	800a498 <printf>
 8017994:	7d22      	ldrb	r2, [r4, #20]
 8017996:	7d61      	ldrb	r1, [r4, #21]
 8017998:	4808      	ldr	r0, [pc, #32]	; (80179bc <Display::Display()+0xb4>)
 801799a:	f7f2 fd7d 	bl	800a498 <printf>
 801799e:	4620      	mov	r0, r4
 80179a0:	bd38      	pop	{r3, r4, r5, pc}
 80179a2:	bf00      	nop
 80179a4:	000493e0 	andeq	r9, r4, r0, ror #7
 80179a8:	20010694 	mulcs	r1, r4, r6
 80179ac:	2000fcb8 			; <UNDEFINED> instruction: 0x2000fcb8
 80179b0:	01312d00 	teqeq	r1, r0, lsl #26
 80179b4:	20000020 	andcs	r0, r0, r0, lsr #32
 80179b8:	0801dd84 	stmdaeq	r1, {r2, r7, r8, sl, fp, ip, lr, pc}
 80179bc:	0801dd8d 	stmdaeq	r1, {r0, r2, r3, r7, r8, sl, fp, ip, lr, pc}

080179c0 <Display::Cls()>:
 80179c0:	211f      	movs	r1, #31
 80179c2:	f000 b9b9 	b.w	8017d38 <Paint::FillColour(unsigned short)>
	...

080179c8 <Display::SetCursorPos(unsigned int, unsigned int)>:
 80179c8:	b510      	push	{r4, lr}
 80179ca:	4c05      	ldr	r4, [pc, #20]	; (80179e0 <Display::SetCursorPos(unsigned int, unsigned int)+0x18>)
 80179cc:	88a3      	ldrh	r3, [r4, #4]
 80179ce:	fb13 f101 	smulbb	r1, r3, r1
 80179d2:	88e3      	ldrh	r3, [r4, #6]
 80179d4:	8481      	strh	r1, [r0, #36]	; 0x24
 80179d6:	fb13 f202 	smulbb	r2, r3, r2
 80179da:	84c2      	strh	r2, [r0, #38]	; 0x26
 80179dc:	bd10      	pop	{r4, pc}
 80179de:	bf00      	nop
 80179e0:	20000020 	andcs	r0, r0, r0, lsr #32

080179e4 <Display::PutChar(int)>:
 80179e4:	b530      	push	{r4, r5, lr}
 80179e6:	b085      	sub	sp, #20
 80179e8:	4604      	mov	r4, r0
 80179ea:	4d10      	ldr	r5, [pc, #64]	; (8017a2c <Display::PutChar(int)+0x48>)
 80179ec:	9500      	str	r5, [sp, #0]
 80179ee:	231f      	movs	r3, #31
 80179f0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80179f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80179f8:	b2cb      	uxtb	r3, r1
 80179fa:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80179fc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 80179fe:	f000 f9c9 	bl	8017d94 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)>
 8017a02:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8017a04:	88aa      	ldrh	r2, [r5, #4]
 8017a06:	4413      	add	r3, r2
 8017a08:	88a2      	ldrh	r2, [r4, #4]
 8017a0a:	b29b      	uxth	r3, r3
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	84a3      	strh	r3, [r4, #36]	; 0x24
 8017a10:	d80a      	bhi.n	8017a28 <Display::PutChar(int)+0x44>
 8017a12:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8017a14:	88e9      	ldrh	r1, [r5, #6]
 8017a16:	440b      	add	r3, r1
 8017a18:	88e1      	ldrh	r1, [r4, #6]
 8017a1a:	b29b      	uxth	r3, r3
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	4299      	cmp	r1, r3
 8017a20:	84e3      	strh	r3, [r4, #38]	; 0x26
 8017a22:	84a2      	strh	r2, [r4, #36]	; 0x24
 8017a24:	bf98      	it	ls
 8017a26:	84e2      	strhls	r2, [r4, #38]	; 0x26
 8017a28:	b005      	add	sp, #20
 8017a2a:	bd30      	pop	{r4, r5, pc}
 8017a2c:	20000020 	andcs	r0, r0, r0, lsr #32

08017a30 <ILI9341::~ILI9341()>:
 8017a30:	b510      	push	{r4, lr}
 8017a32:	4b03      	ldr	r3, [pc, #12]	; (8017a40 <ILI9341::~ILI9341()+0x10>)
 8017a34:	6003      	str	r3, [r0, #0]
 8017a36:	4604      	mov	r4, r0
 8017a38:	f000 f97c 	bl	8017d34 <Paint::~Paint()>
 8017a3c:	4620      	mov	r0, r4
 8017a3e:	bd10      	pop	{r4, pc}
 8017a40:	0801dda0 	stmdaeq	r1, {r5, r7, r8, sl, fp, ip, lr, pc}

08017a44 <ILI9341::~ILI9341()>:
 8017a44:	b510      	push	{r4, lr}
 8017a46:	4604      	mov	r4, r0
 8017a48:	f7ff fff2 	bl	8017a30 <ILI9341::~ILI9341()>
 8017a4c:	4620      	mov	r0, r4
 8017a4e:	f000 fbf3 	bl	8018238 <operator delete(void*)>
 8017a52:	4620      	mov	r0, r4
 8017a54:	bd10      	pop	{r4, pc}
	...

08017a58 <spi::lcd::WriteData_Byte(unsigned char)>:
 8017a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a5a:	4c08      	ldr	r4, [pc, #32]	; (8017a7c <spi::lcd::WriteData_Byte(unsigned char)+0x24>)
 8017a5c:	f88d 0007 	strb.w	r0, [sp, #7]
 8017a60:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8017a64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017a68:	62a5      	str	r5, [r4, #40]	; 0x28
 8017a6a:	2101      	movs	r1, #1
 8017a6c:	61a3      	str	r3, [r4, #24]
 8017a6e:	f10d 0007 	add.w	r0, sp, #7
 8017a72:	f002 fb17 	bl	801a0a4 <gd32_spi_writenb(char const*, unsigned int)>
 8017a76:	61a5      	str	r5, [r4, #24]
 8017a78:	b003      	add	sp, #12
 8017a7a:	bd30      	pop	{r4, r5, pc}
 8017a7c:	40020000 	andmi	r0, r2, r0

08017a80 <spi::lcd::Write_Command(unsigned char)>:
 8017a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a82:	4c08      	ldr	r4, [pc, #32]	; (8017aa4 <spi::lcd::Write_Command(unsigned char)+0x24>)
 8017a84:	f88d 0007 	strb.w	r0, [sp, #7]
 8017a88:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8017a8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017a90:	62a5      	str	r5, [r4, #40]	; 0x28
 8017a92:	2101      	movs	r1, #1
 8017a94:	62a3      	str	r3, [r4, #40]	; 0x28
 8017a96:	f10d 0007 	add.w	r0, sp, #7
 8017a9a:	f002 fb03 	bl	801a0a4 <gd32_spi_writenb(char const*, unsigned int)>
 8017a9e:	61a5      	str	r5, [r4, #24]
 8017aa0:	b003      	add	sp, #12
 8017aa2:	bd30      	pop	{r4, r5, pc}
 8017aa4:	40020000 	andmi	r0, r2, r0

08017aa8 <ILI9341::SetAddressWindow(unsigned short, unsigned short, unsigned short, unsigned short)>:
 8017aa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017aac:	461c      	mov	r4, r3
 8017aae:	460e      	mov	r6, r1
 8017ab0:	202a      	movs	r0, #42	; 0x2a
 8017ab2:	ba64      	rev16	r4, r4
 8017ab4:	4615      	mov	r5, r2
 8017ab6:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8017aba:	ba76      	rev16	r6, r6
 8017abc:	f7ff ffe0 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017ac0:	f8ad 4006 	strh.w	r4, [sp, #6]
 8017ac4:	4c13      	ldr	r4, [pc, #76]	; (8017b14 <ILI9341::SetAddressWindow(unsigned short, unsigned short, unsigned short, unsigned short)+0x6c>)
 8017ac6:	f8ad 6004 	strh.w	r6, [sp, #4]
 8017aca:	2104      	movs	r1, #4
 8017acc:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8017ad0:	f44f 6800 	mov.w	r8, #2048	; 0x800
 8017ad4:	eb0d 0001 	add.w	r0, sp, r1
 8017ad8:	62a6      	str	r6, [r4, #40]	; 0x28
 8017ada:	f8c4 8018 	str.w	r8, [r4, #24]
 8017ade:	f002 fae1 	bl	801a0a4 <gd32_spi_writenb(char const*, unsigned int)>
 8017ae2:	61a6      	str	r6, [r4, #24]
 8017ae4:	202b      	movs	r0, #43	; 0x2b
 8017ae6:	f7ff ffcb 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017aea:	ba6d      	rev16	r5, r5
 8017aec:	2104      	movs	r1, #4
 8017aee:	ba7f      	rev16	r7, r7
 8017af0:	f8ad 5004 	strh.w	r5, [sp, #4]
 8017af4:	f8ad 7006 	strh.w	r7, [sp, #6]
 8017af8:	eb0d 0001 	add.w	r0, sp, r1
 8017afc:	62a6      	str	r6, [r4, #40]	; 0x28
 8017afe:	f8c4 8018 	str.w	r8, [r4, #24]
 8017b02:	f002 facf 	bl	801a0a4 <gd32_spi_writenb(char const*, unsigned int)>
 8017b06:	202c      	movs	r0, #44	; 0x2c
 8017b08:	61a6      	str	r6, [r4, #24]
 8017b0a:	b002      	add	sp, #8
 8017b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b10:	f7ff bfb6 	b.w	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017b14:	40020000 	andmi	r0, r2, r0

08017b18 <ILI9341::ILI9341()>:
 8017b18:	b510      	push	{r4, lr}
 8017b1a:	4604      	mov	r4, r0
 8017b1c:	f000 f902 	bl	8017d24 <Paint::Paint()>
 8017b20:	4b03      	ldr	r3, [pc, #12]	; (8017b30 <ILI9341::ILI9341()+0x18>)
 8017b22:	6023      	str	r3, [r4, #0]
 8017b24:	2300      	movs	r3, #0
 8017b26:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8017b2a:	4620      	mov	r0, r4
 8017b2c:	bd10      	pop	{r4, pc}
 8017b2e:	bf00      	nop
 8017b30:	0801dda0 	stmdaeq	r1, {r5, r7, r8, sl, fp, ip, lr, pc}

08017b34 <ILI9341::SetRotation(unsigned int)>:
 8017b34:	b538      	push	{r3, r4, r5, lr}
 8017b36:	4604      	mov	r4, r0
 8017b38:	460d      	mov	r5, r1
 8017b3a:	2036      	movs	r0, #54	; 0x36
 8017b3c:	f7ff ffa0 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017b40:	2d03      	cmp	r5, #3
 8017b42:	d816      	bhi.n	8017b72 <ILI9341::SetRotation(unsigned int)+0x3e>
 8017b44:	e8df f005 	tbb	[pc, r5]
 8017b48:	15130c02 	ldrne	r0, [r3, #-3074]	; 0xfffff3fe
 8017b4c:	2008      	movs	r0, #8
 8017b4e:	f7ff ff83 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017b52:	22f0      	movs	r2, #240	; 0xf0
 8017b54:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8017b58:	80a2      	strh	r2, [r4, #4]
 8017b5a:	80e3      	strh	r3, [r4, #6]
 8017b5c:	8125      	strh	r5, [r4, #8]
 8017b5e:	bd38      	pop	{r3, r4, r5, pc}
 8017b60:	2068      	movs	r0, #104	; 0x68
 8017b62:	f7ff ff79 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017b66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8017b6a:	23f0      	movs	r3, #240	; 0xf0
 8017b6c:	e7f4      	b.n	8017b58 <ILI9341::SetRotation(unsigned int)+0x24>
 8017b6e:	20c8      	movs	r0, #200	; 0xc8
 8017b70:	e7ed      	b.n	8017b4e <ILI9341::SetRotation(unsigned int)+0x1a>
 8017b72:	20a8      	movs	r0, #168	; 0xa8
 8017b74:	e7f5      	b.n	8017b62 <ILI9341::SetRotation(unsigned int)+0x2e>
	...

08017b78 <ILI9341::Init()>:
 8017b78:	b570      	push	{r4, r5, r6, lr}
 8017b7a:	4d60      	ldr	r5, [pc, #384]	; (8017cfc <ILI9341::Init()+0x184>)
 8017b7c:	4604      	mov	r4, r0
 8017b7e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8017b82:	485f      	ldr	r0, [pc, #380]	; (8017d00 <ILI9341::Init()+0x188>)
 8017b84:	2100      	movs	r1, #0
 8017b86:	f002 fc9d 	bl	801a4c4 <udelay(unsigned int, unsigned int)>
 8017b8a:	485d      	ldr	r0, [pc, #372]	; (8017d00 <ILI9341::Init()+0x188>)
 8017b8c:	62ae      	str	r6, [r5, #40]	; 0x28
 8017b8e:	2100      	movs	r1, #0
 8017b90:	f002 fc98 	bl	801a4c4 <udelay(unsigned int, unsigned int)>
 8017b94:	2100      	movs	r1, #0
 8017b96:	485a      	ldr	r0, [pc, #360]	; (8017d00 <ILI9341::Init()+0x188>)
 8017b98:	61ae      	str	r6, [r5, #24]
 8017b9a:	f002 fc93 	bl	801a4c4 <udelay(unsigned int, unsigned int)>
 8017b9e:	20c0      	movs	r0, #192	; 0xc0
 8017ba0:	f7ff ff6e 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017ba4:	2023      	movs	r0, #35	; 0x23
 8017ba6:	f7ff ff57 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017baa:	20c1      	movs	r0, #193	; 0xc1
 8017bac:	f7ff ff68 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017bb0:	2010      	movs	r0, #16
 8017bb2:	f7ff ff51 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017bb6:	20c5      	movs	r0, #197	; 0xc5
 8017bb8:	f7ff ff62 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017bbc:	203e      	movs	r0, #62	; 0x3e
 8017bbe:	f7ff ff4b 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017bc2:	2028      	movs	r0, #40	; 0x28
 8017bc4:	f7ff ff48 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017bc8:	20c7      	movs	r0, #199	; 0xc7
 8017bca:	f7ff ff59 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017bce:	2086      	movs	r0, #134	; 0x86
 8017bd0:	f7ff ff42 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017bd4:	203a      	movs	r0, #58	; 0x3a
 8017bd6:	f7ff ff53 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017bda:	2055      	movs	r0, #85	; 0x55
 8017bdc:	f7ff ff3c 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017be0:	20b1      	movs	r0, #177	; 0xb1
 8017be2:	f7ff ff4d 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017be6:	2000      	movs	r0, #0
 8017be8:	f7ff ff36 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017bec:	2018      	movs	r0, #24
 8017bee:	f7ff ff33 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017bf2:	20b6      	movs	r0, #182	; 0xb6
 8017bf4:	f7ff ff44 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017bf8:	2008      	movs	r0, #8
 8017bfa:	f7ff ff2d 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017bfe:	20a2      	movs	r0, #162	; 0xa2
 8017c00:	f7ff ff2a 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c04:	2027      	movs	r0, #39	; 0x27
 8017c06:	f7ff ff27 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c0a:	20f2      	movs	r0, #242	; 0xf2
 8017c0c:	f7ff ff38 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017c10:	2000      	movs	r0, #0
 8017c12:	f7ff ff21 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c16:	2026      	movs	r0, #38	; 0x26
 8017c18:	f7ff ff32 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017c1c:	2001      	movs	r0, #1
 8017c1e:	f7ff ff1b 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c22:	20e0      	movs	r0, #224	; 0xe0
 8017c24:	f7ff ff2c 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017c28:	200f      	movs	r0, #15
 8017c2a:	f7ff ff15 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c2e:	2031      	movs	r0, #49	; 0x31
 8017c30:	f7ff ff12 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c34:	202b      	movs	r0, #43	; 0x2b
 8017c36:	f7ff ff0f 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c3a:	200c      	movs	r0, #12
 8017c3c:	f7ff ff0c 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c40:	200e      	movs	r0, #14
 8017c42:	f7ff ff09 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c46:	2008      	movs	r0, #8
 8017c48:	f7ff ff06 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c4c:	204e      	movs	r0, #78	; 0x4e
 8017c4e:	f7ff ff03 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c52:	20f1      	movs	r0, #241	; 0xf1
 8017c54:	f7ff ff00 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c58:	2037      	movs	r0, #55	; 0x37
 8017c5a:	f7ff fefd 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c5e:	2007      	movs	r0, #7
 8017c60:	f7ff fefa 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c64:	2010      	movs	r0, #16
 8017c66:	f7ff fef7 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c6a:	2003      	movs	r0, #3
 8017c6c:	f7ff fef4 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c70:	200e      	movs	r0, #14
 8017c72:	f7ff fef1 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c76:	2009      	movs	r0, #9
 8017c78:	f7ff feee 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c7c:	2000      	movs	r0, #0
 8017c7e:	f7ff feeb 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c82:	20e1      	movs	r0, #225	; 0xe1
 8017c84:	f7ff fefc 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017c88:	2000      	movs	r0, #0
 8017c8a:	f7ff fee5 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c8e:	200e      	movs	r0, #14
 8017c90:	f7ff fee2 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c94:	2014      	movs	r0, #20
 8017c96:	f7ff fedf 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017c9a:	2003      	movs	r0, #3
 8017c9c:	f7ff fedc 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017ca0:	2011      	movs	r0, #17
 8017ca2:	f7ff fed9 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017ca6:	2007      	movs	r0, #7
 8017ca8:	f7ff fed6 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017cac:	2031      	movs	r0, #49	; 0x31
 8017cae:	f7ff fed3 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017cb2:	20c1      	movs	r0, #193	; 0xc1
 8017cb4:	f7ff fed0 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017cb8:	2048      	movs	r0, #72	; 0x48
 8017cba:	f7ff fecd 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017cbe:	2008      	movs	r0, #8
 8017cc0:	f7ff feca 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017cc4:	200f      	movs	r0, #15
 8017cc6:	f7ff fec7 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017cca:	200c      	movs	r0, #12
 8017ccc:	f7ff fec4 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017cd0:	2031      	movs	r0, #49	; 0x31
 8017cd2:	f7ff fec1 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017cd6:	2036      	movs	r0, #54	; 0x36
 8017cd8:	f7ff febe 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017cdc:	200f      	movs	r0, #15
 8017cde:	f7ff febb 	bl	8017a58 <spi::lcd::WriteData_Byte(unsigned char)>
 8017ce2:	4620      	mov	r0, r4
 8017ce4:	2100      	movs	r1, #0
 8017ce6:	f7ff ff25 	bl	8017b34 <ILI9341::SetRotation(unsigned int)>
 8017cea:	2011      	movs	r0, #17
 8017cec:	f7ff fec8 	bl	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017cf4:	2029      	movs	r0, #41	; 0x29
 8017cf6:	f7ff bec3 	b.w	8017a80 <spi::lcd::Write_Command(unsigned char)>
 8017cfa:	bf00      	nop
 8017cfc:	40020000 	andmi	r0, r2, r0
 8017d00:	00030d40 	andeq	r0, r3, r0, asr #26

08017d04 <ILI9341::SetBackLight(unsigned int)>:
 8017d04:	4b03      	ldr	r3, [pc, #12]	; (8017d14 <ILI9341::SetBackLight(unsigned int)+0x10>)
 8017d06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017d0a:	b909      	cbnz	r1, 8017d10 <ILI9341::SetBackLight(unsigned int)+0xc>
 8017d0c:	629a      	str	r2, [r3, #40]	; 0x28
 8017d0e:	4770      	bx	lr
 8017d10:	619a      	str	r2, [r3, #24]
 8017d12:	4770      	bx	lr
 8017d14:	40020000 	andmi	r0, r2, r0

08017d18 <ILI9341::EnableSleep(bool)>:
 8017d18:	f1c1 0111 	rsb	r1, r1, #17
 8017d1c:	b2c8      	uxtb	r0, r1
 8017d1e:	f7ff beaf 	b.w	8017a80 <spi::lcd::Write_Command(unsigned char)>
	...

08017d24 <Paint::Paint()>:
 8017d24:	4a02      	ldr	r2, [pc, #8]	; (8017d30 <Paint::Paint()+0xc>)
 8017d26:	6002      	str	r2, [r0, #0]
 8017d28:	2200      	movs	r2, #0
 8017d2a:	8102      	strh	r2, [r0, #8]
 8017d2c:	4770      	bx	lr
 8017d2e:	bf00      	nop
 8017d30:	0801ef84 	stmdaeq	r1, {r2, r7, r8, r9, sl, fp, sp, lr, pc}

08017d34 <Paint::~Paint()>:
 8017d34:	4770      	bx	lr
	...

08017d38 <Paint::FillColour(unsigned short)>:
 8017d38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017d3a:	88c2      	ldrh	r2, [r0, #6]
 8017d3c:	8883      	ldrh	r3, [r0, #4]
 8017d3e:	3a01      	subs	r2, #1
 8017d40:	460c      	mov	r4, r1
 8017d42:	b292      	uxth	r2, r2
 8017d44:	6801      	ldr	r1, [r0, #0]
 8017d46:	9200      	str	r2, [sp, #0]
 8017d48:	3b01      	subs	r3, #1
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	688d      	ldr	r5, [r1, #8]
 8017d4e:	b29b      	uxth	r3, r3
 8017d50:	4611      	mov	r1, r2
 8017d52:	47a8      	blx	r5
 8017d54:	ba64      	rev16	r4, r4
 8017d56:	4a0d      	ldr	r2, [pc, #52]	; (8017d8c <Paint::FillColour(unsigned short)+0x54>)
 8017d58:	b2a4      	uxth	r4, r4
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	3301      	adds	r3, #1
 8017d5e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8017d62:	f822 4b02 	strh.w	r4, [r2], #2
 8017d66:	d1f9      	bne.n	8017d5c <Paint::FillColour(unsigned short)+0x24>
 8017d68:	4d09      	ldr	r5, [pc, #36]	; (8017d90 <Paint::FillColour(unsigned short)+0x58>)
 8017d6a:	2440      	movs	r4, #64	; 0x40
 8017d6c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8017d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017d74:	62ae      	str	r6, [r5, #40]	; 0x28
 8017d76:	4805      	ldr	r0, [pc, #20]	; (8017d8c <Paint::FillColour(unsigned short)+0x54>)
 8017d78:	61ab      	str	r3, [r5, #24]
 8017d7a:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8017d7e:	f002 f991 	bl	801a0a4 <gd32_spi_writenb(char const*, unsigned int)>
 8017d82:	3c01      	subs	r4, #1
 8017d84:	61ae      	str	r6, [r5, #24]
 8017d86:	d1f3      	bne.n	8017d70 <Paint::FillColour(unsigned short)+0x38>
 8017d88:	b002      	add	sp, #8
 8017d8a:	bd70      	pop	{r4, r5, r6, pc}
 8017d8c:	2000fcbc 			; <UNDEFINED> instruction: 0x2000fcbc
 8017d90:	40020000 	andmi	r0, r2, r0

08017d94 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)>:
 8017d94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017d98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017d9a:	6807      	ldr	r7, [r0, #0]
 8017d9c:	88a6      	ldrh	r6, [r4, #4]
 8017d9e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8017da2:	461d      	mov	r5, r3
 8017da4:	1e4b      	subs	r3, r1, #1
 8017da6:	4433      	add	r3, r6
 8017da8:	1e56      	subs	r6, r2, #1
 8017daa:	4466      	add	r6, ip
 8017dac:	b2b6      	uxth	r6, r6
 8017dae:	9600      	str	r6, [sp, #0]
 8017db0:	b29b      	uxth	r3, r3
 8017db2:	68be      	ldr	r6, [r7, #8]
 8017db4:	47b0      	blx	r6
 8017db6:	88e3      	ldrh	r3, [r4, #6]
 8017db8:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8017dbc:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8017dc0:	3d20      	subs	r5, #32
 8017dc2:	436b      	muls	r3, r5
 8017dc4:	6825      	ldr	r5, [r4, #0]
 8017dc6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8017dca:	88a3      	ldrh	r3, [r4, #4]
 8017dcc:	ba52      	rev16	r2, r2
 8017dce:	ba40      	rev16	r0, r0
 8017dd0:	2b08      	cmp	r3, #8
 8017dd2:	b292      	uxth	r2, r2
 8017dd4:	b280      	uxth	r0, r0
 8017dd6:	d12e      	bne.n	8017e36 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0xa2>
 8017dd8:	2300      	movs	r3, #0
 8017dda:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8017eb8 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0x124>
 8017dde:	4619      	mov	r1, r3
 8017de0:	e00c      	b.n	8017dfc <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0x68>
 8017de2:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
 8017de6:	eb0e 0c41 	add.w	ip, lr, r1, lsl #1
 8017dea:	2700      	movs	r7, #0
 8017dec:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 8017df0:	45b9      	cmp	r9, r7
 8017df2:	eb07 0801 	add.w	r8, r7, r1
 8017df6:	dc13      	bgt.n	8017e20 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0x8c>
 8017df8:	3301      	adds	r3, #1
 8017dfa:	4641      	mov	r1, r8
 8017dfc:	88e6      	ldrh	r6, [r4, #6]
 8017dfe:	429e      	cmp	r6, r3
 8017e00:	dcef      	bgt.n	8017de2 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0x4e>
 8017e02:	4c2c      	ldr	r4, [pc, #176]	; (8017eb4 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0x120>)
 8017e04:	482c      	ldr	r0, [pc, #176]	; (8017eb8 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0x124>)
 8017e06:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8017e0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017e0e:	62a5      	str	r5, [r4, #40]	; 0x28
 8017e10:	0049      	lsls	r1, r1, #1
 8017e12:	61a3      	str	r3, [r4, #24]
 8017e14:	f002 f946 	bl	801a0a4 <gd32_spi_writenb(char const*, unsigned int)>
 8017e18:	61a5      	str	r5, [r4, #24]
 8017e1a:	b003      	add	sp, #12
 8017e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e20:	f016 0f80 	tst.w	r6, #128	; 0x80
 8017e24:	bf14      	ite	ne
 8017e26:	4690      	movne	r8, r2
 8017e28:	4680      	moveq	r8, r0
 8017e2a:	0076      	lsls	r6, r6, #1
 8017e2c:	f82c 8b02 	strh.w	r8, [ip], #2
 8017e30:	b2b6      	uxth	r6, r6
 8017e32:	3701      	adds	r7, #1
 8017e34:	e7da      	b.n	8017dec <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0x58>
 8017e36:	2b0f      	cmp	r3, #15
 8017e38:	f04f 0300 	mov.w	r3, #0
 8017e3c:	f8df e078 	ldr.w	lr, [pc, #120]	; 8017eb8 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0x124>
 8017e40:	4619      	mov	r1, r3
 8017e42:	d91d      	bls.n	8017e80 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0xec>
 8017e44:	88e6      	ldrh	r6, [r4, #6]
 8017e46:	429e      	cmp	r6, r3
 8017e48:	dddb      	ble.n	8017e02 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0x6e>
 8017e4a:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
 8017e4e:	eb0e 0c41 	add.w	ip, lr, r1, lsl #1
 8017e52:	2600      	movs	r6, #0
 8017e54:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 8017e58:	45b1      	cmp	r9, r6
 8017e5a:	eb06 0801 	add.w	r8, r6, r1
 8017e5e:	dc1e      	bgt.n	8017e9e <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0x10a>
 8017e60:	3301      	adds	r3, #1
 8017e62:	4641      	mov	r1, r8
 8017e64:	e7ee      	b.n	8017e44 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0xb0>
 8017e66:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
 8017e6a:	eb0e 0c41 	add.w	ip, lr, r1, lsl #1
 8017e6e:	2700      	movs	r7, #0
 8017e70:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 8017e74:	45b9      	cmp	r9, r7
 8017e76:	eb07 0801 	add.w	r8, r7, r1
 8017e7a:	dc05      	bgt.n	8017e88 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0xf4>
 8017e7c:	3301      	adds	r3, #1
 8017e7e:	4641      	mov	r1, r8
 8017e80:	88e6      	ldrh	r6, [r4, #6]
 8017e82:	429e      	cmp	r6, r3
 8017e84:	dcef      	bgt.n	8017e66 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0xd2>
 8017e86:	e7bc      	b.n	8017e02 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0x6e>
 8017e88:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8017e8c:	bf14      	ite	ne
 8017e8e:	4690      	movne	r8, r2
 8017e90:	4680      	moveq	r8, r0
 8017e92:	0076      	lsls	r6, r6, #1
 8017e94:	f82c 8b02 	strh.w	r8, [ip], #2
 8017e98:	b2b6      	uxth	r6, r6
 8017e9a:	3701      	adds	r7, #1
 8017e9c:	e7e8      	b.n	8017e70 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0xdc>
 8017e9e:	f017 0f01 	tst.w	r7, #1
 8017ea2:	bf14      	ite	ne
 8017ea4:	4690      	movne	r8, r2
 8017ea6:	4680      	moveq	r8, r0
 8017ea8:	f82c 8b02 	strh.w	r8, [ip], #2
 8017eac:	087f      	lsrs	r7, r7, #1
 8017eae:	3601      	adds	r6, #1
 8017eb0:	e7d0      	b.n	8017e54 <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0xc0>
 8017eb2:	bf00      	nop
 8017eb4:	40020000 	andmi	r0, r2, r0
 8017eb8:	2000fcbc 			; <UNDEFINED> instruction: 0x2000fcbc

08017ebc <console_putc>:
 8017ebc:	f000 bbba 	b.w	8018634 <uart0_putc>

08017ec0 <console_puts>:
 8017ec0:	f000 bbd2 	b.w	8018668 <uart0_puts>

08017ec4 <console_set_fg_color>:
 8017ec4:	2807      	cmp	r0, #7
 8017ec6:	d810      	bhi.n	8017eea <console_set_fg_color+0x26>
 8017ec8:	e8df f000 	tbb	[pc, r0]
 8017ecc:	0b090704 	bleq	8259ae4 <__exidx_end+0x23aa58>
 8017ed0:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8017e9c <Paint::DrawChar(unsigned short, unsigned short, char, _tFont*, unsigned short, unsigned short)+0x108>
 8017ed4:	4806      	ldr	r0, [pc, #24]	; (8017ef0 <console_set_fg_color+0x2c>)
 8017ed6:	f000 bbc7 	b.w	8018668 <uart0_puts>
 8017eda:	4806      	ldr	r0, [pc, #24]	; (8017ef4 <console_set_fg_color+0x30>)
 8017edc:	e7fb      	b.n	8017ed6 <console_set_fg_color+0x12>
 8017ede:	4806      	ldr	r0, [pc, #24]	; (8017ef8 <console_set_fg_color+0x34>)
 8017ee0:	e7f9      	b.n	8017ed6 <console_set_fg_color+0x12>
 8017ee2:	4806      	ldr	r0, [pc, #24]	; (8017efc <console_set_fg_color+0x38>)
 8017ee4:	e7f7      	b.n	8017ed6 <console_set_fg_color+0x12>
 8017ee6:	4806      	ldr	r0, [pc, #24]	; (8017f00 <console_set_fg_color+0x3c>)
 8017ee8:	e7f5      	b.n	8017ed6 <console_set_fg_color+0x12>
 8017eea:	4806      	ldr	r0, [pc, #24]	; (8017f04 <console_set_fg_color+0x40>)
 8017eec:	e7f3      	b.n	8017ed6 <console_set_fg_color+0x12>
 8017eee:	bf00      	nop
 8017ef0:	0801ef96 	stmdaeq	r1, {r1, r2, r4, r7, r8, r9, sl, fp, sp, lr, pc}
 8017ef4:	0801ef9c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, fp, sp, lr, pc}
 8017ef8:	0801efa2 	stmdaeq	r1, {r1, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 8017efc:	0801efa8 	stmdaeq	r1, {r3, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 8017f00:	0801abfa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, r9, fp, sp, pc}
 8017f04:	0801efae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, r9, sl, fp, sp, lr, pc}

08017f08 <console_error>:
 8017f08:	b510      	push	{r4, lr}
 8017f0a:	4604      	mov	r4, r0
 8017f0c:	4805      	ldr	r0, [pc, #20]	; (8017f24 <console_error+0x1c>)
 8017f0e:	f000 fbab 	bl	8018668 <uart0_puts>
 8017f12:	4620      	mov	r0, r4
 8017f14:	f000 fba8 	bl	8018668 <uart0_puts>
 8017f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f1c:	4802      	ldr	r0, [pc, #8]	; (8017f28 <console_error+0x20>)
 8017f1e:	f000 bba3 	b.w	8018668 <uart0_puts>
 8017f22:	bf00      	nop
 8017f24:	0801ef9c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, fp, sp, lr, pc}
 8017f28:	0801abfa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, r9, fp, sp, pc}

08017f2c <console_status>:
 8017f2c:	b510      	push	{r4, lr}
 8017f2e:	b280      	uxth	r0, r0
 8017f30:	460c      	mov	r4, r1
 8017f32:	f7ff ffc7 	bl	8017ec4 <console_set_fg_color>
 8017f36:	4807      	ldr	r0, [pc, #28]	; (8017f54 <console_status+0x28>)
 8017f38:	f000 fb96 	bl	8018668 <uart0_puts>
 8017f3c:	4620      	mov	r0, r4
 8017f3e:	f000 fb93 	bl	8018668 <uart0_puts>
 8017f42:	200a      	movs	r0, #10
 8017f44:	f000 fb76 	bl	8018634 <uart0_putc>
 8017f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f4c:	4802      	ldr	r0, [pc, #8]	; (8017f58 <console_status+0x2c>)
 8017f4e:	f000 bb8b 	b.w	8018668 <uart0_puts>
 8017f52:	bf00      	nop
 8017f54:	0801ef90 	stmdaeq	r1, {r4, r7, r8, r9, sl, fp, sp, lr, pc}
 8017f58:	0801abfa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, r9, fp, sp, pc}

08017f5c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8017f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f60:	4d15      	ldr	r5, [pc, #84]	; (8017fb8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8017f62:	461e      	mov	r6, r3
 8017f64:	4b15      	ldr	r3, [pc, #84]	; (8017fbc <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8017f66:	b086      	sub	sp, #24
 8017f68:	6018      	str	r0, [r3, #0]
 8017f6a:	4604      	mov	r4, r0
 8017f6c:	4617      	mov	r7, r2
 8017f6e:	f105 0803 	add.w	r8, r5, #3
 8017f72:	2203      	movs	r2, #3
 8017f74:	4628      	mov	r0, r5
 8017f76:	f000 fa22 	bl	80183be <memmove>
 8017f7a:	4639      	mov	r1, r7
 8017f7c:	220b      	movs	r2, #11
 8017f7e:	4640      	mov	r0, r8
 8017f80:	f000 fa1d 	bl	80183be <memmove>
 8017f84:	f105 030e 	add.w	r3, r5, #14
 8017f88:	4631      	mov	r1, r6
 8017f8a:	2208      	movs	r2, #8
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f000 fa16 	bl	80183be <memmove>
 8017f92:	2308      	movs	r3, #8
 8017f94:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8017f98:	230b      	movs	r3, #11
 8017f9a:	9302      	str	r3, [sp, #8]
 8017f9c:	4b08      	ldr	r3, [pc, #32]	; (8017fc0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8017f9e:	9005      	str	r0, [sp, #20]
 8017fa0:	e9cd 5300 	strd	r5, r3, [sp]
 8017fa4:	4a07      	ldr	r2, [pc, #28]	; (8017fc4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8017fa6:	4808      	ldr	r0, [pc, #32]	; (8017fc8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8017fa8:	2303      	movs	r3, #3
 8017faa:	213f      	movs	r1, #63	; 0x3f
 8017fac:	f7f2 fa9c 	bl	800a4e8 <snprintf>
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	b006      	add	sp, #24
 8017fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fb8:	2001061c 	andcs	r0, r1, ip, lsl r6
 8017fbc:	20010674 	andcs	r0, r1, r4, ror r6
 8017fc0:	0801b506 	stmdaeq	r1, {r1, r2, r8, sl, ip, sp, pc}
 8017fc4:	0801efb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 8017fc8:	20010632 	andcs	r0, r1, r2, lsr r6

08017fcc <FirmwareVersion::Print(char const*)>:
 8017fcc:	b510      	push	{r4, lr}
 8017fce:	4805      	ldr	r0, [pc, #20]	; (8017fe4 <FirmwareVersion::Print(char const*)+0x18>)
 8017fd0:	460c      	mov	r4, r1
 8017fd2:	f000 fa2c 	bl	801842e <puts>
 8017fd6:	b124      	cbz	r4, 8017fe2 <FirmwareVersion::Print(char const*)+0x16>
 8017fd8:	4620      	mov	r0, r4
 8017fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fde:	f000 ba26 	b.w	801842e <puts>
 8017fe2:	bd10      	pop	{r4, pc}
 8017fe4:	20010632 	andcs	r0, r1, r2, lsr r6

08017fe8 <LedBlink::LedBlink()>:
 8017fe8:	b538      	push	{r3, r4, r5, lr}
 8017fea:	2500      	movs	r5, #0
 8017fec:	2305      	movs	r3, #5
 8017fee:	e9c0 5300 	strd	r5, r3, [r0]
 8017ff2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8017ff6:	e9c0 3503 	strd	r3, r5, [r0, #12]
 8017ffa:	4b0d      	ldr	r3, [pc, #52]	; (8018030 <LedBlink::LedBlink()+0x48>)
 8017ffc:	6085      	str	r5, [r0, #8]
 8017ffe:	4604      	mov	r4, r0
 8018000:	6145      	str	r5, [r0, #20]
 8018002:	6018      	str	r0, [r3, #0]
 8018004:	f640 4002 	movw	r0, #3074	; 0xc02
 8018008:	f001 f966 	bl	80192d8 <rcu_periph_clock_enable>
 801800c:	2301      	movs	r3, #1
 801800e:	462a      	mov	r2, r5
 8018010:	4619      	mov	r1, r3
 8018012:	4808      	ldr	r0, [pc, #32]	; (8018034 <LedBlink::LedBlink()+0x4c>)
 8018014:	f001 f8e4 	bl	80191e0 <gpio_mode_set>
 8018018:	4806      	ldr	r0, [pc, #24]	; (8018034 <LedBlink::LedBlink()+0x4c>)
 801801a:	2301      	movs	r3, #1
 801801c:	2202      	movs	r2, #2
 801801e:	4629      	mov	r1, r5
 8018020:	f001 f8fe 	bl	8019220 <gpio_output_options_set>
 8018024:	4b04      	ldr	r3, [pc, #16]	; (8018038 <LedBlink::LedBlink()+0x50>)
 8018026:	2201      	movs	r2, #1
 8018028:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 801802c:	4620      	mov	r0, r4
 801802e:	bd38      	pop	{r3, r4, r5, pc}
 8018030:	20010678 	andcs	r0, r1, r8, ror r6
 8018034:	40020800 	andmi	r0, r2, r0, lsl #16
 8018038:	40020000 	andmi	r0, r2, r0

0801803c <LedBlink::SetMode(ledblink::Mode)>:
 801803c:	6843      	ldr	r3, [r0, #4]
 801803e:	428b      	cmp	r3, r1
 8018040:	d02b      	beq.n	801809a <LedBlink::SetMode(ledblink::Mode)+0x5e>
 8018042:	6041      	str	r1, [r0, #4]
 8018044:	2904      	cmp	r1, #4
 8018046:	d820      	bhi.n	801808a <LedBlink::SetMode(ledblink::Mode)+0x4e>
 8018048:	e8df f001 	tbb	[pc, r1]
 801804c:	1610031f 			; <UNDEFINED> instruction: 0x1610031f
 8018050:	23ff001b 	mvnscs	r0, #27
 8018054:	6003      	str	r3, [r0, #0]
 8018056:	2300      	movs	r3, #0
 8018058:	60c3      	str	r3, [r0, #12]
 801805a:	4b10      	ldr	r3, [pc, #64]	; (801809c <LedBlink::SetMode(ledblink::Mode)+0x60>)
 801805c:	2201      	movs	r2, #1
 801805e:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8018062:	6880      	ldr	r0, [r0, #8]
 8018064:	b1c8      	cbz	r0, 801809a <LedBlink::SetMode(ledblink::Mode)+0x5e>
 8018066:	6803      	ldr	r3, [r0, #0]
 8018068:	689b      	ldr	r3, [r3, #8]
 801806a:	4718      	bx	r3
 801806c:	2301      	movs	r3, #1
 801806e:	6003      	str	r3, [r0, #0]
 8018070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018074:	60c3      	str	r3, [r0, #12]
 8018076:	e7f4      	b.n	8018062 <LedBlink::SetMode(ledblink::Mode)+0x26>
 8018078:	2303      	movs	r3, #3
 801807a:	6003      	str	r3, [r0, #0]
 801807c:	f240 134d 	movw	r3, #333	; 0x14d
 8018080:	e7f8      	b.n	8018074 <LedBlink::SetMode(ledblink::Mode)+0x38>
 8018082:	2305      	movs	r3, #5
 8018084:	6003      	str	r3, [r0, #0]
 8018086:	23c8      	movs	r3, #200	; 0xc8
 8018088:	e7f4      	b.n	8018074 <LedBlink::SetMode(ledblink::Mode)+0x38>
 801808a:	2300      	movs	r3, #0
 801808c:	6003      	str	r3, [r0, #0]
 801808e:	60c3      	str	r3, [r0, #12]
 8018090:	4b02      	ldr	r3, [pc, #8]	; (801809c <LedBlink::SetMode(ledblink::Mode)+0x60>)
 8018092:	2201      	movs	r2, #1
 8018094:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
 8018098:	e7e3      	b.n	8018062 <LedBlink::SetMode(ledblink::Mode)+0x26>
 801809a:	4770      	bx	lr
 801809c:	40020000 	andmi	r0, r2, r0

080180a0 <Hardware::Hardware()>:
 80180a0:	b530      	push	{r4, r5, lr}
 80180a2:	4b31      	ldr	r3, [pc, #196]	; (8018168 <Hardware::Hardware()+0xc8>)
 80180a4:	2400      	movs	r4, #0
 80180a6:	b091      	sub	sp, #68	; 0x44
 80180a8:	7004      	strb	r4, [r0, #0]
 80180aa:	6018      	str	r0, [r3, #0]
 80180ac:	4605      	mov	r5, r0
 80180ae:	f7f0 fa49 	bl	8008544 <console_init>
 80180b2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80180b6:	f001 f93b 	bl	8019330 <rcu_timer_clock_prescaler_config>
 80180ba:	f000 fae5 	bl	8018688 <systick_config>
 80180be:	f002 f9ed 	bl	801a49c <udelay_init()>
 80180c2:	f002 f9cb 	bl	801a45c <micros_init()>
 80180c6:	f241 001c 	movw	r0, #4124	; 0x101c
 80180ca:	f001 f905 	bl	80192d8 <rcu_periph_clock_enable>
 80180ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80180d2:	f001 f8ed 	bl	80192b0 <pmu_backup_ldo_config>
 80180d6:	f640 4012 	movw	r0, #3090	; 0xc12
 80180da:	f001 f8fd 	bl	80192d8 <rcu_periph_clock_enable>
 80180de:	f001 f8f3 	bl	80192c8 <pmu_backup_write_enable>
 80180e2:	4621      	mov	r1, r4
 80180e4:	2001      	movs	r0, #1
 80180e6:	f001 fd35 	bl	8019b54 <bkp_data_write(bkp_data_register_enum, unsigned short)>
 80180ea:	4a20      	ldr	r2, [pc, #128]	; (801816c <Hardware::Hardware()+0xcc>)
 80180ec:	4b20      	ldr	r3, [pc, #128]	; (8018170 <Hardware::Hardware()+0xd0>)
 80180ee:	1a9b      	subs	r3, r3, r2
 80180f0:	3b01      	subs	r3, #1
 80180f2:	d232      	bcs.n	801815a <Hardware::Hardware()+0xba>
 80180f4:	4b1f      	ldr	r3, [pc, #124]	; (8018174 <Hardware::Hardware()+0xd4>)
 80180f6:	4c20      	ldr	r4, [pc, #128]	; (8018178 <Hardware::Hardware()+0xd8>)
 80180f8:	2200      	movs	r2, #0
 80180fa:	1ae4      	subs	r4, r4, r3
 80180fc:	3c01      	subs	r4, #1
 80180fe:	d22f      	bcs.n	8018160 <Hardware::Hardware()+0xc0>
 8018100:	f241 0004 	movw	r0, #4100	; 0x1004
 8018104:	f001 f8e8 	bl	80192d8 <rcu_periph_clock_enable>
 8018108:	481c      	ldr	r0, [pc, #112]	; (801817c <Hardware::Hardware()+0xdc>)
 801810a:	f001 f9a1 	bl	8019450 <timer_deinit>
 801810e:	a903      	add	r1, sp, #12
 8018110:	23c7      	movs	r3, #199	; 0xc7
 8018112:	481a      	ldr	r0, [pc, #104]	; (801817c <Hardware::Hardware()+0xdc>)
 8018114:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018118:	9405      	str	r4, [sp, #20]
 801811a:	f001 fa3f 	bl	801959c <timer_init>
 801811e:	4817      	ldr	r0, [pc, #92]	; (801817c <Hardware::Hardware()+0xdc>)
 8018120:	f001 fa7a 	bl	8019618 <timer_enable>
 8018124:	f001 fd28 	bl	8019b78 <gd32_adc_init()>
 8018128:	2208      	movs	r2, #8
 801812a:	230b      	movs	r3, #11
 801812c:	2400      	movs	r4, #0
 801812e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018132:	a807      	add	r0, sp, #28
 8018134:	237a      	movs	r3, #122	; 0x7a
 8018136:	930c      	str	r3, [sp, #48]	; 0x30
 8018138:	e9cd 4408 	strd	r4, r4, [sp, #32]
 801813c:	9407      	str	r4, [sp, #28]
 801813e:	940f      	str	r4, [sp, #60]	; 0x3c
 8018140:	f000 f9ce 	bl	80184e0 <mktime>
 8018144:	4621      	mov	r1, r4
 8018146:	e9cd 0401 	strd	r0, r4, [sp, #4]
 801814a:	a801      	add	r0, sp, #4
 801814c:	f000 fa3e 	bl	80185cc <settimeofday>
 8018150:	f001 fd72 	bl	8019c38 <gd32_i2c_begin>
 8018154:	4628      	mov	r0, r5
 8018156:	b011      	add	sp, #68	; 0x44
 8018158:	bd30      	pop	{r4, r5, pc}
 801815a:	f802 4b01 	strb.w	r4, [r2], #1
 801815e:	e7c7      	b.n	80180f0 <Hardware::Hardware()+0x50>
 8018160:	f803 2b01 	strb.w	r2, [r3], #1
 8018164:	e7ca      	b.n	80180fc <Hardware::Hardware()+0x5c>
 8018166:	bf00      	nop
 8018168:	2001067c 	andcs	r0, r1, ip, ror r6
 801816c:	10000000 	andne	r0, r0, r0
 8018170:	100014b8 			; <UNDEFINED> instruction: 0x100014b8
 8018174:	20030000 	andcs	r0, r3, r0
 8018178:	20048d08 	andcs	r8, r4, r8, lsl #26
 801817c:	40001000 	andmi	r1, r0, r0

08018180 <Hardware::GetUuid(unsigned char*)>:
 8018180:	4a0c      	ldr	r2, [pc, #48]	; (80181b4 <Hardware::GetUuid(unsigned char*)+0x34>)
 8018182:	b084      	sub	sp, #16
 8018184:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	; 0xa10
 8018188:	9300      	str	r3, [sp, #0]
 801818a:	f8d2 0a14 	ldr.w	r0, [r2, #2580]	; 0xa14
 801818e:	9001      	str	r0, [sp, #4]
 8018190:	f8d2 2a18 	ldr.w	r2, [r2, #2584]	; 0xa18
 8018194:	9202      	str	r2, [sp, #8]
 8018196:	4403      	add	r3, r0
 8018198:	4413      	add	r3, r2
 801819a:	9303      	str	r3, [sp, #12]
 801819c:	466a      	mov	r2, sp
 801819e:	1e4b      	subs	r3, r1, #1
 80181a0:	310f      	adds	r1, #15
 80181a2:	428b      	cmp	r3, r1
 80181a4:	d101      	bne.n	80181aa <Hardware::GetUuid(unsigned char*)+0x2a>
 80181a6:	b004      	add	sp, #16
 80181a8:	4770      	bx	lr
 80181aa:	f812 0b01 	ldrb.w	r0, [r2], #1
 80181ae:	f803 0f01 	strb.w	r0, [r3, #1]!
 80181b2:	e7f6      	b.n	80181a2 <Hardware::GetUuid(unsigned char*)+0x22>
 80181b4:	1fff7000 	svcne	0x00ff7000

080181b8 <Hardware::SetTime(tm const*)>:
 80181b8:	2000      	movs	r0, #0
 80181ba:	4770      	bx	lr

080181bc <Hardware::Reboot()>:
 80181bc:	b508      	push	{r3, lr}
 80181be:	2300      	movs	r3, #0
 80181c0:	7003      	strb	r3, [r0, #0]
 80181c2:	4604      	mov	r4, r0
 80181c4:	2104      	movs	r1, #4
 80181c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80181ca:	f000 ffdf 	bl	801918c <fwdgt_config>
 80181ce:	4620      	mov	r0, r4
 80181d0:	f7f1 f9c8 	bl	8009564 <Hardware::RebootHandler()>
 80181d4:	2102      	movs	r1, #2
 80181d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80181da:	f000 ffd7 	bl	801918c <fwdgt_config>
 80181de:	2801      	cmp	r0, #1
 80181e0:	bf0c      	ite	eq
 80181e2:	2301      	moveq	r3, #1
 80181e4:	2300      	movne	r3, #0
 80181e6:	7023      	strb	r3, [r4, #0]
 80181e8:	d101      	bne.n	80181ee <Hardware::Reboot()+0x32>
 80181ea:	f000 ffbf 	bl	801916c <fwdgt_enable>
 80181ee:	4b0f      	ldr	r3, [pc, #60]	; (801822c <Hardware::Reboot()+0x70>)
 80181f0:	480f      	ldr	r0, [pc, #60]	; (8018230 <Hardware::Reboot()+0x74>)
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	490f      	ldr	r1, [pc, #60]	; (8018234 <Hardware::Reboot()+0x78>)
 80181f6:	2208      	movs	r2, #8
 80181f8:	601a      	str	r2, [r3, #0]
 80181fa:	227d      	movs	r2, #125	; 0x7d
 80181fc:	60da      	str	r2, [r3, #12]
 80181fe:	2501      	movs	r5, #1
 8018200:	68dc      	ldr	r4, [r3, #12]
 8018202:	b904      	cbnz	r4, 8018206 <Hardware::Reboot()+0x4a>
 8018204:	e7fe      	b.n	8018204 <Hardware::Reboot()+0x48>
 8018206:	6802      	ldr	r2, [r0, #0]
 8018208:	695e      	ldr	r6, [r3, #20]
 801820a:	1b92      	subs	r2, r2, r6
 801820c:	4294      	cmp	r4, r2
 801820e:	d8f8      	bhi.n	8018202 <Hardware::Reboot()+0x46>
 8018210:	6802      	ldr	r2, [r0, #0]
 8018212:	615a      	str	r2, [r3, #20]
 8018214:	691a      	ldr	r2, [r3, #16]
 8018216:	2a01      	cmp	r2, #1
 8018218:	f082 0401 	eor.w	r4, r2, #1
 801821c:	611c      	str	r4, [r3, #16]
 801821e:	bf14      	ite	ne
 8018220:	f8c1 5818 	strne.w	r5, [r1, #2072]	; 0x818
 8018224:	f8c1 2828 	streq.w	r2, [r1, #2088]	; 0x828
 8018228:	e7ea      	b.n	8018200 <Hardware::Reboot()+0x44>
 801822a:	bf00      	nop
 801822c:	20010678 	andcs	r0, r1, r8, ror r6
 8018230:	20010694 	mulcs	r1, r4, r6
 8018234:	40020000 	andmi	r0, r2, r0

08018238 <operator delete(void*)>:
 8018238:	f000 b890 	b.w	801835c <free>

0801823c <operator delete[](void*)>:
 801823c:	f000 b88e 	b.w	801835c <free>

08018240 <operator new(unsigned int)>:
 8018240:	f000 b842 	b.w	80182c8 <malloc>

08018244 <operator new[](unsigned int)>:
 8018244:	f000 b840 	b.w	80182c8 <malloc>

08018248 <inet_aton>:
 8018248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801824a:	f04f 0c0a 	mov.w	ip, #10
 801824e:	ae01      	add	r6, sp, #4
 8018250:	2500      	movs	r5, #0
 8018252:	4603      	mov	r3, r0
 8018254:	1d07      	adds	r7, r0, #4
 8018256:	2200      	movs	r2, #0
 8018258:	e007      	b.n	801826a <inet_aton+0x22>
 801825a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801825e:	2b09      	cmp	r3, #9
 8018260:	d820      	bhi.n	80182a4 <inet_aton+0x5c>
 8018262:	fb0c 4202 	mla	r2, ip, r2, r4
 8018266:	3a30      	subs	r2, #48	; 0x30
 8018268:	4603      	mov	r3, r0
 801826a:	4618      	mov	r0, r3
 801826c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8018270:	2c2e      	cmp	r4, #46	; 0x2e
 8018272:	d111      	bne.n	8018298 <inet_aton+0x50>
 8018274:	3501      	adds	r5, #1
 8018276:	2d03      	cmp	r5, #3
 8018278:	f806 2b01 	strb.w	r2, [r6], #1
 801827c:	d1e9      	bne.n	8018252 <inet_aton+0xa>
 801827e:	1d1c      	adds	r4, r3, #4
 8018280:	2200      	movs	r2, #0
 8018282:	250a      	movs	r5, #10
 8018284:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8018288:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 801828c:	d10d      	bne.n	80182aa <inet_aton+0x62>
 801828e:	f88d 2007 	strb.w	r2, [sp, #7]
 8018292:	b9b1      	cbnz	r1, 80182c2 <inet_aton+0x7a>
 8018294:	2001      	movs	r0, #1
 8018296:	e006      	b.n	80182a6 <inet_aton+0x5e>
 8018298:	2c00      	cmp	r4, #0
 801829a:	d0eb      	beq.n	8018274 <inet_aton+0x2c>
 801829c:	2c0a      	cmp	r4, #10
 801829e:	d0e9      	beq.n	8018274 <inet_aton+0x2c>
 80182a0:	42b8      	cmp	r0, r7
 80182a2:	d1da      	bne.n	801825a <inet_aton+0x12>
 80182a4:	2000      	movs	r0, #0
 80182a6:	b003      	add	sp, #12
 80182a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182aa:	280a      	cmp	r0, #10
 80182ac:	d0ef      	beq.n	801828e <inet_aton+0x46>
 80182ae:	42a3      	cmp	r3, r4
 80182b0:	d0f8      	beq.n	80182a4 <inet_aton+0x5c>
 80182b2:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 80182b6:	2e09      	cmp	r6, #9
 80182b8:	d8f4      	bhi.n	80182a4 <inet_aton+0x5c>
 80182ba:	fb05 0202 	mla	r2, r5, r2, r0
 80182be:	3a30      	subs	r2, #48	; 0x30
 80182c0:	e7e0      	b.n	8018284 <inet_aton+0x3c>
 80182c2:	9b01      	ldr	r3, [sp, #4]
 80182c4:	600b      	str	r3, [r1, #0]
 80182c6:	e7e5      	b.n	8018294 <inet_aton+0x4c>

080182c8 <malloc>:
 80182c8:	b538      	push	{r3, r4, r5, lr}
 80182ca:	4601      	mov	r1, r0
 80182cc:	4604      	mov	r4, r0
 80182ce:	481c      	ldr	r0, [pc, #112]	; (8018340 <malloc+0x78>)
 80182d0:	f7f2 f8e2 	bl	800a498 <printf>
 80182d4:	b17c      	cbz	r4, 80182f6 <malloc+0x2e>
 80182d6:	4b1b      	ldr	r3, [pc, #108]	; (8018344 <malloc+0x7c>)
 80182d8:	6818      	ldr	r0, [r3, #0]
 80182da:	b978      	cbnz	r0, 80182fc <malloc+0x34>
 80182dc:	4a1a      	ldr	r2, [pc, #104]	; (8018348 <malloc+0x80>)
 80182de:	481b      	ldr	r0, [pc, #108]	; (801834c <malloc+0x84>)
 80182e0:	6811      	ldr	r1, [r2, #0]
 80182e2:	f104 031b 	add.w	r3, r4, #27
 80182e6:	f023 030f 	bic.w	r3, r3, #15
 80182ea:	440b      	add	r3, r1
 80182ec:	4283      	cmp	r3, r0
 80182ee:	d921      	bls.n	8018334 <malloc+0x6c>
 80182f0:	4817      	ldr	r0, [pc, #92]	; (8018350 <malloc+0x88>)
 80182f2:	f7f2 f8d1 	bl	800a498 <printf>
 80182f6:	2500      	movs	r5, #0
 80182f8:	4628      	mov	r0, r5
 80182fa:	bd38      	pop	{r3, r4, r5, pc}
 80182fc:	4284      	cmp	r4, r0
 80182fe:	d80a      	bhi.n	8018316 <malloc+0x4e>
 8018300:	685a      	ldr	r2, [r3, #4]
 8018302:	6899      	ldr	r1, [r3, #8]
 8018304:	3201      	adds	r2, #1
 8018306:	428a      	cmp	r2, r1
 8018308:	605a      	str	r2, [r3, #4]
 801830a:	d900      	bls.n	801830e <malloc+0x46>
 801830c:	609a      	str	r2, [r3, #8]
 801830e:	68d9      	ldr	r1, [r3, #12]
 8018310:	b919      	cbnz	r1, 801831a <malloc+0x52>
 8018312:	4604      	mov	r4, r0
 8018314:	e7e2      	b.n	80182dc <malloc+0x14>
 8018316:	3310      	adds	r3, #16
 8018318:	e7de      	b.n	80182d8 <malloc+0x10>
 801831a:	688a      	ldr	r2, [r1, #8]
 801831c:	60da      	str	r2, [r3, #12]
 801831e:	4604      	mov	r4, r0
 8018320:	2300      	movs	r3, #0
 8018322:	f101 050c 	add.w	r5, r1, #12
 8018326:	608b      	str	r3, [r1, #8]
 8018328:	4622      	mov	r2, r4
 801832a:	462b      	mov	r3, r5
 801832c:	4809      	ldr	r0, [pc, #36]	; (8018354 <malloc+0x8c>)
 801832e:	f7f2 f8b3 	bl	800a498 <printf>
 8018332:	e7e1      	b.n	80182f8 <malloc+0x30>
 8018334:	6013      	str	r3, [r2, #0]
 8018336:	4b08      	ldr	r3, [pc, #32]	; (8018358 <malloc+0x90>)
 8018338:	e9c1 3400 	strd	r3, r4, [r1]
 801833c:	e7f0      	b.n	8018320 <malloc+0x58>
 801833e:	bf00      	nop
 8018340:	0801efd8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8018344:	2000002c 	andcs	r0, r0, ip, lsr #32
 8018348:	20000028 	andcs	r0, r0, r8, lsr #32
 801834c:	1000c000 	andne	ip, r0, r0
 8018350:	0801efe4 	stmdaeq	r1, {r2, r5, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8018354:	0801f000 	stmdaeq	r1, {ip, sp, lr, pc}
 8018358:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

0801835c <free>:
 801835c:	b538      	push	{r3, r4, r5, lr}
 801835e:	4604      	mov	r4, r0
 8018360:	b1c8      	cbz	r0, 8018396 <free+0x3a>
 8018362:	f1a0 050c 	sub.w	r5, r0, #12
 8018366:	4602      	mov	r2, r0
 8018368:	4629      	mov	r1, r5
 801836a:	480c      	ldr	r0, [pc, #48]	; (801839c <free+0x40>)
 801836c:	f7f2 f894 	bl	800a498 <printf>
 8018370:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8018374:	4b0a      	ldr	r3, [pc, #40]	; (80183a0 <free+0x44>)
 8018376:	429a      	cmp	r2, r3
 8018378:	d10d      	bne.n	8018396 <free+0x3a>
 801837a:	4b0a      	ldr	r3, [pc, #40]	; (80183a4 <free+0x48>)
 801837c:	681a      	ldr	r2, [r3, #0]
 801837e:	b152      	cbz	r2, 8018396 <free+0x3a>
 8018380:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8018384:	4291      	cmp	r1, r2
 8018386:	d107      	bne.n	8018398 <free+0x3c>
 8018388:	68da      	ldr	r2, [r3, #12]
 801838a:	f844 2c04 	str.w	r2, [r4, #-4]
 801838e:	685a      	ldr	r2, [r3, #4]
 8018390:	60dd      	str	r5, [r3, #12]
 8018392:	3a01      	subs	r2, #1
 8018394:	605a      	str	r2, [r3, #4]
 8018396:	bd38      	pop	{r3, r4, r5, pc}
 8018398:	3310      	adds	r3, #16
 801839a:	e7ef      	b.n	801837c <free+0x20>
 801839c:	0801f02b 	stmdaeq	r1, {r0, r1, r3, r5, ip, sp, lr, pc}
 80183a0:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 80183a4:	2000002c 	andcs	r0, r0, ip, lsr #32

080183a8 <memcpy>:
 80183a8:	b510      	push	{r4, lr}
 80183aa:	1e43      	subs	r3, r0, #1
 80183ac:	440a      	add	r2, r1
 80183ae:	4291      	cmp	r1, r2
 80183b0:	d100      	bne.n	80183b4 <memcpy+0xc>
 80183b2:	bd10      	pop	{r4, pc}
 80183b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80183b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80183bc:	e7f7      	b.n	80183ae <memcpy+0x6>

080183be <memmove>:
 80183be:	4288      	cmp	r0, r1
 80183c0:	b510      	push	{r4, lr}
 80183c2:	eb01 0302 	add.w	r3, r1, r2
 80183c6:	d208      	bcs.n	80183da <memmove+0x1c>
 80183c8:	1e42      	subs	r2, r0, #1
 80183ca:	4299      	cmp	r1, r3
 80183cc:	d100      	bne.n	80183d0 <memmove+0x12>
 80183ce:	bd10      	pop	{r4, pc}
 80183d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80183d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80183d8:	e7f7      	b.n	80183ca <memmove+0xc>
 80183da:	4402      	add	r2, r0
 80183dc:	4601      	mov	r1, r0
 80183de:	428a      	cmp	r2, r1
 80183e0:	d0f5      	beq.n	80183ce <memmove+0x10>
 80183e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80183e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80183ea:	e7f8      	b.n	80183de <memmove+0x20>

080183ec <memset>:
 80183ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183ee:	b1c2      	cbz	r2, 8018422 <memset+0x36>
 80183f0:	b2c9      	uxtb	r1, r1
 80183f2:	4603      	mov	r3, r0
 80183f4:	075c      	lsls	r4, r3, #29
 80183f6:	d110      	bne.n	801841a <memset+0x2e>
 80183f8:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 80183fc:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8018400:	f022 0407 	bic.w	r4, r2, #7
 8018404:	463d      	mov	r5, r7
 8018406:	441c      	add	r4, r3
 8018408:	461e      	mov	r6, r3
 801840a:	42a6      	cmp	r6, r4
 801840c:	d10a      	bne.n	8018424 <memset+0x38>
 801840e:	441a      	add	r2, r3
 8018410:	4294      	cmp	r4, r2
 8018412:	d006      	beq.n	8018422 <memset+0x36>
 8018414:	f804 1b01 	strb.w	r1, [r4], #1
 8018418:	e7fa      	b.n	8018410 <memset+0x24>
 801841a:	3a01      	subs	r2, #1
 801841c:	f803 1b01 	strb.w	r1, [r3], #1
 8018420:	d1e8      	bne.n	80183f4 <memset+0x8>
 8018422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018424:	f846 7b08 	str.w	r7, [r6], #8
 8018428:	f846 5c04 	str.w	r5, [r6, #-4]
 801842c:	e7ed      	b.n	801840a <memset+0x1e>

0801842e <puts>:
 801842e:	b508      	push	{r3, lr}
 8018430:	f7ff fd46 	bl	8017ec0 <console_puts>
 8018434:	200a      	movs	r0, #10
 8018436:	f7ff fd41 	bl	8017ebc <console_putc>
 801843a:	2001      	movs	r0, #1
 801843c:	bd08      	pop	{r3, pc}
	...

08018440 <strtok>:
 8018440:	b530      	push	{r4, r5, lr}
 8018442:	b910      	cbnz	r0, 801844a <strtok+0xa>
 8018444:	4b12      	ldr	r3, [pc, #72]	; (8018490 <strtok+0x50>)
 8018446:	6818      	ldr	r0, [r3, #0]
 8018448:	b158      	cbz	r0, 8018462 <strtok+0x22>
 801844a:	4603      	mov	r3, r0
 801844c:	4618      	mov	r0, r3
 801844e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018452:	460d      	mov	r5, r1
 8018454:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018458:	b924      	cbnz	r4, 8018464 <strtok+0x24>
 801845a:	b94a      	cbnz	r2, 8018470 <strtok+0x30>
 801845c:	4b0c      	ldr	r3, [pc, #48]	; (8018490 <strtok+0x50>)
 801845e:	4610      	mov	r0, r2
 8018460:	601a      	str	r2, [r3, #0]
 8018462:	bd30      	pop	{r4, r5, pc}
 8018464:	42a2      	cmp	r2, r4
 8018466:	d1f5      	bne.n	8018454 <strtok+0x14>
 8018468:	e7f0      	b.n	801844c <strtok+0xc>
 801846a:	4613      	mov	r3, r2
 801846c:	e00c      	b.n	8018488 <strtok+0x48>
 801846e:	b914      	cbnz	r4, 8018476 <strtok+0x36>
 8018470:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018474:	460d      	mov	r5, r1
 8018476:	f815 4b01 	ldrb.w	r4, [r5], #1
 801847a:	42a2      	cmp	r2, r4
 801847c:	d1f7      	bne.n	801846e <strtok+0x2e>
 801847e:	2a00      	cmp	r2, #0
 8018480:	d0f3      	beq.n	801846a <strtok+0x2a>
 8018482:	2200      	movs	r2, #0
 8018484:	f803 2c01 	strb.w	r2, [r3, #-1]
 8018488:	4a01      	ldr	r2, [pc, #4]	; (8018490 <strtok+0x50>)
 801848a:	6013      	str	r3, [r2, #0]
 801848c:	e7e9      	b.n	8018462 <strtok+0x22>
 801848e:	bf00      	nop
 8018490:	20010680 	andcs	r0, r1, r0, lsl #13

08018494 <isleapyear>:
 8018494:	2264      	movs	r2, #100	; 0x64
 8018496:	fb90 f3f2 	sdiv	r3, r0, r2
 801849a:	fb02 0313 	mls	r3, r2, r3, r0
 801849e:	b94b      	cbnz	r3, 80184b4 <isleapyear+0x20>
 80184a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80184a4:	fb90 f2f3 	sdiv	r2, r0, r3
 80184a8:	fb03 0012 	mls	r0, r3, r2, r0
 80184ac:	fab0 f080 	clz	r0, r0
 80184b0:	0940      	lsrs	r0, r0, #5
 80184b2:	4770      	bx	lr
 80184b4:	f010 0f03 	tst.w	r0, #3
 80184b8:	bf0c      	ite	eq
 80184ba:	2001      	moveq	r0, #1
 80184bc:	2000      	movne	r0, #0
 80184be:	4770      	bx	lr

080184c0 <getdaysofmonth>:
 80184c0:	b510      	push	{r4, lr}
 80184c2:	4604      	mov	r4, r0
 80184c4:	2c01      	cmp	r4, #1
 80184c6:	4608      	mov	r0, r1
 80184c8:	d102      	bne.n	80184d0 <getdaysofmonth+0x10>
 80184ca:	f7ff ffe3 	bl	8018494 <isleapyear>
 80184ce:	b918      	cbnz	r0, 80184d8 <getdaysofmonth+0x18>
 80184d0:	4b02      	ldr	r3, [pc, #8]	; (80184dc <getdaysofmonth+0x1c>)
 80184d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80184d6:	bd10      	pop	{r4, pc}
 80184d8:	201d      	movs	r0, #29
 80184da:	e7fc      	b.n	80184d6 <getdaysofmonth+0x16>
 80184dc:	0801f054 	stmdaeq	r1, {r2, r4, r6, ip, sp, lr, pc}

080184e0 <mktime>:
 80184e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184e4:	4604      	mov	r4, r0
 80184e6:	2800      	cmp	r0, #0
 80184e8:	d043      	beq.n	8018572 <mktime+0x92>
 80184ea:	6941      	ldr	r1, [r0, #20]
 80184ec:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 80184f0:	2b45      	cmp	r3, #69	; 0x45
 80184f2:	d83e      	bhi.n	8018572 <mktime+0x92>
 80184f4:	2600      	movs	r6, #0
 80184f6:	f240 75b2 	movw	r5, #1970	; 0x7b2
 80184fa:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 80184fe:	f240 186d 	movw	r8, #365	; 0x16d
 8018502:	42af      	cmp	r7, r5
 8018504:	da24      	bge.n	8018550 <mktime+0x70>
 8018506:	6927      	ldr	r7, [r4, #16]
 8018508:	2f0b      	cmp	r7, #11
 801850a:	d832      	bhi.n	8018572 <mktime+0x92>
 801850c:	2500      	movs	r5, #0
 801850e:	42af      	cmp	r7, r5
 8018510:	d129      	bne.n	8018566 <mktime+0x86>
 8018512:	68e5      	ldr	r5, [r4, #12]
 8018514:	2d00      	cmp	r5, #0
 8018516:	dd2c      	ble.n	8018572 <mktime+0x92>
 8018518:	4638      	mov	r0, r7
 801851a:	f7ff ffd1 	bl	80184c0 <getdaysofmonth>
 801851e:	4285      	cmp	r5, r0
 8018520:	dc27      	bgt.n	8018572 <mktime+0x92>
 8018522:	3d01      	subs	r5, #1
 8018524:	2318      	movs	r3, #24
 8018526:	4435      	add	r5, r6
 8018528:	435d      	muls	r5, r3
 801852a:	68a3      	ldr	r3, [r4, #8]
 801852c:	2b17      	cmp	r3, #23
 801852e:	d820      	bhi.n	8018572 <mktime+0x92>
 8018530:	442b      	add	r3, r5
 8018532:	213c      	movs	r1, #60	; 0x3c
 8018534:	fb01 f203 	mul.w	r2, r1, r3
 8018538:	6863      	ldr	r3, [r4, #4]
 801853a:	2b3b      	cmp	r3, #59	; 0x3b
 801853c:	d819      	bhi.n	8018572 <mktime+0x92>
 801853e:	6820      	ldr	r0, [r4, #0]
 8018540:	4413      	add	r3, r2
 8018542:	283b      	cmp	r0, #59	; 0x3b
 8018544:	fb01 f303 	mul.w	r3, r1, r3
 8018548:	d813      	bhi.n	8018572 <mktime+0x92>
 801854a:	4418      	add	r0, r3
 801854c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018550:	4628      	mov	r0, r5
 8018552:	f7ff ff9f 	bl	8018494 <isleapyear>
 8018556:	2800      	cmp	r0, #0
 8018558:	bf14      	ite	ne
 801855a:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 801855e:	4643      	moveq	r3, r8
 8018560:	441e      	add	r6, r3
 8018562:	3501      	adds	r5, #1
 8018564:	e7cd      	b.n	8018502 <mktime+0x22>
 8018566:	4628      	mov	r0, r5
 8018568:	f7ff ffaa 	bl	80184c0 <getdaysofmonth>
 801856c:	3501      	adds	r5, #1
 801856e:	4406      	add	r6, r0
 8018570:	e7cd      	b.n	801850e <mktime+0x2e>
 8018572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018576:	e7e9      	b.n	801854c <mktime+0x6c>

08018578 <gettimeofday>:
 8018578:	b538      	push	{r3, r4, r5, lr}
 801857a:	4a10      	ldr	r2, [pc, #64]	; (80185bc <gettimeofday+0x44>)
 801857c:	4b10      	ldr	r3, [pc, #64]	; (80185c0 <gettimeofday+0x48>)
 801857e:	6814      	ldr	r4, [r2, #0]
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	6013      	str	r3, [r2, #0]
 8018584:	429c      	cmp	r4, r3
 8018586:	bf2c      	ite	cs
 8018588:	1ae4      	subcs	r4, r4, r3
 801858a:	1b1c      	subcc	r4, r3, r4
 801858c:	4b0d      	ldr	r3, [pc, #52]	; (80185c4 <gettimeofday+0x4c>)
 801858e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018592:	4354      	muls	r4, r2
 8018594:	e9d3 2100 	ldrd	r2, r1, [r3]
 8018598:	18a4      	adds	r4, r4, r2
 801859a:	f141 0100 	adc.w	r1, r1, #0
 801859e:	4605      	mov	r5, r0
 80185a0:	e9c3 4100 	strd	r4, r1, [r3]
 80185a4:	4a08      	ldr	r2, [pc, #32]	; (80185c8 <gettimeofday+0x50>)
 80185a6:	2300      	movs	r3, #0
 80185a8:	4620      	mov	r0, r4
 80185aa:	f7f0 fb75 	bl	8008c98 <__aeabi_uldivmod>
 80185ae:	4b06      	ldr	r3, [pc, #24]	; (80185c8 <gettimeofday+0x50>)
 80185b0:	6028      	str	r0, [r5, #0]
 80185b2:	fb03 4410 	mls	r4, r3, r0, r4
 80185b6:	606c      	str	r4, [r5, #4]
 80185b8:	2000      	movs	r0, #0
 80185ba:	bd38      	pop	{r3, r4, r5, pc}
 80185bc:	20010690 	mulcs	r1, r0, r6
 80185c0:	20010694 	mulcs	r1, r4, r6
 80185c4:	20010688 	andcs	r0, r1, r8, lsl #13
 80185c8:	000f4240 	andeq	r4, pc, r0, asr #4

080185cc <settimeofday>:
 80185cc:	4b07      	ldr	r3, [pc, #28]	; (80185ec <settimeofday+0x20>)
 80185ce:	4908      	ldr	r1, [pc, #32]	; (80185f0 <settimeofday+0x24>)
 80185d0:	681a      	ldr	r2, [r3, #0]
 80185d2:	4b08      	ldr	r3, [pc, #32]	; (80185f4 <settimeofday+0x28>)
 80185d4:	b510      	push	{r4, lr}
 80185d6:	601a      	str	r2, [r3, #0]
 80185d8:	6843      	ldr	r3, [r0, #4]
 80185da:	6804      	ldr	r4, [r0, #0]
 80185dc:	4806      	ldr	r0, [pc, #24]	; (80185f8 <settimeofday+0x2c>)
 80185de:	17da      	asrs	r2, r3, #31
 80185e0:	fbc4 3200 	smlal	r3, r2, r4, r0
 80185e4:	e9c1 3200 	strd	r3, r2, [r1]
 80185e8:	2000      	movs	r0, #0
 80185ea:	bd10      	pop	{r4, pc}
 80185ec:	20010694 	mulcs	r1, r4, r6
 80185f0:	20010688 	andcs	r0, r1, r8, lsl #13
 80185f4:	20010690 	mulcs	r1, r0, r6
 80185f8:	000f4240 	andeq	r4, pc, r0, asr #4

080185fc <time>:
 80185fc:	b513      	push	{r0, r1, r4, lr}
 80185fe:	4604      	mov	r4, r0
 8018600:	2100      	movs	r1, #0
 8018602:	4668      	mov	r0, sp
 8018604:	f7ff ffb8 	bl	8018578 <gettimeofday>
 8018608:	9800      	ldr	r0, [sp, #0]
 801860a:	b104      	cbz	r4, 801860e <time+0x12>
 801860c:	6020      	str	r0, [r4, #0]
 801860e:	b002      	add	sp, #8
 8018610:	bd10      	pop	{r4, pc}
	...

08018614 <uart0_init>:
 8018614:	b507      	push	{r0, r1, r2, lr}
 8018616:	2301      	movs	r3, #1
 8018618:	9300      	str	r3, [sp, #0]
 801861a:	4805      	ldr	r0, [pc, #20]	; (8018630 <uart0_init+0x1c>)
 801861c:	2300      	movs	r3, #0
 801861e:	2208      	movs	r2, #8
 8018620:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8018624:	f001 fe8a 	bl	801a33c <gd32_uart_begin>
 8018628:	b003      	add	sp, #12
 801862a:	f85d fb04 	ldr.w	pc, [sp], #4
 801862e:	bf00      	nop
 8018630:	40011000 	andmi	r1, r1, r0

08018634 <uart0_putc>:
 8018634:	280a      	cmp	r0, #10
 8018636:	b570      	push	{r4, r5, r6, lr}
 8018638:	4d0a      	ldr	r5, [pc, #40]	; (8018664 <uart0_putc+0x30>)
 801863a:	4604      	mov	r4, r0
 801863c:	d107      	bne.n	801864e <uart0_putc+0x1a>
 801863e:	2107      	movs	r1, #7
 8018640:	4628      	mov	r0, r5
 8018642:	f001 fa3f 	bl	8019ac4 <usart_flag_get>
 8018646:	2800      	cmp	r0, #0
 8018648:	d0f9      	beq.n	801863e <uart0_putc+0xa>
 801864a:	230d      	movs	r3, #13
 801864c:	606b      	str	r3, [r5, #4]
 801864e:	4e05      	ldr	r6, [pc, #20]	; (8018664 <uart0_putc+0x30>)
 8018650:	2107      	movs	r1, #7
 8018652:	4630      	mov	r0, r6
 8018654:	f001 fa36 	bl	8019ac4 <usart_flag_get>
 8018658:	2800      	cmp	r0, #0
 801865a:	d0f9      	beq.n	8018650 <uart0_putc+0x1c>
 801865c:	b2e4      	uxtb	r4, r4
 801865e:	606c      	str	r4, [r5, #4]
 8018660:	bd70      	pop	{r4, r5, r6, pc}
 8018662:	bf00      	nop
 8018664:	40011000 	andmi	r1, r1, r0

08018668 <uart0_puts>:
 8018668:	b510      	push	{r4, lr}
 801866a:	1e44      	subs	r4, r0, #1
 801866c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018670:	b903      	cbnz	r3, 8018674 <uart0_puts+0xc>
 8018672:	bd10      	pop	{r4, pc}
 8018674:	2b0a      	cmp	r3, #10
 8018676:	d102      	bne.n	801867e <uart0_puts+0x16>
 8018678:	200d      	movs	r0, #13
 801867a:	f7ff ffdb 	bl	8018634 <uart0_putc>
 801867e:	7820      	ldrb	r0, [r4, #0]
 8018680:	f7ff ffd8 	bl	8018634 <uart0_putc>
 8018684:	e7f2      	b.n	801866c <uart0_puts+0x4>
	...

08018688 <systick_config>:
 8018688:	4b0c      	ldr	r3, [pc, #48]	; (80186bc <systick_config+0x34>)
 801868a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	fbb3 f3f2 	udiv	r3, r3, r2
 8018694:	3b01      	subs	r3, #1
 8018696:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801869a:	d20d      	bcs.n	80186b8 <systick_config+0x30>
 801869c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80186a0:	21f0      	movs	r1, #240	; 0xf0
 80186a2:	6153      	str	r3, [r2, #20]
 80186a4:	4b06      	ldr	r3, [pc, #24]	; (80186c0 <systick_config+0x38>)
 80186a6:	2007      	movs	r0, #7
 80186a8:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80186ac:	2100      	movs	r1, #0
 80186ae:	6191      	str	r1, [r2, #24]
 80186b0:	6110      	str	r0, [r2, #16]
 80186b2:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80186b6:	4770      	bx	lr
 80186b8:	e7fe      	b.n	80186b8 <systick_config+0x30>
 80186ba:	bf00      	nop
 80186bc:	200000fc 	strdcs	r0, [r0], -ip
 80186c0:	e000ed00 	and	lr, r0, r0, lsl #26

080186c4 <SysTick_Handler>:
 80186c4:	4a02      	ldr	r2, [pc, #8]	; (80186d0 <SysTick_Handler+0xc>)
 80186c6:	6813      	ldr	r3, [r2, #0]
 80186c8:	3301      	adds	r3, #1
 80186ca:	6013      	str	r3, [r2, #0]
 80186cc:	4770      	bx	lr
 80186ce:	bf00      	nop
 80186d0:	20010694 	mulcs	r1, r4, r6

080186d4 <SystemInit>:
 80186d4:	4a56      	ldr	r2, [pc, #344]	; (8018830 <SystemInit+0x15c>)
 80186d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80186da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80186de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80186e2:	4b54      	ldr	r3, [pc, #336]	; (8018834 <SystemInit+0x160>)
 80186e4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 80186e8:	f042 0201 	orr.w	r2, r2, #1
 80186ec:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 80186f0:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80186f4:	b082      	sub	sp, #8
 80186f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80186fa:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 80186fe:	2200      	movs	r2, #0
 8018700:	9201      	str	r2, [sp, #4]
 8018702:	f24c 314f 	movw	r1, #49999	; 0xc34f
 8018706:	9a01      	ldr	r2, [sp, #4]
 8018708:	428a      	cmp	r2, r1
 801870a:	d93e      	bls.n	801878a <SystemInit+0xb6>
 801870c:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8018710:	f042 0290 	orr.w	r2, r2, #144	; 0x90
 8018714:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8018718:	2300      	movs	r3, #0
 801871a:	9301      	str	r3, [sp, #4]
 801871c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8018720:	9b01      	ldr	r3, [sp, #4]
 8018722:	4293      	cmp	r3, r2
 8018724:	d935      	bls.n	8018792 <SystemInit+0xbe>
 8018726:	4b43      	ldr	r3, [pc, #268]	; (8018834 <SystemInit+0x160>)
 8018728:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 801872c:	f022 0203 	bic.w	r2, r2, #3
 8018730:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8018734:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8018738:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 801873c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8018740:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8018744:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8018748:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801874c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8018750:	2200      	movs	r2, #0
 8018752:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8018756:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 801875a:	4937      	ldr	r1, [pc, #220]	; (8018838 <SystemInit+0x164>)
 801875c:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
 8018760:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
 8018764:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8018768:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801876c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8018770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018774:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 8018778:	0389      	lsls	r1, r1, #14
 801877a:	d401      	bmi.n	8018780 <SystemInit+0xac>
 801877c:	3a01      	subs	r2, #1
 801877e:	d1f9      	bne.n	8018774 <SystemInit+0xa0>
 8018780:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8018784:	0392      	lsls	r2, r2, #14
 8018786:	d408      	bmi.n	801879a <SystemInit+0xc6>
 8018788:	e7fe      	b.n	8018788 <SystemInit+0xb4>
 801878a:	9a01      	ldr	r2, [sp, #4]
 801878c:	3201      	adds	r2, #1
 801878e:	9201      	str	r2, [sp, #4]
 8018790:	e7b9      	b.n	8018706 <SystemInit+0x32>
 8018792:	9b01      	ldr	r3, [sp, #4]
 8018794:	3301      	adds	r3, #1
 8018796:	9301      	str	r3, [sp, #4]
 8018798:	e7c2      	b.n	8018720 <SystemInit+0x4c>
 801879a:	f8d3 2840 	ldr.w	r2, [r3, #2112]	; 0x840
 801879e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80187a2:	f8c3 2840 	str.w	r2, [r3, #2112]	; 0x840
 80187a6:	4a25      	ldr	r2, [pc, #148]	; (801883c <SystemInit+0x168>)
 80187a8:	6811      	ldr	r1, [r2, #0]
 80187aa:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80187ae:	6011      	str	r1, [r2, #0]
 80187b0:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 80187b4:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
 80187b8:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 80187bc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80187c0:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
 80187c4:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 80187c8:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400
 80187cc:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
 80187d0:	491b      	ldr	r1, [pc, #108]	; (8018840 <SystemInit+0x16c>)
 80187d2:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804
 80187d6:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 80187da:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80187de:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
 80187e2:	4914      	ldr	r1, [pc, #80]	; (8018834 <SystemInit+0x160>)
 80187e4:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
 80187e8:	019b      	lsls	r3, r3, #6
 80187ea:	d5fb      	bpl.n	80187e4 <SystemInit+0x110>
 80187ec:	6813      	ldr	r3, [r2, #0]
 80187ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80187f2:	6013      	str	r3, [r2, #0]
 80187f4:	4b11      	ldr	r3, [pc, #68]	; (801883c <SystemInit+0x168>)
 80187f6:	685a      	ldr	r2, [r3, #4]
 80187f8:	03d0      	lsls	r0, r2, #15
 80187fa:	d5fc      	bpl.n	80187f6 <SystemInit+0x122>
 80187fc:	681a      	ldr	r2, [r3, #0]
 80187fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8018802:	601a      	str	r2, [r3, #0]
 8018804:	685a      	ldr	r2, [r3, #4]
 8018806:	0391      	lsls	r1, r2, #14
 8018808:	d5fc      	bpl.n	8018804 <SystemInit+0x130>
 801880a:	4b0a      	ldr	r3, [pc, #40]	; (8018834 <SystemInit+0x160>)
 801880c:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8018810:	f022 0203 	bic.w	r2, r2, #3
 8018814:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8018818:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 801881c:	f042 0202 	orr.w	r2, r2, #2
 8018820:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8018824:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8018828:	0712      	lsls	r2, r2, #28
 801882a:	d5fb      	bpl.n	8018824 <SystemInit+0x150>
 801882c:	b002      	add	sp, #8
 801882e:	4770      	bx	lr
 8018830:	e000ed00 	and	lr, r0, r0, lsl #26
 8018834:	40023000 	andmi	r3, r2, r0
 8018838:	24003010 	strcs	r3, [r0], #-16
 801883c:	40007000 	andmi	r7, r0, r0
 8018840:	09406419 	stmdbeq	r0, {r0, r3, r4, sl, sp, lr}^

08018844 <dma_deinit>:
 8018844:	2318      	movs	r3, #24
 8018846:	fb03 0301 	mla	r3, r3, r1, r0
 801884a:	b510      	push	{r4, lr}
 801884c:	691a      	ldr	r2, [r3, #16]
 801884e:	f022 0201 	bic.w	r2, r2, #1
 8018852:	611a      	str	r2, [r3, #16]
 8018854:	2903      	cmp	r1, #3
 8018856:	f04f 0200 	mov.w	r2, #0
 801885a:	611a      	str	r2, [r3, #16]
 801885c:	615a      	str	r2, [r3, #20]
 801885e:	619a      	str	r2, [r3, #24]
 8018860:	61da      	str	r2, [r3, #28]
 8018862:	621a      	str	r2, [r3, #32]
 8018864:	625a      	str	r2, [r3, #36]	; 0x24
 8018866:	d80a      	bhi.n	801887e <dma_deinit+0x3a>
 8018868:	2406      	movs	r4, #6
 801886a:	084b      	lsrs	r3, r1, #1
 801886c:	4361      	muls	r1, r4
 801886e:	6882      	ldr	r2, [r0, #8]
 8018870:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018874:	233d      	movs	r3, #61	; 0x3d
 8018876:	408b      	lsls	r3, r1
 8018878:	4313      	orrs	r3, r2
 801887a:	6083      	str	r3, [r0, #8]
 801887c:	bd10      	pop	{r4, pc}
 801887e:	3904      	subs	r1, #4
 8018880:	b2ca      	uxtb	r2, r1
 8018882:	2306      	movs	r3, #6
 8018884:	435a      	muls	r2, r3
 8018886:	f3c1 0140 	ubfx	r1, r1, #1, #1
 801888a:	68c4      	ldr	r4, [r0, #12]
 801888c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8018890:	233d      	movs	r3, #61	; 0x3d
 8018892:	4093      	lsls	r3, r2
 8018894:	4323      	orrs	r3, r4
 8018896:	60c3      	str	r3, [r0, #12]
 8018898:	e7f0      	b.n	801887c <dma_deinit+0x38>

0801889a <dma_single_data_para_struct_init>:
 801889a:	2300      	movs	r3, #0
 801889c:	2201      	movs	r2, #1
 801889e:	e9c0 3200 	strd	r3, r2, [r0]
 80188a2:	e9c0 3202 	strd	r3, r2, [r0, #8]
 80188a6:	e9c0 3204 	strd	r3, r2, [r0, #16]
 80188aa:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80188ae:	6203      	str	r3, [r0, #32]
 80188b0:	4770      	bx	lr

080188b2 <dma_single_data_mode_init>:
 80188b2:	2318      	movs	r3, #24
 80188b4:	fb03 0101 	mla	r1, r3, r1, r0
 80188b8:	b530      	push	{r4, r5, lr}
 80188ba:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80188bc:	f023 0304 	bic.w	r3, r3, #4
 80188c0:	624b      	str	r3, [r1, #36]	; 0x24
 80188c2:	6813      	ldr	r3, [r2, #0]
 80188c4:	618b      	str	r3, [r1, #24]
 80188c6:	6893      	ldr	r3, [r2, #8]
 80188c8:	61cb      	str	r3, [r1, #28]
 80188ca:	69d3      	ldr	r3, [r2, #28]
 80188cc:	614b      	str	r3, [r1, #20]
 80188ce:	6914      	ldr	r4, [r2, #16]
 80188d0:	6a13      	ldr	r3, [r2, #32]
 80188d2:	6908      	ldr	r0, [r1, #16]
 80188d4:	6995      	ldr	r5, [r2, #24]
 80188d6:	4323      	orrs	r3, r4
 80188d8:	f420 305e 	bic.w	r0, r0, #227328	; 0x37800
 80188dc:	432b      	orrs	r3, r5
 80188de:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 80188e2:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 80188e6:	4303      	orrs	r3, r0
 80188e8:	610b      	str	r3, [r1, #16]
 80188ea:	6853      	ldr	r3, [r2, #4]
 80188ec:	b983      	cbnz	r3, 8018910 <dma_single_data_mode_init+0x5e>
 80188ee:	690b      	ldr	r3, [r1, #16]
 80188f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80188f4:	610b      	str	r3, [r1, #16]
 80188f6:	68d3      	ldr	r3, [r2, #12]
 80188f8:	b993      	cbnz	r3, 8018920 <dma_single_data_mode_init+0x6e>
 80188fa:	690b      	ldr	r3, [r1, #16]
 80188fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018900:	610b      	str	r3, [r1, #16]
 8018902:	6953      	ldr	r3, [r2, #20]
 8018904:	b983      	cbnz	r3, 8018928 <dma_single_data_mode_init+0x76>
 8018906:	690b      	ldr	r3, [r1, #16]
 8018908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801890c:	610b      	str	r3, [r1, #16]
 801890e:	bd30      	pop	{r4, r5, pc}
 8018910:	2b01      	cmp	r3, #1
 8018912:	690b      	ldr	r3, [r1, #16]
 8018914:	bf0c      	ite	eq
 8018916:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 801891a:	f443 4300 	orrne.w	r3, r3, #32768	; 0x8000
 801891e:	e7e9      	b.n	80188f4 <dma_single_data_mode_init+0x42>
 8018920:	690b      	ldr	r3, [r1, #16]
 8018922:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8018926:	e7eb      	b.n	8018900 <dma_single_data_mode_init+0x4e>
 8018928:	690b      	ldr	r3, [r1, #16]
 801892a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801892e:	e7ed      	b.n	801890c <dma_single_data_mode_init+0x5a>

08018930 <dma_circulation_disable>:
 8018930:	2318      	movs	r3, #24
 8018932:	4359      	muls	r1, r3
 8018934:	3010      	adds	r0, #16
 8018936:	580b      	ldr	r3, [r1, r0]
 8018938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801893c:	500b      	str	r3, [r1, r0]
 801893e:	4770      	bx	lr

08018940 <dma_channel_subperipheral_select>:
 8018940:	2318      	movs	r3, #24
 8018942:	4359      	muls	r1, r3
 8018944:	3010      	adds	r0, #16
 8018946:	580b      	ldr	r3, [r1, r0]
 8018948:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 801894c:	ea43 6242 	orr.w	r2, r3, r2, lsl #25
 8018950:	500a      	str	r2, [r1, r0]
 8018952:	4770      	bx	lr

08018954 <dma_flag_clear>:
 8018954:	2903      	cmp	r1, #3
 8018956:	b530      	push	{r4, r5, lr}
 8018958:	d809      	bhi.n	801896e <dma_flag_clear+0x1a>
 801895a:	2506      	movs	r5, #6
 801895c:	084c      	lsrs	r4, r1, #1
 801895e:	4369      	muls	r1, r5
 8018960:	6883      	ldr	r3, [r0, #8]
 8018962:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018966:	408a      	lsls	r2, r1
 8018968:	4313      	orrs	r3, r2
 801896a:	6083      	str	r3, [r0, #8]
 801896c:	bd30      	pop	{r4, r5, pc}
 801896e:	3904      	subs	r1, #4
 8018970:	b2cb      	uxtb	r3, r1
 8018972:	2506      	movs	r5, #6
 8018974:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8018978:	436b      	muls	r3, r5
 801897a:	68c4      	ldr	r4, [r0, #12]
 801897c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8018980:	409a      	lsls	r2, r3
 8018982:	4322      	orrs	r2, r4
 8018984:	60c2      	str	r2, [r0, #12]
 8018986:	e7f1      	b.n	801896c <dma_flag_clear+0x18>

08018988 <dma_interrupt_flag_clear>:
 8018988:	f7ff bfe4 	b.w	8018954 <dma_flag_clear>

0801898c <enet_delay>:
 801898c:	b082      	sub	sp, #8
 801898e:	2300      	movs	r3, #0
 8018990:	9301      	str	r3, [sp, #4]
 8018992:	9001      	str	r0, [sp, #4]
 8018994:	9b01      	ldr	r3, [sp, #4]
 8018996:	b90b      	cbnz	r3, 801899c <enet_delay+0x10>
 8018998:	b002      	add	sp, #8
 801899a:	4770      	bx	lr
 801899c:	9b01      	ldr	r3, [sp, #4]
 801899e:	3b01      	subs	r3, #1
 80189a0:	9301      	str	r3, [sp, #4]
 80189a2:	e7f7      	b.n	8018994 <enet_delay+0x8>

080189a4 <enet_software_reset>:
 80189a4:	4b07      	ldr	r3, [pc, #28]	; (80189c4 <enet_software_reset+0x20>)
 80189a6:	681a      	ldr	r2, [r3, #0]
 80189a8:	f042 0201 	orr.w	r2, r2, #1
 80189ac:	601a      	str	r2, [r3, #0]
 80189ae:	4a06      	ldr	r2, [pc, #24]	; (80189c8 <enet_software_reset+0x24>)
 80189b0:	6819      	ldr	r1, [r3, #0]
 80189b2:	07c9      	lsls	r1, r1, #31
 80189b4:	d501      	bpl.n	80189ba <enet_software_reset+0x16>
 80189b6:	3a01      	subs	r2, #1
 80189b8:	d1fa      	bne.n	80189b0 <enet_software_reset+0xc>
 80189ba:	6818      	ldr	r0, [r3, #0]
 80189bc:	43c0      	mvns	r0, r0
 80189be:	f000 0001 	and.w	r0, r0, #1
 80189c2:	4770      	bx	lr
 80189c4:	40029000 	andmi	r9, r2, r0
 80189c8:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080189cc <enet_descriptors_chain_init>:
 80189cc:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 80189d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189d2:	4a19      	ldr	r2, [pc, #100]	; (8018a38 <enet_descriptors_chain_init+0x6c>)
 80189d4:	d125      	bne.n	8018a22 <enet_descriptors_chain_init+0x56>
 80189d6:	4b19      	ldr	r3, [pc, #100]	; (8018a3c <enet_descriptors_chain_init+0x70>)
 80189d8:	6113      	str	r3, [r2, #16]
 80189da:	4a19      	ldr	r2, [pc, #100]	; (8018a40 <enet_descriptors_chain_init+0x74>)
 80189dc:	4c19      	ldr	r4, [pc, #100]	; (8018a44 <enet_descriptors_chain_init+0x78>)
 80189de:	6013      	str	r3, [r2, #0]
 80189e0:	2500      	movs	r5, #0
 80189e2:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80189e6:	2008      	movs	r0, #8
 80189e8:	4917      	ldr	r1, [pc, #92]	; (8018a48 <enet_descriptors_chain_init+0x7c>)
 80189ea:	2200      	movs	r2, #0
 80189ec:	600a      	str	r2, [r1, #0]
 80189ee:	4917      	ldr	r1, [pc, #92]	; (8018a4c <enet_descriptors_chain_init+0x80>)
 80189f0:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 80189f4:	600a      	str	r2, [r1, #0]
 80189f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80189fa:	f103 0110 	add.w	r1, r3, #16
 80189fe:	fb0e 4702 	mla	r7, lr, r2, r4
 8018a02:	f841 7c08 	str.w	r7, [r1, #-8]
 8018a06:	4594      	cmp	ip, r2
 8018a08:	bf94      	ite	ls
 8018a0a:	461f      	movls	r7, r3
 8018a0c:	460f      	movhi	r7, r1
 8018a0e:	3201      	adds	r2, #1
 8018a10:	4290      	cmp	r0, r2
 8018a12:	e941 6504 	strd	r6, r5, [r1, #-16]
 8018a16:	f841 7c04 	str.w	r7, [r1, #-4]
 8018a1a:	f101 0110 	add.w	r1, r1, #16
 8018a1e:	d1ee      	bne.n	80189fe <enet_descriptors_chain_init+0x32>
 8018a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a22:	4b0b      	ldr	r3, [pc, #44]	; (8018a50 <enet_descriptors_chain_init+0x84>)
 8018a24:	60d3      	str	r3, [r2, #12]
 8018a26:	4a0b      	ldr	r2, [pc, #44]	; (8018a54 <enet_descriptors_chain_init+0x88>)
 8018a28:	4c0b      	ldr	r4, [pc, #44]	; (8018a58 <enet_descriptors_chain_init+0x8c>)
 8018a2a:	6013      	str	r3, [r2, #0]
 8018a2c:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8018a30:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018a34:	2046      	movs	r0, #70	; 0x46
 8018a36:	e7d7      	b.n	80189e8 <enet_descriptors_chain_init+0x1c>
 8018a38:	40029000 	andmi	r9, r2, r0
 8018a3c:	2002db9c 	mulcs	r2, ip, fp
 8018a40:	200106a4 	andcs	r0, r1, r4, lsr #13
 8018a44:	2002abfc 	strdcs	sl, [r2], -ip
 8018a48:	20010698 	mulcs	r1, r8, r6
 8018a4c:	2001069c 	mulcs	r1, ip, r6
 8018a50:	2002a79c 	mulcs	r2, ip, r7
 8018a54:	200106a0 	andcs	r0, r1, r0, lsr #13
 8018a58:	200106e4 	andcs	r0, r1, r4, ror #13

08018a5c <enet_frame_receive>:
 8018a5c:	4b22      	ldr	r3, [pc, #136]	; (8018ae8 <enet_frame_receive+0x8c>)
 8018a5e:	681a      	ldr	r2, [r3, #0]
 8018a60:	6812      	ldr	r2, [r2, #0]
 8018a62:	2a00      	cmp	r2, #0
 8018a64:	b570      	push	{r4, r5, r6, lr}
 8018a66:	db3c      	blt.n	8018ae2 <enet_frame_receive+0x86>
 8018a68:	b970      	cbnz	r0, 8018a88 <enet_frame_receive+0x2c>
 8018a6a:	681a      	ldr	r2, [r3, #0]
 8018a6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8018a70:	6011      	str	r1, [r2, #0]
 8018a72:	491e      	ldr	r1, [pc, #120]	; (8018aec <enet_frame_receive+0x90>)
 8018a74:	6948      	ldr	r0, [r1, #20]
 8018a76:	0600      	lsls	r0, r0, #24
 8018a78:	d422      	bmi.n	8018ac0 <enet_frame_receive+0x64>
 8018a7a:	6851      	ldr	r1, [r2, #4]
 8018a7c:	0448      	lsls	r0, r1, #17
 8018a7e:	d524      	bpl.n	8018aca <enet_frame_receive+0x6e>
 8018a80:	68d2      	ldr	r2, [r2, #12]
 8018a82:	601a      	str	r2, [r3, #0]
 8018a84:	2001      	movs	r0, #1
 8018a86:	bd70      	pop	{r4, r5, r6, pc}
 8018a88:	f402 4403 	and.w	r4, r2, #33536	; 0x8300
 8018a8c:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8018a90:	d127      	bne.n	8018ae2 <enet_frame_receive+0x86>
 8018a92:	4e17      	ldr	r6, [pc, #92]	; (8018af0 <enet_frame_receive+0x94>)
 8018a94:	6836      	ldr	r6, [r6, #0]
 8018a96:	f3c2 450d 	ubfx	r5, r2, #16, #14
 8018a9a:	01b6      	lsls	r6, r6, #6
 8018a9c:	f1a5 0404 	sub.w	r4, r5, #4
 8018aa0:	d503      	bpl.n	8018aaa <enet_frame_receive+0x4e>
 8018aa2:	f012 0f20 	tst.w	r2, #32
 8018aa6:	bf18      	it	ne
 8018aa8:	462c      	movne	r4, r5
 8018aaa:	428c      	cmp	r4, r1
 8018aac:	d819      	bhi.n	8018ae2 <enet_frame_receive+0x86>
 8018aae:	2200      	movs	r2, #0
 8018ab0:	42a2      	cmp	r2, r4
 8018ab2:	6819      	ldr	r1, [r3, #0]
 8018ab4:	d0d9      	beq.n	8018a6a <enet_frame_receive+0xe>
 8018ab6:	6889      	ldr	r1, [r1, #8]
 8018ab8:	5c51      	ldrb	r1, [r2, r1]
 8018aba:	5481      	strb	r1, [r0, r2]
 8018abc:	3201      	adds	r2, #1
 8018abe:	e7f7      	b.n	8018ab0 <enet_frame_receive+0x54>
 8018ac0:	2080      	movs	r0, #128	; 0x80
 8018ac2:	6148      	str	r0, [r1, #20]
 8018ac4:	2000      	movs	r0, #0
 8018ac6:	6088      	str	r0, [r1, #8]
 8018ac8:	e7d7      	b.n	8018a7a <enet_frame_receive+0x1e>
 8018aca:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8018ace:	4907      	ldr	r1, [pc, #28]	; (8018aec <enet_frame_receive+0x90>)
 8018ad0:	bf09      	itett	eq
 8018ad2:	6809      	ldreq	r1, [r1, #0]
 8018ad4:	68ca      	ldrne	r2, [r1, #12]
 8018ad6:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8018ada:	3210      	addeq	r2, #16
 8018adc:	bf08      	it	eq
 8018ade:	1852      	addeq	r2, r2, r1
 8018ae0:	e7cf      	b.n	8018a82 <enet_frame_receive+0x26>
 8018ae2:	2000      	movs	r0, #0
 8018ae4:	e7cf      	b.n	8018a86 <enet_frame_receive+0x2a>
 8018ae6:	bf00      	nop
 8018ae8:	200106a0 	andcs	r0, r1, r0, lsr #13
 8018aec:	40029000 	andmi	r9, r2, r0
 8018af0:	40028000 	andmi	r8, r2, r0

08018af4 <enet_frame_transmit>:
 8018af4:	4a1e      	ldr	r2, [pc, #120]	; (8018b70 <enet_frame_transmit+0x7c>)
 8018af6:	6813      	ldr	r3, [r2, #0]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	b530      	push	{r4, r5, lr}
 8018afe:	db34      	blt.n	8018b6a <enet_frame_transmit+0x76>
 8018b00:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8018b04:	4299      	cmp	r1, r3
 8018b06:	d830      	bhi.n	8018b6a <enet_frame_transmit+0x76>
 8018b08:	b9e8      	cbnz	r0, 8018b46 <enet_frame_transmit+0x52>
 8018b0a:	6813      	ldr	r3, [r2, #0]
 8018b0c:	4819      	ldr	r0, [pc, #100]	; (8018b74 <enet_frame_transmit+0x80>)
 8018b0e:	6059      	str	r1, [r3, #4]
 8018b10:	6819      	ldr	r1, [r3, #0]
 8018b12:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8018b16:	6019      	str	r1, [r3, #0]
 8018b18:	6941      	ldr	r1, [r0, #20]
 8018b1a:	6944      	ldr	r4, [r0, #20]
 8018b1c:	f001 0104 	and.w	r1, r1, #4
 8018b20:	f004 0420 	and.w	r4, r4, #32
 8018b24:	4321      	orrs	r1, r4
 8018b26:	d110      	bne.n	8018b4a <enet_frame_transmit+0x56>
 8018b28:	6819      	ldr	r1, [r3, #0]
 8018b2a:	02c8      	lsls	r0, r1, #11
 8018b2c:	d511      	bpl.n	8018b52 <enet_frame_transmit+0x5e>
 8018b2e:	68db      	ldr	r3, [r3, #12]
 8018b30:	6013      	str	r3, [r2, #0]
 8018b32:	2001      	movs	r0, #1
 8018b34:	bd30      	pop	{r4, r5, pc}
 8018b36:	68a4      	ldr	r4, [r4, #8]
 8018b38:	5cc5      	ldrb	r5, [r0, r3]
 8018b3a:	551d      	strb	r5, [r3, r4]
 8018b3c:	3301      	adds	r3, #1
 8018b3e:	428b      	cmp	r3, r1
 8018b40:	6814      	ldr	r4, [r2, #0]
 8018b42:	d1f8      	bne.n	8018b36 <enet_frame_transmit+0x42>
 8018b44:	e7e1      	b.n	8018b0a <enet_frame_transmit+0x16>
 8018b46:	2300      	movs	r3, #0
 8018b48:	e7f9      	b.n	8018b3e <enet_frame_transmit+0x4a>
 8018b4a:	6141      	str	r1, [r0, #20]
 8018b4c:	2100      	movs	r1, #0
 8018b4e:	6041      	str	r1, [r0, #4]
 8018b50:	e7ea      	b.n	8018b28 <enet_frame_transmit+0x34>
 8018b52:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8018b56:	4907      	ldr	r1, [pc, #28]	; (8018b74 <enet_frame_transmit+0x80>)
 8018b58:	bf09      	itett	eq
 8018b5a:	6809      	ldreq	r1, [r1, #0]
 8018b5c:	690b      	ldrne	r3, [r1, #16]
 8018b5e:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8018b62:	3310      	addeq	r3, #16
 8018b64:	bf08      	it	eq
 8018b66:	185b      	addeq	r3, r3, r1
 8018b68:	e7e2      	b.n	8018b30 <enet_frame_transmit+0x3c>
 8018b6a:	2000      	movs	r0, #0
 8018b6c:	e7e2      	b.n	8018b34 <enet_frame_transmit+0x40>
 8018b6e:	bf00      	nop
 8018b70:	200106a4 	andcs	r0, r1, r4, lsr #13
 8018b74:	40029000 	andmi	r9, r2, r0

08018b78 <enet_transmit_checksum_config>:
 8018b78:	6803      	ldr	r3, [r0, #0]
 8018b7a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8018b7e:	430b      	orrs	r3, r1
 8018b80:	6003      	str	r3, [r0, #0]
 8018b82:	4770      	bx	lr

08018b84 <enet_mac_address_set>:
 8018b84:	4b03      	ldr	r3, [pc, #12]	; (8018b94 <enet_mac_address_set+0x10>)
 8018b86:	888a      	ldrh	r2, [r1, #4]
 8018b88:	50c2      	str	r2, [r0, r3]
 8018b8a:	3304      	adds	r3, #4
 8018b8c:	680a      	ldr	r2, [r1, #0]
 8018b8e:	50c2      	str	r2, [r0, r3]
 8018b90:	4770      	bx	lr
 8018b92:	bf00      	nop
 8018b94:	40028040 	andmi	r8, r2, r0, asr #32

08018b98 <enet_rx_enable>:
 8018b98:	4a05      	ldr	r2, [pc, #20]	; (8018bb0 <enet_rx_enable+0x18>)
 8018b9a:	6813      	ldr	r3, [r2, #0]
 8018b9c:	f043 0304 	orr.w	r3, r3, #4
 8018ba0:	6013      	str	r3, [r2, #0]
 8018ba2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8018ba6:	6993      	ldr	r3, [r2, #24]
 8018ba8:	f043 0302 	orr.w	r3, r3, #2
 8018bac:	6193      	str	r3, [r2, #24]
 8018bae:	4770      	bx	lr
 8018bb0:	40028000 	andmi	r8, r2, r0

08018bb4 <enet_phy_write_read>:
 8018bb4:	b530      	push	{r4, r5, lr}
 8018bb6:	4d12      	ldr	r5, [pc, #72]	; (8018c00 <enet_phy_write_read+0x4c>)
 8018bb8:	4604      	mov	r4, r0
 8018bba:	6928      	ldr	r0, [r5, #16]
 8018bbc:	0192      	lsls	r2, r2, #6
 8018bbe:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 8018bc2:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8018bc6:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 8018bca:	4302      	orrs	r2, r0
 8018bcc:	02c9      	lsls	r1, r1, #11
 8018bce:	b289      	uxth	r1, r1
 8018bd0:	4322      	orrs	r2, r4
 8018bd2:	430a      	orrs	r2, r1
 8018bd4:	2c02      	cmp	r4, #2
 8018bd6:	bf04      	itt	eq
 8018bd8:	8819      	ldrheq	r1, [r3, #0]
 8018bda:	6169      	streq	r1, [r5, #20]
 8018bdc:	f042 0201 	orr.w	r2, r2, #1
 8018be0:	612a      	str	r2, [r5, #16]
 8018be2:	4907      	ldr	r1, [pc, #28]	; (8018c00 <enet_phy_write_read+0x4c>)
 8018be4:	4a07      	ldr	r2, [pc, #28]	; (8018c04 <enet_phy_write_read+0x50>)
 8018be6:	6908      	ldr	r0, [r1, #16]
 8018be8:	07c0      	lsls	r0, r0, #31
 8018bea:	d501      	bpl.n	8018bf0 <enet_phy_write_read+0x3c>
 8018bec:	3a01      	subs	r2, #1
 8018bee:	d1fa      	bne.n	8018be6 <enet_phy_write_read+0x32>
 8018bf0:	690a      	ldr	r2, [r1, #16]
 8018bf2:	43d2      	mvns	r2, r2
 8018bf4:	f002 0001 	and.w	r0, r2, #1
 8018bf8:	b90c      	cbnz	r4, 8018bfe <enet_phy_write_read+0x4a>
 8018bfa:	694a      	ldr	r2, [r1, #20]
 8018bfc:	801a      	strh	r2, [r3, #0]
 8018bfe:	bd30      	pop	{r4, r5, pc}
 8018c00:	40028000 	andmi	r8, r2, r0
 8018c04:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08018c08 <enet_phy_config>:
 8018c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c0a:	4d26      	ldr	r5, [pc, #152]	; (8018ca4 <enet_phy_config+0x9c>)
 8018c0c:	2001      	movs	r0, #1
 8018c0e:	692c      	ldr	r4, [r5, #16]
 8018c10:	f000 fb9e 	bl	8019350 <rcu_clock_freq_get>
 8018c14:	4b24      	ldr	r3, [pc, #144]	; (8018ca8 <enet_phy_config+0xa0>)
 8018c16:	4a25      	ldr	r2, [pc, #148]	; (8018cac <enet_phy_config+0xa4>)
 8018c18:	4403      	add	r3, r0
 8018c1a:	4293      	cmp	r3, r2
 8018c1c:	f024 041c 	bic.w	r4, r4, #28
 8018c20:	d21f      	bcs.n	8018c62 <enet_phy_config+0x5a>
 8018c22:	f044 0408 	orr.w	r4, r4, #8
 8018c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018c2a:	612c      	str	r4, [r5, #16]
 8018c2c:	2200      	movs	r2, #0
 8018c2e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018c32:	2101      	movs	r1, #1
 8018c34:	f10d 0306 	add.w	r3, sp, #6
 8018c38:	2002      	movs	r0, #2
 8018c3a:	f7ff ffbb 	bl	8018bb4 <enet_phy_write_read>
 8018c3e:	b350      	cbz	r0, 8018c96 <enet_phy_config+0x8e>
 8018c40:	481b      	ldr	r0, [pc, #108]	; (8018cb0 <enet_phy_config+0xa8>)
 8018c42:	2200      	movs	r2, #0
 8018c44:	f7ff fea2 	bl	801898c <enet_delay>
 8018c48:	2101      	movs	r1, #1
 8018c4a:	f10d 0306 	add.w	r3, sp, #6
 8018c4e:	4610      	mov	r0, r2
 8018c50:	f7ff ffb0 	bl	8018bb4 <enet_phy_write_read>
 8018c54:	b1f8      	cbz	r0, 8018c96 <enet_phy_config+0x8e>
 8018c56:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018c5a:	43c0      	mvns	r0, r0
 8018c5c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8018c60:	e01a      	b.n	8018c98 <enet_phy_config+0x90>
 8018c62:	4b14      	ldr	r3, [pc, #80]	; (8018cb4 <enet_phy_config+0xac>)
 8018c64:	4a14      	ldr	r2, [pc, #80]	; (8018cb8 <enet_phy_config+0xb0>)
 8018c66:	4403      	add	r3, r0
 8018c68:	4293      	cmp	r3, r2
 8018c6a:	d802      	bhi.n	8018c72 <enet_phy_config+0x6a>
 8018c6c:	f044 040c 	orr.w	r4, r4, #12
 8018c70:	e7d9      	b.n	8018c26 <enet_phy_config+0x1e>
 8018c72:	4b12      	ldr	r3, [pc, #72]	; (8018cbc <enet_phy_config+0xb4>)
 8018c74:	4a12      	ldr	r2, [pc, #72]	; (8018cc0 <enet_phy_config+0xb8>)
 8018c76:	4403      	add	r3, r0
 8018c78:	4293      	cmp	r3, r2
 8018c7a:	d3d4      	bcc.n	8018c26 <enet_phy_config+0x1e>
 8018c7c:	4b11      	ldr	r3, [pc, #68]	; (8018cc4 <enet_phy_config+0xbc>)
 8018c7e:	4a12      	ldr	r2, [pc, #72]	; (8018cc8 <enet_phy_config+0xc0>)
 8018c80:	4403      	add	r3, r0
 8018c82:	4293      	cmp	r3, r2
 8018c84:	d802      	bhi.n	8018c8c <enet_phy_config+0x84>
 8018c86:	f044 0404 	orr.w	r4, r4, #4
 8018c8a:	e7cc      	b.n	8018c26 <enet_phy_config+0x1e>
 8018c8c:	4b0f      	ldr	r3, [pc, #60]	; (8018ccc <enet_phy_config+0xc4>)
 8018c8e:	4a10      	ldr	r2, [pc, #64]	; (8018cd0 <enet_phy_config+0xc8>)
 8018c90:	4403      	add	r3, r0
 8018c92:	4293      	cmp	r3, r2
 8018c94:	d902      	bls.n	8018c9c <enet_phy_config+0x94>
 8018c96:	2000      	movs	r0, #0
 8018c98:	b003      	add	sp, #12
 8018c9a:	bd30      	pop	{r4, r5, pc}
 8018c9c:	f044 0410 	orr.w	r4, r4, #16
 8018ca0:	e7c1      	b.n	8018c26 <enet_phy_config+0x1e>
 8018ca2:	bf00      	nop
 8018ca4:	40028000 	andmi	r8, r2, r0
 8018ca8:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8018cac:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8018cb0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8018cb4:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8018cb8:	017d783f 	cmneq	sp, pc, lsr r8
 8018cbc:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8018cc0:	02625a00 	rsbeq	r5, r2, #0, 20
 8018cc4:	fa0a1f00 	blx	82a08cc <__exidx_end+0x281840>
 8018cc8:	02faf07f 	rscseq	pc, sl, #127	; 0x7f
 8018ccc:	f70f2e80 			; <UNDEFINED> instruction: 0xf70f2e80
 8018cd0:	02faf080 	rscseq	pc, sl, #128	; 0x80

08018cd4 <enet_init>:
 8018cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	4604      	mov	r4, r0
 8018cda:	460d      	mov	r5, r1
 8018cdc:	4616      	mov	r6, r2
 8018cde:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018ce2:	f7ff ff91 	bl	8018c08 <enet_phy_config>
 8018ce6:	2800      	cmp	r0, #0
 8018ce8:	d032      	beq.n	8018d50 <enet_init+0x7c>
 8018cea:	4b39      	ldr	r3, [pc, #228]	; (8018dd0 <enet_init+0xfc>)
 8018cec:	4a39      	ldr	r2, [pc, #228]	; (8018dd4 <enet_init+0x100>)
 8018cee:	6819      	ldr	r1, [r3, #0]
 8018cf0:	400a      	ands	r2, r1
 8018cf2:	601a      	str	r2, [r3, #0]
 8018cf4:	2200      	movs	r2, #0
 8018cf6:	605a      	str	r2, [r3, #4]
 8018cf8:	609a      	str	r2, [r3, #8]
 8018cfa:	60da      	str	r2, [r3, #12]
 8018cfc:	6999      	ldr	r1, [r3, #24]
 8018cfe:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8018d02:	0409      	lsls	r1, r1, #16
 8018d04:	0c09      	lsrs	r1, r1, #16
 8018d06:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8018d0a:	6199      	str	r1, [r3, #24]
 8018d0c:	4932      	ldr	r1, [pc, #200]	; (8018dd8 <enet_init+0x104>)
 8018d0e:	61da      	str	r2, [r3, #28]
 8018d10:	6988      	ldr	r0, [r1, #24]
 8018d12:	4b32      	ldr	r3, [pc, #200]	; (8018ddc <enet_init+0x108>)
 8018d14:	4003      	ands	r3, r0
 8018d16:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8018d1a:	618b      	str	r3, [r1, #24]
 8018d1c:	680b      	ldr	r3, [r1, #0]
 8018d1e:	4b30      	ldr	r3, [pc, #192]	; (8018de0 <enet_init+0x10c>)
 8018d20:	600b      	str	r3, [r1, #0]
 8018d22:	2c01      	cmp	r4, #1
 8018d24:	d01e      	beq.n	8018d64 <enet_init+0x90>
 8018d26:	08e3      	lsrs	r3, r4, #3
 8018d28:	0861      	lsrs	r1, r4, #1
 8018d2a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8018d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d32:	430b      	orrs	r3, r1
 8018d34:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018d38:	2101      	movs	r1, #1
 8018d3a:	f10d 0306 	add.w	r3, sp, #6
 8018d3e:	2002      	movs	r0, #2
 8018d40:	f7ff ff38 	bl	8018bb4 <enet_phy_write_read>
 8018d44:	b158      	cbz	r0, 8018d5e <enet_init+0x8a>
 8018d46:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018d4a:	f7ff fe1f 	bl	801898c <enet_delay>
 8018d4e:	e05e      	b.n	8018e0e <enet_init+0x13a>
 8018d50:	4824      	ldr	r0, [pc, #144]	; (8018de4 <enet_init+0x110>)
 8018d52:	f7ff fe1b 	bl	801898c <enet_delay>
 8018d56:	f7ff ff57 	bl	8018c08 <enet_phy_config>
 8018d5a:	2800      	cmp	r0, #0
 8018d5c:	d1c5      	bne.n	8018cea <enet_init+0x16>
 8018d5e:	2000      	movs	r0, #0
 8018d60:	b003      	add	sp, #12
 8018d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d64:	4f20      	ldr	r7, [pc, #128]	; (8018de8 <enet_init+0x114>)
 8018d66:	4614      	mov	r4, r2
 8018d68:	2201      	movs	r2, #1
 8018d6a:	4611      	mov	r1, r2
 8018d6c:	f10d 0306 	add.w	r3, sp, #6
 8018d70:	2000      	movs	r0, #0
 8018d72:	f7ff ff1f 	bl	8018bb4 <enet_phy_write_read>
 8018d76:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018d7a:	f002 0204 	and.w	r2, r2, #4
 8018d7e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018d82:	3401      	adds	r4, #1
 8018d84:	b912      	cbnz	r2, 8018d8c <enet_init+0xb8>
 8018d86:	42bc      	cmp	r4, r7
 8018d88:	d1ee      	bne.n	8018d68 <enet_init+0x94>
 8018d8a:	e7e8      	b.n	8018d5e <enet_init+0x8a>
 8018d8c:	42bc      	cmp	r4, r7
 8018d8e:	d0e6      	beq.n	8018d5e <enet_init+0x8a>
 8018d90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018d94:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018d98:	2101      	movs	r1, #1
 8018d9a:	2200      	movs	r2, #0
 8018d9c:	2002      	movs	r0, #2
 8018d9e:	f7ff ff09 	bl	8018bb4 <enet_phy_write_read>
 8018da2:	2800      	cmp	r0, #0
 8018da4:	d0db      	beq.n	8018d5e <enet_init+0x8a>
 8018da6:	4f10      	ldr	r7, [pc, #64]	; (8018de8 <enet_init+0x114>)
 8018da8:	2400      	movs	r4, #0
 8018daa:	2201      	movs	r2, #1
 8018dac:	4611      	mov	r1, r2
 8018dae:	f10d 0306 	add.w	r3, sp, #6
 8018db2:	2000      	movs	r0, #0
 8018db4:	f7ff fefe 	bl	8018bb4 <enet_phy_write_read>
 8018db8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018dbc:	f002 0220 	and.w	r2, r2, #32
 8018dc0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018dc4:	3401      	adds	r4, #1
 8018dc6:	b98a      	cbnz	r2, 8018dec <enet_init+0x118>
 8018dc8:	42bc      	cmp	r4, r7
 8018dca:	d1ee      	bne.n	8018daa <enet_init+0xd6>
 8018dcc:	e7c7      	b.n	8018d5e <enet_init+0x8a>
 8018dce:	bf00      	nop
 8018dd0:	40028000 	andmi	r8, r2, r0
 8018dd4:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8018dd8:	40029000 	andmi	r9, r2, r0
 8018ddc:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 8018de0:	02c16000 	sbceq	r6, r1, #0
 8018de4:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8018de8:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8018dec:	42bc      	cmp	r4, r7
 8018dee:	d0b6      	beq.n	8018d5e <enet_init+0x8a>
 8018df0:	2101      	movs	r1, #1
 8018df2:	2210      	movs	r2, #16
 8018df4:	2000      	movs	r0, #0
 8018df6:	f7ff fedd 	bl	8018bb4 <enet_phy_write_read>
 8018dfa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018dfe:	f3c3 0480 	ubfx	r4, r3, #2, #1
 8018e02:	0799      	lsls	r1, r3, #30
 8018e04:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8018e08:	d401      	bmi.n	8018e0e <enet_init+0x13a>
 8018e0a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8018e0e:	4b69      	ldr	r3, [pc, #420]	; (8018fb4 <enet_init+0x2e0>)
 8018e10:	681a      	ldr	r2, [r3, #0]
 8018e12:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 8018e16:	4314      	orrs	r4, r2
 8018e18:	056a      	lsls	r2, r5, #21
 8018e1a:	601c      	str	r4, [r3, #0]
 8018e1c:	d50b      	bpl.n	8018e36 <enet_init+0x162>
 8018e1e:	681a      	ldr	r2, [r3, #0]
 8018e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018e24:	601a      	str	r2, [r3, #0]
 8018e26:	4a64      	ldr	r2, [pc, #400]	; (8018fb8 <enet_init+0x2e4>)
 8018e28:	6993      	ldr	r3, [r2, #24]
 8018e2a:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8018e2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8018e32:	431d      	orrs	r5, r3
 8018e34:	6195      	str	r5, [r2, #24]
 8018e36:	485f      	ldr	r0, [pc, #380]	; (8018fb4 <enet_init+0x2e0>)
 8018e38:	6843      	ldr	r3, [r0, #4]
 8018e3a:	431e      	orrs	r6, r3
 8018e3c:	4b5f      	ldr	r3, [pc, #380]	; (8018fbc <enet_init+0x2e8>)
 8018e3e:	6046      	str	r6, [r0, #4]
 8018e40:	681a      	ldr	r2, [r3, #0]
 8018e42:	07d7      	lsls	r7, r2, #31
 8018e44:	d513      	bpl.n	8018e6e <enet_init+0x19a>
 8018e46:	6801      	ldr	r1, [r0, #0]
 8018e48:	685a      	ldr	r2, [r3, #4]
 8018e4a:	4c5d      	ldr	r4, [pc, #372]	; (8018fc0 <enet_init+0x2ec>)
 8018e4c:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 8018e50:	4014      	ands	r4, r2
 8018e52:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8018e56:	4321      	orrs	r1, r4
 8018e58:	6001      	str	r1, [r0, #0]
 8018e5a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8018e5e:	0892      	lsrs	r2, r2, #2
 8018e60:	6981      	ldr	r1, [r0, #24]
 8018e62:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8018e66:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8018e6a:	430a      	orrs	r2, r1
 8018e6c:	6182      	str	r2, [r0, #24]
 8018e6e:	681a      	ldr	r2, [r3, #0]
 8018e70:	0796      	lsls	r6, r2, #30
 8018e72:	d508      	bpl.n	8018e86 <enet_init+0x1b2>
 8018e74:	4950      	ldr	r1, [pc, #320]	; (8018fb8 <enet_init+0x2e4>)
 8018e76:	6898      	ldr	r0, [r3, #8]
 8018e78:	680a      	ldr	r2, [r1, #0]
 8018e7a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8018e7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8018e82:	4302      	orrs	r2, r0
 8018e84:	600a      	str	r2, [r1, #0]
 8018e86:	681a      	ldr	r2, [r3, #0]
 8018e88:	0755      	lsls	r5, r2, #29
 8018e8a:	d508      	bpl.n	8018e9e <enet_init+0x1ca>
 8018e8c:	494a      	ldr	r1, [pc, #296]	; (8018fb8 <enet_init+0x2e4>)
 8018e8e:	68d8      	ldr	r0, [r3, #12]
 8018e90:	680a      	ldr	r2, [r1, #0]
 8018e92:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8018e96:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8018e9a:	4302      	orrs	r2, r0
 8018e9c:	600a      	str	r2, [r1, #0]
 8018e9e:	681a      	ldr	r2, [r3, #0]
 8018ea0:	0714      	lsls	r4, r2, #28
 8018ea2:	d508      	bpl.n	8018eb6 <enet_init+0x1e2>
 8018ea4:	4944      	ldr	r1, [pc, #272]	; (8018fb8 <enet_init+0x2e4>)
 8018ea6:	6918      	ldr	r0, [r3, #16]
 8018ea8:	680a      	ldr	r2, [r1, #0]
 8018eaa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8018eae:	f022 0202 	bic.w	r2, r2, #2
 8018eb2:	4302      	orrs	r2, r0
 8018eb4:	600a      	str	r2, [r1, #0]
 8018eb6:	681a      	ldr	r2, [r3, #0]
 8018eb8:	06d0      	lsls	r0, r2, #27
 8018eba:	d506      	bpl.n	8018eca <enet_init+0x1f6>
 8018ebc:	493e      	ldr	r1, [pc, #248]	; (8018fb8 <enet_init+0x2e4>)
 8018ebe:	4a41      	ldr	r2, [pc, #260]	; (8018fc4 <enet_init+0x2f0>)
 8018ec0:	6988      	ldr	r0, [r1, #24]
 8018ec2:	4002      	ands	r2, r0
 8018ec4:	6958      	ldr	r0, [r3, #20]
 8018ec6:	4302      	orrs	r2, r0
 8018ec8:	618a      	str	r2, [r1, #24]
 8018eca:	681a      	ldr	r2, [r3, #0]
 8018ecc:	0691      	lsls	r1, r2, #26
 8018ece:	d511      	bpl.n	8018ef4 <enet_init+0x220>
 8018ed0:	4839      	ldr	r0, [pc, #228]	; (8018fb8 <enet_init+0x2e4>)
 8018ed2:	699a      	ldr	r2, [r3, #24]
 8018ed4:	6981      	ldr	r1, [r0, #24]
 8018ed6:	4c3c      	ldr	r4, [pc, #240]	; (8018fc8 <enet_init+0x2f4>)
 8018ed8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8018edc:	4014      	ands	r4, r2
 8018ede:	f021 0104 	bic.w	r1, r1, #4
 8018ee2:	4321      	orrs	r1, r4
 8018ee4:	6181      	str	r1, [r0, #24]
 8018ee6:	6801      	ldr	r1, [r0, #0]
 8018ee8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8018eec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8018ef0:	430a      	orrs	r2, r1
 8018ef2:	6002      	str	r2, [r0, #0]
 8018ef4:	681a      	ldr	r2, [r3, #0]
 8018ef6:	0652      	lsls	r2, r2, #25
 8018ef8:	d506      	bpl.n	8018f08 <enet_init+0x234>
 8018efa:	492e      	ldr	r1, [pc, #184]	; (8018fb4 <enet_init+0x2e0>)
 8018efc:	69d8      	ldr	r0, [r3, #28]
 8018efe:	69ca      	ldr	r2, [r1, #28]
 8018f00:	0c52      	lsrs	r2, r2, #17
 8018f02:	0452      	lsls	r2, r2, #17
 8018f04:	4302      	orrs	r2, r0
 8018f06:	61ca      	str	r2, [r1, #28]
 8018f08:	681a      	ldr	r2, [r3, #0]
 8018f0a:	0617      	lsls	r7, r2, #24
 8018f0c:	d517      	bpl.n	8018f3e <enet_init+0x26a>
 8018f0e:	4c29      	ldr	r4, [pc, #164]	; (8018fb4 <enet_init+0x2e0>)
 8018f10:	6a1a      	ldr	r2, [r3, #32]
 8018f12:	69a0      	ldr	r0, [r4, #24]
 8018f14:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8018f18:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8018f1c:	0400      	lsls	r0, r0, #16
 8018f1e:	0c00      	lsrs	r0, r0, #16
 8018f20:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8018f24:	4301      	orrs	r1, r0
 8018f26:	4824      	ldr	r0, [pc, #144]	; (8018fb8 <enet_init+0x2e4>)
 8018f28:	61a1      	str	r1, [r4, #24]
 8018f2a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8018f2e:	0a12      	lsrs	r2, r2, #8
 8018f30:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8018f34:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8018f38:	430a      	orrs	r2, r1
 8018f3a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8018f3e:	681a      	ldr	r2, [r3, #0]
 8018f40:	05d6      	lsls	r6, r2, #23
 8018f42:	bf42      	ittt	mi
 8018f44:	4a1b      	ldrmi	r2, [pc, #108]	; (8018fb4 <enet_init+0x2e0>)
 8018f46:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8018f48:	6091      	strmi	r1, [r2, #8]
 8018f4a:	681a      	ldr	r2, [r3, #0]
 8018f4c:	0595      	lsls	r5, r2, #22
 8018f4e:	bf42      	ittt	mi
 8018f50:	4a18      	ldrmi	r2, [pc, #96]	; (8018fb4 <enet_init+0x2e0>)
 8018f52:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8018f54:	60d1      	strmi	r1, [r2, #12]
 8018f56:	681a      	ldr	r2, [r3, #0]
 8018f58:	0554      	lsls	r4, r2, #21
 8018f5a:	d508      	bpl.n	8018f6e <enet_init+0x29a>
 8018f5c:	4915      	ldr	r1, [pc, #84]	; (8018fb4 <enet_init+0x2e0>)
 8018f5e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8018f60:	684a      	ldr	r2, [r1, #4]
 8018f62:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8018f66:	f022 0206 	bic.w	r2, r2, #6
 8018f6a:	4302      	orrs	r2, r0
 8018f6c:	604a      	str	r2, [r1, #4]
 8018f6e:	681a      	ldr	r2, [r3, #0]
 8018f70:	0510      	lsls	r0, r2, #20
 8018f72:	d508      	bpl.n	8018f86 <enet_init+0x2b2>
 8018f74:	490f      	ldr	r1, [pc, #60]	; (8018fb4 <enet_init+0x2e0>)
 8018f76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018f78:	680a      	ldr	r2, [r1, #0]
 8018f7a:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8018f7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8018f82:	4302      	orrs	r2, r0
 8018f84:	600a      	str	r2, [r1, #0]
 8018f86:	681a      	ldr	r2, [r3, #0]
 8018f88:	04d1      	lsls	r1, r2, #19
 8018f8a:	d506      	bpl.n	8018f9a <enet_init+0x2c6>
 8018f8c:	4909      	ldr	r1, [pc, #36]	; (8018fb4 <enet_init+0x2e0>)
 8018f8e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018f90:	680a      	ldr	r2, [r1, #0]
 8018f92:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8018f96:	4302      	orrs	r2, r0
 8018f98:	600a      	str	r2, [r1, #0]
 8018f9a:	681a      	ldr	r2, [r3, #0]
 8018f9c:	0492      	lsls	r2, r2, #18
 8018f9e:	d506      	bpl.n	8018fae <enet_init+0x2da>
 8018fa0:	4904      	ldr	r1, [pc, #16]	; (8018fb4 <enet_init+0x2e0>)
 8018fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fa4:	680a      	ldr	r2, [r1, #0]
 8018fa6:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8018faa:	4313      	orrs	r3, r2
 8018fac:	600b      	str	r3, [r1, #0]
 8018fae:	2001      	movs	r0, #1
 8018fb0:	e6d6      	b.n	8018d60 <enet_init+0x8c>
 8018fb2:	bf00      	nop
 8018fb4:	40028000 	andmi	r8, r2, r0
 8018fb8:	40029000 	andmi	r9, r2, r0
 8018fbc:	200106a8 	andcs	r0, r1, r8, lsr #13
 8018fc0:	02000080 	andeq	r0, r0, #128	; 0x80
 8018fc4:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c
 8018fc8:	01000004 	tsteq	r0, r4

08018fcc <enet_txfifo_flush>:
 8018fcc:	4b06      	ldr	r3, [pc, #24]	; (8018fe8 <enet_txfifo_flush+0x1c>)
 8018fce:	4807      	ldr	r0, [pc, #28]	; (8018fec <enet_txfifo_flush+0x20>)
 8018fd0:	699a      	ldr	r2, [r3, #24]
 8018fd2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8018fd6:	619a      	str	r2, [r3, #24]
 8018fd8:	699a      	ldr	r2, [r3, #24]
 8018fda:	02d2      	lsls	r2, r2, #11
 8018fdc:	d502      	bpl.n	8018fe4 <enet_txfifo_flush+0x18>
 8018fde:	3801      	subs	r0, #1
 8018fe0:	d1fa      	bne.n	8018fd8 <enet_txfifo_flush+0xc>
 8018fe2:	4770      	bx	lr
 8018fe4:	2001      	movs	r0, #1
 8018fe6:	4770      	bx	lr
 8018fe8:	40029000 	andmi	r9, r2, r0
 8018fec:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08018ff0 <enet_tx_enable>:
 8018ff0:	4a06      	ldr	r2, [pc, #24]	; (801900c <enet_tx_enable+0x1c>)
 8018ff2:	b508      	push	{r3, lr}
 8018ff4:	6813      	ldr	r3, [r2, #0]
 8018ff6:	f043 0308 	orr.w	r3, r3, #8
 8018ffa:	6013      	str	r3, [r2, #0]
 8018ffc:	f7ff ffe6 	bl	8018fcc <enet_txfifo_flush>
 8019000:	4a03      	ldr	r2, [pc, #12]	; (8019010 <enet_tx_enable+0x20>)
 8019002:	6993      	ldr	r3, [r2, #24]
 8019004:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019008:	6193      	str	r3, [r2, #24]
 801900a:	bd08      	pop	{r3, pc}
 801900c:	40028000 	andmi	r8, r2, r0
 8019010:	40029000 	andmi	r9, r2, r0

08019014 <enet_enable>:
 8019014:	b508      	push	{r3, lr}
 8019016:	f7ff ffeb 	bl	8018ff0 <enet_tx_enable>
 801901a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801901e:	f7ff bdbb 	b.w	8018b98 <enet_rx_enable>
	...

08019024 <enet_desc_information_get>:
 8019024:	2905      	cmp	r1, #5
 8019026:	d820      	bhi.n	801906a <enet_desc_information_get+0x46>
 8019028:	e8df f001 	tbb	[pc, r1]
 801902c:	0309191b 	movweq	r1, #39195	; 0x991b
 8019030:	68401907 	stmdavs	r0, {r0, r1, r2, r8, fp, ip}^
 8019034:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8019038:	4770      	bx	lr
 801903a:	88c0      	ldrh	r0, [r0, #6]
 801903c:	e7fa      	b.n	8019034 <enet_desc_information_get+0x10>
 801903e:	6802      	ldr	r2, [r0, #0]
 8019040:	f3c2 430d 	ubfx	r3, r2, #16, #14
 8019044:	2b04      	cmp	r3, #4
 8019046:	d913      	bls.n	8019070 <enet_desc_information_get+0x4c>
 8019048:	490a      	ldr	r1, [pc, #40]	; (8019074 <enet_desc_information_get+0x50>)
 801904a:	6809      	ldr	r1, [r1, #0]
 801904c:	0189      	lsls	r1, r1, #6
 801904e:	f1a3 0004 	sub.w	r0, r3, #4
 8019052:	d50e      	bpl.n	8019072 <enet_desc_information_get+0x4e>
 8019054:	f012 0f20 	tst.w	r2, #32
 8019058:	bf18      	it	ne
 801905a:	4618      	movne	r0, r3
 801905c:	4770      	bx	lr
 801905e:	6880      	ldr	r0, [r0, #8]
 8019060:	4770      	bx	lr
 8019062:	6800      	ldr	r0, [r0, #0]
 8019064:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8019068:	4770      	bx	lr
 801906a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801906e:	4770      	bx	lr
 8019070:	2000      	movs	r0, #0
 8019072:	4770      	bx	lr
 8019074:	40028000 	andmi	r8, r2, r0

08019078 <enet_rxframe_drop>:
 8019078:	4815      	ldr	r0, [pc, #84]	; (80190d0 <enet_rxframe_drop+0x58>)
 801907a:	4916      	ldr	r1, [pc, #88]	; (80190d4 <enet_rxframe_drop+0x5c>)
 801907c:	6802      	ldr	r2, [r0, #0]
 801907e:	b510      	push	{r4, lr}
 8019080:	6854      	ldr	r4, [r2, #4]
 8019082:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019086:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 801908a:	6013      	str	r3, [r2, #0]
 801908c:	680b      	ldr	r3, [r1, #0]
 801908e:	d009      	beq.n	80190a4 <enet_rxframe_drop+0x2c>
 8019090:	b12b      	cbz	r3, 801909e <enet_rxframe_drop+0x26>
 8019092:	68da      	ldr	r2, [r3, #12]
 8019094:	6002      	str	r2, [r0, #0]
 8019096:	681a      	ldr	r2, [r3, #0]
 8019098:	b1ba      	cbz	r2, 80190ca <enet_rxframe_drop+0x52>
 801909a:	600a      	str	r2, [r1, #0]
 801909c:	bd10      	pop	{r4, pc}
 801909e:	68d3      	ldr	r3, [r2, #12]
 80190a0:	6003      	str	r3, [r0, #0]
 80190a2:	e7fb      	b.n	801909c <enet_rxframe_drop+0x24>
 80190a4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80190a8:	4c0b      	ldr	r4, [pc, #44]	; (80190d8 <enet_rxframe_drop+0x60>)
 80190aa:	d006      	beq.n	80190ba <enet_rxframe_drop+0x42>
 80190ac:	68e2      	ldr	r2, [r4, #12]
 80190ae:	6002      	str	r2, [r0, #0]
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d0f3      	beq.n	801909c <enet_rxframe_drop+0x24>
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	600b      	str	r3, [r1, #0]
 80190b8:	e7f0      	b.n	801909c <enet_rxframe_drop+0x24>
 80190ba:	6824      	ldr	r4, [r4, #0]
 80190bc:	3210      	adds	r2, #16
 80190be:	f3c4 0484 	ubfx	r4, r4, #2, #5
 80190c2:	4422      	add	r2, r4
 80190c4:	6002      	str	r2, [r0, #0]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d0e8      	beq.n	801909c <enet_rxframe_drop+0x24>
 80190ca:	3310      	adds	r3, #16
 80190cc:	e7f3      	b.n	80190b6 <enet_rxframe_drop+0x3e>
 80190ce:	bf00      	nop
 80190d0:	200106a0 	andcs	r0, r1, r0, lsr #13
 80190d4:	20010698 	mulcs	r1, r8, r6
 80190d8:	40029000 	andmi	r9, r2, r0

080190dc <enet_rxframe_size_get>:
 80190dc:	b508      	push	{r3, lr}
 80190de:	4b10      	ldr	r3, [pc, #64]	; (8019120 <enet_rxframe_size_get+0x44>)
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	db19      	blt.n	801911c <enet_rxframe_size_get+0x40>
 80190e8:	f403 4203 	and.w	r2, r3, #33536	; 0x8300
 80190ec:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80190f0:	d003      	beq.n	80190fa <enet_rxframe_size_get+0x1e>
 80190f2:	f7ff ffc1 	bl	8019078 <enet_rxframe_drop>
 80190f6:	2001      	movs	r0, #1
 80190f8:	bd08      	pop	{r3, pc}
 80190fa:	f003 0221 	and.w	r2, r3, #33	; 0x21
 80190fe:	2a21      	cmp	r2, #33	; 0x21
 8019100:	d0f7      	beq.n	80190f2 <enet_rxframe_size_get+0x16>
 8019102:	4908      	ldr	r1, [pc, #32]	; (8019124 <enet_rxframe_size_get+0x48>)
 8019104:	6809      	ldr	r1, [r1, #0]
 8019106:	f3c3 420d 	ubfx	r2, r3, #16, #14
 801910a:	0189      	lsls	r1, r1, #6
 801910c:	f1a2 0004 	sub.w	r0, r2, #4
 8019110:	d5f2      	bpl.n	80190f8 <enet_rxframe_size_get+0x1c>
 8019112:	f013 0f20 	tst.w	r3, #32
 8019116:	bf18      	it	ne
 8019118:	4610      	movne	r0, r2
 801911a:	e7ed      	b.n	80190f8 <enet_rxframe_size_get+0x1c>
 801911c:	2000      	movs	r0, #0
 801911e:	e7eb      	b.n	80190f8 <enet_rxframe_size_get+0x1c>
 8019120:	200106a0 	andcs	r0, r1, r0, lsr #13
 8019124:	40028000 	andmi	r8, r2, r0

08019128 <enet_initpara_reset>:
 8019128:	4b08      	ldr	r3, [pc, #32]	; (801914c <enet_initpara_reset+0x24>)
 801912a:	2200      	movs	r2, #0
 801912c:	e9c3 2200 	strd	r2, r2, [r3]
 8019130:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8019134:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8019138:	e9c3 2206 	strd	r2, r2, [r3, #24]
 801913c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8019140:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8019144:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8019148:	639a      	str	r2, [r3, #56]	; 0x38
 801914a:	4770      	bx	lr
 801914c:	200106a8 	andcs	r0, r1, r8, lsr #13

08019150 <enet_deinit>:
 8019150:	b508      	push	{r3, lr}
 8019152:	f240 4019 	movw	r0, #1049	; 0x419
 8019156:	f000 f8da 	bl	801930e <rcu_periph_reset_enable>
 801915a:	f240 4019 	movw	r0, #1049	; 0x419
 801915e:	f000 f8d8 	bl	8019312 <rcu_periph_reset_disable>
 8019162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019166:	f7ff bfdf 	b.w	8019128 <enet_initpara_reset>
	...

0801916c <fwdgt_enable>:
 801916c:	4b02      	ldr	r3, [pc, #8]	; (8019178 <fwdgt_enable+0xc>)
 801916e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8019172:	601a      	str	r2, [r3, #0]
 8019174:	4770      	bx	lr
 8019176:	bf00      	nop
 8019178:	40003000 	andmi	r3, r0, r0

0801917c <fwdgt_counter_reload>:
 801917c:	4b02      	ldr	r3, [pc, #8]	; (8019188 <fwdgt_counter_reload+0xc>)
 801917e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8019182:	601a      	str	r2, [r3, #0]
 8019184:	4770      	bx	lr
 8019186:	bf00      	nop
 8019188:	40003000 	andmi	r3, r0, r0

0801918c <fwdgt_config>:
 801918c:	4a12      	ldr	r2, [pc, #72]	; (80191d8 <fwdgt_config+0x4c>)
 801918e:	b510      	push	{r4, lr}
 8019190:	f245 5355 	movw	r3, #21845	; 0x5555
 8019194:	4c11      	ldr	r4, [pc, #68]	; (80191dc <fwdgt_config+0x50>)
 8019196:	6013      	str	r3, [r2, #0]
 8019198:	68d3      	ldr	r3, [r2, #12]
 801919a:	3c01      	subs	r4, #1
 801919c:	f003 0301 	and.w	r3, r3, #1
 80191a0:	d013      	beq.n	80191ca <fwdgt_config+0x3e>
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d1f8      	bne.n	8019198 <fwdgt_config+0xc>
 80191a6:	6051      	str	r1, [r2, #4]
 80191a8:	490c      	ldr	r1, [pc, #48]	; (80191dc <fwdgt_config+0x50>)
 80191aa:	4a0b      	ldr	r2, [pc, #44]	; (80191d8 <fwdgt_config+0x4c>)
 80191ac:	68d3      	ldr	r3, [r2, #12]
 80191ae:	3901      	subs	r1, #1
 80191b0:	f003 0302 	and.w	r3, r3, #2
 80191b4:	d00d      	beq.n	80191d2 <fwdgt_config+0x46>
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d1f8      	bne.n	80191ac <fwdgt_config+0x20>
 80191ba:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80191be:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80191c2:	6090      	str	r0, [r2, #8]
 80191c4:	6013      	str	r3, [r2, #0]
 80191c6:	2001      	movs	r0, #1
 80191c8:	e002      	b.n	80191d0 <fwdgt_config+0x44>
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d0eb      	beq.n	80191a6 <fwdgt_config+0x1a>
 80191ce:	2000      	movs	r0, #0
 80191d0:	bd10      	pop	{r4, pc}
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d1fb      	bne.n	80191ce <fwdgt_config+0x42>
 80191d6:	e7f0      	b.n	80191ba <fwdgt_config+0x2e>
 80191d8:	40003000 	andmi	r3, r0, r0
 80191dc:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080191e0 <gpio_mode_set>:
 80191e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191e4:	6805      	ldr	r5, [r0, #0]
 80191e6:	68c4      	ldr	r4, [r0, #12]
 80191e8:	2600      	movs	r6, #0
 80191ea:	f04f 0e03 	mov.w	lr, #3
 80191ee:	fa23 f706 	lsr.w	r7, r3, r6
 80191f2:	07ff      	lsls	r7, r7, #31
 80191f4:	d50d      	bpl.n	8019212 <gpio_mode_set+0x32>
 80191f6:	0077      	lsls	r7, r6, #1
 80191f8:	fa0e fc07 	lsl.w	ip, lr, r7
 80191fc:	fa01 f807 	lsl.w	r8, r1, r7
 8019200:	ea25 050c 	bic.w	r5, r5, ip
 8019204:	ea24 040c 	bic.w	r4, r4, ip
 8019208:	fa02 f707 	lsl.w	r7, r2, r7
 801920c:	ea48 0505 	orr.w	r5, r8, r5
 8019210:	433c      	orrs	r4, r7
 8019212:	3601      	adds	r6, #1
 8019214:	2e10      	cmp	r6, #16
 8019216:	d1ea      	bne.n	80191ee <gpio_mode_set+0xe>
 8019218:	6005      	str	r5, [r0, #0]
 801921a:	60c4      	str	r4, [r0, #12]
 801921c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019220 <gpio_output_options_set>:
 8019220:	2901      	cmp	r1, #1
 8019222:	6841      	ldr	r1, [r0, #4]
 8019224:	bf0c      	ite	eq
 8019226:	4319      	orreq	r1, r3
 8019228:	4399      	bicne	r1, r3
 801922a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801922c:	6041      	str	r1, [r0, #4]
 801922e:	6881      	ldr	r1, [r0, #8]
 8019230:	2400      	movs	r4, #0
 8019232:	2603      	movs	r6, #3
 8019234:	fa23 f504 	lsr.w	r5, r3, r4
 8019238:	07ed      	lsls	r5, r5, #31
 801923a:	d507      	bpl.n	801924c <gpio_output_options_set+0x2c>
 801923c:	0065      	lsls	r5, r4, #1
 801923e:	fa06 f705 	lsl.w	r7, r6, r5
 8019242:	ea21 0107 	bic.w	r1, r1, r7
 8019246:	fa02 f505 	lsl.w	r5, r2, r5
 801924a:	4329      	orrs	r1, r5
 801924c:	3401      	adds	r4, #1
 801924e:	2c10      	cmp	r4, #16
 8019250:	d1f0      	bne.n	8019234 <gpio_output_options_set+0x14>
 8019252:	6081      	str	r1, [r0, #8]
 8019254:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019256 <gpio_af_set>:
 8019256:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019258:	6a06      	ldr	r6, [r0, #32]
 801925a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801925c:	2300      	movs	r3, #0
 801925e:	f04f 0c0f 	mov.w	ip, #15
 8019262:	fa22 f403 	lsr.w	r4, r2, r3
 8019266:	07e7      	lsls	r7, r4, #31
 8019268:	d507      	bpl.n	801927a <gpio_af_set+0x24>
 801926a:	009c      	lsls	r4, r3, #2
 801926c:	fa0c f704 	lsl.w	r7, ip, r4
 8019270:	ea26 0607 	bic.w	r6, r6, r7
 8019274:	fa01 f404 	lsl.w	r4, r1, r4
 8019278:	4326      	orrs	r6, r4
 801927a:	3301      	adds	r3, #1
 801927c:	2b08      	cmp	r3, #8
 801927e:	d1f0      	bne.n	8019262 <gpio_af_set+0xc>
 8019280:	2300      	movs	r3, #0
 8019282:	f04f 0c0f 	mov.w	ip, #15
 8019286:	f103 0408 	add.w	r4, r3, #8
 801928a:	fa22 f404 	lsr.w	r4, r2, r4
 801928e:	07e4      	lsls	r4, r4, #31
 8019290:	d507      	bpl.n	80192a2 <gpio_af_set+0x4c>
 8019292:	009c      	lsls	r4, r3, #2
 8019294:	fa0c f704 	lsl.w	r7, ip, r4
 8019298:	ea25 0507 	bic.w	r5, r5, r7
 801929c:	fa01 f404 	lsl.w	r4, r1, r4
 80192a0:	4325      	orrs	r5, r4
 80192a2:	3301      	adds	r3, #1
 80192a4:	2b08      	cmp	r3, #8
 80192a6:	d1ee      	bne.n	8019286 <gpio_af_set+0x30>
 80192a8:	6206      	str	r6, [r0, #32]
 80192aa:	6245      	str	r5, [r0, #36]	; 0x24
 80192ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080192b0 <pmu_backup_ldo_config>:
 80192b0:	4b04      	ldr	r3, [pc, #16]	; (80192c4 <pmu_backup_ldo_config+0x14>)
 80192b2:	685a      	ldr	r2, [r3, #4]
 80192b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80192b8:	605a      	str	r2, [r3, #4]
 80192ba:	685a      	ldr	r2, [r3, #4]
 80192bc:	4310      	orrs	r0, r2
 80192be:	6058      	str	r0, [r3, #4]
 80192c0:	4770      	bx	lr
 80192c2:	bf00      	nop
 80192c4:	40007000 	andmi	r7, r0, r0

080192c8 <pmu_backup_write_enable>:
 80192c8:	4a02      	ldr	r2, [pc, #8]	; (80192d4 <pmu_backup_write_enable+0xc>)
 80192ca:	6813      	ldr	r3, [r2, #0]
 80192cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80192d0:	6013      	str	r3, [r2, #0]
 80192d2:	4770      	bx	lr
 80192d4:	40007000 	andmi	r7, r0, r0

080192d8 <rcu_periph_clock_enable>:
 80192d8:	0983      	lsrs	r3, r0, #6
 80192da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80192de:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80192e2:	f000 001f 	and.w	r0, r0, #31
 80192e6:	6819      	ldr	r1, [r3, #0]
 80192e8:	2201      	movs	r2, #1
 80192ea:	4082      	lsls	r2, r0
 80192ec:	430a      	orrs	r2, r1
 80192ee:	601a      	str	r2, [r3, #0]
 80192f0:	4770      	bx	lr

080192f2 <rcu_periph_clock_disable>:
 80192f2:	0983      	lsrs	r3, r0, #6
 80192f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80192f8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80192fc:	f000 001f 	and.w	r0, r0, #31
 8019300:	681a      	ldr	r2, [r3, #0]
 8019302:	2101      	movs	r1, #1
 8019304:	4081      	lsls	r1, r0
 8019306:	ea22 0201 	bic.w	r2, r2, r1
 801930a:	601a      	str	r2, [r3, #0]
 801930c:	4770      	bx	lr

0801930e <rcu_periph_reset_enable>:
 801930e:	f7ff bfe3 	b.w	80192d8 <rcu_periph_clock_enable>

08019312 <rcu_periph_reset_disable>:
 8019312:	f7ff bfee 	b.w	80192f2 <rcu_periph_clock_disable>
	...

08019318 <rcu_ckout0_config>:
 8019318:	4a04      	ldr	r2, [pc, #16]	; (801932c <rcu_ckout0_config+0x14>)
 801931a:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 801931e:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8019322:	4319      	orrs	r1, r3
 8019324:	4308      	orrs	r0, r1
 8019326:	f8c2 0808 	str.w	r0, [r2, #2056]	; 0x808
 801932a:	4770      	bx	lr
 801932c:	40023000 	andmi	r3, r2, r0

08019330 <rcu_timer_clock_prescaler_config>:
 8019330:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8019334:	4298      	cmp	r0, r3
 8019336:	4b05      	ldr	r3, [pc, #20]	; (801934c <rcu_timer_clock_prescaler_config+0x1c>)
 8019338:	f8d3 288c 	ldr.w	r2, [r3, #2188]	; 0x88c
 801933c:	bf0c      	ite	eq
 801933e:	f022 7280 	biceq.w	r2, r2, #16777216	; 0x1000000
 8019342:	4302      	orrne	r2, r0
 8019344:	f8c3 288c 	str.w	r2, [r3, #2188]	; 0x88c
 8019348:	4770      	bx	lr
 801934a:	bf00      	nop
 801934c:	40023000 	andmi	r3, r2, r0

08019350 <rcu_clock_freq_get>:
 8019350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019352:	4b35      	ldr	r3, [pc, #212]	; (8019428 <rcu_clock_freq_get+0xd8>)
 8019354:	b089      	sub	sp, #36	; 0x24
 8019356:	4604      	mov	r4, r0
 8019358:	ad04      	add	r5, sp, #16
 801935a:	f103 0610 	add.w	r6, r3, #16
 801935e:	461f      	mov	r7, r3
 8019360:	6818      	ldr	r0, [r3, #0]
 8019362:	6859      	ldr	r1, [r3, #4]
 8019364:	462a      	mov	r2, r5
 8019366:	c203      	stmia	r2!, {r0, r1}
 8019368:	3308      	adds	r3, #8
 801936a:	42b3      	cmp	r3, r6
 801936c:	4615      	mov	r5, r2
 801936e:	d1f7      	bne.n	8019360 <rcu_clock_freq_get+0x10>
 8019370:	6938      	ldr	r0, [r7, #16]
 8019372:	6871      	ldr	r1, [r6, #4]
 8019374:	4a2d      	ldr	r2, [pc, #180]	; (801942c <rcu_clock_freq_get+0xdc>)
 8019376:	466b      	mov	r3, sp
 8019378:	c303      	stmia	r3!, {r0, r1}
 801937a:	c303      	stmia	r3!, {r0, r1}
 801937c:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8019380:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019384:	2b01      	cmp	r3, #1
 8019386:	d03f      	beq.n	8019408 <rcu_clock_freq_get+0xb8>
 8019388:	2b02      	cmp	r3, #2
 801938a:	d13f      	bne.n	801940c <rcu_clock_freq_get+0xbc>
 801938c:	f8d2 0804 	ldr.w	r0, [r2, #2052]	; 0x804
 8019390:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
 8019394:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8019398:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 801939c:	4d24      	ldr	r5, [pc, #144]	; (8019430 <rcu_clock_freq_get+0xe0>)
 801939e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80193a2:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80193a6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80193aa:	f103 0301 	add.w	r3, r3, #1
 80193ae:	4a21      	ldr	r2, [pc, #132]	; (8019434 <rcu_clock_freq_get+0xe4>)
 80193b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80193b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80193b8:	bf08      	it	eq
 80193ba:	462a      	moveq	r2, r5
 80193bc:	fbb2 f2f0 	udiv	r2, r2, r0
 80193c0:	434a      	muls	r2, r1
 80193c2:	fbb2 f0f3 	udiv	r0, r2, r3
 80193c6:	4919      	ldr	r1, [pc, #100]	; (801942c <rcu_clock_freq_get+0xdc>)
 80193c8:	f8d1 3808 	ldr.w	r3, [r1, #2056]	; 0x808
 80193cc:	f8d1 2808 	ldr.w	r2, [r1, #2056]	; 0x808
 80193d0:	f3c2 2282 	ubfx	r2, r2, #10, #3
 80193d4:	3220      	adds	r2, #32
 80193d6:	446a      	add	r2, sp
 80193d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80193dc:	f812 5c20 	ldrb.w	r5, [r2, #-32]
 80193e0:	f8d1 2808 	ldr.w	r2, [r1, #2056]	; 0x808
 80193e4:	3320      	adds	r3, #32
 80193e6:	446b      	add	r3, sp
 80193e8:	f3c2 3242 	ubfx	r2, r2, #13, #3
 80193ec:	3220      	adds	r2, #32
 80193ee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80193f2:	446a      	add	r2, sp
 80193f4:	fa20 f303 	lsr.w	r3, r0, r3
 80193f8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80193fc:	2c03      	cmp	r4, #3
 80193fe:	d810      	bhi.n	8019422 <rcu_clock_freq_get+0xd2>
 8019400:	e8df f004 	tbb	[pc, r4]
 8019404:	0c090607 	stceq	6, cr0, [r9], {7}
 8019408:	480a      	ldr	r0, [pc, #40]	; (8019434 <rcu_clock_freq_get+0xe4>)
 801940a:	e7dc      	b.n	80193c6 <rcu_clock_freq_get+0x76>
 801940c:	4808      	ldr	r0, [pc, #32]	; (8019430 <rcu_clock_freq_get+0xe0>)
 801940e:	e7da      	b.n	80193c6 <rcu_clock_freq_get+0x76>
 8019410:	4618      	mov	r0, r3
 8019412:	b009      	add	sp, #36	; 0x24
 8019414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019416:	fa23 f005 	lsr.w	r0, r3, r5
 801941a:	e7fa      	b.n	8019412 <rcu_clock_freq_get+0xc2>
 801941c:	fa23 f002 	lsr.w	r0, r3, r2
 8019420:	e7f7      	b.n	8019412 <rcu_clock_freq_get+0xc2>
 8019422:	2000      	movs	r0, #0
 8019424:	e7f5      	b.n	8019412 <rcu_clock_freq_get+0xc2>
 8019426:	bf00      	nop
 8019428:	0801ab81 	stmdaeq	r1, {r0, r7, r8, r9, fp, sp, pc}
 801942c:	40023000 	andmi	r3, r2, r0
 8019430:	00f42400 	rscseq	r2, r4, r0, lsl #8
 8019434:	017d7840 	cmneq	sp, r0, asr #16

08019438 <syscfg_enet_phy_interface_config>:
 8019438:	4a04      	ldr	r2, [pc, #16]	; (801944c <syscfg_enet_phy_interface_config+0x14>)
 801943a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 801943e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8019442:	4318      	orrs	r0, r3
 8019444:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
 8019448:	4770      	bx	lr
 801944a:	bf00      	nop
 801944c:	40013000 	andmi	r3, r1, r0

08019450 <timer_deinit>:
 8019450:	b508      	push	{r3, lr}
 8019452:	4b4e      	ldr	r3, [pc, #312]	; (801958c <timer_deinit+0x13c>)
 8019454:	4298      	cmp	r0, r3
 8019456:	f000 8092 	beq.w	801957e <timer_deinit+0x12e>
 801945a:	d822      	bhi.n	80194a2 <timer_deinit+0x52>
 801945c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8019460:	4298      	cmp	r0, r3
 8019462:	d062      	beq.n	801952a <timer_deinit+0xda>
 8019464:	d80b      	bhi.n	801947e <timer_deinit+0x2e>
 8019466:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801946a:	4298      	cmp	r0, r3
 801946c:	d04f      	beq.n	801950e <timer_deinit+0xbe>
 801946e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8019472:	4298      	cmp	r0, r3
 8019474:	d052      	beq.n	801951c <timer_deinit+0xcc>
 8019476:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801947a:	d041      	beq.n	8019500 <timer_deinit+0xb0>
 801947c:	bd08      	pop	{r3, pc}
 801947e:	4b44      	ldr	r3, [pc, #272]	; (8019590 <timer_deinit+0x140>)
 8019480:	4298      	cmp	r0, r3
 8019482:	d059      	beq.n	8019538 <timer_deinit+0xe8>
 8019484:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8019488:	4298      	cmp	r0, r3
 801948a:	d071      	beq.n	8019570 <timer_deinit+0x120>
 801948c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8019490:	4298      	cmp	r0, r3
 8019492:	d1f3      	bne.n	801947c <timer_deinit+0x2c>
 8019494:	f640 0004 	movw	r0, #2052	; 0x804
 8019498:	f7ff ff39 	bl	801930e <rcu_periph_reset_enable>
 801949c:	f640 0004 	movw	r0, #2052	; 0x804
 80194a0:	e02a      	b.n	80194f8 <timer_deinit+0xa8>
 80194a2:	4b3c      	ldr	r3, [pc, #240]	; (8019594 <timer_deinit+0x144>)
 80194a4:	4298      	cmp	r0, r3
 80194a6:	d055      	beq.n	8019554 <timer_deinit+0x104>
 80194a8:	d812      	bhi.n	80194d0 <timer_deinit+0x80>
 80194aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80194ae:	4298      	cmp	r0, r3
 80194b0:	d01c      	beq.n	80194ec <timer_deinit+0x9c>
 80194b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80194b6:	4298      	cmp	r0, r3
 80194b8:	d045      	beq.n	8019546 <timer_deinit+0xf6>
 80194ba:	f5a3 4364 	sub.w	r3, r3, #58368	; 0xe400
 80194be:	4298      	cmp	r0, r3
 80194c0:	d1dc      	bne.n	801947c <timer_deinit+0x2c>
 80194c2:	f640 0008 	movw	r0, #2056	; 0x808
 80194c6:	f7ff ff22 	bl	801930e <rcu_periph_reset_enable>
 80194ca:	f640 0008 	movw	r0, #2056	; 0x808
 80194ce:	e013      	b.n	80194f8 <timer_deinit+0xa8>
 80194d0:	4b31      	ldr	r3, [pc, #196]	; (8019598 <timer_deinit+0x148>)
 80194d2:	4298      	cmp	r0, r3
 80194d4:	d045      	beq.n	8019562 <timer_deinit+0x112>
 80194d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80194da:	4298      	cmp	r0, r3
 80194dc:	d1ce      	bne.n	801947c <timer_deinit+0x2c>
 80194de:	f640 1012 	movw	r0, #2322	; 0x912
 80194e2:	f7ff ff14 	bl	801930e <rcu_periph_reset_enable>
 80194e6:	f640 1012 	movw	r0, #2322	; 0x912
 80194ea:	e005      	b.n	80194f8 <timer_deinit+0xa8>
 80194ec:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80194f0:	f7ff ff0d 	bl	801930e <rcu_periph_reset_enable>
 80194f4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80194f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80194fc:	f7ff bf09 	b.w	8019312 <rcu_periph_reset_disable>
 8019500:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8019504:	f7ff ff03 	bl	801930e <rcu_periph_reset_enable>
 8019508:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801950c:	e7f4      	b.n	80194f8 <timer_deinit+0xa8>
 801950e:	f640 0001 	movw	r0, #2049	; 0x801
 8019512:	f7ff fefc 	bl	801930e <rcu_periph_reset_enable>
 8019516:	f640 0001 	movw	r0, #2049	; 0x801
 801951a:	e7ed      	b.n	80194f8 <timer_deinit+0xa8>
 801951c:	f640 0002 	movw	r0, #2050	; 0x802
 8019520:	f7ff fef5 	bl	801930e <rcu_periph_reset_enable>
 8019524:	f640 0002 	movw	r0, #2050	; 0x802
 8019528:	e7e6      	b.n	80194f8 <timer_deinit+0xa8>
 801952a:	f640 0003 	movw	r0, #2051	; 0x803
 801952e:	f7ff feee 	bl	801930e <rcu_periph_reset_enable>
 8019532:	f640 0003 	movw	r0, #2051	; 0x803
 8019536:	e7df      	b.n	80194f8 <timer_deinit+0xa8>
 8019538:	f640 0005 	movw	r0, #2053	; 0x805
 801953c:	f7ff fee7 	bl	801930e <rcu_periph_reset_enable>
 8019540:	f640 0005 	movw	r0, #2053	; 0x805
 8019544:	e7d8      	b.n	80194f8 <timer_deinit+0xa8>
 8019546:	f640 1001 	movw	r0, #2305	; 0x901
 801954a:	f7ff fee0 	bl	801930e <rcu_periph_reset_enable>
 801954e:	f640 1001 	movw	r0, #2305	; 0x901
 8019552:	e7d1      	b.n	80194f8 <timer_deinit+0xa8>
 8019554:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8019558:	f7ff fed9 	bl	801930e <rcu_periph_reset_enable>
 801955c:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8019560:	e7ca      	b.n	80194f8 <timer_deinit+0xa8>
 8019562:	f640 1011 	movw	r0, #2321	; 0x911
 8019566:	f7ff fed2 	bl	801930e <rcu_periph_reset_enable>
 801956a:	f640 1011 	movw	r0, #2321	; 0x911
 801956e:	e7c3      	b.n	80194f8 <timer_deinit+0xa8>
 8019570:	f640 0006 	movw	r0, #2054	; 0x806
 8019574:	f7ff fecb 	bl	801930e <rcu_periph_reset_enable>
 8019578:	f640 0006 	movw	r0, #2054	; 0x806
 801957c:	e7bc      	b.n	80194f8 <timer_deinit+0xa8>
 801957e:	f640 0007 	movw	r0, #2055	; 0x807
 8019582:	f7ff fec4 	bl	801930e <rcu_periph_reset_enable>
 8019586:	f640 0007 	movw	r0, #2055	; 0x807
 801958a:	e7b5      	b.n	80194f8 <timer_deinit+0xa8>
 801958c:	40001c00 	andmi	r1, r0, r0, lsl #24
 8019590:	40001400 	andmi	r1, r0, r0, lsl #8
 8019594:	40014000 	andmi	r4, r1, r0
 8019598:	40014400 	andmi	r4, r1, r0, lsl #8

0801959c <timer_init>:
 801959c:	880b      	ldrh	r3, [r1, #0]
 801959e:	6283      	str	r3, [r0, #40]	; 0x28
 80195a0:	4b1a      	ldr	r3, [pc, #104]	; (801960c <timer_init+0x70>)
 80195a2:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 80195a6:	429a      	cmp	r2, r3
 80195a8:	d004      	beq.n	80195b4 <timer_init+0x18>
 80195aa:	f420 6340 	bic.w	r3, r0, #3072	; 0xc00
 80195ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80195b2:	d10b      	bne.n	80195cc <timer_init+0x30>
 80195b4:	6803      	ldr	r3, [r0, #0]
 80195b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80195ba:	6003      	str	r3, [r0, #0]
 80195bc:	6802      	ldr	r2, [r0, #0]
 80195be:	884b      	ldrh	r3, [r1, #2]
 80195c0:	4313      	orrs	r3, r2
 80195c2:	6003      	str	r3, [r0, #0]
 80195c4:	6802      	ldr	r2, [r0, #0]
 80195c6:	888b      	ldrh	r3, [r1, #4]
 80195c8:	4313      	orrs	r3, r2
 80195ca:	6003      	str	r3, [r0, #0]
 80195cc:	688b      	ldr	r3, [r1, #8]
 80195ce:	62c3      	str	r3, [r0, #44]	; 0x2c
 80195d0:	4b0f      	ldr	r3, [pc, #60]	; (8019610 <timer_init+0x74>)
 80195d2:	4298      	cmp	r0, r3
 80195d4:	d003      	beq.n	80195de <timer_init+0x42>
 80195d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80195da:	4298      	cmp	r0, r3
 80195dc:	d104      	bne.n	80195e8 <timer_init+0x4c>
 80195de:	6943      	ldr	r3, [r0, #20]
 80195e0:	f043 0301 	orr.w	r3, r3, #1
 80195e4:	6143      	str	r3, [r0, #20]
 80195e6:	4770      	bx	lr
 80195e8:	6803      	ldr	r3, [r0, #0]
 80195ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80195ee:	6003      	str	r3, [r0, #0]
 80195f0:	6802      	ldr	r2, [r0, #0]
 80195f2:	88cb      	ldrh	r3, [r1, #6]
 80195f4:	4313      	orrs	r3, r2
 80195f6:	6003      	str	r3, [r0, #0]
 80195f8:	4b04      	ldr	r3, [pc, #16]	; (801960c <timer_init+0x70>)
 80195fa:	4298      	cmp	r0, r3
 80195fc:	d002      	beq.n	8019604 <timer_init+0x68>
 80195fe:	4b05      	ldr	r3, [pc, #20]	; (8019614 <timer_init+0x78>)
 8019600:	4298      	cmp	r0, r3
 8019602:	d1ec      	bne.n	80195de <timer_init+0x42>
 8019604:	7b0b      	ldrb	r3, [r1, #12]
 8019606:	6303      	str	r3, [r0, #48]	; 0x30
 8019608:	e7e9      	b.n	80195de <timer_init+0x42>
 801960a:	bf00      	nop
 801960c:	40010000 	andmi	r0, r1, r0
 8019610:	40001000 	andmi	r1, r0, r0
 8019614:	40010400 	andmi	r0, r1, r0, lsl #8

08019618 <timer_enable>:
 8019618:	6803      	ldr	r3, [r0, #0]
 801961a:	f043 0301 	orr.w	r3, r3, #1
 801961e:	6003      	str	r3, [r0, #0]
 8019620:	4770      	bx	lr

08019622 <timer_interrupt_enable>:
 8019622:	68c3      	ldr	r3, [r0, #12]
 8019624:	4319      	orrs	r1, r3
 8019626:	60c1      	str	r1, [r0, #12]
 8019628:	4770      	bx	lr

0801962a <timer_interrupt_flag_clear>:
 801962a:	43c9      	mvns	r1, r1
 801962c:	6101      	str	r1, [r0, #16]
 801962e:	4770      	bx	lr

08019630 <timer_flag_clear>:
 8019630:	43c9      	mvns	r1, r1
 8019632:	6101      	str	r1, [r0, #16]
 8019634:	4770      	bx	lr

08019636 <timer_dma_enable>:
 8019636:	68c3      	ldr	r3, [r0, #12]
 8019638:	4319      	orrs	r1, r3
 801963a:	60c1      	str	r1, [r0, #12]
 801963c:	4770      	bx	lr
	...

08019640 <timer_channel_output_config>:
 8019640:	2903      	cmp	r1, #3
 8019642:	d83e      	bhi.n	80196c2 <timer_channel_output_config+0x82>
 8019644:	e8df f011 	tbh	[pc, r1, lsl #1]
 8019648:	003e0004 	eorseq	r0, lr, r4
 801964c:	00bc007d 	adcseq	r0, ip, sp, ror r0
 8019650:	6a03      	ldr	r3, [r0, #32]
 8019652:	f023 0301 	bic.w	r3, r3, #1
 8019656:	6203      	str	r3, [r0, #32]
 8019658:	6983      	ldr	r3, [r0, #24]
 801965a:	f023 0303 	bic.w	r3, r3, #3
 801965e:	6183      	str	r3, [r0, #24]
 8019660:	6a01      	ldr	r1, [r0, #32]
 8019662:	8813      	ldrh	r3, [r2, #0]
 8019664:	430b      	orrs	r3, r1
 8019666:	6203      	str	r3, [r0, #32]
 8019668:	6a03      	ldr	r3, [r0, #32]
 801966a:	f023 0302 	bic.w	r3, r3, #2
 801966e:	6203      	str	r3, [r0, #32]
 8019670:	6a01      	ldr	r1, [r0, #32]
 8019672:	8893      	ldrh	r3, [r2, #4]
 8019674:	430b      	orrs	r3, r1
 8019676:	6203      	str	r3, [r0, #32]
 8019678:	4b64      	ldr	r3, [pc, #400]	; (801980c <timer_channel_output_config+0x1cc>)
 801967a:	f420 6180 	bic.w	r1, r0, #1024	; 0x400
 801967e:	4299      	cmp	r1, r3
 8019680:	d11f      	bne.n	80196c2 <timer_channel_output_config+0x82>
 8019682:	6a03      	ldr	r3, [r0, #32]
 8019684:	f023 0304 	bic.w	r3, r3, #4
 8019688:	6203      	str	r3, [r0, #32]
 801968a:	6a01      	ldr	r1, [r0, #32]
 801968c:	8853      	ldrh	r3, [r2, #2]
 801968e:	430b      	orrs	r3, r1
 8019690:	6203      	str	r3, [r0, #32]
 8019692:	6a03      	ldr	r3, [r0, #32]
 8019694:	f023 0308 	bic.w	r3, r3, #8
 8019698:	6203      	str	r3, [r0, #32]
 801969a:	6a01      	ldr	r1, [r0, #32]
 801969c:	88d3      	ldrh	r3, [r2, #6]
 801969e:	430b      	orrs	r3, r1
 80196a0:	6203      	str	r3, [r0, #32]
 80196a2:	6843      	ldr	r3, [r0, #4]
 80196a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80196a8:	6043      	str	r3, [r0, #4]
 80196aa:	6841      	ldr	r1, [r0, #4]
 80196ac:	8913      	ldrh	r3, [r2, #8]
 80196ae:	430b      	orrs	r3, r1
 80196b0:	6043      	str	r3, [r0, #4]
 80196b2:	6843      	ldr	r3, [r0, #4]
 80196b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80196b8:	6043      	str	r3, [r0, #4]
 80196ba:	6841      	ldr	r1, [r0, #4]
 80196bc:	8953      	ldrh	r3, [r2, #10]
 80196be:	430b      	orrs	r3, r1
 80196c0:	6043      	str	r3, [r0, #4]
 80196c2:	4770      	bx	lr
 80196c4:	6a03      	ldr	r3, [r0, #32]
 80196c6:	8811      	ldrh	r1, [r2, #0]
 80196c8:	f023 0310 	bic.w	r3, r3, #16
 80196cc:	6203      	str	r3, [r0, #32]
 80196ce:	6983      	ldr	r3, [r0, #24]
 80196d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80196d4:	6183      	str	r3, [r0, #24]
 80196d6:	6a03      	ldr	r3, [r0, #32]
 80196d8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80196dc:	6203      	str	r3, [r0, #32]
 80196de:	6a03      	ldr	r3, [r0, #32]
 80196e0:	8891      	ldrh	r1, [r2, #4]
 80196e2:	f023 0320 	bic.w	r3, r3, #32
 80196e6:	6203      	str	r3, [r0, #32]
 80196e8:	6a03      	ldr	r3, [r0, #32]
 80196ea:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80196ee:	6203      	str	r3, [r0, #32]
 80196f0:	4b46      	ldr	r3, [pc, #280]	; (801980c <timer_channel_output_config+0x1cc>)
 80196f2:	f420 6180 	bic.w	r1, r0, #1024	; 0x400
 80196f6:	4299      	cmp	r1, r3
 80196f8:	d1e3      	bne.n	80196c2 <timer_channel_output_config+0x82>
 80196fa:	6a03      	ldr	r3, [r0, #32]
 80196fc:	8851      	ldrh	r1, [r2, #2]
 80196fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019702:	6203      	str	r3, [r0, #32]
 8019704:	6a03      	ldr	r3, [r0, #32]
 8019706:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801970a:	6203      	str	r3, [r0, #32]
 801970c:	6a03      	ldr	r3, [r0, #32]
 801970e:	88d1      	ldrh	r1, [r2, #6]
 8019710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019714:	6203      	str	r3, [r0, #32]
 8019716:	6a03      	ldr	r3, [r0, #32]
 8019718:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801971c:	6203      	str	r3, [r0, #32]
 801971e:	6843      	ldr	r3, [r0, #4]
 8019720:	8911      	ldrh	r1, [r2, #8]
 8019722:	8952      	ldrh	r2, [r2, #10]
 8019724:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019728:	6043      	str	r3, [r0, #4]
 801972a:	6843      	ldr	r3, [r0, #4]
 801972c:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8019730:	6043      	str	r3, [r0, #4]
 8019732:	6843      	ldr	r3, [r0, #4]
 8019734:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019738:	6043      	str	r3, [r0, #4]
 801973a:	6843      	ldr	r3, [r0, #4]
 801973c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8019740:	e7be      	b.n	80196c0 <timer_channel_output_config+0x80>
 8019742:	6a03      	ldr	r3, [r0, #32]
 8019744:	8811      	ldrh	r1, [r2, #0]
 8019746:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801974a:	6203      	str	r3, [r0, #32]
 801974c:	69c3      	ldr	r3, [r0, #28]
 801974e:	f023 0303 	bic.w	r3, r3, #3
 8019752:	61c3      	str	r3, [r0, #28]
 8019754:	6a03      	ldr	r3, [r0, #32]
 8019756:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801975a:	6203      	str	r3, [r0, #32]
 801975c:	6a03      	ldr	r3, [r0, #32]
 801975e:	8891      	ldrh	r1, [r2, #4]
 8019760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019764:	6203      	str	r3, [r0, #32]
 8019766:	6a03      	ldr	r3, [r0, #32]
 8019768:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801976c:	6203      	str	r3, [r0, #32]
 801976e:	4b27      	ldr	r3, [pc, #156]	; (801980c <timer_channel_output_config+0x1cc>)
 8019770:	f420 6180 	bic.w	r1, r0, #1024	; 0x400
 8019774:	4299      	cmp	r1, r3
 8019776:	d1a4      	bne.n	80196c2 <timer_channel_output_config+0x82>
 8019778:	6a03      	ldr	r3, [r0, #32]
 801977a:	8851      	ldrh	r1, [r2, #2]
 801977c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019780:	6203      	str	r3, [r0, #32]
 8019782:	6a03      	ldr	r3, [r0, #32]
 8019784:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8019788:	6203      	str	r3, [r0, #32]
 801978a:	6a03      	ldr	r3, [r0, #32]
 801978c:	88d1      	ldrh	r1, [r2, #6]
 801978e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019792:	6203      	str	r3, [r0, #32]
 8019794:	6a03      	ldr	r3, [r0, #32]
 8019796:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801979a:	6203      	str	r3, [r0, #32]
 801979c:	6843      	ldr	r3, [r0, #4]
 801979e:	8911      	ldrh	r1, [r2, #8]
 80197a0:	8952      	ldrh	r2, [r2, #10]
 80197a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80197a6:	6043      	str	r3, [r0, #4]
 80197a8:	6843      	ldr	r3, [r0, #4]
 80197aa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80197ae:	6043      	str	r3, [r0, #4]
 80197b0:	6843      	ldr	r3, [r0, #4]
 80197b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80197b6:	6043      	str	r3, [r0, #4]
 80197b8:	6843      	ldr	r3, [r0, #4]
 80197ba:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80197be:	e77f      	b.n	80196c0 <timer_channel_output_config+0x80>
 80197c0:	6a03      	ldr	r3, [r0, #32]
 80197c2:	8811      	ldrh	r1, [r2, #0]
 80197c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80197c8:	6203      	str	r3, [r0, #32]
 80197ca:	69c3      	ldr	r3, [r0, #28]
 80197cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80197d0:	61c3      	str	r3, [r0, #28]
 80197d2:	6a03      	ldr	r3, [r0, #32]
 80197d4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80197d8:	6203      	str	r3, [r0, #32]
 80197da:	6a03      	ldr	r3, [r0, #32]
 80197dc:	8891      	ldrh	r1, [r2, #4]
 80197de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80197e2:	6203      	str	r3, [r0, #32]
 80197e4:	6a03      	ldr	r3, [r0, #32]
 80197e6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80197ea:	6203      	str	r3, [r0, #32]
 80197ec:	4b07      	ldr	r3, [pc, #28]	; (801980c <timer_channel_output_config+0x1cc>)
 80197ee:	f420 6180 	bic.w	r1, r0, #1024	; 0x400
 80197f2:	4299      	cmp	r1, r3
 80197f4:	f47f af65 	bne.w	80196c2 <timer_channel_output_config+0x82>
 80197f8:	6843      	ldr	r3, [r0, #4]
 80197fa:	8912      	ldrh	r2, [r2, #8]
 80197fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019800:	6043      	str	r3, [r0, #4]
 8019802:	6843      	ldr	r3, [r0, #4]
 8019804:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8019808:	e75a      	b.n	80196c0 <timer_channel_output_config+0x80>
 801980a:	bf00      	nop
 801980c:	40010000 	andmi	r0, r1, r0

08019810 <timer_channel_output_mode_config>:
 8019810:	2903      	cmp	r1, #3
 8019812:	d81a      	bhi.n	801984a <timer_channel_output_mode_config+0x3a>
 8019814:	e8df f001 	tbb	[pc, r1]
 8019818:	1a120a02 	bne	849c028 <__exidx_end+0x47cf9c>
 801981c:	6983      	ldr	r3, [r0, #24]
 801981e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019822:	6183      	str	r3, [r0, #24]
 8019824:	6983      	ldr	r3, [r0, #24]
 8019826:	4313      	orrs	r3, r2
 8019828:	6183      	str	r3, [r0, #24]
 801982a:	4770      	bx	lr
 801982c:	6983      	ldr	r3, [r0, #24]
 801982e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8019832:	6183      	str	r3, [r0, #24]
 8019834:	6983      	ldr	r3, [r0, #24]
 8019836:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801983a:	e7f5      	b.n	8019828 <timer_channel_output_mode_config+0x18>
 801983c:	69c3      	ldr	r3, [r0, #28]
 801983e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019842:	61c3      	str	r3, [r0, #28]
 8019844:	69c3      	ldr	r3, [r0, #28]
 8019846:	4313      	orrs	r3, r2
 8019848:	61c3      	str	r3, [r0, #28]
 801984a:	4770      	bx	lr
 801984c:	69c3      	ldr	r3, [r0, #28]
 801984e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8019852:	61c3      	str	r3, [r0, #28]
 8019854:	69c3      	ldr	r3, [r0, #28]
 8019856:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801985a:	e7f5      	b.n	8019848 <timer_channel_output_mode_config+0x38>

0801985c <timer_channel_output_pulse_value_config>:
 801985c:	2903      	cmp	r1, #3
 801985e:	d80a      	bhi.n	8019876 <timer_channel_output_pulse_value_config+0x1a>
 8019860:	e8df f001 	tbb	[pc, r1]
 8019864:	08060402 	stmdaeq	r6, {r1, sl}
 8019868:	6342      	str	r2, [r0, #52]	; 0x34
 801986a:	4770      	bx	lr
 801986c:	6382      	str	r2, [r0, #56]	; 0x38
 801986e:	4770      	bx	lr
 8019870:	63c2      	str	r2, [r0, #60]	; 0x3c
 8019872:	4770      	bx	lr
 8019874:	6402      	str	r2, [r0, #64]	; 0x40
 8019876:	4770      	bx	lr

08019878 <timer_channel_output_shadow_config>:
 8019878:	2903      	cmp	r1, #3
 801987a:	d81a      	bhi.n	80198b2 <timer_channel_output_shadow_config+0x3a>
 801987c:	e8df f001 	tbb	[pc, r1]
 8019880:	1a120a02 	bne	849c090 <__exidx_end+0x47d004>
 8019884:	6983      	ldr	r3, [r0, #24]
 8019886:	f023 0308 	bic.w	r3, r3, #8
 801988a:	6183      	str	r3, [r0, #24]
 801988c:	6983      	ldr	r3, [r0, #24]
 801988e:	4313      	orrs	r3, r2
 8019890:	6183      	str	r3, [r0, #24]
 8019892:	4770      	bx	lr
 8019894:	6983      	ldr	r3, [r0, #24]
 8019896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801989a:	6183      	str	r3, [r0, #24]
 801989c:	6983      	ldr	r3, [r0, #24]
 801989e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80198a2:	e7f5      	b.n	8019890 <timer_channel_output_shadow_config+0x18>
 80198a4:	69c3      	ldr	r3, [r0, #28]
 80198a6:	f023 0308 	bic.w	r3, r3, #8
 80198aa:	61c3      	str	r3, [r0, #28]
 80198ac:	69c3      	ldr	r3, [r0, #28]
 80198ae:	4313      	orrs	r3, r2
 80198b0:	61c3      	str	r3, [r0, #28]
 80198b2:	4770      	bx	lr
 80198b4:	69c3      	ldr	r3, [r0, #28]
 80198b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80198ba:	61c3      	str	r3, [r0, #28]
 80198bc:	69c3      	ldr	r3, [r0, #28]
 80198be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80198c2:	e7f5      	b.n	80198b0 <timer_channel_output_shadow_config+0x38>

080198c4 <timer_input_trigger_source_select>:
 80198c4:	6883      	ldr	r3, [r0, #8]
 80198c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80198ca:	6083      	str	r3, [r0, #8]
 80198cc:	6883      	ldr	r3, [r0, #8]
 80198ce:	4319      	orrs	r1, r3
 80198d0:	6081      	str	r1, [r0, #8]
 80198d2:	4770      	bx	lr

080198d4 <timer_master_output_trigger_source_select>:
 80198d4:	6843      	ldr	r3, [r0, #4]
 80198d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80198da:	6043      	str	r3, [r0, #4]
 80198dc:	6843      	ldr	r3, [r0, #4]
 80198de:	4319      	orrs	r1, r3
 80198e0:	6041      	str	r1, [r0, #4]
 80198e2:	4770      	bx	lr

080198e4 <timer_slave_mode_select>:
 80198e4:	6883      	ldr	r3, [r0, #8]
 80198e6:	f023 0307 	bic.w	r3, r3, #7
 80198ea:	6083      	str	r3, [r0, #8]
 80198ec:	6883      	ldr	r3, [r0, #8]
 80198ee:	4319      	orrs	r1, r3
 80198f0:	6081      	str	r1, [r0, #8]
 80198f2:	4770      	bx	lr

080198f4 <timer_master_slave_mode_config>:
 80198f4:	b921      	cbnz	r1, 8019900 <timer_master_slave_mode_config+0xc>
 80198f6:	6883      	ldr	r3, [r0, #8]
 80198f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80198fc:	6083      	str	r3, [r0, #8]
 80198fe:	4770      	bx	lr
 8019900:	2901      	cmp	r1, #1
 8019902:	d1fc      	bne.n	80198fe <timer_master_slave_mode_config+0xa>
 8019904:	6883      	ldr	r3, [r0, #8]
 8019906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801990a:	e7f7      	b.n	80198fc <timer_master_slave_mode_config+0x8>

0801990c <usart_deinit>:
 801990c:	b508      	push	{r3, lr}
 801990e:	4b2d      	ldr	r3, [pc, #180]	; (80199c4 <usart_deinit+0xb8>)
 8019910:	4298      	cmp	r0, r3
 8019912:	d050      	beq.n	80199b6 <usart_deinit+0xaa>
 8019914:	d817      	bhi.n	8019946 <usart_deinit+0x3a>
 8019916:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 801991a:	4298      	cmp	r0, r3
 801991c:	d044      	beq.n	80199a8 <usart_deinit+0x9c>
 801991e:	d808      	bhi.n	8019932 <usart_deinit+0x26>
 8019920:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8019924:	4298      	cmp	r0, r3
 8019926:	d02a      	beq.n	801997e <usart_deinit+0x72>
 8019928:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801992c:	4298      	cmp	r0, r3
 801992e:	d02d      	beq.n	801998c <usart_deinit+0x80>
 8019930:	bd08      	pop	{r3, pc}
 8019932:	4b25      	ldr	r3, [pc, #148]	; (80199c8 <usart_deinit+0xbc>)
 8019934:	4298      	cmp	r0, r3
 8019936:	d1fb      	bne.n	8019930 <usart_deinit+0x24>
 8019938:	f640 0014 	movw	r0, #2068	; 0x814
 801993c:	f7ff fce7 	bl	801930e <rcu_periph_reset_enable>
 8019940:	f640 0014 	movw	r0, #2068	; 0x814
 8019944:	e017      	b.n	8019976 <usart_deinit+0x6a>
 8019946:	4b21      	ldr	r3, [pc, #132]	; (80199cc <usart_deinit+0xc0>)
 8019948:	4298      	cmp	r0, r3
 801994a:	d00e      	beq.n	801996a <usart_deinit+0x5e>
 801994c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8019950:	4298      	cmp	r0, r3
 8019952:	d022      	beq.n	801999a <usart_deinit+0x8e>
 8019954:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 8019958:	4298      	cmp	r0, r3
 801995a:	d1e9      	bne.n	8019930 <usart_deinit+0x24>
 801995c:	f640 001f 	movw	r0, #2079	; 0x81f
 8019960:	f7ff fcd5 	bl	801930e <rcu_periph_reset_enable>
 8019964:	f640 001f 	movw	r0, #2079	; 0x81f
 8019968:	e005      	b.n	8019976 <usart_deinit+0x6a>
 801996a:	f640 1004 	movw	r0, #2308	; 0x904
 801996e:	f7ff fcce 	bl	801930e <rcu_periph_reset_enable>
 8019972:	f640 1004 	movw	r0, #2308	; 0x904
 8019976:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801997a:	f7ff bcca 	b.w	8019312 <rcu_periph_reset_disable>
 801997e:	f640 0011 	movw	r0, #2065	; 0x811
 8019982:	f7ff fcc4 	bl	801930e <rcu_periph_reset_enable>
 8019986:	f640 0011 	movw	r0, #2065	; 0x811
 801998a:	e7f4      	b.n	8019976 <usart_deinit+0x6a>
 801998c:	f640 0012 	movw	r0, #2066	; 0x812
 8019990:	f7ff fcbd 	bl	801930e <rcu_periph_reset_enable>
 8019994:	f640 0012 	movw	r0, #2066	; 0x812
 8019998:	e7ed      	b.n	8019976 <usart_deinit+0x6a>
 801999a:	f640 1005 	movw	r0, #2309	; 0x905
 801999e:	f7ff fcb6 	bl	801930e <rcu_periph_reset_enable>
 80199a2:	f640 1005 	movw	r0, #2309	; 0x905
 80199a6:	e7e6      	b.n	8019976 <usart_deinit+0x6a>
 80199a8:	f640 0013 	movw	r0, #2067	; 0x813
 80199ac:	f7ff fcaf 	bl	801930e <rcu_periph_reset_enable>
 80199b0:	f640 0013 	movw	r0, #2067	; 0x813
 80199b4:	e7df      	b.n	8019976 <usart_deinit+0x6a>
 80199b6:	f640 001e 	movw	r0, #2078	; 0x81e
 80199ba:	f7ff fca8 	bl	801930e <rcu_periph_reset_enable>
 80199be:	f640 001e 	movw	r0, #2078	; 0x81e
 80199c2:	e7d8      	b.n	8019976 <usart_deinit+0x6a>
 80199c4:	40007800 	andmi	r7, r0, r0, lsl #16
 80199c8:	40005000 	andmi	r5, r0, r0
 80199cc:	40011000 	andmi	r1, r1, r0

080199d0 <usart_baudrate_set>:
 80199d0:	b538      	push	{r3, r4, r5, lr}
 80199d2:	4b1e      	ldr	r3, [pc, #120]	; (8019a4c <usart_baudrate_set+0x7c>)
 80199d4:	4298      	cmp	r0, r3
 80199d6:	4604      	mov	r4, r0
 80199d8:	460d      	mov	r5, r1
 80199da:	d02e      	beq.n	8019a3a <usart_baudrate_set+0x6a>
 80199dc:	d821      	bhi.n	8019a22 <usart_baudrate_set+0x52>
 80199de:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 80199e2:	4298      	cmp	r0, r3
 80199e4:	d029      	beq.n	8019a3a <usart_baudrate_set+0x6a>
 80199e6:	d81a      	bhi.n	8019a1e <usart_baudrate_set+0x4e>
 80199e8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80199ec:	4298      	cmp	r0, r3
 80199ee:	d024      	beq.n	8019a3a <usart_baudrate_set+0x6a>
 80199f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80199f4:	429c      	cmp	r4, r3
 80199f6:	d020      	beq.n	8019a3a <usart_baudrate_set+0x6a>
 80199f8:	2000      	movs	r0, #0
 80199fa:	68e2      	ldr	r2, [r4, #12]
 80199fc:	0412      	lsls	r2, r2, #16
 80199fe:	ea4f 0355 	mov.w	r3, r5, lsr #1
 8019a02:	d51c      	bpl.n	8019a3e <usart_baudrate_set+0x6e>
 8019a04:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8019a08:	fbb3 f1f5 	udiv	r1, r3, r5
 8019a0c:	f3c1 0342 	ubfx	r3, r1, #1, #3
 8019a10:	f021 010f 	bic.w	r1, r1, #15
 8019a14:	0409      	lsls	r1, r1, #16
 8019a16:	0c09      	lsrs	r1, r1, #16
 8019a18:	430b      	orrs	r3, r1
 8019a1a:	60a3      	str	r3, [r4, #8]
 8019a1c:	bd38      	pop	{r3, r4, r5, pc}
 8019a1e:	4b0c      	ldr	r3, [pc, #48]	; (8019a50 <usart_baudrate_set+0x80>)
 8019a20:	e7e8      	b.n	80199f4 <usart_baudrate_set+0x24>
 8019a22:	4b0c      	ldr	r3, [pc, #48]	; (8019a54 <usart_baudrate_set+0x84>)
 8019a24:	f420 6280 	bic.w	r2, r0, #1024	; 0x400
 8019a28:	429a      	cmp	r2, r3
 8019a2a:	d002      	beq.n	8019a32 <usart_baudrate_set+0x62>
 8019a2c:	f5a3 4314 	sub.w	r3, r3, #37888	; 0x9400
 8019a30:	e7e0      	b.n	80199f4 <usart_baudrate_set+0x24>
 8019a32:	2003      	movs	r0, #3
 8019a34:	f7ff fc8c 	bl	8019350 <rcu_clock_freq_get>
 8019a38:	e7df      	b.n	80199fa <usart_baudrate_set+0x2a>
 8019a3a:	2002      	movs	r0, #2
 8019a3c:	e7fa      	b.n	8019a34 <usart_baudrate_set+0x64>
 8019a3e:	4403      	add	r3, r0
 8019a40:	fbb3 f1f5 	udiv	r1, r3, r5
 8019a44:	b289      	uxth	r1, r1
 8019a46:	60a1      	str	r1, [r4, #8]
 8019a48:	e7e8      	b.n	8019a1c <usart_baudrate_set+0x4c>
 8019a4a:	bf00      	nop
 8019a4c:	40007800 	andmi	r7, r0, r0, lsl #16
 8019a50:	40005000 	andmi	r5, r0, r0
 8019a54:	40011000 	andmi	r1, r1, r0

08019a58 <usart_parity_config>:
 8019a58:	68c3      	ldr	r3, [r0, #12]
 8019a5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8019a5e:	60c3      	str	r3, [r0, #12]
 8019a60:	68c3      	ldr	r3, [r0, #12]
 8019a62:	4319      	orrs	r1, r3
 8019a64:	60c1      	str	r1, [r0, #12]
 8019a66:	4770      	bx	lr

08019a68 <usart_word_length_set>:
 8019a68:	68c3      	ldr	r3, [r0, #12]
 8019a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019a6e:	60c3      	str	r3, [r0, #12]
 8019a70:	68c3      	ldr	r3, [r0, #12]
 8019a72:	4319      	orrs	r1, r3
 8019a74:	60c1      	str	r1, [r0, #12]
 8019a76:	4770      	bx	lr

08019a78 <usart_stop_bit_set>:
 8019a78:	6903      	ldr	r3, [r0, #16]
 8019a7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8019a7e:	6103      	str	r3, [r0, #16]
 8019a80:	6903      	ldr	r3, [r0, #16]
 8019a82:	4319      	orrs	r1, r3
 8019a84:	6101      	str	r1, [r0, #16]
 8019a86:	4770      	bx	lr

08019a88 <usart_transmit_config>:
 8019a88:	68c3      	ldr	r3, [r0, #12]
 8019a8a:	f023 0308 	bic.w	r3, r3, #8
 8019a8e:	4319      	orrs	r1, r3
 8019a90:	60c1      	str	r1, [r0, #12]
 8019a92:	4770      	bx	lr

08019a94 <usart_receive_config>:
 8019a94:	68c3      	ldr	r3, [r0, #12]
 8019a96:	f023 0304 	bic.w	r3, r3, #4
 8019a9a:	4319      	orrs	r1, r3
 8019a9c:	60c1      	str	r1, [r0, #12]
 8019a9e:	4770      	bx	lr

08019aa0 <usart_hardware_flow_rts_config>:
 8019aa0:	6943      	ldr	r3, [r0, #20]
 8019aa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019aa6:	4319      	orrs	r1, r3
 8019aa8:	6141      	str	r1, [r0, #20]
 8019aaa:	4770      	bx	lr

08019aac <usart_hardware_flow_cts_config>:
 8019aac:	6943      	ldr	r3, [r0, #20]
 8019aae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019ab2:	4319      	orrs	r1, r3
 8019ab4:	6141      	str	r1, [r0, #20]
 8019ab6:	4770      	bx	lr

08019ab8 <usart_dma_transmit_config>:
 8019ab8:	6943      	ldr	r3, [r0, #20]
 8019aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019abe:	4319      	orrs	r1, r3
 8019ac0:	6141      	str	r1, [r0, #20]
 8019ac2:	4770      	bx	lr

08019ac4 <usart_flag_get>:
 8019ac4:	098b      	lsrs	r3, r1, #6
 8019ac6:	f001 011f 	and.w	r1, r1, #31
 8019aca:	581a      	ldr	r2, [r3, r0]
 8019acc:	2301      	movs	r3, #1
 8019ace:	408b      	lsls	r3, r1
 8019ad0:	4213      	tst	r3, r2
 8019ad2:	bf14      	ite	ne
 8019ad4:	2001      	movne	r0, #1
 8019ad6:	2000      	moveq	r0, #0
 8019ad8:	4770      	bx	lr

08019ada <usart_flag_clear>:
 8019ada:	b510      	push	{r4, lr}
 8019adc:	098c      	lsrs	r4, r1, #6
 8019ade:	2201      	movs	r2, #1
 8019ae0:	5823      	ldr	r3, [r4, r0]
 8019ae2:	f001 011f 	and.w	r1, r1, #31
 8019ae6:	408a      	lsls	r2, r1
 8019ae8:	ea23 0302 	bic.w	r3, r3, r2
 8019aec:	5023      	str	r3, [r4, r0]
 8019aee:	bd10      	pop	{r4, pc}

08019af0 <usart_interrupt_enable>:
 8019af0:	098a      	lsrs	r2, r1, #6
 8019af2:	b510      	push	{r4, lr}
 8019af4:	f001 011f 	and.w	r1, r1, #31
 8019af8:	5814      	ldr	r4, [r2, r0]
 8019afa:	2301      	movs	r3, #1
 8019afc:	408b      	lsls	r3, r1
 8019afe:	4323      	orrs	r3, r4
 8019b00:	5013      	str	r3, [r2, r0]
 8019b02:	bd10      	pop	{r4, pc}

08019b04 <usart_interrupt_disable>:
 8019b04:	f7ff bfe9 	b.w	8019ada <usart_flag_clear>

08019b08 <usart_interrupt_flag_clear>:
 8019b08:	b510      	push	{r4, lr}
 8019b0a:	0d8c      	lsrs	r4, r1, #22
 8019b0c:	2201      	movs	r2, #1
 8019b0e:	5823      	ldr	r3, [r4, r0]
 8019b10:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8019b14:	408a      	lsls	r2, r1
 8019b16:	ea23 0302 	bic.w	r3, r3, r2
 8019b1a:	5023      	str	r3, [r4, r0]
 8019b1c:	bd10      	pop	{r4, pc}
	...

08019b20 <emac_eth_recv>:
 8019b20:	b538      	push	{r3, r4, r5, lr}
 8019b22:	4605      	mov	r5, r0
 8019b24:	f7ff fada 	bl	80190dc <enet_rxframe_size_get>
 8019b28:	4604      	mov	r4, r0
 8019b2a:	b138      	cbz	r0, 8019b3c <emac_eth_recv+0x1c>
 8019b2c:	4b05      	ldr	r3, [pc, #20]	; (8019b44 <emac_eth_recv+0x24>)
 8019b2e:	2105      	movs	r1, #5
 8019b30:	6818      	ldr	r0, [r3, #0]
 8019b32:	f7ff fa77 	bl	8019024 <enet_desc_information_get>
 8019b36:	6028      	str	r0, [r5, #0]
 8019b38:	4620      	mov	r0, r4
 8019b3a:	bd38      	pop	{r3, r4, r5, pc}
 8019b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b40:	e7fb      	b.n	8019b3a <emac_eth_recv+0x1a>
 8019b42:	bf00      	nop
 8019b44:	200106a0 	andcs	r0, r1, r0, lsr #13

08019b48 <emac_free_pkt>:
 8019b48:	2100      	movs	r1, #0
 8019b4a:	4608      	mov	r0, r1
 8019b4c:	f7fe bf86 	b.w	8018a5c <enet_frame_receive>

08019b50 <emac_eth_send>:
 8019b50:	f7fe bfd0 	b.w	8018af4 <enet_frame_transmit>

08019b54 <bkp_data_write(bkp_data_register_enum, unsigned short)>:
 8019b54:	2801      	cmp	r0, #1
 8019b56:	bf9c      	itt	ls
 8019b58:	4b01      	ldrls	r3, [pc, #4]	; (8019b60 <bkp_data_write(bkp_data_register_enum, unsigned short)+0xc>)
 8019b5a:	f823 1010 	strhls.w	r1, [r3, r0, lsl #1]
 8019b5e:	4770      	bx	lr
 8019b60:	40024010 	andmi	r4, r2, r0, lsl r0

08019b64 <bkp_data_read(bkp_data_register_enum)>:
 8019b64:	2801      	cmp	r0, #1
 8019b66:	bf9d      	ittte	ls
 8019b68:	4b02      	ldrls	r3, [pc, #8]	; (8019b74 <bkp_data_read(bkp_data_register_enum)+0x10>)
 8019b6a:	f833 0010 	ldrhls.w	r0, [r3, r0, lsl #1]
 8019b6e:	b280      	uxthls	r0, r0
 8019b70:	2000      	movhi	r0, #0
 8019b72:	4770      	bx	lr
 8019b74:	40024010 	andmi	r4, r2, r0, lsl r0

08019b78 <gd32_adc_init()>:
 8019b78:	b510      	push	{r4, lr}
 8019b7a:	f241 1008 	movw	r0, #4360	; 0x1108
 8019b7e:	4c24      	ldr	r4, [pc, #144]	; (8019c10 <gd32_adc_init()+0x98>)
 8019b80:	f7ff fbaa 	bl	80192d8 <rcu_periph_clock_enable>
 8019b84:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8019b88:	f000 fdca 	bl	801a720 <adc_clock_config>
 8019b8c:	4620      	mov	r0, r4
 8019b8e:	2203      	movs	r2, #3
 8019b90:	2102      	movs	r1, #2
 8019b92:	f000 fe47 	bl	801a824 <adc_channel_length_config>
 8019b96:	4620      	mov	r0, r4
 8019b98:	2306      	movs	r3, #6
 8019b9a:	2210      	movs	r2, #16
 8019b9c:	2100      	movs	r1, #0
 8019b9e:	f000 fe5e 	bl	801a85e <adc_inserted_channel_config>
 8019ba2:	4620      	mov	r0, r4
 8019ba4:	2306      	movs	r3, #6
 8019ba6:	2211      	movs	r2, #17
 8019ba8:	2101      	movs	r1, #1
 8019baa:	f000 fe58 	bl	801a85e <adc_inserted_channel_config>
 8019bae:	2306      	movs	r3, #6
 8019bb0:	4620      	mov	r0, r4
 8019bb2:	2212      	movs	r2, #18
 8019bb4:	2102      	movs	r1, #2
 8019bb6:	f000 fe52 	bl	801a85e <adc_inserted_channel_config>
 8019bba:	2200      	movs	r2, #0
 8019bbc:	4620      	mov	r0, r4
 8019bbe:	2102      	movs	r1, #2
 8019bc0:	f000 fe7c 	bl	801a8bc <adc_external_trigger_config>
 8019bc4:	4620      	mov	r0, r4
 8019bc6:	2100      	movs	r1, #0
 8019bc8:	f000 fde2 	bl	801a790 <adc_data_alignment_config>
 8019bcc:	2201      	movs	r2, #1
 8019bce:	4620      	mov	r0, r4
 8019bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8019bd4:	f000 fdb4 	bl	801a740 <adc_special_function_config>
 8019bd8:	2101      	movs	r1, #1
 8019bda:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8019bde:	f000 fdf9 	bl	801a7d4 <adc_channel_16_to_18>
 8019be2:	2101      	movs	r1, #1
 8019be4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8019be8:	f000 fdf4 	bl	801a7d4 <adc_channel_16_to_18>
 8019bec:	4620      	mov	r0, r4
 8019bee:	f000 fdd8 	bl	801a7a2 <adc_enable>
 8019bf2:	2100      	movs	r1, #0
 8019bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019bf8:	f000 fc64 	bl	801a4c4 <udelay(unsigned int, unsigned int)>
 8019bfc:	4620      	mov	r0, r4
 8019bfe:	f000 fdd8 	bl	801a7b2 <adc_calibration_enable>
 8019c02:	4620      	mov	r0, r4
 8019c04:	2102      	movs	r1, #2
 8019c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c0a:	f000 be6d 	b.w	801a8e8 <adc_software_trigger_enable>
 8019c0e:	bf00      	nop
 8019c10:	40012000 	andmi	r2, r1, r0

08019c14 <_stop() [clone .isra.0]>:
 8019c14:	b508      	push	{r3, lr}
 8019c16:	4806      	ldr	r0, [pc, #24]	; (8019c30 <_stop() [clone .isra.0]+0x1c>)
 8019c18:	f000 fef4 	bl	801aa04 <i2c_stop_on_bus>
 8019c1c:	4905      	ldr	r1, [pc, #20]	; (8019c34 <_stop() [clone .isra.0]+0x20>)
 8019c1e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8019c22:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8019c26:	0592      	lsls	r2, r2, #22
 8019c28:	d501      	bpl.n	8019c2e <_stop() [clone .isra.0]+0x1a>
 8019c2a:	3b01      	subs	r3, #1
 8019c2c:	d1f9      	bne.n	8019c22 <_stop() [clone .isra.0]+0xe>
 8019c2e:	bd08      	pop	{r3, pc}
 8019c30:	40005400 	andmi	r5, r0, r0, lsl #8
 8019c34:	40005000 	andmi	r5, r0, r0

08019c38 <gd32_i2c_begin>:
 8019c38:	b508      	push	{r3, lr}
 8019c3a:	f241 0015 	movw	r0, #4117	; 0x1015
 8019c3e:	f7ff fb4b 	bl	80192d8 <rcu_periph_clock_enable>
 8019c42:	f640 4001 	movw	r0, #3073	; 0xc01
 8019c46:	f7ff fb47 	bl	80192d8 <rcu_periph_clock_enable>
 8019c4a:	f640 4001 	movw	r0, #3073	; 0xc01
 8019c4e:	f7ff fb43 	bl	80192d8 <rcu_periph_clock_enable>
 8019c52:	481b      	ldr	r0, [pc, #108]	; (8019cc0 <gd32_i2c_begin+0x88>)
 8019c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019c58:	2104      	movs	r1, #4
 8019c5a:	f7ff fafc 	bl	8019256 <gpio_af_set>
 8019c5e:	4818      	ldr	r0, [pc, #96]	; (8019cc0 <gd32_i2c_begin+0x88>)
 8019c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019c64:	2104      	movs	r1, #4
 8019c66:	f7ff faf6 	bl	8019256 <gpio_af_set>
 8019c6a:	4815      	ldr	r0, [pc, #84]	; (8019cc0 <gd32_i2c_begin+0x88>)
 8019c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019c70:	2201      	movs	r2, #1
 8019c72:	2102      	movs	r1, #2
 8019c74:	f7ff fab4 	bl	80191e0 <gpio_mode_set>
 8019c78:	4811      	ldr	r0, [pc, #68]	; (8019cc0 <gd32_i2c_begin+0x88>)
 8019c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019c7e:	2202      	movs	r2, #2
 8019c80:	2101      	movs	r1, #1
 8019c82:	f7ff facd 	bl	8019220 <gpio_output_options_set>
 8019c86:	480e      	ldr	r0, [pc, #56]	; (8019cc0 <gd32_i2c_begin+0x88>)
 8019c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019c8c:	2201      	movs	r2, #1
 8019c8e:	2102      	movs	r1, #2
 8019c90:	f7ff faa6 	bl	80191e0 <gpio_mode_set>
 8019c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019c98:	4809      	ldr	r0, [pc, #36]	; (8019cc0 <gd32_i2c_begin+0x88>)
 8019c9a:	2202      	movs	r2, #2
 8019c9c:	2101      	movs	r1, #1
 8019c9e:	f7ff fabf 	bl	8019220 <gpio_output_options_set>
 8019ca2:	4908      	ldr	r1, [pc, #32]	; (8019cc4 <gd32_i2c_begin+0x8c>)
 8019ca4:	4808      	ldr	r0, [pc, #32]	; (8019cc8 <gd32_i2c_begin+0x90>)
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	f000 fe2c 	bl	801a904 <i2c_clock_config>
 8019cac:	4806      	ldr	r0, [pc, #24]	; (8019cc8 <gd32_i2c_begin+0x90>)
 8019cae:	f000 fe9f 	bl	801a9f0 <i2c_enable>
 8019cb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019cb6:	4804      	ldr	r0, [pc, #16]	; (8019cc8 <gd32_i2c_begin+0x90>)
 8019cb8:	2101      	movs	r1, #1
 8019cba:	f000 be7f 	b.w	801a9bc <i2c_ack_config>
 8019cbe:	bf00      	nop
 8019cc0:	40020400 	andmi	r0, r2, r0, lsl #8
 8019cc4:	00061a80 	andeq	r1, r6, r0, lsl #21
 8019cc8:	40005400 	andmi	r5, r0, r0, lsl #8

08019ccc <gd32_i2c_set_baudrate>:
 8019ccc:	4601      	mov	r1, r0
 8019cce:	2200      	movs	r2, #0
 8019cd0:	4801      	ldr	r0, [pc, #4]	; (8019cd8 <gd32_i2c_set_baudrate+0xc>)
 8019cd2:	f000 be17 	b.w	801a904 <i2c_clock_config>
 8019cd6:	bf00      	nop
 8019cd8:	40005400 	andmi	r5, r0, r0, lsl #8

08019cdc <gd32_i2c_set_address>:
 8019cdc:	4b01      	ldr	r3, [pc, #4]	; (8019ce4 <gd32_i2c_set_address+0x8>)
 8019cde:	0040      	lsls	r0, r0, #1
 8019ce0:	7018      	strb	r0, [r3, #0]
 8019ce2:	4770      	bx	lr
 8019ce4:	2002dc1c 	andcs	sp, r2, ip, lsl ip

08019ce8 <gd32_i2c_write>:
 8019ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cea:	4e30      	ldr	r6, [pc, #192]	; (8019dac <gd32_i2c_write+0xc4>)
 8019cec:	4604      	mov	r4, r0
 8019cee:	460f      	mov	r7, r1
 8019cf0:	f640 75ff 	movw	r5, #4095	; 0xfff
 8019cf4:	f240 6101 	movw	r1, #1537	; 0x601
 8019cf8:	4630      	mov	r0, r6
 8019cfa:	f000 fe8d 	bl	801aa18 <i2c_flag_get>
 8019cfe:	b9b0      	cbnz	r0, 8019d2e <gd32_i2c_write+0x46>
 8019d00:	482a      	ldr	r0, [pc, #168]	; (8019dac <gd32_i2c_write+0xc4>)
 8019d02:	4e2a      	ldr	r6, [pc, #168]	; (8019dac <gd32_i2c_write+0xc4>)
 8019d04:	f000 fe79 	bl	801a9fa <i2c_start_on_bus>
 8019d08:	f640 75ff 	movw	r5, #4095	; 0xfff
 8019d0c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8019d10:	4630      	mov	r0, r6
 8019d12:	f000 fe81 	bl	801aa18 <i2c_flag_get>
 8019d16:	b190      	cbz	r0, 8019d3e <gd32_i2c_write+0x56>
 8019d18:	4b25      	ldr	r3, [pc, #148]	; (8019db0 <gd32_i2c_write+0xc8>)
 8019d1a:	4824      	ldr	r0, [pc, #144]	; (8019dac <gd32_i2c_write+0xc4>)
 8019d1c:	7819      	ldrb	r1, [r3, #0]
 8019d1e:	4e23      	ldr	r6, [pc, #140]	; (8019dac <gd32_i2c_write+0xc4>)
 8019d20:	f06f 0201 	mvn.w	r2, #1
 8019d24:	f000 fe5c 	bl	801a9e0 <i2c_master_addressing>
 8019d28:	f640 75ff 	movw	r5, #4095	; 0xfff
 8019d2c:	e00c      	b.n	8019d48 <gd32_i2c_write+0x60>
 8019d2e:	3d01      	subs	r5, #1
 8019d30:	d1e0      	bne.n	8019cf4 <gd32_i2c_write+0xc>
 8019d32:	f7ff ff6f 	bl	8019c14 <_stop() [clone .isra.0]>
 8019d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d3a:	4240      	negs	r0, r0
 8019d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d3e:	3d01      	subs	r5, #1
 8019d40:	d1e4      	bne.n	8019d0c <gd32_i2c_write+0x24>
 8019d42:	e7f6      	b.n	8019d32 <gd32_i2c_write+0x4a>
 8019d44:	3d01      	subs	r5, #1
 8019d46:	d0f4      	beq.n	8019d32 <gd32_i2c_write+0x4a>
 8019d48:	f240 5101 	movw	r1, #1281	; 0x501
 8019d4c:	4630      	mov	r0, r6
 8019d4e:	f000 fe63 	bl	801aa18 <i2c_flag_get>
 8019d52:	2800      	cmp	r0, #0
 8019d54:	d0f6      	beq.n	8019d44 <gd32_i2c_write+0x5c>
 8019d56:	4815      	ldr	r0, [pc, #84]	; (8019dac <gd32_i2c_write+0xc4>)
 8019d58:	4e14      	ldr	r6, [pc, #80]	; (8019dac <gd32_i2c_write+0xc4>)
 8019d5a:	f240 5101 	movw	r1, #1281	; 0x501
 8019d5e:	f000 fe66 	bl	801aa2e <i2c_flag_clear>
 8019d62:	f640 75ff 	movw	r5, #4095	; 0xfff
 8019d66:	f240 5107 	movw	r1, #1287	; 0x507
 8019d6a:	4630      	mov	r0, r6
 8019d6c:	f000 fe54 	bl	801aa18 <i2c_flag_get>
 8019d70:	2801      	cmp	r0, #1
 8019d72:	d107      	bne.n	8019d84 <gd32_i2c_write+0x9c>
 8019d74:	4e0d      	ldr	r6, [pc, #52]	; (8019dac <gd32_i2c_write+0xc4>)
 8019d76:	4427      	add	r7, r4
 8019d78:	42a7      	cmp	r7, r4
 8019d7a:	d106      	bne.n	8019d8a <gd32_i2c_write+0xa2>
 8019d7c:	f7ff ff4a 	bl	8019c14 <_stop() [clone .isra.0]>
 8019d80:	2000      	movs	r0, #0
 8019d82:	e7da      	b.n	8019d3a <gd32_i2c_write+0x52>
 8019d84:	3d01      	subs	r5, #1
 8019d86:	d1ee      	bne.n	8019d66 <gd32_i2c_write+0x7e>
 8019d88:	e7d3      	b.n	8019d32 <gd32_i2c_write+0x4a>
 8019d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d8e:	4630      	mov	r0, r6
 8019d90:	f000 fe3d 	bl	801aa0e <i2c_data_transmit>
 8019d94:	f640 75ff 	movw	r5, #4095	; 0xfff
 8019d98:	f240 5102 	movw	r1, #1282	; 0x502
 8019d9c:	4630      	mov	r0, r6
 8019d9e:	f000 fe3b 	bl	801aa18 <i2c_flag_get>
 8019da2:	2800      	cmp	r0, #0
 8019da4:	d1e8      	bne.n	8019d78 <gd32_i2c_write+0x90>
 8019da6:	3d01      	subs	r5, #1
 8019da8:	d1f6      	bne.n	8019d98 <gd32_i2c_write+0xb0>
 8019daa:	e7c2      	b.n	8019d32 <gd32_i2c_write+0x4a>
 8019dac:	40005400 	andmi	r5, r0, r0, lsl #8
 8019db0:	2002dc1c 	andcs	sp, r2, ip, lsl ip

08019db4 <gd32_i2c_read>:
 8019db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019db8:	4f4d      	ldr	r7, [pc, #308]	; (8019ef0 <gd32_i2c_read+0x13c>)
 8019dba:	4680      	mov	r8, r0
 8019dbc:	460c      	mov	r4, r1
 8019dbe:	f640 76ff 	movw	r6, #4095	; 0xfff
 8019dc2:	f240 6101 	movw	r1, #1537	; 0x601
 8019dc6:	4638      	mov	r0, r7
 8019dc8:	f000 fe26 	bl	801aa18 <i2c_flag_get>
 8019dcc:	4605      	mov	r5, r0
 8019dce:	bb08      	cbnz	r0, 8019e14 <gd32_i2c_read+0x60>
 8019dd0:	2c02      	cmp	r4, #2
 8019dd2:	d103      	bne.n	8019ddc <gd32_i2c_read+0x28>
 8019dd4:	4601      	mov	r1, r0
 8019dd6:	4846      	ldr	r0, [pc, #280]	; (8019ef0 <gd32_i2c_read+0x13c>)
 8019dd8:	f000 fdf9 	bl	801a9ce <i2c_ackpos_config>
 8019ddc:	4844      	ldr	r0, [pc, #272]	; (8019ef0 <gd32_i2c_read+0x13c>)
 8019dde:	4f44      	ldr	r7, [pc, #272]	; (8019ef0 <gd32_i2c_read+0x13c>)
 8019de0:	f000 fe0b 	bl	801a9fa <i2c_start_on_bus>
 8019de4:	f640 76ff 	movw	r6, #4095	; 0xfff
 8019de8:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8019dec:	4638      	mov	r0, r7
 8019dee:	f000 fe13 	bl	801aa18 <i2c_flag_get>
 8019df2:	b1a8      	cbz	r0, 8019e20 <gd32_i2c_read+0x6c>
 8019df4:	4b3f      	ldr	r3, [pc, #252]	; (8019ef4 <gd32_i2c_read+0x140>)
 8019df6:	483e      	ldr	r0, [pc, #248]	; (8019ef0 <gd32_i2c_read+0x13c>)
 8019df8:	7819      	ldrb	r1, [r3, #0]
 8019dfa:	2201      	movs	r2, #1
 8019dfc:	f000 fdf0 	bl	801a9e0 <i2c_master_addressing>
 8019e00:	2c02      	cmp	r4, #2
 8019e02:	d803      	bhi.n	8019e0c <gd32_i2c_read+0x58>
 8019e04:	483a      	ldr	r0, [pc, #232]	; (8019ef0 <gd32_i2c_read+0x13c>)
 8019e06:	2100      	movs	r1, #0
 8019e08:	f000 fdd8 	bl	801a9bc <i2c_ack_config>
 8019e0c:	4f38      	ldr	r7, [pc, #224]	; (8019ef0 <gd32_i2c_read+0x13c>)
 8019e0e:	f640 76ff 	movw	r6, #4095	; 0xfff
 8019e12:	e00a      	b.n	8019e2a <gd32_i2c_read+0x76>
 8019e14:	3e01      	subs	r6, #1
 8019e16:	d1d4      	bne.n	8019dc2 <gd32_i2c_read+0xe>
 8019e18:	f7ff fefc 	bl	8019c14 <_stop() [clone .isra.0]>
 8019e1c:	2504      	movs	r5, #4
 8019e1e:	e04d      	b.n	8019ebc <gd32_i2c_read+0x108>
 8019e20:	3e01      	subs	r6, #1
 8019e22:	d1e1      	bne.n	8019de8 <gd32_i2c_read+0x34>
 8019e24:	e7f8      	b.n	8019e18 <gd32_i2c_read+0x64>
 8019e26:	3e01      	subs	r6, #1
 8019e28:	d0f6      	beq.n	8019e18 <gd32_i2c_read+0x64>
 8019e2a:	f240 5101 	movw	r1, #1281	; 0x501
 8019e2e:	4638      	mov	r0, r7
 8019e30:	f000 fdf2 	bl	801aa18 <i2c_flag_get>
 8019e34:	2800      	cmp	r0, #0
 8019e36:	d0f6      	beq.n	8019e26 <gd32_i2c_read+0x72>
 8019e38:	482d      	ldr	r0, [pc, #180]	; (8019ef0 <gd32_i2c_read+0x13c>)
 8019e3a:	f240 5101 	movw	r1, #1281	; 0x501
 8019e3e:	f000 fdf6 	bl	801aa2e <i2c_flag_clear>
 8019e42:	2c01      	cmp	r4, #1
 8019e44:	d102      	bne.n	8019e4c <gd32_i2c_read+0x98>
 8019e46:	482a      	ldr	r0, [pc, #168]	; (8019ef0 <gd32_i2c_read+0x13c>)
 8019e48:	f000 fddc 	bl	801aa04 <i2c_stop_on_bus>
 8019e4c:	4e28      	ldr	r6, [pc, #160]	; (8019ef0 <gd32_i2c_read+0x13c>)
 8019e4e:	f640 77ff 	movw	r7, #4095	; 0xfff
 8019e52:	e022      	b.n	8019e9a <gd32_i2c_read+0xe6>
 8019e54:	2c03      	cmp	r4, #3
 8019e56:	d134      	bne.n	8019ec2 <gd32_i2c_read+0x10e>
 8019e58:	f640 79ff 	movw	r9, #4095	; 0xfff
 8019e5c:	e002      	b.n	8019e64 <gd32_i2c_read+0xb0>
 8019e5e:	f1b9 0901 	subs.w	r9, r9, #1
 8019e62:	d0d9      	beq.n	8019e18 <gd32_i2c_read+0x64>
 8019e64:	f240 5102 	movw	r1, #1282	; 0x502
 8019e68:	4630      	mov	r0, r6
 8019e6a:	f000 fdd5 	bl	801aa18 <i2c_flag_get>
 8019e6e:	2800      	cmp	r0, #0
 8019e70:	d0f5      	beq.n	8019e5e <gd32_i2c_read+0xaa>
 8019e72:	2100      	movs	r1, #0
 8019e74:	4630      	mov	r0, r6
 8019e76:	f000 fda1 	bl	801a9bc <i2c_ack_config>
 8019e7a:	f240 5106 	movw	r1, #1286	; 0x506
 8019e7e:	4630      	mov	r0, r6
 8019e80:	f000 fdca 	bl	801aa18 <i2c_flag_get>
 8019e84:	b138      	cbz	r0, 8019e96 <gd32_i2c_read+0xe2>
 8019e86:	4630      	mov	r0, r6
 8019e88:	f000 fdc3 	bl	801aa12 <i2c_data_receive>
 8019e8c:	f808 0b01 	strb.w	r0, [r8], #1
 8019e90:	3c01      	subs	r4, #1
 8019e92:	f640 77ff 	movw	r7, #4095	; 0xfff
 8019e96:	3f01      	subs	r7, #1
 8019e98:	d0be      	beq.n	8019e18 <gd32_i2c_read+0x64>
 8019e9a:	2c00      	cmp	r4, #0
 8019e9c:	d1da      	bne.n	8019e54 <gd32_i2c_read+0xa0>
 8019e9e:	4916      	ldr	r1, [pc, #88]	; (8019ef8 <gd32_i2c_read+0x144>)
 8019ea0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8019ea4:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8019ea8:	0592      	lsls	r2, r2, #22
 8019eaa:	d41d      	bmi.n	8019ee8 <gd32_i2c_read+0x134>
 8019eac:	4810      	ldr	r0, [pc, #64]	; (8019ef0 <gd32_i2c_read+0x13c>)
 8019eae:	2101      	movs	r1, #1
 8019eb0:	f000 fd84 	bl	801a9bc <i2c_ack_config>
 8019eb4:	480e      	ldr	r0, [pc, #56]	; (8019ef0 <gd32_i2c_read+0x13c>)
 8019eb6:	2101      	movs	r1, #1
 8019eb8:	f000 fd89 	bl	801a9ce <i2c_ackpos_config>
 8019ebc:	4628      	mov	r0, r5
 8019ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ec2:	2c02      	cmp	r4, #2
 8019ec4:	d1d9      	bne.n	8019e7a <gd32_i2c_read+0xc6>
 8019ec6:	f640 79ff 	movw	r9, #4095	; 0xfff
 8019eca:	e002      	b.n	8019ed2 <gd32_i2c_read+0x11e>
 8019ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8019ed0:	d0a2      	beq.n	8019e18 <gd32_i2c_read+0x64>
 8019ed2:	f240 5102 	movw	r1, #1282	; 0x502
 8019ed6:	4630      	mov	r0, r6
 8019ed8:	f000 fd9e 	bl	801aa18 <i2c_flag_get>
 8019edc:	2800      	cmp	r0, #0
 8019ede:	d0f5      	beq.n	8019ecc <gd32_i2c_read+0x118>
 8019ee0:	4630      	mov	r0, r6
 8019ee2:	f000 fd8f 	bl	801aa04 <i2c_stop_on_bus>
 8019ee6:	e7c8      	b.n	8019e7a <gd32_i2c_read+0xc6>
 8019ee8:	3b01      	subs	r3, #1
 8019eea:	d1db      	bne.n	8019ea4 <gd32_i2c_read+0xf0>
 8019eec:	e796      	b.n	8019e1c <gd32_i2c_read+0x68>
 8019eee:	bf00      	nop
 8019ef0:	40005400 	andmi	r5, r0, r0, lsl #8
 8019ef4:	2002dc1c 	andcs	sp, r2, ip, lsl ip
 8019ef8:	40005000 	andmi	r5, r0, r0

08019efc <_cs_high()>:
 8019efc:	4b03      	ldr	r3, [pc, #12]	; (8019f0c <_cs_high()+0x10>)
 8019efe:	781b      	ldrb	r3, [r3, #0]
 8019f00:	b91b      	cbnz	r3, 8019f0a <_cs_high()+0xe>
 8019f02:	4b03      	ldr	r3, [pc, #12]	; (8019f10 <_cs_high()+0x14>)
 8019f04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019f08:	619a      	str	r2, [r3, #24]
 8019f0a:	4770      	bx	lr
 8019f0c:	2002dc1d 	andcs	sp, r2, sp, lsl ip
 8019f10:	40020000 	andmi	r0, r2, r0

08019f14 <_cs_low()>:
 8019f14:	4b03      	ldr	r3, [pc, #12]	; (8019f24 <_cs_low()+0x10>)
 8019f16:	781b      	ldrb	r3, [r3, #0]
 8019f18:	b91b      	cbnz	r3, 8019f22 <_cs_low()+0xe>
 8019f1a:	4b03      	ldr	r3, [pc, #12]	; (8019f28 <_cs_low()+0x14>)
 8019f1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019f20:	629a      	str	r2, [r3, #40]	; 0x28
 8019f22:	4770      	bx	lr
 8019f24:	2002dc1d 	andcs	sp, r2, sp, lsl ip
 8019f28:	40020000 	andmi	r0, r2, r0

08019f2c <_send_byte(unsigned char)>:
 8019f2c:	4b07      	ldr	r3, [pc, #28]	; (8019f4c <_send_byte(unsigned char)+0x20>)
 8019f2e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8019f32:	0791      	lsls	r1, r2, #30
 8019f34:	d5fb      	bpl.n	8019f2e <_send_byte(unsigned char)+0x2>
 8019f36:	f8c3 0c0c 	str.w	r0, [r3, #3084]	; 0xc0c
 8019f3a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8019f3e:	07d2      	lsls	r2, r2, #31
 8019f40:	d5fb      	bpl.n	8019f3a <_send_byte(unsigned char)+0xe>
 8019f42:	f8d3 0c0c 	ldr.w	r0, [r3, #3084]	; 0xc0c
 8019f46:	b2c0      	uxtb	r0, r0
 8019f48:	4770      	bx	lr
 8019f4a:	bf00      	nop
 8019f4c:	40003000 	andmi	r3, r0, r0

08019f50 <gd32_spi_begin()>:
 8019f50:	b500      	push	{lr}
 8019f52:	f640 4001 	movw	r0, #3073	; 0xc01
 8019f56:	b089      	sub	sp, #36	; 0x24
 8019f58:	f7ff f9be 	bl	80192d8 <rcu_periph_clock_enable>
 8019f5c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8019f60:	f7ff f9ba 	bl	80192d8 <rcu_periph_clock_enable>
 8019f64:	f241 000f 	movw	r0, #4111	; 0x100f
 8019f68:	f7ff f9b6 	bl	80192d8 <rcu_periph_clock_enable>
 8019f6c:	481e      	ldr	r0, [pc, #120]	; (8019fe8 <gd32_spi_begin()+0x98>)
 8019f6e:	2238      	movs	r2, #56	; 0x38
 8019f70:	2106      	movs	r1, #6
 8019f72:	f7ff f970 	bl	8019256 <gpio_af_set>
 8019f76:	481c      	ldr	r0, [pc, #112]	; (8019fe8 <gd32_spi_begin()+0x98>)
 8019f78:	2338      	movs	r3, #56	; 0x38
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	2102      	movs	r1, #2
 8019f7e:	f7ff f92f 	bl	80191e0 <gpio_mode_set>
 8019f82:	4819      	ldr	r0, [pc, #100]	; (8019fe8 <gd32_spi_begin()+0x98>)
 8019f84:	2338      	movs	r3, #56	; 0x38
 8019f86:	2202      	movs	r2, #2
 8019f88:	2100      	movs	r1, #0
 8019f8a:	f7ff f949 	bl	8019220 <gpio_output_options_set>
 8019f8e:	4817      	ldr	r0, [pc, #92]	; (8019fec <gd32_spi_begin()+0x9c>)
 8019f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019f94:	2200      	movs	r2, #0
 8019f96:	2101      	movs	r1, #1
 8019f98:	f7ff f922 	bl	80191e0 <gpio_mode_set>
 8019f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019fa0:	2202      	movs	r2, #2
 8019fa2:	2100      	movs	r1, #0
 8019fa4:	4811      	ldr	r0, [pc, #68]	; (8019fec <gd32_spi_begin()+0x9c>)
 8019fa6:	f7ff f93b 	bl	8019220 <gpio_output_options_set>
 8019faa:	4811      	ldr	r0, [pc, #68]	; (8019ff0 <gd32_spi_begin()+0xa0>)
 8019fac:	f7ff ffa6 	bl	8019efc <_cs_high()>
 8019fb0:	f000 fdb7 	bl	801ab22 <spi_disable>
 8019fb4:	480e      	ldr	r0, [pc, #56]	; (8019ff0 <gd32_spi_begin()+0xa0>)
 8019fb6:	f000 fd4d 	bl	801aa54 <spi_i2s_deinit>
 8019fba:	2300      	movs	r3, #0
 8019fbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8019fc0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8019fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019fc8:	9204      	str	r2, [sp, #16]
 8019fca:	a901      	add	r1, sp, #4
 8019fcc:	2228      	movs	r2, #40	; 0x28
 8019fce:	4808      	ldr	r0, [pc, #32]	; (8019ff0 <gd32_spi_begin()+0xa0>)
 8019fd0:	9303      	str	r3, [sp, #12]
 8019fd2:	9306      	str	r3, [sp, #24]
 8019fd4:	9207      	str	r2, [sp, #28]
 8019fd6:	9305      	str	r3, [sp, #20]
 8019fd8:	f000 fd86 	bl	801aae8 <spi_init>
 8019fdc:	4804      	ldr	r0, [pc, #16]	; (8019ff0 <gd32_spi_begin()+0xa0>)
 8019fde:	f000 fd9b 	bl	801ab18 <spi_enable>
 8019fe2:	b009      	add	sp, #36	; 0x24
 8019fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8019fe8:	40020400 	andmi	r0, r2, r0, lsl #8
 8019fec:	40020000 	andmi	r0, r2, r0
 8019ff0:	40003c00 	andmi	r3, r0, r0, lsl #24

08019ff4 <gd32_spi_set_speed_hz(unsigned int)>:
 8019ff4:	b538      	push	{r3, r4, r5, lr}
 8019ff6:	4d19      	ldr	r5, [pc, #100]	; (801a05c <gd32_spi_set_speed_hz(unsigned int)+0x68>)
 8019ff8:	4b19      	ldr	r3, [pc, #100]	; (801a060 <gd32_spi_set_speed_hz(unsigned int)+0x6c>)
 8019ffa:	f8d5 4c00 	ldr.w	r4, [r5, #3072]	; 0xc00
 8019ffe:	fbb3 f0f0 	udiv	r0, r3, r0
 801a002:	2802      	cmp	r0, #2
 801a004:	f024 0438 	bic.w	r4, r4, #56	; 0x38
 801a008:	d903      	bls.n	801a012 <gd32_spi_set_speed_hz(unsigned int)+0x1e>
 801a00a:	2804      	cmp	r0, #4
 801a00c:	d80b      	bhi.n	801a026 <gd32_spi_set_speed_hz(unsigned int)+0x32>
 801a00e:	f044 0408 	orr.w	r4, r4, #8
 801a012:	4814      	ldr	r0, [pc, #80]	; (801a064 <gd32_spi_set_speed_hz(unsigned int)+0x70>)
 801a014:	f000 fd85 	bl	801ab22 <spi_disable>
 801a018:	f8c5 4c00 	str.w	r4, [r5, #3072]	; 0xc00
 801a01c:	4811      	ldr	r0, [pc, #68]	; (801a064 <gd32_spi_set_speed_hz(unsigned int)+0x70>)
 801a01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a022:	f000 bd79 	b.w	801ab18 <spi_enable>
 801a026:	2808      	cmp	r0, #8
 801a028:	d802      	bhi.n	801a030 <gd32_spi_set_speed_hz(unsigned int)+0x3c>
 801a02a:	f044 0410 	orr.w	r4, r4, #16
 801a02e:	e7f0      	b.n	801a012 <gd32_spi_set_speed_hz(unsigned int)+0x1e>
 801a030:	2810      	cmp	r0, #16
 801a032:	d802      	bhi.n	801a03a <gd32_spi_set_speed_hz(unsigned int)+0x46>
 801a034:	f044 0418 	orr.w	r4, r4, #24
 801a038:	e7eb      	b.n	801a012 <gd32_spi_set_speed_hz(unsigned int)+0x1e>
 801a03a:	2820      	cmp	r0, #32
 801a03c:	d802      	bhi.n	801a044 <gd32_spi_set_speed_hz(unsigned int)+0x50>
 801a03e:	f044 0420 	orr.w	r4, r4, #32
 801a042:	e7e6      	b.n	801a012 <gd32_spi_set_speed_hz(unsigned int)+0x1e>
 801a044:	2840      	cmp	r0, #64	; 0x40
 801a046:	d802      	bhi.n	801a04e <gd32_spi_set_speed_hz(unsigned int)+0x5a>
 801a048:	f044 0428 	orr.w	r4, r4, #40	; 0x28
 801a04c:	e7e1      	b.n	801a012 <gd32_spi_set_speed_hz(unsigned int)+0x1e>
 801a04e:	2880      	cmp	r0, #128	; 0x80
 801a050:	bf94      	ite	ls
 801a052:	f044 0430 	orrls.w	r4, r4, #48	; 0x30
 801a056:	f044 0438 	orrhi.w	r4, r4, #56	; 0x38
 801a05a:	e7da      	b.n	801a012 <gd32_spi_set_speed_hz(unsigned int)+0x1e>
 801a05c:	40003000 	andmi	r3, r0, r0
 801a060:	02faf080 	rscseq	pc, sl, #128	; 0x80
 801a064:	40003c00 	andmi	r3, r0, r0, lsl #24

0801a068 <gd32_spi_setDataMode(unsigned char)>:
 801a068:	b538      	push	{r3, r4, r5, lr}
 801a06a:	4d09      	ldr	r5, [pc, #36]	; (801a090 <gd32_spi_setDataMode(unsigned char)+0x28>)
 801a06c:	f8d5 3c00 	ldr.w	r3, [r5, #3072]	; 0xc00
 801a070:	f000 0003 	and.w	r0, r0, #3
 801a074:	f023 0303 	bic.w	r3, r3, #3
 801a078:	ea40 0403 	orr.w	r4, r0, r3
 801a07c:	4805      	ldr	r0, [pc, #20]	; (801a094 <gd32_spi_setDataMode(unsigned char)+0x2c>)
 801a07e:	f000 fd50 	bl	801ab22 <spi_disable>
 801a082:	f8c5 4c00 	str.w	r4, [r5, #3072]	; 0xc00
 801a086:	4803      	ldr	r0, [pc, #12]	; (801a094 <gd32_spi_setDataMode(unsigned char)+0x2c>)
 801a088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a08c:	f000 bd44 	b.w	801ab18 <spi_enable>
 801a090:	40003000 	andmi	r3, r0, r0
 801a094:	40003c00 	andmi	r3, r0, r0, lsl #24

0801a098 <gd32_spi_chipSelect(unsigned char)>:
 801a098:	4b01      	ldr	r3, [pc, #4]	; (801a0a0 <gd32_spi_chipSelect(unsigned char)+0x8>)
 801a09a:	7018      	strb	r0, [r3, #0]
 801a09c:	4770      	bx	lr
 801a09e:	bf00      	nop
 801a0a0:	2002dc1d 	andcs	sp, r2, sp, lsl ip

0801a0a4 <gd32_spi_writenb(char const*, unsigned int)>:
 801a0a4:	b538      	push	{r3, r4, r5, lr}
 801a0a6:	f7ff ff35 	bl	8019f14 <_cs_low()>
 801a0aa:	4604      	mov	r4, r0
 801a0ac:	1845      	adds	r5, r0, r1
 801a0ae:	42ac      	cmp	r4, r5
 801a0b0:	d103      	bne.n	801a0ba <gd32_spi_writenb(char const*, unsigned int)+0x16>
 801a0b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a0b6:	f7ff bf21 	b.w	8019efc <_cs_high()>
 801a0ba:	f814 0b01 	ldrb.w	r0, [r4], #1
 801a0be:	f7ff ff35 	bl	8019f2c <_send_byte(unsigned char)>
 801a0c2:	e7f4      	b.n	801a0ae <gd32_spi_writenb(char const*, unsigned int)+0xa>

0801a0c4 <_gpio_init(unsigned int)>:
 801a0c4:	4b96      	ldr	r3, [pc, #600]	; (801a320 <_gpio_init(unsigned int)+0x25c>)
 801a0c6:	4298      	cmp	r0, r3
 801a0c8:	b510      	push	{r4, lr}
 801a0ca:	f000 8104 	beq.w	801a2d6 <_gpio_init(unsigned int)+0x212>
 801a0ce:	d831      	bhi.n	801a134 <_gpio_init(unsigned int)+0x70>
 801a0d0:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 801a0d4:	4298      	cmp	r0, r3
 801a0d6:	f000 8098 	beq.w	801a20a <_gpio_init(unsigned int)+0x146>
 801a0da:	f200 80bd 	bhi.w	801a258 <_gpio_init(unsigned int)+0x194>
 801a0de:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801a0e2:	4298      	cmp	r0, r3
 801a0e4:	d070      	beq.n	801a1c8 <_gpio_init(unsigned int)+0x104>
 801a0e6:	488f      	ldr	r0, [pc, #572]	; (801a324 <_gpio_init(unsigned int)+0x260>)
 801a0e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a0ec:	2107      	movs	r1, #7
 801a0ee:	f7ff f8b2 	bl	8019256 <gpio_af_set>
 801a0f2:	488c      	ldr	r0, [pc, #560]	; (801a324 <_gpio_init(unsigned int)+0x260>)
 801a0f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a0f8:	2201      	movs	r2, #1
 801a0fa:	2102      	movs	r1, #2
 801a0fc:	f7ff f870 	bl	80191e0 <gpio_mode_set>
 801a100:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a104:	4887      	ldr	r0, [pc, #540]	; (801a324 <_gpio_init(unsigned int)+0x260>)
 801a106:	2202      	movs	r2, #2
 801a108:	2100      	movs	r1, #0
 801a10a:	f7ff f889 	bl	8019220 <gpio_output_options_set>
 801a10e:	4885      	ldr	r0, [pc, #532]	; (801a324 <_gpio_init(unsigned int)+0x260>)
 801a110:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a114:	2107      	movs	r1, #7
 801a116:	f7ff f89e 	bl	8019256 <gpio_af_set>
 801a11a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a11e:	4881      	ldr	r0, [pc, #516]	; (801a324 <_gpio_init(unsigned int)+0x260>)
 801a120:	2201      	movs	r2, #1
 801a122:	2102      	movs	r1, #2
 801a124:	f7ff f85c 	bl	80191e0 <gpio_mode_set>
 801a128:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a12c:	487d      	ldr	r0, [pc, #500]	; (801a324 <_gpio_init(unsigned int)+0x260>)
 801a12e:	2202      	movs	r2, #2
 801a130:	2100      	movs	r1, #0
 801a132:	e045      	b.n	801a1c0 <_gpio_init(unsigned int)+0xfc>
 801a134:	4b7c      	ldr	r3, [pc, #496]	; (801a328 <_gpio_init(unsigned int)+0x264>)
 801a136:	4298      	cmp	r0, r3
 801a138:	d022      	beq.n	801a180 <_gpio_init(unsigned int)+0xbc>
 801a13a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801a13e:	4298      	cmp	r0, r3
 801a140:	f000 80ab 	beq.w	801a29a <_gpio_init(unsigned int)+0x1d6>
 801a144:	4879      	ldr	r0, [pc, #484]	; (801a32c <_gpio_init(unsigned int)+0x268>)
 801a146:	2202      	movs	r2, #2
 801a148:	2108      	movs	r1, #8
 801a14a:	f7ff f884 	bl	8019256 <gpio_af_set>
 801a14e:	2302      	movs	r3, #2
 801a150:	4619      	mov	r1, r3
 801a152:	4876      	ldr	r0, [pc, #472]	; (801a32c <_gpio_init(unsigned int)+0x268>)
 801a154:	2201      	movs	r2, #1
 801a156:	f7ff f843 	bl	80191e0 <gpio_mode_set>
 801a15a:	2302      	movs	r3, #2
 801a15c:	461a      	mov	r2, r3
 801a15e:	4873      	ldr	r0, [pc, #460]	; (801a32c <_gpio_init(unsigned int)+0x268>)
 801a160:	2100      	movs	r1, #0
 801a162:	f7ff f85d 	bl	8019220 <gpio_output_options_set>
 801a166:	4871      	ldr	r0, [pc, #452]	; (801a32c <_gpio_init(unsigned int)+0x268>)
 801a168:	2201      	movs	r2, #1
 801a16a:	2108      	movs	r1, #8
 801a16c:	f7ff f873 	bl	8019256 <gpio_af_set>
 801a170:	2301      	movs	r3, #1
 801a172:	461a      	mov	r2, r3
 801a174:	486d      	ldr	r0, [pc, #436]	; (801a32c <_gpio_init(unsigned int)+0x268>)
 801a176:	2102      	movs	r1, #2
 801a178:	f7ff f832 	bl	80191e0 <gpio_mode_set>
 801a17c:	2301      	movs	r3, #1
 801a17e:	e0ca      	b.n	801a316 <_gpio_init(unsigned int)+0x252>
 801a180:	486b      	ldr	r0, [pc, #428]	; (801a330 <_gpio_init(unsigned int)+0x26c>)
 801a182:	2240      	movs	r2, #64	; 0x40
 801a184:	2107      	movs	r1, #7
 801a186:	f7ff f866 	bl	8019256 <gpio_af_set>
 801a18a:	4869      	ldr	r0, [pc, #420]	; (801a330 <_gpio_init(unsigned int)+0x26c>)
 801a18c:	2340      	movs	r3, #64	; 0x40
 801a18e:	2201      	movs	r2, #1
 801a190:	2102      	movs	r1, #2
 801a192:	f7ff f825 	bl	80191e0 <gpio_mode_set>
 801a196:	2340      	movs	r3, #64	; 0x40
 801a198:	4865      	ldr	r0, [pc, #404]	; (801a330 <_gpio_init(unsigned int)+0x26c>)
 801a19a:	2202      	movs	r2, #2
 801a19c:	2100      	movs	r1, #0
 801a19e:	f7ff f83f 	bl	8019220 <gpio_output_options_set>
 801a1a2:	4863      	ldr	r0, [pc, #396]	; (801a330 <_gpio_init(unsigned int)+0x26c>)
 801a1a4:	2280      	movs	r2, #128	; 0x80
 801a1a6:	2107      	movs	r1, #7
 801a1a8:	f7ff f855 	bl	8019256 <gpio_af_set>
 801a1ac:	4860      	ldr	r0, [pc, #384]	; (801a330 <_gpio_init(unsigned int)+0x26c>)
 801a1ae:	2380      	movs	r3, #128	; 0x80
 801a1b0:	2201      	movs	r2, #1
 801a1b2:	2102      	movs	r1, #2
 801a1b4:	f7ff f814 	bl	80191e0 <gpio_mode_set>
 801a1b8:	485d      	ldr	r0, [pc, #372]	; (801a330 <_gpio_init(unsigned int)+0x26c>)
 801a1ba:	2380      	movs	r3, #128	; 0x80
 801a1bc:	2202      	movs	r2, #2
 801a1be:	2100      	movs	r1, #0
 801a1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a1c4:	f7ff b82c 	b.w	8019220 <gpio_output_options_set>
 801a1c8:	485a      	ldr	r0, [pc, #360]	; (801a334 <_gpio_init(unsigned int)+0x270>)
 801a1ca:	2204      	movs	r2, #4
 801a1cc:	2107      	movs	r1, #7
 801a1ce:	f7ff f842 	bl	8019256 <gpio_af_set>
 801a1d2:	4858      	ldr	r0, [pc, #352]	; (801a334 <_gpio_init(unsigned int)+0x270>)
 801a1d4:	2304      	movs	r3, #4
 801a1d6:	2201      	movs	r2, #1
 801a1d8:	2102      	movs	r1, #2
 801a1da:	f7ff f801 	bl	80191e0 <gpio_mode_set>
 801a1de:	2304      	movs	r3, #4
 801a1e0:	4854      	ldr	r0, [pc, #336]	; (801a334 <_gpio_init(unsigned int)+0x270>)
 801a1e2:	2202      	movs	r2, #2
 801a1e4:	2100      	movs	r1, #0
 801a1e6:	f7ff f81b 	bl	8019220 <gpio_output_options_set>
 801a1ea:	4852      	ldr	r0, [pc, #328]	; (801a334 <_gpio_init(unsigned int)+0x270>)
 801a1ec:	2208      	movs	r2, #8
 801a1ee:	2107      	movs	r1, #7
 801a1f0:	f7ff f831 	bl	8019256 <gpio_af_set>
 801a1f4:	484f      	ldr	r0, [pc, #316]	; (801a334 <_gpio_init(unsigned int)+0x270>)
 801a1f6:	2308      	movs	r3, #8
 801a1f8:	2201      	movs	r2, #1
 801a1fa:	2102      	movs	r1, #2
 801a1fc:	f7fe fff0 	bl	80191e0 <gpio_mode_set>
 801a200:	484c      	ldr	r0, [pc, #304]	; (801a334 <_gpio_init(unsigned int)+0x270>)
 801a202:	2308      	movs	r3, #8
 801a204:	2202      	movs	r2, #2
 801a206:	2100      	movs	r1, #0
 801a208:	e7da      	b.n	801a1c0 <_gpio_init(unsigned int)+0xfc>
 801a20a:	484b      	ldr	r0, [pc, #300]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a20c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a210:	2108      	movs	r1, #8
 801a212:	f7ff f820 	bl	8019256 <gpio_af_set>
 801a216:	4848      	ldr	r0, [pc, #288]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a21c:	2201      	movs	r2, #1
 801a21e:	2102      	movs	r1, #2
 801a220:	f7fe ffde 	bl	80191e0 <gpio_mode_set>
 801a224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a228:	4843      	ldr	r0, [pc, #268]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a22a:	2202      	movs	r2, #2
 801a22c:	2100      	movs	r1, #0
 801a22e:	f7fe fff7 	bl	8019220 <gpio_output_options_set>
 801a232:	4841      	ldr	r0, [pc, #260]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a238:	2108      	movs	r1, #8
 801a23a:	f7ff f80c 	bl	8019256 <gpio_af_set>
 801a23e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a242:	483d      	ldr	r0, [pc, #244]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a244:	2201      	movs	r2, #1
 801a246:	2102      	movs	r1, #2
 801a248:	f7fe ffca 	bl	80191e0 <gpio_mode_set>
 801a24c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a250:	4839      	ldr	r0, [pc, #228]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a252:	2202      	movs	r2, #2
 801a254:	2100      	movs	r1, #0
 801a256:	e7b3      	b.n	801a1c0 <_gpio_init(unsigned int)+0xfc>
 801a258:	4837      	ldr	r0, [pc, #220]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a25a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a25e:	2108      	movs	r1, #8
 801a260:	f7fe fff9 	bl	8019256 <gpio_af_set>
 801a264:	4834      	ldr	r0, [pc, #208]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a26a:	2201      	movs	r2, #1
 801a26c:	2102      	movs	r1, #2
 801a26e:	f7fe ffb7 	bl	80191e0 <gpio_mode_set>
 801a272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a276:	4830      	ldr	r0, [pc, #192]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a278:	2202      	movs	r2, #2
 801a27a:	2100      	movs	r1, #0
 801a27c:	f7fe ffd0 	bl	8019220 <gpio_output_options_set>
 801a280:	4828      	ldr	r0, [pc, #160]	; (801a324 <_gpio_init(unsigned int)+0x260>)
 801a282:	2204      	movs	r2, #4
 801a284:	2108      	movs	r1, #8
 801a286:	f7fe ffe6 	bl	8019256 <gpio_af_set>
 801a28a:	2304      	movs	r3, #4
 801a28c:	4825      	ldr	r0, [pc, #148]	; (801a324 <_gpio_init(unsigned int)+0x260>)
 801a28e:	2201      	movs	r2, #1
 801a290:	2102      	movs	r1, #2
 801a292:	f7fe ffa5 	bl	80191e0 <gpio_mode_set>
 801a296:	2304      	movs	r3, #4
 801a298:	e748      	b.n	801a12c <_gpio_init(unsigned int)+0x68>
 801a29a:	4827      	ldr	r0, [pc, #156]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a29c:	2240      	movs	r2, #64	; 0x40
 801a29e:	2108      	movs	r1, #8
 801a2a0:	f7fe ffd9 	bl	8019256 <gpio_af_set>
 801a2a4:	4824      	ldr	r0, [pc, #144]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a2a6:	2340      	movs	r3, #64	; 0x40
 801a2a8:	2201      	movs	r2, #1
 801a2aa:	2102      	movs	r1, #2
 801a2ac:	f7fe ff98 	bl	80191e0 <gpio_mode_set>
 801a2b0:	2340      	movs	r3, #64	; 0x40
 801a2b2:	4821      	ldr	r0, [pc, #132]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a2b4:	2202      	movs	r2, #2
 801a2b6:	2100      	movs	r1, #0
 801a2b8:	f7fe ffb2 	bl	8019220 <gpio_output_options_set>
 801a2bc:	481e      	ldr	r0, [pc, #120]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a2be:	2280      	movs	r2, #128	; 0x80
 801a2c0:	2108      	movs	r1, #8
 801a2c2:	f7fe ffc8 	bl	8019256 <gpio_af_set>
 801a2c6:	2380      	movs	r3, #128	; 0x80
 801a2c8:	481b      	ldr	r0, [pc, #108]	; (801a338 <_gpio_init(unsigned int)+0x274>)
 801a2ca:	2201      	movs	r2, #1
 801a2cc:	2102      	movs	r1, #2
 801a2ce:	f7fe ff87 	bl	80191e0 <gpio_mode_set>
 801a2d2:	2380      	movs	r3, #128	; 0x80
 801a2d4:	e7bc      	b.n	801a250 <_gpio_init(unsigned int)+0x18c>
 801a2d6:	4815      	ldr	r0, [pc, #84]	; (801a32c <_gpio_init(unsigned int)+0x268>)
 801a2d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a2dc:	2108      	movs	r1, #8
 801a2de:	f7fe ffba 	bl	8019256 <gpio_af_set>
 801a2e2:	4812      	ldr	r0, [pc, #72]	; (801a32c <_gpio_init(unsigned int)+0x268>)
 801a2e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a2e8:	2201      	movs	r2, #1
 801a2ea:	2102      	movs	r1, #2
 801a2ec:	f7fe ff78 	bl	80191e0 <gpio_mode_set>
 801a2f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a2f4:	480d      	ldr	r0, [pc, #52]	; (801a32c <_gpio_init(unsigned int)+0x268>)
 801a2f6:	2202      	movs	r2, #2
 801a2f8:	2100      	movs	r1, #0
 801a2fa:	f7fe ff91 	bl	8019220 <gpio_output_options_set>
 801a2fe:	480b      	ldr	r0, [pc, #44]	; (801a32c <_gpio_init(unsigned int)+0x268>)
 801a300:	2280      	movs	r2, #128	; 0x80
 801a302:	2108      	movs	r1, #8
 801a304:	f7fe ffa7 	bl	8019256 <gpio_af_set>
 801a308:	2380      	movs	r3, #128	; 0x80
 801a30a:	4808      	ldr	r0, [pc, #32]	; (801a32c <_gpio_init(unsigned int)+0x268>)
 801a30c:	2201      	movs	r2, #1
 801a30e:	2102      	movs	r1, #2
 801a310:	f7fe ff66 	bl	80191e0 <gpio_mode_set>
 801a314:	2380      	movs	r3, #128	; 0x80
 801a316:	4805      	ldr	r0, [pc, #20]	; (801a32c <_gpio_init(unsigned int)+0x268>)
 801a318:	2202      	movs	r2, #2
 801a31a:	2100      	movs	r1, #0
 801a31c:	e750      	b.n	801a1c0 <_gpio_init(unsigned int)+0xfc>
 801a31e:	bf00      	nop
 801a320:	40007800 	andmi	r7, r0, r0, lsl #16
 801a324:	40020c00 	andmi	r0, r2, r0, lsl #24
 801a328:	40011000 	andmi	r1, r1, r0
 801a32c:	40021000 	andmi	r1, r2, r0
 801a330:	40020400 	andmi	r0, r2, r0, lsl #8
 801a334:	40020000 	andmi	r0, r2, r0
 801a338:	40020800 	andmi	r0, r2, r0, lsl #16

0801a33c <gd32_uart_begin>:
 801a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a33e:	461e      	mov	r6, r3
 801a340:	4b44      	ldr	r3, [pc, #272]	; (801a454 <gd32_uart_begin+0x118>)
 801a342:	4298      	cmp	r0, r3
 801a344:	4604      	mov	r4, r0
 801a346:	460f      	mov	r7, r1
 801a348:	4615      	mov	r5, r2
 801a34a:	d076      	beq.n	801a43a <gd32_uart_begin+0xfe>
 801a34c:	d80f      	bhi.n	801a36e <gd32_uart_begin+0x32>
 801a34e:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 801a352:	4298      	cmp	r0, r3
 801a354:	d060      	beq.n	801a418 <gd32_uart_begin+0xdc>
 801a356:	d866      	bhi.n	801a426 <gd32_uart_begin+0xea>
 801a358:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801a35c:	4298      	cmp	r0, r3
 801a35e:	d054      	beq.n	801a40a <gd32_uart_begin+0xce>
 801a360:	f241 0012 	movw	r0, #4114	; 0x1012
 801a364:	f7fe ffb8 	bl	80192d8 <rcu_periph_clock_enable>
 801a368:	f640 4003 	movw	r0, #3075	; 0xc03
 801a36c:	e00f      	b.n	801a38e <gd32_uart_begin+0x52>
 801a36e:	4b3a      	ldr	r3, [pc, #232]	; (801a458 <gd32_uart_begin+0x11c>)
 801a370:	4298      	cmp	r0, r3
 801a372:	d006      	beq.n	801a382 <gd32_uart_begin+0x46>
 801a374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801a378:	4298      	cmp	r0, r3
 801a37a:	d05b      	beq.n	801a434 <gd32_uart_begin+0xf8>
 801a37c:	f241 001f 	movw	r0, #4127	; 0x101f
 801a380:	e05d      	b.n	801a43e <gd32_uart_begin+0x102>
 801a382:	f241 1004 	movw	r0, #4356	; 0x1104
 801a386:	f7fe ffa7 	bl	80192d8 <rcu_periph_clock_enable>
 801a38a:	f640 4001 	movw	r0, #3073	; 0xc01
 801a38e:	f7fe ffa3 	bl	80192d8 <rcu_periph_clock_enable>
 801a392:	4620      	mov	r0, r4
 801a394:	f7ff fe96 	bl	801a0c4 <_gpio_init(unsigned int)>
 801a398:	4620      	mov	r0, r4
 801a39a:	f7ff fab7 	bl	801990c <usart_deinit>
 801a39e:	68e3      	ldr	r3, [r4, #12]
 801a3a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a3a4:	60e3      	str	r3, [r4, #12]
 801a3a6:	4639      	mov	r1, r7
 801a3a8:	4620      	mov	r0, r4
 801a3aa:	f7ff fb11 	bl	80199d0 <usart_baudrate_set>
 801a3ae:	f1a5 0309 	sub.w	r3, r5, #9
 801a3b2:	4259      	negs	r1, r3
 801a3b4:	4159      	adcs	r1, r3
 801a3b6:	0309      	lsls	r1, r1, #12
 801a3b8:	4620      	mov	r0, r4
 801a3ba:	f7ff fb55 	bl	8019a68 <usart_word_length_set>
 801a3be:	9906      	ldr	r1, [sp, #24]
 801a3c0:	1e8a      	subs	r2, r1, #2
 801a3c2:	4251      	negs	r1, r2
 801a3c4:	4151      	adcs	r1, r2
 801a3c6:	0349      	lsls	r1, r1, #13
 801a3c8:	4620      	mov	r0, r4
 801a3ca:	f7ff fb55 	bl	8019a78 <usart_stop_bit_set>
 801a3ce:	2e01      	cmp	r6, #1
 801a3d0:	d03a      	beq.n	801a448 <gd32_uart_begin+0x10c>
 801a3d2:	2e02      	cmp	r6, #2
 801a3d4:	d13b      	bne.n	801a44e <gd32_uart_begin+0x112>
 801a3d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a3da:	4620      	mov	r0, r4
 801a3dc:	f7ff fb3c 	bl	8019a58 <usart_parity_config>
 801a3e0:	2100      	movs	r1, #0
 801a3e2:	4620      	mov	r0, r4
 801a3e4:	f7ff fb5c 	bl	8019aa0 <usart_hardware_flow_rts_config>
 801a3e8:	2100      	movs	r1, #0
 801a3ea:	4620      	mov	r0, r4
 801a3ec:	f7ff fb5e 	bl	8019aac <usart_hardware_flow_cts_config>
 801a3f0:	2104      	movs	r1, #4
 801a3f2:	4620      	mov	r0, r4
 801a3f4:	f7ff fb4e 	bl	8019a94 <usart_receive_config>
 801a3f8:	2108      	movs	r1, #8
 801a3fa:	4620      	mov	r0, r4
 801a3fc:	f7ff fb44 	bl	8019a88 <usart_transmit_config>
 801a400:	68e3      	ldr	r3, [r4, #12]
 801a402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a406:	60e3      	str	r3, [r4, #12]
 801a408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a40a:	f241 0011 	movw	r0, #4113	; 0x1011
 801a40e:	f7fe ff63 	bl	80192d8 <rcu_periph_clock_enable>
 801a412:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801a416:	e7ba      	b.n	801a38e <gd32_uart_begin+0x52>
 801a418:	f241 0013 	movw	r0, #4115	; 0x1013
 801a41c:	f7fe ff5c 	bl	80192d8 <rcu_periph_clock_enable>
 801a420:	f640 4002 	movw	r0, #3074	; 0xc02
 801a424:	e7b3      	b.n	801a38e <gd32_uart_begin+0x52>
 801a426:	f241 0014 	movw	r0, #4116	; 0x1014
 801a42a:	f7fe ff55 	bl	80192d8 <rcu_periph_clock_enable>
 801a42e:	f640 4002 	movw	r0, #3074	; 0xc02
 801a432:	e797      	b.n	801a364 <gd32_uart_begin+0x28>
 801a434:	f241 1005 	movw	r0, #4357	; 0x1105
 801a438:	e7f0      	b.n	801a41c <gd32_uart_begin+0xe0>
 801a43a:	f241 001e 	movw	r0, #4126	; 0x101e
 801a43e:	f7fe ff4b 	bl	80192d8 <rcu_periph_clock_enable>
 801a442:	f640 4004 	movw	r0, #3076	; 0xc04
 801a446:	e7a2      	b.n	801a38e <gd32_uart_begin+0x52>
 801a448:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801a44c:	e7c5      	b.n	801a3da <gd32_uart_begin+0x9e>
 801a44e:	2100      	movs	r1, #0
 801a450:	e7c3      	b.n	801a3da <gd32_uart_begin+0x9e>
 801a452:	bf00      	nop
 801a454:	40007800 	andmi	r7, r0, r0, lsl #16
 801a458:	40011000 	andmi	r1, r1, r0

0801a45c <micros_init()>:
 801a45c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a45e:	f241 0003 	movw	r0, #4099	; 0x1003
 801a462:	f7fe ff39 	bl	80192d8 <rcu_periph_clock_enable>
 801a466:	480c      	ldr	r0, [pc, #48]	; (801a498 <micros_init()+0x3c>)
 801a468:	f7fe fff2 	bl	8019450 <timer_deinit>
 801a46c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801a470:	2300      	movs	r3, #0
 801a472:	f8c2 3c24 	str.w	r3, [r2, #3108]	; 0xc24
 801a476:	22c7      	movs	r2, #199	; 0xc7
 801a478:	e9cd 2300 	strd	r2, r3, [sp]
 801a47c:	4669      	mov	r1, sp
 801a47e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a482:	4805      	ldr	r0, [pc, #20]	; (801a498 <micros_init()+0x3c>)
 801a484:	9302      	str	r3, [sp, #8]
 801a486:	f7ff f889 	bl	801959c <timer_init>
 801a48a:	4803      	ldr	r0, [pc, #12]	; (801a498 <micros_init()+0x3c>)
 801a48c:	f7ff f8c4 	bl	8019618 <timer_enable>
 801a490:	b005      	add	sp, #20
 801a492:	f85d fb04 	ldr.w	pc, [sp], #4
 801a496:	bf00      	nop
 801a498:	40000c00 	andmi	r0, r0, r0, lsl #24

0801a49c <udelay_init()>:
 801a49c:	4a07      	ldr	r2, [pc, #28]	; (801a4bc <udelay_init()+0x20>)
 801a49e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 801a4a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a4a6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 801a4aa:	4b05      	ldr	r3, [pc, #20]	; (801a4c0 <udelay_init()+0x24>)
 801a4ac:	2200      	movs	r2, #0
 801a4ae:	605a      	str	r2, [r3, #4]
 801a4b0:	681a      	ldr	r2, [r3, #0]
 801a4b2:	f042 0201 	orr.w	r2, r2, #1
 801a4b6:	601a      	str	r2, [r3, #0]
 801a4b8:	4770      	bx	lr
 801a4ba:	bf00      	nop
 801a4bc:	e000ed00 	and	lr, r0, r0, lsl #26
 801a4c0:	e0001000 	and	r1, r0, r0

0801a4c4 <udelay(unsigned int, unsigned int)>:
 801a4c4:	23c8      	movs	r3, #200	; 0xc8
 801a4c6:	b530      	push	{r4, r5, lr}
 801a4c8:	4358      	muls	r0, r3
 801a4ca:	b909      	cbnz	r1, 801a4d0 <udelay(unsigned int, unsigned int)+0xc>
 801a4cc:	4b08      	ldr	r3, [pc, #32]	; (801a4f0 <udelay(unsigned int, unsigned int)+0x2c>)
 801a4ce:	6859      	ldr	r1, [r3, #4]
 801a4d0:	4c07      	ldr	r4, [pc, #28]	; (801a4f0 <udelay(unsigned int, unsigned int)+0x2c>)
 801a4d2:	2300      	movs	r3, #0
 801a4d4:	6862      	ldr	r2, [r4, #4]
 801a4d6:	4291      	cmp	r1, r2
 801a4d8:	d0fc      	beq.n	801a4d4 <udelay(unsigned int, unsigned int)+0x10>
 801a4da:	bf2a      	itet	cs
 801a4dc:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 801a4e0:	189b      	addcc	r3, r3, r2
 801a4e2:	195b      	addcs	r3, r3, r5
 801a4e4:	1a5b      	subs	r3, r3, r1
 801a4e6:	4283      	cmp	r3, r0
 801a4e8:	d300      	bcc.n	801a4ec <udelay(unsigned int, unsigned int)+0x28>
 801a4ea:	bd30      	pop	{r4, r5, pc}
 801a4ec:	4611      	mov	r1, r2
 801a4ee:	e7f1      	b.n	801a4d4 <udelay(unsigned int, unsigned int)+0x10>
 801a4f0:	e0001000 	and	r1, r0, r0

0801a4f4 <emac_start(unsigned char*)>:
 801a4f4:	b570      	push	{r4, r5, r6, lr}
 801a4f6:	4605      	mov	r5, r0
 801a4f8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 801a4fc:	f7fe feec 	bl	80192d8 <rcu_periph_clock_enable>
 801a500:	f640 4001 	movw	r0, #3073	; 0xc01
 801a504:	f7fe fee8 	bl	80192d8 <rcu_periph_clock_enable>
 801a508:	f640 4002 	movw	r0, #3074	; 0xc02
 801a50c:	f7fe fee4 	bl	80192d8 <rcu_periph_clock_enable>
 801a510:	f241 100e 	movw	r0, #4366	; 0x110e
 801a514:	f7fe fee0 	bl	80192d8 <rcu_periph_clock_enable>
 801a518:	487d      	ldr	r0, [pc, #500]	; (801a710 <emac_start(unsigned char*)+0x21c>)
 801a51a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a51e:	2100      	movs	r1, #0
 801a520:	f7fe fe99 	bl	8019256 <gpio_af_set>
 801a524:	487a      	ldr	r0, [pc, #488]	; (801a710 <emac_start(unsigned char*)+0x21c>)
 801a526:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a52a:	2200      	movs	r2, #0
 801a52c:	2102      	movs	r1, #2
 801a52e:	f7fe fe57 	bl	80191e0 <gpio_mode_set>
 801a532:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a536:	2203      	movs	r2, #3
 801a538:	4875      	ldr	r0, [pc, #468]	; (801a710 <emac_start(unsigned char*)+0x21c>)
 801a53a:	2100      	movs	r1, #0
 801a53c:	f7fe fe70 	bl	8019220 <gpio_output_options_set>
 801a540:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 801a544:	f44f 00c0 	mov.w	r0, #6291456	; 0x600000
 801a548:	f7fe fee6 	bl	8019318 <rcu_ckout0_config>
 801a54c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801a550:	f7fe ff72 	bl	8019438 <syscfg_enet_phy_interface_config>
 801a554:	2302      	movs	r3, #2
 801a556:	4619      	mov	r1, r3
 801a558:	486d      	ldr	r0, [pc, #436]	; (801a710 <emac_start(unsigned char*)+0x21c>)
 801a55a:	2200      	movs	r2, #0
 801a55c:	f7fe fe40 	bl	80191e0 <gpio_mode_set>
 801a560:	486b      	ldr	r0, [pc, #428]	; (801a710 <emac_start(unsigned char*)+0x21c>)
 801a562:	2302      	movs	r3, #2
 801a564:	2203      	movs	r2, #3
 801a566:	2100      	movs	r1, #0
 801a568:	f7fe fe5a 	bl	8019220 <gpio_output_options_set>
 801a56c:	4868      	ldr	r0, [pc, #416]	; (801a710 <emac_start(unsigned char*)+0x21c>)
 801a56e:	2304      	movs	r3, #4
 801a570:	2200      	movs	r2, #0
 801a572:	2102      	movs	r1, #2
 801a574:	f7fe fe34 	bl	80191e0 <gpio_mode_set>
 801a578:	4865      	ldr	r0, [pc, #404]	; (801a710 <emac_start(unsigned char*)+0x21c>)
 801a57a:	2304      	movs	r3, #4
 801a57c:	2203      	movs	r2, #3
 801a57e:	2100      	movs	r1, #0
 801a580:	f7fe fe4e 	bl	8019220 <gpio_output_options_set>
 801a584:	4862      	ldr	r0, [pc, #392]	; (801a710 <emac_start(unsigned char*)+0x21c>)
 801a586:	2380      	movs	r3, #128	; 0x80
 801a588:	2200      	movs	r2, #0
 801a58a:	2102      	movs	r1, #2
 801a58c:	f7fe fe28 	bl	80191e0 <gpio_mode_set>
 801a590:	2380      	movs	r3, #128	; 0x80
 801a592:	485f      	ldr	r0, [pc, #380]	; (801a710 <emac_start(unsigned char*)+0x21c>)
 801a594:	2203      	movs	r2, #3
 801a596:	2100      	movs	r1, #0
 801a598:	f7fe fe42 	bl	8019220 <gpio_output_options_set>
 801a59c:	485c      	ldr	r0, [pc, #368]	; (801a710 <emac_start(unsigned char*)+0x21c>)
 801a59e:	2202      	movs	r2, #2
 801a5a0:	210b      	movs	r1, #11
 801a5a2:	f7fe fe58 	bl	8019256 <gpio_af_set>
 801a5a6:	485a      	ldr	r0, [pc, #360]	; (801a710 <emac_start(unsigned char*)+0x21c>)
 801a5a8:	2204      	movs	r2, #4
 801a5aa:	210b      	movs	r1, #11
 801a5ac:	f7fe fe53 	bl	8019256 <gpio_af_set>
 801a5b0:	4857      	ldr	r0, [pc, #348]	; (801a710 <emac_start(unsigned char*)+0x21c>)
 801a5b2:	2280      	movs	r2, #128	; 0x80
 801a5b4:	210b      	movs	r1, #11
 801a5b6:	f7fe fe4e 	bl	8019256 <gpio_af_set>
 801a5ba:	4856      	ldr	r0, [pc, #344]	; (801a714 <emac_start(unsigned char*)+0x220>)
 801a5bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a5c0:	2200      	movs	r2, #0
 801a5c2:	2102      	movs	r1, #2
 801a5c4:	f7fe fe0c 	bl	80191e0 <gpio_mode_set>
 801a5c8:	4852      	ldr	r0, [pc, #328]	; (801a714 <emac_start(unsigned char*)+0x220>)
 801a5ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a5ce:	2203      	movs	r2, #3
 801a5d0:	2100      	movs	r1, #0
 801a5d2:	f7fe fe25 	bl	8019220 <gpio_output_options_set>
 801a5d6:	484f      	ldr	r0, [pc, #316]	; (801a714 <emac_start(unsigned char*)+0x220>)
 801a5d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a5dc:	2200      	movs	r2, #0
 801a5de:	2102      	movs	r1, #2
 801a5e0:	f7fe fdfe 	bl	80191e0 <gpio_mode_set>
 801a5e4:	484b      	ldr	r0, [pc, #300]	; (801a714 <emac_start(unsigned char*)+0x220>)
 801a5e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a5ea:	2203      	movs	r2, #3
 801a5ec:	2100      	movs	r1, #0
 801a5ee:	f7fe fe17 	bl	8019220 <gpio_output_options_set>
 801a5f2:	4848      	ldr	r0, [pc, #288]	; (801a714 <emac_start(unsigned char*)+0x220>)
 801a5f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	2102      	movs	r1, #2
 801a5fc:	f7fe fdf0 	bl	80191e0 <gpio_mode_set>
 801a600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a604:	4843      	ldr	r0, [pc, #268]	; (801a714 <emac_start(unsigned char*)+0x220>)
 801a606:	2203      	movs	r2, #3
 801a608:	2100      	movs	r1, #0
 801a60a:	f7fe fe09 	bl	8019220 <gpio_output_options_set>
 801a60e:	4841      	ldr	r0, [pc, #260]	; (801a714 <emac_start(unsigned char*)+0x220>)
 801a610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a614:	210b      	movs	r1, #11
 801a616:	f7fe fe1e 	bl	8019256 <gpio_af_set>
 801a61a:	483e      	ldr	r0, [pc, #248]	; (801a714 <emac_start(unsigned char*)+0x220>)
 801a61c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801a620:	210b      	movs	r1, #11
 801a622:	f7fe fe18 	bl	8019256 <gpio_af_set>
 801a626:	483b      	ldr	r0, [pc, #236]	; (801a714 <emac_start(unsigned char*)+0x220>)
 801a628:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801a62c:	210b      	movs	r1, #11
 801a62e:	f7fe fe12 	bl	8019256 <gpio_af_set>
 801a632:	2302      	movs	r3, #2
 801a634:	4619      	mov	r1, r3
 801a636:	4838      	ldr	r0, [pc, #224]	; (801a718 <emac_start(unsigned char*)+0x224>)
 801a638:	2200      	movs	r2, #0
 801a63a:	f7fe fdd1 	bl	80191e0 <gpio_mode_set>
 801a63e:	4836      	ldr	r0, [pc, #216]	; (801a718 <emac_start(unsigned char*)+0x224>)
 801a640:	2302      	movs	r3, #2
 801a642:	2203      	movs	r2, #3
 801a644:	2100      	movs	r1, #0
 801a646:	f7fe fdeb 	bl	8019220 <gpio_output_options_set>
 801a64a:	4833      	ldr	r0, [pc, #204]	; (801a718 <emac_start(unsigned char*)+0x224>)
 801a64c:	2310      	movs	r3, #16
 801a64e:	2200      	movs	r2, #0
 801a650:	2102      	movs	r1, #2
 801a652:	f7fe fdc5 	bl	80191e0 <gpio_mode_set>
 801a656:	4830      	ldr	r0, [pc, #192]	; (801a718 <emac_start(unsigned char*)+0x224>)
 801a658:	2310      	movs	r3, #16
 801a65a:	2203      	movs	r2, #3
 801a65c:	2100      	movs	r1, #0
 801a65e:	f7fe fddf 	bl	8019220 <gpio_output_options_set>
 801a662:	482d      	ldr	r0, [pc, #180]	; (801a718 <emac_start(unsigned char*)+0x224>)
 801a664:	2320      	movs	r3, #32
 801a666:	2200      	movs	r2, #0
 801a668:	2102      	movs	r1, #2
 801a66a:	f7fe fdb9 	bl	80191e0 <gpio_mode_set>
 801a66e:	2320      	movs	r3, #32
 801a670:	4829      	ldr	r0, [pc, #164]	; (801a718 <emac_start(unsigned char*)+0x224>)
 801a672:	2203      	movs	r2, #3
 801a674:	2100      	movs	r1, #0
 801a676:	f7fe fdd3 	bl	8019220 <gpio_output_options_set>
 801a67a:	4827      	ldr	r0, [pc, #156]	; (801a718 <emac_start(unsigned char*)+0x224>)
 801a67c:	2202      	movs	r2, #2
 801a67e:	210b      	movs	r1, #11
 801a680:	f7fe fde9 	bl	8019256 <gpio_af_set>
 801a684:	4824      	ldr	r0, [pc, #144]	; (801a718 <emac_start(unsigned char*)+0x224>)
 801a686:	2210      	movs	r2, #16
 801a688:	210b      	movs	r1, #11
 801a68a:	f7fe fde4 	bl	8019256 <gpio_af_set>
 801a68e:	2220      	movs	r2, #32
 801a690:	210b      	movs	r1, #11
 801a692:	4821      	ldr	r0, [pc, #132]	; (801a718 <emac_start(unsigned char*)+0x224>)
 801a694:	f7fe fddf 	bl	8019256 <gpio_af_set>
 801a698:	f640 4019 	movw	r0, #3097	; 0xc19
 801a69c:	f7fe fe1c 	bl	80192d8 <rcu_periph_clock_enable>
 801a6a0:	f640 401a 	movw	r0, #3098	; 0xc1a
 801a6a4:	f7fe fe18 	bl	80192d8 <rcu_periph_clock_enable>
 801a6a8:	f640 401b 	movw	r0, #3099	; 0xc1b
 801a6ac:	f7fe fe14 	bl	80192d8 <rcu_periph_clock_enable>
 801a6b0:	f7fe fd4e 	bl	8019150 <enet_deinit>
 801a6b4:	f7fe f976 	bl	80189a4 <enet_software_reset>
 801a6b8:	4604      	mov	r4, r0
 801a6ba:	b138      	cbz	r0, 801a6cc <emac_start(unsigned char*)+0x1d8>
 801a6bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a6c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a6c4:	2001      	movs	r0, #1
 801a6c6:	f7fe fb05 	bl	8018cd4 <enet_init>
 801a6ca:	4604      	mov	r4, r0
 801a6cc:	4628      	mov	r0, r5
 801a6ce:	f000 fa2d 	bl	801ab2c <mac_address_get(unsigned char*)>
 801a6d2:	4629      	mov	r1, r5
 801a6d4:	2000      	movs	r0, #0
 801a6d6:	f7fe fa55 	bl	8018b84 <enet_mac_address_set>
 801a6da:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 801a6de:	f7fe f975 	bl	80189cc <enet_descriptors_chain_init>
 801a6e2:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 801a6e6:	f7fe f971 	bl	80189cc <enet_descriptors_chain_init>
 801a6ea:	4e0c      	ldr	r6, [pc, #48]	; (801a71c <emac_start(unsigned char*)+0x228>)
 801a6ec:	2500      	movs	r5, #0
 801a6ee:	4630      	mov	r0, r6
 801a6f0:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 801a6f4:	3501      	adds	r5, #1
 801a6f6:	f7fe fa3f 	bl	8018b78 <enet_transmit_checksum_config>
 801a6fa:	2d08      	cmp	r5, #8
 801a6fc:	f106 0610 	add.w	r6, r6, #16
 801a700:	d1f5      	bne.n	801a6ee <emac_start(unsigned char*)+0x1fa>
 801a702:	f7fe fc87 	bl	8019014 <enet_enable>
 801a706:	fab4 f084 	clz	r0, r4
 801a70a:	0940      	lsrs	r0, r0, #5
 801a70c:	4240      	negs	r0, r0
 801a70e:	bd70      	pop	{r4, r5, r6, pc}
 801a710:	40020000 	andmi	r0, r2, r0
 801a714:	40020400 	andmi	r0, r2, r0, lsl #8
 801a718:	40020800 	andmi	r0, r2, r0, lsl #16
 801a71c:	2002db9c 	mulcs	r2, ip, fp

0801a720 <adc_clock_config>:
 801a720:	4b06      	ldr	r3, [pc, #24]	; (801a73c <adc_clock_config+0x1c>)
 801a722:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 801a726:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 801a72a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 801a72e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 801a732:	4310      	orrs	r0, r2
 801a734:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
 801a738:	4770      	bx	lr
 801a73a:	bf00      	nop
 801a73c:	40012000 	andmi	r2, r1, r0

0801a740 <adc_special_function_config>:
 801a740:	b510      	push	{r4, lr}
 801a742:	f401 7380 	and.w	r3, r1, #256	; 0x100
 801a746:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 801a74a:	f001 0102 	and.w	r1, r1, #2
 801a74e:	b17a      	cbz	r2, 801a770 <adc_special_function_config+0x30>
 801a750:	b11b      	cbz	r3, 801a75a <adc_special_function_config+0x1a>
 801a752:	6843      	ldr	r3, [r0, #4]
 801a754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a758:	6043      	str	r3, [r0, #4]
 801a75a:	b11c      	cbz	r4, 801a764 <adc_special_function_config+0x24>
 801a75c:	6843      	ldr	r3, [r0, #4]
 801a75e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801a762:	6043      	str	r3, [r0, #4]
 801a764:	b119      	cbz	r1, 801a76e <adc_special_function_config+0x2e>
 801a766:	6883      	ldr	r3, [r0, #8]
 801a768:	f043 0302 	orr.w	r3, r3, #2
 801a76c:	6083      	str	r3, [r0, #8]
 801a76e:	bd10      	pop	{r4, pc}
 801a770:	b11b      	cbz	r3, 801a77a <adc_special_function_config+0x3a>
 801a772:	6843      	ldr	r3, [r0, #4]
 801a774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a778:	6043      	str	r3, [r0, #4]
 801a77a:	b11c      	cbz	r4, 801a784 <adc_special_function_config+0x44>
 801a77c:	6843      	ldr	r3, [r0, #4]
 801a77e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a782:	6043      	str	r3, [r0, #4]
 801a784:	2900      	cmp	r1, #0
 801a786:	d0f2      	beq.n	801a76e <adc_special_function_config+0x2e>
 801a788:	6883      	ldr	r3, [r0, #8]
 801a78a:	f023 0302 	bic.w	r3, r3, #2
 801a78e:	e7ed      	b.n	801a76c <adc_special_function_config+0x2c>

0801a790 <adc_data_alignment_config>:
 801a790:	6883      	ldr	r3, [r0, #8]
 801a792:	b119      	cbz	r1, 801a79c <adc_data_alignment_config+0xc>
 801a794:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a798:	6083      	str	r3, [r0, #8]
 801a79a:	4770      	bx	lr
 801a79c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a7a0:	e7fa      	b.n	801a798 <adc_data_alignment_config+0x8>

0801a7a2 <adc_enable>:
 801a7a2:	6883      	ldr	r3, [r0, #8]
 801a7a4:	07db      	lsls	r3, r3, #31
 801a7a6:	bf5e      	ittt	pl
 801a7a8:	6883      	ldrpl	r3, [r0, #8]
 801a7aa:	f043 0301 	orrpl.w	r3, r3, #1
 801a7ae:	6083      	strpl	r3, [r0, #8]
 801a7b0:	4770      	bx	lr

0801a7b2 <adc_calibration_enable>:
 801a7b2:	6883      	ldr	r3, [r0, #8]
 801a7b4:	f043 0308 	orr.w	r3, r3, #8
 801a7b8:	f100 0208 	add.w	r2, r0, #8
 801a7bc:	6083      	str	r3, [r0, #8]
 801a7be:	6813      	ldr	r3, [r2, #0]
 801a7c0:	0719      	lsls	r1, r3, #28
 801a7c2:	d4fc      	bmi.n	801a7be <adc_calibration_enable+0xc>
 801a7c4:	6883      	ldr	r3, [r0, #8]
 801a7c6:	f043 0304 	orr.w	r3, r3, #4
 801a7ca:	6083      	str	r3, [r0, #8]
 801a7cc:	6813      	ldr	r3, [r2, #0]
 801a7ce:	075b      	lsls	r3, r3, #29
 801a7d0:	d4fc      	bmi.n	801a7cc <adc_calibration_enable+0x1a>
 801a7d2:	4770      	bx	lr

0801a7d4 <adc_channel_16_to_18>:
 801a7d4:	f400 0380 	and.w	r3, r0, #4194304	; 0x400000
 801a7d8:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000
 801a7dc:	b181      	cbz	r1, 801a800 <adc_channel_16_to_18+0x2c>
 801a7de:	b133      	cbz	r3, 801a7ee <adc_channel_16_to_18+0x1a>
 801a7e0:	4a0f      	ldr	r2, [pc, #60]	; (801a820 <adc_channel_16_to_18+0x4c>)
 801a7e2:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 801a7e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801a7ea:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 801a7ee:	b130      	cbz	r0, 801a7fe <adc_channel_16_to_18+0x2a>
 801a7f0:	4a0b      	ldr	r2, [pc, #44]	; (801a820 <adc_channel_16_to_18+0x4c>)
 801a7f2:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 801a7f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801a7fa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 801a7fe:	4770      	bx	lr
 801a800:	b133      	cbz	r3, 801a810 <adc_channel_16_to_18+0x3c>
 801a802:	4a07      	ldr	r2, [pc, #28]	; (801a820 <adc_channel_16_to_18+0x4c>)
 801a804:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 801a808:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 801a80c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 801a810:	2800      	cmp	r0, #0
 801a812:	d0f4      	beq.n	801a7fe <adc_channel_16_to_18+0x2a>
 801a814:	4a02      	ldr	r2, [pc, #8]	; (801a820 <adc_channel_16_to_18+0x4c>)
 801a816:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 801a81a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801a81e:	e7ec      	b.n	801a7fa <adc_channel_16_to_18+0x26>
 801a820:	40012000 	andmi	r2, r1, r0

0801a824 <adc_channel_length_config>:
 801a824:	2901      	cmp	r1, #1
 801a826:	d002      	beq.n	801a82e <adc_channel_length_config+0xa>
 801a828:	2902      	cmp	r1, #2
 801a82a:	d00c      	beq.n	801a846 <adc_channel_length_config+0x22>
 801a82c:	4770      	bx	lr
 801a82e:	3a01      	subs	r2, #1
 801a830:	2a0f      	cmp	r2, #15
 801a832:	d813      	bhi.n	801a85c <adc_channel_length_config+0x38>
 801a834:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801a836:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801a83a:	62c3      	str	r3, [r0, #44]	; 0x2c
 801a83c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801a83e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801a842:	62c3      	str	r3, [r0, #44]	; 0x2c
 801a844:	4770      	bx	lr
 801a846:	3a01      	subs	r2, #1
 801a848:	2a03      	cmp	r2, #3
 801a84a:	d807      	bhi.n	801a85c <adc_channel_length_config+0x38>
 801a84c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a84e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a852:	6383      	str	r3, [r0, #56]	; 0x38
 801a854:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a856:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801a85a:	6383      	str	r3, [r0, #56]	; 0x38
 801a85c:	4770      	bx	lr

0801a85e <adc_inserted_channel_config>:
 801a85e:	2903      	cmp	r1, #3
 801a860:	b530      	push	{r4, r5, lr}
 801a862:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801a864:	d80f      	bhi.n	801a886 <adc_inserted_channel_config+0x28>
 801a866:	f3c4 5401 	ubfx	r4, r4, #20, #2
 801a86a:	1a61      	subs	r1, r4, r1
 801a86c:	f06f 0404 	mvn.w	r4, #4
 801a870:	4361      	muls	r1, r4
 801a872:	6b85      	ldr	r5, [r0, #56]	; 0x38
 801a874:	310f      	adds	r1, #15
 801a876:	241f      	movs	r4, #31
 801a878:	408c      	lsls	r4, r1
 801a87a:	ea25 0404 	bic.w	r4, r5, r4
 801a87e:	fa02 f101 	lsl.w	r1, r2, r1
 801a882:	4321      	orrs	r1, r4
 801a884:	6381      	str	r1, [r0, #56]	; 0x38
 801a886:	2a09      	cmp	r2, #9
 801a888:	d80a      	bhi.n	801a8a0 <adc_inserted_channel_config+0x42>
 801a88a:	6901      	ldr	r1, [r0, #16]
 801a88c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a890:	2407      	movs	r4, #7
 801a892:	4094      	lsls	r4, r2
 801a894:	ea21 0104 	bic.w	r1, r1, r4
 801a898:	4093      	lsls	r3, r2
 801a89a:	430b      	orrs	r3, r1
 801a89c:	6103      	str	r3, [r0, #16]
 801a89e:	bd30      	pop	{r4, r5, pc}
 801a8a0:	2a12      	cmp	r2, #18
 801a8a2:	d8fc      	bhi.n	801a89e <adc_inserted_channel_config+0x40>
 801a8a4:	3a0a      	subs	r2, #10
 801a8a6:	68c1      	ldr	r1, [r0, #12]
 801a8a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a8ac:	2407      	movs	r4, #7
 801a8ae:	4094      	lsls	r4, r2
 801a8b0:	ea21 0104 	bic.w	r1, r1, r4
 801a8b4:	4093      	lsls	r3, r2
 801a8b6:	430b      	orrs	r3, r1
 801a8b8:	60c3      	str	r3, [r0, #12]
 801a8ba:	e7f0      	b.n	801a89e <adc_inserted_channel_config+0x40>

0801a8bc <adc_external_trigger_config>:
 801a8bc:	2901      	cmp	r1, #1
 801a8be:	d002      	beq.n	801a8c6 <adc_external_trigger_config+0xa>
 801a8c0:	2902      	cmp	r1, #2
 801a8c2:	d009      	beq.n	801a8d8 <adc_external_trigger_config+0x1c>
 801a8c4:	4770      	bx	lr
 801a8c6:	6883      	ldr	r3, [r0, #8]
 801a8c8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 801a8cc:	6083      	str	r3, [r0, #8]
 801a8ce:	6883      	ldr	r3, [r0, #8]
 801a8d0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 801a8d4:	6083      	str	r3, [r0, #8]
 801a8d6:	4770      	bx	lr
 801a8d8:	6883      	ldr	r3, [r0, #8]
 801a8da:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801a8de:	6083      	str	r3, [r0, #8]
 801a8e0:	6883      	ldr	r3, [r0, #8]
 801a8e2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801a8e6:	e7f5      	b.n	801a8d4 <adc_external_trigger_config+0x18>

0801a8e8 <adc_software_trigger_enable>:
 801a8e8:	2901      	cmp	r1, #1
 801a8ea:	d002      	beq.n	801a8f2 <adc_software_trigger_enable+0xa>
 801a8ec:	2902      	cmp	r1, #2
 801a8ee:	d005      	beq.n	801a8fc <adc_software_trigger_enable+0x14>
 801a8f0:	4770      	bx	lr
 801a8f2:	6883      	ldr	r3, [r0, #8]
 801a8f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801a8f8:	6083      	str	r3, [r0, #8]
 801a8fa:	4770      	bx	lr
 801a8fc:	6883      	ldr	r3, [r0, #8]
 801a8fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801a902:	e7f9      	b.n	801a8f8 <adc_software_trigger_enable+0x10>

0801a904 <i2c_clock_config>:
 801a904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a906:	4605      	mov	r5, r0
 801a908:	2002      	movs	r0, #2
 801a90a:	460c      	mov	r4, r1
 801a90c:	4617      	mov	r7, r2
 801a90e:	f7fe fd1f 	bl	8019350 <rcu_clock_freq_get>
 801a912:	4a26      	ldr	r2, [pc, #152]	; (801a9ac <i2c_clock_config+0xa8>)
 801a914:	686e      	ldr	r6, [r5, #4]
 801a916:	4603      	mov	r3, r0
 801a918:	4825      	ldr	r0, [pc, #148]	; (801a9b0 <i2c_clock_config+0xac>)
 801a91a:	fbb3 f0f0 	udiv	r0, r3, r0
 801a91e:	4293      	cmp	r3, r2
 801a920:	bf94      	ite	ls
 801a922:	4601      	movls	r1, r0
 801a924:	2132      	movhi	r1, #50	; 0x32
 801a926:	4a23      	ldr	r2, [pc, #140]	; (801a9b4 <i2c_clock_config+0xb0>)
 801a928:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 801a92c:	430e      	orrs	r6, r1
 801a92e:	4294      	cmp	r4, r2
 801a930:	606e      	str	r6, [r5, #4]
 801a932:	d811      	bhi.n	801a958 <i2c_clock_config+0x54>
 801a934:	3001      	adds	r0, #1
 801a936:	2831      	cmp	r0, #49	; 0x31
 801a938:	bf86      	itte	hi
 801a93a:	2232      	movhi	r2, #50	; 0x32
 801a93c:	622a      	strhi	r2, [r5, #32]
 801a93e:	6228      	strls	r0, [r5, #32]
 801a940:	0064      	lsls	r4, r4, #1
 801a942:	fbb3 f4f4 	udiv	r4, r3, r4
 801a946:	2c04      	cmp	r4, #4
 801a948:	69ea      	ldr	r2, [r5, #28]
 801a94a:	bf38      	it	cc
 801a94c:	2404      	movcc	r4, #4
 801a94e:	f3c4 040b 	ubfx	r4, r4, #0, #12
 801a952:	4314      	orrs	r4, r2
 801a954:	61ec      	str	r4, [r5, #28]
 801a956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a958:	4a17      	ldr	r2, [pc, #92]	; (801a9b8 <i2c_clock_config+0xb4>)
 801a95a:	4294      	cmp	r4, r2
 801a95c:	d8fb      	bhi.n	801a956 <i2c_clock_config+0x52>
 801a95e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801a962:	4351      	muls	r1, r2
 801a964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a968:	fbb1 f1f2 	udiv	r1, r1, r2
 801a96c:	3101      	adds	r1, #1
 801a96e:	6229      	str	r1, [r5, #32]
 801a970:	b9a7      	cbnz	r7, 801a99c <i2c_clock_config+0x98>
 801a972:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a976:	fbb3 f4f4 	udiv	r4, r3, r4
 801a97a:	69eb      	ldr	r3, [r5, #28]
 801a97c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801a980:	61eb      	str	r3, [r5, #28]
 801a982:	f3c4 030b 	ubfx	r3, r4, #0, #12
 801a986:	b90b      	cbnz	r3, 801a98c <i2c_clock_config+0x88>
 801a988:	f044 0401 	orr.w	r4, r4, #1
 801a98c:	69eb      	ldr	r3, [r5, #28]
 801a98e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a992:	61eb      	str	r3, [r5, #28]
 801a994:	69eb      	ldr	r3, [r5, #28]
 801a996:	4323      	orrs	r3, r4
 801a998:	61eb      	str	r3, [r5, #28]
 801a99a:	e7dc      	b.n	801a956 <i2c_clock_config+0x52>
 801a99c:	2219      	movs	r2, #25
 801a99e:	4354      	muls	r4, r2
 801a9a0:	fbb3 f4f4 	udiv	r4, r3, r4
 801a9a4:	69eb      	ldr	r3, [r5, #28]
 801a9a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a9aa:	e7e9      	b.n	801a980 <i2c_clock_config+0x7c>
 801a9ac:	02faf07f 	rscseq	pc, sl, #127	; 0x7f
 801a9b0:	000f4240 	andeq	r4, pc, r0, asr #4
 801a9b4:	000186a0 	andeq	r8, r1, r0, lsr #13
 801a9b8:	00061a80 	andeq	r1, r6, r0, lsl #21

0801a9bc <i2c_ack_config>:
 801a9bc:	6803      	ldr	r3, [r0, #0]
 801a9be:	2901      	cmp	r1, #1
 801a9c0:	bf0c      	ite	eq
 801a9c2:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 801a9c6:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 801a9ca:	6003      	str	r3, [r0, #0]
 801a9cc:	4770      	bx	lr

0801a9ce <i2c_ackpos_config>:
 801a9ce:	6803      	ldr	r3, [r0, #0]
 801a9d0:	b919      	cbnz	r1, 801a9da <i2c_ackpos_config+0xc>
 801a9d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a9d6:	6003      	str	r3, [r0, #0]
 801a9d8:	4770      	bx	lr
 801a9da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a9de:	e7fa      	b.n	801a9d6 <i2c_ackpos_config+0x8>

0801a9e0 <i2c_master_addressing>:
 801a9e0:	3202      	adds	r2, #2
 801a9e2:	bf0c      	ite	eq
 801a9e4:	f021 0101 	biceq.w	r1, r1, #1
 801a9e8:	f041 0101 	orrne.w	r1, r1, #1
 801a9ec:	6101      	str	r1, [r0, #16]
 801a9ee:	4770      	bx	lr

0801a9f0 <i2c_enable>:
 801a9f0:	6803      	ldr	r3, [r0, #0]
 801a9f2:	f043 0301 	orr.w	r3, r3, #1
 801a9f6:	6003      	str	r3, [r0, #0]
 801a9f8:	4770      	bx	lr

0801a9fa <i2c_start_on_bus>:
 801a9fa:	6803      	ldr	r3, [r0, #0]
 801a9fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801aa00:	6003      	str	r3, [r0, #0]
 801aa02:	4770      	bx	lr

0801aa04 <i2c_stop_on_bus>:
 801aa04:	6803      	ldr	r3, [r0, #0]
 801aa06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801aa0a:	6003      	str	r3, [r0, #0]
 801aa0c:	4770      	bx	lr

0801aa0e <i2c_data_transmit>:
 801aa0e:	6101      	str	r1, [r0, #16]
 801aa10:	4770      	bx	lr

0801aa12 <i2c_data_receive>:
 801aa12:	6900      	ldr	r0, [r0, #16]
 801aa14:	b2c0      	uxtb	r0, r0
 801aa16:	4770      	bx	lr

0801aa18 <i2c_flag_get>:
 801aa18:	098b      	lsrs	r3, r1, #6
 801aa1a:	f001 011f 	and.w	r1, r1, #31
 801aa1e:	581a      	ldr	r2, [r3, r0]
 801aa20:	2301      	movs	r3, #1
 801aa22:	408b      	lsls	r3, r1
 801aa24:	4213      	tst	r3, r2
 801aa26:	bf14      	ite	ne
 801aa28:	2001      	movne	r0, #1
 801aa2a:	2000      	moveq	r0, #0
 801aa2c:	4770      	bx	lr

0801aa2e <i2c_flag_clear>:
 801aa2e:	f240 5301 	movw	r3, #1281	; 0x501
 801aa32:	4299      	cmp	r1, r3
 801aa34:	b510      	push	{r4, lr}
 801aa36:	d102      	bne.n	801aa3e <i2c_flag_clear+0x10>
 801aa38:	6943      	ldr	r3, [r0, #20]
 801aa3a:	6983      	ldr	r3, [r0, #24]
 801aa3c:	bd10      	pop	{r4, pc}
 801aa3e:	098c      	lsrs	r4, r1, #6
 801aa40:	2201      	movs	r2, #1
 801aa42:	5823      	ldr	r3, [r4, r0]
 801aa44:	f001 011f 	and.w	r1, r1, #31
 801aa48:	408a      	lsls	r2, r1
 801aa4a:	ea23 0302 	bic.w	r3, r3, r2
 801aa4e:	5023      	str	r3, [r4, r0]
 801aa50:	e7f4      	b.n	801aa3c <i2c_flag_clear+0xe>
	...

0801aa54 <spi_i2s_deinit>:
 801aa54:	b508      	push	{r3, lr}
 801aa56:	4b22      	ldr	r3, [pc, #136]	; (801aae0 <spi_i2s_deinit+0x8c>)
 801aa58:	4298      	cmp	r0, r3
 801aa5a:	d033      	beq.n	801aac4 <spi_i2s_deinit+0x70>
 801aa5c:	d80c      	bhi.n	801aa78 <spi_i2s_deinit+0x24>
 801aa5e:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 801aa62:	4298      	cmp	r0, r3
 801aa64:	d027      	beq.n	801aab6 <spi_i2s_deinit+0x62>
 801aa66:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 801aa6a:	4298      	cmp	r0, r3
 801aa6c:	d012      	beq.n	801aa94 <spi_i2s_deinit+0x40>
 801aa6e:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 801aa72:	4298      	cmp	r0, r3
 801aa74:	d018      	beq.n	801aaa8 <spi_i2s_deinit+0x54>
 801aa76:	bd08      	pop	{r3, pc}
 801aa78:	4b1a      	ldr	r3, [pc, #104]	; (801aae4 <spi_i2s_deinit+0x90>)
 801aa7a:	4298      	cmp	r0, r3
 801aa7c:	d029      	beq.n	801aad2 <spi_i2s_deinit+0x7e>
 801aa7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801aa82:	4298      	cmp	r0, r3
 801aa84:	d1f7      	bne.n	801aa76 <spi_i2s_deinit+0x22>
 801aa86:	f640 1015 	movw	r0, #2325	; 0x915
 801aa8a:	f7fe fc40 	bl	801930e <rcu_periph_reset_enable>
 801aa8e:	f640 1015 	movw	r0, #2325	; 0x915
 801aa92:	e005      	b.n	801aaa0 <spi_i2s_deinit+0x4c>
 801aa94:	f640 100c 	movw	r0, #2316	; 0x90c
 801aa98:	f7fe fc39 	bl	801930e <rcu_periph_reset_enable>
 801aa9c:	f640 100c 	movw	r0, #2316	; 0x90c
 801aaa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801aaa4:	f7fe bc35 	b.w	8019312 <rcu_periph_reset_disable>
 801aaa8:	f640 000e 	movw	r0, #2062	; 0x80e
 801aaac:	f7fe fc2f 	bl	801930e <rcu_periph_reset_enable>
 801aab0:	f640 000e 	movw	r0, #2062	; 0x80e
 801aab4:	e7f4      	b.n	801aaa0 <spi_i2s_deinit+0x4c>
 801aab6:	f640 000f 	movw	r0, #2063	; 0x80f
 801aaba:	f7fe fc28 	bl	801930e <rcu_periph_reset_enable>
 801aabe:	f640 000f 	movw	r0, #2063	; 0x80f
 801aac2:	e7ed      	b.n	801aaa0 <spi_i2s_deinit+0x4c>
 801aac4:	f640 100d 	movw	r0, #2317	; 0x90d
 801aac8:	f7fe fc21 	bl	801930e <rcu_periph_reset_enable>
 801aacc:	f640 100d 	movw	r0, #2317	; 0x90d
 801aad0:	e7e6      	b.n	801aaa0 <spi_i2s_deinit+0x4c>
 801aad2:	f640 1014 	movw	r0, #2324	; 0x914
 801aad6:	f7fe fc1a 	bl	801930e <rcu_periph_reset_enable>
 801aada:	f640 1014 	movw	r0, #2324	; 0x914
 801aade:	e7df      	b.n	801aaa0 <spi_i2s_deinit+0x4c>
 801aae0:	40013400 	andmi	r3, r1, r0, lsl #8
 801aae4:	40015000 	andmi	r5, r1, r0

0801aae8 <spi_init>:
 801aae8:	b510      	push	{r4, lr}
 801aaea:	e9d1 3400 	ldrd	r3, r4, [r1]
 801aaee:	4323      	orrs	r3, r4
 801aaf0:	688c      	ldr	r4, [r1, #8]
 801aaf2:	6802      	ldr	r2, [r0, #0]
 801aaf4:	4323      	orrs	r3, r4
 801aaf6:	68cc      	ldr	r4, [r1, #12]
 801aaf8:	4323      	orrs	r3, r4
 801aafa:	690c      	ldr	r4, [r1, #16]
 801aafc:	4323      	orrs	r3, r4
 801aafe:	694c      	ldr	r4, [r1, #20]
 801ab00:	6989      	ldr	r1, [r1, #24]
 801ab02:	4323      	orrs	r3, r4
 801ab04:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
 801ab08:	430b      	orrs	r3, r1
 801ab0a:	4313      	orrs	r3, r2
 801ab0c:	6003      	str	r3, [r0, #0]
 801ab0e:	69c3      	ldr	r3, [r0, #28]
 801ab10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ab14:	61c3      	str	r3, [r0, #28]
 801ab16:	bd10      	pop	{r4, pc}

0801ab18 <spi_enable>:
 801ab18:	6803      	ldr	r3, [r0, #0]
 801ab1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ab1e:	6003      	str	r3, [r0, #0]
 801ab20:	4770      	bx	lr

0801ab22 <spi_disable>:
 801ab22:	6803      	ldr	r3, [r0, #0]
 801ab24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ab28:	6003      	str	r3, [r0, #0]
 801ab2a:	4770      	bx	lr

0801ab2c <mac_address_get(unsigned char*)>:
 801ab2c:	4a07      	ldr	r2, [pc, #28]	; (801ab4c <mac_address_get(unsigned char*)+0x20>)
 801ab2e:	f8d2 3a10 	ldr.w	r3, [r2, #2576]	; 0xa10
 801ab32:	f8d2 2a14 	ldr.w	r2, [r2, #2580]	; 0xa14
 801ab36:	7042      	strb	r2, [r0, #1]
 801ab38:	0e1a      	lsrs	r2, r3, #24
 801ab3a:	7082      	strb	r2, [r0, #2]
 801ab3c:	0c1a      	lsrs	r2, r3, #16
 801ab3e:	2102      	movs	r1, #2
 801ab40:	70c2      	strb	r2, [r0, #3]
 801ab42:	0a1a      	lsrs	r2, r3, #8
 801ab44:	7001      	strb	r1, [r0, #0]
 801ab46:	7102      	strb	r2, [r0, #4]
 801ab48:	7143      	strb	r3, [r0, #5]
 801ab4a:	4770      	bx	lr
 801ab4c:	1fff7000 	svcne	0x00ff7000

0801ab50 <__popcountsi2>:
 801ab50:	0843      	lsrs	r3, r0, #1
 801ab52:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 801ab56:	1ac0      	subs	r0, r0, r3
 801ab58:	0883      	lsrs	r3, r0, #2
 801ab5a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 801ab5e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 801ab62:	4418      	add	r0, r3
 801ab64:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 801ab68:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 801ab6c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 801ab70:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 801ab74:	0e00      	lsrs	r0, r0, #24
 801ab76:	4770      	bx	lr

Disassembly of section .rodata:

0801ab78 <vtable for DisplayHandler-0x128>:
 801ab78:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801ab7c:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801ab88:	03020100 	movweq	r0, #8448	; 0x2100
 801ab8c:	08070604 	stmdaeq	r7, {r2, r9, sl}
 801ab90:	00000009 	andeq	r0, r0, r9
 801ab94:	03020100 	movweq	r0, #8448	; 0x2100
 801ab98:	61745304 	cmnvs	r4, r4, lsl #6
 801ab9c:	3a737574 	bcc	9cf8174 <__exidx_end+0x1cd90e8>
 801aba0:	0a752520 	beq	9d64028 <__exidx_end+0x1d44f9c>
 801aba4:	3a732500 	bcc	9ce3fac <__exidx_end+0x1cc4f20>
 801aba8:	31007525 	tstcc	r0, r5, lsr #10
 801abac:	32313a36 	eorscc	r3, r1, #221184	; 0x36000
 801abb0:	0037353a 	eorseq	r3, r7, sl, lsr r5
 801abb4:	20636544 	rsbcs	r6, r3, r4, asr #10
 801abb8:	32203820 	eorcc	r3, r0, #32, 16	; 0x200000
 801abbc:	00323230 	eorseq	r3, r2, r0, lsr r2
 801abc0:	32335b1b 	eorscc	r5, r3, #27648	; 0x6c00
 801abc4:	7472416d 	ldrbtvc	r4, [r2], #-365	; 0xfffffe93
 801abc8:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 801abcc:	50203420 	eorpl	r3, r0, r0, lsr #8
 801abd0:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 801abd4:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801abd8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 801aa10 <i2c_data_transmit+0x2>
 801abdc:	2072656c 	rsbscs	r6, r2, ip, ror #10
 801abe0:	7836317b 	ldmdavc	r6!, {r0, r1, r3, r4, r5, r6, r8, ip, sp}
 801abe4:	55203420 	strpl	r3, [r0, #-1056]!	; 0xfffffbe0
 801abe8:	6576696e 	ldrbvs	r6, [r6, #-2414]!	; 0xfffff692
 801abec:	73657372 	cmnvc	r5, #-939524095	; 0xc8000001
 801abf0:	202f207d 	eorcs	r2, pc, sp, ror r0	; <UNPREDICTABLE>
 801abf4:	44207832 	strtmi	r7, [r0], #-2098	; 0xfffff7ce
 801abf8:	5b1b584d 	blpl	86f0d34 <__exidx_end+0x6d1ca8>
 801abfc:	006d3733 	rsbeq	r3, sp, r3, lsr r7
 801ac00:	6f635f2e 	svcvs	0x00635f2e
 801ac04:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801ac08:	685f2e00 	ldmdavs	pc, {r9, sl, fp, sp}^	; <UNPREDICTABLE>
 801ac0c:	00707474 	rsbseq	r7, r0, r4, ror r4
 801ac10:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 801ac14:	7472413d 	ldrbtvc	r4, [r2], #-317	; 0xfffffec3
 801ac18:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 801ac1c:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 801ac20:	44206c65 	strtmi	r6, [r0], #-3173	; 0xfffff39b
 801ac24:	4100584d 	tstmi	r0, sp, asr #16
 801ac28:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 801ac2c:	50207465 	eorpl	r7, r0, r5, ror #8
 801ac30:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 801ac34:	2d752520 	cfldr64cs	mvdx2, [r5, #-128]!	; 0xffffff80
 801ac38:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 801ac3c:	4d442064 	stclmi	0, cr2, [r4, #-400]	; 0xfffffe70
 801ac40:	75252058 	strvc	r2, [r5, #-88]!	; 0xffffffa8
 801ac44:	33444700 	movtcc	r4, #18176	; 0x4700
 801ac48:	35344632 	ldrcc	r4, [r4, #-1586]!	; 0xfffff9ce
 801ac4c:	20495630 	subcs	r5, r9, r0, lsr r6
 801ac50:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 801ac54:	4d442d6c 	stclmi	13, cr2, [r4, #-432]	; 0xfffffe50
 801ac58:	72410058 	subvc	r0, r1, #88	; 0x58
 801ac5c:	74654e74 	strbtvc	r4, [r5], #-3700	; 0xfffff18c
 801ac60:	50203420 	eorpl	r3, r0, r0, lsr #8
 801ac64:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 801ac68:	78752520 	ldmdavc	r5!, {r5, r8, sl, sp}^
 801ac6c:	25007525 	strcs	r7, [r0, #-1317]	; 0xfffffadb
 801ac70:	64253a73 	strtvs	r3, [r5], #-2675	; 0xfffff58d
 801ac74:	64254720 	strtvs	r4, [r5], #-1824	; 0xfffff8e0
 801ac78:	00732520 	rsbseq	r2, r3, r0, lsr #10
 801ac7c:	21786d64 	cmncs	r8, r4, ror #26
 801ac80:	65726200 	ldrbvs	r6, [r2, #-512]!	; 0xfffffe00
 801ac84:	00236b61 	eoreq	r6, r3, r1, ror #22
 801ac88:	2362616d 	cmncs	r2, #1073741851	; 0x4000001b
 801ac8c:	66657200 	strbtvs	r7, [r5], -r0, lsl #4
 801ac90:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 801ac94:	6c730023 	ldclvs	0, cr0, [r3], #-140	; 0xffffff74
 801ac98:	2373746f 	cmncs	r3, #1862270976	; 0x6f000000
 801ac9c:	00000000 	andeq	r0, r0, r0

0801aca0 <vtable for DisplayHandler>:
	...
 801aca8:	0800907f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, ip, pc}
 801acac:	080091c1 	stmdaeq	r0, {r0, r6, r7, r8, ip, pc}
 801acb0:	0800920d 	stmdaeq	r0, {r0, r2, r3, r9, ip, pc}

0801acb4 <vtable for LightSet64with4>:
	...
 801acbc:	08009081 	stmdaeq	r0, {r0, r7, ip, pc}
 801acc0:	080091cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, ip, pc}
 801acc4:	08009083 	stmdaeq	r0, {r0, r1, r7, ip, pc}
 801acc8:	080090a5 	stmdaeq	r0, {r0, r2, r5, r7, ip, pc}
 801accc:	080090c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, ip, pc}
 801acd0:	080090fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, ip, pc}
 801acd4:	0800907d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, ip, pc}
 801acd8:	0800911d 	stmdaeq	r0, {r0, r2, r3, r4, r8, ip, pc}
 801acdc:	0800913b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, ip, pc}
 801ace0:	0800913f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r8, ip, pc}
 801ace4:	08009145 	stmdaeq	r0, {r0, r2, r6, r8, ip, pc}
 801ace8:	08009149 	stmdaeq	r0, {r0, r3, r6, r8, ip, pc}

0801acec <vtable for ArtNetTriggerHandler>:
	...
 801acf4:	0800914d 	stmdaeq	r0, {r0, r2, r3, r6, r8, ip, pc}
 801acf8:	080091d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, ip, pc}
 801acfc:	080094e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, ip, pc}

0801ad00 <vtable for PixelDmxStartStop>:
	...
 801ad08:	0800914f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r8, ip, pc}
 801ad0c:	080091e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, ip, pc}
 801ad10:	08009151 	stmdaeq	r0, {r0, r4, r6, r8, ip, pc}
 801ad14:	08009161 	stmdaeq	r0, {r0, r5, r6, r8, ip, pc}

0801ad18 <vtable for RDMNetDevice>:
	...
 801ad20:	08009251 	stmdaeq	r0, {r0, r4, r6, r9, ip, pc}
 801ad24:	08009279 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, ip, pc}
 801ad28:	08010097 	stmdaeq	r1, {r0, r1, r2, r4, r7}
 801ad2c:	08010099 	stmdaeq	r1, {r0, r3, r4, r7}
 801ad30:	08009195 	stmdaeq	r0, {r0, r2, r4, r7, r8, ip, pc}
 801ad34:	080091a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, ip, pc}
 801ad38:	080091f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, ip, pc}
 801ad3c:	ffffff34 			; <UNDEFINED> instruction: 0xffffff34
 801ad40:	00000000 	andeq	r0, r0, r0
 801ad44:	08009271 	stmdaeq	r0, {r0, r4, r5, r6, r9, ip, pc}
 801ad48:	0800928b 	stmdaeq	r0, {r0, r1, r3, r7, r9, ip, pc}
 801ad4c:	080091a1 	stmdaeq	r0, {r0, r5, r7, r8, ip, pc}
 801ad50:	080091b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, ip, pc}
 801ad54:	08009205 	stmdaeq	r0, {r0, r2, r9, ip, pc}

0801ad58 <CSWTCH.130>:
 801ad58:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 801ad5c:	 			; <UNDEFINED> instruction: 0x312e3146

0801ad5d <SOFTWARE_VERSION>:
 801ad5d:	00312e31 	eorseq	r2, r1, r1, lsr lr

0801ad61 <gamma10_0>:
 801ad61:	03020100 	movweq	r0, #8448	; 0x2100
 801ad65:	07060504 	streq	r0, [r6, -r4, lsl #10]
 801ad69:	0b0a0908 	bleq	829d191 <__exidx_end+0x27e105>
 801ad6d:	0f0e0d0c 	svceq	0x000e0d0c
 801ad71:	13121110 	tstne	r2, #16, 2
 801ad75:	17161514 			; <UNDEFINED> instruction: 0x17161514
 801ad79:	1b1a1918 	blne	86a11e1 <__exidx_end+0x682155>
 801ad7d:	1f1e1d1c 	svcne	0x001e1d1c
 801ad81:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801ad85:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 801ad89:	2b2a2928 	blcs	8aa5231 <__exidx_end+0xa861a5>
 801ad8d:	2f2e2d2c 	svccs	0x002e2d2c
 801ad91:	33323130 	teqcc	r2, #48, 2
 801ad95:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801ad99:	3b3a3938 	blcc	8ea9281 <__exidx_end+0xe8a1f5>
 801ad9d:	3f3e3d3c 	svccc	0x003e3d3c
 801ada1:	43424140 	movtmi	r4, #8512	; 0x2140
 801ada5:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801ada9:	4b4a4948 	blmi	92ad2d1 <__exidx_end+0x128e245>
 801adad:	4f4e4d4c 	svcmi	0x004e4d4c
 801adb1:	53525150 	cmppl	r2, #80, 2
 801adb5:	57565554 			; <UNDEFINED> instruction: 0x57565554
 801adb9:	5b5a5958 	blpl	96b1321 <__exidx_end+0x1692295>
 801adbd:	5f5e5d5c 	svcpl	0x005e5d5c
 801adc1:	63626160 	cmnvs	r2, #96, 2
 801adc5:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 801adc9:	6b6a6968 	blvs	9ab5371 <__exidx_end+0x1a962e5>
 801adcd:	6f6e6d6c 	svcvs	0x006e6d6c
 801add1:	73727170 	cmnvc	r2, #112, 2
 801add5:	77767574 			; <UNDEFINED> instruction: 0x77767574
 801add9:	7b7a7978 	blvc	9eb93c1 <__exidx_end+0x1e9a335>
 801addd:	7f7e7d7c 	svcvc	0x007e7d7c
 801ade1:	83828180 	orrhi	r8, r2, #128, 2
 801ade5:	87868584 	strhi	r8, [r6, r4, lsl #11]
 801ade9:	8b8a8988 	blhi	62bd411 <__stack_size+0x62b9411>
 801aded:	8f8e8d8c 	svchi	0x008e8d8c
 801adf1:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 801adf5:	97969594 			; <UNDEFINED> instruction: 0x97969594
 801adf9:	9b9a9998 	blls	66c1461 <__stack_size+0x66bd461>
 801adfd:	9f9e9d9c 	svcls	0x009e9d9c
 801ae01:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 801ae05:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 801ae09:	abaaa9a8 	blge	6ac54b1 <__stack_size+0x6ac14b1>
 801ae0d:	afaeadac 	svcge	0x00aeadac
 801ae11:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 801ae15:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 801ae19:	bbbab9b8 	bllt	6ec9501 <__stack_size+0x6ec5501>
 801ae1d:	bfbebdbc 	svclt	0x00bebdbc
 801ae21:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 801ae25:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 801ae29:	cbcac9c8 	blgt	72cd551 <__stack_size+0x72c9551>
 801ae2d:	cfcecdcc 	svcgt	0x00cecdcc
 801ae31:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 801ae35:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 801ae39:	dbdad9d8 	blle	76d15a1 <__stack_size+0x76cd5a1>
 801ae3d:	dfdedddc 	svcle	0x00dedddc
 801ae41:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 801ae45:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 801ae49:	ebeae9e8 	bl	7ad55f1 <__stack_size+0x7ad15f1>
 801ae4d:	efeeedec 	svc	0x00eeedec
 801ae51:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 801ae55:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 801ae59:	fbfaf9f8 	blx	7ed9643 <__stack_size+0x7ed5643>
 801ae5d:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

0801ae61 <SOFTWARE_VERSION>:
 801ae61:	00312e31 	eorseq	r2, r1, r1, lsr lr
 801ae65:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801ae69:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801ae6d:	2c64252e 	cfstr64cs	mvdx2, [r4], #-184	; 0xffffff48
 801ae71:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 801ae75:	64252c73 	strtvs	r2, [r5], #-3187	; 0xfffff38d
 801ae79:	0a73252c 	beq	9ce4331 <__exidx_end+0x1cc52a5>
 801ae7d:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 801ae81:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801ae85:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801ae89:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 801ae8d:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 801ae91:	4f000a64 	svcmi	0x00000a64
 801ae95:	664f006e 	strbvs	r0, [pc], -lr, rrx
 801ae99:	69640066 	stmdbvs	r4!, {r1, r2, r5, r6}^
 801ae9d:	616c7073 	smcvs	50947	; 0xc703
 801aea1:	73253a79 			; <UNDEFINED> instruction: 0x73253a79
 801aea5:	6674000a 	ldrbtvs	r0, [r4], -sl
 801aea9:	253a7074 	ldrcs	r7, [sl, #-116]!	; 0xffffff8c
 801aead:	76000a73 			; <UNDEFINED> instruction: 0x76000a73
 801aeb1:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801aeb5:	253a6e6f 	ldrcs	r6, [sl, #-3695]!	; 0xfffff191
 801aeb9:	70750073 	rsbsvc	r0, r5, r3, ror r0
 801aebd:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 801aec1:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 801aec5:	54000a73 	strpl	r0, [r0], #-2675	; 0xfffff58d
 801aec9:	20505446 	subscs	r5, r0, r6, asr #8
 801aecd:	20206e4f 	eorcs	r6, r0, pc, asr #28
 801aed1:	6265525b 	rsbvs	r5, r5, #-1342177275	; 0xb0000005
 801aed5:	5d746f6f 	ldclpl	15, cr6, [r4, #-444]!	; 0xfffffe44
 801aed9:	54465400 	strbpl	r5, [r6], #-1024	; 0xfffffc00
 801aedd:	664f2050 			; <UNDEFINED> instruction: 0x664f2050
 801aee1:	525b2066 	subspl	r2, fp, #102	; 0x66
 801aee5:	6f6f6265 	svcvs	0x006f6265
 801aee9:	00205d74 	eoreq	r5, r0, r4, ror sp
 801aeed:	4f525245 	svcmi	0x00525245
 801aef1:	673f2352 			; <UNDEFINED> instruction: 0x673f2352
 801aef5:	000a7465 	andeq	r7, sl, r5, ror #8
 801aef9:	70746674 	rsbsvc	r6, r4, r4, ror r6
 801aefd:	69640023 	stmdbvs	r4!, {r0, r1, r5}^
 801af01:	616c7073 	smcvs	50947	; 0xc703
 801af05:	45002379 	strmi	r2, [r0, #-889]	; 0xfffffc87
 801af09:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 801af0d:	000a2123 	andeq	r2, sl, r3, lsr #2
 801af11:	4f525245 	svcmi	0x00525245
 801af15:	0a3f2352 	beq	8fe3c65 <__exidx_end+0xfc4bd9>
 801af19:	62657200 	rsbvs	r7, r5, #0, 4
 801af1d:	23746f6f 	cmncs	r4, #444	; 0x1bc
 801af21:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 801af25:	00237473 	eoreq	r7, r3, r3, ror r4
 801af29:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801af2d:	75002a23 	strvc	r2, [r0, #-2595]	; 0xfffff5dd
 801af31:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 801af35:	76002365 	strvc	r2, [r0], -r5, ror #6
 801af39:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801af3d:	00236e6f 	eoreq	r6, r3, pc, ror #28
 801af41:	23746567 	cmncs	r4, #432013312	; 0x19c00000
 801af45:	63616600 	cmnvs	r1, #0, 12
 801af49:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801af4d:	 	tstmi	r0, r3, lsr #6

0801af50 <s_Node>:
 801af50:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801af54:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801af60:	41730000 	cmnmi	r3, r0
 801af64:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 801af68:	31332e31 	teqcc	r3, r1, lsr lr
	...
 801af74:	2043534f 	subcs	r5, r3, pc, asr #6
 801af78:	76726553 			; <UNDEFINED> instruction: 0x76726553
 801af7c:	00007265 	andeq	r7, r0, r5, ror #4
 801af80:	00000000 	andeq	r0, r0, r0
 801af84:	544c0000 	strbpl	r0, [ip], #-0
 801af88:	00000043 	andeq	r0, r0, r3, asr #32
	...
 801af98:	2043534f 	subcs	r5, r3, pc, asr #6
 801af9c:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 801afa0:	0000746e 	andeq	r7, r0, lr, ror #8
 801afa4:	00000000 	andeq	r0, r0, r0
 801afa8:	44520000 	ldrbmi	r0, [r2], #-0
 801afac:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 801afb0:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 801afb4:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 801afb8:	0000796c 	andeq	r7, r0, ip, ror #18
 801afbc:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 801afc0:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 801afcc:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 801afd0:	00004944 	andeq	r4, r0, r4, asr #18
	...
 801afe0:	00504444 	subseq	r4, r0, r4, asr #8
	...
 801aff0:	69500000 	ldmdbvs	r0, {}^	; <UNPREDICTABLE>
 801aff4:	506c6578 	rsbpl	r6, ip, r8, ror r5
 801aff8:	65687375 	strbvs	r7, [r8, #-885]!	; 0xfffffc8b
 801affc:	00000072 	andeq	r0, r0, r2, ror r0
 801b000:	00000000 	andeq	r0, r0, r0
 801b004:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

0801b016 <s_Output>:
 801b016:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 801b022:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 801b02e:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 801b032:	00726f74 	rsbseq	r6, r2, r4, ror pc
 801b036:	00000000 	andeq	r0, r0, r0
 801b03a:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 801b03e:	0000006c 	andeq	r0, r0, ip, rrx
 801b042:	00000000 	andeq	r0, r0, r0
 801b046:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 801b04a:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 801b04e:	00000000 	andeq	r0, r0, r0
 801b052:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 801b05e:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801b062:	00006769 	andeq	r6, r0, r9, ror #14
 801b066:	00000000 	andeq	r0, r0, r0
 801b06a:	70657453 	rsbvc	r7, r5, r3, asr r4
 801b06e:	00726570 	rsbseq	r6, r2, r0, ror r5
 801b072:	00000000 	andeq	r0, r0, r0
 801b076:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 801b07a:	00007265 	andeq	r7, r0, r5, ror #4
 801b07e:	00000000 	andeq	r0, r0, r0
 801b082:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801b086:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801b08a:	00000000 	andeq	r0, r0, r0
 801b08e:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 801b092:	00006c61 	andeq	r6, r0, r1, ror #24
 801b096:	00000000 	andeq	r0, r0, r0
 801b09a:	20424752 	subcs	r4, r2, r2, asr r7
 801b09e:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 801b0a2:	0000006c 	andeq	r0, r0, ip, rrx
	...

0801b0a8 <RemoteConfig::s_GET>:
 801b0a8:	0800b429 	stmdaeq	r0, {r0, r3, r5, sl, ip, sp, pc}
 801b0ac:	00000000 	andeq	r0, r0, r0
 801b0b0:	0801af1a 	stmdaeq	r1, {r1, r3, r4, r8, r9, sl, fp, sp, pc}
 801b0b4:	00000008 	andeq	r0, r0, r8
 801b0b8:	0800a801 	stmdaeq	r0, {r0, fp, sp, pc}
 801b0bc:	00000000 	andeq	r0, r0, r0
 801b0c0:	0801af23 	stmdaeq	r1, {r0, r1, r5, r8, r9, sl, fp, sp, pc}
 801b0c4:	00000005 	andeq	r0, r0, r5
 801b0c8:	0800a801 	stmdaeq	r0, {r0, fp, sp, pc}
 801b0cc:	00000000 	andeq	r0, r0, r0
 801b0d0:	0801af29 	stmdaeq	r1, {r0, r3, r5, r8, r9, sl, fp, sp, pc}
 801b0d4:	00000006 	andeq	r0, r0, r6
 801b0d8:	0800a9b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, fp, sp, pc}
 801b0dc:	00000000 	andeq	r0, r0, r0
 801b0e0:	0801af30 	stmdaeq	r1, {r4, r5, r8, r9, sl, fp, sp, pc}
 801b0e4:	00000007 	andeq	r0, r0, r7
 801b0e8:	0800a975 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, fp, sp, pc}
 801b0ec:	00000000 	andeq	r0, r0, r0
 801b0f0:	0801af38 	stmdaeq	r1, {r3, r4, r5, r8, r9, sl, fp, sp, pc}
 801b0f4:	00000008 	andeq	r0, r0, r8
 801b0f8:	0800a8d1 	stmdaeq	r0, {r0, r4, r6, r7, fp, sp, pc}
 801b0fc:	00000000 	andeq	r0, r0, r0
 801b100:	0801aeff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
 801b104:	00000008 	andeq	r0, r0, r8
 801b108:	0800ace5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, fp, sp, pc}
 801b10c:	00000000 	andeq	r0, r0, r0
 801b110:	0801af41 	stmdaeq	r1, {r0, r6, r8, r9, sl, fp, sp, pc}
 801b114:	00010004 	andeq	r0, r1, r4
 801b118:	0800a925 	stmdaeq	r0, {r0, r2, r5, r8, fp, sp, pc}
 801b11c:	00000000 	andeq	r0, r0, r0
 801b120:	0801aef9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
 801b124:	00000005 	andeq	r0, r0, r5
 801b128:	0800b119 	stmdaeq	r0, {r0, r3, r4, r8, ip, sp, pc}
 801b12c:	00000000 	andeq	r0, r0, r0
 801b130:	0801af46 	stmdaeq	r1, {r1, r2, r6, r8, r9, sl, fp, sp, pc}
 801b134:	00000009 	andeq	r0, r0, r9

0801b138 <RemoteConfig::s_SET>:
 801b138:	0800aaad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r9, fp, sp, pc}
 801b13c:	00000000 	andeq	r0, r0, r0
 801b140:	0801aef9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
 801b144:	00010005 	andeq	r0, r1, r5
 801b148:	0800aa01 	stmdaeq	r0, {r0, r9, fp, sp, pc}
 801b14c:	00000000 	andeq	r0, r0, r0
 801b150:	0801aeff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
 801b154:	00010008 	andeq	r0, r1, r8
 801b158:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801b15c:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 801b160:	73252300 			; <UNDEFINED> instruction: 0x73252300
 801b164:	0a64253d 	beq	9924660 <__exidx_end+0x19055d4>
 801b168:	73252200 			; <UNDEFINED> instruction: 0x73252200
 801b16c:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801b170:	002c2273 	eoreq	r2, ip, r3, ror r2
 801b174:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 801b178:	000a7325 	andeq	r7, sl, r5, lsr #6
 801b17c:	6f626552 	svcvs	0x00626552
 801b180:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 801b184:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 801b188:	6552002e 	ldrbvs	r0, [r2, #-46]	; 0xffffffd2
 801b18c:	746f6f62 	strbtvc	r6, [pc], #-3938	; 801b194 <RemoteConfig::s_SET+0x5c>
 801b190:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801b194:	0a2e2e2e 	beq	8ba6a54 <__exidx_end+0xb879c8>
 801b198:	6f637200 	svcvs	0x00637200
 801b19c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801b1a0:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801b1a4:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 801b1a8:	6b726f77 	blvs	9cb6f8c <__exidx_end+0x1c97f00>
 801b1ac:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801b1b0:	73696400 	cmnvc	r9, #0, 8
 801b1b4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801b1b8:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801b1bc:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 801b1c0:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 801b1c4:	00747874 	rsbseq	r7, r4, r4, ror r8
 801b1c8:	31333165 	teqcc	r3, r5, ror #2
 801b1cc:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801b1d0:	72617000 	rsbvc	r7, r1, #0
 801b1d4:	2e736d61 	cdpcs	13, 7, cr6, cr3, cr1, {3}
 801b1d8:	00747874 	rsbseq	r7, r4, r4, ror r8
 801b1dc:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801b1e0:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801b1e4:	00747874 	rsbseq	r7, r4, r4, ror r8

0801b1e8 <RemoteConfig::s_TXT>:
 801b1e8:	0800aced 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sl, fp, sp, pc}
 801b1ec:	00000000 	andeq	r0, r0, r0
 801b1f0:	0800aff9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 801b1f4:	00000000 	andeq	r0, r0, r0
 801b1f8:	0801b199 	stmdaeq	r1, {r0, r3, r4, r7, r8, ip, sp, pc}
 801b1fc:	0000000b 	andeq	r0, r0, fp
 801b200:	0000000c 	andeq	r0, r0, ip
 801b204:	0800ad1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, fp, sp, pc}
 801b208:	00000000 	andeq	r0, r0, r0
 801b20c:	0800b029 	stmdaeq	r0, {r0, r3, r5, ip, sp, pc}
 801b210:	00000000 	andeq	r0, r0, r0
 801b214:	0801b1a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, ip, sp, pc}
 801b218:	0000000b 	andeq	r0, r0, fp
 801b21c:	00000000 	andeq	r0, r0, r0
 801b220:	0800ae09 	stmdaeq	r0, {r0, r3, r9, sl, fp, sp, pc}
 801b224:	00000000 	andeq	r0, r0, r0
 801b228:	0800b0f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, ip, sp, pc}
 801b22c:	00000000 	andeq	r0, r0, r0
 801b230:	0801b1b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, ip, sp, pc}
 801b234:	0000000b 	andeq	r0, r0, fp
 801b238:	0000000f 	andeq	r0, r0, pc
 801b23c:	0800ad4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, sl, fp, sp, pc}
 801b240:	00000000 	andeq	r0, r0, r0
 801b244:	0800b051 	stmdaeq	r0, {r0, r4, r6, ip, sp, pc}
 801b248:	00000000 	andeq	r0, r0, r0
 801b24c:	0801b1bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, ip, sp, pc}
 801b250:	0000000a 	andeq	r0, r0, sl
 801b254:	00000001 	andeq	r0, r0, r1
 801b258:	0800ad7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, fp, sp, pc}
 801b25c:	00000000 	andeq	r0, r0, r0
 801b260:	0800b079 	stmdaeq	r0, {r0, r3, r4, r5, r6, ip, sp, pc}
 801b264:	00000000 	andeq	r0, r0, r0
 801b268:	0801b1c8 	stmdaeq	r1, {r3, r6, r7, r8, ip, sp, pc}
 801b26c:	00000008 	andeq	r0, r0, r8
 801b270:	00000004 	andeq	r0, r0, r4
 801b274:	0800adad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, sl, fp, sp, pc}
 801b278:	00000000 	andeq	r0, r0, r0
 801b27c:	0800b0a1 	stmdaeq	r0, {r0, r5, r7, ip, sp, pc}
 801b280:	00000000 	andeq	r0, r0, r0
 801b284:	0801b1d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, ip, sp, pc}
 801b288:	0000000a 	andeq	r0, r0, sl
 801b28c:	00000002 	andeq	r0, r0, r2
 801b290:	0800add9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, sl, fp, sp, pc}
 801b294:	00000000 	andeq	r0, r0, r0
 801b298:	0800b0c9 	stmdaeq	r0, {r0, r3, r6, r7, ip, sp, pc}
 801b29c:	00000000 	andeq	r0, r0, r0
 801b2a0:	0801b1dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, ip, sp, pc}
 801b2a4:	0000000b 	andeq	r0, r0, fp
 801b2a8:	00000003 	andeq	r0, r0, r3
 801b2ac:	00544547 	subseq	r4, r4, r7, asr #10
 801b2b0:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 801b2b4:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 801b2b8:	0a200050 	beq	881b400 <__exidx_end+0x7fc374>
 801b2bc:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 801b2c0:	43003a00 	movwmi	r3, #2560	; 0xa00
 801b2c4:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 801b2c8:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 801b2cc:	00657079 	rsbeq	r7, r5, r9, ror r0
 801b2d0:	61003b20 	tstvs	r0, r0, lsr #22
 801b2d4:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 801b2d8:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 801b2dc:	6a2f6e6f 	bvs	8bf6ca0 <__exidx_end+0xbd7c14>
 801b2e0:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 801b2e4:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 801b2e8:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 801b2ec:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 801b2f0:	2f006874 	svccs	0x00006874
 801b2f4:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 801b2f8:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 801b2fc:	2f006c6d 	svccs	0x00006c6d
 801b300:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 801b304:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 801b308:	2f007373 	svccs	0x00007373
 801b30c:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 801b310:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 801b314:	736a2f00 	cmnvc	sl, #0, 30
 801b318:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 801b31c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801b320:	72657600 	rsbvc	r7, r5, #0, 12
 801b324:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 801b328:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 801b32c:	00656d69 	rsbeq	r6, r5, r9, ror #26
 801b330:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801b334:	0079616c 	rsbseq	r6, r9, ip, ror #2
 801b338:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801b33c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801b340:	6a2f0079 	bvs	8bdb52c <__exidx_end+0xbbc4a0>
 801b344:	2f6e6f73 	svccs	0x006e6f73
 801b348:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801b34c:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 801b350:	6f6f6265 	svcvs	0x006f6265
 801b354:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 801b358:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 801b35c:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 801b360:	434f4421 	movtmi	r4, #62497	; 0xf421
 801b364:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 801b368:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 801b36c:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 801b370:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801b374:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 801b378:	3e646165 	powccsz	f6, f4, f5
 801b37c:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 801b380:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 801b384:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 801b388:	742f3c74 	strtvc	r3, [pc], #-3188	; 801b390 <RemoteConfig::s_TXT+0x1a8>
 801b38c:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 801b390:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801b394:	3e646165 	powccsz	f6, f4, f5
 801b398:	6f623c0a 	svcvs	0x00623c0a
 801b39c:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 801b3a0:	4f3e3168 	svcmi	0x003e3168
 801b3a4:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801b3a8:	2f3c3e31 	svccs	0x003c3e31
 801b3ac:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b3b0:	2f3c0a3e 	svccs	0x003c0a3e
 801b3b4:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801b3b8:	42000a3e 	andmi	r0, r0, #253952	; 0x3e000
 801b3bc:	52206461 	eorpl	r6, r0, #1627389952	; 0x61000000
 801b3c0:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 801b3c4:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
 801b3c8:	4620746f 	strtmi	r7, [r0], -pc, ror #8
 801b3cc:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 801b3d0:	71655200 	cmnvc	r5, r0, lsl #4
 801b3d4:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 801b3d8:	746e4520 	strbtvc	r4, [lr], #-1312	; 0xfffffae0
 801b3dc:	20797469 	rsbscs	r7, r9, r9, ror #8
 801b3e0:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 801b3e4:	6772614c 	ldrbvs	r6, [r2, -ip, asr #2]!
 801b3e8:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
 801b3ec:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 801b3f0:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 801b3f4:	6f542049 	svcvs	0x00542049
 801b3f8:	6f4c206f 	svcvs	0x004c206f
 801b3fc:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 801b400:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 801b404:	206c616e 	rsbcs	r6, ip, lr, ror #2
 801b408:	76726553 			; <UNDEFINED> instruction: 0x76726553
 801b40c:	45207265 	strmi	r7, [r0, #-613]!	; 0xfffffd9b
 801b410:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 801b414:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 801b418:	20646f68 	rsbcs	r6, r4, r8, ror #30
 801b41c:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801b420:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 801b424:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 801b428:	00646574 	rsbeq	r6, r4, r4, ror r5
 801b42c:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 801b430:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801b434:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801b438:	70707553 	rsbsvc	r7, r0, r3, asr r5
 801b43c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
 801b440:	6e550064 	cdpvs	0, 5, cr0, cr5, cr4, {3}
 801b444:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 801b448:	7245206e 	subvc	r2, r5, #110	; 0x6e
 801b44c:	00726f72 	rsbseq	r6, r2, r2, ror pc
 801b450:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 801b454:	434f4421 	movtmi	r4, #62497	; 0xf421
 801b458:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 801b45c:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 801b460:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 801b464:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801b468:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 801b46c:	3e646165 	powccsz	f6, f4, f5
 801b470:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 801b474:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 801b478:	73252075 			; <UNDEFINED> instruction: 0x73252075
 801b47c:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801b480:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 801b484:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 801b488:	0a3e6461 	beq	8fb4614 <__exidx_end+0xf95588>
 801b48c:	646f623c 	strbtvs	r6, [pc], #-572	; 801b494 <RemoteConfig::s_TXT+0x2ac>
 801b490:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 801b494:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 801b498:	31682f3c 	cmncc	r8, ip, lsr pc
 801b49c:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 801b4a0:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801b4a4:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801b4a8:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801b4ac:	5448000a 	strbpl	r0, [r8], #-10
 801b4b0:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 801b4b4:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 801b4b8:	73252075 			; <UNDEFINED> instruction: 0x73252075
 801b4bc:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 801b4c0:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 801b4c4:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801b4c8:	6f430a0d 	svcvs	0x00430a0d
 801b4cc:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 801b4d0:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 801b4d4:	203a6570 	eorscs	r6, sl, r0, ror r5
 801b4d8:	0a0d7325 	beq	8378174 <__exidx_end+0x3590e8>
 801b4dc:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 801b4e0:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 801b4e4:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 801b4e8:	203a6874 	eorscs	r6, sl, r4, ror r8
 801b4ec:	0a0d7525 	beq	8378988 <__exidx_end+0x3598fc>
 801b4f0:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 801b4f4:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801b4f8:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 801b4fc:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 801b500:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 801b504:	4447000a 	strbmi	r0, [r7], #-10
 801b508:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
 801b50c:	49563035 	ldmdbmi	r6, {r0, r2, r4, r5, ip, sp}^
	...

0801b511 <contentType>:
 801b511:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801b515:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 801b519:	0000006c 	andeq	r0, r0, ip, rrx
	...
 801b531:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801b535:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 801b551:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801b555:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 801b559:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 801b55d:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 801b571:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 801b575:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 801b579:	2f6e6f69 	svccs	0x006e6f69
 801b57d:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

0801b591 <RemoteConfigConst::PARAMS_DISABLE>:
 801b591:	61736964 	cmnvs	r3, r4, ror #18
 801b595:	00656c62 	rsbeq	r6, r5, r2, ror #24

0801b599 <RemoteConfigConst::PARAMS_FILE_NAME>:
 801b599:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 801b59d:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 801b5a1:	00747874 	rsbseq	r7, r4, r4, ror r8

0801b5a5 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 801b5a5:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801b5a9:	5f79616c 	svcpl	0x0079616c
 801b5ad:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

0801b5b2 <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 801b5b2:	61736964 	cmnvs	r3, r4, ror #18
 801b5b6:	5f656c62 	svcpl	0x00656c62
 801b5ba:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 801b5be:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

0801b5c0 <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 801b5c0:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801b5c4:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 801b5c8:	6f6f6265 	svcvs	0x006f6265
 801b5cc:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

0801b5ce <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 801b5ce:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801b5d2:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 801b06e <s_Output+0x58>
 801b5d6:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 801b5da:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

0801b5dc <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 801b5dc:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801b5e0:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 801b5e4:	6f746361 	svcvs	0x00746361
 801b5e8:	7b007972 	blvc	8039bb8 <__exidx_end+0x1ab2c>
 801b5ec:	73696c22 	cmnvc	r9, #8704	; 0x2200
 801b5f0:	7b3a2274 	blvc	8ea3fc8 <__exidx_end+0xe84f3c>
 801b5f4:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 801b5f8:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 801b5fc:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801b600:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801b604:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 801b608:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801b60c:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801b610:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 801b614:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 801b618:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 801b61c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801b620:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801b624:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 801b628:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801b62c:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 801b630:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801b634:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801b638:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 801b63c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801b640:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 801b644:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 801b648:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 801b64c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801b650:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 801b654:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 801b658:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 801b65c:	616f6222 	cmnvs	pc, r2, lsr #4
 801b660:	3a226472 	bcc	88b4830 <__exidx_end+0x8957a4>
 801b664:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801b668:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 801b66c:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 801b670:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 801b674:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 801b678:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 801b67c:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 801b680:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 801b684:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 801b688:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 801b68c:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 801b690:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 801b694:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 801b698:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 801b69c:	7b000a7d 	blvc	801e098 <ASCII16x24_Table+0x2ec>
 801b6a0:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 801b6a4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801b6a8:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 801b6ac:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 801b6b0:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801b6b4:	7b3a2273 	blvc	8ea4088 <__exidx_end+0xe84ffc>
 801b6b8:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 801b6bc:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 801b6c0:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 801b6c4:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 801b6c8:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 801b6cc:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 801b6d0:	61726170 	cmnvs	r2, r0, ror r1
 801b6d4:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 801b6d8:	3a227478 	bcc	88b88c0 <__exidx_end+0x899834>
 801b6dc:	584d4422 	stmdapl	sp, {r1, r5, sl, lr}^
 801b6e0:	61725420 	cmnvs	r2, r0, lsr #8
 801b6e4:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 801b6e8:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 801b6ec:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801b6f0:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801b6f4:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 801b6f8:	4d44223a 	sfmmi	f2, 2, [r4, #-232]	; 0xffffff18
 801b6fc:	69502058 	ldmdbvs	r0, {r3, r4, r6, sp}^
 801b700:	226c6578 	rsbcs	r6, ip, #120, 10	; 0x1e000000
 801b704:	6964222c 	stmdbvs	r4!, {r2, r3, r5, r9, sp}^
 801b708:	616c7073 	smcvs	50947	; 0xc703
 801b70c:	78742e79 	ldmdavc	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp}^
 801b710:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 801b714:	70736944 	rsbsvc	r6, r3, r4, asr #18
 801b718:	2079616c 	rsbscs	r6, r9, ip, ror #2
 801b71c:	22464455 	subcs	r4, r6, #1426063360	; 0x55000000
 801b720:	656e222c 	strbvs	r2, [lr, #-556]!	; 0xfffffdd4
 801b724:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 801b728:	78742e6b 	ldmdavc	r4!, {r0, r1, r3, r5, r6, r9, sl, fp, sp}^
 801b72c:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 801b730:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 801b734:	226b726f 	rsbcs	r7, fp, #-268435450	; 0xf0000006
 801b738:	6372222c 	cmnvs	r2, #44, 4	; 0xc0000002
 801b73c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801b740:	78742e67 	ldmdavc	r4!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}^
 801b744:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 801b748:	6f6d6552 	svcvs	0x006d6552
 801b74c:	63206574 			; <UNDEFINED> instruction: 0x63206574
 801b750:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801b754:	61727567 	cmnvs	r2, r7, ror #10
 801b758:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801b75c:	007d7d22 	rsbseq	r7, sp, r2, lsr #26

0801b760 <index_html>:
 801b760:	4f44213c 	svcmi	0x0044213c
 801b764:	50595443 	subspl	r5, r9, r3, asr #8
 801b768:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 801b76c:	0a3e6c6d 	beq	8fb6928 <__exidx_end+0xf9789c>
 801b770:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 801b774:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 801b778:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 801b77c:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 801b780:	6b6e696c 	blvs	9bb5d38 <__exidx_end+0x1b96cac>
 801b784:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 801b788:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 801b78c:	73656c79 	cmnvc	r5, #30976	; 0x7900
 801b790:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 801b794:	72682022 	rsbvc	r2, r8, #34	; 0x22
 801b798:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 801b79c:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 801b7a0:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 801b7a4:	20227373 	eorcs	r7, r2, r3, ror r3
 801b7a8:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 801b7ac:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 801b7b0:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 801b7b4:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 801b7b8:	0a3e656c 	beq	8fb4d70 <__exidx_end+0xf95ce4>
 801b7bc:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 801b7c0:	0a3e6461 	beq	8fb494c <__exidx_end+0xf958c0>
 801b7c4:	646f623c 	strbtvs	r6, [pc], #-572	; 801b7cc <index_html+0x6c>
 801b7c8:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 801b7cc:	6165683c 	cmnvs	r5, ip, lsr r8
 801b7d0:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 801b7d4:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 801b7d8:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 801b7dc:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 801b7e0:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 801b7e4:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 801b7e8:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801b7ec:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 801b7f0:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 801b7f4:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 801b7f8:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 801b7fc:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 801b800:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801b804:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 801b808:	6f746365 	svcvs	0x00746365
 801b80c:	20227972 	eorcs	r7, r2, r2, ror r9
 801b810:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801b814:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 801b818:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 801b81c:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801b820:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 801b824:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 801b828:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 801b82c:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 801b830:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 801b834:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 801b838:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 801b83c:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 801b840:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801b844:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 801b848:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 801b84c:	20227478 	eorcs	r7, r2, r8, ror r4
 801b850:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801b854:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 801b858:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 801b85c:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 801b860:	0a3e656c 	beq	8fb4e18 <__exidx_end+0xf95d8c>
 801b864:	6f663c09 	svcvs	0x00663c09
 801b868:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 801b86c:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 801b870:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 801b874:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 801b878:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801b87c:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 801b880:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 801b884:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 801b888:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 801b88c:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 801b890:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 801b894:	20747069 	rsbscs	r7, r4, r9, rrx
 801b898:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 801b89c:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 801b8a0:	6a2e7865 	bvs	8bb9a3c <__exidx_end+0xb9a9b0>
 801b8a4:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 801b8a8:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 801b8ac:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801b8b0:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 801b8b4:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801b8b8:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801b8bc:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801b8c0:	 	svcvs	0x0062000a

0801b8c2 <styles_css>:
 801b8c2:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b8c6:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801b8ca:	63616220 	cmnvs	r1, #32, 4
 801b8ce:	6f72676b 	svcvs	0x0072676b
 801b8d2:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 801b8d6:	6f6c6f63 	svcvs	0x006c6f63
 801b8da:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801b8de:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 801b8e2:	30322c30 	eorscc	r2, r2, r0, lsr ip
 801b8e6:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 801b8ea:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801b8ee:	6f6c6f63 	svcvs	0x006c6f63
 801b8f2:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801b8f6:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 801b8fa:	202c3535 	eorcs	r3, ip, r5, lsr r5
 801b8fe:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 801b902:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 801b906:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 801b90a:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 801b90e:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801b912:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801b916:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801b91a:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 801b91e:	0a3b7865 	beq	8ef9aba <__exidx_end+0xedaa2e>
 801b922:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 801b926:	0a7b2069 	beq	9ee3ad2 <__exidx_end+0x1ec4a46>
 801b92a:	696c2020 	stmdbvs	ip!, {r5, sp}^
 801b92e:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 801b932:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 801b936:	6f6e203a 	svcvs	0x006e203a
 801b93a:	0a3b656e 	beq	8ef4efa <__exidx_end+0xed5e6e>
 801b93e:	616d2020 	cmnvs	sp, r0, lsr #32
 801b942:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 801b946:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 801b94a:	70352078 	eorsvc	r2, r5, r8, ror r0
 801b94e:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 801b952:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 801b956:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 801b95a:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801b95e:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801b962:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801b966:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 801b96a:	0a3b7865 	beq	8ef9b06 <__exidx_end+0xedaa7a>
 801b96e:	6f622020 	svcvs	0x00622020
 801b972:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 801b976:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 801b97a:	3a737569 	bcc	9cf8f26 <__exidx_end+0x1cd9e9a>
 801b97e:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 801b982:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801b986:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801b98a:	203a7265 	eorscs	r7, sl, r5, ror #4
 801b98e:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b992:	72672064 	rsbvc	r2, r7, #100	; 0x64
 801b996:	31207965 			; <UNDEFINED> instruction: 0x31207965
 801b99a:	0a3b7870 	beq	8ef9b62 <__exidx_end+0xedaad6>
 801b99e:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 801b9a2:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 801b9a6:	0a7b2072 	beq	9ee3b76 <__exidx_end+0x1ec4aea>
 801b9aa:	69642020 	stmdbvs	r4!, {r5, sp}^
 801b9ae:	616c7073 	smcvs	50947	; 0xc703
 801b9b2:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 801b9b6:	3b78656c 	blcc	9e34f6e <__exidx_end+0x1e15ee2>
 801b9ba:	6a20200a 	bvs	88239ea <__exidx_end+0x80495e>
 801b9be:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 801b9c2:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 801b9c6:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 801b9ca:	203a746e 	eorscs	r7, sl, lr, ror #8
 801b9ce:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 801b9d2:	0a3b7265 	beq	8ef836e <__exidx_end+0xed92e2>
 801b9d6:	6f622020 	svcvs	0x00622020
 801b9da:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 801b9de:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 801b9e2:	3a737569 	bcc	9cf8f8e <__exidx_end+0x1cd9f02>
 801b9e6:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 801b9ea:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801b9ee:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801b9f2:	203a7265 	eorscs	r7, sl, r5, ror #4
 801b9f6:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801b9fa:	72672064 	rsbvc	r2, r7, #100	; 0x64
 801b9fe:	31207965 			; <UNDEFINED> instruction: 0x31207965
 801ba02:	0a3b7870 	beq	8ef9bca <__exidx_end+0xedab3e>
 801ba06:	00000a7d 	andeq	r0, r0, sp, ror sl
	...

0801ba0c <HttpContent>:
 801ba0c:	0801b300 	stmdaeq	r1, {r8, r9, ip, sp, pc}
 801ba10:	0801b8c2 	stmdaeq	r1, {r1, r6, r7, fp, ip, sp, pc}
 801ba14:	0801b30c 	stmdaeq	r1, {r2, r3, r8, r9, ip, sp, pc}
 801ba18:	0801ba24 	stmdaeq	r1, {r2, r5, r9, fp, ip, sp, pc}
 801ba1c:	0801b2f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, ip, sp, pc}
 801ba20:	0801b760 	stmdaeq	r1, {r5, r6, r8, r9, sl, ip, sp, pc}

0801ba24 <index_js>:
 801ba24:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801ba28:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 801ba2c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801ba30:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 801ba34:	534a7465 	movtpl	r7, #42085	; 0xa465
 801ba38:	6a284e4f 	bvs	8a2f37c <__exidx_end+0xa102f0>
 801ba3c:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801ba40:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801ba44:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 801ba48:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 801ba4c:	6a2f273d 	bvs	8be5748 <__exidx_end+0xbc66bc>
 801ba50:	2f6e6f73 	svccs	0x006e6f73
 801ba54:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801ba58:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801ba5c:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 801ba60:	20797274 	rsbscs	r7, r9, r4, ror r2
 801ba64:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 801ba68:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 801ba6c:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 801ba70:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 801ba74:	20746961 	rsbscs	r6, r4, r1, ror #18
 801ba78:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 801ba7c:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 801ba80:	0a3b296c 	beq	8ee6038 <__exidx_end+0xec6fac>
 801ba84:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 801ba88:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 801ba8c:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 801ba90:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 801ba94:	73657220 	cmnvc	r5, #32, 4
 801ba98:	6f736a2e 	svcvs	0x00736a2e
 801ba9c:	3b29286e 	blcc	8a65c5c <__exidx_end+0xa46bd0>
 801baa0:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 801baa4:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 801baa8:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 801baac:	6f727265 	svcvs	0x00727265
 801bab0:	7b202972 	blvc	8826080 <__exidx_end+0x806ff4>
 801bab4:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801bab8:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 801babc:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 801bac0:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 801bac4:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 801bac8:	3b29726f 	blcc	8a7848c <__exidx_end+0xa59400>
 801bacc:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 801bad0:	0a0a7d0a 	beq	82baf00 <__exidx_end+0x29be74>
 801bad4:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801bad8:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 801badc:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801bae0:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 801bae4:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 801bae8:	73694c72 	cmnvc	r9, #29184	; 0x7200
 801baec:	20292874 	eorcs	r2, r9, r4, ror r8
 801baf0:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 801baf4:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801baf8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801bafc:	6177613d 	cmnvs	r7, sp, lsr r1
 801bb00:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801bb04:	534a7465 	movtpl	r7, #42085	; 0xa465
 801bb08:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801bb0c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801bb10:	0a3b2927 	beq	8ee5fb4 <__exidx_end+0xec6f28>
 801bb14:	6f640909 	svcvs	0x00640909
 801bb18:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 801bb1c:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 801bb20:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 801bb24:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 801bb28:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 801bb2c:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 801bb30:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 801bb34:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 801bb38:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 801bb3c:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 801bb40:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 801bb44:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 801bb48:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 801bb4c:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 801bb50:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 801bb54:	2b656d61 	blcs	99770e0 <__exidx_end+0x1958054>
 801bb58:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801bad8 <index_js+0xb4>
 801bb5c:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801bb60:	2b223e69 	blcs	88ab50c <__exidx_end+0x88c480>
 801bb64:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801bb68:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 801bb6c:	6f6e2e74 	svcvs	0x006e2e74
 801bb70:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 801bb74:	2b657079 	blcs	9977d60 <__exidx_end+0x1958cd4>
 801bb78:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801baf8 <index_js+0xd4>
 801bb7c:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801bb80:	2b223e69 	blcs	88ab52c <__exidx_end+0x88c4a0>
 801bb84:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801bb88:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 801bb8c:	6f6e2e74 	svcvs	0x006e2e74
 801bb90:	702e6564 	eorvc	r6, lr, r4, ror #10
 801bb94:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 801bb98:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801bb9c:	2f3c222b 	svccs	0x003c222b
 801bba0:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 801bba4:	0a7d0a3b 	beq	9f5e498 <__exidx_end+0x1f3f40c>
 801bba8:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 801bbac:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 801bbb0:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 801bbb4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801bbb8:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 801bbbc:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801bbc0:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801bbc4:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 801bbc8:	0a7b2029 	beq	9ee3c74 <__exidx_end+0x1ec4be8>
 801bbcc:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 801bbd0:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 801bbd4:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 801bbd8:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801bbdc:	6177613d 	cmnvs	r7, sp, lsr r1
 801bbe0:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801bbe4:	534a7465 	movtpl	r7, #42085	; 0xa465
 801bbe8:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801bbec:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801bbf0:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801bbf4:	3b292779 	blcc	8a659e0 <__exidx_end+0xa46954>
 801bbf8:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801bbfc:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801bc00:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801bc04:	0a22223d 	beq	88a4500 <__exidx_end+0x885474>
 801bc08:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 801bc0c:	66207465 	strtvs	r7, [r0], -r5, ror #8
 801bc10:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 801bc14:	73656d61 	cmnvc	r5, #6208	; 0x1840
 801bc18:	6a624f3d 	bvs	98af914 <__exidx_end+0x1890888>
 801bc1c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 801bc20:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 801bc24:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 801bc28:	6f746365 	svcvs	0x00746365
 801bc2c:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 801bc30:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801bc34:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 801bc38:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 801bc3c:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 801bc40:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 801bc44:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 801bc48:	6145726f 	cmpvs	r5, pc, ror #4
 801bc4c:	66286863 	strtvs	r6, [r8], -r3, ror #16
 801bc50:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 801bc54:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801bc58:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 801bc5c:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801bc60:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 801bc64:	20726176 	rsbscs	r6, r2, r6, ror r1
 801bc68:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 801bc6c:	203d2065 	eorscs	r2, sp, r5, rrx
 801bc70:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801bc74:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801bc78:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 801bc7c:	73656c69 	cmnvc	r5, #26880	; 0x6900
 801bc80:	6b5b5d22 	blvs	96f3110 <__exidx_end+0x16d4084>
 801bc84:	3b5d7965 	blcc	977a220 <__exidx_end+0x175b194>
 801bc88:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801bc8c:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 801bc90:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 801bc94:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 801bc98:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801bc9c:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 801bca0:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 801bca4:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 801bca8:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 801bcac:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 801bcb0:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 801bcb4:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 801bcb8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801bcbc:	0a3b223e 	beq	8ee45bc <__exidx_end+0xec5530>
 801bcc0:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 801bcc4:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801bcc8:	6f640909 	svcvs	0x00640909
 801bccc:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 801bcd0:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 801bcd4:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 801bcd8:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 801bcdc:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 801bce0:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 801bce4:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 801bce8:	6f746365 	svcvs	0x00746365
 801bcec:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 801bcf0:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 801bcf4:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 801bcf8:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 801bcfc:	3b6c6d74 	blcc	9b372d4 <__exidx_end+0x1b18248>
 801bd00:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801bd04:	5f746567 	svcpl	0x00746567
 801bd08:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 801bd0c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801bd10:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801bd14:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 801bd18:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 801bd1c:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 801bd20:	20636e79 	rsbcs	r6, r3, r9, ror lr
 801bd24:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 801bd28:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801bd2c:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 801bd30:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 801bd34:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801bd38:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801bd3c:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801bd40:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 801bd44:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 801bd48:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 801bd4c:	6177613d 	cmnvs	r7, sp, lsr r1
 801bd50:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801bd54:	534a7465 	movtpl	r7, #42085	; 0xa465
 801bd58:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801bd5c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801bd60:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 801bd64:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801bd68:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 801bd6c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801bd70:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 801bd74:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 801bd78:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 801bd7c:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 801bd80:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 801bd84:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 801bd88:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 801bd8c:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 801bd90:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 801bd94:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 801bd98:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 801bd9c:	2b22563e 	blcs	88b169c <__exidx_end+0x892610>
 801bda0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801bda4:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801bda8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801bdac:	2b6e6f69 	blcs	9bb7b58 <__exidx_end+0x1b98acc>
 801bdb0:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801bd30 <index_js+0x30c>
 801bdb4:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801bdb8:	2b223e69 	blcs	88ab764 <__exidx_end+0x88c6d8>
 801bdbc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801bdc0:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801bdc4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 801bdc8:	61642e64 	cmnvs	r4, r4, ror #28
 801bdcc:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 801bdd0:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801bdd4:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801bdd8:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 801bddc:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801bde0:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 801bde4:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 801bde8:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 801bdec:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 801bdf0:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 801bdf4:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 801bdf8:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 801bdfc:	6f697372 	svcvs	0x00697372
 801be00:	6f622e6e 	svcvs	0x00622e6e
 801be04:	2b647261 	blcs	9938790 <__exidx_end+0x1919704>
 801be08:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801bd88 <index_js+0x364>
 801be0c:	3b223e69 	blcc	88ab7b8 <__exidx_end+0x88c72c>
 801be10:	0a0a7d0a 	beq	82bb240 <__exidx_end+0x29c1b4>
 801be14:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801be18:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 801be1c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801be20:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 801be24:	745f7465 	ldrbvc	r7, [pc], #-1125	; 801be2c <index_js+0x408>
 801be28:	73287478 			; <UNDEFINED> instruction: 0x73287478
 801be2c:	20296c65 	eorcs	r6, r9, r5, ror #24
 801be30:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 801be34:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 801be38:	613d7478 	teqvs	sp, r8, ror r4
 801be3c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 801be40:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 801be44:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 801be48:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 801be4c:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801be50:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801be54:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801be58:	3b22223d 	blcc	88a4754 <__exidx_end+0x8856c8>
 801be5c:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 801be60:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 801be64:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 801be68:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 801be6c:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 801be70:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 801be74:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 801be78:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 801be7c:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 801be80:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801be84:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 801be88:	0a7b2029 	beq	9ee3f34 <__exidx_end+0x1ec4ea8>
 801be8c:	61760909 	cmnvs	r6, r9, lsl #18
 801be90:	61762072 	cmnvs	r6, r2, ror r0
 801be94:	2065756c 	rsbcs	r7, r5, ip, ror #10
 801be98:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 801be9c:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 801bea0:	6b5b5d6c 	blvs	96f3458 <__exidx_end+0x16d43cc>
 801bea4:	3b5d7965 	blcc	977a440 <__exidx_end+0x175b3b4>
 801bea8:	2009090a 	andcs	r0, r9, sl, lsl #18
 801beac:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801beb0:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 801beb4:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 801beb8:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 801bebc:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 801bec0:	2f3c222b 	svccs	0x003c222b
 801bec4:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 801bec8:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 801becc:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 801bed0:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 801bed4:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 801bed8:	742f3c3e 	strtvc	r3, [pc], #-3134	; 801bee0 <index_js+0x4bc>
 801bedc:	3b223e72 	blcc	88ab8ac <__exidx_end+0x88c820>
 801bee0:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 801bee4:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 801bee8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 801beec:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801bef0:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 801bef4:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 801bef8:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 801befc:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 801bf00:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 801bf04:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 801bf08:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 801bf0c:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 801bf10:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 801bf14:	0a3b6c6d 	beq	8ef70d0 <__exidx_end+0xed8044>
 801bf18:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 801bf1c:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 801bf20:	73694c72 	cmnvc	r9, #29184	; 0x7200
 801bf24:	3b292874 	blcc	8a660fc <__exidx_end+0xa47070>
 801bf28:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 801bf2c:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 801bf30:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 801bf34:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801bf38:	0a3b2928 	beq	8ee63e0 <__exidx_end+0xec7354>
 801bf3c:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 801bf40:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 801bf44:	6f697372 	svcvs	0x00697372
 801bf48:	3b29286e 	blcc	8a66108 <__exidx_end+0xa4707c>
 801bf4c:	2020000a 	eorcs	r0, r0, sl
 801bf50:	76696e55 			; <UNDEFINED> instruction: 0x76696e55
 801bf54:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801bf58:	72612073 	rsbvc	r2, r1, #115	; 0x73
 801bf5c:	616d2065 	cmnvs	sp, r5, rrx
 801bf60:	65707070 	ldrbvs	r7, [r0, #-112]!	; 0xffffff90
 801bf64:	312b2064 			; <UNDEFINED> instruction: 0x312b2064
 801bf68:	0000000a 	andeq	r0, r0, sl

0801bf6c <vtable for ArtNet4Node>:
	...
 801bf74:	0800be15 	stmdaeq	r0, {r0, r2, r4, r9, sl, fp, ip, sp, pc}
 801bf78:	0800be35 	stmdaeq	r0, {r0, r2, r4, r5, r9, sl, fp, ip, sp, pc}
 801bf7c:	0800bd97 	stmdaeq	r0, {r0, r1, r2, r4, r7, r8, sl, fp, ip, sp, pc}
 801bf80:	0800be81 	stmdaeq	r0, {r0, r7, r9, sl, fp, ip, sp, pc}
 801bf84:	0800be47 	stmdaeq	r0, {r0, r1, r2, r6, r9, sl, fp, ip, sp, pc}
 801bf88:	0800bd85 	stmdaeq	r0, {r0, r2, r7, r8, sl, fp, ip, sp, pc}
 801bf8c:	0800bdf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp, pc}

0801bf90 <ArtNetMsgConst::START>:
 801bf90:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 801bf94:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 801bf98:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 801bf9c:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

0801bfa1 <ArtNetMsgConst::PARAMS>:
 801bfa1:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801bfa5:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801bfa9:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801bfad:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801bfb1:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801bfb5 <ArtNetMsgConst::STARTED>:
 801bfb5:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801bfb9:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801bfbd:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801bfc1:	00646574 	rsbeq	r6, r4, r4, ror r5
 801bfc5:	25207325 	strcs	r7, [r0, #-805]!	; 0xfffffcdb
 801bfc9:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
 801bfcd:	00732520 	rsbseq	r2, r3, r0, lsr #10
 801bfd1:	70747468 	rsbsvc	r7, r4, r8, ror #8
 801bfd5:	2f2f3a73 	svccs	0x002f3a73
 801bfd9:	32336467 	eorscc	r6, r3, #1728053248	; 0x67000000
 801bfdd:	786d642d 	stmdavc	sp!, {r0, r2, r3, r5, sl, sp, lr}^
 801bfe1:	67726f2e 	ldrbvs	r6, [r2, -lr, lsr #30]!
 801bfe5:	626d4500 	rsbvs	r4, sp, #0, 10
 801bfe9:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
 801bfed:	 	subvc	r0, r1, #100	; 0x64

0801bfef <artnet::NODE_ID>:
 801bfef:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801bff3:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801bff7 <defaults::SHORT_NAME>:
 801bff7:	20567641 	subscs	r7, r6, r1, asr #12
 801bffb:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801bfff:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801c003:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
 801c007:	34302500 	ldrtcc	r2, [r0], #-1280	; 0xfffffb00
 801c00b:	255b2078 	ldrbcs	r2, [fp, #-120]	; 0xffffff88
 801c00f:	5d643430 	cfstrdpl	mvd3, [r4, #-192]!	; 0xffffff40
 801c013:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801c017:	00567641 	subseq	r7, r6, r1, asr #12

0801c01b <artnet::NODE_ID>:
 801c01b:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801c01f:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801c023 <artnet::NODE_ID>:
 801c023:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801c027:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801c02b <artnet::NODE_ID>:
 801c02b:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801c02f:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801c033:	00505448 	subseq	r5, r0, r8, asr #8
 801c037:	0050544c 	subseq	r5, r0, ip, asr #8
 801c03b:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801c03f:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801c043:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 801c047:	646f4e00 	strbtvs	r4, [pc], #-3584	; 801c04f <artnet::NODE_ID+0x24>
 801c04b:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 801c04f:	75255b20 	strvc	r5, [r5, #-2848]!	; 0xfffff4e0
 801c053:	20000a5d 	andcs	r0, r0, sp, asr sl
 801c057:	6d726946 			; <UNDEFINED> instruction: 0x6d726946
 801c05b:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
 801c05f:	3a202020 	bcc	88240e7 <__exidx_end+0x80505b>
 801c063:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801c067:	000a6425 	andeq	r6, sl, r5, lsr #8
 801c06b:	6f685320 	svcvs	0x00685320
 801c06f:	6e207472 	mcrvs	4, 1, r7, cr0, cr2, {3}
 801c073:	20656d61 	rsbcs	r6, r5, r1, ror #26
 801c077:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801c07b:	4c20000a 	stcmi	0, cr0, [r0], #-40	; 0xffffffd8
 801c07f:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 801c083:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801c087:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801c08b:	000a7325 	andeq	r7, sl, r5, lsr #6
 801c08f:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 801c093:	0a747570 	beq	9d3965b <__exidx_end+0x1d1a5cf>
 801c097:	50202000 	eorpl	r2, r0, r0
 801c09b:	2074726f 	rsbscs	r7, r4, pc, ror #4
 801c09f:	20643225 	rsbcs	r3, r4, r5, lsr #4
 801c0a3:	20753425 	rsbscs	r3, r5, r5, lsr #8
 801c0a7:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 801c0ab:	257b2000 	ldrbcs	r2, [fp, #-0]!
 801c0af:	000a7d73 	andeq	r7, sl, r3, ror sp
 801c0b3:	706e4920 	rsbvc	r4, lr, r0, lsr #18
 801c0b7:	000a7475 	andeq	r7, sl, r5, ror r4
 801c0bb:	6f502020 	svcvs	0x00502020
 801c0bf:	25207472 	strcs	r7, [r0, #-1138]!	; 0xfffffb8e
 801c0c3:	25206432 	strcs	r6, [r0, #-1074]!	; 0xfffffbce
 801c0c7:	2d207534 	cfstr32cs	mvfx7, [r0, #-208]!	; 0xffffff30
 801c0cb:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 801c0cf:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801c0d3:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801c0d7:	68000a64 	stmdavs	r0, {r2, r5, r6, r9, fp}
 801c0db:	00646c6f 	rsbeq	r6, r4, pc, ror #24
 801c0df:	0066666f 	rsbeq	r6, r6, pc, ror #12
 801c0e3:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801c0e7:	6b636162 	blvs	98f4677 <__exidx_end+0x18d55eb>
 801c0eb:	63617300 	cmnvs	r1, #0, 6
 801c0ef:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 801c0f3:	00747570 	rsbseq	r7, r4, r0, ror r5
 801c0f7:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 801c0fb:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
 801c0ff:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
 801c103:	6c00656c 	cfstr32vs	mvfx6, [r0], {108}	; 0x6c
 801c107:	68007074 	stmdavs	r0, {r2, r4, r5, r6, ip, sp, lr}
 801c10b:	61007074 	tstvs	r0, r4, ror r0
 801c10f:	656e7472 	strbvs	r7, [lr, #-1138]!	; 0xfffffb8e
 801c113:	72410074 	subvc	r0, r1, #116	; 0x74
 801c117:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 801c11b:	00342074 	eorseq	r2, r4, r4, ror r0
	...

0801c120 <CSWTCH.95>:
 801c120:	0801c0da 	stmdaeq	r1, {r1, r3, r4, r6, r7, lr, pc}
 801c124:	0801c0df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, lr, pc}
 801c128:	0801b326 	stmdaeq	r1, {r1, r2, r5, r8, r9, ip, sp, pc}
 801c12c:	0801c0e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, lr, pc}

0801c130 <ArtNetParamsConst::ENABLE_RDM>:
 801c130:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801c134:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 801c138:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

0801c13b <ArtNetParamsConst::MAP_UNIVERSE0>:
 801c13b:	5f70616d 	svcpl	0x0070616d
 801c13f:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801c143:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801c147:	 	rsbsvc	r0, r0, #48	; 0x30

0801c149 <ArtNetParamsConst::PROTOCOL_PORT>:
 801c149:	746f7270 	strbtvc	r7, [pc], #-624	; 801c151 <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 801c14d:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801bf98 <ArtNetMsgConst::START+0x8>
 801c151:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801c155:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801c159:	746f7270 	strbtvc	r7, [pc], #-624	; 801c161 <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 801c15d:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801bfa8 <ArtNetMsgConst::PARAMS+0x7>
 801c161:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801c165:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801c169:	746f7270 	strbtvc	r7, [pc], #-624	; 801c171 <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 801c16d:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801bfb8 <ArtNetMsgConst::STARTED+0x3>
 801c171:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801c175:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801c179:	746f7270 	strbtvc	r7, [pc], #-624	; 801c181 <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 801c17d:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801bfc8 <ArtNetMsgConst::STARTED+0x13>
 801c181:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801c185:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801c189 <ArtNetParamsConst::NODE_LONG_NAME>:
 801c189:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 801c18d:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 801c191:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

0801c193 <ArtNetParamsConst::NODE_SHORT_NAME>:
 801c193:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 801c197:	616e5f74 	smcvs	58868	; 0xe5f4
 801c19b:	 	andvc	r6, r0, #457179136	; 0x1b400000

0801c19e <ArtNetParamsConst::RDM_ENABLE_PORT>:
 801c19e:	5f6d6472 	svcpl	0x006d6472
 801c1a2:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801c1a6:	705f656c 	subsvc	r6, pc, ip, ror #10
 801c1aa:	5f74726f 	svcpl	0x0074726f
 801c1ae:	64720061 	ldrbtvs	r0, [r2], #-97	; 0xffffff9f
 801c1b2:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 801c1b6:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801c1ba:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801c1be:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801c1c2:	5f6d6472 	svcpl	0x006d6472
 801c1c6:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801c1ca:	705f656c 	subsvc	r6, pc, ip, ror #10
 801c1ce:	5f74726f 	svcpl	0x0074726f
 801c1d2:	64720063 	ldrbtvs	r0, [r2], #-99	; 0xffffff9d
 801c1d6:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 801c1da:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801c1de:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801c1e2:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801c1e6 <ArtNetParamsConst::DESTINATION_IP_PORT>:
 801c1e6:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801c1ea:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801c1ee:	5f6e6f69 	svcpl	0x006e6f69
 801c1f2:	705f7069 	subsvc	r7, pc, r9, rrx
 801c1f6:	5f74726f 	svcpl	0x0074726f
 801c1fa:	00000061 	andeq	r0, r0, r1, rrx
 801c1fe:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801c202:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801c206:	5f6e6f69 	svcpl	0x006e6f69
 801c20a:	705f7069 	subsvc	r7, pc, r9, rrx
 801c20e:	5f74726f 	svcpl	0x0074726f
 801c212:	00000062 	andeq	r0, r0, r2, rrx
 801c216:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801c21a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801c21e:	5f6e6f69 	svcpl	0x006e6f69
 801c222:	705f7069 	subsvc	r7, pc, r9, rrx
 801c226:	5f74726f 	svcpl	0x0074726f
 801c22a:	00000063 	andeq	r0, r0, r3, rrx
 801c22e:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801c232:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801c236:	5f6e6f69 	svcpl	0x006e6f69
 801c23a:	705f7069 	subsvc	r7, pc, r9, rrx
 801c23e:	5f74726f 	svcpl	0x0074726f
 801c242:	00000064 	andeq	r0, r0, r4, rrx

0801c246 <ArtNetParamsConst::NET>:
 801c246:	0074656e 	rsbseq	r6, r4, lr, ror #10

0801c24a <ArtNetParamsConst::SUBNET>:
 801c24a:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 801c24e:	 	tstvs	r0, r5, ror #8

0801c251 <ArtNetParamsConst::FILE_NAME>:
 801c251:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 801c255:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 801c259:	 			; <UNDEFINED> instruction: 0xff007478

0801c25c <ArtNetConst::OEM_ID>:
 801c25c:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

0801c25e <ArtNetConst::ESTA_ID>:
 801c25e:	 	stmdacc	r1, {r4, r6}

0801c260 <ArtNetConst::VERSION>:
 801c260:	33323801 	teqcc	r2, #65536	; 0x10000
 801c264:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801c268:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 801c26c:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 801c270:	20733834 	rsbscs	r3, r3, r4, lsr r8
 801c274:	30007325 	andcc	r7, r0, r5, lsr #6
 801c278:	6f4e202e 	svcvs	0x004e202e
 801c27c:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 801c280:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 801c284:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 801c288:	202c6465 	eorcs	r6, ip, r5, ror #8
 801c28c:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 801c290:	6f687320 	svcvs	0x00687320
 801c294:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 801c298:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 801c29c:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 801c2a0:	000a216e 	andeq	r2, sl, lr, ror #2
 801c2a4:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 801c2a8:	000a6567 	andeq	r6, sl, r7, ror #10
 801c2ac:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 801c2b0:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 801c2b4:	203a2065 	eorscs	r2, sl, r5, rrx
 801c2b8:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801c2bc:	20000a64 	andcs	r0, r0, r4, ror #20
 801c2c0:	20444943 	subcs	r4, r4, r3, asr #18
 801c2c4:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c2c8:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c2cc:	20000a73 	andcs	r0, r0, r3, ror sl
 801c2d0:	726f5020 	rsbvc	r5, pc, #32
 801c2d4:	32252074 	eorcc	r2, r5, #116	; 0x74
 801c2d8:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 801c2dc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 801c2e0:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 801c2e4:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 801c2e8:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 801c2ec:	2020000a 	eorcs	r0, r0, sl
 801c2f0:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 801c2f4:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 801c2f8:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 801c2fc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801c300:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 801c304:	5b206433 	blpl	88353d8 <__exidx_end+0x81634c>
 801c308:	0a5d6425 	beq	97753a4 <__exidx_end+0x1756318>
 801c30c:	79532000 	ldmdbvc	r3, {sp}^
 801c310:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 801c314:	7a696e6f 	bvc	9a77cd8 <__exidx_end+0x1a58c4c>
 801c318:	73692065 	cmnvc	r9, #101	; 0x65
 801c31c:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801c320:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801c324:	44000a64 	strmi	r0, [r0], #-2660	; 0xfffff59c
 801c328:	4f20584d 	svcmi	0x0020584d
 801c32c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 801c330:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
 801c334:	6e492058 	mcrvs	0, 2, r2, cr9, cr8, {2}
 801c338:	00747570 	rsbseq	r7, r4, r0, ror r5

0801c33c <CSWTCH.56>:
 801c33c:	0801c0da 	stmdaeq	r1, {r1, r3, r4, r6, r7, lr, pc}
 801c340:	0801c0df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, lr, pc}
 801c344:	0801b326 	stmdaeq	r1, {r1, r2, r5, r8, r9, ip, sp, pc}
 801c348:	0801c0e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, lr, pc}

0801c34c <E131ParamsConst::PRIORITY>:
 801c34c:	6f697270 	svcvs	0x00697270
 801c350:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801c354:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801c358:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801c35c:	72700000 	rsbsvc	r0, r0, #0
 801c360:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801c364:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 801c368:	5f74726f 	svcpl	0x0074726f
 801c36c:	00000062 	andeq	r0, r0, r2, rrx
 801c370:	6f697270 	svcvs	0x00697270
 801c374:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801c378:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801c37c:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801c380:	72700000 	rsbsvc	r0, r0, #0
 801c384:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801c388:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 801c38c:	5f74726f 	svcpl	0x0074726f
 801c390:	00000064 	andeq	r0, r0, r4, rrx

0801c394 <E131ParamsConst::FILE_NAME>:
 801c394:	31333165 	teqcc	r3, r5, ror #2
 801c398:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
	...

0801c39d <E117Const::ACN_PACKET_IDENTIFIER>:
 801c39d:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 801c3a1:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 801c3a5:	00000037 	andeq	r0, r0, r7, lsr r0

0801c3a9 <E131BridgeConst::VERSION>:
 801c3a9:	33321901 	teqcc	r2, #16384	; 0x4000
 801c3ad:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801c3b1:	35322e35 	ldrcc	r2, [r2, #-3637]!	; 0xfffff1cb
 801c3b5:	33312e30 	teqcc	r1, #48, 28	; 0x300
 801c3b9:	33320033 	teqcc	r2, #51	; 0x33
 801c3bd:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801c3c1:	35322e35 	ldrcc	r2, [r2, #-3637]!	; 0xfffff1cb
 801c3c5:	33312e30 	teqcc	r1, #48, 28	; 0x300
 801c3c9:	4c4c0034 	mcrrmi	0, 3, r0, ip, cr4
 801c3cd:	44205052 	strtmi	r5, [r0], #-82	; 0xffffffae
 801c3d1:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 801c3d5:	6f632065 	svcvs	0x00632065
 801c3d9:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801c3dd:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 801c3e1:	0a6e6f69 	beq	9bb818d <__exidx_end+0x1b99101>
 801c3e5:	6f502000 	svcvs	0x00502000
 801c3e9:	55207472 	strpl	r7, [r0, #-1138]!	; 0xfffffb8e
 801c3ed:	20205044 	eorcs	r5, r0, r4, asr #32
 801c3f1:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c3f5:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c3f9:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c3fd:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c401:	20000a64 	andcs	r0, r0, r4, ror #20
 801c405:	746c754d 	strbtvc	r7, [ip], #-1357	; 0xfffffab3
 801c409:	73616369 	cmnvc	r1, #-1543503871	; 0xa4000001
 801c40d:	6f6a2074 	svcvs	0x006a2074
 801c411:	52206e69 	eorpl	r6, r0, #1680	; 0x690
 801c415:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 801c419:	3a207473 	bcc	88395ed <__exidx_end+0x81a561>
 801c41d:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801c421:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801c425:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801c429:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 801c42d:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
 801c431:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
 801c435:	73655220 	cmnvc	r5, #32, 4
 801c439:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
 801c43d:	20202065 	eorcs	r2, r0, r5, rrx
 801c441:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801c445:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801c449:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801c44d:	0a64252e 	beq	992590d <__exidx_end+0x1906881>
 801c451:	 	andeq	r0, r0, r0

0801c454 <vtable for LLRPDevice>:
	...
 801c45c:	0800fb9f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r8, r9, fp, ip, sp, lr, pc}
 801c460:	0800fba9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, fp, ip, sp, lr, pc}
 801c464:	0800fba1 	stmdaeq	r0, {r0, r5, r7, r8, r9, fp, ip, sp, lr, pc}
 801c468:	0800fba3 	stmdaeq	r0, {r0, r1, r5, r7, r8, r9, fp, ip, sp, lr, pc}
 801c46c:	0800fba5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, fp, ip, sp, lr, pc}

0801c470 <RDMNetConst::MSG_CONFIG>:
 801c470:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801c474:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801c478:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801c47c:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801c480:	 	andpl	r7, r0, #1694498816	; 0x65000000

0801c483 <RDMNetConst::MSG_STARTED>:
 801c483:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801c487:	73207465 			; <UNDEFINED> instruction: 0x73207465
 801c48b:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 801c48f:	 	movwpl	r6, #1125	; 0x465

0801c492 <RDMNetConst::MSG_START>:
 801c492:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 801c496:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 801c49a:	4d445220 	sfmmi	f5, 2, [r4, #-128]	; 0xffffff80
 801c49e:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801c4a2:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801c4a6:	000a7465 	andeq	r7, sl, r5, ror #8
 801c4aa:	44494320 	strbmi	r4, [r9], #-800	; 0xfffffce0
 801c4ae:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c4b2:	52000a73 	andpl	r0, r0, #471040	; 0x73000
 801c4b6:	52204d44 	eorpl	r4, r0, #68, 26	; 0x1100
 801c4ba:	6f707365 	svcvs	0x00707365
 801c4be:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
 801c4c2:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801c4c6:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 801c4ca:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801c4ce:	000a6e6f 	andeq	r6, sl, pc, ror #28
 801c4d2:	6f725020 	svcvs	0x00725020
 801c4d6:	6f636f74 	svcvs	0x00636f74
 801c4da:	6556206c 	ldrbvs	r2, [r6, #-108]	; 0xffffff94
 801c4de:	6f697372 	svcvs	0x00697372
 801c4e2:	6425206e 	strtvs	r2, [r5], #-110	; 0xffffff92
 801c4e6:	0a64252e 	beq	99259a6 <__exidx_end+0x190691a>
 801c4ea:	4d442000 	stclmi	0, cr2, [r4, #-0]
 801c4ee:	64412058 	strbvs	r2, [r1], #-88	; 0xffffffa8
 801c4f2:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 801c4f6:	20202073 	eorcs	r2, r0, r3, ror r0
 801c4fa:	3a202020 	bcc	8824582 <__exidx_end+0x8054f6>
 801c4fe:	0a642520 	beq	9925986 <__exidx_end+0x19068fa>
 801c502:	4d442000 	stclmi	0, cr2, [r4, #-0]
 801c506:	6f462058 	svcvs	0x00462058
 801c50a:	7270746f 	rsbsvc	r7, r0, #1862270976	; 0x6f000000
 801c50e:	20746e69 	rsbscs	r6, r4, r9, ror #28
 801c512:	3a202020 	bcc	882459a <__exidx_end+0x80550e>
 801c516:	0a642520 	beq	992599e <__exidx_end+0x1906912>
 801c51a:	65502000 	ldrbvs	r2, [r0, #-0]
 801c51e:	6e6f7372 	mcrvs	3, 3, r7, cr15, cr2, {3}
 801c522:	74696c61 	strbtvc	r6, [r9], #-3169	; 0xfffff39f
 801c526:	64252079 	strtvs	r2, [r5], #-121	; 0xffffff87
 801c52a:	20666f20 	rsbcs	r6, r6, r0, lsr #30
 801c52e:	5b206425 	blpl	88355ca <__exidx_end+0x81653e>
 801c532:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 801c536:	20000a5d 	andcs	r0, r0, sp, asr sl
 801c53a:	20627553 	rsbcs	r7, r2, r3, asr r5
 801c53e:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801c542:	20736563 	rsbscs	r6, r3, r3, ror #10
 801c546:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c54a:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c54e:	20000a64 	andcs	r0, r0, r4, ror #20
 801c552:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
 801c556:	2073726f 	rsbscs	r7, r3, pc, ror #4
 801c55a:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c55e:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c562:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c566:	00000a64 	andeq	r0, r0, r4, ror #20
	...

0801c56c <vtable for RDMDeviceResponder>:
	...
 801c574:	0801009d 	stmdaeq	r1, {r0, r2, r3, r4, r7}
 801c578:	080100bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7}
 801c57c:	08010097 	stmdaeq	r1, {r0, r1, r2, r4, r7}
 801c580:	08010099 	stmdaeq	r1, {r0, r3, r4, r7}

0801c584 <UID_ALL>:
 801c584:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 801c588:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

0801c58c <RDMHandler::PID_DEFINITIONS>:
 801c58c:	00000060 	andeq	r0, r0, r0, rrx
 801c590:	08010579 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, sl}
	...
 801c5a0:	01010000 	mrseq	r0, (UNDEF: 1)
 801c5a4:	00000080 	andeq	r0, r0, r0, lsl #1
 801c5a8:	08010661 	stmdaeq	r1, {r0, r5, r6, r9, sl}
	...
 801c5b8:	01010100 	mrseq	r0, (UNDEF: 17)
 801c5bc:	00000081 	andeq	r0, r0, r1, lsl #1
 801c5c0:	0801067d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r9, sl}
	...
 801c5d0:	01010100 	mrseq	r0, (UNDEF: 17)
 801c5d4:	00000082 	andeq	r0, r0, r2, lsl #1
 801c5d8:	0801069d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r9, sl}
 801c5dc:	00000000 	andeq	r0, r0, r0
 801c5e0:	080107ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, sl}
 801c5e4:	00000000 	andeq	r0, r0, r0
 801c5e8:	01010100 	mrseq	r0, (UNDEF: 17)
 801c5ec:	00000090 	muleq	r0, r0, r0
 801c5f0:	080105e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, sl}
 801c5f4:	00000000 	andeq	r0, r0, r0
 801c5f8:	080107b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, sl}
 801c5fc:	00000000 	andeq	r0, r0, r0
 801c600:	01010100 	mrseq	r0, (UNDEF: 17)
 801c604:	00001000 	andeq	r1, r0, r0
 801c608:	080106d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, sl}
 801c60c:	00000000 	andeq	r0, r0, r0
 801c610:	0801073d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, r9, sl}
 801c614:	00000000 	andeq	r0, r0, r0
 801c618:	01010000 	mrseq	r0, (UNDEF: 1)
 801c61c:	00001001 	andeq	r1, r0, r1
	...
 801c628:	080106f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, sl}
 801c62c:	00000000 	andeq	r0, r0, r0
 801c630:	01010100 	mrseq	r0, (UNDEF: 17)
 801c634:	00000700 	andeq	r0, r0, r0, lsl #14
 801c638:	08010ae5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r9, fp}
	...
 801c648:	01000000 	mrseq	r0, (UNDEF: 0)
 801c64c:	00000701 	andeq	r0, r0, r1, lsl #14
 801c650:	08010b0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, fp}
	...
 801c660:	01000004 	tsteq	r0, r4
 801c664:	00000702 	andeq	r0, r0, r2, lsl #14
 801c668:	08010b59 	stmdaeq	r1, {r0, r3, r4, r6, r8, r9, fp}
	...
 801c678:	01000004 	tsteq	r0, r4
 801c67c:	00000703 	andeq	r0, r0, r3, lsl #14
 801c680:	08010b89 	stmdaeq	r1, {r0, r3, r7, r8, r9, fp}
 801c684:	00000000 	andeq	r0, r0, r0
 801c688:	08010bb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, fp}
 801c68c:	00000000 	andeq	r0, r0, r0
 801c690:	01000004 	tsteq	r0, r4
 801c694:	00000704 	andeq	r0, r0, r4, lsl #14
 801c698:	08010c21 	stmdaeq	r1, {r0, r5, sl, fp}
 801c69c:	00000000 	andeq	r0, r0, r0
 801c6a0:	08010c51 	stmdaeq	r1, {r0, r4, r6, sl, fp}
 801c6a4:	00000000 	andeq	r0, r0, r0
 801c6a8:	01000004 	tsteq	r0, r4
 801c6ac:	00000705 	andeq	r0, r0, r5, lsl #14
 801c6b0:	08010cc5 	stmdaeq	r1, {r0, r2, r6, r7, sl, fp}
	...
 801c6c0:	01000004 	tsteq	r0, r4
 801c6c4:	00000707 	andeq	r0, r0, r7, lsl #14
	...
 801c6d0:	08010c99 	stmdaeq	r1, {r0, r3, r4, r7, sl, fp}
 801c6d4:	00000000 	andeq	r0, r0, r0
 801c6d8:	01000004 	tsteq	r0, r4
 801c6dc:	00000706 	andeq	r0, r0, r6, lsl #14
 801c6e0:	08010d0d 	stmdaeq	r1, {r0, r2, r3, r8, sl, fp}
 801c6e4:	00000000 	andeq	r0, r0, r0
 801c6e8:	08010d51 	stmdaeq	r1, {r0, r4, r6, r8, sl, fp}
 801c6ec:	00000000 	andeq	r0, r0, r0
 801c6f0:	01000004 	tsteq	r0, r4
 801c6f4:	00000709 	andeq	r0, r0, r9, lsl #14
	...
 801c700:	08010d9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, fp}
 801c704:	00000000 	andeq	r0, r0, r0
 801c708:	01000004 	tsteq	r0, r4
 801c70c:	0000070b 	andeq	r0, r0, fp, lsl #14
 801c710:	08010bfd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp}
	...
 801c720:	01000001 	tsteq	r0, r1
 801c724:	0000070a 	andeq	r0, r0, sl, lsl #14
 801c728:	08010dc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, sl, fp}
 801c72c:	00000000 	andeq	r0, r0, r0
 801c730:	08010dfd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, sl, fp}
 801c734:	00000000 	andeq	r0, r0, r0
 801c738:	01000004 	tsteq	r0, r4
 801c73c:	0000070c 	andeq	r0, r0, ip, lsl #14
 801c740:	08010e05 	stmdaeq	r1, {r0, r2, r9, sl, fp}
 801c744:	00000000 	andeq	r0, r0, r0
 801c748:	08010e35 	stmdaeq	r1, {r0, r2, r4, r5, r9, sl, fp}
 801c74c:	00000000 	andeq	r0, r0, r0
 801c750:	01000000 	mrseq	r0, (UNDEF: 0)
 801c754:	0000070d 	andeq	r0, r0, sp, lsl #14
 801c758:	08010e69 	stmdaeq	r1, {r0, r3, r5, r6, r9, sl, fp}
 801c75c:	00000000 	andeq	r0, r0, r0
 801c760:	08010e99 	stmdaeq	r1, {r0, r3, r4, r7, r9, sl, fp}
 801c764:	00000000 	andeq	r0, r0, r0
 801c768:	01000000 	mrseq	r0, (UNDEF: 0)
 801c76c:	204d4452 	subcs	r4, sp, r2, asr r4
 801c770:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801c774:	63206563 			; <UNDEFINED> instruction: 0x63206563
 801c778:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801c77c:	61727567 	cmnvs	r2, r7, ror #10
 801c780:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801c784:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 801c788:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 801c78c:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 801c790:	20726572 	rsbscs	r6, r2, r2, ror r5
 801c794:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 801c798:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c79c:	0a732a2e 	beq	9ce705c <__exidx_end+0x1cc7fd0>
 801c7a0:	614d2000 	mrsvs	r2, (UNDEF: 77)
 801c7a4:	6166756e 	cmnvs	r6, lr, ror #10
 801c7a8:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
 801c7ac:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 801c7b0:	20202044 	eorcs	r2, r0, r4, asr #32
 801c7b4:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801c7b8:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 801c7bc:	000a5832 	andeq	r5, sl, r2, lsr r8
 801c7c0:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 801c7c4:	206c6169 	rsbcs	r6, ip, r9, ror #2
 801c7c8:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
 801c7cc:	20207265 	eorcs	r7, r0, r5, ror #4
 801c7d0:	3a202020 	bcc	8824858 <__exidx_end+0x8057cc>
 801c7d4:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 801c7d8:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 801c7dc:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 801c7e0:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 801c7e4:	20000a58 	andcs	r0, r0, r8, asr sl
 801c7e8:	746f6f52 	strbtvc	r6, [pc], #-3922	; 801c7f0 <RDMHandler::PID_DEFINITIONS+0x264>
 801c7ec:	62616c20 	rsbvs	r6, r1, #32, 24	; 0x2000
 801c7f0:	20206c65 	eorcs	r6, r0, r5, ror #24
 801c7f4:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c7f8:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801c7fc:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 801c800:	5020000a 	eorpl	r0, r0, sl
 801c804:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 801c808:	43207463 			; <UNDEFINED> instruction: 0x43207463
 801c80c:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
 801c810:	2079726f 	rsbscs	r7, r9, pc, ror #4
 801c814:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c818:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 801c81c:	0a58322e 	beq	96290dc <__exidx_end+0x160a050>
 801c820:	72502000 	subsvc	r2, r0, #0
 801c824:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
 801c828:	65442074 	strbvs	r2, [r4, #-116]	; 0xffffff8c
 801c82c:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 801c830:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c834:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801c838:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 801c83c:	000a5832 	andeq	r5, sl, r2, lsr r8

0801c840 <DEVICE_LABEL>:
 801c840:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 801c844:	30353446 	eorscc	r3, r5, r6, asr #8
 801c848:	52204956 	eorpl	r4, r0, #1409024	; 0x158000
 801c84c:	44204d44 	strtmi	r4, [r0], #-3396	; 0xfffff2bc
 801c850:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 801c854:	 	subseq	r0, r0, r5, rrx

0801c856 <RDMConst::MANUFACTURER_ID>:
 801c856:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0801c858 <RDMConst::MANUFACTURER_NAME>:
 801c858:	70747468 	rsbsvc	r7, r4, r8, ror #8
 801c85c:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 801c860:	6f2e7777 	svcvs	0x002e7777
 801c864:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 801c868:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 801c86c:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 801c870:	0067726f 	rsbeq	r7, r7, pc, ror #4
 801c874:	78383025 	ldmdavc	r8!, {r0, r2, r5, ip, sp}
 801c878:	3430252d 	ldrtcc	r2, [r0], #-1325	; 0xfffffad3
 801c87c:	30252d78 	eorcc	r2, r5, r8, ror sp
 801c880:	252d7834 	strcs	r7, [sp, #-2100]!	; 0xfffff7cc
 801c884:	25783230 	ldrbcs	r3, [r8, #-560]!	; 0xfffffdd0
 801c888:	2d783230 	lfmcs	f3, 2, [r8, #-192]!	; 0xffffff40
 801c88c:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c890:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c894:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c898:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c89c:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c8a0:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801c8a4:	584d4400 	stmdapl	sp, {sl, lr}^
 801c8a8:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 801c8ac:	20000a64 	andcs	r0, r0, r4, ror #20
 801c8b0:	61657242 	cmnvs	r5, r2, asr #4
 801c8b4:	6974206b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, sp}^
 801c8b8:	2020656d 	eorcs	r6, r0, sp, ror #10
 801c8bc:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c8c0:	20000a75 	andcs	r0, r0, r5, ror sl
 801c8c4:	2042414d 	subcs	r4, r2, sp, asr #2
 801c8c8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 801c8cc:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c8d0:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c8d4:	20000a75 	andcs	r0, r0, r5, ror sl
 801c8d8:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
 801c8dc:	20687365 	rsbcs	r7, r8, r5, ror #6
 801c8e0:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
 801c8e4:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c8e8:	20000a75 	andcs	r0, r0, r5, ror sl
 801c8ec:	746f6c53 	strbtvc	r6, [pc], #-3155	; 801c8f4 <RDMConst::MANUFACTURER_NAME+0x9c>
 801c8f0:	20202073 	eorcs	r2, r0, r3, ror r0
 801c8f4:	20202020 	eorcs	r2, r0, r0, lsr #32
 801c8f8:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801c8fc:	00000a75 	andeq	r0, r0, r5, ror sl

0801c900 <vtable for DmxSend>:
	...
 801c908:	080110a1 	stmdaeq	r1, {r0, r5, r7, ip}
 801c90c:	0801118d 	stmdaeq	r1, {r0, r2, r3, r7, r8, ip}
 801c910:	080110a5 	stmdaeq	r1, {r0, r2, r5, r7, ip}
 801c914:	080110d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, ip}
 801c918:	0801110d 	stmdaeq	r1, {r0, r2, r3, r8, ip}
 801c91c:	0801111d 	stmdaeq	r1, {r0, r2, r3, r4, r8, ip}
 801c920:	08011129 	stmdaeq	r1, {r0, r3, r5, r8, ip}
 801c924:	08011135 	stmdaeq	r1, {r0, r2, r4, r5, r8, ip}
 801c928:	080178d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, fp, ip, sp, lr}
 801c92c:	080178c9 	stmdaeq	r1, {r0, r3, r6, r7, fp, ip, sp, lr}
 801c930:	080178cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, fp, ip, sp, lr}
 801c934:	080178d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, fp, ip, sp, lr}

0801c938 <DmxParamsConst::BREAK_TIME>:
 801c938:	61657262 	cmnvs	r5, r2, ror #4
 801c93c:	69745f6b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 801c940:	 	movwvc	r6, #1389	; 0x56d

0801c943 <DmxParamsConst::SLOTS_COUNT>:
 801c943:	746f6c73 	strbtvc	r6, [pc], #-3187	; 801c94b <DmxParamsConst::SLOTS_COUNT+0x8>
 801c947:	6f635f73 	svcvs	0x00635f73
 801c94b:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801c94f <DmxParamsConst::REFRESH_RATE>:
 801c94f:	72666572 	rsbvc	r6, r6, #478150656	; 0x1c800000
 801c953:	5f687365 	svcpl	0x00687365
 801c957:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
	...

0801c95c <DmxParamsConst::MAB_TIME>:
 801c95c:	5f62616d 	svcpl	0x0062616d
 801c960:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	...

0801c965 <DmxParamsConst::FILE_NAME>:
 801c965:	61726170 	cmnvs	r2, r0, ror r1
 801c969:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 801c96d:	 	andeq	r7, r0, r8, ror r4

0801c970 <s_DirGpio>:
 801c970:	40020c00 	andmi	r0, r2, r0, lsl #24
 801c974:	00000001 	andeq	r0, r0, r1
 801c978:	40020c00 	andmi	r0, r2, r0, lsl #24
 801c97c:	00000002 	andeq	r0, r0, r2

0801c980 <vtable for WS28xxDmxMulti>:
	...
 801c988:	08011c2d 	stmdaeq	r1, {r0, r2, r3, r5, sl, fp, ip}
 801c98c:	08011c4d 	stmdaeq	r1, {r0, r2, r3, r6, sl, fp, ip}
 801c990:	08011c0b 	stmdaeq	r1, {r0, r1, r3, sl, fp, ip}
 801c994:	08011dbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, sl, fp, ip}
 801c998:	08011c87 	stmdaeq	r1, {r0, r1, r2, r7, sl, fp, ip}
 801c99c:	08011c5f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, sl, fp, ip}
 801c9a0:	08011da1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, ip}
 801c9a4:	08011db9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, sl, fp, ip}
 801c9a8:	08011bfd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip}
 801c9ac:	08011c01 	stmdaeq	r1, {r0, sl, fp, ip}
 801c9b0:	08011c07 	stmdaeq	r1, {r0, r1, r2, sl, fp, ip}
 801c9b4:	080178d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, fp, ip, sp, lr}
 801c9b8:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801c9bc:	2a2e253a 	bcs	8ba5eac <__exidx_end+0xb86e20>
 801c9c0:	23002c66 	movwcs	r2, #3174	; 0xc66
 801c9c4:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 801c9c8:	0a662a2e 	beq	99a7288 <__exidx_end+0x19881fc>
 801c9cc:	65643c00 	strbvs	r3, [r4, #-3072]!	; 0xfffff400
 801c9d0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 801c9d4:	4f003e74 	svcmi	0x00003e74
 801c9d8:	77726576 			; <UNDEFINED> instruction: 0x77726576
 801c9dc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 801c9e0:	74616420 	strbtvc	r6, [r1], #-1056	; 0xfffffbe0
 801c9e4:	65687361 	strbvs	r7, [r8, #-865]!	; 0xfffffc9f
 801c9e8:	4f007465 	svcmi	0x00007465
 801c9ec:	77726576 			; <UNDEFINED> instruction: 0x77726576
 801c9f0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 801c9f4:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 801c9f8:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801c9fc:	29737528 	ldmdbcs	r3!, {r3, r5, r8, sl, ip, sp, lr}^
 801ca00:	6f724700 	svcvs	0x00724700
 801ca04:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
 801ca08:	6c430067 	mcrrvs	0, 6, r0, r3, cr7
 801ca0c:	206b636f 	rsbcs	r6, fp, pc, ror #6
 801ca10:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
 801ca14:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 801ca18:	00737069 	rsbseq	r7, r3, r9, rrx
 801ca1c:	31415041 	cmpcc	r1, r1, asr #32
 801ca20:	532f3230 			; <UNDEFINED> instruction: 0x532f3230
 801ca24:	3238394b 	eorscc	r3, r8, #1228800	; 0x12c000
 801ca28:	65540032 	ldrbvs	r0, [r4, #-50]	; 0xffffffce
 801ca2c:	70207473 	eorvc	r7, r0, r3, ror r4
 801ca30:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 801ca34:	50006e72 	andpl	r6, r0, r2, ror lr
 801ca38:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 801ca3c:	584d4420 	stmdapl	sp, {r5, sl, lr}^
 801ca40:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801ca44:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 801ca48:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801ca4c:	000a6e6f 	andeq	r6, sl, pc, ror #28
 801ca50:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 801ca54:	73747570 	cmnvc	r4, #112, 10	; 0x1c000000
 801ca58:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801ca5c:	20000a64 	andcs	r0, r0, r4, ror #20
 801ca60:	756f7247 	strbvc	r7, [pc, #-583]!	; 801c821 <RDMHandler::PID_DEFINITIONS+0x295>
 801ca64:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 801ca68:	756f6320 	strbvc	r6, [pc, #-800]!	; 801c750 <RDMHandler::PID_DEFINITIONS+0x1c4>
 801ca6c:	3a20746e 	bcc	8839c2c <__exidx_end+0x81aba0>
 801ca70:	20642520 	rsbcs	r2, r4, r0, lsr #10
 801ca74:	6f72475b 	svcvs	0x0072475b
 801ca78:	20737075 	rsbscs	r7, r3, r5, ror r0
 801ca7c:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801ca80:	59000a5d 	stmdbpl	r0, {r0, r2, r3, r4, r6, r9, fp}
 801ca84:	4e007365 	cdpmi	3, 0, cr7, cr0, cr5, {3}
 801ca88:	6950006f 	ldmdbvs	r0, {r0, r1, r2, r3, r5, r6}^
 801ca8c:	206c6578 	rsbcs	r6, ip, r8, ror r5
 801ca90:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801ca94:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801ca98:	6f697461 	svcvs	0x00697461
 801ca9c:	20000a6e 	andcs	r0, r0, lr, ror #20
 801caa0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 801caa4:	20202020 	eorcs	r2, r0, r0, lsr #32
 801caa8:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801caac:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 801cab0:	20000a5d 	andcs	r0, r0, sp, asr sl
 801cab4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 801cab8:	20202074 	eorcs	r2, r0, r4, ror r0
 801cabc:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801cac0:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 801cac4:	69707061 	ldmdbvs	r0!, {r0, r5, r6, ip, sp, lr}^
 801cac8:	3a20676e 	bcc	8836888 <__exidx_end+0x8177fc>
 801cacc:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801cad0:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 801cad4:	5420000a 	strtpl	r0, [r0], #-10
 801cad8:	20204830 	eorcs	r4, r0, r0, lsr r8
 801cadc:	3a202020 	bcc	8824b64 <__exidx_end+0x805ad8>
 801cae0:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 801cae4:	305b2066 	subscc	r2, fp, r6, rrx
 801cae8:	5d582578 	cfldr64pl	mvdx2, [r8, #-480]	; 0xfffffe20
 801caec:	5420000a 	strtpl	r0, [r0], #-10
 801caf0:	20204831 	eorcs	r4, r0, r1, lsr r8
 801caf4:	3a202020 	bcc	8824b7c <__exidx_end+0x805af0>
 801caf8:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 801cafc:	305b2066 	subscc	r2, fp, r6, rrx
 801cb00:	5d582578 	cfldr64pl	mvdx2, [r8, #-480]	; 0xfffffe20
 801cb04:	4720000a 	strmi	r0, [r0, -sl]!
 801cb08:	61626f6c 	cmnvs	r2, ip, ror #30
 801cb0c:	6972426c 	ldmdbvs	r2!, {r2, r3, r5, r6, r9, lr}^
 801cb10:	6e746867 	cdpvs	8, 7, cr6, cr4, cr7, {3}
 801cb14:	3a737365 	bcc	9cf98b0 <__exidx_end+0x1cda824>
 801cb18:	0a752520 	beq	9d65fa0 <__exidx_end+0x1d46f14>
 801cb1c:	61472000 	mrsvs	r2, (UNDEF: 71)
 801cb20:	20616d6d 	rsbcs	r6, r1, sp, ror #26
 801cb24:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
 801cb28:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801cb2c:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 801cb30:	20000a73 	andcs	r0, r0, r3, ror sl
 801cb34:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 801cb38:	25203a6b 	strcs	r3, [r0, #-2667]!	; 0xfffff595
 801cb3c:	7a482075 	bvc	9224d18 <__exidx_end+0x1205c8c>
 801cb40:	0000000a 	andeq	r0, r0, sl

0801cb44 <CSWTCH.9>:
 801cb44:	0801cd58 	stmdaeq	r1, {r3, r4, r6, r8, sl, fp, lr, pc}
 801cb48:	0801ce58 	stmdaeq	r1, {r3, r4, r6, r9, sl, fp, lr, pc}
 801cb4c:	0801cf58 	stmdaeq	r1, {r3, r4, r6, r8, r9, sl, fp, lr, pc}
 801cb50:	0801d058 	stmdaeq	r1, {r3, r4, r6, ip, lr, pc}
 801cb54:	0801d158 	stmdaeq	r1, {r3, r4, r6, r8, ip, lr, pc}

0801cb58 <gamma10_0>:
 801cb58:	03020100 	movweq	r0, #8448	; 0x2100
 801cb5c:	07060504 	streq	r0, [r6, -r4, lsl #10]
 801cb60:	0b0a0908 	bleq	829ef88 <__exidx_end+0x27fefc>
 801cb64:	0f0e0d0c 	svceq	0x000e0d0c
 801cb68:	13121110 	tstne	r2, #16, 2
 801cb6c:	17161514 			; <UNDEFINED> instruction: 0x17161514
 801cb70:	1b1a1918 	blne	86a2fd8 <__exidx_end+0x683f4c>
 801cb74:	1f1e1d1c 	svcne	0x001e1d1c
 801cb78:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801cb7c:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 801cb80:	2b2a2928 	blcs	8aa7028 <__exidx_end+0xa87f9c>
 801cb84:	2f2e2d2c 	svccs	0x002e2d2c
 801cb88:	33323130 	teqcc	r2, #48, 2
 801cb8c:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801cb90:	3b3a3938 	blcc	8eab078 <__exidx_end+0xe8bfec>
 801cb94:	3f3e3d3c 	svccc	0x003e3d3c
 801cb98:	43424140 	movtmi	r4, #8512	; 0x2140
 801cb9c:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801cba0:	4b4a4948 	blmi	92af0c8 <__exidx_end+0x129003c>
 801cba4:	4f4e4d4c 	svcmi	0x004e4d4c
 801cba8:	53525150 	cmppl	r2, #80, 2
 801cbac:	57565554 			; <UNDEFINED> instruction: 0x57565554
 801cbb0:	5b5a5958 	blpl	96b3118 <__exidx_end+0x169408c>
 801cbb4:	5f5e5d5c 	svcpl	0x005e5d5c
 801cbb8:	63626160 	cmnvs	r2, #96, 2
 801cbbc:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 801cbc0:	6b6a6968 	blvs	9ab7168 <__exidx_end+0x1a980dc>
 801cbc4:	6f6e6d6c 	svcvs	0x006e6d6c
 801cbc8:	73727170 	cmnvc	r2, #112, 2
 801cbcc:	77767574 			; <UNDEFINED> instruction: 0x77767574
 801cbd0:	7b7a7978 	blvc	9ebb1b8 <__exidx_end+0x1e9c12c>
 801cbd4:	7f7e7d7c 	svcvc	0x007e7d7c
 801cbd8:	83828180 	orrhi	r8, r2, #128, 2
 801cbdc:	87868584 	strhi	r8, [r6, r4, lsl #11]
 801cbe0:	8b8a8988 	blhi	62bf208 <__stack_size+0x62bb208>
 801cbe4:	8f8e8d8c 	svchi	0x008e8d8c
 801cbe8:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 801cbec:	97969594 			; <UNDEFINED> instruction: 0x97969594
 801cbf0:	9b9a9998 	blls	66c3258 <__stack_size+0x66bf258>
 801cbf4:	9f9e9d9c 	svcls	0x009e9d9c
 801cbf8:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 801cbfc:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 801cc00:	abaaa9a8 	blge	6ac72a8 <__stack_size+0x6ac32a8>
 801cc04:	afaeadac 	svcge	0x00aeadac
 801cc08:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 801cc0c:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 801cc10:	bbbab9b8 	bllt	6ecb2f8 <__stack_size+0x6ec72f8>
 801cc14:	bfbebdbc 	svclt	0x00bebdbc
 801cc18:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 801cc1c:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 801cc20:	cbcac9c8 	blgt	72cf348 <__stack_size+0x72cb348>
 801cc24:	cfcecdcc 	svcgt	0x00cecdcc
 801cc28:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 801cc2c:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 801cc30:	dbdad9d8 	blle	76d3398 <__stack_size+0x76cf398>
 801cc34:	dfdedddc 	svcle	0x00dedddc
 801cc38:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 801cc3c:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 801cc40:	ebeae9e8 	bl	7ad73e8 <__stack_size+0x7ad33e8>
 801cc44:	efeeedec 	svc	0x00eeedec
 801cc48:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 801cc4c:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 801cc50:	fbfaf9f8 	blx	7edb43a <__stack_size+0x7ed743a>
 801cc54:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

0801cc58 <gamma20_0>:
	...
 801cc64:	01010101 	tsteq	r1, r1, lsl #2
 801cc68:	01010101 	tsteq	r1, r1, lsl #2
 801cc6c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801cc70:	03030202 	movweq	r0, #12802	; 0x3202
 801cc74:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 801cc78:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 801cc7c:	06060505 	streq	r0, [r6], -r5, lsl #10
 801cc80:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801cc84:	09080808 	stmdbeq	r8, {r3, fp}
 801cc88:	0a0a0909 	beq	829f0b4 <__exidx_end+0x280028>
 801cc8c:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801cc90:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801cc94:	100f0f0e 	andne	r0, pc, lr, lsl #30
 801cc98:	12111110 	andsne	r1, r1, #16, 2
 801cc9c:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 801cca0:	16151514 			; <UNDEFINED> instruction: 0x16151514
 801cca4:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 801cca8:	1b1a1a19 	blne	86a3514 <__exidx_end+0x684488>
 801ccac:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 801ccb0:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 801ccb4:	23232221 			; <UNDEFINED> instruction: 0x23232221
 801ccb8:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 801ccbc:	2a292827 	bcs	8a66d60 <__exidx_end+0xa47cd4>
 801ccc0:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 801ccc4:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
 801ccc8:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 801cccc:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 801ccd0:	3b3a3938 	blcc	8eab1b8 <__exidx_end+0xe8c12c>
 801ccd4:	3f3e3d3c 	svccc	0x003e3d3c
 801ccd8:	43424140 	movtmi	r4, #8512	; 0x2140
 801ccdc:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801cce0:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 801cce4:	504f4e4d 	subpl	r4, pc, sp, asr #28
 801cce8:	55545251 	ldrbpl	r5, [r4, #-593]	; 0xfffffdaf
 801ccec:	59585756 	ldmdbpl	r8, {r1, r2, r4, r6, r8, r9, sl, ip, lr}^
 801ccf0:	5e5d5c5b 	mrcpl	12, 2, r5, cr13, cr11, {2}
 801ccf4:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 801ccf8:	68676664 	stmdavs	r7!, {r2, r5, r6, r9, sl, sp, lr}^
 801ccfc:	6d6c6b69 	fstmdbxvs	ip!, {d22-d73}	;@ Deprecated
 801cd00:	7371706f 	cmnvc	r1, #111	; 0x6f
 801cd04:	78777574 	ldmdavc	r7!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 801cd08:	7e7c7b79 	vmovvc.s8	r7, d12[7]
 801cd0c:	8382807f 	orrhi	r8, r2, #127	; 0x7f
 801cd10:	89888685 	stmibhi	r8, {r0, r2, r7, r9, sl, pc}
 801cd14:	8f8e8c8b 	svchi	0x008e8c8b
 801cd18:	95949291 	ldrls	r9, [r4, #657]	; 0x291
 801cd1c:	9b9a9897 	blls	66c2f80 <__stack_size+0x66bef80>
 801cd20:	a2a09e9d 	adcge	r9, r0, #2512	; 0x9d0
 801cd24:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 801cd28:	afadabaa 	svcge	0x00adabaa
 801cd2c:	b5b4b2b0 	ldrlt	fp, [r4, #688]!	; 0x2b0
 801cd30:	bcbab9b7 			; <UNDEFINED> instruction: 0xbcbab9b7
 801cd34:	c3c1c0be 	bicgt	ip, r1, #190	; 0xbe
 801cd38:	cac8c7c5 	bgt	724ec54 <__stack_size+0x724ac54>
 801cd3c:	d1cfcecc 	bicle	ip, pc, ip, asr #29
 801cd40:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 801cd44:	e0dedcda 	ldrsb	sp, [lr], #202	; 0xca
 801cd48:	e8e6e4e2 	stmia	r6!, {r1, r5, r6, r7, sl, sp, lr, pc}^
 801cd4c:	efedebe9 	svc	0x00edebe9
 801cd50:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 801cd54:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0801cd58 <gamma21_0>:
	...
 801cd64:	01010000 	mrseq	r0, (UNDEF: 1)
 801cd68:	01010101 	tsteq	r1, r1, lsl #2
 801cd6c:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 801cd70:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801cd74:	03030302 	movweq	r0, #13058	; 0x3302
 801cd78:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 801cd7c:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 801cd80:	06060505 	streq	r0, [r6], -r5, lsl #10
 801cd84:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801cd88:	09080808 	stmdbeq	r8, {r3, fp}
 801cd8c:	0a0a0909 	beq	829f1b8 <__exidx_end+0x28012c>
 801cd90:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801cd94:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801cd98:	0f0f0e0e 	svceq	0x000f0e0e
 801cd9c:	11111010 	tstne	r1, r0, lsl r0
 801cda0:	14131212 	ldrne	r1, [r3], #-530	; 0xfffffdee
 801cda4:	16151514 			; <UNDEFINED> instruction: 0x16151514
 801cda8:	18181716 	ldmdane	r8, {r1, r2, r4, r8, r9, sl, ip}
 801cdac:	1b1a1919 	blne	86a3218 <__exidx_end+0x68418c>
 801cdb0:	1d1d1c1b 	ldcne	12, cr1, [sp, #-108]	; 0xffffff94
 801cdb4:	201f1f1e 	andscs	r1, pc, lr, lsl pc	; <UNPREDICTABLE>
 801cdb8:	23222121 			; <UNDEFINED> instruction: 0x23222121
 801cdbc:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 801cdc0:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 801cdc4:	2c2c2b2a 			; <UNDEFINED> instruction: 0x2c2c2b2a
 801cdc8:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801cdcc:	33333231 	teqcc	r3, #268435459	; 0x10000003
 801cdd0:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801cdd4:	3b3a3938 	blcc	8eab2bc <__exidx_end+0xe8c230>
 801cdd8:	3f3e3d3c 	svccc	0x003e3d3c
 801cddc:	43424140 	movtmi	r4, #8512	; 0x2140
 801cde0:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801cde4:	4c4b4948 	mcrrmi	9, 4, r4, fp, cr8	; <UNPREDICTABLE>
 801cde8:	504f4e4d 	subpl	r4, pc, sp, asr #28
 801cdec:	55545351 	ldrbpl	r5, [r4, #-849]	; 0xfffffcaf
 801cdf0:	5a585756 	bpl	9632b50 <__exidx_end+0x1613ac4>
 801cdf4:	5f5d5c5b 	svcpl	0x005d5c5b
 801cdf8:	64626160 	strbtvs	r6, [r2], #-352	; 0xfffffea0
 801cdfc:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 801ce00:	6e6d6b6a 	vnmulvs.f64	d22, d13, d26
 801ce04:	74727170 	ldrbtvc	r7, [r2], #-368	; 0xfffffe90
 801ce08:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 801ce0c:	7f7e7c7b 	svcvc	0x007e7c7b
 801ce10:	85838281 	strhi	r8, [r3, #641]	; 0x281
 801ce14:	8b898886 	blhi	627f034 <__stack_size+0x627b034>
 801ce18:	91908e8d 	orrsls	r8, r0, sp, lsl #29
 801ce1c:	97969493 			; <UNDEFINED> instruction: 0x97969493
 801ce20:	9e9c9b99 	vmovls.32	r9, d28[0]
 801ce24:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 801ce28:	abaaa8a6 	blge	6ac70c8 <__stack_size+0x6ac30c8>
 801ce2c:	b2b0afad 	adcslt	sl, r0, #692	; 0x2b4
 801ce30:	b9b7b6b4 	ldmiblt	r7!, {r2, r4, r5, r7, r9, sl, ip, sp, pc}
 801ce34:	c0bfbdbb 	ldrhtgt	fp, [pc], fp
 801ce38:	c8c6c4c2 	stmiagt	r6, {r1, r6, r7, sl, lr, pc}^
 801ce3c:	cfcdcbca 	svcgt	0x00cdcbca
 801ce40:	d7d5d3d1 			; <UNDEFINED> instruction: 0xd7d5d3d1
 801ce44:	dfdddbd9 	svcle	0x00dddbd9
 801ce48:	e6e4e2e1 	strbt	lr, [r4], r1, ror #5
 801ce4c:	eeeceae8 	vfms.f32	s29, s25, s17
 801ce50:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 801ce54:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0801ce58 <gamma22_0>:
	...
 801ce64:	01000000 	mrseq	r0, (UNDEF: 0)
 801ce68:	01010101 	tsteq	r1, r1, lsl #2
 801ce6c:	01010101 	tsteq	r1, r1, lsl #2
 801ce70:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 801ce74:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801ce78:	03030303 	movweq	r0, #13059	; 0x3303
 801ce7c:	04040403 	streq	r0, [r4], #-1027	; 0xfffffbfd
 801ce80:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 801ce84:	06060605 	streq	r0, [r6], -r5, lsl #12
 801ce88:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801ce8c:	09080808 	stmdbeq	r8, {r3, fp}
 801ce90:	0a0a0909 	beq	829f2bc <__exidx_end+0x280230>
 801ce94:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801ce98:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 801ce9c:	0f0f0e0e 	svceq	0x000f0e0e
 801cea0:	11111010 	tstne	r1, r0, lsl r0
 801cea4:	13131212 	tstne	r3, #536870913	; 0x20000001
 801cea8:	16151414 			; <UNDEFINED> instruction: 0x16151414
 801ceac:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801ceb0:	1a1a1919 	bne	86a331c <__exidx_end+0x684290>
 801ceb4:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801ceb8:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801cebc:	23222121 			; <UNDEFINED> instruction: 0x23222121
 801cec0:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 801cec4:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 801cec8:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 801cecc:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801ced0:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 801ced4:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801ced8:	3b3a3938 	blcc	8eab3c0 <__exidx_end+0xe8c334>
 801cedc:	3f3e3d3c 	svccc	0x003e3d3c
 801cee0:	43424140 	movtmi	r4, #8512	; 0x2140
 801cee4:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801cee8:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 801ceec:	514f4e4d 	cmppl	pc, sp, asr #28
 801cef0:	55545352 	ldrbpl	r5, [r4, #-850]	; 0xfffffcae
 801cef4:	5a595857 	bpl	9673058 <__exidx_end+0x1653fcc>
 801cef8:	5f5e5d5b 	svcpl	0x005e5d5b
 801cefc:	64636261 	strbtvs	r6, [r3], #-609	; 0xfffffd9f
 801cf00:	6a696766 	bvs	9a76ca0 <__exidx_end+0x1a57c14>
 801cf04:	6f6e6d6b 	svcvs	0x006e6d6b
 801cf08:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 801cf0c:	7b797877 	blvc	9e7b0f0 <__exidx_end+0x1e5c064>
 801cf10:	817f7e7c 	cmnhi	pc, ip, ror lr	; <UNPREDICTABLE>
 801cf14:	87858482 	strhi	r8, [r5, r2, lsl #9]
 801cf18:	8d8c8a89 	vstrhi	s16, [ip, #548]	; 0x224
 801cf1c:	9492918f 	ldrls	r9, [r2], #399	; 0x18f
 801cf20:	9a999795 	bls	6682d7c <__stack_size+0x667ed7c>
 801cf24:	a19f9e9c 			; <UNDEFINED> instruction: 0xa19f9e9c
 801cf28:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 801cf2c:	afadacaa 	svcge	0x00adacaa
 801cf30:	b6b5b3b1 			; <UNDEFINED> instruction: 0xb6b5b3b1
 801cf34:	bebcbab8 			; <UNDEFINED> instruction: 0xbebcbab8
 801cf38:	c5c4c2c0 	strbgt	ip, [r4, #704]	; 0x2c0
 801cf3c:	cdcbc9c7 	vstrgt.16	s25, [fp, #398]	; 0x18e	; <UNPREDICTABLE>
 801cf40:	d5d3d1cf 	ldrble	sp, [r3, #463]	; 0x1cf
 801cf44:	dddbd9d7 	vldrle.16	s27, [fp, #430]	; 0x1ae	; <UNPREDICTABLE>
 801cf48:	e5e3e1df 	strb	lr, [r3, #479]!	; 0x1df
 801cf4c:	eeeceae7 	vfms.f32	s29, s25, s15
 801cf50:	f6f4f2f0 			; <UNDEFINED> instruction: 0xf6f4f2f0
 801cf54:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8

0801cf58 <gamma23_0>:
	...
 801cf68:	01010100 	mrseq	r0, (UNDEF: 17)
 801cf6c:	01010101 	tsteq	r1, r1, lsl #2
 801cf70:	01010101 	tsteq	r1, r1, lsl #2
 801cf74:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801cf78:	03020202 	movweq	r0, #8706	; 0x2202
 801cf7c:	03030303 	movweq	r0, #13059	; 0x3303
 801cf80:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 801cf84:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 801cf88:	06060605 	streq	r0, [r6], -r5, lsl #12
 801cf8c:	07070707 	streq	r0, [r7, -r7, lsl #14]
 801cf90:	09080808 	stmdbeq	r8, {r3, fp}
 801cf94:	0a0a0a09 	beq	829f7c0 <__exidx_end+0x280734>
 801cf98:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801cf9c:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 801cfa0:	0f0f0e0e 	svceq	0x000f0e0e
 801cfa4:	11111010 	tstne	r1, r0, lsl r0
 801cfa8:	13131212 	tstne	r3, #536870913	; 0x20000001
 801cfac:	15151414 	ldrne	r1, [r5, #-1044]	; 0xfffffbec
 801cfb0:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801cfb4:	1a1a1918 	bne	86a341c <__exidx_end+0x684390>
 801cfb8:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801cfbc:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801cfc0:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801cfc4:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 801cfc8:	29282726 	stmdbcs	r8!, {r1, r2, r5, r8, r9, sl, sp}
 801cfcc:	2c2b2a2a 			; <UNDEFINED> instruction: 0x2c2b2a2a
 801cfd0:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801cfd4:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 801cfd8:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801cfdc:	3b3a3938 	blcc	8eab4c4 <__exidx_end+0xe8c438>
 801cfe0:	3f3e3d3c 	svccc	0x003e3d3c
 801cfe4:	43424140 	movtmi	r4, #8512	; 0x2140
 801cfe8:	48474645 	stmdami	r7, {r0, r2, r6, r9, sl, lr}^
 801cfec:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 801cff0:	51504f4e 	cmppl	r0, lr, asr #30
 801cff4:	56555452 			; <UNDEFINED> instruction: 0x56555452
 801cff8:	5b5a5957 	blpl	96b355c <__exidx_end+0x16944d0>
 801cffc:	605f5e5c 	subsvs	r5, pc, ip, asr lr	; <UNPREDICTABLE>
 801d000:	66646362 	strbtvs	r6, [r4], -r2, ror #6
 801d004:	6b6a6867 	blvs	9ab71a8 <__exidx_end+0x1a9811c>
 801d008:	71706e6d 	cmnvc	r0, sp, ror #28
 801d00c:	77757472 			; <UNDEFINED> instruction: 0x77757472
 801d010:	7d7b7a78 	vldmdbvc	fp!, {s15-s134}
 801d014:	8382807e 	orrhi	r8, r2, #126	; 0x7e
 801d018:	8a888685 	bhi	623ea34 <__stack_size+0x623aa34>
 801d01c:	908f8d8b 	addls	r8, pc, fp, lsl #27
 801d020:	97959492 			; <UNDEFINED> instruction: 0x97959492
 801d024:	9e9c9a99 			; <UNDEFINED> instruction: 0x9e9c9a99
 801d028:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 801d02c:	acaaa9a7 			; <UNDEFINED> instruction: 0xacaaa9a7
 801d030:	b4b2b0ae 	ldrtlt	fp, [r2], #174	; 0xae
 801d034:	bbb9b7b6 	bllt	6e8af14 <__stack_size+0x6e86f14>
 801d038:	c3c1bfbd 	bicgt	fp, r1, #756	; 0x2f4
 801d03c:	cbc9c7c5 	blgt	728ef58 <__stack_size+0x728af58>
 801d040:	d3d1cfcd 	bicsle	ip, r1, #820	; 0x334
 801d044:	dcdad7d5 	ldclle	7, cr13, [sl], {213}	; 0xd5
 801d048:	e4e2e0de 	strbt	lr, [r2], #222	; 0xde
 801d04c:	edebe9e6 			; <UNDEFINED> instruction: 0xedebe9e6
 801d050:	f6f4f1ef 			; <UNDEFINED> instruction: 0xf6f4f1ef
 801d054:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801d058 <gamma24_0>:
	...
 801d068:	01000000 	mrseq	r0, (UNDEF: 0)
 801d06c:	01010101 	tsteq	r1, r1, lsl #2
 801d070:	01010101 	tsteq	r1, r1, lsl #2
 801d074:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 801d078:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801d07c:	03030202 	movweq	r0, #12802	; 0x3202
 801d080:	04030303 	streq	r0, [r3], #-771	; 0xfffffcfd
 801d084:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 801d088:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
 801d08c:	06060606 	streq	r0, [r6], -r6, lsl #12
 801d090:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 801d094:	09090808 	stmdbeq	r9, {r3, fp}
 801d098:	0a0a0a09 	beq	829f8c4 <__exidx_end+0x280838>
 801d09c:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801d0a0:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801d0a4:	0f0f0e0e 	svceq	0x000f0e0e
 801d0a8:	11111010 	tstne	r1, r0, lsl r0
 801d0ac:	13131212 	tstne	r3, #536870913	; 0x20000001
 801d0b0:	16151414 			; <UNDEFINED> instruction: 0x16151414
 801d0b4:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801d0b8:	1a1a1918 	bne	86a3520 <__exidx_end+0x684494>
 801d0bc:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801d0c0:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801d0c4:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801d0c8:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 801d0cc:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 801d0d0:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 801d0d4:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801d0d8:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 801d0dc:	37363535 			; <UNDEFINED> instruction: 0x37363535
 801d0e0:	3b3a3938 	blcc	8eab5c8 <__exidx_end+0xe8c53c>
 801d0e4:	403f3e3c 	eorsmi	r3, pc, ip, lsr lr	; <UNPREDICTABLE>
 801d0e8:	44434241 	strbmi	r4, [r3], #-577	; 0xfffffdbf
 801d0ec:	49474645 	stmdbmi	r7, {r0, r2, r6, r9, sl, lr}^
 801d0f0:	4d4c4b4a 	vstrmi	d20, [ip, #-296]	; 0xfffffed8
 801d0f4:	5251504e 	subspl	r5, r1, #78	; 0x4e
 801d0f8:	57565553 			; <UNDEFINED> instruction: 0x57565553
 801d0fc:	5c5b5a58 	mrrcpl	10, 5, r5, fp, cr8
 801d100:	62605f5e 	rsbvs	r5, r0, #376	; 0x178
 801d104:	67666463 	strbvs	r6, [r6, -r3, ror #8]!
 801d108:	6d6c6a69 	vstmdbvs	ip!, {s13-s117}
 801d10c:	7372706f 	cmnvc	r2, #111	; 0x6f
 801d110:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 801d114:	7f7e7c7b 	svcvc	0x007e7c7b
 801d118:	86848381 	strhi	r8, [r4], r1, lsl #7
 801d11c:	8d8b8988 	vstrhi.16	s16, [fp, #272]	; 0x110	; <UNPREDICTABLE>
 801d120:	9492908e 	ldrls	r9, [r2], #142	; 0x8e
 801d124:	9b999795 	blls	6682f80 <__stack_size+0x667ef80>
 801d128:	a2a09e9c 	adcge	r9, r0, #156, 28	; 0x9c0
 801d12c:	a9a7a6a4 	stmibge	r7!, {r2, r5, r7, r9, sl, sp, pc}
 801d130:	b1afadab 			; <UNDEFINED> instruction: 0xb1afadab
 801d134:	b9b7b5b3 	ldmiblt	r7!, {r0, r1, r4, r5, r7, r8, sl, ip, sp, pc}
 801d138:	c1bfbdbb 			; <UNDEFINED> instruction: 0xc1bfbdbb
 801d13c:	c9c7c5c3 	stmibgt	r7, {r0, r1, r6, r7, r8, sl, lr, pc}^
 801d140:	d2cfcdcb 	sbcle	ip, pc, #12992	; 0x32c0
 801d144:	dad8d6d4 	ble	7652c9c <__stack_size+0x764ec9c>
 801d148:	e3e1dfdc 	mvn	sp, #220, 30	; 0x370
 801d14c:	eceae8e5 	stcl	8, cr14, [sl], #916	; 0x394
 801d150:	f6f3f1ef 			; <UNDEFINED> instruction: 0xf6f3f1ef
 801d154:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801d158 <gamma25_0>:
	...
 801d16c:	01010000 	mrseq	r0, (UNDEF: 1)
 801d170:	01010101 	tsteq	r1, r1, lsl #2
 801d174:	01010101 	tsteq	r1, r1, lsl #2
 801d178:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 801d17c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801d180:	03030302 	movweq	r0, #13058	; 0x3302
 801d184:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 801d188:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
 801d18c:	06050505 	streq	r0, [r5], -r5, lsl #10
 801d190:	07060606 	streq	r0, [r6, -r6, lsl #12]
 801d194:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 801d198:	09090808 	stmdbeq	r9, {r3, fp}
 801d19c:	0a0a0a09 	beq	829f9c8 <__exidx_end+0x28093c>
 801d1a0:	0c0c0b0b 			; <UNDEFINED> instruction: 0x0c0c0b0b
 801d1a4:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801d1a8:	0f0f0f0e 	svceq	0x000f0f0e
 801d1ac:	11111010 	tstne	r1, r0, lsl r0
 801d1b0:	13131212 	tstne	r3, #536870913	; 0x20000001
 801d1b4:	16151414 			; <UNDEFINED> instruction: 0x16151414
 801d1b8:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801d1bc:	1a1a1919 	bne	86a3628 <__exidx_end+0x68459c>
 801d1c0:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801d1c4:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801d1c8:	23222121 			; <UNDEFINED> instruction: 0x23222121
 801d1cc:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 801d1d0:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 801d1d4:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 801d1d8:	302f2e2e 	eorcc	r2, pc, lr, lsr #28
 801d1dc:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 801d1e0:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 801d1e4:	3c3b3a39 			; <UNDEFINED> instruction: 0x3c3b3a39
 801d1e8:	403f3e3d 	eorsmi	r3, pc, sp, lsr lr	; <UNPREDICTABLE>
 801d1ec:	45444341 	strbmi	r4, [r4, #-833]	; 0xfffffcbf
 801d1f0:	49484746 	stmdbmi	r8, {r1, r2, r6, r8, r9, sl, lr}^
 801d1f4:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
 801d1f8:	53525150 	cmppl	r2, #80, 2
 801d1fc:	59575655 	ldmdbpl	r7, {r0, r2, r4, r6, r9, sl, ip, lr}^
 801d200:	5e5d5b5a 	vmovpl.s8	r5, d13[2]
 801d204:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 801d208:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 801d20c:	6f6e6c6b 	svcvs	0x006e6c6b
 801d210:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 801d214:	7c7a7977 			; <UNDEFINED> instruction: 0x7c7a7977
 801d218:	82817f7d 	addhi	r7, r1, #500	; 0x1f4
 801d21c:	89878684 	stmibhi	r7, {r2, r7, r9, sl, pc}
 801d220:	908e8d8b 	addls	r8, lr, fp, lsl #27
 801d224:	97969492 			; <UNDEFINED> instruction: 0x97969492
 801d228:	9f9d9b99 	svcls	0x009d9b99
 801d22c:	a6a5a3a1 	strtge	sl, [r5], r1, lsr #7
 801d230:	aeacaaa8 	vfmage.f32	s20, s25, s17
 801d234:	b6b4b2b0 			; <UNDEFINED> instruction: 0xb6b4b2b0
 801d238:	bfbdbab8 	svclt	0x00bdbab8
 801d23c:	c7c5c3c1 	strbgt	ip, [r5, r1, asr #7]
 801d240:	d0ceccc9 	sbcle	ip, lr, r9, asr #25
 801d244:	d9d7d4d2 	ldmible	r7, {r1, r4, r6, r7, sl, ip, lr, pc}^
 801d248:	e2e0dddb 	rsc	sp, r0, #14016	; 0x36c0
 801d24c:	ebe9e7e4 	bl	7a971e4 <__stack_size+0x7a931e4>
 801d250:	f5f3f0ee 			; <UNDEFINED> instruction: 0xf5f3f0ee
 801d254:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801d258 <gamma25_5>:
 801d258:	01010100 	mrseq	r0, (UNDEF: 17)
 801d25c:	01010101 	tsteq	r1, r1, lsl #2
 801d260:	01010101 	tsteq	r1, r1, lsl #2
 801d264:	01010101 	tsteq	r1, r1, lsl #2
 801d268:	01010101 	tsteq	r1, r1, lsl #2
 801d26c:	01010101 	tsteq	r1, r1, lsl #2
 801d270:	01010101 	tsteq	r1, r1, lsl #2
 801d274:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801d278:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801d27c:	03030302 	movweq	r0, #13058	; 0x3302
 801d280:	03030303 	movweq	r0, #13059	; 0x3303
 801d284:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 801d288:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 801d28c:	06060605 	streq	r0, [r6], -r5, lsl #12
 801d290:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801d294:	08080807 	stmdaeq	r8, {r0, r1, r2, fp}
 801d298:	0a090909 	beq	825f6c4 <__exidx_end+0x240638>
 801d29c:	0b0b0a0a 	bleq	82dfacc <__exidx_end+0x2c0a40>
 801d2a0:	0c0c0c0b 	stceq	12, cr0, [ip], {11}
 801d2a4:	0e0e0d0d 	cdpeq	13, 0, cr0, cr14, cr13, {0}
 801d2a8:	100f0f0f 	andne	r0, pc, pc, lsl #30
 801d2ac:	12111110 	andsne	r1, r1, #16, 2
 801d2b0:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 801d2b4:	16161514 			; <UNDEFINED> instruction: 0x16161514
 801d2b8:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 801d2bc:	1b1a1a19 	blne	86a3b28 <__exidx_end+0x684a9c>
 801d2c0:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 801d2c4:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 801d2c8:	23232221 			; <UNDEFINED> instruction: 0x23232221
 801d2cc:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 801d2d0:	2a292827 	bcs	8a67374 <__exidx_end+0xa482e8>
 801d2d4:	2d2c2b2b 	fstmdbxcs	ip!, {d2-d22}	;@ Deprecated
 801d2d8:	31302f2e 	teqcc	r0, lr, lsr #30
 801d2dc:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 801d2e0:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 801d2e4:	3d3c3a39 	vldmdbcc	ip!, {s6-s62}
 801d2e8:	41403f3e 	cmpmi	r0, lr, lsr pc
 801d2ec:	45444342 	strbmi	r4, [r4, #-834]	; 0xfffffcbe
 801d2f0:	4a494846 	bmi	926f410 <__exidx_end+0x1250384>
 801d2f4:	4f4e4c4b 	svcmi	0x004e4c4b
 801d2f8:	54535150 	ldrbpl	r5, [r3], #-336	; 0xfffffeb0
 801d2fc:	59585655 	ldmdbpl	r8, {r0, r2, r4, r6, r9, sl, ip, lr}^
 801d300:	5e5d5c5a 	mrcpl	12, 2, r5, cr13, cr10, {2}
 801d304:	64636160 	strbtvs	r6, [r3], #-352	; 0xfffffea0
 801d308:	6a686765 	bvs	9a370a4 <__exidx_end+0x1a18018>
 801d30c:	706e6d6b 	rsbvc	r6, lr, fp, ror #26
 801d310:	76747371 			; <UNDEFINED> instruction: 0x76747371
 801d314:	7c7b7978 			; <UNDEFINED> instruction: 0x7c7b7978
 801d318:	8381807e 	orrhi	r8, r1, #126	; 0x7e
 801d31c:	8a888685 	bhi	623ed38 <__stack_size+0x623ad38>
 801d320:	918f8d8b 	orrls	r8, pc, fp, lsl #27
 801d324:	98969492 	ldmls	r6, {r1, r4, r7, sl, ip, pc}
 801d328:	9f9d9c9a 	svcls	0x009d9c9a
 801d32c:	a7a5a3a1 	strge	sl, [r5, r1, lsr #7]!
 801d330:	afadaba9 	svcge	0x00adaba9
 801d334:	b7b5b3b1 			; <UNDEFINED> instruction: 0xb7b5b3b1
 801d338:	bfbdbbb9 	svclt	0x00bdbbb9
 801d33c:	c8c6c3c1 	stmiagt	r6, {r0, r6, r7, r8, r9, lr, pc}^
 801d340:	d0ceccca 	sbcle	ip, lr, sl, asr #25
 801d344:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 801d348:	e3e0dedc 	mvn	sp, #220, 28	; 0xdc0
 801d34c:	eceae7e5 	stcl	7, cr14, [sl], #916	; 0x394
 801d350:	f6f3f1ee 			; <UNDEFINED> instruction: 0xf6f3f1ee
 801d354:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8
 801d358:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 801d35c:	006e776f 	rsbeq	r7, lr, pc, ror #14
 801d360:	65646e55 	strbvs	r6, [r4, #-3669]!	; 0xfffff1ab
 801d364:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 801d368:	 	andeq	r0, r0, #100	; 0x64

0801d36a <CSWTCH.18>:
 801d36a:	02020200 	andeq	r0, r2, #0, 4
 801d36e:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 801d372:	 	ldrbmi	r0, [r2, -r0, lsl #10]

0801d374 <PixelType::MAPS>:
 801d374:	00424752 	subeq	r4, r2, r2, asr r7
 801d378:	00474252 	subeq	r4, r7, r2, asr r2
 801d37c:	00425247 	subeq	r5, r2, r7, asr #4
 801d380:	00524247 	subseq	r4, r2, r7, asr #4
 801d384:	00475242 	subeq	r5, r7, r2, asr #4
 801d388:	00524742 	subseq	r4, r2, r2, asr #14

0801d38c <PixelType::TYPES>:
 801d38c:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801d390:	00003130 	andeq	r3, r0, r0, lsr r1
 801d394:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801d398:	00003131 	andeq	r3, r0, r1, lsr r1
 801d39c:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801d3a0:	00003231 	andeq	r3, r0, r1, lsr r2
 801d3a4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801d3a8:	00423231 	subeq	r3, r2, r1, lsr r2
 801d3ac:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801d3b0:	00003331 	andeq	r3, r0, r1, lsr r3
 801d3b4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801d3b8:	00003531 	andeq	r3, r0, r1, lsr r5
 801d3bc:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801d3c0:	00003231 	andeq	r3, r0, r1, lsr r2
 801d3c4:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801d3c8:	00573231 	subseq	r3, r7, r1, lsr r2
 801d3cc:	31534355 	cmpcc	r3, r5, asr r3
 801d3d0:	00333039 	eorseq	r3, r3, r9, lsr r0
 801d3d4:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 801d3d8:	00333039 	eorseq	r3, r3, r9, lsr r0
 801d3dc:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 801d3e0:	00003231 	andeq	r3, r0, r1, lsr r2
 801d3e4:	31415041 	cmpcc	r1, r1, asr #32
 801d3e8:	00003230 	andeq	r3, r0, r0, lsr r2
 801d3ec:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801d3f0:	00003232 	andeq	r3, r0, r2, lsr r2
 801d3f4:	31383950 	teqcc	r8, r0, asr r9
 801d3f8:	00000033 	andeq	r0, r0, r3, lsr r0

0801d3fc <s_patternName>:
 801d3fc:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 801d408:	61520000 	cmpvs	r2, r0
 801d40c:	6f626e69 	svcvs	0x00626e69
 801d410:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 801d414:	00656c63 	rsbeq	r6, r5, r3, ror #24
 801d418:	61656854 	cmnvs	r5, r4, asr r8
 801d41c:	20726574 	rsbscs	r6, r2, r4, ror r5
 801d420:	73616863 	cmnvc	r1, #6488064	; 0x630000
 801d424:	6f430065 	svcvs	0x00430065
 801d428:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 801d42c:	70697720 	rsbvc	r7, r9, r0, lsr #14
 801d430:	00000065 	andeq	r0, r0, r5, rrx
 801d434:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 801d438:	0072656e 	rsbseq	r6, r2, lr, ror #10
 801d43c:	00000000 	andeq	r0, r0, r0
 801d440:	61460000 	mrsvs	r0, (UNDEF: 70)
 801d444:	00006564 	andeq	r6, r0, r4, ror #10
	...

0801d450 <pixel::s_GPIO_PINs>:
 801d450:	6374ffff 	cmnvs	r4, #1020	; 0x3fc	; <UNPREDICTABLE>
 801d454:	65625f70 	strbvs	r5, [r2, #-3952]!	; 0xfffff090
 801d458:	3a6e6967 	bcc	9bb79fc <__exidx_end+0x1b98970>
 801d45c:	6f6f7420 	svcvs	0x006f7420
 801d460:	6e616d20 	cdpvs	13, 6, cr6, cr1, cr0, {1}
 801d464:	6f632079 	svcvs	0x00632079
 801d468:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 801d46c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801d470:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
 801d474:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 801d478:	6e69626e 	cdpvs	2, 6, cr6, cr9, cr14, {3}
 801d47c:	41000a64 	tstmi	r0, r4, ror #20
 801d480:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 801d484:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 801d488:	61662070 	smcvs	25088	; 0x6200
 801d48c:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 801d490:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 801d494:	61666564 	cmnvs	r6, r4, ror #10
 801d498:	20746c75 	rsbscs	r6, r4, r5, ror ip
 801d49c:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 801d4a0:	0a796177 	beq	9e75a84 <__exidx_end+0x1e569f8>
 801d4a4:	50524100 	subspl	r4, r2, r0, lsl #2
 801d4a8:	6f6f6c20 	svcvs	0x006f6c20
 801d4ac:	2070756b 	rsbscs	r7, r0, fp, ror #10
 801d4b0:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 801d4b4:	000a6465 	andeq	r6, sl, r5, ror #8

0801d4b8 <NetworkConst::MSG_MDNS_CONFIG>:
 801d4b8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801d4bc:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801d4c0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801d4c4:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

0801d4c9 <NetworkConst::MSG_NETWORK_INIT>:
 801d4c9:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 801d4cd:	206b726f 	rsbcs	r7, fp, pc, ror #4
 801d4d1:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 801d4d5:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 801d4d9:	302e302e 	eorcc	r3, lr, lr, lsr #32
 801d4dd:	3135322e 	teqcc	r5, lr, lsr #4
 801d4e1:	63745f00 	cmnvs	r4, #0, 30
 801d4e5:	6f6c2e70 	svcvs	0x006c2e70
 801d4e9:	006c6163 	rsbeq	r6, ip, r3, ror #2
 801d4ed:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 801d4f1:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 801d4f5:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 801d4fd <NetworkConst::MSG_NETWORK_INIT+0x34>
 801d4f9:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 801d4fd:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 801c6a1 <RDMHandler::PID_DEFINITIONS+0x115>
 801d501:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 801d505:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 801d509:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 801d50d:	20000a53 	andcs	r0, r0, r3, asr sl
 801d511:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801d515:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 801d519:	0a676e69 	beq	99f8ec5 <__exidx_end+0x19d9e39>
 801d51d:	614e2000 	mrsvs	r2, (UNDEF: 78)
 801d521:	3a20656d 	bcc	8836add <__exidx_end+0x817a51>
 801d525:	0a732520 	beq	9ce69ad <__exidx_end+0x1cc7921>
 801d529:	73252000 			; <UNDEFINED> instruction: 0x73252000
 801d52d:	20642520 	rsbcs	r2, r4, r0, lsr #10
 801d531:	000a7325 	andeq	r7, sl, r5, lsr #6
 801d535:	30687465 	rsbcc	r7, r8, r5, ror #8
 801d539:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 801d53d:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 801d541:	5f656369 	svcpl	0x00656369
 801d545:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 801d549:	6b726f77 	blvs	9cb932d <__exidx_end+0x1c9a2a1>
 801d54d:	4820000a 	stmdami	r0!, {r1, r3}
 801d551:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 801d555:	20656d61 	rsbcs	r6, r5, r1, ror #26
 801d559:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801d55d:	20000a73 	andcs	r0, r0, r3, ror sl
 801d561:	614e6649 	cmpvs	lr, r9, asr #12
 801d565:	2020656d 	eorcs	r6, r0, sp, ror #10
 801d569:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801d56d:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801d571:	000a7325 	andeq	r7, sl, r5, lsr #6
 801d575:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 801d579:	20202074 	eorcs	r2, r0, r4, ror r0
 801d57d:	3a202020 	bcc	8825605 <__exidx_end+0x806579>
 801d581:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801d585:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d589:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d58d:	0a64252f 	beq	9926a51 <__exidx_end+0x19079c5>
 801d591:	654e2000 	strbvs	r2, [lr, #-0]
 801d595:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 801d599:	2020206b 	eorcs	r2, r0, fp, rrx
 801d59d:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801d5a1:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d5a5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d5a9:	20000a64 	andcs	r0, r0, r4, ror #20
 801d5ad:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 801d5b1:	20796177 	rsbscs	r6, r9, r7, ror r1
 801d5b5:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801d5b9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d5bd:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d5c1:	0a64252e 	beq	9926a81 <__exidx_end+0x19079f5>
 801d5c5:	72422000 	subvc	r2, r2, #0
 801d5c9:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 801d5cd:	20747361 	rsbscs	r7, r4, r1, ror #6
 801d5d1:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801d5d5:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d5d9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d5dd:	20000a64 	andcs	r0, r0, r4, ror #20
 801d5e1:	2063614d 	rsbcs	r6, r3, sp, asr #2
 801d5e5:	20202020 	eorcs	r2, r0, r0, lsr #32
 801d5e9:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801d5ed:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801d5f1:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 801d5f5:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 801d5f9:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 801d5fd:	3a78322e 	bcc	9e29ebd <__exidx_end+0x1e0ae31>
 801d601:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801d605:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 801d609:	20000a78 	andcs	r0, r0, r8, ror sl
 801d60d:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 801d611:	20202020 	eorcs	r2, r0, r0, lsr #32
 801d615:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801d619:	000a6325 	andeq	r6, sl, r5, lsr #6
 801d61d:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 801d621:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 801d625:	 	rsbvc	r0, r9, r0, asr r0

0801d627 <NetworkParamsConst::IP_ADDRESS>:
 801d627:	615f7069 	cmpvs	pc, r9, rrx
 801d62b:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 801d62f:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

0801d632 <NetworkParamsConst::DEFAULT_GATEWAY>:
 801d632:	61666564 	cmnvs	r6, r4, ror #10
 801d636:	5f746c75 	svcpl	0x00746c75
 801d63a:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 801d63e:	00796177 	rsbseq	r6, r9, r7, ror r1

0801d642 <NetworkParamsConst::DHCP_RETRY_TIME>:
 801d642:	70636864 	rsbvc	r6, r3, r4, ror #16
 801d646:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 801d64a:	745f7972 	ldrbvc	r7, [pc], #-2418	; 801d652 <NetworkParamsConst::HOSTNAME>
 801d64e:	00656d69 	rsbeq	r6, r5, r9, ror #26

0801d652 <NetworkParamsConst::HOSTNAME>:
 801d652:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 801d656:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

0801d65b <NetworkParamsConst::NET_MASK>:
 801d65b:	5f74656e 	svcpl	0x0074656e
 801d65f:	6b73616d 	blvs	9cf5c1b <__exidx_end+0x1cd6b8f>
	...

0801d664 <NetworkParamsConst::USE_DHCP>:
 801d664:	5f657375 	svcpl	0x00657375
 801d668:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

0801d66d <NetworkParamsConst::FILE_NAME>:
 801d66d:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 801d671:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 801d675:	00747874 	rsbseq	r7, r4, r4, ror r8
 801d679:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 801d67d:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 801d681:	61747320 	cmnvs	r4, r0, lsr #6
 801d685:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 801d689:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d68d:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d691:	252f6425 	strcs	r6, [pc, #-1061]!	; 801d274 <gamma25_5+0x1c>
 801d695:	63252064 			; <UNDEFINED> instruction: 0x63252064
 801d699:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 801d69d:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d6a1:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d6a5:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 801d6a9:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 801d6ad:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d6b1:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801d6b5:	46006425 	strmi	r6, [r0], -r5, lsr #8
 801d6b9:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 801d6bd:	20657261 	rsbcs	r7, r5, r1, ror #4
 801d6c1:	2a2e2556 	bcs	8ba6c21 <__exidx_end+0xb87b95>
 801d6c5:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 801d6c9:	72205043 	eorvc	r5, r0, #67	; 0x43
 801d6cd:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 801d6d1:	00676e69 	rsbeq	r6, r7, r9, ror #28
 801d6d5:	50434844 	subpl	r4, r3, r4, asr #16
 801d6d9:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 801d6dd:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 801d6e1:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 801d6e5:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 801d6e9:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 801d6ed:	6f647475 	svcvs	0x00647475
 801d6f1:	 	stmdahi	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}

0801d6f4 <pArray>:
 801d6f4:	0801d788 	stmdaeq	r1, {r3, r7, r8, r9, sl, ip, lr, pc}
 801d6f8:	0801d744 	stmdaeq	r1, {r2, r6, r8, r9, sl, ip, lr, pc}
 801d6fc:	0801d627 	stmdaeq	r1, {r0, r1, r2, r5, r9, sl, ip, lr, pc}
 801d700:	0801d78e 	stmdaeq	r1, {r1, r2, r3, r7, r8, r9, sl, ip, lr, pc}
 801d704:	0801dd33 	stmdaeq	r1, {r0, r1, r4, r5, r8, sl, fp, ip, lr, pc}
 801d708:	0801d74f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, r9, sl, ip, lr, pc}
 801d70c:	0801c193 	stmdaeq	r1, {r0, r1, r4, r7, r8, lr, pc}
 801d710:	0801d652 	stmdaeq	r1, {r1, r4, r6, r9, sl, ip, lr, pc}
 801d714:	0801db3a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, fp, ip, lr, pc}
 801d718:	0801db4a 	stmdaeq	r1, {r1, r3, r6, r8, r9, fp, ip, lr, pc}
 801d71c:	0801db5a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, fp, ip, lr, pc}
 801d720:	0801db6a 	stmdaeq	r1, {r1, r3, r5, r6, r8, r9, fp, ip, lr, pc}
 801d724:	0801d65b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, sl, ip, lr, pc}
 801d728:	0801dd02 	stmdaeq	r1, {r1, r8, sl, fp, ip, lr, pc}
 801d72c:	0801c1e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, lr, pc}
 801d730:	0801c1fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r8, lr, pc}
 801d734:	0801c216 	stmdaeq	r1, {r1, r2, r4, r9, lr, pc}
 801d738:	0801c22e 	stmdaeq	r1, {r1, r2, r3, r5, r9, lr, pc}
 801d73c:	0801d632 	stmdaeq	r1, {r1, r4, r5, r9, sl, ip, lr, pc}
 801d740:	0801d75c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, sl, ip, lr, pc}

0801d744 <DisplayUdfParamsConst::BOARD_NAME>:
 801d744:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 801d748:	616e5f64 	cmnvs	lr, r4, ror #30
 801d74c:	 	tstvs	r0, sp, ror #10

0801d74f <DisplayUdfParamsConst::ACTIVE_PORTS>:
 801d74f:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801d753:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 801d757:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

0801d75c <DisplayUdfParamsConst::DMX_DIRECTION>:
 801d75c:	5f786d64 	svcpl	0x00786d64
 801d760:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801d764:	6f697463 	svcvs	0x00697463
 801d768:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

0801d76a <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 801d76a:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 801d76e:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801d772:	756f656d 	strbvc	r6, [pc, #-1389]!	; 801d20d <gamma25_0+0xb5>
 801d776:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

0801d778 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 801d778:	70696c66 	rsbvc	r6, r9, r6, ror #24
 801d77c:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 801d780:	61636974 	smcvs	13972	; 0x3694
 801d784:	00796c6c 	rsbseq	r6, r9, ip, ror #24

0801d788 <DisplayUdfParamsConst::TITLE>:
 801d788:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 801d78c:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

0801d78e <DisplayUdfParamsConst::VERSION>:
 801d78e:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801d792:	006e6f69 	rsbeq	r6, lr, r9, ror #30

0801d796 <DisplayUdfParamsConst::FILE_NAME>:
 801d796:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801d79a:	2e79616c 	rpwcsez	f6, f1, #4.0
 801d79e:	00747874 	rsbseq	r7, r4, r4, ror r8

0801d7a2 <DisplayUdfParamsConst::INTENSITY>:
 801d7a2:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 801d7a6:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 801d7aa:	20200079 	eorcs	r0, r0, r9, ror r0
 801d7ae:	4f002020 	svcmi	0x00002020
 801d7b2:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801d7b6:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 801d7ba:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 801d7be:	20632520 	rsbcs	r2, r3, r0, lsr #10
 801d7c2:	4f007325 	svcmi	0x00007325
 801d7c6:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801d7ca:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 801d7ce:	3a64253a 	bcc	9926cbe <__exidx_end+0x1907c32>
 801d7d2:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 801d7d6:	73252063 			; <UNDEFINED> instruction: 0x73252063
 801d7da:	3a632500 	bcc	98e6be2 <__exidx_end+0x18c7b56>
 801d7de:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801d7e2:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801d7e6:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801d7ea:	3a504100 	bcc	942dbf2 <__exidx_end+0x140eb66>
 801d7ee:	00642520 	rsbeq	r2, r4, r0, lsr #10
 801d7f2:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 801d7f6:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 801d7fa:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 801d7fe:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

0801d804 <s_aStorSize>:
 801d804:	00000060 	andeq	r0, r0, r0, rrx
 801d808:	00000090 	muleq	r0, r0, r0
 801d80c:	00000020 	andeq	r0, r0, r0, lsr #32
 801d810:	00000040 	andeq	r0, r0, r0, asr #32
 801d814:	00000060 	andeq	r0, r0, r0, rrx
 801d818:	00000040 	andeq	r0, r0, r0, asr #32
 801d81c:	00000020 	andeq	r0, r0, r0, lsr #32
 801d820:	00000020 	andeq	r0, r0, r0, lsr #32
 801d824:	000001e0 	andeq	r0, r0, r0, ror #3
 801d828:	00000040 	andeq	r0, r0, r0, asr #32
 801d82c:	00000020 	andeq	r0, r0, r0, lsr #32
 801d830:	00000060 	andeq	r0, r0, r0, rrx
 801d834:	00000030 	andeq	r0, r0, r0, lsr r0
 801d838:	00000020 	andeq	r0, r0, r0, lsr #32
 801d83c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 801d840:	00000030 	andeq	r0, r0, r0, lsr r0
 801d844:	00000040 	andeq	r0, r0, r0, asr #32
 801d848:	00000020 	andeq	r0, r0, r0, lsr #32
 801d84c:	00000060 	andeq	r0, r0, r0, rrx
 801d850:	00000020 	andeq	r0, r0, r0, lsr #32
 801d854:	00000400 	andeq	r0, r0, r0, lsl #8
 801d858:	00000020 	andeq	r0, r0, r0, lsr #32
 801d85c:	00000020 	andeq	r0, r0, r0, lsr #32
 801d860:	00000040 	andeq	r0, r0, r0, asr #32
 801d864:	00000060 	andeq	r0, r0, r0, rrx
 801d868:	00000020 	andeq	r0, r0, r0, lsr #32
 801d86c:	00000020 	andeq	r0, r0, r0, lsr #32
 801d870:	000000c0 	andeq	r0, r0, r0, asr #1

0801d874 <vtable for StoreDisplayUdf>:
	...
 801d87c:	08016a19 	stmdaeq	r1, {r0, r3, r4, r9, fp, sp, lr}
 801d880:	08016a65 	stmdaeq	r1, {r0, r2, r5, r6, r9, fp, sp, lr}
 801d884:	08016a41 	stmdaeq	r1, {r0, r6, r9, fp, sp, lr}
 801d888:	08016a1d 	stmdaeq	r1, {r0, r2, r3, r4, r9, fp, sp, lr}

0801d88c <vtable for StoreDmxSend>:
	...
 801d894:	08016a85 	stmdaeq	r1, {r0, r2, r7, r9, fp, sp, lr}
 801d898:	08016ad1 	stmdaeq	r1, {r0, r4, r6, r7, r9, fp, sp, lr}
 801d89c:	08016aad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r9, fp, sp, lr}
 801d8a0:	08016a89 	stmdaeq	r1, {r0, r3, r7, r9, fp, sp, lr}

0801d8a4 <vtable for StoreNetwork>:
	...
 801d8ac:	08016af1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, fp, sp, lr}
 801d8b0:	08016bd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, fp, sp, lr}
 801d8b4:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 801d8b8:	08016bed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, fp, sp, lr}
 801d8bc:	08016b79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, fp, sp, lr}
 801d8c0:	08016b4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, fp, sp, lr}
 801d8c4:	08016b1d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, fp, sp, lr}
 801d8c8:	08016ba5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, fp, sp, lr}
 801d8cc:	08009e39 	stmdaeq	r0, {r0, r3, r4, r5, r9, sl, fp, ip, pc}
 801d8d0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801d8d4:	00000000 	andeq	r0, r0, r0
 801d8d8:	08016af3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, fp, sp, lr}
 801d8dc:	08016be5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, r9, fp, sp, lr}
 801d8e0:	08016b9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, fp, sp, lr}
 801d8e4:	08016b71 	stmdaeq	r1, {r0, r4, r5, r6, r8, r9, fp, sp, lr}
 801d8e8:	08016b45 	stmdaeq	r1, {r0, r2, r6, r8, r9, fp, sp, lr}
 801d8ec:	08016bd1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, fp, sp, lr}
 801d8f0:	08009e61 	stmdaeq	r0, {r0, r5, r6, r9, sl, fp, ip, pc}

0801d8f4 <vtable for StoreRemoteConfig>:
	...
 801d8fc:	08016c25 	stmdaeq	r1, {r0, r2, r5, sl, fp, sp, lr}
 801d900:	08016c71 	stmdaeq	r1, {r0, r4, r5, r6, sl, fp, sp, lr}
 801d904:	08016c4d 	stmdaeq	r1, {r0, r2, r3, r6, sl, fp, sp, lr}
 801d908:	08016c29 	stmdaeq	r1, {r0, r3, r5, sl, fp, sp, lr}
 801d90c:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
 801d910:	76654465 	strbtvc	r4, [r5], -r5, ror #8
 801d914:	3a656369 	bcc	99766c0 <__exidx_end+0x1957634>
 801d918:	206f4e20 	rsbcs	r4, pc, r0, lsr #28
 801d91c:	34325441 	ldrtcc	r5, [r2], #-1089	; 0xfffffbbf
 801d920:	20323343 	eorscs	r3, r2, r3, asr #6
 801d924:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 801d928:	53007832 	movwpl	r7, #2098	; 0x832
 801d92c:	65726f74 	ldrbvs	r6, [r2, #-3956]!	; 0xfffff08c
 801d930:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801d934:	203a6563 	eorscs	r6, sl, r3, ror #10
 801d938:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
 801d93c:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 801d940:	32544120 	subscc	r4, r4, #32, 2
 801d944:	32334334 	eorscc	r4, r3, #52, 6	; 0xd0000000
 801d948:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 801d94c:	6f742068 	svcvs	0x00742068
 801d950:	206c6174 	rsbcs	r6, ip, r4, ror r1
 801d954:	62207525 	eorvs	r7, r0, #155189248	; 0x9400000
 801d958:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 801d95c:	75255b20 	strvc	r5, [r5, #-2848]!	; 0xfffff4e0
 801d960:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 801d964:	0000000a 	andeq	r0, r0, sl

0801d968 <vtable for StoreArtNet>:
	...
 801d970:	08016e13 	stmdaeq	r1, {r0, r1, r4, r9, sl, fp, sp, lr}
 801d974:	080170a1 	stmdaeq	r1, {r0, r5, r7, ip, sp, lr}
 801d978:	08016e19 	stmdaeq	r1, {r0, r3, r4, r9, sl, fp, sp, lr}
 801d97c:	08017081 	stmdaeq	r1, {r0, r7, ip, sp, lr}
 801d980:	08016fcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, sl, fp, sp, lr}
 801d984:	08016f9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, sl, fp, sp, lr}
 801d988:	08016f71 	stmdaeq	r1, {r0, r4, r5, r6, r8, r9, sl, fp, sp, lr}
 801d98c:	08016e3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, sl, fp, sp, lr}
 801d990:	08016e85 	stmdaeq	r1, {r0, r2, r7, r9, sl, fp, sp, lr}
 801d994:	08016eb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r9, sl, fp, sp, lr}
 801d998:	08016ee9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, sl, fp, sp, lr}
 801d99c:	08016f2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, sl, fp, sp, lr}
 801d9a0:	08017001 	stmdaeq	r1, {r0, ip, sp, lr}
 801d9a4:	08016e0f 	stmdaeq	r1, {r0, r1, r2, r3, r9, sl, fp, sp, lr}
 801d9a8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801d9ac:	00000000 	andeq	r0, r0, r0
 801d9b0:	08016e15 	stmdaeq	r1, {r0, r2, r4, r9, sl, fp, sp, lr}
 801d9b4:	080170ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, ip, sp, lr}
 801d9b8:	08016ff9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 801d9bc:	08016fc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, sl, fp, sp, lr}
 801d9c0:	08016f95 	stmdaeq	r1, {r0, r2, r4, r7, r8, r9, sl, fp, sp, lr}
 801d9c4:	08016e7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r9, sl, fp, sp, lr}
 801d9c8:	08016ead 	stmdaeq	r1, {r0, r2, r3, r5, r7, r9, sl, fp, sp, lr}
 801d9cc:	08016ee1 	stmdaeq	r1, {r0, r5, r6, r7, r9, sl, fp, sp, lr}
 801d9d0:	08016e11 	stmdaeq	r1, {r0, r4, r9, sl, fp, sp, lr}
 801d9d4:	08016f25 	stmdaeq	r1, {r0, r2, r5, r8, r9, sl, fp, sp, lr}
 801d9d8:	08016f69 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 801d9dc:	08017079 	stmdaeq	r1, {r0, r3, r4, r5, r6, ip, sp, lr}

0801d9e0 <vtable for StoreRDMDevice>:
	...
 801d9e8:	080170d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, ip, sp, lr}
 801d9ec:	08017149 	stmdaeq	r1, {r0, r3, r6, r8, ip, sp, lr}
 801d9f0:	080170e1 	stmdaeq	r1, {r0, r5, r6, r7, ip, sp, lr}
 801d9f4:	0801715d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, ip, sp, lr}
 801d9f8:	08017105 	stmdaeq	r1, {r0, r2, r8, ip, sp, lr}
 801d9fc:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801da00:	00000000 	andeq	r0, r0, r0
 801da04:	080170db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, ip, sp, lr}
 801da08:	08017155 	stmdaeq	r1, {r0, r2, r4, r6, r8, ip, sp, lr}
 801da0c:	08017141 	stmdaeq	r1, {r0, r6, r8, ip, sp, lr}

0801da10 <vtable for StorePixelDmx>:
	...
 801da18:	08017199 	stmdaeq	r1, {r0, r3, r4, r7, r8, ip, sp, lr}
 801da1c:	08017305 	stmdaeq	r1, {r0, r2, r8, r9, ip, sp, lr}
 801da20:	080171a1 	stmdaeq	r1, {r0, r5, r7, r8, ip, sp, lr}
 801da24:	08017319 	stmdaeq	r1, {r0, r3, r4, r8, r9, ip, sp, lr}
 801da28:	080172d1 	stmdaeq	r1, {r0, r4, r6, r7, r9, ip, sp, lr}
 801da2c:	0801729d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r9, ip, sp, lr}
 801da30:	08017265 	stmdaeq	r1, {r0, r2, r5, r6, r9, ip, sp, lr}
 801da34:	0801722d 	stmdaeq	r1, {r0, r2, r3, r5, r9, ip, sp, lr}
 801da38:	080171f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, ip, sp, lr}
 801da3c:	080171c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, ip, sp, lr}
 801da40:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801da44:	00000000 	andeq	r0, r0, r0
 801da48:	0801719b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, ip, sp, lr}
 801da4c:	08017311 	stmdaeq	r1, {r0, r4, r8, r9, ip, sp, lr}
 801da50:	080172fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, ip, sp, lr}
 801da54:	080172c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, ip, sp, lr}
 801da58:	08017295 	stmdaeq	r1, {r0, r2, r4, r7, r9, ip, sp, lr}
 801da5c:	0801725d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r9, ip, sp, lr}
 801da60:	08017225 	stmdaeq	r1, {r0, r2, r5, r9, ip, sp, lr}
 801da64:	080171f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, ip, sp, lr}

0801da68 <DevicesParamsConst::ACTIVE_OUT>:
 801da68:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801da6c:	6f5f6576 	svcvs	0x005f6576
 801da70:	 	smlsdxvs	r0, r5, r4, r7

0801da73 <DevicesParamsConst::GAMMA_VALUE>:
 801da73:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 801da77:	61765f61 	cmnvs	r6, r1, ror #30
 801da7b:	0065756c 	rsbeq	r7, r5, ip, ror #10

0801da7f <DevicesParamsConst::SPI_SPEED_HZ>:
 801da7f:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 801da83:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 801da87:	5f646565 	svcpl	0x00646565
 801da8b:	 	strvc	r7, [r0], #-2664	; 0xfffff598

0801da8e <DevicesParamsConst::TEST_PATTERN>:
 801da8e:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 801da92:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 801da96:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

0801da9b <DevicesParamsConst::GROUPING_COUNT>:
 801da9b:	5f64656c 	svcpl	0x0064656c
 801da9f:	756f7267 	strbvc	r7, [pc, #-615]!	; 801d840 <s_aStorSize+0x3c>
 801daa3:	6f635f70 	svcvs	0x00635f70
 801daa7:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801daab <DevicesParamsConst::GAMMA_CORRECTION>:
 801daab:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 801daaf:	6f635f61 	svcvs	0x00635f61
 801dab3:	63657272 	cmnvs	r5, #536870919	; 0x20000007
 801dab7:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	...

0801dabc <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 801dabc:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 801dac0:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 801dac4:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801dac8:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 801dacc:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

0801dace <DevicesParamsConst::MAP>:
 801dace:	5f64656c 	svcpl	0x0064656c
 801dad2:	5f626772 	svcpl	0x00626772
 801dad6:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 801dada:	00676e69 	rsbeq	r6, r7, r9, ror #28

0801dade <DevicesParamsConst::TYPE>:
 801dade:	5f64656c 	svcpl	0x0064656c
 801dae2:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

0801dae7 <DevicesParamsConst::COUNT>:
 801dae7:	5f64656c 	svcpl	0x0064656c
 801daeb:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801daef:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

0801daf1 <DevicesParamsConst::LED_T0H>:
 801daf1:	5f64656c 	svcpl	0x0064656c
 801daf5:	00683074 	rsbeq	r3, r8, r4, ror r0

0801daf9 <DevicesParamsConst::LED_T1H>:
 801daf9:	5f64656c 	svcpl	0x0064656c
 801dafd:	00683174 	rsbeq	r3, r8, r4, ror r1

0801db01 <DevicesParamsConst::FILE_NAME>:
 801db01:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801db05:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801db09:	00747874 	rsbseq	r7, r4, r4, ror r8
 801db0d:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801db11:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 801db15:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801db19:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801db1d:	002c2264 	eoreq	r2, ip, r4, ror #4
 801db21:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 801db25:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801db29:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801db2d:	0a64252e 	beq	9926fed <__exidx_end+0x1907f61>
 801db31:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 801db35:	0a232073 	beq	88e5d09 <__exidx_end+0x8c6c7d>
	...

0801db3a <LightSetParamsConst::UNIVERSE_PORT>:
 801db3a:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801db3e:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801db42:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801db46:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801db4a:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801db4e:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801db52:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801db56:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801db5a:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801db5e:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801db62:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801db66:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801db6a:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801db6e:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801db72:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801db76:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801db7a <LightSetParamsConst::START_UNI_PORT>:
 801db7a:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801db7e:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801db82:	6f705f69 	svcvs	0x00705f69
 801db86:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801db8a:	00000000 	andeq	r0, r0, r0
 801db8e:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801db92:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801db96:	6f705f69 	svcvs	0x00705f69
 801db9a:	325f7472 	subscc	r7, pc, #1912602624	; 0x72000000
 801db9e:	00000000 	andeq	r0, r0, r0
 801dba2:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dba6:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dbaa:	6f705f69 	svcvs	0x00705f69
 801dbae:	335f7472 	cmpcc	pc, #1912602624	; 0x72000000
 801dbb2:	00000000 	andeq	r0, r0, r0
 801dbb6:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dbba:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dbbe:	6f705f69 	svcvs	0x00705f69
 801dbc2:	345f7472 	ldrbcc	r7, [pc], #-1138	; 801dbca <LightSetParamsConst::START_UNI_PORT+0x50>
 801dbc6:	00000000 	andeq	r0, r0, r0
 801dbca:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dbce:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dbd2:	6f705f69 	svcvs	0x00705f69
 801dbd6:	355f7472 	ldrbcc	r7, [pc, #-1138]	; 801d76c <DisplayUdfParamsConst::SLEEP_TIMEOUT+0x2>
 801dbda:	00000000 	andeq	r0, r0, r0
 801dbde:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dbe2:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dbe6:	6f705f69 	svcvs	0x00705f69
 801dbea:	365f7472 			; <UNDEFINED> instruction: 0x365f7472
 801dbee:	00000000 	andeq	r0, r0, r0
 801dbf2:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dbf6:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dbfa:	6f705f69 	svcvs	0x00705f69
 801dbfe:	375f7472 			; <UNDEFINED> instruction: 0x375f7472
 801dc02:	00000000 	andeq	r0, r0, r0
 801dc06:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dc0a:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dc0e:	6f705f69 	svcvs	0x00705f69
 801dc12:	385f7472 	ldmdacc	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 801dc16:	00000000 	andeq	r0, r0, r0
 801dc1a:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dc1e:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dc22:	6f705f69 	svcvs	0x00705f69
 801dc26:	395f7472 	ldmdbcc	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 801dc2a:	00000000 	andeq	r0, r0, r0
 801dc2e:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dc32:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dc36:	6f705f69 	svcvs	0x00705f69
 801dc3a:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801dc3e:	00000030 	andeq	r0, r0, r0, lsr r0
 801dc42:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dc46:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dc4a:	6f705f69 	svcvs	0x00705f69
 801dc4e:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801dc52:	00000031 	andeq	r0, r0, r1, lsr r0
 801dc56:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dc5a:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dc5e:	6f705f69 	svcvs	0x00705f69
 801dc62:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801dc66:	00000032 	andeq	r0, r0, r2, lsr r0
 801dc6a:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dc6e:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dc72:	6f705f69 	svcvs	0x00705f69
 801dc76:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801dc7a:	00000033 	andeq	r0, r0, r3, lsr r0
 801dc7e:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dc82:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dc86:	6f705f69 	svcvs	0x00705f69
 801dc8a:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801dc8e:	00000034 	andeq	r0, r0, r4, lsr r0
 801dc92:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dc96:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dc9a:	6f705f69 	svcvs	0x00705f69
 801dc9e:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801dca2:	00000035 	andeq	r0, r0, r5, lsr r0
 801dca6:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dcaa:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801dcae:	6f705f69 	svcvs	0x00705f69
 801dcb2:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801dcb6:	00000036 	andeq	r0, r0, r6, lsr r0

0801dcba <LightSetParamsConst::MERGE_MODE_PORT>:
 801dcba:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801dcbe:	6f6d5f65 	svcvs	0x006d5f65
 801dcc2:	705f6564 	subsvc	r6, pc, r4, ror #10
 801dcc6:	5f74726f 	svcpl	0x0074726f
 801dcca:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 801dcce:	5f656772 	svcpl	0x00656772
 801dcd2:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 801dcd6:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801dcda:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801dcde:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801dce2:	6f6d5f65 	svcvs	0x006d5f65
 801dce6:	705f6564 	subsvc	r6, pc, r4, ror #10
 801dcea:	5f74726f 	svcpl	0x0074726f
 801dcee:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 801dcf2:	5f656772 	svcpl	0x00656772
 801dcf6:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 801dcfa:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801dcfe:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801dd02 <LightSetParamsConst::DMX_START_ADDRESS>:
 801dd02:	5f786d64 	svcpl	0x00786d64
 801dd06:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801dd0a:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 801dd0e:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 801dd12:	 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^

0801dd14 <LightSetParamsConst::DISABLE_MERGE_TIMEOUT>:
 801dd14:	61736964 	cmnvs	r3, r4, ror #18
 801dd18:	5f656c62 	svcpl	0x00656c62
 801dd1c:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801dd20:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 801dd24:	756f656d 	strbvc	r6, [pc, #-1389]!	; 801d7bf <DisplayUdfParamsConst::INTENSITY+0x1d>
 801dd28:	 	smcvs	24580	; 0x6004

0801dd2a <LightSetParamsConst::FAILSAFE>:
 801dd2a:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 801dd2e:	65666173 	strbvs	r6, [r6, #-371]!	; 0xfffffe8d
	...

0801dd33 <LightSetParamsConst::UNIVERSE>:
 801dd33:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801dd37:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

0801dd3c <LightSetParamsConst::DIRECTION>:
 801dd3c:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801dd40:	6f697463 	svcvs	0x00697463
 801dd44:	6f705f6e 	svcvs	0x00705f6e
 801dd48:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 801dd4c:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 801dd50:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801dd54:	5f6e6f69 	svcpl	0x006e6f69
 801dd58:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801dd5c:	0000625f 	andeq	r6, r0, pc, asr r2
 801dd60:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801dd64:	6f697463 	svcvs	0x00697463
 801dd68:	6f705f6e 	svcvs	0x00705f6e
 801dd6c:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 801dd70:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 801dd74:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801dd78:	5f6e6f69 	svcpl	0x006e6f69
 801dd7c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801dd80:	0000645f 	andeq	r6, r0, pc, asr r4
 801dd84:	39494c49 	stmdbcc	r9, {r0, r3, r6, sl, fp, lr}^
 801dd88:	20313433 	eorscs	r3, r1, r3, lsr r4
 801dd8c:	64252800 	strtvs	r2, [r5], #-2048	; 0xfffff800
 801dd90:	2964252c 	stmdbcs	r4!, {r2, r3, r5, r8, sl, sp}^
 801dd94:	0000000a 	andeq	r0, r0, sl

0801dd98 <vtable for ILI9341>:
	...
 801dda0:	08017a31 	stmdaeq	r1, {r0, r4, r5, r9, fp, ip, sp, lr}
 801dda4:	08017a45 	stmdaeq	r1, {r0, r2, r6, r9, fp, ip, sp, lr}
 801dda8:	08017aa9 	stmdaeq	r1, {r0, r3, r5, r7, r9, fp, ip, sp, lr}

0801ddac <ASCII16x24_Table>:
	...
 801dddc:	01800000 	orreq	r0, r0, r0
 801dde0:	01800180 	orreq	r0, r0, r0, lsl #3
 801dde4:	01800180 	orreq	r0, r0, r0, lsl #3
 801dde8:	01800180 	orreq	r0, r0, r0, lsl #3
 801ddec:	01800180 	orreq	r0, r0, r0, lsl #3
 801ddf0:	01800180 	orreq	r0, r0, r0, lsl #3
 801ddf4:	01800180 	orreq	r0, r0, r0, lsl #3
 801ddf8:	00000000 	andeq	r0, r0, r0
 801ddfc:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 801de10:	00cc00cc 	sbceq	r0, ip, ip, asr #1
 801de14:	00cc00cc 	sbceq	r0, ip, ip, asr #1
 801de18:	00cc00cc 	sbceq	r0, ip, ip, asr #1
	...
 801de48:	0c600c60 	stcleq	12, cr0, [r0], #-384	; 0xfffffe80
 801de4c:	06300c60 	ldrteq	r0, [r0], -r0, ror #24
 801de50:	1ffe0630 	svcne	0x00fe0630
 801de54:	06301ffe 	shsub8eq	r1, r0, lr
 801de58:	03180738 	tsteq	r8, #56, 14	; 0xe00000
 801de5c:	1ffe1ffe 	svcne	0x00fe1ffe
 801de60:	03180318 	tsteq	r8, #24, 6	; 0x60000000
 801de64:	018c018c 	orreq	r0, ip, ip, lsl #3
 801de68:	0000018c 	andeq	r0, r0, ip, lsl #3
 801de6c:	00800000 	addeq	r0, r0, r0
 801de70:	0ff803e0 	svceq	0x00f803e0
 801de74:	1c8c0e9c 	stcne	14, cr0, [ip], {156}	; 0x9c
 801de78:	008c188c 	addeq	r1, ip, ip, lsl #17
 801de7c:	01f80098 			; <UNDEFINED> instruction: 0x01f80098
 801de80:	0e8007e0 	cdpeq	7, 8, cr0, cr0, cr0, {7}
 801de84:	188c1c80 	stmne	ip, {r7, sl, fp, ip}
 801de88:	189c188c 	ldmne	ip, {r2, r3, r7, fp, ip}
 801de8c:	0ff00cb8 	svceq	0x00f00cb8
 801de90:	008003e0 	addeq	r0, r0, r0, ror #7
 801de94:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 801dea0:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
 801dea4:	0c110c1b 	ldceq	12, cr0, [r1], {27}
 801dea8:	06110611 			; <UNDEFINED> instruction: 0x06110611
 801deac:	03110311 	tsteq	r1, #1140850688	; 0x44000000
 801deb0:	018e019b 			; <UNDEFINED> instruction: 0x018e019b
 801deb4:	6cc038c0 	stclvs	8, cr3, [r0], {192}	; 0xc0
 801deb8:	44604460 	strbtmi	r4, [r0], #-1120	; 0xfffffba0
 801debc:	44304430 	ldrtmi	r4, [r0], #-1072	; 0xfffffbd0
 801dec0:	6c184418 	cfldrsvs	mvf4, [r8], {24}
 801dec4:	0000380c 	andeq	r3, r0, ip, lsl #16
 801dec8:	00000000 	andeq	r0, r0, r0
 801decc:	01e00000 	mvneq	r0, r0
 801ded0:	073803f0 			; <UNDEFINED> instruction: 0x073803f0
 801ded4:	06180618 			; <UNDEFINED> instruction: 0x06180618
 801ded8:	01f00330 	mvnseq	r0, r0, lsr r3
 801dedc:	00f800f0 	ldrshteq	r0, [r8], #0
 801dee0:	330e319c 	movwcc	r3, #57756	; 0xe19c
 801dee4:	1c061e06 	stcne	14, cr1, [r6], {6}
 801dee8:	3f061c06 	svccc	0x00061c06
 801deec:	21f073fc 	ldrshcs	r7, [r0, #60]!	; 0x3c
	...
 801df00:	000c000c 	andeq	r0, ip, ip
 801df04:	000c000c 	andeq	r0, ip, ip
 801df08:	000c000c 	andeq	r0, ip, ip
	...
 801df2c:	02000000 	andeq	r0, r0, #0
 801df30:	01800300 	orreq	r0, r0, r0, lsl #6
 801df34:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801df38:	00600060 	rsbeq	r0, r0, r0, rrx
 801df3c:	00300030 	eorseq	r0, r0, r0, lsr r0
 801df40:	00300030 	eorseq	r0, r0, r0, lsr r0
 801df44:	00300030 	eorseq	r0, r0, r0, lsr r0
 801df48:	00300030 	eorseq	r0, r0, r0, lsr r0
 801df4c:	00600060 	rsbeq	r0, r0, r0, rrx
 801df50:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801df54:	03000180 	movweq	r0, #384	; 0x180
 801df58:	00000200 	andeq	r0, r0, r0, lsl #4
 801df5c:	00200000 	eoreq	r0, r0, r0
 801df60:	00c00060 	sbceq	r0, r0, r0, rrx
 801df64:	01800180 	orreq	r0, r0, r0, lsl #3
 801df68:	03000300 	movweq	r0, #768	; 0x300
 801df6c:	06000600 	streq	r0, [r0], -r0, lsl #12
 801df70:	06000600 	streq	r0, [r0], -r0, lsl #12
 801df74:	06000600 	streq	r0, [r0], -r0, lsl #12
 801df78:	06000600 	streq	r0, [r0], -r0, lsl #12
 801df7c:	03000300 	movweq	r0, #768	; 0x300
 801df80:	01800180 	orreq	r0, r0, r0, lsl #3
 801df84:	006000c0 	rsbeq	r0, r0, r0, asr #1
 801df88:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 801df98:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801df9c:	07f806d8 	ubfxeq	r0, r8, #13, #25
 801dfa0:	033001e0 	teqeq	r0, #224, 2	; 0x38
 801dfa4:	00000738 	andeq	r0, r0, r8, lsr r7
	...
 801dfc8:	01800180 	orreq	r0, r0, r0, lsl #3
 801dfcc:	01800180 	orreq	r0, r0, r0, lsl #3
 801dfd0:	3ffc0180 	svccc	0x00fc0180
 801dfd4:	01803ffc 	strdeq	r3, [r0, ip]
 801dfd8:	01800180 	orreq	r0, r0, r0, lsl #3
 801dfdc:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 801e00c:	01800000 	orreq	r0, r0, r0
 801e010:	01000180 	smlabbeq	r0, r0, r1, r0
 801e014:	00800100 	addeq	r0, r0, r0, lsl #2
	...
 801e034:	07e007e0 	strbeq	r0, [r0, r0, ror #15]!
	...
 801e06c:	00c00000 	sbceq	r0, r0, r0
 801e070:	000000c0 	andeq	r0, r0, r0, asr #1
	...
 801e07c:	0c000000 	stceq	0, cr0, [r0], {-0}
 801e080:	06000c00 	streq	r0, [r0], -r0, lsl #24
 801e084:	06000600 	streq	r0, [r0], -r0, lsl #12
 801e088:	03000300 	movweq	r0, #768	; 0x300
 801e08c:	03800300 	orreq	r0, r0, #0, 6
 801e090:	01800180 	orreq	r0, r0, r0, lsl #3
 801e094:	00c00180 	sbceq	r0, r0, r0, lsl #3
 801e098:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801e09c:	00600060 	rsbeq	r0, r0, r0, rrx
	...
 801e0ac:	03e00000 	mvneq	r0, #0
 801e0b0:	0e3807f0 	mrceq	7, 1, r0, cr8, cr0, {7}
 801e0b4:	180c0c18 	stmdane	ip, {r3, r4, sl, fp}
 801e0b8:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 801e0bc:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 801e0c0:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 801e0c4:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 801e0c8:	0e380c18 	mrceq	12, 1, r0, cr8, cr8, {0}
 801e0cc:	03e007f0 	mvneq	r0, #240, 14	; 0x3c00000
	...
 801e0dc:	01000000 	mrseq	r0, (UNDEF: 0)
 801e0e0:	01c00180 	biceq	r0, r0, r0, lsl #3
 801e0e4:	019801f0 			; <UNDEFINED> instruction: 0x019801f0
 801e0e8:	01800188 	orreq	r0, r0, r8, lsl #3
 801e0ec:	01800180 	orreq	r0, r0, r0, lsl #3
 801e0f0:	01800180 	orreq	r0, r0, r0, lsl #3
 801e0f4:	01800180 	orreq	r0, r0, r0, lsl #3
 801e0f8:	01800180 	orreq	r0, r0, r0, lsl #3
 801e0fc:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 801e10c:	03e00000 	mvneq	r0, #0
 801e110:	0c180ff8 	ldceq	15, cr0, [r8], {248}	; 0xf8
 801e114:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 801e118:	18001800 	stmdane	r0, {fp, ip}
 801e11c:	06000c00 	streq	r0, [r0], -r0, lsl #24
 801e120:	01800300 	orreq	r0, r0, r0, lsl #6
 801e124:	006000c0 	rsbeq	r0, r0, r0, asr #1
 801e128:	00180030 	andseq	r0, r8, r0, lsr r0
 801e12c:	1ffc1ffc 	svcne	0x00fc1ffc
	...
 801e13c:	01e00000 	mvneq	r0, r0
 801e140:	0e1807f8 	mrceq	7, 0, r0, cr8, cr8, {7}
 801e144:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 801e148:	06000c00 	streq	r0, [r0], -r0, lsl #24
 801e14c:	07c003c0 	strbeq	r0, [r0, r0, asr #7]
 801e150:	18000c00 	stmdane	r0, {sl, fp}
 801e154:	180c1800 	stmdane	ip, {fp, ip}
 801e158:	0c18180c 	ldceq	8, cr1, [r8], {12}
 801e15c:	03e007f8 	mvneq	r0, #248, 14	; 0x3e00000
	...
 801e16c:	0c000000 	stceq	0, cr0, [r0], {-0}
 801e170:	0f000e00 	svceq	0x00000e00
 801e174:	0d800f00 	stceq	15, cr0, [r0]
 801e178:	0c600cc0 	stcleq	12, cr0, [r0], #-768	; 0xfffffd00
 801e17c:	0c300c60 	ldceq	12, cr0, [r0], #-384	; 0xfffffe80
 801e180:	0c0c0c18 	stceq	12, cr0, [ip], {24}
 801e184:	3ffc3ffc 	svccc	0x00fc3ffc
 801e188:	0c000c00 	stceq	12, cr0, [r0], {-0}
 801e18c:	0c000c00 	stceq	12, cr0, [r0], {-0}
	...
 801e19c:	0ff80000 	svceq	0x00f80000
 801e1a0:	00180ff8 			; <UNDEFINED> instruction: 0x00180ff8
 801e1a4:	000c0018 	andeq	r0, ip, r8, lsl r0
 801e1a8:	07fc03ec 	ldrbeq	r0, [ip, ip, ror #7]!
 801e1ac:	1c000e1c 	stcne	14, cr0, [r0], {28}
 801e1b0:	18001800 	stmdane	r0, {fp, ip}
 801e1b4:	180c1800 	stmdane	ip, {fp, ip}
 801e1b8:	0e180c1c 	mrceq	12, 0, r0, cr8, cr12, {0}
 801e1bc:	03e007f8 	mvneq	r0, #248, 14	; 0x3e00000
	...
 801e1cc:	07c00000 	strbeq	r0, [r0, r0]
 801e1d0:	1c380ff0 	ldcne	15, cr0, [r8], #-960	; 0xfffffc40
 801e1d4:	00181818 	andseq	r1, r8, r8, lsl r8
 801e1d8:	03cc000c 	biceq	r0, ip, #12
 801e1dc:	0e3c0fec 	cdpeq	15, 3, cr0, cr12, cr12, {7}
 801e1e0:	180c1c1c 	stmdane	ip, {r2, r3, r4, sl, fp, ip}
 801e1e4:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 801e1e8:	0e381c18 	mrceq	12, 1, r1, cr8, cr8, {0}
 801e1ec:	03e007f0 	mvneq	r0, #240, 14	; 0x3c00000
	...
 801e1fc:	1ffc0000 	svcne	0x00fc0000
 801e200:	0c001ffc 	stceq	15, cr1, [r0], {252}	; 0xfc
 801e204:	06000600 	streq	r0, [r0], -r0, lsl #12
 801e208:	03800300 	orreq	r0, r0, #0, 6
 801e20c:	01c00180 	biceq	r0, r0, r0, lsl #3
 801e210:	00e000c0 	rsceq	r0, r0, r0, asr #1
 801e214:	00600060 	rsbeq	r0, r0, r0, rrx
 801e218:	00300070 	eorseq	r0, r0, r0, ror r0
 801e21c:	00300030 	eorseq	r0, r0, r0, lsr r0
	...
 801e22c:	03e00000 	mvneq	r0, #0
 801e230:	0e3807f0 	mrceq	7, 1, r0, cr8, cr0, {7}
 801e234:	0c180c18 	ldceq	12, cr0, [r8], {24}
 801e238:	06380c18 			; <UNDEFINED> instruction: 0x06380c18
 801e23c:	07f007f0 			; <UNDEFINED> instruction: 0x07f007f0
 801e240:	180c0c18 	stmdane	ip, {r3, r4, sl, fp}
 801e244:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 801e248:	0c38180c 	ldceq	8, cr1, [r8], #-48	; 0xffffffd0
 801e24c:	03e00ff8 	mvneq	r0, #248, 30	; 0x3e0
	...
 801e25c:	03e00000 	mvneq	r0, #0
 801e260:	0e3807f0 	mrceq	7, 1, r0, cr8, cr0, {7}
 801e264:	180c0c1c 	stmdane	ip, {r2, r3, r4, sl, fp}
 801e268:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 801e26c:	1e381c1c 	mrcne	12, 1, r1, cr8, cr12, {0}
 801e270:	19e01bf8 	stmibne	r0!, {r3, r4, r5, r6, r7, r8, r9, fp, ip}^
 801e274:	0c001800 	stceq	8, cr1, [r0], {-0}
 801e278:	0e1c0c00 	cdpeq	12, 1, cr0, cr12, cr0, {0}
 801e27c:	01f007f8 	ldrsheq	r0, [r0, #120]!	; 0x78
	...
 801e298:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 801e2ac:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 801e2c8:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 801e2dc:	01800180 	orreq	r0, r0, r0, lsl #3
 801e2e0:	01000100 	mrseq	r0, (UNDEF: 16)
 801e2e4:	00000080 	andeq	r0, r0, r0, lsl #1
	...
 801e2fc:	1c001000 	stcne	0, cr1, [r0], {-0}
 801e300:	03e00f80 	mvneq	r0, #128, 30	; 0x200
 801e304:	001800f8 	ldrsheq	r0, [r8], -r8
 801e308:	03e000f8 	mvneq	r0, #248	; 0xf8
 801e30c:	1c000f80 	stcne	15, cr0, [r0], {128}	; 0x80
 801e310:	00001000 	andeq	r1, r0, r0
	...
 801e32c:	00001ff8 	strdeq	r1, [r0], -r8
 801e330:	00000000 	andeq	r0, r0, r0
 801e334:	00001ff8 	strdeq	r1, [r0], -r8
	...
 801e35c:	00380008 	eorseq	r0, r8, r8
 801e360:	07c001f0 			; <UNDEFINED> instruction: 0x07c001f0
 801e364:	18001f00 	stmdane	r0, {r8, r9, sl, fp, ip}
 801e368:	07c01f00 	strbeq	r1, [r0, r0, lsl #30]
 801e36c:	003801f0 	ldrshteq	r0, [r8], -r0
 801e370:	00000008 	andeq	r0, r0, r8
	...
 801e37c:	03e00000 	mvneq	r0, #0
 801e380:	0c180ff8 	ldceq	15, cr0, [r8], {248}	; 0xf8
 801e384:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 801e388:	0c001800 	stceq	8, cr1, [r0], {-0}
 801e38c:	03000600 	movweq	r0, #1536	; 0x600
 801e390:	00c00180 	sbceq	r0, r0, r0, lsl #3
 801e394:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801e398:	00000000 	andeq	r0, r0, r0
 801e39c:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 801e3b0:	181807e0 	ldmdane	r8, {r5, r6, r7, r8, r9, sl}
 801e3b4:	29c22004 	stmibcs	r2, {r2, sp}^
 801e3b8:	44114a22 	ldrmi	r4, [r1], #-2594	; 0xfffff5de
 801e3bc:	44094409 	strmi	r4, [r9], #-1033	; 0xfffffbf7
 801e3c0:	22094409 	andcs	r4, r9, #150994944	; 0x9000000
 801e3c4:	0ce21311 	stcleq	3, cr1, [r2], #68	; 0x44
 801e3c8:	20044002 	andcs	r4, r4, r2
 801e3cc:	07e01818 			; <UNDEFINED> instruction: 0x07e01818
	...
 801e3dc:	03800000 	orreq	r0, r0, #0
 801e3e0:	06c00380 	strbeq	r0, [r0], r0, lsl #7
 801e3e4:	06c006c0 	strbeq	r0, [r0], r0, asr #13
 801e3e8:	0c600c60 	stcleq	12, cr0, [r0], #-384	; 0xfffffe80
 801e3ec:	18301830 	ldmdane	r0!, {r4, r5, fp, ip}
 801e3f0:	3ff81830 	svccc	0x00f81830
 801e3f4:	701c3ff8 			; <UNDEFINED> instruction: 0x701c3ff8
 801e3f8:	600c600c 	andvs	r6, ip, ip
 801e3fc:	c006c006 	andgt	ip, r6, r6
	...
 801e40c:	03fc0000 	mvnseq	r0, #0
 801e410:	0c0c0ffc 	stceq	15, cr0, [ip], {252}	; 0xfc
 801e414:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 801e418:	0c0c180c 	stceq	8, cr1, [ip], {12}
 801e41c:	0ffc07fc 	svceq	0x00fc07fc
 801e420:	300c180c 	andcc	r1, ip, ip, lsl #16
 801e424:	300c300c 	andcc	r3, ip, ip
 801e428:	180c300c 	stmdane	ip, {r2, r3, ip, sp}
 801e42c:	07fc1ffc 			; <UNDEFINED> instruction: 0x07fc1ffc
	...
 801e43c:	07c00000 	strbeq	r0, [r0, r0]
 801e440:	38381ff0 	ldmdacc	r8!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
 801e444:	700c301c 	andvc	r3, ip, ip, lsl r0
 801e448:	00066006 	andeq	r6, r6, r6
 801e44c:	00060006 	andeq	r0, r6, r6
 801e450:	00060006 	andeq	r0, r6, r6
 801e454:	60060006 	andvs	r0, r6, r6
 801e458:	301c700c 	andscc	r7, ip, ip
 801e45c:	07e01ff0 			; <UNDEFINED> instruction: 0x07e01ff0
	...
 801e46c:	03fe0000 	mvnseq	r0, #0
 801e470:	0e060ffe 	mcreq	15, 0, r0, cr6, cr14, {7}
 801e474:	18061806 	stmdane	r6, {r1, r2, fp, ip}
 801e478:	30063006 	andcc	r3, r6, r6
 801e47c:	30063006 	andcc	r3, r6, r6
 801e480:	30063006 	andcc	r3, r6, r6
 801e484:	18063006 	stmdane	r6, {r1, r2, ip, sp}
 801e488:	0e061806 	cdpeq	8, 0, cr1, cr6, cr6, {0}
 801e48c:	03fe0ffe 	mvnseq	r0, #1016	; 0x3f8
	...
 801e49c:	3ffc0000 	svccc	0x00fc0000
 801e4a0:	000c3ffc 	strdeq	r3, [ip], -ip
 801e4a4:	000c000c 	andeq	r0, ip, ip
 801e4a8:	000c000c 	andeq	r0, ip, ip
 801e4ac:	1ffc1ffc 	svcne	0x00fc1ffc
 801e4b0:	000c000c 	andeq	r0, ip, ip
 801e4b4:	000c000c 	andeq	r0, ip, ip
 801e4b8:	000c000c 	andeq	r0, ip, ip
 801e4bc:	3ffc3ffc 	svccc	0x00fc3ffc
	...
 801e4cc:	3ff80000 	svccc	0x00f80000
 801e4d0:	00183ff8 			; <UNDEFINED> instruction: 0x00183ff8
 801e4d4:	00180018 	andseq	r0, r8, r8, lsl r0
 801e4d8:	00180018 	andseq	r0, r8, r8, lsl r0
 801e4dc:	1ff81ff8 	svcne	0x00f81ff8
 801e4e0:	00180018 	andseq	r0, r8, r8, lsl r0
 801e4e4:	00180018 	andseq	r0, r8, r8, lsl r0
 801e4e8:	00180018 	andseq	r0, r8, r8, lsl r0
 801e4ec:	00180018 	andseq	r0, r8, r8, lsl r0
	...
 801e4fc:	0fe00000 	svceq	0x00e00000
 801e500:	783c3ff8 	ldmdavc	ip!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
 801e504:	e006600e 	and	r6, r6, lr
 801e508:	0003c007 	andeq	ip, r3, r7
 801e50c:	fe030003 	cdp2	0, 0, cr0, cr3, cr3, {0}
 801e510:	c003fe03 	andgt	pc, r3, r3, lsl #28
 801e514:	c006c007 	andgt	ip, r6, r7
 801e518:	f03cc00e 			; <UNDEFINED> instruction: 0xf03cc00e
 801e51c:	0fe03ff8 	svceq	0x00e03ff8
	...
 801e52c:	300c0000 	andcc	r0, ip, r0
 801e530:	300c300c 	andcc	r3, ip, ip
 801e534:	300c300c 	andcc	r3, ip, ip
 801e538:	300c300c 	andcc	r3, ip, ip
 801e53c:	3ffc3ffc 	svccc	0x00fc3ffc
 801e540:	300c300c 	andcc	r3, ip, ip
 801e544:	300c300c 	andcc	r3, ip, ip
 801e548:	300c300c 	andcc	r3, ip, ip
 801e54c:	300c300c 	andcc	r3, ip, ip
	...
 801e55c:	01800000 	orreq	r0, r0, r0
 801e560:	01800180 	orreq	r0, r0, r0, lsl #3
 801e564:	01800180 	orreq	r0, r0, r0, lsl #3
 801e568:	01800180 	orreq	r0, r0, r0, lsl #3
 801e56c:	01800180 	orreq	r0, r0, r0, lsl #3
 801e570:	01800180 	orreq	r0, r0, r0, lsl #3
 801e574:	01800180 	orreq	r0, r0, r0, lsl #3
 801e578:	01800180 	orreq	r0, r0, r0, lsl #3
 801e57c:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 801e58c:	06000000 	streq	r0, [r0], -r0
 801e590:	06000600 	streq	r0, [r0], -r0, lsl #12
 801e594:	06000600 	streq	r0, [r0], -r0, lsl #12
 801e598:	06000600 	streq	r0, [r0], -r0, lsl #12
 801e59c:	06000600 	streq	r0, [r0], -r0, lsl #12
 801e5a0:	06000600 	streq	r0, [r0], -r0, lsl #12
 801e5a4:	06180600 	ldreq	r0, [r8], -r0, lsl #12
 801e5a8:	07380618 			; <UNDEFINED> instruction: 0x07380618
 801e5ac:	01e003f0 	strdeq	r0, [r0, #48]!	; 0x30
	...
 801e5bc:	30060000 	andcc	r0, r6, r0
 801e5c0:	0c061806 	stceq	8, cr1, [r6], {6}
 801e5c4:	03060606 	movweq	r0, #26118	; 0x6606
 801e5c8:	00c60186 	sbceq	r0, r6, r6, lsl #3
 801e5cc:	00760066 	rsbseq	r0, r6, r6, rrx
 801e5d0:	018e00de 	ldrdeq	r0, [lr, lr]
 801e5d4:	06060306 	streq	r0, [r6], -r6, lsl #6
 801e5d8:	18060c06 	stmdane	r6, {r1, r2, sl, fp}
 801e5dc:	60063006 	andvs	r3, r6, r6
	...
 801e5ec:	00180000 	andseq	r0, r8, r0
 801e5f0:	00180018 	andseq	r0, r8, r8, lsl r0
 801e5f4:	00180018 	andseq	r0, r8, r8, lsl r0
 801e5f8:	00180018 	andseq	r0, r8, r8, lsl r0
 801e5fc:	00180018 	andseq	r0, r8, r8, lsl r0
 801e600:	00180018 	andseq	r0, r8, r8, lsl r0
 801e604:	00180018 	andseq	r0, r8, r8, lsl r0
 801e608:	00180018 	andseq	r0, r8, r8, lsl r0
 801e60c:	1ff81ff8 	svcne	0x00f81ff8
	...
 801e61c:	e00e0000 	and	r0, lr, r0
 801e620:	f01ef01e 			; <UNDEFINED> instruction: 0xf01ef01e
 801e624:	d836f01e 	ldmdale	r6!, {r1, r2, r3, r4, ip, sp, lr, pc}
 801e628:	d836d836 	ldmdale	r6!, {r1, r2, r4, r5, fp, ip, lr, pc}
 801e62c:	cc66d836 	stclgt	8, cr13, [r6], #-216	; 0xffffff28
 801e630:	cc66cc66 	stclgt	12, cr12, [r6], #-408	; 0xfffffe68
 801e634:	c6c6c6c6 	strbgt	ip, [r6], r6, asr #13
 801e638:	c6c6c6c6 	strbgt	ip, [r6], r6, asr #13
 801e63c:	c386c386 	orrgt	ip, r6, #402653186	; 0x18000002
	...
 801e64c:	300c0000 	andcc	r0, ip, r0
 801e650:	303c301c 	eorscc	r3, ip, ip, lsl r0
 801e654:	306c303c 	rsbcc	r3, ip, ip, lsr r0
 801e658:	30cc306c 	sbccc	r3, ip, ip, rrx
 801e65c:	318c30cc 	orrcc	r3, ip, ip, asr #1
 801e660:	330c330c 	movwcc	r3, #49932	; 0xc30c
 801e664:	360c360c 	strcc	r3, [ip], -ip, lsl #12
 801e668:	3c0c3c0c 	stccc	12, cr3, [ip], {12}
 801e66c:	300c380c 	andcc	r3, ip, ip, lsl #16
	...
 801e67c:	07e00000 	strbeq	r0, [r0, r0]!
 801e680:	381c1ff8 	ldmdacc	ip, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 801e684:	6006700e 	andvs	r7, r6, lr
 801e688:	c003c003 	andgt	ip, r3, r3
 801e68c:	c003c003 	andgt	ip, r3, r3
 801e690:	c003c003 	andgt	ip, r3, r3
 801e694:	6006c003 	andvs	ip, r6, r3
 801e698:	381c700e 	ldmdacc	ip, {r1, r2, r3, ip, sp, lr}
 801e69c:	07e01ff8 			; <UNDEFINED> instruction: 0x07e01ff8
	...
 801e6ac:	0ffc0000 	svceq	0x00fc0000
 801e6b0:	380c1ffc 	stmdacc	ip, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 801e6b4:	300c300c 	andcc	r3, ip, ip
 801e6b8:	300c300c 	andcc	r3, ip, ip
 801e6bc:	1ffc180c 	svcne	0x00fc180c
 801e6c0:	000c07fc 	strdeq	r0, [ip], -ip
 801e6c4:	000c000c 	andeq	r0, ip, ip
 801e6c8:	000c000c 	andeq	r0, ip, ip
 801e6cc:	000c000c 	andeq	r0, ip, ip
	...
 801e6dc:	07e00000 	strbeq	r0, [r0, r0]!
 801e6e0:	381c1ff8 	ldmdacc	ip, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 801e6e4:	6006700e 	andvs	r7, r6, lr
 801e6e8:	c003e003 	andgt	lr, r3, r3
 801e6ec:	c003c003 	andgt	ip, r3, r3
 801e6f0:	c003c003 	andgt	ip, r3, r3
 801e6f4:	6306e007 	movwvs	lr, #24583	; 0x6007
 801e6f8:	3c1c3f0e 	ldccc	15, cr3, [ip], {14}
 801e6fc:	f7e03ff8 			; <UNDEFINED> instruction: 0xf7e03ff8
 801e700:	0000c000 	andeq	ip, r0, r0
	...
 801e70c:	0ffe0000 	svceq	0x00fe0000
 801e710:	38061ffe 	stmdacc	r6, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 801e714:	30063006 	andcc	r3, r6, r6
 801e718:	38063006 	stmdacc	r6, {r1, r2, ip, sp}
 801e71c:	07fe1ffe 			; <UNDEFINED> instruction: 0x07fe1ffe
 801e720:	06060306 	streq	r0, [r6], -r6, lsl #6
 801e724:	18060c06 	stmdane	r6, {r1, r2, sl, fp}
 801e728:	30061806 	andcc	r1, r6, r6, lsl #16
 801e72c:	60063006 	andvs	r3, r6, r6
	...
 801e73c:	03e00000 	mvneq	r0, #0
 801e740:	0c1c0ff8 	ldceq	15, cr0, [ip], {248}	; 0xf8
 801e744:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 801e748:	001c000c 	andseq	r0, ip, ip
 801e74c:	0fe003f8 	svceq	0x00e003f8
 801e750:	38001e00 	stmdacc	r0, {r9, sl, fp, ip}
 801e754:	30063006 	andcc	r3, r6, r6
 801e758:	1c1c300e 	ldcne	0, cr3, [ip], {14}
 801e75c:	07e00ff8 			; <UNDEFINED> instruction: 0x07e00ff8
	...
 801e76c:	7ffe0000 	svcvc	0x00fe0000
 801e770:	01807ffe 	strdeq	r7, [r0, lr]
 801e774:	01800180 	orreq	r0, r0, r0, lsl #3
 801e778:	01800180 	orreq	r0, r0, r0, lsl #3
 801e77c:	01800180 	orreq	r0, r0, r0, lsl #3
 801e780:	01800180 	orreq	r0, r0, r0, lsl #3
 801e784:	01800180 	orreq	r0, r0, r0, lsl #3
 801e788:	01800180 	orreq	r0, r0, r0, lsl #3
 801e78c:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 801e79c:	300c0000 	andcc	r0, ip, r0
 801e7a0:	300c300c 	andcc	r3, ip, ip
 801e7a4:	300c300c 	andcc	r3, ip, ip
 801e7a8:	300c300c 	andcc	r3, ip, ip
 801e7ac:	300c300c 	andcc	r3, ip, ip
 801e7b0:	300c300c 	andcc	r3, ip, ip
 801e7b4:	300c300c 	andcc	r3, ip, ip
 801e7b8:	1818300c 	ldmdane	r8, {r2, r3, ip, sp}
 801e7bc:	07e01ff8 			; <UNDEFINED> instruction: 0x07e01ff8
	...
 801e7cc:	60030000 	andvs	r0, r3, r0
 801e7d0:	30063006 	andcc	r3, r6, r6
 801e7d4:	180c3006 	stmdane	ip, {r1, r2, ip, sp}
 801e7d8:	180c180c 	stmdane	ip, {r2, r3, fp, ip}
 801e7dc:	0c180c18 	ldceq	12, cr0, [r8], {24}
 801e7e0:	06300e38 			; <UNDEFINED> instruction: 0x06300e38
 801e7e4:	07700630 			; <UNDEFINED> instruction: 0x07700630
 801e7e8:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 801e7ec:	01c001c0 	biceq	r0, r0, r0, asr #3
	...
 801e7fc:	60030000 	andvs	r0, r3, r0
 801e800:	61c361c3 	bicvs	r6, r3, r3, asr #3
 801e804:	336661c3 	cmncc	r6, #-1073741776	; 0xc0000030
 801e808:	33663366 	cmncc	r6, #-1744830463	; 0x98000001
 801e80c:	33663366 	cmncc	r6, #-1744830463	; 0x98000001
 801e810:	1b6c3366 	blne	9b2b5b0 <__exidx_end+0x1b0c524>
 801e814:	1b6c1b6c 	blne	9b255cc <__exidx_end+0x1b06540>
 801e818:	1e3c1a2c 	vaddne.f32	s2, s24, s25
 801e81c:	0e380e38 	mrceq	14, 1, r0, cr8, cr8, {1}
	...
 801e82c:	e00f0000 	and	r0, pc, r0
 801e830:	3018700c 	andscc	r7, r8, ip
 801e834:	0c701830 	ldcleq	8, cr1, [r0], #-192	; 0xffffff40
 801e838:	07c00e60 	strbeq	r0, [r0, r0, ror #28]
 801e83c:	03800380 	orreq	r0, r0, #128, 6
 801e840:	06e003c0 	strbteq	r0, [r0], r0, asr #7
 801e844:	1c300c70 	ldcne	12, cr0, [r0], #-448	; 0xfffffe40
 801e848:	300c1818 	andcc	r1, ip, r8, lsl r8
 801e84c:	e007600e 	and	r6, r7, lr
	...
 801e85c:	c0030000 	andgt	r0, r3, r0
 801e860:	300c6006 	andcc	r6, ip, r6
 801e864:	1838381c 	ldmdane	r8!, {r2, r3, r4, fp, ip, sp}
 801e868:	06600c30 			; <UNDEFINED> instruction: 0x06600c30
 801e86c:	03c007e0 	biceq	r0, r0, #224, 14	; 0x3800000
 801e870:	01800180 	orreq	r0, r0, r0, lsl #3
 801e874:	01800180 	orreq	r0, r0, r0, lsl #3
 801e878:	01800180 	orreq	r0, r0, r0, lsl #3
 801e87c:	01800180 	orreq	r0, r0, r0, lsl #3
	...
 801e88c:	7ffc0000 	svcvc	0x00fc0000
 801e890:	60007ffc 	strdvs	r7, [r0], -ip
 801e894:	18003000 	stmdane	r0, {ip, sp}
 801e898:	06000c00 	streq	r0, [r0], -r0, lsl #24
 801e89c:	01800300 	orreq	r0, r0, r0, lsl #6
 801e8a0:	006000c0 	rsbeq	r0, r0, r0, asr #1
 801e8a4:	00180030 	andseq	r0, r8, r0, lsr r0
 801e8a8:	0006000c 	andeq	r0, r6, ip
 801e8ac:	7ffe7ffe 	svcvc	0x00fe7ffe
	...
 801e8bc:	03e00000 	mvneq	r0, #0
 801e8c0:	006003e0 	rsbeq	r0, r0, r0, ror #7
 801e8c4:	00600060 	rsbeq	r0, r0, r0, rrx
 801e8c8:	00600060 	rsbeq	r0, r0, r0, rrx
 801e8cc:	00600060 	rsbeq	r0, r0, r0, rrx
 801e8d0:	00600060 	rsbeq	r0, r0, r0, rrx
 801e8d4:	00600060 	rsbeq	r0, r0, r0, rrx
 801e8d8:	00600060 	rsbeq	r0, r0, r0, rrx
 801e8dc:	00600060 	rsbeq	r0, r0, r0, rrx
 801e8e0:	00600060 	rsbeq	r0, r0, r0, rrx
 801e8e4:	03e00060 	mvneq	r0, #96	; 0x60
 801e8e8:	000003e0 	andeq	r0, r0, r0, ror #7
 801e8ec:	00300000 	eorseq	r0, r0, r0
 801e8f0:	00600030 	rsbeq	r0, r0, r0, lsr r0
 801e8f4:	00600060 	rsbeq	r0, r0, r0, rrx
 801e8f8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801e8fc:	01c000c0 	biceq	r0, r0, r0, asr #1
 801e900:	01800180 	orreq	r0, r0, r0, lsl #3
 801e904:	03000180 	movweq	r0, #384	; 0x180
 801e908:	03000300 	movweq	r0, #768	; 0x300
 801e90c:	06000600 	streq	r0, [r0], -r0, lsl #12
	...
 801e91c:	03e00000 	mvneq	r0, #0
 801e920:	030003e0 	movweq	r0, #992	; 0x3e0
 801e924:	03000300 	movweq	r0, #768	; 0x300
 801e928:	03000300 	movweq	r0, #768	; 0x300
 801e92c:	03000300 	movweq	r0, #768	; 0x300
 801e930:	03000300 	movweq	r0, #768	; 0x300
 801e934:	03000300 	movweq	r0, #768	; 0x300
 801e938:	03000300 	movweq	r0, #768	; 0x300
 801e93c:	03000300 	movweq	r0, #768	; 0x300
 801e940:	03000300 	movweq	r0, #768	; 0x300
 801e944:	03e00300 	mvneq	r0, #0, 6
 801e948:	000003e0 	andeq	r0, r0, r0, ror #7
 801e94c:	00000000 	andeq	r0, r0, r0
 801e950:	01c001c0 	biceq	r0, r0, r0, asr #3
 801e954:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 801e958:	06300360 	ldrteq	r0, [r0], -r0, ror #6
 801e95c:	0c180630 	ldceq	6, cr0, [r8], {48}	; 0x30
 801e960:	00000c18 	andeq	r0, r0, r8, lsl ip
	...
 801e99c:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
 801e9a0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
	...
 801e9ac:	000c0000 	andeq	r0, ip, r0
 801e9b0:	000c000c 	andeq	r0, ip, ip
 801e9b4:	000c000c 	andeq	r0, ip, ip
 801e9b8:	0000000c 	andeq	r0, r0, ip
	...
 801e9e8:	07f803f0 			; <UNDEFINED> instruction: 0x07f803f0
 801e9ec:	0c0c0c1c 	stceq	12, cr0, [ip], {28}
 801e9f0:	0ff00f00 	svceq	0x00f00f00
 801e9f4:	0c0c0cf8 	stceq	12, cr0, [ip], {248}	; 0xf8
 801e9f8:	0f1c0c0c 	svceq	0x001c0c0c
 801e9fc:	18f00ff8 	ldmne	r0!, {r3, r4, r5, r6, r7, r8, r9, sl, fp}^
	...
 801ea0c:	00180000 	andseq	r0, r8, r0
 801ea10:	00180018 	andseq	r0, r8, r8, lsl r0
 801ea14:	00180018 	andseq	r0, r8, r8, lsl r0
 801ea18:	0ff803d8 	svceq	0x00f803d8
 801ea1c:	18180c38 	ldmdane	r8, {r3, r4, r5, sl, fp}
 801ea20:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801ea24:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801ea28:	0c381818 	ldceq	8, cr1, [r8], #-96	; 0xffffffa0
 801ea2c:	03d80ff8 	bicseq	r0, r8, #248, 30	; 0x3e0
	...
 801ea48:	07f003c0 	ldrbeq	r0, [r0, r0, asr #7]!
 801ea4c:	0c180e30 	ldceq	14, cr0, [r8], {48}	; 0x30
 801ea50:	00180018 	andseq	r0, r8, r8, lsl r0
 801ea54:	00180018 	andseq	r0, r8, r8, lsl r0
 801ea58:	0e300c18 	mrceq	12, 1, r0, cr0, cr8, {0}
 801ea5c:	03c007f0 	biceq	r0, r0, #240, 14	; 0x3c00000
	...
 801ea6c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 801ea70:	18001800 	stmdane	r0, {fp, ip}
 801ea74:	18001800 	stmdane	r0, {fp, ip}
 801ea78:	1ff01bc0 	svcne	0x00f01bc0
 801ea7c:	18181c30 	ldmdane	r8, {r4, r5, sl, fp, ip}
 801ea80:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801ea84:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801ea88:	1c301818 	ldcne	8, cr1, [r0], #-96	; 0xffffffa0
 801ea8c:	1bc01ff0 	blne	7026a54 <__stack_size+0x7022a54>
	...
 801eaa8:	0ff003c0 	svceq	0x00f003c0
 801eaac:	18180c30 	ldmdane	r8, {r4, r5, sl, fp}
 801eab0:	1ff81ff8 	svcne	0x00f81ff8
 801eab4:	00180018 	andseq	r0, r8, r8, lsl r0
 801eab8:	1c301838 	ldcne	8, cr1, [r0], #-224	; 0xffffff20
 801eabc:	07c00ff0 			; <UNDEFINED> instruction: 0x07c00ff0
	...
 801eacc:	0f800000 	svceq	0x00800000
 801ead0:	00c00fc0 	sbceq	r0, r0, r0, asr #31
 801ead4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ead8:	07f007f0 			; <UNDEFINED> instruction: 0x07f007f0
 801eadc:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eae0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eae4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eae8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eaec:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 801eb08:	0ff80de0 	svceq	0x00f80de0
 801eb0c:	0c0c0e18 	stceq	14, cr0, [ip], {24}
 801eb10:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 801eb14:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 801eb18:	0e180c0c 	cdpeq	12, 1, cr0, cr8, cr12, {0}
 801eb1c:	0de00ff8 	stcleq	15, cr0, [r0, #992]!	; 0x3e0
 801eb20:	0c0c0c00 	stceq	12, cr0, [ip], {-0}
 801eb24:	07f8061c 			; <UNDEFINED> instruction: 0x07f8061c
 801eb28:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 801eb2c:	00180000 	andseq	r0, r8, r0
 801eb30:	00180018 	andseq	r0, r8, r8, lsl r0
 801eb34:	00180018 	andseq	r0, r8, r8, lsl r0
 801eb38:	0ff807d8 	svceq	0x00f807d8
 801eb3c:	18181c38 	ldmdane	r8, {r3, r4, r5, sl, fp, ip}
 801eb40:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801eb44:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801eb48:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801eb4c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
	...
 801eb5c:	00c00000 	sbceq	r0, r0, r0
 801eb60:	000000c0 	andeq	r0, r0, r0, asr #1
 801eb64:	00000000 	andeq	r0, r0, r0
 801eb68:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eb6c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eb70:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eb74:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eb78:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eb7c:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 801eb8c:	00c00000 	sbceq	r0, r0, r0
 801eb90:	000000c0 	andeq	r0, r0, r0, asr #1
 801eb94:	00000000 	andeq	r0, r0, r0
 801eb98:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eb9c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eba0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eba4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eba8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ebac:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ebb0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ebb4:	00f800c0 	rscseq	r0, r8, r0, asr #1
 801ebb8:	00000078 	andeq	r0, r0, r8, ror r0
 801ebbc:	000c0000 	andeq	r0, ip, r0
 801ebc0:	000c000c 	andeq	r0, ip, ip
 801ebc4:	000c000c 	andeq	r0, ip, ip
 801ebc8:	060c0c0c 	streq	r0, [ip], -ip, lsl #24
 801ebcc:	018c030c 	orreq	r0, ip, ip, lsl #6
 801ebd0:	006c00cc 	rsbeq	r0, ip, ip, asr #1
 801ebd4:	019c00fc 	ldrsheq	r0, [ip, ip]
 801ebd8:	030c038c 	movweq	r0, #50060	; 0xc38c
 801ebdc:	0c0c060c 	stceq	6, cr0, [ip], {12}
	...
 801ebec:	00c00000 	sbceq	r0, r0, r0
 801ebf0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ebf4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ebf8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ebfc:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ec00:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ec04:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ec08:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ec0c:	00c000c0 	sbceq	r0, r0, r0, asr #1
	...
 801ec28:	7eff3c7c 	mrcvc	12, 7, r3, cr15, cr12, {3}
 801ec2c:	c183e3c7 	orrgt	lr, r3, r7, asr #7
 801ec30:	c183c183 	orrgt	ip, r3, r3, lsl #3
 801ec34:	c183c183 	orrgt	ip, r3, r3, lsl #3
 801ec38:	c183c183 	orrgt	ip, r3, r3, lsl #3
 801ec3c:	c183c183 	orrgt	ip, r3, r3, lsl #3
	...
 801ec58:	0ff80798 	svceq	0x00f80798
 801ec5c:	18181c38 	ldmdane	r8, {r3, r4, r5, sl, fp, ip}
 801ec60:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801ec64:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801ec68:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801ec6c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
	...
 801ec88:	0ff003c0 	svceq	0x00f003c0
 801ec8c:	18180c30 	ldmdane	r8, {r4, r5, sl, fp}
 801ec90:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801ec94:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801ec98:	0c301818 	ldceq	8, cr1, [r0], #-96	; 0xffffffa0
 801ec9c:	03c00ff0 	biceq	r0, r0, #240, 30	; 0x3c0
	...
 801ecb8:	0ff803d8 	svceq	0x00f803d8
 801ecbc:	18180c38 	ldmdane	r8, {r3, r4, r5, sl, fp}
 801ecc0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801ecc4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801ecc8:	0c381818 	ldceq	8, cr1, [r8], #-96	; 0xffffffa0
 801eccc:	03d80ff8 	bicseq	r0, r8, #248, 30	; 0x3e0
 801ecd0:	00180018 	andseq	r0, r8, r8, lsl r0
 801ecd4:	00180018 	andseq	r0, r8, r8, lsl r0
 801ecd8:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 801ece8:	1ff01bc0 	svcne	0x00f01bc0
 801ecec:	18181c30 	ldmdane	r8, {r4, r5, sl, fp, ip}
 801ecf0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801ecf4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801ecf8:	1c301818 	ldcne	8, cr1, [r0], #-96	; 0xffffffa0
 801ecfc:	1bc01ff0 	blne	7026cc4 <__stack_size+0x7022cc4>
 801ed00:	18001800 	stmdane	r0, {fp, ip}
 801ed04:	18001800 	stmdane	r0, {fp, ip}
 801ed08:	00001800 	andeq	r1, r0, r0, lsl #16
	...
 801ed18:	03f007b0 	mvnseq	r0, #176, 14	; 0x2c00000
 801ed1c:	00300070 	eorseq	r0, r0, r0, ror r0
 801ed20:	00300030 	eorseq	r0, r0, r0, lsr r0
 801ed24:	00300030 	eorseq	r0, r0, r0, lsr r0
 801ed28:	00300030 	eorseq	r0, r0, r0, lsr r0
 801ed2c:	00300030 	eorseq	r0, r0, r0, lsr r0
	...
 801ed48:	03f003e0 	mvnseq	r0, #224, 6	; 0x80000003
 801ed4c:	0c180e38 	ldceq	14, cr0, [r8], {56}	; 0x38
 801ed50:	03f00038 	mvnseq	r0, #56	; 0x38
 801ed54:	0c0007c0 	stceq	7, cr0, [r0], {192}	; 0xc0
 801ed58:	0e380c18 	mrceq	12, 1, r0, cr8, cr8, {0}
 801ed5c:	03e007f0 	mvneq	r0, #240, 14	; 0x3c00000
	...
 801ed70:	00c00080 	sbceq	r0, r0, r0, lsl #1
 801ed74:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ed78:	07f007f0 			; <UNDEFINED> instruction: 0x07f007f0
 801ed7c:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ed80:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ed84:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ed88:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801ed8c:	078007c0 	streq	r0, [r0, r0, asr #15]
	...
 801eda8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801edac:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801edb0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801edb4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801edb8:	1c381818 	ldcne	8, cr1, [r8], #-96	; 0xffffffa0
 801edbc:	19e01ff0 	stmibne	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip}^
	...
 801edd8:	0c18180c 	ldceq	8, cr1, [r8], {12}
 801eddc:	0c180c18 	ldceq	12, cr0, [r8], {24}
 801ede0:	06300630 			; <UNDEFINED> instruction: 0x06300630
 801ede4:	03600630 	cmneq	r0, #48, 12	; 0x3000000
 801ede8:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 801edec:	01c001c0 	biceq	r0, r0, r0, asr #3
	...
 801ee08:	41c141c1 	bicmi	r4, r1, r1, asr #3
 801ee0c:	636361c3 	cmnvs	r3, #-1073741776	; 0xc0000030
 801ee10:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 801ee14:	36363636 			; <UNDEFINED> instruction: 0x36363636
 801ee18:	1c1c3636 	ldcne	6, cr3, [ip], {54}	; 0x36
 801ee1c:	1c1c1c1c 	ldcne	12, cr1, [ip], {28}
	...
 801ee38:	1c38381c 	ldcne	8, cr3, [r8], #-112	; 0xffffff90
 801ee3c:	06600c30 			; <UNDEFINED> instruction: 0x06600c30
 801ee40:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 801ee44:	03600360 	cmneq	r0, #96, 6	; 0x80000001
 801ee48:	0c300660 	ldceq	6, cr0, [r0], #-384	; 0xfffffe80
 801ee4c:	381c1c38 	ldmdacc	ip, {r3, r4, r5, sl, fp, ip}
	...
 801ee68:	18303018 	ldmdane	r0!, {r3, r4, ip, sp}
 801ee6c:	18701830 	ldmdane	r0!, {r4, r5, fp, ip}^
 801ee70:	0c600c60 	stcleq	12, cr0, [r0], #-384	; 0xfffffe80
 801ee74:	06c00ce0 	strbeq	r0, [r0], r0, ror #25
 801ee78:	038006c0 	orreq	r0, r0, #192, 12	; 0xc000000
 801ee7c:	03800380 	orreq	r0, r0, #128, 6
 801ee80:	01800180 	orreq	r0, r0, r0, lsl #3
 801ee84:	00f001c0 	rscseq	r0, r0, r0, asr #3
 801ee88:	00000070 	andeq	r0, r0, r0, ror r0
	...
 801ee98:	1ffc1ffc 	svcne	0x00fc1ffc
 801ee9c:	06000c00 	streq	r0, [r0], -r0, lsl #24
 801eea0:	01800300 	orreq	r0, r0, r0, lsl #6
 801eea4:	006000c0 	rsbeq	r0, r0, r0, asr #1
 801eea8:	00180030 	andseq	r0, r8, r0, lsr r0
 801eeac:	1ffc1ffc 	svcne	0x00fc1ffc
	...
 801eebc:	03000000 	movweq	r0, #0
 801eec0:	00c00180 	sbceq	r0, r0, r0, lsl #3
 801eec4:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eec8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eecc:	006000c0 	rsbeq	r0, r0, r0, asr #1
 801eed0:	00300060 	eorseq	r0, r0, r0, rrx
 801eed4:	00400060 	subeq	r0, r0, r0, rrx
 801eed8:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eedc:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eee0:	00c000c0 	sbceq	r0, r0, r0, asr #1
 801eee4:	03000180 	movweq	r0, #384	; 0x180
 801eee8:	00000000 	andeq	r0, r0, r0
 801eeec:	01800000 	orreq	r0, r0, r0
 801eef0:	01800180 	orreq	r0, r0, r0, lsl #3
 801eef4:	01800180 	orreq	r0, r0, r0, lsl #3
 801eef8:	01800180 	orreq	r0, r0, r0, lsl #3
 801eefc:	01800180 	orreq	r0, r0, r0, lsl #3
 801ef00:	01800180 	orreq	r0, r0, r0, lsl #3
 801ef04:	01800180 	orreq	r0, r0, r0, lsl #3
 801ef08:	01800180 	orreq	r0, r0, r0, lsl #3
 801ef0c:	01800180 	orreq	r0, r0, r0, lsl #3
 801ef10:	01800180 	orreq	r0, r0, r0, lsl #3
 801ef14:	01800180 	orreq	r0, r0, r0, lsl #3
 801ef18:	00000180 	andeq	r0, r0, r0, lsl #3
 801ef1c:	00600000 	rsbeq	r0, r0, r0
 801ef20:	01c000c0 	biceq	r0, r0, r0, asr #1
 801ef24:	01800180 	orreq	r0, r0, r0, lsl #3
 801ef28:	01800180 	orreq	r0, r0, r0, lsl #3
 801ef2c:	03000180 	movweq	r0, #384	; 0x180
 801ef30:	06000300 	streq	r0, [r0], -r0, lsl #6
 801ef34:	01000300 	mrseq	r0, LR_irq
 801ef38:	01800180 	orreq	r0, r0, r0, lsl #3
 801ef3c:	01800180 	orreq	r0, r0, r0, lsl #3
 801ef40:	01800180 	orreq	r0, r0, r0, lsl #3
 801ef44:	006000c0 	rsbeq	r0, r0, r0, asr #1
	...
 801ef5c:	1ff810f0 	svcne	0x00f810f0
 801ef60:	00000f08 	andeq	r0, r0, r8, lsl #30
	...

0801ef7c <vtable for Paint>:
	...
 801ef90:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 801ef94:	5b1b006d 	blpl	86df150 <__exidx_end+0x6c00c4>
 801ef98:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 801ef9c:	31335b1b 	teqcc	r3, fp, lsl fp
 801efa0:	5b1b006d 	blpl	86df15c <__exidx_end+0x6c00d0>
 801efa4:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 801efa8:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 801efac:	5b1b006d 	blpl	86df168 <__exidx_end+0x6c00dc>
 801efb0:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 801efb4:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 801efb8:	205d732a 	subscs	r7, sp, sl, lsr #6
 801efbc:	43207325 			; <UNDEFINED> instruction: 0x43207325
 801efc0:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 801efc4:	2064656c 	rsbcs	r6, r4, ip, ror #10
 801efc8:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 801efcc:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 801efd0:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 801efd4:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 801efd8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801efdc:	203a636f 	eorscs	r6, sl, pc, ror #6
 801efe0:	000a7525 	andeq	r7, sl, r5, lsr #10
 801efe4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801efe8:	203a636f 	eorscs	r6, sl, pc, ror #6
 801efec:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 801eff0:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 801eff4:	6b636f6c 	blvs	98fadac <__exidx_end+0x18dbd20>
 801eff8:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 801effc:	000a7469 	andeq	r7, sl, r9, ror #8
 801f000:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801f004:	203a636f 	eorscs	r6, sl, pc, ror #6
 801f008:	6f6c4270 	svcvs	0x006c4270
 801f00c:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 801f010:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 801f014:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 801f018:	7a697320 	bvc	9a7bca0 <__exidx_end+0x1a5cc14>
 801f01c:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 801f020:	6164202c 	cmnvs	r4, ip, lsr #32
 801f024:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 801f028:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 801f02c:	3a656572 	bcc	99785fc <__exidx_end+0x1959570>
 801f030:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 801f034:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801f038:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 801f03c:	203d2072 	eorscs	r2, sp, r2, ror r0
 801f040:	202c7025 	eorcs	r7, ip, r5, lsr #32
 801f044:	6f6c4270 	svcvs	0x006c4270
 801f048:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 801f04c:	0a702520 	beq	9c284d4 <__exidx_end+0x1c09448>
 801f050:	00000000 	andeq	r0, r0, r0

0801f054 <days_of_month>:
 801f054:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f058:	0000001c 	andeq	r0, r0, ip, lsl r0
 801f05c:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f060:	0000001e 	andeq	r0, r0, lr, lsl r0
 801f064:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f068:	0000001e 	andeq	r0, r0, lr, lsl r0
 801f06c:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f070:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f074:	0000001e 	andeq	r0, r0, lr, lsl r0
 801f078:	0000001f 	andeq	r0, r0, pc, lsl r0
 801f07c:	0000001e 	andeq	r0, r0, lr, lsl r0
 801f080:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0801f084 <__exidx_start>:
 801f084:	7ffeb4b4 	svcvc	0x00feb4b4
 801f088:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

0801f08c <.ARM.attributes>:
 801f08c:	00003441 	andeq	r3, r0, r1, asr #8
 801f090:	61656100 	cmnvs	r5, r0, lsl #2
 801f094:	01006962 	tsteq	r0, r2, ror #18
 801f098:	0000002a 	andeq	r0, r0, sl, lsr #32
 801f09c:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 801f0a0:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 801f0a4:	0600344d 	streq	r3, [r0], -sp, asr #8
 801f0a8:	094d070d 	stmdbeq	sp, {r0, r2, r3, r8, r9, sl}^
 801f0ac:	12060a02 	andne	r0, r6, #8192	; 0x2000
 801f0b0:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
 801f0b4:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
 801f0b8:	1b011a01 	blne	80658c4 <__exidx_end+0x46838>
 801f0bc:	22011c01 	andcs	r1, r1, #256	; 0x100
 801f0c0:	Address 0x000000000801f0c0 is out of bounds.


Disassembly of section .data:

20000000 <LLRPDevice::m_nHandleLLRP>:
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <s_nDmxTransmitPeriod>:
20000004:	000061a8 	andeq	r6, r0, r8, lsr #3

20000008 <s_nDmxTransmitMabTime>:
20000008:	0000000c 	andeq	r0, r0, ip

2000000c <s_nDmxTransmitBreakTime>:
2000000c:	0000005c 	andeq	r0, r0, ip, asr r0

20000010 <DmxConfigUdp::s_nHandle>:
20000010:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000014 <s_multicast_mac>:
20000014:	005e0001 	subseq	r0, lr, r1
20000018:	00000000 	andeq	r0, r0, r0

2000001c <MDNS::s_nHandle>:
2000001c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000020 <Font16x24>:
20000020:	0801ddac 	stmdaeq	r1, {r2, r3, r5, r7, r8, sl, fp, ip, lr, pc}
20000024:	00180010 	andseq	r0, r8, r0, lsl r0

20000028 <next_block>:
20000028:	1000a000 	andne	sl, r0, r0

2000002c <s_block_bucket>:
2000002c:	00000010 	andeq	r0, r0, r0, lsl r0
	...
2000003c:	00000020 	andeq	r0, r0, r0, lsr #32
	...
2000004c:	00000040 	andeq	r0, r0, r0, asr #32
	...
2000005c:	00000060 	andeq	r0, r0, r0, rrx
	...
2000006c:	00000080 	andeq	r0, r0, r0, lsl #1
	...
2000007c:	00000100 	andeq	r0, r0, r0, lsl #2
	...
2000008c:	00000140 	andeq	r0, r0, r0, asr #2
	...
2000009c:	00000180 	andeq	r0, r0, r0, lsl #3
	...
200000ac:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000bc:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000cc:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000dc:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000fc <SystemCoreClock>:
200000fc:	0bebc200 	bleq	1faf0904 <_sp+0xfae0904>

Disassembly of section .bss:

20000100 <outptr>:
20000100:	00000000 	andeq	r0, r0, r0

20000104 <RemoteConfig::s_pUdpBuffer>:
20000104:	00000000 	andeq	r0, r0, r0

20000108 <RemoteConfig::s_RemoteConfigListBin>:
	...

2000012c <RemoteConfig::s_pThis>:
2000012c:	00000000 	andeq	r0, r0, r0

20000130 <HttpDaemon::m_Content>:
	...

200006d0 <guard variable for lightset::Data::Get()::instance>:
200006d0:	00000000 	andeq	r0, r0, r0

200006d4 <ArtNetNode::s_pThis>:
200006d4:	00000000 	andeq	r0, r0, r0

200006d8 <s_ReceivingMask>:
200006d8:	00000000 	andeq	r0, r0, r0

200006dc <ip>:
200006dc:	00000000 	andeq	r0, r0, r0

200006e0 <ip>:
200006e0:	00000000 	andeq	r0, r0, r0

200006e4 <s_nPortsMax>:
200006e4:	00000000 	andeq	r0, r0, r0

200006e8 <E131Bridge::s_pThis>:
200006e8:	00000000 	andeq	r0, r0, r0

200006ec <s_ReceivingMask>:
200006ec:	00000000 	andeq	r0, r0, r0

200006f0 <s_nPortsMax>:
200006f0:	00000000 	andeq	r0, r0, r0

200006f4 <LLRPDevice::s_nIpAddressFrom>:
200006f4:	00000000 	andeq	r0, r0, r0

200006f8 <LLRPDevice::m_nIpAddresLLRPRequest>:
200006f8:	00000000 	andeq	r0, r0, r0

200006fc <LLRPDevice::m_nIpAddressLLRPResponse>:
200006fc:	00000000 	andeq	r0, r0, r0

20000700 <LLRPDevice::m_pLLRP>:
20000700:	00000000 	andeq	r0, r0, r0

20000704 <RDMNetDevice::s_RdmCommand>:
	...

20000805 <RDMNetDevice::s_Cid>:
	...

20000818 <RDMSensors::s_pThis>:
20000818:	00000000 	andeq	r0, r0, r0

2000081c <RDMSubDevices::s_pThis>:
2000081c:	00000000 	andeq	r0, r0, r0

20000820 <RDMDeviceResponder::s_pThis>:
20000820:	00000000 	andeq	r0, r0, r0

20000824 <RDMIdentify::m_bIsEnabled>:
	...

20000825 <RDMIdentify::m_nMode>:
20000825:	 	andeq	r0, r0, r0

20000828 <RDMIdentify::s_pThis>:
20000828:	00000000 	andeq	r0, r0, r0

2000082c <DmxSend::s_nStarted>:
2000082c:	00000000 	andeq	r0, r0, r0

20000830 <s_RxBuffer>:
	...

20000c50 <s_TxBuffer>:
	...

20001058 <sv_PortState>:
	...

20001060 <sv_nUartsSending>:
20001060:	00000000 	andeq	r0, r0, r0

20001064 <Dmx::s_pThis>:
20001064:	00000000 	andeq	r0, r0, r0

20001068 <DmxConfigUdp::s_pUdpBuffer>:
20001068:	00000000 	andeq	r0, r0, r0

2000106c <PixelPatterns::m_PortConfig>:
	...

2000126c <PixelPatterns::m_nActivePorts>:
2000126c:	00000000 	andeq	r0, r0, r0

20001270 <PixelPatterns::m_pScannerColours>:
20001270:	00000000 	andeq	r0, r0, r0

20001274 <PixelPatterns::m_nCount>:
20001274:	00000000 	andeq	r0, r0, r0

20001278 <PixelPatterns::m_pOutput>:
20001278:	00000000 	andeq	r0, r0, r0

2000127c <PixelTestPattern::s_pThis>:
2000127c:	00000000 	andeq	r0, r0, r0

20001280 <PixelTestPattern::s_Pattern>:
20001280:	00000000 	andeq	r0, r0, r0

20001284 <sv_isRunning>:
20001284:	00000000 	andeq	r0, r0, r0

20001288 <WS28xxMulti::s_pThis>:
20001288:	00000000 	andeq	r0, r0, r0

2000128c <pixel::s_DmaBuffer>:
	...

2000928c <g_ip_info>:
	...

20009298 <g_mac_address>:
20009298:	00000000 	andeq	r0, r0, r0
	...

2000929e <s_is_dhcp>:
	...

200092a0 <s_p>:
200092a0:	00000000 	andeq	r0, r0, r0

200092a4 <s_ticker>:
200092a4:	00000000 	andeq	r0, r0, r0

200092a8 <s_mac_address>:
	...

200092b0 <s_mac_address_arp_reply>:
	...

200092b8 <broadcast_mask>:
200092b8:	00000000 	andeq	r0, r0, r0

200092bc <gw_ip>:
200092bc:	00000000 	andeq	r0, r0, r0

200092c0 <on_network_mask>:
200092c0:	00000000 	andeq	r0, r0, r0

200092c4 <s_id>:
200092c4:	00000000 	andeq	r0, r0, r0

200092c8 <s_ports_allowed>:
	...

200092e8 <s_recv_queue>:
	...

2000ef88 <s_send_packet>:
	...

2000f574 <MDNS::s_nRemoteIp>:
2000f574:	00000000 	andeq	r0, r0, r0

2000f578 <MDNS::s_nRemotePort>:
2000f578:	00000000 	andeq	r0, r0, r0

2000f57c <MDNS::s_nMulticastIp>:
2000f57c:	00000000 	andeq	r0, r0, r0

2000f580 <MDNS::s_AnswerLocalIp>:
	...

2000f784 <MDNS::s_ServiceRecords>:
	...

2000f7a4 <MDNS::s_nBytesReceived>:
2000f7a4:	00000000 	andeq	r0, r0, r0

2000f7a8 <MDNS::s_ServiceRecordsData>:
	...

2000f9ac <MDNS::s_pName>:
2000f9ac:	00000000 	andeq	r0, r0, r0

2000f9b0 <MDNS::s_pBuffer>:
2000f9b0:	00000000 	andeq	r0, r0, r0

2000f9b4 <Network::s_pThis>:
2000f9b4:	00000000 	andeq	r0, r0, r0

2000f9b8 <s_arp_announce>:
	...

2000f9e4 <s_arp_reply>:
	...

2000fa10 <s_arp_request>:
	...

2000fa3c <s_dhcp_allocated_gw>:
2000fa3c:	00000000 	andeq	r0, r0, r0

2000fa40 <s_dhcp_allocated_ip>:
2000fa40:	00000000 	andeq	r0, r0, r0

2000fa44 <s_dhcp_allocated_netmask>:
2000fa44:	00000000 	andeq	r0, r0, r0

2000fa48 <s_dhcp_message>:
	...

2000fc6c <s_dhcp_server_ip>:
2000fc6c:	00000000 	andeq	r0, r0, r0

2000fc70 <DisplayUdf::s_pThis>:
2000fc70:	00000000 	andeq	r0, r0, r0

2000fc74 <ConfigStore::s_nWaitMillis>:
2000fc74:	00000000 	andeq	r0, r0, r0

2000fc78 <ConfigStore::s_nStartAddress>:
2000fc78:	00000000 	andeq	r0, r0, r0

2000fc7c <ConfigStore::s_bHaveFlashChip>:
2000fc7c:	00000000 	andeq	r0, r0, r0

2000fc80 <ConfigStore::s_nSpiFlashStoreSize>:
2000fc80:	00000000 	andeq	r0, r0, r0

2000fc84 <ConfigStore::s_State>:
2000fc84:	00000000 	andeq	r0, r0, r0

2000fc88 <ConfigStore::s_pThis>:
2000fc88:	00000000 	andeq	r0, r0, r0

2000fc8c <ConfigStore::s_bIsNew>:
2000fc8c:	00000000 	andeq	r0, r0, r0

2000fc90 <StoreDisplayUdf::s_pThis>:
2000fc90:	00000000 	andeq	r0, r0, r0

2000fc94 <StoreDmxSend::s_pThis>:
2000fc94:	00000000 	andeq	r0, r0, r0

2000fc98 <StoreNetwork::s_pThis>:
2000fc98:	00000000 	andeq	r0, r0, r0

2000fc9c <StoreRemoteConfig::s_pThis>:
2000fc9c:	00000000 	andeq	r0, r0, r0

2000fca0 <StoreArtNet::s_nPortIndexOffset>:
2000fca0:	00000000 	andeq	r0, r0, r0

2000fca4 <StoreArtNet::s_pThis>:
2000fca4:	00000000 	andeq	r0, r0, r0

2000fca8 <StoreRDMDevice::s_pThis>:
2000fca8:	00000000 	andeq	r0, r0, r0

2000fcac <StoreE131::s_pThis>:
2000fcac:	00000000 	andeq	r0, r0, r0

2000fcb0 <StorePixelDmx::s_pThis>:
2000fcb0:	00000000 	andeq	r0, r0, r0

2000fcb4 <PropertiesConfig::s_Config>:
2000fcb4:	00000000 	andeq	r0, r0, r0

2000fcb8 <Display::s_pThis>:
2000fcb8:	00000000 	andeq	r0, r0, r0

2000fcbc <s_FrameBuffer>:
	...

2001061c <FirmwareVersion::s_FirmwareVersion>:
	...

20010632 <FirmwareVersion::s_Print>:
	...

20010674 <FirmwareVersion::s_pThis>:
20010674:	00000000 	andeq	r0, r0, r0

20010678 <LedBlink::s_pThis>:
20010678:	00000000 	andeq	r0, r0, r0

2001067c <Hardware::s_pThis>:
2001067c:	00000000 	andeq	r0, r0, r0

20010680 <last.0>:
	...

20010688 <s_micros>:
	...

20010690 <set_timer>:
20010690:	00000000 	andeq	r0, r0, r0

20010694 <s_nSysTickMillis>:
20010694:	00000000 	andeq	r0, r0, r0

20010698 <dma_current_ptp_rxdesc>:
20010698:	00000000 	andeq	r0, r0, r0

2001069c <dma_current_ptp_txdesc>:
2001069c:	00000000 	andeq	r0, r0, r0

200106a0 <dma_current_rxdesc>:
200106a0:	00000000 	andeq	r0, r0, r0

200106a4 <dma_current_txdesc>:
200106a4:	00000000 	andeq	r0, r0, r0

200106a8 <enet_initpara>:
	...

200106e4 <rx_buff>:
	...

2002a79c <rxdesc_tab>:
	...

2002abfc <tx_buff>:
	...

2002db9c <txdesc_tab>:
	...

2002dc1c <s_nAddress>:
	...

2002dc1d <s_nChipSelect>:
2002dc1d:	Address 0x000000002002dc1d is out of bounds.


Disassembly of section .tcmsram:

10000000 <s_tcp>:
	...

100005ec <s_id>:
100005ec:	00000000 	andeq	r0, r0, r0

100005f0 <s_tcb>:
	...

10000634 <s_recv_queue>:
	...

100011a4 <s_entry_current>:
100011a4:	00000000 	andeq	r0, r0, r0

100011a8 <s_arp_records>:
	...

10001328 <s_multicast_mac>:
	...

10001330 <s_report>:
	...

10001360 <s_id>:
10001360:	00000000 	andeq	r0, r0, r0

10001364 <s_leave>:
	...

10001394 <s_groups>:
	...

100014b4 <s_joins_allowed_index>:
100014b4:	00000000 	andeq	r0, r0, r0

Disassembly of section .heap:

1000a000 <heap_low>:
	...

Disassembly of section .stack:

1000c000 <_sp-0x4000>:
	...

Disassembly of section .ramadd:

20030000 <lightset::Data::Get()::instance>:
	...

Disassembly of section .bkpsram:

40024000 <ConfigStore::s_SpiFlashData>:
	...
